package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.RelationshipTypeDto;
import ca.bc.gov.health.hamis.entity.RelationshipType;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.IRelationshipTypeFacade;
import jakarta.ejb.Stateless;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import lombok.val;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Implementation of the IRelationshipTypeFacade interface
 *
 * @author vladimir.dovgalyuk
 */
@Stateless
public class RelationshipTypeFacade extends AbstractFacade<RelationshipType>
    implements IRelationshipTypeFacade {

  private static final Logger LOG = LogManager.getLogger(RelationshipTypeFacade.class);

  public RelationshipTypeFacade() {
    super(RelationshipType.class);
  }

  /**
   * Returns the list of all organization relationships
   *
   * @return List of RelationshipType DTOs
   */
  public List<RelationshipTypeDto> getAll() {
    List<RelationshipTypeDto> result = new ArrayList<>();
    Query query = getEntityManager().createNamedQuery("RelationshipType.findAll");
    List<?> relationshipTypes = query.getResultList();
    for (val relationshipType : relationshipTypes) {
      result.add(HamisMapper.INSTANCE.toDto((RelationshipType) relationshipType));
    }
    return result;
  }

  /**
   * Gets the list of all organization relationships allowed to be used when creating a new Health
   * Service Provider.
   *
   * @return List of RelationshipType DTOs
   */
  @Override
  public List<RelationshipTypeDto> getAllowed() {
    List<RelationshipTypeDto> result = new ArrayList<>();
    Query query = getEntityManager().createNamedQuery("RelationshipType.findAllowed");
    List<?> relationshipTypes = query.getResultList();
    for (val relationshipType : relationshipTypes) {
      result.add(HamisMapper.INSTANCE.toDto((RelationshipType) relationshipType));
    }
    return result;
  }

  /**
   * Loads Relationship Type by code
   *
   * @param code record ID
   * @return RelationshipTypeDto
   */
  @Override
  public RelationshipTypeDto getById(String code) {
    Query query = getEntityManager().createNamedQuery("RelationshipType.findById");
    query.setParameter("id", code);
    RelationshipType rt = (RelationshipType) query.getSingleResult();
    return HamisMapper.INSTANCE.toDto(rt);
  }

  /**
   * Creates new Relationship Type
   *
   * @param value Relationship Type DTO
   */
  @Override
  public void createRelationshipType(RelationshipTypeDto value) {
    LOG.debug("Creating new relationship type");
    RelationshipType relationshipType = HamisMapper.INSTANCE.toModel(value);
    Date d = new Date();
    if (relationshipType.getDateCreated() == null) relationshipType.setDateCreated(d);
    if (relationshipType.getDateModified() == null) relationshipType.setDateModified(d);
    getEntityManager().persist(relationshipType);
    LOG.debug("New account type created");
  }

  /**
   * Updates existing Relationship Type
   *
   * @param value Relationship Type DTO
   */
  @Override
  public void updateRelationshipType(RelationshipTypeDto value) {
    LOG.debug("Updating relationship type");
    RelationshipType type = getEntityManager().find(RelationshipType.class, value.getReltypCode());
    type.setDescription(value.getDescription());
    type.setDefaultPossibleDblCnt(value.getDefaultPossibleDblCnt());
    type.setDateModified(new Date());
    type.setUserModified(value.getUserModified());
    getEntityManager().merge(type);
    LOG.debug("Relationship type updated");
  }

  /**
   * Deletes existing Relationship Type by code
   *
   * @param code Code of Relationship Type to be deleted
   * @return true if Relationship Type can be deleted, false otherwise
   */
  @Override
  public boolean deleteRelationshipType(String code) {
    LOG.debug("Deleting relationship type for code {}", code);

    LOG.debug("Checking for dependencies");
    String sql = "SELECT COUNT(*) FROM ORGANIZATION_RELATIONSHIPS WHERE RELTYP_CODE = ? ";
    Query query = getEntityManager().createNativeQuery(sql);
    query.setParameter(1, code);
    long count = ((BigDecimal) query.getSingleResult()).intValue();
    if (count == 0L) {
      RelationshipType type = getEntityManager().find(RelationshipType.class, code);
      getEntityManager().remove(type);
      LOG.debug("Relationship type deleted");
      return true;
    } else {
      LOG.info("Dependent records found, relationship type with code {} cannot be deleted", code);
      return false;
    }
  }
}
