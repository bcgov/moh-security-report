/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.SubmissionDto;
import ca.bc.gov.health.hamis.entity.Submission;
import ca.bc.gov.health.hamis.service.ISubmissionFacade;
import jakarta.ejb.Stateless;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Facade class for dealing with submissions
 *
 * @author greg.perkins
 */
@Stateless
public class SubmissionFacade extends AbstractFacade<Submission> implements ISubmissionFacade {

  private static final Logger LOGGER = LogManager.getLogger(SubmissionFacade.class);

  /** no-arg constructor */
  public SubmissionFacade() {
    super(Submission.class);
  }

  /**
   * Gets the submissions for a ho & reporting period
   *
   * @param hoId int
   * @param fiscalYear String
   * @param period String
   * @return List<SubmissionDto>
   */
  @Override
  public List<SubmissionDto> getSefValidations(int hoId, String fiscalYear, String period) {
    return getSubmissions(hoId, fiscalYear, period, "VALID");
  }

  /**
   * Gets the number of submissions in progress
   *
   * @param hoId
   * @param fiscalYear
   * @param period
   * @return number of submissions not in ACCPT or SYSER status
   */
  public int getSefValidationsInProgress(int hoId, String fiscalYear, String period) {
    LOGGER.debug(
        "Getting count of validations in progress for org Id {}, FY {}, period {}",
        hoId,
        fiscalYear,
        period);
    return getInProgressCount(hoId, fiscalYear, period, "VALID");
  }

  /**
   * Gets the exports in progress count for a ho & reporting period
   *
   * @param hoId int
   * @param fiscalYear String
   * @param period String
   * @return number of exports not in ACCPT or SYSER status
   */
  @Override
  public int getExportsInProgress(int hoId, String fiscalYear, String period) {
    LOGGER.debug(
        "Getting count of submission exports for org Id {}, FY {}, period {}",
        hoId,
        fiscalYear,
        period);
    return getInProgressCount(hoId, fiscalYear, period, "EXPRT");
  }

  private int getInProgressCount(int hoId, String fiscalYear, String period, String subType) {
    int result = 0;
    if (period == null) return result;
    StringBuilder querySql =
        new StringBuilder("select COUNT(*) from SUBMISSIONS s ")
            .append("WHERE s.HO_ID = ? AND s.FISCAL_YEAR = ? AND s.PERIOD = ? ")
            .append("AND s.STATUS_CD = ? AND s.type_cd not in ('ACCPT', 'REJCT')");
    Query query = getEntityManager().createNativeQuery(querySql.toString());
    query.setParameter(1, hoId);
    query.setParameter(2, fiscalYear);
    query.setParameter(3, period);
    query.setParameter(4, subType);
    result = ((BigDecimal) query.getSingleResult()).intValue();
    return result;
  }

  /**
   * Gets the exports for a ho & reporting period
   *
   * @param hoId int
   * @param fiscalYear String
   * @param period String
   * @return List<SubmissionDto>
   */
  @Override
  public List<SubmissionDto> getExports(int hoId, String fiscalYear, String period) {
    return getSubmissions(hoId, fiscalYear, period, "EXPRT");
  }

  /**
   * Gets the submissions for a ho & reporting period & subtype
   *
   * @param hoId int
   * @param fiscalYear String
   * @param period String
   * @param subType String
   * @return List<SubmissionDto>
   */
  private List<SubmissionDto> getSubmissions(
      int hoId, String fiscalYear, String period, String subType) {
    LOGGER.debug(
        "Getting Submissions for org Id {}, FY {}, period {} and subtype {}",
        hoId,
        fiscalYear,
        period,
        subType);
    List<SubmissionDto> out = new ArrayList<>();
    // Avoid unnecessary calls for NULL periods; PERIOD field is not nullable
    // in the SUBMISSIONS table
    if (period == null) return out;
    String querySql =
        "SELECT s.TYPE_CD, s.STATUS_CD, s.AB_TRXN_TYPE, s.DATE_MODIFIED, sst.DESCRIPTION, st.DESCRIPTION, s.SUB_ID, s.DATE_CREATED "
            + "FROM SUBMISSIONS s, SUBMISSIONS_TYPES st, SUB_STATUS_TYPES sst "
            + "WHERE s.STATUS_CD = st.TYPE_CD AND s.TYPE_CD = sst.TYPE_CD "
            + "AND s.HO_ID = ? AND s.FISCAL_YEAR = ? AND s.PERIOD = ? AND s.STATUS_CD = ? ORDER BY s.DATE_MODIFIED";
    Query query = getEntityManager().createNativeQuery(querySql);
    query.setParameter(1, hoId);
    query.setParameter(2, fiscalYear);
    query.setParameter(3, period);
    query.setParameter(4, subType);
    @SuppressWarnings("unchecked")
    List<Object[]> results = query.getResultList();

    Map<String, SubmissionDto> map = new HashMap<>();
    for (Object[] row : results) {
      SubmissionDto submission = new SubmissionDto();
      submission.setSubmissionsTypeCd((String) row[0]);
      submission.setSubStatusTypeCd((String) row[1]);
      submission.setAbTrxnType((String) row[2]);
      submission.setDateModified((Date) row[3]);
      submission.setSubStatusTypeDesc((String) row[4]);
      submission.setSubmissionsTypeDesc((String) row[5]);
      submission.setSubId(((BigDecimal) row[6]).longValue());
      submission.setDateCreated((Date) row[7]);
      if (!map.containsKey(submission.getAbTrxnType())) {
        map.put(submission.getAbTrxnType(), submission);
      } else {
        if (map.get(submission.getAbTrxnType()).getSubId() < submission.getSubId()) {
          map.put(submission.getAbTrxnType(), submission);
        }
      }
    }
    out.addAll(map.values());
    for (SubmissionDto row : out) {
      if (SubmissionDto.ACCPT.equals(row.getSubmissionsTypeCd())) {
        String messageQuery =
            "SELECT COUNT(*) FROM SUBMISSION_MESSAGES WHERE SUB_ID = ? AND TYPE_CD = 'WARNG'";
        query = getEntityManager().createNativeQuery(messageQuery);
        query.setParameter(1, row.getSubId());
        int count = ((BigDecimal) query.getSingleResult()).intValue();
        if (count > 1) {
          row.setHasWarningMessages(true);
        }
      }
    }

    return out;
  }

  /**
   * Gets the submissions for a ho & reporting period
   *
   * @param hoId int
   * @param fiscalYear String
   * @param period String
   * @return List<SubmissionDto>
   */
  @Override
  public List<SubmissionDto> getSectorValidations(int hoId, String fiscalYear, String period) {
    LOGGER.debug(
        "Getting Sector Validations for org Id {}, FY {} and period {}", hoId, fiscalYear, period);
    String querySql =
        "SELECT COUNT(*) "
            + "FROM SEF_ERROR_MESSAGES seem, STANDARD_EXTRACT_FILES sef, STANDARD_EXTRACT_SOURCES ses, DATA_SUBMITTERS ds\n"
            + "WHERE seem.seem_sf_id = sef.sef_id AND\n"
            + "			 ses.ses_id = sef.ses_id AND\n"
            + "			 ds.ds_id = ses.ds_id AND\n"
            + "			 sef.fiscal_year = ? AND\n"
            + "			 sef.period = ? AND\n"
            + "			 ds.ho_id = ? AND\n"
            + "          seem.ab_trxn_type = ? AND\n"
            + "                  seem.seem_type_cd <> 'WARNG' AND\n"
            + "			 seem.message like 'Sector Validation:%'";
    Query query = getEntityManager().createNativeQuery(querySql);

    query.setParameter(1, fiscalYear);
    query.setParameter(2, period);
    query.setParameter(3, hoId);
    query.setParameter(4, "A");
    int count = ((BigDecimal) query.getSingleResult()).intValue();
    List<SubmissionDto> out = new ArrayList<>();
    SubmissionDto dto = new SubmissionDto();
    dto.setAbTrxnType("A");
    if (count > 0) {
      dto.setSubmissionsTypeCd(SubmissionDto.REJECT);
      dto.setSubmissionsTypeDesc("REJECTED: submission rejected due to critical errors.");
    } else {
      dto.setSubmissionsTypeCd(SubmissionDto.ACCPT);
      dto.setSubmissionsTypeDesc("ACCEPTED: submission accepted.");
    }
    dto.setSectorValidation(true);
    out.add(dto);
    query = getEntityManager().createNativeQuery(querySql);
    query.setParameter(1, fiscalYear);
    query.setParameter(2, period);
    query.setParameter(3, hoId);
    query.setParameter(4, "B");
    count = ((BigDecimal) query.getSingleResult()).intValue();
    dto = new SubmissionDto();
    dto.setAbTrxnType("B");
    if (count > 0) {
      dto.setSubmissionsTypeCd(SubmissionDto.REJECT);
      dto.setSubmissionsTypeDesc("REJECTED: submission rejected due to critical errors.");
    } else {
      dto.setSubmissionsTypeCd(SubmissionDto.ACCPT);
      dto.setSubmissionsTypeDesc("ACCEPTED: submission accepted.");
    }
    dto.setSectorValidation(true);
    out.add(dto);
    return out;
  }
}
