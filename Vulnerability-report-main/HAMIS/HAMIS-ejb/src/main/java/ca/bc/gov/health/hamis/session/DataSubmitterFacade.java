/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.DataSubmitterDto;
import ca.bc.gov.health.hamis.entity.DataSubmitter;
import ca.bc.gov.health.hamis.entity.HealthOrganization;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.IDataSubmitterFacade;
import jakarta.ejb.Stateless;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Facade for dealing with Data Submitters
 *
 * @author greg.perkins
 */
@Stateless
public class DataSubmitterFacade extends AbstractFacade<DataSubmitter>
    implements IDataSubmitterFacade {

  private static final Logger LOG = LogManager.getLogger(DataSubmitterFacade.class);

  /** no-arg constructor */
  public DataSubmitterFacade() {
    super(DataSubmitter.class);
  }

  /**
   * Returns all data submitters
   *
   * @return List
   */
  @Override
  public List<DataSubmitterDto> getAllDataSubmitters() {
    return getAllDataSubmittersForHealthOrganization(0);
  }

  /**
   * Returns all the data submitters for a given HO
   *
   * @param hoId int
   * @return List
   */
  @Override
  public List<DataSubmitterDto> getAllDataSubmittersForHealthOrganization(int hoId) {
    LOG.debug("Loading data submitters for HO_ID: " + hoId);
    String queryStr =
        "SELECT ds.USER_ID, ds.NAME, ds.EFF_DT, ds.TELEPHONE_NUMBER, ds.EMAIL_ADDRESS, ho.CURRENT_NAME, ds.HO_ID, ds.DS_ID, ds.USERNAME "
            + "FROM DATA_SUBMITTERS ds, HEALTH_ORGANIZATIONS ho "
            + "WHERE ds.ho_id = ho.HO_ID "
            + "AND ds.END_DT IS NULL ";
    if (hoId > 0) {
      queryStr += "AND ds.HO_ID = ? ";
    }
    queryStr += "ORDER BY ds.USER_ID";

    Query query = getEntityManager().createNativeQuery(queryStr);
    if (hoId > 0) {
      query.setParameter(1, hoId);
    }
    List<Object[]> results = query.getResultList();
    List<DataSubmitterDto> out = new ArrayList<>();
    for (Object[] row : results) {
      DataSubmitterDto dto = new DataSubmitterDto();
      dto.setUserId((String) row[0]);
      dto.setName((String) row[1]);
      dto.setEffDt((Date) row[2]);
      dto.setTelephoneNumber((String) row[3]);
      dto.setEmailAddress((String) row[4]);
      dto.setHealthOrganization((String) row[5]);
      dto.setHoId(((BigDecimal) row[6]).longValue());
      dto.setDsId(((BigDecimal) row[7]).longValue());
      dto.setUsername((String) row[8]);
      out.add(dto);
    }
    return out;
  }

  /**
   * Assigns a data submitter
   *
   * @param dto DataSubmitterDto
   */
  @Override
  public void assignDataSubmitter(DataSubmitterDto dto) {
    LOG.debug("Assigning Data Submitter: " + dto.getName());
    Query q =
        getEntityManager()
            .createQuery(
                "SELECT ds FROM DataSubmitter ds WHERE ds.userId = :userId", DataSubmitter.class);
    q.setParameter("userId", dto.getUserId().toUpperCase());

    List<DataSubmitter> results = q.getResultList();
    DataSubmitter ds = null;
    if (results.size() > 0) {
      ds = results.get(0);
    }
    if (ds != null) {
      LOG.debug("Existing Data Submitter found - updating");
      ds.setEndDt(null);
      ds.setDeactiveDt(null);
      ds.setName(dto.getName());
      ds.setEmailAddress(dto.getEmailAddress());
      ds.setTelephoneNumber(dto.getTelephoneNumber());
      ds.setEffDt(new Date());
      HealthOrganization ho = new HealthOrganization();
      ho.setHoId(dto.getHoId());
      ds.setHealthOrganization(ho);
      getEntityManager().merge(ds);
    } else {
      LOG.debug("No Data Submitter found - inserting");
      ds = new DataSubmitter();
      ds.setUserId(dto.getUserId());
      ds.setUsername(dto.getUsername());
      ds.setName(dto.getName());
      ds.setEmailAddress(dto.getEmailAddress());
      ds.setTelephoneNumber(dto.getTelephoneNumber());
      ds.setEffDt(new Date());
      ds.setEndDt(null);
      ds.setDeactiveDt(null);
      ds.setBusinessRole("ADMIN");
      HealthOrganization ho = new HealthOrganization();
      ho.setHoId(dto.getHoId());
      ds.setHealthOrganization(ho);
      getEntityManager().persist(ds);
    }
    getEntityManager().flush();
  }

  /**
   * Removes a data submitter
   *
   * @param dto DataSubmitterDto
   */
  @Override
  public void removeDataSubmitter(DataSubmitterDto dto) {
    LOG.debug("Removing Data Submitter");
    DataSubmitter ds = getEntityManager().find(DataSubmitter.class, dto.getDsId());
    ds.setEndDt(new Date());
    getEntityManager().merge(ds);
    getEntityManager().flush();
  }

  /**
   * Determines the health organization for a data submitter
   *
   * @param userId String
   * @return int
   */
  @Override
  public int getHealthOrganizationForDataSubmitter(String userId) {
    LOG.debug("Finding Health Authority for Data Submitter");
    String queryStr =
        "SELECT ds.ho_id FROM DATA_SUBMITTERS ds WHERE ds.USER_ID = UPPER(?) AND ds.END_DT IS NULL";
    Query query = getEntityManager().createNativeQuery(queryStr);
    query.setParameter(1, userId.toUpperCase());
    List results = query.getResultList();
    if (results.size() == 0) {
      return 0;
    } else {
      BigDecimal result = (BigDecimal) results.get(0);
      return result.intValue();
    }
  }
  /**
   * Gets a data submitter by user ID.
   *
   * @param userId
   * @return DataSubmitterDto
   */
  @Override
  public DataSubmitterDto getDataSubmitterByUserId(String userId) {
    LOG.debug("Get Data Submitter");
    String queryStr =
        "SELECT ds FROM DataSubmitter ds WHERE upper(ds.userId) = :userId AND ds.endDt is NULL";
    Query query = getEntityManager().createQuery(queryStr, DataSubmitter.class);
    query.setParameter("userId", userId.toUpperCase());
    List results = query.getResultList();
    if (results.size() > 0) {
      DataSubmitterDto dto = HamisMapper.INSTANCE.toDto((DataSubmitter) results.get(0));
      return dto;
    } else {
      return null;
    }
  }
}
