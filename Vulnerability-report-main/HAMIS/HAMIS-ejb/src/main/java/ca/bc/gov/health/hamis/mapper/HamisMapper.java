package ca.bc.gov.health.hamis.mapper;

import ca.bc.gov.health.hamis.dto.AccountTypeDto;
import ca.bc.gov.health.hamis.dto.CustomAccountDto;
import ca.bc.gov.health.hamis.dto.CustomAccountGroupingDto;
import ca.bc.gov.health.hamis.dto.DataQualityProviderTypeDto;
import ca.bc.gov.health.hamis.dto.DataSubmitterDto;
import ca.bc.gov.health.hamis.dto.ExternalReportDto;
import ca.bc.gov.health.hamis.dto.FiscalYearDto;
import ca.bc.gov.health.hamis.dto.FundTypeDto;
import ca.bc.gov.health.hamis.dto.HealthAuthorityTypeDto;
import ca.bc.gov.health.hamis.dto.HealthOrganizationDto;
import ca.bc.gov.health.hamis.dto.IndicatorDto;
import ca.bc.gov.health.hamis.dto.OrganizationRelationshipDto;
import ca.bc.gov.health.hamis.dto.PeerGroupDto;
import ca.bc.gov.health.hamis.dto.PrimaryAccountDto;
import ca.bc.gov.health.hamis.dto.ProviderDefinitionDto;
import ca.bc.gov.health.hamis.dto.ProviderTypeDto;
import ca.bc.gov.health.hamis.dto.RegionalTeamDto;
import ca.bc.gov.health.hamis.dto.RelationshipTypeDto;
import ca.bc.gov.health.hamis.dto.ReportingPeriodDto;
import ca.bc.gov.health.hamis.dto.SecondaryAccountDto;
import ca.bc.gov.health.hamis.dto.SectorTypeDto;
import ca.bc.gov.health.hamis.dto.ServiceTypeDto;
import ca.bc.gov.health.hamis.dto.StandardExtractSourceDto;
import ca.bc.gov.health.hamis.entity.AccountType;
import ca.bc.gov.health.hamis.entity.CustomAccount;
import ca.bc.gov.health.hamis.entity.CustomAccountGrouping;
import ca.bc.gov.health.hamis.entity.DataQualityProviderType;
import ca.bc.gov.health.hamis.entity.DataSubmitter;
import ca.bc.gov.health.hamis.entity.ExternalReport;
import ca.bc.gov.health.hamis.entity.FiscalYear;
import ca.bc.gov.health.hamis.entity.FundType;
import ca.bc.gov.health.hamis.entity.HealthAuthorityType;
import ca.bc.gov.health.hamis.entity.HealthOrganization;
import ca.bc.gov.health.hamis.entity.Indicator;
import ca.bc.gov.health.hamis.entity.MiscoaPrimaryAcct;
import ca.bc.gov.health.hamis.entity.MiscoaSecondaryAcct;
import ca.bc.gov.health.hamis.entity.OrganizationRelationship;
import ca.bc.gov.health.hamis.entity.PeerGroup;
import ca.bc.gov.health.hamis.entity.ProviderDefinition;
import ca.bc.gov.health.hamis.entity.ProviderType;
import ca.bc.gov.health.hamis.entity.RegionalTeam;
import ca.bc.gov.health.hamis.entity.RelationshipType;
import ca.bc.gov.health.hamis.entity.ReportingPeriod;
import ca.bc.gov.health.hamis.entity.SectorType;
import ca.bc.gov.health.hamis.entity.ServiceType;
import ca.bc.gov.health.hamis.entity.StandardExtractSource;
import org.mapstruct.InheritInverseConfiguration;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;
import org.mapstruct.Mappings;
import org.mapstruct.factory.Mappers;

@Mapper
public interface HamisMapper {
  HamisMapper INSTANCE = Mappers.getMapper(HamisMapper.class);

  ExternalReportDto toDto(ExternalReport report);

  @InheritInverseConfiguration
  ExternalReport toModel(ExternalReportDto reportDto);

  FiscalYearDto toDto(FiscalYear fiscalYear);

  @InheritInverseConfiguration
  FiscalYear toModel(FiscalYearDto fiscalYear);

  @Mappings({
    @Mapping(target = "fiscalYear", source = "reportingPeriod.id.fiscalYear"),
    @Mapping(target = "period", source = "reportingPeriod.id.period")
  })
  ReportingPeriodDto toDto(ReportingPeriod reportingPeriod);

  @InheritInverseConfiguration
  ReportingPeriod toModel(ReportingPeriodDto periodDto);

  @Mapping(source = "providerDefinitionsList", target = "providerDefinitions")
  StandardExtractSourceDto toDto(StandardExtractSource sef);

  @InheritInverseConfiguration
  StandardExtractSource toModel(StandardExtractSourceDto sefDto);

  CustomAccountGroupingDto toDto(CustomAccountGrouping cag);

  @InheritInverseConfiguration
  CustomAccountGrouping toModel(CustomAccountGroupingDto cag);

  @Mappings({
    @Mapping(target = "prmyAcctId", source = "mpaId.mpaId"),
    @Mapping(target = "scndryAcctId", source = "msaId.msaId"),
    @Mapping(target = "prmryAcctNumber", source = "mpaId.prmryAcctNumber"),
    @Mapping(target = "scndryAcctNumber", source = "msaId.scndryAcctNumber"),
    @Mapping(target = "prmryAcctName", source = "mpaId.shortName"),
    @Mapping(target = "scndryAcctName", source = "msaId.shortName"),
    @Mapping(target = "prmryValid", source = "mpaId.actionable"),
    @Mapping(target = "scndryValid", source = "msaId.actionable"),
    @Mapping(target = "cagId", source = "customAccountGrouping.cagId")
  })
  CustomAccountDto toDto(CustomAccount ca);

  @InheritInverseConfiguration
  CustomAccount toModel(CustomAccountDto ca);

  @Mappings({@Mapping(target = "sesId", source = "sesId.sesId")})
  ProviderDefinitionDto toDto(ProviderDefinition pd);

  @InheritInverseConfiguration
  ProviderDefinition toModel(ProviderDefinitionDto ca);

  ProviderTypeDto toDto(ProviderType pt);

  @InheritInverseConfiguration
  ProviderType toModel(ProviderTypeDto pt);

  @Mapping(target = "healthOrganization", source = "healthOrganization.currentName")
  DataSubmitterDto toDto(DataSubmitter ds);

  @InheritInverseConfiguration
  DataSubmitter toModel(DataSubmitterDto dto);

  OrganizationRelationshipDto toDto(OrganizationRelationship or);

  @InheritInverseConfiguration
  OrganizationRelationship toModel(OrganizationRelationshipDto dto);

  HealthOrganizationDto toDto(HealthOrganization ho);

  @InheritInverseConfiguration
  HealthOrganization toModel(HealthOrganizationDto dto);

  RelationshipTypeDto toDto(RelationshipType rt);

  @InheritInverseConfiguration
  RelationshipType toModel(RelationshipTypeDto dto);

  PeerGroupDto toDto(PeerGroup pg);

  @InheritInverseConfiguration
  PeerGroup toModel(PeerGroupDto dto);

  RegionalTeamDto toDto(RegionalTeam rt);

  @InheritInverseConfiguration
  RegionalTeam toModel(RegionalTeamDto dto);

  HealthAuthorityTypeDto toDto(HealthAuthorityType hat);

  @InheritInverseConfiguration
  HealthAuthorityType toModel(HealthAuthorityTypeDto dto);

  @Mappings({
    @Mapping(target = "fiscalYear", source = "fiscalYear.fiscalYear"),
    @Mapping(target = "acctypCode", source = "acctypCode.acctypCode"),
    @Mapping(target = "fndtypCode", source = "fndtypCode.fndtypCode")
  })
  PrimaryAccountDto toDto(MiscoaPrimaryAcct mpa);

  @InheritInverseConfiguration
  MiscoaPrimaryAcct toModel(PrimaryAccountDto dto);

  @Mappings({
    @Mapping(target = "fiscalYear", source = "fiscalYear.fiscalYear"),
    @Mapping(target = "sl3Id", source = "sl3Id.sl3Id")
  })
  SecondaryAccountDto toDto(MiscoaSecondaryAcct msa);

  @InheritInverseConfiguration
  MiscoaSecondaryAcct toModel(SecondaryAccountDto dto);

  DataQualityProviderTypeDto toDto(DataQualityProviderType rt);

  @InheritInverseConfiguration
  DataQualityProviderType toModel(DataQualityProviderTypeDto dto);

  AccountTypeDto toDto(AccountType rt);

  @InheritInverseConfiguration
  AccountType toModel(AccountTypeDto dto);

  FundTypeDto toDto(FundType rt);

  @InheritInverseConfiguration
  FundType toModel(FundTypeDto dto);

  SectorTypeDto toDto(SectorType rt);

  @InheritInverseConfiguration
  SectorType toModel(SectorTypeDto dto);

  ServiceTypeDto toDto(ServiceType rt);

  @InheritInverseConfiguration
  ServiceType toModel(ServiceTypeDto dto);

  @Mappings({@Mapping(target = "igrpId", source = "indicatorGroup.igrpId")})
  IndicatorDto toDto(Indicator ind);

  @InheritInverseConfiguration
  Indicator toModel(IndicatorDto dto);
}
