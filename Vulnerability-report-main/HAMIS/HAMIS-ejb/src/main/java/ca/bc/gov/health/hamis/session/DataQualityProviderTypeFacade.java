/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.DataQualityProviderTypeDto;
import ca.bc.gov.health.hamis.entity.DataQualityProviderType;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.IDataQualityProviderTypeFacade;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Service class for working with DataQualityProviderTypeDto records
 *
 * @author greg.perkins
 */
@Stateless
public class DataQualityProviderTypeFacade extends AbstractFacade<DataQualityProviderType>
    implements IDataQualityProviderTypeFacade {

  /** Log instance */
  private static final Logger LOG = LogManager.getLogger(DataQualityProviderTypeFacade.class);

  /** Entity Manager instance for persistence */
  @PersistenceContext protected EntityManager em;

  /** Default Constructor */
  public DataQualityProviderTypeFacade() {
    super(DataQualityProviderType.class);
  }

  /**
   * Query for rules by fiscal year and provider type
   *
   * @param fiscalYear String
   * @param ptId Long
   * @return List
   */
  @Override
  public List<DataQualityProviderTypeDto> getDataQualityRulesByFiscalYearAndProviderType(
      String fiscalYear, Long ptId) {
    LOG.debug("Search DataQualityRules By FiscalYear {} and ProviderType {}", fiscalYear, ptId);
    DataQualityProviderType query = new DataQualityProviderType();
    query.setFiscalYear(fiscalYear);
    query.setPtId(ptId);
    List<DataQualityProviderType> results = super.search(query);
    List<DataQualityProviderTypeDto> out = new ArrayList<>();
    for (DataQualityProviderType dq : results) {
      out.add(HamisMapper.INSTANCE.toDto(dq));
    }
    return out;
  }

  /**
   * Create a new record
   *
   * @param dto DataQualityProviderTypeDto
   */
  @Override
  public void createDataQualityRule(DataQualityProviderTypeDto dto) {
    LOG.debug("createDataQualityRule");
    super.create(HamisMapper.INSTANCE.toModel(dto));
  }

  /**
   * Updates an existing record
   *
   * @param dto DataQualityProviderTypeDto
   */
  @Override
  public void updateDataQualityRule(DataQualityProviderTypeDto dto) {
    LOG.debug("updateDataQualityRule");
    super.edit(HamisMapper.INSTANCE.toModel(dto));
  }

  /**
   * Deletes an existing record
   *
   * @param dto DataQualityProviderTypeDto
   */
  @Override
  public void deleteDataQualityRule(DataQualityProviderTypeDto dto) {
    LOG.debug("deleteDataQualityRule");
    super.remove(HamisMapper.INSTANCE.toModel(dto));
  }

  /**
   * Determines if a record already exists
   *
   * @param dto DataQualityProviderTypeDto
   * @return boolean
   */
  @Override
  public boolean isExistingDataQualityRule(DataQualityProviderTypeDto dto) {
    String query =
        "SELECT COUNT(*) FROM DATA_QUAL_PRVDR_TYPES WHERE PRIM_ACCT_DEFN = ? AND SCND_ACCT_DEFN = ? AND FS_DATA_TYPE = ? AND AB_TRXN_TYPE = ? AND FISCAL_YEAR = ? AND PT_ID = ? "
            + "AND (? IS NULL OR DQPT_ID != ?)";
    Query q = em.createNativeQuery(query);
    q.setParameter(1, dto.getPrimAcctDefn());
    q.setParameter(2, dto.getScndAcctDefn());
    q.setParameter(3, dto.getFsDataType());
    q.setParameter(4, dto.getAbTrxnType());
    q.setParameter(5, dto.getFiscalYear());
    q.setParameter(6, dto.getPtId());
    q.setParameter(7, dto.getDqptId());
    q.setParameter(8, dto.getDqptId());
    BigDecimal count = (BigDecimal) q.getSingleResult();
    return count.intValue() > 0;
  }
}
