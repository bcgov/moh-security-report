package ca.bc.gov.health.hamis.entity;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import java.io.Serializable;
import java.math.BigInteger;
import java.util.Date;
import java.util.List;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

/** The persistent class for the HEALTH_ORGANIZATIONS database table. */
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "HEALTH_ORGANIZATIONS")
@NamedQueries({
  @NamedQuery(name = "HealthOrganization.findAll", query = "SELECT h FROM HealthOrganization h"),
  @NamedQuery(
      name = "HealthOrganization.findById",
      query = "SELECT h FROM HealthOrganization h WHERE h.hoId = :id"),
  @NamedQuery(
      name = "HealthOrganization.findAllActiveHealthAuthorities",
      query =
          "SELECT h FROM HealthOrganization h WHERE (h.endDt is NULL OR h.endDt > :sys_date) AND h.hoType = 'HA' ORDER BY h.currentName")
})
@SequenceGenerator(name = "HO_SEQ", sequenceName = "HO_SEQ", allocationSize = 1)
public class HealthOrganization implements Serializable {

  @OneToMany(cascade = CascadeType.ALL, mappedBy = "mstHoId")
  private List<OrganizationRelationship> organizationRelationshipsList;

  @OneToMany(mappedBy = "subHoId")
  private List<OrganizationRelationship> organizationRelationshipsList1;

  @Column(name = "GOVT_VENDOR_NUMBER")
  private BigInteger govtVendorNumber;

  @Column(name = "RESPONSIBILITY_NUMBER")
  private BigInteger responsibilityNumber;

  private static final long serialVersionUID = 1L;

  @Id
  @Column(name = "HO_ID")
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "HO_SEQ")
  private long hoId;

  @Column(name = "CIHI_SERVICE_CODE")
  private String cihiServiceCode;

  @Column(name = "CURRENT_NAME")
  private String currentName;

  @Column(name = "CURRENT_RECORD")
  private String currentRecord;

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "DATE_CREATED")
  private Date dateCreated;

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "DATE_MODIFIED")
  private Date dateModified;

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "EFF_DT")
  private Date effDt;

  @Temporal(TemporalType.TIMESTAMP)
  @Column(name = "END_DT")
  private Date endDt;

  @Column(name = "FACILITY_ID")
  private String facilityId;

  @Column(name = "HA_NUMBER")
  private String haNumber;

  @Column(name = "HO_TYPE")
  private String hoType;

  @Column(name = "INSTITUTION_ADDRESS")
  private String institutionAddress;

  @Column(name = "INSTITUTION_CITY")
  private String institutionCity;

  @Temporal(TemporalType.TIME)
  @Column(name = "INSTITUTION_CLOSE_DATE")
  private Date institutionCloseDate;

  @Temporal(TemporalType.TIME)
  @Column(name = "INSTITUTION_OPEN_DATE")
  private Date institutionOpenDate;

  @Column(name = "LOCATION_CODE")
  private String locationCode;

  @Column(name = "OWNERSHIP_CODE")
  private String ownershipCode;

  @Column(name = "POSTAL_CODE")
  private String postalCode;

  @Column(name = "PROFILE_CODE")
  private String profileCode;

  @Column(name = "RATED_BED_CAPACITY")
  private String ratedBedCapacity;

  @Column(name = "SP_ID")
  private String spId;

  @Column(name = "SUPPLIER_INST_COMMENTS")
  private String supplierInstComments;

  @Column(name = "TEACHING_STATUS_CODE")
  private String teachingStatusCode;

  @Column(name = "USER_CREATED")
  private String userCreated;

  @Column(name = "USER_MODIFIED")
  private String userModified;

  // bi-directional many-to-one association to DataSubmitter
  @OneToMany(mappedBy = "healthOrganization")
  private List<DataSubmitter> dataSubmitters;

  // bi-directional many-to-one association to HamisUserhealthOrganization
  @OneToMany(mappedBy = "healthOrganization")
  private List<HamisUserhealthOrganization> hamisUserhealthOrganizations;

  // bi-directional many-to-one association to HealthAuthorityType
  @ManyToOne
  @JoinColumn(name = "HATYP_CODE")
  private HealthAuthorityType healthAuthorityType;

  // bi-directional many-to-one association to PeerGroup
  @ManyToOne
  @JoinColumn(name = "PG_CODE")
  private PeerGroup peerGroup;

  // bi-directional many-to-one association to RegionalTeam
  @ManyToOne
  @JoinColumn(name = "RT_CODE")
  private RegionalTeam regionalTeam;

  // bi-directional many-to-one association to HealthOrganizationName
  @OneToMany(mappedBy = "healthOrganization", cascade = CascadeType.MERGE)
  private List<HealthOrganizationName> healthOrganizationNames;

  // bi-directional many-to-one association to ImportFile
  @OneToMany(mappedBy = "healthOrganization")
  private List<ImportFile> importFiles;

  // bi-directional many-to-one association to ImportLastReportPeriod
  @OneToMany(mappedBy = "healthOrganization")
  private List<ImportLastReportPeriod> importLastReportPeriods;

  // bi-directional many-to-one association to ImportSource
  @OneToMany(mappedBy = "healthOrganization")
  private List<ImportSource> importSources;

  /*
   * //bi-directional many-to-one association to IndicatorData
   *
   * @OneToMany(mappedBy="healthOrganization") private List<IndicatorData>
   * indicatorData;
   *
   * //bi-directional many-to-one association to OrganizationRelationship
   *
   * @OneToMany(mappedBy="healthOrganization1") private
   * List<OrganizationRelationship> organizationRelationships1;
   *
   * //bi-directional many-to-one association to OrganizationRelationship
   *
   * @OneToMany(mappedBy="healthOrganization2") private
   * List<OrganizationRelationship> organizationRelationships2;
   */

  // bi-directional many-to-one association to Submission
  @OneToMany(mappedBy = "healthOrganization")
  private List<Submission> submissions;

  public BigInteger getGovtVendorNumber() {
    return govtVendorNumber;
  }

  public void setGovtVendorNumber(BigInteger govtVendorNumber) {
    this.govtVendorNumber = govtVendorNumber;
  }

  public BigInteger getResponsibilityNumber() {
    return responsibilityNumber;
  }

  public void setResponsibilityNumber(BigInteger responsibilityNumber) {
    this.responsibilityNumber = responsibilityNumber;
  }

  public List<OrganizationRelationship> getOrganizationRelationshipsList() {
    return organizationRelationshipsList;
  }

  public void setOrganizationRelationshipsList(
      List<OrganizationRelationship> organizationRelationshipsList) {
    this.organizationRelationshipsList = organizationRelationshipsList;
  }

  public List<OrganizationRelationship> getOrganizationRelationshipsList1() {
    return organizationRelationshipsList1;
  }

  public void setOrganizationRelationshipsList1(
      List<OrganizationRelationship> organizationRelationshipsList1) {
    this.organizationRelationshipsList1 = organizationRelationshipsList1;
  }
}
