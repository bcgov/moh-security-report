/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.ProviderTypeDto;
import ca.bc.gov.health.hamis.dto.SectorTypeDto;
import ca.bc.gov.health.hamis.dto.ServiceTypeDto;
import ca.bc.gov.health.hamis.entity.ProviderType;
import ca.bc.gov.health.hamis.entity.SectorType;
import ca.bc.gov.health.hamis.entity.ServiceType;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.IProviderTypeFacade;
import jakarta.ejb.Stateless;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Facade class for dealing with Provider Types
 *
 * @author greg.perkins
 */
@Stateless
public class ProviderTypeFacade extends AbstractFacade<ProviderType>
    implements IProviderTypeFacade {

  private static final Logger LOG = LogManager.getLogger(ProviderTypeFacade.class);
  private static final String FISCAL_YEAR = "fiscalYear";
  private static final String CODE = "code";
  private static final String SECTOR_CODE = "sectorCode";
  private static final String SERVICE_CODE = "serviceCode";

  public ProviderTypeFacade() {
    super(ProviderType.class);
  }

  /**
   * Get the list of ProviderTypes for a given fiscal year
   *
   * @param fiscalYear String
   * @return List
   */
  @Override
  public List<ProviderTypeDto> getProviderTypesByFiscalYear(String fiscalYear) {
    LOG.debug("Loading provider types by year: {}", fiscalYear);
    Query query =
        getEntityManager()
            .createQuery(
                "SELECT pt FROM ProviderType pt WHERE pt.fiscalYear.fiscalYear = :fiscalYear",
                ProviderType.class);
    query.setParameter(FISCAL_YEAR, fiscalYear);
    List<ProviderTypeDto> out = new ArrayList<>();
    @SuppressWarnings("unchecked")
    List<ProviderType> results = query.getResultList();
    for (ProviderType pt : results) {
      out.add(HamisMapper.INSTANCE.toDto(pt));
    }
    return out;
  }

  /**
   * Get the list suitable for select items of ProviderTypes for a given fiscal year
   *
   * @param fiscalYear String
   * @return List
   */
  @Override
  public List<ProviderTypeDto> getProviderTypesByFiscalYearForDroplist(String fiscalYear) {
    LOG.debug("Loading provider types by year (for droplist): {}", fiscalYear);
    Query query =
        getEntityManager()
            .createNativeQuery(
                "SELECT \n"
                    + "pt.PT_ID,\n"
                    + "pt.HARP_ABBREVIATION,\n"
                    + "st.DESCRIPTION,\n"
                    + "svc.DESCRIPTION\n"
                    + "FROM \n"
                    + "PROVIDER_TYPES pt,\n"
                    + "SECTOR_TYPES st,\n"
                    + "SERVICE_TYPES svc\n"
                    + "WHERE\n"
                    + "pt.SCTR_ID = st.SCTR_ID\n"
                    + "AND pt.srvc_id = svc.SRVC_ID\n"
                    + "AND pt.FISCAL_YEAR = ?\n"
                    + "ORDER BY pt.HARP_ABBREVIATION");
    query.setParameter(1, fiscalYear);
    List<ProviderTypeDto> out = new ArrayList<>();
    @SuppressWarnings("unchecked")
    List<Object[]> results = query.getResultList();
    for (Object[] row : results) {
      ProviderTypeDto dto = new ProviderTypeDto();
      dto.setPtId(((BigDecimal) row[0]).longValue());
      dto.setHarpAbbreviation((String) row[1]);
      dto.setSctrId(new SectorTypeDto());
      dto.getSctrId().setDescription((String) row[2]);
      dto.setSrvcId(new ServiceTypeDto());
      dto.getSrvcId().setDescription((String) row[3]);
      out.add(dto);
    }
    return out;
  }

  @Override
  public void createProviderType(ProviderTypeDto providerType) {
    LOG.debug("Creating new provider type");
    ProviderType type = HamisMapper.INSTANCE.toModel(providerType);
    Date d = new Date();
    if (type.getDateCreated() == null) type.setDateCreated(d);
    if (type.getDateModified() == null) type.setDateModified(d);
    getEntityManager().persist(type);
    LOG.debug("New provider type created");
  }

  private ProviderType getByPrimaryKey(
      String code, String fiscalYear, String sectorCode, String serviceCode) {
    Query query = getEntityManager().createNamedQuery("ProviderType.findByRealPrimaryKey");
    query.setParameter(FISCAL_YEAR, fiscalYear);
    query.setParameter(CODE, code);
    query.setParameter(SECTOR_CODE, sectorCode);
    query.setParameter(SERVICE_CODE, serviceCode);
    return (ProviderType) query.getSingleResult();
  }

  @Override
  public void updateProviderType(
      ProviderTypeDto providerType, String newSectorTypeCode, String newServiceTypeCode) {
    LOG.debug("Updating provider type");
    ProviderType type =
        getByPrimaryKey(
            providerType.getHarpPrvdrCode(),
            providerType.getFiscalYear().getFiscalYear(),
            providerType.getSctrId().getSctrtypCode(),
            providerType.getSrvcId().getSrvctypCode());

    type.setDateModified(new Date());
    type.setUserModified(providerType.getUserModified());
    type.setHarpAbbreviation(providerType.getHarpAbbreviation());

    if (!newSectorTypeCode.equals(type.getSctrId().getSctrtypCode())) {
      // Sector code changed
      Query query = getEntityManager().createNamedQuery("SectorType.findByFiscalYearAndCode");
      query.setParameter(FISCAL_YEAR, providerType.getFiscalYear().getFiscalYear());
      query.setParameter(CODE, newSectorTypeCode);
      SectorType st = (SectorType) query.getSingleResult();
      type.setSctrId(st);
    }

    if (!newServiceTypeCode.equals(type.getSrvcId().getSrvctypCode())) {
      // Service code changed
      Query query = getEntityManager().createNamedQuery("ServiceType.findByCodeAndFiscalYear");
      query.setParameter(FISCAL_YEAR, providerType.getFiscalYear().getFiscalYear());
      query.setParameter(CODE, newServiceTypeCode);
      ServiceType st = (ServiceType) query.getSingleResult();
      type.setSrvcId(st);
    }

    getEntityManager().merge(type);
    LOG.debug("Provider type updated");
  }

  @Override
  public boolean deleteProviderType(
      String code, String fiscalYear, String sectorCode, String serviceCode) {
    LOG.debug(
        "Deleting provider type for provider code {}, fiscal year {}, sector code {} and service code {}",
        code,
        fiscalYear,
        sectorCode,
        serviceCode);

    // Retrieving provider type
    ProviderType type = getByPrimaryKey(code, fiscalYear, sectorCode, serviceCode);

    LOG.debug("Checking for dependencies");
    // PROVIDER_DEFINITIONS PT_ID
    String sql = "SELECT COUNT(*) FROM PROVIDER_DEFINITIONS WHERE PT_ID = ? ";
    Query query = getEntityManager().createNativeQuery(sql);
    query.setParameter(1, type.getPtId());
    long count = ((BigDecimal) query.getSingleResult()).intValue();

    // DATA_QUAL_PRVDR_TYPES PT_ID
    sql = "SELECT COUNT(*) FROM DATA_QUAL_PRVDR_TYPES PT_ID WHERE PT_ID = ? ";
    query = getEntityManager().createNativeQuery(sql);
    query.setParameter(1, type.getPtId());
    count += ((BigDecimal) query.getSingleResult()).intValue();

    // TRXN_DATA_ACCT_VALUES PT_ID
    sql = "SELECT COUNT(*) FROM TRXN_DATA_ACCT_VALUES PT_ID WHERE PT_ID = ? ";
    query = getEntityManager().createNativeQuery(sql);
    query.setParameter(1, type.getPtId());
    count += ((BigDecimal) query.getSingleResult()).intValue();

    if (count == 0) {
      getEntityManager().remove(type);
      LOG.debug("Provider type deleted");
      return true;
    } else {
      LOG.info(
          "Dependent records found, Provider type with provider code {}, fiscal year {}, sector code {} and service code {} cannot be deleted",
          code,
          fiscalYear,
          sectorCode,
          serviceCode);
      return false;
    }
  }

  @Override
  public Long getMaxHarpCodeForFiscalYear(String fiscalYear) {
    String sql =
        "select NVL(max(to_number(t.harp_prvdr_code)),-1) from provider_types t where t.fiscal_year = ?";
    Query query = getEntityManager().createNativeQuery(sql);
    query.setParameter(1, fiscalYear);
    Long result = ((BigDecimal) query.getSingleResult()).longValue();
    return result;
  }
}
