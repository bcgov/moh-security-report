/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.HealthOrganizationDto;
import ca.bc.gov.health.hamis.dto.OrganizationRelationshipDto;
import ca.bc.gov.health.hamis.entity.OrganizationRelationship;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.IOrganizationRelationshipFacade;
import jakarta.ejb.Stateless;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import lombok.val;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Facade class for Organization Relationships
 *
 * @author greg.perkins
 */
@Stateless
public class OrganizationRelationshipFacade extends AbstractFacade<OrganizationRelationship>
    implements IOrganizationRelationshipFacade {

  private static final Logger LOG = LogManager.getLogger(OrganizationRelationshipFacade.class);

  /** no-arg constructor */
  public OrganizationRelationshipFacade() {
    super(OrganizationRelationship.class);
  }

  /**
   * Find the list of OrganizationRelationships for an org. Updated to include the HA
   * (BCMOHAM-12029)
   *
   * @param hoId int
   * @return List
   */
  @Override
  public List<OrganizationRelationshipDto> getRelationshipsForOrganization(long hoId) {
    LOG.debug("Loading org relationships for ho: {}", hoId);
    String queryStr =
        new StringBuilder(
                "SELECT org.or_id, ho.current_name, ho.ho_id, ho.sp_id FROM HEALTH_ORGANIZATIONS ho, ORGANIZATION_RELATIONSHIPS org ")
            .append(" WHERE org.mst_ho_id = ?")
            .append(" AND (org.end_dt is null OR org.end_dt > sysdate)")
            .append(
                " AND (org.sub_ho_id = ho.ho_id OR (org.mst_ho_id = ho.ho_id AND org.SUB_HO_ID IS NULL)) ORDER BY ho.current_name")
            .toString();
    Query query = getEntityManager().createNativeQuery(queryStr);
    query.setParameter(1, hoId);
    @SuppressWarnings("unchecked")
    List<Object[]> results = query.getResultList();
    List<OrganizationRelationshipDto> out = new ArrayList<>();
    for (Object[] row : results) {
      OrganizationRelationshipDto dto = new OrganizationRelationshipDto();
      dto.setOrId(((BigDecimal) row[0]).longValue());
      dto.setSubHoId(new HealthOrganizationDto());
      dto.getSubHoId().setCurrentName((String) row[1]);
      dto.getSubHoId().setHoId(((BigDecimal) row[2]).longValue());
      dto.getSubHoId().setSpId((String) row[3]);
      out.add(dto);
    }
    return out;
  }

  /**
   * Create a new relationship between organizations
   *
   * @param value OrganizationRelationshipDto
   * @return long ID of new relationship
   */
  @Override
  public long createRelationship(OrganizationRelationshipDto value) {
    if (value.getReltypCode().getDescription() != null)
      LOG.debug(
          "Creating a new {} relationship between {} (subordinate) and {} (master)",
          value.getReltypCode().getDescription(),
          value.getSubHoId(),
          value.getMstHoId());
    OrganizationRelationship orgRelationship = HamisMapper.INSTANCE.toModel(value);
    getEntityManager().persist(orgRelationship);
    return orgRelationship.getOrId();
  }

  /**
   * Returns a list of active organization relationships from this HO to its masters; reversal to
   * getRelationshipsForOrganization
   *
   * @param hoId HO ID
   * @return List of organization relationships from this HO to its masters
   */
  @Override
  public List<OrganizationRelationshipDto> getRelationshipsToMasters(long hoId) {
    List<OrganizationRelationshipDto> rels = new ArrayList<>();
    Query query = getEntityManager().createNamedQuery("OrganizationRelationship.findBySubordinate");
    query.setParameter("sys_date", new java.util.Date());
    query.setParameter("ho_id", hoId);
    List<?> results = query.getResultList();
    for (val relationship : results) {
      rels.add(HamisMapper.INSTANCE.toDto((OrganizationRelationship) relationship));
    }
    return rels;
  }

  /**
   * Returns a list of active organization relationships from this HO to its subordinates.
   *
   * @param hoId HO ID
   * @return List of organization relationships where this HO is a master
   */
  @Override
  public List<OrganizationRelationshipDto> getRelationships(long hoId) {
    List<OrganizationRelationshipDto> rels = new ArrayList<>();
    Query query = getEntityManager().createNamedQuery("OrganizationRelationship.findByMaster");
    query.setParameter("sys_date", new java.util.Date());
    query.setParameter("ho_id", hoId);
    List<?> results = query.getResultList();
    for (val relationship : results) {
      rels.add(HamisMapper.INSTANCE.toDto((OrganizationRelationship) relationship));
    }
    return rels;
  }

  /**
   * Soft delete the relationship by its ID, which means
   *
   * <ul>
   *   <li>Setting the end date to the date in the past
   *   <li>Setting Current Record to null
   * </ul>
   *
   * @param orId Organization Relationship Id
   */
  @Override
  public void deleteRelationship(long orId, String userName) {
    Query query = getEntityManager().createNamedQuery("OrganizationRelationship.findById");
    query.setParameter("id", orId);
    OrganizationRelationship or = (OrganizationRelationship) query.getSingleResult();
    or.setCurrentRecord(null);
    Date d = new Date();
    or.setEndDt(d);
    // Audit fields
    or.setUserModified(userName);
    getEntityManager().merge(or);
  }
}
