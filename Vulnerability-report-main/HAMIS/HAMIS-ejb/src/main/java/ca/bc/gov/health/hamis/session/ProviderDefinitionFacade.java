/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.ProviderDefinitionDto;
import ca.bc.gov.health.hamis.entity.OrganizationRelationship;
import ca.bc.gov.health.hamis.entity.ProviderDefinition;
import ca.bc.gov.health.hamis.entity.ProviderType;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.IProviderDefinitionFacade;
import jakarta.ejb.Stateless;
import jakarta.persistence.Query;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Facade for working with ProviderDefinitions
 *
 * @author greg.perkins
 */
@Stateless
public class ProviderDefinitionFacade extends AbstractFacade<ProviderDefinition>
    implements IProviderDefinitionFacade {

  private static final Logger LOG = LogManager.getLogger(ProviderDefinitionFacade.class);

  /** no-arg constructor */
  public ProviderDefinitionFacade() {
    super(ProviderDefinition.class);
  }

  /**
   * Get a list of distinct LEIs for a given HO, Year
   *
   * @param hoId int
   * @param fiscalYear String
   * @return List<ProviderDefinitionDto>
   */
  @Override
  public List<ProviderDefinitionDto> getLeiList(int hoId, String fiscalYear) {
    LOG.debug("Loading LEIs for health organization: " + hoId + " in " + fiscalYear);
    String queryStr =
        "   SELECT pd.lei,\n"
            + "             RPAD(pd.lei,2) || ' - ' || RPAD(NVL(pd.name,' '),25) || '  [' || sctr.description || '-' || srvc.description || ']' AS name,\n"
            + "             pd.ses_id\n"
            + "      FROM   provider_definitions pd,\n"
            + "             provider_types pt,\n"
            + "             sector_types sctr,\n"
            + "             service_types srvc\n"
            + "      WHERE  pd.end_dt IS NULL\n"
            + "      AND    pd.pt_id = pt.pt_id\n"
            + "      AND    pt.sctr_id = sctr.sctr_id\n"
            + "      AND    pt.srvc_id = srvc.srvc_id\n"
            + "      AND    pd.ses_id IN (\n"
            + "         SELECT   DISTINCT ses.ses_id\n"
            + "         FROM     standard_extract_sources ses,\n"
            + "                  data_submitters ds,\n"
            + "                  standard_extract_files sef\n"
            + "         WHERE    ses.end_dt IS NULL AND\n"
            //            + "                  ds.end_dt IS NULL AND\n"
            + "                  ds.ds_id = ses.ds_id AND\n"
            + "                  ds.ho_id = ?\n"
            + "         AND      ses.fiscal_year = ?\n"
            + "         AND      sef.ses_id = ses.ses_id)\n"
            + "      ORDER BY pd.ses_id, pd.lei";

    Query query = getEntityManager().createNativeQuery(queryStr);
    query.setParameter(2, fiscalYear);
    query.setParameter(1, hoId);
    @SuppressWarnings("unchecked")
    List<Object[]> results = query.getResultList();
    List<ProviderDefinitionDto> out = new ArrayList<>();
    for (Object[] row : results) {
      ProviderDefinitionDto dto = new ProviderDefinitionDto();
      dto.setLei((String) row[0]);
      dto.setName((String) row[1]);
      out.add(dto);
    }
    return out;
  }

  /**
   * Deletes a provider definition
   *
   * @param pdId long
   */
  @Override
  public void deleteProviderDefinition(long pdId) {
    LOG.debug("Removing provider definition: " + pdId);
    ProviderDefinition pd = find(pdId);
    pd.setEndDt(new Date());
    getEntityManager().merge(pd);
    getEntityManager().flush();
  }

  /**
   * Updates a provider definition
   *
   * @param dto ProviderDefinitionDto
   */
  @Override
  public void updateProviderDefinition(ProviderDefinitionDto dto) {
    LOG.debug("Updating provider definition: " + dto.getPdId());
    ProviderDefinition pd = find(dto.getPdId());
    pd.setLei(dto.getLei());
    pd.setName(dto.getName());
    pd.setOrId(new OrganizationRelationship(dto.getOrId().getOrId()));
    pd.setPtId(new ProviderType(dto.getPtId().getPtId()));
    // Fix for Audit fields
    pd.setUserModified(dto.getUserModified());
    getEntityManager().merge(pd);
    getEntityManager().flush();
  }

  /**
   * Creates a provider definition
   *
   * @param dto ProviderDefinitionDto
   */
  @Override
  public Long createProviderDefinition(ProviderDefinitionDto dto) {
    LOG.debug("Creating new provider definition");
    ProviderDefinition pd = HamisMapper.INSTANCE.toModel(dto);
    getEntityManager().persist(pd);
    return pd.getPdId();
  }
}
