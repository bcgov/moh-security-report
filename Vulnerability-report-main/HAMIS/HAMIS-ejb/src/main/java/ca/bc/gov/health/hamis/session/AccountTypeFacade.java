/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.AccountTypeDto;
import ca.bc.gov.health.hamis.entity.AccountType;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.IAccountTypeFacade;
import jakarta.ejb.Stateless;
import jakarta.faces.model.SelectItem;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/** @author greg.perkins */
@Stateless
public class AccountTypeFacade extends AbstractFacade<AccountType> implements IAccountTypeFacade {

  private static final Logger LOG = LogManager.getLogger(AccountTypeFacade.class);

  public AccountTypeFacade() {
    super(AccountType.class);
  }

  @Override
  public List<SelectItem> getAccountTypesForDroplist() {
    List<AccountType> accounts = super.findAll();
    List<SelectItem> items = new ArrayList<>();
    for (AccountType account : accounts) {
      items.add(new SelectItem(account.getAcctypCode(), account.getDescription()));
    }
    return items;
  }

  /**
   * Retrieve existing accounts types
   *
   * @return List of existing account types
   */
  @Override
  public List<AccountTypeDto> getAccountTypes() {
    LOG.debug("Getting list of account types");
    List<AccountTypeDto> result = new ArrayList<>();
    Query query = getEntityManager().createNamedQuery("AccountType.findAll");
    @SuppressWarnings("unchecked")
    List<AccountType> accountTypes = query.getResultList();
    for (AccountType accountType : accountTypes) {
      result.add(HamisMapper.INSTANCE.toDto(accountType));
    }
    LOG.debug("List of account types retrieved");
    return result;
  }

  /**
   * Creates new Account Type
   *
   * @param accountTypeDto Account Type DTO
   */
  @Override
  public void createAccountType(AccountTypeDto accountTypeDto) {
    LOG.debug("Creating new account type");
    AccountType accountType = HamisMapper.INSTANCE.toModel(accountTypeDto);
    Date d = new Date();
    if (accountType.getDateCreated() == null) accountType.setDateCreated(d);
    if (accountType.getDateModified() == null) accountType.setDateModified(d);
    if (!"Y".equalsIgnoreCase(accountType.getBalanceSheetFlag()))
      accountType.setBalanceSheetFlag("N");
    getEntityManager().persist(accountType);
    LOG.debug("New account type created");
  }

  /**
   * Updates existing Account Type
   *
   * @param accountTypeDto Account Type DTO
   */
  @Override
  public void updateAccountType(AccountTypeDto accountTypeDto) {
    LOG.debug("Updating account type");
    AccountType actType =
        getEntityManager().find(AccountType.class, accountTypeDto.getAcctypCode());
    actType.setDescription(accountTypeDto.getDescription());
    actType.setDateModified(new Date());
    actType.setUserModified(accountTypeDto.getUserModified());
    getEntityManager().merge(actType);
    LOG.debug("Account type updated");
  }

  /**
   * Deletes the account type
   *
   * @param code Code of account type to be deleted
   * @return true if deletion was successful, false if account type cannot be deleted due to
   *     dependencies
   */
  @Override
  public boolean deleteAccountType(String code) {
    LOG.debug("Deleting account type for code {}", code);

    LOG.debug("Checking for dependencies");
    String sql = "SELECT COUNT(*) FROM MISCOA_PRIMARY_ACCTS WHERE ACCTYP_CODE = ? ";
    Query query = getEntityManager().createNativeQuery(sql);
    query.setParameter(1, code);
    long count = ((BigDecimal) query.getSingleResult()).intValue();

    sql = "SELECT COUNT(*) FROM PRIMARY_LEVEL_2 WHERE ACCTYP_CODE = ? ";
    query = getEntityManager().createNativeQuery(sql);
    query.setParameter(1, code);
    count += ((BigDecimal) query.getSingleResult()).intValue();
    if (count == 0L) {
      AccountType accountType = getEntityManager().find(AccountType.class, code);
      getEntityManager().remove(accountType);
      LOG.debug("Account type deleted");
      return true;
    } else {
      LOG.info("Dependent records found, account type with code {} cannot be deleted", code);
      return false;
    }
  }
}
