package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.ServiceTypeDto;
import ca.bc.gov.health.hamis.entity.ServiceType;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.IServiceTypeFacade;
import jakarta.ejb.Stateless;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Implementation of IServiceTypeFacade
 *
 * @author vladimir.dovgalyuk
 */
@Stateless
public class ServiceTypeFacade extends AbstractFacade<ServiceType> implements IServiceTypeFacade {

  private static final Logger LOG = LogManager.getLogger(ServiceTypeFacade.class);
  private static final String FISCAL_YEAR = "fiscalYear";
  private static final String CODE = "code";

  public ServiceTypeFacade() {
    super(ServiceType.class);
  }

  /** Returns list for service types for fiscal year */
  @Override
  public List<ServiceTypeDto> getByFiscalYear(String fiscalYear) {
    LOG.debug("Retrieving list of sub-sector types for the fiscal year {}", fiscalYear);
    List<ServiceTypeDto> result = new ArrayList<>();
    Query query = getEntityManager().createNamedQuery("ServiceType.findByFiscalYear");
    query.setParameter(FISCAL_YEAR, fiscalYear);
    @SuppressWarnings("unchecked")
    List<ServiceType> serviceTypes = query.getResultList();
    for (ServiceType serviceType : serviceTypes) {
      result.add(HamisMapper.INSTANCE.toDto(serviceType));
    }

    if (result.isEmpty()) LOG.debug("List of sub-sector types retrieved, nothing found");
    else LOG.debug("List of sub-sector types retrieved, {} entries found", result.size());
    return result;
  }

  @Override
  public void createServiceType(ServiceTypeDto serviceType) {
    LOG.debug("Creating service type");
    ServiceType type = HamisMapper.INSTANCE.toModel(serviceType);
    Date d = new Date();
    if (type.getDateCreated() == null) type.setDateCreated(d);
    if (type.getDateModified() == null) type.setDateModified(d);
    getEntityManager().persist(type);
    LOG.debug("New service type created");
  }

  private ServiceType findByFiscalYearAndCode(String fiscalYear, String code) {
    Query query = getEntityManager().createNamedQuery("ServiceType.findByCodeAndFiscalYear");
    query.setParameter(FISCAL_YEAR, fiscalYear);
    query.setParameter(CODE, code);
    return (ServiceType) query.getSingleResult();
  }

  @Override
  public void updateServiceType(ServiceTypeDto serviceType) {
    LOG.debug("Updating service type");
    ServiceType type =
        findByFiscalYearAndCode(
            serviceType.getFiscalYear().getFiscalYear(), serviceType.getSrvctypCode());
    type.setDescription(serviceType.getDescription());
    type.setUserModified(serviceType.getUserModified());
    type.setDateModified(new Date());
    getEntityManager().merge(type);
    LOG.debug("Serivice type updated");
  }

  @Override
  public boolean deleteServiceType(String code, String fiscalYear) {
    LOG.debug("Deleting service type for code {} and fiscal year {}", code, fiscalYear);

    ServiceType type = findByFiscalYearAndCode(fiscalYear, code);

    LOG.debug("Checking for dependencies");
    String sql = "SELECT COUNT(*) FROM PROVIDER_TYPES WHERE SRVC_ID = ? ";
    Query query = getEntityManager().createNativeQuery(sql);
    query.setParameter(1, type.getSrvcId());
    long count = ((BigDecimal) query.getSingleResult()).intValue();
    if (count == 0L) {
      getEntityManager().remove(type);
      LOG.debug("Service type deleted");
      return true;
    } else {
      LOG.info(
          "Dependent records found, Service type with code {} and fiscal year {} cannot be deleted",
          code,
          fiscalYear);
      return false;
    }
  }
}
