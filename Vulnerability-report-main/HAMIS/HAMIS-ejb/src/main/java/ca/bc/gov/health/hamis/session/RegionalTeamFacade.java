package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.RegionalTeamDto;
import ca.bc.gov.health.hamis.entity.RegionalTeam;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.IRegionalTeamFacade;
import jakarta.ejb.Stateless;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import lombok.val;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Implementation of the IRegionalTeamFacade interface
 *
 * @author vladimir.dovgalyuk
 */
@Stateless
public class RegionalTeamFacade extends AbstractFacade<RegionalTeam>
    implements IRegionalTeamFacade {

  private static final Logger LOG = LogManager.getLogger(RegionalTeamFacade.class);

  public RegionalTeamFacade() {
    super(RegionalTeam.class);
  }

  /**
   * Returns the list of all Health Service Delivery Areas
   *
   * @return
   */
  @Override
  public List<RegionalTeamDto> getAll() {
    List<RegionalTeamDto> result = new ArrayList<>();
    Query query = getEntityManager().createNamedQuery("RegionalTeam.findAll");
    List<?> groups = query.getResultList();
    for (val group : groups) {
      result.add(HamisMapper.INSTANCE.toDto((RegionalTeam) group));
    }
    return result;
  }

  @Override
  public void createRegionalTeam(RegionalTeamDto value) {
    LOG.debug("Creating regional team");
    RegionalTeam team = HamisMapper.INSTANCE.toModel(value);
    Date d = new Date();
    if (team.getDateCreated() == null) team.setDateCreated(d);
    if (team.getDateModified() == null) team.setDateModified(d);
    getEntityManager().persist(team);
    LOG.debug("New regional team created");
  }

  @Override
  public void updateRegionalTeam(RegionalTeamDto value) {
    LOG.debug("Updating regional team");
    RegionalTeam team = getEntityManager().find(RegionalTeam.class, value.getRtCode());
    team.setDescription(value.getDescription());
    team.setDateModified(new Date());
    team.setUserModified(value.getUserModified());
    getEntityManager().merge(team);
    LOG.debug("Regional team updated");
  }

  @Override
  public boolean deleteRegionalTeam(String code) {
    LOG.debug("Deleting regional team for code {}", code);

    LOG.debug("Checking for dependencies");
    String sql = "SELECT COUNT(*) FROM HEALTH_ORGANIZATIONS WHERE RT_CODE = ? ";
    Query query = getEntityManager().createNativeQuery(sql);
    query.setParameter(1, code);
    long count = ((BigDecimal) query.getSingleResult()).intValue();

    if (count == 0L) {
      RegionalTeam team = getEntityManager().find(RegionalTeam.class, code);
      getEntityManager().remove(team);
      LOG.debug("Regional team deleted");
      return true;
    } else {
      LOG.info("Dependent records found, regional team with code {} cannot be deleted", code);
      return false;
    }
  }
}
