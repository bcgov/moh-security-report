/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.CustomAccountDto;
import ca.bc.gov.health.hamis.entity.CustomAccount;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.ICustomAccountFacade;
import jakarta.ejb.Stateless;
import java.util.Date;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/** @author greg.perkins */
@Stateless
public class CustomAccountFacade extends AbstractFacade<CustomAccount>
    implements ICustomAccountFacade {

  private static final Logger LOG = LogManager.getLogger(ProviderDefinitionFacade.class);

  /** no-arg constructor */
  public CustomAccountFacade() {
    super(CustomAccount.class);
  }

  /**
   * Deletes a custom account
   *
   * @param dto CustomAccountDto
   */
  @Override
  public void deleteCustomAccount(CustomAccountDto dto) {
    LOG.debug("Removing Custom Account: " + dto.getCaId());
    CustomAccount ca = find(dto.getCaId());
    ca.setEndDt(new Date());
    getEntityManager().merge(ca);
    getEntityManager().flush();
  }

  /**
   * Updates a custom account
   *
   * @param dto CustomAccountDto
   */
  @Override
  public void updateCustomAccount(CustomAccountDto dto) {
    LOG.debug("Updating Custom Account: " + dto.getCaId());
    CustomAccount ca = HamisMapper.INSTANCE.toModel(dto);
    if (ca.getCaType().equals("GLPA")) {
      ca.setMsaId(null);
    } else {
      ca.setMpaId(null);
    }
    getEntityManager().merge(ca);
    getEntityManager().flush();
  }

  /**
   * Creates a custom account
   *
   * @param dto CustomAccountDto
   * @return Long generated ID
   */
  @Override
  public Long createCustomAccount(CustomAccountDto dto) {
    LOG.debug("Creating new Custom Account");
    CustomAccount ca = HamisMapper.INSTANCE.toModel(dto);
    if (ca.getCaType().equals("GLPA")) {
      ca.setMsaId(null);
    } else {
      ca.setMpaId(null);
    }
    getEntityManager().persist(ca);
    return ca.getCaId();
  }

  /**
   * Query a custom Account
   *
   * @param caId long
   * @return CustomAccountDto
   */
  @Override
  public CustomAccountDto getCustomAccount(long caId) {
    CustomAccount ca = find(caId);
    return HamisMapper.INSTANCE.toDto(ca);
  }
}
