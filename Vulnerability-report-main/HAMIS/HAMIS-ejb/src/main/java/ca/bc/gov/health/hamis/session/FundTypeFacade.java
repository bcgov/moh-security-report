package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.FundTypeDto;
import ca.bc.gov.health.hamis.entity.FundType;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.IFundTypeFacade;
import jakarta.ejb.Stateless;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Facade for Fund types
 *
 * @author vladimir.dovgalyuk
 */
@Stateless
public class FundTypeFacade extends AbstractFacade<FundType> implements IFundTypeFacade {

  private static final Logger LOG = LogManager.getLogger(FundTypeFacade.class);

  public FundTypeFacade() {
    super(FundType.class);
  }

  @Override
  public List<FundTypeDto> getFundTypes() {
    LOG.debug("Retrieving list of fund types");
    List<FundTypeDto> result = new ArrayList<>();
    Query query = getEntityManager().createNamedQuery("FundType.findAll");
    @SuppressWarnings("unchecked")
    List<FundType> types = query.getResultList();
    for (FundType type : types) {
      result.add(HamisMapper.INSTANCE.toDto(type));
    }

    LOG.debug("List of fund types retrieved");
    return result;
  }

  /**
   * Creates new Fund Type
   *
   * @param value Fund Type DTO
   */
  @Override
  public void createFundType(FundTypeDto value) {
    LOG.debug("Creating new fund type");
    FundType fundType = HamisMapper.INSTANCE.toModel(value);
    Date d = new Date();
    if (fundType.getDateCreated() == null) fundType.setDateCreated(d);
    if (fundType.getDateModified() == null) fundType.setDateModified(d);
    getEntityManager().persist(fundType);
    LOG.debug("New fund type created");
  }

  /**
   * Updates existing Fund Type
   *
   * @param value Fund Type DTO
   */
  @Override
  public void updateFundType(FundTypeDto value) {
    LOG.debug("Updating fund type");
    FundType fundType = getEntityManager().find(FundType.class, value.getFndtypCode());
    fundType.setDescription(value.getDescription());
    fundType.setDateModified(new Date());
    fundType.setUserModified(value.getUserModified());
    getEntityManager().merge(fundType);
    LOG.debug("Fund type updated");
  }

  /**
   * Deletes existing Fund Type by code
   *
   * @param code Code of Fund Type to be deleted
   * @return true if Fund Type can be deleted, false otherwise
   */
  @Override
  public boolean deleteFundType(String code) {
    LOG.debug("Deleting fund type for code {}", code);

    LOG.debug("Checking for dependencies");
    String sql = "SELECT COUNT(*) FROM MISCOA_PRIMARY_ACCTS WHERE FNDTYP_CODE = ? ";
    Query query = getEntityManager().createNativeQuery(sql);
    query.setParameter(1, code);
    long count = ((BigDecimal) query.getSingleResult()).intValue();

    sql = "SELECT COUNT(*) FROM PRIMARY_LEVEL_2 WHERE FNDTYP_CODE = ? ";
    query = getEntityManager().createNativeQuery(sql);
    query.setParameter(1, code);
    count += ((BigDecimal) query.getSingleResult()).intValue();
    if (count == 0L) {
      FundType fundType = getEntityManager().find(FundType.class, code);
      getEntityManager().remove(fundType);
      LOG.debug("Fund type deleted");
      return true;
    } else {
      LOG.info("Dependent records found, fund type with code {} cannot be deleted", code);
      return false;
    }
  }
}
