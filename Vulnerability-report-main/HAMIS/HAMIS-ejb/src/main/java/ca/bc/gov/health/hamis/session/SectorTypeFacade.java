package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.SectorTypeDto;
import ca.bc.gov.health.hamis.entity.SectorType;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.ISectorTypeFacade;
import jakarta.ejb.Stateless;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Implementation of ISectorTypeFacade
 *
 * @author vladimir.dovgalyuk
 */
@Stateless
public class SectorTypeFacade extends AbstractFacade<SectorType> implements ISectorTypeFacade {

  private static final Logger LOG = LogManager.getLogger(SectorTypeFacade.class);
  private static final String FISCAL_YEAR = "fiscalYear";
  private static final String CODE = "code";

  public SectorTypeFacade() {
    super(SectorType.class);
  }

  /** Returns the list of sector types for the selected fiscal year */
  @Override
  public List<SectorTypeDto> getSectorTypesByFiscalYear(String fiscalYear) {
    LOG.debug("Retrieving list of sector types for the fiscal year {}", fiscalYear);
    List<SectorTypeDto> result = new ArrayList<>();
    Query query = getEntityManager().createNamedQuery("SectorType.findByFiscalYear");
    query.setParameter(FISCAL_YEAR, fiscalYear);
    @SuppressWarnings("unchecked")
    List<SectorType> sectorTypes = query.getResultList();
    for (SectorType sectorType : sectorTypes) {
      result.add(HamisMapper.INSTANCE.toDto(sectorType));
    }
    if (result.isEmpty()) LOG.debug("List of sector types retrieved, nothing found");
    else LOG.debug("List of sector types retrieved, {} entries found", result.size());
    return result;
  }

  private SectorType getSectorTypeByFiscalYearAndCode(String fiscalYear, String code) {
    Query query = getEntityManager().createNamedQuery("SectorType.findByFiscalYearAndCode");
    query.setParameter(FISCAL_YEAR, fiscalYear);
    query.setParameter(CODE, code);
    return (SectorType) query.getSingleResult();
  }

  @Override
  public void createSectorType(SectorTypeDto sectorType) {
    LOG.debug("Creating sector type");
    SectorType type = HamisMapper.INSTANCE.toModel(sectorType);
    Date d = new Date();
    if (type.getDateCreated() == null) type.setDateCreated(d);
    if (type.getDateModified() == null) type.setDateModified(d);
    type.setProviderTypesList(new ArrayList<>());
    getEntityManager().persist(type);
    LOG.debug("New sector type created");
  }

  @Override
  public void updateSectorType(SectorTypeDto sectorType) {
    LOG.debug("Updating sector type");
    SectorType type =
        getSectorTypeByFiscalYearAndCode(
            sectorType.getFiscalYear().getFiscalYear(), sectorType.getSctrtypCode());
    type.setDescription(sectorType.getDescription());
    type.setUserModified(sectorType.getUserModified());
    type.setDateModified(new Date());
    getEntityManager().merge(type);
    LOG.debug("Sector type updated");
  }

  @Override
  public boolean deleteSectorType(String code, String fiscalYear) {
    LOG.debug("Deleting sector type for code {} and fiscal year {}", code, fiscalYear);

    SectorType type = getSectorTypeByFiscalYearAndCode(fiscalYear, code);

    LOG.debug("Checking for dependencies");
    String sql = "SELECT COUNT(*) FROM PROVIDER_TYPES WHERE SCTR_ID = ? ";
    Query query = getEntityManager().createNativeQuery(sql);
    query.setParameter(1, type.getSctrId());
    long count = ((BigDecimal) query.getSingleResult()).intValue();
    if (count == 0L) {
      getEntityManager().remove(type);
      LOG.debug("Sector type deleted");
      return true;
    } else {
      LOG.info(
          "Dependent records found, Sector type with code {} and fiscal year {} cannot be deleted",
          code,
          fiscalYear);
      return false;
    }
  }
}
