package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.DataSubmitterDto;
import ca.bc.gov.health.hamis.service.IDataSubmitterFacade;
import ca.bc.gov.health.security.AuthorizationHeaderRequestFilter;
import ca.bc.gov.health.security.KeycloakTokenSupplier;
import ca.bc.gov.health.security.OidcConfig;
import jakarta.annotation.PostConstruct;
import jakarta.annotation.PreDestroy;
import jakarta.ejb.EJB;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.ws.rs.client.Client;
import jakarta.ws.rs.client.ClientBuilder;
import jakarta.ws.rs.client.WebTarget;
import jakarta.ws.rs.core.MediaType;
import jakarta.ws.rs.core.Response;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

/** @author david.a.sharpe */
@Named
@Stateless
public class KeycloakFacade {

  @EJB private IDataSubmitterFacade dsFacade;

  @Inject private OidcConfig oidcConfig;

  private Client client;
  private KeycloakTokenSupplier tokenSupplier;

  @PostConstruct
  public void init() {
    tokenSupplier =
        new KeycloakTokenSupplier(
            oidcConfig.getTokenUri(), oidcConfig.getClientId(), oidcConfig.getClientSecret());
    client = ClientBuilder.newBuilder().build();
    client.register(new AuthorizationHeaderRequestFilter(tokenSupplier));
  }

  @PreDestroy
  public void destroy() {
    if (client != null) {
      client.close();
    }
    tokenSupplier.closeClient();
  }

  public List<DataSubmitterDto> getUnassignedDataSubmitters() {

    Set<String> assignedUsers =
        dsFacade.getAllDataSubmitters().stream()
            .map(DataSubmitterDto::getUserId)
            .collect(Collectors.toUnmodifiableSet());

    String clientGuid = getHamisClientId();
    List<Map> users = getHamisDataSubmitters(clientGuid);

    List<DataSubmitterDto> unassignedUsers =
        users.stream()
            .map(user -> toDto(user))
            .filter(dto -> (!assignedUsers.contains(dto.getUserId().toUpperCase())))
            .sorted((u1, u2) -> u1.getUsername().compareTo(u2.getUsername()))
            .collect(Collectors.toUnmodifiableList());

    return unassignedUsers;
  }

  private String getHamisClientId() {
    WebTarget target = client.target(String.format("%s/clients", oidcConfig.getUmsApiUri()));
    try (Response response = target.request().accept(MediaType.APPLICATION_JSON_TYPE).get()) {
      String clientGuid = (String) ((Map) response.readEntity(List.class).get(0)).get("id");
      return clientGuid;
    }
  }

  private List<Map> getHamisDataSubmitters(String clientGuid) {
    String url =
        String.format(
            "%s/clients/%s/roles/HMS_DATA_SUBMITTER/users", oidcConfig.getUmsApiUri(), clientGuid);
    WebTarget target = client.target(url);
    try (Response response = target.request().accept(MediaType.APPLICATION_JSON_TYPE).get()) {
      List<Map> users = response.readEntity(List.class);
      return users;
    }
  }

  private DataSubmitterDto toDto(Map user) {
    Object phone = null;
    if (user.get("attributes") != null) {
      phone = ((Map) user.get("attributes")).get("phone");
    }
    if (phone != null) {
      phone = ((List) phone).get(0);
    }
    DataSubmitterDto dto = new DataSubmitterDto();
    dto.setName(String.format("%s %s", user.get("firstName"), user.get("lastName")));
    dto.setTelephoneNumber((String) phone);
    dto.setEmailAddress((String) user.get("email"));
    dto.setUserId((String) user.get("id"));
    dto.setUsername((String) user.get("username"));
    return dto;
  }
}
