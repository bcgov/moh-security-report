package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.StandardExtractSourceDto;
import ca.bc.gov.health.hamis.entity.DataSubmitter;
import ca.bc.gov.health.hamis.entity.ProviderDefinition;
import ca.bc.gov.health.hamis.entity.StandardExtractSource;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.IStandardExtractSourceFacade;
import jakarta.ejb.Stateless;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/** Facade class for dealing with Standard Extract Sources */
@Stateless
public class StandardExtractSourceFacade extends AbstractFacade<StandardExtractSource>
    implements IStandardExtractSourceFacade {

  private static final Logger LOG = LogManager.getLogger(StandardExtractSourceFacade.class);

  /** no-arg constructor */
  public StandardExtractSourceFacade() {
    super(StandardExtractSource.class);
  }

  /**
   * Get the details of a single Standard Extract Source
   *
   * @param sesId
   * @return StandardExtractSourceDto
   */
  @Override
  public StandardExtractSourceDto getStandardExtractSource(long sesId) {
    LOG.debug("Loading Standard Extract Source: {}", sesId);
    StandardExtractSource ses = find(sesId);
    List<ProviderDefinition> pds = new ArrayList<>();
    for (ProviderDefinition pd : ses.getProviderDefinitionsList()) {
      if (pd.getEndDt() == null) {
        pds.add(pd);
      }
    }
    ses.setProviderDefinitionsList(pds);
    return HamisMapper.INSTANCE.toDto(ses);
  }

  /**
   * Get the list of Standard Extract Sources for a fiscal year and org
   *
   * @param fiscalYear String
   * @param hoId long
   * @return List
   */
  @Override
  public List<StandardExtractSourceDto> findStandardExtractSource(
      final String fiscalYear, long hoId) {
    LOG.debug("Searching Standard Extract Sources: {}, {}", hoId, fiscalYear);
    String queryStr =
        "SELECT c.SES_ID, c.NAME, c.DATE_MODIFIED, c.FISCAL_YEAR "
            + "FROM STANDARD_EXTRACT_SOURCES c, DATA_SUBMITTERS ds "
            + " WHERE DS.HO_ID = ?"
            + " AND c.DS_ID = DS.DS_ID "
            + " AND c.END_DT is NULL "
            + " AND c.FISCAL_YEAR = ?";
    Query query = getEntityManager().createNativeQuery(queryStr);
    query.setParameter(2, fiscalYear);
    query.setParameter(1, hoId);
    List<StandardExtractSourceDto> out = new ArrayList<>();
    List<Object[]> results = query.getResultList();
    for (Object[] row : results) {
      StandardExtractSourceDto dto = new StandardExtractSourceDto();
      dto.setSesId(((BigDecimal) row[0]).longValue());
      dto.setName((String) row[1]);
      dto.setDateModified((Date) row[2]);
      dto.setFiscalYear((String) row[3]);
      out.add(dto);
    }
    return out;
  }

  /**
   * Updates a Standard Extract Source
   *
   * @param dto StandardExtractSourceDto
   */
  @Override
  public void updateStandardExtractSource(StandardExtractSourceDto dto) {
    LOG.debug("Updating Standard Extract Source: {}", dto.getSesId());
    StandardExtractSource ses =
        getEntityManager().find(StandardExtractSource.class, dto.getSesId());
    ses.setName(dto.getName());
    ses.setDateModified(dto.getDateModified());
    ses.setUserModified(dto.getUserModified());
    ses.setEndDt(dto.getEndDt());
    getEntityManager().merge(ses);
  }

  /** Soft cascade deletion */
  @Override
  public void deleteStandardExtractSource(StandardExtractSourceDto dto, String userName) {
    LOG.debug("Soft deletion for Standard Extract Source: {} ", dto.getSesId());
    StandardExtractSource ses =
        getEntityManager().find(StandardExtractSource.class, dto.getSesId());

    ses.setUserModified(userName);
    Date d = new Date();
    ses.setEndDt(d);
    ses.setDateModified(d);

    if (ses.getProviderDefinitionsList() != null)
      for (ProviderDefinition pd : ses.getProviderDefinitionsList()) {
        pd.setDateModified(d);
        pd.setEndDt(d);
        pd.setUserModified(userName);
      }

    getEntityManager().merge(ses);
  }

  /**
   * Creates a Standard Extract Source
   *
   * @param dto StandardExtractSourceDto
   */
  @Override
  public Long createStandardExtractSource(StandardExtractSourceDto dto) {
    LOG.debug("Creating new Standard Extract Source");
    StandardExtractSource ses = HamisMapper.INSTANCE.toModel(dto);
    ses.setSesId(null);
    ses.setDataSubmitter(new DataSubmitter());
    ses.getDataSubmitter().setDsId(dto.getDsId().getDsId());
    getEntityManager().persist(ses);
    return ses.getSesId();
  }

  /**
   * Duplicates a standard extract source
   *
   * @param sesId Long
   * @param newName String
   */
  @Override
  public void duplicateStandardExtractSource(Long sesId, String newName, String userName) {
    copyStandardExtractSource(newName, userName, sesId);
    copyProviderDefinitions(userName, sesId);
  }

  /**
   * Copy the parent Standard Extract Source to a new record with a new name
   *
   * @param newName String
   * @param userName String
   * @param sesId Long
   */
  private void copyStandardExtractSource(String newName, String userName, Long sesId) {
    LOG.debug("Duplicating Standard Extract Source: {} -> {}", sesId, newName);
    String sesDuplicationQuery =
        "INSERT INTO STANDARD_EXTRACT_SOURCES "
            + "(SES_ID,NAME,FISCAL_YEAR,DS_ID,EFF_DT,DATE_CREATED,USER_CREATED,DATE_MODIFIED,USER_MODIFIED) "
            + "SELECT "
            + "SES_SEQ.nextval, ?, (SELECT FISCAL_YEAR FROM FISCAL_YEARS WHERE YEAR_TYPE = 'C'), ses.ds_id, ses.eff_dt, systimestamp , ?, systimestamp , ? "
            + "FROM STANDARD_EXTRACT_SOURCES ses "
            + "WHERE ses.ses_id = ?";
    Query insert = getEntityManager().createNativeQuery(sesDuplicationQuery);
    insert.setParameter(1, newName);
    insert.setParameter(2, userName);
    insert.setParameter(3, userName);
    insert.setParameter(4, sesId);
    insert.executeUpdate();
  }

  /**
   * Copy the child provider definitions for a sesId
   *
   * @param userName String
   * @param sesId Long
   */
  private void copyProviderDefinitions(String userName, Long sesId) {
    LOG.debug("Duplicating provider definitions for : {}", sesId);
    String pdDuplicationQuery =
        "INSERT INTO PROVIDER_DEFINITIONS"
            + "(PD_ID,SES_ID,PT_ID,LEI,EFF_DT,NAME,OR_ID,DATE_CREATED,USER_CREATED,DATE_MODIFIED,USER_MODIFIED) "
            + "SELECT PD_SEQ.nextval, SES_SEQ.currval, pd.PT_ID, pd.LEI, systimestamp , pd.name, pd.OR_ID, systimestamp , ?, systimestamp , ? "
            + "FROM PROVIDER_DEFINITIONS pd "
            + "WHERE pd.ses_id = ? AND pd.END_DT IS NULL";
    Query insert = getEntityManager().createNativeQuery(pdDuplicationQuery);
    insert.setParameter(1, userName);
    insert.setParameter(2, userName);
    insert.setParameter(3, sesId);
    insert.executeUpdate();
  }
}
