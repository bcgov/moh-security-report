package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.IndicatorDto;
import ca.bc.gov.health.hamis.entity.Indicator;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.IIndicatorFacade;
import jakarta.ejb.Stateless;
import jakarta.persistence.Query;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

@Stateless
public class IndicatorFacade extends AbstractFacade<Indicator> implements IIndicatorFacade {

  private static final Logger LOG = LogManager.getLogger(IndicatorFacade.class);

  private static final String CLOSING_TAG_FOR_CELL = "</TD>";

  public IndicatorFacade() {
    super(Indicator.class);
  }

  @Override
  public List<IndicatorDto> getIndicators(String groupId) {
    if (groupId == null) return getAllIndicators();
    else return getAllIndicatorsForGroup(groupId);
  }

  private List<IndicatorDto> getAllIndicatorsForGroup(String groupId) {
    List<IndicatorDto> result = new ArrayList<>();
    LOG.debug("Retrieving all active indicators for group ID {}", groupId);

    try {
      Long lGroupId = Long.parseLong(groupId);
      Query query = getEntityManager().createNamedQuery("Indicator.findForGroup");
      query.setParameter("igrpId", lGroupId);
      @SuppressWarnings("unchecked")
      List<Indicator> list = query.getResultList();
      for (Indicator i : list) {
        result.add(HamisMapper.INSTANCE.toDto(i));
      }
    } catch (Exception e) {
      LOG.error("Eexception when converting {} to number", groupId, e.fillInStackTrace());
      return result;
    }

    LOG.debug("Indicators retrieved, {} entries found", result.size());
    return result;
  }

  private List<IndicatorDto> getAllIndicators() {

    List<IndicatorDto> result = new ArrayList<>();
    LOG.debug("Retrieving all active indicators");

    Query query = getEntityManager().createNamedQuery("Indicator.findAll");
    @SuppressWarnings("unchecked")
    List<Indicator> list = query.getResultList();
    for (Indicator i : list) {
      result.add(HamisMapper.INSTANCE.toDto(i));
    }

    LOG.debug("Indicators retrieved, {} entries found", result.size());
    return result;
  }

  @Override
  public List<String> getMarkup(String groupId) {
    List<IndicatorDto> indicators = getIndicators(groupId);
    List<String> result = new ArrayList<>();

    Pattern pattern = Pattern.compile("(\\{[A-I]\\})(.*?)(($)|(?=\\{))");

    char token;
    StringBuilder output;
    String closingTag = "";
    boolean inList, inTable;

    for (IndicatorDto i : indicators) {
      String definition = i.getDefinition();
      output = new StringBuilder();

      Matcher m = pattern.matcher(definition);
      inTable = false;
      inList = false;
      while (m.find()) {
        if (m.group(1).length() > 1) token = m.group(1).charAt(1);
        else token = 'Z';

        if (inList && token != 'C') {
          closingTag = "</UL></SPAN>";
          output.append("").append(closingTag);
          inList = false;
        }

        if (inTable
            && token != 'E'
            && token != 'F'
            && token != 'G'
            && token != 'H'
            && token != 'I') {
          closingTag = "</TR></TABLE>";
          output.append("").append(closingTag);
          inTable = false;
        }

        closingTag = "";

        switch (token) {
          case 'A':
            output.append("<SPAN CLASS=\"title\">");
            closingTag = "</SPAN><P>";
            break;
          case 'B':
            output.append("<SPAN CLASS=\"descr\">");
            closingTag = "</SPAN>";
            break;
          case 'C':
            closingTag = "";
            if (inList) output.append("<LI class=\"report\">");
            else {
              output.append("<SPAN CLASS=\"descr\"><UL><LI class=\"report\">");
              inList = true;
            }
            break;
          case 'D':
            output.append("<P><SPAN CLASS=\"formula\">");
            closingTag = "</SPAN>";
            break;
          case 'E':
            if (inTable) {
              output.append("</TR>");
            } else {
              output.append("<P><TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0>");
              inTable = true;
            }
            output.append("<TR><TD CLASS=\"term\">");
            closingTag = CLOSING_TAG_FOR_CELL;
            break;
          case 'F':
            output.append("<TD CLASS=\"acct\">");
            closingTag = CLOSING_TAG_FOR_CELL;
            break;
          case 'G':
            if (inTable) {
              output.append("</TR>");
            } else {
              output.append("<P><TABLE BORDER=0 CELLPADDING=0 CELLSPACING=0>");
              inTable = true;
            }
            output.append("'<TR><TD CLASS=\"note\">");
            closingTag = CLOSING_TAG_FOR_CELL;
            break;
          case 'H':
            output.append("<TD CLASS=\"acct\" COLSPAN=\"2\">");
            closingTag = CLOSING_TAG_FOR_CELL;
            break;
          case 'I':
            output.append("</TR><TR STYLE=\"height: 7px;\"><TD COLSPAN=3></TD>");
            closingTag = "";
            break;
          default:
        }

        output.append(m.group(2)).append(closingTag);
      }

      if (inTable) closingTag = "</TR></TABLE>";
      output.append(closingTag);

      result.add(output.toString());
    }
    return result;
  }
}
