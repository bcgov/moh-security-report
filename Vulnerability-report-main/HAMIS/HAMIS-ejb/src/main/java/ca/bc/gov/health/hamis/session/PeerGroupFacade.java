package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.PeerGroupDto;
import ca.bc.gov.health.hamis.entity.PeerGroup;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.IPeerGroupFacade;
import jakarta.ejb.Stateless;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import lombok.val;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Implementation of IPeerGroupFacade interface
 *
 * @author vladimir.dovgalyuk
 */
@Stateless
public class PeerGroupFacade extends AbstractFacade<PeerGroup> implements IPeerGroupFacade {

  private static final Logger LOG = LogManager.getLogger(PeerGroupFacade.class);

  public PeerGroupFacade() {
    super(PeerGroup.class);
  }

  /**
   * Returns the list of all Local Health Areas
   *
   * @return
   */
  @Override
  public List<PeerGroupDto> getAll() {
    List<PeerGroupDto> result = new ArrayList<>();
    Query query = getEntityManager().createNamedQuery("PeerGroup.findAll");
    List<?> groups = query.getResultList();
    for (val group : groups) {
      result.add(HamisMapper.INSTANCE.toDto((PeerGroup) group));
    }
    return result;
  }

  @Override
  public void createPeerGroup(PeerGroupDto value) {
    LOG.debug("Creating peer group");
    PeerGroup group = HamisMapper.INSTANCE.toModel(value);
    Date d = new Date();
    if (group.getDateCreated() == null) group.setDateCreated(d);
    if (group.getDateModified() == null) group.setDateModified(d);
    getEntityManager().persist(group);
    LOG.debug("New peer group created");
  }

  @Override
  public void updatePeerGroup(PeerGroupDto value) {
    LOG.debug("Updating peer group");
    PeerGroup group = getEntityManager().find(PeerGroup.class, value.getPgCode());
    group.setDescription(value.getDescription());
    group.setDateModified(new Date());
    group.setUserModified(value.getUserModified());
    getEntityManager().merge(group);
    LOG.debug("Peer group updated");
  }

  @Override
  public boolean deletePeerGroup(String code) {
    LOG.debug("Deleting peer group for code {}", code);

    LOG.debug("Checking for dependencies");
    String sql = "SELECT COUNT(*) FROM HEALTH_ORGANIZATIONS WHERE PG_CODE = ? ";
    Query query = getEntityManager().createNativeQuery(sql);
    query.setParameter(1, code);
    long count = ((BigDecimal) query.getSingleResult()).intValue();

    if (count == 0L) {
      PeerGroup group = getEntityManager().find(PeerGroup.class, code);
      getEntityManager().remove(group);
      LOG.debug("Peer group deleted");
      return true;
    } else {
      LOG.info("Dependent records found, peer group with code {} cannot be deleted", code);
      return false;
    }
  }
}
