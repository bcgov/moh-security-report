/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.MiscoaAccountDto;
import ca.bc.gov.health.hamis.dto.PrimaryAccountDto;
import ca.bc.gov.health.hamis.dto.SecondaryAccountDto;
import ca.bc.gov.health.hamis.entity.MiscoaPrimaryAcct;
import ca.bc.gov.health.hamis.entity.MiscoaSecondaryAcct;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.IMiscoaAccountFacade;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Facade class for Miscoa accounts
 *
 * @author greg.perkins
 */
@Stateless
public class MiscoaAccountFacade implements IMiscoaAccountFacade {

  /** Log instance */
  private static final Logger LOG = LogManager.getLogger(MiscoaAccountFacade.class);

  /** Entity Manager instance for persistence */
  @PersistenceContext protected EntityManager em;

  /**
   * Get the primary accounts as droplist items
   *
   * @param fiscalYear String
   * @return List<SelectItem>
   */
  @Override
  public List<MiscoaAccountDto> getPrimaryAccounts(String fiscalYear) {
    List<MiscoaAccountDto> items = new ArrayList<>();
    String query =
        "SELECT MPA_ID, PRMRY_ACCT_NUMBER, LEVEL_NAME, LVL_IND FROM MISCOA_PRIMARY_ACCTS where FISCAL_YEAR = ?";
    List<Object[]> results =
        em.createNativeQuery(query).setParameter(1, fiscalYear).getResultList();
    for (Object[] acct : results) {
      items.add(
          new MiscoaAccountDto(
              ((BigDecimal) acct[0]).longValue(),
              (String) acct[1],
              (String) acct[2],
              ((BigDecimal) acct[3]).intValue()));
    }
    return items;
  }

  /**
   * Get the secondary accounts as droplist items
   *
   * @param fiscalYear String
   * @return List<SelectItem>
   */
  @Override
  public List<MiscoaAccountDto> getSecondaryAccounts(String fiscalYear, String fsDataType) {
    List<MiscoaAccountDto> items = new ArrayList<>();
    String query =
        "SELECT MSA_ID, SCNDRY_ACCT_NUMBER, LEVEL_NAME, LVL_IND FROM MISCOA_SECONDARY_ACCTS where FISCAL_YEAR = ? AND FS_DATA_TYPE=?";
    List<Object[]> results =
        em.createNativeQuery(query)
            .setParameter(1, fiscalYear)
            .setParameter(2, fsDataType)
            .getResultList();
    for (Object[] acct : results) {
      items.add(
          new MiscoaAccountDto(
              ((BigDecimal) acct[0]).longValue(),
              (String) acct[1],
              (String) acct[2],
              ((BigDecimal) acct[3]).intValue()));
    }
    return items;
  }

  /**
   * Returns the list of top-level primary accounts for a given fiscal year
   *
   * @param fiscalYear String
   * @return List<MiscoaAccountDto>
   */
  @Override
  public List<MiscoaAccountDto> getTopLevelPrimaryAccounts(String fiscalYear) {
    LOG.debug("Getting top-level primary accounts for: {}", fiscalYear);
    List<MiscoaAccountDto> items = new ArrayList<>();
    String query =
        "(SELECT at.ACCTYP_CODE||'00000000' AS ACCOUNT_NUMBER, at.DESCRIPTION AS ACCOUNT_NAME, 0 AS LVL_IND\n"
            + "FROM\n"
            + "ACCOUNT_TYPES at)\n"
            + "UNION\n"
            + "(SELECT at.ACCTYP_CODE||ft.FNDTYP_CODE||'0000000' AS ACCOUNT_NUMBER, ft.DESCRIPTION AS ACCOUNT_NAME, 1 AS LVL_IND\n"
            + "FROM\n"
            + "ACCOUNT_TYPES at,\n"
            + "FUND_TYPES ft)";
    List<Object[]> results =
        em.createNativeQuery(query).setParameter(1, fiscalYear).getResultList();
    for (Object[] acct : results) {
      items.add(
          new MiscoaAccountDto(
              null, (String) acct[0], (String) acct[1], ((BigDecimal) acct[2]).intValue()));
    }
    return items;
  }

  /**
   * Returns the list of non top-level primary accounts for a given fiscal year
   *
   * @param fiscalYear String
   * @return List<MiscoaAccountDto>
   */
  @Override
  public List<MiscoaAccountDto> getChildPrimaryAccounts(String fiscalYear) {
    LOG.debug("Getting child primary accounts for: {}", fiscalYear);
    List<MiscoaAccountDto> items = new ArrayList<>();
    String query =
        "SELECT MPA_ID, PRMRY_ACCT_NUMBER, LEVEL_NAME, LVL_IND FROM MISCOA_PRIMARY_ACCTS WHERE LVL_IND >=2 AND LVL_2<>'0' AND FISCAL_YEAR=? ORDER BY LVL_IND, PRMRY_ACCT_NUMBER";
    List<Object[]> results =
        em.createNativeQuery(query).setParameter(1, fiscalYear).getResultList();
    for (Object[] acct : results) {
      items.add(
          new MiscoaAccountDto(
              ((BigDecimal) acct[0]).longValue(),
              (String) acct[1],
              (String) acct[2],
              ((BigDecimal) acct[3]).intValue()));
    }
    return items;
  }

  /**
   * Returns the list of top-level secondary accounts for a given fiscal year & data type
   *
   * @param fiscalYear String
   * @param fsDataType String
   * @return List<MiscoaAccountDto>
   */
  @Override
  public List<MiscoaAccountDto> getTopLevelSecondaryAccounts(String fiscalYear, String fsDataType) {
    LOG.debug("Getting top-level secondary accounts for: {}", fiscalYear);
    List<MiscoaAccountDto> items = new ArrayList<>();
    String query =
        "SELECT MSA_ID, SCNDRY_ACCT_NUMBER, LEVEL_NAME, LVL_IND FROM MISCOA_SECONDARY_ACCTS WHERE SCNDRY_ACCT_NUMBER<>'0000000' AND LVL_IND =1 AND FISCAL_YEAR=? AND FS_DATA_TYPE=? ORDER BY LVL_IND, SCNDRY_ACCT_NUMBER";
    List<Object[]> results =
        em.createNativeQuery(query)
            .setParameter(1, fiscalYear)
            .setParameter(2, fsDataType)
            .getResultList();
    for (Object[] acct : results) {
      items.add(
          new MiscoaAccountDto(
              ((BigDecimal) acct[0]).longValue(),
              (String) acct[1],
              (String) acct[2],
              ((BigDecimal) acct[3]).intValue()));
    }
    return items;
  }

  /**
   * Returns the list of non top-level secondary accounts for a given fiscal year & data type
   *
   * @param fiscalYear String
   * @param fsDataType String
   * @return List<MiscoaAccountDto>
   */
  @Override
  public List<MiscoaAccountDto> getChildSecondaryAccounts(String fiscalYear, String fsDataType) {
    LOG.debug("Getting child secondary accounts for: {}", fiscalYear);
    List<MiscoaAccountDto> items = new ArrayList<>();
    String query =
        "SELECT MSA_ID, SCNDRY_ACCT_NUMBER, LEVEL_NAME, LVL_IND FROM MISCOA_SECONDARY_ACCTS WHERE LVL_IND >1 AND FISCAL_YEAR=? AND FS_DATA_TYPE=? ORDER BY LVL_IND, SCNDRY_ACCT_NUMBER";
    List<Object[]> results =
        em.createNativeQuery(query)
            .setParameter(1, fiscalYear)
            .setParameter(2, fsDataType)
            .getResultList();
    for (Object[] acct : results) {
      items.add(
          new MiscoaAccountDto(
              ((BigDecimal) acct[0]).longValue(),
              (String) acct[1],
              (String) acct[2],
              ((BigDecimal) acct[3]).intValue()));
    }
    return items;
  }

  /**
   * Queries for a Primary Account
   *
   * @param mpaId long
   * @return PrimaryAccountDto
   */
  @Override
  public PrimaryAccountDto getPrimaryAccount(Long mpaId) {
    MiscoaPrimaryAcct p = em.find(MiscoaPrimaryAcct.class, mpaId);
    return HamisMapper.INSTANCE.toDto(p);
  }

  /**
   * Creates a new Primary Account
   *
   * @param dto PrimaryAccountDto
   * @return long - the generated ID
   */
  @Override
  public long createPrimaryAccount(PrimaryAccountDto dto) {
    MiscoaPrimaryAcct mpa = HamisMapper.INSTANCE.toModel(dto);
    em.persist(mpa);
    return mpa.getMpaId();
  }

  /**
   * Updates an existing Primary Account
   *
   * @param dto PrimaryAccountDto
   */
  @Override
  public void updatePrimaryAccount(PrimaryAccountDto dto) {
    MiscoaPrimaryAcct mpa = HamisMapper.INSTANCE.toModel(dto);
    em.merge(mpa);
  }

  /**
   * Deletes an existing Primary Account
   *
   * @param dto PrimaryAccountDto
   */
  @Override
  public void deletePrimaryAccount(PrimaryAccountDto dto) {
    MiscoaPrimaryAcct mpa = em.find(MiscoaPrimaryAcct.class, dto.getMpaId());
    em.remove(mpa);
  }

  /**
   * Queries for a Secondary Account
   *
   * @param msaId long
   * @return SecondaryAccountDto
   */
  @Override
  public SecondaryAccountDto getSecondaryAccount(Long msaId) {
    MiscoaSecondaryAcct p = em.find(MiscoaSecondaryAcct.class, msaId);
    return HamisMapper.INSTANCE.toDto(p);
  }

  /**
   * Creates a new Secondary Account
   *
   * @param dto SecondaryAccountDto
   * @return long - the generated ID
   */
  @Override
  public long createSecondaryAccount(SecondaryAccountDto dto) {
    MiscoaSecondaryAcct msa = HamisMapper.INSTANCE.toModel(dto);
    if (dto.getSl3Id() == null) {
      msa.setSl3Id(null);
    }
    em.persist(msa);
    return msa.getMsaId();
  }

  /**
   * Updates an existing Secondary Account
   *
   * @param dto SecondaryAccountDto
   */
  @Override
  public void updateSecondaryAccount(SecondaryAccountDto dto) {
    MiscoaSecondaryAcct msa = HamisMapper.INSTANCE.toModel(dto);
    if (dto.getSl3Id() == null) {
      msa.setSl3Id(null);
    }
    em.merge(msa);
  }

  /**
   * Deletes an existing Secondary Account
   *
   * @param dto SecondaryAccountDto
   */
  @Override
  public void deleteSecondaryAccount(SecondaryAccountDto dto) {
    MiscoaSecondaryAcct msa = em.find(MiscoaSecondaryAcct.class, dto.getMsaId());
    em.remove(msa);
  }

  /**
   * Determines if an account is in use
   *
   * @param primaryAccount PrimaryAccountDto
   * @return boolean
   */
  @Override
  public boolean accountInUse(PrimaryAccountDto primaryAccount) {
    String query =
        "SELECT (SELECT COUNT(*) FROM TRXN_DATA_ACCT_VALUES WHERE MPA_ID = ?) + (SELECT COUNT(*) FROM CUSTOM_ACCOUNTS WHERE MPA_ID = ?) + (SELECT COUNT(*) FROM PRIMARY_YEAR_MAP WHERE MPA_ID = ?) FROM DUAL";
    Query q = em.createNativeQuery(query);
    q.setParameter(1, primaryAccount.getMpaId());
    q.setParameter(2, primaryAccount.getMpaId());
    q.setParameter(3, primaryAccount.getMpaId());
    BigDecimal count = (BigDecimal) q.getSingleResult();
    return count.intValue() > 0;
  }

  /**
   * Determines if an account is in use
   *
   * @param secondaryAccount SecondaryAccountDto
   * @return boolean
   */
  @Override
  public boolean accountInUse(SecondaryAccountDto secondaryAccount) {
    String query =
        "SELECT (SELECT COUNT(*) FROM TRXN_DATA_ACCT_VALUES WHERE MSA_ID = ?) + (SELECT COUNT(*) FROM CUSTOM_ACCOUNTS WHERE MSA_ID = ?) FROM DUAL";
    Query q = em.createNativeQuery(query);
    q.setParameter(1, secondaryAccount.getMsaId());
    q.setParameter(2, secondaryAccount.getMsaId());
    BigDecimal count = (BigDecimal) q.getSingleResult();
    return count.intValue() > 0;
  }

  /**
   * Determines if an account matching the pattern exists
   *
   * @param pattern String
   * @param fiscalYear String
   * @return boolean
   */
  @Override
  public boolean isValidPrimaryAccount(String pattern, String fiscalYear) {
    String query =
        "SELECT COUNT(*) FROM MISCOA_PRIMARY_ACCTS WHERE FISCAL_YEAR = ? AND PRMRY_ACCT_NUMBER LIKE ?";
    Query q = em.createNativeQuery(query);
    q.setParameter(1, fiscalYear);
    q.setParameter(2, pattern);
    BigDecimal count = (BigDecimal) q.getSingleResult();
    return count.intValue() > 0;
  }

  /**
   * Determines if an account matching the pattern exists
   *
   * @param pattern String
   * @param fiscalYear String
   * @return boolean
   */
  @Override
  public boolean isValidSecondaryAccount(String pattern, String fiscalYear) {
    String query =
        "SELECT COUNT(*) FROM MISCOA_SECONDARY_ACCTS WHERE FISCAL_YEAR = ? AND SCNDRY_ACCT_NUMBER LIKE ?";
    Query q = em.createNativeQuery(query);
    q.setParameter(1, fiscalYear);
    q.setParameter(2, pattern);
    BigDecimal count = (BigDecimal) q.getSingleResult();
    return count.intValue() > 0;
  }
}
