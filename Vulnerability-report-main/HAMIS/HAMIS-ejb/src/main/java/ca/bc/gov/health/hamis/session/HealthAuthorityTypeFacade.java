package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.HealthAuthorityTypeDto;
import ca.bc.gov.health.hamis.entity.HealthAuthorityType;
import ca.bc.gov.health.hamis.mapper.HamisMapper;
import ca.bc.gov.health.hamis.service.IHealthAuthorityTypeFacade;
import jakarta.ejb.Stateless;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import lombok.val;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Implementation of the IHealthAuthorityTypeFacade interface
 *
 * @author vladimir.dovgalyuk
 */
@Stateless
public class HealthAuthorityTypeFacade extends AbstractFacade<HealthAuthorityType>
    implements IHealthAuthorityTypeFacade {

  private static final Logger LOG = LogManager.getLogger(HealthAuthorityTypeFacade.class);

  /** no-arg constructor */
  public HealthAuthorityTypeFacade() {
    super(HealthAuthorityType.class);
  }

  @Override
  public List<HealthAuthorityTypeDto> getAll() {
    List<HealthAuthorityTypeDto> result = new ArrayList<>();
    Query query = getEntityManager().createNamedQuery("HealthAuthorityType.findAll");
    List<?> groups = query.getResultList();
    for (val group : groups) {
      result.add(HamisMapper.INSTANCE.toDto((HealthAuthorityType) group));
    }
    return result;
  }

  @Override
  public void createHealthAuthorityType(HealthAuthorityTypeDto value) {
    LOG.debug("Creating Health Authority type");
    HealthAuthorityType haType = HamisMapper.INSTANCE.toModel(value);
    Date d = new Date();
    if (haType.getDateCreated() == null) haType.setDateCreated(d);
    if (haType.getDateModified() == null) haType.setDateModified(d);
    getEntityManager().persist(haType);
    LOG.debug("New Health Authority type created");
  }

  @Override
  public void updateHealthAuthorityType(HealthAuthorityTypeDto value) {
    LOG.debug("Updating Health Authority type");
    HealthAuthorityType haType =
        getEntityManager().find(HealthAuthorityType.class, value.getHatypCode());
    haType.setDescription(value.getDescription());
    haType.setDateModified(new Date());
    haType.setUserModified(value.getUserModified());
    getEntityManager().merge(haType);
    LOG.debug("Health Authority type updated");
  }

  @Override
  public boolean deleteHealthAuthorityType(String code) {
    LOG.debug("Deleting Health Authority type for code {}", code);

    LOG.debug("Checking for dependencies");
    String sql = "SELECT COUNT(*) FROM HEALTH_ORGANIZATIONS WHERE HATYP_CODE = ? ";
    Query query = getEntityManager().createNativeQuery(sql);
    query.setParameter(1, code);
    long count = ((BigDecimal) query.getSingleResult()).intValue();

    if (count == 0L) {
      HealthAuthorityType haType = getEntityManager().find(HealthAuthorityType.class, code);
      getEntityManager().remove(haType);
      LOG.debug("Health Authority type deleted");
      return true;
    } else {
      LOG.info(
          "Dependent records found, Health Authority type with code {} cannot be deleted", code);
      return false;
    }
  }
}
