package ca.bc.gov.health.hamis.session;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import ca.bc.gov.health.hamis.dto.FiscalYearDto;
import ca.bc.gov.health.hamis.util.HamisConstants;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

public class FiscalYearFacadeTest extends AbstractFacadeTest {

  private static FiscalYearFacade fiscalYearFacade;
  private static ReportingPeriodFacade reportingPeriodFacade;

  @Before
  public void setUp() {
    fiscalYearFacade = new FiscalYearFacade();
    fiscalYearFacade.setEntityManager(entityManager);
    reportingPeriodFacade = new ReportingPeriodFacade();
    reportingPeriodFacade.setEntityManager(entityManager);
  }

  @After
  public void tearDown() throws Exception {}

  @Test
  public void testGetAllFiscalYearRecords_ReturnsData() {
    try {
      assertNotNull(fiscalYearFacade.findAllFiscalYears());
    } catch (Exception e) {
      fail();
    }
  }

  @Test
  public void testGetCurrentYear_ReturnsData() {
    try {
      FiscalYearDto currentYear = fiscalYearFacade.getCurrentFiscalYear();
      assertNotNull(currentYear);
      assertEquals("C", currentYear.getYearType());

    } catch (Exception e) {
      fail();
    }
  }

  @Test
  public void testCreateYear_OK() {
    try {
      FiscalYearDto newYear = buildFutureFiscalYear();
      // Create year
      fiscalYearFacade.createFiscalYear(newYear);

      FiscalYearDto createdYear = fiscalYearFacade.getFiscalYear(newYear.getFiscalYear());
      assertNotNull(createdYear);
      assertEquals(newYear, createdYear);
      assertEquals(newYear.getFiscalYear(), createdYear.getFiscalYear());
      assertEquals(newYear.getStartDate(), createdYear.getStartDate());

      // clean up
      cleanUp(createdYear);
    } catch (Exception e) {
      fail();
    }
  }

  private FiscalYearDto buildFutureFiscalYear() {
    FiscalYearDto newFiscalYear = new FiscalYearDto();
    newFiscalYear.setYearType(HamisConstants.YearType.FUTURE.getShortName());

    // Get current year and add a year to end and start date
    FiscalYearDto currentYear = fiscalYearFacade.getCurrentFiscalYear();

    Calendar startDateCal =
        GregorianCalendar.from(
            ZonedDateTime.ofInstant(
                currentYear.getStartDate().toInstant(), ZoneId.systemDefault()));
    startDateCal.add(Calendar.YEAR, 1);
    newFiscalYear.setStartDate(startDateCal.getTime());

    Calendar endDateCal =
        GregorianCalendar.from(
            ZonedDateTime.ofInstant(currentYear.getEndDate().toInstant(), ZoneId.systemDefault()));
    endDateCal.add(Calendar.YEAR, 1);
    newFiscalYear.setEndDate(endDateCal.getTime());

    // FiscalYear ID also based on current Year
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy");
    String beginningFiscalYear = sdf.format(startDateCal.getTime());
    String endFiscalYear = sdf.format(endDateCal.getTime());
    newFiscalYear.setFiscalYear(beginningFiscalYear + "/" + endFiscalYear);

    // Audit fields
    newFiscalYear.setDateCreated(new Date());
    newFiscalYear.setUserCreated("UNIT_TEST");

    return newFiscalYear;
  }

  private void cleanUp(FiscalYearDto fiscalYearToDelete) {
    // reportingPeriodFacade.deleteReportingPeriodsForFiscalYear(fiscalYearToDelete.getFiscalYear());
    fiscalYearFacade.deleteFiscalYear(fiscalYearToDelete);
  }
}
