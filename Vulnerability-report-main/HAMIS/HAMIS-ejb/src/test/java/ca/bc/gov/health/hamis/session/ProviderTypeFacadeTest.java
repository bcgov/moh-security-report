package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.FiscalYearDto;
import ca.bc.gov.health.hamis.dto.ProviderTypeDto;
import ca.bc.gov.health.hamis.dto.SectorTypeDto;
import ca.bc.gov.health.hamis.dto.ServiceTypeDto;
import ca.bc.gov.health.hamis.entity.ProviderType;
import jakarta.persistence.EntityTransaction;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Before;
import org.junit.Test;

public class ProviderTypeFacadeTest extends AbstractFacadeTest {

  private static final Logger LOG = LogManager.getLogger(ProviderTypeFacadeTest.class);

  protected static ProviderTypeFacade facade;
  protected static FiscalYearFacade fiscalYearFacade;
  protected static SectorTypeFacade sectorTypeFacade;
  protected static ServiceTypeFacade serviceTypeFacade;

  @Before
  public void setUp() {
    facade = new ProviderTypeFacade();
    facade.setEntityManager(entityManager);
    fiscalYearFacade = new FiscalYearFacade();
    fiscalYearFacade.setEntityManager(entityManager);
    sectorTypeFacade = new SectorTypeFacade();
    sectorTypeFacade.setEntityManager(entityManager);
    serviceTypeFacade = new ServiceTypeFacade();
    serviceTypeFacade.setEntityManager(entityManager);
  }

  @Test
  public void getListForFiscalYear() {
    String fiscalYear = "2019/2020";
    LOG.debug("Getting list of provider types for the fiscal year {}", fiscalYear);
    List<ProviderTypeDto> providers = facade.getProviderTypesByFiscalYear(fiscalYear);
    assert (!providers.isEmpty());
    LOG.debug("{} provider(s) found.", providers.size());
  }

  /** Attempt to delete the provider type in use */
  @Test
  public void deleteProviderType() {
    LOG.debug("===== Testing Provider Type deletion");
    LOG.debug("Getting ID of the Provider Type in use");
    String sql =
        "SELECT PT_ID FROM (SELECT PT_ID FROM PROVIDER_DEFINITIONS WHERE END_DT IS NULL ORDER BY PT_ID DESC) WHERE ROWNUM = 1";
    Query query = entityManager.createNativeQuery(sql);
    BigDecimal id = (BigDecimal) query.getSingleResult();
    LOG.debug("ID of the Provider Type in use is {}", id.longValue());
    ProviderType providerType = entityManager.find(ProviderType.class, id.longValue());

    EntityTransaction t = entityManager.getTransaction();
    if (t.isActive()) t.rollback();
    t.begin();
    try {
      boolean result =
          facade.deleteProviderType(
              providerType.getHarpPrvdrCode(),
              providerType.getFiscalYear().getFiscalYear(),
              providerType.getSctrId().getSctrtypCode(),
              providerType.getSrvcId().getSrvctypCode());
      assert (!result);
    } catch (Exception e) {
      LOG.error("Exception in deleteProviderType", e.fillInStackTrace());
      t.rollback();
      throw new RuntimeException(e);
    }
    t.rollback();

    LOG.debug("+++++ Testing Provider Type deletion completed");
  }

  @Test
  public void createProviderType() {
    LOG.debug("===== Testing Provider Type creation");

    FiscalYearDto fiscalYear = fiscalYearFacade.getCurrentFiscalYear();
    assert (fiscalYear != null);

    List<SectorTypeDto> sectorTypes =
        sectorTypeFacade.getSectorTypesByFiscalYear(fiscalYear.getFiscalYear());
    assert (!sectorTypes.isEmpty());

    List<ServiceTypeDto> serviceTypes =
        serviceTypeFacade.getByFiscalYear(fiscalYear.getFiscalYear());
    assert (!serviceTypes.isEmpty());

    ProviderTypeDto providerType = new ProviderTypeDto();
    providerType.setFiscalYear(fiscalYear);
    providerType.setSctrId(sectorTypes.get(0));
    providerType.setSrvcId(serviceTypes.get(0));

    providerType.setHarpPrvdrCode("99");
    providerType.setHarpAbbreviation("999");
    // Audit
    providerType.setUserCreated("HAMIS");
    providerType.setUserModified("HAMIS");
    Date d = new Date();
    providerType.setDateCreated(d);
    providerType.setDateModified(d);

    int size = facade.getProviderTypesByFiscalYear(fiscalYear.getFiscalYear()).size();

    EntityTransaction t = entityManager.getTransaction();
    if (t.isActive()) t.rollback();
    t.begin();
    try {
      facade.createProviderType(providerType);
      int newSize = facade.getProviderTypesByFiscalYear(fiscalYear.getFiscalYear()).size();
      assert (size < newSize);
    } catch (Exception e) {
      LOG.error("Exception in createProviderType", e.fillInStackTrace());
      t.rollback();
      throw new RuntimeException(e);
    }
    t.rollback();

    LOG.debug("+++++ Testing Provider Type creation completed");
  }
}
