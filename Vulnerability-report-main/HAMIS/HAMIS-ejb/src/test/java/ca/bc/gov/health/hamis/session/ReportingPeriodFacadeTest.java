package ca.bc.gov.health.hamis.session;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import ca.bc.gov.health.hamis.dto.FiscalYearDto;
import ca.bc.gov.health.hamis.dto.ReportingPeriodDto;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.junit.Before;
import org.junit.Test;

public class ReportingPeriodFacadeTest extends AbstractFacadeTest {

  protected static ReportingPeriodFacade reportingPeriodFacade;
  protected static FiscalYearFacade fiscalYearFacade;

  @Before
  public void setUp() {
    reportingPeriodFacade = new ReportingPeriodFacade();
    reportingPeriodFacade.setEntityManager(entityManager);
    fiscalYearFacade = new FiscalYearFacade();
    fiscalYearFacade.setEntityManager(entityManager);
  }

  @Test
  public void testGetReportingPeriodRecordsForFiscalYear_ReturnsData() {
    try {
      FiscalYearDto currentYear = fiscalYearFacade.getCurrentFiscalYear();
      List<ReportingPeriodDto> listPeriod =
          reportingPeriodFacade.getReportingPeriodsForFiscalYear(currentYear.getFiscalYear());
      assertNotNull(listPeriod);
      assertEquals(14, listPeriod.size());
    } catch (Exception e) {
      fail();
    }
  }

  @Test
  public void testUpdateReportingPeriods() {
    try {
      FiscalYearDto currentYear = fiscalYearFacade.getCurrentFiscalYear();
      List<ReportingPeriodDto> listPeriod =
          reportingPeriodFacade.getReportingPeriodsForFiscalYear(currentYear.getFiscalYear());
      assertNotNull(listPeriod);
      assertEquals(14, listPeriod.size());

      ReportingPeriodDto updatedPeriod1 = listPeriod.get(0);
      updatedPeriod1.setDateModified(new Date());
      updatedPeriod1.setStartDate(new Date());
      ReportingPeriodDto updatedPeriod3 = listPeriod.get(2);
      updatedPeriod1.setDateModified(new Date());
      updatedPeriod1.setEndDate(new Date());
      ReportingPeriodDto updatedPeriodPA = listPeriod.get(13);
      updatedPeriod1.setDateModified(new Date());
      updatedPeriod1.setDueDate(new Date());

      List<ReportingPeriodDto> updatedPeriods = new ArrayList<>();
      updatedPeriods.add(updatedPeriod1);
      updatedPeriods.add(updatedPeriod3);
      updatedPeriods.add(updatedPeriodPA);

      reportingPeriodFacade.updateReportingPeriods(updatedPeriods);

      List<ReportingPeriodDto> listPeriodUpdated =
          reportingPeriodFacade.getReportingPeriodsForFiscalYear(currentYear.getFiscalYear());
      assertNotNull(listPeriodUpdated);
      assertEquals(14, listPeriodUpdated.size());

    } catch (Exception e) {
      fail();
    }
  }
}
