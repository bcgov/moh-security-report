package ca.bc.gov.health.hamis.session;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;

import ca.bc.gov.health.hamis.dto.CustomAccountGroupingDto;
import ca.bc.gov.health.hamis.entity.CustomAccount;
import ca.bc.gov.health.hamis.entity.CustomAccountGrouping;
import ca.bc.gov.health.hamis.exception.HamisException;
import jakarta.persistence.EntityTransaction;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Before;
import org.junit.Test;

public class CustomAccountGroupingFacadeTest extends AbstractFacadeTest {

  private static final Logger LOG = LogManager.getLogger(CustomAccountGroupingFacadeTest.class);

  protected static CustomAccountGroupingFacade customAccountGroupingFacade;
  protected static CustomAccountFacade customAccountFacade;

  @Before
  public void setUp() {
    customAccountGroupingFacade = new CustomAccountGroupingFacade();
    customAccountGroupingFacade.setEntityManager(entityManager);
    customAccountFacade = new CustomAccountFacade();
    customAccountFacade.setEntityManager(entityManager);
  }

  @Test
  public void testGetCustomAccountGroupingRecords_ReturnsData_ForGivenYearAndHealthOrganization() {
    try {
      assertNotNull(
          customAccountGroupingFacade.getCustomAccountGroupingsDetails("2019/2020", 3273));
      //
      // assertNotNull(customAccountGroupingFacade.getCustomAccountGroupingsDetails("2018/2019",3274));
      //
      // assertNotNull(customAccountGroupingFacade.getCustomAccountGroupingsDetails("2004/2005",3274));

    } catch (HamisException e) {
      e.getStackTrace();
      fail();
    }
  }

  @Test
  public void
      testGetCustomAccountGroupingRecords_NotReturnsData_ForGivenYearAndHealthOrganization() {
    try {
      /*
       *HoId 3274
       */
      List<CustomAccountGroupingDto> unfilteredList =
          customAccountGroupingFacade.getAllCustomAccountGroupingsSummary("2019/2020", 3274);
      List<CustomAccountGroupingDto> list =
          customAccountGroupingFacade.getCustomAccountGroupingsDetails("2019/2020", 3274);
      assertTrue(unfilteredList.size() > list.size());
      // assertEquals(1, list.size()); // one account is filtered out

    } catch (HamisException e) {
      e.getStackTrace();
      fail();
    }
  }

  @Test
  public void testFilterByReviewFlag_hasFlagY_returnEmpty() {
    // Build List<CustomAccountGrouping>
    List<CustomAccountGrouping> cagList = new ArrayList<>();

    CustomAccount caWithReviewFlagY = new CustomAccount();
    caWithReviewFlagY.setCaId(1L);
    caWithReviewFlagY.setReviewFlag("Y");

    CustomAccount caWithReviewFlagN = new CustomAccount();
    caWithReviewFlagN.setCaId(2L);
    caWithReviewFlagN.setReviewFlag("N");

    //            CustomAccount caWithReviewFlagNull = new CustomAccount();
    //            caWithReviewFlagN.setCaId(3);

    List<CustomAccount> accountList = new ArrayList<>();
    accountList.add(caWithReviewFlagY);
    accountList.add(caWithReviewFlagN);
    //            accountList.add(caWithReviewFlagNull);

    CustomAccountGrouping cagNotOK = new CustomAccountGrouping();
    cagNotOK.setCustomAccounts(accountList);

    cagList.add(cagNotOK);

    List<CustomAccountGrouping> filteredList =
        customAccountGroupingFacade.filterByReviewFlag(cagList);
    //  check that customAccountGrouping does not have any cuctomGrouping with RevewiFlag=Y;
    assertEquals(0, filteredList.size());
  }

  @Test
  public void testFilterByReviewFlag_doNotHaveY_returnCustomAccountGrouping() {
    // Build List<CustomAccountGrouping>
    List<CustomAccountGrouping> cagList = new ArrayList<>();

    //            CustomAccount caWithReviewFlagY = new CustomAccount();
    //            caWithReviewFlagY.setCaId(1);
    //            caWithReviewFlagY.setReviewFlag("Y");

    CustomAccount caWithReviewFlagN = new CustomAccount();
    caWithReviewFlagN.setCaId(2L);
    caWithReviewFlagN.setReviewFlag("N");

    CustomAccount caWithReviewFlagNull = new CustomAccount();
    caWithReviewFlagNull.setCaId(3L);

    List<CustomAccount> accountList = new ArrayList<>();
    //            accountList.add(caWithReviewFlagY);
    accountList.add(caWithReviewFlagN);
    accountList.add(caWithReviewFlagNull);

    CustomAccountGrouping cagOK = new CustomAccountGrouping();
    cagOK.setCustomAccounts(accountList);

    cagList.add(cagOK);

    List<CustomAccountGrouping> filteredList =
        customAccountGroupingFacade.filterByReviewFlag(cagList);
    // TODO check that customAccountGrouping does not have any cuctomGrouping with RevewiFlag=Y;
    assertEquals(1, filteredList.size());
  }

  /*
   * Testing soft deletion on the existing CAG with more than 1 custom accounts.
   */
  @Test
  public void testCascadeDelete() {
    LOG.debug("Testing soft deletion for CAG with multiple accounts");
    StringBuilder query = new StringBuilder();
    query.append("select cag_id from ( ");
    query.append(
        "select a.cag_id, count(a.ca_id) from custom_accounts a inner join custom_account_groupings cag on cag.cag_id = a.cag_id ");
    query.append("where a.end_dt is null and cag.end_dt is null ");
    query.append("group by a.cag_id having count(*) between 2 and 10 order by 2 desc) ");
    query.append("where rownum = 1 ");
    long cagId =
        ((Number) entityManager.createNativeQuery(query.toString()).getSingleResult()).longValue();
    LOG.debug("CAG ID is " + cagId);
    EntityTransaction t = entityManager.getTransaction();
    t.begin();
    try {
      CustomAccountGroupingDto dto = new CustomAccountGroupingDto();
      dto.setCagId(cagId);
      String user = "Test";
      customAccountGroupingFacade.deleteCustomAccountMap(dto, user);

      CustomAccountGrouping cag = entityManager.find(CustomAccountGrouping.class, cagId);
      assert (cag.getCustomAccounts() != null);

      boolean result = true;
      for (CustomAccount ca : cag.getCustomAccounts()) {
        result = result && (ca.getEndDt() != null);
        result = result && (ca.getUserModified().equals(user));
      }
      assert (result);
    } catch (Exception e) {
      LOG.error("Exception in testCascadeDelete", e.fillInStackTrace());
      t.rollback();
      throw new RuntimeException(e);
    }
    t.rollback();
  }

  @Test
  public void testCustomAccountGroupAccounts() {
    LOG.debug("Checking CAG with multiple accounts");
    StringBuilder query = new StringBuilder();
    query.append("select cag_id from (");
    query.append(
        "select a.cag_id, count(*) from custom_accounts a where a.end_dt is null group by a.cag_id having count(*) between 2 and 10 order by 2 desc) ");
    query.append("where rownum = 1");
    long cagId =
        ((Number) entityManager.createNativeQuery(query.toString()).getSingleResult()).longValue();
    CustomAccountGrouping cag = entityManager.find(CustomAccountGrouping.class, cagId);
    LOG.debug("CAG ID is " + cagId);
    assert ((cag.getCustomAccounts().size() > 1) && (cag.getCustomAccounts().size() <= 10));
  }
}
