package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.FiscalYearDto;
import ca.bc.gov.health.hamis.dto.PrimaryAccountDto;
import jakarta.persistence.EntityTransaction;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Before;
import org.junit.Test;

public class MiscoaAccountFacadeTest extends AbstractFacadeTest {

  private static final Logger LOG = LogManager.getLogger(MiscoaAccountFacadeTest.class);

  protected static MiscoaAccountFacade miscoaAccountFacade;
  protected static FiscalYearFacade fiscalYearFacade;

  @Before
  public void setUp() {
    miscoaAccountFacade = new MiscoaAccountFacade();
    miscoaAccountFacade.em = entityManager;
    fiscalYearFacade = new FiscalYearFacade();
    fiscalYearFacade.setEntityManager(entityManager);
  }

  @Test
  public void testCreatePrimaryAccount() {
    LOG.debug("==== Testing Primary Account creation");
    // Select current fiscal year
    FiscalYearDto fiscalYear = fiscalYearFacade.getCurrentFiscalYear();

    assert (!miscoaAccountFacade.getPrimaryAccounts(fiscalYear.getFiscalYear()).isEmpty());
    LOG.debug("Fiscal year selectd is {}", fiscalYear.getFiscalYear());

    String query =
        "SELECT MPA_ID FROM MISCOA_PRIMARY_ACCTS WHERE "
            + " LVL_IND >= 2 AND LVL_2 = '1' "
            + " and acctyp_code = '1' "
            + " and fndtyp_code = '1' "
            + " and fiscal_year = ? "
            + " order by acctyp_code, fndtyp_code, lvl_2, lvl_3";
    List<?> results =
        entityManager
            .createNativeQuery(query)
            .setParameter(1, fiscalYear.getFiscalYear())
            .getResultList();
    assert (!results.isEmpty());

    Long parentId = ((BigDecimal) results.get(0)).longValue();
    LOG.debug("Parent primary account ID is {}", parentId);

    PrimaryAccountDto parentAccount = miscoaAccountFacade.getPrimaryAccount(parentId);
    LOG.debug(
        "Parent primary account # = {}; LvlInd = {}; Lvl2 = {}; AcctypCode = {}; FndtypCode = {}; ",
        parentAccount.getPrmryAcctNumber(),
        parentAccount.getLvlInd(),
        parentAccount.getLvl2(),
        parentAccount.getAcctypCode(),
        parentAccount.getFndtypCode());

    PrimaryAccountDto primaryAccount = new PrimaryAccountDto();
    primaryAccount.setFiscalYear(fiscalYear.getFiscalYear());
    primaryAccount.setLvlInd((short) (parentAccount.getLvlInd() + 1));
    primaryAccount.setAcctypCode(parentAccount.getAcctypCode());
    primaryAccount.setFndtypCode(parentAccount.getFndtypCode());

    boolean alreadyExists = true;
    String lvl3seed = "01";
    int seed = 1;
    long count;
    while (alreadyExists && (seed < 99)) {

      if (primaryAccount.getLvlInd() > 2) {
        primaryAccount.setLvl2(parentAccount.getLvl2());
      } else {
        primaryAccount.setLvl2("0");
      }
      if (primaryAccount.getLvlInd() > 3) {
        primaryAccount.setLvl3(parentAccount.getLvl3());
      } else {
        lvl3seed = Integer.toString(seed);
        if (seed < 10) lvl3seed = "0" + lvl3seed;
        primaryAccount.setLvl3(lvl3seed);
      }
      if (primaryAccount.getLvlInd() > 4) {
        primaryAccount.setLvl4(parentAccount.getLvl4());
      } else {
        primaryAccount.setLvl4("00");
      }
      primaryAccount.setLvl5("00");

      primaryAccount.setPrmryAcctNumber(
          primaryAccount.getAcctypCode()
              + primaryAccount.getFndtypCode()
              + primaryAccount.getLvl2()
              + primaryAccount.getLvl3()
              + primaryAccount.getLvl4()
              + primaryAccount.getLvl5());

      String sql =
          "SELECT COUNT(*) FROM MISCOA_PRIMARY_ACCTS WHERE PRMRY_ACCT_NUMBER = ? AND FISCAL_YEAR = ? ";
      count =
          ((BigDecimal)
                  entityManager
                      .createNativeQuery(sql)
                      .setParameter(1, primaryAccount.getPrmryAcctNumber())
                      .setParameter(2, primaryAccount.getFiscalYear())
                      .getSingleResult())
              .longValue();
      alreadyExists = count > 0;
      seed++;
    }
    if (seed > 98) {
      LOG.info("All slots have been taken");
      return;
    }
    primaryAccount.setAgglvl2(
        primaryAccount.getAcctypCode() + primaryAccount.getFndtypCode() + primaryAccount.getLvl2());
    primaryAccount.setAgglvl3(primaryAccount.getAgglvl2() + primaryAccount.getLvl3());
    primaryAccount.setAgglvl4(primaryAccount.getAgglvl3() + primaryAccount.getLvl4());

    primaryAccount.setShortName("JUnit test for Primary Account");
    primaryAccount.setLevelName("JUnit test for Primary Account");

    // Audit
    Date d = new Date();
    primaryAccount.setDateCreated(d);
    primaryAccount.setDateModified(d);
    primaryAccount.setUserCreated("TEST");
    primaryAccount.setUserModified("TEST");

    LOG.debug("New account primary account number is {} ", primaryAccount.getPrmryAcctNumber());

    EntityTransaction t = entityManager.getTransaction();
    t.begin();
    try {
      long id = miscoaAccountFacade.createPrimaryAccount(primaryAccount);
      assert (id > 0);
      LOG.debug("New account has been created with ID {}", id);
    } catch (Exception e) {
      LOG.error("Exception in testCreatePrimaryAccount", e.fillInStackTrace());
      t.rollback();
      throw new RuntimeException(e);
    }
    t.rollback();
  }
}
