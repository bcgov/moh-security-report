package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.HealthAuthorityTypeDto;
import ca.bc.gov.health.hamis.dto.HealthOrganizationDto;
import ca.bc.gov.health.hamis.dto.OrganizationRelationshipDto;
import ca.bc.gov.health.hamis.dto.PeerGroupDto;
import ca.bc.gov.health.hamis.dto.RegionalTeamDto;
import ca.bc.gov.health.hamis.dto.RelationshipTypeDto;
import ca.bc.gov.health.hamis.service.IHealthOrganizationFacade.HO_CREATE_NEGATIVE_RESULTS;
import ca.bc.gov.health.hamis.util.HamisConstants;
import jakarta.persistence.EntityTransaction;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Before;
import org.junit.Test;

public class HealthOrganizationFacadeTest extends AbstractFacadeTest {

  private static final Logger LOG = LogManager.getLogger(HealthOrganizationFacadeTest.class);

  protected static HealthOrganizationFacade facade;
  protected static HealthAuthorityTypeFacade haFacade;
  protected static PeerGroupFacade localHealthAreasFacade;
  protected static RegionalTeamFacade healthServiceDeliveryAreasFacade;
  protected static RelationshipTypeFacade relationshipTypeFacade;

  @Before
  public void setUp() {

    facade = new HealthOrganizationFacade();
    facade.setEntityManager(entityManager);

    haFacade = new HealthAuthorityTypeFacade();
    haFacade.setEntityManager(entityManager);

    localHealthAreasFacade = new PeerGroupFacade();
    localHealthAreasFacade.setEntityManager(entityManager);

    healthServiceDeliveryAreasFacade = new RegionalTeamFacade();
    healthServiceDeliveryAreasFacade.setEntityManager(entityManager);

    relationshipTypeFacade = new RelationshipTypeFacade();
    relationshipTypeFacade.setEntityManager(entityManager);
  }

  @Test
  public void getActiveHealthAuthorities() {
    LOG.debug("Getting active Health Authorities");
    List<HealthOrganizationDto> authorities = facade.getAllActiveHealthAuthorities();
    LOG.debug(
        (authorities.size() == 1
                ? "One authority "
                : "Totally " + authorities.size() + " authorities ")
            + "found");
    assert (authorities.size() > 0);
  }

  @Test
  public void getActiveHealthOrganizations() {
    LOG.debug("Getting all active Health Organizations");
    List<HealthOrganizationDto> ho = facade.getAllActiveHealthOrganizations();
    LOG.debug(
        (ho.size() == 1 ? "One organization " : "Totally " + ho.size() + " organizations ")
            + "found");
    assert (ho.size() > 0);
  }

  @Test
  public void createHealthAuthority() {
    LOG.debug("===== Testing Health Authority Creation");
    EntityTransaction t = entityManager.getTransaction();
    if (t.isActive()) t.rollback();
    t.begin();
    try {
      HealthOrganizationDto ha = new HealthOrganizationDto();

      // Health Authority Type
      List<HealthAuthorityTypeDto> haTypes = haFacade.getAll();
      assert (!haTypes.isEmpty());
      for (HealthAuthorityTypeDto d : haTypes)
        if ("RHB".equals(d.getHatypCode())) ha.setHealthAuthorityType(d);
      assert (ha.getHealthAuthorityType() != null);

      // Health Service Delivery Area
      List<RegionalTeamDto> hsdaList = healthServiceDeliveryAreasFacade.getAll();
      assert (!hsdaList.isEmpty());
      for (RegionalTeamDto d : hsdaList)
        if ("99".equals(d.getRtCode())) // Unknown
        ha.setRegionalTeam(d);
      assert (ha.getRegionalTeam() != null);

      // Local Health Area
      List<PeerGroupDto> lhaList = localHealthAreasFacade.getAll();
      assert (!lhaList.isEmpty());
      for (PeerGroupDto d : lhaList)
        if ("999".equals(d.getPgCode())) // Unknown
        ha.setPeerGroup(d);
      assert (ha.getPeerGroup() != null);

      ha.setCurrentName("HA Created In JUnit Test");
      ha.setHaNumber("JU");
      ha.setSpId("XXXXX");
      ha.setHoType(HamisConstants.HealthOrganizationTypes.HA.toString());
      ha.setOwnershipCode("4");
      ha.setTeachingStatusCode("2");
      ha.setInstitutionCity("Victoria");
      ha.setPostalCode("V1W3H7");
      ha.setEffDt(new Date());

      long id = facade.createHealthOrganization(ha, null);
      assert (id > 0);
      LOG.debug("New Health Authority created with ID {}", id);
    } catch (Exception e) {
      LOG.error("Exception in createHealthAuthority", e.fillInStackTrace());
      t.rollback();
      throw new RuntimeException(e);
    }
    t.rollback();
    LOG.debug("+++++ Testing Health Authority Creation completed");
  }

  /** Attempt to insert Health Authority with already taken Service Provider ID */
  @Test
  public void createHealthAuthorityWithDuplicateServiceProviderId() {
    LOG.debug("===== Testing an attempt to insert duplicate SPID");
    // Attempt to insert duplicate SPID

    EntityTransaction t = entityManager.getTransaction();
    if (t.isActive()) t.rollback();
    t.begin();
    try {
      HealthOrganizationDto ha = new HealthOrganizationDto();

      List<HealthOrganizationDto> haList = facade.getAllActiveHealthAuthorities();
      assert (!haList.isEmpty());

      ha.setSpId(haList.get(0).getSpId());
      LOG.debug("Picking up existing Service Provider ID {}", haList.get(0).getSpId());

      // Health Authority Type
      List<HealthAuthorityTypeDto> haTypes = haFacade.getAll();
      assert (!haTypes.isEmpty());
      for (HealthAuthorityTypeDto d : haTypes)
        if ("RHB".equals(d.getHatypCode())) ha.setHealthAuthorityType(d);
      assert (ha.getHealthAuthorityType() != null);

      // Health Service Delivery Area
      List<RegionalTeamDto> hsdaList = healthServiceDeliveryAreasFacade.getAll();
      assert (!hsdaList.isEmpty());
      for (RegionalTeamDto d : hsdaList)
        if ("99".equals(d.getRtCode())) // Unknown
        ha.setRegionalTeam(d);
      assert (ha.getRegionalTeam() != null);

      // Local Health Area
      List<PeerGroupDto> lhaList = localHealthAreasFacade.getAll();
      assert (!lhaList.isEmpty());
      for (PeerGroupDto d : lhaList)
        if ("999".equals(d.getPgCode())) // Unknown
        ha.setPeerGroup(d);

      ha.setCurrentName("HA Created In JUnit Test");
      ha.setHaNumber("JU");
      ha.setHoType(HamisConstants.HealthOrganizationTypes.HA.toString());
      ha.setOwnershipCode("4");
      ha.setTeachingStatusCode("2");
      ha.setInstitutionCity("Victoria");
      ha.setPostalCode("V1W3H7");
      ha.setEffDt(new Date());

      long id = facade.createHealthOrganization(ha, null);
      assert (id == HO_CREATE_NEGATIVE_RESULTS.DUPLICATE_SPID.getValue());
    } catch (Exception e) {
      LOG.error("Exception in createHealthAuthority", e.fillInStackTrace());
      t.rollback();
      throw new RuntimeException(e);
    }
    t.rollback();
    LOG.debug("+++++ Testing an attempt to insert duplicate SPID completed");
  }

  /** Attempt to insert Health Authority with existing HA Number */
  @Test
  public void createHealthAuthorityWithDuplicateHealthAuthorityNumber() {
    LOG.debug("===== Testing an attempt to insert duplicate HA number");

    EntityTransaction t = entityManager.getTransaction();
    if (t.isActive()) t.rollback();
    t.begin();
    try {
      HealthOrganizationDto ha = new HealthOrganizationDto();

      List<HealthOrganizationDto> haList = facade.getAllActiveHealthAuthorities();
      assert (!haList.isEmpty());

      ha.setSpId("XXXXX");
      ha.setHaNumber(haList.get(0).getHaNumber());
      LOG.debug("Picking up existing HA number {}", haList.get(0).getHaNumber());

      // Health Authority Type
      List<HealthAuthorityTypeDto> haTypes = haFacade.getAll();
      assert (!haTypes.isEmpty());
      for (HealthAuthorityTypeDto d : haTypes)
        if ("RHB".equals(d.getHatypCode())) ha.setHealthAuthorityType(d);
      assert (ha.getHealthAuthorityType() != null);

      // Health Service Delivery Area
      List<RegionalTeamDto> hsdaList = healthServiceDeliveryAreasFacade.getAll();
      assert (!hsdaList.isEmpty());
      for (RegionalTeamDto d : hsdaList)
        if ("99".equals(d.getRtCode())) // Unknown
        ha.setRegionalTeam(d);
      assert (ha.getRegionalTeam() != null);

      // Local Health Area
      List<PeerGroupDto> lhaList = localHealthAreasFacade.getAll();
      assert (!lhaList.isEmpty());
      for (PeerGroupDto d : lhaList)
        if ("999".equals(d.getPgCode())) // Unknown
        ha.setPeerGroup(d);

      ha.setCurrentName("HA Created In JUnit Test");
      ha.setHoType(HamisConstants.HealthOrganizationTypes.HA.toString());
      ha.setOwnershipCode("4");
      ha.setTeachingStatusCode("2");
      ha.setInstitutionCity("Victoria");
      ha.setPostalCode("V1W3H7");
      ha.setEffDt(new Date());

      long id = facade.createHealthOrganization(ha, null);
      assert (id == HO_CREATE_NEGATIVE_RESULTS.DUPLICATE_HA_NUMBER.getValue());
    } catch (Exception e) {
      LOG.error("Exception in createHealthAuthority", e.fillInStackTrace());
      t.rollback();
      throw new RuntimeException(e);
    }
    t.rollback();

    LOG.debug("+++++ Testing an attempt to insert duplicate HA number completed");
  }

  /** Creation of Health Service Provider */
  @Test
  public void createHealthServiceProvider() {

    LOG.debug("===== Testing HSP creation");

    EntityTransaction t = entityManager.getTransaction();
    if (t.isActive()) t.rollback();
    t.begin();
    try {
      HealthOrganizationDto hsp = new HealthOrganizationDto();
      hsp.setCurrentName("HSP Created In JUnit Test");
      hsp.setSpId("XXXXX");
      hsp.setHoType(HamisConstants.HealthOrganizationTypes.HSP.toString());
      hsp.setOwnershipCode("4");
      hsp.setTeachingStatusCode("2");
      hsp.setInstitutionCity("Victoria");
      hsp.setPostalCode("V1W3H7");
      hsp.setEffDt(new Date());

      List<HealthOrganizationDto> haList = facade.getAllActiveHealthAuthorities();
      assert (!haList.isEmpty());
      OrganizationRelationshipDto relationship =
          instantiateRelationship(haList.get(0).getHoId(), hsp);

      // Health Service Delivery Area
      List<RegionalTeamDto> hsdaList = healthServiceDeliveryAreasFacade.getAll();
      assert (!hsdaList.isEmpty());
      for (RegionalTeamDto d : hsdaList)
        if ("99".equals(d.getRtCode())) // Unknown
        hsp.setRegionalTeam(d);
      assert (hsp.getRegionalTeam() != null);

      // Local Health Area
      List<PeerGroupDto> lhaList = localHealthAreasFacade.getAll();
      assert (!lhaList.isEmpty());
      for (PeerGroupDto d : lhaList)
        if ("999".equals(d.getPgCode())) // Unknown
        hsp.setPeerGroup(d);
      assert (hsp.getPeerGroup() != null);

      OrganizationRelationshipFacade relationshipFacade = new OrganizationRelationshipFacade();
      relationshipFacade.setEntityManager(entityManager);
      facade.setRelationshipFacade(relationshipFacade);
      long id = facade.createHealthOrganization(hsp, relationship);
      assert (id > 0);
    } catch (Exception e) {
      LOG.error("Exception in createHealthServiceProvider", e.fillInStackTrace());
      t.rollback();
      throw new RuntimeException(e);
    }
    t.rollback();

    LOG.debug("+++++ Testing HSP creation completed");
  }

  private OrganizationRelationshipDto instantiateRelationship(
      long haId, HealthOrganizationDto hspId) {
    LOG.debug("Creating new relationship to the existing HA");
    OrganizationRelationshipDto relationship = new OrganizationRelationshipDto();
    HealthOrganizationDto ha = new HealthOrganizationDto(); // Health Authority
    ha.setHoId(haId);
    relationship.setMstHoId(ha);
    relationship.setSubHoId(hspId);
    relationship.setCurrentRecord("Y");

    // Get relationship type
    RelationshipTypeDto relType = relationshipTypeFacade.getById("3"); // Contracted
    relationship.setReltypCode(relType);
    relationship.setPossibleDoubleCount(relType.getDefaultPossibleDblCnt());

    // Audit fields
    relationship.setEffDt(new Date());

    return relationship;
  }

  /** Update existing Health Organization */
  @Test
  public void updateHealthOrganization() {

    LOG.debug("===== Testing HO update");
    List<HealthOrganizationDto> ho = facade.getAllActiveHealthOrganizations();
    assert (ho.size() > 0);

    HealthOrganizationDto d = ho.get(0);

    d.setCurrentName("New Name for JUnit test");

    EntityTransaction t = entityManager.getTransaction();
    if (t.isActive()) t.rollback();
    t.begin();
    try {
      d = facade.getHealthOrganization(d.getHoId());
      boolean result = facade.updateHealthOrganization(d);
      assert (result);
    } catch (Exception e) {
      LOG.error("Exception in updateHealthOrganization", e.fillInStackTrace());
      t.rollback();
      throw new RuntimeException(e);
    }
    t.rollback();
    LOG.debug("+++++ Testing HO update completed");
  }

  /** Attempt to delete Health Organization which has dependent data submitters */
  @Test
  public void deleteHealthOrganization() {
    LOG.debug("===== Testing Health Organization delete");

    List<HealthOrganizationDto> ho = facade.getAllActiveHealthOrganizations();
    assert (!ho.isEmpty());

    EntityTransaction t = entityManager.getTransaction();
    if (t.isActive()) t.rollback();
    t.begin();
    try {
      OrganizationRelationshipFacade relationshipFacade = new OrganizationRelationshipFacade();
      relationshipFacade.setEntityManager(entityManager);
      facade.setRelationshipFacade(relationshipFacade);

      boolean result = facade.deleteHealthOrganization(ho.get(0).getHoId(), "TEST");
      assert (result);
      HealthOrganizationDto d = facade.getHealthOrganization(ho.get(0).getHoId());
      assert (d.getCurrentRecord() == null);
    } catch (Exception e) {
      LOG.error("Exception in deleteHealthOrganization", e.fillInStackTrace());
      t.rollback();
      throw new RuntimeException(e);
    }
    t.rollback();
    LOG.debug("+++++ Testing HealthOrganization delete completed");
  }
}
