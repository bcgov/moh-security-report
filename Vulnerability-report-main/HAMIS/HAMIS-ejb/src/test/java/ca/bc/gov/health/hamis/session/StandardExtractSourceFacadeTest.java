package ca.bc.gov.health.hamis.session;

import static org.junit.Assert.assertNotNull;

import ca.bc.gov.health.hamis.dto.StandardExtractSourceDto;
import ca.bc.gov.health.hamis.entity.ProviderDefinition;
import ca.bc.gov.health.hamis.entity.StandardExtractSource;
import jakarta.persistence.EntityTransaction;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Before;
import org.junit.Test;

public class StandardExtractSourceFacadeTest extends AbstractFacadeTest {

  private static final Logger LOG = LogManager.getLogger(StandardExtractSourceFacadeTest.class);
  protected static StandardExtractSourceFacade sesfacade;
  protected static ProviderDefinitionFacade pdfacade;

  @Before
  public void setUp() {
    sesfacade = new StandardExtractSourceFacade();
    sesfacade.setEntityManager(entityManager);
    pdfacade = new ProviderDefinitionFacade();
    pdfacade.setEntityManager(entityManager);
  }

  @Test
  public void
      testGetStandardExtractSourceFacadeRecords_ReturnsData_ForGivenYearAndHealthOrganization() {
    assertNotNull(sesfacade.findStandardExtractSource("2019/2020", 3274));
  }

  @Test
  public void testCascadeDelete() {
    LOG.debug("Testing soft deletion for SEF with provider definitions");
    StringBuilder query = new StringBuilder();
    query.append("select ses_id from ( ");
    query.append(
        "select pd.ses_id, count(pd.pd_id) from standard_extract_sources ses inner join provider_definitions pd on pd.ses_id = ses.ses_id ");
    query.append("where ses.end_dt is null and pd.end_dt is null ");
    query.append("group by pd.ses_id having count(*) between 2 and 10 order by 2 desc) ");
    query.append("where rownum = 1 ");
    long sesId =
        ((Number) entityManager.createNativeQuery(query.toString()).getSingleResult()).longValue();
    LOG.debug("Selected SES ID is " + sesId);

    EntityTransaction t = entityManager.getTransaction();
    t.begin();
    try {
      StandardExtractSourceDto dto = new StandardExtractSourceDto();
      dto.setSesId(sesId);
      sesfacade.deleteStandardExtractSource(dto, "Test");

      StandardExtractSource ses = entityManager.find(StandardExtractSource.class, sesId);
      assert (ses.getProviderDefinitionsList() != null);
      boolean result = true;
      for (ProviderDefinition pd : ses.getProviderDefinitionsList()) {
        result = result && (pd.getEndDt() != null);
      }
      assert (result);
    } catch (Exception e) {
      LOG.error("Exception in testCascadeDelete", e.fillInStackTrace());
      t.rollback();
      throw new RuntimeException(e);
    }
    t.rollback();
  }
}
