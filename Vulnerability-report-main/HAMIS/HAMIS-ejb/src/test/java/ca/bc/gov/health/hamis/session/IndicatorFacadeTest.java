package ca.bc.gov.health.hamis.session;

import ca.bc.gov.health.hamis.dto.IndicatorDto;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Before;
import org.junit.Test;

public class IndicatorFacadeTest extends AbstractFacadeTest {

  private static final Logger LOG = LogManager.getLogger(IndicatorFacadeTest.class);
  protected static IndicatorFacade facade;

  @Before
  public void setUp() {
    facade = new IndicatorFacade();
    facade.setEntityManager(entityManager);
  }

  /** Retrieve all active records */
  @Test
  public void getAllIndicators() {
    LOG.debug("===== Getting all active indicators");
    List<IndicatorDto> result = facade.getIndicators(null);
    LOG.debug("# of entries in global list = {} ", result.size());
    assert (result.size() > 0);
    LOG.debug("+++++ Testing Get All Active Indicators completed");
  }

  /** Retrieve all active records for the selected group */
  @Test
  public void getAllIndicatorsForGroup() {
    List<IndicatorDto> result = facade.getIndicators(null);
    assert (result.size() > 0);
    String groupId = result.get(0).getIgrpId().toString();
    LOG.debug("===== Getting active indicators for group ID {}", groupId);
    result = facade.getIndicators(groupId);
    LOG.debug("# of entries in filtered list = {} ", result.size());
    assert (result.size() > 0);
    LOG.debug("+++++ Testing Get Active Indicators for group completed");
  }

  /** Check generated markup */
  @Test
  public void getMarkup() {
    LOG.debug("===== Testing generated markup");
    List<String> result = facade.getMarkup("1");
    assert (result.size() > 0);
    for (String s : result) {
      LOG.debug("\t {}", s);
    }
  }
}
