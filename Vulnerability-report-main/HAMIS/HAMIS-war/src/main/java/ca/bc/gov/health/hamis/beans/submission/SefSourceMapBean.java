/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.beans.submission;

import static ca.bc.gov.health.hamis.beans.navigation.Navigation.MAINTAIN_MAPPINGS_URL;
import static ca.bc.gov.health.hamis.beans.navigation.Navigation.SEF_SOURCE_MAP_URL;

import ca.bc.gov.health.hamis.beans.common.CustomDataTablePDFExporter;
import ca.bc.gov.health.hamis.beans.common.Messages;
import ca.bc.gov.health.hamis.beans.navigation.Navigation;
import ca.bc.gov.health.hamis.beans.session.UserBean;
import ca.bc.gov.health.hamis.dto.OrganizationRelationshipDto;
import ca.bc.gov.health.hamis.dto.ProviderDefinitionDto;
import ca.bc.gov.health.hamis.dto.ProviderTypeDto;
import ca.bc.gov.health.hamis.dto.StandardExtractSourceDto;
import ca.bc.gov.health.hamis.service.IDataSubmitterFacade;
import ca.bc.gov.health.hamis.service.IOrganizationRelationshipFacade;
import ca.bc.gov.health.hamis.service.IProviderDefinitionFacade;
import ca.bc.gov.health.hamis.service.IProviderTypeFacade;
import ca.bc.gov.health.hamis.service.IStandardExtractSourceFacade;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.component.UIComponent;
import jakarta.faces.context.FacesContext;
import jakarta.faces.convert.Converter;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import lombok.Getter;
import lombok.Setter;
import org.primefaces.component.export.PDFOptions;
import org.primefaces.component.export.PDFOrientationType;

/**
 * Backing bean for the View/Maintain Custom Account Map screen
 *
 * @author greg.perkins
 */
@Named("SefSourceMapBean")
@ViewScoped
@Getter
@Setter
public class SefSourceMapBean implements java.io.Serializable {

  private static final long serialVersionUID = 6933479627863852161L;

  /** Facade classes */
  @EJB private IStandardExtractSourceFacade sesFacade;

  @EJB private IProviderTypeFacade ptFacade;

  @EJB private IOrganizationRelationshipFacade orFacade;

  @EJB private IProviderDefinitionFacade pdFacade;

  @EJB private IDataSubmitterFacade dsFacade;

  @Inject private UserBean userBean;

  /** The ses record we're working with */
  private StandardExtractSourceDto extractSource;

  /** The new name the duplicate will use */
  private String duplicateName;

  /** The provider definition we're working with */
  private ProviderDefinitionDto selectedProvider;

  /** Provider type droplist filtered by fiscal year */
  private List<ProviderTypeDto> providerTypes;

  /** Organization Relationship droplist filtered by the current org */
  private List<OrganizationRelationshipDto> organizations;

  /** Filtered provider definitions */
  private List<ProviderDefinitionDto> filteredProviderDefinitions;

  private PDFOptions pdfOptions = new PDFOptions();

  private CustomDataTablePDFExporter pdfExporter;

  /**
   * True if we are creating a new record
   *
   * @return
   */
  public boolean isCreate() {
    return extractSource.getSesId() == null;
  }

  /**
   * True if we are creating a new record
   *
   * @return
   */
  public boolean isCreateProviderDefinition() {
    return selectedProvider == null || selectedProvider.getPdId() == null;
  }

  /** Converter for the provider type autocomplete control */
  private transient Converter<ProviderTypeDto> providerTypeConverter =
      new Converter<ProviderTypeDto>() {
        @Override
        public ProviderTypeDto getAsObject(FacesContext fc, UIComponent uic, String string) {
          for (ProviderTypeDto pt : providerTypes) {
            if (pt.toString().equals(string)) {
              return pt;
            }
          }
          return null;
        }

        @Override
        public String getAsString(FacesContext fc, UIComponent uic, ProviderTypeDto t) {
          return t.toString();
        }
      };

  /** Converter for the org relationship autocomplete control */
  private transient Converter<OrganizationRelationshipDto> organizationRelationshipConverter =
      new Converter<OrganizationRelationshipDto>() {
        @Override
        public OrganizationRelationshipDto getAsObject(
            FacesContext fc, UIComponent uic, String string) {
          for (OrganizationRelationshipDto or : organizations) {
            if (or.toString().equals(string)) {
              return or;
            }
          }
          return null;
        }

        @Override
        public String getAsString(FacesContext fc, UIComponent uic, OrganizationRelationshipDto t) {
          return t.toString();
        }
      };

  /** Initializes this bean on load */
  @PostConstruct
  public void init() {
    Long sesId =
        (Long) FacesContext.getCurrentInstance().getExternalContext().getFlash().get("sesId");
    if (sesId != null && sesId > 0) {
      extractSource = sesFacade.getStandardExtractSource(sesId);
    } else {
      String fiscalYear =
          (String)
              FacesContext.getCurrentInstance().getExternalContext().getFlash().get("fiscalYear");
      extractSource = new StandardExtractSourceDto();
      extractSource.setFiscalYear(fiscalYear);
    }
    if (extractSource != null) {
      filterProviderTypes();
      filterOrganizations();
    }

    pdfOptions.setFontName("BCSans-Regular");
    pdfOptions.setCellFontStyle("NORMAL");
    pdfOptions.setFacetFontStyle("BOLD");
    pdfOptions.setOrientation(PDFOrientationType.LANDSCAPE);

    float[] widths = new float[] {5f, 40f, 30f, 30f};
    pdfExporter = new CustomDataTablePDFExporter(widths);
  }

  /** Saves the SEF Source */
  public void saveSefSource() {
    List<StandardExtractSourceDto> existingRecords =
        sesFacade.findStandardExtractSource(
            extractSource.getFiscalYear(), userBean.getHealthAuthority());
    for (StandardExtractSourceDto record : existingRecords) {
      if (record.getName().equalsIgnoreCase(extractSource.getName())
          && !record.getSesId().equals(extractSource.getSesId())) {
        Messages.addErrorMessage("form", "Name must be unique");
        return;
      }
    }
    if (extractSource.getSesId() == null) {
      // INSERT
      extractSource.setDsId(dsFacade.getDataSubmitterByUserId(userBean.getUserId()));
      extractSource.setEffDt(new Date());
      extractSource.setUserCreated(userBean.getUserName());
      extractSource.setDateCreated(new Date());
      extractSource.setUserModified(userBean.getUserName());
      extractSource.setDateModified(new Date());
      long newId = sesFacade.createStandardExtractSource(extractSource);
      extractSource.setSesId(newId);
    } else {
      // UPDATE
      extractSource.setUserModified(userBean.getUserName());
      extractSource.setDateModified(new Date());
      sesFacade.updateStandardExtractSource(extractSource);
    }
    FacesContext.getCurrentInstance()
        .addMessage(
            "form",
            new FacesMessage(
                FacesMessage.SEVERITY_INFO,
                "SEF Source Map successfully saved.",
                "SEF Source Map successfully saved."));
  }

  /**
   * Delete this SEF Source
   *
   * @return String
   */
  public String deleteSefSource() {
    sesFacade.deleteStandardExtractSource(extractSource, userBean.getUserName());
    FacesContext.getCurrentInstance()
        .addMessage(
            null,
            new FacesMessage(
                FacesMessage.SEVERITY_INFO,
                "SEF Source Map successfully deleted.",
                "SEF Source Map successfully deleted."));
    Navigation.redirect(MAINTAIN_MAPPINGS_URL);
    return null;
  }

  /**
   * Duplicate this SEF Source
   *
   * @return String
   */
  public String duplicateSefSource() {
    List<StandardExtractSourceDto> existingRecords =
        sesFacade.findStandardExtractSource(
            extractSource.getFiscalYear(), userBean.getHealthAuthority());
    for (StandardExtractSourceDto record : existingRecords) {
      if (record.getName().equalsIgnoreCase(duplicateName)) {
        Messages.addErrorMessage("form", "Name must be unique");
        return null;
      }
    }
    sesFacade.duplicateStandardExtractSource(
        extractSource.getSesId(), duplicateName, userBean.getUserName());
    FacesContext.getCurrentInstance()
        .addMessage(
            null,
            new FacesMessage(
                FacesMessage.SEVERITY_INFO,
                "SEF Source Map successfully duplicated.",
                "SEF Source Map successfully duplicated."));
    Navigation.redirect(MAINTAIN_MAPPINGS_URL);
    return null;
  }

  /**
   * Autocomplete for the provider type
   *
   * @param query String
   * @return List
   */
  public List<ProviderTypeDto> autocompleteProviderType(String query) {
    if (query == null || "".equals(query)) {
      return providerTypes;
    } else {
      List<ProviderTypeDto> out = new ArrayList<>();
      for (ProviderTypeDto item : providerTypes) {
        if (item.toString().toUpperCase().contains(query.toUpperCase())) {
          out.add(item);
        }
      }
      return out;
    }
  }

  /**
   * Autocomplete for the oganizations
   *
   * @param query String
   * @return List
   */
  public List<OrganizationRelationshipDto> autocompleteOrganizations(String query) {
    if (query == null || "".equals(query)) {
      return organizations;
    } else {
      List<OrganizationRelationshipDto> out = new ArrayList<>();
      for (OrganizationRelationshipDto item : organizations) {
        if (item.toString().toUpperCase().contains(query.toUpperCase())) {
          out.add(item);
        }
      }
      return out;
    }
  }

  /** Listener for selection of a SEF Source Map */
  public void selectSefSourceMap() {

    /*
     * Since we'll be doing a redirect we'll lose everything in View scope, so we need to populate the flash, to pass the
     * Value in to the init() method when the page is re-rendered after the redirect
     */
    if (extractSource != null) {
      Navigation.addToFlash("sesId", extractSource.getSesId());
    }
    Navigation.redirect(SEF_SOURCE_MAP_URL);
  }

  /** Listener for creating a new SEF Source map */
  public String createSourceMap(String fiscalYear) {
    // Put the current fiscal year into the flash so we can default the new record when we navigate
    // to the new page
    Navigation.addToFlash("fiscalYear", fiscalYear);
    return SEF_SOURCE_MAP_URL;
  }

  /** Filter the list of provider types */
  public void filterProviderTypes() {
    providerTypes = ptFacade.getProviderTypesByFiscalYearForDroplist(extractSource.getFiscalYear());
  }

  /** Filter the list of organization relationships */
  public void filterOrganizations() {
    organizations = orFacade.getRelationshipsForOrganization(userBean.getHealthAuthority());
  }

  /** Event handler for saving the current provider */
  public void saveProvider() {
    if (selectedProvider.getPdId() != null && selectedProvider.getPdId() > 0) {
      selectedProvider.setDateModified(new Date());
      selectedProvider.setUserModified(userBean.getUserName());
      pdFacade.updateProviderDefinition(selectedProvider);
    } else {
      selectedProvider.setEffDt(new Date());
      selectedProvider.setDateCreated(new Date());
      selectedProvider.setUserCreated(userBean.getUserName());
      selectedProvider.setDateModified(new Date());
      selectedProvider.setUserModified(userBean.getUserName());
      selectedProvider.setSesId(extractSource.getSesId());
      Long pdId = pdFacade.createProviderDefinition(selectedProvider);
      selectedProvider.setPdId(pdId);
      extractSource.getProviderDefinitions().add(selectedProvider);
    }
    FacesContext.getCurrentInstance()
        .addMessage(
            "form",
            new FacesMessage(
                FacesMessage.SEVERITY_INFO,
                "Provider Definition successfully saved.",
                "Provider Definition successfully saved."));
  }

  /** Event handler for deleting the current provider */
  public void deleteProvider() {
    selectedProvider.setDateModified(new Date());
    selectedProvider.setUserModified(userBean.getUserName());
    pdFacade.deleteProviderDefinition(selectedProvider.getPdId());
    extractSource.getProviderDefinitions().remove(selectedProvider);
    FacesContext.getCurrentInstance()
        .addMessage(
            "form",
            new FacesMessage(
                FacesMessage.SEVERITY_INFO,
                "Provider Definition successfully deleted.",
                "Provider Definition successfully deleted."));
  }

  /** Event handler for clearing the selected provider */
  public void clearProvider() {
    selectedProvider = new ProviderDefinitionDto();
    selectedProvider.setPtId(new ProviderTypeDto());
    selectedProvider.setOrId(new OrganizationRelationshipDto());
  }
}
