/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.beans.submission;

import ca.bc.gov.health.hamis.beans.common.Messages;
import ca.bc.gov.health.hamis.beans.session.UserBean;
import ca.bc.gov.health.hamis.dto.DataSubmitterDto;
import ca.bc.gov.health.hamis.dto.HealthOrganizationDto;
import ca.bc.gov.health.hamis.service.IDataSubmitterFacade;
import ca.bc.gov.health.hamis.service.IHealthOrganizationFacade;
import ca.bc.gov.health.hamis.session.KeycloakFacade;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import lombok.Getter;
import lombok.Setter;

/**
 * Backing bean for the Authorize Data Submitters page
 *
 * @author greg.perkins
 */
@Named("AuthorizeDataSubmitterBean")
@ViewScoped
@Getter
@Setter
public class AuthorizeDataSubmitterBean implements Serializable {

  /*
  References to other backing beans
  */
  @Inject private UserBean userBean;

  /*
  EJB Facade references
  */
  @EJB private IDataSubmitterFacade dsFacade;
  @Inject private KeycloakFacade keycloakFacade;
  @EJB private IHealthOrganizationFacade hoFacade;

  /** List of un-assigned HAMIS users */
  private List<SelectItem> unassignedUsers;

  private Map<String, DataSubmitterDto> unassignedUserMap;
  /** List of all health authorities */
  private List<SelectItem> healthAuthorities;
  /** List of all currently assigned data submitters */
  private List<DataSubmitterDto> dataSubmitters;

  /** Currently selected Health Organization filter */
  private int selectedHo;

  /** Currently selected Health Organization on the assign form */
  private int selectedAssignedHo;

  /** Currently selected rows */
  private DataSubmitterDto selectedDataSubmitter;

  /** Currently selected unassigned user */
  private String selectedUser;

  /** Initialize the page */
  @PostConstruct
  public void init() {

    selectedDataSubmitter = new DataSubmitterDto();

    if (userBean.getHealthAuthority() > 0) {
      selectedHo = userBean.getHealthAuthority();
    }
    getAssignedDSForHealthAuthority();
    findUnassignedUsers();

    // Not in used anymore
    healthAuthorities = new ArrayList<>();
    for (HealthOrganizationDto ho : hoFacade.getAllActiveHealthAuthorities()) {
      healthAuthorities.add(new SelectItem(ho.getHoId(), ho.getCurrentName()));
    }
  }

  /** Finds Keycloak users that aren't assigned yet */
  private void findUnassignedUsers() {
    unassignedUsers = new ArrayList<>();
    unassignedUserMap = new HashMap<>();
    for (DataSubmitterDto ds : keycloakFacade.getUnassignedDataSubmitters()) {
      unassignedUsers.add(new SelectItem(ds.getUserId(), ds.getUsername()));
      unassignedUserMap.put(ds.getUserId(), ds);
    }
  }

  /** Event handler for the health organization filter */
  public void getAssignedDSForHealthAuthority() {
    dataSubmitters = dsFacade.getAllDataSubmittersForHealthOrganization(selectedHo);
    selectedAssignedHo = selectedHo;
  }

  /** Event handler to clear the selected submitter */
  public void clear() {
    selectedUser = null;
    selectedDataSubmitter = new DataSubmitterDto();
  }

  /** Event handler to save a new authorized submitter */
  public void assign() {
    selectedDataSubmitter.setHoId(selectedAssignedHo);
    dsFacade.assignDataSubmitter(selectedDataSubmitter);
    getAssignedDSForHealthAuthority();
    findUnassignedUsers();
    Messages.addInfoMessage(null, Messages.getMessageForKey("authorizeDs.assign.success"));
  }

  /** Event handler to remove an authorized submitter */
  public void remove() {
    dsFacade.removeDataSubmitter(selectedDataSubmitter);
    getAssignedDSForHealthAuthority();
    findUnassignedUsers();
    Messages.addInfoMessage(null, Messages.getMessageForKey("authorizeDs.remove.success"));
  }

  /** Event handler for selecting an unassigned user */
  public void selectUnassignedUser() {
    selectedDataSubmitter = unassignedUserMap.get(selectedUser);
    selectedDataSubmitter.setHoId(selectedAssignedHo);
  }
}
