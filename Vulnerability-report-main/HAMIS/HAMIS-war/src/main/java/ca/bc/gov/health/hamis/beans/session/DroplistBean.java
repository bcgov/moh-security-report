/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.beans.session;

import ca.bc.gov.health.hamis.dto.FiscalYearDto;
import ca.bc.gov.health.hamis.dto.HealthAuthorityTypeDto;
import ca.bc.gov.health.hamis.dto.PeerGroupDto;
import ca.bc.gov.health.hamis.dto.RegionalTeamDto;
import ca.bc.gov.health.hamis.dto.RelationshipTypeDto;
import ca.bc.gov.health.hamis.dto.ReportingPeriodDto;
import ca.bc.gov.health.hamis.service.IFiscalYearFacade;
import ca.bc.gov.health.hamis.service.IHealthAuthorityTypeFacade;
import ca.bc.gov.health.hamis.service.IPeerGroupFacade;
import ca.bc.gov.health.hamis.service.IRegionalTeamFacade;
import ca.bc.gov.health.hamis.service.IRelationshipTypeFacade;
import ca.bc.gov.health.hamis.service.IReportingPeriodFacade;
import ca.bc.gov.health.jsf.SelectItemComparator;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.context.Initialized;
import jakarta.enterprise.event.Observes;
import jakarta.faces.model.SelectItem;
import jakarta.inject.Named;
import java.time.Year;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Application scoped bean to hold droplist instances
 *
 * @author greg.perkins
 */
@Named("DroplistBean")
@ApplicationScoped
public class DroplistBean {

  @EJB private IFiscalYearFacade fiscalYearFacade;

  @EJB private IReportingPeriodFacade reportingPeriodFacade;

  @EJB private IRelationshipTypeFacade relationshipTypeFacade;

  @EJB private IRegionalTeamFacade regionalTeamFacade;

  @EJB private IPeerGroupFacade peerGroupFacade;

  @EJB private IHealthAuthorityTypeFacade healthAuthorityTypeFacade;

  private static SelectItemComparator comparator;

  private static List<SelectItem> fiscalYears,
      accountTypes,
      localHealthAreas,
      allowedRelationships,
      healthServiceDeliveryAreas,
      healthAuthorityTypes,
      testConditions,
      testSeverities,
      dataTypes,
      transactionTypes;

  private static Map<String, List<SelectItem>> periodsByFiscalYear;

  /** Initialize DroplistBean */
  public void init(@Observes @Initialized(ApplicationScoped.class) Object init) {
    comparator = new SelectItemComparator();
    periodsByFiscalYear = new HashMap<>();
    getFiscalYears();
    getAccountTypes();
    getLocalHealthAreas();
    getAllowedRelationships();
    getHealthServiceDeliveryAreas();
    getHealthAuthorityTypes();
    getTestConditions();
    getTestSeverities();
    getDataTypes();
    getTransactionTypes();
    getPeriodsByFiscalYear(Year.now().toString());
  }

  /** Returns a static list of test conditions */
  public List<SelectItem> getTestConditions() {
    if (testConditions == null) {
      testConditions = new ArrayList<>();
      testConditions.add(new SelectItem("N", "Not Permitted"));
      testConditions.add(new SelectItem("R", "Required"));
    }
    return testConditions;
  }

  /** Returns a static list of test severities */
  public List<SelectItem> getTestSeverities() {
    if (testSeverities == null) {
      testSeverities = new ArrayList<>();
      testSeverities.add(new SelectItem("H", "Hard Stop"));
      testSeverities.add(new SelectItem("W", "Warning"));
    }
    return testSeverities;
  }

  /** Returns a static list of data types */
  public List<SelectItem> getDataTypes() {
    if (dataTypes == null) {
      dataTypes = new ArrayList<>();
      dataTypes.add(new SelectItem("F", "Financial"));
      dataTypes.add(new SelectItem("S", "Statistical"));
    }
    return dataTypes;
  }

  /** Returns a static list of transaction types */
  public List<SelectItem> getTransactionTypes() {
    if (transactionTypes == null) {
      transactionTypes = new ArrayList<>();
      transactionTypes.add(new SelectItem("A", "Actual"));
      transactionTypes.add(new SelectItem("B", "Budget"));
    }
    return transactionTypes;
  }

  /**
   * Returns all fiscal years
   *
   * @return List<SelectItem>
   */
  public List<SelectItem> getFiscalYears() {
    if (fiscalYears == null) {
      fiscalYears =
          fiscalYearFacade.findAllFiscalYears().stream()
              .map(FiscalYearDto::toSelectItem)
              .sorted(new SelectItemComparator().reversed())
              .collect(Collectors.toList());
    }
    return fiscalYears;
  }

  /**
   * Get the list of account types for a droplist
   *
   * @return List<SelectItem>
   */
  public List<SelectItem> getAccountTypes() {
    // Hardcoded, as we only use a subset of available account types
    if (accountTypes == null) {
      accountTypes = new ArrayList<>();
      accountTypes.add(new SelectItem(null, "Primary"));
      accountTypes.add(new SelectItem("F", "Secondary Financial"));
      accountTypes.add(new SelectItem("S", "Secondary Statistical"));
    }
    return accountTypes;
  }

  /**
   * Returns all periods for a fiscal year
   *
   * @param year
   * @return List<SelectItem>
   */
  public List<SelectItem> getPeriodsByFiscalYear(String year) {
    if (!periodsByFiscalYear.containsKey(year)) {
      periodsByFiscalYear.put(
          year,
          reportingPeriodFacade.getReportingPeriodsForFiscalYear(year).stream()
              .map(ReportingPeriodDto::toSelectItem)
              .sorted(comparator)
              .collect(Collectors.toList()));
    }
    return periodsByFiscalYear.get(year);
  }

  /**
   * Returns all relationships legal to use when creating/editing HSP
   *
   * @return List<SelectItem>
   */
  public List<SelectItem> getAllowedRelationships() {
    if (allowedRelationships == null)
      allowedRelationships =
          relationshipTypeFacade.getAll().stream()
              .map(RelationshipTypeDto::toSelectItem)
              .collect(Collectors.toList());
    return allowedRelationships;
  }

  /** Clears the organization relationships, so the cache will refresh */
  public static void clearRelationships() {
    allowedRelationships = null;
  }

  /**
   * Returns all local health areas
   *
   * @return List<SelectItem>
   */
  public List<SelectItem> getLocalHealthAreas() {
    if (localHealthAreas == null)
      localHealthAreas =
          peerGroupFacade.getAll().stream()
              .map(PeerGroupDto::toSelectItem)
              .collect(Collectors.toList());
    return localHealthAreas;
  }

  /** Clears the local health areas, so the cache will refresh */
  public static void clearLocalHealthAreas() {
    localHealthAreas = null;
  }

  /**
   * Returns all Health Service Delivery areas
   *
   * @return List<SelectItem>
   */
  public List<SelectItem> getHealthServiceDeliveryAreas() {
    if (healthServiceDeliveryAreas == null)
      healthServiceDeliveryAreas =
          regionalTeamFacade.getAll().stream()
              .map(RegionalTeamDto::toSelectItem)
              .collect(Collectors.toList());
    return healthServiceDeliveryAreas;
  }

  /** Clears the health service delivery areas, so the cache will refresh */
  public static void clearHealthServiceDeliveryAreas() {
    healthServiceDeliveryAreas = null;
  }

  /**
   * Returns all available Health Authority Types
   *
   * @return List<SelectItem>
   */
  public List<SelectItem> getHealthAuthorityTypes() {
    if (healthAuthorityTypes == null)
      healthAuthorityTypes =
          healthAuthorityTypeFacade.getAll().stream()
              .map(HealthAuthorityTypeDto::toSelectItem)
              .collect(Collectors.toList());
    return healthAuthorityTypes;
  }

  /** Reset FiscalYearsList and ReportingPeriodsList */
  public static void resetFiscalYear() {
    fiscalYears = null;
    periodsByFiscalYear = new HashMap<>();
  }

  /**
   * Pulls the label for a droplist value
   *
   * @param list
   * @param value
   * @return
   */
  public static String decode(List<SelectItem> list, Object value) {
    for (SelectItem item : list) {
      if (item != null) {
        if (item.getValue() == null && value == null) {
          return item.getLabel();
        } else if (item.getValue() != null && item.getValue().equals(value)) {
          return item.getLabel();
        }
      }
    }
    return null;
  }
}
