/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.beans.administration;

import ca.bc.gov.health.hamis.beans.common.Messages;
import ca.bc.gov.health.hamis.beans.session.DroplistBean;
import ca.bc.gov.health.hamis.beans.session.UserBean;
import ca.bc.gov.health.hamis.dto.MiscoaAccountDto;
import ca.bc.gov.health.hamis.dto.PrimaryAccountDto;
import ca.bc.gov.health.hamis.dto.SecondaryAccountDto;
import ca.bc.gov.health.hamis.service.IFiscalYearFacade;
import ca.bc.gov.health.hamis.service.IMiscoaAccountFacade;
import ca.bc.gov.health.hamis.util.HamisConstants;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.ejb.EJBException;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.validation.ConstraintViolation;
import jakarta.validation.ConstraintViolationException;
import java.io.Serializable;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import lombok.Getter;
import lombok.Setter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.primefaces.event.NodeCollapseEvent;
import org.primefaces.event.NodeExpandEvent;
import org.primefaces.event.NodeSelectEvent;
import org.primefaces.event.NodeUnselectEvent;
import org.primefaces.event.TabChangeEvent;
import org.primefaces.model.DefaultTreeNode;
import org.primefaces.model.TreeNode;

/**
 * Backing bean for the Chart of accounts page
 *
 * @author greg perkins
 */
@Named("ChartOfAccountsBean")
@ViewScoped
@Getter
@Setter
public class ChartOfAccountsBean implements Serializable {

  private static final long serialVersionUID = 7096646114282882368L;

  private static final Logger LOG = LogManager.getLogger(ChartOfAccountsBean.class);
  private static final String CHILD = "child";
  private static final String DOUBLE_ZERO = "00";
  private static final String SINGLE_ZERO = "0";
  private static final String SECONDARY_FINANCIAL = "F";
  private static final String SECONDARY_STATISTICAL = "S";
  private static final String CURRENT_FISCAL = HamisConstants.YearType.CURRENT.getShortName();

  /** Facade instance for queries */
  @EJB private IMiscoaAccountFacade accountFacade;

  @EJB private IFiscalYearFacade fyFacade;

  /** Droplist bean instance to get default fiscal year */
  @Inject private transient DroplistBean droplists;

  @Inject private transient UserBean userBean;

  /** Data type - Null for Primary, F for secondary financial, S for secondary statistical */
  private String fsDataType;

  /** selected fiscal year */
  private String fiscalYear;

  private String fiscalYearType;

  /** Tree for all accounts */
  private transient TreeNode primaryAccounts;

  /** TreeNode for selected account */
  private transient TreeNode selectedAccount;

  private long selectedAccountId;

  private PrimaryAccountDto primaryAccount;
  private SecondaryAccountDto secondaryAccount;
  private String selectedAccountNumber;
  private String parentAccountNumber;
  private boolean currentNodeHasChildren = false;

  private String searchCriteria;

  /** Run on page load */
  @PostConstruct
  public void init() {
    fsDataType = null;
    fiscalYear =
        droplists.getFiscalYears().stream()
            .filter(fy -> "C".equalsIgnoreCase(fy.getDescription()))
            .findFirst()
            .orElse(droplists.getFiscalYears().get(0))
            .getLabel();
    fiscalYearType = fyFacade.getYearTypeForFiscal(fiscalYear);
    getPrimaryAccountsForFiscalYear();
    getSubAccounts();
    primaryAccount = new PrimaryAccountDto();
    secondaryAccount = new SecondaryAccountDto();
  }

  public boolean isEditableFiscalYear() {
    return CURRENT_FISCAL.equals(fiscalYearType);
  }

  public boolean isPrimary() {
    return fsDataType == null;
  }

  public boolean isSecondaryFinancial() {
    return SECONDARY_FINANCIAL.equals(fsDataType);
  }

  public boolean isSecondaryStatistical() {
    return SECONDARY_STATISTICAL.equals(fsDataType);
  }

  public boolean isCreate() {
    boolean result;
    if (isPrimary()) {
      result = (primaryAccount == null || primaryAccount.getMpaId() == null);
    } else {
      result = (secondaryAccount == null || secondaryAccount.getMsaId() == null);
    }
    return result;
  }

  public boolean isUpdate() {
    return !isCreate() && !isView();
  }

  public boolean isView() {
    return !CURRENT_FISCAL.equals(fiscalYearType);
  }

  /**
   * Returns true if we can create a new custom account Must have a record selected, and it must not
   * be the lowest level
   *
   * @return boolean
   */
  public boolean isCreateEnabled() {
    if (isView()) {
      return false;
    }
    if (selectedAccount == null) {
      return !isPrimary();
    }
    int level = ((MiscoaAccountDto) selectedAccount.getData()).getLevel();
    if (isPrimary()) {
      return level > 0 && level < 5;
    } else {
      return level < 4;
    }
  }

  /**
   * Returns true if we can update the selected custom account
   *
   * @return boolean
   */
  public boolean isUpdateEnabled() {
    if (isView()) {
      return false;
    }
    if (selectedAccount == null) {
      return false;
    }
    int level = ((MiscoaAccountDto) selectedAccount.getData()).getLevel();
    if (isPrimary()) {
      return level >= 2;
    } else {
      return true;
    }
  }

  /**
   * Returns true if we can view the selected account
   *
   * @return boolean
   */
  public boolean isViewEnabled() {
    if (selectedAccount == null) {
      return false;
    }
    int level = ((MiscoaAccountDto) selectedAccount.getData()).getLevel();
    if (isPrimary()) {
      return level >= 2;
    } else {
      return true;
    }
  }

  /**
   * Returns true if we can delete the selected custom account
   *
   * @return boolean
   */
  public boolean isDeleteEnabled() {
    return !currentNodeHasChildren;
  }

  /**
   * Event handler for selecting a tab
   *
   * @param event TabChangeEvent
   */
  public void selectTab(TabChangeEvent event) {
    if (event.getTab().getClientId().contains("primary")) {
      fsDataType = null;
    } else if (event.getTab().getClientId().contains("secondaryFinancial")) {
      fsDataType = SECONDARY_FINANCIAL;
    } else {
      fsDataType = SECONDARY_STATISTICAL;
    }
    onYearChange();
  }

  /** Event handler for fiscal year change */
  public void onYearChange() {
    clear();
    getPrimaryAccountsForFiscalYear();
    getSubAccounts();
    fiscalYearType = fyFacade.getYearTypeForFiscal(fiscalYear);
  }

  /** Query for top-level primary accounts */
  private void getPrimaryAccountsForFiscalYear() {
    primaryAccounts = new DefaultTreeNode();
    List<MiscoaAccountDto> accounts;
    if (isPrimary()) {
      accounts = accountFacade.getTopLevelPrimaryAccounts(fiscalYear);
    } else {
      accounts = accountFacade.getTopLevelSecondaryAccounts(fiscalYear, fsDataType);
    }
    for (MiscoaAccountDto dto : accounts) {
      if ((isPrimary() && dto.getLevel() == 1) || (!isPrimary() && dto.getLevel() == 2)) {
        DefaultTreeNode parent =
            findParent(primaryAccounts, dto.getAccountNumber(), dto.getLevel());
        new DefaultTreeNode(CHILD, dto, parent);
      } else {
        new DefaultTreeNode("top", dto, primaryAccounts);
      }
    }
  }

  /** Query for sub-accounts */
  private void getSubAccounts() {
    List<MiscoaAccountDto> accounts;
    if (isPrimary()) {
      accounts = accountFacade.getChildPrimaryAccounts(fiscalYear);
    } else {
      accounts = accountFacade.getChildSecondaryAccounts(fiscalYear, fsDataType);
    }
    for (MiscoaAccountDto dto : accounts) {
      if (fsDataType != null || dto.getLevel() >= 2) {
        DefaultTreeNode parent =
            findParent(primaryAccounts, dto.getAccountNumber(), dto.getLevel());
        new DefaultTreeNode(CHILD, dto, parent);
      }
    }
  }

  /** Event handler for filtering records */
  public void onFilter() {
    if (searchCriteria.matches("[0-9]+")) {
      filterChildrenByNumber(primaryAccounts.getChildren());
    } else {
      closeChildren(primaryAccounts.getChildren());
      selectedAccount = null;
    }
  }

  /** Expands/selects matching nodes */
  private void filterChildrenByNumber(List<TreeNode> children) {
    boolean foundMatch = false;
    for (TreeNode node : children) {
      if (matchesExactly(node, searchCriteria) && !foundMatch) {
        if (node.getParent() != null) {
          node.getParent().setExpanded(true);
        }
        selectedAccount = node;
        node.setSelected(true);
        onNodeSelect(null);
        node.setExpanded(false);
        closeChildren(node.getChildren());
        foundMatch = true;
      } else if (matchesPartially(node, searchCriteria) && !foundMatch) {
        node.setExpanded(true);
        node.setSelected(false);
        filterChildrenByNumber(node.getChildren());
      } else {
        node.setExpanded(false);
        node.setSelected(false);
      }
    }
  }

  /** Closes child nodes */
  private void closeChildren(List<TreeNode> children) {
    for (TreeNode node : children) {
      node.setSelected(false);
      node.setExpanded(false);
    }
  }

  /** Determines if a node exactly matches the searchCriteria */
  private boolean matchesExactly(TreeNode node, String searchCriteria) {
    MiscoaAccountDto dto = (MiscoaAccountDto) node.getData();
    return (dto.getAccountNumber().startsWith(searchCriteria));
  }

  /** Determines if a node partially matches the searchCriteria */
  private boolean matchesPartially(TreeNode node, String searchCriteria) {
    MiscoaAccountDto dto = (MiscoaAccountDto) node.getData();
    int length = getLengthForLevel(dto.getLevel());
    if (length > searchCriteria.length()) {
      length = searchCriteria.length();
    }
    return dto.getAccountNumber()
        .substring(0, length)
        .startsWith(searchCriteria.substring(0, length));
  }

  /**
   * Event Handler for unselecting a record
   *
   * @param event NodeSelectEvent
   */
  public void onNodeUnselect(NodeUnselectEvent event) {
    clear();
  }

  /**
   * Event Handler for selecting a record
   *
   * @param event NodeSelectEvent
   */
  public void onNodeSelect(NodeSelectEvent event) {
    if (selectedAccount != null) {
      MiscoaAccountDto dto = (MiscoaAccountDto) selectedAccount.getData();
      if (dto.getAccountId() != null) {
        selectedAccountId = dto.getAccountId();
      } else {
        selectedAccountId = 0;
      }
      selectedAccountNumber = dto.getAccountNumber() + " - " + dto.getAccountName();
      if (selectedAccount.getParent() != null && selectedAccount.getParent().getData() != null) {
        MiscoaAccountDto parent = (MiscoaAccountDto) selectedAccount.getParent().getData();
        parentAccountNumber = parent.getAccountNumber() + " - " + parent.getAccountName();
      } else {
        parentAccountNumber = null;
      }
      querySelectedAccount();
      currentNodeHasChildren = selectedAccount.getChildCount() > 0;
    }
  }

  public void onNodeExpand(NodeExpandEvent event) {
    LOG.debug("Node {} expanded", event.getTreeNode().getRowKey());
  }

  public void onNodeCollapse(NodeCollapseEvent event) {
    LOG.debug("Node {} collapsed", event.getTreeNode().getRowKey());
    if (selectedAccount != null) {
      TreeNode root = event.getTreeNode();
      MiscoaAccountDto selected = (MiscoaAccountDto) selectedAccount.getData();
      if (findNode(root, selected.getAccountNumber(), selected.getLevel()) != null) {
        selectNone(primaryAccounts.getChildren());
        clear();
        selectedAccount = null;
      }
    }
  }

  /** Queries the DB for the full details of the selected tree node */
  private void querySelectedAccount() {
    if (selectedAccountId > 0) {
      if (isPrimary()) {
        primaryAccount = accountFacade.getPrimaryAccount(selectedAccountId);
      } else {
        secondaryAccount = accountFacade.getSecondaryAccount(selectedAccountId);
      }
    } else {
      if (isPrimary()) {
        primaryAccount = new PrimaryAccountDto();
        primaryAccount.setLvlInd((short) 1);
        primaryAccount.setAcctypCode(selectedAccountNumber.substring(0, 1));
        primaryAccount.setFndtypCode(selectedAccountNumber.substring(1, 2));
      }
    }
  }

  /** Event handler to create a new record */
  public void createAccount() {
    querySelectedAccount();
    if (isPrimary()) {
      createPrimaryAccount();
    } else {
      createSecondaryAccount();
    }
  }

  /** Convenience method to create Primary accounts */
  private void createPrimaryAccount() {
    PrimaryAccountDto newAccount = new PrimaryAccountDto();
    newAccount.setLvlInd((short) (primaryAccount.getLvlInd() + 1));
    newAccount.setLvl1Name(primaryAccount.getLvl1Name());
    newAccount.setAcctypCode(primaryAccount.getAcctypCode());
    newAccount.setFndtypCode(primaryAccount.getFndtypCode());
    newAccount.setFiscalYear(fiscalYear);
    if (newAccount.getLvlInd() > 2) {
      newAccount.setLvl2(primaryAccount.getLvl2());
      newAccount.setLvl2Name(primaryAccount.getLvl2Name());
    } else {
      newAccount.setLvl2(SINGLE_ZERO);
    }
    if (newAccount.getLvlInd() > 3) {
      newAccount.setLvl3(primaryAccount.getLvl3());
      newAccount.setLvl3Name(primaryAccount.getLvl3Name());
    } else {
      newAccount.setLvl3(DOUBLE_ZERO);
    }
    if (newAccount.getLvlInd() > 4) {
      newAccount.setLvl4(primaryAccount.getLvl4());
      newAccount.setLvl4Name(primaryAccount.getLvl4Name());
    } else {
      newAccount.setLvl4(DOUBLE_ZERO);
    }
    newAccount.setLvl5(DOUBLE_ZERO);
    primaryAccount = newAccount;
  }

  /** Convenience method to create Secondary accounts */
  private void createSecondaryAccount() {
    if (selectedAccountId > 0) {
      // Copy to new object
      SecondaryAccountDto newAccount = new SecondaryAccountDto();
      newAccount.setLvlInd(secondaryAccount.getLvlInd() + 1);
      newAccount.setLvl1(secondaryAccount.getLvl1());
      newAccount.setLvl1Name(secondaryAccount.getLvl1Name());
      if (newAccount.getLvlInd() > 2) {
        newAccount.setLvl2(secondaryAccount.getLvl2());
        newAccount.setLvl2Name(secondaryAccount.getLvl2Name());
      } else {
        newAccount.setLvl2(DOUBLE_ZERO);
      }
      if (newAccount.getLvlInd() > 3) {
        newAccount.setLvl3(secondaryAccount.getLvl3());
        newAccount.setLvl3Name(secondaryAccount.getLvl3Name());
      } else {
        newAccount.setLvl3(DOUBLE_ZERO);
      }
      newAccount.setLvl4(DOUBLE_ZERO);
      newAccount.setFsDataType(fsDataType);
      newAccount.setFiscalYear(fiscalYear);
      secondaryAccount = newAccount;
    } else {
      secondaryAccount = new SecondaryAccountDto();
      secondaryAccount.setFsDataType(fsDataType);
      secondaryAccount.setFiscalYear(fiscalYear);
      secondaryAccount.setLvlInd(1l);
      secondaryAccount.setLvl1(SINGLE_ZERO);
      secondaryAccount.setLvl2(DOUBLE_ZERO);
      secondaryAccount.setLvl3(DOUBLE_ZERO);
      secondaryAccount.setLvl4(DOUBLE_ZERO);
    }
  }

  /** Prepare to edit a row */
  public void updateAccount() {
    querySelectedAccount();
  }

  /** Saves an account */
  public void save() {
    try {
      boolean result;
      if (isPrimary()) {
        result = savePrimaryAccount();
      } else {
        result = saveSecondaryAccount();
      }
      if (result) {
        Messages.addInfoMessage(null, "Account successfully saved.");
      } else {
        return;
      }
    } catch (EJBException e) {
      LOG.error(
          (isPrimary()
              ? "Exception when creating primary account"
              : "Exception when creating secondary account"),
          e.fillInStackTrace());
      Exception cause = e.getCausedByException();
      if (cause instanceof ConstraintViolationException) {
        ConstraintViolationException cve = (ConstraintViolationException) e.getCausedByException();
        for (Iterator<ConstraintViolation<?>> it = cve.getConstraintViolations().iterator();
            it.hasNext(); ) {
          ConstraintViolation<? extends Object> v = it.next();
          Messages.addErrorMessage("Save account", v.getMessage());
        }
      }
    } catch (Exception e) {
      LOG.error(
          (isPrimary()
              ? "Exception when creating primary account"
              : "Exception when creating secondary account"),
          e.fillInStackTrace());
      Messages.addErrorMessage(
          "Save account",
          "General exception occured, message is {}; check log for details",
          e.getMessage());
    }
    selectNone(primaryAccounts.getChildren());
    if ((selectedAccount != null) && (selectedAccount.getParent() != null)) {
      selectedAccount.getParent().setSelected(true);
      selectedAccount.getParent().setExpanded(true);
    }
    onNodeSelect(null);
  }

  /** Convenience method to save Primary accounts */
  private boolean savePrimaryAccount() {
    primaryAccount.setDateModified(new Date());
    primaryAccount.setUserModified(userBean.getUserName());
    if (primaryAccount.getMpaId() == null) {
      if (!validatePrimary()) {
        return false;
      }
      primaryAccount.setPrmryAcctNumber(
          primaryAccount.getAcctypCode()
              + primaryAccount.getFndtypCode()
              + primaryAccount.getLvl2()
              + primaryAccount.getLvl3()
              + primaryAccount.getLvl4()
              + primaryAccount.getLvl5());
      primaryAccount.setAgglvl2(
          primaryAccount.getAcctypCode()
              + primaryAccount.getFndtypCode()
              + primaryAccount.getLvl2());
      primaryAccount.setAgglvl3(primaryAccount.getAgglvl2() + primaryAccount.getLvl3());
      primaryAccount.setAgglvl4(primaryAccount.getAgglvl3() + primaryAccount.getLvl4());
      primaryAccount.setDateCreated(new Date());
      primaryAccount.setUserCreated(userBean.getUserName());
      long mpaId = accountFacade.createPrimaryAccount(primaryAccount);
      // Add new record to the tree
      primaryAccount.setMpaId(mpaId);
      MiscoaAccountDto dto =
          new MiscoaAccountDto(
              mpaId,
              primaryAccount.getPrmryAcctNumber(),
              primaryAccount.getLevelName(),
              primaryAccount.getLvlInd());
      DefaultTreeNode parent = findParent(primaryAccounts, dto.getAccountNumber(), dto.getLevel());
      selectedAccount = new DefaultTreeNode(CHILD, dto, parent);
    } else {
      accountFacade.updatePrimaryAccount(primaryAccount);
      // Update the tree
      DefaultTreeNode node =
          findNode(
              primaryAccounts, primaryAccount.getPrmryAcctNumber(), primaryAccount.getLvlInd());
      if (node != null) {
        selectedAccount = node;
        ((MiscoaAccountDto) (node.getData())).setAccountName(primaryAccount.getLevelName());
      }
    }
    return true;
  }

  /** Convenience method to save Secondary accounts */
  private boolean saveSecondaryAccount() {
    secondaryAccount.setDateModified(new Date());
    secondaryAccount.setUserModified(userBean.getUserName());
    if (secondaryAccount.getMsaId() == null) {
      if (!validateSecondary()) {
        return false;
      }
      secondaryAccount.setScndryAcctNumber(
          secondaryAccount.getLvl1()
              + secondaryAccount.getLvl2()
              + secondaryAccount.getLvl3()
              + secondaryAccount.getLvl4());
      secondaryAccount.setAgglvl2(secondaryAccount.getLvl1() + secondaryAccount.getLvl2());
      secondaryAccount.setAgglvl3(
          secondaryAccount.getLvl1() + secondaryAccount.getLvl2() + secondaryAccount.getLvl3());
      secondaryAccount.setDateCreated(new Date());
      secondaryAccount.setUserCreated(userBean.getUserName());
      long msaId = accountFacade.createSecondaryAccount(secondaryAccount);
      // Add new record to the tree
      secondaryAccount.setMsaId(msaId);

      MiscoaAccountDto dto =
          new MiscoaAccountDto(
              msaId,
              secondaryAccount.getScndryAcctNumber(),
              secondaryAccount.getLevelName(),
              secondaryAccount.getLvlInd().intValue());
      DefaultTreeNode parent = findParent(primaryAccounts, dto.getAccountNumber(), dto.getLevel());

      if (secondaryAccount.getLvlInd() == 1) {
        selectedAccount = new DefaultTreeNode("top", dto, primaryAccounts);
      } else {
        selectedAccount = new DefaultTreeNode(CHILD, dto, parent);
      }
    } else {
      accountFacade.updateSecondaryAccount(secondaryAccount);
      // Update the tree
      DefaultTreeNode node =
          findNode(
              primaryAccounts,
              secondaryAccount.getScndryAcctNumber(),
              secondaryAccount.getLvlInd().intValue());
      if (node != null) {
        selectedAccount = node;
        ((MiscoaAccountDto) (node.getData())).setAccountName(secondaryAccount.getLevelName());
      }
    }
    return true;
  }

  public void clear() {
    selectedAccountId = 0;
    selectedAccountNumber = null;
    parentAccountNumber = null;
    primaryAccount = null;
    secondaryAccount = null;
  }

  /**
   * Validates the primary account number
   *
   * @return boolean - true if valid
   */
  private boolean validatePrimary() {
    if ((primaryAccount.getLvlInd() == 2 && isZeroValue(primaryAccount.getLvl2()))
        || (primaryAccount.getLvlInd() == 3 && isZeroValue(primaryAccount.getLvl3()))
        || (primaryAccount.getLvlInd() == 4 && isZeroValue(primaryAccount.getLvl4()))
        || (primaryAccount.getLvlInd() == 5 && isZeroValue(primaryAccount.getLvl5()))) {
      Messages.addErrorMessage(null, Messages.getMessageForKey("chartOfAccounts.zeroValueError"));
      return false;
    }
    String accountNumber =
        primaryAccount.getAcctypCode()
            + primaryAccount.getFndtypCode()
            + primaryAccount.getLvl2()
            + primaryAccount.getLvl3()
            + primaryAccount.getLvl4()
            + primaryAccount.getLvl5();
    if (findNode(primaryAccounts, accountNumber, primaryAccount.getLvlInd()) != null) {
      Messages.addErrorMessage(
          null, Messages.getMessageForKey("chartOfAccounts.uniquenessViolationError"));
      return false;
    }
    return true;
  }

  /**
   * Validates the secondary account number
   *
   * @return boolean - true if valid
   */
  private boolean validateSecondary() {
    if ((secondaryAccount.getLvlInd() == 1 && isZeroValue(secondaryAccount.getLvl1()))
        || (secondaryAccount.getLvlInd() == 2 && isZeroValue(secondaryAccount.getLvl2()))
        || (secondaryAccount.getLvlInd() == 3 && isZeroValue(secondaryAccount.getLvl3()))
        || (secondaryAccount.getLvlInd() == 4 && isZeroValue(secondaryAccount.getLvl4()))) {
      Messages.addErrorMessage(null, Messages.getMessageForKey("chartOfAccounts.zeroValueError"));
      return false;
    }
    String accountNumber =
        secondaryAccount.getLvl1()
            + secondaryAccount.getLvl2()
            + secondaryAccount.getLvl3()
            + secondaryAccount.getLvl4();
    if (findNode(primaryAccounts, accountNumber, secondaryAccount.getLvlInd().intValue()) != null) {
      Messages.addErrorMessage(
          null, Messages.getMessageForKey("chartOfAccounts.uniquenessViolationError"));
      return false;
    }
    return true;
  }

  private boolean isZeroValue(String levelValue) {
    return (DOUBLE_ZERO.equals(levelValue) || SINGLE_ZERO.equals(levelValue));
  }

  /** Deletes an account */
  public void delete() {
    String accountName = null;
    String message = Messages.getMessageForKey("chartOfAccounts.deleteError");
    if (isPrimary()) {
      accountName = primaryAccount.getShortName();
      if (accountFacade.accountInUse(primaryAccount)) {
        Messages.addErrorMessage(null, message, accountName);
        return;
      }
      try {
        accountFacade.deletePrimaryAccount(primaryAccount);
      } catch (Exception e) {
        LOG.error(e);
        Messages.addErrorMessage(null, message, accountName);
        return;
      }
      DefaultTreeNode node =
          findNode(
              primaryAccounts, primaryAccount.getPrmryAcctNumber(), primaryAccount.getLvlInd());
      node.getParent().getChildren().remove(node);
    } else {
      accountName = secondaryAccount.getShortName();
      if (accountFacade.accountInUse(secondaryAccount)) {
        Messages.addErrorMessage(null, message, accountName);
        return;
      }
      try {
        accountFacade.deleteSecondaryAccount(secondaryAccount);
      } catch (Exception e) {
        LOG.error(e);
        Messages.addErrorMessage(null, message, accountName);
        return;
      }
      DefaultTreeNode node =
          findNode(
              primaryAccounts,
              secondaryAccount.getScndryAcctNumber(),
              secondaryAccount.getLvlInd().intValue());
      node.getParent().getChildren().remove(node);
    }
    clear();
    selectNone(primaryAccounts.getChildren());
    selectedAccount = null;
    Messages.addInfoMessage(
        null, Messages.getMessageForKey("chartOfAccounts.deleteSuccess"), accountName);
  }

  /** Search the tree for the appropriate node */
  private DefaultTreeNode findNode(
      TreeNode<MiscoaAccountDto> root, String accountNumber, int level) {
    int length = getLengthForLevel(level);
    String shortAccountNumber = accountNumber.substring(0, length);
    for (TreeNode<MiscoaAccountDto> child : root.getChildren()) {
      MiscoaAccountDto dto = child.getData();
      int childLength = getLengthForLevel(dto.getLevel());
      String childAccountNumber = dto.getAccountNumber().substring(0, childLength);
      if (shortAccountNumber.equals(childAccountNumber)) {
        return (DefaultTreeNode) child;
      } else if (shortAccountNumber.startsWith(childAccountNumber)) {
        return findNode(child, accountNumber, level);
      }
    }
    return null;
  }

  /** Search the tree for the appropriate parent node */
  private DefaultTreeNode findParent(
      TreeNode<MiscoaAccountDto> root, String accountNumber, int level) {
    int length = getLengthForLevel(level);
    String shortAccountNumber = accountNumber.substring(0, length);
    for (TreeNode<MiscoaAccountDto> child : root.getChildren()) {
      MiscoaAccountDto dto = child.getData();
      int childLength = getLengthForLevel(dto.getLevel());
      String childAccountNumber = dto.getAccountNumber().substring(0, childLength);
      if (dto.getLevel() == (level - 1) && shortAccountNumber.startsWith(childAccountNumber)) {
        return (DefaultTreeNode) child;
      } else if (shortAccountNumber.startsWith(childAccountNumber)) {
        return findParent(child, accountNumber, level);
      }
    }
    return null;
  }

  /** Returns the account number length for a given level */
  private int getLengthForLevel(int level) {
    int length = 0;
    if (isPrimary()) {
      if (level == 0) {
        length = 1;
      } else if (level == 1) {
        length = 2;
      } else if (level == 2) {
        length = 3;
      } else if (level == 3) {
        length = 5;
      } else if (level == 4) {
        length = 7;
      } else {
        length = 9;
      }
    } else {
      length = level * 2 - 1;
    }
    return length;
  }

  private void selectNone(List<TreeNode> nodes) {
    for (TreeNode node : nodes) {
      node.setSelected(false);
      selectNone(node.getChildren());
    }
  }
}
