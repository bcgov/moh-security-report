package ca.bc.gov.health.hamis.beans.session;

import ca.bc.gov.health.hamis.beans.common.Messages;
import ca.bc.gov.health.hamis.dto.HealthOrganizationDto;
import ca.bc.gov.health.hamis.service.IDataSubmitterFacade;
import ca.bc.gov.health.hamis.service.IHealthOrganizationFacade;
import fish.payara.security.openid.api.OpenIdContext;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.SessionScoped;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import lombok.Getter;

@Named("UserBean")
@SessionScoped
@Getter
public class UserBean implements Serializable {

  private static final long serialVersionUID = 8048461644917980018L;

  /** Facades for looking up the user's HA */
  @EJB private IDataSubmitterFacade dsFacade;

  @EJB private IHealthOrganizationFacade hoFacade;

  @Inject private OpenIdContext context;

  private String userName;
  private int healthAuthority;
  private String healthAuthorityName;
  private List<String> userRoles;

  /** Initialize the user object */
  @PostConstruct
  public void initialize() {

    if (context.getCallerGroups() != null && !context.getCallerGroups().isEmpty()) {
      userRoles = new ArrayList<>(context.getCallerGroups());
    }

    if (context.getAccessToken() != null) {
      userName =
          context.getAccessToken().getJwtClaims().getStringClaim("preferred_username").orElse("");
    }

    if (isDataSubmitter()) {
      healthAuthority = dsFacade.getHealthOrganizationForDataSubmitter(context.getSubject());
      if (healthAuthority > 0) {
        HealthOrganizationDto ho = hoFacade.getHealthOrganization((long) healthAuthority);
        if (ho != null) {
          healthAuthorityName = ho.getCurrentName();
        }
      } else {
        Messages.addErrorMessage(null, Messages.getMessageForKey("login.noHaFound"));
      }
    }
  }

  public String getUserId() {
    return context.getSubject().toUpperCase();
  }

  /**
   * Returns true if the user is a data submitter with no HA assigned
   *
   * @return boolean
   */
  public boolean isDataSubmitterNoHealthAuthority() {
    return isDataSubmitter() && healthAuthority == 0;
  }

  /**
   * Determines if the user is a data submitter
   *
   * @return boolean
   */
  public boolean isDataSubmitter() {
    return userRoles != null && (userRoles.contains("HMS_DATA_SUBMITTER"));
  }

  /**
   * Logout and redirect the current user.
   *
   * @return index
   */
  public String logout() {
    FacesContext.getCurrentInstance().getExternalContext().invalidateSession();
    return "/index.xhtml?faces-redirect=true";
  }
}
