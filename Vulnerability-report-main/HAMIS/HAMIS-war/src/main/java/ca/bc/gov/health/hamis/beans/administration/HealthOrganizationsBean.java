package ca.bc.gov.health.hamis.beans.administration;

import ca.bc.gov.health.hamis.beans.common.Messages;
import ca.bc.gov.health.hamis.beans.session.DroplistBean;
import ca.bc.gov.health.hamis.beans.session.UserBean;
import ca.bc.gov.health.hamis.dto.HealthAuthorityTypeDto;
import ca.bc.gov.health.hamis.dto.HealthOrganizationDto;
import ca.bc.gov.health.hamis.dto.OrganizationRelationshipDto;
import ca.bc.gov.health.hamis.dto.PeerGroupDto;
import ca.bc.gov.health.hamis.dto.RegionalTeamDto;
import ca.bc.gov.health.hamis.dto.RelationshipTypeDto;
import ca.bc.gov.health.hamis.service.IHealthOrganizationFacade;
import ca.bc.gov.health.hamis.service.IOrganizationRelationshipFacade;
import ca.bc.gov.health.hamis.service.IRelationshipTypeFacade;
import ca.bc.gov.health.hamis.util.HamisConstants;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.text.MessageFormat;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import lombok.Getter;
import lombok.Setter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.primefaces.event.SelectEvent;

/**
 * Backing bean for the Health Organizations page
 *
 * @author vladimir.dovgalyuk
 */
@Named("HealthOrganizationsBean")
@ViewScoped
@Getter
@Setter
public class HealthOrganizationsBean implements Serializable {

  private static final long serialVersionUID = 895232004678583801L;

  private static final Logger LOG = LogManager.getLogger(HealthOrganizationsBean.class);
  private static final String CREATE_FORM_ID = "createForm";

  private List<HealthOrganizationDto> healthOrganizations;
  private List<HealthOrganizationDto> filteredHealthOrganizations;
  private HealthOrganizationDto currentHealthOrganization;
  private String healthAuthority,
      healthAuthorityType,
      relationshipType,
      healthServiceDeliveryArea,
      localHealthArea;
  private List<SelectItem> healthAuthorities = null;
  private boolean enablePageMessages = true;

  @EJB private IHealthOrganizationFacade healthOrgFacade;

  @EJB private IOrganizationRelationshipFacade relationshipFacade;

  @EJB IRelationshipTypeFacade relationshipTypeFacade;

  @Inject private transient DroplistBean droplistBean;

  @Inject private UserBean userBean;

  /** Initialize the page */
  @PostConstruct
  public void init() {
    LOG.debug("Initializing HealthOrganizationsBean");
    healthOrganizations = healthOrgFacade.getAllActiveHealthOrganizations();
    clearHealthOrganization();
    enablePageMessaging();
  }

  /** Create new or update existing Health Organization */
  public void saveHealthOrganization() {
    if (isHealthAuthoritySelected()) {
      if (isCreateHealthOrganization()) createHealthAuthority();
      else updateHealthAuthority();
    } else {
      if (isCreateHealthOrganization()) createHealthServiceProvider();
      else updateHealthServiceProvider();
    }
  }

  /** Create a new Health Authority */
  private void createHealthAuthority() {
    LOG.debug("Starting creation of a new HA {}", currentHealthOrganization.getCurrentName());
    try {
      currentHealthOrganization.setEffDt(new Date());
      currentHealthOrganization.getPeerGroup().setPgCode(localHealthArea);
      currentHealthOrganization.getRegionalTeam().setRtCode(healthServiceDeliveryArea);
      currentHealthOrganization.getHealthAuthorityType().setHatypCode(healthAuthorityType);
      currentHealthOrganization.setCurrentRecord("Y");
      // Audit fields
      currentHealthOrganization.setUserCreated(userBean.getUserName());
      currentHealthOrganization.setUserModified(userBean.getUserName());
      long id = healthOrgFacade.createHealthOrganization(currentHealthOrganization, null);
      if (id >= 0) {
        healthOrganizations = healthOrgFacade.getAllActiveHealthOrganizations();
        LOG.debug("New HA succesfully created with ID {}", id);
        Messages.addInfoMessage(
            CREATE_FORM_ID,
            Messages.getMessageForKey("healthOrganizations.message.createHA.info"),
            currentHealthOrganization.getCurrentName());
        clearHealthOrganization();
        healthAuthorities = null;
      } else {
        String message;
        if (id == IHealthOrganizationFacade.HO_CREATE_NEGATIVE_RESULTS.DUPLICATE_SPID.getValue()) {
          message =
              Messages.getMessageForKey("healthOrganizations.message.createHO.duplicateSPID.error");
          message = MessageFormat.format(message, currentHealthOrganization.getSpId());
        } else {
          message = Messages.getMessageForKey("healthOrganizations.message.createHA.error");
        }
        Messages.addErrorMessage(CREATE_FORM_ID, message);
      }
    } catch (Exception e) {
      LOG.error("Error occurred when creating new Health Authority", e.fillInStackTrace());
      Messages.addErrorMessage(
          CREATE_FORM_ID, Messages.getMessageForKey("healthOrganizations.message.createHA.error"));
    }

    enablePageMessaging();
  }

  /** Create a new Health Service Provider */
  private void createHealthServiceProvider() {
    LOG.debug("Starting creation of a new HSP {}", currentHealthOrganization.getCurrentName());
    try {
      currentHealthOrganization.setEffDt(new Date());
      currentHealthOrganization.getPeerGroup().setPgCode(localHealthArea);
      currentHealthOrganization.getRegionalTeam().setRtCode(healthServiceDeliveryArea);
      currentHealthOrganization.setHealthAuthorityType(null);
      currentHealthOrganization.setCurrentRecord("Y");
      // Audit fields
      currentHealthOrganization.setUserCreated(userBean.getUserName());
      currentHealthOrganization.setUserModified(userBean.getUserName());

      long id =
          healthOrgFacade.createHealthOrganization(
              currentHealthOrganization, instantiateRelationship());
      if (id >= 0) {
        healthOrganizations = healthOrgFacade.getAllActiveHealthOrganizations();
        LOG.debug("New HSP succesfully created with ID {}", id);
        Messages.addInfoMessage(
            CREATE_FORM_ID,
            Messages.getMessageForKey("healthOrganizations.message.createHSP.info"),
            currentHealthOrganization.getCurrentName());
        clearHealthOrganization();
      } else {
        String message;
        if (id == IHealthOrganizationFacade.HO_CREATE_NEGATIVE_RESULTS.DUPLICATE_SPID.getValue()) {
          message =
              Messages.getMessageForKey("healthOrganizations.message.createHO.duplicateSPID.error");
          message = MessageFormat.format(message, currentHealthOrganization.getSpId());
        } else {
          message = Messages.getMessageForKey("healthOrganizations.message.createHSP.error");
        }
        Messages.addErrorMessage(CREATE_FORM_ID, message);
      }
    } catch (Exception e) {
      LOG.error("Error occurred when creating new Health Service Provider", e.fillInStackTrace());
      Messages.addErrorMessage(
          CREATE_FORM_ID, Messages.getMessageForKey("healthOrganizations.message.createHSP.error"));
    }
    enablePageMessaging();
  }

  /** Updates Health Authority */
  private void updateHealthAuthority() {
    LOG.debug("Starting update of the existing HA {}", currentHealthOrganization.getCurrentName());
    if (healthOrgFacade.healthAuthorityNumberExists(
        currentHealthOrganization.getHaNumber(), currentHealthOrganization.getHoId())) {
      LOG.error(
          "Error occurred when updating Health Authority, HA Number {} is already taken",
          currentHealthOrganization.getHaNumber());
      Messages.addErrorMessage(
          CREATE_FORM_ID,
          Messages.getMessageForKey("healthOrganizations.message.createHA.duplicateNumber.error"),
          currentHealthOrganization.getHaNumber());
    } else {
      try {
        boolean result = true;
        currentHealthOrganization.getPeerGroup().setPgCode(localHealthArea);
        currentHealthOrganization.getRegionalTeam().setRtCode(healthServiceDeliveryArea);
        currentHealthOrganization.getHealthAuthorityType().setHatypCode(healthAuthorityType);
        // Audit fields
        currentHealthOrganization.setUserModified(userBean.getUserName());

        result = healthOrgFacade.updateHealthOrganization(currentHealthOrganization);
        if (result) {
          healthOrganizations = healthOrgFacade.getAllActiveHealthOrganizations();
          LOG.debug("HA with Id {} successfully updated", currentHealthOrganization.getHoId());
          Messages.addInfoMessage(
              CREATE_FORM_ID,
              Messages.getMessageForKey("healthOrganizations.message.updateHA.info"),
              currentHealthOrganization.getCurrentName());
        } else {
          Messages.addErrorMessage(
              CREATE_FORM_ID,
              Messages.getMessageForKey("healthOrganizations.message.updateHA.error1"));
        }
        clearHealthOrganization();
        healthAuthorities = null;
      } catch (Exception e) {
        LOG.error("Error occurred when updating Health Authority", e.fillInStackTrace());
        Messages.addErrorMessage(
            CREATE_FORM_ID,
            Messages.getMessageForKey("healthOrganizations.message.updateHA.error2"));
      }
      enablePageMessaging();
    }
  }

  /**
   * Updates Health Service Provider
   *
   * @see
   *     ca.bc.gov.health.hamis.session.HealthOrganizationFacade#updateHealthOrganizationWithRelationships(HealthOrganizationDto
   *     hoDto, OrganizationRelationshipDto newRelationshipDto, long oldRelationshipDtoId)
   * @see
   *     ca.bc.gov.health.hamis.session.HealthOrganizationFacade#updateHealthOrganization(HealthOrganizationDto
   *     hoDto)
   */
  private void updateHealthServiceProvider() {
    LOG.debug(
        "Starting update of the existing HSP {} ", currentHealthOrganization.getCurrentName());

    // Check if SP ID already exists
    if (healthOrgFacade.serviceProviderIdExists(
        currentHealthOrganization.getSpId(), currentHealthOrganization.getHoId())) {
      LOG.error(
          "Active Health Organization with Service Provider ID {} already exists",
          currentHealthOrganization.getSpId());
      Messages.addErrorMessage(
          CREATE_FORM_ID,
          Messages.getMessageForKey("healthOrganizations.message.createHO.duplicateSPID.error"),
          currentHealthOrganization.getSpId());
    } else {
      try {
        boolean result = true;
        currentHealthOrganization.getPeerGroup().setPgCode(localHealthArea);
        currentHealthOrganization.getRegionalTeam().setRtCode(healthServiceDeliveryArea);
        // Audit fields
        currentHealthOrganization.setUserModified(userBean.getUserName());

        // Check if relationship to parenting HA has been modified
        List<OrganizationRelationshipDto> rels =
            relationshipFacade.getRelationshipsToMasters(
                currentHealthOrganization.getHoId().longValue());
        if (!rels.isEmpty()) {
          // Relationship can be changed in two ways
          // Type of relationship was altered or parent HA has been changed or both
          boolean relationshipChanged =
              !relationshipType.equals(rels.get(0).getReltypCode().getReltypCode());
          relationshipChanged =
              relationshipChanged
                  || !healthAuthority.equals(rels.get(0).getMstHoId().getHoId().toString());

          if (relationshipChanged) {
            // We have a relationship change here, so the old relationship with ID
            // rels.get(0).getOrId()
            // is expired, and a new relationship is created instead
            result =
                healthOrgFacade.updateHealthOrganizationWithRelationships(
                    currentHealthOrganization, instantiateRelationship(), rels.get(0).getOrId());
          } else
            // No relationship changes detected, updating HSP record only
            result = healthOrgFacade.updateHealthOrganization(currentHealthOrganization);
        } else {
          // There are no relationships to delete
          // thus passing a negative value for the old relationship ID because
          // we still have to call the method which creates a new relationship to HA
          result =
              healthOrgFacade.updateHealthOrganizationWithRelationships(
                  currentHealthOrganization, instantiateRelationship(), -1L);
        }
        if (result) {
          healthOrganizations = healthOrgFacade.getAllActiveHealthOrganizations();
          LOG.debug("HSP with Id {} successfully updated", currentHealthOrganization.getHoId());
          Messages.addInfoMessage(
              CREATE_FORM_ID,
              Messages.getMessageForKey("healthOrganizations.message.updateHSP.info"),
              currentHealthOrganization.getCurrentName());
        } else {
          // Something went wrong in Facade, which returned negative result
          Messages.addErrorMessage(
              CREATE_FORM_ID,
              Messages.getMessageForKey("healthOrganizations.message.updateHSP.error1"));
        }
        clearHealthOrganization();
      } catch (Exception e) {
        // Unhandled exceptions, need to wrap them
        LOG.error("Error occurred when updating Health Service Provider", e.fillInStackTrace());
        Messages.addErrorMessage(
            CREATE_FORM_ID,
            Messages.getMessageForKey("healthOrganizations.message.updateHSP.error2"));
      }
      enablePageMessaging();
    }
  }

  /**
   * Creates a new OrganizationRelationshipDto object based on values provided in the page
   *
   * @return OrganizationRelationshipDto
   */
  private OrganizationRelationshipDto instantiateRelationship() {
    LOG.debug("Creating new relationship to the existing HA");
    OrganizationRelationshipDto relationship = new OrganizationRelationshipDto();
    HealthOrganizationDto ha = new HealthOrganizationDto(); // Health Authority
    ha.setHoId(Long.parseLong(healthAuthority));
    relationship.setMstHoId(ha);
    relationship.setSubHoId(currentHealthOrganization);
    relationship.setCurrentRecord("Y");

    // Get relationship type
    RelationshipTypeDto relType = relationshipTypeFacade.getById(relationshipType);
    relationship.setReltypCode(relType);
    relationship.setPossibleDoubleCount(relType.getDefaultPossibleDblCnt());

    // Audit fields
    relationship.setEffDt(new Date());
    relationship.setUserCreated(userBean.getUserName());
    relationship.setUserModified(userBean.getUserName());

    return relationship;
  }

  /** Soft delete selected Health Organization */
  public void deleteHealthOrganization() {
    LOG.debug(
        "Starting deletion of Health Organization {}; ID {}",
        currentHealthOrganization.getCurrentName(),
        currentHealthOrganization.getHoId());
    currentHealthOrganization.setUserModified(userBean.getUserName());

    // Check this selected Health Organization can be deleted
    int retCode = healthOrgFacade.validateHODeletion(currentHealthOrganization.getHoId());
    LOG.debug(
        "Deletion check for HO with ID {} returned {}",
        currentHealthOrganization.getHoId(),
        retCode);

    if (retCode == IHealthOrganizationFacade.HO_DELETION_VALIDATION_RESULTS.POSITIVE.getValue()) {
      boolean result =
          healthOrgFacade.deleteHealthOrganization(
              currentHealthOrganization.getHoId().longValue(), userBean.getUserName());
      if (result) {
        healthOrganizations = healthOrgFacade.getAllActiveHealthOrganizations();
        LOG.debug(
            "Deletion completed, record with ID {} has been expire.",
            currentHealthOrganization.getHoId());
        String message = Messages.getMessageForKey("healthOrganizations.message.deleteHSP.info");
        if (isHealthAuthoritySelected()) {
          message = Messages.getMessageForKey("healthOrganizations.message.deleteHA.info");
        }
        Messages.addInfoMessage(
            CREATE_FORM_ID, message, currentHealthOrganization.getCurrentName());
      } else {
        LOG.error("Error occurred when deleting Health Organization");
        Messages.addErrorMessage(
            CREATE_FORM_ID,
            Messages.getMessageForKey("healthOrganizations.message.deleteHO.error"));
      }
    } else {
      String message;
      if (retCode
          == IHealthOrganizationFacade.HO_DELETION_VALIDATION_RESULTS.NEGATIVE_HA.getValue())
        message = Messages.getMessageForKey("healthOrganizations.message.deleteHA.error");
      else message = Messages.getMessageForKey("healthOrganizations.message.deleteHSP.error");

      Messages.addErrorMessage(CREATE_FORM_ID, message);
    }
    clearHealthOrganization();
    enablePageMessaging();
  }

  /** Resets the local Health Organization instance */
  public void clearHealthOrganization() {
    currentHealthOrganization = new HealthOrganizationDto();
    currentHealthOrganization.setPeerGroup(new PeerGroupDto());
    currentHealthOrganization.setRegionalTeam(new RegionalTeamDto());
    currentHealthOrganization.setHealthAuthorityType(new HealthAuthorityTypeDto());
    healthAuthority = "";
    relationshipType = "";
    healthServiceDeliveryArea = "";
    localHealthArea = "";
    healthAuthorityType = "";
  }

  /** Instantiates a new Health Service Provider */
  public void instantiateHealthServiceProvider() {
    clearHealthOrganization();
    currentHealthOrganization.setHoType(HamisConstants.HealthOrganizationTypes.HSP.toString());
  }

  /** Instantiates a new Health Authority */
  public void instantiateHealthAuthority() {
    clearHealthOrganization();
    currentHealthOrganization.setHoType(HamisConstants.HealthOrganizationTypes.HA.toString());
  }

  /**
   * For Ajax call: retrieve complete HO from the database
   *
   * @param event
   */
  public void updateCurrentHealthOrganization(SelectEvent event) {
    currentHealthOrganization =
        healthOrgFacade.getHealthOrganization(currentHealthOrganization.getHoId());
    List<OrganizationRelationshipDto> rels =
        relationshipFacade.getRelationshipsToMasters(
            currentHealthOrganization.getHoId().longValue());

    if (!rels.isEmpty()) {
      relationshipType = rels.get(0).getReltypCode().getReltypCode();
      healthAuthority = rels.get(0).getMstHoId().getHoId().toString();
    }

    if (currentHealthOrganization.getRegionalTeam() != null)
      healthServiceDeliveryArea = currentHealthOrganization.getRegionalTeam().getRtCode();

    if (currentHealthOrganization.getPeerGroup() != null)
      localHealthArea = currentHealthOrganization.getPeerGroup().getPgCode();

    if (currentHealthOrganization.getHealthAuthorityType() != null)
      healthAuthorityType = currentHealthOrganization.getHealthAuthorityType().getHatypCode();

    LOG.debug(
        "Selected for update HO with ID {} and type {}",
        currentHealthOrganization.getHoId(),
        currentHealthOrganization.getHoType());
    // Disable global messaging
    disablePageMessaging();
  }

  /**
   * Sets Create/Update dialogue header
   *
   * @return Dialogue header
   */
  public String getDialogueHeader() {
    String header = "";
    if (isCreateHealthOrganization()) {
      if (isHealthAuthoritySelected())
        header = Messages.getMessageForKey("healthOrganizations.label.createHA");
      else header = Messages.getMessageForKey("healthOrganizations.label.createHSP");
    } else {
      if (isHealthAuthoritySelected())
        header = Messages.getMessageForKey("healthOrganizations.label.updateHA");
      else header = Messages.getMessageForKey("healthOrganizations.label.updateHSP");
    }
    return header;
  }

  /**
   * Sets Delete Confirmation Dialogue header
   *
   * @return Delete Confirmation Dialogue header
   */
  public String getDeleteDialogueHeader() {
    return Messages.getMessageForKey(
        isHealthAuthoritySelected()
            ? "healthOrganizations.title.delete.HA"
            : "healthOrganizations.title.delete.HSP");
  }

  /**
   * Sets Delete Confirmation Dialogue warning text
   *
   * @return Delete Confirmation Dialogue warning text
   */
  public String getDeleteDialogueWarning() {
    String header =
        Messages.getMessageForKey(
            isHealthAuthoritySelected()
                ? "healthOrganizations.message.deleteHA.warning"
                : "healthOrganizations.message.deleteHSP.warning");
    header =
        MessageFormat.format(
            header,
            (((currentHealthOrganization != null)
                    && (currentHealthOrganization.getCurrentName() != null))
                ? currentHealthOrganization.getCurrentName()
                : ""));
    return header;
  }

  /**
   * Health Organization creation indicator
   *
   * @return true if new HO is created
   */
  public boolean isCreateHealthOrganization() {
    return currentHealthOrganization.getHoId() == null;
  }

  /**
   * Indicates dealing with HA
   *
   * @return true if Health Authority is being created/updated
   */
  public boolean isHealthAuthoritySelected() {
    if ((currentHealthOrganization != null)
        && (HamisConstants.HealthOrganizationTypes.HA
            .toString()
            .equals(currentHealthOrganization.getHoType()))) return true;
    else return false;
  }

  /**
   * Intended to disable SPID change in case of HA update
   *
   * @return true if Health Authority is being updated
   */
  public boolean isUpdateHealthAuthority() {
    return !isCreateHealthOrganization() && isHealthAuthoritySelected();
  }

  /**
   * Populates Health Authority drop-down list
   *
   * @return List of Health Authorities
   */
  public List<SelectItem> getActiveHealthAuthorities() {
    if (healthAuthorities == null) {
      healthAuthorities =
          healthOrgFacade.getAllActiveHealthAuthorities().stream()
              .map(HealthOrganizationDto::toSelectItem)
              .collect(Collectors.toList());
    }
    return healthAuthorities;
  }

  /**
   * Populates Relationship Types drop-down list
   *
   * @return List of Allowed Organization Relationships
   */
  public List<SelectItem> getAllowedRelationships() {
    return droplistBean.getAllowedRelationships();
  }

  /**
   * Populates Local Health Area drop-down list
   *
   * @return List of Local Health Areas
   */
  public List<SelectItem> getLocalHealthAreas() {
    return droplistBean.getLocalHealthAreas();
  }

  /**
   * Populates Health Service Delivery Area drop-down list
   *
   * @return List of Health Service Delivery Areas
   */
  public List<SelectItem> getHealthServiceDeliveryAreas() {
    return droplistBean.getHealthServiceDeliveryAreas();
  }

  /**
   * Populates Health Authority Types drop-down list
   *
   * @return List of Health Authority Types
   */
  public List<SelectItem> getHealthAuthorityTypes() {
    return droplistBean.getHealthAuthorityTypes();
  }

  /**
   * Manages rendering of the PF Messages Component defined for the whole page
   *
   * @return true if page-wide messages component shall be rendered, false otherwise
   */
  public boolean isEnablePageMessages() {
    return enablePageMessages;
  }

  /** Turns rendering of the page-wide PF Messages Component off */
  public void disablePageMessaging() {
    enablePageMessages = false;
  }

  /** Turns rendering of the page-wide PF Messages Component on */
  public void enablePageMessaging() {
    enablePageMessages = true;
  }
}
