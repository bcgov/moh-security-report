package ca.bc.gov.health.hamis.beans.reports;

import ca.bc.gov.health.hamis.beans.common.Messages;
import ca.bc.gov.health.hamis.beans.session.UserBean;
import ca.bc.gov.health.hamis.service.IIndicatorFacade;
import ca.bc.gov.health.hamis.util.HamisConstants;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.List;
import lombok.Getter;
import lombok.Setter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Bean for Indicator Definitions Report
 *
 * @author vladimir.dovgalyuk
 */
@Named("IndicatorDefinitionsReportBean")
@ViewScoped
@Getter
@Setter
public class IndicatorDefinitionsReportBean implements Serializable {

  private static final long serialVersionUID = 3125335734827542742L;
  /** Log instance */
  private static final Logger LOG = LogManager.getLogger(IndicatorDefinitionsReportBean.class);

  @Inject private UserBean userBean;

  /** Initialize this bean */
  @PostConstruct
  public void init() {
    LOG.debug("init");
  }

  @EJB private IIndicatorFacade facade;

  /**
   * Checks if the current user accepted the agreement
   *
   * @return true if agreement has been accepted
   */
  public boolean isDisplayReport() {
    boolean result =
        FacesContext.getCurrentInstance()
                .getExternalContext()
                .getSessionMap()
                .get(HamisConstants.INDICATOR_AGREEMENT_ACCEPTED)
            != null;
    LOG.info(
        "Checking if the user {} has accepted the agreement already ( accepted = {})",
        userBean.getUserName(),
        result);
    return result;
  }

  public String getAgreementDialogBody() {
    return Messages.getAgreementDialogBody();
  }

  public String getAgreementDialogTitle() {
    return Messages.getMessageForKey("reports.agreement.title");
  }

  public void onAccept() {
    LOG.debug(
        "Indicator Definitions Report: accept button clicked, saving attribute to the user {} session",
        userBean.getUserName());
    FacesContext.getCurrentInstance()
        .getExternalContext()
        .getSessionMap()
        .put(HamisConstants.INDICATOR_AGREEMENT_ACCEPTED, "true");
    LOG.debug(
        "Indicator Definitions Report: attribute set for {} :  {}",
        userBean.getUserName(),
        FacesContext.getCurrentInstance()
                .getExternalContext()
                .getSessionMap()
                .get(HamisConstants.INDICATOR_AGREEMENT_ACCEPTED)
            != null);
  }

  public String getReport() {
    LOG.debug("Generating Indicator Definitions report markup...");
    StringBuilder sb = new StringBuilder();
    List<String> markup = facade.getMarkup(null);
    for (String s : markup) {
      sb.append(s).append("<br/><hr><br/>");
    }
    LOG.debug("Indicator Definitions report is ready.");
    return sb.toString();
  }
}
