/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.beans.session;

import ca.bc.gov.health.hamis.reports.jasper.AbstractReportFacade;
import com.lowagie.text.FontFactory;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.context.Initialized;
import jakarta.enterprise.event.Observes;
import jakarta.faces.context.FacesContext;
import jakarta.faces.model.SelectItem;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.logging.log4j.LogManager;

/**
 * Bean to run tasks at startup
 *
 * <p>Deprecated JSF annotations replaced; the solution taken from
 * https://rmannibucau.wordpress.com/2015/03/10/cdi-and-startup/
 *
 * @author greg.perkins
 */
@Named("StartupBean")
@ApplicationScoped
public class StartupBean {

  private static final org.apache.logging.log4j.Logger logger =
      LogManager.getLogger(StartupBean.class);

  @Inject private DroplistBean droplists;

  /** Run on startup */
  public void init(@Observes @Initialized(ApplicationScoped.class) Object init) {
    // Async call to precompile reports
    // ... and initialize the logging system. Don't move log4j from here.

    String path =
        FacesContext.getCurrentInstance().getExternalContext().getRealPath("/resources/fonts");
    FontFactory.registerDirectory(path);

    CompletableFuture.runAsync(
        () -> {
          try {
            AbstractReportFacade.preInitializeReports();
          } catch (Exception ex) {
            Logger.getLogger(StartupBean.class.getName()).log(Level.SEVERE, null, ex);
            logger.error("Error while pre-initializing reports", ex.fillInStackTrace());
          }
        });

    // Async call to load droplists
    CompletableFuture.runAsync(
        () -> {
          try {
            List<SelectItem> years = droplists.getFiscalYears();
            for (SelectItem item : years) {
              droplists.getPeriodsByFiscalYear((String) item.getValue());
            }
          } catch (Exception ex) {
            Logger.getLogger(StartupBean.class.getName()).log(Level.SEVERE, null, ex);
            logger.error("Error while getting fiscal years", ex.fillInStackTrace());
          }
        });
  }

  // If you're going to call this, make sure the logger is actually working.
  private void printFontsInfo(String marker) {

    Set<?> registeredFamilies = FontFactory.getRegisteredFamilies();
    Iterator<?> iterator = registeredFamilies.iterator();
    StringBuilder sb = new StringBuilder("Registered families ").append(marker).append(":");
    while (iterator.hasNext()) {
      sb.append("\r\n\t").append(iterator.next().toString());
    }
    logger.debug(sb);

    Set<?> registeredFonts = FontFactory.getRegisteredFamilies();
    sb =
        new StringBuilder("Number of fonts ")
            .append(marker)
            .append(" = ")
            .append(registeredFonts.size());
    logger.debug(sb);
  }
}
