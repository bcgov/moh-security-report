/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.beans.reports;

import ca.bc.gov.health.hamis.beans.common.Messages;
import ca.bc.gov.health.hamis.beans.session.UserBean;
import ca.bc.gov.health.hamis.dto.ExternalReportDto;
import ca.bc.gov.health.hamis.service.IExternalReportFacade;
import ca.bc.gov.health.hamis.util.HamisConstants;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.IOException;
import java.io.Serializable;
import java.util.List;
import lombok.Getter;
import lombok.Setter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.primefaces.PrimeFaces;
import org.primefaces.event.SelectEvent;

/**
 * Backing bean for the External Reports page
 *
 * @author camille.estival
 */
@Named("ExternalReportsBean")
@ViewScoped
@Getter
@Setter
public class ExternalReportsBean implements Serializable {

  private static final long serialVersionUID = 1860014675627800176L;

  /** Log instance */
  private static final Logger LOG = LogManager.getLogger(ExternalReportsBean.class);

  @Inject private UserBean userBean;

  /* Facade instances */
  @EJB private IExternalReportFacade reportFacade;

  /* List of reports filtered by droplists */
  private List<ExternalReportDto> reportList;

  /* Selected report from the table */
  private ExternalReportDto selectedReport;

  /** Initialize this bean */
  @PostConstruct
  public void init() {
    LOG.debug("init");

    reportList = reportFacade.getExternalReports();
  }

  public void showReport(SelectEvent event) {
    ExternalReportDto selection = (ExternalReportDto) event.getObject();
    LOG.debug(
        "Report {} from category {} selected for display to {}",
        selection.getReportTitle(),
        selection.getCategory(),
        userBean.getUserName());

    LOG.debug(
        "External Reports: attribute set for {} :  {}",
        userBean.getUserName(),
        FacesContext.getCurrentInstance()
                .getExternalContext()
                .getSessionMap()
                .get(HamisConstants.INDICATOR_AGREEMENT_ACCEPTED)
            != null);

    boolean displayAgreementDialog;
    if (!selection.getCategory().isEmpty()
        && (selection.getCategory().toLowerCase().matches("(.*)indicator(.*)"))
        && (FacesContext.getCurrentInstance()
                .getExternalContext()
                .getSessionMap()
                .get(HamisConstants.INDICATOR_AGREEMENT_ACCEPTED)
            == null)) {

      LOG.debug("Indicator report selected, showing user agreement page");
      displayAgreementDialog = true;
    } else {
      LOG.debug(
          "Either non-Indicator report selected or agreement has been accepted, skipping agreement page");
      displayAgreementDialog = false;
      try {
        FacesContext.getCurrentInstance().getExternalContext().redirect(selection.getReportLink());
      } catch (IOException e) {
        LOG.error("Cannot redirect to {}", selection.getReportLink(), e.fillInStackTrace());
      }
    }
    PrimeFaces.current().ajax().addCallbackParam("displayAgreementDialog", displayAgreementDialog);
    PrimeFaces.current().ajax().addCallbackParam("reportUrl", selection.getReportLink());
  }

  public String getAgreementDialogTitle() {
    return Messages.getMessageForKey("reports.agreement.title");
  }

  public String getAgreementDialogBody() {
    return Messages.getAgreementDialogBody();
  }

  public void onAccept() {
    LOG.debug(
        "External Reports: accept button clicked, saving attribute to the user {} session",
        userBean.getUserName());
    FacesContext.getCurrentInstance()
        .getExternalContext()
        .getSessionMap()
        .put(HamisConstants.INDICATOR_AGREEMENT_ACCEPTED, "true");
  }
}
