/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.beans.submission;

import static ca.bc.gov.health.hamis.beans.navigation.Navigation.MAINTAIN_MAPPINGS_URL;

import ca.bc.gov.health.hamis.beans.common.CustomDataTablePDFExporter;
import ca.bc.gov.health.hamis.beans.common.Messages;
import ca.bc.gov.health.hamis.beans.navigation.Navigation;
import ca.bc.gov.health.hamis.beans.session.UserBean;
import ca.bc.gov.health.hamis.dto.CustomAccountDto;
import ca.bc.gov.health.hamis.dto.CustomAccountGroupingDto;
import ca.bc.gov.health.hamis.dto.FiscalYearDto;
import ca.bc.gov.health.hamis.dto.MiscoaAccountDto;
import ca.bc.gov.health.hamis.service.ICustomAccountFacade;
import ca.bc.gov.health.hamis.service.ICustomAccountGroupingFacade;
import ca.bc.gov.health.hamis.service.IDataSubmitterFacade;
import ca.bc.gov.health.hamis.service.IMiscoaAccountFacade;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.component.UIComponent;
import jakarta.faces.context.FacesContext;
import jakarta.faces.convert.Converter;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import lombok.Getter;
import lombok.Setter;
import org.primefaces.component.export.PDFOptions;
import org.primefaces.component.export.PDFOrientationType;

/**
 * Backing bean for the View/Maintain Custom Account Map screen
 *
 * @author greg.perkins
 */
@Named("CustomAccountMapBean")
@ViewScoped
@Getter
@Setter
public class CustomAccountMapBean implements java.io.Serializable {

  private static final long serialVersionUID = 8948627474093327724L;

  @EJB private ICustomAccountGroupingFacade cagFacade;
  @EJB private IDataSubmitterFacade dsFacade;
  @EJB private ICustomAccountFacade caFacade;
  @EJB private IMiscoaAccountFacade miscoaAccountFacade;

  private CustomAccountGroupingDto customAccountGroup;

  private CustomAccountDto selectedAccount;

  private List<CustomAccountDto> filteredCustomAccounts;
  private List<MiscoaAccountDto> primaryAccounts,
      secondaryFinancialAccounts,
      secondaryStatisticalAccounts;

  private String duplicateName;

  private PDFOptions pdfOptions = new PDFOptions();

  @Inject private UserBean userBean;

  private CustomDataTablePDFExporter pdfExporter;

  @PostConstruct
  public void init() {
    Long cagId =
        (Long) FacesContext.getCurrentInstance().getExternalContext().getFlash().get("cagId");
    if (cagId != null) {
      customAccountGroup = cagFacade.getCustomAccountGrouping(cagId);
    } else {
      customAccountGroup = new CustomAccountGroupingDto();
      String fiscalYear =
          (String)
              FacesContext.getCurrentInstance().getExternalContext().getFlash().get("fiscalYear");
      customAccountGroup.setFiscalYear(new FiscalYearDto());
      customAccountGroup.getFiscalYear().setFiscalYear(fiscalYear);
      customAccountGroup.setValid(true);
      customAccountGroup.setCustomAccounts(new ArrayList<>());
    }
    clearAccount();
    primaryAccounts =
        miscoaAccountFacade.getPrimaryAccounts(customAccountGroup.getFiscalYear().getFiscalYear());
    secondaryFinancialAccounts =
        miscoaAccountFacade.getSecondaryAccounts(
            customAccountGroup.getFiscalYear().getFiscalYear(), "F");
    secondaryStatisticalAccounts =
        miscoaAccountFacade.getSecondaryAccounts(
            customAccountGroup.getFiscalYear().getFiscalYear(), "S");

    pdfOptions.setFontName("BCSans-Regular");
    pdfOptions.setCellFontStyle("NORMAL");
    pdfOptions.setFacetFontStyle("BOLD");
    pdfOptions.setOrientation(PDFOrientationType.LANDSCAPE);

    float[] columnWidths = new float[] {14f, 14f, 30f, 8f, 8f, 7f, 14f};
    pdfExporter = new CustomDataTablePDFExporter(columnWidths);
  }

  /**
   * Listener for selection of a Custom Account Map
   *
   * @throws IOException
   */
  public void selectCustomAccountMap() throws IOException {
    /*
     * Now, since we'll be doing a redirect we'll lose everything in View scope, so we need to populate the flash, to pass the
     * Value in to the init() method when the page is re-rendered after the redirect
     */
    if (customAccountGroup != null) {
      Navigation.addToFlash("cagId", customAccountGroup.getCagId());
    }
    Navigation.redirect(Navigation.CUSTOM_ACCOUNT_MAP_URL);
  }

  /** Listener for creating a new Custom Account Map map */
  public String createCustomAccountMap(String fiscalYear) {
    // Put the current fiscal year into the flash so we can default the new record when we navigate
    // to the new page
    Navigation.addToFlash("fiscalYear", fiscalYear);
    return Navigation.CUSTOM_ACCOUNT_MAP_URL;
  }

  /**
   * True if we are creating a new record
   *
   * @return
   */
  public boolean isCreate() {
    return customAccountGroup.getCagId() == null;
  }

  /**
   * True if we are creating a new record
   *
   * @return
   */
  public boolean isCreateAccount() {
    return selectedAccount.getCaId() == null;
  }

  public boolean isValid() {
    for (CustomAccountDto account : customAccountGroup.getCustomAccounts()) {
      if ("Y".equals(account.getReviewFlag())) {
        return false;
      }
    }
    return true;
  }

  /** Saves the Custom Account Map */
  public void saveCustomAccountMap() {
    List<CustomAccountGroupingDto> existingRecords =
        cagFacade.getAllCustomAccountGroupingsSummary(
            customAccountGroup.getFiscalYear().getFiscalYear(), userBean.getHealthAuthority());
    for (CustomAccountGroupingDto record : existingRecords) {
      if (record.getName().toUpperCase().equals(customAccountGroup.getName().toUpperCase())
          && (isCreate() || !record.getCagId().equals(customAccountGroup.getCagId()))) {
        Messages.addErrorMessage(null, "Name must be unique.");
        return;
      }
    }
    if (isCreate()) {
      // INSERT
      customAccountGroup.setDsId(dsFacade.getDataSubmitterByUserId(userBean.getUserId()));
      customAccountGroup.setEffDt(new Date());
      customAccountGroup.setUserCreated(userBean.getUserName());
      customAccountGroup.setDateCreated(new Date());
      customAccountGroup.setUserModified(userBean.getUserName());
      customAccountGroup.setDateModified(new Date());
      long newId = cagFacade.createCustomAccountMap(customAccountGroup);
      customAccountGroup.setCagId(newId);
    } else {
      // UPDATE
      customAccountGroup.setUserModified(userBean.getUserName());
      customAccountGroup.setDateModified(new Date());
      cagFacade.updateCustomAccountMap(customAccountGroup);
    }
    Messages.addInfoMessage("form", "Custom Account Map successfully saved.");
  }

  /**
   * Delete this Custom Account Map
   *
   * @return String
   */
  public String deleteCustomAccountMap() {
    cagFacade.deleteCustomAccountMap(customAccountGroup, userBean.getUserName());
    Messages.addInfoMessage(null, "Custom Account successfully deleted.");
    Navigation.redirect(MAINTAIN_MAPPINGS_URL);
    return null;
  }

  /**
   * Duplicate this Custom Account Map
   *
   * @return String
   */
  public String duplicateCustomAccountMap() {
    List<CustomAccountGroupingDto> existingRecords =
        cagFacade.getAllCustomAccountGroupingsSummary(
            customAccountGroup.getFiscalYear().getFiscalYear(), userBean.getHealthAuthority());
    for (CustomAccountGroupingDto record : existingRecords) {
      if (record.getName().toUpperCase().equals(duplicateName.toUpperCase())) {
        Messages.addErrorMessage(null, "Duplicate name must be unique.");
        return null;
      }
    }
    cagFacade.duplicateCustomAccountMap(
        customAccountGroup.getCagId(), duplicateName, userBean.getUserName());
    Messages.addInfoMessage(null, "Custom Account successfully duplicated.");
    Navigation.redirect(MAINTAIN_MAPPINGS_URL);
    return null;
  }

  /** Converter for the account number autocomplete control */
  private transient Converter<MiscoaAccountDto> accountConverter =
      new Converter<MiscoaAccountDto>() {
        @Override
        public MiscoaAccountDto getAsObject(FacesContext fc, UIComponent uic, String string) {
          if (string != null) {
            List<MiscoaAccountDto> allItems = getAllAccounts();
            for (MiscoaAccountDto or : allItems) {
              if (string.startsWith(or.getAccountNumber())) {
                return or;
              }
            }
          }
          return null;
        }

        @Override
        public String getAsString(FacesContext fc, UIComponent uic, MiscoaAccountDto account) {
          return account.toString();
        }
      };

  private List<MiscoaAccountDto> getAllAccounts() {
    List<MiscoaAccountDto> allItems = new ArrayList<>();
    if (selectedAccount.getFsDataType() == null) {
      allItems = primaryAccounts;
    } else if ("F".equals(selectedAccount.getFsDataType())) {
      allItems = secondaryFinancialAccounts;
    } else if ("S".equals(selectedAccount.getFsDataType())) {
      allItems = secondaryStatisticalAccounts;
    }
    return allItems;
  }

  /**
   * Autocomplete for the MIS Account
   *
   * @param query String
   * @return List
   */
  public List<MiscoaAccountDto> autocompleteMisAccount(String query) {
    List<MiscoaAccountDto> allItems = getAllAccounts();
    List<MiscoaAccountDto> out = new ArrayList<>();
    for (MiscoaAccountDto item : allItems) {
      if (query == null
          || "".equals(query)
          || item.getAccountNumber().toUpperCase().contains(query.toUpperCase())) {
        out.add(item);
      }
    }
    Collections.sort(out);
    return out;
  }

  public void selectRow() {
    selectedAccount.setMiscoaAccount(
        accountConverter.getAsObject(null, null, selectedAccount.getAcctNumber()));
  }

  /** Clear out the account number when we change account type */
  public void onChangeAccountType() {
    selectedAccount.setCaType(selectedAccount.getFsDataType() == null ? "GLPA" : "GLSA");
    selectedAccount.setAcctNumber(null);
    selectedAccount.setAcctName(null);
    selectedAccount.setPrmyAcctId(null);
    selectedAccount.setScndryAcctId(null);
    selectedAccount.setMiscoaAccount(null);
  }

  /** Lookup account name when we change the account number */
  public void onAutoComplete() {
    selectedAccount.setAcctNumber(selectedAccount.getMiscoaAccount().getAccountNumber());
    selectedAccount.setAcctName(selectedAccount.getMiscoaAccount().getAccountName());
    selectedAccount.setReviewFlag("N");
  }

  /** Makes sure our GL Account number is unique */
  public boolean validateUniqueAccount() {
    for (CustomAccountDto account : customAccountGroup.getCustomAccounts()) {
      if (account.getCaType().equals(selectedAccount.getCaType())
          && account
              .getGeneralLedgerAcctNumber()
              .equals(selectedAccount.getGeneralLedgerAcctNumber())
          && account != selectedAccount) {
        Messages.addErrorMessage("form", "GL Account must be unique");
        return false;
      }
    }
    return true;
  }

  /** Event handler for saving the current account */
  public void saveAccount() {
    if (!validateUniqueAccount()) {
      return;
    }
    try {
      // populate the ID on the linked account
      List<MiscoaAccountDto> allItems = getAllAccounts();
      if ("GLPA".equals(selectedAccount.getCaType())) {
        for (MiscoaAccountDto item : allItems) {
          if (item.getAccountNumber().equals(selectedAccount.getPrmryAcctNumber())) {
            selectedAccount.setPrmyAcctId(item.getAccountId());
          }
        }
      } else if ("GLSA".equals(selectedAccount.getCaType())) {
        for (MiscoaAccountDto item : allItems) {
          if (item.getAccountNumber().equals(selectedAccount.getScndryAcctNumber())) {
            selectedAccount.setScndryAcctId(item.getAccountId());
          }
        }
      }

      // perform save
      if (selectedAccount.getCaId() != null && selectedAccount.getCaId() > 0) {
        selectedAccount.setDateModified(new Date());
        selectedAccount.setUserModified(userBean.getUserName());
        caFacade.updateCustomAccount(selectedAccount);
      } else {
        selectedAccount.setEffDt(new Date());
        selectedAccount.setDateCreated(new Date());
        selectedAccount.setUserCreated(userBean.getUserName());
        selectedAccount.setDateModified(new Date());
        selectedAccount.setUserModified(userBean.getUserName());
        selectedAccount.setCagId(customAccountGroup.getCagId());

        Long caId = caFacade.createCustomAccount(selectedAccount);
        selectedAccount.setCaId(caId);
        customAccountGroup.getCustomAccounts().add(selectedAccount);
      }
      Messages.addInfoMessage("form", "Custom Account successfully saved.");
    } catch (Throwable e) {
      while (e.getCause() != null) {
        e = e.getCause();
      }
      // Mark as failed so we don't close the popup
      Messages.addErrorMessage("form", e.getMessage());
    }
  }

  /** Event handler for deleting the current account */
  public void deleteAccount() {
    selectedAccount.setDateModified(new Date());
    selectedAccount.setUserModified(userBean.getUserName());
    caFacade.deleteCustomAccount(selectedAccount);
    customAccountGroup.getCustomAccounts().remove(selectedAccount);

    // If we have filtered the table, remove from filter collection as well
    if (filteredCustomAccounts != null) {
      filteredCustomAccounts.remove(selectedAccount);
    }

    Messages.addInfoMessage("form", "Custom Account successfully deleted.");
  }

  /** Event handler for clearing the selected account */
  public void clearAccount() {
    if (selectedAccount != null && selectedAccount.getCaId() != null) {
      // undo our edits
      CustomAccountDto refreshed = caFacade.getCustomAccount(selectedAccount.getCaId());
      // Need to set types first so setters go to correct field
      selectedAccount.setCaType(refreshed.getCaType());
      selectedAccount.setFsDataType(refreshed.getFsDataType());
      selectedAccount.setReviewFlag(refreshed.getReviewFlag());
      selectedAccount.setAcctName(refreshed.getAcctName());
      selectedAccount.setAcctNumber(refreshed.getAcctNumber());
      selectedAccount.setMiscoaAccount(
          accountConverter.getAsObject(null, null, selectedAccount.getAcctNumber()));
      selectedAccount.setGeneralLedgerAcctNumber(refreshed.getGeneralLedgerAcctNumber());
      selectedAccount.setIgnoreFlag(refreshed.getIgnoreFlag());
      selectedAccount.setToggleSignFlag(refreshed.getToggleSignFlag());
    }
    selectedAccount = new CustomAccountDto();
    selectedAccount.setCaType("GLPA");
  }
}
