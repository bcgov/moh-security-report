/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.beans.administration;

import ca.bc.gov.health.hamis.beans.common.Messages;
import ca.bc.gov.health.hamis.beans.session.UserBean;
import ca.bc.gov.health.hamis.dto.DataQualityProviderTypeDto;
import ca.bc.gov.health.hamis.dto.ProviderTypeDto;
import ca.bc.gov.health.hamis.service.IDataQualityProviderTypeFacade;
import ca.bc.gov.health.hamis.service.IFiscalYearFacade;
import ca.bc.gov.health.hamis.service.IMiscoaAccountFacade;
import ca.bc.gov.health.hamis.service.IProviderTypeFacade;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import lombok.Getter;
import lombok.Setter;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Backing bean for the data quality rules page
 *
 * @author greg.perkins
 */
@Named("DataQualityRulesBean")
@ViewScoped
@Getter
@Setter
public class DataQualityRulesBean implements Serializable {

  private static final long serialVersionUID = 1860014625627800176L;

  /** Log instance */
  private static final Logger LOG = LogManager.getLogger(DataQualityRulesBean.class);

  @Inject private UserBean userBean;

  /* Facade instances */
  @EJB private IDataQualityProviderTypeFacade dqFacade;
  @EJB private IProviderTypeFacade ptFacade;
  @EJB private IFiscalYearFacade fyFacade;
  @EJB private IMiscoaAccountFacade accountFacade;

  /* Selected droplist values */
  private String fiscalYear;
  private Long providerType;

  /* Provider Type droplist values */
  private List<SelectItem> providerTypes;

  /* List of rules filtered by droplists */
  private List<DataQualityProviderTypeDto> rules;

  /* Selected rule from the table */
  private DataQualityProviderTypeDto selectedRule;

  /** Initialize this bean using the current fiscal year */
  @PostConstruct
  public void init() {
    LOG.debug("init");
    fiscalYear = fyFacade.getCurrentFiscalYear().getFiscalYear();
    List<ProviderTypeDto> pts = ptFacade.getProviderTypesByFiscalYearForDroplist(fiscalYear);
    Collections.sort(pts);
    providerTypes = new ArrayList<>();
    for (ProviderTypeDto pt : pts) {
      providerTypes.add(pt.toSelectItem());
    }
    if (providerTypes.size() > 0) {
      providerType = (Long) providerTypes.get(0).getValue();
    }
    filterRules();
  }

  /** Select a new provider type */
  public void onProviderTypeChange() {
    LOG.debug("onProviderTypeChange");
    filterRules();
  }

  /** Create a blank rule for editing */
  public void createRule() {
    LOG.debug("createRule");
    selectedRule = new DataQualityProviderTypeDto();
    selectedRule.setPtId(providerType);
    selectedRule.setFiscalYear(fiscalYear);
  }

  /** Cancel edit */
  public void cancel() {
    LOG.debug("cancel");
    filterRules();
    selectedRule = new DataQualityProviderTypeDto();
  }

  /** Deletes a record */
  public void delete() {
    LOG.debug("delete");
    dqFacade.deleteDataQualityRule(selectedRule);
    filterRules();
    selectedRule = new DataQualityProviderTypeDto();
  }

  /** Saves the current record */
  public void saveRule() {
    LOG.debug("saveRule");
    boolean passedValidation = true;
    if (!accountFacade.isValidPrimaryAccount(selectedRule.getPrimAcctDefn(), fiscalYear)) {
      passedValidation = false;
      Messages.addErrorMessage(null, Messages.getMessageForKey("dataQuality.primaryInvalid"));
    }
    if (!accountFacade.isValidSecondaryAccount(selectedRule.getScndAcctDefn(), fiscalYear)) {
      passedValidation = false;
      Messages.addErrorMessage(null, Messages.getMessageForKey("dataQuality.secondaryInvalid"));
    }
    if (dqFacade.isExistingDataQualityRule(selectedRule)) {
      passedValidation = false;
      Messages.addErrorMessage(null, Messages.getMessageForKey("dataQuality.ruleAlreadyExists"));
    }
    if (!passedValidation) {
      return;
    }
    selectedRule.setDateModified(new Date());
    selectedRule.setUserModified(userBean.getUserName());
    if (selectedRule.getDqptId() == null) {
      selectedRule.setDateCreated(new Date());
      selectedRule.setUserCreated(userBean.getUserName());
      dqFacade.createDataQualityRule(selectedRule);
    } else {
      dqFacade.updateDataQualityRule(selectedRule);
    }

    filterRules();
    Messages.addInfoMessage(null, Messages.getMessageForKey("dataQuality.saveSuccessful"));
  }

  /** Query the DB for rules based on search criteria */
  private void filterRules() {
    LOG.debug("filterRules");
    if (fiscalYear != null && providerType != null) {
      rules = dqFacade.getDataQualityRulesByFiscalYearAndProviderType(fiscalYear, providerType);
    }
  }
}
