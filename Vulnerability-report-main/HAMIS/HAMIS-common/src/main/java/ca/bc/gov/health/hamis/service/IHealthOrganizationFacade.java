/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.service;

import ca.bc.gov.health.hamis.dto.HealthOrganizationDto;
import ca.bc.gov.health.hamis.dto.OrganizationRelationshipDto;
import jakarta.ejb.Local;
import java.util.List;

/**
 * Facade class for Health Organizations
 *
 * @author greg.perkins
 */
@Local
public interface IHealthOrganizationFacade {

  public enum HO_DELETION_VALIDATION_RESULTS {
    POSITIVE(0),
    NEGATIVE_HA(-1),
    NEGATIVE_HSP(-2);
    private final int value;

    HO_DELETION_VALIDATION_RESULTS(final int newValue) {
      value = newValue;
    }

    public int getValue() {
      return value;
    }
  }

  public enum HO_CREATE_NEGATIVE_RESULTS {
    DUPLICATE_SPID(-1L),
    DUPLICATE_HA_NUMBER(-2L);
    private final long value;

    HO_CREATE_NEGATIVE_RESULTS(final long newValue) {
      value = newValue;
    }

    public long getValue() {
      return value;
    }
  }

  /**
   * Get a list of distinct HSPs for a given HO, Year and Period
   *
   * @param hoId int
   * @param fiscalYear String
   * @return List<HealthOrganizationDto>
   */
  public List<HealthOrganizationDto> getHspList(int hoId, String fiscalYear);

  /**
   * Get the details for a single Health Organization
   *
   * @param hoId int
   * @return HealthOrganizationDto
   */
  public HealthOrganizationDto getHealthOrganization(Long hoId);

  /**
   * Gets all active Health Organizations
   *
   * @return HealthOrganizationDto
   */
  public List<HealthOrganizationDto> getAllActiveHealthOrganizations();

  /**
   * Gets all active Health Authorities
   *
   * @return List of Health Organization DTOs
   */
  public List<HealthOrganizationDto> getAllActiveHealthAuthorities();

  /**
   * Creates a new Health Organization along with a new relation to the existing Health Organization
   *
   * @param hoDto
   * @param relationshipDto
   * @return long Generated PK
   */
  public long createHealthOrganization(
      HealthOrganizationDto hoDto, OrganizationRelationshipDto relationshipDto);

  /**
   * Performs the update the Health Organization record
   *
   * @param hoDto Health Organization to be updated
   * @return true if update was successful, false otherwise
   */
  public boolean updateHealthOrganization(HealthOrganizationDto hoDto);

  /**
   * Performs the update the Health Organization record along with deletion of the old and creation
   * of a new relationship (applies to HSP)
   *
   * @param hoDto Health Organization to be updated
   * @param newRelationshipDto Organization Relationship to be created
   * @param oldRelationshipDtoId Organization Relationship to be expired
   * @return true if update was successful, false otherwise
   */
  public boolean updateHealthOrganizationWithRelationships(
      HealthOrganizationDto hoDto,
      OrganizationRelationshipDto newRelationshipDto,
      long oldRelationshipDtoId);

  /**
   * Soft deletion of Health Organization
   *
   * @param hoId ID of expired Health Organization
   * @param userName User Name
   * @return true if deletion was successful, false otherwise
   */
  public boolean deleteHealthOrganization(long hoId, String userName);

  /**
   * Checks if the Health Organization can be deleted according to the algorithm approved by the
   * client.
   *
   * @param hoId ID of Health Organization to be deleted
   * @return
   *     <ul>
   *       <li>0 if Health Organization can be deleted
   *       <li>-1 if Health Organization cannot be deleted and the reason is of Health Authority
   *           nature
   *       <li>-2 if Health Organization cannot be deleted and the reason is of Health Service
   *           nature
   *     </ul>
   */
  public int validateHODeletion(long hoId);

  /**
   * Check if active Health Authority with provided number and ID different from provided already
   * exists.
   *
   * @param haNumber Health Authority Number
   * @param hoId Health Authority to bypass at check
   * @return true if an active Health Authority with provided Number exists
   */
  public boolean healthAuthorityNumberExists(String haNumber, Long hoId);

  /**
   * Check if active Health Organization with provided SP ID and ID different from provided already
   * exists.
   *
   * @param spId Service Provider Id
   * @param hoId Health Organization to bypass at check
   * @return true if an active Health Organization with provided SP ID exists
   */
  public boolean serviceProviderIdExists(String spId, Long hoId);
}
