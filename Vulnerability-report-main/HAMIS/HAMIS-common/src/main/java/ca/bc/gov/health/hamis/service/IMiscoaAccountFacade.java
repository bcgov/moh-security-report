/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hamis.service;

import ca.bc.gov.health.hamis.dto.MiscoaAccountDto;
import ca.bc.gov.health.hamis.dto.PrimaryAccountDto;
import ca.bc.gov.health.hamis.dto.SecondaryAccountDto;
import jakarta.ejb.Local;
import java.util.List;

/**
 * Facade class for Miscoa primary / secondary accounts
 *
 * @author greg.perkins
 */
@Local
public interface IMiscoaAccountFacade {

  /**
   * Returns the list of top-level primary accounts for a given fiscal year
   *
   * @param fiscalYear String
   * @return List<MiscoaAccountDto>
   */
  List<MiscoaAccountDto> getTopLevelPrimaryAccounts(String fiscalYear);

  /**
   * Returns the list of non top-level primary accounts for a given fiscal year
   *
   * @param fiscalYear String
   * @return List<MiscoaAccountDto>
   */
  List<MiscoaAccountDto> getChildPrimaryAccounts(String fiscalYear);

  /**
   * Get the primary accounts as droplist items
   *
   * @return List<SelectItem>
   */
  List<MiscoaAccountDto> getPrimaryAccounts(String fiscalYear);

  /**
   * Get the secondary accounts as droplist items
   *
   * @param fiscalYear String
   * @param fsDataType String
   * @return List<SelectItem>
   */
  List<MiscoaAccountDto> getSecondaryAccounts(String fiscalYear, String fsDataType);

  /**
   * Returns the list of top-level secondary accounts for a given fiscal year & data type
   *
   * @param fiscalYear String
   * @param fsDataType String
   * @return List<MiscoaAccountDto>
   */
  List<MiscoaAccountDto> getTopLevelSecondaryAccounts(String fiscalYear, String fsDataType);

  /**
   * Returns the list of non top-level secondary accounts for a given fiscal year & data type
   *
   * @param fiscalYear String
   * @param fsDataType String
   * @return List<MiscoaAccountDto>
   */
  List<MiscoaAccountDto> getChildSecondaryAccounts(String fiscalYear, String fsDataType);

  /**
   * Queries for a Primary Account
   *
   * @param mpaId long
   * @return PrimaryAccountDto
   */
  PrimaryAccountDto getPrimaryAccount(Long mpaId);

  /**
   * Creates a new Primary Account
   *
   * @param dto PrimaryAccountDto
   * @return long - the generated ID
   */
  long createPrimaryAccount(PrimaryAccountDto dto);

  /**
   * Updates an existing Primary Account
   *
   * @param dto PrimaryAccountDto
   */
  void updatePrimaryAccount(PrimaryAccountDto dto);

  /**
   * Deletes an existing Primary Account
   *
   * @param dto PrimaryAccountDto
   */
  void deletePrimaryAccount(PrimaryAccountDto dto);

  /**
   * Queries for a Secondary Account
   *
   * @param msaId long
   * @return SecondaryAccountDto
   */
  SecondaryAccountDto getSecondaryAccount(Long msaId);

  /**
   * Creates a new Secondary Account
   *
   * @param dto SecondaryAccountDto
   * @return long - the generated ID
   */
  long createSecondaryAccount(SecondaryAccountDto dto);

  /**
   * Updates an existing Secondary Account
   *
   * @param dto SecondaryAccountDto
   */
  void updateSecondaryAccount(SecondaryAccountDto dto);

  /**
   * Deletes an existing Secondary Account
   *
   * @param dto SecondaryAccountDto
   */
  void deleteSecondaryAccount(SecondaryAccountDto dto);

  /**
   * Determines if an account is in use
   *
   * @param primaryAccount PrimaryAccountDto
   * @return boolean
   */
  boolean accountInUse(PrimaryAccountDto primaryAccount);

  /**
   * Determines if an account is in use
   *
   * @param secondaryAccount SecondaryAccountDto
   * @return boolean
   */
  boolean accountInUse(SecondaryAccountDto secondaryAccount);

  /**
   * Determines if an account matching the pattern exists
   *
   * @param pattern String
   * @param fiscalYear String
   * @return boolean
   */
  boolean isValidPrimaryAccount(String pattern, String fiscalYear);
  /**
   * Determines if an account matching the pattern exists
   *
   * @param pattern String
   * @param fiscalYear String
   * @return boolean
   */
  boolean isValidSecondaryAccount(String pattern, String fiscalYear);
}
