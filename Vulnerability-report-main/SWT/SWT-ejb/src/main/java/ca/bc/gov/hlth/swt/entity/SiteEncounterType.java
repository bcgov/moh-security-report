/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.entity;

import jakarta.persistence.Column;
import jakarta.persistence.EmbeddedId;
import jakarta.persistence.Entity;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import java.io.Serializable;
import java.util.Collection;
import java.util.Date;

/**
 *
 * @author greg.perkins
 */
@Entity
@Table(name = "SWT_SITE_ENCOUNTER_TYPE")
@NamedQueries({
    @NamedQuery(name = "SiteEncounterType.findBySiteId", query = "SELECT s FROM SiteEncounterType s WHERE s.siteEncounterTypePK.siteId = :siteId"),
    @NamedQuery(name = "SiteEncounterType.findByRollupEncounterTypeId", query = "SELECT s FROM SiteEncounterType s WHERE s.siteEncounterTypePK.rollupEncounterTypeId = :rollupEncounterTypeId"),
    @NamedQuery(name = "SiteEncounterType.findByCreatedByNm", query = "SELECT s FROM SiteEncounterType s WHERE s.createdByNm = :createdByNm"),
    @NamedQuery(name = "SiteEncounterType.findByCreatedOnDtm", query = "SELECT s FROM SiteEncounterType s WHERE s.createdOnDtm = :createdOnDtm"),
    @NamedQuery(name = "SiteEncounterType.findByLastModifiedByNm", query = "SELECT s FROM SiteEncounterType s WHERE s.lastModifiedByNm = :lastModifiedByNm"),
    @NamedQuery(name = "SiteEncounterType.findByLastModifiedOnDtm", query = "SELECT s FROM SiteEncounterType s WHERE s.lastModifiedOnDtm = :lastModifiedOnDtm"),
    @NamedQuery(name = "SiteEncounterType.findByStatelessTransactionNbr", query = "SELECT s FROM SiteEncounterType s WHERE s.statelessTransactionNbr = :statelessTransactionNbr")})
public class SiteEncounterType implements Serializable {

    private static final long serialVersionUID = 1L;
    @EmbeddedId
    protected SiteEncounterTypePK siteEncounterTypePK;
    @Column(name = "CREATED_BY_NM", nullable = false)
    private String createdByNm;
    @Column(name = "CREATED_ON_DTM", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_BY_NM", nullable = false)
    private String lastModifiedByNm;
    @Column(name = "LAST_MODIFIED_ON_DTM", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Column(name = "STATELESS_TRANSACTION_NBR", nullable = false)
    private long statelessTransactionNbr;
    @OneToMany(mappedBy = "siteEncounterType")
    private Collection<SiteStatistic> siteStatisticCollection;
    @JoinColumn(name = "ROLLUP_ENCOUNTER_TYPE_ID", referencedColumnName = "ROLLUP_ENCOUNTER_TYPE_ID", insertable = false, updatable = false)
    @ManyToOne
    private RollupEncounterType rollupEncounterType;
    @JoinColumn(name = "SITE_ID", referencedColumnName = "SITE_ID", insertable = false, updatable = false)
    @ManyToOne
    private Site site;

    public SiteEncounterType() {
    }

    public SiteEncounterType(SiteEncounterTypePK siteEncounterTypePK) {
        this.siteEncounterTypePK = siteEncounterTypePK;
    }

    public SiteEncounterType(SiteEncounterTypePK siteEncounterTypePK, String createdByNm, Date createdOnDtm, String lastModifiedByNm, Date lastModifiedOnDtm, long statelessTransactionNbr) {
        this.siteEncounterTypePK = siteEncounterTypePK;
        this.createdByNm = createdByNm;
        this.createdOnDtm = createdOnDtm;
        this.lastModifiedByNm = lastModifiedByNm;
        this.lastModifiedOnDtm = lastModifiedOnDtm;
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public SiteEncounterType(long siteId, long rollupEncounterTypeId, String adult) {
        this.siteEncounterTypePK = new SiteEncounterTypePK(siteId, rollupEncounterTypeId, adult);
    }

    public SiteEncounterTypePK getSiteEncounterTypePK() {
        return siteEncounterTypePK;
    }

    public void setSiteEncounterTypePK(SiteEncounterTypePK siteEncounterTypePK) {
        this.siteEncounterTypePK = siteEncounterTypePK;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public Collection<SiteStatistic> getSiteStatisticCollection() {
        return siteStatisticCollection;
    }

    public void setSiteStatisticCollection(Collection<SiteStatistic> siteStatisticCollection) {
        this.siteStatisticCollection = siteStatisticCollection;
    }

    public RollupEncounterType getRollupEncounterType() {
        return rollupEncounterType;
    }

    public void setRollupEncounterType(RollupEncounterType rollupEncounterType) {
        this.rollupEncounterType = rollupEncounterType;
    }

    public Site getSite() {
        return site;
    }

    public void setSite(Site site) {
        this.site = site;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (siteEncounterTypePK != null ? siteEncounterTypePK.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof SiteEncounterType)) {
            return false;
        }
        SiteEncounterType other = (SiteEncounterType) object;
        if ((this.siteEncounterTypePK == null && other.siteEncounterTypePK != null) || (this.siteEncounterTypePK != null && !this.siteEncounterTypePK.equals(other.siteEncounterTypePK))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.hlth.swt.entity.SiteEncounterType[siteEncounterTypePK=" + siteEncounterTypePK + "]";
    }

}
