/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.session;

import ca.bc.gov.hlth.swt.entity.BodyImageMap;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

/**
 *
 * @author greg.perkins
 */
@Stateless
public class BodyImageMapFacade implements BodyImageMapFacadeLocal {

    @PersistenceContext(unitName = "SWT-ejbPU")
    private EntityManager em;
//    @EJB
//    private ProcedureGroupFacadeLocal pgFacade;

    public void create(BodyImageMap bodyImageMap) {
        em.persist(bodyImageMap);
    }

    public void edit(BodyImageMap bodyImageMap) {
        em.merge(bodyImageMap);
    }

    public void remove(BodyImageMap bodyImageMap) {
        em.remove(em.merge(bodyImageMap));
    }

    public BodyImageMap find(Object id) {
        return em.find(ca.bc.gov.hlth.swt.entity.BodyImageMap.class, id);
    }

    public List<BodyImageMap> findAll(String adult) {
        StringBuilder query = new StringBuilder();
        query.append("select o.*, i.INTERVENTION_TYPE_CD, I.INTERVENTION_TYPE_DSC, RP.PROCEDURE_GROUP_NM from ");
        query.append("SWT_Body_Image_Map o, ");
        query.append("SWT_PROCEDURE_GROUP p , ");
        query.append("SWT_ROLLUP_PROCEDURE_GROUP rp, ");
        query.append("SWT_SITE_PROCEDURE_GROUP sp,  ");
        query.append("SWT_INTERVENTION_TYPE i ");
        query.append("WHERE ");
        query.append("o.PROCEDURE_GROUP_ID = p.procedure_group_id ");
        query.append("AND I.INTERVENTION_TYPE_CD = P.INTERVENTION_TYPE_CD ");
        query.append("and p.procedure_group_id = rp.PROCEDURE_GROUP_ID ");
        query.append("and sp.ADULT = ?1 ");
        query.append("AND RP.ROLLUP_PROCEDURE_GROUP_ID = SP.ROLLUP_PROCEDURE_GROUP_ID ");
        query.append("AND sp.site_id = (select max(site_id) from swt_site s where S.PUBLISHED_YN = 'Y') ");
        query.append("order by o.body_Area_Txt, o.image_File_Nm, p.intervention_Type_cd, RP.PROCEDURE_GROUP_NM ");
        return em.createNativeQuery(query.toString(), BodyImageMap.class)
                .setParameter(1, adult)
                .getResultList();
    }

    public Map buildBodySearch(String adult) {
        List<BodyImageMap> all = findAll(adult);
        Map bodyParts = new TreeMap();
        for (Iterator<BodyImageMap> it = all.iterator(); it.hasNext();) {
            BodyImageMap bodyImageMap = it.next();
            String part = bodyImageMap.getBodyImageMapPK().getBodyAreaTxt();
            if (bodyParts.get(part) == null) {
                bodyParts.put(part, new TreeMap());
            }
//            ProcedureGroup pg = pgFacade.find(bodyImageMap.getBodyImageMapPK().getProcedureGroupId());
            Map types = (Map) bodyParts.get(part);

            if (adult.equalsIgnoreCase("Y")) {
                if (types.get(bodyImageMap.getImageFileNm()) == null) {
                    types.put(bodyImageMap.getImageFileNm(), new ArrayList());
                }
            } else {

                if (bodyImageMap.getPedImageFileNm() != null) {
                    if (types.get(bodyImageMap.getPedImageFileNm()) == null) {
                        types.put(bodyImageMap.getPedImageFileNm(), new ArrayList());
                    }
                } else {
                    if (types.get(bodyImageMap.getImageFileNm()) == null) {
                        types.put(bodyImageMap.getImageFileNm(), new ArrayList());
                    }
                }
            }

            List procs = null;
            if (adult.equalsIgnoreCase("Y")) {
                procs = (List) types.get(bodyImageMap.getImageFileNm());
            } else {
                if (bodyImageMap.getPedImageFileNm() != null) {
                    procs = (List) types.get(bodyImageMap.getPedImageFileNm());
                } else {
                    procs = (List) types.get(bodyImageMap.getImageFileNm());
                }
            }

//            BodySearchProcedure bsp = new BodySearchProcedure();
//            bsp.setBody(bodyImageMap);
//            bsp.setInterventionType(pg.getInterventionTypeCd());
//            bsp.setProcedure(pg);
            procs.add(bodyImageMap);
        }
        return bodyParts;
    }
}
