/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.session;

import ca.bc.gov.hlth.swt.to.CurrentPriorityAreaDSWTStatisticsTo;
import ca.bc.gov.hlth.swt.to.CurrentPriorityAreaEmergencyWTStatisticsTo;
import ca.bc.gov.hlth.swt.to.CurrentPriorityAreaPGNWTStatisticsTo;
import ca.bc.gov.hlth.swt.to.CurrentPriorityAreaWTStatisticsTo;
import ca.bc.gov.hlth.swt.to.CurrentWTStatisticsTo;
import ca.bc.gov.hlth.swt.to.DataSourceLongTermWTSec2To;
import ca.bc.gov.hlth.swt.to.LongTermWTSec1To;
import ca.bc.gov.hlth.swt.to.LongTermWTSec2To;
import ca.bc.gov.hlth.swt.to.MonthCompareProGroupTo;
import ca.bc.gov.hlth.swt.to.MonthCompareSpecialtyTo;
import ca.bc.gov.hlth.swt.to.OrderedLongTermWTSec1To;
import ca.bc.gov.hlth.swt.to.PGNLongTermWTSec2To;
import ca.bc.gov.hlth.swt.to.PriorityLongTermWTSec2To;
import ca.bc.gov.hlth.swt.to.WTByPriorityAreaTo;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/**
 *
 * @author Kuan.Fan
 */
@Stateless
public class MediaProvincialWaitTimesFacade implements MediaProvincialWaitTimesFacadeLocal {

    @PersistenceContext(unitName = "SWT-ejbPU")
    private EntityManager em;

    public List<CurrentWTStatisticsTo> findCurrentWaitTimes(String siteId, String adult) {
        return em.createNativeQuery("SELECT * FROM SWT_CURRENT_WT_STATISTICS_VW WHERE SITE_ID=?1 and adult=?2", CurrentWTStatisticsTo.class)
                .setParameter(1, Long.valueOf(siteId))
                .setParameter(2, adult)
                .getResultList();
    }

    /**
     * List1 String dataSource List list2 String procedureGroupNm List list of CurrentPriorityAreaWTStatisticsTo
     *
     * @param siteId
     * @return
     */
    public List<CurrentPriorityAreaDSWTStatisticsTo> findCurrentPriorityAreaDSWTStatisticsTos(String siteId, String adult) {
        String query = "SELECT * FROM SWT_WT_BY_PRIORITY_AREA_VW WHERE SITE_ID=?1 AND ADULT=?2";
        List<CurrentPriorityAreaWTStatisticsTo> originalTos = em.createNativeQuery(query, CurrentPriorityAreaWTStatisticsTo.class)
                .setParameter(1, Long.valueOf(siteId))
                .setParameter(2, adult)
                .getResultList();

        String query2 = "SELECT * FROM SWT_WT_BY_PRIORITY_AREA_EMR_VW WHERE SITE_ID=?1 AND ADULT=?2";

        // Would have lovd to use the commented out approach, 
        // but egenrating id using rownum is cauing the view 
        // to take a very long time to run; therefore, I opted
        // to deal with raw values
        //List<CurrentPriorityAreaEmergencyWTStatisticsTo> emrOriginalTos = em.createNativeQuery(sb.toString(), CurrentPriorityAreaEmergencyWTStatisticsTo.class).getResultList();
        List emrOriginalTos = em.createNativeQuery(query2)
                .setParameter(1, Long.valueOf(siteId))
                .setParameter(2, adult)
                .getResultList();

        List<CurrentPriorityAreaDSWTStatisticsTo> list1 = null;
        List<CurrentPriorityAreaPGNWTStatisticsTo> list2 = null;

        originalTos.addAll(convertToCurrentPriorityAreaWTStatisticsTo(emrOriginalTos));

        list1 = this.prepareCurrentPriorityList1(originalTos);

        if (emrOriginalTos != null && !emrOriginalTos.isEmpty()) {
            Collections.sort(list1, new Comparator<CurrentPriorityAreaDSWTStatisticsTo>() {
                @Override
                public int compare(CurrentPriorityAreaDSWTStatisticsTo o1, CurrentPriorityAreaDSWTStatisticsTo o2) {
                    return o1.getSprData().compareTo(o2.getSprData());
                }
            });

        }
        if (list1 != null && list1.size() > 0) {
            for (int i = 0; i < list1.size(); i++) {
                CurrentPriorityAreaDSWTStatisticsTo to1 = (CurrentPriorityAreaDSWTStatisticsTo) list1.get(i);
                String dataSource = to1.getDataSource();
                list2 = this.prepareCurrentPriorityList2(dataSource, originalTos);

                to1.setCurrentPriorityAreaPGNWTStatisticsTos(list2);
            }
        }

        return list1;

    }

    public List<OrderedLongTermWTSec1To> findOrderedLongTermWTSec1(String siteId, String adult) {
        String query = "SELECT * FROM SWT_WT_LONG_TERM_SEC1_VW WHERE SITE_ID=?1 AND ADULT=?2 AND PROCEDURE_GROUP_NM NOT IN ('Cataract Surgery','Hip Replacement','Knee Replacement') AND TO_DATE(SUBSTR(FISCAL_YR,0,4),'YYYY') > = SYSDATE -INTERVAL '4' YEAR";
        List<LongTermWTSec1To> longTermWTSec1Tos = em.createNativeQuery(query, LongTermWTSec1To.class)
                .setParameter(1, Long.valueOf(siteId))
                .setParameter(2, adult)
                .getResultList();
        if (longTermWTSec1Tos.size() < 3 && longTermWTSec1Tos.size() > 0) {
            query = "SELECT * FROM SWT_WT_LONG_TERM_SEC1_VW WHERE SITE_ID=?1 AND ADULT=?2 AND PROCEDURE_GROUP_NM NOT IN ('Cataract Surgery','Hip Replacement','Knee Replacement') AND TO_DATE(SUBSTR(FISCAL_YR,0,4),'YYYY') > = SYSDATE -INTERVAL '5' YEAR";
            longTermWTSec1Tos = em.createNativeQuery(query, LongTermWTSec1To.class)
                    .setParameter(1, Long.valueOf(siteId))
                    .setParameter(2, adult)
                    .getResultList();
        }
        List orderedLongTermWTSec1Tos = null;
        if (longTermWTSec1Tos != null && longTermWTSec1Tos.size() > 0) {
            Set prcedureGroupNmSet = new HashSet();
            orderedLongTermWTSec1Tos = new ArrayList();
            OrderedLongTermWTSec1To orderedLongTermWTSec1To = null;
            for (int i = 0; i < longTermWTSec1Tos.size(); i++) {
                LongTermWTSec1To tmpTo = (LongTermWTSec1To) longTermWTSec1Tos.get(i);
                if (prcedureGroupNmSet.add(tmpTo.getProcedureGroupNm())) {
                    //this is the first one
                    orderedLongTermWTSec1To = new OrderedLongTermWTSec1To();
                    orderedLongTermWTSec1To.setProcedureGroupNm(tmpTo.getProcedureGroupNm());
                    orderedLongTermWTSec1Tos.add(orderedLongTermWTSec1To);
                }
                orderedLongTermWTSec1To.add(tmpTo);
            }
        }
        return orderedLongTermWTSec1Tos;
    }

    /**
     *
     * list1 procedureGroupNm List list2 priority List -- list3
     *
     * @param siteId
     * @return
     */
    public List<DataSourceLongTermWTSec2To> findDataSourceLongTermWTSec2Tos(String siteId, String adult) {
        String query1 = "SELECT * FROM SWT_WT_LONG_TERM_SEC2_VW WHERE SITE_ID=?1 AND ADULT=?2 AND TO_DATE(SUBSTR(FISCAL_YR,0,4),'YYYY') > = SYSDATE -INTERVAL '4' YEAR AND PRIORITY_CD = 'Priority 3 (within 26 weeks)'";
        List<LongTermWTSec2To> originalList1 = em.createNativeQuery(query1, LongTermWTSec2To.class)
                .setParameter(1, Long.valueOf(siteId))
                .setParameter(2, adult)
                .getResultList();
        String query;
        if (originalList1.size() < 3 && originalList1.size() > 0) {
            query = "SELECT * FROM SWT_WT_LONG_TERM_SEC2_VW WHERE SITE_ID=?1 AND ADULT=?2 AND TO_DATE(SUBSTR(FISCAL_YR,0,4),'YYYY') > = SYSDATE -INTERVAL '5' YEAR";
        } else {
            query = "SELECT * FROM SWT_WT_LONG_TERM_SEC2_VW WHERE SITE_ID=?1 AND ADULT=?2 AND TO_DATE(SUBSTR(FISCAL_YR,0,4),'YYYY') > = SYSDATE -INTERVAL '4' YEAR";
        }
        List<LongTermWTSec2To> originalList = em.createNativeQuery(query, LongTermWTSec2To.class)
                .setParameter(1, Long.valueOf(siteId))
                .setParameter(2, adult)
                .getResultList();

        List<LongTermWTSec2To> list4 = null;
        List<PriorityLongTermWTSec2To> list3 = null;
        List<PGNLongTermWTSec2To> list2 = null;
        List<DataSourceLongTermWTSec2To> list1 = null;

        list1 = this.prepareList1(originalList);
        if (list1 != null && list1.size() > 0) {
            for (int i = 0; i < list1.size(); i++) {
                DataSourceLongTermWTSec2To obj1 = (DataSourceLongTermWTSec2To) list1.get(i);
                String dataSource = obj1.getDataSource();
                list2 = this.prepareList2(dataSource, originalList);
                obj1.setPgnLongTermWTSec2Tos(list2);
                if (list2 != null && list2.size() > 0) {
                    for (int j = 0; j < list2.size(); j++) {
                        PGNLongTermWTSec2To obj2 = (PGNLongTermWTSec2To) list2.get(j);
                        String procedureGroupNm = obj2.getProcedureGroupNm();
                        list3 = this.prepareList3(dataSource, procedureGroupNm, originalList);
                        obj2.setPriorityLongTermWTSec2Tos(list3);
                        if (list3 != null && list3.size() > 0) {
                            for (int k = 0; k < list3.size(); k++) {
                                PriorityLongTermWTSec2To obj3 = (PriorityLongTermWTSec2To) list3.get(k);
                                String priority = obj3.getPriority();
                                list4 = this.prepareList4(dataSource, procedureGroupNm, priority, originalList);
                                obj3.setLongTermWTSec2Tos(list4);
                            }
                        }
                    }
                }
            }
        }

        return list1;

    }

    public List<MonthCompareProGroupTo> findMonthCompareProGroupTos(String siteId) {
        return this.em.createNamedQuery("MonthCompareProGroupTo.findMonthCompareProGroupTos")
                .setParameter("siteId", Long.valueOf(siteId))
                .getResultList();
    }

    public List<MonthCompareSpecialtyTo> findMonthCompareSpecialtyTos(String siteId) {
        return this.em.createNamedQuery("MonthCompareSpecialtyTo.findMonthCompareSpecialtyTos")
                .setParameter("siteId", Long.valueOf(siteId))
                .getResultList();
    }

    public List<MonthCompareSpecialtyTo> findMonthCompareNonSprTos(String siteId) {
        return this.em.createNativeQuery("SELECT * FROM SWT_MONTH_COMPARE_NON_SPR_VW WHERE SITE_ID = ?1", MonthCompareSpecialtyTo.class)
                .setParameter(1, Long.valueOf(siteId))
                .getResultList();
    }

    private List<DataSourceLongTermWTSec2To> prepareList1(List<LongTermWTSec2To> longTermWTSec2Tos) {

        if (longTermWTSec2Tos != null && longTermWTSec2Tos.size() > 0) {
            List<DataSourceLongTermWTSec2To> list1 = new ArrayList();
            Set dataSourceSet = new HashSet();
            DataSourceLongTermWTSec2To obj = null;
            for (int i = 0; i < longTermWTSec2Tos.size(); i++) {
                LongTermWTSec2To longTermWTSec2To = (LongTermWTSec2To) longTermWTSec2Tos.get(i);
                if (dataSourceSet.add(longTermWTSec2To.getDataSource())) {
                    obj = new DataSourceLongTermWTSec2To();
                    obj.setDataSource(longTermWTSec2To.getDataSource());
                    list1.add(obj);
                }
            }
            return list1;
        } else {
            return null;
        }

    }

    private List<PGNLongTermWTSec2To> prepareList2(String dataSource, List<LongTermWTSec2To> longTermWTSec2Tos) {
        List<PGNLongTermWTSec2To> list2 = new ArrayList();
        Set procedureGroupNmSet = new HashSet();
        for (int i = 0; i < longTermWTSec2Tos.size(); i++) {
            LongTermWTSec2To longTermWTSec2To = (LongTermWTSec2To) longTermWTSec2Tos.get(i);
            if (longTermWTSec2To.getDataSource().equalsIgnoreCase(dataSource)) {
                if (procedureGroupNmSet.add(longTermWTSec2To.getProcedureGroupNm())) {
                    PGNLongTermWTSec2To pgnLongTermWTSec2To = new PGNLongTermWTSec2To();
                    pgnLongTermWTSec2To.setProcedureGroupNm(longTermWTSec2To.getProcedureGroupNm());
                    list2.add(pgnLongTermWTSec2To);
                }
            }
        }
        return list2;
    }

    private List<PriorityLongTermWTSec2To> prepareList3(String dataSource, String procedureGroupNm, List<LongTermWTSec2To> longTermWTSec2Tos) {
        List<PriorityLongTermWTSec2To> list3 = new ArrayList();
        Set dataSourceProcedureGroupNmSet = new HashSet();
        for (int i = 0; i < longTermWTSec2Tos.size(); i++) {
            LongTermWTSec2To longTermWTSec2To = (LongTermWTSec2To) longTermWTSec2Tos.get(i);
            if (longTermWTSec2To.getDataSource().equalsIgnoreCase(dataSource)
                    && longTermWTSec2To.getProcedureGroupNm().equalsIgnoreCase(procedureGroupNm)) {
                if (dataSourceProcedureGroupNmSet.add(longTermWTSec2To.getPriorityCd())) {
                    PriorityLongTermWTSec2To priorityLongTermWTSec2To = new PriorityLongTermWTSec2To();
                    priorityLongTermWTSec2To.setPriority(longTermWTSec2To.getPriorityCd());
                    list3.add(priorityLongTermWTSec2To);
                }
            }
        }
        return list3;
    }

    private List<LongTermWTSec2To> prepareList4(String dataSource, String procedureGroupNm, String priority, List<LongTermWTSec2To> longTermWTSec2Tos) {
        List<LongTermWTSec2To> list4 = new ArrayList();
        for (int i = 0; i < longTermWTSec2Tos.size(); i++) {
            LongTermWTSec2To longTermWTSec2To = (LongTermWTSec2To) longTermWTSec2Tos.get(i);
            if (longTermWTSec2To.getDataSource().equalsIgnoreCase(dataSource)
                    && longTermWTSec2To.getProcedureGroupNm().equalsIgnoreCase(procedureGroupNm)) {
                if (longTermWTSec2To.getPriorityCd() == null) {
                    if (priority == null) {
                        list4.add(longTermWTSec2To);
                    }
                } else if (longTermWTSec2To.getPriorityCd().equalsIgnoreCase(priority)) {
                    list4.add(longTermWTSec2To);
                }
            }
        }
        return list4;
    }

    private List<CurrentPriorityAreaDSWTStatisticsTo> prepareCurrentPriorityList1(List<CurrentPriorityAreaWTStatisticsTo> tos) {

        if (tos != null && tos.size() > 0) {
            List<CurrentPriorityAreaDSWTStatisticsTo> list1 = new ArrayList();
            Set dataSourceSet = new HashSet();
            CurrentPriorityAreaDSWTStatisticsTo obj = null;
            for (int i = 0; i < tos.size(); i++) {
                CurrentPriorityAreaWTStatisticsTo to = (CurrentPriorityAreaWTStatisticsTo) tos.get(i);
                if (dataSourceSet.add(to.getDataSource())) {
                    obj = new CurrentPriorityAreaDSWTStatisticsTo();
                    obj.setDataSource(to.getDataSource());
                    obj.setSprData(to.getNonSprYn());
                    list1.add(obj);
                }
            }
            return list1;
        } else {
            return null;
        }

    }

    private List<CurrentPriorityAreaWTStatisticsTo> convertToCurrentPriorityAreaWTStatisticsTo(List tos) {
        List<CurrentPriorityAreaWTStatisticsTo> converted = new ArrayList<>();
        CurrentPriorityAreaWTStatisticsTo temp;

        Object[] to;
        for (int i = 0; i < tos.size(); i++) {

            to = (Object[]) tos.get(i);

            temp = new CurrentPriorityAreaWTStatisticsTo();
            temp.setSiteId(String.valueOf(to[0]));
            temp.setNonSprYn(String.valueOf(to[1]));
            temp.setDataSource(String.valueOf(to[2]));
            temp.setProcedureGroupNm(String.valueOf(to[5]));
            temp.setProceduresPerformedNbr(Long.valueOf(String.valueOf(to[6])));
            temp.setPctCompletedWithinTgt(Double.valueOf(String.valueOf(to[7])));

            converted.add(temp);
        }

        return converted;
    }

    private List<CurrentPriorityAreaPGNWTStatisticsTo> prepareCurrentPriorityList2(String dataSource, List<CurrentPriorityAreaWTStatisticsTo> tos) {
        List<CurrentPriorityAreaPGNWTStatisticsTo> list2 = new ArrayList();
        for (int i = 0; i < tos.size(); i++) {
            CurrentPriorityAreaWTStatisticsTo to = (CurrentPriorityAreaWTStatisticsTo) tos.get(i);
            if (to.getDataSource().equalsIgnoreCase(dataSource)) {

                CurrentPriorityAreaPGNWTStatisticsTo obj = new CurrentPriorityAreaPGNWTStatisticsTo();
                obj.setProcedureGroupNm(to.getProcedureGroupNm());
                obj.add(to);
                list2.add(obj);

            }
        }
        return list2;
    }

    private List<CurrentPriorityAreaPGNWTStatisticsTo> prepareCurrentPriorityEmergencyList2(String dataSource, List<CurrentPriorityAreaEmergencyWTStatisticsTo> tos) {
        List<CurrentPriorityAreaPGNWTStatisticsTo> list2 = new ArrayList();
        for (int i = 0; i < tos.size(); i++) {
            CurrentPriorityAreaEmergencyWTStatisticsTo to = (CurrentPriorityAreaEmergencyWTStatisticsTo) tos.get(i);
            if (to.getDataSource().equalsIgnoreCase(dataSource)) {

                CurrentPriorityAreaPGNWTStatisticsTo obj = new CurrentPriorityAreaPGNWTStatisticsTo();
                obj.setProcedureGroupNm(to.getProcedureGroupNm());
                obj.add(to);
                list2.add(obj);

            }
        }
        return list2;
    }

    private void changeOrder(List<WTByPriorityAreaTo> tos) {
        if (tos != null && tos.size() > 0) {
            Set procedureGroupNmSet = new HashSet();
            int sameProcedureCount = 0;
            for (int i = 0; i < tos.size(); i++) {
                WTByPriorityAreaTo to = (WTByPriorityAreaTo) tos.get(i);
                boolean flag = procedureGroupNmSet.add(to.getProcedureGroupNm());
                if (flag) {
                    sameProcedureCount = 1;
                } else {
                    sameProcedureCount++;
                    if (to.getPriorityDsc() == null || to.getPriorityDsc().trim().length() == 0) {
                        tos.remove(i);
                        tos.add(i + 1 - sameProcedureCount, to);
                    }
                }

            }
        }
    }
}
