/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.entity;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.EmbeddedId;
import jakarta.persistence.Entity;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlTransient;
import java.io.Serializable;
import java.util.Collection;
import java.util.Date;

/**
 *
 * @author brice.mimifir
 */
@Entity
@Table(name = "SWT_SITE_PROV_PROCEDURE")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "SwtSiteProvProcedure.findAll", query = "SELECT s FROM SwtSiteProvProcedure s"),
    @NamedQuery(name = "SwtSiteProvProcedure.findBySiteId", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.swtSiteProvProcedurePK.siteId = :siteId"),
    @NamedQuery(name = "SwtSiteProvProcedure.findByProvProcedureId", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.swtSiteProvProcedurePK.provProcedureId = :provProcedureId"),
    @NamedQuery(name = "SwtSiteProvProcedure.findByProvProcedureNm", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.provProcedureNm = :provProcedureNm"),
    @NamedQuery(name = "SwtSiteProvProcedure.findByProvProcedureEffectiveDtm", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.provProcedureEffectiveDtm = :provProcedureEffectiveDtm"),
    @NamedQuery(name = "SwtSiteProvProcedure.findByProvProcedureExpiryDtm", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.provProcedureExpiryDtm = :provProcedureExpiryDtm"),
    @NamedQuery(name = "SwtSiteProvProcedure.findByScoringRangeHighAvgNbr", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.scoringRangeHighAvgNbr = :scoringRangeHighAvgNbr"),
    @NamedQuery(name = "SwtSiteProvProcedure.findByScoringRangeLowAvgNbr", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.scoringRangeLowAvgNbr = :scoringRangeLowAvgNbr"),
    @NamedQuery(name = "SwtSiteProvProcedure.findBySideRequiredYn", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.sideRequiredYn = :sideRequiredYn"),
    @NamedQuery(name = "SwtSiteProvProcedure.findBySurgicalServiceCd", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.surgicalServiceCd = :surgicalServiceCd"),
    @NamedQuery(name = "SwtSiteProvProcedure.findBySurgicalServiceDsc", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.surgicalServiceDsc = :surgicalServiceDsc"),
    @NamedQuery(name = "SwtSiteProvProcedure.findBySurgicalServiceEffectiveDtm", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.surgicalServiceEffectiveDtm = :surgicalServiceEffectiveDtm"),
    @NamedQuery(name = "SwtSiteProvProcedure.findBySurgicalServiceExpiryDtm", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.surgicalServiceExpiryDtm = :surgicalServiceExpiryDtm"),
    @NamedQuery(name = "SwtSiteProvProcedure.findByCreatedByNm", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.createdByNm = :createdByNm"),
    @NamedQuery(name = "SwtSiteProvProcedure.findByCreatedOnDtm", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.createdOnDtm = :createdOnDtm"),
    @NamedQuery(name = "SwtSiteProvProcedure.findByLastModifiedByNm", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.lastModifiedByNm = :lastModifiedByNm"),
    @NamedQuery(name = "SwtSiteProvProcedure.findByLastModifiedOnDtm", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.lastModifiedOnDtm = :lastModifiedOnDtm"),
    @NamedQuery(name = "SwtSiteProvProcedure.findByStatelessTransactionNbr", query = "SELECT s FROM SwtSiteProvProcedure s WHERE s.statelessTransactionNbr = :statelessTransactionNbr")})
public class SwtSiteProvProcedure implements Serializable {

    private static final long serialVersionUID = 1L;
    @EmbeddedId
    protected SwtSiteProvProcedurePK swtSiteProvProcedurePK;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 255)
    @Column(name = "PROV_PROCEDURE_NM")
    private String provProcedureNm;
    @Column(name = "PROV_PROCEDURE_EFFECTIVE_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date provProcedureEffectiveDtm;
    @Column(name = "PROV_PROCEDURE_EXPIRY_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date provProcedureExpiryDtm;
    @Column(name = "SCORING_RANGE_HIGH_AVG_NBR")
    private Integer scoringRangeHighAvgNbr;
    @Column(name = "SCORING_RANGE_LOW_AVG_NBR")
    private Integer scoringRangeLowAvgNbr;
    @Size(max = 1)
    @Column(name = "SIDE_REQUIRED_YN")
    private String sideRequiredYn;
    @Size(max = 10)
    @Column(name = "SURGICAL_SERVICE_CD")
    private String surgicalServiceCd;
    @Size(max = 255)
    @Column(name = "SURGICAL_SERVICE_DSC")
    private String surgicalServiceDsc;
    @Column(name = "SURGICAL_SERVICE_EFFECTIVE_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date surgicalServiceEffectiveDtm;
    @Column(name = "SURGICAL_SERVICE_EXPIRY_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date surgicalServiceExpiryDtm;
    @Size(max = 100)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Basic(optional = false)
    @NotNull
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Basic(optional = false)
    @NotNull
    @Column(name = "STATELESS_TRANSACTION_NBR")
    private long statelessTransactionNbr;
    @JoinColumn(name = "SITE_ID", referencedColumnName = "SITE_ID", insertable = false, updatable = false)
    @ManyToOne(optional = false)
    private Site site;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "swtSiteProvProcedure")
    private Collection<SwtSiteProvProcGroupXref> swtSiteProvProcGroupXrefCollection;

    public SwtSiteProvProcedure() {
    }

    public SwtSiteProvProcedure(SwtSiteProvProcedurePK swtSiteProvProcedurePK) {
        this.swtSiteProvProcedurePK = swtSiteProvProcedurePK;
    }

    public SwtSiteProvProcedure(SwtSiteProvProcedurePK swtSiteProvProcedurePK, String provProcedureNm, String lastModifiedByNm, Date lastModifiedOnDtm, long statelessTransactionNbr) {
        this.swtSiteProvProcedurePK = swtSiteProvProcedurePK;
        this.provProcedureNm = provProcedureNm;
        this.lastModifiedByNm = lastModifiedByNm;
        this.lastModifiedOnDtm = lastModifiedOnDtm;
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public SwtSiteProvProcedure(long siteId, String provProcedureId) {
        this.swtSiteProvProcedurePK = new SwtSiteProvProcedurePK(siteId, provProcedureId);
    }

    public SwtSiteProvProcedurePK getSwtSiteProvProcedurePK() {
        return swtSiteProvProcedurePK;
    }

    public void setSwtSiteProvProcedurePK(SwtSiteProvProcedurePK swtSiteProvProcedurePK) {
        this.swtSiteProvProcedurePK = swtSiteProvProcedurePK;
    }

    public String getProvProcedureNm() {
        return provProcedureNm;
    }

    public void setProvProcedureNm(String provProcedureNm) {
        this.provProcedureNm = provProcedureNm;
    }

    public Date getProvProcedureEffectiveDtm() {
        return provProcedureEffectiveDtm;
    }

    public void setProvProcedureEffectiveDtm(Date provProcedureEffectiveDtm) {
        this.provProcedureEffectiveDtm = provProcedureEffectiveDtm;
    }

    public Date getProvProcedureExpiryDtm() {
        return provProcedureExpiryDtm;
    }

    public void setProvProcedureExpiryDtm(Date provProcedureExpiryDtm) {
        this.provProcedureExpiryDtm = provProcedureExpiryDtm;
    }

    public Integer getScoringRangeHighAvgNbr() {
        return scoringRangeHighAvgNbr;
    }

    public void setScoringRangeHighAvgNbr(Integer scoringRangeHighAvgNbr) {
        this.scoringRangeHighAvgNbr = scoringRangeHighAvgNbr;
    }

    public Integer getScoringRangeLowAvgNbr() {
        return scoringRangeLowAvgNbr;
    }

    public void setScoringRangeLowAvgNbr(Integer scoringRangeLowAvgNbr) {
        this.scoringRangeLowAvgNbr = scoringRangeLowAvgNbr;
    }

    public String getSideRequiredYn() {
        return sideRequiredYn;
    }

    public void setSideRequiredYn(String sideRequiredYn) {
        this.sideRequiredYn = sideRequiredYn;
    }

    public String getSurgicalServiceCd() {
        return surgicalServiceCd;
    }

    public void setSurgicalServiceCd(String surgicalServiceCd) {
        this.surgicalServiceCd = surgicalServiceCd;
    }

    public String getSurgicalServiceDsc() {
        return surgicalServiceDsc;
    }

    public void setSurgicalServiceDsc(String surgicalServiceDsc) {
        this.surgicalServiceDsc = surgicalServiceDsc;
    }

    public Date getSurgicalServiceEffectiveDtm() {
        return surgicalServiceEffectiveDtm;
    }

    public void setSurgicalServiceEffectiveDtm(Date surgicalServiceEffectiveDtm) {
        this.surgicalServiceEffectiveDtm = surgicalServiceEffectiveDtm;
    }

    public Date getSurgicalServiceExpiryDtm() {
        return surgicalServiceExpiryDtm;
    }

    public void setSurgicalServiceExpiryDtm(Date surgicalServiceExpiryDtm) {
        this.surgicalServiceExpiryDtm = surgicalServiceExpiryDtm;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public Site getSite() {
        return site;
    }

    public void setSite(Site site) {
        this.site = site;
    }

    @XmlTransient
    public Collection<SwtSiteProvProcGroupXref> getSwtSiteProvProcGroupXrefCollection() {
        return swtSiteProvProcGroupXrefCollection;
    }

    public void setSwtSiteProvProcGroupXrefCollection(Collection<SwtSiteProvProcGroupXref> swtSiteProvProcGroupXrefCollection) {
        this.swtSiteProvProcGroupXrefCollection = swtSiteProvProcGroupXrefCollection;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (swtSiteProvProcedurePK != null ? swtSiteProvProcedurePK.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof SwtSiteProvProcedure)) {
            return false;
        }
        SwtSiteProvProcedure other = (SwtSiteProvProcedure) object;
        if ((this.swtSiteProvProcedurePK == null && other.swtSiteProvProcedurePK != null) || (this.swtSiteProvProcedurePK != null && !this.swtSiteProvProcedurePK.equals(other.swtSiteProvProcedurePK))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.hlth.swt.entity.SwtSiteProvProcedure[ swtSiteProvProcedurePK=" + swtSiteProvProcedurePK + " ]";
    }

}
