/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.entity;

import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.EmbeddedId;
import jakarta.persistence.Entity;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.JoinColumns;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlTransient;
import java.io.Serializable;
import java.util.Collection;
import java.util.Date;

/**
 *
 * @author brice.mimifir
 */
@Entity
@Table(name = "SWT_DIAGNOSIS_CODES")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "SwtDiagnosisCodes.findAll", query = "SELECT s FROM SwtDiagnosisCodes s"),
    @NamedQuery(name = "SwtDiagnosisCodes.findBySiteId", query = "SELECT s FROM SwtDiagnosisCodes s WHERE s.swtDiagnosisCodesPK.siteId = :siteId"),
    @NamedQuery(name = "SwtDiagnosisCodes.findByDiagnosisCd", query = "SELECT s FROM SwtDiagnosisCodes s WHERE s.swtDiagnosisCodesPK.diagnosisCd = :diagnosisCd"),
    @NamedQuery(name = "SwtDiagnosisCodes.findByEffectiveUsr", query = "SELECT s FROM SwtDiagnosisCodes s WHERE s.effectiveUsr = :effectiveUsr"),
    @NamedQuery(name = "SwtDiagnosisCodes.findByEffectiveDt", query = "SELECT s FROM SwtDiagnosisCodes s WHERE s.effectiveDt = :effectiveDt"),
    @NamedQuery(name = "SwtDiagnosisCodes.findByExpiryDt", query = "SELECT s FROM SwtDiagnosisCodes s WHERE s.expiryDt = :expiryDt"),
    @NamedQuery(name = "SwtDiagnosisCodes.findByPediatricDiagnosisCd", query = "SELECT s FROM SwtDiagnosisCodes s WHERE s.pediatricDiagnosisCd = :pediatricDiagnosisCd"),
    @NamedQuery(name = "SwtDiagnosisCodes.findBySecondShortDsc", query = "SELECT s FROM SwtDiagnosisCodes s WHERE s.secondShortDsc = :secondShortDsc"),
    @NamedQuery(name = "SwtDiagnosisCodes.findByFirstShortDsc", query = "SELECT s FROM SwtDiagnosisCodes s WHERE s.firstShortDsc = :firstShortDsc"),
    @NamedQuery(name = "SwtDiagnosisCodes.findByDiagnosisDsc", query = "SELECT s FROM SwtDiagnosisCodes s WHERE s.diagnosisDsc = :diagnosisDsc"),
    @NamedQuery(name = "SwtDiagnosisCodes.findByCreatedByNm", query = "SELECT s FROM SwtDiagnosisCodes s WHERE s.createdByNm = :createdByNm"),
    @NamedQuery(name = "SwtDiagnosisCodes.findByCreatedOnDtm", query = "SELECT s FROM SwtDiagnosisCodes s WHERE s.createdOnDtm = :createdOnDtm"),
    @NamedQuery(name = "SwtDiagnosisCodes.findByLastModifiedByNm", query = "SELECT s FROM SwtDiagnosisCodes s WHERE s.lastModifiedByNm = :lastModifiedByNm"),
    @NamedQuery(name = "SwtDiagnosisCodes.findByLastModifiedOnDtm", query = "SELECT s FROM SwtDiagnosisCodes s WHERE s.lastModifiedOnDtm = :lastModifiedOnDtm"),
    @NamedQuery(name = "SwtDiagnosisCodes.findByStatelessTransactionNbr", query = "SELECT s FROM SwtDiagnosisCodes s WHERE s.statelessTransactionNbr = :statelessTransactionNbr"),
    @NamedQuery(name = "SwtDiagnosisCodes.findByDiagnosisType", query = "SELECT s FROM SwtDiagnosisCodes s WHERE s.diagnosisType = :diagnosisType")})
public class SwtDiagnosisCodes implements Serializable {

    private static final long serialVersionUID = 1L;
    @EmbeddedId
    protected SwtDiagnosisCodesPK swtDiagnosisCodesPK;
    @Size(max = 100)
    @Column(name = "EFFECTIVE_USR")
    private String effectiveUsr;
    @Column(name = "EFFECTIVE_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date effectiveDt;
    @Column(name = "EXPIRY_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date expiryDt;
    @Size(max = 4)
    @Column(name = "PEDIATRIC_DIAGNOSIS_CD")
    private String pediatricDiagnosisCd;
    @Size(max = 70)
    @Column(name = "SECOND_SHORT_DSC")
    private String secondShortDsc;
    @Size(max = 25)
    @Column(name = "FIRST_SHORT_DSC")
    private String firstShortDsc;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 255)
    @Column(name = "DIAGNOSIS_DSC")
    private String diagnosisDsc;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Basic(optional = false)
    @NotNull
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Basic(optional = false)
    @NotNull
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Basic(optional = false)
    @NotNull
    @Column(name = "STATELESS_TRANSACTION_NBR")
    private long statelessTransactionNbr;
    @Size(max = 70)
    @Column(name = "DIAGNOSIS_TYPE")
    private String diagnosisType;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "swtDiagnosisCodes")
    private Collection<SwtDiagnosisGroupXref> swtDiagnosisGroupXrefCollection;
    @JoinColumns({
        @JoinColumn(name = "BODY_AREA_CD", referencedColumnName = "BODY_AREA_CD"),
        @JoinColumn(name = "SITE_ID", referencedColumnName = "SITE_ID", insertable = false, updatable = false)})
    @ManyToOne(optional = false)
    private SwtBodyAreaCodes swtBodyAreaCodes;
    @JoinColumns({
        @JoinColumn(name = "CIHI_CD", referencedColumnName = "CIHI_CD"),
        @JoinColumn(name = "SITE_ID", referencedColumnName = "SITE_ID", insertable = false, updatable = false)})
    @ManyToOne(optional = false)
    private SwtCihiTypes swtCihiTypes;
    @JoinColumns({
        @JoinColumn(name = "ICD_10_CODE", referencedColumnName = "ICD_10_CODE"),
        @JoinColumn(name = "SITE_ID", referencedColumnName = "SITE_ID", insertable = false, updatable = false)})
    @ManyToOne(optional = false)
    private SwtIcd10Codes swtIcd10Codes;
    @JoinColumns({
        @JoinColumn(name = "PRIORITY_CD", referencedColumnName = "PRIORITY_CD"),
        @JoinColumn(name = "SITE_ID", referencedColumnName = "SITE_ID", insertable = false, updatable = false)})
    @ManyToOne(optional = false)
    private SwtPriorityCodes swtPriorityCodes;

    public SwtDiagnosisCodes() {
    }

    public SwtDiagnosisCodes(SwtDiagnosisCodesPK swtDiagnosisCodesPK) {
        this.swtDiagnosisCodesPK = swtDiagnosisCodesPK;
    }

    public SwtDiagnosisCodes(SwtDiagnosisCodesPK swtDiagnosisCodesPK, String diagnosisDsc, String createdByNm, Date createdOnDtm, String lastModifiedByNm, Date lastModifiedOnDtm, long statelessTransactionNbr) {
        this.swtDiagnosisCodesPK = swtDiagnosisCodesPK;
        this.diagnosisDsc = diagnosisDsc;
        this.createdByNm = createdByNm;
        this.createdOnDtm = createdOnDtm;
        this.lastModifiedByNm = lastModifiedByNm;
        this.lastModifiedOnDtm = lastModifiedOnDtm;
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public SwtDiagnosisCodes(long siteId, String diagnosisCd) {
        this.swtDiagnosisCodesPK = new SwtDiagnosisCodesPK(siteId, diagnosisCd);
    }

    public SwtDiagnosisCodesPK getSwtDiagnosisCodesPK() {
        return swtDiagnosisCodesPK;
    }

    public void setSwtDiagnosisCodesPK(SwtDiagnosisCodesPK swtDiagnosisCodesPK) {
        this.swtDiagnosisCodesPK = swtDiagnosisCodesPK;
    }

    public String getEffectiveUsr() {
        return effectiveUsr;
    }

    public void setEffectiveUsr(String effectiveUsr) {
        this.effectiveUsr = effectiveUsr;
    }

    public Date getEffectiveDt() {
        return effectiveDt;
    }

    public void setEffectiveDt(Date effectiveDt) {
        this.effectiveDt = effectiveDt;
    }

    public Date getExpiryDt() {
        return expiryDt;
    }

    public void setExpiryDt(Date expiryDt) {
        this.expiryDt = expiryDt;
    }

    public String getPediatricDiagnosisCd() {
        return pediatricDiagnosisCd;
    }

    public void setPediatricDiagnosisCd(String pediatricDiagnosisCd) {
        this.pediatricDiagnosisCd = pediatricDiagnosisCd;
    }

    public String getSecondShortDsc() {
        return secondShortDsc;
    }

    public void setSecondShortDsc(String secondShortDsc) {
        this.secondShortDsc = secondShortDsc;
    }

    public String getFirstShortDsc() {
        return firstShortDsc;
    }

    public void setFirstShortDsc(String firstShortDsc) {
        this.firstShortDsc = firstShortDsc;
    }

    public String getDiagnosisDsc() {
        return diagnosisDsc;
    }

    public void setDiagnosisDsc(String diagnosisDsc) {
        this.diagnosisDsc = diagnosisDsc;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public String getDiagnosisType() {
        return diagnosisType;
    }

    public void setDiagnosisType(String diagnosisType) {
        this.diagnosisType = diagnosisType;
    }

    @XmlTransient
    public Collection<SwtDiagnosisGroupXref> getSwtDiagnosisGroupXrefCollection() {
        return swtDiagnosisGroupXrefCollection;
    }

    public void setSwtDiagnosisGroupXrefCollection(Collection<SwtDiagnosisGroupXref> swtDiagnosisGroupXrefCollection) {
        this.swtDiagnosisGroupXrefCollection = swtDiagnosisGroupXrefCollection;
    }

    public SwtBodyAreaCodes getSwtBodyAreaCodes() {
        return swtBodyAreaCodes;
    }

    public void setSwtBodyAreaCodes(SwtBodyAreaCodes swtBodyAreaCodes) {
        this.swtBodyAreaCodes = swtBodyAreaCodes;
    }

    public SwtCihiTypes getSwtCihiTypes() {
        return swtCihiTypes;
    }

    public void setSwtCihiTypes(SwtCihiTypes swtCihiTypes) {
        this.swtCihiTypes = swtCihiTypes;
    }

    public SwtIcd10Codes getSwtIcd10Codes() {
        return swtIcd10Codes;
    }

    public void setSwtIcd10Codes(SwtIcd10Codes swtIcd10Codes) {
        this.swtIcd10Codes = swtIcd10Codes;
    }

    public SwtPriorityCodes getSwtPriorityCodes() {
        return swtPriorityCodes;
    }

    public void setSwtPriorityCodes(SwtPriorityCodes swtPriorityCodes) {
        this.swtPriorityCodes = swtPriorityCodes;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (swtDiagnosisCodesPK != null ? swtDiagnosisCodesPK.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof SwtDiagnosisCodes)) {
            return false;
        }
        SwtDiagnosisCodes other = (SwtDiagnosisCodes) object;
        if ((this.swtDiagnosisCodesPK == null && other.swtDiagnosisCodesPK != null) || (this.swtDiagnosisCodesPK != null && !this.swtDiagnosisCodesPK.equals(other.swtDiagnosisCodesPK))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.hlth.swt.entity.SwtDiagnosisCodes[ swtDiagnosisCodesPK=" + swtDiagnosisCodesPK + " ]";
    }

}
