/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.session;

import ca.bc.gov.hlth.swt.ejbsupport.StatisticQueryBuilder;
import ca.bc.gov.hlth.swt.entity.RollupSurgeon;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.text.WordUtils;

/**
 *
 * @author greg.perkins
 */
@Stateless
public class RollupSurgeonFacade implements RollupSurgeonFacadeLocal {

    @PersistenceContext(unitName = "SWT-ejbPU")
    private EntityManager em;

    private final Map cache = new HashMap();

    private final Logger log = Logger.getLogger(this.getClass().getName());

    @Override
    public void create(RollupSurgeon rollupSurgeon) {
        em.persist(rollupSurgeon);
    }

    @Override
    public void edit(RollupSurgeon rollupSurgeon) {
        em.merge(rollupSurgeon);
    }

    @Override
    public void remove(RollupSurgeon rollupSurgeon) {
        em.remove(em.merge(rollupSurgeon));
    }

    @Override
    public RollupSurgeon find(Object id) {
        return em.find(ca.bc.gov.hlth.swt.entity.RollupSurgeon.class, id);
    }

    @Override
    public List<RollupSurgeon> findAll() {
        return em.createQuery("select object(o) from RollupSurgeon as o where o.expiryDtm is null order by o.surgeonLastNm").getResultList();
    }

    @Override
    public List<RollupSurgeon> findByCollegeId(String collegeId) {
        Query query = em.createNamedQuery("RollupSurgeon.findBySurgeonCollegeId");
        query.setParameter("surgeonCollegeId", collegeId);
        List<RollupSurgeon> results = query.getResultList();
        return results;
    }

    @Override
    public List<RollupSurgeon> findBySiteAndCategory(Long siteId, String adult) {
        Query q = em.createQuery("select object(o) from RollupSurgeon as o, SiteSurgeon s where s.siteSurgeonPK.rollupSurgeonId = o.rollupSurgeonId and s.siteSurgeonPK.siteId = :siteId and s.siteSurgeonPK.adult = :adult", RollupSurgeon.class);
        q.setParameter("siteId", siteId);
        q.setParameter("adult", adult);
        return q.getResultList();
    }

    @Override
    public List<RollupSurgeon> findAllBySite(Long siteId) {
        StringBuilder sb = new StringBuilder();
        sb.append("        SELECT DISTINCT p.* ");
        sb.append("          FROM SWT_ROLLUP_SURGEON p, SWT_SITE_SURGEON s ");
        sb.append("    INNER JOIN SWT_SITE_STATISTIC st ");
        sb.append("            ON st.SITE_ID = s.SITE_ID ");
        sb.append("           AND st.ROLLUP_SURGEON_ID = s.ROLLUP_SURGEON_ID ");
        sb.append("         WHERE p.ROLLUP_SURGEON_ID = s.ROLLUP_SURGEON_ID ");
        sb.append("           AND s.SITE_ID = ?1 ");
        sb.append("           AND st.ROLLUP_SPECIALTY_GROUP_ID IS NOT NULL ");
        sb.append("      ORDER BY SURGEON_LAST_NM, SURGEON_FIRST_NM");
        Query q = em.createNativeQuery(sb.toString(), RollupSurgeon.class);
        q.setParameter(1, siteId);
        return q.getResultList();
    }

    @Override
    public List search(Long siteId, Long rollupFacilityId, Long procedureGroupId) {
        StringBuilder sb = new StringBuilder();
        sb.append("SELECT distinct p.* FROM SWT_ROLLUP_SURGEON p, SWT_SITE_STATISTIC s WHERE ");
        sb.append("p.ROLLUP_SURGEON_ID = s.ROLLUP_SURGEON_ID ");
        sb.append("AND s.SITE_ID = ?1 ");
        sb.append("AND s.ROLLUP_FACILITY_ID = ?2 ");

        if (procedureGroupId != null) {
            sb.append("AND s.ROLLUP_PROCEDURE_GROUP_ID = ?3 ");
        }
        sb.append(" and s.ROLLUP_INTERVENTION_TYPE_ID IS NULL ");
        sb.append(" and s.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
        sb.append(" and s.ROLLUP_ENCOUNTER_TYPE_ID IS NULL ");
        sb.append(" and s.ROLLUP_CANCER_SUSPECTED_ID IS NULL ");
        Query q = em.createNativeQuery(sb.toString(), RollupSurgeon.class);
        q.setParameter(1, siteId);
        q.setParameter(2, rollupFacilityId);
        if (procedureGroupId != null) {
            q.setParameter(3, procedureGroupId);
        }
        return q.getResultList();
    }

    @Override
    public List search(Long siteId, Long rollupFacilityId, Long procedureGroupId, String adult) {
        StringBuilder sb = new StringBuilder();
        sb.append("SELECT distinct p.* FROM SWT_ROLLUP_SURGEON p, SWT_SITE_STATISTIC s WHERE ");
        sb.append("p.ROLLUP_SURGEON_ID = s.ROLLUP_SURGEON_ID ");
        sb.append("AND s.SITE_ID = ?1 ");
        sb.append("AND s.ROLLUP_FACILITY_ID = ?2 ");
        sb.append("AND s.ADULT = ?3 ");
        if (procedureGroupId != null) {
            sb.append("AND s.ROLLUP_PROCEDURE_GROUP_ID = ?4 ");
        }
        sb.append(" and s.ROLLUP_INTERVENTION_TYPE_ID IS NULL ");
        sb.append(" and s.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
        sb.append(" and s.ROLLUP_ENCOUNTER_TYPE_ID IS NULL ");
        sb.append(" and s.ROLLUP_CANCER_SUSPECTED_ID IS NULL ");
        Query q = em.createNativeQuery(sb.toString(), RollupSurgeon.class);
        q.setParameter(1, siteId);
        q.setParameter(2, rollupFacilityId);
        q.setParameter(3, adult);
        if (procedureGroupId != null) {
            q.setParameter(4, procedureGroupId);
        }
        return q.getResultList();
    }

    @Override
    public List<RollupSurgeon> findBySiteAndCriteria(Long siteId, String joinColumn, Long criteria) {
        StringBuilder sb = new StringBuilder();
        sb.append("SELECT p.* FROM SWT_ROLLUP_SURGEON p, SWT_SITE_STATISTIC s ");
        sb.append("WHERE p.ROLLUP_SURGEON_ID = s.ROLLUP_SURGEON_ID ");
        sb.append("AND ");
        sb.append(StatisticQueryBuilder.buildWhereClause("s", joinColumn, "ROLLUP_SURGEON_ID", null));
        sb.append("AND s.SITE_ID = ?2 ");
        log.finest(sb.toString());
        Query q = em.createNativeQuery(sb.toString(), RollupSurgeon.class);
        q.setParameter(1, criteria);
        q.setParameter(2, siteId);
        return q.getResultList();
    }

    @Override
    public List<RollupSurgeon> findBySiteAndMultipleCriteria(Long siteId, List joinColumns, List criteria) {
        StringBuilder sb = new StringBuilder();
        int count = 1;
        List optionalColumns = Arrays.asList(new String[]{"ROLLUP_PROCEDURE_GROUP_ID", "ROLLUP_FACILITY_ID", "ROLLUP_HEALTH_AUTHORITY_ID", "ROLLUP_SURGEON_ID"});
        if (criteria.isEmpty()) {
            if (cache.get(siteId) != null) {
                return (List<RollupSurgeon>) cache.get(siteId);
            }
            sb.append("SELECT p.* FROM SWT_ROLLUP_SURGEON p, SWT_SITE_SURGEON s WHERE p.ROLLUP_SURGEON_ID = s.ROLLUP_SURGEON_ID AND s.SITE_ID = ?1");
        } else {
            sb.append("SELECT DISTINCT p.* FROM SWT_ROLLUP_SURGEON p, SWT_SITE_STATISTIC s ");
            sb.append("WHERE p.ROLLUP_SURGEON_ID = s.ROLLUP_SURGEON_ID ");
            sb.append("AND ");
            sb.append(StatisticQueryBuilder.buildWhereClause("s", joinColumns, optionalColumns, "ROLLUP_SURGEON_ID", criteria));
            int last = StringUtils.countMatches(sb, "?") + 1;
            sb.append("AND s.SITE_ID = ?");
            sb.append(last);
            sb.append(" ");
        }
        log.finest(sb.toString());
        Query q = em.createNativeQuery(sb.toString(), RollupSurgeon.class);
        for (int i = 0; i < criteria.size(); i++) {
            if (criteria.get(i) instanceof List) {
                List listCriteria = (List) criteria.get(i);
                for (int j = 0; j < listCriteria.size(); j++) {
                    Long facilityId = Long.valueOf(listCriteria.get(j).toString());
                    q.setParameter(count, facilityId);
                    count++;
                }

            } else {
                q.setParameter(count, criteria.get(i));
                count++;
            }
        }
        q.setParameter(count, siteId);
        long start = System.currentTimeMillis();
        List l = q.getResultList();
        if (criteria.isEmpty()) {
            cache.put(siteId, l);
        }
        l = formatList(l);
        log.log(Level.INFO, "Found {0} surgeons in {1}ms", new Object[]{l.size(), System.currentTimeMillis() - start});
        return l;
    }

    private List<RollupSurgeon> formatList(List<RollupSurgeon> results) {
        for (int i = 0; i < results.size(); i++) {
            results.get(i).setSurgeonFirstNm(WordUtils.capitalizeFully(results.get(i).getSurgeonFirstNm()));
            results.get(i).setSurgeonLastNm(WordUtils.capitalizeFully(results.get(i).getSurgeonLastNm()));
        }
        return results;
    }
}
