/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.entity;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.EmbeddedId;
import jakarta.persistence.Entity;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import java.io.Serializable;
import java.util.Collection;
import java.util.Date;

/**
 *
 * @author greg.perkins
 */
@Entity
@Table(name = "SWT_POSTPONEMENT_REASON")
@NamedQueries({
    @NamedQuery(name = "PostponementReason.findByPostponeReasonListId", query = "SELECT p FROM PostponementReason p WHERE p.postponementReasonPK.postponeReasonListId = :postponeReasonListId"),
    @NamedQuery(name = "PostponementReason.findByHaPostponeReasonCd", query = "SELECT p FROM PostponementReason p WHERE p.postponementReasonPK.haPostponeReasonCd = :haPostponeReasonCd"),
    @NamedQuery(name = "PostponementReason.findBySiteId", query = "SELECT p FROM PostponementReason p WHERE p.postponementReasonPK.siteId = :siteId"),
    @NamedQuery(name = "PostponementReason.findByHaPostponeReasonDsc", query = "SELECT p FROM PostponementReason p WHERE p.haPostponeReasonDsc = :haPostponeReasonDsc"),
    @NamedQuery(name = "PostponementReason.findByHaPostponeRsnEffectiveDtm", query = "SELECT p FROM PostponementReason p WHERE p.haPostponeRsnEffectiveDtm = :haPostponeRsnEffectiveDtm"),
    @NamedQuery(name = "PostponementReason.findByHaPostponeRsnExpiryDtm", query = "SELECT p FROM PostponementReason p WHERE p.haPostponeRsnExpiryDtm = :haPostponeRsnExpiryDtm"),
    @NamedQuery(name = "PostponementReason.findByProvPostponeRsnCd", query = "SELECT p FROM PostponementReason p WHERE p.provPostponeRsnCd = :provPostponeRsnCd"),
    @NamedQuery(name = "PostponementReason.findByProvPostponeRsnDsc", query = "SELECT p FROM PostponementReason p WHERE p.provPostponeRsnDsc = :provPostponeRsnDsc"),
    @NamedQuery(name = "PostponementReason.findByProvPostponeRsnEffectiveDt", query = "SELECT p FROM PostponementReason p WHERE p.provPostponeRsnEffectiveDt = :provPostponeRsnEffectiveDt"),
    @NamedQuery(name = "PostponementReason.findByProvPostponeRsnExpiryDtm", query = "SELECT p FROM PostponementReason p WHERE p.provPostponeRsnExpiryDtm = :provPostponeRsnExpiryDtm"),
    @NamedQuery(name = "PostponementReason.findByPostponeReasonListDsc", query = "SELECT p FROM PostponementReason p WHERE p.postponeReasonListDsc = :postponeReasonListDsc"),
    @NamedQuery(name = "PostponementReason.findByCreatedByNm", query = "SELECT p FROM PostponementReason p WHERE p.createdByNm = :createdByNm"),
    @NamedQuery(name = "PostponementReason.findByCreatedOnDtm", query = "SELECT p FROM PostponementReason p WHERE p.createdOnDtm = :createdOnDtm"),
    @NamedQuery(name = "PostponementReason.findByLastModifiedByNm", query = "SELECT p FROM PostponementReason p WHERE p.lastModifiedByNm = :lastModifiedByNm"),
    @NamedQuery(name = "PostponementReason.findByLastModifiedOnDtm", query = "SELECT p FROM PostponementReason p WHERE p.lastModifiedOnDtm = :lastModifiedOnDtm"),
    @NamedQuery(name = "PostponementReason.findByStatelessTransactionNbr", query = "SELECT p FROM PostponementReason p WHERE p.statelessTransactionNbr = :statelessTransactionNbr")})
public class PostponementReason implements Serializable {

    private static final long serialVersionUID = 1L;
    @EmbeddedId
    protected PostponementReasonPK postponementReasonPK;
    @Column(name = "HA_POSTPONE_REASON_DSC", nullable = false)
    private String haPostponeReasonDsc;
    @Column(name = "HA_POSTPONE_RSN_EFFECTIVE_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date haPostponeRsnEffectiveDtm;
    @Column(name = "HA_POSTPONE_RSN_EXPIRY_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date haPostponeRsnExpiryDtm;
    @Column(name = "PROV_POSTPONE_RSN_CD", nullable = false)
    private String provPostponeRsnCd;
    @Column(name = "PROV_POSTPONE_RSN_DSC", nullable = false)
    private String provPostponeRsnDsc;
    @Column(name = "PROV_POSTPONE_RSN_EFFECTIVE_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date provPostponeRsnEffectiveDt;
    @Column(name = "PROV_POSTPONE_RSN_EXPIRY_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date provPostponeRsnExpiryDtm;
    @Column(name = "POSTPONE_REASON_LIST_DSC", nullable = false)
    private String postponeReasonListDsc;
    @Column(name = "CREATED_BY_NM", nullable = false)
    private String createdByNm;
    @Column(name = "CREATED_ON_DTM", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_BY_NM", nullable = false)
    private String lastModifiedByNm;
    @Column(name = "LAST_MODIFIED_ON_DTM", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Column(name = "STATELESS_TRANSACTION_NBR", nullable = false)
    private long statelessTransactionNbr;
    @JoinColumn(name = "SITE_ID", referencedColumnName = "SITE_ID", insertable = false, updatable = false)
    @ManyToOne
    private Site site;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "postponementReason")
    private Collection<Booking> bookingCollection;

    public PostponementReason() {
    }

    public PostponementReason(PostponementReasonPK postponementReasonPK) {
        this.postponementReasonPK = postponementReasonPK;
    }

    public PostponementReason(PostponementReasonPK postponementReasonPK, String haPostponeReasonDsc, String provPostponeRsnCd, String provPostponeRsnDsc, String postponeReasonListDsc, String createdByNm, Date createdOnDtm, String lastModifiedByNm, Date lastModifiedOnDtm, long statelessTransactionNbr) {
        this.postponementReasonPK = postponementReasonPK;
        this.haPostponeReasonDsc = haPostponeReasonDsc;
        this.provPostponeRsnCd = provPostponeRsnCd;
        this.provPostponeRsnDsc = provPostponeRsnDsc;
        this.postponeReasonListDsc = postponeReasonListDsc;
        this.createdByNm = createdByNm;
        this.createdOnDtm = createdOnDtm;
        this.lastModifiedByNm = lastModifiedByNm;
        this.lastModifiedOnDtm = lastModifiedOnDtm;
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public PostponementReason(long postponeReasonListId, String haPostponeReasonCd, long siteId) {
        this.postponementReasonPK = new PostponementReasonPK(postponeReasonListId, haPostponeReasonCd, siteId);
    }

    public PostponementReasonPK getPostponementReasonPK() {
        return postponementReasonPK;
    }

    public void setPostponementReasonPK(PostponementReasonPK postponementReasonPK) {
        this.postponementReasonPK = postponementReasonPK;
    }

    public String getHaPostponeReasonDsc() {
        return haPostponeReasonDsc;
    }

    public void setHaPostponeReasonDsc(String haPostponeReasonDsc) {
        this.haPostponeReasonDsc = haPostponeReasonDsc;
    }

    public Date getHaPostponeRsnEffectiveDtm() {
        return haPostponeRsnEffectiveDtm;
    }

    public void setHaPostponeRsnEffectiveDtm(Date haPostponeRsnEffectiveDtm) {
        this.haPostponeRsnEffectiveDtm = haPostponeRsnEffectiveDtm;
    }

    public Date getHaPostponeRsnExpiryDtm() {
        return haPostponeRsnExpiryDtm;
    }

    public void setHaPostponeRsnExpiryDtm(Date haPostponeRsnExpiryDtm) {
        this.haPostponeRsnExpiryDtm = haPostponeRsnExpiryDtm;
    }

    public String getProvPostponeRsnCd() {
        return provPostponeRsnCd;
    }

    public void setProvPostponeRsnCd(String provPostponeRsnCd) {
        this.provPostponeRsnCd = provPostponeRsnCd;
    }

    public String getProvPostponeRsnDsc() {
        return provPostponeRsnDsc;
    }

    public void setProvPostponeRsnDsc(String provPostponeRsnDsc) {
        this.provPostponeRsnDsc = provPostponeRsnDsc;
    }

    public Date getProvPostponeRsnEffectiveDt() {
        return provPostponeRsnEffectiveDt;
    }

    public void setProvPostponeRsnEffectiveDt(Date provPostponeRsnEffectiveDt) {
        this.provPostponeRsnEffectiveDt = provPostponeRsnEffectiveDt;
    }

    public Date getProvPostponeRsnExpiryDtm() {
        return provPostponeRsnExpiryDtm;
    }

    public void setProvPostponeRsnExpiryDtm(Date provPostponeRsnExpiryDtm) {
        this.provPostponeRsnExpiryDtm = provPostponeRsnExpiryDtm;
    }

    public String getPostponeReasonListDsc() {
        return postponeReasonListDsc;
    }

    public void setPostponeReasonListDsc(String postponeReasonListDsc) {
        this.postponeReasonListDsc = postponeReasonListDsc;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public Site getSite() {
        return site;
    }

    public void setSite(Site site) {
        this.site = site;
    }

    public Collection<Booking> getBookingCollection() {
        return bookingCollection;
    }

    public void setBookingCollection(Collection<Booking> bookingCollection) {
        this.bookingCollection = bookingCollection;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (postponementReasonPK != null ? postponementReasonPK.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof PostponementReason)) {
            return false;
        }
        PostponementReason other = (PostponementReason) object;
        if ((this.postponementReasonPK == null && other.postponementReasonPK != null) || (this.postponementReasonPK != null && !this.postponementReasonPK.equals(other.postponementReasonPK))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.hlth.swt.entity.PostponementReason[postponementReasonPK=" + postponementReasonPK + "]";
    }

}
