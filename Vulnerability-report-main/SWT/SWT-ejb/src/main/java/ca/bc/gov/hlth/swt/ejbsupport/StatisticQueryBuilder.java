/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.ejbsupport;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 *
 * @author greg.perkins
 */
public class StatisticQueryBuilder {

    private static String[] names = {
        "ROLLUP_HEALTH_AUTHORITY_ID",
        "ROLLUP_INTERVENTION_TYPE_ID",
        "ROLLUP_PROCEDURE_GROUP_ID",
        "ROLLUP_FACILITY_ID",
        "ROLLUP_SURGEON_ID",
        "ROLLUP_SPECIALTY_GROUP_ID",
        "ROLLUP_ENCOUNTER_TYPE_ID",
        "ROLLUP_CANCER_SUSPECTED_ID",
        "ROLLUP_PRIORITY_ID"
    };

    public static String buildWhereClause(String alias, String columnName, String ignoreColumn, List criteria) {
        List cols = new ArrayList();
        cols.add(columnName);
        return buildWhereClause(alias, cols, ignoreColumn, criteria);
    }

    public static String buildWhereClause(String alias, List columnNames, String ignoreColumn, List criteria) {
        StringBuilder buff = new StringBuilder();
        boolean pastFirst = false;
        int count = 1;
        Map criteriaColumns = new HashMap();
        for (Iterator it = columnNames.iterator(); it.hasNext();) {
            String columnName = (String) it.next();
            if (pastFirst) {
                buff.append(" AND ");
            }
            if (columnName.equals("ROLLUP_FACILITY_ID")) {
                //buff.append(alias+"."+columnName+" IN ?"+(count++)+" ");
                buff.append(alias + "." + columnName + " IN (");
                buff.append("?" + (count++) + " ");
                List facilityId = (List) criteria.get(0);
                if (facilityId.size() > 1) {
                    for (int i = 1; i < facilityId.size(); i++) {
                        buff.append(",?" + (count++) + " ");
                    }
                }
                buff.append(") ");
                count++;
            } else {
                buff.append(alias + "." + columnName + " = ?" + (count++) + " ");
            }
            criteriaColumns.put(columnName, columnName);
            pastFirst = true;
        }
        for (int i = 0; i < names.length; i++) {
            String col = names[i];
            if (!col.equals(ignoreColumn)) {
                if (!criteriaColumns.containsKey(col)) {
                    if (pastFirst) {
                        buff.append(" AND ");
                    }
                    buff.append(alias + "." + col + " IS NULL ");
                    pastFirst = true;
                }
            }
        }
        return buff.toString();
    }

    public static String buildWhereClause(String alias, List columnNames, List optionalCols, String ignoreColumn, List criteria) {
        StringBuilder buff = new StringBuilder();
        boolean pastFirst = false;
        int count = 1;
        Map criteriaColumns = new HashMap();
        for (Iterator it = columnNames.iterator(); it.hasNext();) {
            String columnName = (String) it.next();
            if (pastFirst) {
                buff.append(" AND ");
            }
            if (columnName.equals("ROLLUP_FACILITY_ID")) {
                buff.append(alias + "." + columnName + " IN (");
                buff.append("?" + (count++) + " ");
                List facilityId = (List) criteria.get(0);
                if (facilityId.size() > 1) {
                    for (int i = 1; i < facilityId.size(); i++) {
                        buff.append(",?" + (count++) + " ");
                    }
                }
                buff.append(") ");

            } else {
                buff.append(alias + "." + columnName + " = ?" + (count++) + " ");
            }
            criteriaColumns.put(columnName, columnName);
            pastFirst = true;
        }
        for (int i = 0; i < names.length; i++) {
            String col = names[i];
            if (!col.equals(ignoreColumn)) {
                if (!criteriaColumns.containsKey(col) && !optionalCols.contains(col)) {
                    if (pastFirst) {
                        buff.append(" AND ");
                    }
                    buff.append(alias + "." + col + " IS NULL ");
                    pastFirst = true;
                }
            }
        }
        return buff.toString();
    }

}
