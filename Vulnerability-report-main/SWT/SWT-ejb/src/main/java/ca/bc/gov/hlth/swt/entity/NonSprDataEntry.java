/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.entity;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Version;
import java.io.Serializable;
import java.util.Collection;
import java.util.Date;

/**
 *
 * @author greg.perkins
 */
@Entity
@Table(name = "SWT_NON_SPR_DATA_ENTRY")
@NamedQueries({
    @NamedQuery(name = "NonSprDataEntry.findByNonSprDataEntryId", query = "SELECT n FROM NonSprDataEntry n WHERE n.nonSprDataEntryId = :nonSprDataEntryId"),
    @NamedQuery(name = "NonSprDataEntry.findByApprovedForSiteYn", query = "SELECT n FROM NonSprDataEntry n WHERE n.approvedForSiteYn = :approvedForSiteYn"),
    @NamedQuery(name = "NonSprDataEntry.findByApprovedByNm", query = "SELECT n FROM NonSprDataEntry n WHERE n.approvedByNm = :approvedByNm"),
    @NamedQuery(name = "NonSprDataEntry.findByApprovedOnDtm", query = "SELECT n FROM NonSprDataEntry n WHERE n.approvedOnDtm = :approvedOnDtm"),
    @NamedQuery(name = "NonSprDataEntry.findByCreatedByNm", query = "SELECT n FROM NonSprDataEntry n WHERE n.createdByNm = :createdByNm"),
    @NamedQuery(name = "NonSprDataEntry.findByCreatedOnDtm", query = "SELECT n FROM NonSprDataEntry n WHERE n.createdOnDtm = :createdOnDtm"),
    @NamedQuery(name = "NonSprDataEntry.findByLastModifiedByNm", query = "SELECT n FROM NonSprDataEntry n WHERE n.lastModifiedByNm = :lastModifiedByNm"),
    @NamedQuery(name = "NonSprDataEntry.findByLastModifiedOnDtm", query = "SELECT n FROM NonSprDataEntry n WHERE n.lastModifiedOnDtm = :lastModifiedOnDtm"),
    @NamedQuery(name = "NonSprDataEntry.findByStatelessTransactionNbr", query = "SELECT n FROM NonSprDataEntry n WHERE n.statelessTransactionNbr = :statelessTransactionNbr")})
@SequenceGenerator(name = "NonSprDataEntrySeq", sequenceName = "SWT_NOND_SEQ", allocationSize = 1, initialValue = 1)
public class NonSprDataEntry implements Serializable {

    private static final long serialVersionUID = 1L;
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "NonSprDataEntrySeq")
    @Column(name = "NON_SPR_DATA_ENTRY_ID", nullable = false)
    private Long nonSprDataEntryId;
    @Column(name = "APPROVED_FOR_SITE_YN", nullable = false)
    private String approvedForSiteYn;
    @Column(name = "APPROVED_BY_NM")
    private String approvedByNm;
    @Column(name = "APPROVED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date approvedOnDtm;
    @Column(name = "PATIENTS_WAITING_AS_OF_DT", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date patientsWaitingAsOfDt;
    @Column(name = "CREATED_BY_NM", nullable = false)
    private String createdByNm;
    @Column(name = "CREATED_ON_DTM", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_BY_NM", nullable = false)
    private String lastModifiedByNm;
    @Column(name = "LAST_MODIFIED_ON_DTM", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Column(name = "STATELESS_TRANSACTION_NBR", nullable = false)
    @Version
    private long statelessTransactionNbr;
    @Column(name = "COMMENT_TXT")
    private String commentTxt;
    @Column(name = "PROCEDURE_COMPLETED_FROM_DT", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date procedureCompletedFromDt;
    @Column(name = "PROCEDURE_COMPLETED_TO_DT", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date procedureCompletedToDt;
    @JoinColumn(name = "ROLLUP_PROCEDURE_GROUP_ID", referencedColumnName = "ROLLUP_PROCEDURE_GROUP_ID")
    @ManyToOne
    private RollupProcedureGroup rollupProcedureGroupId;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "nonSprDataEntryId")
    private Collection<NonSprStatistic> nonSprStatisticCollection;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "nonSprDataEntry")
    private Collection<NonSprSite> nonSprSiteCollection;

    public NonSprDataEntry() {
    }

    public NonSprDataEntry(Long nonSprDataEntryId) {
        this.nonSprDataEntryId = nonSprDataEntryId;
    }

    public NonSprDataEntry(Long nonSprDataEntryId, String approvedForSiteYn, String createdByNm, Date createdOnDtm, String lastModifiedByNm, Date lastModifiedOnDtm, long statelessTransactionNbr) {
        this.nonSprDataEntryId = nonSprDataEntryId;
        this.approvedForSiteYn = approvedForSiteYn;
        this.createdByNm = createdByNm;
        this.createdOnDtm = createdOnDtm;
        this.lastModifiedByNm = lastModifiedByNm;
        this.lastModifiedOnDtm = lastModifiedOnDtm;
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public Long getNonSprDataEntryId() {
        return nonSprDataEntryId;
    }

    public void setNonSprDataEntryId(Long nonSprDataEntryId) {
        this.nonSprDataEntryId = nonSprDataEntryId;
    }

    public String getApprovedForSiteYn() {
        return approvedForSiteYn;
    }

    public void setApprovedForSiteYn(String approvedForSiteYn) {
        this.approvedForSiteYn = toYnString(approvedForSiteYn);
    }

    public String getApprovedByNm() {
        return approvedByNm;
    }

    public void setApprovedByNm(String approvedByNm) {
        this.approvedByNm = approvedByNm;
    }

    public Date getApprovedOnDtm() {
        return approvedOnDtm;
    }

    public void setApprovedOnDtm(Date approvedOnDtm) {
        this.approvedOnDtm = approvedOnDtm;
    }

    public Date getPatientsWaitingAsOfDt() {
        return patientsWaitingAsOfDt;
    }

    public void setPatientsWaitingAsOfDt(Date patientsWaitingAsOfDt) {
        this.patientsWaitingAsOfDt = patientsWaitingAsOfDt;
    }

    public Date getProcedureCompletedFromDt() {
        return procedureCompletedFromDt;
    }

    public void setProcedureCompletedFromDt(Date procedureCompletedFromDt) {
        this.procedureCompletedFromDt = procedureCompletedFromDt;
    }

    public Date getProcedureCompletedToDt() {
        return procedureCompletedToDt;
    }

    public void setProcedureCompletedToDt(Date procedureCompletedToDt) {
        this.procedureCompletedToDt = procedureCompletedToDt;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public String getCommentTxt() {
        return commentTxt;
    }

    public void setCommentTxt(String commentTxt) {
        this.commentTxt = commentTxt;
    }

    public RollupProcedureGroup getRollupProcedureGroupId() {
        return rollupProcedureGroupId;
    }

    public void setRollupProcedureGroupId(RollupProcedureGroup rollupProcedureGroupId) {
        this.rollupProcedureGroupId = rollupProcedureGroupId;
    }

    public Collection<NonSprStatistic> getNonSprStatisticCollection() {
        return nonSprStatisticCollection;
    }

    public void setNonSprStatisticCollection(Collection<NonSprStatistic> nonSprStatisticCollection) {
        this.nonSprStatisticCollection = nonSprStatisticCollection;
    }

    public Collection<NonSprSite> getNonSprSiteCollection() {
        return nonSprSiteCollection;
    }

    public void setNonSprSiteCollection(Collection<NonSprSite> nonSprSiteCollection) {
        this.nonSprSiteCollection = nonSprSiteCollection;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (nonSprDataEntryId != null ? nonSprDataEntryId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof NonSprDataEntry)) {
            return false;
        }
        NonSprDataEntry other = (NonSprDataEntry) object;

        // Same dates and procedure groups
        if (this.procedureCompletedFromDt != null && this.procedureCompletedFromDt.equals(other.procedureCompletedFromDt)
                && this.procedureCompletedToDt != null && this.procedureCompletedToDt.equals(other.procedureCompletedToDt)
                && this.rollupProcedureGroupId != null && this.rollupProcedureGroupId.equals(other.rollupProcedureGroupId)) {
            return true;
        } // Same ids
        else if (this.nonSprDataEntryId != null && this.nonSprDataEntryId.equals(other.nonSprDataEntryId)) {
            return true;
        }

        return false;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.hlth.swt.entity.NonSprDataEntry[nonSprDataEntryId=" + nonSprDataEntryId + "]";
    }

    private String toYnString(String value) {
        return (value != null && (value.equals("Y") || value.equals("true"))) ? "Y" : "N";
    }

}
