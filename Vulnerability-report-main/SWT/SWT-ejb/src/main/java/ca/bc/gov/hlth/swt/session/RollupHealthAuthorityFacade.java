/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.session;

import ca.bc.gov.hlth.swt.ejbsupport.StatisticQueryBuilder;
import ca.bc.gov.hlth.swt.entity.RollupHealthAuthority;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Logger;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author greg.perkins
 */
@Stateless
public class RollupHealthAuthorityFacade implements RollupHealthAuthorityFacadeLocal {

    @PersistenceContext(unitName = "SWT-ejbPU")
    private EntityManager em;

    private Logger log = Logger.getLogger(this.getClass().getName());

    public void create(RollupHealthAuthority rollupHealthAuthority) {
        em.persist(rollupHealthAuthority);
    }

    public void edit(RollupHealthAuthority rollupHealthAuthority) {
        em.merge(rollupHealthAuthority);
    }

    public void remove(RollupHealthAuthority rollupHealthAuthority) {
        em.remove(em.merge(rollupHealthAuthority));
    }

    public RollupHealthAuthority find(Object id) {
        return em.find(ca.bc.gov.hlth.swt.entity.RollupHealthAuthority.class, id);
    }

    public List<RollupHealthAuthority> findAll() {
        return em.createQuery("select object(o) from RollupHealthAuthority as o where o.expiryDtm is null order by o.healthAuthorityNm").getResultList();
    }

    public List<RollupHealthAuthority> findBySiteAndCategory(Long siteId, String adult) {
        return em.createQuery("select object(o) from RollupHealthAuthority as o, SiteHealthAuthority s where o.expiryDtm is null and o.rollupHealthAuthorityId = s.siteHealthAuthorityPK.rollupHealthAuthorityId and s.siteHealthAuthorityPK.siteId = " + siteId + " and s.siteHealthAuthorityPK.adult = '" + adult + "'").getResultList();
    }

    public List<RollupHealthAuthority> findBySiteAndCriteria(Long siteId, String joinColumn, Long criteria) {
        StringBuilder buff = new StringBuilder();
        buff.append("SELECT ha.* FROM SWT_ROLLUP_HEALTH_AUTHORITY ha, SWT_SITE_STATISTIC s ");
        buff.append("WHERE ha.ROLLUP_HEALTH_AUTHORITY_ID = s.ROLLUP_HEALTH_AUTHORITY_ID ");
        buff.append("AND " + StatisticQueryBuilder.buildWhereClause("s", joinColumn, "ROLLUP_HEALTH_AUTHORITY_ID", null));
        buff.append("AND s.SITE_ID = ?2 ");
        log.finest(buff.toString());
        Query q = em.createNativeQuery(buff.toString(), RollupHealthAuthority.class);
        q.setParameter(1, criteria);
        q.setParameter(2, siteId);
        return q.getResultList();
    }

    public List<RollupHealthAuthority> findBySiteAndMultipleCriteria(Long siteId, List joinColumns, List criteria) {
        StringBuilder buff = new StringBuilder();
        int count = 1;
        List optionalColumns = Arrays.asList(new String[]{"ROLLUP_PROCEDURE_GROUP_ID", "ROLLUP_FACILITY_ID", "ROLLUP_HEALTH_AUTHORITY_ID", "ROLLUP_SURGEON_ID"});
        if (criteria.size() == 0) {
            buff.append("SELECT ha.* FROM SWT_ROLLUP_HEALTH_AUTHORITY ha, SWT_SITE_HEALTH_AUTHORITY s WHERE ha.ROLLUP_HEALTH_AUTHORITY_ID = s.ROLLUP_HEALTH_AUTHORITY_ID AND s.SITE_ID = ?1");
        } else {
            buff.append("SELECT distinct ha.* FROM SWT_ROLLUP_HEALTH_AUTHORITY ha, SWT_SITE_STATISTIC s ");
            buff.append("WHERE (ha.expiry_dtm is null OR ha.expiry_dtm > sysdate) AND ha.ROLLUP_HEALTH_AUTHORITY_ID = s.ROLLUP_HEALTH_AUTHORITY_ID ");
            buff.append("AND " + StatisticQueryBuilder.buildWhereClause("s", joinColumns, optionalColumns, "ROLLUP_HEALTH_AUTHORITY_ID", criteria));
            int last = StringUtils.countMatches(buff, "?") + 1;
            buff.append("AND s.SITE_ID = ?" + last + " ");
        }
        log.finest(buff.toString());
        Query q = em.createNativeQuery(buff.toString(), RollupHealthAuthority.class);
        count = 1;
        for (int i = 0; i < criteria.size(); i++) {
            if (criteria.get(i) instanceof List) {
                List listCriteria = (List) criteria.get(i);
                for (int j = 0; j < listCriteria.size(); j++) {
                    Long facilityId = Long.valueOf(listCriteria.get(j).toString());
                    q.setParameter(count, facilityId);
                    count++;
                }

            } else {
                q.setParameter(count, criteria.get(i));
                count++;
            }

        }
        q.setParameter(count, siteId);
        long start = System.currentTimeMillis();
        List l = q.getResultList();

        log.info("Found " + l.size() + " health authorities in " + (System.currentTimeMillis() - start) + "ms");
        return l;
    }

}
