/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.entity;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import java.io.Serializable;
import java.util.Date;

/**
 *
 * @author greg.perkins
 */
@Entity
@Table(name = "SWT_FAST_FACT")
@NamedQueries({
    @NamedQuery(name = "FastFact.findByFastFactId", query = "SELECT f FROM FastFact f WHERE f.fastFactId = :fastFactId"),
    @NamedQuery(name = "FastFact.findByFastFactTxt", query = "SELECT f FROM FastFact f WHERE f.fastFactTxt = :fastFactTxt"),
    @NamedQuery(name = "FastFact.findByCreatedByNm", query = "SELECT f FROM FastFact f WHERE f.createdByNm = :createdByNm"),
    @NamedQuery(name = "FastFact.findByCreatedOnDtm", query = "SELECT f FROM FastFact f WHERE f.createdOnDtm = :createdOnDtm"),
    @NamedQuery(name = "FastFact.findByLastModifiedByNm", query = "SELECT f FROM FastFact f WHERE f.lastModifiedByNm = :lastModifiedByNm"),
    @NamedQuery(name = "FastFact.findByLastModifiedOnDtm", query = "SELECT f FROM FastFact f WHERE f.lastModifiedOnDtm = :lastModifiedOnDtm"),
    @NamedQuery(name = "FastFact.findByStatelessTransactionNbr", query = "SELECT f FROM FastFact f WHERE f.statelessTransactionNbr = :statelessTransactionNbr")})
public class FastFact implements Serializable {

    private static final long serialVersionUID = 1L;
    @Id
    @Column(name = "FAST_FACT_ID", nullable = false)
    private Long fastFactId;
    @Column(name = "FAST_FACT_TXT", nullable = false)
    private String fastFactTxt;
    @Column(name = "CREATED_BY_NM", nullable = false)
    private String createdByNm;
    @Column(name = "CREATED_ON_DTM", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_BY_NM", nullable = false)
    private String lastModifiedByNm;
    @Column(name = "LAST_MODIFIED_ON_DTM", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Column(name = "STATELESS_TRANSACTION_NBR", nullable = false)
    private long statelessTransactionNbr;

    public FastFact() {
    }

    public FastFact(Long fastFactId) {
        this.fastFactId = fastFactId;
    }

    public FastFact(Long fastFactId, String fastFactTxt, String createdByNm, Date createdOnDtm, String lastModifiedByNm, Date lastModifiedOnDtm, long statelessTransactionNbr) {
        this.fastFactId = fastFactId;
        this.fastFactTxt = fastFactTxt;
        this.createdByNm = createdByNm;
        this.createdOnDtm = createdOnDtm;
        this.lastModifiedByNm = lastModifiedByNm;
        this.lastModifiedOnDtm = lastModifiedOnDtm;
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public Long getFastFactId() {
        return fastFactId;
    }

    public void setFastFactId(Long fastFactId) {
        this.fastFactId = fastFactId;
    }

    public String getFastFactTxt() {
        return fastFactTxt;
    }

    public void setFastFactTxt(String fastFactTxt) {
        this.fastFactTxt = fastFactTxt;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (fastFactId != null ? fastFactId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof FastFact)) {
            return false;
        }
        FastFact other = (FastFact) object;
        if ((this.fastFactId == null && other.fastFactId != null) || (this.fastFactId != null && !this.fastFactId.equals(other.fastFactId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.hlth.swt.entity.FastFact[fastFactId=" + fastFactId + "]";
    }

}
