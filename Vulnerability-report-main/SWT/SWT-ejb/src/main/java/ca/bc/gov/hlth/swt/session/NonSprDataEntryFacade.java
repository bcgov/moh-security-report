/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.session;

import ca.bc.gov.hlth.swt.entity.NonSprDataEntry;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 *
 * @author greg.perkins
 */
@Stateless
public class NonSprDataEntryFacade implements NonSprDataEntryFacadeLocal {

    @PersistenceContext(unitName = "SWT-ejbPU")
    private EntityManager em;

    @Override
    public void create(NonSprDataEntry nonSprDataEntry) {
        em.persist(nonSprDataEntry);
    }

    @Override
    public void edit(NonSprDataEntry nonSprDataEntry) {
        nonSprDataEntry.setStatelessTransactionNbr(em.merge(nonSprDataEntry).getStatelessTransactionNbr());
    }

    @Override
    public void remove(NonSprDataEntry nonSprDataEntry) {
        em.remove(em.merge(nonSprDataEntry));
    }

    @Override
    public NonSprDataEntry findByUK(Long rollupProcedureGroupId, Date waitingAsOf, Date start, Date end) {
        StringBuilder sb = new StringBuilder()
                .append("SELECT * FROM SWT_NON_SPR_DATA_ENTRY ")
                .append("WHERE ROLLUP_PROCEDURE_GROUP_ID = ?1 ")
                .append("AND PATIENTS_WAITING_AS_OF_DT = ?2 ")
                .append("AND PROCEDURE_COMPLETED_FROM_DT = ?3 ")
                .append("AND PROCEDURE_COMPLETED_TO_DT = ?4 ")
                .append("FETCH FIRST 1 ROWS ONLY");
        Query q = em.createNativeQuery(sb.toString(), NonSprDataEntry.class)
                .setParameter(1, rollupProcedureGroupId)
                .setParameter(2, waitingAsOf)
                .setParameter(3, start)
                .setParameter(4, end);

        // @TODO make a criteria that only returns single results
        try {
            return (NonSprDataEntry) q.getSingleResult();
        } catch (NoResultException e) {
            return null;
        }
    }

    @Override
    public NonSprDataEntry find(Object id) {
        return em.find(ca.bc.gov.hlth.swt.entity.NonSprDataEntry.class, id);
    }

    @Override
    public List<NonSprDataEntry> findAll() {
        return em.createQuery("select object(o) from NonSprDataEntry as o").getResultList();
    }

    @Override
    public List<NonSprDataEntry> findByProcedure(Long rollupProcedureGroupId) {
        return em.createQuery("select object(o) from NonSprDataEntry as o where o.rollupProcedureGroupId.rollupProcedureGroupId = :rollupProcedureGroupId order by o.patientsWaitingAsOfDt desc", NonSprDataEntry.class)
                .setParameter("rollupProcedureGroupId", rollupProcedureGroupId)
                .getResultList();
    }

    @Override
    public NonSprDataEntry findByDateAndProcedure(Date dataLastRevisedDt, Long rollupProcedureGroupId) {
        Query q = em.createQuery("select object(o) from NonSprDataEntry as o where o.dataLastRevisedDt = :dataLastRevisedDt and o.rollupProcedureGroupId.rollupProcedureGroupId = :rollupProcedureGroupId", NonSprDataEntry.class)
                .setParameter("dataLastRevisedDt", dataLastRevisedDt)
                .setParameter("rollupProcedureGroupId", rollupProcedureGroupId);
        try {
            return (NonSprDataEntry) q.getSingleResult();
        } catch (Exception e) {
            return null;
        }
    }

    @Override
    public Map findNonSprProcedureMapForSiteId(Long siteId) {
        Map procs = new HashMap();
        Query q = em.createNativeQuery("select o.* from Swt_Non_Spr_Data_Entry o, swt_Non_Spr_Site s where o.non_Spr_Data_Entry_Id = s.non_Spr_Data_Entry_Id and s.site_Id = ?1", NonSprDataEntry.class)
                .setParameter(1, siteId);
        List l = q.getResultList();
        for (Iterator it = l.iterator(); it.hasNext();) {
            NonSprDataEntry object = (NonSprDataEntry) it.next();
            procs.put(object.getRollupProcedureGroupId().getRollupProcedureGroupId(), object);
        }
        return procs;
    }

    @Override
    public Map<String, NonSprDataEntry> findNonSprProcedureMapByDataSourceForSiteId(Long siteId) {
        Map<String, NonSprDataEntry> procs = new HashMap<>();
        Query q = em.createNativeQuery("select o.* from Swt_Non_Spr_Data_Entry o, swt_Non_Spr_Site s where o.non_Spr_Data_Entry_Id = s.non_Spr_Data_Entry_Id and s.site_Id = ?1", NonSprDataEntry.class)
                .setParameter(1, siteId);
        List l = q.getResultList();
        for (Iterator it = l.iterator(); it.hasNext();) {
            NonSprDataEntry object = (NonSprDataEntry) it.next();
            String query = "SELECT DECODE(PROCEDURE.PROCEDURE_GROUP_NM,'Corneal Transplants','Eye Bank of BC','Open Heart Surgery','Cardiac Services BC','Coronary Artery Bypass Graft','Cardiac Services BC','Radiotherapy','BC Cancer Agency','Hip Fracture Fixation','Hospital Discharge Information') FROM SWT_ROLLUP_PROCEDURE_GROUP PROCEDURE WHERE PROCEDURE.ROLLUP_PROCEDURE_GROUP_ID = ?1";
            //  List result = (List) em.createNativeQuery(query).getSingleResult();
            //  String dataSource = (String) result.get(0);
            String dataSource = (String) em.createNativeQuery(query)
                    .setParameter(1, object.getRollupProcedureGroupId().getRollupProcedureGroupId())
                    .getSingleResult();
            procs.put(dataSource, object);
        }
        return procs;
    }

}
