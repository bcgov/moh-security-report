/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.session;

import ca.bc.gov.hlth.swt.entity.Site;
import ca.bc.gov.hlth.swt.entity.SitePreference;
import ca.bc.gov.hlth.swt.to.PublicSiteStatisticsTo;
import jakarta.ejb.Stateless;
import jakarta.ejb.TransactionAttribute;
import jakarta.ejb.TransactionAttributeType;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.persistence.PersistenceContext;
import java.math.BigDecimal;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 * This is a facade class for maintain site operations.
 *
 * @author Kuan.Fan
 */
@Stateless
public class MaintainSitesFacade implements MaintainSitesFacadeLocal {

    @PersistenceContext(unitName = "SWT-ejbPU")
    private EntityManager em;

    public List<Site> findAllSite() {
        return em.createQuery("select object(o) from Site as o order by o.publishedYn, o.createdOnDtm DESC").getResultList();
    }

    public List<SitePreference> findSitePreferences(String siteId) {
        return em.createQuery("select object(o) from SitePreference as o where o.siteId.siteId=:siteId")
                .setParameter("siteId", Long.valueOf(siteId))
                .getResultList();
    }

    public SitePreference findSitePreference(String siteId, String preferenceName) {
        String query = "select object(o) from SitePreference as o where o.siteId.siteId=:siteId and o.preferenceName=:preferenceName";
        try {
            SitePreference preference = (SitePreference) em.createQuery(query)
                    .setParameter("siteId", Long.valueOf(siteId))
                    .setParameter("preferenceName", preferenceName)
                    .getSingleResult();
            return preference;
        } catch (NoResultException nre) {
            return null;
        }
    }

    public SitePreference findSitePreference(String sitePreferenceId) {
        return (SitePreference) em.createQuery("select object(o) from SitePreference as o where o.sitePreferenceId=:sitePreferenceId")
                .setParameter("sitePreferenceId", Long.valueOf(sitePreferenceId))
                .getSingleResult();
    }

    @TransactionAttribute(TransactionAttributeType.REQUIRED)
    public void saveSitePreferences(String sitePreferenceId, String preference1) {
        if (preference1 != null) {
            SitePreference preference = this.findSitePreference(sitePreferenceId);
            preference.setPreferenceValueTxt(preference1);
            preference.setLastModifiedOnDtm(Calendar.getInstance().getTime());
            em.merge(preference);
        }
    }

    private boolean isPreferenceIdSelected(String preferenceId, List<String> selectedReferenceIds) {
        if (selectedReferenceIds == null || selectedReferenceIds.size() == 0) {
            return false;
        } else {
            for (int i = 0; i < selectedReferenceIds.size(); i++) {
                if (((String) selectedReferenceIds.get(i)).equalsIgnoreCase(preferenceId)) {
                    return true;
                }
            }
            return false;
        }
    }

    public Site findSite(String siteId) {
        return (Site) em.createQuery("select object(o) from Site as o where o.siteId=:siteId order by o.createdOnDtm")
                .setParameter("siteId", Long.valueOf(siteId))
                .getSingleResult();
    }

    @TransactionAttribute(TransactionAttributeType.REQUIRED)
    public void approvePublicationSave(String siteId, String nonSprDataReviewedYn, String dataReviewedYn, String businessReviewedYn, String pabReviewedYn, String siteCertifiedYn, String publishYn, String userName) {
        Site site = this.findSite(siteId);

        if (!"Y".equals(site.getNonSprDataReviewedYn()) && "Y".equals(nonSprDataReviewedYn)) {
            site.setNonSprDataReviewedOnDtm(new Date());
            site.setNonSprDataReviewedByNm(userName);
        } else if ("Y".equals(site.getNonSprDataReviewedYn()) && !"Y".equals(nonSprDataReviewedYn)) {
            site.setNonSprDataReviewedOnDtm(null);
            site.setNonSprDataReviewedByNm(null);
        }
        if (!"Y".equals(site.getDataReviewCompleteYn()) && "Y".equals(dataReviewedYn)) {
            site.setDataReviewCompltOnDtm(new Date());
            site.setDataReviewCmpltByNm(userName);
        } else if ("Y".equals(site.getDataReviewCompleteYn()) && !"Y".equals(dataReviewedYn)) {
            site.setDataReviewCompltOnDtm(null);
            site.setDataReviewCmpltByNm(null);
        }
        if (!"Y".equals(site.getBusinessReviewCompleteYn()) && "Y".equals(businessReviewedYn)) {
            site.setBusinessReviewCompltOnDtm(new Date());
            site.setBusinessReviewCmpltByNm(userName);
        } else if ("Y".equals(site.getBusinessReviewCompleteYn()) && !"Y".equals(businessReviewedYn)) {
            site.setBusinessReviewCompltOnDtm(null);
            site.setBusinessReviewCmpltByNm(null);
        }
        if (!"Y".equals(site.getPabReviewCompleteYn()) && "Y".equals(pabReviewedYn)) {
            site.setPabReviewCompleteOnDtm(new Date());
            site.setPabReviewCompleteByNm(userName);
        } else if ("Y".equals(site.getPabReviewCompleteYn()) && !"Y".equals(pabReviewedYn)) {
            site.setPabReviewCompleteOnDtm(null);
            site.setPabReviewCompleteByNm(null);
        }
        site.setNonSprDataReviewedYn(nonSprDataReviewedYn);
        site.setDataReviewCompleteYn(dataReviewedYn);
        site.setBusinessReviewCompleteYn(businessReviewedYn);
        site.setPabReviewCompleteYn(pabReviewedYn);

        site.setSiteCertifiedYn(siteCertifiedYn);
        site.setPublishedYn(publishYn);
        site.setPublishedOnDtm(new Date());
        site.setPublishedByNm(userName);
        site.setLastModifiedOnDtm(Calendar.getInstance().getTime());
        em.merge(site);
//        String nonSprProc = "{call swt_snapshotload_pkg.pr_load_non_spr_data("+siteId+")}";
//        JdbcTemplate jt = new JdbcTemplate(ds);
//        jt.execute(nonSprProc);
    }

    public List<Site> findSites(Boolean published) {
        String query = "select object(o) from Site as o where o.publishedYn=:publishedYn order by o.createdOnDtm DESC";
        return em.createQuery(query)
                .setParameter("publishedYn", published ? "Y" : "N")
                .getResultList();
    }

    public List<Site> findSitesForApprovePublication(Boolean published) {
        StringBuilder sb = new StringBuilder();
        sb.append("SELECT * FROM swt_site s WHERE s.PUBLISHED_YN=?1 ");
        sb.append("AND s.load_process_end_dtm IS NOT NULL AND EXISTS ");
        sb.append("(SELECT 1 FROM swt_site_statistic ss WHERE ss.site_id = s.site_id ");
        sb.append("AND ss.wt2_fifty_pct_weeks_nbr > 0 AND ROWNUM = 1)");
        return em.createNativeQuery(sb.toString())
                .setParameter(1, published ? "Y" : "N")
                .getResultList();
    }

    @TransactionAttribute(TransactionAttributeType.REQUIRED)
    public void refreshSite(String siteId) {
        Site site = (Site) em.createQuery("select object(o) from Site as o where o.siteId=" + siteId).getSingleResult();
        em.refresh(site);
    }

    public Boolean hasWarningForApproveSitePublication(String siteId) {
        StringBuilder sb = new StringBuilder();
        sb.append("SELECT COUNT (1) ");
        sb.append("FROM swt_site_facility sf, swt_rollup_facility rf ");
        sb.append("WHERE sf.site_id = ?1 ");
        sb.append("AND rf.rollup_facility_id = sf.rollup_facility_id ");
        sb.append("AND (rf.address_full_txt IS NULL ");
        sb.append("OR rf.latitude_nbr IS NULL ");
        sb.append("OR rf.longitude_nbr IS NULL ");
        sb.append(")");
        BigDecimal result = (BigDecimal) em.createNativeQuery(sb.toString())
                .setParameter(1, Long.valueOf(siteId))
                .getSingleResult();
        return (result != null && result.intValue() != 0);
    }

    public List<PublicSiteStatisticsTo> findPublicSiteStatistics(String siteId, String adult) {
        String query = "SELECT * FROM SWT_PUBLIC_SITE_STATISTICS_VW WHERE SITE_ID=?1 AND ADULT=?2";
        List<PublicSiteStatisticsTo> result = (List) em.createNativeQuery(query, PublicSiteStatisticsTo.class)
                .setParameter(1, Long.valueOf(siteId))
                .setParameter(2, adult)
                .getResultList();
        return result;

    }

    public Boolean areStatisticsComputed(String siteId) {
        List results = em.createNativeQuery("select SITE_STATISTIC_ID from SWT_SITE_STATISTIC where site_id=?1 and rownum=1")
                .setParameter(1, Long.valueOf(siteId))
                .getResultList();
        if (results == null || results.size() == 0) {
            return false;
        } else {
            List validSite = em.createNativeQuery("select 1 from SWT_SITE where site_id=?1 and LOAD_PROCESS_END_DTM IS NOT NULL")
                    .setParameter(1, Long.valueOf(siteId))
                    .getResultList();
            return validSite.size() > 0;
        }
    }

}
