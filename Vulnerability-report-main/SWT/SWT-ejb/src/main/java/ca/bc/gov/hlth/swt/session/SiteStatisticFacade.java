/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.session;

import ca.bc.gov.hlth.swt.entity.MonthCompareStatisctic;
import ca.bc.gov.hlth.swt.entity.SimpleSiteStatistic;
import ca.bc.gov.hlth.swt.entity.Site;
import ca.bc.gov.hlth.swt.entity.SiteStatistic;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Business Class for working with Site Statistics
 *
 * @author greg.perkins
 */
@Stateless
public class SiteStatisticFacade implements SiteStatisticFacadeLocal {

    @PersistenceContext(unitName = "SWT-ejbPU")
    private EntityManager em;
    private Map cache = new HashMap();

    public void create(SiteStatistic siteStatistic) {
        em.persist(siteStatistic);
    }

    public void edit(SiteStatistic siteStatistic) {
        em.merge(siteStatistic);
    }

    public void remove(SiteStatistic siteStatistic) {
        em.remove(em.merge(siteStatistic));
    }

    public SiteStatistic find(Object id) {
        return em.find(ca.bc.gov.hlth.swt.entity.SiteStatistic.class, id);
    }

    public List<SiteStatistic> findAll() {
        return em.createQuery("select object(o) from SiteStatistic as o").getResultList();
    }

    /**
     * Runs a query to find a single statistic
     *
     * @param siteId
     * @param facilityId
     * @param procedureGroupId
     * @param surgeonId
     * @return
     */
    public SiteStatistic search(String sessionId, Long siteId, List<Long> facilityId, Long procedureGroupId, Long surgeonId, String adult) {
        StringBuilder queryStr = new StringBuilder();
        queryStr.append("select o.* ");
        queryStr.append("from SWT_SITE_STATISTIC o ");
        queryStr.append("where o.site_Id = ?1 ");
        queryStr.append(" and o.adult = ?2 ");
        queryStr.append(" and o.rollup_Facility_Id ");
        int c = 3;
        if (facilityId != null) {
            queryStr.append(" IN (");
            for (int i = 1; i < facilityId.size(); i++) {
                queryStr.append("?," + (c++) + " ");
            }
            queryStr.deleteCharAt(queryStr.length() - 1).toString();
            queryStr.append(") ");
        } else {
            queryStr.append(" is null ");
        }
        queryStr.append(" and o.rollup_Procedure_Group_Id");
        if (procedureGroupId != null) {
            queryStr.append(" = ?" + (c++) + " ");
        } else {
            queryStr.append(" is null ");
        }
        queryStr.append(" and o.rollup_Surgeon_Id");
        if (surgeonId != null) {
            queryStr.append(" = ?" + (c++) + " ");
        } else {
            queryStr.append(" is null ");
        }
        queryStr.append(" and o.ROLLUP_INTERVENTION_TYPE_ID IS NULL ");
        queryStr.append(" and o.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
        queryStr.append(" and o.ROLLUP_ENCOUNTER_TYPE_ID IS NULL ");
        queryStr.append(" and o.ROLLUP_CANCER_SUSPECTED_ID IS NULL ");
        queryStr.append(" and o.ROLLUP_PRIORITY_ID IS NULL ");
        //queryStr.append(" and o.ROLLUP_HEALTH_AUTHORITY_ID IS NULL ");
        Query query = em.createNativeQuery(queryStr.toString(), SiteStatistic.class);
        if (siteId != null) {
            query.setParameter(1, siteId);
        }

        if (adult != null) {
            query.setParameter(2, adult);
        }

        c = 3;
        if (facilityId != null) {
//             query.setParameter(c++, facilityId);
            for (int i = 0; i < facilityId.size(); i++) {
                query.setParameter(c++, facilityId.get(i));
            }
        }
        if (procedureGroupId != null) {
            query.setParameter(c++, procedureGroupId);
        }
        if (surgeonId != null) {
            query.setParameter(c++, surgeonId);
        }
        long time = System.currentTimeMillis();
        List l = query.getResultList();
        System.out.println((System.currentTimeMillis() - time) + "ms to execute query");
        if (l.size() > 0) {
            return (SiteStatistic) (l.get(0));
        } else {
            return new SiteStatistic();
        }
    }

    /**
     * Runs a query to find site statistics If defaultNulls is true, criteria not specified will have IS NULL added.
     *
     * @param siteId
     * @param rollupHealthAuthorityId
     * @param rollupInterventionTypeId
     * @param rollupProcedureGroupId
     * @param rollupFacilityId
     * @param rollupSurgeonId
     * @param rollupEncounterTypeId
     * @param rollupCancerSuspectedId
     * @param defaultNulls
     * @return List
     */
    public List findStatistics(String sessionId,
            Long siteId,
            Long rollupHealthAuthorityId,
            Long rollupProcedureGroupId,
            List<Long> rollupFacilityId,
            Long rollupSurgeonId,
            String adult,
            boolean validHA) {

        List params = new ArrayList();
        StringBuilder queryStr = new StringBuilder();
        int count = 1;

        queryStr.append(" select ");
        queryStr.append(" decode(s.rollup_surgeon_id,null,null,surgeon.surgeon_last_nm||', '||surgeon.surgeon_first_nm) surgeon_nm, procedure.procedure_group_nm, facility.facility_nm, healthAuthority.health_authority_nm, ");
        queryStr.append(" DECODE (PROCEDURE.NON_SPR_YN,'N','Surgical Patient Registry','Y',DECODE(PROCEDURE.PROCEDURE_GROUP_NM,'Corneal Transplants','Eye Bank of BC','Open Heart Surgery','Cardiac Services BC','Coronary Artery Bypass Graft','Cardiac Services BC ','Radiotherapy','BC Cancer Agency','Hip Fracture Fixation','Hospital Discharge Information')) as DATA_SOURCE, ");
        queryStr.append(" s.SITE_STATISTIC_ID,");
        queryStr.append(" s.ROLLUP_PROCEDURE_GROUP_ID,");
        queryStr.append(" s.ROLLUP_FACILITY_ID,");
        queryStr.append(" s.ROLLUP_SURGEON_ID,");
        queryStr.append(" s.PATIENTS_WAITING_NBR,");
        queryStr.append(" s.PROCEDURES_PERFORMED_NBR,");
        queryStr.append(" s.WT1_FIFTY_PCT_WEEKS_NBR,");
        queryStr.append(" s.WT1_NINETY_PCT_WEEKS_NBR,");
        queryStr.append(" s.WT2_FIFTY_PCT_WEEKS_NBR,");
        queryStr.append(" s.WT2_NINETY_PCT_WEEKS_NBR,");
        queryStr.append(" r1.PATIENTS_WAITING_NBR R1_PATIENTS_WAITING_NBR,");
        queryStr.append(" r1.PROCEDURES_PERFORMED_NBR R1_PROCEDURES_PERFORMED_NBR,");
        queryStr.append(" r1.WT1_FIFTY_PCT_WEEKS_NBR WT1_R1_FIFTY_PCT_WEEKS_NBR,");
        queryStr.append(" r1.WT2_FIFTY_PCT_WEEKS_NBR WT2_R1_FIFTY_PCT_WEEKS_NBR,");
        queryStr.append(" r1.WT1_NINETY_PCT_WEEKS_NBR WT1_R1_NINETY_PCT_WEEKS_NBR,");
        queryStr.append(" r1.WT2_NINETY_PCT_WEEKS_NBR WT2_R1_NINETY_PCT_WEEKS_NBR,");
        queryStr.append(" r2.PATIENTS_WAITING_NBR R2_PATIENTS_WAITING_NBR,");
        queryStr.append(" r2.PROCEDURES_PERFORMED_NBR R2_PROCEDURES_PERFORMED_NBR,");
        queryStr.append(" r2.WT1_FIFTY_PCT_WEEKS_NBR WT1_R2_FIFTY_PCT_WEEKS_NBR,");
        queryStr.append(" r2.WT2_FIFTY_PCT_WEEKS_NBR WT2_R2_FIFTY_PCT_WEEKS_NBR,");
        queryStr.append(" r2.WT1_NINETY_PCT_WEEKS_NBR WT1_R2_NINETY_PCT_WEEKS_NBR,");
        queryStr.append(" r2.WT2_NINETY_PCT_WEEKS_NBR WT2_R2_NINETY_PCT_WEEKS_NBR,");
        queryStr.append(" r3.PATIENTS_WAITING_NBR R3_PATIENTS_WAITING_NBR,");
        queryStr.append(" r3.PROCEDURES_PERFORMED_NBR R3_PROCEDURES_PERFORMED_NBR,");
        queryStr.append(" r3.WT1_FIFTY_PCT_WEEKS_NBR WT1_R3_FIFTY_PCT_WEEKS_NBR,");
        queryStr.append(" r3.WT2_FIFTY_PCT_WEEKS_NBR WT2_R3_FIFTY_PCT_WEEKS_NBR,");
        queryStr.append(" r3.WT1_NINETY_PCT_WEEKS_NBR WT1_R3_NINETY_PCT_WEEKS_NBR,");
        queryStr.append(" r3.WT2_NINETY_PCT_WEEKS_NBR WT2_R3_NINETY_PCT_WEEKS_NBR,");
        queryStr.append(" procedure.non_spr_yn ");

        queryStr.append(" from SWT_Site_Statistic s, SWT_Site_Statistic r1, SWT_Site_Statistic r2, SWT_Site_Statistic r3, SWT_ROLLUP_SURGEON surgeon, SWT_ROLLUP_PROCEDURE_GROUP procedure, SWT_ROLLUP_FACILITY facility, SWT_ROLLUP_HEALTH_AUTHORITY healthAuthority, SWT_INTERVENTION_TYPE i ");
        queryStr.append(" WHERE ");
        queryStr.append(" procedure.INTERVENTION_TYPE_CD = i.INTERVENTION_TYPE_CD(+)");
        queryStr.append(" AND s.ROLLUP_SURGEON_ID = surgeon.ROLLUP_SURGEON_ID(+)");
        queryStr.append(" AND s.ROLLUP_PROCEDURE_GROUP_ID = procedure.ROLLUP_PROCEDURE_GROUP_ID(+)");
        queryStr.append(" AND s.ROLLUP_FACILITY_ID = facility.ROLLUP_FACILITY_ID(+)");
        queryStr.append(" AND s.ROLLUP_HEALTH_AUTHORITY_ID = healthAuthority.ROLLUP_HEALTH_AUTHORITY_ID(+)");
        queryStr.append(" AND (s.rollup_Procedure_group_Id IS NOT NULL AND s.rollup_Health_Authority_Id IS NOT NULL AND s.rollup_Facility_Id IS NOT NULL AND s.rollup_surgeon_id IS NOT NULL) ");
        queryStr.append(" AND r1.ROLLUP_SURGEON_ID IS NULL ");
        queryStr.append(" AND r1.ROLLUP_FACILITY_ID = s.ROLLUP_FACILITY_ID ");
        queryStr.append(" AND r1.ROLLUP_HEALTH_AUTHORITY_ID = s.ROLLUP_HEALTH_AUTHORITY_ID ");
        queryStr.append(" AND r1.ROLLUP_PROCEDURE_GROUP_ID = s.ROLLUP_PROCEDURE_GROUP_ID ");
        queryStr.append(" AND r1.site_id = s.site_id ");
        queryStr.append(" AND r1.adult = s.adult ");
        queryStr.append(" AND r2.ROLLUP_SURGEON_ID IS NULL ");
        queryStr.append(" AND r2.ROLLUP_FACILITY_ID IS NULL ");
        queryStr.append(" AND r2.ROLLUP_HEALTH_AUTHORITY_ID = s.ROLLUP_HEALTH_AUTHORITY_ID ");
        queryStr.append(" AND r2.ROLLUP_PROCEDURE_GROUP_ID = s.ROLLUP_PROCEDURE_GROUP_ID ");
        queryStr.append(" AND r2.site_id = s.site_id ");
        queryStr.append(" AND r2.adult = s.adult ");
        queryStr.append(" AND r3.site_id = s.site_id ");
        queryStr.append(" AND r3.adult = s.adult ");
        queryStr.append(" AND r3.ROLLUP_SURGEON_ID IS NULL ");
        queryStr.append(" AND r3.ROLLUP_FACILITY_ID IS NULL ");
        queryStr.append(" AND r3.ROLLUP_HEALTH_AUTHORITY_ID IS NULL ");
        queryStr.append(" AND r3.ROLLUP_PROCEDURE_GROUP_ID = s.ROLLUP_PROCEDURE_GROUP_ID ");

        if (siteId != null) {
            queryStr.append(" AND s.site_id = ?" + count++);
            params.add(siteId);
        }

        if (adult != null) {
            queryStr.append(" AND s.adult = ?" + count++);
            params.add(adult);
        }

        if (rollupHealthAuthorityId != null) {
            queryStr.append(" AND s.rollup_Health_Authority_Id = ?" + count++);
            params.add(rollupHealthAuthorityId);
        } else if (rollupHealthAuthorityId == null && validHA == false) {
            queryStr.append(" AND s.rollup_Health_Authority_Id IS NULL ");
        }

        if (rollupFacilityId != null) {
            if (rollupFacilityId.size() > 0) {
                queryStr.append(" AND s.rollup_Facility_Id IN (");
                queryStr.append("?" + (count++) + " ");
                if (rollupFacilityId.size() > 0) {
                    for (int i = 1; i < rollupFacilityId.size(); i++) {
                        queryStr.append(",?" + (count++) + " ");
                    }
                    queryStr.deleteCharAt(queryStr.length() - 1).toString();
                }
                queryStr.append(") ");
                params.add(rollupFacilityId);
            }
        }

        if (rollupSurgeonId != null) {
            queryStr.append(" AND s.rollup_Surgeon_Id = ?" + count++);
            params.add(rollupSurgeonId);
        }

        if (rollupProcedureGroupId != null) {
            queryStr.append(" AND s.rollup_Procedure_Group_Id = ?" + count++);
            params.add(rollupProcedureGroupId);
        }

        //Equivalent for the old website "All Scheduled Surgeries" selected
        queryStr.append(" AND s.rollup_Encounter_Type_Id is null");
        queryStr.append(" AND r1.rollup_Encounter_Type_Id is null");
        queryStr.append(" AND r2.rollup_Encounter_Type_Id is null");
        queryStr.append(" AND r3.rollup_Encounter_Type_Id is null");

        //Equivalent for the old website "All Cases" selected
        queryStr.append(" AND s.rollup_Cancer_Suspected_Id is null");
        queryStr.append(" AND r1.rollup_Cancer_Suspected_Id is null");
        queryStr.append(" AND r2.rollup_Cancer_Suspected_Id is null");
        queryStr.append(" AND r3.rollup_Cancer_Suspected_Id is null");

        queryStr.append(" AND s.ROLLUP_SPECIALTY_GROUP_ID is null");
        queryStr.append(" AND r1.ROLLUP_SPECIALTY_GROUP_ID is null");
        queryStr.append(" AND r2.ROLLUP_SPECIALTY_GROUP_ID is null");
        queryStr.append(" AND r3.ROLLUP_SPECIALTY_GROUP_ID is null");
        queryStr.append(" AND s.ROLLUP_PRIORITY_ID is null");
        queryStr.append(" AND r1.ROLLUP_PRIORITY_ID is null");
        queryStr.append(" AND r2.ROLLUP_PRIORITY_ID is null");
        queryStr.append(" AND r3.ROLLUP_PRIORITY_ID is null");
        queryStr.append(" AND PROCEDURE.NON_SPR_YN = 'N'");
        queryStr.append(" AND s.rollup_Procedure_group_Id IS NOT NULL AND s.rollup_Health_Authority_Id IS NOT NULL AND s.rollup_Facility_Id IS NOT NULL AND s.rollup_surgeon_id IS NOT NULL");

        queryStr.append(" UNION ");

        queryStr.append("select ");
        queryStr.append(" decode(s.rollup_surgeon_id,null,null,surgeon.surgeon_last_nm||', '||surgeon.surgeon_first_nm) surgeon_nm, procedure.procedure_group_nm, facility.facility_nm, healthAuthority.health_authority_nm, ");
        queryStr.append(" DECODE (PROCEDURE.NON_SPR_YN,'N','Surgical Patient Registry','Y',DECODE(PROCEDURE.PROCEDURE_GROUP_NM,'Corneal Transplants','Eye Bank of BC','Open Heart Surgery','Cardiac Services BC','Coronary Artery Bypass Graft','Cardiac Services BC ','Radiotherapy','BC Cancer Agency','Hip Fracture Fixation','Hospital Discharge Information')) as DATA_SOURCE, ");
        queryStr.append(" s.SITE_STATISTIC_ID,");
        queryStr.append(" s.ROLLUP_PROCEDURE_GROUP_ID,");
        queryStr.append(" s.ROLLUP_FACILITY_ID,");
        queryStr.append(" s.ROLLUP_SURGEON_ID,");
        queryStr.append(" s.PATIENTS_WAITING_NBR,");
        queryStr.append(" s.PROCEDURES_PERFORMED_NBR,");
        queryStr.append(" s.WT1_FIFTY_PCT_WEEKS_NBR,");
        queryStr.append(" s.WT1_NINETY_PCT_WEEKS_NBR,");
        queryStr.append(" s.WT2_FIFTY_PCT_WEEKS_NBR,");
        queryStr.append(" s.WT2_NINETY_PCT_WEEKS_NBR,");
        queryStr.append(" NULL R1_PATIENTS_WAITING_NBR,");
        queryStr.append(" NULL R1_PROCEDURES_PERFORMED_NBR,");
        queryStr.append(" NULL WT1_R1_FIFTY_PCT_WEEKS_NBR,");
        queryStr.append(" NULL WT2_R1_FIFTY_PCT_WEEKS_NBR,");
        queryStr.append(" NULL WT1_R1_NINETY_PCT_WEEKS_NBR,");
        queryStr.append(" NULL WT2_R1_NINETY_PCT_WEEKS_NBR,");
        queryStr.append(" NULL R2_PATIENTS_WAITING_NBR,");
        queryStr.append(" NULL R2_PROCEDURES_PERFORMED_NBR,");
        queryStr.append(" NULL WT1_R2_FIFTY_PCT_WEEKS_NBR,");
        queryStr.append(" NULL WT2_R2_FIFTY_PCT_WEEKS_NBR,");
        queryStr.append(" NULL WT1_R2_NINETY_PCT_WEEKS_NBR,");
        queryStr.append(" NULL WT2_R2_NINETY_PCT_WEEKS_NBR,");
        queryStr.append(" NULL R3_PATIENTS_WAITING_NBR,");
        queryStr.append(" NULL R3_PROCEDURES_PERFORMED_NBR,");
        queryStr.append(" NULL WT1_R3_FIFTY_PCT_WEEKS_NBR,");
        queryStr.append(" NULL WT2_R3_FIFTY_PCT_WEEKS_NBR,");
        queryStr.append(" NULL WT1_R3_NINETY_PCT_WEEKS_NBR,");
        queryStr.append(" NULL WT2_R3_NINETY_PCT_WEEKS_NBR,");
        queryStr.append(" procedure.non_spr_yn ");
        queryStr.append(" from SWT_Site_Statistic s,  SWT_ROLLUP_SURGEON surgeon, SWT_ROLLUP_PROCEDURE_GROUP procedure, SWT_ROLLUP_FACILITY facility, SWT_ROLLUP_HEALTH_AUTHORITY healthAuthority, SWT_INTERVENTION_TYPE i ");
        queryStr.append(" WHERE ");
        queryStr.append(" procedure.INTERVENTION_TYPE_CD = i.INTERVENTION_TYPE_CD(+)");
        queryStr.append(" AND s.ROLLUP_SURGEON_ID = surgeon.ROLLUP_SURGEON_ID(+)");
        queryStr.append(" AND s.ROLLUP_PROCEDURE_GROUP_ID = procedure.ROLLUP_PROCEDURE_GROUP_ID(+)");
        queryStr.append(" AND s.ROLLUP_FACILITY_ID = facility.ROLLUP_FACILITY_ID(+)");
        queryStr.append(" AND s.ROLLUP_HEALTH_AUTHORITY_ID = healthAuthority.ROLLUP_HEALTH_AUTHORITY_ID(+)");

        if (siteId != null) {
            queryStr.append(" AND s.site_id = ?" + count++);
            params.add(siteId);
        }

        if (adult != null) {
            queryStr.append(" AND s.adult = ?" + count++);
            params.add(adult);
        }

        if (rollupHealthAuthorityId != null) {
            queryStr.append(" AND s.rollup_Health_Authority_Id = ?" + count++);
            params.add(rollupHealthAuthorityId);
        } else if (rollupHealthAuthorityId == null && validHA == false) {
            queryStr.append(" AND s.rollup_Health_Authority_Id IS NULL ");
        }

        if (rollupFacilityId != null) {
            if (rollupFacilityId.size() > 0) {
                queryStr.append(" AND s.rollup_Facility_Id IN (");
                queryStr.append("?" + (count++) + " ");
                if (rollupFacilityId.size() > 0) {
                    for (int i = 1; i < rollupFacilityId.size(); i++) {
                        queryStr.append(",?" + (count++) + " ");
                    }
                    queryStr.deleteCharAt(queryStr.length() - 1).toString();
                }
                queryStr.append(") ");
                params.add(rollupFacilityId);
            }
        }

        if (rollupSurgeonId != null) {
            queryStr.append(" AND s.rollup_Surgeon_Id = ?" + count++);
            params.add(rollupSurgeonId);
        }

        if (rollupProcedureGroupId != null) {
            queryStr.append(" AND s.rollup_Procedure_Group_Id = ?" + count++);
            params.add(rollupProcedureGroupId);
        }

        queryStr.append(" AND s.rollup_Encounter_Type_Id is null ");
        queryStr.append(" AND s.rollup_Cancer_Suspected_Id is null ");
        queryStr.append(" AND s.ROLLUP_SPECIALTY_GROUP_ID is null ");
        queryStr.append(" AND s.ROLLUP_PRIORITY_ID is null ");
        queryStr.append(" AND PROCEDURE.NON_SPR_YN = 'Y' ");

        queryStr.append(" ORDER BY ");
        queryStr.append(" NON_SPR_YN, ");
        queryStr.append(" DATA_SOURCE, ");
        queryStr.append(" health_authority_nm nulls first,");
        queryStr.append(" facility_nm  nulls first,");
        queryStr.append(" surgeon_nm nulls first, ");
        queryStr.append(" procedure_group_nm nulls first ");

        //System.out.println(queryStr);
        //TODO make sure that the cache is not necessary and remove it properly from everywhere
        List<SimpleSiteStatistic> results = null;

        Query query = em.createNativeQuery(queryStr.toString(), SimpleSiteStatistic.class);
        int c = 1;
        for (int i = 0; i < params.size(); i++) {
            if (params.get(i) instanceof List) {
                List listparams = (List) params.get(i);
                for (int j = 0; j < listparams.size(); j++) {
                    Long facilityId = Long.valueOf(listparams.get(j).toString());
                    query.setParameter(c, facilityId);
                    c++;
                }
            } else {
                query.setParameter(c, params.get(i));
                c++;
            }
        }

        results = query.getResultList();

        return results;
    }

    public List findStatisticsForFacilityProcedure(Long siteId, String adult) {
        List params = new ArrayList();
        List predicates = new ArrayList();
        StringBuilder queryStr = new StringBuilder();
        queryStr.append("select ");
        queryStr.append("decode(s.rollup_surgeon_id,null,null,surgeon.surgeon_last_nm||', '||surgeon.surgeon_first_nm) surgeon_nm, procedure.procedure_group_nm, facility.facility_nm, healthAuthority.health_authority_nm, s.*, ");
        queryStr.append("DECODE (PROCEDURE.NON_SPR_YN,null,'Surgical Patient Registry','N','Surgical Patient Registry','Y',DECODE(PROCEDURE.PROCEDURE_GROUP_NM,'Corneal Transplants','Eye Bank of BC','Open Heart Surgery','Cardiac Services BC','Coronary Artery Bypass Graft','Cardiac Services BC ','Radiotherapy','BC Cancer Agency','Hip Fracture Fixation','Hospital Discharge Information')) as DATA_SOURCE ");
        queryStr.append("from SWT_Site_Statistic s, SWT_ROLLUP_SURGEON surgeon, SWT_ROLLUP_PROCEDURE_GROUP procedure, SWT_ROLLUP_FACILITY facility, SWT_ROLLUP_HEALTH_AUTHORITY healthAuthority ");
        predicates.add("s.ROLLUP_SURGEON_ID = surgeon.ROLLUP_SURGEON_ID(+)");
        predicates.add("s.ROLLUP_PROCEDURE_GROUP_ID = procedure.ROLLUP_PROCEDURE_GROUP_ID(+)");
        predicates.add("s.ROLLUP_FACILITY_ID = facility.ROLLUP_FACILITY_ID(+)");
        predicates.add("s.ROLLUP_HEALTH_AUTHORITY_ID = healthAuthority.ROLLUP_HEALTH_AUTHORITY_ID(+)");
        predicates.add("site_id = ?1");
        params.add(siteId);
        predicates.add("s.adult = ?2");
        params.add(adult);
        predicates.add("s.rollup_Encounter_Type_Id is null");
        predicates.add("s.rollup_Cancer_Suspected_Id is null");
        predicates.add("s.ROLLUP_SPECIALTY_GROUP_ID is null");
        predicates.add("s.ROLLUP_SURGEON_ID is null");
        predicates.add("s.ROLLUP_PRIORITY_ID is null");
        String rollups[] = {"rollup_Health_Authority_Id", "rollup_Facility_Id", "rollup_Procedure_group_Id", "rollup_Surgeon_Id"};
        predicates.add("(PROCEDURE.NON_SPR_YN = 'Y' OR (s." + rollups[0] + " IS NOT NULL AND (s." + rollups[1] + " IS NOT NULL OR (s." + rollups[1] + " IS NULL AND s." + rollups[2] + " IS NULL AND s." + rollups[3] + " IS NULL)) AND (s." + rollups[2] + " IS NOT NULL OR (s." + rollups[2] + " IS NULL AND s." + rollups[3] + " IS NULL)) ) OR (s.ROLLUP_HEALTH_AUTHORITY_ID IS NULL AND s.ROLLUP_PROCEDURE_GROUP_ID IS NULL AND s.ROLLUP_FACILITY_ID IS NULL) )");

        for (int i = 0; i < predicates.size(); i++) {
            if (i == 0) {
                queryStr.append(" WHERE ");
            } else {
                queryStr.append(" AND ");
            }
            queryStr.append(predicates.get(i));
        }
        queryStr.append(" ORDER BY ");
        queryStr.append("DECODE(DATA_SOURCE,'Surgical Patient Registry',1,2), ");
        queryStr.append("DATA_SOURCE, ");
        queryStr.append("healthauthority.health_authority_nm nulls first,");
        queryStr.append("facility.facility_nm nulls first,");
        queryStr.append("procedure.sort_order_nbr nulls first, ");
        queryStr.append("procedure.procedure_group_nm nulls first ");
        //System.out.println(queryStr);
        List results = null;
        Query query = em.createNativeQuery(queryStr.toString(), SimpleSiteStatistic.class);
        for (int i = 0; i < params.size(); i++) {
            query.setParameter(i + 1, params.get(i));
        }
        results = query.getResultList();

        return results;
    }

    public List findStatisticsForProcedureFacility(Long siteId, String adult) {
        List params = new ArrayList();
        List predicates = new ArrayList();
        StringBuilder queryStr = new StringBuilder();
        queryStr.append("select ");
        queryStr.append("decode(s.rollup_surgeon_id,null,null,surgeon.surgeon_last_nm||', '||surgeon.surgeon_first_nm) surgeon_nm, procedure.procedure_group_nm, facility.facility_nm, healthAuthority.health_authority_nm, s.*, ");
        queryStr.append("DECODE (PROCEDURE.NON_SPR_YN,null,'Surgical Patient Registry','N','Surgical Patient Registry','Y',DECODE(PROCEDURE.PROCEDURE_GROUP_NM,'Corneal Transplants','Eye Bank of BC','Open Heart Surgery','Cardiac Services BC','Coronary Artery Bypass Graft','Cardiac Services BC ','Radiotherapy','BC Cancer Agency','Hip Fracture Fixation','Hospital Discharge Information')) as DATA_SOURCE ");
        queryStr.append("from SWT_Site_Statistic s, SWT_ROLLUP_SURGEON surgeon, SWT_ROLLUP_PROCEDURE_GROUP procedure, SWT_ROLLUP_FACILITY facility, SWT_ROLLUP_HEALTH_AUTHORITY healthAuthority ");
        predicates.add("s.ROLLUP_SURGEON_ID = surgeon.ROLLUP_SURGEON_ID(+)");
        predicates.add("s.ROLLUP_PROCEDURE_GROUP_ID = procedure.ROLLUP_PROCEDURE_GROUP_ID(+)");
        predicates.add("s.ROLLUP_FACILITY_ID = facility.ROLLUP_FACILITY_ID(+)");
        predicates.add("s.ROLLUP_HEALTH_AUTHORITY_ID = healthAuthority.ROLLUP_HEALTH_AUTHORITY_ID(+)");
        predicates.add("site_id = ?1");
        params.add(siteId);
        predicates.add("s.adult = ?2");
        params.add(adult);
        predicates.add("s.rollup_Encounter_Type_Id is null");
        predicates.add("s.rollup_Cancer_Suspected_Id is null");
        predicates.add("s.ROLLUP_SPECIALTY_GROUP_ID is null");
        predicates.add("s.ROLLUP_SURGEON_ID is null");
        predicates.add("s.ROLLUP_PRIORITY_ID is null");
        String rollups[] = {"rollup_Procedure_group_Id", "rollup_Health_Authority_Id", "rollup_Facility_Id", "rollup_Surgeon_Id"};
        predicates.add("(PROCEDURE.NON_SPR_YN = 'Y' OR (s." + rollups[0] + " IS NOT NULL AND (s." + rollups[1] + " IS NOT NULL OR (s." + rollups[1] + " IS NULL AND s." + rollups[2] + " IS NULL AND s." + rollups[3] + " IS NULL)) AND (s." + rollups[2] + " IS NOT NULL OR (s." + rollups[2] + " IS NULL AND s." + rollups[3] + " IS NULL)) ) OR (s.ROLLUP_HEALTH_AUTHORITY_ID IS NULL AND s.ROLLUP_PROCEDURE_GROUP_ID IS NULL AND s.ROLLUP_FACILITY_ID IS NULL))");

        for (int i = 0; i < predicates.size(); i++) {
            if (i == 0) {
                queryStr.append(" WHERE ");
            } else {
                queryStr.append(" AND ");
            }
            queryStr.append(predicates.get(i));
        }
        queryStr.append(" ORDER BY ");
        queryStr.append("PROCEDURE.NON_SPR_YN NULLS FIRST, ");
        queryStr.append("DATA_SOURCE, ");
        queryStr.append("procedure.sort_order_nbr nulls first, ");
        queryStr.append("procedure.procedure_group_nm nulls first, ");
        queryStr.append("healthauthority.health_authority_nm nulls first,");
        queryStr.append("facility.facility_nm nulls first");
        //System.out.println(queryStr);
        List results = null;
        Query query = em.createNativeQuery(queryStr.toString(), SimpleSiteStatistic.class);
        for (int i = 0; i < params.size(); i++) {
            query.setParameter(i + 1, params.get(i));
        }
        results = query.getResultList();

        return results;
    }

    public List findStatisticsForReport(Long siteId, String adult) {
        List params = new ArrayList();
        List predicates = new ArrayList();
        StringBuilder queryStr = new StringBuilder();
        queryStr.append("select ");
        queryStr.append("decode(s.rollup_surgeon_id,null,null,surgeon.surgeon_last_nm||', '||surgeon.surgeon_first_nm) surgeon_nm, procedure.procedure_group_nm, facility.facility_nm, healthAuthority.health_authority_nm, s.*, ");
        queryStr.append("DECODE (PROCEDURE.NON_SPR_YN,'N','Surgical Patient Registry','Y',DECODE(PROCEDURE.PROCEDURE_GROUP_NM,'Corneal Transplants','Eye Bank of BC','Open Heart Surgery','Cardiac Services BC','Coronary Artery Bypass Graft','Cardiac Services BC ','Radiotherapy','BC Cancer Agency','Hip Fracture Fixation','Hospital Discharge Information')) as DATA_SOURCE ");
        queryStr.append("from SWT_Site_Statistic s, SWT_ROLLUP_SURGEON surgeon, SWT_ROLLUP_PROCEDURE_GROUP procedure, SWT_ROLLUP_FACILITY facility, SWT_ROLLUP_HEALTH_AUTHORITY healthAuthority ");
        predicates.add("s.ROLLUP_SURGEON_ID = surgeon.ROLLUP_SURGEON_ID(+)");
        predicates.add("s.ROLLUP_PROCEDURE_GROUP_ID = procedure.ROLLUP_PROCEDURE_GROUP_ID(+)");
        predicates.add("s.ROLLUP_FACILITY_ID = facility.ROLLUP_FACILITY_ID(+)");
        predicates.add("s.ROLLUP_HEALTH_AUTHORITY_ID = healthAuthority.ROLLUP_HEALTH_AUTHORITY_ID(+)");
        predicates.add("site_id = ?1");
        params.add(siteId);
        predicates.add("adult = ?2");
        params.add(adult);
        predicates.add("s.rollup_Encounter_Type_Id is null");
        predicates.add("s.rollup_Cancer_Suspected_Id is null");
        predicates.add("s.ROLLUP_SPECIALTY_GROUP_ID is null");

        predicates.add("(PROCEDURE.NON_SPR_YN = 'Y' OR (s.rollup_Procedure_group_Id IS NOT NULL AND (s.rollup_Health_Authority_Id IS NOT NULL OR (s.rollup_Health_Authority_Id IS NULL AND s.rollup_Facility_Id IS NULL AND s.rollup_Surgeon_Id IS NULL)) AND (s.rollup_Facility_Id IS NOT NULL OR (s.rollup_facility_id IS NULL AND s.rollup_surgeon_id IS NULL)) ))");

        for (int i = 0; i < predicates.size(); i++) {
            if (i == 0) {
                queryStr.append(" WHERE ");
            } else {
                queryStr.append(" AND ");
            }
            queryStr.append(predicates.get(i));
        }
        queryStr.append(" ORDER BY ");
        queryStr.append("PROCEDURE.NON_SPR_YN, ");

        queryStr.append("DATA_SOURCE ");
        queryStr.append(", ");
        queryStr.append("procedure.procedure_group_nm nulls last, ");
        queryStr.append("healthauthority.health_authority_nm nulls last,");
        queryStr.append("facility.facility_nm nulls last,");
        queryStr.append("surgeon.surgeon_last_nm nulls last");
        //System.out.println(queryStr);
        List results = null;
        Query query = em.createNativeQuery(queryStr.toString(), SimpleSiteStatistic.class);
        for (int i = 0; i < params.size(); i++) {
            query.setParameter(i + 1, params.get(i));
        }
        results = query.getResultList();

        return results;
    }

    /**
     * Determines the Rollup levels for a query
     *
     * @param rollupHealthAuthorityId
     * @param rollupFacilityId
     * @param rollupSurgeonId
     * @param rollupProcedureId
     * @return String[]
     */
    private String[] calculateRollups(Long rollupHealthAuthorityId, Long rollupFacilityId, Long rollupSurgeonId, Long rollupProcedureId) {
        if (rollupProcedureId == null && rollupHealthAuthorityId == null && rollupFacilityId == null && rollupSurgeonId == null) {
            return new String[0];
        }
        List rollupLevels = new ArrayList();
        //if (rollupProcedureId == null) {
        rollupLevels.add("rollup_Procedure_group_Id");
        //}
        //if (rollupHealthAuthorityId == null) {
        rollupLevels.add("rollup_Health_Authority_Id");
        //}
        //if (rollupFacilityId == null) {
        rollupLevels.add("rollup_Facility_Id");
        //}
        //if (rollupSurgeonId == null) {
        rollupLevels.add("rollup_Surgeon_Id");
        //}

        return (String[]) rollupLevels.toArray(new String[]{});
    }

    private Integer findPreviousMonthSiteId(Integer siteId) {
        Site site = em.find(Site.class, (long) siteId);
        int month = site.getSiteMonthNbr();
        int year = site.getSiteYearNbr();
        if (month == 1) {
            month = 12;
            year = year - 1;
        } else {
            month = month - 1;
        }

//BCMOHAM-15588        
//        Query q = em.createNativeQuery("SELECT MAX(SITE_ID) FROM SWT_SITE WHERE SITE_YEAR_NBR = ? AND SITE_MONTH_NBR = ? AND PUBLISHED_YN = 'Y' ");
        Query q = em.createNativeQuery("SELECT MAX(SITE_ID) FROM SWT_SITE WHERE SITE_YEAR_NBR <= ? AND PUBLISHED_YN = 'Y' ");
        q.setParameter(1, year);
        //q.setParameter(2, month);
//*************************************
        BigDecimal row = (BigDecimal) q.getSingleResult();

        return row.intValue();
    }

    private Integer findPreviousYearSiteId(Integer siteId) {
        Site site = em.find(Site.class, (long) siteId);
        int month = site.getSiteMonthNbr();
        int year = site.getSiteYearNbr() - 1;
//BCMOHAM-15588        
//        Query q = em.createNativeQuery("SELECT MAX(SITE_ID) FROM SWT_SITE WHERE SITE_YEAR_NBR = ? AND SITE_MONTH_NBR = ? AND PUBLISHED_YN = 'Y' ");
        Query q = em.createNativeQuery("SELECT MAX(SITE_ID) FROM SWT_SITE WHERE SITE_YEAR_NBR <= ? AND PUBLISHED_YN = 'Y' ");
        q.setParameter(1, year);
        //q.setParameter(2, month);
        BigDecimal row = (BigDecimal) q.getSingleResult();
//********************************************
        return row.intValue();
    }

    private Integer findSitesWithPediatricData() {

        Query q = em.createNativeQuery("SELECT COUNT(S1.SITE_ID) FROM SWT_SITE_STATISTIC S1 "
                + "WHERE S1.ROLLUP_SPECIALTY_GROUP_ID IS NULL "
                + "AND S1.ROLLUP_PROCEDURE_GROUP_ID IS NULL "
                + "AND S1.ADULT = 'N' "
                + "AND S1.ROLLUP_CANCER_SUSPECTED_ID IS NULL "
                + "AND S1.ROLLUP_ENCOUNTER_TYPE_ID IS NULL "
                + "AND S1.ROLLUP_FACILITY_ID IS NULL "
                + "AND S1.ROLLUP_HEALTH_AUTHORITY_ID IS NULL "
                + "AND S1.ROLLUP_INTERVENTION_TYPE_ID IS NULL "
                + "AND S1.ROLLUP_PRIORITY_ID IS NULL "
                + "AND S1.ROLLUP_SURGEON_ID IS NULL");

        BigDecimal row = (BigDecimal) q.getSingleResult();

        return row.intValue();
    }

    private void buildCommonMainQuery(StringBuilder query, int index) {
        query.append("SELECT NULL LABEL, ");
        if (index == 0) {
            query.append("S1.SITE_STATISTIC_ID, ");
            query.append("S1.PATIENTS_WAITING_NBR, ");
            query.append("S1.PROCEDURES_PERFORMED_NBR, ");
            query.append("S1.WT2_FIFTY_PCT_WEEKS_NBR, ");
            query.append("S1.WT2_NINETY_PCT_WEEKS_NBR ");
        } else if (index == 1) {
            query.append("S1.SITE_STATISTIC_ID SITE_STATISTIC_ID_1, ");
            query.append("S1.PATIENTS_WAITING_NBR PATIENTS_WAITING_NBR_1, ");
            query.append("S1.PROCEDURES_PERFORMED_NBR PROCEDURES_PERFORMED_NBR_1, ");
            query.append("S1.WT2_FIFTY_PCT_WEEKS_NBR WT2_FIFTY_PCT_WEEKS_NBR_1, ");
            query.append("S1.WT2_NINETY_PCT_WEEKS_NBR WT2_NINETY_PCT_WEEKS_NBR_1 ");

        } else if (index == 2) {
            query.append("S1.SITE_STATISTIC_ID SITE_STATISTIC_ID_12, ");
            query.append("S1.PATIENTS_WAITING_NBR PATIENTS_WAITING_NBR_12, ");
            query.append("S1.PROCEDURES_PERFORMED_NBR PROCEDURES_PERFORMED_NBR_12, ");
            query.append("S1.WT2_FIFTY_PCT_WEEKS_NBR WT2_FIFTY_PCT_WEEKS_NBR_12, ");
            query.append("S1.WT2_NINETY_PCT_WEEKS_NBR WT2_NINETY_PCT_WEEKS_NBR_12 ");
        }

        query.append("FROM SWT_SITE_STATISTIC S1 ");
        query.append("WHERE S1.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
        query.append("AND S1.ROLLUP_PROCEDURE_GROUP_ID IS NULL ");
        query.append("AND S1.site_id = ? ");
        query.append("AND S1.ADULT = ? ");
        query.append("AND S1.ROLLUP_CANCER_SUSPECTED_ID IS NULL ");
        query.append("AND S1.ROLLUP_ENCOUNTER_TYPE_ID IS NULL ");
        query.append("AND S1.ROLLUP_FACILITY_ID IS NULL ");
        query.append("AND S1.ROLLUP_HEALTH_AUTHORITY_ID IS NULL ");
        query.append("AND S1.ROLLUP_INTERVENTION_TYPE_ID IS NULL ");
        query.append("AND S1.ROLLUP_PRIORITY_ID IS NULL ");
        query.append("AND S1.ROLLUP_SURGEON_ID IS NULL");
    }

    private void buildCommonNullQuery(StringBuilder query) {
        query.append("UNION ");
        query.append("SELECT ");
        query.append("NULL LABEL, ");
        query.append("NULL SITE_STATISTIC_ID, ");
        query.append("NULL PATIENTS_WAITING_NBR, ");
        query.append("NULL PROCEDURES_PERFORMED_NBR, ");
        query.append("NULL WT2_FIFTY_PCT_WEEKS_NBR, ");
        query.append("NULL WT2_NINETY_PCT_WEEKS_NBR ");
        query.append("FROM DUAL");
    }

    private List<MonthCompareStatisctic> buildSpecialCompareTotal(Integer siteId, String adult, Integer prevMonthSiteId, Integer prevYearSiteId, Integer pediatricSiteCount) {

        StringBuilder query = new StringBuilder();
        int index = 0;

        query.append("SELECT * FROM ");
        query.append("(");
        buildCommonMainQuery(query, index++);
        query.append(") T1, "); // First table alias for current site

        if (pediatricSiteCount > 0) {  // if we have at least one site with pediatric data excluding current site
            query.append("(");
            buildCommonMainQuery(query, index++);
            query.append(") T2, "); // Second table alias for last site
        } else {
            query.append("(");
            buildCommonMainQuery(query, index++);
            query.append(" ");
            buildCommonNullQuery(query);
            query.append(") T2, "); // Second table alias for last site
        }

        query.append("(");
        buildCommonMainQuery(query, index);
        query.append(" ");
        buildCommonNullQuery(query);
        query.append(") T3"); // Third table alias for last year site

        Query q = em.createNativeQuery(query.toString(), MonthCompareStatisctic.class);
        q.setParameter(1, siteId);
        q.setParameter(2, adult);
        q.setParameter(3, prevMonthSiteId);
        q.setParameter(4, adult);
        q.setParameter(5, prevYearSiteId);
        q.setParameter(6, adult);

        return q.getResultList();

    }

    private List<MonthCompareStatisctic> buildNormalMonthCompareTotal(Integer siteId, String adult, Integer prevMonthSiteId, Integer prevYearSiteId) {

        StringBuilder query = new StringBuilder();
        query.append("SELECT ");
        query.append("NULL LABEL, ");
        addCommonSelectClause(query);
        query.append("FROM ");
        addCommonFromClause(query);
        query.setCharAt(query.length() - 2, ' ');
        query.append("WHERE ");
        query.append("S1.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
        query.append("AND S2.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
        query.append("AND S3.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
        query.append("AND S3.ROLLUP_PROCEDURE_GROUP_ID IS NULL ");
        query.append("AND S2.ROLLUP_PROCEDURE_GROUP_ID IS NULL ");
        query.append("AND S1.ROLLUP_PROCEDURE_GROUP_ID IS NULL ");
        addCommonWhereClause(query);
        Query q = em.createNativeQuery(query.toString(), MonthCompareStatisctic.class);
        q.setParameter(1, siteId);
        q.setParameter(2, prevMonthSiteId);
        q.setParameter(3, prevYearSiteId);
        q.setParameter(4, adult);
        q.setParameter(5, adult);
        q.setParameter(6, adult);

        return q.getResultList();

    }

    public List<MonthCompareStatisctic> getMonthCompareTotal(Integer siteId, String adult) {
        Integer prevMonthSiteId = findPreviousMonthSiteId(siteId);
        Integer prevYearSiteId = findPreviousYearSiteId(siteId);
        List<MonthCompareStatisctic> result = null;

        if (adult.equals("N")) {
            Integer sitesWithPediatricData = findSitesWithPediatricData();

            if (sitesWithPediatricData - 1 < 12) { // Ensure current site is not included in count
                result = buildSpecialCompareTotal(siteId, adult, prevMonthSiteId, prevYearSiteId, sitesWithPediatricData - 1);
            } else {
                result = buildNormalMonthCompareTotal(siteId, adult, prevMonthSiteId, prevYearSiteId);
            }
        } else {
            result = buildNormalMonthCompareTotal(siteId, adult, prevMonthSiteId, prevYearSiteId);
        }

        return result;
    }

    public List<MonthCompareStatisctic> getMonthCompareSpecialties(Integer siteId, String adult) {
        Integer prevMonthSiteId = findPreviousMonthSiteId(siteId);
        Integer prevYearSiteId = findPreviousYearSiteId(siteId);
        StringBuilder query = new StringBuilder();
        query.append("SELECT ");
        query.append("SG.SPECIALTY_GROUP_NM LABEL, ");
        addCommonSelectClause(query);
        query.append("FROM ");
        addCommonFromClause(query);
        query.append("SWT_ROLLUP_SPECIALTY_GROUP sg ");
        query.append("WHERE ");
        query.append("SG.ROLLUP_SPECIALTY_GROUP_ID = S1.ROLLUP_SPECIALTY_GROUP_ID ");
        query.append("AND S2.ROLLUP_SPECIALTY_GROUP_ID(+) = S1.ROLLUP_SPECIALTY_GROUP_ID ");
        query.append("AND S3.ROLLUP_SPECIALTY_GROUP_ID(+) = S1.ROLLUP_SPECIALTY_GROUP_ID ");
        query.append("AND S3.ROLLUP_PROCEDURE_GROUP_ID IS NULL ");
        query.append("AND S2.ROLLUP_PROCEDURE_GROUP_ID IS NULL ");
        query.append("AND S1.ROLLUP_PROCEDURE_GROUP_ID IS NULL ");
        addCommonWhereClause(query);
        Query q = em.createNativeQuery(query.toString(), MonthCompareStatisctic.class);
        q.setParameter(1, siteId);
        q.setParameter(2, prevMonthSiteId);
        q.setParameter(3, prevYearSiteId);
        q.setParameter(4, adult);
        q.setParameter(5, adult);
        q.setParameter(6, adult);
        return q.getResultList();
    }

    public List<MonthCompareStatisctic> getMonthCompareProcedures(Integer siteId, String adult) {
        Integer prevMonthSiteId = findPreviousMonthSiteId(siteId);
        Integer prevYearSiteId = findPreviousYearSiteId(siteId);
        StringBuilder query = new StringBuilder();
        query.append("SELECT ");
        query.append("DECODE(PG.NATIONAL_PRIORITY_AREA_YN ,'Y', '<b>'||PG.PROCEDURE_GROUP_NM||'</b>', PG.PROCEDURE_GROUP_NM) LABEL, ");
        addCommonSelectClause(query);
        query.append("FROM ");
        addCommonFromClause(query);
        query.append("SWT_ROLLUP_PROCEDURE_GROUP PG ");
        query.append("WHERE ");
        query.append("PG.ROLLUP_PROCEDURE_GROUP_ID = S1.ROLLUP_PROCEDURE_GROUP_ID ");
        query.append("AND S2.ROLLUP_PROCEDURE_GROUP_ID(+) = S1.ROLLUP_PROCEDURE_GROUP_ID ");
        query.append("AND S3.ROLLUP_PROCEDURE_GROUP_ID(+) = S1.ROLLUP_PROCEDURE_GROUP_ID ");
        query.append("AND PG.NON_SPR_YN = 'N' ");
        query.append("AND S3.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
        query.append("AND S2.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
        query.append("AND S1.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
        addCommonWhereClause(query);
        Query q = em.createNativeQuery(query.toString(), MonthCompareStatisctic.class);
        q.setParameter(1, siteId);
        q.setParameter(2, prevMonthSiteId);
        q.setParameter(3, prevYearSiteId);
        q.setParameter(4, adult);
        q.setParameter(5, adult);
        q.setParameter(6, adult);
        return q.getResultList();
    }

    public List<MonthCompareStatisctic> getMonthComparePriorities(Integer siteId, String adult) {
        Integer prevMonthSiteId = findPreviousMonthSiteId(siteId);
        Integer prevYearSiteId = findPreviousYearSiteId(siteId);
        StringBuilder query = new StringBuilder();
        query.append("SELECT ");
        query.append("PG.PROCEDURE_GROUP_NM LABEL, ");
        addCommonSelectClause(query);
        query.append("FROM ");
        addCommonFromClause(query);
        query.append("SWT_ROLLUP_PROCEDURE_GROUP PG ");
        query.append("WHERE ");
        query.append("PG.ROLLUP_PROCEDURE_GROUP_ID = S1.ROLLUP_PROCEDURE_GROUP_ID ");
        query.append("AND S2.ROLLUP_PROCEDURE_GROUP_ID(+) = S1.ROLLUP_PROCEDURE_GROUP_ID ");
        query.append("AND S3.ROLLUP_PROCEDURE_GROUP_ID(+) = S1.ROLLUP_PROCEDURE_GROUP_ID ");
        query.append("AND PG.NATIONAL_PRIORITY_AREA_YN = 'Y' ");
        query.append("AND PG.NON_SPR_YN = 'N' ");
        query.append("AND S3.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
        query.append("AND S2.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
        query.append("AND S1.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
        addCommonWhereClause(query);
        Query q = em.createNativeQuery(query.toString(), MonthCompareStatisctic.class);
        q.setParameter(1, siteId);
        q.setParameter(2, prevMonthSiteId);
        q.setParameter(3, prevYearSiteId);
        q.setParameter(4, adult);
        q.setParameter(5, adult);
        q.setParameter(6, adult);
        return q.getResultList();
    }

    public List<MonthCompareStatisctic> getMonthCompareNonSpr(Integer siteId, String adult) {
        Integer prevMonthSiteId = findPreviousMonthSiteId(siteId);
        Integer prevYearSiteId = findPreviousYearSiteId(siteId);
        StringBuilder query = new StringBuilder();
        query.append("SELECT ");
        query.append("PG.PROCEDURE_GROUP_NM LABEL, ");
        addCommonSelectClause(query);
        query.append("FROM ");
        addCommonFromClause(query);
        query.append("SWT_ROLLUP_PROCEDURE_GROUP PG ");
        query.append("WHERE ");
        query.append("PG.ROLLUP_PROCEDURE_GROUP_ID = S1.ROLLUP_PROCEDURE_GROUP_ID ");
        query.append("AND S2.ROLLUP_PROCEDURE_GROUP_ID(+) = S1.ROLLUP_PROCEDURE_GROUP_ID ");
        query.append("AND S3.ROLLUP_PROCEDURE_GROUP_ID(+) = S1.ROLLUP_PROCEDURE_GROUP_ID ");
        query.append("AND PG.NON_SPR_YN = 'Y' ");
        query.append("AND S3.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
        query.append("AND S2.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
        query.append("AND S1.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
        addCommonWhereClause(query);
        Query q = em.createNativeQuery(query.toString(), MonthCompareStatisctic.class);
        q.setParameter(1, siteId);
        q.setParameter(2, prevMonthSiteId);
        q.setParameter(3, prevYearSiteId);
        q.setParameter(4, adult);
        q.setParameter(5, adult);
        q.setParameter(6, adult);
        return q.getResultList();
    }

    private void addCommonFromClause(StringBuilder query) {
        query.append("SWT_SITE_STATISTIC s1, ");
        query.append("SWT_SITE_STATISTIC s2, ");
        query.append("SWT_SITE_STATISTIC s3, ");
    }

    private void addCommonSelectClause(StringBuilder query) {
        query.append("S1.SITE_STATISTIC_ID, ");
        query.append("S1.PATIENTS_WAITING_NBR, ");
        query.append("S1.PROCEDURES_PERFORMED_NBR, ");
        query.append("S1.WT2_FIFTY_PCT_WEEKS_NBR, ");
        query.append("S1.WT2_NINETY_PCT_WEEKS_NBR, ");
        query.append("S2.PATIENTS_WAITING_NBR PATIENTS_WAITING_NBR_1, ");
        query.append("S2.PROCEDURES_PERFORMED_NBR PROCEDURES_PERFORMED_NBR_1, ");
        query.append("S2.WT2_FIFTY_PCT_WEEKS_NBR WT2_FIFTY_PCT_WEEKS_NBR_1, ");
        query.append("S2.WT2_NINETY_PCT_WEEKS_NBR WT2_NINETY_PCT_WEEKS_NBR_1, ");
        query.append("S3.PATIENTS_WAITING_NBR PATIENTS_WAITING_NBR_12, ");
        query.append("S3.PROCEDURES_PERFORMED_NBR PROCEDURES_PERFORMED_NBR_12, ");
        query.append("S3.WT2_FIFTY_PCT_WEEKS_NBR WT2_FIFTY_PCT_WEEKS_NBR_12, ");
        query.append("S3.WT2_NINETY_PCT_WEEKS_NBR WT2_NINETY_PCT_WEEKS_NBR_12 ");
    }

    private void addCommonWhereClause(StringBuilder query) {
        query.append("AND s1.site_id = ? ");
        query.append("AND s2.site_id(+) = ? ");
        query.append("AND s3.site_id(+) = ? ");
        query.append("AND S1.ADULT = ? ");
        query.append("AND S2.ADULT(+) = ? ");
        query.append("AND S3.ADULT(+) = ? ");
        query.append("AND S1.ROLLUP_CANCER_SUSPECTED_ID IS NULL ");
        query.append("AND S1.ROLLUP_ENCOUNTER_TYPE_ID IS NULL ");
        query.append("AND S1.ROLLUP_FACILITY_ID IS NULL ");
        query.append("AND S1.ROLLUP_HEALTH_AUTHORITY_ID IS NULL ");
        query.append("AND S1.ROLLUP_INTERVENTION_TYPE_ID IS NULL ");
        query.append("AND S1.ROLLUP_PRIORITY_ID IS NULL ");
        query.append("AND S1.ROLLUP_SURGEON_ID IS NULL ");
        query.append("AND S2.ROLLUP_CANCER_SUSPECTED_ID IS NULL ");
        query.append("AND S2.ROLLUP_ENCOUNTER_TYPE_ID IS NULL ");
        query.append("AND S2.ROLLUP_FACILITY_ID IS NULL ");
        query.append("AND S2.ROLLUP_HEALTH_AUTHORITY_ID IS NULL ");
        query.append("AND S2.ROLLUP_INTERVENTION_TYPE_ID IS NULL ");
        query.append("AND S2.ROLLUP_PRIORITY_ID IS NULL ");
        query.append("AND S2.ROLLUP_SURGEON_ID IS NULL ");
        query.append("AND S3.ROLLUP_CANCER_SUSPECTED_ID IS NULL ");
        query.append("AND S3.ROLLUP_ENCOUNTER_TYPE_ID IS NULL ");
        query.append("AND S3.ROLLUP_FACILITY_ID IS NULL ");
        query.append("AND S3.ROLLUP_HEALTH_AUTHORITY_ID IS NULL ");
        query.append("AND S3.ROLLUP_INTERVENTION_TYPE_ID IS NULL ");
        query.append("AND S3.ROLLUP_PRIORITY_ID IS NULL ");
        query.append("AND S3.ROLLUP_SURGEON_ID IS NULL ");
        query.append("ORDER BY DECODE(LABEL,'Other Surgeon Specialties',2,'All Other Procedures',2,null,3,1), REPLACE(LABEL,'<b>','') ");
    }
}
