/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.session;

import ca.bc.gov.hlth.swt.entity.Calculation;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 * A session bean reponsible to submitting recalcution request to the database.
 *
 * @author Adebiyi.Kuseju
 */
@Stateless
public class RecalculateFacade implements RecalculateFacadeLocal {

    @PersistenceContext(unitName = "SWT-ejbPU")
    private EntityManager em;

    /**
     * Creates a new calculation object
     *
     * @param calc
     */
    public void create(Calculation calc) {
        em.persist(calc);
    }

    /**
     * Removes the specified calculation
     *
     * @param calc
     */
    public void remove(Calculation calc) {
        em.persist(em.merge(calc));
    }

    /**
     * Finds a calculation using it's site id.
     *
     * @param id Site id of the calculation to find.
     * @return A Calculation
     */
    public Calculation find(Object id) {
        return em.find(ca.bc.gov.hlth.swt.entity.Calculation.class, id);
    }

    /**
     * Fetches all scheduled recalculations.
     *
     * @return A list of calculations
     */
    public List<Calculation> findAll() {
        return em.createQuery("select object(o) from Calculation as o").getResultList();
    }

    /**
     * Finds recalculations currently in progress
     *
     * @return A list of calculations
     */
    public List<Calculation> findInProgress() {

        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) - 1);
        Date $24hrsBefore = cal.getTime();

        // Only sites which were created within the last 24hrs and their completion date is still null are considered
        // to be in progress. A site is not expected to take up to 24 hrs to be loaded. If a site is still appears
        // as if it is being loaded and it started over 24 hours ago, then most like the site has failed. We don't want
        // such failed site to prevent automatic recalculation that doe not allow two site load operations to run simultaneously
        Query q = em.createQuery("select object(o) from Calculation as o where o.type='Recalculate Now' AND o.createdOnDtm > :oneDayAgo");
        q.setParameter("oneDayAgo", $24hrsBefore);

        return q.getResultList();
    }

    /**
     * Finds recalculations scheduled to run overnight
     *
     * @return A list of calculations
     */
    public List<Calculation> findOvernight() {
        return em.createQuery("select object(o) from Calculation as o where o.type='Recalculate Overnight'").getResultList();
    }

    /**
     * Recalculates the given site immediately.
     *
     * @param siteId The id of the site to be recalculated.
     */
    public void recalculateNow(long siteId) {
        em.createNativeQuery("{call SWT_SNAPSHOTLOAD_PKG.pr_recalc_statistics(?, ?)}")
                .setParameter(1, siteId)
                .setParameter(2, "Now").executeUpdate();
    }

    /**
     * Recalculates the given site overnight.
     *
     * @param siteId The id of the site to be recalculated.
     */
    public void recalculateOvernight(long siteId) {
        em.createNativeQuery("{call SWT_SNAPSHOTLOAD_PKG.pr_recalc_statistics(?, ?)}")
                .setParameter(1, siteId)
                .setParameter(2, "Overnight").executeUpdate();
    }
}
