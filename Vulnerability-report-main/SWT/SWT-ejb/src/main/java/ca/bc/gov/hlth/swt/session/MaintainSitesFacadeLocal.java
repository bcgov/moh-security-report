/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.session;

import ca.bc.gov.hlth.swt.entity.Site;
import ca.bc.gov.hlth.swt.entity.SitePreference;
import ca.bc.gov.hlth.swt.to.PublicSiteStatisticsTo;
import jakarta.ejb.Local;
import java.util.List;

/**
 * This the the facade interface of maintain sites
 *
 * @author Kuan.Fan
 */
@Local
public interface MaintainSitesFacadeLocal {

    /**
     * Finds all sites.
     *
     * @return List a list of sites.
     */
    List<Site> findAllSite();

    /**
     * Finds the site perferences.
     *
     * @param siteId String site
     * @return List
     */
    List<SitePreference> findSitePreferences(String siteId);

    /**
     * Returns the site preference.
     *
     * @param siteId String the site id
     * @param preferenceName String the preference name
     * @return SitePreference
     */
    SitePreference findSitePreference(String siteId, String preferenceName);

    /**
     * Returns the site preference.
     *
     * @param sitePreferenceId String the site preference id
     * @return SitePreference
     */
    SitePreference findSitePreference(String sitePreferenceId);

    /**
     * Saves the site preferences.
     *
     * @param sitePreferenceId String the site preference id
     * @param preference1 String
     */
    void saveSitePreferences(String sitePreferenceId, String preference1);

    /**
     * Finds the site.
     *
     * @param siteId String the site id.
     * @return Site the site
     */
    Site findSite(String siteId);

    /**
     * Approves the site publication.
     *
     * @param siteId String the site id
     * @param nonSprDataReviewedYn String Y or N
     * @param publicSiteReviewedYn String Y or N
     * @param mediaSiteReviewedYn String Y or N
     * @param siteCertifiedYn String Y or N
     * @param publishYn String Y or N
     */
    void approvePublicationSave(String siteId, String nonSprDataReviewedYn, String dataReviewedYn, String businessReviewedYn, String pabReviewedYn, String siteCertifiedYn, String publishYn, String userName);

    /**
     * Finds the published or unpublished sites.
     *
     * @param published boolean true published otherwise false.
     * @return List
     */
    List<Site> findSites(Boolean published);

    /**
     * Finds the published or unpublished sites.
     *
     * @param published boolean true published otherwise false.
     * @return List
     */
    List<Site> findSitesForApprovePublication(Boolean published);

    /**
     * Refresh the site.
     *
     * @param siteId String the site id.
     */
    void refreshSite(String siteId);

    /**
     * Identify if the site has warnings before approving it.
     *
     * @param siteId String site id
     * @return Boolean true if it has warnings
     */
    Boolean hasWarningForApproveSitePublication(String siteId);

    /**
     * Finds the public site statistics.
     *
     * @param siteId String the site id
     * @return List
     */
    List<PublicSiteStatisticsTo> findPublicSiteStatistics(String siteId, String adult);

    /**
     * Check if the site statistics are computed already.
     *
     * @param siteId
     * @return
     */
    Boolean areStatisticsComputed(String siteId);
}
