/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.entity;

import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.EmbeddedId;
import jakarta.persistence.Entity;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import java.io.Serializable;
import java.util.Collection;
import java.util.Date;

/**
 *
 * @author greg.perkins
 */
@Entity
@Table(name = "SWT_ENCOUNTER_TYPE")
@NamedQueries({
    @NamedQuery(name = "EncounterType.findByEncounterTypeListId", query = "SELECT e FROM EncounterType e WHERE e.encounterTypePK.encounterTypeListId = :encounterTypeListId"),
    @NamedQuery(name = "EncounterType.findByHaEncounterTypeCd", query = "SELECT e FROM EncounterType e WHERE e.encounterTypePK.haEncounterTypeCd = :haEncounterTypeCd"),
    @NamedQuery(name = "EncounterType.findBySiteId", query = "SELECT e FROM EncounterType e WHERE e.encounterTypePK.siteId = :siteId"),
    @NamedQuery(name = "EncounterType.findByHaEncounterTypeDsc", query = "SELECT e FROM EncounterType e WHERE e.haEncounterTypeDsc = :haEncounterTypeDsc"),
    @NamedQuery(name = "EncounterType.findByHaEncntrTypeEffctvDtm", query = "SELECT e FROM EncounterType e WHERE e.haEncntrTypeEffctvDtm = :haEncntrTypeEffctvDtm"),
    @NamedQuery(name = "EncounterType.findByHaEncntrTypeExpiryDtm", query = "SELECT e FROM EncounterType e WHERE e.haEncntrTypeExpiryDtm = :haEncntrTypeExpiryDtm"),
    @NamedQuery(name = "EncounterType.findByProvEncounterTypeCd", query = "SELECT e FROM EncounterType e WHERE e.provEncounterTypeCd = :provEncounterTypeCd"),
    @NamedQuery(name = "EncounterType.findByProvEncntrTypeEffctvDtm", query = "SELECT e FROM EncounterType e WHERE e.provEncntrTypeEffctvDtm = :provEncntrTypeEffctvDtm"),
    @NamedQuery(name = "EncounterType.findByProvEncntrTypeExpiryDtm", query = "SELECT e FROM EncounterType e WHERE e.provEncntrTypeExpiryDtm = :provEncntrTypeExpiryDtm"),
    @NamedQuery(name = "EncounterType.findByProvEncounterTypeDsc", query = "SELECT e FROM EncounterType e WHERE e.provEncounterTypeDsc = :provEncounterTypeDsc"),
    @NamedQuery(name = "EncounterType.findByEncounterTypeListDsc", query = "SELECT e FROM EncounterType e WHERE e.encounterTypeListDsc = :encounterTypeListDsc"),
    @NamedQuery(name = "EncounterType.findByCreatedByNm", query = "SELECT e FROM EncounterType e WHERE e.createdByNm = :createdByNm"),
    @NamedQuery(name = "EncounterType.findByCreatedOnDtm", query = "SELECT e FROM EncounterType e WHERE e.createdOnDtm = :createdOnDtm"),
    @NamedQuery(name = "EncounterType.findByLastModifiedByNm", query = "SELECT e FROM EncounterType e WHERE e.lastModifiedByNm = :lastModifiedByNm"),
    @NamedQuery(name = "EncounterType.findByLastModifiedOnDtm", query = "SELECT e FROM EncounterType e WHERE e.lastModifiedOnDtm = :lastModifiedOnDtm"),
    @NamedQuery(name = "EncounterType.findByStatelessTransactionNbr", query = "SELECT e FROM EncounterType e WHERE e.statelessTransactionNbr = :statelessTransactionNbr")})
public class EncounterType implements Serializable {

    private static final long serialVersionUID = 1L;
    @EmbeddedId
    protected EncounterTypePK encounterTypePK;
    @Column(name = "HA_ENCOUNTER_TYPE_DSC", nullable = false)
    private String haEncounterTypeDsc;
    @Column(name = "HA_ENCNTR_TYPE_EFFCTV_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date haEncntrTypeEffctvDtm;
    @Column(name = "HA_ENCNTR_TYPE_EXPIRY_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date haEncntrTypeExpiryDtm;
    @Column(name = "PROV_ENCOUNTER_TYPE_CD", nullable = false)
    private String provEncounterTypeCd;
    @Column(name = "PROV_ENCNTR_TYPE_EFFCTV_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date provEncntrTypeEffctvDtm;
    @Column(name = "PROV_ENCNTR_TYPE_EXPIRY_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date provEncntrTypeExpiryDtm;
    @Column(name = "PROV_ENCOUNTER_TYPE_DSC", nullable = false)
    private String provEncounterTypeDsc;
    @Column(name = "ENCOUNTER_TYPE_LIST_DSC", nullable = true)
    private String encounterTypeListDsc;
    @Column(name = "CREATED_BY_NM", nullable = false)
    private String createdByNm;
    @Column(name = "CREATED_ON_DTM", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_BY_NM", nullable = false)
    private String lastModifiedByNm;
    @Column(name = "LAST_MODIFIED_ON_DTM", nullable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Column(name = "STATELESS_TRANSACTION_NBR", nullable = false)
    private long statelessTransactionNbr;
    @JoinColumn(name = "SITE_ID", referencedColumnName = "SITE_ID", insertable = false, updatable = false)
    @ManyToOne
    private Site site;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "encounterType")
    private Collection<Booking> bookingCollection;

    public EncounterType() {
    }

    public EncounterType(EncounterTypePK encounterTypePK) {
        this.encounterTypePK = encounterTypePK;
    }

    public EncounterType(EncounterTypePK encounterTypePK, String haEncounterTypeDsc, String provEncounterTypeCd, String provEncounterTypeDsc, String encounterTypeListDsc, String createdByNm, Date createdOnDtm, String lastModifiedByNm, Date lastModifiedOnDtm, long statelessTransactionNbr) {
        this.encounterTypePK = encounterTypePK;
        this.haEncounterTypeDsc = haEncounterTypeDsc;
        this.provEncounterTypeCd = provEncounterTypeCd;
        this.provEncounterTypeDsc = provEncounterTypeDsc;
        this.encounterTypeListDsc = encounterTypeListDsc;
        this.createdByNm = createdByNm;
        this.createdOnDtm = createdOnDtm;
        this.lastModifiedByNm = lastModifiedByNm;
        this.lastModifiedOnDtm = lastModifiedOnDtm;
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public EncounterType(long encounterTypeListId, String haEncounterTypeCd, long siteId) {
        this.encounterTypePK = new EncounterTypePK(encounterTypeListId, haEncounterTypeCd, siteId);
    }

    public EncounterTypePK getEncounterTypePK() {
        return encounterTypePK;
    }

    public void setEncounterTypePK(EncounterTypePK encounterTypePK) {
        this.encounterTypePK = encounterTypePK;
    }

    public String getHaEncounterTypeDsc() {
        return haEncounterTypeDsc;
    }

    public void setHaEncounterTypeDsc(String haEncounterTypeDsc) {
        this.haEncounterTypeDsc = haEncounterTypeDsc;
    }

    public Date getHaEncntrTypeEffctvDtm() {
        return haEncntrTypeEffctvDtm;
    }

    public void setHaEncntrTypeEffctvDtm(Date haEncntrTypeEffctvDtm) {
        this.haEncntrTypeEffctvDtm = haEncntrTypeEffctvDtm;
    }

    public Date getHaEncntrTypeExpiryDtm() {
        return haEncntrTypeExpiryDtm;
    }

    public void setHaEncntrTypeExpiryDtm(Date haEncntrTypeExpiryDtm) {
        this.haEncntrTypeExpiryDtm = haEncntrTypeExpiryDtm;
    }

    public String getProvEncounterTypeCd() {
        return provEncounterTypeCd;
    }

    public void setProvEncounterTypeCd(String provEncounterTypeCd) {
        this.provEncounterTypeCd = provEncounterTypeCd;
    }

    public Date getProvEncntrTypeEffctvDtm() {
        return provEncntrTypeEffctvDtm;
    }

    public void setProvEncntrTypeEffctvDtm(Date provEncntrTypeEffctvDtm) {
        this.provEncntrTypeEffctvDtm = provEncntrTypeEffctvDtm;
    }

    public Date getProvEncntrTypeExpiryDtm() {
        return provEncntrTypeExpiryDtm;
    }

    public void setProvEncntrTypeExpiryDtm(Date provEncntrTypeExpiryDtm) {
        this.provEncntrTypeExpiryDtm = provEncntrTypeExpiryDtm;
    }

    public String getProvEncounterTypeDsc() {
        return provEncounterTypeDsc;
    }

    public void setProvEncounterTypeDsc(String provEncounterTypeDsc) {
        this.provEncounterTypeDsc = provEncounterTypeDsc;
    }

    public String getEncounterTypeListDsc() {
        return encounterTypeListDsc;
    }

    public void setEncounterTypeListDsc(String encounterTypeListDsc) {
        this.encounterTypeListDsc = encounterTypeListDsc;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public Site getSite() {
        return site;
    }

    public void setSite(Site site) {
        this.site = site;
    }

    public Collection<Booking> getBookingCollection() {
        return bookingCollection;
    }

    public void setBookingCollection(Collection<Booking> bookingCollection) {
        this.bookingCollection = bookingCollection;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (encounterTypePK != null ? encounterTypePK.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof EncounterType)) {
            return false;
        }
        EncounterType other = (EncounterType) object;
        if ((this.encounterTypePK == null && other.encounterTypePK != null) || (this.encounterTypePK != null && !this.encounterTypePK.equals(other.encounterTypePK))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.hlth.swt.entity.EncounterType[encounterTypePK=" + encounterTypePK + "]";
    }

}
