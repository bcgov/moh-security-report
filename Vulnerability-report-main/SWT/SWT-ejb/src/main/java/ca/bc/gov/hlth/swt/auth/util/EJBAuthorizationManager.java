/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.auth.util;

import ca.bc.gov.health.auth.util.AbstractAuthorizationManager;
import ca.bc.gov.health.auth.util.AuthorizationMap;
import ca.bc.gov.hlth.auth.ejb.entity.RolePermission;
import ca.bc.gov.hlth.swt.auth.RolePermissionFacadeLocal;
import jakarta.ejb.EJB;
import java.util.ArrayList;
import java.util.List;

/**
 * Implementation of an Authorization Manager that uses EJB to load the authorization map.
 *
 * @author greg.perkins
 */
public class EJBAuthorizationManager extends AbstractAuthorizationManager {

    @EJB
    private static RolePermissionFacadeLocal rpFacade;

    public static void setRpFacade(RolePermissionFacadeLocal rpFacade) {
        EJBAuthorizationManager.rpFacade = rpFacade;
    }

    private String applicationAcronymCd;

    public EJBAuthorizationManager(String applicationAcronymCd) {
        this.applicationAcronymCd = applicationAcronymCd;
    }

    @Override
    protected AuthorizationMap loadAuthorizations() {
        System.out.println("Loading authorizations via Facade");
        AuthorizationMap ejbAuthMap = new AuthorizationMap();
        List<RolePermission> rolePermissions;
        if (rpFacade != null) {
            rolePermissions = rpFacade.findByApplicationNm(applicationAcronymCd);
        } else {
            throw new RuntimeException("Facade not injected");
        }
        for (RolePermission rolePermission : rolePermissions) {
            List<String> roles = ejbAuthMap.getAuthorizations().get(rolePermission.getRolePermissionPK().getPermissionNm());
            if (roles == null) {
                roles = new ArrayList<>();
            }
            roles.add(rolePermission.getRolePermissionPK().getRoleNm());
            ejbAuthMap.getAuthorizations().put(rolePermission.getRolePermissionPK().getPermissionNm(), roles);
        }
        return ejbAuthMap;
    }

}
