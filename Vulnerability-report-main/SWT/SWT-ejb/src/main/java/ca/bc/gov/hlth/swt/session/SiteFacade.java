/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.session;

import ca.bc.gov.hlth.swt.entity.Site;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 *
 * @author greg.perkins
 */
@Stateless
public class SiteFacade implements SiteFacadeLocal {

    @PersistenceContext(unitName = "SWT-ejbPU")
    private EntityManager em;

    public void create(Site site) {
        em.persist(site);
    }

    public void edit(Site site) {
        em.merge(site);
    }

    public void remove(Site site) {
        em.remove(em.merge(site));
    }

    public Site find(Object id) {
        return em.find(ca.bc.gov.hlth.swt.entity.Site.class, id);
    }

    public List<Site> findAll() {
        return em.createQuery("select object(o) from Site as o").getResultList();
    }

    public List<Site> findEditable() {
        return em.createQuery("select object(o) from Site as o where o.publishedYn = 'N' or o.siteId = (select max(s.siteId) from Site as s where s.publishedYn = 'Y') order by o.siteYearNbr desc, o.siteMonthNbr desc, o.createdOnDtm desc").getResultList();
    }

    public Site findCurrent() {
        List results = em.createQuery("select object(o) from Site as o where o.publishedYn = 'Y' order by o.siteId desc").getResultList();
        return (Site) (results.size() == 0 ? null : results.get(0));
    }

    public Site findPreviousMonth(long inSiteId) {
        //BCMOHAM-22173
        List results = em.createNativeQuery("select s.* from swt_site s,swt_site curr where curr.site_id = " + inSiteId + " AND S.PUBLISHED_YN = 'Y' AND S.SITE_MONTH_NBR <= DECODE(curr.SITE_MONTH_NBR,1,12,curr.SITE_MONTH_NBR-1) AND S.SITE_YEAR_NBR <= curr.SITE_YEAR_NBR ORDER BY s.SITE_ID DESC", Site.class).getResultList();
        //BCMOHAM-15588
//        List results = em.createNativeQuery("select s.* from swt_site s,swt_site curr where curr.site_id = " + inSiteId + " AND S.PUBLISHED_YN = 'Y' AND S.SITE_MONTH_NBR <= DECODE(curr.SITE_MONTH_NBR,1,12,curr.SITE_MONTH_NBR-1) AND S.SITE_YEAR_NBR = DECODE(curr.SITE_MONTH_NBR,1,curr.SITE_YEAR_NBR-1,curr.SITE_YEAR_NBR) ORDER BY s.SITE_ID DESC", Site.class).getResultList();
//        List results =  em.createNativeQuery("select s.* from swt_site s,swt_site curr where curr.site_id = "+inSiteId+" AND S.PUBLISHED_YN = 'Y' AND S.SITE_MONTH_NBR = DECODE(curr.SITE_MONTH_NBR,1,12,curr.SITE_MONTH_NBR-1) AND S.SITE_YEAR_NBR = DECODE(curr.SITE_MONTH_NBR,1,curr.SITE_YEAR_NBR-1,curr.SITE_YEAR_NBR) ORDER BY s.SITE_ID DESC",Site.class).getResultList();
//********************************************************
        return (Site) (results.size() == 0 ? null : results.get(0));
    }

    public Site findPreviousYear(long inSiteId) {
        //BCMOHAM-22173
        List results = em.createNativeQuery("select s.* from swt_site s,swt_site curr where curr.site_id = " + inSiteId + " AND S.PUBLISHED_YN = 'Y' AND S.SITE_MONTH_NBR = DECODE(curr.SITE_MONTH_NBR,1,12,curr.SITE_MONTH_NBR-1) AND S.SITE_YEAR_NBR <= curr.SITE_YEAR_NBR - 1 ORDER BY s.SITE_ID DESC", Site.class).getResultList();
//        List results = em.createNativeQuery("select s.* from swt_site s,swt_site curr where curr.site_id = " + inSiteId + " AND S.PUBLISHED_YN = 'Y' AND S.SITE_MONTH_NBR = curr.SITE_MONTH_NBR AND S.SITE_YEAR_NBR = curr.SITE_YEAR_NBR-1 ORDER BY s.SITE_ID DESC", Site.class).getResultList();
//********************************************************
        return (Site) (results.size() == 0 ? null : results.get(0));
    }

    public List<Site> findInProgress() {
        Calendar cal = Calendar.getInstance();
        cal.set(Calendar.DAY_OF_MONTH, cal.get(Calendar.DAY_OF_MONTH) - 1);
        Date $24hrsBefore = cal.getTime();

        // Only sites which were created within the last 24hrs and their completion date is still null are considered
        // to be in progress. A site is not expected to take up to 24 hrs to be loaded. If a site is still appears
        // as if it is being loaded and it started over 24 hours ago, then most like the site has failed. We don't want
        // such failed site to prevent automatic recalculation that doe not allow two site load operations to run simultaneously
        Query q = em.createQuery("select object(o) from Site as o where o.loadProcessEndDtm IS NULL AND o.createdOnDtm > :oneDayAgo");
        q.setParameter("oneDayAgo", $24hrsBefore);

        return q.getResultList();

    }
}
