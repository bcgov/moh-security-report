/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.session;

import ca.bc.gov.hlth.swt.entity.Specialty;
import ca.bc.gov.hlth.swt.entity.SpecialtyGroup;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 *
 * @author greg.perkins
 */
@Stateless
public class SpecialtyFacade implements SpecialtyFacadeLocal {

    @PersistenceContext(unitName = "SWT-ejbPU")
    private EntityManager em;

    public void create(Specialty specialty) {
        em.persist(specialty);
    }

    public void edit(Specialty specialty) {
        em.merge(specialty);
    }

    public void remove(Specialty specialty) {
        em.remove(em.merge(specialty));
    }

    public Specialty find(Object id) {
        return em.find(ca.bc.gov.hlth.swt.entity.Specialty.class, id);
    }

    @Override
    public Specialty findSpecialty(String specialtyId) {
        return (Specialty) em.createQuery("select object(o) from Specialty as o where o.specialtyId=" + specialtyId).getSingleResult();
    }

    public List<Specialty> findAll() {
        return em.createQuery("select object(o) from Specialty as o where specialty.expiryDtm is null order by o.sortOrder o.specialtyGroupNm").getResultList();
    }

    public List findAvailable(Long selectedSpecialtyGroupId) {
        return em.createNativeQuery("SELECT * FROM SWT_SPECIALTY WHERE expiry_dtm is null and (SPECIALTY_GROUP_ID IS NULL OR SPECIALTY_GROUP_ID = " + selectedSpecialtyGroupId + ")", Specialty.class).getResultList();
    }

    public List findMapped(Long selectedSpecialtyGroupId) {
        List l = em.createNativeQuery("SELECT SPECIALTY_ID FROM SWT_SPECIALTY WHERE expiry_dtm is null and SPECIALTY_GROUP_ID = " + selectedSpecialtyGroupId).getResultList();
        List out = new ArrayList<Long>();
        for (Iterator it = l.iterator(); it.hasNext();) {
            out.add(find(((BigDecimal) it.next()).longValue()));
        }
        return out;
    }

    @Override
    public List<Specialty> findSpecialtiesAssignedTo(String specialtyGroupId) {
        StringBuffer sb = new StringBuffer();
        sb.append("select * from SWT_SPECIALTY where SPECIALTY_GROUP_ID=" + specialtyGroupId + " and Expiry_Dtm is null ORDER BY SURGEON_SPECIALTY_DSC");
        List results = em.createNativeQuery(sb.toString(), Specialty.class).getResultList();
        return results;
    }

    public void mapSpecialties(String selectedSpecialtyGroupId, List<Specialty> selectedSpecialties) {

        List<Specialty> existingSpecialties = this.findSpecialtiesAssignedTo(selectedSpecialtyGroupId);
        for (Specialty s : existingSpecialties) {
            s.setSpecialtyGroupId(null);
            em.merge(s);
        }

        SpecialtyGroup sg = em.find(SpecialtyGroup.class, Long.valueOf(selectedSpecialtyGroupId));
        for (Specialty s : selectedSpecialties) {
            s.setSpecialtyGroupId(sg);
            em.merge(s);
        }
    }

//    public void mapSpecialties(Long selectedSpecialtyGroupId, List selectedSpecialties, List availableSpecialties){
//        SpecialtyGroup sg = em.find(SpecialtyGroup.class, selectedSpecialtyGroupId);
//        Set selectedIds = new HashSet();
//        selectedIds.addAll(selectedSpecialties);
//        for (Iterator it = selectedSpecialties.iterator(); it.hasNext();) {
//            Long selectedSpecialtyId = new Long((String)it.next());
//            Specialty specialty = em.find(Specialty.class, selectedSpecialtyId);
//            specialty.setSpecialtyGroupId(sg);
//            em.merge(specialty);
//        }
//        for (Iterator it = availableSpecialties.iterator(); it.hasNext();) {
//            SelectItem item = (SelectItem)it.next();
//            if (!selectedIds.contains(item.getValue().toString())){
//                Specialty specialty = em.find(Specialty.class, item.getValue());
//                specialty.setSpecialtyGroupId(null);
//                em.merge(specialty);
//            }
//        }
//    }
}
