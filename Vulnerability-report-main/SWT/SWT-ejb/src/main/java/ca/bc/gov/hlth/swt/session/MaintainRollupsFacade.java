/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.session;

import ca.bc.gov.hlth.swt.entity.BodyPart;
import ca.bc.gov.hlth.swt.entity.Procedure;
import ca.bc.gov.hlth.swt.entity.ProcedureGroup;
import ca.bc.gov.hlth.swt.entity.ProcgroupBodypart;
import ca.bc.gov.hlth.swt.interceptor.MaintainRollupsFacadeInterceptor;
import jakarta.ejb.EJB;
import jakarta.ejb.Stateless;
import jakarta.ejb.TransactionAttribute;
import jakarta.ejb.TransactionAttributeType;
import jakarta.interceptor.Interceptors;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.util.List;

/**
 *
 * @author Kuan.Fan
 */
@Stateless
@Interceptors({MaintainRollupsFacadeInterceptor.class})
public class MaintainRollupsFacade implements MaintainRollupsFacadeLocal {

    @PersistenceContext(unitName = "SWT-ejbPU")
    private EntityManager em;

    @EJB
    private ProcedureGroupFacadeLocal pgf;

    // Add business logic below. (Right-click in editor and choose
    // "EJB Methods > Add Business Method" or "Web Service > Add Operation")
    @Override
    public List<ProcedureGroup> findAllProcedureGroups() {
        return pgf.findAll();
    }

    @Override
    public List<Procedure> findAvailableProcedures() {
        return em.createNativeQuery("select o.* from swt_Procedure o where o.procedure_Group_Id is null and o.prov_Procedure_Expiry_Dtm is null order by o.prov_Procedure_Nm", Procedure.class).getResultList();
    }

    @Override
    public List<Procedure> findAvailableProcedures(Long procedureGroupId) {
        return em.createNativeQuery("select o.* from swt_Procedure o where (o.procedure_Group_Id is null or o.procedure_Group_Id=?1) and o.prov_Procedure_Expiry_Dtm is null order by o.prov_Procedure_Nm", Procedure.class)
                .setParameter(1, procedureGroupId)
                .getResultList();
    }

    @Override
    public List<BodyPart> findAvailableBodyParts(Long procedureGroupId) {
        //select b.* from SWT_PROCGROUP_BODYPART b where b.procedure_Group_Id is null or b.procedure_Group_Id = " + procedureGroupId + " order by BP.BODY_PART_CD
        return em.createNativeQuery("select B.* FROM SWT_BODY_PART B", BodyPart.class).getResultList();
    }

    @Override
    public List<Procedure> findProceduresAssignedTo(String procedureGroupId) {
        String query = "select * from SWT_PROCEDURE where PROCEDURE_GROUP_ID=?1 and prov_Procedure_Expiry_Dtm is null ORDER BY PROV_PROCEDURE_NM";
        List results = em.createNativeQuery(query, Procedure.class)
                .setParameter(1, Long.valueOf(procedureGroupId))
                .getResultList();
        return results;
    }

    @Override
    public List<BodyPart> findBodyPartsAssignedTo(String procedureGroupId) {
        String query = "select * from  SWT_BODY_PART where BODY_PART_CD IN (SELECT BODY_PART_CD FROM SWT_PROCGROUP_BODYPART WHERE PROCEDURE_GROUP_ID=?1) ORDER BY BODY_PART_NAME";
        List results = em.createNativeQuery(query, BodyPart.class)
                .setParameter(1, Long.valueOf(procedureGroupId))
                .getResultList();
        return results;
    }

    @Override
    public Procedure findProcedure(String procedureId) {
        return (Procedure) em.createQuery("select object(o) from Procedure as o where o.procedureId=:procedureId")
                .setParameter("procedureId", Long.valueOf(procedureId))
                .getSingleResult();
    }

    @Override
    public BodyPart findBodyPart(String bodyPartCd) {
        return (BodyPart) em.createQuery("select object(o) from BodyPart as o where o.bodyPartCd=:bodyPartCd")
                .setParameter("bodyPartCd", bodyPartCd)
                .getSingleResult();
    }

    public ProcedureGroup findProcedureGroup(String procedureGroupId) {
        return (ProcedureGroup) em.createQuery("select object(o) from ProcedureGroup as o where o.procedureGroupId=:procedureGroupId")
                .setParameter("procedureGroupId", Long.valueOf(procedureGroupId))
                .getSingleResult();
    }

    @TransactionAttribute(TransactionAttributeType.REQUIRED)
    @Override
    public void saveAssignedProcedures(String procedureGroupId, List<String> procedureIds) {

        List<Procedure> procedures = this.findProceduresAssignedTo(procedureGroupId);
        if (procedures != null && procedures.size() > 0) {
            for (int i = 0; i < procedures.size(); i++) {
                Procedure procedure = procedures.get(i);
                procedure.setProcedureGroupId(null);
                em.merge(procedure);
            }
        }

        if (procedureIds != null && procedureIds.size() > 0) {
            ProcedureGroup procedureGroup = this.findProcedureGroup(procedureGroupId);
            for (int i = 0; i < procedureIds.size(); i++) {
                Procedure procedure = this.findProcedure((String) procedureIds.get(i));
                procedure.setProcedureGroupId(procedureGroup);
                em.merge(procedure);
            }
        }

    }

    @TransactionAttribute(TransactionAttributeType.REQUIRED)
    @Override
    public void saveAssignedBodyParts(String procedureGroupId, List<String> bodyPartCds) {
        //First we delete all the records for the given procedureGroup
        em.createNativeQuery("DELETE FROM SWT_PROCGROUP_BODYPART WHERE PROCEDURE_GROUP_ID=?1")
                .setParameter(1, Long.valueOf(procedureGroupId))
                .executeUpdate();

        //Then we insert the associated bodyPart for the given procedureGroup
        if (bodyPartCds != null && bodyPartCds.size() > 0) {
            for (String bodyPartCd : bodyPartCds) {
                ProcgroupBodypart progGroupBodyPart = new ProcgroupBodypart(bodyPartCd, Long.valueOf(procedureGroupId));
                em.persist(progGroupBodyPart);
            }
        }
    }

}
