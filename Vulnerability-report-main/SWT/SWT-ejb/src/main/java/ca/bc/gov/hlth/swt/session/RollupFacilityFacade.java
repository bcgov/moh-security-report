/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.hlth.swt.session;

import ca.bc.gov.hlth.swt.ejbsupport.StatisticQueryBuilder;
import ca.bc.gov.hlth.swt.entity.*;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Logger;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.text.WordUtils;

/**
 *
 * @author greg.perkins
 */
@Stateless
public class RollupFacilityFacade implements RollupFacilityFacadeLocal {

    @PersistenceContext(unitName = "SWT-ejbPU")
    private EntityManager em;

    private Logger log = Logger.getLogger(this.getClass().getName());

    public void create(RollupFacility rollupFacility) {
        em.persist(rollupFacility);
    }

    public RollupFacility edit(RollupFacility rollupFacility) {
        return em.merge(rollupFacility);
    }

    public void remove(RollupFacility rollupFacility) {
        em.remove(em.merge(rollupFacility));
    }

    public RollupFacility find(Object id) {
        return em.find(ca.bc.gov.hlth.swt.entity.RollupFacility.class, id);
    }

    public RollupFacility findByRollupFacilityId(Object id) {
        return em.createQuery("select object(o) from RollupFacility as o where o.rollupFacilityId = :id", RollupFacility.class)
                .setParameter("id", id)
                .getSingleResult();
    }

    public List<RollupFacility> findAll() {
        return em.createQuery("select object(o) from RollupFacility as o where o.expiryDtm is null order by o.facilityNm").getResultList();
    }

    public List<RollupFacility> findByFacilityNm(String facilityNm) {
        Query query = em.createNamedQuery("RollupFacility.findByFacilityNm");
        query.setParameter("facilityNm", facilityNm);
        List<RollupFacility> results = query.getResultList();
        return results;
    }

    public List findBySiteAndCategory(Long siteId, String adult) {
        return em.createQuery("select object(o) from RollupFacility as o, SiteFacility as s where o.rollupFacilityId = s.siteFacilityPK.rollupFacilityId and s.siteFacilityPK.siteId = :siteId and s.siteFacilityPK.adult = :adult")
                .setParameter("siteId", siteId)
                .setParameter("adult", adult)
                .getResultList();
    }

    public List search(String sessionId, Long siteId, List<Long> rollupFacilityId, Long rollupHealthAuthorityId, Long rollupProcedureGroupId, Long rollupSurgeonId, String adult) {
        //logSearch(sessionId,"Map", null, null, rollupProcedureGroupId, null, rollupFacilityId, rollupSurgeonId, null, rollupHealthAuthorityId, null);
        StringBuilder buff = new StringBuilder();
        if (rollupFacilityId == null && rollupHealthAuthorityId == null && rollupProcedureGroupId == null && rollupSurgeonId == null) {
            buff.append("SELECT f.* FROM SWT_ROLLUP_FACILITY f, SWT_SITE_FACILITY s WHERE f.ROLLUP_FACILITY_ID = s.ROLLUP_FACILITY_ID AND s.SITE_ID = ?1 AND s.ADULT = ?2");
        } else {
            buff.append("select distinct f.* from swt_Rollup_Facility f, swt_Site_Statistic s where f.rollup_Facility_Id  = s.rollup_Facility_Id and s.site_Id = ?1 and s.adult = ?2 ");

            if (rollupFacilityId != null) {
                buff.append("and s.rollup_Facility_Id = ?3 ");
            }
            if (rollupHealthAuthorityId != null) {
                buff.append("and s.rollup_Health_Authority_Id = ?4 ");
            } else {
                //buff.append(" and s.ROLLUP_HEALTH_AUTHORITY_ID IS NULL ");
            }
            if (rollupProcedureGroupId != null) {
                buff.append("and s.rollup_Procedure_Group_Id = ?5 ");
            } else {
                //buff.append("and s.rollup_Procedure_Group_Id IS NULL ");
            }
            if (rollupSurgeonId != null) {
                buff.append("and s.rollup_Surgeon_Id = ?6 ");
            } else {
                //buff.append("and s.rollup_Surgeon_Id IS NULL ");
            }

            buff.append(" and s.ROLLUP_INTERVENTION_TYPE_ID IS NULL ");
            buff.append(" and s.ROLLUP_SPECIALTY_GROUP_ID IS NULL ");
            buff.append(" and s.ROLLUP_ENCOUNTER_TYPE_ID IS NULL ");
            buff.append(" and s.ROLLUP_CANCER_SUSPECTED_ID IS NULL ");
        }

        Query q = em.createNativeQuery(buff.toString(), RollupFacility.class);
        q.setParameter(1, siteId);
        q.setParameter(2, adult);
        if (rollupFacilityId != null) {
            q.setParameter(3, rollupFacilityId);
        }
        if (rollupHealthAuthorityId != null) {
            q.setParameter(4, rollupHealthAuthorityId);
        }
        if (rollupProcedureGroupId != null) {
            q.setParameter(5, rollupProcedureGroupId);
        }
        if (rollupSurgeonId != null) {
            q.setParameter(6, rollupSurgeonId);
        }
        List l = q.getResultList();
        return l;
    }

    public List<RollupFacility> findBySiteAndCriteria(Long siteId, String joinColumn, Long criteria) {
        StringBuilder buff = new StringBuilder();
        buff.append("SELECT f.* FROM SWT_ROLLUP_FACILITY f, SWT_SITE_STATISTIC s ");
        buff.append("WHERE f.ROLLUP_FACILITY_ID = s.ROLLUP_FACILITY_ID ");
        buff.append("AND " + StatisticQueryBuilder.buildWhereClause("s", joinColumn, "ROLLUP_FACILITY_ID", null));
        buff.append("AND s.SITE_ID = ?2 ");
        log.finest(buff.toString());
        Query q = em.createNativeQuery(buff.toString(), RollupFacility.class);
        q.setParameter(1, criteria);
        q.setParameter(2, siteId);
        return q.getResultList();
    }

    public List<RollupFacility> findBySiteAndMultipleCriteria(Long siteId, List joinColumns, List criteria) {
        StringBuilder buff = new StringBuilder();
        int count = 1;
        Query q;
        List optionalColumns = Arrays.asList(new String[]{"ROLLUP_PROCEDURE_GROUP_ID", "ROLLUP_FACILITY_ID", "ROLLUP_HEALTH_AUTHORITY_ID", "ROLLUP_SURGEON_ID"});
        if (criteria.size() == 0) {
            buff.append("SELECT f.* FROM SWT_ROLLUP_FACILITY f, SWT_SITE_FACILITY s WHERE f.ROLLUP_FACILITY_ID = s.ROLLUP_FACILITY_ID AND s.SITE_ID = ?1");
        } else {
            buff.append("SELECT distinct f.* FROM SWT_ROLLUP_FACILITY f, SWT_SITE_STATISTIC s ");
            buff.append("WHERE f.ROLLUP_FACILITY_ID = s.ROLLUP_FACILITY_ID ");
            buff.append("AND " + StatisticQueryBuilder.buildWhereClause("s", joinColumns, optionalColumns, "ROLLUP_FACILITY_ID", criteria));
            int last = StringUtils.countMatches(buff, "?") + 1;
            buff.append("AND s.SITE_ID = ?" + last + " ");
        }
        log.finest(buff.toString());
        q = em.createNativeQuery(buff.toString(), RollupFacility.class);

        for (int i = 0; i < criteria.size(); i++) {
            if (criteria.get(i) instanceof List) {
                List listCriteria = (List) criteria.get(i);
                for (int j = 0; j < listCriteria.size(); j++) {
                    q.setParameter(count, listCriteria.get(j));
                    count++;
                }

            } else {
                q.setParameter(count, criteria.get(i));
                count++;
            }

        }
        q.setParameter(count, siteId);
        long start = System.currentTimeMillis();
        List l = q.getResultList();
        log.info("Found " + l.size() + " facilities in " + (System.currentTimeMillis() - start) + "ms");
        return formatFacility(l);
    }

//    private void logSearch(String sessionId,
//                           String sourceScreen,
//                           Long rollupSurgeonSpecialtyId,
//                           String priorityCd,
//                           Long rollupProcedureGroupId,
//                           Long rollupInterventionTypeId,
//                           List<Long> rollupFacilityId,
//                           Long rollupSurgeonId,
//                           Long rollupCancerSuspectedId,
//                           Long rollupHealthAuthorityId,
//                           Long rollupEncounterTypeId){
//        SearchLog logEntry = new SearchLog();
//        logEntry.setLoggedDtm(new Date());
//        logEntry.setLoggedFromTxt(sourceScreen);
//        logEntry.setSessionIdentifierTxt(sessionId);
//        logEntry.setRollupSurgeonSpecialtyId(rollupSurgeonSpecialtyId);
//        logEntry.setPriorityCd(priorityCd);
//        logEntry.setRollupProcedureGroupId(rollupProcedureGroupId);
//        logEntry.setRollupInterventionTypeId(rollupInterventionTypeId);
//        logEntry.setRollupFacilityId(rollupFacilityId);
//        logEntry.setRollupSurgeonId(rollupSurgeonId);
//        logEntry.setRollupCancerSuspectedId(rollupCancerSuspectedId);
//        logEntry.setRollupHealthAuthorityId(rollupHealthAuthorityId);
//        logEntry.setRollupEncounterTypeId(rollupEncounterTypeId);
//        em.persist(logEntry);
//    }
    public RollupFacility findByFacilityId(Long facilityId, Long siteId) {
        Query q = em.createNativeQuery("SELECT rf.* FROM SWT_ROLLUP_FACILITY rf WHERE RF.ROLLUP_FACILITY_ID = (select max(rollup_facility_id) from swt_rollup_facility where facility_id = ?)", RollupFacility.class);
        q.setParameter(1, facilityId);
        return (RollupFacility) q.getSingleResult();
    }

    public List<RollupFacility> formatFacility(List<RollupFacility> results) {
        for (int i = 0; i < results.size(); i++) {
            results.get(i).setFacilityNm(WordUtils.capitalizeFully(results.get(i).getFacilityNm().toString(), new char[]{' ', '.'}).replace("bc", "BC"));
        }

        return results;
    }

}
