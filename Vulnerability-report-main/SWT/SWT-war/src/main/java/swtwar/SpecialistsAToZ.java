/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package swtwar;

import ca.bc.gov.hlth.swt.entity.RollupSurgeon;
import ca.bc.gov.hlth.swt.entity.Site;
import ca.bc.gov.hlth.swt.session.RollupSurgeonFacadeLocal;
import ca.bc.gov.hlth.swt.session.SiteFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.RequestScoped;
import jakarta.faces.context.ExternalContext;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Named;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import org.apache.commons.text.WordUtils;

/**
 *
 * @author arturo.lopez
 */
@RequestScoped
@Named("specialists")
public class SpecialistsAToZ {

    private static final String SPECIALIST_PROFILE_PAGE = "SpecialistProfile.xhtml";

    private static final char[] DELIMITERS = new char[]{' ', '-', '(', '\'', '.'};
    private static final List<String> ALPHABET_STRINGS = new ArrayList<>(Arrays.asList("ABCDEFGHIJKLMNOPQRSTUVWXYZ".split("(?!^)")));

    @EJB
    private SiteFacadeLocal siteFacade;

    @EJB
    private RollupSurgeonFacadeLocal rollupSurgeonFacade;

    private Site site;

    private RollupSurgeon selectedSurgeon;
    private List<RollupSurgeon> rollupSurgeons;
    private Map<String, List<RollupSurgeon>> specialistTreeMap;

    public SpecialistsAToZ() {

    }

    @PostConstruct
    public void init() {
        site = siteFacade.findCurrent();
        if (site == null) {
            throw new RuntimeException("No Sites Exist!");
        }

        queryAllSpecialists();
        createSpecialistMap();
    }

    public ArrayList<RollupSurgeon> autoCompleteSurgeon(String query) {

        ArrayList<RollupSurgeon> filteredSurgeons = new ArrayList<>();

        for (RollupSurgeon surgeon : rollupSurgeons) {
            if ((surgeon.getSurgeonLastNm().toLowerCase().contains(query.toLowerCase())
                    || surgeon.getSurgeonFirstNm().toLowerCase().contains(query.toLowerCase()))) {
                filteredSurgeons.add(surgeon);
            }
        }
        return filteredSurgeons;
    }

    public void goToSpecialist() throws IOException {
        ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();
        String surgeonId = Long.toString(selectedSurgeon.getRollupSurgeonId());
        String surgeonFirstName = selectedSurgeon.getSurgeonFirstNm();
        String surgeonLastName = selectedSurgeon.getSurgeonLastNm();
        selectedSurgeon = null;
        context.redirect(SPECIALIST_PROFILE_PAGE + "?rollupSurgeonId=" + surgeonId
                + "&firstName=" + surgeonFirstName
                + "&lastName=" + surgeonLastName);
    }

    public void queryAllSpecialists() {
        if (rollupSurgeons == null) {
            rollupSurgeons = rollupSurgeonFacade.findAllBySite(site.getSiteId());
        }
    }

    public void createSpecialistMap() {
        // TODO code application logic here
        if (specialistTreeMap == null) {
            specialistTreeMap = new TreeMap<>();

            if (rollupSurgeons == null) {
                rollupSurgeons = rollupSurgeonFacade.findAllBySite(site.getSiteId());
            }

            for (int i = 0; i < rollupSurgeons.size(); i++) {
                addValues(Character.toString(rollupSurgeons.get(i).getSurgeonLastNm().charAt(0)).toUpperCase(), rollupSurgeons.get(i));
            }
        }
    }

    private void addValues(String key, RollupSurgeon value) {
        List<RollupSurgeon> tempList;

        value.setSurgeonFirstNm(WordUtils.capitalizeFully(value.getSurgeonFirstNm(), DELIMITERS));
        value.setSurgeonLastNm(WordUtils.capitalizeFully(value.getSurgeonLastNm(), DELIMITERS) + ", ");

        if (getSpecialistTreeMap().containsKey(key)) {
            tempList = getSpecialistTreeMap().get(key);
            if (tempList == null) {
                tempList = new ArrayList();
            }
            tempList.add(value);
        } else {
            tempList = new ArrayList();
            tempList.add(value);
        }
        getSpecialistTreeMap().put(key, tempList);
    }

    public List<String> getAlphabetStrings() {
        return ALPHABET_STRINGS;
    }

    public Map<String, List<RollupSurgeon>> getSpecialistTreeMap() {
        return specialistTreeMap;
    }

    public RollupSurgeon getSelectedSurgeon() {
        return selectedSurgeon;
    }

    public void setSelectedSurgeon(RollupSurgeon selectedSurgeon) {
        this.selectedSurgeon = selectedSurgeon;
    }

}
