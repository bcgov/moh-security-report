/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package swtwar;

import ca.bc.gov.hlth.swt.entity.RollupProcedureGroup;
import ca.bc.gov.hlth.swt.entity.Site;
import ca.bc.gov.hlth.swt.session.RollupProcedureGroupFacadeLocal;
import ca.bc.gov.hlth.swt.session.SiteFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.context.ExternalContext;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.io.IOException;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

/**
 *
 * @author arturo.lopez
 */
@ViewScoped
@Named
public class ProceduresAToZ implements Serializable {

    private static final long serialVersionUID = 1L;

    @EJB
    private SiteFacadeLocal siteFacade;

    @EJB
    private RollupProcedureGroupFacadeLocal rollupProcedureGroupFacade;

    private Site site;
    private RollupProcedureGroup selectedProcedure;
    private List<RollupProcedureGroup> rollupProceduresGroupAd;
    private List<RollupProcedureGroup> rollupProceduresGroupPed;
    private Map<String, List<RollupProcedureGroup>> treeMapAdult;
    private Map<String, List<RollupProcedureGroup>> treeMapPed;
    private int tabIdx = 0;

    private static final String SURGERY_WAIT_TIMES_PAGE = "WaitTimesResults.xhtml";

    public ProceduresAToZ() {

    }

    @PostConstruct
    public void init() {
        site = siteFacade.findCurrent();
        if (site == null) {
            throw new RuntimeException("No Sites Exist!");
        }
        queryAllAdultProcedures();
        getProceduresAdultName();

        getProceduresPediatric();
//        tabIdx=0;
    }

    public void getProceduresAdultName() {
        // TODO code application logic here
        if (treeMapAdult == null) {
            treeMapAdult = new TreeMap<>();

            for (int i = 0; i < rollupProceduresGroupAd.size(); i++) {
                addValues(treeMapAdult, Character.toString(rollupProceduresGroupAd.get(i).getProcedureGroupNm().charAt(0)), rollupProceduresGroupAd.get(i));
            }
        }
    }

    public void getProceduresPediatric() {
        // TODO code application logic here
        if (treeMapPed == null) {
            treeMapPed = new TreeMap<>();
            List<RollupProcedureGroup> rollupProcedureGroup = rollupProcedureGroupFacade.findProceduresPediatric(site.getSiteId());

            for (int i = 0; i < rollupProcedureGroup.size(); i++) {
                addValues(treeMapPed, Character.toString(rollupProcedureGroup.get(i).getProcedureGroupNm().charAt(0)).toUpperCase(), rollupProcedureGroup.get(i));
            }
        }
    }

    public ArrayList<RollupProcedureGroup> autoCompleteProcedure(String query) {
        ArrayList<RollupProcedureGroup> filteredProcedures = new ArrayList<>();

        if (tabIdx == 0) {
            for (RollupProcedureGroup procedure : rollupProceduresGroupAd) {
                if (procedure.getProcedureGroupNm().toLowerCase().contains(query.toLowerCase())) {
                    filteredProcedures.add(procedure);
                }
            }
        } else {
            for (RollupProcedureGroup procedure : rollupProceduresGroupPed) {
                if (procedure.getProcedureGroupNm().toLowerCase().contains(query.toLowerCase())) {
                    filteredProcedures.add(procedure);
                }
            }
        }
        return filteredProcedures;
    }

    public void queryAllAdultProcedures() {
        if (rollupProceduresGroupAd == null) {
            rollupProceduresGroupAd = rollupProcedureGroupFacade.findProceduresAdult(site.getSiteId());
        }
        if (rollupProceduresGroupPed == null) {
            rollupProceduresGroupPed = rollupProcedureGroupFacade.findProceduresPediatric(site.getSiteId());
        }
    }

    public void goToProcedure() throws IOException {
        ExternalContext context = FacesContext.getCurrentInstance().getExternalContext();
        String rollupProcedure = selectedProcedure.getRollupProcedureGroupId().toString();
        String procName = selectedProcedure.getProcedureGroupNm();
        String adult;
        if (tabIdx == 0) {
            adult = "Y";
        } else {
            adult = "N";
        }

        selectedProcedure = null;

        context.redirect(SURGERY_WAIT_TIMES_PAGE + "?rollupProcedure=" + rollupProcedure
                + "&procName=" + procName
                + "&adult=" + adult);
    }

    public void onTabChange() {
        System.out.println("*********wee " + tabIdx + " ***** " + this.tabIdx);
    }

    public RollupProcedureGroup getSelectedProcedure() {
        return selectedProcedure;
    }

    public void setSelectedProcedure(RollupProcedureGroup selectedProcedure) {
        this.selectedProcedure = selectedProcedure;
    }

    private void addValues(Map<String, List<RollupProcedureGroup>> treeMap, String key, RollupProcedureGroup value) {

        List<RollupProcedureGroup> tempList = null;
        if (treeMap.containsKey(key)) {
            tempList = treeMap.get(key);
            if (tempList == null) {
                tempList = new ArrayList();
            }
            tempList.add(value);
        } else {
            tempList = new ArrayList();
            tempList.add(value);
        }
        treeMap.put(key, tempList);
    }

    public Map<String, List<RollupProcedureGroup>> getTreeMapAdult() {
        return treeMapAdult;
    }

    public Map<String, List<RollupProcedureGroup>> getTreeMapPed() {
        return treeMapPed;
    }

    public int getTabIdx() {
        return tabIdx;
    }

    public void setTabIdx(int tabIdx) {
        this.tabIdx = tabIdx;
    }

}
