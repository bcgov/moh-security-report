/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package swtwar;

import ca.bc.gov.hlth.swt.entity.SimpleSiteStatistic;
import ca.bc.gov.hlth.swt.entity.Site;
import ca.bc.gov.hlth.swt.session.RollupProcedureGroupFacadeLocal;
import ca.bc.gov.hlth.swt.session.SiteFacadeLocal;
import ca.bc.gov.hlth.swt.session.SiteStatisticFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import org.apache.commons.text.WordUtils;

/**
 *
 * @author arturo.lopez
 */
@ViewScoped
@Named
public class SpecialistProfile implements Serializable {

    private static final long serialVersionUID = 1L;

    public SpecialistProfile() {
    }

    @EJB
    private SiteFacadeLocal siteFacade;

    @EJB
    private SiteStatisticFacadeLocal siteStatisticFacade;

    @EJB
    private RollupProcedureGroupFacadeLocal rollupProcedureGroupFacade;

    private String firstName;
    private String lastName;

    private Site site;
    private String sessionId;
    private String surgeonId;
    private Long healthAuthorityFilter = null;
    private Long procedureFilter = null;
    private List<Long> facilityFilter = null;
    private Long encounterType = null;
    private Long cancerSuspected = null;
    private String surgeonNm;

    private static String startDt;
    private static String endDt;
    private final SimpleDateFormat sdf = new SimpleDateFormat("MMM dd, yyyy");
    private List<SimpleSiteStatistic> resultsAdult;
    Map<String, List<SimpleSiteStatistic>> treeMapAdult;
    private List<SimpleSiteStatistic> nonSprResultsAdult = new ArrayList<>();
    private List<SimpleSiteStatistic> resultsPed;
    Map<String, List<SimpleSiteStatistic>> treeMapPed;
    private List<SimpleSiteStatistic> nonSprResultsPed = new ArrayList<>();

    private long time = System.currentTimeMillis();

    private List<String> listProcedure;

    @PostConstruct
    public void init() {
        site = siteFacade.findCurrent();
        if (site == null) {
            throw new RuntimeException("No Sites Exist!");
        }
        sessionId = ((HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(true)).getId();
        surgeonId = ((HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest()).getParameter("rollupSurgeonId");
        firstName = ((HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest()).getParameter("firstName");
        lastName = ((HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest()).getParameter("lastName");
        startDt = sdf.format(site.getReportingPeriodStartDt());
        endDt = sdf.format(site.getReportingPeriodEndDt());

        if ((firstName == null) && (lastName == null)) {
            surgeonNm = ((HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest()).getParameter("surgeonNm");
        } else {
            surgeonNm = lastName.trim() + " " + firstName;
        }

        getAdultProcedures();
        getPediatricProcedures();

        //Set the parameters so they can be used when emailing a link
        String parameters = "";
        if (surgeonId != null) {
            parameters = parameters + "?rollupSurgeonId=" + surgeonId;

            if ((firstName != null) && (lastName != null)) {
                parameters = parameters + "&firstName=" + firstName + "&lastName=" + lastName;
            }
            //Encode the parameters, this stops [space] characters from breaking the hyperlink in the email
            parameters = parameters.replace(" ", "%20");
        }

    }

    public String retOriGroupList(String info) {
        String result = info;
        for (int i = 0; i < listProcedure.size(); i++) {
            String item = listProcedure.get(i);
            if (item.toUpperCase().equals(info.toUpperCase())) {
                result = item;
                break;
            }
        }
        return result;
    }

    public void getAdultProcedures() {
        try {
            treeMapAdult = new TreeMap<>();
            resultsAdult = siteStatisticFacade.findStatistics(sessionId, site.getSiteId(), healthAuthorityFilter, procedureFilter, facilityFilter, Long.parseLong(surgeonId), "Y", true);

            nonSprResultsAdult = nonSprHelpers.setupNonSprResults(resultsAdult);
            resultsAdult.removeAll(nonSprResultsAdult);

            for (int i = 0; i < resultsAdult.size(); i++) {
                addValues(treeMapAdult, resultsAdult.get(i).getFacilityNm(), resultsAdult.get(i));
            }

        } catch (Exception e) {
        }

        FacesContext.getCurrentInstance().getExternalContext().log("Rendering took: " + (System.currentTimeMillis() - time) + "ms");

    }

    public void getPediatricProcedures() {
        try {
            treeMapPed = new TreeMap<>();
            resultsPed = siteStatisticFacade.findStatistics(sessionId, site.getSiteId(), healthAuthorityFilter, procedureFilter, facilityFilter, Long.parseLong(surgeonId), "N", true);

            nonSprResultsPed = nonSprHelpers.setupNonSprResults(resultsPed);
            resultsPed.removeAll(nonSprResultsPed);

            resultsPed = formatList(resultsPed);

            for (int i = 0; i < resultsPed.size(); i++) {
                addValues(treeMapPed, resultsPed.get(i).getFacilityNm(), resultsPed.get(i));
            }

        } catch (Exception e) {
        }

        FacesContext.getCurrentInstance().getExternalContext().log("Rendering took: " + (System.currentTimeMillis() - time) + "ms");

    }

    private void addValues(Map<String, List<SimpleSiteStatistic>> treeMap, String key, SimpleSiteStatistic value) {
        List<SimpleSiteStatistic> tempList = null;
        if (treeMap.containsKey(key)) {
            tempList = treeMap.get(key);
            if (tempList == null) {
                tempList = new ArrayList();
            }
            tempList.add(value);
        } else {
            tempList = new ArrayList();
            tempList.add(value);
        }
        treeMap.put(key, tempList);
    }

    public List<SimpleSiteStatistic> formatList(List<SimpleSiteStatistic> results) {
        listProcedure = new ArrayList<>();
        for (int i = 0; i < results.size(); i++) {
            results.get(i).setFacilityNm(WordUtils.capitalizeFully(results.get(i).getFacilityNm().toString(), new char[]{' ', '.'}).replace("bc", "BC"));
            results.get(i).setHealthAuthorityNm(WordUtils.capitalizeFully(results.get(i).getHealthAuthorityNm()));
            listProcedure.add(results.get(i).getProcedureGroupNm());
            results.get(i).setProcedureGroupNm(WordUtils.capitalizeFully(results.get(i).getProcedureGroupNm()));
            results.get(i).setSurgeonNm(WordUtils.capitalizeFully(results.get(i).getSurgeonNm(), new char[]{' ', '.', ','}));
        }

        return results;
    }

    public List<SimpleSiteStatistic> getResultsPed() {
        return resultsPed;
    }

    public List<SimpleSiteStatistic> getResultsAdult() {
        return resultsAdult;
    }

    public Map<String, List<SimpleSiteStatistic>> getTreeMapAdult() {
        return treeMapAdult;
    }

    public Map<String, List<SimpleSiteStatistic>> getTreeMapPed() {
        return treeMapPed;
    }

    public Long getProcedureGroupId(Long siteId, String adult, String ProcedureGroupNm) {
        Long procedureGroupId = rollupProcedureGroupFacade.findIDProcedure(siteId, adult, ProcedureGroupNm).getProcedureGroupId();
        return procedureGroupId;
    }

    public SiteFacadeLocal getSiteFacade() {
        return siteFacade;
    }

    public SiteStatisticFacadeLocal getSiteStatisticFacade() {
        return siteStatisticFacade;
    }

    public Site getSite() {
        return site;
    }

    public String getSurgeonId() {
        return surgeonId;
    }

    public String getFirstName() {
        return firstName;
    }

    public String getLastName() {
        return lastName;
    }

    public String getSurgeonNm() {
        return surgeonNm;
    }

    public void setSurgeonNm(String surgeonNm) {
        this.surgeonNm = surgeonNm;
    }

    public Long getHealthAuthorityFilter() {
        return healthAuthorityFilter;
    }

    public Long getProcedureFilter() {
        return procedureFilter;
    }

    public List<Long> getFacilityFilter() {
        return facilityFilter;
    }

    public String getStartDt() {
        return startDt;
    }

    public String getEndDt() {
        return endDt;
    }

    public SimpleDateFormat getSdf() {
        return sdf;
    }

    public Long getEncounterType() {
        return encounterType;
    }

    public Long getCancerSuspected() {
        return cancerSuspected;
    }

//    public void setEmailLink(EmailLink emailLink) {
//        this.emailLink = emailLink;
//    }
}
