/*
 * Search.java
 *
 * Created on Oct 24, 2008, 2:41:49 PM
 */
package swtwar;

import ca.bc.gov.health.auth.jsf.SelectItemHelper;
import ca.bc.gov.hlth.swt.entity.NonSprDataEntry;
import ca.bc.gov.hlth.swt.entity.RollupHealthAuthority;
import ca.bc.gov.hlth.swt.entity.SimpleSiteStatistic;
import ca.bc.gov.hlth.swt.entity.Site;
import ca.bc.gov.hlth.swt.session.NonSprDataEntryFacadeLocal;
import ca.bc.gov.hlth.swt.session.RollupFacilityFacadeLocal;
import ca.bc.gov.hlth.swt.session.RollupHealthAuthorityFacadeLocal;
import ca.bc.gov.hlth.swt.session.RollupProcedureGroupFacadeLocal;
import ca.bc.gov.hlth.swt.session.RollupSurgeonFacadeLocal;
import ca.bc.gov.hlth.swt.session.SiteFacadeLocal;
import ca.bc.gov.hlth.swt.session.SiteStatisticFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpSession;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.text.WordUtils;

@ViewScoped
@Named("Search")
public class Search implements Serializable {

    private static final long serialVersionUID = 1L;

    private final SimpleDateFormat sdf = new SimpleDateFormat("MMM dd, yyyy");
    private static final String SPR_DATA_SOURCE = "Surgical Patient Registry";

    /* EJBs */
    @EJB
    private RollupFacilityFacadeLocal rollupFacilityFacade;
    @EJB
    private RollupHealthAuthorityFacadeLocal rollupHealthAuthorityFacade;
    @EJB
    private RollupSurgeonFacadeLocal rollupSurgeonFacade;
    @EJB
    private RollupProcedureGroupFacadeLocal rollupProcedureGroupFacade;
    @EJB
    private SiteFacadeLocal siteFacade;
    @EJB
    private SiteStatisticFacadeLocal siteStatisticFacade;
    @EJB
    private NonSprDataEntryFacadeLocal nonSprDataEntryFacade;

    /* Droplist options */
    private List<SelectItem> facilities;
    private List<SelectItem> surgeons;
    private List<SelectItem> healthAuthorities;
    /* Values selected in droplists */
    private List<Long> facilityFilter;
    private Long procedureFilter;
    private Long healthAuthorityFilter;
    private Long specialistFilter;
    /* hyperlink filters */
    private Site site;
    private List<SimpleSiteStatistic> results;
    private List<SimpleSiteStatistic> nonSprResults = new ArrayList<>();

    private String startDt;
    private String endDt;
    private Map nonSprMap;

    private String adult;
    private String rollupProcedureGroupId;
    private String procedureNm;
    private String procedureDs;
    private List<RollupHealthAuthority> allHA;
    private List<RollupHealthAuthority> haByProc;
    private boolean validHA = true;

    private Map<String, String> haMap;
    private String haFromMap;

    private void alterLabels() {
        for (SelectItem item : facilities) {
            if (item.getLabel().equals("Victoria - Royal Jubilee Hospital")
                    || item.getLabel().equals("Royal Jubilee Hospital")) {
                item.setLabel(item.getLabel() + " (Cardiac Only)");
            }
        }
    }

    /**
     * <p>Construct a new Page bean instance.</p>
     */
    public Search() {
    }

    @PostConstruct
    public void init() {
        site = siteFacade.findCurrent();
        if (site == null) {
            throw new RuntimeException("No Sites Exist!");
        }

        HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
        rollupProcedureGroupId = request.getParameter("rollupProcedure");
        procedureNm = request.getParameter("procName");
        adult = request.getParameter("adult");
        adult = adult.equals("Adult") ? "Y"
                : adult.equals("Pediatric") ? "N"
                : adult;
        procedureFilter = (rollupProcedureGroupId == null)
                ? rollupProcedureGroupFacade.findIDProcedure(site.getSiteId(), adult, procedureNm).getRollupProcedureGroupId()
                : Long.parseLong(rollupProcedureGroupId);
        procedureDs = rollupProcedureGroupFacade.findDescProcedure(procedureFilter).getProcedureGroupDesc();

        startDt = sdf.format(site.getReportingPeriodStartDt());
        endDt = sdf.format(site.getReportingPeriodEndDt());

        refreshDroplists();

        //Set the parameters so they can be used when emailing a link
        String parameters = "";
        if (procedureNm != null) {
            parameters = parameters + "?procName=" + procedureNm + "&adult=" + adult;

            if (rollupProcedureGroupId != null) {
                parameters = parameters + "&rollupProcedure=" + rollupProcedureGroupId;
            }
            parameters = parameters.replace(" ", "%20");
        }
//        emailLink.setParametersAndFrom(FacesContext.getCurrentInstance().getViewRoot().getViewId(), parameters);

    }

    /* Action Handlers */
    public String clear() {
        facilityFilter.clear();
        healthAuthorityFilter = null;
        specialistFilter = null;
        haFromMap = null;
        validHA = true;
        return refreshDroplists();
    }

    public String refreshDroplists() {
        long startTime = System.currentTimeMillis();
        List params = getFilterParams();
        List criteria = getFilterCriteria();
        facilities = SelectItemHelper.buildSelectItemList(rollupFacilityFacade.findBySiteAndMultipleCriteria(site.getSiteId(), criteria, params), "displayTxt", "rollupFacilityId");
        alterLabels();
        haByProc = rollupHealthAuthorityFacade.findBySiteAndMultipleCriteria(site.getSiteId(), criteria, params);
        allHA = rollupHealthAuthorityFacade.findAll();
        healthAuthorities = SelectItemHelper.buildSelectItemList(haByProc, "healthAuthorityNm", "rollupHealthAuthorityId");

        if (haMap == null) {
            haMap = new HashMap<>();
        }

        for (int i = 0; i < allHA.size(); i++) {
            haMap.put(Long.toString(allHA.get(i).getHealthAuthorityId()), allHA.get(i).getHealthAuthorityNm());
        }

        surgeons = SelectItemHelper.buildSelectItemList(rollupSurgeonFacade.findBySiteAndMultipleCriteria(site.getSiteId(), criteria, params), "displayTxt", "rollupSurgeonId");
        FacesContext.getCurrentInstance().getExternalContext().log("Filtered Droplists in " + (System.currentTimeMillis() - startTime) + "ms");
        return filter();
    }

    /*
    * Clears any HA value selected from the drop down
    * Called when an HA is selected from the map
    * We clear the facility and specialist as well because selecting an HA on the
    * map isn't restricted to an HA that matches a facility
     */
    public void clearHealthAuthorityFilter() {
        healthAuthorityFilter = null;
        facilityFilter = null;
        specialistFilter = null;
    }

    /**
     * Clears any ha value that was selected from the map Called when an HA is selected from the dropdown
     */
    public void clearHaFromMap() {
        haFromMap = null;
    }

    private List getFilterCriteria() {
        List criteria = new ArrayList();

        if (facilityFilter != null) {
            if (facilityFilter.size() > 0) {
                criteria.add("ROLLUP_FACILITY_ID");
            }
        }
        if (procedureFilter != null) {
            criteria.add("ROLLUP_PROCEDURE_GROUP_ID");
        }
        if (healthAuthorityFilter != null || haFromMap != null) {
            criteria.add("ROLLUP_HEALTH_AUTHORITY_ID");
        }
        if (specialistFilter != null) {
            criteria.add("ROLLUP_SURGEON_ID");
        }

        criteria.add("ADULT");

        return criteria;
    }

    private List getFilterParams() {
        List params = new ArrayList();

        if (facilityFilter != null) {
            if (facilityFilter.size() > 0) {
                params.add(facilityFilter);
            }
        }
        if (procedureFilter != null) {
            params.add(procedureFilter);
        }
        if (healthAuthorityFilter != null) {
            params.add(healthAuthorityFilter);
        } else if (haFromMap != null) {
            validHA = false;
            for (int i = 0; i < haByProc.size(); i++) {
                if (Long.toString(haByProc.get(i).getHealthAuthorityId()).equals(haFromMap)) {
                    haFromMap = haByProc.get(i).getRollupHealthAuthorityId().toString();
                    validHA = true;
                    break;
                }
            }
            if (!validHA) {
                haFromMap = null;
                healthAuthorityFilter = null;
            } else {
                healthAuthorityFilter = Long.parseLong(haFromMap);
                params.add(haFromMap);
            }

        }
        if (specialistFilter != null) {
            params.add(specialistFilter);
        }

        params.add(adult);

        return params;
    }

    public String changeHealthAuthority() {
        long startTime = System.currentTimeMillis();
        List params = getFilterParams();
        List criteria = getFilterCriteria();
        //Reset the filter when an HA is picked from the map, this is for cases where a facility has been selected
        //and then someone goes and selects an HA that the facility isn't a part of
        if (haFromMap != null) {
            healthAuthorities = SelectItemHelper.buildSelectItemList(haByProc, "healthAuthorityNm", "rollupHealthAuthorityId");
        }
        if (!criteria.contains("ROLLUP_HEALTH_AUTHORITY_ID")) {
            healthAuthorityFilter = null;
            haFromMap = null;
            validHA = true;
        }
        facilities = SelectItemHelper.buildSelectItemList(rollupFacilityFacade.findBySiteAndMultipleCriteria(site.getSiteId(), criteria, params), "displayTxt", "rollupFacilityId");
        alterLabels();
        surgeons = SelectItemHelper.buildSelectItemList(rollupSurgeonFacade.findBySiteAndMultipleCriteria(site.getSiteId(), criteria, params), "displayTxt", "rollupSurgeonId");
        FacesContext.getCurrentInstance().getExternalContext().log("Filtered Droplists in " + (System.currentTimeMillis() - startTime) + "ms");
        return filter();
    }

    public String changeFacility() {
        long startTime = System.currentTimeMillis();
        List criteria = getFilterCriteria();
        List params = getFilterParams();
        if (facilityFilter == null) {
            facilities = SelectItemHelper.buildSelectItemList(rollupFacilityFacade.findBySiteAndMultipleCriteria(site.getSiteId(), criteria, params), "displayTxt", "rollupFacilityId");
        }
        alterLabels();
        healthAuthorities = SelectItemHelper.buildSelectItemList(rollupHealthAuthorityFacade.findBySiteAndMultipleCriteria(site.getSiteId(), criteria, params), "healthAuthorityNm", "rollupHealthAuthorityId");
        surgeons = SelectItemHelper.buildSelectItemList(rollupSurgeonFacade.findBySiteAndMultipleCriteria(site.getSiteId(), criteria, params), "displayTxt", "rollupSurgeonId");
        FacesContext.getCurrentInstance().getExternalContext().log("Filtered Droplists in " + (System.currentTimeMillis() - startTime) + "ms");
        return filter();
    }

    public String changeSpecialist() {
        long startTime = System.currentTimeMillis();
        List criteria = getFilterCriteria();
        List params = getFilterParams();
        if (specialistFilter == null) {
            surgeons = SelectItemHelper.buildSelectItemList(rollupSurgeonFacade.findBySiteAndMultipleCriteria(site.getSiteId(), criteria, params), "displayTxt", "rollupSurgeonId");
        }
        facilities = SelectItemHelper.buildSelectItemList(rollupFacilityFacade.findBySiteAndMultipleCriteria(site.getSiteId(), criteria, params), "displayTxt", "rollupFacilityId");
        alterLabels();
        healthAuthorities = SelectItemHelper.buildSelectItemList(rollupHealthAuthorityFacade.findBySiteAndMultipleCriteria(site.getSiteId(), criteria, params), "healthAuthorityNm", "rollupHealthAuthorityId");
        FacesContext.getCurrentInstance().getExternalContext().log("Filtered Droplists in " + (System.currentTimeMillis() - startTime) + "ms");
        return filter();
    }

    public String filter() {
        dofilter();
        return null;
    }

    private void dofilter() {
        long time = System.currentTimeMillis();

        if (!validHA && haFromMap == null && healthAuthorityFilter == null) {
            nonSprResults = null;
            results = null;
            FacesContext.getCurrentInstance().addMessage("invalidHAMsg", new FacesMessage(FacesMessage.SEVERITY_INFO, "Info", "No procedure data for this Health Authority"));
        } else {
            nonSprMap = nonSprDataEntryFacade.findNonSprProcedureMapForSiteId(site.getSiteId());
            String sessionId = ((HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(true)).getId();
            results = siteStatisticFacade.findStatistics(sessionId, site.getSiteId(), healthAuthorityFilter, procedureFilter, facilityFilter, specialistFilter, adult, validHA);

            if (!results.get(0).getDataSource().equals(SPR_DATA_SOURCE)) {
                nonSprResults = nonSprHelpers.addFacilityStatistics(results);
            }

            if (nonSprResults != null) {
                results.removeAll(nonSprResults);
            }

            FacesContext.getCurrentInstance().getExternalContext().log("Rendering took: " + (System.currentTimeMillis() - time) + "ms");
            results = formatList(results);
        }

    }

    public String getNonSprAsOfDt(long procedureId) {
        NonSprDataEntry nonSprDataEntry = (NonSprDataEntry) nonSprMap.get(procedureId);
        String nonSprAsOfDt = sdf.format(nonSprDataEntry.getPatientsWaitingAsOfDt());
        return nonSprAsOfDt;
    }

    public String getNonSprStartDt(long procedureId) {
        NonSprDataEntry nonSprDataEntry = (NonSprDataEntry) nonSprMap.get(procedureId);
        String nonSprStartDt = sdf.format(nonSprDataEntry.getProcedureCompletedFromDt());
        return nonSprStartDt;
    }

    public String getNonSprEndDt(long procedureId) {
        NonSprDataEntry nonSprDataEntry = (NonSprDataEntry) nonSprMap.get(procedureId);
        String nonSprEndDt = sdf.format(nonSprDataEntry.getProcedureCompletedToDt());
        return nonSprEndDt;
    }

    public List<SimpleSiteStatistic> formatList(List<SimpleSiteStatistic> results) {
        for (int i = 0; i < results.size(); i++) {
            results.get(i).setFacilityNm(WordUtils.capitalizeFully(results.get(i).getFacilityNm(), new char[]{' ', '.'}).replace("bc", "BC"));
            results.get(i).setHealthAuthorityNm(WordUtils.capitalizeFully(results.get(i).getHealthAuthorityNm()));
            results.get(i).setSurgeonNm(WordUtils.capitalizeFully(results.get(i).getSurgeonNm(), new char[]{' ', '-', '(', '\'', '.'}));
        }

        return results;
    }

    public boolean shouldDisplayResult(SimpleSiteStatistic result) {
        if (result.getFiftyPctWeeksNbrForWaitTwo() == null || result.getNinetyPctWeeksNbrForWaitTwo() == null || (result.getProceduresPerformedNbr() != null && result.getProceduresPerformedNbr() < 5)) {
            return false;
        }
        //boolean fiveOrMoreCases = result.getFiftyPctWeeksNbrForWaitTwo()>= 5;
        //boolean differentFiftyAndNinetyPercentile = Double.compare(result.getFiftyPctWeeksNbrForWaitTwo(), result.getNinetyPctWeeksNbrForWaitTwo()) != 0;
        //return checkBoth; // && differentFiftyAndNinetyPercentile;
        return true;
    }

    public boolean shouldDisplayFacilityResult(SimpleSiteStatistic result) {
        if (result.getRollup1FiftyPctWeeksNbrForWaitTwo() == null || result.getRollup1NinetyPctWeeksNbrForWaitTwo() == null || (result.getRollup1ProceduresPerformedNbr() != null && result.getRollup1ProceduresPerformedNbr() < 5)) {
            return false;
        }
        //boolean fiveOrMoreCases = result.getRollup1ProceduresPerformedNbr() >= 5;
        //boolean differentFiftyAndNinetyPercentile = Double.compare(result.getRollup1FiftyPctWeeksNbrForWaitTwo(), result.getRollup1NinetyPctWeeksNbrForWaitTwo()) != 0;
        //return fiveOrMoreCases || differentFiftyAndNinetyPercentile;
        return true;
    }

    public boolean shouldDisplayHAResult(SimpleSiteStatistic result) {
        if (result.getRollup2FiftyPctWeeksNbrForWaitTwo() == null || result.getRollup2NinetyPctWeeksNbrForWaitTwo() == null || (result.getRollup2ProceduresPerformedNbr() != null && result.getRollup2ProceduresPerformedNbr() < 5)) {
            return false;
        }
        //boolean fiveOrMoreCases = result.getRollup2ProceduresPerformedNbr() >= 5;
        //boolean differentFiftyAndNinetyPercentile = Double.compare(result.getRollup2FiftyPctWeeksNbrForWaitTwo(), result.getRollup2NinetyPctWeeksNbrForWaitTwo()) != 0;
        //return fiveOrMoreCases || differentFiftyAndNinetyPercentile;
        return true;
    }

    public boolean shouldDisplayProcedureResult(SimpleSiteStatistic result) {
        if (result.getRollup3FiftyPctWeeksNbrForWaitTwo() == null || result.getRollup3NinetyPctWeeksNbrForWaitTwo() == null || (result.getRollup3ProceduresPerformedNbr() != null && result.getRollup3ProceduresPerformedNbr() < 5)) {
            return false;
        }
        //boolean fiveOrMoreCases = result.getRollup3ProceduresPerformedNbr() >= 5;
        //boolean differentFiftyAndNinetyPercentile = Double.compare(result.getRollup3FiftyPctWeeksNbrForWaitTwo(), result.getRollup3NinetyPctWeeksNbrForWaitTwo()) != 0;
        //return fiveOrMoreCases || differentFiftyAndNinetyPercentile;
        return true;
    }

    /* Getters and Setters */
    public List getFacilities() {
        return facilities;
    }

    public void setFacilities(List facilities) {
        this.facilities = facilities;
    }

    public List<Long> getFacilityFilter() {
        return facilityFilter;
    }

    public void setFacilityFilter(List<Long> facilityFilter) {
        this.facilityFilter = facilityFilter;
    }

    public List getHealthAuthorities() {
        return healthAuthorities;
    }

    public Map<String, String> getHaMap() {
        return haMap;
    }

    public void setHaMap(Map<String, String> haMap) {
        this.haMap = haMap;
    }

    public List<RollupHealthAuthority> getAllHA() {
        return allHA;
    }

    public void setAllHA(List<RollupHealthAuthority> allHA) {
        this.allHA = allHA;
    }

    public String getHaFromMap() {
        return haFromMap;
    }

    public void setHaFromMap(String haFromMap) {
        this.haFromMap = haFromMap;
    }

    public void setHealthAuthorities(List healthAuthorities) {
        this.healthAuthorities = healthAuthorities;
    }

    public Long getHealthAuthorityFilter() {
        return healthAuthorityFilter;
    }

    public void setHealthAuthorityFilter(Long healthAuthorityFilter) {
        this.healthAuthorityFilter = healthAuthorityFilter;
    }

    public Long getProcedureFilter() {
        return procedureFilter;
    }

    public void setProcedureFilter(Long procedureFilter) {
        this.procedureFilter = procedureFilter;
    }

    public String getProcedureNm() {
        return procedureNm;
    }

    public String getProcedureDs() {
        return procedureDs;
    }

    public String getAdult() {
        return adult;
    }

    public String getRollupProcedureGroupId() {
        return rollupProcedureGroupId;
    }

    public Site getSite() {
        return site;
    }

    public void setSite(Site site) {
        this.site = site;
    }

    public Long getSpecialistFilter() {
        return specialistFilter;
    }

    public void setSpecialistFilter(Long specialistFilter) {
        this.specialistFilter = specialistFilter;
    }

    public List getSurgeons() {
        return surgeons;
    }

    public void setSurgeons(List surgeons) {
        this.surgeons = surgeons;
    }

    public String getStartDt() {
        return startDt;
    }

    public void setStartDt(String startDt) {
        this.startDt = startDt;
    }

    public String getEndDt() {
        return endDt;
    }

    public void setEndDt(String endDt) {
        this.endDt = endDt;
    }

    public List getResults() {
        return results;
    }

    public void setResults(List<SimpleSiteStatistic> results) {
        this.results = results;
    }

    public Map getNonSprMap() {
        return nonSprMap;
    }

    public void setNonSprMap(Map nonSprMap) {
        this.nonSprMap = nonSprMap;
    }

    public List getNonSprResults() {
        return nonSprResults;
    }

    public void setNonSprResults(List nonSprResults) {
        this.nonSprResults = nonSprResults;
    }

    public boolean isValidHA() {
        return validHA;
    }

    public void setValidHA(boolean validHA) {
        this.validHA = validHA;
    }

//    public void setEmailLink(EmailLink emailLink) {
//        this.emailLink = emailLink;
//    }
}
