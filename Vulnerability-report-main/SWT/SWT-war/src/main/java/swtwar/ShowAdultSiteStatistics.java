/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package swtwar;

import ca.bc.gov.hlth.swt.delegate.MediaDelegate;
import ca.bc.gov.hlth.swt.entity.NonSprDataEntry;
import ca.bc.gov.hlth.swt.entity.Site;
import ca.bc.gov.hlth.swt.session.NonSprDataEntryFacadeLocal;
import ca.bc.gov.hlth.swt.session.SiteFacadeLocal;
import ca.bc.gov.hlth.swt.to.CurrentPriorityAreaDSWTStatisticsTo;
import ca.bc.gov.hlth.swt.to.CurrentWTStatisticsTo;
import ca.bc.gov.hlth.swt.to.DataSourceLongTermWTSec2To;
import ca.bc.gov.hlth.swt.to.OrderedLongTermWTSec1To;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Map;

@ViewScoped
@Named("ShowAdultSiteStatistics")
public class ShowAdultSiteStatistics implements Serializable {

    private static final long serialVersionUID = 1L;

    @EJB
    private SiteFacadeLocal siteFacade;
    
    @EJB
    private NonSprDataEntryFacadeLocal nonSprDataEntryFacade;

    @Inject
    private MediaDelegate mediaDelegate;

    private List<CurrentWTStatisticsTo> currentWaitTimes;
    private List<CurrentPriorityAreaDSWTStatisticsTo> currentPriorityAreaDSWTStatisticsTos;

    private List<OrderedLongTermWTSec1To> orderedLongTermSection1WaitTimes;
    private List<DataSourceLongTermWTSec2To> dataSourceLongTermWTSec2Tos;

    private Site site;
    private String startDt;
    private String endDt;

    private java.util.Map nonSprMap;

    private boolean showMedia;

    private Search search;
    private Map map;

    public ShowAdultSiteStatistics() {
    }

    @PostConstruct
    public void init() {
        this.readMediaStatistics();
    }

    public MediaDelegate getMediaDelegate() {
        return mediaDelegate;
    }

    public void setMediaDelegate(MediaDelegate mediaDelegate) {
        this.mediaDelegate = mediaDelegate;
    }

    private void readMediaStatistics() {
        long start = System.currentTimeMillis();
        String currentSiteId = this.mediaDelegate.getCurrentSiteId();

        site = siteFacade.find(new Long(currentSiteId));
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
        startDt = sdf.format(site.getReportingPeriodStartDt());
        endDt = sdf.format(site.getReportingPeriodEndDt());
        nonSprMap = nonSprDataEntryFacade.findNonSprProcedureMapByDataSourceForSiteId(site.getSiteId());

        String adult = "Y";

        boolean findStatistics = true;

        //current wait times data
        this.currentWaitTimes = this.mediaDelegate.getCurrentWaitTimes(currentSiteId, adult);

        //Priority wait times data
        this.currentPriorityAreaDSWTStatisticsTos = this.mediaDelegate.getCurrentPriorityAreaDSWTStatisticsTos(currentSiteId, adult);

        //Long Term Wait times data section 1
        this.orderedLongTermSection1WaitTimes = this.mediaDelegate.getOrderedLongTermWTSec1(currentSiteId, adult);

        //Long Term Wait times data section 2
        this.dataSourceLongTermWTSec2Tos = this.mediaDelegate.getDataSourceLongTermWTSec2Tos(currentSiteId, adult);

        for (CurrentPriorityAreaDSWTStatisticsTo currentWTStatisticsTo : currentPriorityAreaDSWTStatisticsTos) {
            if ("Surgical Patient Registry".equals(currentWTStatisticsTo.getDataSource())
                    || "SPR - Hip Fracture Fixation".equals(currentWTStatisticsTo.getDataSource())) {
                currentWTStatisticsTo.setAsOfDate(endDt);
                currentWTStatisticsTo.setStartDate(startDt);
                currentWTStatisticsTo.setEndDate(endDt);
            } else {
                NonSprDataEntry nonSprDataEntry = (NonSprDataEntry) nonSprMap.get(currentWTStatisticsTo.getDataSource());
                currentWTStatisticsTo.setAsOfDate(sdf.format(nonSprDataEntry.getPatientsWaitingAsOfDt()));
                currentWTStatisticsTo.setStartDate(sdf.format(nonSprDataEntry.getProcedureCompletedFromDt()));
                currentWTStatisticsTo.setEndDate(sdf.format(nonSprDataEntry.getProcedureCompletedToDt()));
            }
        }

        if ((this.currentWaitTimes == null || this.currentWaitTimes.size() == 0)
                && (this.currentPriorityAreaDSWTStatisticsTos == null || this.currentPriorityAreaDSWTStatisticsTos.size() == 0)
                && (this.orderedLongTermSection1WaitTimes == null || this.orderedLongTermSection1WaitTimes.size() == 0)
                && (this.dataSourceLongTermWTSec2Tos == null || this.dataSourceLongTermWTSec2Tos.size() == 0)) {
            this.showMedia = false;
            findStatistics = false;
        } else {
            this.showMedia = true;
        }

        if (!findStatistics) {
            FacesContext fc = FacesContext.getCurrentInstance();
            FacesMessage errorMessage = null;
            errorMessage = new FacesMessage("Can not find Adult Wait Time Statistics, please select another site.");
            fc.addMessage("siteId1", errorMessage);
        }
        System.out.print("Created media site in " + (System.currentTimeMillis() - start) + "ms");
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    public Map getMap() {
        return map;
    }

    public void setMap(Map map) {
        this.map = map;
    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @return reference to the scoped data bean
     */
    public Search getSearch() {
        return search;
    }

    public void setSearch(Search search) {
        this.search = search;
    }

    public void setCurrentPriorityAreaDSWTStatisticsTos(List<CurrentPriorityAreaDSWTStatisticsTo> currentPriorityAreaDSWTStatisticsTos) {
        this.currentPriorityAreaDSWTStatisticsTos = currentPriorityAreaDSWTStatisticsTos;
    }

    public List<CurrentWTStatisticsTo> getCurrentWaitTimes() {
        return currentWaitTimes;
    }

    public void setCurrentWaitTimes(List<CurrentWTStatisticsTo> currentWaitTimes) {
        this.currentWaitTimes = currentWaitTimes;
    }

    public List<DataSourceLongTermWTSec2To> getDataSourceLongTermWTSec2Tos() {
        return dataSourceLongTermWTSec2Tos;
    }

    public void setDataSourceLongTermWTSec2Tos(List<DataSourceLongTermWTSec2To> dataSourceLongTermWTSec2Tos) {
        this.dataSourceLongTermWTSec2Tos = dataSourceLongTermWTSec2Tos;
    }

    public List<OrderedLongTermWTSec1To> getOrderedLongTermSection1WaitTimes() {
        return orderedLongTermSection1WaitTimes;
    }

    public void setOrderedLongTermSection1WaitTimes(List<OrderedLongTermWTSec1To> orderedLongTermSection1WaitTimes) {
        this.orderedLongTermSection1WaitTimes = orderedLongTermSection1WaitTimes;
    }

    public boolean isShowMedia() {
        return showMedia;
    }

    public void setShowMedia(boolean showMedia) {
        this.showMedia = showMedia;
    }

    public String getStartDt() {
        return startDt;
    }

    public String getEndDt() {
        return endDt;
    }

    public Integer checkStatsArray() {
        if (dataSourceLongTermWTSec2Tos.size() == 1) {
            return 0;
        }
        return 1;
    }

    public Integer checkCardioStatsArray() {
        Integer i;
        if (dataSourceLongTermWTSec2Tos.size() == 1) {
            i = 0;
        } else {
            i = 1;
        }
        if (dataSourceLongTermWTSec2Tos.get(i).getPgnLongTermWTSec2Tos().get(0).getPriorityLongTermWTSec2Tos().size() == 1) {
            return 0;
        } else if (dataSourceLongTermWTSec2Tos.get(i).getPgnLongTermWTSec2Tos().get(0).getPriorityLongTermWTSec2Tos().size() == 2) {
            return 1;
        }
        return 2;
    }
}
