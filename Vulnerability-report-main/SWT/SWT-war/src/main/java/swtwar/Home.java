/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package swtwar;

import ca.bc.gov.hlth.swt.entity.SiteAnnouncement;
import ca.bc.gov.hlth.swt.session.SiteAnnouncementFacadeLocal;
import ca.bc.gov.hlth.swt.session.SiteFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.SessionScoped;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.List;

/**
 *
 * @author arturo.lopez
 */
@SessionScoped
@Named
public class Home implements Serializable {

    private static final long serialVersionUID = 1L;

    @EJB
    private SiteAnnouncementFacadeLocal siteAnnouncementFacade;

    @EJB
    private SiteFacadeLocal siteFacade;

    private Long siteId;

    /**
     * <p>Construct a new Page bean instance.</p>
     */
    public Home() {
    }

    /**
     * <p>Callback method that is called whenever a page is navigated to, either directly via a URL, or indirectly via
     * page navigation. Customize this method to acquire resources that will be needed for event handlers and lifecycle
     * methods, whether or not this page is performing post back processing.</p>
     *
     * <p>Note that, if the current request is a postback, the property values of the components do <strong>not</strong>
     * represent any values submitted with this request. Instead, they represent the property values that were saved for
     * this view when it was rendered.</p>
     */
    @PostConstruct
    public void init() {
        siteId = siteFacade.findCurrent().getSiteId();
    }

    public String getCurrentAnnouncementText() {
        if (siteId == null) {
            siteId = siteFacade.findCurrent().getSiteId();
        }
        List announcements = siteAnnouncementFacade.findBySiteId(siteId);
        if (announcements.size() > 0) {
            String tmpString = (((SiteAnnouncement) announcements.get(0)).getAnnouncementTxt().replaceAll("\n", "<br/>").replaceFirst("<br/>", ""));
            return (tmpString.replaceFirst("<br/>", ""));
        } else {
            return null;
        }
    }

}
