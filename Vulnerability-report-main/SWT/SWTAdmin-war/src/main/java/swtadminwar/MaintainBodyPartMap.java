/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package swtadminwar;

import ca.bc.gov.health.auth.jsf.SelectItemHelper;
import ca.bc.gov.hlth.swt.entity.BodyPart;
import ca.bc.gov.hlth.swt.entity.ProcedureGroup;
import ca.bc.gov.hlth.swt.session.MaintainRollupsFacadeLocal;
import ca.bc.gov.hlth.swt.session.ProcedureGroupFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.event.ValueChangeEvent;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import org.primefaces.model.DualListModel;
import swtadminwar.businessdelegate.MaintainRollupsDelegate;

/**
 *
 * @author arturo.lopez
 */
@ViewScoped
@Named("MaintainBodyPartMap")
public class MaintainBodyPartMap implements Serializable {

    private static final long serialVersionUID = 1L;

    @EJB
    private MaintainRollupsFacadeLocal maintainRollupsFacade;

    @EJB
    private ProcedureGroupFacadeLocal procedureGroupFacade;

    private static final String UNASSIGNED_CODES = "Unassigned Codes";
    private static final String ALL_CODES = "All Codes";
    private static final String DEFAULT_PROCEDURE_GROUP = "-1";

    private String selectedProcedureGroupId;
    private String selectedProcedureGroupName;
    private List<SelectItem> procedureGroupDropDown;
    private DualListModel<BodyPart> bodyParts = new DualListModel<>();

    //retain the error messages
    //since changing procedure group will erase the error message from context
    private HashMap errorMessages;

    @Inject
    private MaintainRollupsDelegate maintainRollupsDelegate;

    public MaintainBodyPartMap() {
    }

    @PostConstruct
    public void init() {
        //init the procedure group dropdown
        this.selectedProcedureGroupId = DEFAULT_PROCEDURE_GROUP;
        List<ProcedureGroup> procedureGroups = procedureGroupFacade.findAllNonExpired();
        this.procedureGroupDropDown = SelectItemHelper.buildSelectItemList(procedureGroups, "procedureGroupNm", "procedureGroupId", false);

        this.selectedProcedureGroupName = null;

        //init the error messages
        this.errorMessages = new HashMap();
    }

    /**
     * populates pick list for body parts
     */
    private void populateBodyPartPicklist(Long procedureGroupId) {
        List<BodyPart> availableBodyParts = this.maintainRollupsFacade.findAvailableBodyParts(procedureGroupId); //This just queries all body parts
        List<BodyPart> selectedBodyParts = this.maintainRollupsDelegate.getAssignedBodyParts(procedureGroupId.toString());

        availableBodyParts.removeAll(selectedBodyParts);

        this.bodyParts = new DualListModel<BodyPart>(availableBodyParts, selectedBodyParts);
    }

    /**
     * Listener accepts the request sent when user changes the procedure group dropdown list.
     *
     * @param vce ValueChangeEvent the event contains the old and new value
     */
    public void changeProcedureGroup(ValueChangeEvent vce) {

        String newProcedureGroup = vce.getNewValue().toString();
        if (newProcedureGroup.equals("-1")) {
            this.bodyParts = new DualListModel<BodyPart>();
            this.selectedProcedureGroupName = null;
        } else {
            populateBodyPartPicklist(Long.parseLong(newProcedureGroup));
            this.selectedProcedureGroupName = readProcedureName(newProcedureGroup);
        }
    }

    /**
     * Validates the inout fields when save button is clicked.
     *
     * @return
     */
    private boolean saveActionValidation() {

        //validation
        FacesContext ctx = FacesContext.getCurrentInstance();
        boolean isValid = true;
        FacesMessage errorMessage = null;
        if (this.selectedProcedureGroupId.equalsIgnoreCase(DEFAULT_PROCEDURE_GROUP)) {
            errorMessage = new FacesMessage("Please select a procedure group.");
            ctx.addMessage("procedureGroupDropDownId1", errorMessage);
            this.errorMessages.put("procedureGroupDropDownId1", errorMessage);
            isValid = false;
        }
        return isValid;
    }

    /**
     * Saves the procedure assignments.
     *
     * @return String navigation string.
     */
    public String saveAction() {
        if (!this.saveActionValidation()) {
            return null;
        }

        this.maintainRollupsDelegate.saveAssignedBodyParts(this.selectedProcedureGroupId, this.bodyParts.getTarget());
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Save Successful"));
        return null;
    }

    /**
     * Clear the changes haven been saved to database.
     *
     * @return String the navigation string.
     */
    public String clearAction() {
        if (!this.selectedProcedureGroupId.equals("-1")) {
            List<BodyPart> availableBodyParts = this.maintainRollupsFacade.findAvailableBodyParts(Long.parseLong(this.selectedProcedureGroupId));
            List<BodyPart> selectedBodyParts = new ArrayList<>();
            this.bodyParts = new DualListModel<BodyPart>(availableBodyParts, selectedBodyParts);
        }
        return null;
    }

    /**
     * Parse the procedure name.
     *
     * @param selectedProcedureGroupId String
     * @return the procedure name
     */
    private String readProcedureName(String selectedProcedureGroupId) {
        if (!selectedProcedureGroupId.equalsIgnoreCase("-1")) {
            for (int i = 0; i < this.procedureGroupDropDown.size(); i++) {
                SelectItem si = (SelectItem) this.procedureGroupDropDown.get(i);
                String value = si.getValue().toString();
                if (value.equalsIgnoreCase(selectedProcedureGroupId)) {
                    return si.getLabel();
                }
            }
        }
        return null;
    }

    /**
     * getters and setters
     */
    public HashMap getErrorMessages() {
        return errorMessages;
    }

    public void setErrorMessages(HashMap errorMessages) {
        this.errorMessages = errorMessages;
    }

    public List<SelectItem> getProcedureGroupDropDown() {
        return procedureGroupDropDown;
    }

    public void setProcedureGroupDropDown(List<SelectItem> procedureGroupDropDown) {
        this.procedureGroupDropDown = procedureGroupDropDown;
    }

    public String getSelectedProcedureGroupId() {
        return selectedProcedureGroupId;
    }

    public void setSelectedProcedureGroupId(String selectedProcedureGroupId) {
        this.selectedProcedureGroupId = selectedProcedureGroupId;
    }

    public String getSelectedProcedureGroupName() {
        return selectedProcedureGroupName;
    }

    public void setSelectedProcedureGroupName(String selectedProcedureGroupName) {
        this.selectedProcedureGroupName = selectedProcedureGroupName;
    }

    public MaintainRollupsDelegate getMaintainRollupsDelegate() {
        return maintainRollupsDelegate;
    }

    public void setMaintainRollupsDelegate(MaintainRollupsDelegate maintainRollupsDelegate) {
        this.maintainRollupsDelegate = maintainRollupsDelegate;
    }

    public DualListModel<BodyPart> getBodyParts() {
        return bodyParts;
    }

    public void setBodyParts(DualListModel<BodyPart> bodyParts) {
        this.bodyParts = bodyParts;
    }
}
