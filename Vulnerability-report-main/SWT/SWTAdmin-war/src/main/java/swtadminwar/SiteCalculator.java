/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package swtadminwar;

import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;

/**
 * This class is responsible for accepting site recalculation requests. It delegates the recalculation to
 * "ScheduledCalculations.java"
 *
 * @author Adebiyi.Kuseju
 */
@ViewScoped
@Named("SiteCalculator")
public class SiteCalculator implements Serializable {

    private static final long serialVersionUID = 1L;

    private static final String RECALCULATE_NOW = "Recalculate Now";
    private static final String RECALCULATE_OVERNIGHT = "Recalculate Overnight";

    private long selectedSite;
    @Inject
    private ScheduledCalculations calculations;
    private boolean valid;

    /**
     * Validation method that ensures that a site is selected before recalculation can be scheduled.
     *
     * @return
     */
    public String checkSelection() {
        //  if (selectedSite == null || selectedSite.equalsIgnoreCase("")) {
        if (selectedSite == 0) {
            FacesContext.getCurrentInstance().addMessage("", new FacesMessage("* Please select a site to recalculate"));
            valid = false;
            return null;
        }
        valid = true;
        return null;
    }

    /**
     * Recalculate a site immediately. Recalculation is delegated to ScheduledRecalculations for handling.
     *
     * @return
     */
    public String recalculateNow() {
        try {
            calculations.scheduleCalculation(selectedSite, ScheduledCalculations.ScheduleType.NOW);
            FacesContext.getCurrentInstance().addMessage("", new FacesMessage(FacesMessage.SEVERITY_INFO, "Site submitted for recalculation", "Site submitted for recalculation"));
        } catch (CalculationException ce) {
            FacesContext.getCurrentInstance().addMessage("", new FacesMessage("* " + ce.getMessage()));
            valid = false;
        }
        return null;
    }

    /**
     * Recalculates a site overnight. Recalculation is delegated to ScheduledRecalculations for handling.
     *
     * @return
     */
    public String recalculateOvernight() {
        try {
            calculations.scheduleCalculation(selectedSite, ScheduledCalculations.ScheduleType.OVERNIGHT);
            FacesContext.getCurrentInstance().addMessage("", new FacesMessage(FacesMessage.SEVERITY_INFO, "Site submitted for recalculation", "Site submitted for recalculation"));
        } catch (CalculationException ce) {
            FacesContext.getCurrentInstance().addMessage("", new FacesMessage("* " + ce.getMessage()));
            valid = false;
        }
        return null;
    }

    /**
     * Determines if the Recalculate Now button is enabled
     *
     * @return boolean
     */
    public boolean getEnableImmediate() {
        for (CalculationDTO dto : calculations.getCalculations()) {
            if (dto.getType().equals(RECALCULATE_NOW)) {
                return false;
            }
        }
        return selectedSite != 0;
    }

    /**
     * Determines if the Recalculate Overnight button is enabled
     *
     * @return boolean
     */
    public boolean getEnableOvernight() {
        for (CalculationDTO dto : calculations.getCalculations()) {
            if (dto.getType().equals(RECALCULATE_OVERNIGHT)) {
                return false;
            }
        }
        return selectedSite != 0;
    }

    public boolean isValid() {
        return valid;
    }

    public void setCalculations(ScheduledCalculations calculations) {
        this.calculations = calculations;
    }

    public ScheduledCalculations getCalculations() {
        return calculations;
    }

    public long getSelectedSite() {
        return selectedSite;
    }

    public void setSelectedSite(long selectedSite) {
        this.selectedSite = selectedSite;
    }

}
