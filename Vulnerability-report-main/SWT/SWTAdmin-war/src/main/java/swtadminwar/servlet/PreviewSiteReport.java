package swtadminwar.servlet;

import ca.bc.gov.hlth.swt.session.SiteFacadeLocal;
import ca.bc.gov.hlth.swt.session.SiteStatisticFacadeLocal;
import com.crystaldecisions.sdk.occa.report.exportoptions.ReportExportFormat;
import jakarta.ejb.EJB;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import swtadminwar.PreviewSiteStatistics;

/**
 * Crystal report wrapper for the preview site statistics report.
 * @author greg.perkins
 */
public class PreviewSiteReport extends CrystalReportServlet{

    @EJB
    SiteStatisticFacadeLocal ssFacade;
    @EJB
    SiteFacadeLocal siteFacade;
    
    private HttpServletRequest request;
    
    /**
     * Cache to store the report, since it takes a minute to generate.
     */
    private Map cache = new HashMap();    
    
    protected String getReportLocation(){
        return "Report1.rpt";
    }
    
    protected String getClassName(){
        return "ca.bc.gov.hlth.swt.entity.SimpleSiteStatistic";
    }
    
    protected String getTableName(){
        return "SimpleSiteStatistic";
    }
    
    protected Collection getDataSet(String adult){
        List l = ssFacade.findStatisticsForReport(getLatestSiteId(), adult);
        return l;
    }
    
    @Override
    protected ReportExportFormat getExportFormat() {
        String format = request.getParameter("format");
        if ("PDF".equalsIgnoreCase(format) || format==null || "".equals(format)){
            return ReportExportFormat.PDF;
        }else if ("XLS".equalsIgnoreCase(format)){
            return ReportExportFormat.recordToMSExcel; //ReportExportFormat.MSExcel doesn't work
        }else{
            return null;
        }        
    }    
    
    @Override
    protected void setupResponseHeaders(HttpServletResponse response) {
        String format = request.getParameter("format");
        String adult = request.getParameter("adult");

        if ("PDF".equalsIgnoreCase(format) || format==null || "".equals(format)){
            response.setContentType("application/pdf");
        }else if ("XLS".equalsIgnoreCase(format)){        
            Calendar cal = Calendar.getInstance();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd_HHmmss");            
            StringBuilder builder = new StringBuilder();
            
            if (adult.equalsIgnoreCase("Y")) {
                builder.append("Adult_Public_");
            } else {
                builder.append("Pediatric_Public_");
            }
            
            builder.append("Waitimes_" + sdf.format(cal.getTime()) + ".csv");
            
            response.setContentType("application/vnd.ms-excel");
            response.setHeader("Content-Disposition", "attachment;filename=\"" + builder + "\"");
        }
    }    

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        synchronized(this){
            this.request = request;
            super.doGet(request, response);
        }
    }
    
    /**
     * Overrides the parent by adding caching.
     * @return
     */
    @Override
    protected byte[] getReportBytes(String adult){
            //if (cache.get(getLatestSiteId())!=null){
            //    return (byte[])cache.get(getLatestSiteId());
            //}
            byte[] data = super.getReportBytes(adult);
            //cache.put(getLatestSiteId(), data);
            return data;
    }
    
    /**
     * Finds the current Site
     * @return Long
     */
    private Long getLatestSiteId(){
        PreviewSiteStatistics pss = (PreviewSiteStatistics)request.getSession().getAttribute("PreviewSiteStatistics");        
        if (pss!=null){
            return Long.parseLong(pss.getSelectedSiteId());
        }
       return siteFacade.findCurrent().getSiteId();
    }    
}
