/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package swtadminwar.servlet;

import com.crystaldecisions.sdk.occa.report.application.PrintOutputController;
import com.crystaldecisions.sdk.occa.report.application.ReportClientDocument;
import com.crystaldecisions.sdk.occa.report.exportoptions.ReportExportFormat;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collection;

/**
 * Parent class for generating Crystal Reports in java.
 * 
 * @author greg.perkins
 */
public abstract class CrystalReportServlet extends HttpServlet {

    /**
     * Determines the output format
     * @return
     */
    protected ReportExportFormat getExportFormat() {
        return ReportExportFormat.PDF;
    }

    /**
     * Returns the location of the report file.
     * If the report is in the root of the classpath, just use the report name.
     * @return String
     */
    protected abstract String getReportLocation();
    
    /**
     * Returns the fully qualified classname of the POJO used in the report
     * @return String
     */
    protected abstract String getClassName();
    
    /**
     * Returns the name of the 'table' in the report 
     * (ie, the POJO's non-qualified classname)
     * @return String
     */
    protected abstract String getTableName();
    
    /**
     * Loads the data for this report.
     * @return Collection
     */
    protected abstract Collection getDataSet(String adult);
    
    /**
     * Runs the report, and returns the result as a PDF to the client.
     * @param request
     * @param response
     * @throws jakarta.servlet.ServletException
     * @throws java.io.IOException
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        byte[] data = getReportBytes(request.getParameter("adult"));
        setupResponseHeaders(response);
        response.setContentLength(data.length);
        response.getOutputStream().write(data);
        response.flushBuffer();
    }
    
    /**
     * Runs the report and exports it to a PDF document
     * @return byte[]
     */
    protected byte[] getReportBytes(String adult) {
        try {
            long time = System.currentTimeMillis();
            String reportPath = getReportLocation();
            ReportClientDocument clientDoc = new ReportClientDocument();
            clientDoc.open(reportPath, 0);
            Collection dataSet = getDataSet(adult);
            String className = getClassName();
            String tableName = getTableName();
            if (dataSet!=null && dataSet.size()>0){
                clientDoc.getDatabaseController().setDataSource(dataSet, Class.forName(className),tableName,tableName+"_POJO");
            }



            InputStream lis;
            PrintOutputController lpoc;
            lpoc = clientDoc.getPrintOutputController();
            //lpoc.modifyPaperOrientation(PaperOrientation.landscape);
            lis = lpoc.export(getExportFormat());

            byte[] data = null;

            ByteArrayOutputStream out = new ByteArrayOutputStream();
            byte[] buf = new byte[4096];
            int len;
            while ((len = lis.read(buf)) > 0) {
                out.write(buf, 0, len);
            }
            out.close();
            lis.close();
            data = out.toByteArray();

            clientDoc.close();
            
            System.out.print("Report generated in "+(System.currentTimeMillis()-time)+" ms.");
            return data;

        } catch (Exception ex) {
            throw new RuntimeException(ex);
        }
    }

    protected void setupResponseHeaders(HttpServletResponse response) {
        response.setContentType("application/pdf");
    }

}
