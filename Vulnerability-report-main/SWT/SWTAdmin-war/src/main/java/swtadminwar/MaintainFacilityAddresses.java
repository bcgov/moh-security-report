/*
 * MaintainFacilityAddresses.java
 *
 * Created on Nov 13, 2008, 1:09:28 PM
 */
package swtadminwar;

import ca.bc.gov.hlth.swt.entity.RollupFacility;
import ca.bc.gov.hlth.swt.session.RollupFacilityFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.event.ValueChangeEvent;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * @author greg.perkins
 */
@ViewScoped
@Named("MaintainFacilityAddresses")
public class MaintainFacilityAddresses implements Serializable {

    private static final long serialVersionUID = 1L;

    @EJB
    RollupFacilityFacadeLocal facilityFacade;

    private RollupFacility facility = new RollupFacility();
    private final List<SelectItem> facilities = new ArrayList();
    private List<RollupFacility> rollupFacilities;

    @PostConstruct
    public void init() {

        rollupFacilities = facilityFacade.findAll();

        for (RollupFacility rollupFacility : rollupFacilities) {
            SelectItem item = new SelectItem();
            item.setLabel(rollupFacility.getLocationNm() + " - " + rollupFacility.getFacilityNm());
            item.setValue(rollupFacility.getFacilityId());
            facilities.add(item);
        }

        Collections.sort(facilities, (Object o1, Object o2) -> ((SelectItem) o1).getLabel().compareTo(((SelectItem) o2).getLabel()));

    }

    /**
     * <p>Return a reference to the scoped data bean.</p>
     *
     * @param evt
     */
    public void changeFacility(ValueChangeEvent evt) {

        Object selectedFacilityId = evt.getNewValue();

        if (selectedFacilityId == null || "".equals(selectedFacilityId)) {
            facility = new RollupFacility();
        } else {
            for (RollupFacility rollupFacility : rollupFacilities) {
                if (Long.parseLong(selectedFacilityId.toString()) == rollupFacility.getFacilityId()) {
                    facility = rollupFacility;
                    break;
                }
            }
        }

    }

    public void save() {
        facility.setStatelessTransactionNbr(facilityFacade.edit(facility).getStatelessTransactionNbr());
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Save Successful"));
    }

    public void clear() {
        facility = new RollupFacility();

    }

    public List getFacilities() {
        return facilities;
    }

    public RollupFacility getFacility() {
        return facility;
    }

    public void setFacility(RollupFacility facility) {
        this.facility = facility;
    }
}
