/*
 * PreviewSiteStatistics.java
 *
 * Created on Nov 24, 2008, 10:19:15 AM
 */
package swtadminwar;

import ca.bc.gov.hlth.swt.session.NonSprDataEntryFacadeLocal;
import ca.bc.gov.hlth.swt.session.SiteFacadeLocal;
import ca.bc.gov.hlth.swt.session.SiteStatisticFacadeLocal;
import ca.bc.gov.hlth.swt.to.CurrentPriorityAreaDSWTStatisticsTo;
import ca.bc.gov.hlth.swt.to.CurrentWTStatisticsTo;
import ca.bc.gov.hlth.swt.to.DataSourceLongTermWTSec2To;
import ca.bc.gov.hlth.swt.to.MonthCompareProGroupTo;
import ca.bc.gov.hlth.swt.to.MonthCompareSpecialtyTo;
import ca.bc.gov.hlth.swt.to.OrderedLongTermWTSec1To;
import ca.bc.gov.hlth.swt.to.PublicSiteStatisticsTo;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.SessionScoped;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.model.SelectItem;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.logging.Level;
import java.util.logging.Logger;
import swtadminwar.businessdelegate.MaintainSitesDelegate;
import swtadminwar.businessdelegate.MediaDelegate;

/**
 * This class displays the site statistics data.
 *
 * @author Kuan.Fan
 */
@SessionScoped
@Named("PreviewSiteStatistics")
public class PreviewSiteStatistics implements Serializable {

    private static final long serialVersionUID = 1L;

    private static final Logger logger = Logger.getLogger(PreviewSiteStatistics.class.getName());

    private static final String ADULT_PUBLIC_SITE_PREVIEW = "ADULT_PUBLIC_SITE_PREVIEW";
    private static final String ADULT_MEDIA_SITE_PREVIEW = "ADULT_MEDIA_SITE_PREVIEW";
    private static final String ADULT_MEDIA_SITE_MONTH_COMPARE_SPECIALTY = "ADULT_MEDIA_SITE_MONTH_COMPARE_SPECIALTY";
    private static final String ADULT_MEDIA_SITE_MONTH_COMPARE_PROCEDURE = "ADULT_MEDIA_SITE_MONTH_COMPARE_PROCEDURE";
    private static final String PEDIATRIC_PUBLIC_SITE_PREVIEW = "PEDIATRIC_PUBLIC_SITE_PREVIEW";
    private static final String PEDIATRIC_MEDIA_SITE_PREVIEW = "PEDIATRIC_MEDIA_SITE_PREVIEW";
    private static final String PEDIATRIC_MEDIA_SITE_MONTH_COMPARE_SPECIALTY = "PEDIATRIC_MEDIA_SITE_MONTH_COMPARE_SPECIALTY";
    private static final String PEDIATRIC_MEDIA_SITE_MONTH_COMPARE_PROCEDURE = "PEDIATRIC_MEDIA_SITE_MONTH_COMPARE_PROCEDURE";
    private static final String DEFAULT_SELECTED_SITE_ID = "-1";
    private static final String ADULT = "Y";
    private static final String PEDIATRIC = "N";
    private static final String XLS = ".xls";
    private static final String CSV = ".csv";

    @EJB
    private SiteFacadeLocal siteFacade;
    @EJB
    private SiteStatisticFacadeLocal statFacade;
    @EJB
    private NonSprDataEntryFacadeLocal nonSprDataEntryFacade;
    private String selectedReportType;
    private String selectedSiteId;
    private List<SelectItem> siteOptions;

    @Inject
    private MaintainSitesDelegate maintainSitesDelegate;
    @Inject
    private MediaDelegate mediaDelegate;

    private List<PublicSiteStatisticsTo> statistics;
    private List<CurrentWTStatisticsTo> currentWaitTimes;
    private List<CurrentPriorityAreaDSWTStatisticsTo> currentPriorityAreaDSWTStatisticsTos;
    private List<OrderedLongTermWTSec1To> orderedLongTermSection1WaitTimes;
    private List<DataSourceLongTermWTSec2To> dataSourceLongTermWTSec2Tos;
    private List<MonthCompareProGroupTo> monthCompareProGroupTos;
    private List<MonthCompareSpecialtyTo> monthCompareSpecialtyTos;
    private List monthCompareTos;
    private Date siteCurrentMonthMinus1;
    private Date siteCurrentMonthMinus13;
    private Date sitePublishedDate;
    private AtomicBoolean showAdultPublic = new AtomicBoolean(false);
    private AtomicBoolean showAdultMedia = new AtomicBoolean(false);
    private AtomicBoolean showAdultMediaMonthComparePriority = new AtomicBoolean(false);
    private AtomicBoolean showAdultMediaMonthCompareProcedure = new AtomicBoolean(false);
    private AtomicBoolean showPediatricPublic = new AtomicBoolean(false);
    private AtomicBoolean showPediatricMedia = new AtomicBoolean(false);
    private AtomicBoolean showPediatricMediaMonthComparePriority = new AtomicBoolean(false);
    private AtomicBoolean showPediatricMediaMonthCompareProcedure = new AtomicBoolean(false);
    private int scrollerPage;
    private String monthCompareReportPriority = null;
    private String monthCompareReportProcedure = null;
    private String category = ADULT;

    /**
     * <p>Construct a new Page bean instance.</p>
     */
    public PreviewSiteStatistics() {
    }

    @PostConstruct
    public void init() {

        this.selectedReportType = ADULT_MEDIA_SITE_MONTH_COMPARE_SPECIALTY;
        this.selectedSiteId = DEFAULT_SELECTED_SITE_ID;
        this.siteOptions = this.maintainSitesDelegate.getAllSiteOptions();
        for (Iterator<SelectItem> it = siteOptions.iterator(); it.hasNext();) {
            SelectItem selectItem = it.next();
            if (!maintainSitesDelegate.areStatisticsComputed(selectItem.getValue().toString())) {
                it.remove();
            }
        }
    }

    public MaintainSitesDelegate getMaintainSitesDelegate() {
        return maintainSitesDelegate;
    }

    public void setMaintainSitesDelegate(MaintainSitesDelegate maintainSitesDelegate) {
        this.maintainSitesDelegate = maintainSitesDelegate;
    }

    public MediaDelegate getMediaDelegate() {
        return mediaDelegate;
    }

    public void setMediaDelegate(MediaDelegate mediaDelegate) {
        this.mediaDelegate = mediaDelegate;
    }

    /**
     * Validate the preview action.
     *
     * @return boolean returns false if the validation fails.
     */
    private boolean validatePreview() {
        FacesContext fc = FacesContext.getCurrentInstance();
        FacesMessage errorMessage = null;
        boolean isValid = true;
        if (this.selectedSiteId.equalsIgnoreCase(DEFAULT_SELECTED_SITE_ID)) {
            errorMessage = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Please select a site.", null);
            fc.addMessage("siteId1", errorMessage);
            isValid = false;
        }
        return isValid;
    }

    /**
     * This method finds the public or media statistics report from database.
     *
     * @return String the navigation string
     */
    public String previewAction() {

        try {
            if (!this.validatePreview()) {
                this.statistics = null;
                return null;
            }

            if (this.selectedReportType.equalsIgnoreCase(ADULT_MEDIA_SITE_MONTH_COMPARE_SPECIALTY)) {
                mediaSiteMonthComparedSpeciality(ADULT);
            } else if (this.selectedReportType.equalsIgnoreCase(PEDIATRIC_MEDIA_SITE_MONTH_COMPARE_SPECIALTY)) {
                mediaSiteMonthComparedSpeciality(PEDIATRIC);
            } else if (this.selectedReportType.equalsIgnoreCase(ADULT_MEDIA_SITE_MONTH_COMPARE_PROCEDURE)) {
                mediaSiteMonthComparedProcedure(ADULT);
            } else if (this.selectedReportType.equalsIgnoreCase(PEDIATRIC_MEDIA_SITE_MONTH_COMPARE_PROCEDURE)) {
                mediaSiteMonthComparedProcedure(PEDIATRIC);
            }

        } catch (Exception e) {
            logger.log(Level.SEVERE, "Exception while running report.", e);
            if (e.getMessage() == null) {
                FacesContext.getCurrentInstance()
                        .addMessage(
                                null,
                                new FacesMessage(
                                        FacesMessage.SEVERITY_ERROR,
                                        "Error Running Report: " + "Report data unavailable",
                                        null
                                )
                        );
            } else {
                FacesContext.getCurrentInstance()
                        .addMessage(
                                null,
                                new FacesMessage(
                                        FacesMessage.SEVERITY_ERROR,
                                        "Error Running Report: " + e.getMessage(),
                                        null
                                )
                        );
            }
        }

        return null;
    }

    public String getCategory() {
        return category;
    }

    public void sendPriorityReport() {
        sendReport("mediaMonthComparePriority", category);
    }

    public void sendProcedureReport() {
        sendReport("mediaMonthCompareProcedure", category);
    }

    protected void sendReport(String reportType, String adult) {
        HttpServletResponse response = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext().getResponse();
        response.reset();
        response.setContentType("text/html;charset=UTF-8");
        try (PrintWriter out = response.getWriter()) {
            Calendar cal = Calendar.getInstance();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd_HHmmss");
            StringBuilder filename = new StringBuilder();
            String fileNametrailer = "Waitimes_" + sdf.format(cal.getTime());
            response.setContentType("text/csv");

            String csvStr = null;

            if (adult.equals(ADULT)) {
                filename.append("Adult_");
            } else {
                filename.append("Pediatric_");
            }

            if (reportType.equalsIgnoreCase("media")) {
                filename.append("Prov_Summ_").append(fileNametrailer).append(CSV);
                response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + "\"");

                csvStr = mediaDelegate.generateMediaSitePreviewCSV(getCurrentWaitTimes(),
                        getCurrentPriorityAreaDSWTStatisticsTos(),
                        getOrderedLongTermSection1WaitTimes(),
                        getDataSourceLongTermWTSec2Tos());
            } else if (reportType.equalsIgnoreCase("mediaMonthComparePriority")) {
                filename.append("Surgeon_").append(fileNametrailer).append(XLS);
                csvStr = loadPriorityMedia(response, adult, filename.toString());
            } else if (reportType.equalsIgnoreCase("mediaMonthCompareProcedure")) {
                filename.append("Procedure_").append(fileNametrailer).append(XLS);
                csvStr = loadProcedureMedia(response, adult, filename.toString());
            } else if (reportType.equalsIgnoreCase("public")) {
                filename.append("Public_").append(fileNametrailer).append(CSV);
                response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + "\"");
                csvStr = maintainSitesDelegate.generatePublicSitePreviewCSV(getStatistics());
            }
            out.println(csvStr);
            out.flush();
        } catch (IOException exception) {
            logger.log(Level.SEVERE, "Unable to send the site statistics report.", exception);
        }
        FacesContext.getCurrentInstance().responseComplete();
    }

    private String loadPriorityMedia(HttpServletResponse response, String adult, String filename) {
        response.setContentType("application/vnd.ms-excel");
        response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + "\"");
        return "<html>" + (new MonthCompareReportBuilder()).buildMonthCompareSpecialtyReport(getSelectedSiteId(), siteFacade, statFacade, nonSprDataEntryFacade, adult) + "</html>";

    }

    private String loadProcedureMedia(HttpServletResponse response, String adult, String filename) {
        response.setContentType("application/vnd.ms-excel");
        response.setHeader("Content-Disposition", "attachment;filename=\"" + filename + "\"");
        return "<html>" + (new MonthCompareReportBuilder()).buildMonthCompareProcedureReport(getSelectedSiteId(), siteFacade, statFacade, nonSprDataEntryFacade, adult) + "</html>";

    }

    private void selectReportToShow(AtomicBoolean adultReport, AtomicBoolean pediatricReport, String adult) {
        if (adult.equals(ADULT)) {
            adultReport.set(true);
            pediatricReport.set(false);
            category = ADULT;
        } else {
            pediatricReport.set(true);
            adultReport.set(false);
            category = PEDIATRIC;
        }
    }

    private void mediaSiteMonthComparedSpeciality(String adult) throws Exception {
        monthCompareReportPriority = (new MonthCompareReportBuilder()).buildMonthCompareSpecialtyReport(selectedSiteId, siteFacade, statFacade, nonSprDataEntryFacade, adult);

        selectReportToShow(showAdultMediaMonthComparePriority, showPediatricMediaMonthComparePriority, adult);
        this.showAdultPublic.set(false);
        this.showPediatricPublic.set(false);
        this.showAdultMedia.set(false);
        this.showPediatricMedia.set(false);
        this.showAdultMediaMonthCompareProcedure.set(false);
        this.showPediatricMediaMonthCompareProcedure.set(false);
    }

    private void mediaSiteMonthComparedProcedure(String adult) throws Exception {
        monthCompareReportProcedure = (new MonthCompareReportBuilder()).buildMonthCompareProcedureReport(selectedSiteId, siteFacade, statFacade, nonSprDataEntryFacade, adult);

        selectReportToShow(showAdultMediaMonthCompareProcedure, showPediatricMediaMonthCompareProcedure, adult);
        this.showAdultPublic.set(false);
        this.showPediatricPublic.set(false);
        this.showAdultMedia.set(false);
        this.showPediatricMedia.set(false);
        this.showAdultMediaMonthComparePriority.set(false);
        this.showPediatricMediaMonthComparePriority.set(false);
    }

    private double nvl(Double d) {
        return (d == null ? 0 : d.doubleValue());
    }

    private long nvl(Long d) {
        return (d == null ? 0 : d.longValue());
    }

    public String getSelectedReportType() {
        return selectedReportType;
    }

    public void setSelectedReportType(String selectedReportType) {
        this.selectedReportType = selectedReportType;
    }

    public String getSelectedSiteId() {
        return selectedSiteId;
    }

    public void setSelectedSiteId(String selectedSiteId) {
        this.selectedSiteId = selectedSiteId;
    }

    public List<SelectItem> getSiteOptions() {
        return siteOptions;
    }

    public void setSiteOptions(List<SelectItem> siteOptions) {
        this.siteOptions = siteOptions;
    }

    public List<PublicSiteStatisticsTo> getStatistics() {
        return statistics;
    }

    public void setStatistics(List<PublicSiteStatisticsTo> statistics) {
        this.statistics = statistics;
    }

    public List<CurrentWTStatisticsTo> getCurrentWaitTimes() {
        return currentWaitTimes;
    }

    public void setCurrentWaitTimes(List<CurrentWTStatisticsTo> currentWaitTimes) {
        this.currentWaitTimes = currentWaitTimes;
    }

    public List<OrderedLongTermWTSec1To> getOrderedLongTermSection1WaitTimes() {
        return orderedLongTermSection1WaitTimes;
    }

    public void setOrderedLongTermSection1WaitTimes(List<OrderedLongTermWTSec1To> orderedLongTermSection1WaitTimes) {
        this.orderedLongTermSection1WaitTimes = orderedLongTermSection1WaitTimes;
    }

    public boolean isShowAdultMedia() {
        return showAdultMedia.get();
    }

    public void setShowAdultMedia(boolean showMedia) {
        this.showAdultMedia.set(showMedia);
    }

    public boolean isShowPediatricMedia() {
        return showPediatricMedia.get();
    }

    public void setShowPediatricMedia(boolean showMedia) {
        this.showPediatricMedia.set(showMedia);
    }

    public boolean isShowAdultPublic() {
        return showAdultPublic.get();
    }

    public void setShowAdultPublic(boolean showPublic) {
        this.showAdultPublic.set(showPublic);
    }

    public boolean isShowPediatricPublic() {
        return showPediatricPublic.get();
    }

    public void setShowPediatricPublic(boolean showPublic) {
        this.showPediatricPublic.set(showPublic);
    }

    public int getScrollerPage() {
        return scrollerPage;
    }

    public void setScrollerPage(int scrollerPage) {
        this.scrollerPage = scrollerPage;
    }

    public List<DataSourceLongTermWTSec2To> getDataSourceLongTermWTSec2Tos() {
        return dataSourceLongTermWTSec2Tos;
    }

    public void setDataSourceLongTermWTSec2Tos(List<DataSourceLongTermWTSec2To> dataSourceLongTermWTSec2Tos) {
        this.dataSourceLongTermWTSec2Tos = dataSourceLongTermWTSec2Tos;
    }

    public List<CurrentPriorityAreaDSWTStatisticsTo> getCurrentPriorityAreaDSWTStatisticsTos() {
        return currentPriorityAreaDSWTStatisticsTos;
    }

    public void setCurrentPriorityAreaDSWTStatisticsTos(List<CurrentPriorityAreaDSWTStatisticsTo> currentPriorityAreaDSWTStatisticsTos) {
        this.currentPriorityAreaDSWTStatisticsTos = currentPriorityAreaDSWTStatisticsTos;
    }

    public List<MonthCompareProGroupTo> getMonthCompareProGroupTos() {
        return monthCompareProGroupTos;
    }

    public void setMonthCompareProGroupTos(List<MonthCompareProGroupTo> monthCompareProGroupTos) {
        this.monthCompareProGroupTos = monthCompareProGroupTos;
    }

    public boolean isShowAdultMediaMonthComparePriority() {
        return showAdultMediaMonthComparePriority.get();
    }

    public void setShowAdultMediaMonthComparePriority(boolean showMediaMonthComparePriority) {
        this.showAdultMediaMonthComparePriority.set(showMediaMonthComparePriority);
    }

    public boolean isShowPediatricMediaMonthComparePriority() {
        return showPediatricMediaMonthComparePriority.get();
    }

    public void setShowPediatricMediaMonthComparePriority(boolean showMediaMonthComparePriority) {
        this.showPediatricMediaMonthComparePriority.set(showMediaMonthComparePriority);
    }

    public boolean isShowAdultMediaMonthCompareProcedure() {
        return showAdultMediaMonthCompareProcedure.get();
    }

    public void setShowAdultMediaMonthCompareProcedure(boolean showMediaMonthCompareProcedure) {
        this.showAdultMediaMonthCompareProcedure.set(showMediaMonthCompareProcedure);
    }

    public boolean isShowPediatricMediaMonthCompareProcedure() {
        return showPediatricMediaMonthCompareProcedure.get();
    }

    public void setShowPediatricMediaMonthCompareProcedure(boolean showMediaMonthCompareProcedure) {
        this.showPediatricMediaMonthCompareProcedure.set(showMediaMonthCompareProcedure);
    }

    public List<MonthCompareSpecialtyTo> getMonthCompareSpecialtyTos() {
        return monthCompareSpecialtyTos;
    }

    public void setMonthCompareSpecialtyTos(List<MonthCompareSpecialtyTo> monthCompareSpecialtyTos) {
        this.monthCompareSpecialtyTos = monthCompareSpecialtyTos;
    }

    public Date getSiteCurrentMonthMinus1() {
        return siteCurrentMonthMinus1;
    }

    public void setSiteCurrentMonthMinus1(Date siteCurrentMonthMinus1) {
        this.siteCurrentMonthMinus1 = siteCurrentMonthMinus1;
    }

    public Date getSiteCurrentMonthMinus13() {
        return siteCurrentMonthMinus13;
    }

    public void setSiteCurrentMonthMinus13(Date siteCurrentMonthMinus13) {
        this.siteCurrentMonthMinus13 = siteCurrentMonthMinus13;
    }

    public Date getSitePublishedDate() {
        return sitePublishedDate;
    }

    public void setSitePublishedDate(Date sitePublishedDate) {
        this.sitePublishedDate = sitePublishedDate;
    }

    public List getMonthCompareTos() {
        return monthCompareTos;
    }

    public void setMonthCompareTos(List monthCompareTos) {
        this.monthCompareTos = monthCompareTos;
    }

    public String getMonthCompareReportPriority() {
        return monthCompareReportPriority;
    }

    public void setMonthCompareReportPriority(String monthCompareReportPriority) {
        this.monthCompareReportPriority = monthCompareReportPriority;
    }

    public String getMonthCompareReportProcedure() {
        return monthCompareReportProcedure;
    }

    public void setMonthCompareReportProcedure(String monthCompareReportProcedure) {
        this.monthCompareReportProcedure = monthCompareReportProcedure;
    }
}
