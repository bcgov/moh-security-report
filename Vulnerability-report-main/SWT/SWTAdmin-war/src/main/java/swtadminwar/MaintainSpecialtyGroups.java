/*
 * MaintainSpecialtyGroups.java
 *
 * Created on Nov 14, 2008, 9:38:49 AM
 */
package swtadminwar;

import ca.bc.gov.health.login.RoleHelper;
import ca.bc.gov.hlth.swt.entity.SpecialtyGroup;
import ca.bc.gov.hlth.swt.session.SpecialtyGroupFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;
import org.primefaces.component.datatable.DataTable;
import org.primefaces.event.RowEditEvent;

/**
 * @author greg.perkins
 */
@ViewScoped
@Named("MaintainSpecialtyGroups")
public class MaintainSpecialtyGroups implements Serializable {

    private static final long serialVersionUID = 1L;

    private final Logger log = Logger.getLogger(getClass().getName());

    @EJB
    SpecialtyGroupFacadeLocal specialtyGroupFacade;

    public MaintainSpecialtyGroups() {
    }

    private List<SpecialtyGroup> specialtyGroups;

    @PostConstruct
    public void init() {
        specialtyGroups = new ArrayList<>(specialtyGroupFacade.findAll());
    }

    public void onRowEdit(RowEditEvent event) {
        SpecialtyGroup newSpecialtyGroup = (SpecialtyGroup) event.getObject();
        String userName = RoleHelper.getUserName(FacesContext.getCurrentInstance());

        newSpecialtyGroup.setLastModifiedByNm(userName);
        newSpecialtyGroup.setLastModifiedOnDtm(new Date());

        if (newSpecialtyGroup.getStatelessTransactionNbr() == 0) {

            newSpecialtyGroup.setStatelessTransactionNbr(1);
            specialtyGroupFacade.create(newSpecialtyGroup);
        } else {
            specialtyGroupFacade.edit(newSpecialtyGroup);
        }
        this.specialtyGroups = new ArrayList<SpecialtyGroup>(specialtyGroupFacade.findAll());
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Save Successful"));
    }

    public void onRowCancel(RowEditEvent event) {
        this.specialtyGroups = new ArrayList<SpecialtyGroup>(specialtyGroupFacade.findAll());
    }

    public void onAddNew() {
        // go to the first page
        DataTable d = (DataTable) FacesContext.getCurrentInstance().getViewRoot().findComponent("form1:theTable");
        d.reset();
        d.setFirst(0);

        // make a blank record
        SpecialtyGroup newSpecialtyGroup = new SpecialtyGroup();
        String userName = RoleHelper.getUserName(FacesContext.getCurrentInstance());

        newSpecialtyGroup.setCreatedByNm(userName);
        newSpecialtyGroup.setCreatedOnDtm(new Date());
        newSpecialtyGroup.setEffectiveDtm(new Date());
        newSpecialtyGroup.setLastModifiedOnDtm(new Date());
        newSpecialtyGroup.setLastModifiedByNm(userName);

        this.specialtyGroups.add(0, newSpecialtyGroup);
    }

    public List<SpecialtyGroup> getSpecialtyGroups() {
        return specialtyGroups;
    }

    public void setSpecialtyGroups(List<SpecialtyGroup> specialtyGroups) {
        this.specialtyGroups = specialtyGroups;
    }
}
