/*
 * MaintainSpecialtyCodeMap.java
 *
 * Created on Feb 27, 2009, 3:04:06 PM
 */
package swtadminwar;

import ca.bc.gov.health.auth.jsf.SelectItemHelper;
import ca.bc.gov.hlth.swt.entity.Specialty;
import ca.bc.gov.hlth.swt.entity.SpecialtyGroup;
import ca.bc.gov.hlth.swt.session.SpecialtyFacadeLocal;
import ca.bc.gov.hlth.swt.session.SpecialtyGroupFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.event.ValueChangeEvent;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.List;
import org.primefaces.model.DualListModel;
import swtadminwar.businessdelegate.MaintainRollupsDelegate;

/**
 * @author greg.perkins
 */
@ViewScoped
@Named("MaintainSpecialtyCodeMap")
public class MaintainSpecialtyCodeMap implements Serializable {

    private static final long serialVersionUID = 1L;

    @EJB
    private SpecialtyFacadeLocal specialtyFacade;

    @EJB
    private SpecialtyGroupFacadeLocal specialtyGroupFacade;

    private static final String UNASSIGNED_CODES = "Unassigned Codes";
    private static final String ALL_CODES = "All Codes";
    private static final String DEFAULT_SPECIALTY_GROUP = "-1";

    private String selectedSpecialtyGroupId;
    private String selectedSpecialtyGroupName;
    private List<SelectItem> specialtyGroups;

    private List<Specialty> availableSpecialties;
    private List<Specialty> selectedSpecialties;
    private DualListModel<Specialty> specialties = new DualListModel<Specialty>();

    @Inject
    private MaintainRollupsDelegate maintainRollupsDelegate;

    public MaintainSpecialtyCodeMap() {
    }

    @PostConstruct
    public void init() {

        selectedSpecialtyGroupId = DEFAULT_SPECIALTY_GROUP;

        List<SpecialtyGroup> nonExpired = specialtyGroupFacade.findAllNonExpired();
        specialtyGroups = SelectItemHelper.buildSelectItemList(nonExpired, "specialtyGroupNm", "specialtyGroupId", false);
    }

    /**
     * populates pick list for specialties
     */
    private void populateSpecialtyPicklist() {
        availableSpecialties = specialtyFacade.findAvailable(new Long(selectedSpecialtyGroupId));
        selectedSpecialties = specialtyFacade.findMapped(new Long(selectedSpecialtyGroupId));

        availableSpecialties.removeAll(selectedSpecialties);

        specialties = new DualListModel<Specialty>(availableSpecialties, selectedSpecialties);
    }

    public void selectSpecialty(ValueChangeEvent vce) {
        String newSpecialtyGroupId = vce.getNewValue().toString();
        if (newSpecialtyGroupId.equals("-1")) {
            selectedSpecialtyGroupId = DEFAULT_SPECIALTY_GROUP;
            selectedSpecialtyGroupName = null;
            specialties = new DualListModel<>();
        } else {
            selectedSpecialtyGroupId = newSpecialtyGroupId;
            selectedSpecialtyGroupName = readSpecialtyName(selectedSpecialtyGroupId);
            populateSpecialtyPicklist();
        }
    }

    /**
     * Saves the specialty assignments.
     */
    public void save() {
        specialtyFacade.mapSpecialties(selectedSpecialtyGroupId, specialties.getTarget());
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Save Successful"));
    }

    public String clear() {
        init();
        return null;
    }

    private String readSpecialtyName(String selectedSpecialtyGroupId) {
        if (!selectedSpecialtyGroupId.equalsIgnoreCase(DEFAULT_SPECIALTY_GROUP)) {
            for (int i = 0; i < this.specialtyGroups.size(); i++) {
                SelectItem si = (SelectItem) this.specialtyGroups.get(i);
                String value = si.getValue().toString();
                if (value.equalsIgnoreCase(selectedSpecialtyGroupId)) {
                    return si.getLabel();
                }
            }
        }
        return null;
    }

    public List<SelectItem> getSpecialtyGroups() {
        return specialtyGroups;
    }

    public void setSpecialtyGroups(List<SelectItem> specialtyGroups) {
        this.specialtyGroups = specialtyGroups;
    }

    public String getSelectedSpecialtyGroupId() {
        return selectedSpecialtyGroupId;
    }

    public void setSelectedSpecialtyGroupId(String selectedSpecialtyGroupId) {
        this.selectedSpecialtyGroupId = selectedSpecialtyGroupId;
    }

    public String getSelectedSpecialtyGroupName() {
        return selectedSpecialtyGroupName;
    }

    public void setSelectedSpecialtyGroupName(String selectedSpecialtyGroupName) {
        this.selectedSpecialtyGroupName = selectedSpecialtyGroupName;
    }

    public MaintainRollupsDelegate getMaintainRollupsDelegate() {
        return maintainRollupsDelegate;
    }

    public void setMaintainRollupsDelegate(MaintainRollupsDelegate maintainRollupsDelegate) {
        this.maintainRollupsDelegate = maintainRollupsDelegate;
    }

    public DualListModel<Specialty> getSpecialties() {
        return specialties;
    }

    public void setSpecialties(DualListModel<Specialty> specialties) {
        this.specialties = specialties;
    }

    public List<Specialty> getAvailableSpecialties() {
        return availableSpecialties;
    }

    public List<Specialty> getSelectedSpecialties() {
        return selectedSpecialties;
    }

//    public String getSelectedSpecialtyLabel() {
//        Iterator itr = ((TreeMap)specialtyGroups).entrySet().iterator();
//
//        String label = null;
//        Entry temp;
//        while (itr.hasNext()) {
//            temp = (Entry)itr.next();
//
//            if (temp.getValue().equals(selectedSpecialtyGroupId)) {
//               label = temp.getKey().toString();
//               break;
//            }
//        }
//        return label;
//    }
}
