/*
 * MaintainAnnouncements.java
 *
 * Created on Nov 24, 2008, 10:36:27 AM
 */
package swtadminwar;

import ca.bc.gov.health.auth.jsf.SelectItemHelper;
import ca.bc.gov.health.login.RoleHelper;
import ca.bc.gov.hlth.swt.entity.Site;
import ca.bc.gov.hlth.swt.entity.SiteAnnouncement;
import ca.bc.gov.hlth.swt.session.SiteAnnouncementFacadeLocal;
import ca.bc.gov.hlth.swt.session.SiteFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.component.UIInput;
import jakarta.faces.context.FacesContext;
import jakarta.faces.event.ValueChangeEvent;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.commons.beanutils.PropertyUtils;

@ViewScoped
@Named("MaintainAnnouncements")
public class MaintainAnnouncements implements Serializable {

    private static final long serialVersionUID = 1L;

    @EJB
    private SiteFacadeLocal siteFacade;

    @EJB
    private SiteAnnouncementFacadeLocal siteAnnouncementFacade;

    private List sites;
    private List announcements;
    private int currentAnnouncement;
    private Long selectedSite;
    private SiteAnnouncement announcement;
    private boolean showWarning = false;

    @PostConstruct
    public void init() {

        sites = SelectItemHelper.buildSelectItemList(siteFacade.findEditable(), "siteDisplayNmWithId", "siteId", false);
        announcement = new SiteAnnouncement();
        announcement.setSiteId(new Site());
        clear();
    }

    public String save() {
        setAuditFields(announcement);
        siteAnnouncementFacade.edit(announcement);
        showWarning = false;
        announcements = siteAnnouncementFacade.findBySiteId(announcement.getSiteId().getSiteId());
        currentAnnouncement = 0;
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Save Successful"));
        return null;
    }

    public String clear() {
        selectedSite = null;
        announcement = new SiteAnnouncement();
        announcement.setSiteId(new Site());
        showWarning = false;
        announcements = new ArrayList();
        UIInput announcementInput = ((UIInput) (FacesContext.getCurrentInstance().getViewRoot().findComponent(":form1:announcementTxt")));
        if (announcementInput != null) {
            announcementInput.setValue(announcement.getAnnouncementTxt());
        }
        return null;
    }

    public String nextAnnouncement() {
        currentAnnouncement++;
        announcement = (SiteAnnouncement) announcements.get(currentAnnouncement);
        return null;
    }

    public String previousAnnouncement() {
        currentAnnouncement--;
        announcement = (SiteAnnouncement) announcements.get(currentAnnouncement);
        return null;
    }

    public String changeSite(ValueChangeEvent evt) {
        System.out.println("change site");
        announcements = siteAnnouncementFacade.findBySiteId((Long) evt.getNewValue());
        currentAnnouncement = 0;
        if (announcements.size() == 0) {
            SiteAnnouncement a = new SiteAnnouncement();
            a.setSiteId(siteFacade.find(evt.getNewValue()));
            announcements.add(a);
            announcement = a;
            showWarning = true;
        } else {
            showWarning = false;
            announcement = (SiteAnnouncement) announcements.get(currentAnnouncement);
            announcement.setSiteId(siteFacade.find(evt.getNewValue()));
        }
        UIInput announcementInput = ((UIInput) (FacesContext.getCurrentInstance().getViewRoot().findComponent(":form1:announcementTxt")));
        if (announcementInput != null) {
            announcementInput.setValue(announcement.getAnnouncementTxt());
        }
        return null;
    }

    public List getSites() {
        return sites;
    }

    public void setSites(List sites) {
        this.sites = sites;
    }

    public SiteAnnouncement getAnnouncement() {
        return announcement;
    }

    public void setAnnouncement(SiteAnnouncement announcement) {
        this.announcement = announcement;
    }

    public List getAnnouncements() {
        return announcements;
    }

    public void setAnnouncements(List announcements) {
        this.announcements = announcements;
    }

    public int getCurrentAnnouncement() {
        return currentAnnouncement;
    }

    public void setCurrentAnnouncement(int currentAnnouncement) {
        this.currentAnnouncement = currentAnnouncement;
    }

    public Long getSelectedSite() {
        return selectedSite;
    }

    public void setSelectedSite(Long selectedSite) {
        this.selectedSite = selectedSite;
    }

    protected void setAuditFields(Object target) {
        try {
            PropertyUtils.setProperty(target, "lastModifiedByNm", RoleHelper.getUserName(FacesContext.getCurrentInstance()));
            PropertyUtils.setProperty(target, "lastModifiedOnDtm", new Date());
            if (PropertyUtils.getProperty(target, "createdOnDtm") == null) {
                PropertyUtils.setProperty(target, "createdByNm", RoleHelper.getUserName(FacesContext.getCurrentInstance()));
                PropertyUtils.setProperty(target, "createdOnDtm", new Date());
            }
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public int getNumberOfAnnouncements() {
        return announcements.size();
    }

    public boolean getHasNext() {
        return announcements != null && (currentAnnouncement < announcements.size() - 1);
    }

    public boolean getShowWarning() {
        return showWarning;
    }

    public void setShowWarning(boolean showWarning) {
        this.showWarning = showWarning;
    }

}
