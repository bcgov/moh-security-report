/*
 * ApproveSitePublication.java
 *
 * Created on Nov 25, 2008, 8:45:34 AM
 */
package swtadminwar;

import ca.bc.gov.health.login.RoleHelper;
import ca.bc.gov.hlth.swt.entity.Site;
import jakarta.annotation.PostConstruct;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.event.ValueChangeEvent;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Iterator;
import java.util.List;
import org.apache.commons.lang3.StringUtils;
import swtadminwar.businessdelegate.MaintainSitesDelegate;

/**
 * <p>Page bean that corresponds to a similarly named JSP page. This class contains component definitions (and
 * initialization code) for all components that you have defined on this page, as well as lifecycle methods and event
 * handlers where you may add behavior to respond to incoming events.</p>
 *
 * @author Kuan.Fan
 */
@ViewScoped
@Named("ApproveSitePublication")
public class ApproveSitePublication implements Serializable {

    private static final long serialVersionUID = 1L;
    
    private String selectedSiteId;
    private List<SelectItem> siteOptions;
    private List<String> checkedCheckListIds;
    private boolean siteCertified;

    @Inject
    private MaintainSitesDelegate maintainSitesDelegate;

    private boolean hasWarning;
    private Site site;
    private boolean businessRulesPassed;

    protected void updateSite(String newSiteId) {
        site = maintainSitesDelegate.getSiteById(newSiteId);
        DateFormat df = new SimpleDateFormat("dd-MMM-yyyy hh:mm aa");
        if (StringUtils.isNotEmpty(site.getBusinessReviewCmpltByNm())) {
            site.setBusinessReviewCmpltByNm("<b><i>(" + site.getBusinessReviewCmpltByNm() + " " + df.format(site.getBusinessReviewCompltOnDtm()) + ")</i></b>");
        }
        if (StringUtils.isNotEmpty(site.getNonSprDataReviewedByNm())) {
            site.setNonSprDataReviewedByNm("<b><i>(" + site.getNonSprDataReviewedByNm() + " " + df.format(site.getNonSprDataReviewedOnDtm()) + ")</i></b>");
        }
        if (StringUtils.isNotEmpty(site.getDataReviewCmpltByNm())) {
            site.setDataReviewCmpltByNm("<b><i>(" + site.getDataReviewCmpltByNm() + " " + df.format(site.getDataReviewCompltOnDtm()) + ")</i></b>");
        }
        if (StringUtils.isNotEmpty(site.getPabReviewCompleteByNm())) {
            site.setPabReviewCompleteByNm("<b><i>(" + site.getPabReviewCompleteByNm() + " " + df.format(site.getPabReviewCompleteOnDtm()) + ")</i></b>");
        }
    }

    /**
     * <p>Construct a new Page bean instance.</p>
     */
    public ApproveSitePublication() {
    }

    @PostConstruct
    public void init() {
        this.initComponents();
    }

    private void initComponents() {
        this.siteOptions = this.maintainSitesDelegate.getSiteOptions(false);
        for (Iterator<SelectItem> it = siteOptions.iterator(); it.hasNext();) {
            SelectItem selectItem = it.next();
            if (!maintainSitesDelegate.areStatisticsComputed(selectItem.getValue().toString())) {
                it.remove();
            }
        }
        this.selectedSiteId = ((SelectItem) this.siteOptions.get(0)).getValue().toString();
        this.checkedCheckListIds = this.maintainSitesDelegate.getCheckedChecklist(this.selectedSiteId);
        this.siteCertified = this.maintainSitesDelegate.isSiteCertified(this.selectedSiteId);
        this.hasWarning = this.maintainSitesDelegate.hasWarningForApproveSitePublication(this.selectedSiteId);
        updateSite(selectedSiteId);
        this.validateBusinessRules(this.selectedSiteId);
    }

    public MaintainSitesDelegate getMaintainSitesDelegate() {
        return maintainSitesDelegate;
    }

    public void setMaintainSitesDelegate(MaintainSitesDelegate maintainSitesDelegate) {
        this.maintainSitesDelegate = maintainSitesDelegate;
    }

    public String saveWithoutPublishingAction() {
        this.maintainSitesDelegate.approvePublicationSave(
                this.selectedSiteId,
                this.checkedCheckListIds,
                this.siteCertified,
                false, RoleHelper.getUserName(FacesContext.getCurrentInstance()));
        this.siteOptions = this.maintainSitesDelegate.getSiteOptions(false);
        for (Iterator<SelectItem> it = siteOptions.iterator(); it.hasNext();) {
            SelectItem selectItem = it.next();
            if (!maintainSitesDelegate.areStatisticsComputed(selectItem.getValue().toString())) {
                it.remove();
            }
        }
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Save Successful"));
        updateSite(selectedSiteId);
        return null;
    }

    public String publishAction() {
        if (this.checkedCheckListIds.size() != 4 || !siteCertified) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("All checklist items must be completed, and the site must be certified prior to publishing."));
            return null;
        }
        this.maintainSitesDelegate.approvePublicationSave(
                this.selectedSiteId,
                this.checkedCheckListIds,
                this.siteCertified,
                true, RoleHelper.getUserName(FacesContext.getCurrentInstance()));
        this.siteOptions = this.maintainSitesDelegate.getSiteOptions(false);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage("Publish Successful"));
        updateSite(selectedSiteId);
        return null;
    }

    public String clearAction() {
        this.checkedCheckListIds = this.maintainSitesDelegate.getCheckedChecklist(this.selectedSiteId);
        this.siteCertified = this.maintainSitesDelegate.isSiteCertified(this.selectedSiteId);
        return null;
    }

    private boolean validateBusinessRules(String siteId) {
        this.businessRulesPassed = this.maintainSitesDelegate.areStatisticsComputed(siteId);
        if (!this.businessRulesPassed) {
            FacesContext ctx = FacesContext.getCurrentInstance();
            FacesMessage errorMessage = new FacesMessage("Update prohibited; statistics have not yet been computed for this Site.");
            ctx.addMessage(null, errorMessage);
            return false;
        } else {
            return true;
        }
    }

    public void changeSiteAction(ValueChangeEvent vce) {
        String newSiteId = (String) vce.getNewValue();
        updateSite(newSiteId);
        this.checkedCheckListIds = this.maintainSitesDelegate.getCheckedChecklist(newSiteId);
        this.siteCertified = this.maintainSitesDelegate.isSiteCertified(newSiteId);
        this.hasWarning = this.maintainSitesDelegate.hasWarningForApproveSitePublication(newSiteId);
        this.validateBusinessRules(newSiteId);
    }

    public String getSelectedSiteId() {
        return selectedSiteId;
    }

    public void setSelectedSiteId(String selectedSiteId) {
        this.selectedSiteId = selectedSiteId;
    }

    public List<SelectItem> getSiteOptions() {
        return siteOptions;
    }

    public void setSiteOptions(List<SelectItem> siteOptions) {
        this.siteOptions = siteOptions;
    }

    public List<String> getCheckedCheckListIds() {
        return this.checkedCheckListIds;
    }

    public void setCheckedCheckListIds(List<String> checkedCheckListIds) {
        this.checkedCheckListIds = checkedCheckListIds;
    }

    public boolean isSiteCertified() {
        return this.siteCertified;
    }

    public void setSiteCertified(boolean siteCertified) {
        this.siteCertified = siteCertified;
    }

    public boolean isHasWarning() {
        return hasWarning;
    }

    public void setHasWarning(boolean hasWarning) {
        this.hasWarning = hasWarning;
    }

    public boolean isBusinessRulesPassed() {
        return businessRulesPassed;
    }

    public void setBusinessRulesPassed(boolean businessRulesPassed) {
        this.businessRulesPassed = businessRulesPassed;
    }

    public boolean getShowLongTermWarning() {
        return this.site.getSiteMonthNbr() == 8;
    }

    public Site getSite() {
        return site;
    }

    public void setSite(Site site) {
        this.site = site;
    }

}
