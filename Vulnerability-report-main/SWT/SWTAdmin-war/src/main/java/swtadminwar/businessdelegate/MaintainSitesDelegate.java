/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package swtadminwar.businessdelegate;

import ca.bc.gov.hlth.swt.entity.*;
import ca.bc.gov.hlth.swt.session.MaintainSitesFacadeLocal;
import ca.bc.gov.hlth.swt.to.PublicSiteStatisticsTo;
import jakarta.ejb.EJB;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import swtadminwar.util.SWTJSFUtils;

/**
 * This class is a business delegate follows singleton pattern.
 *
 * @author Kuan.Fan
 */
@Named
@ViewScoped
public class MaintainSitesDelegate implements Serializable {

    private static final long serialVersionUID = 1L;

    private static final String NON_SPR_DATA_REVIEWED = "nonSprDataReviewed";
    private static final String DATA_REVIEWED = "dataReviewed";
    private static final String BUSINESS_REVIEWED = "businessReviewed";
    private static final String PAB_REVIEWED = "pabReviewed";

    @EJB
    private MaintainSitesFacadeLocal maintainSitesFacade;
    
    /**
     * Return all site options.
     *
     * @return List a list of sites
     */
    public List<SelectItem> getAllSiteOptions() {
        List<Site> sites = this.maintainSitesFacade.findAllSite();
        return SWTJSFUtils.buildSiteList(sites);
    }

    /**
     * Gets the published or unpublished site options.
     *
     * @param published boolean true or false
     * @return List a list of SelectItem
     */
    public List<SelectItem> getSiteOptions(boolean published) {
        List<Site> sites = this.maintainSitesFacade.findSites(new Boolean(published));
        return SWTJSFUtils.buildSiteList(sites);
    }

    /**
     * Gets the published or unpublished site options.
     *
     * @param published boolean true or false
     * @return List a list of SelectItem
     */
    public List<SelectItem> getSiteOptionsForApprovePublication(boolean published) {
        List<Site> sites = this.maintainSitesFacade.findSitesForApprovePublication(new Boolean(published));
        return SWTJSFUtils.buildSiteList(sites);
    }

    /**
     * Gets the site preference value.
     *
     * @param siteId String the site id
     * @param preferenceName String the preference name
     * @return String the site preference value
     */
    public String getSitePreferenceValue(String siteId, String preferenceName) {
        SitePreference preference = this.maintainSitesFacade.findSitePreference(siteId, preferenceName);
        if (preference == null) {
            return null;
        } else {
            return preference.getPreferenceValueTxt();
        }
    }

    /**
     * Gets the site preference id.
     *
     * @param siteId String the site id
     * @param preferenceName String the preference name
     * @return String the site preference id
     */
    public String getSitePreferenceId(String siteId, String preferenceName) {
        SitePreference preference = this.maintainSitesFacade.findSitePreference(siteId, preferenceName);
        if (preference == null) {
            return null;
        } else {
            return preference.getSitePreferenceId().toString();
        }
    }

    /**
     * Save the site preferences to database
     *
     * @param sitePreferenceId String the site preference id
     * @param preference1 String preference
     */
    public void saveSitePreferences(String sitePreferenceId, String preference1) {
        this.maintainSitesFacade.saveSitePreferences(sitePreferenceId, preference1);
    }

    /**
     * Returns a check list based on site id
     *
     * @param siteId String the site id
     * @return List
     */
    public List<String> getCheckedChecklist(String siteId) {
        Site site = this.maintainSitesFacade.findSite(siteId);
        List checkedChecklist = null;
        if (site != null) {
            checkedChecklist = new ArrayList();
            if (site.getNonSprDataReviewedYn() != null && site.getNonSprDataReviewedYn().equalsIgnoreCase("Y")) {
                checkedChecklist.add(NON_SPR_DATA_REVIEWED);
            }
            if (site.getDataReviewCompleteYn() != null && site.getDataReviewCompleteYn().equalsIgnoreCase("Y")) {
                checkedChecklist.add(DATA_REVIEWED);
            }
            if (site.getBusinessReviewCompleteYn() != null && site.getBusinessReviewCompleteYn().equalsIgnoreCase("Y")) {
                checkedChecklist.add(BUSINESS_REVIEWED);
            }
            if (site.getPabReviewCompleteYn() != null && site.getPabReviewCompleteYn().equalsIgnoreCase("Y")) {
                checkedChecklist.add(PAB_REVIEWED);
            }
        }
        return checkedChecklist;
    }

    /**
     * Returns if a site is certified.
     *
     * @param siteId String the site id
     * @return boolean returns true if the site is certified
     */
    public boolean isSiteCertified(String siteId) {
        Site site = (Site) this.maintainSitesFacade.findSite(siteId);
        if (site.getSiteCertifiedYn().equalsIgnoreCase("Y")) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Approve the site publication.
     *
     * @param siteId String the site id
     * @param checkedChecklist List
     * @param certified boolean true if certified
     * @param publishIt boolean true if need to publish the site
     * @param userName
     */
    public void approvePublicationSave(String siteId, List checkedChecklist, boolean certified, boolean publishIt, String userName) {
        String nonSprDataReviewedYn = "N";
        String dataReviewedYn = "N";
        String businessReviewedYn = "N";
        String pabReviewedYn = "N";
        String siteCertifiedYn = "N";
        String publishYn = "N";
        if (checkedChecklist != null && checkedChecklist.size() > 0) {
            for (int i = 0; i < checkedChecklist.size(); i++) {
                String tmpStr = (String) checkedChecklist.get(i);
                if (tmpStr.equalsIgnoreCase(NON_SPR_DATA_REVIEWED)) {
                    nonSprDataReviewedYn = "Y";
                    continue;
                }
                if (tmpStr.equalsIgnoreCase(DATA_REVIEWED)) {
                    dataReviewedYn = "Y";
                    continue;
                }
                if (tmpStr.equalsIgnoreCase(BUSINESS_REVIEWED)) {
                    businessReviewedYn = "Y";
                    continue;
                }
                if (tmpStr.equalsIgnoreCase(PAB_REVIEWED)) {
                    pabReviewedYn = "Y";
                    continue;
                }

            }
        }
        if (certified) {
            siteCertifiedYn = "Y";
        }
        if (publishIt) {
            publishYn = "Y";
        }
        this.maintainSitesFacade.approvePublicationSave(
                siteId,
                nonSprDataReviewedYn,
                dataReviewedYn,
                businessReviewedYn,
                pabReviewedYn,
                siteCertifiedYn,
                publishYn, userName);
        this.maintainSitesFacade.refreshSite(siteId);
    }

    /**
     * Identify if the site has warning.
     *
     * @param siteId String the site id
     * @return boolean
     */
    public boolean hasWarningForApproveSitePublication(String siteId) {
        Boolean hasWarning = this.maintainSitesFacade.hasWarningForApproveSitePublication(siteId);
        return hasWarning.booleanValue();
    }

    /**
     * Check if the site statistics are computed already.
     *
     * @param siteId
     * @return
     */
    public boolean areStatisticsComputed(String siteId) {
        Boolean rt = this.maintainSitesFacade.areStatisticsComputed(siteId);
        return rt.booleanValue();
    }

    /**
     * Returns the public site statistics.
     *
     * @param siteId String the site id.
     * @return List
     */
    public List<PublicSiteStatisticsTo> getPublicSiteStatistics(String siteId, String adult) {
        List<PublicSiteStatisticsTo> pssTos = maintainSitesFacade.findPublicSiteStatistics(siteId, adult);

        if (pssTos != null && pssTos.size() > 0) {

            Set pro_enc_can_hea_fac_spe_set = new HashSet();
            Set pro_enc_can_hea_fac_set = new HashSet();
            Set pro_enc_can_hea_set = new HashSet();
            Set pro_enc_can_set = new HashSet();
            Set pro_enc_set = new HashSet();
            Set pro_set = new HashSet();
            int counter = 0;

            for (int i = 0; i < pssTos.size(); i++) {
                PublicSiteStatisticsTo pssTo = (PublicSiteStatisticsTo) pssTos.get(i);

                boolean pro_enc_can_hea_fac_spe_displayed = !pro_enc_can_hea_fac_spe_set.add(pssTo.get_pro_enc_can_hea_fac_spe());
                boolean pro_enc_can_hea_fac_displayed = !pro_enc_can_hea_fac_set.add(pssTo.get_pro_enc_can_hea_fac());
                boolean pro_enc_can_hea_displayed = !pro_enc_can_hea_set.add(pssTo.get_pro_enc_can_hea());
                boolean pro_enc_can_displayed = !pro_enc_can_set.add(pssTo.get_pro_enc_can());
                boolean pro_enc_displayed = !pro_enc_set.add(pssTo.get_pro_enc());
                boolean pro_displayed = !pro_set.add(pssTo.get_pro());

                if (pro_enc_can_hea_fac_spe_displayed) {
                    pssTo.clear_pro_enc_can_hea_fac_spe();
                } else if (pro_enc_can_hea_fac_displayed) {
                    pssTo.clear_pro_enc_can_hea_fac();
                } else if (pro_enc_can_hea_displayed) {
                    pssTo.clear_pro_enc_can_hea();
                } else if (pro_enc_can_displayed) {
                    pssTo.clear_pro_enc_can();
                } else if (pro_enc_displayed) {
                    pssTo.clear_pro_enc();
                } else if (pro_displayed) {
                    pssTo.clear_pro();
                }

                if (pssTo.getSpecialistNm() == null || pssTo.getSpecialistNm().length() == 0) {
                    if (counter == 0) {
                        pssTo.setSpecialistNm("------------------------");

                    }
                    if (counter == 1) {
                        pssTo.setSpecialistNm("------------------------");
                        pssTo.setFacilityNm("------------------------");
                    }
                    if (counter == 2) {
                        pssTo.setSpecialistNm("------------------------");
                        pssTo.setFacilityNm("------------------------");
                        pssTo.setHealthAuthorityNm("------------------------");
                    }
                    if (counter == 3) {
                        pssTo.setSpecialistNm("------------------------");
                        pssTo.setFacilityNm("------------------------");
                        pssTo.setHealthAuthorityNm("------------------------");
                        pssTo.setCancerSuspectedDsc("------------------------");
                    }
                    if (counter == 4) {
                        pssTo.setSpecialistNm("------------------------");
                        pssTo.setFacilityNm("------------------------");
                        pssTo.setHealthAuthorityNm("------------------------");
                        pssTo.setCancerSuspectedDsc("------------------------");
                        pssTo.setEncounterTypeDsc("------------------------");
                    }
                    counter++;
                } else {
                    counter = 0;
                }
            }

            return pssTos;
        } else {
            return null;
        }
    }

    public Site getSiteById(String siteId) {
        return this.maintainSitesFacade.findSite(siteId);
    }

    public String generatePublicSitePreviewCSV(List<PublicSiteStatisticsTo> tos) {
        StringBuffer headerSB = new StringBuffer();
        headerSB.append("\"Procedure\"");
        headerSB.append(",");
        headerSB.append("\"Encounter Type\"");
        headerSB.append(",");
        headerSB.append("\"Cancer?\"");
        headerSB.append(",");
        headerSB.append("\"Health Authority\"");
        headerSB.append(",");
        headerSB.append("\"Facility\"");
        headerSB.append(",");
        headerSB.append("\"Specialist\"");
        headerSB.append(",");
        headerSB.append("\"#Performed\"");
        headerSB.append(",");
        headerSB.append("\"#Waiting\"");
        headerSB.append(",");
        headerSB.append("\"50%\"");
        headerSB.append(",");
        headerSB.append("\"90%\"");
        headerSB.append("\n");
        StringBuffer sb = new StringBuffer();
        sb.append(headerSB.toString());
        if (tos != null && tos.size() > 0) {
            for (int i = 0; i < tos.size(); i++) {
                PublicSiteStatisticsTo to = (PublicSiteStatisticsTo) tos.get(i);
                if (to.getProcedureGroupNm() != null) {
                    sb.append("\"" + to.getProcedureGroupNm() + "\"");
                } else {
                    sb.append("\"\"");
                }
                sb.append(",");
                if (to.getEncounterTypeDsc() != null) {
                    sb.append("\"" + to.getEncounterTypeDsc() + "\"");
                } else {
                    sb.append("\"\"");
                }
                sb.append(",");
                if (to.getCancerSuspectedDsc() != null) {
                    sb.append("\"" + to.getCancerSuspectedDsc() + "\"");
                } else {
                    sb.append("\"\"");
                }
                sb.append(",");
                if (to.getHealthAuthorityNm() != null) {
                    sb.append("\"" + to.getHealthAuthorityNm() + "\"");
                } else {
                    sb.append("\"\"");
                }
                sb.append(",");
                if (to.getFacilityNm() != null) {
                    sb.append("\"" + to.getFacilityNm() + "\"");
                } else {
                    sb.append("\"\"");
                }
                sb.append(",");
                if (to.getSpecialistNm() != null) {
                    sb.append("\"" + to.getSpecialistNm() + "\"");
                } else {
                    sb.append("\"\"");
                }
                sb.append(",");
                if (to.getProceduresPerformedNbr() != null) {
                    sb.append("\"" + to.getProceduresPerformedNbr().toString() + "\"");
                } else {
                    sb.append("\"\"");
                }
                sb.append(",");
                if (to.getPatientsWaitingNbr() != null) {
                    sb.append("\"" + to.getPatientsWaitingNbr().toString() + "\"");
                } else {
                    sb.append("\"\"");
                }
                sb.append(",");
                if (to.getFiftyPctWeeksNbr() != null) {
                    sb.append("\"" + to.getFiftyPctWeeksNbr().toString() + "\"");
                } else {
                    sb.append("\"\"");
                }
                sb.append(",");
                if (to.getNinetyPctWeeksNbr() != null) {
                    sb.append("\"" + to.getNinetyPctWeeksNbr().toString() + "\"");
                } else {
                    sb.append("\"\"");
                }
                sb.append("\n");
            }
        }
        return sb.toString();
    }
}
