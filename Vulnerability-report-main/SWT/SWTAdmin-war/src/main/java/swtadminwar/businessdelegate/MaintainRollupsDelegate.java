/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package swtadminwar.businessdelegate;

import ca.bc.gov.hlth.swt.entity.BodyPart;
import ca.bc.gov.hlth.swt.entity.Procedure;
import ca.bc.gov.hlth.swt.session.MaintainRollupsFacadeLocal;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.faces.model.SelectItem;
import jakarta.inject.Named;
import java.util.ArrayList;
import java.util.List;
import swtadminwar.util.SWTJSFUtils;

/**
 * This class is a business delegate follows singleton pattern.
 *
 * @author Kuan.Fan
 */
@ApplicationScoped
@Named("MaintainRollupsDelegate")
public class MaintainRollupsDelegate {

    @EJB
    private MaintainRollupsFacadeLocal maintainRollupsFacade;

    public MaintainRollupsDelegate() {

    }

    /**
     * Return the all the procedures as a list of SelectItem
     *
     * @return List a list of SelectItem
     */
    public List<SelectItem> getAllProcedures(Long procedureGroupId) {
        List<Procedure> procedures = maintainRollupsFacade.findAvailableProcedures(procedureGroupId);
        return SWTJSFUtils.buildProcedureList(procedures);
    }

    /**
     * Queries assigned procedure ids based on a procedure group id.
     *
     * @param procedureGroupId String
     * @return List a list of assigned procedure ids
     */
    public List<String> getAssignedProcedureIds(String procedureGroupId) {

        if (procedureGroupId == null) {
            return null;
        } else {
            List<Procedure> procedures = this.maintainRollupsFacade.findProceduresAssignedTo(procedureGroupId);
            if (procedures != null && procedures.size() > 0) {
                List assignedProcedurePKs = new ArrayList();
                for (int i = 0; i < procedures.size(); i++) {
                    assignedProcedurePKs.add(((Procedure) procedures.get(i)).getProcedureId().toString());
                }
                return assignedProcedurePKs;
            } else {
                return null;
            }
        }

    }

    /**
     * Queries assigned body parts based on a procedure group id.
     *
     * @param procedureGroupId String
     * @return List a list of assigned body parts
     */
    public List<BodyPart> getAssignedBodyParts(String procedureGroupId) {
        List<BodyPart> assignedBodyPartCDs = new ArrayList<BodyPart>();
        
        List<BodyPart> assignedBodyparts = this.maintainRollupsFacade.findBodyPartsAssignedTo(procedureGroupId);
        if (assignedBodyparts != null) {            
            for(BodyPart bp : assignedBodyparts) {                
                assignedBodyPartCDs.add(bp);
            }
        }
        
        return assignedBodyPartCDs; 
    }
    
     /**
     * Saves the procedures assigned to a procedure group.
     *
     * @param procedureGroupId
     * @param procedures
     */
    public void saveAssignedProcedures(String procedureGroupId, List<Procedure> procedures) {
        List<String> procedureIds = new ArrayList<>();
        for (Procedure p : procedures) {
            procedureIds.add(String.valueOf(p.getProcedureId()));
        }
        this.maintainRollupsFacade.saveAssignedProcedures(procedureGroupId, procedureIds);
    }

    /**
     * Saves the procedures assigned to a procedure group.
     *
     * @param procedureGroupId
     * @param bodyParts
     */
    public void saveAssignedBodyParts(String procedureGroupId, List<BodyPart> bodyParts) {
        List<String> bodyPartCodes = new ArrayList<String>();
        for(BodyPart bp : bodyParts){ 
            bodyPartCodes.add(bp.getBodyPartCd());
        }
        this.maintainRollupsFacade.saveAssignedBodyParts(procedureGroupId, bodyPartCodes);
    }

}
