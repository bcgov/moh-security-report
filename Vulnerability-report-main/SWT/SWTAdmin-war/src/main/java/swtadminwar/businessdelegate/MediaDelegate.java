/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package swtadminwar.businessdelegate;

import ca.bc.gov.hlth.swt.entity.Site;
import ca.bc.gov.hlth.swt.session.MediaProvincialWaitTimesFacadeLocal;
import ca.bc.gov.hlth.swt.session.SiteFacadeLocal;
import ca.bc.gov.hlth.swt.to.CurrentPriorityAreaDSWTStatisticsTo;
import ca.bc.gov.hlth.swt.to.CurrentPriorityAreaPGNWTStatisticsTo;
import ca.bc.gov.hlth.swt.to.CurrentPriorityAreaWTStatisticsTo;
import ca.bc.gov.hlth.swt.to.CurrentWTStatisticsTo;
import ca.bc.gov.hlth.swt.to.DataSourceLongTermWTSec2To;
import ca.bc.gov.hlth.swt.to.LongTermWTSec1To;
import ca.bc.gov.hlth.swt.to.LongTermWTSec2To;
import ca.bc.gov.hlth.swt.to.MonthCompareProGroupTo;
import ca.bc.gov.hlth.swt.to.MonthCompareSpecialtyTo;
import ca.bc.gov.hlth.swt.to.OrderedLongTermWTSec1To;
import ca.bc.gov.hlth.swt.to.PGNLongTermWTSec2To;
import ca.bc.gov.hlth.swt.to.PriorityLongTermWTSec2To;
import jakarta.ejb.EJB;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 *
 * @author Kuan.Fan
 */
@Named
@ViewScoped
public class MediaDelegate implements Serializable {

    private static final long serialVersionUID = 1L;

    @EJB
    private MediaProvincialWaitTimesFacadeLocal mediaProvincialWaitTimesFacade;

    @EJB
    private SiteFacadeLocal siteFacade;

    private Map currentWaitTimesCache = new HashMap();
    private Map currentPriorityAreaDSWTStatisticsCache = new HashMap();
    private Map orderedLongTermSection1WaitTimesCache = new HashMap();
    private Map dataSourceLongTermWTSecCache = new HashMap();

    public List<CurrentWTStatisticsTo> getCurrentWaitTimes(String siteId, String adult) {
        String key = siteId + adult;
        if (currentWaitTimesCache.get(key) == null) {
            List<CurrentWTStatisticsTo> list = mediaProvincialWaitTimesFacade.findCurrentWaitTimes(siteId, adult);
            currentWaitTimesCache.put(key, list);
        }
        return (List<CurrentWTStatisticsTo>) currentWaitTimesCache.get(key);
    }

    public List<CurrentPriorityAreaDSWTStatisticsTo> getCurrentPriorityAreaDSWTStatisticsTos(String siteId, String adult) {
        String key = siteId + adult;

        if (currentPriorityAreaDSWTStatisticsCache.get(key) == null) {
            List<CurrentPriorityAreaDSWTStatisticsTo> rt = this.mediaProvincialWaitTimesFacade.findCurrentPriorityAreaDSWTStatisticsTos(siteId, adult);
            currentPriorityAreaDSWTStatisticsCache.put(key, rt);
        }
        return (List<CurrentPriorityAreaDSWTStatisticsTo>) currentPriorityAreaDSWTStatisticsCache.get(key);
    }

    public List<OrderedLongTermWTSec1To> getOrderedLongTermWTSec1(String siteId, String adult) {
        String key = siteId + adult;
        if (orderedLongTermSection1WaitTimesCache.get(key) == null) {
            List list = this.mediaProvincialWaitTimesFacade.findOrderedLongTermWTSec1(siteId, adult);
            orderedLongTermSection1WaitTimesCache.put(key, list);
        }
        return (List<OrderedLongTermWTSec1To>) orderedLongTermSection1WaitTimesCache.get(key);
    }

    public List<DataSourceLongTermWTSec2To> getDataSourceLongTermWTSec2Tos(String siteId, String adult) {
        String key = siteId + adult;
        if (dataSourceLongTermWTSecCache.get(key) == null) {
            List list = this.mediaProvincialWaitTimesFacade.findDataSourceLongTermWTSec2Tos(siteId, adult);
            dataSourceLongTermWTSecCache.put(key, list);
        }
        return (List<DataSourceLongTermWTSec2To>) dataSourceLongTermWTSecCache.get(key);
    }

    public String getCurrentSiteId() {
        Site currentSite = this.siteFacade.findCurrent();
        return currentSite.getSiteId().toString();
    }

    public List<MonthCompareProGroupTo> getMonthCompareProGroupTos(String siteId) {
        return this.mediaProvincialWaitTimesFacade.findMonthCompareProGroupTos(siteId);
    }

    public List<MonthCompareSpecialtyTo> getMonthCompareSpecialtyTos(String siteId) {
        return this.mediaProvincialWaitTimesFacade.findMonthCompareSpecialtyTos(siteId);
    }

    public List<MonthCompareSpecialtyTo> getMonthCompareNonSprTos(String siteId) {
        return this.mediaProvincialWaitTimesFacade.findMonthCompareNonSprTos(siteId);
    }

    public Date getSitePublishedDate(String siteId) {
        Site site = this.siteFacade.find(new Long(siteId));
        return site.getPublishedOnDtm();
    }

    public Date getSiteReportingPeriodEndDt(String siteId) {
        Site site = this.siteFacade.find(new Long(siteId));
        return site.getReportingPeriodEndDt();
    }

    public String generateMediaSitePreviewCSV(List<CurrentWTStatisticsTo> currentTos,
            List<CurrentPriorityAreaDSWTStatisticsTo> currentPriorityTos,
            List<OrderedLongTermWTSec1To> longTermSec1Tos,
            List<DataSourceLongTermWTSec2To> longTermSec2Tos) {
        String surgeonSpecialty = "Surgeon Specialty";
        String patientsWaiting = "Patients Waiting";
        String caseCompleted = "Case Completed";
        String received50 = "50% received services within (weeks)";
        String received90 = "90% received services within (weeks)";
        String priorityArea = "Priority Area";
        String fiscalYear = "Fiscal Year";

        StringBuffer headerSB = new StringBuffer();
        headerSB.append(surgeonSpecialty);
        headerSB.append(",");
        headerSB.append(patientsWaiting);
        headerSB.append(",");
        headerSB.append(caseCompleted);
        headerSB.append(",");
        headerSB.append(received50);
        headerSB.append(",");
        headerSB.append(received90);
        String header1 = headerSB.toString();
        headerSB = new StringBuffer();
        headerSB.append(priorityArea);
        headerSB.append(",");
        headerSB.append(patientsWaiting);
        headerSB.append(",");
        headerSB.append(caseCompleted);
        headerSB.append(",");
        headerSB.append(received50);
        headerSB.append(",");
        headerSB.append(received90);
        String header2 = headerSB.toString();
        headerSB = new StringBuffer();
        headerSB.append(fiscalYear);
        headerSB.append(",");
        headerSB.append(patientsWaiting);
        headerSB.append(",");
        headerSB.append(caseCompleted);
        headerSB.append(",");
        headerSB.append(received50);
        headerSB.append(",");
        headerSB.append(received90);
        String header3 = headerSB.toString();

        StringBuffer sb = new StringBuffer();
        if (currentTos != null && currentTos.size() > 0) {
            sb.append("Current Wait Time Statistics" + "\n");
            sb.append(header1 + "\n");
            for (int i = 0; i < currentTos.size(); i++) {
                CurrentWTStatisticsTo currentTo = (CurrentWTStatisticsTo) currentTos.get(i);
                if (currentTo.getSurgeonSpecialyDsc() != null) {
                    sb.append(currentTo.getSurgeonSpecialyDsc());
                }
                sb.append(",");
                if (currentTo.getPatientsWaitingNbr() != null) {
                    sb.append(currentTo.getPatientsWaitingNbr().toString());
                }
                sb.append(",");
                if (currentTo.getProceduresPerformedNbr() != null) {
                    sb.append(currentTo.getProceduresPerformedNbr().toString());
                }
                sb.append(",");
                if (currentTo.getFiftyPctWeeksNbr() != null) {
                    sb.append(currentTo.getFiftyPctWeeksNbr().toString());
                }
                sb.append(",");
                if (currentTo.getNinetyPctWeeksNbr() != null) {
                    sb.append(currentTo.getNinetyPctWeeksNbr().toString());
                }
                sb.append("\n");
            }
        }
        sb.append("\n");
        if (currentPriorityTos != null && currentPriorityTos.size() > 0) {
            sb.append("Wait Times By Priority Areas" + "\n");
            for (int i = 0; i < currentPriorityTos.size(); i++) {
                CurrentPriorityAreaDSWTStatisticsTo currentPriorityTo = (CurrentPriorityAreaDSWTStatisticsTo) currentPriorityTos.get(i);
                sb.append("\n");
                sb.append(currentPriorityTo.getDataSource() + "\n");
                sb.append(header2 + "\n");
                List<CurrentPriorityAreaPGNWTStatisticsTo> subCurrentPriorityTos = currentPriorityTo.getCurrentPriorityAreaPGNWTStatisticsTos();
                if (subCurrentPriorityTos != null && subCurrentPriorityTos.size() > 0) {
                    for (int j = 0; j < subCurrentPriorityTos.size(); j++) {
                        CurrentPriorityAreaPGNWTStatisticsTo subCurrentPriorityTo = (CurrentPriorityAreaPGNWTStatisticsTo) subCurrentPriorityTos.get(j);
                        List<CurrentPriorityAreaWTStatisticsTo> subsubCurrentPriorityTos = subCurrentPriorityTo.getCurrentPriorityAreaWTStatisticsTos();
                        if (subsubCurrentPriorityTos != null && subsubCurrentPriorityTos.size() > 0) {
                            for (int k = 0; k < subsubCurrentPriorityTos.size(); k++) {
                                CurrentPriorityAreaWTStatisticsTo subsubCurrentPriorityTo = (CurrentPriorityAreaWTStatisticsTo) subsubCurrentPriorityTos.get(k);
                                String getPriorityDsc = subsubCurrentPriorityTo.getPriorityDsc();
                                if (getPriorityDsc != null && getPriorityDsc.length() > 0) {
                                    sb.append(subsubCurrentPriorityTo.getPriorityDsc() + ",");
                                } else {
                                    sb.append(subsubCurrentPriorityTo.getProcedureGroupNm() + ",");
                                }
                                if (subsubCurrentPriorityTo.getPatientsWaitingNbr() != null) {
                                    sb.append(subsubCurrentPriorityTo.getPatientsWaitingNbr().toString());
                                }
                                sb.append(",");
                                if (subsubCurrentPriorityTo.getProceduresPerformedNbr() != null) {
                                    sb.append(subsubCurrentPriorityTo.getProceduresPerformedNbr().toString());
                                }
                                sb.append(",");
                                if (subsubCurrentPriorityTo.getFiftyPctWeeksNbr() != null) {
                                    sb.append(subsubCurrentPriorityTo.getFiftyPctWeeksNbr());
                                }
                                sb.append(",");
                                if (subsubCurrentPriorityTo.getNinetyPctWeeksNbr() != null) {
                                    sb.append(subsubCurrentPriorityTo.getNinetyPctWeeksNbr());
                                }
                                sb.append("\n");
                            }
                        }
                    }
                }
            }
        }
        sb.append("\n");
        if (longTermSec1Tos != null && longTermSec1Tos.size() > 0) {
            sb.append("Long-Term Wait Times Statistics" + "\n");
            sb.append("\n");
            sb.append("Surgical Patient Registry" + "\n");
            sb.append(header3 + "\n");
            for (int i = 0; i < longTermSec1Tos.size(); i++) {
                OrderedLongTermWTSec1To longTermTo1 = (OrderedLongTermWTSec1To) longTermSec1Tos.get(i);
                sb.append(longTermTo1.getProcedureGroupNm() + "\n");
                List subLongTermTos = longTermTo1.getLongTermWTSec1Tos();
                if (subLongTermTos != null && subLongTermTos.size() > 0) {
                    for (int j = 0; j < subLongTermTos.size(); j++) {
                        LongTermWTSec1To subLongTermTo = (LongTermWTSec1To) subLongTermTos.get(j);
                        sb.append(subLongTermTo.getFiscalYr() + ",");
                        if (subLongTermTo.getPatientsWaitingNbr().toString() != null) {
                            sb.append(subLongTermTo.getPatientsWaitingNbr().toString());
                        }
                        sb.append(",");
                        if (subLongTermTo.getProceduresPerformedNbr() != null) {
                            sb.append(subLongTermTo.getProceduresPerformedNbr().toString());
                        }
                        sb.append(",");
                        if (subLongTermTo.getFiftyPctWeeksNbr() != null) {
                            sb.append(subLongTermTo.getFiftyPctWeeksNbr().toString());
                        }
                        sb.append(",");
                        if (subLongTermTo.getNinetyPctWeeksNbr() != null) {
                            sb.append(subLongTermTo.getNinetyPctWeeksNbr().toString());
                        }
                        sb.append("\n");
                    }
                }
            }
        }
        sb.append("\n");
        if (longTermSec2Tos != null && longTermSec2Tos.size() > 0) {
            for (int i = 0; i < longTermSec2Tos.size(); i++) {
                DataSourceLongTermWTSec2To longTermTo = (DataSourceLongTermWTSec2To) longTermSec2Tos.get(i);
                sb.append(longTermTo.getDataSource() + "\n");
                sb.append(header3 + "\n");
                List<PGNLongTermWTSec2To> subTos = longTermTo.getPgnLongTermWTSec2Tos();
                if (subTos != null && subTos.size() > 0) {
                    for (int j = 0; j < subTos.size(); j++) {
                        PGNLongTermWTSec2To subTo = (PGNLongTermWTSec2To) subTos.get(j);
                        sb.append(subTo.getProcedureGroupNm() + "\n");
                        List<PriorityLongTermWTSec2To> subsubTos = subTo.getPriorityLongTermWTSec2Tos();
                        if (subsubTos != null && subsubTos.size() > 0) {
                            for (int k = 0; k < subsubTos.size(); k++) {
                                PriorityLongTermWTSec2To subsubTo = subsubTos.get(k);
                                String priority = subsubTo.getPriority();
                                if (priority != null && priority.length() > 0) {
                                    sb.append(priority + "\n");
                                }
                                List<LongTermWTSec2To> subsubsubTos = subsubTo.getLongTermWTSec2Tos();
                                if (subsubsubTos != null && subsubsubTos.size() > 0) {
                                    for (int m = 0; m < subsubsubTos.size(); m++) {
                                        LongTermWTSec2To subsubsubTo = (LongTermWTSec2To) subsubsubTos.get(m);
                                        sb.append(subsubsubTo.getFiscalYr() + ",");
                                        if (subsubsubTo.getPatientsWaitingNbr() != null) {
                                            sb.append(subsubsubTo.getPatientsWaitingNbr().toString());
                                        }
                                        sb.append(",");
                                        if (subsubsubTo.getProceduresPerformedNbr() != null) {
                                            sb.append(subsubsubTo.getProceduresPerformedNbr().toString());
                                        }
                                        sb.append(",");
                                        if (subsubsubTo.getFiftyPctWeeksNbr() != null) {
                                            sb.append(subsubsubTo.getFiftyPctWeeksNbr().toString());
                                        }
                                        sb.append(",");
                                        if (subsubsubTo.getNinetyPctWeeksNbr() != null) {
                                            sb.append(subsubsubTo.getNinetyPctWeeksNbr().toString());
                                        }
                                        sb.append("\n");
                                    }
                                }
                            }
                        }
                    }
                }
                sb.append("\n");
            }
        }
        return sb.toString();
    }

    private String formatDate(Date date1) {
        if (date1 == null) {
            return "";
        }
        SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yy");
        return sdf.format(date1);
    }

    public String generateMediaMonthCompareCSV(List monthCompareTos,
            Date siteCurrentMonthMinus1, Date siteCurrentMonthMinus13, Date sitePublishedDate) {
        String siteCurrentMonthMinus1Str = this.formatDate(siteCurrentMonthMinus1);
        String siteCurrentMonthMinus13Str = this.formatDate(siteCurrentMonthMinus13);
        String sitePublishedDateStr = this.formatDate(sitePublishedDate);
        if (monthCompareTos != null && monthCompareTos.size() > 0) {
            StringBuffer headerSB = new StringBuffer();
            headerSB.append(",Patients Waitings as at,,,Variance,,50% Variance Services within (weeks),,,90% Variance Services within (weeks),,,Procedure Performed For 3 Months Ending,,\n");
            headerSB.append(",,,,,,For 3 Months Ending,,Variance,For 3 Months Ending,,Variance,,,\n");
            headerSB.append("," + siteCurrentMonthMinus13Str + "," + siteCurrentMonthMinus1Str + "," + sitePublishedDateStr + ","
                    + siteCurrentMonthMinus13Str + "," + siteCurrentMonthMinus1Str + "," + siteCurrentMonthMinus1Str + ","
                    + sitePublishedDateStr + "," + "," + siteCurrentMonthMinus1Str + ","
                    + sitePublishedDateStr + "," + "," + siteCurrentMonthMinus13Str + ","
                    + siteCurrentMonthMinus1Str + "," + sitePublishedDateStr + "\n");
            StringBuffer bodySB = new StringBuffer();
            for (int i = 0; i < monthCompareTos.size(); i++) {
                List list = (List) monthCompareTos.get(i);
                if (list != null && list.size() > 0) {
                    if (list.get(0) instanceof MonthCompareProGroupTo) {
                        bodySB.append("Procedure/Specialty\n");
                        for (int j = 0; j < list.size(); j++) {
                            MonthCompareProGroupTo mcpgt = (MonthCompareProGroupTo) list.get(j);
                            bodySB.append(mcpgt.getProcedureGroup() + ",");
                            if (mcpgt.getPwMinus13() != null) {
                                bodySB.append(mcpgt.getPwMinus13());
                            }
                            bodySB.append(",");
                            if (mcpgt.getPwMinus1() != null) {
                                bodySB.append(mcpgt.getPwMinus1());
                            }
                            bodySB.append(",");
                            if (mcpgt.getPwCurrent() != null) {
                                bodySB.append(mcpgt.getPwCurrent());
                            }
                            bodySB.append(",");
                            if (mcpgt.getPwVarMinus13() != null) {
                                bodySB.append(mcpgt.getPwVarMinus13());
                            }
                            bodySB.append(",");
                            if (mcpgt.getPwVarMinus1() != null) {
                                bodySB.append(mcpgt.getPwVarMinus1());
                            }
                            bodySB.append(",");
                            if (mcpgt.getFiftyPercentMinus1() != null) {
                                bodySB.append(mcpgt.getFiftyPercentMinus1());
                            }
                            bodySB.append(",");
                            if (mcpgt.getFiftyPercentCurrent() != null) {
                                bodySB.append(mcpgt.getFiftyPercentCurrent());
                            }
                            bodySB.append(",");
                            if (mcpgt.getFiftyPercentVarCurrent() != null) {
                                bodySB.append(mcpgt.getFiftyPercentVarCurrent());
                            }
                            bodySB.append(",");
                            if (mcpgt.getNinetyPercentMinus1() != null) {
                                bodySB.append(mcpgt.getNinetyPercentMinus1());
                            }
                            bodySB.append(",");
                            if (mcpgt.getNinetyPercentCurrent() != null) {
                                bodySB.append(mcpgt.getNinetyPercentCurrent());
                            }
                            bodySB.append(",");
                            if (mcpgt.getNinetyPercentVarCurrent() != null) {
                                bodySB.append(mcpgt.getNinetyPercentVarCurrent());
                            }
                            bodySB.append(",");
                            if (mcpgt.getPerfMinus13() != null) {
                                bodySB.append(mcpgt.getPerfMinus13());
                            }
                            bodySB.append(",");
                            if (mcpgt.getPerfMinus1() != null) {
                                bodySB.append(mcpgt.getPerfMinus1());
                            }
                            bodySB.append(",");
                            if (mcpgt.getPerfCurrent() != null) {
                                bodySB.append(mcpgt.getPerfCurrent());
                            }
                            bodySB.append("\n");
                        }
                    }
                    if (list.get(0) instanceof MonthCompareSpecialtyTo) {
                        bodySB.append("Specific Procedures reported on the web\n");
                        for (int j = 0; j < list.size(); j++) {
                            MonthCompareSpecialtyTo mcpgt = (MonthCompareSpecialtyTo) list.get(j);
                            bodySB.append(mcpgt.getSpecialty() + ",");
                            if (mcpgt.getPwMinus13() != null) {
                                bodySB.append(mcpgt.getPwMinus13());
                            }
                            bodySB.append(",");
                            if (mcpgt.getPwMinus1() != null) {
                                bodySB.append(mcpgt.getPwMinus1());
                            }
                            bodySB.append(",");
                            if (mcpgt.getPwCurrent() != null) {
                                bodySB.append(mcpgt.getPwCurrent());
                            }
                            bodySB.append(",");
                            if (mcpgt.getPwVarMinus13() != null) {
                                bodySB.append(mcpgt.getPwVarMinus13());
                            }
                            bodySB.append(",");
                            if (mcpgt.getPwVarMinus1() != null) {
                                bodySB.append(mcpgt.getPwVarMinus1());
                            }
                            bodySB.append(",");
                            if (mcpgt.getFiftyPercentMinus1() != null) {
                                bodySB.append(mcpgt.getFiftyPercentMinus1());
                            }
                            bodySB.append(",");
                            if (mcpgt.getFiftyPercentCurrent() != null) {
                                bodySB.append(mcpgt.getFiftyPercentCurrent());
                            }
                            bodySB.append(",");
                            if (mcpgt.getFiftyPercentVarCurrent() != null) {
                                bodySB.append(mcpgt.getFiftyPercentVarCurrent());
                            }
                            bodySB.append(",");
                            if (mcpgt.getNinetyPercentMinus1() != null) {
                                bodySB.append(mcpgt.getNinetyPercentMinus1());
                            }
                            bodySB.append(",");
                            if (mcpgt.getNinetyPercentCurrent() != null) {
                                bodySB.append(mcpgt.getNinetyPercentCurrent());
                            }
                            bodySB.append(",");
                            if (mcpgt.getNinetyPercentVarCurrent() != null) {
                                bodySB.append(mcpgt.getNinetyPercentVarCurrent());
                            }
                            bodySB.append(",");
                            if (mcpgt.getPerfMinus13() != null) {
                                bodySB.append(mcpgt.getPerfMinus13());
                            }
                            bodySB.append(",");
                            if (mcpgt.getPerfMinus1() != null) {
                                bodySB.append(mcpgt.getPerfMinus1());
                            }
                            bodySB.append(",");
                            if (mcpgt.getPerfCurrent() != null) {
                                bodySB.append(mcpgt.getPerfCurrent());
                            }
                            bodySB.append("\n");
                        }
                    }
                }
            }
            return headerSB.toString() + bodySB.toString();
        } else {
            return null;
        }

    }

}
