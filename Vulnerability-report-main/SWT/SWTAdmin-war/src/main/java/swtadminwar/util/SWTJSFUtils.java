/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package swtadminwar.util;

import ca.bc.gov.hlth.swt.entity.Procedure;
import ca.bc.gov.hlth.swt.entity.ProcedureGroup;
import ca.bc.gov.hlth.swt.entity.Site;
import ca.bc.gov.hlth.swt.entity.SitePreference;
import jakarta.faces.model.SelectItem;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

/**
 *
 * @author Kuan.Fan
 */
public class SWTJSFUtils {

    /*******
    public static SingleSelectOptionsList createProcedureGroupDropDown( List<SwtProcedureGroup> procedureGroups) {
        if(procedureGroups!=null && procedureGroups.size()>0) {
            Option[] options = new Option[procedureGroups.size()+1];
            Option firstOption = new Option();
            firstOption.setLabel("-- Select Procedure from the list --");
            firstOption.setValue(new Long(-1));
            options[0] = firstOption;
            for(int i=0; i<procedureGroups.size(); i++) {
                SwtProcedureGroup spg = (SwtProcedureGroup)procedureGroups.get(i);
                Option option = new Option();
                option.setLabel(spg.getProcedureGroupNm());
                option.setValue(spg.getProcedureGroupId());
                options[i+1] = option;
            }
            SingleSelectOptionsList ssol = new SingleSelectOptionsList();
            ssol.setOptions(options);
            ssol.setSelectedValue(options[0]);
            return ssol; 
        } else {
            return null;
        }
    }
    public static Option[] createAvaiProcedureOption( List<Procedure> procedures) {
        if(procedures!=null && procedures.size()>0) {
            Option[] options = new Option[procedures.size()];
            for(int i=0; i<procedures.size(); i++) {
                Procedure procedure = (Procedure)procedures.get(i);
                Option option = new Option();
                option.setLabel(procedure.getHaProcedureNm());
                StringBuffer valueSb = new StringBuffer();
                valueSb.append(String.valueOf(procedure.getProcedurePK().getProcedureListId()));
                valueSb.append("|");
                valueSb.append(procedure.getProcedurePK().getHaProcedureCd());
                option.setValue(valueSb);
                options[i] = option;
            }
            return options; 
        } else {
            return null;
        }
    }
     * ***************/
    
    public static List<SelectItem> buildProcedureGroupDropDown(List<ProcedureGroup> inList){
        List outList = new ArrayList();
        Iterator it = inList.iterator(); 
        while (it.hasNext()) {
            ProcedureGroup item = (ProcedureGroup)it.next();
            SelectItem selectItem = new SelectItem();
            try {
                selectItem.setLabel(item.getProcedureGroupNm());
                selectItem.setValue(item.getProcedureGroupId());
            } catch(Exception e){
                e.printStackTrace();
                throw new RuntimeException(e);
            }
            outList.add(selectItem);
        }
        return outList;
    }

    public static List<SelectItem> buildProcedureList(List<Procedure> inList){
        
        List outList = new ArrayList();
        Iterator it = inList.iterator(); 
        while (it.hasNext()) {
            Procedure item = (Procedure)it.next();
            SelectItem selectItem = new SelectItem();
            try {
                selectItem.setLabel(item.getProvProcedureNm());
                selectItem.setValue(item.getProcedureId());
            } catch(Exception e){
                e.printStackTrace();
                throw new RuntimeException(e);
            }
            outList.add(selectItem);
        }
        return outList;
        
    }
    
    public static List<SelectItem> buildSiteList(List<Site> inList){
        
        if(inList==null || inList.size()==0) {
            return null;
        }
        
        List outList = new ArrayList();
        Iterator it = inList.iterator(); 
        while (it.hasNext()) {
            Site item = (Site)it.next();
            SelectItem selectItem = new SelectItem();
            try {
                String published = null;
                if(item.getPublishedYn().equalsIgnoreCase("Y")) {
                    published = "PUBLISHED";
                } else {
                    published = "UNPUBLISHED";
                }
                String monthStr = null;
                if(item.getSiteMonthNbr()>=10) {
                    monthStr =  String.valueOf(item.getSiteMonthNbr());
                } else {
                    monthStr =  "0"+String.valueOf(item.getSiteMonthNbr());
                }
                selectItem.setLabel(item.getSiteId().toString() + " " + String.valueOf(item.getSiteYearNbr())+"-"+monthStr+"(*"+published+"*)");
                selectItem.setValue(item.getSiteId().toString());
            } catch(Exception e){
                e.printStackTrace();
                throw new RuntimeException(e);
            }
            outList.add(selectItem);
        }
        return outList;
        
    }

    public static List<SelectItem> buildSitePreferenceList(List<SitePreference> inList){
        
        if(inList==null || inList.size()==0) {
            return null;
        }
        
        List outList = new ArrayList();
        Iterator it = inList.iterator(); 
        while (it.hasNext()) {
            SitePreference item = (SitePreference)it.next();
            SelectItem selectItem = new SelectItem();
            try {
                selectItem.setLabel(item.getPreferenceName());
                selectItem.setValue(item.getSitePreferenceId());
            } catch(Exception e){
                e.printStackTrace();
                throw new RuntimeException(e);
            }
            outList.add(selectItem);
        }
        return outList;
        
    }

    public static List<String> buildSelectedSitePreferenceList(List<SitePreference> inList){
        
        if(inList==null || inList.size()==0) {
            return null;
        }
        
        List outList = new ArrayList();
        Iterator it = inList.iterator(); 
        while (it.hasNext()) {
            SitePreference item = (SitePreference)it.next();
            try {
                outList.add(item.getSitePreferenceId().toString());
            } catch(Exception e){
                e.printStackTrace();
                throw new RuntimeException(e);
            }
        }
        return outList;
        
    }
    
    public static List<String> buildIdList(List<SelectItem> inList) {
        List ids = null;
        if(inList!=null && inList.size()>0) {
            ids = new ArrayList();
            for(int i=0; i<inList.size(); i++) {
                SelectItem si = (SelectItem)inList.get(i);
                ids.add(si.getValue().toString());
            }
        }
        return ids;
    }

}
