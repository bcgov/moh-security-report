/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package swtadminwar.util;

import ca.bc.gov.health.login.UserPrincipal;
import java.io.ByteArrayOutputStream;
import java.io.ObjectOutputStream;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

/**
 * This class creates a hex string presentation of a encrypted serialized User object.
 *
 * @author Kuan.Fan
 */
public class EncryptUser {

    private static final String SECRET_KEY = "47a0f5338a5671e064d8bbd8dd5e8c40";

    /**
     * Return a hex string presentatopn of a bye array.
     *
     * @param buf byte[] the byte array
     * @return the hex string
     */
    private static String bytesToHexString(byte[] buf) {

        StringBuffer strbuf = new StringBuffer(buf.length * 2);
        int i;

        for (i = 0; i < buf.length; i++) {
            if (((int) buf[i] & 0xff) < 0x10) {
                strbuf.append("0");
            }
            strbuf.append(Long.toString((int) buf[i] & 0xff, 16));
        }

        return strbuf.toString();

    }

    /**
     * Convert the hex string to byte array.
     *
     * @param hexString String the hex String
     * @return the byte array
     */
    private static byte[] hexStringToBytes(String hexString) {
        if ((hexString.length() % 2) != 0) {
            throw new IllegalArgumentException("Input string must contain an even number of characters");
        }

        final byte result[] = new byte[hexString.length() / 2];
        final char enc[] = hexString.toCharArray();
        for (int i = 0; i < enc.length; i += 2) {
            StringBuilder curr = new StringBuilder(2);
            curr.append(enc[i]).append(enc[i + 1]);
            result[i / 2] = (byte) Integer.parseInt(curr.toString(), 16);
        }
        return result;
    }

    /**
     * Encrypt the serialized user.
     *
     * @param user UserPrincipal the user to be serialized and encrypted
     * @return String the hex string presentation of serialized and encrypted user
     * @throws java.lang.Exception throws when excryption fails
     */
    public static String encrypt(UserPrincipal user) throws Exception {

        //get the serialized user in bytes
        ByteArrayOutputStream bo = new ByteArrayOutputStream();
        ObjectOutputStream os = new ObjectOutputStream(bo);
        os.writeObject(user);
        byte[] serializedUserBytes = bo.toByteArray();

        //get the secret key in bytes
        byte[] secretKeyBytes = hexStringToBytes(SECRET_KEY);
        //create SecretKeySpec
        SecretKeySpec skeySpec = new SecretKeySpec(secretKeyBytes, "AES");
        //create cipher
        Cipher cipher = Cipher.getInstance("AES");
        cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
        byte[] encryptedUserBytes = cipher.doFinal(serializedUserBytes);

        return bytesToHexString(encryptedUserBytes);

    }

    public static void main(String[] args) throws Exception {

        UserPrincipal user = new UserPrincipal();
        user.setName("1234");
        user.getRoles().add("Admin");
        encrypt(user);
        //System.out.println("AAAA:" + encrptedUser);

    }

}
