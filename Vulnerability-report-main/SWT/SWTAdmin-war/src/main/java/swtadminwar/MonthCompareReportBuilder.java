/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package swtadminwar;

import ca.bc.gov.hlth.swt.entity.MonthCompareStatisctic;
import ca.bc.gov.hlth.swt.entity.NonSprDataEntry;
import ca.bc.gov.hlth.swt.entity.Site;
import ca.bc.gov.hlth.swt.session.NonSprDataEntryFacadeLocal;
import ca.bc.gov.hlth.swt.session.SiteFacadeLocal;
import ca.bc.gov.hlth.swt.session.SiteStatisticFacadeLocal;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Class to construct the HTML for the Month Compare Report.
 * The resulting HTML can either be piped into a JSP for inline display,
 * or written to the outputstream with an application.vnd/ms-excel content-type
 * to return an excel report.
 * 
 * @author greg.perkins
 */
public class MonthCompareReportBuilder {

    /* Quick 'n Dirty lookup for months */
    private static String[] months = new String[]{"", "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"};
    /* HTML Style info - this will be inline since excel can't reference a stylesheet */
    private static String tableStyle = "style='border: 2px solid black' cellpadding='2' cellspacing='1'";
    private static String dataSourceStyle = "style='vertical-align:middle;width:290px;padding:2px;font-weight: bold;font-size: 14pt; border: 1px solid black;'";
    private static String dataSourceStyleNoBorder = "style='padding:2px;font-weight: bold;font-size: 10pt;'";
    private static String waitingStyle = "style='padding:2px;text-align:center;font-weight: bold;font-size: 10pt; border: 1px solid black; background: #dbe5f1;'";
    private static String performedStyle = "style='padding:2px;text-align:center;font-weight: bold;font-size: 10pt; border: 1px solid black; background: #f2dddc;'";
    private static String fiftyStyle = "style='padding:2px;text-align:center;font-weight: bold;font-size: 10pt; border: 1px solid black; background: #eaf1dd;'";
    private static String ninetyStyle = "style='padding:2px;text-align:center;font-weight: bold;font-size: 10pt; border: 1px solid black; background: #e5e0ec;'";
    private static String plainHeaderStyle = "style='padding:2px;text-align:center;font-size: 10pt; border: 1px solid black;'";
    private static String waitingStyleWidth = "style='width:50px;padding:2px;text-align:right;font-weight: bold;font-size: 10pt; border: 1px solid black; background: #dbe5f1;'";
    private static String performedStyleWidth = "style='width:50px;padding:2px;text-align:right;font-weight: bold;font-size: 10pt; border: 1px solid black; background: #f2dddc;'";
    private static String fiftyStyleWidth = "style='width:50px;padding:2px;text-align:right;font-weight: bold;font-size: 10pt; border: 1px solid black; background: #eaf1dd;'";
    private static String ninetyStyleWidth = "style='width:50px;padding:2px;text-align:right;font-weight: bold;font-size: 10pt; border: 1px solid black; background: #e5e0ec;'";
    private static String plainHeaderStyleWidth = "style='width:50px;padding:2px;text-align:right;font-size: 10pt; border-bottom: 1px solid black;'";
    private static String plainHeaderStyleWidthRightBorder = "style='width:50px;padding:2px;text-align:right;font-size: 10pt; border-bottom: 1px solid black; border-right: 1px solid black;'";
    private static String rightBorderStyle = "style='padding:2px;border-right: 1px solid black; text-align:right;'";
    private static String labelStyle = "style='padding:2px;border-right: 1px solid black; text-align:left;'";
    private static String specialDataStyle = "style='padding:2px;font-weight: bold;border-left: 1px solid black;border-right: 1px solid black;text-align:right;'";
    private static String specialDataRowStyle = "style='font-weight: bold;border-top:1px solid black;border-bottom:1px solid black;'";
    private static String rightAlignStyle = "style='padding:2px;text-align: right;'";
    /* Client has requested alternate labels for some items */
    private static Map<String, String> staticText = new HashMap<String, String>();
    private static final String ADULT = "Y";

    static {
        staticText.put("Cataract Surgery", "Cataract Surgery (subset of Ophthalmology)");
        staticText.put("Hip Replacement", "Hip Replacement (subset of Orthopedic)");
        staticText.put("Knee Replacement", "Knee Replacement (subset of Orthopedic)");
        staticText.put("Coronary Artery Bypass Graft", "Coronary Artery Bypass Graft (subset of OHS)");
        staticText.put("Open Heart Surgery", "Open Heart Surgeries (OHS)");
        staticText.put("Radiotherapy", "Radiotherapy (Cancer)");
    }

    /**
     * Builds the Month Compare Report for a given site.
     * @param site Site - Site to create the report for
     * @param facade SiteStatisticFacadeLocal - Facade for data lookups
     * @return String - HTML fragment
     */
    public String buildMonthCompareSpecialtyReport(String selectedSiteId, SiteFacadeLocal siteFacade, SiteStatisticFacadeLocal facade, NonSprDataEntryFacadeLocal nonSprFacade, String adult) {
        Site site = siteFacade.find(Long.parseLong(selectedSiteId));
        Integer siteId = site.getSiteId().intValue();
        StringBuffer report = new StringBuffer();
        List<MonthCompareStatisctic> specialties = facade.getMonthCompareSpecialties(siteId, adult);
        List<MonthCompareStatisctic> total = facade.getMonthCompareTotal(siteId, adult);
        
        
        report.append("<table " + tableStyle + ">");
        report.append("<tr><td colspan='21' " + dataSourceStyle + ">Surgical Wait Times Monthly Summary Report - by Surgeon Specialty</td></tr>");
        addPediatricNotice(report, adult);
        int month = site.getSiteMonthNbr();
        int year = site.getSiteYearNbr();
        printHeader(report, month, year, site.getReportingPeriodEndDt(), "Surgical Patient Registry");
        addSubHeading(report, "Surgeon Specialties Reported on the Web:");
        printRows(report, specialties);
        printRows(report, total);
        //addSubHeading(report,"&nbsp");

        if (adult.equalsIgnoreCase(ADULT)) {
            List<MonthCompareStatisctic> priorities = facade.getMonthComparePriorities(siteId, adult);
            List<MonthCompareStatisctic> nonSpr = facade.getMonthCompareNonSpr(siteId, adult);

            addSubHeading(report, "Specific Procedures Reported on the Web:");
            printRows(report, priorities);

            Site previousMonth = siteFacade.findPreviousMonth(site.getSiteId());
            Site previousYear = siteFacade.findPreviousYear(site.getSiteId());
            if (previousMonth == null || previousYear == null) {
                throw new RuntimeException("Unable to generate report - missing previous site");
            }

            Map<String, NonSprDataEntry> nonSprDates = nonSprFacade.findNonSprProcedureMapByDataSourceForSiteId(site.getSiteId());
            NonSprDataEntry eyeBank = nonSprDates.get("Eye Bank of BC");
            NonSprDataEntry cancerAgency = nonSprDates.get("BC Cancer Agency");
            NonSprDataEntry cardiacRegistry = nonSprDates.get("Cardiac Services BC");
            NonSprDataEntry hospitalDischarge = nonSprDates.get("Hospital Discharge Information");

            NonSprDataEntry eyeBankPreviousMonth = null;
            NonSprDataEntry cancerAgencyPreviousMonth = null;
            NonSprDataEntry cardiacRegistryPreviousMonth = null;
            NonSprDataEntry hospitalDischargePreviousMonth = null;
            NonSprDataEntry eyeBankPreviousYear = null;
            NonSprDataEntry cancerAgencyPreviousYear = null;
            NonSprDataEntry cardiacRegistryPreviousYear = null;
            NonSprDataEntry hospitalDischargePreviousYear = null;

            if (previousMonth != null) {
                Map<String, NonSprDataEntry> nonSprDatesPreviousMonth = nonSprFacade.findNonSprProcedureMapByDataSourceForSiteId(previousMonth.getSiteId());
                eyeBankPreviousMonth = nonSprDatesPreviousMonth.get("Eye Bank of BC");
                cancerAgencyPreviousMonth = nonSprDatesPreviousMonth.get("BC Cancer Agency");
                cardiacRegistryPreviousMonth = nonSprDatesPreviousMonth.get("Cardiac Services BC");
                hospitalDischargePreviousMonth = nonSprDatesPreviousMonth.get("Hospital Discharge Information");
            }

            if (previousYear != null) {
                Map<String, NonSprDataEntry> nonSprDatesPreviousYear = nonSprFacade.findNonSprProcedureMapByDataSourceForSiteId(previousYear.getSiteId());
                eyeBankPreviousYear = nonSprDatesPreviousYear.get("Eye Bank of BC");
                cancerAgencyPreviousYear = nonSprDatesPreviousYear.get("BC Cancer Agency");
                cardiacRegistryPreviousYear = nonSprDatesPreviousYear.get("Cardiac Services BC");
                hospitalDischargePreviousYear = nonSprDatesPreviousYear.get("hospitalDischargePreviousYear");
            }

            addBlankLine(report);
            printHeader(report, eyeBank, eyeBankPreviousMonth, eyeBankPreviousYear, "B.C. Eye Bank");
            printRows(report, filterEyeBank(nonSpr));
            addBlankLine(report);
            printHeader(report, cancerAgency, cancerAgencyPreviousMonth, cancerAgencyPreviousYear, "B.C. Cancer Agency");
            printRows(report, filterCancer(nonSpr));
            addBlankLine(report);
            printHeader(report, cardiacRegistry, cardiacRegistryPreviousMonth, cardiacRegistryPreviousYear, "B.C. Cardiac Registry");
            printRows(report, filterCardiac(nonSpr));
            if (hospitalDischarge != null && hospitalDischargePreviousMonth != null && hospitalDischargePreviousYear != null){
                addBlankLine(report);
                printHeader(report, hospitalDischarge, hospitalDischargePreviousMonth, hospitalDischargePreviousYear, "Hospital Discharge Information");
                printRows(report, filterHospitalDischarge(nonSpr));
            }
        }


        report.append("</table>");
        return report.toString();
    }

    /**
     * Builds the Month Compare Report for a given site.
     * @param site Site - Site to create the report for
     * @param facade SiteStatisticFacadeLocal - Facade for data lookups
     * @return String - HTML fragment
     */
    public String buildMonthCompareProcedureReport(String selectedSiteId, SiteFacadeLocal siteFacade, SiteStatisticFacadeLocal facade, NonSprDataEntryFacadeLocal nonSprFacade, String adult) {
        Site site = siteFacade.find(Long.parseLong(selectedSiteId));
        Integer siteId = site.getSiteId().intValue();
        StringBuffer report = new StringBuffer();
        List<MonthCompareStatisctic> procedures = facade.getMonthCompareProcedures(siteId, adult);
        List<MonthCompareStatisctic> total = facade.getMonthCompareTotal(siteId, adult);
       
        report.append("<table " + tableStyle + ">");
        report.append("<tr><td colspan='21' " + dataSourceStyle + ">Surgical Wait Times Monthly Summary Report - by Procedure</td></tr>");
        addPediatricNotice(report, adult);
        int month = site.getSiteMonthNbr();
        int year = site.getSiteYearNbr();
        printHeader(report, month, year, site.getReportingPeriodEndDt(), "Surgical Patient Registry");
        addSubHeading(report, "Specific Procedures Reported on the Web:");
        printRows(report, procedures);
        printRows(report, total);
        if (adult.equalsIgnoreCase(ADULT)) {

            List<MonthCompareStatisctic> nonSpr = facade.getMonthCompareNonSpr(siteId, adult);

            Site previousMonth = siteFacade.findPreviousMonth(site.getSiteId());
            Site previousYear = siteFacade.findPreviousYear(site.getSiteId());
            if (previousMonth == null || previousYear == null) {
                throw new RuntimeException("Unable to generate report - missing previous site");
            }
            Map<String, NonSprDataEntry> nonSprDates = nonSprFacade.findNonSprProcedureMapByDataSourceForSiteId(site.getSiteId());
            NonSprDataEntry eyeBank = nonSprDates.get("Eye Bank of BC");
            NonSprDataEntry cancerAgency = nonSprDates.get("BC Cancer Agency");
            NonSprDataEntry cardiacRegistry = nonSprDates.get("Cardiac Services BC");
            NonSprDataEntry hospitalDischarge = nonSprDates.get("Hospital Discharge Information");

            NonSprDataEntry eyeBankPreviousMonth = null;
            NonSprDataEntry cancerAgencyPreviousMonth = null;
            NonSprDataEntry cardiacRegistryPreviousMonth = null;
            NonSprDataEntry hospitalDischargePreviousMonth = null;
            NonSprDataEntry eyeBankPreviousYear = null;
            NonSprDataEntry cancerAgencyPreviousYear = null;
            NonSprDataEntry cardiacRegistryPreviousYear = null;
            NonSprDataEntry hospitalDischargePreviousYear = null;

            if (previousMonth != null) {
                Map<String, NonSprDataEntry> nonSprDatesPreviousMonth = nonSprFacade.findNonSprProcedureMapByDataSourceForSiteId(previousMonth.getSiteId());
                eyeBankPreviousMonth = nonSprDatesPreviousMonth.get("Eye Bank of BC");
                cancerAgencyPreviousMonth = nonSprDatesPreviousMonth.get("BC Cancer Agency");
                cardiacRegistryPreviousMonth = nonSprDatesPreviousMonth.get("Cardiac Services BC");
                hospitalDischargePreviousMonth = nonSprDatesPreviousMonth.get("Hospital Discharge Information");
            }

            if (previousYear != null) {
                Map<String, NonSprDataEntry> nonSprDatesPreviousYear = nonSprFacade.findNonSprProcedureMapByDataSourceForSiteId(previousYear.getSiteId());
                eyeBankPreviousYear = nonSprDatesPreviousYear.get("Eye Bank of BC");
                cancerAgencyPreviousYear = nonSprDatesPreviousYear.get("BC Cancer Agency");
                cardiacRegistryPreviousYear = nonSprDatesPreviousYear.get("Cardiac Services BC");
                hospitalDischargePreviousYear = nonSprDatesPreviousYear.get("Hospital Discharge Information");
            }

            addBlankLine(report);
            printHeader(report, eyeBank, eyeBankPreviousMonth, eyeBankPreviousYear, "B.C. Eye Bank");
            printRows(report, filterEyeBank(nonSpr));
            addBlankLine(report);
            printHeader(report, cancerAgency, cancerAgencyPreviousMonth, cancerAgencyPreviousYear, "B.C. Cancer Agency");
            printRows(report, filterCancer(nonSpr));
            addBlankLine(report);
            printHeader(report, cardiacRegistry, cardiacRegistryPreviousMonth, cardiacRegistryPreviousYear, "B.C. Cardiac Registry");
            printRows(report, filterCardiac(nonSpr));
            if (hospitalDischarge != null && hospitalDischargePreviousMonth != null && hospitalDischargePreviousYear != null){
                addBlankLine(report);
                printHeader(report, hospitalDischarge, hospitalDischargePreviousMonth, hospitalDischargePreviousYear, "Hospital Discharge Information");
                printRows(report, filterHospitalDischarge(nonSpr));            
            }
        }
        report.append("</table>");
        return report.toString();
    }

    /**
     * Adds a blank row to the report, with appropriate styling
     * @param report StringBuffer
     */
    private void addBlankLine(StringBuffer report) {
        report.append("<tr>");
        report.append("<td colspan='21' style='border-top: 1px solid black;' " + dataSourceStyleNoBorder + ">&nbsp;</td>");
        report.append("</tr>");
    }
    
    private void addPediatricNotice(StringBuffer report, String adult) {
        if (adult.equalsIgnoreCase("Y")) {
            report.append("<tr>");
            report.append("<td colspan='21' style='color: red; font-weight: bolder; font-size: 10pt'>As of October 2012 adult data reported on the website has been expanded to include patients aged 17 and over. Data previous to October 2012 includes adult patients aged 19 and over.</td>");
            report.append("</tr>");
        }
    }

    /**
     * Adds a sub-heading to the report, with appropriate styling
     * @param report StringBuffer
     */
    private void addSubHeading(StringBuffer report, String title) {
        report.append("<tr>");
        report.append("<td " + dataSourceStyleNoBorder + ">" + title + "</td>");
        report.append("<td style='border-left: 1px solid black;'>&nbsp</td>");
        report.append("<td>&nbsp</td>");
        report.append("<td " + specialDataStyle + ">&nbsp</td>");
        report.append("<td " + rightBorderStyle + " colspan='2'>&nbsp</td>");
        report.append("<td colspan='2'>&nbsp</td>");
        report.append("<td " + specialDataStyle + ">&nbsp</td>");
        report.append("<td " + rightBorderStyle + " colspan='2'>&nbsp</td>");
        report.append("<td colspan='2'>&nbsp</td>");
        report.append("<td " + specialDataStyle + ">&nbsp</td>");
        report.append("<td " + rightBorderStyle + " colspan='2'>&nbsp</td>");
        report.append("<td colspan='2'>&nbsp</td>");
        report.append("<td " + specialDataStyle + ">&nbsp</td>");
        report.append("<td colspan='2'>&nbsp</td>");
        report.append("</tr>");
    }

    private void printHeader(StringBuffer report, NonSprDataEntry current, NonSprDataEntry previousMonth, NonSprDataEntry previousYear, String title) {

        int month = current.getPatientsWaitingAsOfDt().getMonth() + 1;
        int year = current.getPatientsWaitingAsOfDt().getYear() + 1900;
        int monthCompleted = current.getProcedureCompletedToDt().getMonth() + 1;
        int yearCompleted = current.getProcedureCompletedToDt().getYear() + 1900;

        int lastMonthMonthCompleted = -1, lastMonthYearCompleted = -1, lastMonthMonth = -1, lastMonthYear = -1;
        if (previousMonth != null) {
            lastMonthMonth = previousMonth.getPatientsWaitingAsOfDt().getMonth() + 1;
            lastMonthYear = previousMonth.getPatientsWaitingAsOfDt().getYear() + 1900;
            lastMonthMonthCompleted = previousMonth.getProcedureCompletedToDt().getMonth() + 1;
            lastMonthYearCompleted = previousMonth.getProcedureCompletedToDt().getYear() + 1900;
        }

        int lastYearMonthCompleted = -1, lastYearYearCompleted = -1, lastYearMonth = -1, lastYearYear = -1;
        if (previousYear != null) {
            lastYearMonth = previousYear.getPatientsWaitingAsOfDt().getMonth() + 1;
            lastYearYear = previousYear.getPatientsWaitingAsOfDt().getYear() + 1900;
            lastYearMonthCompleted = previousYear.getProcedureCompletedToDt().getMonth() + 1;
            lastYearYearCompleted = previousYear.getProcedureCompletedToDt().getYear() + 1900;
        }

        printHeader(report, monthCompleted, yearCompleted, lastMonthMonthCompleted, lastMonthYearCompleted, lastYearMonthCompleted, lastYearYearCompleted, month, year, lastMonthMonth, lastMonthYear, lastYearMonth, lastYearYear, title);

    }

    private void printHeader(StringBuffer report, int month, int year, Date completedDate, String title) {
        int lastMonthMonth = month;
        int lastMonthYear = year;
        int lastYearMonth = month;
        int lastYearYear = (year - 1);
        if (month == 1) {
            lastMonthMonth = 12;
            lastMonthYear = (year - 1);
        } else {
            lastMonthMonth = (month - 1);
        }

        int monthCompleted = completedDate.getMonth() + 1;
        int yearCompleted = completedDate.getYear() + 1900;
        int lastMonthMonthCompleted = monthCompleted;
        int lastMonthYearCompleted = yearCompleted;
        int lastYearMonthCompleted = monthCompleted;
        int lastYearYearCompleted = (yearCompleted - 1);
        if (monthCompleted == 1) {
            lastMonthMonthCompleted = 12;
            lastMonthYearCompleted = (yearCompleted - 1);
        } else {
            lastMonthMonthCompleted = (monthCompleted - 1);
        }

        printHeader(report, monthCompleted, yearCompleted, lastMonthMonthCompleted, lastMonthYearCompleted, lastYearMonthCompleted, lastYearYearCompleted, month, year, lastMonthMonth, lastMonthYear, lastYearMonth, lastYearYear, title);
    }

    /**
     * Adds all headers to the report, with appropriate styling
     * @param report StringBuffer
     */
    private void printHeader(StringBuffer report, int month, int year, int lastMonthMonth, int lastMonthYear, int lastYearMonth, int lastYearYear,
            int monthWaiting, int yearWaiting, int lastMonthMonthWaiting, int lastMonthYearWaiting, int lastYearMonthWaiting, int lastYearYearWaiting, String title) {

        report.append("<tr>");
        report.append("<td rowspan='3' " + dataSourceStyle + "><nobr>" + title + "</nobr></td>");
        report.append("<td colspan='5' " + waitingStyle + "><nobr># Cases Waiting</nobr></td>");
        report.append("<td colspan='5' " + performedStyle + "><nobr># Cases Completed</nobr></td>");
        report.append("<td colspan='5' " + fiftyStyle + "><nobr>50th Percentile Wait Time (weeks)</nobr></td>");
        report.append("<td colspan='5' " + ninetyStyle + "><nobr>90th Percentile Wait Time (weeks)</nobr></td>");
        report.append("</tr>");
        report.append("<tr>");
        report.append("<td colspan='3' " + plainHeaderStyle + ">Cases Waiting as at</td>");
        report.append("<td colspan='2' " + plainHeaderStyle + ">" + maskZero(monthWaiting) + " " + yearWaiting + " difference from</td>");
        report.append("<td colspan='3' " + plainHeaderStyle + ">For 3 Months Ending</td>");
        report.append("<td colspan='2' " + plainHeaderStyle + ">" + months[month] + " " + year + " difference from</td>");
        report.append("<td colspan='3' " + plainHeaderStyle + ">For Cases Completed in the 3 Months Ending</td>");
        report.append("<td colspan='2' " + plainHeaderStyle + ">" + months[month] + " " + year + " difference from</td>");
        report.append("<td colspan='3' " + plainHeaderStyle + ">For Cases Completed in the 3 Months Ending</td>");
        report.append("<td colspan='2' " + plainHeaderStyle + ">" + months[month] + " " + year + " difference from</td>");
        report.append("</tr>");
        report.append("<tr>");
        report.append("<td " + plainHeaderStyleWidth + ">" + maskZero(lastYearMonthWaiting) + "<br/>" + maskZero(lastYearYearWaiting) + "</td>");
        report.append("<td " + plainHeaderStyleWidth + ">" + maskZero(lastMonthMonthWaiting) + "<br/>" + maskZero(lastMonthYearWaiting) + "</td>");
        report.append("<td  " + waitingStyleWidth + ">" + maskZero(monthWaiting) + "<br/>" + maskZero(yearWaiting) + "</td>");
        report.append("<td " + plainHeaderStyleWidth + ">" + maskZero(lastYearMonthWaiting) + "<br/>" + maskZero(lastYearYearWaiting) + "</td>");
        report.append("<td " + plainHeaderStyleWidthRightBorder + ">" + maskZero(lastMonthMonthWaiting) + "<br/>" + maskZero(lastMonthYearWaiting) + "</td>");
        report.append("<td " + plainHeaderStyleWidth + ">" + maskZero(lastYearMonth) + "<br/>" + maskZero(lastYearYear) + "</td>");
        report.append("<td " + plainHeaderStyleWidth + ">" + maskZero(lastMonthMonth) + "<br/>" + maskZero(lastMonthYear) + "</td>");
        report.append("<td " + performedStyleWidth + ">" + months[month] + "<br/>" + year + "</td>");
        report.append("<td " + plainHeaderStyleWidth + ">" + maskZero(lastYearMonth) + "<br/>" + maskZero(lastYearYear) + "</td>");
        report.append("<td " + plainHeaderStyleWidthRightBorder + ">" + maskZero(lastMonthMonth) + "<br/>" + maskZero(lastMonthYear) + "</td>");
        report.append("<td " + plainHeaderStyleWidth + ">" + maskZero(lastYearMonth) + "<br/>" + maskZero(lastYearYear) + "</td>");
        report.append("<td " + plainHeaderStyleWidth + ">" + maskZero(lastMonthMonth) + "<br/>" + maskZero(lastMonthYear) + "</td>");
        report.append("<td " + fiftyStyleWidth + ">" + months[month] + "<br/>" + year + "</td>");
        report.append("<td " + plainHeaderStyleWidth + ">" + maskZero(lastYearMonth) + "<br/>" + maskZero(lastYearYear) + "</td>");
        report.append("<td " + plainHeaderStyleWidthRightBorder + ">" + maskZero(lastMonthMonth) + "<br/>" + maskZero(lastMonthYear) + "</td>");
        report.append("<td " + plainHeaderStyleWidth + ">" + maskZero(lastYearMonth) + "<br/>" + maskZero(lastYearYear) + "</td>");
        report.append("<td " + plainHeaderStyleWidth + ">" + maskZero(lastMonthMonth) + "<br/>" + maskZero(lastMonthYear) + "</td>");
        report.append("<td " + ninetyStyleWidth + ">" + months[month] + "<br/>" + year + "</td>");
        report.append("<td " + plainHeaderStyleWidth + ">" + maskZero(lastYearMonth) + "<br/>" + maskZero(lastYearYear) + "</td>");
        report.append("<td " + plainHeaderStyleWidth + ">" + maskZero(lastMonthMonth) + "<br/>" + maskZero(lastMonthYear) + "</td>");
        report.append("</tr>");
    }

    /**
     * Prints a list of rows in order, with appropriate styling
     * @param report StringBuffer
     * @param specialties List<MonthCompareStatistic>
     */
    private void printRows(StringBuffer report, List<MonthCompareStatisctic> specialties) {
        String highlight = "onmouseover='this.style.background=\"#DDDDDD\";' onmouseout='this.style.background=\"#FFFFFF\";'";
        for (MonthCompareStatisctic stat : specialties) {
            if (stat.getLabel() == null || "".equals(stat.getLabel())) {
                report.append("<tr " + highlight + " " + specialDataRowStyle + ">");
                stat.setLabel("Total");
            } else {
                report.append("<tr " + highlight + ">");
            }
            if (staticText.containsKey(stat.getLabel())) {
                stat.setLabel(staticText.get(stat.getLabel()));
            }
            report.append("<td " + labelStyle + "><nobr>" + stat.getLabel() + "</nobr></td>");
            report.append("<td " + rightAlignStyle + ">" + maskNull(stat.getPatientsWaitingNbrPrevYear()) + "</td>");
            report.append("<td " + rightAlignStyle + ">" + maskNull(stat.getPatientsWaitingNbrPrevMonth()) + "</td>");
            report.append("<td " + specialDataStyle + ">" + maskNull(stat.getPatientsWaitingNbr()) + "</td>");
            report.append("<td " + rightAlignStyle + ">" + maskNull(stat.getPatientsWaitingNbrPrevYearDiff()) + "</td>");
            report.append("<td " + rightBorderStyle + ">" + maskNull(stat.getPatientsWaitingNbrPrevMonthDiff()) + "</td>");
            report.append("<td " + rightAlignStyle + ">" + maskNull(stat.getProceduresPerformedNbrPrevYear()) + "</td>");
            report.append("<td " + rightAlignStyle + ">" + maskNull(stat.getProceduresPerformedNbrPrevMonth()) + "</td>");
            report.append("<td " + specialDataStyle + ">" + maskNull(stat.getProceduresPerformedNbr()) + "</td>");
            report.append("<td " + rightAlignStyle + ">" + maskNull(stat.getProceduresPerformedNbrPrevYearDiff()) + "</td>");
            report.append("<td " + rightBorderStyle + ">" + maskNull(stat.getProceduresPerformedNbrPrevMonthDiff()) + "</td>");
            report.append("<td " + rightAlignStyle + ">" + maskNull(stat.getFiftyPctWeeksNbrPrevYear()) + "</td>");
            report.append("<td " + rightAlignStyle + ">" + maskNull(stat.getFiftyPctWeeksNbrPrevMonth()) + "</td>");
            report.append("<td " + specialDataStyle + ">" + maskNull(stat.getFiftyPctWeeksNbr()) + "</td>");
            report.append("<td " + rightAlignStyle + ">" + maskNull(stat.getFiftyPctWeeksNbrPrevYearDiff()) + "</td>");
            report.append("<td " + rightBorderStyle + ">" + maskNull(stat.getFiftyPctWeeksNbrPrevMonthDiff()) + "</td>");
            report.append("<td " + rightAlignStyle + ">" + maskNull(stat.getNinetyPctWeeksNbrPrevYear()) + "</td>");
            report.append("<td " + rightAlignStyle + ">" + maskNull(stat.getNinetyPctWeeksNbrPrevMonth()) + "</td>");
            report.append("<td " + specialDataStyle + ">" + maskNull(stat.getNinetyPctWeeksNbr()) + "</td>");
            report.append("<td " + rightAlignStyle + ">" + maskNull(stat.getNinetyPctWeeksNbrPrevYearDiff()) + "</td>");
            report.append("<td " + rightAlignStyle + ">" + maskNull(stat.getNinetyPctWeeksNbrPrevMonthDiff()) + "</td>");
            report.append("</tr>");
        }
    }

    /**
     * Formats an integer according to display rules
     * @param in Integer
     * @return String
     */
    private String maskNull(Integer in) {
        if (in == null) {
            return "N/A";
        } else {
            DecimalFormat fmt = new DecimalFormat("##,###");
            fmt.setMaximumFractionDigits(0);
            return fmt.format(in);
        }
    }

    /**
     * Formats a Double according to display rules
     * @param in Double
     * @return String
     */
    private String maskNull(Double in) {
        if (in == null) {
            return "N/A";
        } else {
            DecimalFormat fmt = new DecimalFormat("##.#");
            fmt.setMinimumFractionDigits(1);
            fmt.setMaximumFractionDigits(1);
            return "&nbsp;" + fmt.format(in);
        }
    }

    /**
     * Formats a Integer  according to display rules
     * @param in int
     * @return String
     */
    private String maskZero(int in) {
        if (in == -1) {
            return "N/A";
        } else if (in > 12) {
            return in + "";
        } else {
            return months[in];
        }
    }

    /**
     * Seperates the Eye Bank records from the Non-SPR data
     * @param in List<MonthCompareStatisctic>
     * @return List<MonthCompareStatisctic> - Filtered list
     */
    private List<MonthCompareStatisctic> filterEyeBank(List<MonthCompareStatisctic> in) {
        List<MonthCompareStatisctic> out = new ArrayList<MonthCompareStatisctic>();
        for (MonthCompareStatisctic monthCompareStatisctic : in) {
            if (monthCompareStatisctic.getLabel().equals("Corneal Transplants")) {
                out.add(monthCompareStatisctic);
            }
        }
        return out;
    }

    /**
     * Seperates the Cancer records from the Non-SPR data
     * @param in List<MonthCompareStatisctic>
     * @return List<MonthCompareStatisctic> - Filtered list
     */
    private List<MonthCompareStatisctic> filterCancer(List<MonthCompareStatisctic> in) {
        List<MonthCompareStatisctic> out = new ArrayList<MonthCompareStatisctic>();
        for (MonthCompareStatisctic monthCompareStatisctic : in) {
            if (monthCompareStatisctic.getLabel().equals("Radiotherapy")) {
                out.add(monthCompareStatisctic);
            }
        }
        return out;
    }

    /**
     * Seperates the Cardiac records from the Non-SPR data
     * @param in List<MonthCompareStatisctic>
     * @return List<MonthCompareStatisctic> - Filtered list
     */
    private List<MonthCompareStatisctic> filterCardiac(List<MonthCompareStatisctic> in) {
        List<MonthCompareStatisctic> out = new ArrayList<MonthCompareStatisctic>();
        for (MonthCompareStatisctic monthCompareStatisctic : in) {
            if (monthCompareStatisctic.getLabel().equals("Coronary Artery Bypass Graft")
                    || monthCompareStatisctic.getLabel().equals("Open Heart Surgery")) {
                out.add(monthCompareStatisctic);
            }
        }
        Collections.reverse(out);
        return out;
    }
    
    /**
     * Seperates the Hospital Discharge records from the Non-SPR data
     * @param in List<MonthCompareStatisctic>
     * @return List<MonthCompareStatisctic> - Filtered list
     */
    private List<MonthCompareStatisctic> filterHospitalDischarge(List<MonthCompareStatisctic> in) {
        List<MonthCompareStatisctic> out = new ArrayList<MonthCompareStatisctic>();
        for (MonthCompareStatisctic monthCompareStatisctic : in) {
            if (monthCompareStatisctic.getLabel().equals("Hip Fracture Fixation")) {
                out.add(monthCompareStatisctic);
            }
        }
        Collections.reverse(out);
        return out;
    }    
}
