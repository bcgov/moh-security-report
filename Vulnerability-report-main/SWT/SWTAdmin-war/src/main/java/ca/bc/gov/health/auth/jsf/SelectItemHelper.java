/*
 * To change this license header, choose License Headers in Project Properties. To change this
 * template file, choose Tools | Templates and open the template in the editor.
 */
package ca.bc.gov.health.auth.jsf;

import jakarta.faces.model.SelectItem;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import org.apache.commons.beanutils.PropertyUtils;


/**
 * The Class SelectItemHelper.
 *
 * @author trevor.schiavone
 */
public class SelectItemHelper {

  /**
   * If no sort parameter is set set the value to true.
   *
   * @param list the list
   * @param labelProperty the label property
   * @param valueProperty the value property
   * @return the list
   */
  @SuppressWarnings("rawtypes")
  public static List buildSelectItemList(List list, String labelProperty, String valueProperty) {
    return buildSelectItemList(list, labelProperty, valueProperty, true);
  }

  /**
   * Overloaded method to take in two label properties. Appends two label properites together, for
   * instance a first and last name.
   *
   * @param list the list
   * @param labelProperty1 the label property 1
   * @param labelProperty2 the label property 2
   * @param valueProperty the value property
   * @return the list
   */
  @SuppressWarnings("rawtypes")
  public static List buildSelectItemList(List list, String labelProperty1, String labelProperty2,
      String valueProperty) {
    return buildSelectItemListTwoLabels(list, labelProperty1, labelProperty2, valueProperty, true);
  }


  /**
   * Builds the select item list.
   *
   * @param list the list
   * @param labelProperty the label property
   * @param valueProperty the value property
   * @param doSort the do sort
   * @return the list
   */
  @SuppressWarnings({"rawtypes", "unchecked"})
  public static List buildSelectItemList(List list, String labelProperty, String valueProperty,
      boolean doSort) {
    List outList = new ArrayList<>();
    for (Iterator it = list.iterator(); it.hasNext();) {
      Object item = it.next();
      SelectItem selectItem = new SelectItem();
      try {
        String label = (PropertyUtils.getProperty(item, labelProperty) == null) ? ""
            : PropertyUtils.getProperty(item, labelProperty).toString();
        selectItem.setLabel(label);
        selectItem.setValue(PropertyUtils.getProperty(item, valueProperty));
      } catch (Exception e) {
        e.printStackTrace();
        throw new RuntimeException(e);
      }
      outList.add(selectItem);
    }
    if (doSort) {
      Collections.sort(outList, new Comparator<SelectItem>() {

        public int compare(SelectItem o1, SelectItem o2) {
          return o1.getLabel().compareTo(o2.getLabel());
        }

      });
    }
    return outList;
  }

  /**
   * Builds the select item list two labels.
   *
   * @param list the list
   * @param labelProperty1 the label property 1
   * @param labelProperty2 the label property 2
   * @param valueProperty the value property
   * @param doSort the do sort
   * @return the list
   */
  @SuppressWarnings("rawtypes")
  public static List buildSelectItemListTwoLabels(List list, String labelProperty1,
      String labelProperty2, String valueProperty, boolean doSort) {
    return buildSelectItemListTwoLabelsImpl(list, labelProperty1, labelProperty2, valueProperty,
        doSort, ", ");
  }

  /**
   * Builds the select item list two labels separator.
   *
   * @param list the list
   * @param labelProperty1 the label property 1
   * @param labelProperty2 the label property 2
   * @param valueProperty the value property
   * @param doSort the do sort
   * @param separator the separator
   * @return the list
   */
  @SuppressWarnings("rawtypes")
  public static List buildSelectItemListTwoLabelsSeparator(List list, String labelProperty1,
      String labelProperty2, String valueProperty, boolean doSort, String separator) {
    return buildSelectItemListTwoLabelsImpl(list, labelProperty1, labelProperty2, valueProperty,
        doSort, separator);
  }

  /**
   * Builds the select item list two labels impl.
   *
   * @param list the list
   * @param labelProperty1 the label property 1
   * @param labelProperty2 the label property 2
   * @param valueProperty the value property
   * @param doSort the do sort
   * @param separator the separator
   * @return the list
   */
  @SuppressWarnings({"rawtypes", "unchecked"})
  public static List buildSelectItemListTwoLabelsImpl(List list, String labelProperty1,
      String labelProperty2, String valueProperty, boolean doSort, String separator) {
    List outList = new ArrayList();
    for (Iterator it = list.iterator(); it.hasNext();) {
      Object item = it.next();
      SelectItem selectItem = new SelectItem();
      try {
        String fname = (PropertyUtils.getProperty(item, labelProperty1) == null) ? ""
            : PropertyUtils.getProperty(item, labelProperty1).toString();
        String lname = (PropertyUtils.getProperty(item, labelProperty2) == null) ? ""
            : PropertyUtils.getProperty(item, labelProperty2).toString();
        String label = fname + separator + lname;
        selectItem.setLabel(label);
        selectItem.setValue(PropertyUtils.getProperty(item, valueProperty));
      } catch (Exception e) {
        e.printStackTrace();
        throw new RuntimeException(e);
      }
      outList.add(selectItem);
    }
    if (doSort) {
      Collections.sort(outList, new Comparator<SelectItem>() {

        public int compare(SelectItem o1, SelectItem o2) {
          return o1.getLabel().compareTo(o2.getLabel());
        }

      });
    }
    return outList;
  }
}
