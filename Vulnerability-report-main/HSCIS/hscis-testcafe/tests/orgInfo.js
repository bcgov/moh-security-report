import { initTest } from '../helpers/common.helper';
import { urlFor } from '../helpers/url.helper';
import { regularAccUser } from '../helpers/user.helper';
import { selectorByDataRK } from '../helpers/selector.helper';
import { isDisabled, hasErrorState, selectInDropdownList } from '../helpers/field.helper';
import NavBar from '../page-objects/topNav';
import orginfo from '../page-objects/orginfo';

fixture `HSCIS - OrgInfo`
    .page(urlFor(''))
    .beforeEach( async t => {
        await initTest(regularAccUser);

    //Set navigation links
        await NavBar.clickorgInfoLink();

    //****************
});

const page = new orginfo();


test('01. Smoke Test', async t => {
    await t
        .hover(page.corporateEmp);

    await t
        .hover(page.province);

    await t
        .hover(page.empList);
});

test('02. Choices', async t => {
    //Check if there is data in the emp table
    await t
        .wait(1000)
        .expect(page.empListData.textContent).contains('No records found.');

    //Select corporate employer
    var empCode = '6004';
    await selectInDropdownList(page.corporateEmp, page.corporateEmpOptions, empCode);

    //Validate site employer
    await t
        .expect(page.siteEmpValue.textContent).eql('6004 - TestSite4', 'site employer filter incorrect');

    //Validate address1
    await t
        .expect(page.address1.value).eql('Test', 'Address1 filter incorrect');

    //Validate address2
    await t
        .expect(page.address2.value).eql('', 'Address2 filter incorrect');

    //Validate city
    await t
        .expect(page.city.value).eql('Victoria', 'City filter incorrect');

    //Validate province
    await t
        .expect(page.province.value).eql('BC', 'Province filter incorrect');

    //Validate postCode
    await t
        .expect(page.postCode.value).eql('HOH OHO', 'PostCode filter incorrect');

    //Check if there is data in the emp table
    await t
        .wait(1000)
        .expect(page.empListData.textContent).contains('testiName');
    
    //Select site employer
    var siteCode = '6005';
    await selectInDropdownList(page.siteEmpValue, page.siteEmpOptions, siteCode);

    //Validate address1
    await t
        .expect(page.address1.value).eql('Test', 'Address1 filter incorrect');

    //Validate address2
    await t
        .expect(page.address2.value).eql('', 'Address2 filter incorrect');

    //Validate city
    await t
        .expect(page.city.value).eql('Victoria', 'City filter incorrect');

    //Validate province
    await t
        .expect(page.province.value).eql('BC', 'Province filter incorrect');

    //Validate postCode
    await t
        .expect(page.postCode.value).eql('HOH OHO', 'PostCode filter incorrect');

    //Check if there is data in the emp table
    await t
        .wait(1000)
        .expect(page.empListData.textContent).contains('testyName1');
});
