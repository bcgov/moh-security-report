import { initTest } from '../helpers/common.helper';
import { urlFor } from '../helpers/url.helper';
import { regularAccUser } from '../helpers/user.helper';
import { selectorByDataRK } from '../helpers/selector.helper';
import { isDisabled, hasErrorState, selectInDropdownList } from '../helpers/field.helper';
import NavBar from '../page-objects/topNav';
import fundingSources from '../page-objects/fundingSources';

fixture `HSCIS - Funding Sources`
    .page(urlFor(''))
    .beforeEach( async t => {
        await initTest(regularAccUser);

	//Set navigation links
		await NavBar.clickfundingSourcesLink();
	//****************
});

const page = new fundingSources();

test('01. Smoke Test', async t => {
    await t
		.click(page.corporateID);

    await t
        .hover(page.fundingTable);

    await t
        .hover(page.fiscalId);
});

test('02. Create a funding source but cancel', async t => {
    //Select corporate employer #
    await selectInDropdownList(page.corporateID, page.corporateIDOptions, '6004');

    //Select site employer #
    await selectInDropdownList(page.siteID, page.siteIDOptions, '6005');

	//Open the create page
	await page.clickCreateFunding();
	
    //Select funding source
    await selectInDropdownList(page.fundingSourceCode, page.fundingSourceCodeOptions, '02');

	//Enter an amount
    await t
        .typeText(page.projAmount, '9989');

	//Close the create page
	await page.clickCancelCreateFundingSource();

    //Check the funding source in the table
    var fundingTableData = await page.fundingTableData();
	
    //Verify that a new funding source was not created
    await t
        .expect(page.dataContainsFundingSource(fundingTableData, "$9,989.00")).notOk();
});

test('03. Create a couple of new funding sources', async t => {
    //Select corporate employer #
    await selectInDropdownList(page.corporateID, page.corporateIDOptions, '6004');

    //Select site employer #
    await selectInDropdownList(page.siteID, page.siteIDOptions, '6005');

	//Create first
	//Open the create page
	await page.clickCreateFunding();
	
    //Select funding source
    await selectInDropdownList(page.fundingSourceCode, page.fundingSourceCodeOptions, '02');

	//Enter an amount
    await t
        .typeText(page.projAmount, '9919');

	//Create the funding source
	await page.clickconfirmCreateFundingSource();

    //Verify error message is displayed: Record was successfully created
    await t
		.wait(500)
        .expect(page.enterFundingSourcesTableFormMessages().withText("Record was successfully created").exists).ok();

    //Check the funding source in the table
    var fundingTableData = await page.fundingData();
	
    //Verify that a new funding source was not created
    await t
        .expect(page.dataContainsFundingSource(fundingTableData, "$9,919.00")).ok();

	//Create second
	//Open the create page
	await page.clickCreateFunding();
	
    //Select funding source
    await selectInDropdownList(page.fundingSourceCode, page.fundingSourceCodeOptions, '02');

	//Enter an amount
    await t
        .typeText(page.projAmount, '9929');

	//Create the funding source
	await page.clickconfirmCreateFundingSource();

    //Verify error message is displayed: Record was successfully created
    await t
		.wait(500)
        .expect(page.enterFundingSourcesTableFormMessages().withText("Record was successfully created").exists).ok();

    //Check the funding source in the table
    var fundingTableData = await page.fundingData();
	
    //Verify that a new funding source was not created
    await t
        .expect(page.dataContainsFundingSource(fundingTableData, "$9,929.00")).ok();

	//Create third
	//Open the create page
	await page.clickCreateFunding();
	
    //Select funding source
    await selectInDropdownList(page.fundingSourceCode, page.fundingSourceCodeOptions, '02');

	//Enter an amount
    await t
        .typeText(page.projAmount, '9939');

	//Create the funding source
	await page.clickconfirmCreateFundingSource();

    //Verify error message is displayed: Record was successfully created
    await t
		.wait(500)
        .expect(page.enterFundingSourcesTableFormMessages().withText("Record was successfully created").exists).ok();

    //Check the funding source in the table
    var fundingTableData = await page.fundingData();
	
    //Verify that a new funding source was not created
    await t
        .expect(page.dataContainsFundingSource(fundingTableData, "$9,939.00")).ok();

});

test('04. Validate calculations of total and fields', async t => {
    //Select corporate employer #
    await selectInDropdownList(page.corporateID, page.corporateIDOptions, '6004');

    //Select site employer #
    await selectInDropdownList(page.siteID, page.siteIDOptions, '6005');
	
	//Validate the count
	await t
		.expect(page.totalFunding.innerText).eql('$29,787.00', 'total ammount validation incorrect');

	//Validate create proj ammount limits
	//Open the create page
	await page.clickCreateFunding();
	
    //Select funding source
    await selectInDropdownList(page.fundingSourceCode, page.fundingSourceCodeOptions, '02');

	//Enter an amount
    await t
        .typeText(page.projAmount, '9asdasd91999999999999999999999');

	//Validate proj ammount on the update page
	await t
		.expect(page.projValue.value).eql('991999999', 'proj ammount validation incorrect');

	//Close the create page
	await page.clickCancelCreateFundingSource();

	//Validate update proj
	//Select the target for update
    var fundingSourceSelected = page.fundingTableDataList().nth(0);
    await t
        .click(fundingSourceSelected);

	//Enter an amount
    await t
        .typeText(page.updateProjAmount, '9asdasd91999999999999999999999');

	//Validate proj ammount on the update page
	await t
		.expect(page.updateProjAmountValue.value).eql('993999199', 'proj ammount validation incorrect');

	//Close the update page
	await page.clickcancelUpdateFundingSource();
});

test('05. Delete a funding source but cancel', async t => {
    //Select corporate employer #
    await selectInDropdownList(page.corporateID, page.corporateIDOptions, '6004');

    //Select site employer #
    await selectInDropdownList(page.siteID, page.siteIDOptions, '6005');

	//Select the target for update
    var fundingSourceSelected = page.fundingTableDataList().nth(0);
    await t
        .click(fundingSourceSelected);

	//delete the funding source
	await page.clickdeleteFundingSourceButton();

	//Cancel the delete of the funding source
	await page.clickdeleteCancelButton();
});

test('06. Delete a funding source and validate the calculation', async t => {
    //Select corporate employer #
    await selectInDropdownList(page.corporateID, page.corporateIDOptions, '6004');

    //Select site employer #
    await selectInDropdownList(page.siteID, page.siteIDOptions, '6005');

	//Select the target for update
    var fundingSourceSelected = page.fundingTableDataList().nth(0);
    await t
        .click(fundingSourceSelected);

	//delete the funding source
	await page.clickdeleteFundingSourceButton();

	//Cancel the delete of the funding source
	await page.clickdeleteConfirmButton();

    //Verify error message is displayed: Record was successfully deleted
    await t
		.wait(500)
        .expect(page.enterFundingSourcesTableFormMessages().withText("Record was successfully deleted").exists).ok();

	//Validate the count
	await t
		.expect(page.totalFunding.innerText).eql('$19,848.00', 'total ammount validation incorrect');
});

test('07. Update a funding source and validate the calculation', async t => {
    //Select corporate employer #
    await selectInDropdownList(page.corporateID, page.corporateIDOptions, '6004');

    //Select site employer #
    await selectInDropdownList(page.siteID, page.siteIDOptions, '6005');

	//Validate update proj
	//Select the target for update
    var fundingSourceSelected = page.fundingTableDataList().nth(0);
    await t
        .click(fundingSourceSelected);

	//Enter an amount
    await t
        .typeText(page.updateProjAmount, '9asdasd91999999999999999999999');

	//Validate proj ammount on the update page
	await t
		.expect(page.updateProjAmountValue.value).eql('992999199', 'proj ammount validation incorrect');

	//Close the update page
	await page.clickupdateFormUpdate();

    //Verify error message is displayed: Record was successfully updated
    await t
		.wait(500)
        .expect(page.enterFundingSourcesTableFormMessages().withText("Record was successfully updated").exists).ok();

	//Validate the count
	await t
		.expect(page.totalFunding.innerText).eql('$993,009,118.00', 'total ammount validation incorrect');
});

test('08. Update a funding source but cancel and validate the calculation', async t => {
    //Select corporate employer #
    await selectInDropdownList(page.corporateID, page.corporateIDOptions, '6004');

    //Select site employer #
    await selectInDropdownList(page.siteID, page.siteIDOptions, '6005');

	//Validate update proj
	//Select the target for update
    var fundingSourceSelected = page.fundingTableDataList().nth(0);
    await t
        .click(fundingSourceSelected);

	//Enter an amount
    await t
		.pressKey('backspace')
		.pressKey('backspace')
		.pressKey('backspace')
		.pressKey('backspace')
		.pressKey('backspace')
		.pressKey('backspace')
		.pressKey('backspace')
		.pressKey('backspace')
		.pressKey('backspace')
		.pressKey('backspace')
        .typeText(page.updateProjAmount, '9998');

	//Validate proj ammount on the update page
	await t
		.expect(page.updateProjAmountValue.value).eql('992999199', 'proj ammount validation incorrect');

	//Close the update page
	await page.clickcancelUpdateFundingSource();

	//Validate the count
	await t
		.expect(page.totalFunding.innerText).eql('$993,009,118.00', 'total ammount validation incorrect');
});

test('09. cleanup', async t => {
    //Select corporate employer #
    await selectInDropdownList(page.corporateID, page.corporateIDOptions, '6004');

    //Select site employer #
    await selectInDropdownList(page.siteID, page.siteIDOptions, '6005');

	//Select the target for update
    var fundingSourceSelected = page.fundingTableDataList().nth(0);
    await t
        .click(fundingSourceSelected);

	//delete the funding source
	await page.clickdeleteFundingSourceButton();

	//Cancel the delete of the funding source
	await page.clickdeleteConfirmButton();

    //Verify error message is displayed: Record was successfully deleted
    await t
		.wait(500)
        .expect(page.enterFundingSourcesTableFormMessages().withText("Record was successfully deleted").exists).ok();

	//Validate the count
	await t
		.expect(page.totalFunding.innerText).eql('$9,919.00', 'total ammount validation incorrect');

	//Select the target for update
    var fundingSourceSelected = page.fundingTableDataList().nth(0);
    await t
        .click(fundingSourceSelected);

	//delete the funding source
	await page.clickdeleteFundingSourceButton();

	//Cancel the delete of the funding source
	await page.clickdeleteConfirmButton();

    //Verify error message is displayed: Record was successfully deleted
    await t
		.wait(500)
        .expect(page.enterFundingSourcesTableFormMessages().withText("Record was successfully deleted").exists).ok();

    //Verify the delete has been processed
    await t
        .wait(1000)
        .expect(page.fundingTable.textContent).contains('No records found.');
});

//    //TODO Waiting for function ***********************************************************************************
//    await t
//      .expect(1).eql(0, 'Waiting on functionality to complete');
