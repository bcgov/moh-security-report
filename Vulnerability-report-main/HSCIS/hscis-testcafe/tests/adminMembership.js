import { t } from 'testcafe';
import { initTest } from '../helpers/common.helper';
import { urlFor } from '../helpers/url.helper';
import { regularAccUser } from '../helpers/user.helper';
import { selectorByDataRK } from '../helpers/selector.helper';
import { isDisabled, hasErrorState, selectInDropdownList, closeDatePicker } from '../helpers/field.helper';
import NavBar from '../page-objects/topNav';
import testcafeUtility from '../page-objects/testcafeUtility';
import adminMembership from '../page-objects/adminMembership';
import adminMembershipUpdate from '../page-objects/adminMembershipUpdate';

fixture `HSCIS - Admin Membership`
    .page(urlFor(''))
    .beforeEach( async t => {
        await initTest(regularAccUser);

    //Set navigation links
        await NavBar.clickadminTabsLink();

        await NavBar.clickmembershipLink();
    //****************
});

const page = new adminMembership();
const updatePage = new adminMembershipUpdate();

test('01. Smoke Test', async t => {
    await t
        .click(page.searchButton);

    await t
        .hover(page.inputSearchString);

    await t
        .hover(page.searchButton);
});

test('02. Search a few lines', async t => {
    //Place into view 
    await t
        .hover(page.dataTable)
        .wait(100);
    
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, 'Surrey and White');
    
    //Activate the search
    await t
        .click(page.searchButton);
        
    //Verify the search has been processed
    await t
        .wait(1000)
        .expect(page.dataTable.textContent).contains('Surrey and White');
        
});

test('03. Select a row and reach confirmation view', async t => {
    //Place into view 
    await t
        .hover(page.dataTable)
        .wait(100);
    
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, 'Surrey and White');
    
    //Activate the search
    await t
        .click(page.searchButton);

    //Select first result in the table
    var firstRow = page.getDatas().nth(0);

    //Validate the confirmation was selected    
    await t
        .wait(1000)
        .expect(firstRow.textContent).contains('Surrey and White');

    //Select the first record
    await t
        .click(firstRow);

    //Close of the view
    await page.cancelUpdateDataDialog();

    //Verify the view is closed
    await t
        .wait(100)
        .expect(page.dataDialog().visible).notOk();
    
});

test('04. Create a new membership but cancel before save', async t => {
    //Click the create button
    await page.clickCreateButton();

    //Verify the popup is open
    await t
        .wait(100)
        .expect(page.membershipCreateDialog.visible).ok();

    //Enter on Corporate Employer Number
    await t
        .selectText(page.corpEmpNum)
        .pressKey('delete')
        .typeText(page.corpEmpNum, '9999999999999');

    await t
        .expect(page.corpEmpNum.value).eql('99999', 'corpEmpNum validation incorrect');

    //Enter on siteEmpNum
    await t
        .selectText(page.siteEmpNum)
        .pressKey('delete')
        .typeText(page.siteEmpNum, '9999999999999');

    await t
        .expect(page.siteEmpNum.value).eql('99999', 'siteEmpNum validation incorrect');

    //Enter on legName
    await t
        .selectText(page.legName)
        .pressKey('delete')
        .typeText(page.legName, 'TastyMe');

    await t
        .expect(page.legName.value).eql('TastyMe', 'legName validation incorrect');

    //Enter on opName
    await t
        .selectText(page.opName)
        .pressKey('delete')
        .typeText(page.opName, 'OhSoTastyMe');

    await t
        .expect(page.opName.value).eql('OhSoTastyMe', 'opName validation incorrect');

    //Enter payroll Type
    var payrollType = 'HNFile';
    await selectInDropdownList(page.payrollType, page.payrollTypeOptions, payrollType);

    //Enters on hnftpAccount
    await t
        .selectText(page.hnftpAccount)
        .pressKey('delete')
        .typeText(page.hnftpAccount, 'tastyaccount');

    await t
        .expect(page.hnftpAccount.value).eql('tastyaccount', 'hnftpAccount validation incorrect');

    //Enters on address1
    await t
        .selectText(page.address1)
        .pressKey('delete')
        .typeText(page.address1, '123 tasty road');

    await t
        .expect(page.address1.value).eql('123 tasty road', 'address1 validation incorrect');

    //Enters on address2
    await t
        .selectText(page.address2)
        .pressKey('delete')
        .typeText(page.address2, 'app. 12');

    await t
        .expect(page.address2.value).eql('app. 12', 'address2 validation incorrect');

    //Enters on city
    await t
        .selectText(page.city)
        .pressKey('delete')
        .typeText(page.city, 'tastyland');

    await t
        .expect(page.city.value).eql('tastyland', 'city validation incorrect');

    //Enters on province
    await t
        .selectText(page.province)
        .pressKey('delete')
        .typeText(page.province, 'QC');

    await t
        .expect(page.province.value).eql('QC', 'province validation incorrect');

    //Enters on postCode
    await t
        .selectText(page.postCode)
        .pressKey('delete')
        .typeText(page.postCode, 'X0X0X0');

    await t
        .expect(page.postCode.value).eql('X0X0X0', 'postCode validation incorrect');

    //Enters on areaCode1
    await t
        .selectText(page.areaCode1)
        .pressKey('delete')
        .typeText(page.areaCode1, '123');

    await t
        .expect(page.areaCode1.value).eql('123', 'areaCode1 validation incorrect');

    //Enters on phoneNum
    await t
        .selectText(page.phoneNum)
        .pressKey('delete')
        .typeText(page.phoneNum, '1234567');

    await t
        .expect(page.phoneNum.value).eql('1234567', 'phoneNum validation incorrect');

    //Enters on contactName1
    await t
        .selectText(page.contactName1)
        .pressKey('delete')
        .typeText(page.contactName1, 'Sir Tasty');

    await t
        .expect(page.contactName1.value).eql('Sir Tasty', 'contactName1 validation incorrect');

    //Enters on contactName2
    await t
        .selectText(page.contactName2)
        .pressKey('delete')
        .typeText(page.contactName2, 'Sir Isnogood');

    await t
        .expect(page.contactName2.value).eql('Sir Isnogood', 'contactName2 validation incorrect');

    //Enters on areaCode
    await t
        .selectText(page.areaCode)
        .pressKey('delete')
        .typeText(page.areaCode, '543');

    await t
        .expect(page.areaCode.value).eql('543', 'areaCode validation incorrect');

    //Enters on contactPhone1
    await t
        .selectText(page.contactPhone1)
        .pressKey('delete')
        .typeText(page.contactPhone1, '5698745');

    await t
        .expect(page.contactPhone1.value).eql('5698745', 'contactPhone1 validation incorrect');

    //Enters on areaCode2
    await t
        .selectText(page.areaCode2)
        .pressKey('delete')
        .typeText(page.areaCode2, '345');

    await t
        .expect(page.areaCode2.value).eql('345', 'areaCode2 validation incorrect');

    //Enters on contactPhone2
    await t
        .selectText(page.contactPhone2)
        .pressKey('delete')
        .typeText(page.contactPhone2, '9876543');

    await t
        .expect(page.contactPhone2.value).eql('9876543', 'contactPhone2 validation incorrect');

    //Enters on contactEmail1
    await t
        .selectText(page.contactEmail1)
        .pressKey('delete')
        .typeText(page.contactEmail1, 'tasty@mail.com');

    await t
        .expect(page.contactEmail1.value).eql('tasty@mail.com', 'contactEmail1 validation incorrect');

    //Enters on contactEmail2
    await t
        .selectText(page.contactEmail2)
        .pressKey('delete')
        .typeText(page.contactEmail2, 'tasty2@mail.com');

    await t
        .expect(page.contactEmail2.value).eql('tasty2@mail.com', 'contactEmail2 validation incorrect');

    //Enters on contactLdap1
    await t
        .selectText(page.contactLdap1)
        .pressKey('delete')
        .typeText(page.contactLdap1, 'sirtast');

    await t
        .expect(page.contactLdap1.value).eql('sirtast', 'contactLdap1 validation incorrect');

    //Enters on contactLdap2
    await t
        .selectText(page.contactLdap2)
        .pressKey('delete')
        .typeText(page.contactLdap2, 'sirtast2');

    await t
        .expect(page.contactLdap2.value).eql('sirtast2', 'contactLdap2 validation incorrect');

    //Enters on commentsNotes
    await t
        .selectText(page.commentsNotes)
        .pressKey('delete')
        .typeText(page.commentsNotes, 'Im writing a comment on Sir Tasty');

    await t
        .expect(page.commentsNotes.value).eql('Im writing a comment on Sir Tasty', 'commentsNotes validation incorrect');

    //Enter health Authority Number
    var healthAuthorityNumber = '';
    await selectInDropdownList(page.healthAuthorityNumber, page.healthAuthorityNumberOptions, healthAuthorityNumber);

    //Enter reported Within
    var reportedWithin = '';
    await selectInDropdownList(page.reportedWithin, page.reportedWithinOptions, reportedWithin);

    //Enter member Type
    var memberType = '';
    await selectInDropdownList(page.memberType, page.memberTypeOptions, memberType);

    //Enter service Type Cd
    var serviceTypeCd = '';
    await selectInDropdownList(page.serviceTypeCd, page.serviceTypeCdOptions, serviceTypeCd);

    //Enter active Flag
    var activeFlag = '';
    await selectInDropdownList(page.activeFlag, page.activeFlagOptions, activeFlag);

    //Enter organization Status
    var organizationStatus = '';
    await selectInDropdownList(page.organizationStatus, page.organizationStatusOptions, organizationStatus);

    //Enter summary Flag
    var summaryFlag = '';
    await selectInDropdownList(page.summaryFlag, page.summaryFlagOptions, summaryFlag);

    //Enter memb Date Test
    await t
        .selectText(page.membDateTest)
        .typeText(page.membDateTest, '2020 01 01');
    await closeDatePicker(page.membDateTest);   

    await t
        .expect(page.membDateTest.value).eql('2020 01 01', 'membDateTest filter incorrect');

    //Click cancel button
    await page.cancelCreateMembershipClick();
    
    //Verify popup is closed
    await t
        .expect(page.membershipCreateDialog.filterVisible().exists).notOk();
        
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, 'OhSoTastyMe');
    
    //Activate the search
    await t
        .click(page.searchButton);
        
    //Verify the search has been processed
    await t
        .wait(1000)
        .expect(page.dataTable.textContent).contains('No records found');
});

test('05. Create a new membership', async t => {
    //Click the create button
    await page.clickCreateButton();

    //Verify the popup is open
    await t
        .wait(100)
        .expect(page.membershipCreateDialog.visible).ok();

    //Enter on Corporate Employer Number
    await t
        .selectText(page.corpEmpNum)
        .pressKey('delete')
        .typeText(page.corpEmpNum, '9999999999999');

    await t
        .expect(page.corpEmpNum.value).eql('99999', 'corpEmpNum validation incorrect');

    //Enter on siteEmpNum
    await t
        .selectText(page.siteEmpNum)
        .pressKey('delete')
        .typeText(page.siteEmpNum, '9999999999999');

    await t
        .expect(page.siteEmpNum.value).eql('99999', 'siteEmpNum validation incorrect');

    //Enter on legName
    await t
        .selectText(page.legName)
        .pressKey('delete')
        .typeText(page.legName, 'TastyMe');

    await t
        .expect(page.legName.value).eql('TastyMe', 'legName validation incorrect');

    //Enter on opName
    await t
        .selectText(page.opName)
        .pressKey('delete')
        .typeText(page.opName, 'OhSoTastyMe');

    await t
        .expect(page.opName.value).eql('OhSoTastyMe', 'opName validation incorrect');

    //Enter payroll Type
    var payrollType = 'HNFile';
    await selectInDropdownList(page.payrollType, page.payrollTypeOptions, payrollType);

    //Enters on hnftpAccount
    await t
        .selectText(page.hnftpAccount)
        .pressKey('delete')
        .typeText(page.hnftpAccount, 'tastyaccount');

    await t
        .expect(page.hnftpAccount.value).eql('tastyaccount', 'hnftpAccount validation incorrect');

    //Enters on address1
    await t
        .selectText(page.address1)
        .pressKey('delete')
        .typeText(page.address1, '123 tasty road');

    await t
        .expect(page.address1.value).eql('123 tasty road', 'address1 validation incorrect');

    //Enters on address2
    await t
        .selectText(page.address2)
        .pressKey('delete')
        .typeText(page.address2, 'app. 12');

    await t
        .expect(page.address2.value).eql('app. 12', 'address2 validation incorrect');

    //Enters on city
    await t
        .selectText(page.city)
        .pressKey('delete')
        .typeText(page.city, 'tastyland');

    await t
        .expect(page.city.value).eql('tastyland', 'city validation incorrect');

    //Enters on province
    await t
        .selectText(page.province)
        .pressKey('delete')
        .typeText(page.province, 'QC');

    await t
        .expect(page.province.value).eql('QC', 'province validation incorrect');

    //Enters on postCode
    await t
        .selectText(page.postCode)
        .pressKey('delete')
        .typeText(page.postCode, 'X0X0X0');

    await t
        .expect(page.postCode.value).eql('X0X0X0', 'postCode validation incorrect');

    //Enters on areaCode1
    await t
        .selectText(page.areaCode1)
        .pressKey('delete')
        .typeText(page.areaCode1, '123');

    await t
        .expect(page.areaCode1.value).eql('123', 'areaCode1 validation incorrect');

    //Enters on phoneNum
    await t
        .selectText(page.phoneNum)
        .pressKey('delete')
        .typeText(page.phoneNum, '1234567');

    await t
        .expect(page.phoneNum.value).eql('1234567', 'phoneNum validation incorrect');

    //Enters on contactName1
    await t
        .selectText(page.contactName1)
        .pressKey('delete')
        .typeText(page.contactName1, 'Sir Tasty');

    await t
        .expect(page.contactName1.value).eql('Sir Tasty', 'contactName1 validation incorrect');

    //Enters on contactName2
    await t
        .selectText(page.contactName2)
        .pressKey('delete')
        .typeText(page.contactName2, 'Sir Isnogood');

    await t
        .expect(page.contactName2.value).eql('Sir Isnogood', 'contactName2 validation incorrect');

    //Enters on areaCode
    await t
        .selectText(page.areaCode)
        .pressKey('delete')
        .typeText(page.areaCode, '543');

    await t
        .expect(page.areaCode.value).eql('543', 'areaCode validation incorrect');

    //Enters on contactPhone1
    await t
        .selectText(page.contactPhone1)
        .pressKey('delete')
        .typeText(page.contactPhone1, '5698745');

    await t
        .expect(page.contactPhone1.value).eql('5698745', 'contactPhone1 validation incorrect');

    //Enters on areaCode2
    await t
        .selectText(page.areaCode2)
        .pressKey('delete')
        .typeText(page.areaCode2, '345');

    await t
        .expect(page.areaCode2.value).eql('345', 'areaCode2 validation incorrect');

    //Enters on contactPhone2
    await t
        .selectText(page.contactPhone2)
        .pressKey('delete')
        .typeText(page.contactPhone2, '9876543');

    await t
        .expect(page.contactPhone2.value).eql('9876543', 'contactPhone2 validation incorrect');

    //Enters on contactEmail1
    await t
        .selectText(page.contactEmail1)
        .pressKey('delete')
        .typeText(page.contactEmail1, 'tasty@mail.com');

    await t
        .expect(page.contactEmail1.value).eql('tasty@mail.com', 'contactEmail1 validation incorrect');

    //Enters on contactEmail2
    await t
        .selectText(page.contactEmail2)
        .pressKey('delete')
        .typeText(page.contactEmail2, 'tasty2@mail.com');

    await t
        .expect(page.contactEmail2.value).eql('tasty2@mail.com', 'contactEmail2 validation incorrect');

    //Enters on contactLdap1
    await t
        .selectText(page.contactLdap1)
        .pressKey('delete')
        .typeText(page.contactLdap1, 'sirtast');

    await t
        .expect(page.contactLdap1.value).eql('sirtast', 'contactLdap1 validation incorrect');

    //Enters on contactLdap2
    await t
        .selectText(page.contactLdap2)
        .pressKey('delete')
        .typeText(page.contactLdap2, 'sirtast2');

    await t
        .expect(page.contactLdap2.value).eql('sirtast2', 'contactLdap2 validation incorrect');

    //Enters on commentsNotes
    await t
        .selectText(page.commentsNotes)
        .pressKey('delete')
        .typeText(page.commentsNotes, 'Im writing a comment on Sir Tasty');

    await t
        .expect(page.commentsNotes.value).eql('Im writing a comment on Sir Tasty', 'commentsNotes validation incorrect');

    //Enter health Authority Number     1 - Interior Health Authority
    var healthAuthorityNumber = '1';
    await selectInDropdownList(page.healthAuthorityNumber, page.healthAuthorityNumberOptions, healthAuthorityNumber);

    await t
        .expect(page.healthAuthorityNumber.textContent).contains('Interior Health Authority');

    //Enter member Type     1 - Corporate Member
    var memberType = '1';
    await selectInDropdownList(page.memberType, page.memberTypeOptions, memberType);

    await t
        .expect(page.memberType.textContent).contains('Corporate Member');

    //Enter service Type Cd     AC - Acute Care
    var serviceTypeCd = '';
    await selectInDropdownList(page.serviceTypeCd, page.serviceTypeCdOptions, serviceTypeCd);

    await t
        .expect(page.serviceTypeCd.textContent).contains('Acute Care');

    //Enter active Flag     Yes
    var activeFlag = 'Y';
    await selectInDropdownList(page.activeFlag, page.activeFlagOptions, activeFlag);

    await t
        .expect(page.activeFlag.textContent).contains('Yes');

    //Enter organization Status     H - Health Authority
    var organizationStatus = 'H';
    await selectInDropdownList(page.organizationStatus, page.organizationStatusOptions, organizationStatus);

    await t
        .expect(page.organizationStatus.textContent).contains('Health Authority');

    //Enter summary Flag
    var summaryFlag = 'Y';
    await selectInDropdownList(page.summaryFlag, page.summaryFlagOptions, summaryFlag);

    await t
        .expect(page.summaryFlag.textContent).contains('Yes');

//    //Enter reported Within *************************
//    var reportedWithin = '';
//    await selectInDropdownList(page.reportedWithin, page.reportedWithinOptions, reportedWithin);

    //Enter memb Date Test
    await t
        .selectText(page.membDateTest)
        .typeText(page.membDateTest, '2020 01 01');
    await closeDatePicker(page.membDateTest);   

    await t
        .expect(page.membDateTest.value).eql('2020 01 01', 'membDateTest filter incorrect');

    //Click create button
    await page.confirmCreateMembershipClick();
    
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, 'OhSoTastyMe');
    
    //Activate the search
    await t
        .click(page.searchButton);
        
    //Verify the search has been processed
    await t
        .wait(1000)
        .expect(page.dataTable.textContent).contains('OhSoTastyMe');
});

test('06. Re-Create a membership', async t => {
    //Click the create button
    await page.clickCreateButton();

    //Verify the popup is open
    await t
        .wait(100)
        .expect(page.membershipCreateDialog.visible).ok();

    //Enter on Corporate Employer Number
    await t
        .selectText(page.corpEmpNum)
        .pressKey('delete')
        .typeText(page.corpEmpNum, '9999999999999');

    await t
        .expect(page.corpEmpNum.value).eql('99999', 'corpEmpNum validation incorrect');

    //Enter on siteEmpNum
    await t
        .selectText(page.siteEmpNum)
        .pressKey('delete')
        .typeText(page.siteEmpNum, '9999999999999');

    await t
        .expect(page.siteEmpNum.value).eql('99999', 'siteEmpNum validation incorrect');

    //Enter on legName
    await t
        .selectText(page.legName)
        .pressKey('delete')
        .typeText(page.legName, 'TastyMe');

    await t
        .expect(page.legName.value).eql('TastyMe', 'legName validation incorrect');

    //Enter on opName
    await t
        .selectText(page.opName)
        .pressKey('delete')
        .typeText(page.opName, 'OhSoTastyMe');

    await t
        .expect(page.opName.value).eql('OhSoTastyMe', 'opName validation incorrect');

    //Enter payroll Type
    var payrollType = 'HNFile';
    await selectInDropdownList(page.payrollType, page.payrollTypeOptions, payrollType);

    await t
        .expect(page.payrollType.textContent).contains('HNFile');

    //Enters on hnftpAccount
    await t
        .selectText(page.hnftpAccount)
        .pressKey('delete')
        .typeText(page.hnftpAccount, 'tastyaccount');

    await t
        .expect(page.hnftpAccount.value).eql('tastyaccount', 'hnftpAccount validation incorrect');

    //Enters on address1
    await t
        .selectText(page.address1)
        .pressKey('delete')
        .typeText(page.address1, '123 tasty road');

    await t
        .expect(page.address1.value).eql('123 tasty road', 'address1 validation incorrect');

    //Enters on address2
    await t
        .selectText(page.address2)
        .pressKey('delete')
        .typeText(page.address2, 'app. 12');

    await t
        .expect(page.address2.value).eql('app. 12', 'address2 validation incorrect');

    //Enters on city
    await t
        .selectText(page.city)
        .pressKey('delete')
        .typeText(page.city, 'tastyland');

    await t
        .expect(page.city.value).eql('tastyland', 'city validation incorrect');

    //Enters on province
    await t
        .selectText(page.province)
        .pressKey('delete')
        .typeText(page.province, 'QC');

    await t
        .expect(page.province.value).eql('QC', 'province validation incorrect');

    //Enters on postCode
    await t
        .selectText(page.postCode)
        .pressKey('delete')
        .typeText(page.postCode, 'X0X0X0');

    await t
        .expect(page.postCode.value).eql('X0X0X0', 'postCode validation incorrect');

    //Enters on areaCode1
    await t
        .selectText(page.areaCode1)
        .pressKey('delete')
        .typeText(page.areaCode1, '123');

    await t
        .expect(page.areaCode1.value).eql('123', 'areaCode1 validation incorrect');

    //Enters on phoneNum
    await t
        .selectText(page.phoneNum)
        .pressKey('delete')
        .typeText(page.phoneNum, '1234567');

    await t
        .expect(page.phoneNum.value).eql('1234567', 'phoneNum validation incorrect');

    //Enters on contactName1
    await t
        .selectText(page.contactName1)
        .pressKey('delete')
        .typeText(page.contactName1, 'Sir Tasty');

    await t
        .expect(page.contactName1.value).eql('Sir Tasty', 'contactName1 validation incorrect');

    //Enters on contactName2
    await t
        .selectText(page.contactName2)
        .pressKey('delete')
        .typeText(page.contactName2, 'Sir Isnogood');

    await t
        .expect(page.contactName2.value).eql('Sir Isnogood', 'contactName2 validation incorrect');

    //Enters on areaCode
    await t
        .selectText(page.areaCode)
        .pressKey('delete')
        .typeText(page.areaCode, '543');

    await t
        .expect(page.areaCode.value).eql('543', 'areaCode validation incorrect');

    //Enters on contactPhone1
    await t
        .selectText(page.contactPhone1)
        .pressKey('delete')
        .typeText(page.contactPhone1, '5698745');

    await t
        .expect(page.contactPhone1.value).eql('5698745', 'contactPhone1 validation incorrect');

    //Enters on areaCode2
    await t
        .selectText(page.areaCode2)
        .pressKey('delete')
        .typeText(page.areaCode2, '345');

    await t
        .expect(page.areaCode2.value).eql('345', 'areaCode2 validation incorrect');

    //Enters on contactPhone2
    await t
        .selectText(page.contactPhone2)
        .pressKey('delete')
        .typeText(page.contactPhone2, '9876543');

    await t
        .expect(page.contactPhone2.value).eql('9876543', 'contactPhone2 validation incorrect');

    //Enters on contactEmail1
    await t
        .selectText(page.contactEmail1)
        .pressKey('delete')
        .typeText(page.contactEmail1, 'tasty@mail.com');

    await t
        .expect(page.contactEmail1.value).eql('tasty@mail.com', 'contactEmail1 validation incorrect');

    //Enters on contactEmail2
    await t
        .selectText(page.contactEmail2)
        .pressKey('delete')
        .typeText(page.contactEmail2, 'tasty2@mail.com');

    await t
        .expect(page.contactEmail2.value).eql('tasty2@mail.com', 'contactEmail2 validation incorrect');

    //Enters on contactLdap1
    await t
        .selectText(page.contactLdap1)
        .pressKey('delete')
        .typeText(page.contactLdap1, 'sirtast');

    await t
        .expect(page.contactLdap1.value).eql('sirtast', 'contactLdap1 validation incorrect');

    //Enters on contactLdap2
    await t
        .selectText(page.contactLdap2)
        .pressKey('delete')
        .typeText(page.contactLdap2, 'sirtast2');

    await t
        .expect(page.contactLdap2.value).eql('sirtast2', 'contactLdap2 validation incorrect');

    //Enters on commentsNotes
    await t
        .selectText(page.commentsNotes)
        .pressKey('delete')
        .typeText(page.commentsNotes, 'Im writing a comment on Sir Tasty');

    await t
        .expect(page.commentsNotes.value).eql('Im writing a comment on Sir Tasty', 'commentsNotes validation incorrect');

    //Enter health Authority Number     1 - Interior Health Authority
    var healthAuthorityNumber = '1';
    await selectInDropdownList(page.healthAuthorityNumber, page.healthAuthorityNumberOptions, healthAuthorityNumber);

    await t
        .expect(page.healthAuthorityNumber.textContent).contains('Interior Health Authority');

    //Enter member Type     1 - Corporate Member
    var memberType = '1';
    await selectInDropdownList(page.memberType, page.memberTypeOptions, memberType);

    await t
        .expect(page.memberType.textContent).contains('Corporate Member');

    //Enter service Type Cd     AC - Acute Care
    var serviceTypeCd = '';
    await selectInDropdownList(page.serviceTypeCd, page.serviceTypeCdOptions, serviceTypeCd);

    await t
        .expect(page.serviceTypeCd.textContent).contains('Acute Care');

    //Enter active Flag     Yes
    var activeFlag = 'Y';
    await selectInDropdownList(page.activeFlag, page.activeFlagOptions, activeFlag);

    await t
        .expect(page.activeFlag.textContent).contains('Yes');

    //Enter organization Status     H - Health Authority
    var organizationStatus = 'H';
    await selectInDropdownList(page.organizationStatus, page.organizationStatusOptions, organizationStatus);

    await t
        .expect(page.organizationStatus.textContent).contains('Health Authority');

    //Enter summary Flag
    var summaryFlag = 'Y';
    await selectInDropdownList(page.summaryFlag, page.summaryFlagOptions, summaryFlag);

    await t
        .expect(page.summaryFlag.textContent).contains('Yes');

//    //Enter reported Within *************************
//    var reportedWithin = '';
//    await selectInDropdownList(page.reportedWithin, page.reportedWithinOptions, reportedWithin);

    //Enter memb Date Test
    await t
        .selectText(page.membDateTest)
        .typeText(page.membDateTest, '2020 01 01');
    await closeDatePicker(page.membDateTest);   

    await t
        .expect(page.membDateTest.value).eql('2020 01 01', 'membDateTest filter incorrect');

    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed: Site Employer # already exists
    await t
        .expect(page.errorMessages().withText("Site Employer # already exists").exists).ok();

    //Click cancel button
    await page.cancelCreateMembershipClick();
    
    //Verify popup is closed
    await t
        .expect(page.membershipCreateDialog.filterVisible().exists).notOk();
});

test('07. delete a membership', async t => {
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, 'OhSoTastyMe');
    
    //Activate the search
    await t
        .click(page.searchButton);

    //Select first result in the table
    var firstRow = page.getDatas().nth(0);

    //Validate the confirmation was selected    
    await t
        .wait(1000)
        .expect(firstRow.textContent).contains('OhSoTastyMe');

    //Select the first record
    await t
        .click(firstRow);

    //Verify popup is Open
    await t
        .expect(updatePage.updateMembershipDialog.filterVisible().exists).ok();

    //Click delete button
    await updatePage.deleteMembershipClick();

    //Click cancel delete button
    await updatePage.cancelDeleteMembershipClick();

    //Verify popup is Open
    await t
        .expect(updatePage.updateMembershipDialog.filterVisible().exists).ok();

    //Click delete button
    await page.deleteMembershipClick();

    //Click confirm delete button
    await updatePage.confirmDeleteMembershipClick();

    //Verify popup is closed
    await t
        .expect(page.membershipCreateDialog.filterVisible().exists).notOk();

    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, 'OhSoTastyMe');
    
    //Activate the search
    await t
        .click(page.searchButton);
        
    //Verify the search has been processed
    await t
        .wait(1000)
        .expect(page.dataTable.textContent).contains('No records found');
});

test('08. Validate fields for new membership', async t => {
    //prepare the fields *****
    //Click the create button
    await page.clickCreateButton();

    //Verify the popup is open
    await t
        .wait(100)
        .expect(page.membershipCreateDialog.visible).ok();

    //optional field
    //Enters on address2
    await t
        .selectText(page.address2)
        .pressKey('delete')
        .typeText(page.address2, 'app. 1299999999999999999999999999999999999999');

    await t
        .expect(page.address2.value).eql('app. 12999999999999999999999999999999999', 'address2 validation incorrect');

    //optional field
    //Enters on contactName2
    await t
        .selectText(page.contactName2)
        .pressKey('delete')
        .typeText(page.contactName2, 'Sir Isnogood9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');

    await t
        .expect(page.contactName2.value).eql('Sir Isnogood999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'contactName2 validation incorrect');

    //optional field
    //Enters on areaCode2
    await t
        .selectText(page.areaCode2)
        .pressKey('delete')
        .typeText(page.areaCode2, 'a34599999');

    await t
        .expect(page.areaCode2.value).eql('345', 'areaCode2 validation incorrect');

    //optional field
    //Enters on contactPhone2
    await t
        .selectText(page.contactPhone2)
        .pressKey('delete')
        .typeText(page.contactPhone2, 'as9876543999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');

    await t
        .expect(page.contactPhone2.value).eql('as9876543999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'contactPhone2 validation incorrect');

    //optional field
    //Enters on contactEmail2
    await t
        .selectText(page.contactEmail2)
        .pressKey('delete')
        .typeText(page.contactEmail2, 'tasty2@mail.com99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');

    await t
        .expect(page.contactEmail2.value).eql('tasty2@mail.com999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'contactEmail2 validation incorrect');

    //optional field
    //Enters on contactLdap2
    await t
        .selectText(page.contactLdap2)
        .pressKey('delete')
        .typeText(page.contactLdap2, 'sirtast29999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');

    await t
        .expect(page.contactLdap2.value).eql('sirtast29999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'contactLdap2 validation incorrect');

    //optional field
    //Enters on commentsNotes
    await t
        .selectText(page.commentsNotes)
        .pressKey('delete')
        .typeText(page.commentsNotes, 'Im writing a comment on Sir Tasty

    await t
        .expect(page.commentsNotes.value).eql('Im writing a comment on Sir TastycommentsNotes validation incorrect');

    //optional field
    //Enter service Type Cd     AC - Acute Care
    var serviceTypeCd = '';
    await selectInDropdownList(page.serviceTypeCd, page.serviceTypeCdOptions, serviceTypeCd);

    //Validation required ***********
    //Corporate Employer #: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Corp Employer #: Value is required.").exists).ok();

    //Enter on Corporate Employer #
    await t
        .selectText(page.corpEmpNum)
        .pressKey('delete')
        .typeText(page.corpEmpNum, '9999999999999');

    await t
        .expect(page.corpEmpNum.value).eql('99999', 'corpEmpNum validation incorrect');

    //Site Employer #: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Site Employer #: Value is required.").exists).ok();

    //Enter on Site #
    await t
        .selectText(page.siteEmpNum)
        .pressKey('delete')
        .typeText(page.siteEmpNum, '9999999999999');

    await t
        .expect(page.siteEmpNum.value).eql('99999', 'siteEmpNum validation incorrect');

    //Legal Name: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Legal Name: Value is required.").exists).ok();

    //Enter on legName
    await t
        .selectText(page.legName)
        .pressKey('delete')
        .typeText(page.legName, 'TastyMe9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');

    await t
        .expect(page.legName.value).eql('TastyMe999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'legName validation incorrect');

    //Operating Name: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Operating Name: Value is required.").exists).ok();

    //Enter on opName
    await t
        .selectText(page.opName)
        .pressKey('delete')
        .typeText(page.opName, 'OhSoTastyMe999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');

    await t
        .expect(page.opName.value).eql('OhSoTastyMe9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'opName validation incorrect');

    //Health Authority Number: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Health Authority Number: Value is required.").exists).ok();

    //Enter health Authority Number     1 - Interior Health Authority
    var healthAuthorityNumber = '1';
    await selectInDropdownList(page.healthAuthorityNumber, page.healthAuthorityNumberOptions, healthAuthorityNumber);
    
    //Member Type: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Member Type: Value is required.").exists).ok();

    //Enter member Type     1 - Corporate Member
    var memberType = '1';
    await selectInDropdownList(page.memberType, page.memberTypeOptions, memberType);

    //Payroll Type: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Payroll Type: Value is required.").exists).ok();

    //Enter payroll Type
    var payrollType = 'HNFile';
    await selectInDropdownList(page.payrollType, page.payrollTypeOptions, payrollType);

    //HNFTP Account: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("HNFTP Account: Value is required.").exists).ok();
    //Enters on hnftpAccount
    await t
        .selectText(page.hnftpAccount)
        .pressKey('delete')
        .typeText(page.hnftpAccount, 'tastyaccount99999999999');

    await t
        .expect(page.hnftpAccount.value).eql('tastyaccount999', 'hnftpAccount validation incorrect');

    //Organizational Status Code: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Organizational Status Code: Value is required.").exists).ok();

    //Enter organization Status     H - Health Authority
    var organizationStatus = 'H';
    await selectInDropdownList(page.organizationStatus, page.organizationStatusOptions, organizationStatus);

    //Address 1: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Address 1: Value is required.").exists).ok();

    //Enters on address1
    await t
        .selectText(page.address1)
        .pressKey('delete')
        .typeText(page.address1, '123 tasty road999999999999999999999999999999999');

    await t
        .expect(page.address1.value).eql('123 tasty road99999999999999999999999999', 'address1 validation incorrect');

    //City: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("City: Value is required.").exists).ok();

    //Enters on city
    await t
        .selectText(page.city)
        .pressKey('delete')
        .typeText(page.city, 'tastyland99999999999999999999');

    await t
        .expect(page.city.value).eql('tastyland99999999999', 'city validation incorrect');

    //Postal Code: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Postal Code: Value is required.").exists).ok();

    //Enters on postCode
    await t
        .selectText(page.postCode)
        .pressKey('delete')
        .typeText(page.postCode, 'X0X0X09999999999');

    await t
        .expect(page.postCode.value).eql('X0X0X09', 'postCode validation incorrect');

    //Membership Date: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Membership Date: Value is required.").exists).ok();
    
    //Enter memb Date Test
    await t
        .selectText(page.membDateTest)
        .typeText(page.membDateTest, '2aa020 01 019999999');
    await closeDatePicker(page.membDateTest);   

    await t
        .expect(page.membDateTest.value).eql('2020 01 01', 'membDateTest filter incorrect');

    //Active Flag: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Active Flag: Value is required.").exists).ok();
    
    //Enter active Flag     Yes
    var activeFlag = 'Y';
    await selectInDropdownList(page.activeFlag, page.activeFlagOptions, activeFlag);
    
    //Summary Flag: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Summary Flag: Value is required.").exists).ok();

    //Enter summary Flag
    var summaryFlag = 'Y';
    await selectInDropdownList(page.summaryFlag, page.summaryFlagOptions, summaryFlag);
    
    //Province: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Province: Value is required.").exists).ok();
    
    //Enters on province
    await t
        .selectText(page.province)
        .pressKey('delete')
        .typeText(page.province, 'QC999999999');

    await t
        .expect(page.province.value).eql('QC99', 'province validation incorrect');
    
    //Area Code: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Area Code: Value is required.").exists).ok();

    //Enters on areaCode
    await t
        .selectText(page.areaCode)
        .pressKey('delete')
        .typeText(page.areaCode, 'aa543999999');

    await t
        .expect(page.areaCode.value).eql('543', 'areaCode validation incorrect');

    //Phone Number: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Phone Number: Value is required.").exists).ok();
    
    //Enters on phoneNum
    await t
        .selectText(page.phoneNum)
        .pressKey('delete')
        .typeText(page.phoneNum, '1aa23456799999999999999999999999999999999');

    await t
        .expect(page.phoneNum.value).eql('1aa234567999999999999999999999', 'phoneNum validation incorrect');
    
    //Primary Contact Name: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Primary Contact Name: Value is required.").exists).ok();
    
    //Enters on contactName1
    await t
        .selectText(page.contactName1)
        .pressKey('delete')
        .typeText(page.contactName1, 'Sir Tasty999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');

    await t
        .expect(page.contactName1.value).eql('Sir Tasty999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'contactName1 validation incorrect');

    //Primary Contact Area Code: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Primary Contact Area Code: Value is required.").exists).ok();

    //Enters on areaCode1
    await t
        .selectText(page.areaCode1)
        .pressKey('delete')
        .typeText(page.areaCode1, '1aa2399999');

    await t
        .expect(page.areaCode1.value).eql('123', 'areaCode1 validation incorrect');

    //Primary Contact Phone #: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Primary Contact Phone #: Value is required.").exists).ok();

    //Enters on contactPhone1
    await t
        .selectText(page.contactPhone1)
        .pressKey('delete')
        .typeText(page.contactPhone1, '56aa9874599999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');

    await t
        .expect(page.contactPhone1.value).eql('56aa98745999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'contactPhone1 validation incorrect');

    //Primary Contact Email: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Primary Contact Email: Value is required.").exists).ok();

    //Enters on contactEmail1
    await t
        .selectText(page.contactEmail1)
        .pressKey('delete')
        .typeText(page.contactEmail1, 'tasty@mail.com999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');

    await t
        .expect(page.contactEmail1.value).eql('tasty@mail.com9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'contactEmail1 validation incorrect');

    //Primary Contact Keycloak ID: Value is required.
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify error message is displayed
    await t
        .expect(page.errorMessages().withText("Primary Contact Keycloak ID: Value is required.").exists).ok();
    
    //Enters on contactLdap1
    await t
        .selectText(page.contactLdap1)
        .pressKey('delete')
        .typeText(page.contactLdap1, 'sirtast99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999');

    await t
        .expect(page.contactLdap1.value).eql('sirtast99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'contactLdap1 validation incorrect');
    
    //Click confirm button
    await page.confirmCreateMembershipClick();

    //Verify popup is closed
    await t
        .wait(1000)
        .expect(page.membershipCreateDialog.filterVisible().exists).notOk();

    //Verify error message is displayed
    await t
        .expect(page.infoMessages().withText("Record was successfully created").exists).ok();
});

async function editMembership(corpEmpNum, siteEmpNum) {
    var data = await page.membershipData(),
        index = page.dataIndexOfMembership(data, corpEmpNum, siteEmpNum);
    
    //Verify test record exists
    await t
        .expect(index).gt(-1, 'Test record not found in the membership list');
        
    var membership = page.membershipDataList().nth(index);
    
    await t
        .click(membership);
}

test('09. Update a membership but cancel', async t => {
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, '99999');
    
    //Activate the search
    await t
        .click(page.searchButton);

    //Edit Membership Entry
    await editMembership('99999', '99999');

    //Verify the popup is open
    await t
        .wait(100)
        .expect(updatePage.updateMembershipDialog.filterVisible().exists).ok();

    //optional field
    //Enters on address2
    await t
        .selectText(updatePage.address2)
        .pressKey('delete')
        .typeText(updatePage.address2, 'app. 12');

    await t
        .expect(updatePage.address2.value).eql('app. 12', 'address2 validation incorrect');

    //optional field
    //Enters on contactName2
    await t
        .selectText(updatePage.contactName2)
        .pressKey('delete')
        .typeText(updatePage.contactName2, 'Sir Isnogood');

    await t
        .expect(updatePage.contactName2.value).eql('Sir Isnogood', 'contactName2 validation incorrect');

    //optional field
    //Enters on areaCode2
    await t
        .selectText(updatePage.areaCode2)
        .pressKey('delete')
        .typeText(updatePage.areaCode2, '345');

    await t
        .expect(updatePage.areaCode2.value).eql('345', 'areaCode2 validation incorrect');

    //optional field
    //Enters on contactPhone2
    await t
        .selectText(updatePage.contactPhone2)
        .pressKey('delete')
        .typeText(updatePage.contactPhone2, '9876543');

    await t
        .expect(updatePage.contactPhone2.value).eql('9876543', 'contactPhone2 validation incorrect');

    //optional field
    //Enters on contactEmail2
    await t
        .selectText(updatePage.contactEmail2)
        .pressKey('delete')
        .typeText(updatePage.contactEmail2, 'tasty2@mail.com');

    await t
        .expect(updatePage.contactEmail2.value).eql('tasty2@mail.com', 'contactEmail2 validation incorrect');

    //optional field
    //Enters on contactLdap2
    await t
        .selectText(updatePage.contactLdap2)
        .pressKey('delete')
        .typeText(updatePage.contactLdap2, 'sirtast2');

    await t
        .expect(updatePage.contactLdap2.value).eql('sirtast2', 'contactLdap2 validation incorrect');

    //optional field
    //Enters on commentsNotes
    await t
        .selectText(updatePage.commentsNotes)
        .pressKey('delete')
        .typeText(updatePage.commentsNotes, 'Im writing a comment on Sir Tasty');

    await t
        .expect(updatePage.commentsNotes.value).eql('Im writing a comment on Sir Tasty', 'commentsNotes validation incorrect');

    //optional field
    //Enter service Type Cd     AC - Acute Care
    var serviceTypeCd = '';
    await selectInDropdownList(updatePage.serviceTypeCd, updatePage.serviceTypeCdOptions, serviceTypeCd);

    await t
        .expect(updatePage.serviceTypeCd.textContent).contains('Acute Care');

    //Enter on Corporate Employer Number
    await t
        .selectText(updatePage.corpEmpNum)
        .pressKey('delete')
        .typeText(updatePage.corpEmpNum, '99998');

    await t
        .expect(updatePage.corpEmpNum.value).eql('99998', 'corpEmpNum validation incorrect');

    //Disabled on siteEmpNum
    await t
        .expect(isDisabled(updatePage.siteEmpNum)).ok();

    //Enter on legName
    await t
        .selectText(updatePage.legName)
        .pressKey('delete')
        .typeText(updatePage.legName, 'TastyMe');

    await t
        .expect(updatePage.legName.value).eql('TastyMe', 'legName validation incorrect');

    //Enter on opName
    await t
        .selectText(updatePage.opName)
        .pressKey('delete')
        .typeText(updatePage.opName, 'OhSoTastyMe');

    await t
        .expect(updatePage.opName.value).eql('OhSoTastyMe', 'opName validation incorrect');

    //Enter health Authority Number     2 - Fraser Health Authority
    var healthAuthorityNumber = '2';
    await selectInDropdownList(updatePage.healthAuthorityNumber, updatePage.healthAuthorityNumberOptions, healthAuthorityNumber);
    
    await t
        .expect(updatePage.healthAuthorityNumber.textContent).contains('Fraser Health Authority');

    //Enter member Type     2 - HEABC Member
    var memberType = '2';
    await selectInDropdownList(updatePage.memberType, updatePage.memberTypeOptions, memberType);

    await t
        .expect(updatePage.memberType.textContent).contains('HEABC Member');

    //Enter payroll Type
    var payrollType = 'HNFile';
    await selectInDropdownList(updatePage.payrollType, updatePage.payrollTypeOptions, payrollType);

    await t
        .expect(updatePage.payrollType.textContent).contains('HNFile');

    //Enters on hnftpAccount
    await t
        .selectText(updatePage.hnftpAccount)
        .pressKey('delete')
        .typeText(updatePage.hnftpAccount, 'tastyaccount');

    await t
        .expect(updatePage.hnftpAccount.value).eql('tastyaccount', 'hnftpAccount validation incorrect');

    //Enter organization Status     M - MIS Reporter
    var organizationStatus = 'M';
    await selectInDropdownList(updatePage.organizationStatus, updatePage.organizationStatusOptions, organizationStatus);

    await t
        .expect(updatePage.organizationStatus.textContent).contains('MIS Reporter');

    //Enters on address1
    await t
        .selectText(updatePage.address1)
        .pressKey('delete')
        .typeText(updatePage.address1, '123 tasty road');

    await t
        .expect(updatePage.address1.value).eql('123 tasty road', 'address1 validation incorrect');

    //Enters on city
    await t
        .selectText(updatePage.city)
        .pressKey('delete')
        .typeText(updatePage.city, 'tastyland');

    await t
        .expect(updatePage.city.value).eql('tastyland', 'city validation incorrect');

    //Enters on postCode
    await t
        .selectText(updatePage.postCode)
        .pressKey('delete')
        .typeText(updatePage.postCode, 'X0X0X0');

    await t
        .expect(updatePage.postCode.value).eql('X0X0X0', 'postCode validation incorrect');

    //Enter memb Date Test
    await t
        .selectText(updatePage.membDateTest)
        .typeText(updatePage.membDateTest, '2020 02 02');
    await closeDatePicker(updatePage.membDateTest); 

    await t
        .expect(updatePage.membDateTest.value).eql('2020 02 02', 'membDateTest filter incorrect');

    //Enter active Flag     No
    var activeFlag = 'N';
    await selectInDropdownList(updatePage.activeFlag, updatePage.activeFlagOptions, activeFlag);

    await t
        .expect(updatePage.activeFlag.textContent).contains('No');

    //Enter summary Flag    No
    var summaryFlag = 'N';
    await selectInDropdownList(updatePage.summaryFlag, updatePage.summaryFlagOptions, summaryFlag);
    
    await t
        .expect(updatePage.summaryFlag.textContent).contains('No');

    //Enters on province
    await t
        .selectText(updatePage.province)
        .pressKey('delete')
        .typeText(updatePage.province, 'QC');

    await t
        .expect(updatePage.province.value).eql('QC', 'province validation incorrect');
    
    //Enters on areaCode
    await t
        .selectText(updatePage.areaCode)
        .pressKey('delete')
        .typeText(updatePage.areaCode, '123');

    await t
        .expect(updatePage.areaCode.value).eql('123', 'areaCode validation incorrect');

    //Enters on phoneNum
    await t
        .selectText(updatePage.phoneNum)
        .pressKey('delete')
        .typeText(updatePage.phoneNum, '5555544');

    await t
        .expect(updatePage.phoneNum.value).eql('5555544', 'phoneNum validation incorrect');
    
    //Enters on contactName1
    await t
        .selectText(updatePage.contactName1)
        .pressKey('delete')
        .typeText(updatePage.contactName1, 'Sir Tasty');

    await t
        .expect(updatePage.contactName1.value).eql('Sir Tasty', 'contactName1 validation incorrect');

    //Enters on areaCode1
    await t
        .selectText(updatePage.areaCode1)
        .pressKey('delete')
        .typeText(updatePage.areaCode1, '321');

    await t
        .expect(updatePage.areaCode1.value).eql('321', 'areaCode1 validation incorrect');

    //Enters on contactPhone1
    await t
        .selectText(updatePage.contactPhone1)
        .pressKey('delete')
        .typeText(updatePage.contactPhone1, '6666655');

    await t
        .expect(updatePage.contactPhone1.value).eql('6666655', 'contactPhone1 validation incorrect');

    //Enters on contactEmail1
    await t
        .selectText(updatePage.contactEmail1)
        .pressKey('delete')
        .typeText(updatePage.contactEmail1, 'tasty@mail.com');

    await t
        .expect(updatePage.contactEmail1.value).eql('tasty@mail.com', 'contactEmail1 validation incorrect');

    //Enters on contactLdap1
    await t
        .selectText(updatePage.contactLdap1)
        .pressKey('delete')
        .typeText(updatePage.contactLdap1, 'sirtast');

    await t
        .expect(updatePage.contactLdap1.value).eql('sirtast', 'contactLdap1 validation incorrect');
    
    //Click cancel button
    await updatePage.cancelMembershipClick();

    //Verify popup is closed
    await t
        .wait(100)
        .expect(updatePage.updateMembershipDialog.filterVisible().exists).notOk();

    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, '99999');
    
    //Activate the search
    await t
        .click(page.searchButton);

    //Edit Membership Entry
    await editMembership('99999', '99999');

    //Verify the popup is open
    await t
        .wait(100)
        .expect(updatePage.updateMembershipDialog.filterVisible().exists).ok();

    //Validation the fields did not change *************
    //optional field
    //Validate on address2
    await t
        .expect(updatePage.address2.value).eql('app. 12999999999999999999999999999999999', 'address2 validation incorrect');

    //optional field
    //Validate on contactName2
    await t
        .expect(updatePage.contactName2.value).eql('Sir Isnogood999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'contactName2 validation incorrect');

    //optional field
    //Validate on areaCode2
    await t
        .expect(updatePage.areaCode2.value).eql('345', 'areaCode2 validation incorrect');

    //optional field
    //Validate on contactPhone2
    await t
        .expect(updatePage.contactPhone2.value).eql('as9876543999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'contactPhone2 validation incorrect');

    //optional field
    //Validate on contactEmail2
    await t
        .expect(updatePage.contactEmail2.value).eql('tasty2@mail.com999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'contactEmail2 validation incorrect');

    //optional field
    //Validate on contactLdap2
    await t
        .expect(updatePage.contactLdap2.value).eql('sirtast29999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'contactLdap2 validation incorrect');

    //optional field
    //Validate on commentsNotes
    await t
        .expect(updatePage.commentsNotes.value).eql('Im writing a comment on Sir TastycommentsNotes validation incorrect');

    //optional field
    //Validate service Type Cd  AC - Acute Care
    await t
        .expect(updatePage.serviceTypeCd.textContent).contains('AC - Acute Care');

    //Validate on Corporate Employer Number
    await t
        .expect(updatePage.corpEmpNum.value).eql('99999', 'corpEmpNum validation incorrect');

    //Validate on siteEmpNum
    await t
        .expect(updatePage.siteEmpNum.value).eql('99999', 'siteEmpNum validation incorrect');

    //Validate on legName
    await t
        .expect(updatePage.legName.value).eql('TastyMe999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'legName validation incorrect');

    //Validate on opName
    await t
        .expect(updatePage.opName.value).eql('OhSoTastyMe9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'opName validation incorrect');

    //Validate health Authority Number  1 - Interior Health Authority
    await t
        .expect(updatePage.healthAuthorityNumber.textContent).contains('1 - Interior Health Authority');

   //Validate member Type   1 - Corporate Member
    await t
        .expect(updatePage.memberType.textContent).contains('1 - Corporate Member');

    //Validate payroll Type
    await t
        .expect(updatePage.payrollType.textContent).contains('HNFile');

    //Validate on hnftpAccount
    await t
        .expect(updatePage.hnftpAccount.value).eql('tastyaccount999', 'hnftpAccount validation incorrect');

    //Validate organization Status  H - Health Authority
    await t
        .expect(updatePage.organizationStatus.textContent).contains('H - Health Authority');

    //Validate on address1
    await t
        .expect(updatePage.address1.value).eql('123 tasty road99999999999999999999999999', 'address1 validation incorrect');

    //Validate on city
    await t
        .expect(updatePage.city.value).eql('tastyland99999999999', 'city validation incorrect');

    //Validate on postCode
    await t
        .expect(updatePage.postCode.value).eql('X0X0X09', 'postCode validation incorrect');

    //Validate memb Date Test
    await t
        .expect(updatePage.membDateTest.value).eql('2020 01 01', 'membDateTest filter incorrect');

    //Validate active Flag  Yes
    await t
        .expect(updatePage.activeFlag.textContent).contains('Yes');

    //Validate summary Flag
    await t
        .expect(updatePage.summaryFlagValue.textContent).contains('Yes');

    //Validate on province
    await t
        .expect(updatePage.province.value).eql('QC99', 'province validation incorrect');

    //Validate on areaCode
    await t
        .expect(updatePage.areaCode.value).eql('543', 'areaCode validation incorrect');

    //Validate on phoneNum
    await t
        .expect(updatePage.phoneNum.value).eql('1aa234567999999999999999999999', 'phoneNum validation incorrect');

    //Validate on contactName1
    await t
        .expect(updatePage.contactName1.value).eql('Sir Tasty999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'contactName1 validation incorrect');

    //Validate on areaCode1
    await t
        .expect(updatePage.areaCode1.value).eql('123', 'areaCode1 validation incorrect');

    //Validate on contactPhone1
    await t
        .expect(updatePage.contactPhone1.value).eql('56aa98745999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'contactPhone1 validation incorrect');

    //Validate on contactEmail1
    await t
        .expect(updatePage.contactEmail1.value).eql('tasty@mail.com9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'contactEmail1 validation incorrect');

    //Validate on contactLdap1
    await t
        .expect(updatePage.contactLdap1.value).eql('sirtast99999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999', 'contactLdap1 validation incorrect');
    
    //Click cancel button
    await updatePage.cancelMembershipClick();

    //Verify popup is closed
    await t
        .expect(updatePage.updateMembershipDialog.filterVisible().exists).notOk();
});

test('10. Update a membership', async t => {
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, '99999');
    
    //Activate the search
    await t
        .click(page.searchButton);

    //Edit Membership Entry
    await editMembership('99999', '99999');

    //Verify the popup is open
    await t
        .wait(100)
        .expect(updatePage.updateMembershipDialog.filterVisible().exists).ok();

    //optional field
    //Enters on address2
    await t
        .selectText(updatePage.address2)
        .pressKey('delete')
        .typeText(updatePage.address2, 'app. 12');

    await t
        .expect(updatePage.address2.value).eql('app. 12', 'address2 validation incorrect');

    //optional field
    //Enters on contactName2
    await t
        .selectText(updatePage.contactName2)
        .pressKey('delete')
        .typeText(updatePage.contactName2, 'Sir Isnogood');

    await t
        .expect(updatePage.contactName2.value).eql('Sir Isnogood', 'contactName2 validation incorrect');

    //optional field
    //Enters on areaCode2
    await t
        .selectText(updatePage.areaCode2)
        .pressKey('delete')
        .typeText(updatePage.areaCode2, '345');

    await t
        .expect(updatePage.areaCode2.value).eql('345', 'areaCode2 validation incorrect');

    //optional field
    //Enters on contactPhone2
    await t
        .selectText(updatePage.contactPhone2)
        .pressKey('delete')
        .typeText(updatePage.contactPhone2, '9876543');

    await t
        .expect(updatePage.contactPhone2.value).eql('9876543', 'contactPhone2 validation incorrect');

    //optional field
    //Enters on contactEmail2
    await t
        .selectText(updatePage.contactEmail2)
        .pressKey('delete')
        .typeText(updatePage.contactEmail2, 'tasty2@mail.com');

    await t
        .expect(updatePage.contactEmail2.value).eql('tasty2@mail.com', 'contactEmail2 validation incorrect');

    //optional field
    //Enters on contactLdap2
    await t
        .selectText(updatePage.contactLdap2)
        .pressKey('delete')
        .typeText(updatePage.contactLdap2, 'sirtast2');

    await t
        .expect(updatePage.contactLdap2.value).eql('sirtast2', 'contactLdap2 validation incorrect');

    //optional field
    //Enters on commentsNotes
    await t
        .selectText(updatePage.commentsNotes)
        .pressKey('delete')
        .typeText(updatePage.commentsNotes, 'Im writing a comment on Sir Tasty');

    await t
        .expect(updatePage.commentsNotes.value).eql('Im writing a comment on Sir Tasty', 'commentsNotes validation incorrect');

    //optional field
    //Enter service Type Cd     AC - Acute Care
    var serviceTypeCd = '';
    await selectInDropdownList(updatePage.serviceTypeCd, updatePage.serviceTypeCdOptions, serviceTypeCd);

    await t
        .expect(updatePage.serviceTypeCd.textContent).contains('Acute Care');

    //Enter on Corporate Employer Number
    await t
        .selectText(updatePage.corpEmpNum)
        .pressKey('delete')
        .typeText(updatePage.corpEmpNum, '99998');

    await t
        .expect(updatePage.corpEmpNum.value).eql('99998', 'corpEmpNum validation incorrect');

    //Disabled on siteEmpNum
    await t
        .expect(isDisabled(updatePage.siteEmpNum)).ok();

    //Enter on legName
    await t
        .selectText(updatePage.legName)
        .pressKey('delete')
        .typeText(updatePage.legName, 'TastyMe');

    await t
        .expect(updatePage.legName.value).eql('TastyMe', 'legName validation incorrect');

    //Enter on opName
    await t
        .selectText(updatePage.opName)
        .pressKey('delete')
        .typeText(updatePage.opName, 'OhSoTastyMe');

    await t
        .expect(updatePage.opName.value).eql('OhSoTastyMe', 'opName validation incorrect');

    //Enter health Authority Number     2 - Fraser Health Authority
    var healthAuthorityNumber = '2';
    await selectInDropdownList(updatePage.healthAuthorityNumber, updatePage.healthAuthorityNumberOptions, healthAuthorityNumber);
    
    await t
        .expect(updatePage.healthAuthorityNumber.textContent).contains('Fraser Health Authority');

    //Enter member Type     2 - HEABC Member
    var memberType = '2';
    await selectInDropdownList(updatePage.memberType, updatePage.memberTypeOptions, memberType);

    await t
        .expect(updatePage.memberType.textContent).contains('HEABC Member');

    //Enter payroll Type
    var payrollType = 'HNFile';
    await selectInDropdownList(updatePage.payrollType, updatePage.payrollTypeOptions, payrollType);

    await t
        .expect(updatePage.payrollType.textContent).contains('HNFile');

    //Enters on hnftpAccount
    await t
        .selectText(updatePage.hnftpAccount)
        .pressKey('delete')
        .typeText(updatePage.hnftpAccount, 'tastyaccount');

    await t
        .expect(updatePage.hnftpAccount.value).eql('tastyaccount', 'hnftpAccount validation incorrect');

    //Enter organization Status     M - MIS Reporter
    var organizationStatus = 'M';
    await selectInDropdownList(updatePage.organizationStatus, updatePage.organizationStatusOptions, organizationStatus);

    await t
        .expect(updatePage.organizationStatus.textContent).contains('MIS Reporter');

    //Enters on address1
    await t
        .selectText(updatePage.address1)
        .pressKey('delete')
        .typeText(updatePage.address1, '123 tasty road');

    await t
        .expect(updatePage.address1.value).eql('123 tasty road', 'address1 validation incorrect');

    //Enters on city
    await t
        .selectText(updatePage.city)
        .pressKey('delete')
        .typeText(updatePage.city, 'tastyland');

    await t
        .expect(updatePage.city.value).eql('tastyland', 'city validation incorrect');

    //Enters on postCode
    await t
        .selectText(updatePage.postCode)
        .pressKey('delete')
        .typeText(updatePage.postCode, 'X0X0X0');

    await t
        .expect(updatePage.postCode.value).eql('X0X0X0', 'postCode validation incorrect');

    //Enter memb Date Test
    await t
        .selectText(updatePage.membDateTest)
        .typeText(updatePage.membDateTest, '2020 02 02');
    await closeDatePicker(updatePage.membDateTest); 

    await t
        .expect(updatePage.membDateTest.value).eql('2020 02 02', 'membDateTest filter incorrect');

    //Enter active Flag     No
    var activeFlag = 'N';
    await selectInDropdownList(updatePage.activeFlag, updatePage.activeFlagOptions, activeFlag);

    await t
        .expect(updatePage.activeFlag.textContent).contains('No');

    //Enter summary Flag    No
    var summaryFlag = 'N';
    await selectInDropdownList(updatePage.summaryFlag, updatePage.summaryFlagOptions, summaryFlag);
    
    await t
        .expect(updatePage.summaryFlag.textContent).contains('No');

    //Enters on province
    await t
        .selectText(updatePage.province)
        .pressKey('delete')
        .typeText(updatePage.province, 'QC');

    await t
        .expect(updatePage.province.value).eql('QC', 'province validation incorrect');
    
    //Enters on areaCode
    await t
        .selectText(updatePage.areaCode)
        .pressKey('delete')
        .typeText(updatePage.areaCode, '123');

    await t
        .expect(updatePage.areaCode.value).eql('123', 'areaCode validation incorrect');

    //Enters on phoneNum
    await t
        .selectText(updatePage.phoneNum)
        .pressKey('delete')
        .typeText(updatePage.phoneNum, '5555544');

    await t
        .expect(updatePage.phoneNum.value).eql('5555544', 'phoneNum validation incorrect');
    
    //Enters on contactName1
    await t
        .selectText(updatePage.contactName1)
        .pressKey('delete')
        .typeText(updatePage.contactName1, 'Sir Tasty');

    await t
        .expect(updatePage.contactName1.value).eql('Sir Tasty', 'contactName1 validation incorrect');

    //Enters on areaCode1
    await t
        .selectText(updatePage.areaCode1)
        .pressKey('delete')
        .typeText(updatePage.areaCode1, '321');

    await t
        .expect(updatePage.areaCode1.value).eql('321', 'areaCode1 validation incorrect');

    //Enters on contactPhone1
    await t
        .selectText(updatePage.contactPhone1)
        .pressKey('delete')
        .typeText(updatePage.contactPhone1, '6666655');

    await t
        .expect(updatePage.contactPhone1.value).eql('6666655', 'contactPhone1 validation incorrect');

    //Enters on contactEmail1
    await t
        .selectText(updatePage.contactEmail1)
        .pressKey('delete')
        .typeText(updatePage.contactEmail1, 'tasty@mail.com');

    await t
        .expect(updatePage.contactEmail1.value).eql('tasty@mail.com', 'contactEmail1 validation incorrect');

    //Enters on contactLdap1
    await t
        .selectText(updatePage.contactLdap1)
        .pressKey('delete')
        .typeText(updatePage.contactLdap1, 'sirtast');

    await t
        .expect(updatePage.contactLdap1.value).eql('sirtast', 'contactLdap1 validation incorrect');
    
    //Click cancel button
    await updatePage.updateMembershipClick();

    //Verify popup is closed
    await t
        .wait(100)
        .expect(updatePage.updateMembershipDialog.filterVisible().exists).notOk();

    //Verify error message is displayed
    await t
        .expect(updatePage.membershipMessages.withText("Record was successfully updated").exists).ok();

    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, '99998');
    
    //Activate the search
    await t
        .click(page.searchButton);

    //Edit Membership Entry
    await editMembership('99998', '99999');

    //Verify the popup is open
    await t
        .wait(100)
        .expect(updatePage.updateMembershipDialog.filterVisible().exists).ok();

    //Validation fields have been updated
    //optional field
    //Validate on address2
    await t
        .expect(updatePage.address2.value).eql('app. 12', 'address2 validation incorrect');

    //optional field
    //Validate on contactName2
    await t
        .expect(updatePage.contactName2.value).eql('Sir Isnogood', 'contactName2 validation incorrect');

    //optional field
    //Validate on areaCode2
    await t
        .expect(updatePage.areaCode2.value).eql('345', 'areaCode2 validation incorrect');

    //optional field
    //Validate on contactPhone2
    await t
        .expect(updatePage.contactPhone2.value).eql('9876543', 'contactPhone2 validation incorrect');

    //optional field
    //Validate on contactEmail2
    await t
        .expect(updatePage.contactEmail2.value).eql('tasty2@mail.com', 'contactEmail2 validation incorrect');

    //optional field
    //Validate on contactLdap2
    await t
        .expect(updatePage.contactLdap2.value).eql('sirtast2', 'contactLdap2 validation incorrect');

    //optional field
    //Validate on commentsNotes
    await t
        .expect(updatePage.commentsNotes.value).eql('Im writing a comment on Sir Tasty', 'commentsNotes validation incorrect');

    //optional field
    //Validate service Type Cd  AC - Acute Care
    await t
        .expect(updatePage.serviceTypeCd.textContent).contains('Acute Care');

    //Validate on Corporate Employer Number
    await t
        .expect(updatePage.corpEmpNum.value).eql('99998', 'corpEmpNum validation incorrect');

    //Disabled on siteEmpNum
    await t
        .expect(isDisabled(updatePage.siteEmpNum)).ok();

    //Validate on legName
    await t
        .expect(updatePage.legName.value).eql('TastyMe', 'legName validation incorrect');

    //Validate on opName
    await t
        .expect(updatePage.opName.value).eql('OhSoTastyMe', 'opName validation incorrect');

    //Validate health Authority Number  2 - Fraser Health Authority
    await t
        .expect(updatePage.healthAuthorityNumber.textContent).contains('Fraser Health Authority');

    //Validate member Type  2 - HEABC Member
    await t
        .expect(updatePage.memberType.textContent).contains('HEABC Member');

    //Validate payroll Type
    await t
        .expect(updatePage.payrollType.textContent).contains('HNFile');

    //Validate on hnftpAccount
    await t
        .expect(updatePage.hnftpAccount.value).eql('tastyaccount', 'hnftpAccount validation incorrect');

    //Validate organization Status  M - MIS Reporter
    await t
        .expect(updatePage.organizationStatus.textContent).contains('MIS Reporter');

    //Validate on address1
    await t
        .expect(updatePage.address1.value).eql('123 tasty road', 'address1 validation incorrect');

    //Validate on city
    await t
        .expect(updatePage.city.value).eql('tastyland', 'city validation incorrect');

    //Validate on postCode
    await t
        .expect(updatePage.postCode.value).eql('X0X0X0', 'postCode validation incorrect');

    //Validate memb Date Test
    await t
        .expect(updatePage.membDateTest.value).eql('2020 02 02', 'membDateTest filter incorrect');

    //Validate active Flag  No
    await t
        .expect(updatePage.activeFlag.textContent).contains('No');

    //Validate summary Flag    No
    await t
        .expect(updatePage.summaryFlag.textContent).contains('No');

    //Validate on province
    await t
        .expect(updatePage.province.value).eql('QC', 'province validation incorrect');
    
    //Validate on areaCode
    await t
        .expect(updatePage.areaCode.value).eql('123', 'areaCode validation incorrect');

    //Validate on phoneNum
    await t
        .expect(updatePage.phoneNum.value).eql('5555544', 'phoneNum validation incorrect');
    
    //Validate on contactName1
    await t
        .expect(updatePage.contactName1.value).eql('Sir Tasty', 'contactName1 validation incorrect');

    //Validate on areaCode1
    await t
        .expect(updatePage.areaCode1.value).eql('321', 'areaCode1 validation incorrect');

    //Validate on contactPhone1
    await t
        .expect(updatePage.contactPhone1.value).eql('6666655', 'contactPhone1 validation incorrect');

    //Validate on contactEmail1
    await t
        .expect(updatePage.contactEmail1.value).eql('tasty@mail.com', 'contactEmail1 validation incorrect');

    //Validate on contactLdap1
    await t
        .expect(updatePage.contactLdap1.value).eql('sirtast', 'contactLdap1 validation incorrect');

    //Click cancel button
    await updatePage.cancelMembershipClick();

    //Verify popup is closed
    await t
        .wait(100)
        .expect(updatePage.updateMembershipDialog.filterVisible().exists).notOk();
});

test('11. Check the view link notes', async t => {
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, '99998');
    
    //Activate the search
    await t
        .click(page.searchButton);

    var data = await page.membershipData(),
        index = page.dataIndexOfMembership(data, '99998', '99999');
    
    //Verify test record exists
    await t
        .expect(index).gt(-1, 'Test record not found in the membership list');

    //Click open view link
    await page.clickViewNotesLink(index);

    //Verify popup is open
    await t
        .wait(100)
        .expect(page.notesPopup.filterVisible().exists).ok();

    //Validate the message is present
    await t
        .expect(page.commentsNotesPopup.textContent).contains('Im writing a comment on Sir Tasty');
    
    //Click open view link
    await page.clickNotePopupClose();

    //Verify popup is close
    await t
        .wait(100)
        .expect(page.notesPopup.filterVisible().exists).notOk();
});

test('12. Cleanup by delete a membership', async t => {
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, '99998');
    
    //Activate the search
    await t
        .click(page.searchButton);

    //Edit Membership Entry
    await editMembership('99998', '99999');

    //Verify the popup is open
    await t
        .wait(100)
        .expect(updatePage.updateMembershipDialog.filterVisible().exists).ok();

    //Verify popup is Open
    await t
        .expect(updatePage.updateMembershipDialog.filterVisible().exists).ok();

    //Click delete button
    await updatePage.deleteMembershipClick();

    //Click cancel delete button
    await updatePage.cancelDeleteMembershipClick();

    //Verify popup is Open
    await t
        .expect(updatePage.updateMembershipDialog.filterVisible().exists).ok();

    //Click delete button
    await page.deleteMembershipClick();

    //Click confirm delete button
    await updatePage.confirmDeleteMembershipClick();

    //Verify popup is closed
    await t
        .expect(page.membershipCreateDialog.filterVisible().exists).notOk();

    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, '99998');
    
    //Activate the search
    await t
        .click(page.searchButton);
        
    //Verify the search has been processed
    await t
        .wait(1000)
        .expect(page.dataTable.textContent).contains('No records found');
});
