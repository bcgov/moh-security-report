import { t } from 'testcafe';
import { initTest } from '../helpers/common.helper';
import { urlFor } from '../helpers/url.helper';
import { regularAccUser } from '../helpers/user.helper';
import { getShortDateString } from '../helpers/date.helper';
import { isDisabled, hasErrorState, clearDatePickerInput, selectInDropdownList, selectDateInDatePicker, setValueInHiddenInput, closeDatePicker } from '../helpers/field.helper';
import NavBar from '../page-objects/topNav';
import EnterPayrollSummaryPage from '../page-objects/enterPayrollSummary';
import EnterPayrollSummaryHeaderPage from '../page-objects/enterPayrollSummaryHeader';
import EnterPayrollSummaryDesGroupsPage from '../page-objects/enterPayrollSummaryDesGroups';
import EnterPayrollSummaryDesGroupsPagePopUp from '../page-objects/enterPayrollSummaryDesGroupPopUp';
import EnterPayrollSummaryEmployeePage from '../page-objects/enterPayrollSummaryEmployee';
import EnterPayrollSummaryEmployeePagePopUp from '../page-objects/enterPayrollSummaryEmployeePopUp';
import adminDataEntryConfirmation from '../page-objects/adminDataEntryConfirmation';
import enterPayrollSummaryExport from '../page-objects/enterPayrollSummaryExport';

fixture `HSCIS - Enter Payroll Summary`
    .page(urlFor(''))
    .beforeEach( async t => {
        await initTest(regularAccUser);

        await NavBar.clickPayrollLink();

        await page.clickEnterPayrollLink();
    });

const page = new EnterPayrollSummaryPage();

test('01. Smoke Test', async t => {
    await t
        .hover(page.reportsPanel);

    await t
        .hover(page.createButton);
});

const headerPage = new EnterPayrollSummaryHeaderPage();
const desGroupsPage = new EnterPayrollSummaryDesGroupsPage();
const desGroupsPagePopUp = new EnterPayrollSummaryDesGroupsPagePopUp();
const employeePage = new EnterPayrollSummaryEmployeePage();
const employeePagePopUp = new EnterPayrollSummaryEmployeePagePopUp();
const confirmationPage = new adminDataEntryConfirmation();
const exportPage = new enterPayrollSummaryExport();

test('02. View the Payroll Summary Entry header', async t => {
    await page.clickCreateButton();

    //Verify Payroll Summary Entry create mode
    await headerPage.verifyCreateMode(desGroupsPage, employeePage);

    //Click Cancel button
    await headerPage.clickCancelButton();

    //Verify taken back to summary previous page
    await t
        .expect(page.reportsPanel.exists).ok();
});

test('03. Cancel the creation of a Payroll Summary Entry', async t => {
    await page.clickCreateButton();

    //Select corporate #
    var corporateID = '6004';
    await selectInDropdownList(headerPage.corporateID, headerPage.corporateIDOptions, corporateID);

    //Give some time to the site list to load
    await t
        .wait(1000);

    //Select site #
    var siteID = '6005';
    await selectInDropdownList(headerPage.siteID, headerPage.siteIDOptions, siteID);

    var currentDate = new Date(),
        currentYear = currentDate.getFullYear();

    //Set Reporting period From date to 8 days after January 1st of current year
    var reportingPeriodFromDate = new Date(currentYear, 0, 1);
    reportingPeriodFromDate.setDate(reportingPeriodFromDate.getDate() + 8);
    var reportingPeriodFromDateStr = getShortDateString(reportingPeriodFromDate);
    await t
        .typeText(headerPage.reportingPeriodFrom, reportingPeriodFromDateStr);
    await closeDatePicker(headerPage.reportingPeriodFrom);

    //Set Reporting period To date 8 days after June 30th of current year
    var reportingPeriodToDate = new Date(currentYear, 5, 30);
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() + 8);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate);
    await t
        .typeText(headerPage.reportingPeriodTo, reportingPeriodToDateStr);
    await closeDatePicker(headerPage.reportingPeriodTo);

    //Click Cancel button
    await headerPage.clickCancelButton();

    //Verify taken back to summary previous page
    await t
        .wait(500)
        .expect(page.reportsPanel.exists).ok();

    //Get the payroll summary data in the table
    var payrollSummaryReportsData = await page.payrollSummaryReportsData()

    //Verify that the entry was not created in the summary table
    await t
        .expect(page.dataContainsPayrollSummary(payrollSummaryReportsData, corporateID, siteID, reportingPeriodFromDateStr, reportingPeriodToDateStr, 'IN PROGRESS')).notOk();

    //Access again the create section
    await page.clickCreateButton();

    //Verify Payroll Summary Entry create mode
    await headerPage.verifyCreateMode(desGroupsPage, employeePage);

    //Select corporate #
    await selectInDropdownList(headerPage.corporateID, headerPage.corporateIDOptions, corporateID);

    //Select site #
    await selectInDropdownList(headerPage.siteID, headerPage.siteIDOptions, siteID);

    //Set Reporting period From date to 8 days after January 1st of current year
    await t
        .typeText(headerPage.reportingPeriodFrom, reportingPeriodFromDateStr);
    await closeDatePicker(headerPage.reportingPeriodFrom);

    //Click Validate button
    await headerPage.clickValidateButton();

    //Click Cancel button
    await headerPage.clickCancelButton();

    //Verify taken back to summary previous page
    await t
        .wait(1000)
        .expect(page.reportsPanel.exists).ok();

    //Get the payroll summary data in the table
    payrollSummaryReportsData = await page.payrollSummaryReportsData()

    //Verify that the entry was not created in the summary table
    await t
        .expect(page.dataContainsPayrollSummary(payrollSummaryReportsData, corporateID, siteID, reportingPeriodFromDateStr, reportingPeriodToDateStr, 'IN PROGRESS')).notOk();

    //Access again the create section
    await page.clickCreateButton();

    //Verify Payroll Summary Entry create mode
    await headerPage.verifyCreateMode(desGroupsPage, employeePage);
});

test('04. Create a Payroll Summary Entry - Reporting From date validation rules', async t => {
    await page.clickCreateButton();

    //Select corporate #
    await selectInDropdownList(headerPage.corporateID, headerPage.corporateIDOptions, '6004');

    //Give some time to the site list to load
    await t
        .wait(1000);

    //Select site #
    await selectInDropdownList(headerPage.siteID, headerPage.siteIDOptions, '6005');

    var currentDate = new Date(),
        lastYear = currentDate.getFullYear() - 1;

    //Set Reporting period To date 8 days after June 30th
    var reportingPeriodToDate = new Date(lastYear, 5, 30);
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() + 8);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate);
    await t
        .typeText(headerPage.reportingPeriodTo, reportingPeriodToDateStr);
    await closeDatePicker(headerPage.reportingPeriodTo);

    //Set Reporting period From date to 23 days before January 1st
    var reportingPeriodFromDate = new Date(lastYear, 0, 1);
    reportingPeriodFromDate.setDate(reportingPeriodFromDate.getDate() - 23);
    var reportingPeriodFromDateStr = getShortDateString(reportingPeriodFromDate);
    await t
        .typeText(headerPage.reportingPeriodFrom, reportingPeriodFromDateStr);
    await closeDatePicker(headerPage.reportingPeriodFrom);

    //Click Validate button
    await headerPage.clickValidateButton();

    //Verify error message is displayed: Reporting From must be +/- 22 days from Jan 1st of reporting year
    await t
        .expect(headerPage.errorMessages().withText("Reporting From must be +/- 22 days from Jan 1st of reporting year").exists).ok();

    await clearDatePickerInput(headerPage.reportingPeriodFrom);

    //Set Reporting period From date to 32 days after January 1st of current year
    reportingPeriodFromDate = new Date(lastYear, 0, 1);
    reportingPeriodFromDate.setDate(reportingPeriodFromDate.getDate() + 32);
    var reportingPeriodFromDateStr = getShortDateString(reportingPeriodFromDate);
    await t
        .typeText(headerPage.reportingPeriodFrom, reportingPeriodFromDateStr);
    await closeDatePicker(headerPage.reportingPeriodFrom);

    //Click Validate button
    await headerPage.clickValidateButton();

    //Verify error message is displayed: Reporting From must be +/- 22 days from Jan 1st of reporting year
    await t
        .expect(headerPage.errorMessages().withText("Reporting From must be +/- 22 days from Jan 1st of reporting year").exists).ok();

    await clearDatePickerInput(headerPage.reportingPeriodFrom);
    await clearDatePickerInput(headerPage.reportingPeriodTo);

    //Set Reporting period before becoming a member
    reportingPeriodFromDate = new Date(1899, 0, 1);
    var reportingPeriodFromDateStr = getShortDateString(reportingPeriodFromDate);
    await t
        .typeText(headerPage.reportingPeriodFrom, reportingPeriodFromDateStr);
    await closeDatePicker(headerPage.reportingPeriodFrom);
    reportingPeriodToDate = new Date(1899, 6, 8);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate);
    await t
        .typeText(headerPage.reportingPeriodTo, reportingPeriodToDateStr);
    await closeDatePicker(headerPage.reportingPeriodTo);

    //Click Validate button
    await headerPage.clickValidateButton();

    //Verify error message is displayed: Cannot report for years prior to becoming a member
    await t
        .expect(headerPage.errorMessages().withText("Cannot report for years prior to becoming a member").exists).ok();
});

test('05. Create a Payroll Summary Entry - Reporting To date validation rules', async t => {
    await page.clickCreateButton();

    //Select corporate #
    await selectInDropdownList(headerPage.corporateID, headerPage.corporateIDOptions, '6004');

    //Give some time to the site list to load
    await t
        .wait(1000);

    //Select site #
    await selectInDropdownList(headerPage.siteID, headerPage.siteIDOptions, '6005');

    var currentDate = new Date(),
        twoYearsAgo = currentDate.getFullYear() - 2;

    //Set Reporting period From date 10 days after January 1st
    var reportingPeriodFromDate = new Date(twoYearsAgo, 0, 1);
    reportingPeriodFromDate.setDate(reportingPeriodFromDate.getDate() + 10);
    var reportingPeriodFromDateStr = getShortDateString(reportingPeriodFromDate);
    await t
        .typeText(headerPage.reportingPeriodFrom, reportingPeriodFromDateStr);
    await closeDatePicker(headerPage.reportingPeriodFrom);

    //Set Reporting period To date beyond current date
    var reportingPeriodToDate = new Date();
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() + 1);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate);
    await t
        .typeText(headerPage.reportingPeriodTo, reportingPeriodToDateStr);
    await closeDatePicker(headerPage.reportingPeriodTo);

    //Click Validate button
    await headerPage.clickValidateButton();

    //Verify error message is displayed: Reporting To Date must be less than or equal to the Current Date
    await t
        .expect(headerPage.errorMessages().withText("Reporting To must be less than or equal to the Current Date").exists).ok();

    await clearDatePickerInput(headerPage.reportingPeriodTo);

    //Set Reporting period To date 23 days before June 30th
    reportingPeriodToDate = new Date(twoYearsAgo, 5, 30);
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() - 23);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate);
    await t
        .typeText(headerPage.reportingPeriodTo, reportingPeriodToDateStr);
    await closeDatePicker(headerPage.reportingPeriodTo);

    //Click Validate button
    await headerPage.clickValidateButton();

    //Verify error message is displayed: Reporting To must be +/- 22 days from June 30 or December 31
    await t
        .expect(headerPage.errorMessages().withText("Reporting To must be +/- 22 days from June 30 or December 31").exists).ok();

    await clearDatePickerInput(headerPage.reportingPeriodTo);

    //Set Reporting period To date 23 days after June 30th
    reportingPeriodToDate = new Date(twoYearsAgo, 5, 30);
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() + 23);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate);
    await t
        .typeText(headerPage.reportingPeriodTo, reportingPeriodToDateStr);
    await closeDatePicker(headerPage.reportingPeriodTo);

    //Click Validate button
    await headerPage.clickValidateButton();

    //Verify error message is displayed: Reporting To must be +/- 22 days from June 30 or December 31
    await t
        .expect(headerPage.errorMessages().withText("Reporting To must be +/- 22 days from June 30 or December 31").exists).ok();

    await clearDatePickerInput(headerPage.reportingPeriodTo);

    //Set Reporting period To date 23 days before December 31st
    reportingPeriodToDate = new Date(twoYearsAgo, 11, 31);
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() - 23);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate);
    await t
        .typeText(headerPage.reportingPeriodTo, reportingPeriodToDateStr);
    await closeDatePicker(headerPage.reportingPeriodTo);

    //Click Validate button
    await headerPage.clickValidateButton();

    //Verify error message is displayed: Reporting To must be +/- 22 days from June 30 or December 31
    await t
        .expect(headerPage.errorMessages().withText("Reporting To must be +/- 22 days from June 30 or December 31").exists).ok();

    await clearDatePickerInput(headerPage.reportingPeriodTo);

    //Set Reporting period To date 23 days after December 31st
    reportingPeriodToDate = new Date(twoYearsAgo, 11, 31);
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() + 23);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate);
    await t
        .typeText(headerPage.reportingPeriodTo, reportingPeriodToDateStr);
    await closeDatePicker(headerPage.reportingPeriodTo);

    //Click Validate button
    await headerPage.clickValidateButton();

    //Verify error message is displayed: Reporting To must be +/- 22 days from June 30 or December 31
    await t
        .expect(headerPage.errorMessages().withText("Reporting To must be +/- 22 days from June 30 or December 31").exists).ok();

    await clearDatePickerInput(headerPage.reportingPeriodTo);

    //Set Reporting period To date 10 days after December 31st
    reportingPeriodToDate = new Date(twoYearsAgo, 11, 31);
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() + 10);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate);
    await t
        .typeText(headerPage.reportingPeriodTo, reportingPeriodToDateStr);
    await closeDatePicker(headerPage.reportingPeriodTo);

    //Click Validate button
    await headerPage.clickValidateButton();

    //Verify error message is displayed: Reporting To cannot exceed December 31
    await t
        .expect(headerPage.errorMessages().withText("Reporting To cannot exceed December 31").exists).ok();

    await clearDatePickerInput(headerPage.reportingPeriodTo);

    //Set Reporting period To date 15 days before December 31st of the next year of Reporting period From
    reportingPeriodToDate = new Date(twoYearsAgo + 1, 11, 31);
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() - 15);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate);
    await t
        .typeText(headerPage.reportingPeriodTo, reportingPeriodToDateStr);
    await closeDatePicker(headerPage.reportingPeriodTo);

    //Click Validate button
    await headerPage.clickValidateButton();

    //Verify error message is displayed: Reporting Period Range too large. Period must be for only 1 year
    await t
        .expect(headerPage.errorMessages().withText("Reporting Period Range too large. Period must be for only 1 year").exists).ok();
});

async function createPayrollSummary(clickCreateButton, corporateID, siteID, verifyNoErrorMessages, beforeValidateFunc) {
    if (clickCreateButton) {
        await page.clickCreateButton();
    }

    //Select corporate #
    await selectInDropdownList(headerPage.corporateID, headerPage.corporateIDOptions, corporateID);

    //Give some time to the site list to load
    await t
        .wait(1000);

    //Select site #
    await selectInDropdownList(headerPage.siteID, headerPage.siteIDOptions, siteID);

    var currentDate = new Date(),
        lastYear = currentDate.getFullYear() - 1;

    //Set Reporting period From date to 8 days after January 1st
    var reportingPeriodFromDate = new Date(lastYear, 0, 1);
    reportingPeriodFromDate.setDate(reportingPeriodFromDate.getDate() + 8);
    var reportingPeriodFromDateStr = getShortDateString(reportingPeriodFromDate);
    await t
        .typeText(headerPage.reportingPeriodFrom, reportingPeriodFromDateStr);
    await closeDatePicker(headerPage.reportingPeriodFrom);

    //Set Reporting period To date 8 days after June 30th
    var reportingPeriodToDate = new Date(lastYear, 5, 30);
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() + 8);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate);
    await t
        .typeText(headerPage.reportingPeriodTo, reportingPeriodToDateStr);
    await closeDatePicker(headerPage.reportingPeriodTo);

    if (typeof beforeValidateFunc === "function") {
        await beforeValidateFunc();
    }

    //Click Validate button
    await headerPage.clickValidateButton();

    if (verifyNoErrorMessages) {
        //Verify there are no error messages
        await t
            .expect(headerPage.errorMessages().count).eql(0, 'There are error messages not allowing to create the Payroll Summary');
    }

    return { corporateID: corporateID,
             siteID: siteID,
             reportingPeriodFromDate: reportingPeriodFromDateStr,
             reportingPeriodToDate: reportingPeriodToDateStr };
}

async function addMinimalDesignatedGroup() {
    //Add one designated group with minimal information
    await desGroupsPage.clickCreateButton();
    await selectInDropdownList(desGroupsPagePopUp.designatedGroup, desGroupsPagePopUp.designatedGroupOptions, 'Nurses');
    await desGroupsPagePopUp.clickCreateButton();

    //Verify there are no error messages
    await t
        .expect(desGroupsPagePopUp.errorMessages().count).eql(0, 'There are error messages not allowing to create the designated group');

    //Wait for the popup to close
    await t
        .wait(1000);
}

test('06. Create a Payroll Summary Entry', async t => {
    await page.clickCreateButton();

    //Give some time for the page to load
    await t
        .wait(1000);

    //Click Validate button
    await headerPage.clickValidateButton();

    //Place into view the messages component
    await t
        .hover(headerPage.messagesComponent);

    //Verify error message indicating required fields to be filled
    await t
        .expect(headerPage.errorMessages().withText("Corp Employer #: Value is required.").exists).ok()
        .expect(headerPage.errorMessages().withText("Site Employer #: Value is required.").exists).ok()
        .expect(headerPage.errorMessages().withText("Reporting From: Value is required.").exists).ok()
        .expect(headerPage.errorMessages().withText("Reporting To: Value is required.").exists).ok();

    var corporateID = '6004',
        siteID = '6005',
        descriptionVerification = async function() {
            //Verify corporate name
            await t
                .expect(headerPage.corporateName.value).contains('TestOrg5');

            //Verify site name and organization status
            await t
                .expect(headerPage.siteName.value).contains('TestSite5')
                .expect(headerPage.orginizationStatus.value).contains('Registered Company');
        },
        payrollSummary = await createPayrollSummary(false, corporateID, siteID, true, descriptionVerification);

    //Verify the site, corporate and reporting period cannot be changed
    await t
        .expect(isDisabled(headerPage.corporateID)).ok()
        .expect(isDisabled(headerPage.siteID)).ok()
        .expect(isDisabled(headerPage.reportingPeriodFrom)).ok()
        .expect(isDisabled(headerPage.reportingPeriodTo)).ok();

    //Verify Validate and Cancel buttons are disabled
    await t
        .expect(isDisabled(headerPage.validateButton)).ok()
        .expect(isDisabled(headerPage.cancelButton)).ok();

    //Verify section "designated groups" exists
    await t
        .expect(desGroupsPage.designatedGroupsPanel.exists).ok()
        .expect(desGroupsPage.createButton.exists).ok();

    //Verify section "designated groups" is enabled
    await t
        .expect(isDisabled(desGroupsPage.createButton)).notOk();

    //Verify section "employees" exists
    await t
        .expect(employeePage.employeesPanel.exists).ok()
        .expect(employeePage.createButton.exists).ok();

    //Verify section "employees" is enabled
    await t
        .expect(isDisabled(employeePage.createButton)).notOk();

    //Place into view the close button
    await t
        .hover(headerPage.closeButton);

    //Verify Close button exists and is enabled
    await t
        .expect(headerPage.closeButton.exists).ok()
        .expect(isDisabled(headerPage.closeButton)).notOk();

    //Verify Submit button exists and is not enabled
    await t
        .expect(headerPage.submitButton.exists).ok()
        .expect(isDisabled(headerPage.submitButton)).ok();

    //Verify Delete button exists and is not enabled
    await t
        .expect(headerPage.deleteButton.exists).ok()
        .expect(isDisabled(headerPage.deleteButton)).ok();

    //Verify Export button exists and is not enabled
    await t
        .expect(headerPage.exportButton.exists).ok()
        .expect(isDisabled(headerPage.exportButton)).ok();

    //Place into view the "designated groups" section
    await t
        .hover(desGroupsPage.designatedGroupsPanel);

    //Add one designated group with minimal information
    await addMinimalDesignatedGroup();

    //Place into view the close button
    await t
        .hover(headerPage.closeButton);

    //Verify Submit button is enabled
    await t
        .expect(isDisabled(headerPage.submitButton)).notOk();

    //Verify Delete button is enabled
    await t
        .expect(isDisabled(headerPage.deleteButton)).notOk();

    //Verify Export button is enabled
    await t
        .expect(isDisabled(headerPage.exportButton)).notOk();

    //Click Close button
    await headerPage.clickCloseButton();

    //Verify taken back to summary previous page
    await t
        .expect(page.reportsPanel.exists).ok();

    //Get the payroll summary data in the table
    var payrollSummaryReportsData = await page.payrollSummaryReportsData();

    //tests

    var varPeriodFromDate = payrollSummary.reportingPeriodFromDate.replace(/ /g, "-");
    var varPeriodToDate = payrollSummary.reportingPeriodToDate.replace(/ /g, "-");

    //Verify that a new record in the summary table is displayed with: status "IN PROGRESS"
    await t
        .expect(page.dataContainsPayrollSummary(payrollSummaryReportsData,
                                                payrollSummary.corporateID,
                                                payrollSummary.siteID,
                                                varPeriodFromDate,
                                                varPeriodToDate,
                                                'IN PROGRESS')).ok();

    //Access again the create section
    await page.clickCreateButton();

    //Verify Payroll Summary Entry create mode
    await headerPage.verifyCreateMode(desGroupsPage, employeePage);
});

test('07. Create a Payroll Summary Entry - Reporting period already exists validation rule', async t => {
    await createPayrollSummary(true, '6004', '6005', false);

    //Verify error message is displayed: A payroll summary already exists for this period
    await t
        .expect(headerPage.warningMessages().withText("A payroll summary already exists for this period").exists).ok();
});

async function editPayrollSummary(corporateID, siteID, payrollSummaryStatus) {
    await t
        .wait(1000);

    var currentDate = new Date(),
        lastYear = currentDate.getFullYear() - 1;

    //Set Reporting period From date to 8 days after January 1st
    var reportingPeriodFromDate = new Date(lastYear, 0, 1);
    reportingPeriodFromDate.setDate(reportingPeriodFromDate.getDate() + 8);
    var reportingPeriodFromDateStr = getShortDateString(reportingPeriodFromDate).replace(/ /g, '-');

    //Set Reporting period To date 8 days after June 30th
    var reportingPeriodToDate = new Date(lastYear, 5, 30);
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() + 8);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate).replace(/ /g, '-');

    var data = await page.payrollSummaryReportsData(),
        index = page.dataIndexOfPayrollSummary(data, corporateID, siteID, reportingPeriodFromDateStr, reportingPeriodToDateStr, payrollSummaryStatus);

    //Verify test record exists
    await t
        .expect(index).gt(-1, 'Test record not found in the payroll summary list');

    var payrollSummary = page.payrollSummaryReports().nth(index);

    await t
        .click(payrollSummary);
}

test('08. Create employee', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Click create employee button
    await employeePage.clickCreateButton();

    //Verify employee popup create mode
    await employeePagePopUp.verifyCreateMode();

    //Search employee without Employee Number
    await employeePagePopUp.clickEmployeeFindButton();

    //Verify Employee Number is required for the search
    await t
        .expect(hasErrorState(employeePagePopUp.employeeNumber)).ok();

    //Search employee with Employee Number
    await t
        .typeText(employeePagePopUp.employeeNumber, '999999999999999');

    await employeePagePopUp.clickEmployeeFindButton();

    //Verify field status
    await employeePagePopUp.verifyCreateModeAfterSearch();

    //Fill fields
    await t
        .typeText(employeePagePopUp.employeeSIN, '1234567890123');

    //Select designated group code
    var groupCode = 'N';
    await selectInDropdownList(employeePagePopUp.designatedGroupCode, employeePagePopUp.designatedGroupCodeOptions, groupCode);

    //Select union code
    var unionCode = 'B2';
    await selectInDropdownList(employeePagePopUp.unionCode, employeePagePopUp.unionCodeOptions, unionCode);

    await t
        .typeText(employeePagePopUp.dateOfBirth, '1990 06 06');
    await closeDatePicker(employeePagePopUp.dateOfBirth);

    //Select gender
    var gender = 'F';
    await selectInDropdownList(employeePagePopUp.gender, employeePagePopUp.genderOptions, gender);

    //Select class code
    var classCode = '21134';
    await selectInDropdownList(employeePagePopUp.classCode, employeePagePopUp.classCodeOptions, classCode);

    //Select increment
    var increment = '9';
    await selectInDropdownList(employeePagePopUp.increment, employeePagePopUp.incrementOptions, increment);

    //Enter original date of hire
    await t
        .typeText(employeePagePopUp.originalDateOfHire, '2020 06 06');
    await closeDatePicker(employeePagePopUp.originalDateOfHire);

    //Enter seniority start date
    await t
        .typeText(employeePagePopUp.seniorityStartDate, '2020 06 06');
    await closeDatePicker(employeePagePopUp.seniorityStartDate);

    //Enter seniority start date
    await t
        .typeText(employeePagePopUp.seniorityStartDate, '2020 06 06');
    await closeDatePicker(employeePagePopUp.seniorityStartDate);

    //Select job status
    var jobStatus = 'F';
    await selectInDropdownList(employeePagePopUp.jobStatus.parent(), employeePagePopUp.jobStatusOptions, jobStatus);

    //Enter wage rate
    await t
        .typeText(employeePagePopUp.wageRate, '9999999999999999');

    //Enter paid hours
    await t
        .typeText(employeePagePopUp.regularPaidHours, '99999999999999999');

    //Enter vacation hours
    await t
        .typeText(employeePagePopUp.vacationHours, '999999999999999');

    //Click create button
    await employeePagePopUp.clickConfirmButton();

    //Verify warning message is displayed: Possible excessive Wage Rate for Des. Group N
    await t
        .expect(employeePagePopUp.warningMessages().withText("Possible excessive Wage Rate for Des. Group N").exists).ok();

    //Click create button
    await employeePagePopUp.clickConfirmButton();

    //Verify pop up is closed
    await t
        .expect(employeePagePopUp.popUpPanel.filterVisible().exists).notOk();

    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9999999999';

    //Verify that a new record has been created in the employees section
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();

});

test('09. Cancel the creation of an employee', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Click create employee button
    await employeePage.clickCreateButton();

    //Type an Employee Number
    await t
        .typeText(employeePagePopUp.employeeNumber, '1');

    //Click cancel button
    await employeePagePopUp.clickCancelButton();

    //Verify pop up is closed
    await t
        .expect(employeePagePopUp.popUpPanel.filterVisible().exists).notOk();

    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '1';

    //Verify that the entry was not created in the employees section
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).notOk();

    //Click create employee button
    await employeePage.clickCreateButton();

    //Verify employee popup create mode
    await employeePagePopUp.verifyCreateMode();

    //Search employee with Employee Number
    await t
        .typeText(employeePagePopUp.employeeNumber, '1');

    await employeePagePopUp.clickEmployeeFindButton();

    //Click cancel button
    await employeePagePopUp.clickCancelButton();

    //Verify pop up is closed
    await t
        .expect(employeePagePopUp.popUpPanel.filterVisible().exists).notOk();

    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '1';

    //Verify that the entry was not created in the employees section
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).notOk();

    //Click create employee button
    await employeePage.clickCreateButton();

    //Verify employee popup create mode
    await employeePagePopUp.verifyCreateMode();

    //Search employee with Employee Number
    await t
        .typeText(employeePagePopUp.employeeNumber, '1');

    await employeePagePopUp.clickEmployeeFindButton();

    //Fill fields
    await t
        .typeText(employeePagePopUp.employeeSIN, '1234567890123');

    //Select designated group code
    var groupCode = 'N';
    await selectInDropdownList(employeePagePopUp.designatedGroupCode, employeePagePopUp.designatedGroupCodeOptions, groupCode);

    //Select union code
    var unionCode = 'B2';
    await selectInDropdownList(employeePagePopUp.unionCode, employeePagePopUp.unionCodeOptions, unionCode);

    await t
        .typeText(employeePagePopUp.dateOfBirth, '1990 06 06');
    await closeDatePicker(employeePagePopUp.dateOfBirth);

    //Select gender
    var gender = 'F';
    await selectInDropdownList(employeePagePopUp.gender, employeePagePopUp.genderOptions, gender);

    //Select class code
    var classCode = '21134';
    await selectInDropdownList(employeePagePopUp.classCode, employeePagePopUp.classCodeOptions, classCode);

    //Select increment
    var increment = '9';
    await selectInDropdownList(employeePagePopUp.increment, employeePagePopUp.incrementOptions, increment);

    await t
        .typeText(employeePagePopUp.seniorityStartDate, '2020 06 06');
    await closeDatePicker(employeePagePopUp.seniorityStartDate);

    //Select job status
    var jobStatus = 'F';
    await selectInDropdownList(employeePagePopUp.jobStatus.parent(), employeePagePopUp.jobStatusOptions, jobStatus);

    //Click cancel button
    await employeePagePopUp.clickCancelButton();

    //Verify pop up is closed
    await t
        .expect(employeePagePopUp.popUpPanel.filterVisible().exists).notOk();

    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '1';

    //Verify that the entry was not created in the employees section
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).notOk();

    //Click create employee button
    await employeePage.clickCreateButton();

    //Verify employee popup create mode
    await employeePagePopUp.verifyCreateMode();
});

test('10. Create employee - Test the input limit of all fields', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Click create employee button
    await employeePage.clickCreateButton();

    //Prepare employee with Employee Number
    await t
        .typeText(employeePagePopUp.employeeNumber, '9998899999999999999999999');

    //Validate max 10 on employee number
    await t
        .expect(employeePagePopUp.employeeNumber.value).eql('9998899999', 'Employeee number too long');

    await employeePagePopUp.clickEmployeeFindButton();

    //Validate max 9 and no alpha on employee SIN
    await t
        .typeText(employeePagePopUp.employeeSIN, '12s3e4d567890123');

    await t
        .expect(employeePagePopUp.employeeSIN.value).eql('123456789', 'SIN validation incorrect');

    //Validate max 4 and no alpha on wage rate
    await t
        .selectText(employeePagePopUp.wageRate)
        .typeText(employeePagePopUp.wageRate, '1sdd23456');

    await t
        .expect(employeePagePopUp.wageRate.value).eql('$123', 'wage rate validation incorrect');

    //Validate max 5 and no alpha on regular paid hours
    await t
        .selectText(employeePagePopUp.regularPaidHours)
        .typeText(employeePagePopUp.regularPaidHours, '1sdd23456');

    await t
        .expect(employeePagePopUp.regularPaidHours.value).eql('12,345', 'wage rate validation incorrect');

    //Validate max 5 and no alpha on vacation hours
    await t
        .selectText(employeePagePopUp.vacationHours)
        .typeText(employeePagePopUp.vacationHours, '1sdd23456');

    await t
        .expect(employeePagePopUp.vacationHours.value).eql('12,345', 'vacation hours validation incorrect');

    //Validate max 5 and no alpha on layered-over position
    await t
        .typeText(employeePagePopUp.layeredOverPosition, '1sdd23456');

    await t
        .expect(employeePagePopUp.layeredOverPosition.value).eql('12,345', 'layered over position validation incorrect');

    //Validate birthdate
    //Validate datepicker filter for birthdate
    await t
        .typeText(employeePagePopUp.dateOfBirth, '222ds2dsd2sd2d2s');
    await closeDatePicker(employeePagePopUp.dateOfBirth);

    await t
        .expect(employeePagePopUp.dateOfBirth.value).eql('2222 02 22', 'date of birth filter incorrect');

    //Validate datepicker filter for termination date
    await t
        .typeText(employeePagePopUp.terminationDate, '222ds2dsd2sd2d2s');
    await closeDatePicker(employeePagePopUp.terminationDate);

    await t
        .expect(employeePagePopUp.terminationDate.value).eql('2222 02 22', 'termination date filter incorrect');

    //Validate datepicker filter for date of hire
    await t
        .typeText(employeePagePopUp.originalDateOfHire, '222ds2dsd2sd2d2s');
    await closeDatePicker(employeePagePopUp.originalDateOfHire);

    await t
        .expect(employeePagePopUp.originalDateOfHire.value).eql('2222 02 22', 'date of hire filter incorrect');

    //Validate datepicker filter for seniority start date
    await t
        .typeText(employeePagePopUp.seniorityStartDate, '222ds2dsd2sd2d2s');
    await closeDatePicker(employeePagePopUp.seniorityStartDate);

    await t
        .expect(employeePagePopUp.seniorityStartDate.value).eql('2222 02 22', 'seniority start date filter incorrect');

    //Select designated group code
    var groupCode = 'N';
    await selectInDropdownList(employeePagePopUp.designatedGroupCode, employeePagePopUp.designatedGroupCodeOptions, groupCode);

    //Select union code
    var unionCode = 'B2';
    await selectInDropdownList(employeePagePopUp.unionCode, employeePagePopUp.unionCodeOptions, unionCode);

    //Select gender
    var gender = 'F';
    await selectInDropdownList(employeePagePopUp.gender, employeePagePopUp.genderOptions, gender);

    //Select class code
    var classCode = '21134';
    await selectInDropdownList(employeePagePopUp.classCode, employeePagePopUp.classCodeOptions, classCode);

    //Select increment
    var increment = '9';
    await selectInDropdownList(employeePagePopUp.increment, employeePagePopUp.incrementOptions, increment);

    //Select job status
    var jobStatus = 'F';
    await selectInDropdownList(employeePagePopUp.jobStatus.parent(), employeePagePopUp.jobStatusOptions, jobStatus);

    //Validate Wage Rate: Value is less than allowable min of $6.00
    await t
        .selectText(employeePagePopUp.wageRate)
        .typeText(employeePagePopUp.wageRate, '1');

    await t
        .expect(employeePagePopUp.wageRate.value).eql('$1', 'wage rate validation incorrect');

    //Click create button
    await employeePagePopUp.clickConfirmButton();

    //Verify error message is displayed: Wage Rate: Value is less than allowable min of $6.00
    await t
        .expect(employeePagePopUp.errorMessages().withText("Wage Rate: Value is less than allowable min of $6.00").exists).ok();

    await t
        .selectText(employeePagePopUp.wageRate)
        .typeText(employeePagePopUp.wageRate, '7');

    // Validate Date of Birth: Age is less than expected min of 16
    //Click create button
    await employeePagePopUp.clickConfirmButton();

    //Verify error message is displayed: Date of Birth: Age is less than expected min of 16
    await t
        .expect(employeePagePopUp.warningMessages().withText("Date of Birth: Age is less than expected min of 16").exists).ok();

    // Validate Date of Birth: Value must be after 1900 01 01
    await t
        .setTestSpeed(0.5)
        .selectText(employeePagePopUp.dateOfBirth)
        .pressKey('delete')
        .typeText(employeePagePopUp.dateOfBirth, '10100101');
    await closeDatePicker(employeePagePopUp.dateOfBirth);

    await t
        .expect(employeePagePopUp.dateOfBirth.value).eql('1010 01 01', 'date of birth filter incorrect');

    //Click create button
    await employeePagePopUp.clickConfirmButton();

    //Verify error message is displayed: Date of Birth: Value must be after 1900 01 01
    await t
        .expect(employeePagePopUp.errorMessages().withText("Date of Birth: Value must be after 1900 01 01").exists).ok();

    // Validate Date of Birth: Age is greater than expected max of 79
    await t
        .setTestSpeed(0.5)
        .selectText(employeePagePopUp.dateOfBirth)
        .pressKey('delete')
        .typeText(employeePagePopUp.dateOfBirth, '19100101');
    await closeDatePicker(employeePagePopUp.dateOfBirth);

    await t
        .expect(employeePagePopUp.dateOfBirth.value).eql('1910 01 01', 'date of birth filter incorrect');

    await closeDatePicker(employeePagePopUp.dateOfBirth);

    //Click create button
    await employeePagePopUp.clickConfirmButton();

    //Verify error message is displayed: Date of Birth: Age is greater than expected max of 79
    await t
        .wait(100)
        .expect(employeePagePopUp.warningMessages().withText("Date of Birth: Age is greater than expected max of 79").exists).ok();
});

test('11. Create employee, go to next and create next employee', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Click create employee button
    await employeePage.clickCreateButton();

    //Type an Employee Number
    await t
        .typeText(employeePagePopUp.employeeNumber, '9988999999');

    // Get in edit mode
    await employeePagePopUp.clickEmployeeFindButton();

    //Fill fields
    await t
        .typeText(employeePagePopUp.employeeSIN, '1234567890123');

    //Select designated group code
    var groupCode = 'N';
    await selectInDropdownList(employeePagePopUp.designatedGroupCode, employeePagePopUp.designatedGroupCodeOptions, groupCode);

    //Select union code
    var unionCode = 'B2';
    await selectInDropdownList(employeePagePopUp.unionCode, employeePagePopUp.unionCodeOptions, unionCode);

    //Enter birthdate
    await t
        .typeText(employeePagePopUp.dateOfBirth, '1990 06 06');
    await closeDatePicker(employeePagePopUp.dateOfBirth);

    //Select gender
    var gender = 'F';
    await selectInDropdownList(employeePagePopUp.gender, employeePagePopUp.genderOptions, gender);

    //Select class code
    var classCode = '21134';
    await selectInDropdownList(employeePagePopUp.classCode, employeePagePopUp.classCodeOptions, classCode);

    //Select increment
    var increment = '9';
    await selectInDropdownList(employeePagePopUp.increment, employeePagePopUp.incrementOptions, increment);

    //Enter original date of hire
    await t
        .typeText(employeePagePopUp.originalDateOfHire, '2020 06 06');
    await closeDatePicker(employeePagePopUp.originalDateOfHire);

    //Enter seniority start date
    await t
        .typeText(employeePagePopUp.seniorityStartDate, '2020 06 06');
    await closeDatePicker(employeePagePopUp.seniorityStartDate);

    //Select job status
    var jobStatus = 'F';
    await selectInDropdownList(employeePagePopUp.jobStatus.parent(), employeePagePopUp.jobStatusOptions, jobStatus);

    //Enter wage rate
    await t
        .typeText(employeePagePopUp.wageRate, '9999999999999999');

    //Enter paid hours
    await t
        .typeText(employeePagePopUp.regularPaidHours, '99999999999999999');

    //Enter vacation hours
    await t
        .typeText(employeePagePopUp.vacationHours, '999999999999999');

    //Go to next employee creation
    await employeePagePopUp.clickNextButton();

    //Go to next employee creation
    await employeePagePopUp.clickNextButton();

    //Create an other employee
    //Type an Employee Number
    await t
        .typeText(employeePagePopUp.employeeNumber, '9988889999');

    // Get in edit mode
    await employeePagePopUp.clickEmployeeFindButton();

    //Fill fields
    await t
        .typeText(employeePagePopUp.employeeSIN, '1234567890123');

    //Select designated group code
    var groupCode = 'N';
    await selectInDropdownList(employeePagePopUp.designatedGroupCode, employeePagePopUp.designatedGroupCodeOptions, groupCode);

    //Select union code
    var unionCode = 'B2';
    await selectInDropdownList(employeePagePopUp.unionCode, employeePagePopUp.unionCodeOptions, unionCode);

    //Enter birthdate
    await t
        .typeText(employeePagePopUp.dateOfBirth, '1990 06 06');
    await closeDatePicker(employeePagePopUp.dateOfBirth);

    //Select gender
    var gender = 'F';
    await selectInDropdownList(employeePagePopUp.gender, employeePagePopUp.genderOptions, gender);

    //Select class code
    var classCode = '21134';
    await selectInDropdownList(employeePagePopUp.classCode, employeePagePopUp.classCodeOptions, classCode);

    //Select increment
    var increment = '9';
    await selectInDropdownList(employeePagePopUp.increment, employeePagePopUp.incrementOptions, increment);

    //Enter original date of hire
    await t
        .typeText(employeePagePopUp.originalDateOfHire, '2020 06 06');
    await closeDatePicker(employeePagePopUp.originalDateOfHire);

    //Enter seniority start date
    await t
        .typeText(employeePagePopUp.seniorityStartDate, '2020 06 06');
    await closeDatePicker(employeePagePopUp.seniorityStartDate);

    //Select job status
    var jobStatus = 'F';
    await selectInDropdownList(employeePagePopUp.jobStatus.parent(), employeePagePopUp.jobStatusOptions, jobStatus);

    //Enter wage rate
    await t
        .typeText(employeePagePopUp.wageRate, '9999999999999999');

    //Enter paid hours
    await t
        .typeText(employeePagePopUp.regularPaidHours, '99999999999999999');

    //Enter vacation hours
    await t
        .typeText(employeePagePopUp.vacationHours, '999999999999999');

    //Click create button
    await employeePagePopUp.clickConfirmButton();

    //Verify error message is displayed: A payroll summary already exists for this period
    await t
        .expect(employeePagePopUp.warningMessages().withText("Possible excessive Wage Rate for Des. Group N").exists).ok();

    //Click create button
    await employeePagePopUp.clickConfirmButton();

    //Verify pop up is closed
    await t
        .wait(1000)
        .expect(employeePagePopUp.popUpPanel.filterVisible().exists).notOk();

    //Validate both employees have been created
    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber1 = '9988999999';
    var employeeNumber2 = '9988889999';

    //Verify that a new record has been created in the employees section
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber1)).ok();

    //Verify that a new record has been created in the employees section
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber2)).ok();
});

test('12. Create employee, go to next and cancel the creation of the next employee', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Click create employee button
    await employeePage.clickCreateButton();

    //Type an Employee Number
    await t
        .typeText(employeePagePopUp.employeeNumber, '9889999999');

    // Get in edit mode
    await employeePagePopUp.clickEmployeeFindButton();

    //Fill fields
    await t
        .typeText(employeePagePopUp.employeeSIN, '1234567890123');

    //Select designated group code
    var groupCode = 'N';
    await selectInDropdownList(employeePagePopUp.designatedGroupCode, employeePagePopUp.designatedGroupCodeOptions, groupCode);

    //Select union code
    var unionCode = 'B2';
    await selectInDropdownList(employeePagePopUp.unionCode, employeePagePopUp.unionCodeOptions, unionCode);

    //Enter birthdate
    await t
        .typeText(employeePagePopUp.dateOfBirth, '1990 06 06');
    await closeDatePicker(employeePagePopUp.dateOfBirth);

    //Select gender
    var gender = 'F';
    await selectInDropdownList(employeePagePopUp.gender, employeePagePopUp.genderOptions, gender);

    //Select class code
    var classCode = '21134';
    await selectInDropdownList(employeePagePopUp.classCode, employeePagePopUp.classCodeOptions, classCode);

    //Select increment
    var increment = '9';
    await selectInDropdownList(employeePagePopUp.increment, employeePagePopUp.incrementOptions, increment);

    //Enter original date of hire
    await t
        .typeText(employeePagePopUp.originalDateOfHire, '2020 06 06');
    await closeDatePicker(employeePagePopUp.originalDateOfHire);

    //Enter seniority start date
    await t
        .typeText(employeePagePopUp.seniorityStartDate, '2020 06 06');
    await closeDatePicker(employeePagePopUp.seniorityStartDate);

    //Select job status
    var jobStatus = 'F';
    await selectInDropdownList(employeePagePopUp.jobStatus.parent(), employeePagePopUp.jobStatusOptions, jobStatus);

    //Enter wage rate
    await t
        .typeText(employeePagePopUp.wageRate, '9999999999999999');

    //Enter paid hours
    await t
        .typeText(employeePagePopUp.regularPaidHours, '99999999999999999');

    //Enter vacation hours
    await t
        .typeText(employeePagePopUp.vacationHours, '999999999999999');

    //Go to next employee creation
    await employeePagePopUp.clickNextButton();

    //Verify warning message is displayed: Possible excessive Wage Rate for Des. Group N
    await t
        .expect(employeePagePopUp.warningMessages().withText("Possible excessive Wage Rate for Des. Group N").exists).ok();

    //Go to next employee creation
    await employeePagePopUp.clickNextButton();

    //Click cancel button
    await employeePagePopUp.clickCancelButton();

    //Verify pop up is closed
    await t
        .expect(employeePagePopUp.popUpPanel.filterVisible().exists).notOk();

    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9889999999';

    //Verify that the step entry was created in the employees section
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();
});

test('13. Update employee', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9988999999';

    //Verify that the selected employee for update exist
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();

    var index = employeePage.dataIndexOfEmployee(employeesData, employeeNumber);

    //Select the target for update
    var employeeSelected = employeePage.employees().nth(index);
    await t
        .click(employeeSelected);

    //Update wage rate
    await t
        .selectText(employeePagePopUp.wageRate)
        .typeText(employeePagePopUp.wageRate, '33');

    await t
        .expect(employeePagePopUp.wageRate.value).eql('$33', 'wage rate validation incorrect');

    //Update regular paid hours
    await t
        .selectText(employeePagePopUp.regularPaidHours)
        .typeText(employeePagePopUp.regularPaidHours, '33');

    await t
        .expect(employeePagePopUp.regularPaidHours.value).eql('33', 'regular paid hours validation incorrect');

    //Update vacation hours
    await t
        .selectText(employeePagePopUp.vacationHours)
        .typeText(employeePagePopUp.vacationHours, '33');

    await t
        .expect(employeePagePopUp.vacationHours.value).eql('33', 'vacation hours validation incorrect');

    //Update layered-over position
    await t
        .selectText(employeePagePopUp.layeredOverPosition)
        .typeText(employeePagePopUp.layeredOverPosition, '33');

    await t
        .expect(employeePagePopUp.layeredOverPosition.value).eql('33', 'layered over position validation incorrect');

    //Update birthdate
    await t
        .selectText(employeePagePopUp.dateOfBirth)
        .typeText(employeePagePopUp.dateOfBirth, '19880101');
    await closeDatePicker(employeePagePopUp.dateOfBirth);

    await t
        .expect(employeePagePopUp.dateOfBirth.value).eql('1988 01 01', 'date of birth filter incorrect');

    //Update termination date
    await t
        .selectText(employeePagePopUp.terminationDate)
        .typeText(employeePagePopUp.terminationDate, '33333333330');
    await closeDatePicker(employeePagePopUp.terminationDate);

    await t
        .expect(employeePagePopUp.terminationDate.value).eql('3333 03 30', 'termination date filter incorrect');

    //Update date of hire
    await t
        .selectText(employeePagePopUp.originalDateOfHire)
        .typeText(employeePagePopUp.originalDateOfHire, '20200101');
    await closeDatePicker(employeePagePopUp.originalDateOfHire);

    await t
        .expect(employeePagePopUp.originalDateOfHire.value).eql('2020 01 01', 'date of hire filter incorrect');

    //Update seniority start date
    await t
        .selectText(employeePagePopUp.seniorityStartDate)
        .typeText(employeePagePopUp.seniorityStartDate, '2020 01 01');
    await closeDatePicker(employeePagePopUp.seniorityStartDate);

    await t
        .expect(employeePagePopUp.seniorityStartDate.value).eql('2020 01 01', 'seniority start date filter incorrect');

    //Update designated group code
    var groupCode = 'F';
    await selectInDropdownList(employeePagePopUp.designatedGroupCode, employeePagePopUp.designatedGroupCodeOptions, groupCode);

    //Update union code
    var unionCode = 'U3';
    await selectInDropdownList(employeePagePopUp.unionCode, employeePagePopUp.unionCodeOptions, unionCode);

    //Update gender
    var gender = 'M';
    await selectInDropdownList(employeePagePopUp.gender, employeePagePopUp.genderOptions, gender);

    //Update class code
    var classCode = '18307';
    await selectInDropdownList(employeePagePopUp.classCode, employeePagePopUp.classCodeOptions, classCode);

    //Update increment
    var increment = '3';
    await selectInDropdownList(employeePagePopUp.increment, employeePagePopUp.incrementOptions, increment);

    //Update job status
    var jobStatus = 'P';
    await selectInDropdownList(employeePagePopUp.jobStatus.parent(), employeePagePopUp.jobStatusOptions, jobStatus);

    //Update termination code
    var terminationCode = '5';
    await selectInDropdownList(employeePagePopUp.terminationCode, employeePagePopUp.terminationCodeOptions, terminationCode);

    //Click confirm update button
    await employeePagePopUp.clickConfirmUpdateButton();

    //Verify pop up is closed
    await t
        .expect(employeePagePopUp.popUpPanel.filterVisible().exists).notOk();

    //Validate the updated values
    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9988999999';

    //Verify that the selected employee for update exist
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();

    var index = employeePage.dataIndexOfEmployee(employeesData, employeeNumber);

    //Select the target for update
    var employeeSelected = employeePage.employees().nth(index);
    await t
        .click(employeeSelected);

    //Validate wage rate
    await t
        .expect(employeePagePopUp.wageRate.value).eql('$33.00', 'wage rate validation incorrect');

    //Validate regular paid hours
    await t
        .expect(employeePagePopUp.regularPaidHours.value).eql('33.00', 'regular paid hours validation incorrect');

    //Validate vacation hours
    await t
        .expect(employeePagePopUp.vacationHours.value).eql('33.00', 'vacation hours validation incorrect');

    //Validate layered-over position
    await t
        .expect(employeePagePopUp.layeredOverPosition.value).eql('33', 'layered over position validation incorrect');

    //Validate birthdate
    await t
        .expect(employeePagePopUp.dateOfBirth.value).eql('1988 01 01', 'date of birth filter incorrect');

    //Validate termination date
    await t
        .expect(employeePagePopUp.terminationDate.value).eql('3333 03 30', 'termination date filter incorrect');

    //Validate date of hire
    await t
        .expect(employeePagePopUp.originalDateOfHire.value).eql('2020 01 01', 'date of hire filter incorrect');

    //Validate seniority start date
    await t
        .expect(employeePagePopUp.seniorityStartDate.value).eql('2020 01 01', 'seniority start date filter incorrect');

    //Validate designated group code
    await t
        .expect(employeePagePopUp.designatedGroupCodeValue.textContent).eql('F - Facilities');

    //Validate union code
    await t
        .expect(employeePagePopUp.unionCodeValue.textContent).eql('U3 - UFCW - United Food and Commercial Workers Union', 'union code filter incorrect');

    //Validate gender code
    await t
        .expect(employeePagePopUp.genderValue.textContent).eql('M - Male', 'gender filter incorrect');

    //Validate class code
    await t
        .expect(employeePagePopUp.classCodeValue.textContent).eql('18307 - Elevator Mechanic');

    //Validate increment
    await t
        .expect(employeePagePopUp.incrementValue.textContent).eql('3', 'increment filter incorrect');

    //Validate job status
    await t
        .expect(employeePagePopUp.jobStatus.textContent).eql('P - Regular Part Time', 'job status filter incorrect');

    //Click cancel button
    await employeePagePopUp.clickCancelButton();

    //Verify popup is closed
    await t
        .expect(employeePagePopUp.popUpPanel.filterVisible().exists).notOk();
});

test('14. Cancel the update of an employee', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9889999999';

    //Verify that the selected employee for update exist
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();

    var index = employeePage.dataIndexOfEmployee(employeesData, employeeNumber);


    //Select the target for update
    var employeeSelected = employeePage.employees().nth(index);
    await t
        .click(employeeSelected);

    //Select designated group code
    var groupCode = 'C';
    await selectInDropdownList(employeePagePopUp.designatedGroupCode, employeePagePopUp.designatedGroupCodeOptions, groupCode);

    //Click Cancel button
    await employeePagePopUp.clickCancelButton();

    //Get the designated group on the updated employee
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9889999999';
    var dGroup = employeePage.employeeDesignatedGroup(employeesData, employeeNumber);

    //Validate the value was not changed
    await t
        .expect(dGroup).eql('N - Nurses', 'Value was updated on a cancel');
});

test('15. Update employee, go to next and update next employee', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9988999999';

    //Verify that the selected employee for update exist
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();

    var index = employeePage.dataIndexOfEmployee(employeesData, employeeNumber);

    //Select the target for update
    var employeeSelected = employeePage.employees().nth(index);
    await t
        .click(employeeSelected);

    //Update wage rate
    await t
        .selectText(employeePagePopUp.wageRate)
        .typeText(employeePagePopUp.wageRate, '44');

    await t
        .expect(employeePagePopUp.wageRate.value).eql('$44', 'wage rate validation incorrect');

    //Update regular paid hours
    await t
        .selectText(employeePagePopUp.regularPaidHours)
        .typeText(employeePagePopUp.regularPaidHours, '44');

    await t
        .expect(employeePagePopUp.regularPaidHours.value).eql('44', 'regular paid hours validation incorrect');

    //Update vacation hours
    await t
        .selectText(employeePagePopUp.vacationHours)
        .typeText(employeePagePopUp.vacationHours, '44');

    await t
        .expect(employeePagePopUp.vacationHours.value).eql('44', 'vacation hours validation incorrect');

    //Update layered-over position
    await t
        .selectText(employeePagePopUp.layeredOverPosition)
        .typeText(employeePagePopUp.layeredOverPosition, '44');

    await t
        .expect(employeePagePopUp.layeredOverPosition.value).eql('44', 'layered over position validation incorrect');

    //Update birthdate
    await t
        .selectText(employeePagePopUp.dateOfBirth)
        .typeText(employeePagePopUp.dateOfBirth, '19990101');
    await closeDatePicker(employeePagePopUp.dateOfBirth);

    await t
        .expect(employeePagePopUp.dateOfBirth.value).eql('1999 01 01', 'date of birth filter incorrect');

    //Update termination date
    await t
        .selectText(employeePagePopUp.terminationDate)
        .typeText(employeePagePopUp.terminationDate, '2222222222222');
    await closeDatePicker(employeePagePopUp.terminationDate);

    await t
        .expect(employeePagePopUp.terminationDate.value).eql('2222 02 22', 'termination date filter incorrect');

    //Update date of hire
    await t
        .selectText(employeePagePopUp.originalDateOfHire)
        .typeText(employeePagePopUp.originalDateOfHire, '20200202');
    await closeDatePicker(employeePagePopUp.originalDateOfHire);

    await t
        .expect(employeePagePopUp.originalDateOfHire.value).eql('2020 02 02', 'date of hire filter incorrect');

    //Update seniority start date
    await t
        .selectText(employeePagePopUp.seniorityStartDate)
        .typeText(employeePagePopUp.seniorityStartDate, '2020 02 02');
    await closeDatePicker(employeePagePopUp.seniorityStartDate);

    await t
        .expect(employeePagePopUp.seniorityStartDate.value).eql('2020 02 02', 'seniority start date filter incorrect');

    //Update designated group code
    var groupCode = 'N';
    await selectInDropdownList(employeePagePopUp.designatedGroupCode, employeePagePopUp.designatedGroupCodeOptions, groupCode);

    //Update union code
    var unionCode = 'B2';
    await selectInDropdownList(employeePagePopUp.unionCode, employeePagePopUp.unionCodeOptions, unionCode);

    //Update gender
    var gender = 'F';
    await selectInDropdownList(employeePagePopUp.gender, employeePagePopUp.genderOptions, gender);

    //Update class code
    var classCode = '21003';
    await selectInDropdownList(employeePagePopUp.classCode, employeePagePopUp.classCodeOptions, classCode);

    //Update increment
    var increment = '4';
    await selectInDropdownList(employeePagePopUp.increment, employeePagePopUp.incrementOptions, increment);

    //Update job status
    var jobStatus = 'F';
    await selectInDropdownList(employeePagePopUp.jobStatus.parent(), employeePagePopUp.jobStatusOptions, jobStatus);

    //Update termination code
    var terminationCode = '5';
    await selectInDropdownList(employeePagePopUp.terminationCode, employeePagePopUp.terminationCodeOptions, terminationCode);

    //Click confirm update next button
    await employeePagePopUp.clickNextUpdateButton();

    //Update next ******
    //Get the employees in the table
    var employeesData2 = await employeePage.employeesData();
    var employeeNumber = '9889999999';

    //Update wage rate
    await t
        .selectText(employeePagePopUp.wageRate)
        .typeText(employeePagePopUp.wageRate, '55');

    await t
        .expect(employeePagePopUp.wageRate.value).eql('$55', 'wage rate validation incorrect');

    //Update regular paid hours
    await t
        .selectText(employeePagePopUp.regularPaidHours)
        .typeText(employeePagePopUp.regularPaidHours, '55');

    await t
        .expect(employeePagePopUp.regularPaidHours.value).eql('55', 'regular paid hours validation incorrect');

    //Update vacation hours
    await t
        .selectText(employeePagePopUp.vacationHours)
        .typeText(employeePagePopUp.vacationHours, '55');

    await t
        .expect(employeePagePopUp.vacationHours.value).eql('55', 'vacation hours validation incorrect');

    //Update layered-over position
    await t
        .selectText(employeePagePopUp.layeredOverPosition)
        .typeText(employeePagePopUp.layeredOverPosition, '55');

    await t
        .expect(employeePagePopUp.layeredOverPosition.value).eql('55', 'layered over position validation incorrect');

    //Update birthdate
    await t
        .selectText(employeePagePopUp.dateOfBirth)
        .typeText(employeePagePopUp.dateOfBirth, '19770101');
    await closeDatePicker(employeePagePopUp.dateOfBirth);

    await t
        .expect(employeePagePopUp.dateOfBirth.value).eql('1977 01 01', 'date of birth filter incorrect');

    //Update termination date
    await t
        .selectText(employeePagePopUp.terminationDate)
        .typeText(employeePagePopUp.terminationDate, '222211111111');
    await closeDatePicker(employeePagePopUp.terminationDate);

    await t
        .expect(employeePagePopUp.terminationDate.value).eql('2222 11 11', 'termination date filter incorrect');

    //Update date of hire
    await t
        .selectText(employeePagePopUp.originalDateOfHire)
        .typeText(employeePagePopUp.originalDateOfHire, '20200303');
    await closeDatePicker(employeePagePopUp.originalDateOfHire);

    await t
        .expect(employeePagePopUp.originalDateOfHire.value).eql('2020 03 03', 'date of hire filter incorrect');

    //Update seniority start date
    await t
        .selectText(employeePagePopUp.seniorityStartDate)
        .typeText(employeePagePopUp.seniorityStartDate, '2020 03 03');
    await closeDatePicker(employeePagePopUp.seniorityStartDate);

    await t
        .expect(employeePagePopUp.seniorityStartDate.value).eql('2020 03 03', 'seniority start date filter incorrect');

    //Update designated group code
    var groupCode = 'C';
    await selectInDropdownList(employeePagePopUp.designatedGroupCode, employeePagePopUp.designatedGroupCodeOptions, groupCode);

    //Update union code
    var unionCode = 'C3';
    await selectInDropdownList(employeePagePopUp.unionCode, employeePagePopUp.unionCodeOptions, unionCode);

    //Update gender
    var gender = 'F';
    await selectInDropdownList(employeePagePopUp.gender, employeePagePopUp.genderOptions, gender);

    //Update class code
    var classCode = '80103';
    await selectInDropdownList(employeePagePopUp.classCode, employeePagePopUp.classCodeOptions, classCode);

    //Update increment
    var increment = '5';
    await selectInDropdownList(employeePagePopUp.increment, employeePagePopUp.incrementOptions, increment);

    //Update job status
    var jobStatus = 'C';
    await selectInDropdownList(employeePagePopUp.jobStatus.parent(), employeePagePopUp.jobStatusOptions, jobStatus);

    //Update termination code
    var terminationCode = '5';
    await selectInDropdownList(employeePagePopUp.terminationCode, employeePagePopUp.terminationCodeOptions, terminationCode);

    //Click confirm update button
    await employeePagePopUp.clickConfirmUpdateButton();

    //Verify error message is displayed: Increment: Invalid combination with Des. Group Code
    await t
        .expect(employeePagePopUp.errorMessages().withText("Increment: Invalid combination with Des. Group Code").exists).ok();

    //Update increment
    var increment = '1';
    await selectInDropdownList(employeePagePopUp.increment, employeePagePopUp.incrementOptions, increment);

    //Click confirm update button
    await employeePagePopUp.clickConfirmUpdateButton();

    //Verify pop up is closed
    await t
        .expect(employeePagePopUp.popUpPanel.filterVisible().exists).notOk();

    //Validate the first updated values **************
    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9988999999';

    //Verify that the selected employee for update exist
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();

    var index = employeePage.dataIndexOfEmployee(employeesData, employeeNumber);

    //Select the target for update
    var employeeSelected = employeePage.employees().nth(index);
    await t
        .click(employeeSelected);

    //Validate wage rate
    await t
        .expect(employeePagePopUp.wageRate.value).eql('$44.00', 'wage rate validation incorrect');

    //Validate regular paid hours
    await t
        .expect(employeePagePopUp.regularPaidHours.value).eql('44.00', 'regular paid hours validation incorrect');

    //Validate vacation hours
    await t
        .expect(employeePagePopUp.vacationHours.value).eql('44.00', 'vacation hours validation incorrect');

    //Validate layered-over position
    await t
        .expect(employeePagePopUp.layeredOverPosition.value).eql('44', 'layered over position validation incorrect');

    //Validate birthdate
    await t
        .expect(employeePagePopUp.dateOfBirth.value).eql('1999 01 01', 'date of birth filter incorrect');

    //Validate termination date
    await t
        .expect(employeePagePopUp.terminationDate.value).eql('2222 02 22', 'termination date filter incorrect');

    //Validate date of hire
    await t
        .expect(employeePagePopUp.originalDateOfHire.value).eql('2020 02 02', 'date of hire filter incorrect');

    //Validate seniority start date
    await t
        .expect(employeePagePopUp.seniorityStartDate.value).eql('2020 02 02', 'seniority start date filter incorrect');

    //Validate designated group code
    await t
        .expect(employeePagePopUp.designatedGroupCodeValue.textContent).eql('N - Nurses');

    //Validate union code
    await t
        .expect(employeePagePopUp.unionCodeValue.textContent).eql('B2 - BCNU - British Columbia Nurses Union', 'union code filter incorrect');

    //Validate gender code
    await t
        .expect(employeePagePopUp.genderValue.textContent).eql('F - Female', 'gender filter incorrect');

    //Validate class code
    await t
        .expect(employeePagePopUp.classCodeValue.textContent).eql('21003 - Direct Patient Care - Profile Classification - Level 5');

    //Validate increment
    await t
        .expect(employeePagePopUp.incrementValue.textContent).eql('4', 'increment filter incorrect');

    //Validate job status
    await t
        .expect(employeePagePopUp.jobStatus.textContent).eql('F - Regular Full Time', 'job status filter incorrect');

    //Click cancel button
    await employeePagePopUp.clickCancelButton();

    //Verify pop up is closed
    await t
        .expect(employeePagePopUp.popUpPanel.filterVisible().exists).notOk();

    //Validate the second updated values **************
    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9889999999';

    //Verify that the selected employee for update exist
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();

    var index = employeePage.dataIndexOfEmployee(employeesData, employeeNumber);

    //Select the target for update
    var employeeSelected = employeePage.employees().nth(index);
    await t
        .click(employeeSelected);

    //Validate wage rate
    await t
        .expect(employeePagePopUp.wageRate.value).eql('$55.00', 'wage rate validation incorrect');

    //Validate regular paid hours
    await t
        .expect(employeePagePopUp.regularPaidHours.value).eql('55.00', 'regular paid hours validation incorrect');

    //Validate vacation hours
    await t
        .expect(employeePagePopUp.vacationHours.value).eql('55.00', 'vacation hours validation incorrect');

    //Validate layered-over position
    await t
        .expect(employeePagePopUp.layeredOverPosition.value).eql('55', 'layered over position validation incorrect');

    //Validate birthdate
    await t
        .expect(employeePagePopUp.dateOfBirth.value).eql('1977 01 01', 'date of birth filter incorrect');

    //Validate termination date
    await t
        .expect(employeePagePopUp.terminationDate.value).eql('2222 11 11', 'termination date filter incorrect');

    //Validate date of hire
    await t
        .expect(employeePagePopUp.originalDateOfHire.value).eql('2020 03 03', 'date of hire filter incorrect');

    //Validate seniority start date
    await t
        .expect(employeePagePopUp.seniorityStartDate.value).eql('2020 03 03', 'seniority start date filter incorrect');

    //Validate designated group code
    await t
        .expect(employeePagePopUp.designatedGroupCodeValue.textContent).eql('C - Community');

    //Validate union code
    await t
        .expect(employeePagePopUp.unionCodeValue.textContent).eql('C3 - CSWU - Construction and Specialised Workers Union');

    //Validate gender code
    await t
        .expect(employeePagePopUp.genderValue.textContent).eql('F - Female', 'gender filter incorrect');

    //Validate class code
    await t
        .expect(employeePagePopUp.classCodeValue.textContent).eql('80103 - Administrative Support 3');

    //Validate increment
    await t
        .expect(employeePagePopUp.incrementValue.textContent).eql('1', 'increment filter incorrect');

    //Validate job status
    await t
        .expect(employeePagePopUp.jobStatus.textContent).eql('C - Casual', 'job status filter incorrect');

    //Click cancel button
    await employeePagePopUp.clickCancelButton();

    //Verify pop up is closed
    await t
        .expect(employeePagePopUp.popUpPanel.filterVisible().exists).notOk();
});

test('16. Update employee, go to next and cancel the update of the next employee', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9988999999';

    //Verify that the selected employee for update exist
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();

    var index = employeePage.dataIndexOfEmployee(employeesData, employeeNumber);

    //Select the target for update
    var employeeSelected = employeePage.employees().nth(index);
    await t
        .click(employeeSelected);

    //Update wage rate
    await t
        .selectText(employeePagePopUp.wageRate)
        .typeText(employeePagePopUp.wageRate, '77');

    await t
        .expect(employeePagePopUp.wageRate.value).eql('$77', 'wage rate validation incorrect');

    //Update regular paid hours
    await t
        .selectText(employeePagePopUp.regularPaidHours)
        .typeText(employeePagePopUp.regularPaidHours, '77');

    await t
        .expect(employeePagePopUp.regularPaidHours.value).eql('77', 'regular paid hours validation incorrect');

    //Click confirm update next button
    await employeePagePopUp.clickNextUpdateButton();

    //Update next ******
    //Get the employees in the table
    var employeesData2 = await employeePage.employeesData();
    var employeeNumber = '9889999999';

    //Update wage rate
    await t
        .selectText(employeePagePopUp.wageRate)
        .typeText(employeePagePopUp.wageRate, '44');

    await t
        .expect(employeePagePopUp.wageRate.value).eql('$44', 'wage rate validation incorrect');

    //Update regular paid hours
    await t
        .selectText(employeePagePopUp.regularPaidHours)
        .typeText(employeePagePopUp.regularPaidHours, '44');

    await t
        .expect(employeePagePopUp.regularPaidHours.value).eql('44', 'regular paid hours validation incorrect');

    //Update vacation hours
    await t
        .selectText(employeePagePopUp.vacationHours)
        .typeText(employeePagePopUp.vacationHours, '44');

    await t
        .expect(employeePagePopUp.vacationHours.value).eql('44', 'vacation hours validation incorrect');

    //Update layered-over position
    await t
        .selectText(employeePagePopUp.layeredOverPosition)
        .typeText(employeePagePopUp.layeredOverPosition, '44');

    await t
        .expect(employeePagePopUp.layeredOverPosition.value).eql('44', 'layered over position validation incorrect');

    //Update birthdate
    await t
        .selectText(employeePagePopUp.dateOfBirth)
        .typeText(employeePagePopUp.dateOfBirth, '19990101');
    await closeDatePicker(employeePagePopUp.dateOfBirth);

    await t
        .expect(employeePagePopUp.dateOfBirth.value).eql('1999 01 01', 'date of birth filter incorrect');

    //Update termination date
    await t
        .selectText(employeePagePopUp.terminationDate)
        .typeText(employeePagePopUp.terminationDate, '2222222222222');
    await closeDatePicker(employeePagePopUp.terminationDate);

    await t
        .expect(employeePagePopUp.terminationDate.value).eql('2222 02 22', 'termination date filter incorrect');

    //Update date of hire
    await t
        .selectText(employeePagePopUp.originalDateOfHire)
        .typeText(employeePagePopUp.originalDateOfHire, '20200202');
    await closeDatePicker(employeePagePopUp.originalDateOfHire);

    await t
        .expect(employeePagePopUp.originalDateOfHire.value).eql('2020 02 02', 'date of hire filter incorrect');

    //Update seniority start date
    await t
        .selectText(employeePagePopUp.seniorityStartDate)
        .typeText(employeePagePopUp.seniorityStartDate, '2020 02 02');
    await closeDatePicker(employeePagePopUp.seniorityStartDate);

    await t
        .expect(employeePagePopUp.seniorityStartDate.value).eql('2020 02 02', 'seniority start date filter incorrect');

    //Update designated group code
    var groupCode = 'N';
    await selectInDropdownList(employeePagePopUp.designatedGroupCode, employeePagePopUp.designatedGroupCodeOptions, groupCode);

    //Update union code
    var unionCode = 'B2';
    await selectInDropdownList(employeePagePopUp.unionCode, employeePagePopUp.unionCodeOptions, unionCode);

    //Update gender
    var gender = 'F';
    await selectInDropdownList(employeePagePopUp.gender, employeePagePopUp.genderOptions, gender);

    //Update class code
    var classCode = '21003';
    await selectInDropdownList(employeePagePopUp.classCode, employeePagePopUp.classCodeOptions, classCode);

    //Update increment
    var increment = '4';
    await selectInDropdownList(employeePagePopUp.increment, employeePagePopUp.incrementOptions, increment);

    //Update job status
    var jobStatus = 'F';
    await selectInDropdownList(employeePagePopUp.jobStatus.parent(), employeePagePopUp.jobStatusOptions, jobStatus);

    //Update termination code
    var terminationCode = '5';
    await selectInDropdownList(employeePagePopUp.terminationCode, employeePagePopUp.terminationCodeOptions, terminationCode);

    //Click confirm update button
    await employeePagePopUp.clickCancelButton();

    //Verify pop up is closed
    await t
        .expect(employeePagePopUp.popUpPanel.filterVisible().exists).notOk();

    //Validate the first updated values **************
    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9988999999';

    //Verify that the selected employee for update exist
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();

    var index = employeePage.dataIndexOfEmployee(employeesData, employeeNumber);

    //Select the target for update
    var employeeSelected = employeePage.employees().nth(index);
    await t
        .click(employeeSelected);

    //Validate wage rate
    await t
        .expect(employeePagePopUp.wageRate.value).eql('$77.00', 'wage rate validation incorrect');

    //Validate regular paid hours
    await t
        .expect(employeePagePopUp.regularPaidHours.value).eql('77.00', 'regular paid hours validation incorrect');

    //Click cancel button
    await employeePagePopUp.clickCancelButton();

    //Verify pop up is closed
    await t
        .expect(employeePagePopUp.popUpPanel.filterVisible().exists).notOk();

    //Validate the second updated values **************
    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9889999999';

    //Verify that the selected employee for update exist
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();

    var index = employeePage.dataIndexOfEmployee(employeesData, employeeNumber);

    //Select the target for update
    var employeeSelected = employeePage.employees().nth(index);
    await t
        .click(employeeSelected);

    //Validate wage rate
    await t
        .expect(employeePagePopUp.wageRate.value).eql('$55.00', 'wage rate validation incorrect');

    //Validate regular paid hours
    await t
        .expect(employeePagePopUp.regularPaidHours.value).eql('55.00', 'regular paid hours validation incorrect');

    //Validate vacation hours
    await t
        .expect(employeePagePopUp.vacationHours.value).eql('55.00', 'vacation hours validation incorrect');

    //Validate layered-over position
    await t
        .expect(employeePagePopUp.layeredOverPosition.value).eql('55', 'layered over position validation incorrect');

    //Validate birthdate
    await t
        .expect(employeePagePopUp.dateOfBirth.value).eql('1977 01 01', 'date of birth filter incorrect');

    //Validate termination date
    await t
        .expect(employeePagePopUp.terminationDate.value).eql('2222 11 11', 'termination date filter incorrect');

    //Validate date of hire
    await t
        .expect(employeePagePopUp.originalDateOfHire.value).eql('2020 03 03', 'date of hire filter incorrect');

    //Validate seniority start date
    await t
        .expect(employeePagePopUp.seniorityStartDate.value).eql('2020 03 03', 'seniority start date filter incorrect');

    //Validate designated group code
    await t
        .expect(employeePagePopUp.designatedGroupCodeValue.textContent).eql('C - Community');

    //Validate union code
    await t
        .expect(employeePagePopUp.unionCodeValue.textContent).eql('C3 - CSWU - Construction and Specialised Workers Union');

    //Validate gender code
    await t
        .expect(employeePagePopUp.genderValue.textContent).eql('F - Female', 'gender filter incorrect');

    //Validate class code
    await t
        .expect(employeePagePopUp.classCodeValue.textContent).eql('80103 - Administrative Support 3');

    //Validate increment
    await t
        .expect(employeePagePopUp.incrementValue.textContent).eql('1', 'increment filter incorrect');

    //Validate job status
    await t
        .expect(employeePagePopUp.jobStatus.textContent).eql('C - Casual', 'job status filter incorrect');

    //Click cancel button
    await employeePagePopUp.clickCancelButton();

    //Verify pop up is closed
    await t
        .expect(employeePagePopUp.popUpPanel.filterVisible().exists).notOk();

});

test('17. Delete employee', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9889999999';

    //Verify that the selected employee for deletion exist
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();

    var index = employeePage.dataIndexOfEmployee(employeesData, employeeNumber);

    //Select the target for deletion
    var employeeSelected = employeePage.employees().nth(index);
    await t
        .click(employeeSelected);

    //Delete the selected employee
    await employeePagePopUp.clickDeleteButton();

    //Click Confirm Delete button
    await employeePagePopUp.clickConfirmDeleteButton();

    await t
        .wait(1000);

    //Get the employees in the table
    var employeesData1 = await employeePage.employeesData();
    var employeeNumber = '9889999999';

    //Verify that the selected employee for deletion is deleted
    await t
        .expect(employeePage.dataContainsEmployee(employeesData1, employeeNumber)).notOk();
});

test('18. Cancel the delete of an employee', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9988999999';

    //Verify that the selected employee for deletion exist
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();

    var index = employeePage.dataIndexOfEmployee(employeesData, employeeNumber);


    //Select the target for deletion
    var employeeSelected = employeePage.employees().nth(index);
    await t
        .click(employeeSelected);

    //Delete the selected employee
    await employeePagePopUp.clickDeleteButton();

    //Click Confirm Delete button
    await employeePagePopUp.clickConfirmCancelButton();


    //Click Confirm Delete button
    await employeePagePopUp.clickCancelButton();

    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9988999999';

    //Verify that the selected employee for deletion is not deleted
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();
});

test('19. Update employee, go to next and delete the next employee', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9988999999';

    //Verify that the selected employee for update exist
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();

    var index = employeePage.dataIndexOfEmployee(employeesData, employeeNumber);

    //Select the target for update
    var employeeSelected = employeePage.employees().nth(index);
    await t
        .click(employeeSelected);

    //Update wage rate
    await t
        .selectText(employeePagePopUp.wageRate)
        .typeText(employeePagePopUp.wageRate, '88');

    await t
        .expect(employeePagePopUp.wageRate.value).eql('$88', 'wage rate validation incorrect');

    //Update regular paid hours
    await t
        .selectText(employeePagePopUp.regularPaidHours)
        .typeText(employeePagePopUp.regularPaidHours, '88');

    await t
        .expect(employeePagePopUp.regularPaidHours.value).eql('88', 'regular paid hours validation incorrect');

    //Click confirm update next button
    await employeePagePopUp.clickNextUpdateButton();

    //Delete the selected employee
    await employeePagePopUp.clickDeleteButton();

    //Click Confirm Delete button
    await employeePagePopUp.clickConfirmDeleteButton();

    await t
        .wait(1000);

    //Get the employees in the table
    var employeesData1 = await employeePage.employeesData();
    var employeeNumber = '9988889999';

    //Verify that the selected employee for deletion is deleted
    await t
        .wait(2000)
        .expect(employeePage.dataContainsEmployee(employeesData1, employeeNumber)).notOk();

    //Validate the first updated values **************
    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9988999999';

    //Verify that the selected employee for update exist
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();

    var index = employeePage.dataIndexOfEmployee(employeesData, employeeNumber);

    //Select the target for update
    var employeeSelected = employeePage.employees().nth(index);
    await t
        .click(employeeSelected);

    //Validate wage rate
    await t
        .wait(1000)
        .expect(employeePagePopUp.wageRate.value).eql('$88.00', 'wage rate validation incorrect');

    //Validate regular paid hours
    await t
        .expect(employeePagePopUp.regularPaidHours.value).eql('88.00', 'regular paid hours validation incorrect');

    //Click cancel button
    await employeePagePopUp.clickCancelButton();

    //Verify pop up is closed
    await t
        .expect(employeePagePopUp.popUpPanel.filterVisible().exists).notOk();

});

test('20. Create designated group', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Click create designated group button
    await desGroupsPage.clickCreateButton();

    //Verify designated group popup create mode
    await desGroupsPagePopUp.verifyCreateMode();

    //Fill fields
    var designatedGroupDescription = 'Ambulance Paramedics and Dispatchers';
    await selectInDropdownList(desGroupsPagePopUp.designatedGroup, desGroupsPagePopUp.designatedGroupOptions, designatedGroupDescription);
    await setValueInHiddenInput(desGroupsPagePopUp.paidStatutoryHolidaysValueName, '1');
    await setValueInHiddenInput(desGroupsPagePopUp.payRelievingHigherPositionValueName, '2');

    await desGroupsPagePopUp.expandPanelovertime();

    await setValueInHiddenInput(desGroupsPagePopUp.premPayHrsWorkedStat15ValueName, '3');
    await setValueInHiddenInput(desGroupsPagePopUp.regWorkDayOvertime15ValueName, '4');
    await setValueInHiddenInput(desGroupsPagePopUp.regdayoffot15ValueName, '5');
    await setValueInHiddenInput(desGroupsPagePopUp.overtimeInsuffNotice15ValueName, '6');
    await setValueInHiddenInput(desGroupsPagePopUp.callBack15ValueName, '7');
    await setValueInHiddenInput(desGroupsPagePopUp.otherOvertime15ValueName, '8');
    await setValueInHiddenInput(desGroupsPagePopUp.totalOvertime15ValueName, '9');
    await setValueInHiddenInput(desGroupsPagePopUp.premPayHrsWorkedStat2ValueName, '10');
    await setValueInHiddenInput(desGroupsPagePopUp.regWorkDayOvertime2ValueName, '11');
    await setValueInHiddenInput(desGroupsPagePopUp.regdayoffot2ValueName, '12');
    await setValueInHiddenInput(desGroupsPagePopUp.overtimeInsuffNotice2ValueName, '13');
    await setValueInHiddenInput(desGroupsPagePopUp.callBack2ValueName, '14');
    await setValueInHiddenInput(desGroupsPagePopUp.otherOvertime2ValueName, '15');
    await setValueInHiddenInput(desGroupsPagePopUp.totalOvertime2ValueName, '16');
    await setValueInHiddenInput(desGroupsPagePopUp.premPayHrsWorkedStat25ValueName, '17');

    await desGroupsPagePopUp.expandPanelleave();

    await setValueInHiddenInput(desGroupsPagePopUp.sickleavebankValueName, '18');
    await setValueInHiddenInput(desGroupsPagePopUp.specialLeaveValueName, '19');
    await setValueInHiddenInput(desGroupsPagePopUp.employerPaidUnionBusinessValueName, '20');
    await setValueInHiddenInput(desGroupsPagePopUp.allOtherPaidLeavesValueName, '21');
    await setValueInHiddenInput(desGroupsPagePopUp.sickLeavePaidValueName, '22');
    await setValueInHiddenInput(desGroupsPagePopUp.compassionateLeaveValueName, '23');
    await setValueInHiddenInput(desGroupsPagePopUp.educationLeaveValueName, '24');
    await setValueInHiddenInput(desGroupsPagePopUp.paidLeaveWhileOnWcbValueName, '25');
    await setValueInHiddenInput(desGroupsPagePopUp.sickLeaveCashPayoutValueName, '26');
    await setValueInHiddenInput(desGroupsPagePopUp.juryDutyValueName, '27');
    await setValueInHiddenInput(desGroupsPagePopUp.timeOffInLieuCtoValueName, '28');

    await desGroupsPagePopUp.expandPanelallowance();

    await setValueInHiddenInput(desGroupsPagePopUp.onCallMealPeriodsValueName, '29');
    await setValueInHiddenInput(desGroupsPagePopUp.shiftPremiumsWeekendsValueName, '30');
    await setValueInHiddenInput(desGroupsPagePopUp.respPaySpecialAllowancesValueName, '31');
    await setValueInHiddenInput(desGroupsPagePopUp.isolationAllowanceValueName, '32');
    await setValueInHiddenInput(desGroupsPagePopUp.maternityLeaveSebPlanValueName, '33');
    await setValueInHiddenInput(desGroupsPagePopUp.shiftPremiumsEveningsValueName, '34');
    await setValueInHiddenInput(desGroupsPagePopUp.primaryRateValueName, '35');
    await setValueInHiddenInput(desGroupsPagePopUp.travelAllowanceValueName, '36');
    await setValueInHiddenInput(desGroupsPagePopUp.mealAllowanceValueName, '37');
    await setValueInHiddenInput(desGroupsPagePopUp.otherPremiumsAllowancesValueName, '38');
    await setValueInHiddenInput(desGroupsPagePopUp.shiftPremiumsNightsValueName, '39');
    await setValueInHiddenInput(desGroupsPagePopUp.qualificationDifferentialsValueName, '40');
    await setValueInHiddenInput(desGroupsPagePopUp.uniformAllowanceValueName, '41');
    await setValueInHiddenInput(desGroupsPagePopUp.severanceAllowancePaidValueName, '42');

    await desGroupsPagePopUp.expandPanelpay();

    await setValueInHiddenInput(desGroupsPagePopUp.superannuationValueName, '43');
    await setValueInHiddenInput(desGroupsPagePopUp.dentalValueName, '44');
    await setValueInHiddenInput(desGroupsPagePopUp.eiValueName, '45');
    await setValueInHiddenInput(desGroupsPagePopUp.longTermDisabilityValueName, '46');
    await setValueInHiddenInput(desGroupsPagePopUp.homeSupportHolLieuPayValueName, '47');
    await setValueInHiddenInput(desGroupsPagePopUp.liveInPayValueName, '48');
    await setValueInHiddenInput(desGroupsPagePopUp.telephoneConsultationPayValueName, '49');
    await setValueInHiddenInput(desGroupsPagePopUp.mspValueName, '50');
    await setValueInHiddenInput(desGroupsPagePopUp.cppValueName, '51');
    await setValueInHiddenInput(desGroupsPagePopUp.groupLifeAddValueName, '52');
    await setValueInHiddenInput(desGroupsPagePopUp.casualStatHolVacationPayValueName, '53');
    await setValueInHiddenInput(desGroupsPagePopUp.superShiftPremiumValueName, '54');
    await setValueInHiddenInput(desGroupsPagePopUp.onCallDifferentialsValueName, '55');
    await setValueInHiddenInput(desGroupsPagePopUp.pensionPlanRrspValueName, '56');
    await setValueInHiddenInput(desGroupsPagePopUp.extendedHealthValueName, '57');
    await setValueInHiddenInput(desGroupsPagePopUp.wcbValueName, '58');
    await setValueInHiddenInput(desGroupsPagePopUp.retroAndLumpSumPayoutValueName, '59');
    await setValueInHiddenInput(desGroupsPagePopUp.difficultToFillUnitPremiumValueName, '60');
    await setValueInHiddenInput(desGroupsPagePopUp.overnightPayValueName, '61');

    //Click create button
    await desGroupsPagePopUp.clickCreateButton();

    //Verify there are no error messages
    var errorMessagesCount = await desGroupsPagePopUp.errorMessages().count;
    if (errorMessagesCount > 0) {
        //Place into view the messages component
        await t
            .hover(desGroupsPagePopUp.messagesComponent);
    }
    await t
        .expect(errorMessagesCount).eql(0, 'There are error messages not allowing to create the designated group');

    //Wait for the popup to close
    await t
        .wait(1000);

    //Verify pop up is closed
    await t
        .expect(desGroupsPagePopUp.popUpPanel.filterVisible().exists).notOk();

    //Get the payroll summary data in the table
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'A - Ambulance Paramedics and Dispatchers';

    //Verify that a new record has been created in the designated groups section
    await t
        .expect(desGroupsPage.dataContainsDesignatedGroup(designatedGroupsData,
                                                          designatedGroupValue)).ok();

    //Click create designated group button
    await desGroupsPage.clickCreateButton();

    //Verify designated group popup create mode
    await desGroupsPagePopUp.verifyCreateMode();
});

test('21. Cancel the creation of a designated group', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Click create designated group button
    await desGroupsPage.clickCreateButton();

    //Verify designated group popup create mode
    await desGroupsPagePopUp.verifyCreateMode();

    //Fill fields
    var designatedGroupDescription = 'Community';
    await selectInDropdownList(desGroupsPagePopUp.designatedGroup, desGroupsPagePopUp.designatedGroupOptions, designatedGroupDescription);
    await setValueInHiddenInput(desGroupsPagePopUp.paidStatutoryHolidaysValueName, '1');
    await setValueInHiddenInput(desGroupsPagePopUp.payRelievingHigherPositionValueName, '2');

    await desGroupsPagePopUp.expandPanelovertime();

    await setValueInHiddenInput(desGroupsPagePopUp.premPayHrsWorkedStat15ValueName, '3');
    await setValueInHiddenInput(desGroupsPagePopUp.regWorkDayOvertime15ValueName, '4');
    await setValueInHiddenInput(desGroupsPagePopUp.regdayoffot15ValueName, '5');
    await setValueInHiddenInput(desGroupsPagePopUp.overtimeInsuffNotice15ValueName, '6');
    await setValueInHiddenInput(desGroupsPagePopUp.callBack15ValueName, '7');
    await setValueInHiddenInput(desGroupsPagePopUp.otherOvertime15ValueName, '8');
    await setValueInHiddenInput(desGroupsPagePopUp.totalOvertime15ValueName, '9');
    await setValueInHiddenInput(desGroupsPagePopUp.premPayHrsWorkedStat2ValueName, '10');
    await setValueInHiddenInput(desGroupsPagePopUp.regWorkDayOvertime2ValueName, '11');
    await setValueInHiddenInput(desGroupsPagePopUp.regdayoffot2ValueName, '12');
    await setValueInHiddenInput(desGroupsPagePopUp.overtimeInsuffNotice2ValueName, '13');
    await setValueInHiddenInput(desGroupsPagePopUp.callBack2ValueName, '14');
    await setValueInHiddenInput(desGroupsPagePopUp.otherOvertime2ValueName, '15');
    await setValueInHiddenInput(desGroupsPagePopUp.totalOvertime2ValueName, '16');
    await setValueInHiddenInput(desGroupsPagePopUp.premPayHrsWorkedStat25ValueName, '17');

    await desGroupsPagePopUp.expandPanelleave();

    await setValueInHiddenInput(desGroupsPagePopUp.sickleavebankValueName, '18');
    await setValueInHiddenInput(desGroupsPagePopUp.specialLeaveValueName, '19');
    await setValueInHiddenInput(desGroupsPagePopUp.employerPaidUnionBusinessValueName, '20');
    await setValueInHiddenInput(desGroupsPagePopUp.allOtherPaidLeavesValueName, '21');
    await setValueInHiddenInput(desGroupsPagePopUp.sickLeavePaidValueName, '22');
    await setValueInHiddenInput(desGroupsPagePopUp.compassionateLeaveValueName, '23');
    await setValueInHiddenInput(desGroupsPagePopUp.educationLeaveValueName, '24');
    await setValueInHiddenInput(desGroupsPagePopUp.paidLeaveWhileOnWcbValueName, '25');
    await setValueInHiddenInput(desGroupsPagePopUp.sickLeaveCashPayoutValueName, '26');
    await setValueInHiddenInput(desGroupsPagePopUp.juryDutyValueName, '27');
    await setValueInHiddenInput(desGroupsPagePopUp.timeOffInLieuCtoValueName, '28');

    await desGroupsPagePopUp.expandPanelallowance();

    await setValueInHiddenInput(desGroupsPagePopUp.onCallMealPeriodsValueName, '29');
    await setValueInHiddenInput(desGroupsPagePopUp.shiftPremiumsWeekendsValueName, '30');
    await setValueInHiddenInput(desGroupsPagePopUp.respPaySpecialAllowancesValueName, '31');
    await setValueInHiddenInput(desGroupsPagePopUp.isolationAllowanceValueName, '32');
    await setValueInHiddenInput(desGroupsPagePopUp.maternityLeaveSebPlanValueName, '33');
    await setValueInHiddenInput(desGroupsPagePopUp.shiftPremiumsEveningsValueName, '34');
    await setValueInHiddenInput(desGroupsPagePopUp.primaryRateValueName, '35');
    await setValueInHiddenInput(desGroupsPagePopUp.travelAllowanceValueName, '36');
    await setValueInHiddenInput(desGroupsPagePopUp.mealAllowanceValueName, '37');
    await setValueInHiddenInput(desGroupsPagePopUp.otherPremiumsAllowancesValueName, '38');
    await setValueInHiddenInput(desGroupsPagePopUp.shiftPremiumsNightsValueName, '39');
    await setValueInHiddenInput(desGroupsPagePopUp.qualificationDifferentialsValueName, '40');
    await setValueInHiddenInput(desGroupsPagePopUp.uniformAllowanceValueName, '41');
    await setValueInHiddenInput(desGroupsPagePopUp.severanceAllowancePaidValueName, '42');

    await desGroupsPagePopUp.expandPanelpay();

    await setValueInHiddenInput(desGroupsPagePopUp.superannuationValueName, '43');
    await setValueInHiddenInput(desGroupsPagePopUp.dentalValueName, '44');
    await setValueInHiddenInput(desGroupsPagePopUp.eiValueName, '45');
    await setValueInHiddenInput(desGroupsPagePopUp.longTermDisabilityValueName, '46');
    await setValueInHiddenInput(desGroupsPagePopUp.homeSupportHolLieuPayValueName, '47');
    await setValueInHiddenInput(desGroupsPagePopUp.liveInPayValueName, '48');
    await setValueInHiddenInput(desGroupsPagePopUp.telephoneConsultationPayValueName, '49');
    await setValueInHiddenInput(desGroupsPagePopUp.mspValueName, '50');
    await setValueInHiddenInput(desGroupsPagePopUp.cppValueName, '51');
    await setValueInHiddenInput(desGroupsPagePopUp.groupLifeAddValueName, '52');
    await setValueInHiddenInput(desGroupsPagePopUp.casualStatHolVacationPayValueName, '53');
    await setValueInHiddenInput(desGroupsPagePopUp.superShiftPremiumValueName, '54');
    await setValueInHiddenInput(desGroupsPagePopUp.onCallDifferentialsValueName, '55');
    await setValueInHiddenInput(desGroupsPagePopUp.pensionPlanRrspValueName, '56');
    await setValueInHiddenInput(desGroupsPagePopUp.extendedHealthValueName, '57');
    await setValueInHiddenInput(desGroupsPagePopUp.wcbValueName, '58');
    await setValueInHiddenInput(desGroupsPagePopUp.retroAndLumpSumPayoutValueName, '59');
    await setValueInHiddenInput(desGroupsPagePopUp.difficultToFillUnitPremiumValueName, '60');
    await setValueInHiddenInput(desGroupsPagePopUp.overnightPayValueName, '61');

    //Click Cancel button
    await desGroupsPagePopUp.clickCancelButton();

    //Wait for the popup to close
    await t
        .wait(1000);

    //Verify pop up is closed
    await t
        .expect(desGroupsPagePopUp.popUpPanel.filterVisible().exists).notOk();

    //Get the payroll summary data in the table
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'C - Community';

    //Verify that a new record has not been created in the designated groups section
    await t
        .expect(desGroupsPage.dataContainsDesignatedGroup(designatedGroupsData, designatedGroupValue)).notOk();

    //Click create designated group button
    await desGroupsPage.clickCreateButton();

    //Verify designated group popup create mode
    await desGroupsPagePopUp.verifyCreateMode();
});

test('22. Create a duplicated designated group', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Click create designated group button
    await desGroupsPage.clickCreateButton();

    //Verify designated group popup create mode
    await desGroupsPagePopUp.verifyCreateMode();

    //Fill fields
    var designatedGroupDescription = 'Ambulance Paramedics and Dispatchers';
    await selectInDropdownList(desGroupsPagePopUp.designatedGroup, desGroupsPagePopUp.designatedGroupOptions, designatedGroupDescription);
    await setValueInHiddenInput(desGroupsPagePopUp.paidStatutoryHolidaysValueName, '1');
    await setValueInHiddenInput(desGroupsPagePopUp.payRelievingHigherPositionValueName, '2');

    await desGroupsPagePopUp.expandPanelovertime();

    await setValueInHiddenInput(desGroupsPagePopUp.premPayHrsWorkedStat15ValueName, '3');
    await setValueInHiddenInput(desGroupsPagePopUp.regWorkDayOvertime15ValueName, '4');
    await setValueInHiddenInput(desGroupsPagePopUp.regdayoffot15ValueName, '5');
    await setValueInHiddenInput(desGroupsPagePopUp.overtimeInsuffNotice15ValueName, '6');
    await setValueInHiddenInput(desGroupsPagePopUp.callBack15ValueName, '7');
    await setValueInHiddenInput(desGroupsPagePopUp.otherOvertime15ValueName, '8');
    await setValueInHiddenInput(desGroupsPagePopUp.totalOvertime15ValueName, '9');
    await setValueInHiddenInput(desGroupsPagePopUp.premPayHrsWorkedStat2ValueName, '10');
    await setValueInHiddenInput(desGroupsPagePopUp.regWorkDayOvertime2ValueName, '11');
    await setValueInHiddenInput(desGroupsPagePopUp.regdayoffot2ValueName, '12');
    await setValueInHiddenInput(desGroupsPagePopUp.overtimeInsuffNotice2ValueName, '13');
    await setValueInHiddenInput(desGroupsPagePopUp.callBack2ValueName, '14');
    await setValueInHiddenInput(desGroupsPagePopUp.otherOvertime2ValueName, '15');
    await setValueInHiddenInput(desGroupsPagePopUp.totalOvertime2ValueName, '16');
    await setValueInHiddenInput(desGroupsPagePopUp.premPayHrsWorkedStat25ValueName, '17');

    await desGroupsPagePopUp.expandPanelleave();

    await setValueInHiddenInput(desGroupsPagePopUp.sickleavebankValueName, '18');
    await setValueInHiddenInput(desGroupsPagePopUp.specialLeaveValueName, '19');
    await setValueInHiddenInput(desGroupsPagePopUp.employerPaidUnionBusinessValueName, '20');
    await setValueInHiddenInput(desGroupsPagePopUp.allOtherPaidLeavesValueName, '21');
    await setValueInHiddenInput(desGroupsPagePopUp.sickLeavePaidValueName, '22');
    await setValueInHiddenInput(desGroupsPagePopUp.compassionateLeaveValueName, '23');
    await setValueInHiddenInput(desGroupsPagePopUp.educationLeaveValueName, '24');
    await setValueInHiddenInput(desGroupsPagePopUp.paidLeaveWhileOnWcbValueName, '25');
    await setValueInHiddenInput(desGroupsPagePopUp.sickLeaveCashPayoutValueName, '26');
    await setValueInHiddenInput(desGroupsPagePopUp.juryDutyValueName, '27');
    await setValueInHiddenInput(desGroupsPagePopUp.timeOffInLieuCtoValueName, '28');

    await desGroupsPagePopUp.expandPanelallowance();

    await setValueInHiddenInput(desGroupsPagePopUp.onCallMealPeriodsValueName, '29');
    await setValueInHiddenInput(desGroupsPagePopUp.shiftPremiumsWeekendsValueName, '30');
    await setValueInHiddenInput(desGroupsPagePopUp.respPaySpecialAllowancesValueName, '31');
    await setValueInHiddenInput(desGroupsPagePopUp.isolationAllowanceValueName, '32');
    await setValueInHiddenInput(desGroupsPagePopUp.maternityLeaveSebPlanValueName, '33');
    await setValueInHiddenInput(desGroupsPagePopUp.shiftPremiumsEveningsValueName, '34');
    await setValueInHiddenInput(desGroupsPagePopUp.primaryRateValueName, '35');
    await setValueInHiddenInput(desGroupsPagePopUp.travelAllowanceValueName, '36');
    await setValueInHiddenInput(desGroupsPagePopUp.mealAllowanceValueName, '37');
    await setValueInHiddenInput(desGroupsPagePopUp.otherPremiumsAllowancesValueName, '38');
    await setValueInHiddenInput(desGroupsPagePopUp.shiftPremiumsNightsValueName, '39');
    await setValueInHiddenInput(desGroupsPagePopUp.qualificationDifferentialsValueName, '40');
    await setValueInHiddenInput(desGroupsPagePopUp.uniformAllowanceValueName, '41');
    await setValueInHiddenInput(desGroupsPagePopUp.severanceAllowancePaidValueName, '42');

    await desGroupsPagePopUp.expandPanelpay();

    await setValueInHiddenInput(desGroupsPagePopUp.superannuationValueName, '43');
    await setValueInHiddenInput(desGroupsPagePopUp.dentalValueName, '44');
    await setValueInHiddenInput(desGroupsPagePopUp.eiValueName, '45');
    await setValueInHiddenInput(desGroupsPagePopUp.longTermDisabilityValueName, '46');
    await setValueInHiddenInput(desGroupsPagePopUp.homeSupportHolLieuPayValueName, '47');
    await setValueInHiddenInput(desGroupsPagePopUp.liveInPayValueName, '48');
    await setValueInHiddenInput(desGroupsPagePopUp.telephoneConsultationPayValueName, '49');
    await setValueInHiddenInput(desGroupsPagePopUp.mspValueName, '50');
    await setValueInHiddenInput(desGroupsPagePopUp.cppValueName, '51');
    await setValueInHiddenInput(desGroupsPagePopUp.groupLifeAddValueName, '52');
    await setValueInHiddenInput(desGroupsPagePopUp.casualStatHolVacationPayValueName, '53');
    await setValueInHiddenInput(desGroupsPagePopUp.superShiftPremiumValueName, '54');
    await setValueInHiddenInput(desGroupsPagePopUp.onCallDifferentialsValueName, '55');
    await setValueInHiddenInput(desGroupsPagePopUp.pensionPlanRrspValueName, '56');
    await setValueInHiddenInput(desGroupsPagePopUp.extendedHealthValueName, '57');
    await setValueInHiddenInput(desGroupsPagePopUp.wcbValueName, '58');
    await setValueInHiddenInput(desGroupsPagePopUp.retroAndLumpSumPayoutValueName, '59');
    await setValueInHiddenInput(desGroupsPagePopUp.difficultToFillUnitPremiumValueName, '60');
    await setValueInHiddenInput(desGroupsPagePopUp.overnightPayValueName, '61');

    //Click create button
    await desGroupsPagePopUp.clickCreateButton();

    //Verify error message is displayed: Duplicate Entry for Designated Group: Ambulance Paramedics and Dispatchers
    await t
        .expect(desGroupsPagePopUp.errorMessages().withText("Duplicate Entry for Designated Group: Ambulance Paramedics and Dispatchers").exists).ok();

    //Click Cancel button
    await desGroupsPagePopUp.clickCancelButton();
});

test('23. Create designated group - Test the input limit of all fields', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Click create designated group button
    await desGroupsPage.clickCreateButton();

    //Verify designated group popup create mode
    await desGroupsPagePopUp.verifyCreateMode();

    //Fill fields
    var designatedGroupDescription = 'Professional Association of Residents';
    await selectInDropdownList(desGroupsPagePopUp.designatedGroup, desGroupsPagePopUp.designatedGroupOptions, designatedGroupDescription);

    //Validate max 7 and no alpha on paidStatutoryHolidays
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.paidStatutoryHolidays)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.paidStatutoryHolidays, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.paidStatutoryHolidays.value).eql('$9,988,888', 'paidStatutoryHolidays validation incorrect');

    //Validate max 7 and no alpha on payRelievingHigherPosition
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.payRelievingHigherPosition)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.payRelievingHigherPosition, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.payRelievingHigherPosition.value).eql('$9,988,888', 'payRelievingHigherPosition validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelovertime();

    //Validate max 7 and no alpha on premPayHrsWorkedStat15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.premPayHrsWorkedStat15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.premPayHrsWorkedStat15, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat15.value).eql('$9,988,888', 'premPayHrsWorkedStat15 validation incorrect');

    //Validate max 7 and no alpha on regWorkDayOvertime15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.regWorkDayOvertime15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.regWorkDayOvertime15, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.regWorkDayOvertime15.value).eql('$9,988,888', 'regWorkDayOvertime15 validation incorrect');

    //Validate max 7 and no alpha on regdayoffot15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.regdayoffot15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.regdayoffot15, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.regdayoffot15.value).eql('$9,988,888', 'regdayoffot15 validation incorrect');

    //Validate max 7 and no alpha on overtimeInsuffNotice15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.overtimeInsuffNotice15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.overtimeInsuffNotice15, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.overtimeInsuffNotice15.value).eql('$9,988,888', 'overtimeInsuffNotice15 validation incorrect');

    //Validate max 7 and no alpha on callBack15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.callBack15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.callBack15, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.callBack15.value).eql('$9,988,888', 'callBack15 validation incorrect');

    //Validate max 7 and no alpha on otherOvertime15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.otherOvertime15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.otherOvertime15, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.otherOvertime15.value).eql('$9,988,888', 'otherOvertime15 validation incorrect');

    //Validate max 7 and no alpha on totalOvertime15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.totalOvertime15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.totalOvertime15, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.totalOvertime15.value).eql('$9,988,888', 'totalOvertime15 validation incorrect');

    //Validate max 7 and no alpha on totalOvertime15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.totalOvertime15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.totalOvertime15, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.totalOvertime15.value).eql('$9,988,888', 'totalOvertime15 validation incorrect');

    //Validate max 7 and no alpha on premPayHrsWorkedStat2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.premPayHrsWorkedStat2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.premPayHrsWorkedStat2, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat2.value).eql('$9,988,888', 'premPayHrsWorkedStat2 validation incorrect');

    //Validate max 7 and no alpha on regWorkDayOvertime2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.regWorkDayOvertime2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.regWorkDayOvertime2, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.regWorkDayOvertime2.value).eql('$9,988,888', 'regWorkDayOvertime2 validation incorrect');

    //Validate max 7 and no alpha on regdayoffot2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.regdayoffot2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.regdayoffot2, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.regdayoffot2.value).eql('$9,988,888', 'regdayoffot2 validation incorrect');

    //Validate max 7 and no alpha on overtimeInsuffNotice2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.overtimeInsuffNotice2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.overtimeInsuffNotice2, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.overtimeInsuffNotice2.value).eql('$9,988,888', 'overtimeInsuffNotice2 validation incorrect');

    //Validate max 7 and no alpha on callBack2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.callBack2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.callBack2, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.callBack2.value).eql('$9,988,888', 'callBack2 validation incorrect');

    //Validate max 7 and no alpha on otherOvertime2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.otherOvertime2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.otherOvertime2, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.otherOvertime2.value).eql('$9,988,888', 'otherOvertime2 validation incorrect');

    //Validate max 7 and no alpha on totalOvertime2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.totalOvertime2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.totalOvertime2, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.totalOvertime2.value).eql('$9,988,888', 'totalOvertime2 validation incorrect');

    //Validate max 7 and no alpha on premPayHrsWorkedStat25
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.premPayHrsWorkedStat25)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.premPayHrsWorkedStat25, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat25.value).eql('$9,988,888', 'premPayHrsWorkedStat25 validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelleave();

    //Validate max 7 and no alpha on sickleavebank
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.sickleavebank)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.sickleavebank, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.sickleavebank.value).eql('9,988,888', 'sickleavebank validation incorrect');

    //Validate max 7 and no alpha on specialLeave
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.specialLeave)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.specialLeave, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.specialLeave.value).eql('$9,988,888', 'specialLeave validation incorrect');

    //Validate max 7 and no alpha on employerPaidUnionBusiness
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.employerPaidUnionBusiness)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.employerPaidUnionBusiness, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.employerPaidUnionBusiness.value).eql('$9,988,888', 'employerPaidUnionBusiness validation incorrect');

    //Validate max 7 and no alpha on allOtherPaidLeaves
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.allOtherPaidLeaves)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.allOtherPaidLeaves, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.allOtherPaidLeaves.value).eql('$9,988,888', 'allOtherPaidLeaves validation incorrect');

    //Validate max 7 and no alpha on sickLeavePaid
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.sickLeavePaid)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.sickLeavePaid, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.sickLeavePaid.value).eql('$9,988,888', 'sickLeavePaid validation incorrect');

    //Validate max 7 and no alpha on compassionateLeave
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.compassionateLeave)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.compassionateLeave, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.compassionateLeave.value).eql('$9,988,888', 'compassionateLeave validation incorrect');

    //Validate max 7 and no alpha on educationLeave
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.educationLeave)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.educationLeave, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.educationLeave.value).eql('$9,988,888', 'educationLeave validation incorrect');

    //Validate max 7 and no alpha on paidLeaveWhileOnWcb
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.paidLeaveWhileOnWcb)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.paidLeaveWhileOnWcb, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.paidLeaveWhileOnWcb.value).eql('$9,988,888', 'paidLeaveWhileOnWcb validation incorrect');

    //Validate max 7 and no alpha on sickLeaveCashPayout
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.sickLeaveCashPayout)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.sickLeaveCashPayout, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.sickLeaveCashPayout.value).eql('$9,988,888', 'sickLeaveCashPayout validation incorrect');

    //Validate max 7 and no alpha on juryDuty
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.juryDuty)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.juryDuty, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.juryDuty.value).eql('$9,988,888', 'juryDuty validation incorrect');

    //Validate max 7 and no alpha on timeOffInLieuCto
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.timeOffInLieuCto)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.timeOffInLieuCto, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.timeOffInLieuCto.value).eql('$9,988,888', 'timeOffInLieuCto validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelallowance();

    //Validate max 7 and no alpha on onCallMealPeriods
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.onCallMealPeriods)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.onCallMealPeriods, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.onCallMealPeriods.value).eql('$9,988,888', 'onCallMealPeriods validation incorrect');

    //Validate max 7 and no alpha on shiftPremiumsWeekends
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.shiftPremiumsWeekends)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.shiftPremiumsWeekends, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.shiftPremiumsWeekends.value).eql('$9,988,888', 'shiftPremiumsWeekends validation incorrect');

    //Validate max 7 and no alpha on respPaySpecialAllowances
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.respPaySpecialAllowances)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.respPaySpecialAllowances, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.respPaySpecialAllowances.value).eql('$9,988,888', 'respPaySpecialAllowances validation incorrect');

    //Validate max 7 and no alpha on isolationAllowance
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.isolationAllowance)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.isolationAllowance, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.isolationAllowance.value).eql('$9,988,888', 'isolationAllowance validation incorrect');

    //Validate max 7 and no alpha on maternityLeaveSebPlan
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.maternityLeaveSebPlan)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.maternityLeaveSebPlan, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.maternityLeaveSebPlan.value).eql('$9,988,888', 'maternityLeaveSebPlan validation incorrect');

    //Validate max 7 and no alpha on shiftPremiumsEvenings
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.shiftPremiumsEvenings)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.shiftPremiumsEvenings, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.shiftPremiumsEvenings.value).eql('$9,988,888', 'shiftPremiumsEvenings validation incorrect');

    //Validate max 7 and no alpha on primaryRate
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.primaryRate)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.primaryRate, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.primaryRate.value).eql('$9,988,888', 'primaryRate validation incorrect');

    //Validate max 7 and no alpha on travelAllowance
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.travelAllowance)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.travelAllowance, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.travelAllowance.value).eql('$9,988,888', 'travelAllowance validation incorrect');

    //Validate max 7 and no alpha on mealAllowance
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.mealAllowance)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.mealAllowance, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.mealAllowance.value).eql('$9,988,888', 'mealAllowance validation incorrect');

    //Validate max 7 and no alpha on otherPremiumsAllowances
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.otherPremiumsAllowances)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.otherPremiumsAllowances, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.otherPremiumsAllowances.value).eql('$9,988,888', 'otherPremiumsAllowances validation incorrect');

    //Validate max 7 and no alpha on shiftPremiumsNights
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.shiftPremiumsNights)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.shiftPremiumsNights, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.shiftPremiumsNights.value).eql('$9,988,888', 'shiftPremiumsNights validation incorrect');

    //Validate max 7 and no alpha on qualificationDifferentials
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.qualificationDifferentials)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.qualificationDifferentials, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.qualificationDifferentials.value).eql('$9,988,888', 'qualificationDifferentials validation incorrect');

    //Validate max 7 and no alpha on uniformAllowance
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.uniformAllowance)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.uniformAllowance, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.uniformAllowance.value).eql('$9,988,888', 'uniformAllowance validation incorrect');

    //Validate max 7 and no alpha on severanceAllowancePaid
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.severanceAllowancePaid)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.severanceAllowancePaid, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.severanceAllowancePaid.value).eql('$9,988,888', 'severanceAllowancePaid validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelpay();

    //Validate max 7 and no alpha on superannuation
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.superannuation)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.superannuation, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.superannuation.value).eql('$9,988,888', 'superannuation validation incorrect');

    //Validate max 7 and no alpha on dental
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.dental)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.dental, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.dental.value).eql('$9,988,888', 'dental validation incorrect');

    //Validate max 7 and no alpha on ei
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.ei)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.ei, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.ei.value).eql('$9,988,888', 'ei validation incorrect');

    //Validate max 7 and no alpha on longTermDisability
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.longTermDisability)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.longTermDisability, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.longTermDisability.value).eql('$9,988,888', 'longTermDisability validation incorrect');

    //Validate max 7 and no alpha on homeSupportHolLieuPay
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.homeSupportHolLieuPay)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.homeSupportHolLieuPay, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.homeSupportHolLieuPay.value).eql('$9,988,888', 'homeSupportHolLieuPay validation incorrect');

    //Validate max 7 and no alpha on liveInPay
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.liveInPay)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.liveInPay, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.liveInPay.value).eql('$9,988,888', 'liveInPay validation incorrect');

    //Validate max 7 and no alpha on telephoneConsultationPay
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.telephoneConsultationPay)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.telephoneConsultationPay, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.telephoneConsultationPay.value).eql('$9,988,888', 'telephoneConsultationPay validation incorrect');

    //Validate max 7 and no alpha on msp
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.msp)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.msp, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.msp.value).eql('$9,988,888', 'msp validation incorrect');

    //Validate max 7 and no alpha on cpp
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.cpp)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.cpp, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.cpp.value).eql('$9,988,888', 'cpp validation incorrect');

    //Validate max 7 and no alpha on groupLifeAdd
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.groupLifeAdd)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.groupLifeAdd, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.groupLifeAdd.value).eql('$9,988,888', 'groupLifeAdd validation incorrect');

    //Validate max 7 and no alpha on casualStatHolVacationPay
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.casualStatHolVacationPay)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.casualStatHolVacationPay, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.casualStatHolVacationPay.value).eql('$9,988,888', 'casualStatHolVacationPay validation incorrect');

    //Validate max 7 and no alpha on superShiftPremium
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.superShiftPremium)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.superShiftPremium, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.superShiftPremium.value).eql('$9,988,888', 'superShiftPremium validation incorrect');

    //Validate max 7 and no alpha on onCallDifferentials
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.onCallDifferentials)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.onCallDifferentials, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.onCallDifferentials.value).eql('$9,988,888', 'onCallDifferentials validation incorrect');

    //Validate max 7 and no alpha on pensionPlanRrsp
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.pensionPlanRrsp)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.pensionPlanRrsp, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.pensionPlanRrsp.value).eql('$9,988,888', 'pensionPlanRrsp validation incorrect');

    //Validate max 7 and no alpha on extendedHealth
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.extendedHealth)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.extendedHealth, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.extendedHealth.value).eql('$9,988,888', 'extendedHealth validation incorrect');

    //Validate max 7 and no alpha on wcb
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.wcb)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.wcb, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.wcb.value).eql('$9,988,888', 'wcb validation incorrect');

    //Validate max 7 and no alpha on retroAndLumpSumPayout
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.retroAndLumpSumPayout)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.retroAndLumpSumPayout, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.retroAndLumpSumPayout.value).eql('$9,988,888', 'retroAndLumpSumPayout validation incorrect');

    //Validate max 7 and no alpha on difficultToFillUnitPremium
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.difficultToFillUnitPremium)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.difficultToFillUnitPremium, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.difficultToFillUnitPremium.value).eql('$9,988,888', 'difficultToFillUnitPremium validation incorrect');

    //Validate max 7 and no alpha on overnightPay
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.overnightPay)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.overnightPay, 'd99dsf888888999999');

    await t
        .expect(desGroupsPagePopUp.overnightPay.value).eql('$9,988,888', 'overnightPay validation incorrect');

    //Click create button
    await desGroupsPagePopUp.clickCreateButton();
});

test('24. Update designated group', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //select the group for update
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'R - Professional Association of Residents';
    var groupIndex = desGroupsPage.dataIndexOfDesignatedGroup(designatedGroupsData, designatedGroupValue);
    var groupSelected = desGroupsPage.designatedGroups().nth(groupIndex);

    await t
        .click(groupSelected);

    //Update the fields
    //Update on paidStatutoryHolidays
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.paidStatutoryHolidays)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.paidStatutoryHolidays, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.paidStatutoryHolidays.value).eql('$8,888,888', 'paidStatutoryHolidays validation incorrect');

    //Update on payRelievingHigherPosition
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.payRelievingHigherPosition)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.payRelievingHigherPosition, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.payRelievingHigherPosition.value).eql('$8,888,888', 'payRelievingHigherPosition validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelovertime();

    //Validate max 7 and no alpha on premPayHrsWorkedStat15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.premPayHrsWorkedStat15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.premPayHrsWorkedStat15, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat15.value).eql('$8,888,888', 'premPayHrsWorkedStat15 validation incorrect');

    //Validate max 7 and no alpha on regWorkDayOvertime15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.regWorkDayOvertime15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.regWorkDayOvertime15, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.regWorkDayOvertime15.value).eql('$8,888,888', 'regWorkDayOvertime15 validation incorrect');

    //Validate max 7 and no alpha on regdayoffot15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.regdayoffot15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.regdayoffot15, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.regdayoffot15.value).eql('$8,888,888', 'regdayoffot15 validation incorrect');

    //Validate max 7 and no alpha on overtimeInsuffNotice15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.overtimeInsuffNotice15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.overtimeInsuffNotice15, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.overtimeInsuffNotice15.value).eql('$8,888,888', 'overtimeInsuffNotice15 validation incorrect');

    //Validate max 7 and no alpha on callBack15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.callBack15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.callBack15, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.callBack15.value).eql('$8,888,888', 'callBack15 validation incorrect');

    //Validate max 7 and no alpha on otherOvertime15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.otherOvertime15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.otherOvertime15, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.otherOvertime15.value).eql('$8,888,888', 'otherOvertime15 validation incorrect');

    //Validate max 7 and no alpha on totalOvertime15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.totalOvertime15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.totalOvertime15, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.totalOvertime15.value).eql('$8,888,888', 'totalOvertime15 validation incorrect');

    //Validate max 7 and no alpha on totalOvertime15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.totalOvertime15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.totalOvertime15, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.totalOvertime15.value).eql('$8,888,888', 'totalOvertime15 validation incorrect');

    //Validate max 7 and no alpha on premPayHrsWorkedStat2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.premPayHrsWorkedStat2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.premPayHrsWorkedStat2, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat2.value).eql('$8,888,888', 'premPayHrsWorkedStat2 validation incorrect');

    //Validate max 7 and no alpha on regWorkDayOvertime2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.regWorkDayOvertime2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.regWorkDayOvertime2, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.regWorkDayOvertime2.value).eql('$8,888,888', 'regWorkDayOvertime2 validation incorrect');

    //Validate max 7 and no alpha on regdayoffot2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.regdayoffot2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.regdayoffot2, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.regdayoffot2.value).eql('$8,888,888', 'regdayoffot2 validation incorrect');

    //Validate max 7 and no alpha on overtimeInsuffNotice2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.overtimeInsuffNotice2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.overtimeInsuffNotice2, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.overtimeInsuffNotice2.value).eql('$8,888,888', 'overtimeInsuffNotice2 validation incorrect');

    //Validate max 7 and no alpha on callBack2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.callBack2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.callBack2, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.callBack2.value).eql('$8,888,888', 'callBack2 validation incorrect');

    //Validate max 7 and no alpha on otherOvertime2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.otherOvertime2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.otherOvertime2, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.otherOvertime2.value).eql('$8,888,888', 'otherOvertime2 validation incorrect');

    //Validate max 7 and no alpha on totalOvertime2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.totalOvertime2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.totalOvertime2, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.totalOvertime2.value).eql('$8,888,888', 'totalOvertime2 validation incorrect');

    //Validate max 7 and no alpha on premPayHrsWorkedStat25
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.premPayHrsWorkedStat25)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.premPayHrsWorkedStat25, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat25.value).eql('$8,888,888', 'premPayHrsWorkedStat25 validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelleave();

    //Validate max 7 and no alpha on sickleavebank
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.sickleavebank)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.sickleavebank, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.sickleavebank.value).eql('8,888,888', 'sickleavebank validation incorrect');

    //Validate max 7 and no alpha on specialLeave
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.specialLeave)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.specialLeave, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.specialLeave.value).eql('$8,888,888', 'specialLeave validation incorrect');

    //Validate max 7 and no alpha on employerPaidUnionBusiness
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.employerPaidUnionBusiness)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.employerPaidUnionBusiness, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.employerPaidUnionBusiness.value).eql('$8,888,888', 'employerPaidUnionBusiness validation incorrect');

    //Validate max 7 and no alpha on allOtherPaidLeaves
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.allOtherPaidLeaves)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.allOtherPaidLeaves, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.allOtherPaidLeaves.value).eql('$8,888,888', 'allOtherPaidLeaves validation incorrect');

    //Validate max 7 and no alpha on sickLeavePaid
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.sickLeavePaid)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.sickLeavePaid, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.sickLeavePaid.value).eql('$8,888,888', 'sickLeavePaid validation incorrect');

    //Validate max 7 and no alpha on compassionateLeave
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.compassionateLeave)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.compassionateLeave, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.compassionateLeave.value).eql('$8,888,888', 'compassionateLeave validation incorrect');

    //Validate max 7 and no alpha on educationLeave
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.educationLeave)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.educationLeave, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.educationLeave.value).eql('$8,888,888', 'educationLeave validation incorrect');

    //Validate max 7 and no alpha on paidLeaveWhileOnWcb
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.paidLeaveWhileOnWcb)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.paidLeaveWhileOnWcb, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.paidLeaveWhileOnWcb.value).eql('$8,888,888', 'paidLeaveWhileOnWcb validation incorrect');

    //Validate max 7 and no alpha on sickLeaveCashPayout
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.sickLeaveCashPayout)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.sickLeaveCashPayout, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.sickLeaveCashPayout.value).eql('$8,888,888', 'sickLeaveCashPayout validation incorrect');

    //Validate max 7 and no alpha on juryDuty
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.juryDuty)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.juryDuty, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.juryDuty.value).eql('$8,888,888', 'juryDuty validation incorrect');

    //Validate max 7 and no alpha on timeOffInLieuCto
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.timeOffInLieuCto)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.timeOffInLieuCto, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.timeOffInLieuCto.value).eql('$8,888,888', 'timeOffInLieuCto validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelallowance();

    //Validate max 7 and no alpha on onCallMealPeriods
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.onCallMealPeriods)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.onCallMealPeriods, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.onCallMealPeriods.value).eql('$8,888,888', 'onCallMealPeriods validation incorrect');

    //Validate max 7 and no alpha on shiftPremiumsWeekends
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.shiftPremiumsWeekends)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.shiftPremiumsWeekends, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.shiftPremiumsWeekends.value).eql('$8,888,888', 'shiftPremiumsWeekends validation incorrect');

    //Validate max 7 and no alpha on respPaySpecialAllowances
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.respPaySpecialAllowances)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.respPaySpecialAllowances, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.respPaySpecialAllowances.value).eql('$8,888,888', 'respPaySpecialAllowances validation incorrect');

    //Validate max 7 and no alpha on isolationAllowance
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.isolationAllowance)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.isolationAllowance, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.isolationAllowance.value).eql('$8,888,888', 'isolationAllowance validation incorrect');

    //Validate max 7 and no alpha on maternityLeaveSebPlan
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.maternityLeaveSebPlan)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.maternityLeaveSebPlan, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.maternityLeaveSebPlan.value).eql('$8,888,888', 'maternityLeaveSebPlan validation incorrect');

    //Validate max 7 and no alpha on shiftPremiumsEvenings
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.shiftPremiumsEvenings)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.shiftPremiumsEvenings, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.shiftPremiumsEvenings.value).eql('$8,888,888', 'shiftPremiumsEvenings validation incorrect');

    //Validate max 7 and no alpha on primaryRate
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.primaryRate)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.primaryRate, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.primaryRate.value).eql('$8,888,888', 'primaryRate validation incorrect');

    //Validate max 7 and no alpha on travelAllowance
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.travelAllowance)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.travelAllowance, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.travelAllowance.value).eql('$8,888,888', 'travelAllowance validation incorrect');

    //Validate max 7 and no alpha on mealAllowance
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.mealAllowance)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.mealAllowance, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.mealAllowance.value).eql('$8,888,888', 'mealAllowance validation incorrect');

    //Validate max 7 and no alpha on otherPremiumsAllowances
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.otherPremiumsAllowances)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.otherPremiumsAllowances, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.otherPremiumsAllowances.value).eql('$8,888,888', 'otherPremiumsAllowances validation incorrect');

    //Validate max 7 and no alpha on shiftPremiumsNights
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.shiftPremiumsNights)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.shiftPremiumsNights, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.shiftPremiumsNights.value).eql('$8,888,888', 'shiftPremiumsNights validation incorrect');

    //Validate max 7 and no alpha on qualificationDifferentials
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.qualificationDifferentials)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.qualificationDifferentials, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.qualificationDifferentials.value).eql('$8,888,888', 'qualificationDifferentials validation incorrect');

    //Validate max 7 and no alpha on uniformAllowance
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.uniformAllowance)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.uniformAllowance, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.uniformAllowance.value).eql('$8,888,888', 'uniformAllowance validation incorrect');

    //Validate max 7 and no alpha on severanceAllowancePaid
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.severanceAllowancePaid)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.severanceAllowancePaid, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.severanceAllowancePaid.value).eql('$8,888,888', 'severanceAllowancePaid validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelpay();

    //Validate max 7 and no alpha on superannuation
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.superannuation)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.superannuation, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.superannuation.value).eql('$8,888,888', 'superannuation validation incorrect');

    //Validate max 7 and no alpha on dental
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.dental)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.dental, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.dental.value).eql('$8,888,888', 'dental validation incorrect');

    //Validate max 7 and no alpha on ei
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.ei)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.ei, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.ei.value).eql('$8,888,888', 'ei validation incorrect');

    //Validate max 7 and no alpha on longTermDisability
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.longTermDisability)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.longTermDisability, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.longTermDisability.value).eql('$8,888,888', 'longTermDisability validation incorrect');

    //Validate max 7 and no alpha on homeSupportHolLieuPay
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.homeSupportHolLieuPay)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.homeSupportHolLieuPay, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.homeSupportHolLieuPay.value).eql('$8,888,888', 'homeSupportHolLieuPay validation incorrect');

    //Validate max 7 and no alpha on liveInPay
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.liveInPay)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.liveInPay, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.liveInPay.value).eql('$8,888,888', 'liveInPay validation incorrect');

    //Validate max 7 and no alpha on telephoneConsultationPay
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.telephoneConsultationPay)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.telephoneConsultationPay, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.telephoneConsultationPay.value).eql('$8,888,888', 'telephoneConsultationPay validation incorrect');

    //Validate max 7 and no alpha on msp
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.msp)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.msp, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.msp.value).eql('$8,888,888', 'msp validation incorrect');

    //Validate max 7 and no alpha on cpp
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.cpp)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.cpp, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.cpp.value).eql('$8,888,888', 'cpp validation incorrect');

    //Validate max 7 and no alpha on groupLifeAdd
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.groupLifeAdd)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.groupLifeAdd, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.groupLifeAdd.value).eql('$8,888,888', 'groupLifeAdd validation incorrect');

    //Validate max 7 and no alpha on casualStatHolVacationPay
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.casualStatHolVacationPay)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.casualStatHolVacationPay, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.casualStatHolVacationPay.value).eql('$8,888,888', 'casualStatHolVacationPay validation incorrect');

    //Validate max 7 and no alpha on superShiftPremium
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.superShiftPremium)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.superShiftPremium, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.superShiftPremium.value).eql('$8,888,888', 'superShiftPremium validation incorrect');

    //Validate max 7 and no alpha on onCallDifferentials
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.onCallDifferentials)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.onCallDifferentials, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.onCallDifferentials.value).eql('$8,888,888', 'onCallDifferentials validation incorrect');

    //Validate max 7 and no alpha on pensionPlanRrsp
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.pensionPlanRrsp)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.pensionPlanRrsp, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.pensionPlanRrsp.value).eql('$8,888,888', 'pensionPlanRrsp validation incorrect');

    //Validate max 7 and no alpha on extendedHealth
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.extendedHealth)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.extendedHealth, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.extendedHealth.value).eql('$8,888,888', 'extendedHealth validation incorrect');

    //Validate max 7 and no alpha on wcb
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.wcb)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.wcb, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.wcb.value).eql('$8,888,888', 'wcb validation incorrect');

    //Validate max 7 and no alpha on retroAndLumpSumPayout
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.retroAndLumpSumPayout)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.retroAndLumpSumPayout, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.retroAndLumpSumPayout.value).eql('$8,888,888', 'retroAndLumpSumPayout validation incorrect');

    //Validate max 7 and no alpha on difficultToFillUnitPremium
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.difficultToFillUnitPremium)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.difficultToFillUnitPremium, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.difficultToFillUnitPremium.value).eql('$8,888,888', 'difficultToFillUnitPremium validation incorrect');

    //Validate max 7 and no alpha on overnightPay
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.overnightPay)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.overnightPay, '8888888888888');

    await t
        .expect(desGroupsPagePopUp.overnightPay.value).eql('$8,888,888', 'overnightPay validation incorrect');

    //Click create button
    await desGroupsPagePopUp.clickUpdateButton();

    //select the group for update
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'R - Professional Association of Residents';
    var groupIndex = desGroupsPage.dataIndexOfDesignatedGroup(designatedGroupsData, designatedGroupValue);
    var groupSelected = desGroupsPage.designatedGroups().nth(groupIndex);

    await t
        .click(groupSelected);

    //Update the fields
    //Update on paidStatutoryHolidays
    await t
        .expect(desGroupsPagePopUp.paidStatutoryHolidays.value).eql('$8,888,888.00', 'paidStatutoryHolidays validation incorrect');

    //Update on payRelievingHigherPosition
    await t
        .expect(desGroupsPagePopUp.payRelievingHigherPosition.value).eql('$8,888,888.00', 'payRelievingHigherPosition validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelovertime();

    //Validate max 7 and no alpha on premPayHrsWorkedStat15
    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat15.value).eql('$8,888,888.00', 'premPayHrsWorkedStat15 validation incorrect');

    //Validate max 7 and no alpha on regWorkDayOvertime15
    await t
        .expect(desGroupsPagePopUp.regWorkDayOvertime15.value).eql('$8,888,888.00', 'regWorkDayOvertime15 validation incorrect');

    //Validate max 7 and no alpha on regdayoffot15
    await t
        .expect(desGroupsPagePopUp.regdayoffot15.value).eql('$8,888,888.00', 'regdayoffot15 validation incorrect');

    //Validate max 7 and no alpha on overtimeInsuffNotice15
    await t
        .expect(desGroupsPagePopUp.overtimeInsuffNotice15.value).eql('$8,888,888.00', 'overtimeInsuffNotice15 validation incorrect');

    //Validate max 7 and no alpha on callBack15
    await t
        .expect(desGroupsPagePopUp.callBack15.value).eql('$8,888,888.00', 'callBack15 validation incorrect');

    //Validate max 7 and no alpha on otherOvertime15
    await t
        .expect(desGroupsPagePopUp.otherOvertime15.value).eql('$8,888,888.00', 'otherOvertime15 validation incorrect');

    //Validate max 7 and no alpha on totalOvertime15
    await t
        .expect(desGroupsPagePopUp.totalOvertime15.value).eql('$8,888,888.00', 'totalOvertime15 validation incorrect');

    //Validate max 7 and no alpha on totalOvertime15
    await t
        .expect(desGroupsPagePopUp.totalOvertime15.value).eql('$8,888,888.00', 'totalOvertime15 validation incorrect');

    //Validate max 7 and no alpha on premPayHrsWorkedStat2
    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat2.value).eql('$8,888,888.00', 'premPayHrsWorkedStat2 validation incorrect');

    //Validate max 7 and no alpha on regWorkDayOvertime2
    await t
        .expect(desGroupsPagePopUp.regWorkDayOvertime2.value).eql('$8,888,888.00', 'regWorkDayOvertime2 validation incorrect');

    //Validate max 7 and no alpha on regdayoffot2
    await t
        .expect(desGroupsPagePopUp.regdayoffot2.value).eql('$8,888,888.00', 'regdayoffot2 validation incorrect');

    //Validate max 7 and no alpha on overtimeInsuffNotice2
    await t
        .expect(desGroupsPagePopUp.overtimeInsuffNotice2.value).eql('$8,888,888.00', 'overtimeInsuffNotice2 validation incorrect');

    //Validate max 7 and no alpha on callBack2
    await t
        .expect(desGroupsPagePopUp.callBack2.value).eql('$8,888,888.00', 'callBack2 validation incorrect');

    //Validate max 7 and no alpha on otherOvertime2
    await t
        .expect(desGroupsPagePopUp.otherOvertime2.value).eql('$8,888,888.00', 'otherOvertime2 validation incorrect');

    //Validate max 7 and no alpha on totalOvertime2
    await t
        .expect(desGroupsPagePopUp.totalOvertime2.value).eql('$8,888,888.00', 'totalOvertime2 validation incorrect');

    //Validate max 7 and no alpha on premPayHrsWorkedStat25
    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat25.value).eql('$8,888,888.00', 'premPayHrsWorkedStat25 validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelleave();

    //Validate max 7 and no alpha on sickleavebank
    await t
        .expect(desGroupsPagePopUp.sickleavebank.value).eql('8,888,888.00', 'sickleavebank validation incorrect');

    //Validate max 7 and no alpha on specialLeave
    await t
        .expect(desGroupsPagePopUp.specialLeave.value).eql('$8,888,888.00', 'specialLeave validation incorrect');

    //Validate max 7 and no alpha on employerPaidUnionBusiness
    await t
        .expect(desGroupsPagePopUp.employerPaidUnionBusiness.value).eql('$8,888,888.00', 'employerPaidUnionBusiness validation incorrect');

    //Validate max 7 and no alpha on allOtherPaidLeaves
    await t
        .expect(desGroupsPagePopUp.allOtherPaidLeaves.value).eql('$8,888,888.00', 'allOtherPaidLeaves validation incorrect');

    //Validate max 7 and no alpha on sickLeavePaid
    await t
        .expect(desGroupsPagePopUp.sickLeavePaid.value).eql('$8,888,888.00', 'sickLeavePaid validation incorrect');

    //Validate max 7 and no alpha on compassionateLeave
    await t
        .expect(desGroupsPagePopUp.compassionateLeave.value).eql('$8,888,888.00', 'compassionateLeave validation incorrect');

    //Validate max 7 and no alpha on educationLeave
    await t
        .expect(desGroupsPagePopUp.educationLeave.value).eql('$8,888,888.00', 'educationLeave validation incorrect');

    //Validate max 7 and no alpha on paidLeaveWhileOnWcb
    await t
        .expect(desGroupsPagePopUp.paidLeaveWhileOnWcb.value).eql('$8,888,888.00', 'paidLeaveWhileOnWcb validation incorrect');

    //Validate max 7 and no alpha on sickLeaveCashPayout
    await t
        .expect(desGroupsPagePopUp.sickLeaveCashPayout.value).eql('$8,888,888.00', 'sickLeaveCashPayout validation incorrect');

    //Validate max 7 and no alpha on juryDuty
    await t
        .expect(desGroupsPagePopUp.juryDuty.value).eql('$8,888,888.00', 'juryDuty validation incorrect');

    //Validate max 7 and no alpha on timeOffInLieuCto
    await t
        .expect(desGroupsPagePopUp.timeOffInLieuCto.value).eql('$8,888,888.00', 'timeOffInLieuCto validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelallowance();

    //Validate max 7 and no alpha on onCallMealPeriods
    await t
        .expect(desGroupsPagePopUp.onCallMealPeriods.value).eql('$8,888,888.00', 'onCallMealPeriods validation incorrect');

    //Validate max 7 and no alpha on shiftPremiumsWeekends
    await t
        .expect(desGroupsPagePopUp.shiftPremiumsWeekends.value).eql('$8,888,888.00', 'shiftPremiumsWeekends validation incorrect');

    //Validate max 7 and no alpha on respPaySpecialAllowances
    await t
        .expect(desGroupsPagePopUp.respPaySpecialAllowances.value).eql('$8,888,888.00', 'respPaySpecialAllowances validation incorrect');

    //Validate max 7 and no alpha on isolationAllowance
    await t
        .expect(desGroupsPagePopUp.isolationAllowance.value).eql('$8,888,888.00', 'isolationAllowance validation incorrect');

    //Validate max 7 and no alpha on maternityLeaveSebPlan
    await t
        .expect(desGroupsPagePopUp.maternityLeaveSebPlan.value).eql('$8,888,888.00', 'maternityLeaveSebPlan validation incorrect');

    //Validate max 7 and no alpha on shiftPremiumsEvenings
    await t
        .expect(desGroupsPagePopUp.shiftPremiumsEvenings.value).eql('$8,888,888.00', 'shiftPremiumsEvenings validation incorrect');

    //Validate max 7 and no alpha on primaryRate
    await t
        .expect(desGroupsPagePopUp.primaryRate.value).eql('$8,888,888.00', 'primaryRate validation incorrect');

    //Validate max 7 and no alpha on travelAllowance
    await t
        .expect(desGroupsPagePopUp.travelAllowance.value).eql('$8,888,888.00', 'travelAllowance validation incorrect');

    //Validate max 7 and no alpha on mealAllowance
    await t
        .expect(desGroupsPagePopUp.mealAllowance.value).eql('$8,888,888.00', 'mealAllowance validation incorrect');

    //Validate max 7 and no alpha on otherPremiumsAllowances
    await t
        .expect(desGroupsPagePopUp.otherPremiumsAllowances.value).eql('$8,888,888.00', 'otherPremiumsAllowances validation incorrect');

    //Validate max 7 and no alpha on shiftPremiumsNights
    await t
        .expect(desGroupsPagePopUp.shiftPremiumsNights.value).eql('$8,888,888.00', 'shiftPremiumsNights validation incorrect');

    //Validate max 7 and no alpha on qualificationDifferentials
    await t
        .expect(desGroupsPagePopUp.qualificationDifferentials.value).eql('$8,888,888.00', 'qualificationDifferentials validation incorrect');

    //Validate max 7 and no alpha on uniformAllowance
    await t
        .expect(desGroupsPagePopUp.uniformAllowance.value).eql('$8,888,888.00', 'uniformAllowance validation incorrect');

    //Validate max 7 and no alpha on severanceAllowancePaid
    await t
        .expect(desGroupsPagePopUp.severanceAllowancePaid.value).eql('$8,888,888.00', 'severanceAllowancePaid validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelpay();

    //Validate max 7 and no alpha on superannuation
    await t
        .expect(desGroupsPagePopUp.superannuation.value).eql('$8,888,888.00', 'superannuation validation incorrect');

    //Validate max 7 and no alpha on dental
    await t
        .expect(desGroupsPagePopUp.dental.value).eql('$8,888,888.00', 'dental validation incorrect');

    //Validate max 7 and no alpha on ei
    await t
        .expect(desGroupsPagePopUp.ei.value).eql('$8,888,888.00', 'ei validation incorrect');

    //Validate max 7 and no alpha on longTermDisability
    await t
        .expect(desGroupsPagePopUp.longTermDisability.value).eql('$8,888,888.00', 'longTermDisability validation incorrect');

    //Validate max 7 and no alpha on homeSupportHolLieuPay
    await t
        .expect(desGroupsPagePopUp.homeSupportHolLieuPay.value).eql('$8,888,888.00', 'homeSupportHolLieuPay validation incorrect');

    //Validate max 7 and no alpha on liveInPay
    await t
        .expect(desGroupsPagePopUp.liveInPay.value).eql('$8,888,888.00', 'liveInPay validation incorrect');

    //Validate max 7 and no alpha on telephoneConsultationPay
    await t
        .expect(desGroupsPagePopUp.telephoneConsultationPay.value).eql('$8,888,888.00', 'telephoneConsultationPay validation incorrect');

    //Validate max 7 and no alpha on msp
    await t
        .expect(desGroupsPagePopUp.msp.value).eql('$8,888,888.00', 'msp validation incorrect');

    //Validate max 7 and no alpha on cpp
    await t
        .expect(desGroupsPagePopUp.cpp.value).eql('$8,888,888.00', 'cpp validation incorrect');

    //Validate max 7 and no alpha on groupLifeAdd
    await t
        .expect(desGroupsPagePopUp.groupLifeAdd.value).eql('$8,888,888.00', 'groupLifeAdd validation incorrect');

    //Validate max 7 and no alpha on casualStatHolVacationPay
    await t
        .expect(desGroupsPagePopUp.casualStatHolVacationPay.value).eql('$8,888,888.00', 'casualStatHolVacationPay validation incorrect');

    //Validate max 7 and no alpha on superShiftPremium
    await t
        .expect(desGroupsPagePopUp.superShiftPremium.value).eql('$8,888,888.00', 'superShiftPremium validation incorrect');

    //Validate max 7 and no alpha on onCallDifferentials
    await t
        .expect(desGroupsPagePopUp.onCallDifferentials.value).eql('$8,888,888.00', 'onCallDifferentials validation incorrect');

    //Validate max 7 and no alpha on pensionPlanRrsp
    await t
        .expect(desGroupsPagePopUp.pensionPlanRrsp.value).eql('$8,888,888.00', 'pensionPlanRrsp validation incorrect');

    //Validate max 7 and no alpha on extendedHealth
    await t
        .expect(desGroupsPagePopUp.extendedHealth.value).eql('$8,888,888.00', 'extendedHealth validation incorrect');

    //Validate max 7 and no alpha on wcb
    await t
        .expect(desGroupsPagePopUp.wcb.value).eql('$8,888,888.00', 'wcb validation incorrect');

    //Validate max 7 and no alpha on retroAndLumpSumPayout
    await t
        .expect(desGroupsPagePopUp.retroAndLumpSumPayout.value).eql('$8,888,888.00', 'retroAndLumpSumPayout validation incorrect');

    //Validate max 7 and no alpha on difficultToFillUnitPremium
    await t
        .expect(desGroupsPagePopUp.difficultToFillUnitPremium.value).eql('$8,888,888.00', 'difficultToFillUnitPremium validation incorrect');

    //Validate max 7 and no alpha on overnightPay
    await t
        .expect(desGroupsPagePopUp.overnightPay.value).eql('$8,888,888.00', 'overnightPay validation incorrect');
});

test('25. Cancel the update of a designated group', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //select the group for update
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'R - Professional Association of Residents';
    var groupIndex = desGroupsPage.dataIndexOfDesignatedGroup(designatedGroupsData, designatedGroupValue);
    var groupSelected = desGroupsPage.designatedGroups().nth(groupIndex);

    await t
        .click(groupSelected);

    //Update the fields
    //Update on paidStatutoryHolidays
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.paidStatutoryHolidays)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.paidStatutoryHolidays, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.paidStatutoryHolidays.value).eql('$9,999,999', 'paidStatutoryHolidays validation incorrect');

    //Update on payRelievingHigherPosition
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.payRelievingHigherPosition)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.payRelievingHigherPosition, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.payRelievingHigherPosition.value).eql('$9,999,999', 'payRelievingHigherPosition validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelovertime();

    //Validate max 7 and no alpha on premPayHrsWorkedStat15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.premPayHrsWorkedStat15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.premPayHrsWorkedStat15, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat15.value).eql('$9,999,999', 'premPayHrsWorkedStat15 validation incorrect');

    //Validate max 7 and no alpha on regWorkDayOvertime15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.regWorkDayOvertime15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.regWorkDayOvertime15, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.regWorkDayOvertime15.value).eql('$9,999,999', 'regWorkDayOvertime15 validation incorrect');

    //Validate max 7 and no alpha on regdayoffot15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.regdayoffot15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.regdayoffot15, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.regdayoffot15.value).eql('$9,999,999', 'regdayoffot15 validation incorrect');

    //Validate max 7 and no alpha on overtimeInsuffNotice15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.overtimeInsuffNotice15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.overtimeInsuffNotice15, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.overtimeInsuffNotice15.value).eql('$9,999,999', 'overtimeInsuffNotice15 validation incorrect');

    //Validate max 7 and no alpha on callBack15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.callBack15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.callBack15, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.callBack15.value).eql('$9,999,999', 'callBack15 validation incorrect');

    //Validate max 7 and no alpha on otherOvertime15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.otherOvertime15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.otherOvertime15, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.otherOvertime15.value).eql('$9,999,999', 'otherOvertime15 validation incorrect');

    //Validate max 7 and no alpha on totalOvertime15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.totalOvertime15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.totalOvertime15, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.totalOvertime15.value).eql('$9,999,999', 'totalOvertime15 validation incorrect');

    //Validate max 7 and no alpha on totalOvertime15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.totalOvertime15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.totalOvertime15, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.totalOvertime15.value).eql('$9,999,999', 'totalOvertime15 validation incorrect');

    //Validate max 7 and no alpha on premPayHrsWorkedStat2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.premPayHrsWorkedStat2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.premPayHrsWorkedStat2, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat2.value).eql('$9,999,999', 'premPayHrsWorkedStat2 validation incorrect');

    //Validate max 7 and no alpha on regWorkDayOvertime2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.regWorkDayOvertime2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.regWorkDayOvertime2, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.regWorkDayOvertime2.value).eql('$9,999,999', 'regWorkDayOvertime2 validation incorrect');

    //Validate max 7 and no alpha on regdayoffot2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.regdayoffot2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.regdayoffot2, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.regdayoffot2.value).eql('$9,999,999', 'regdayoffot2 validation incorrect');

    //Validate max 7 and no alpha on overtimeInsuffNotice2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.overtimeInsuffNotice2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.overtimeInsuffNotice2, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.overtimeInsuffNotice2.value).eql('$9,999,999', 'overtimeInsuffNotice2 validation incorrect');

    //Validate max 7 and no alpha on callBack2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.callBack2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.callBack2, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.callBack2.value).eql('$9,999,999', 'callBack2 validation incorrect');

    //Validate max 7 and no alpha on otherOvertime2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.otherOvertime2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.otherOvertime2, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.otherOvertime2.value).eql('$9,999,999', 'otherOvertime2 validation incorrect');

    //Validate max 7 and no alpha on totalOvertime2
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.totalOvertime2)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.totalOvertime2, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.totalOvertime2.value).eql('$9,999,999', 'totalOvertime2 validation incorrect');

    //Validate max 7 and no alpha on premPayHrsWorkedStat25
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.premPayHrsWorkedStat25)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.premPayHrsWorkedStat25, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat25.value).eql('$9,999,999', 'premPayHrsWorkedStat25 validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelleave();

    //Validate max 7 and no alpha on sickleavebank
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.sickleavebank)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.sickleavebank, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.sickleavebank.value).eql('9,999,999', 'sickleavebank validation incorrect');

    //Validate max 7 and no alpha on specialLeave
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.specialLeave)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.specialLeave, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.specialLeave.value).eql('$9,999,999', 'specialLeave validation incorrect');

    //Validate max 7 and no alpha on employerPaidUnionBusiness
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.employerPaidUnionBusiness)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.employerPaidUnionBusiness, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.employerPaidUnionBusiness.value).eql('$9,999,999', 'employerPaidUnionBusiness validation incorrect');

    //Validate max 7 and no alpha on allOtherPaidLeaves
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.allOtherPaidLeaves)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.allOtherPaidLeaves, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.allOtherPaidLeaves.value).eql('$9,999,999', 'allOtherPaidLeaves validation incorrect');

    //Validate max 7 and no alpha on sickLeavePaid
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.sickLeavePaid)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.sickLeavePaid, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.sickLeavePaid.value).eql('$9,999,999', 'sickLeavePaid validation incorrect');

    //Validate max 7 and no alpha on compassionateLeave
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.compassionateLeave)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.compassionateLeave, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.compassionateLeave.value).eql('$9,999,999', 'compassionateLeave validation incorrect');

    //Validate max 7 and no alpha on educationLeave
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.educationLeave)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.educationLeave, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.educationLeave.value).eql('$9,999,999', 'educationLeave validation incorrect');

    //Validate max 7 and no alpha on paidLeaveWhileOnWcb
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.paidLeaveWhileOnWcb)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.paidLeaveWhileOnWcb, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.paidLeaveWhileOnWcb.value).eql('$9,999,999', 'paidLeaveWhileOnWcb validation incorrect');

    //Validate max 7 and no alpha on sickLeaveCashPayout
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.sickLeaveCashPayout)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.sickLeaveCashPayout, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.sickLeaveCashPayout.value).eql('$9,999,999', 'sickLeaveCashPayout validation incorrect');

    //Validate max 7 and no alpha on juryDuty
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.juryDuty)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.juryDuty, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.juryDuty.value).eql('$9,999,999', 'juryDuty validation incorrect');

    //Validate max 7 and no alpha on timeOffInLieuCto
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.timeOffInLieuCto)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.timeOffInLieuCto, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.timeOffInLieuCto.value).eql('$9,999,999', 'timeOffInLieuCto validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelallowance();

    //Validate max 7 and no alpha on onCallMealPeriods
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.onCallMealPeriods)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.onCallMealPeriods, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.onCallMealPeriods.value).eql('$9,999,999', 'onCallMealPeriods validation incorrect');

    //Validate max 7 and no alpha on shiftPremiumsWeekends
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.shiftPremiumsWeekends)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.shiftPremiumsWeekends, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.shiftPremiumsWeekends.value).eql('$9,999,999', 'shiftPremiumsWeekends validation incorrect');

    //Validate max 7 and no alpha on respPaySpecialAllowances
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.respPaySpecialAllowances)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.respPaySpecialAllowances, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.respPaySpecialAllowances.value).eql('$9,999,999', 'respPaySpecialAllowances validation incorrect');

    //Validate max 7 and no alpha on isolationAllowance
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.isolationAllowance)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.isolationAllowance, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.isolationAllowance.value).eql('$9,999,999', 'isolationAllowance validation incorrect');

    //Validate max 7 and no alpha on maternityLeaveSebPlan
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.maternityLeaveSebPlan)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.maternityLeaveSebPlan, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.maternityLeaveSebPlan.value).eql('$9,999,999', 'maternityLeaveSebPlan validation incorrect');

    //Validate max 7 and no alpha on shiftPremiumsEvenings
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.shiftPremiumsEvenings)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.shiftPremiumsEvenings, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.shiftPremiumsEvenings.value).eql('$9,999,999', 'shiftPremiumsEvenings validation incorrect');

    //Validate max 7 and no alpha on primaryRate
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.primaryRate)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.primaryRate, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.primaryRate.value).eql('$9,999,999', 'primaryRate validation incorrect');

    //Validate max 7 and no alpha on travelAllowance
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.travelAllowance)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.travelAllowance, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.travelAllowance.value).eql('$9,999,999', 'travelAllowance validation incorrect');

    //Validate max 7 and no alpha on mealAllowance
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.mealAllowance)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.mealAllowance, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.mealAllowance.value).eql('$9,999,999', 'mealAllowance validation incorrect');

    //Validate max 7 and no alpha on otherPremiumsAllowances
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.otherPremiumsAllowances)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.otherPremiumsAllowances, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.otherPremiumsAllowances.value).eql('$9,999,999', 'otherPremiumsAllowances validation incorrect');

    //Validate max 7 and no alpha on shiftPremiumsNights
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.shiftPremiumsNights)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.shiftPremiumsNights, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.shiftPremiumsNights.value).eql('$9,999,999', 'shiftPremiumsNights validation incorrect');

    //Validate max 7 and no alpha on qualificationDifferentials
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.qualificationDifferentials)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.qualificationDifferentials, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.qualificationDifferentials.value).eql('$9,999,999', 'qualificationDifferentials validation incorrect');

    //Validate max 7 and no alpha on uniformAllowance
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.uniformAllowance)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.uniformAllowance, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.uniformAllowance.value).eql('$9,999,999', 'uniformAllowance validation incorrect');

    //Validate max 7 and no alpha on severanceAllowancePaid
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.severanceAllowancePaid)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.severanceAllowancePaid, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.severanceAllowancePaid.value).eql('$9,999,999', 'severanceAllowancePaid validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelpay();

    //Validate max 7 and no alpha on superannuation
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.superannuation)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.superannuation, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.superannuation.value).eql('$9,999,999', 'superannuation validation incorrect');

    //Validate max 7 and no alpha on dental
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.dental)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.dental, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.dental.value).eql('$9,999,999', 'dental validation incorrect');

    //Validate max 7 and no alpha on ei
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.ei)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.ei, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.ei.value).eql('$9,999,999', 'ei validation incorrect');

    //Validate max 7 and no alpha on longTermDisability
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.longTermDisability)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.longTermDisability, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.longTermDisability.value).eql('$9,999,999', 'longTermDisability validation incorrect');

    //Validate max 7 and no alpha on homeSupportHolLieuPay
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.homeSupportHolLieuPay)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.homeSupportHolLieuPay, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.homeSupportHolLieuPay.value).eql('$9,999,999', 'homeSupportHolLieuPay validation incorrect');

    //Validate max 7 and no alpha on liveInPay
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.liveInPay)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.liveInPay, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.liveInPay.value).eql('$9,999,999', 'liveInPay validation incorrect');

    //Validate max 7 and no alpha on telephoneConsultationPay
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.telephoneConsultationPay)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.telephoneConsultationPay, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.telephoneConsultationPay.value).eql('$9,999,999', 'telephoneConsultationPay validation incorrect');

    //Validate max 7 and no alpha on msp
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.msp)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.msp, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.msp.value).eql('$9,999,999', 'msp validation incorrect');

    //Validate max 7 and no alpha on cpp
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.cpp)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.cpp, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.cpp.value).eql('$9,999,999', 'cpp validation incorrect');

    //Validate max 7 and no alpha on groupLifeAdd
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.groupLifeAdd)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.groupLifeAdd, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.groupLifeAdd.value).eql('$9,999,999', 'groupLifeAdd validation incorrect');

    //Validate max 7 and no alpha on casualStatHolVacationPay
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.casualStatHolVacationPay)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.casualStatHolVacationPay, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.casualStatHolVacationPay.value).eql('$9,999,999', 'casualStatHolVacationPay validation incorrect');

    //Validate max 7 and no alpha on superShiftPremium
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.superShiftPremium)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.superShiftPremium, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.superShiftPremium.value).eql('$9,999,999', 'superShiftPremium validation incorrect');

    //Validate max 7 and no alpha on onCallDifferentials
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.onCallDifferentials)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.onCallDifferentials, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.onCallDifferentials.value).eql('$9,999,999', 'onCallDifferentials validation incorrect');

    //Validate max 7 and no alpha on pensionPlanRrsp
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.pensionPlanRrsp)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.pensionPlanRrsp, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.pensionPlanRrsp.value).eql('$9,999,999', 'pensionPlanRrsp validation incorrect');

    //Validate max 7 and no alpha on extendedHealth
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.extendedHealth)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.extendedHealth, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.extendedHealth.value).eql('$9,999,999', 'extendedHealth validation incorrect');

    //Validate max 7 and no alpha on wcb
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.wcb)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.wcb, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.wcb.value).eql('$9,999,999', 'wcb validation incorrect');

    //Validate max 7 and no alpha on retroAndLumpSumPayout
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.retroAndLumpSumPayout)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.retroAndLumpSumPayout, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.retroAndLumpSumPayout.value).eql('$9,999,999', 'retroAndLumpSumPayout validation incorrect');

    //Validate max 7 and no alpha on difficultToFillUnitPremium
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.difficultToFillUnitPremium)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.difficultToFillUnitPremium, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.difficultToFillUnitPremium.value).eql('$9,999,999', 'difficultToFillUnitPremium validation incorrect');

    //Validate max 7 and no alpha on overnightPay
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.overnightPay)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.overnightPay, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.overnightPay.value).eql('$9,999,999', 'overnightPay validation incorrect');

    //Click create button
    await desGroupsPagePopUp.clickCancelButton();

    //select the group for update
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'R - Professional Association of Residents';
    var groupIndex = desGroupsPage.dataIndexOfDesignatedGroup(designatedGroupsData, designatedGroupValue);
    var groupSelected = desGroupsPage.designatedGroups().nth(groupIndex);

    await t
        .click(groupSelected);

    //Update the fields
    //Update on paidStatutoryHolidays
    await t
        .expect(desGroupsPagePopUp.paidStatutoryHolidays.value).eql('$8,888,888.00', 'paidStatutoryHolidays validation incorrect');

    //Update on payRelievingHigherPosition
    await t
        .expect(desGroupsPagePopUp.payRelievingHigherPosition.value).eql('$8,888,888.00', 'payRelievingHigherPosition validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelovertime();

    //Validate max 7 and no alpha on premPayHrsWorkedStat15
    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat15.value).eql('$8,888,888.00', 'premPayHrsWorkedStat15 validation incorrect');

    //Validate max 7 and no alpha on regWorkDayOvertime15
    await t
        .expect(desGroupsPagePopUp.regWorkDayOvertime15.value).eql('$8,888,888.00', 'regWorkDayOvertime15 validation incorrect');

    //Validate max 7 and no alpha on regdayoffot15
    await t
        .expect(desGroupsPagePopUp.regdayoffot15.value).eql('$8,888,888.00', 'regdayoffot15 validation incorrect');

    //Validate max 7 and no alpha on overtimeInsuffNotice15
    await t
        .expect(desGroupsPagePopUp.overtimeInsuffNotice15.value).eql('$8,888,888.00', 'overtimeInsuffNotice15 validation incorrect');

    //Validate max 7 and no alpha on callBack15
    await t
        .expect(desGroupsPagePopUp.callBack15.value).eql('$8,888,888.00', 'callBack15 validation incorrect');

    //Validate max 7 and no alpha on otherOvertime15
    await t
        .expect(desGroupsPagePopUp.otherOvertime15.value).eql('$8,888,888.00', 'otherOvertime15 validation incorrect');

    //Validate max 7 and no alpha on totalOvertime15
    await t
        .expect(desGroupsPagePopUp.totalOvertime15.value).eql('$8,888,888.00', 'totalOvertime15 validation incorrect');

    //Validate max 7 and no alpha on totalOvertime15
    await t
        .expect(desGroupsPagePopUp.totalOvertime15.value).eql('$8,888,888.00', 'totalOvertime15 validation incorrect');

    //Validate max 7 and no alpha on premPayHrsWorkedStat2
    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat2.value).eql('$8,888,888.00', 'premPayHrsWorkedStat2 validation incorrect');

    //Validate max 7 and no alpha on regWorkDayOvertime2
    await t
        .expect(desGroupsPagePopUp.regWorkDayOvertime2.value).eql('$8,888,888.00', 'regWorkDayOvertime2 validation incorrect');

    //Validate max 7 and no alpha on regdayoffot2
    await t
        .expect(desGroupsPagePopUp.regdayoffot2.value).eql('$8,888,888.00', 'regdayoffot2 validation incorrect');

    //Validate max 7 and no alpha on overtimeInsuffNotice2
    await t
        .expect(desGroupsPagePopUp.overtimeInsuffNotice2.value).eql('$8,888,888.00', 'overtimeInsuffNotice2 validation incorrect');

    //Validate max 7 and no alpha on callBack2
    await t
        .expect(desGroupsPagePopUp.callBack2.value).eql('$8,888,888.00', 'callBack2 validation incorrect');

    //Validate max 7 and no alpha on otherOvertime2
    await t
        .expect(desGroupsPagePopUp.otherOvertime2.value).eql('$8,888,888.00', 'otherOvertime2 validation incorrect');

    //Validate max 7 and no alpha on totalOvertime2
    await t
        .expect(desGroupsPagePopUp.totalOvertime2.value).eql('$8,888,888.00', 'totalOvertime2 validation incorrect');

    //Validate max 7 and no alpha on premPayHrsWorkedStat25
    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat25.value).eql('$8,888,888.00', 'premPayHrsWorkedStat25 validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelleave();

    //Validate max 7 and no alpha on sickleavebank
    await t
        .expect(desGroupsPagePopUp.sickleavebank.value).eql('8,888,888.00', 'sickleavebank validation incorrect');

    //Validate max 7 and no alpha on specialLeave
    await t
        .expect(desGroupsPagePopUp.specialLeave.value).eql('$8,888,888.00', 'specialLeave validation incorrect');

    //Validate max 7 and no alpha on employerPaidUnionBusiness
    await t
        .expect(desGroupsPagePopUp.employerPaidUnionBusiness.value).eql('$8,888,888.00', 'employerPaidUnionBusiness validation incorrect');

    //Validate max 7 and no alpha on allOtherPaidLeaves
    await t
        .expect(desGroupsPagePopUp.allOtherPaidLeaves.value).eql('$8,888,888.00', 'allOtherPaidLeaves validation incorrect');

    //Validate max 7 and no alpha on sickLeavePaid
    await t
        .expect(desGroupsPagePopUp.sickLeavePaid.value).eql('$8,888,888.00', 'sickLeavePaid validation incorrect');

    //Validate max 7 and no alpha on compassionateLeave
    await t
        .expect(desGroupsPagePopUp.compassionateLeave.value).eql('$8,888,888.00', 'compassionateLeave validation incorrect');

    //Validate max 7 and no alpha on educationLeave
    await t
        .expect(desGroupsPagePopUp.educationLeave.value).eql('$8,888,888.00', 'educationLeave validation incorrect');

    //Validate max 7 and no alpha on paidLeaveWhileOnWcb
    await t
        .expect(desGroupsPagePopUp.paidLeaveWhileOnWcb.value).eql('$8,888,888.00', 'paidLeaveWhileOnWcb validation incorrect');

    //Validate max 7 and no alpha on sickLeaveCashPayout
    await t
        .expect(desGroupsPagePopUp.sickLeaveCashPayout.value).eql('$8,888,888.00', 'sickLeaveCashPayout validation incorrect');

    //Validate max 7 and no alpha on juryDuty
    await t
        .expect(desGroupsPagePopUp.juryDuty.value).eql('$8,888,888.00', 'juryDuty validation incorrect');

    //Validate max 7 and no alpha on timeOffInLieuCto
    await t
        .expect(desGroupsPagePopUp.timeOffInLieuCto.value).eql('$8,888,888.00', 'timeOffInLieuCto validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelallowance();

    //Validate max 7 and no alpha on onCallMealPeriods
    await t
        .expect(desGroupsPagePopUp.onCallMealPeriods.value).eql('$8,888,888.00', 'onCallMealPeriods validation incorrect');

    //Validate max 7 and no alpha on shiftPremiumsWeekends
    await t
        .expect(desGroupsPagePopUp.shiftPremiumsWeekends.value).eql('$8,888,888.00', 'shiftPremiumsWeekends validation incorrect');

    //Validate max 7 and no alpha on respPaySpecialAllowances
    await t
        .expect(desGroupsPagePopUp.respPaySpecialAllowances.value).eql('$8,888,888.00', 'respPaySpecialAllowances validation incorrect');

    //Validate max 7 and no alpha on isolationAllowance
    await t
        .expect(desGroupsPagePopUp.isolationAllowance.value).eql('$8,888,888.00', 'isolationAllowance validation incorrect');

    //Validate max 7 and no alpha on maternityLeaveSebPlan
    await t
        .expect(desGroupsPagePopUp.maternityLeaveSebPlan.value).eql('$8,888,888.00', 'maternityLeaveSebPlan validation incorrect');

    //Validate max 7 and no alpha on shiftPremiumsEvenings
    await t
        .expect(desGroupsPagePopUp.shiftPremiumsEvenings.value).eql('$8,888,888.00', 'shiftPremiumsEvenings validation incorrect');

    //Validate max 7 and no alpha on primaryRate
    await t
        .expect(desGroupsPagePopUp.primaryRate.value).eql('$8,888,888.00', 'primaryRate validation incorrect');

    //Validate max 7 and no alpha on travelAllowance
    await t
        .expect(desGroupsPagePopUp.travelAllowance.value).eql('$8,888,888.00', 'travelAllowance validation incorrect');

    //Validate max 7 and no alpha on mealAllowance
    await t
        .expect(desGroupsPagePopUp.mealAllowance.value).eql('$8,888,888.00', 'mealAllowance validation incorrect');

    //Validate max 7 and no alpha on otherPremiumsAllowances
    await t
        .expect(desGroupsPagePopUp.otherPremiumsAllowances.value).eql('$8,888,888.00', 'otherPremiumsAllowances validation incorrect');

    //Validate max 7 and no alpha on shiftPremiumsNights
    await t
        .expect(desGroupsPagePopUp.shiftPremiumsNights.value).eql('$8,888,888.00', 'shiftPremiumsNights validation incorrect');

    //Validate max 7 and no alpha on qualificationDifferentials
    await t
        .expect(desGroupsPagePopUp.qualificationDifferentials.value).eql('$8,888,888.00', 'qualificationDifferentials validation incorrect');

    //Validate max 7 and no alpha on uniformAllowance
    await t
        .expect(desGroupsPagePopUp.uniformAllowance.value).eql('$8,888,888.00', 'uniformAllowance validation incorrect');

    //Validate max 7 and no alpha on severanceAllowancePaid
    await t
        .expect(desGroupsPagePopUp.severanceAllowancePaid.value).eql('$8,888,888.00', 'severanceAllowancePaid validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelpay();

    //Validate max 7 and no alpha on superannuation
    await t
        .expect(desGroupsPagePopUp.superannuation.value).eql('$8,888,888.00', 'superannuation validation incorrect');

    //Validate max 7 and no alpha on dental
    await t
        .expect(desGroupsPagePopUp.dental.value).eql('$8,888,888.00', 'dental validation incorrect');

    //Validate max 7 and no alpha on ei
    await t
        .expect(desGroupsPagePopUp.ei.value).eql('$8,888,888.00', 'ei validation incorrect');

    //Validate max 7 and no alpha on longTermDisability
    await t
        .expect(desGroupsPagePopUp.longTermDisability.value).eql('$8,888,888.00', 'longTermDisability validation incorrect');

    //Validate max 7 and no alpha on homeSupportHolLieuPay
    await t
        .expect(desGroupsPagePopUp.homeSupportHolLieuPay.value).eql('$8,888,888.00', 'homeSupportHolLieuPay validation incorrect');

    //Validate max 7 and no alpha on liveInPay
    await t
        .expect(desGroupsPagePopUp.liveInPay.value).eql('$8,888,888.00', 'liveInPay validation incorrect');

    //Validate max 7 and no alpha on telephoneConsultationPay
    await t
        .expect(desGroupsPagePopUp.telephoneConsultationPay.value).eql('$8,888,888.00', 'telephoneConsultationPay validation incorrect');

    //Validate max 7 and no alpha on msp
    await t
        .expect(desGroupsPagePopUp.msp.value).eql('$8,888,888.00', 'msp validation incorrect');

    //Validate max 7 and no alpha on cpp
    await t
        .expect(desGroupsPagePopUp.cpp.value).eql('$8,888,888.00', 'cpp validation incorrect');

    //Validate max 7 and no alpha on groupLifeAdd
    await t
        .expect(desGroupsPagePopUp.groupLifeAdd.value).eql('$8,888,888.00', 'groupLifeAdd validation incorrect');

    //Validate max 7 and no alpha on casualStatHolVacationPay
    await t
        .expect(desGroupsPagePopUp.casualStatHolVacationPay.value).eql('$8,888,888.00', 'casualStatHolVacationPay validation incorrect');

    //Validate max 7 and no alpha on superShiftPremium
    await t
        .expect(desGroupsPagePopUp.superShiftPremium.value).eql('$8,888,888.00', 'superShiftPremium validation incorrect');

    //Validate max 7 and no alpha on onCallDifferentials
    await t
        .expect(desGroupsPagePopUp.onCallDifferentials.value).eql('$8,888,888.00', 'onCallDifferentials validation incorrect');

    //Validate max 7 and no alpha on pensionPlanRrsp
    await t
        .expect(desGroupsPagePopUp.pensionPlanRrsp.value).eql('$8,888,888.00', 'pensionPlanRrsp validation incorrect');

    //Validate max 7 and no alpha on extendedHealth
    await t
        .expect(desGroupsPagePopUp.extendedHealth.value).eql('$8,888,888.00', 'extendedHealth validation incorrect');

    //Validate max 7 and no alpha on wcb
    await t
        .expect(desGroupsPagePopUp.wcb.value).eql('$8,888,888.00', 'wcb validation incorrect');

    //Validate max 7 and no alpha on retroAndLumpSumPayout
    await t
        .expect(desGroupsPagePopUp.retroAndLumpSumPayout.value).eql('$8,888,888.00', 'retroAndLumpSumPayout validation incorrect');

    //Validate max 7 and no alpha on difficultToFillUnitPremium
    await t
        .expect(desGroupsPagePopUp.difficultToFillUnitPremium.value).eql('$8,888,888.00', 'difficultToFillUnitPremium validation incorrect');

    //Validate max 7 and no alpha on overnightPay
    await t
        .expect(desGroupsPagePopUp.overnightPay.value).eql('$8,888,888.00', 'overnightPay validation incorrect');
});

test('26. Update designated group, go to next and update next designated group', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //select the group for update
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'R - Professional Association of Residents';
    var groupIndex = desGroupsPage.dataIndexOfDesignatedGroup(designatedGroupsData, designatedGroupValue);
    var groupSelected = desGroupsPage.designatedGroups().nth(groupIndex);

    await t
        .click(groupSelected);

    //Update the fields
    //Update on paidStatutoryHolidays
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.paidStatutoryHolidays)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.paidStatutoryHolidays, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.paidStatutoryHolidays.value).eql('$9,999,999', 'paidStatutoryHolidays validation incorrect');

    //Update on payRelievingHigherPosition
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.payRelievingHigherPosition)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.payRelievingHigherPosition, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.payRelievingHigherPosition.value).eql('$9,999,999', 'payRelievingHigherPosition validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelovertime();

    //Validate max 7 and no alpha on premPayHrsWorkedStat15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.premPayHrsWorkedStat15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.premPayHrsWorkedStat15, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat15.value).eql('$9,999,999', 'premPayHrsWorkedStat15 validation incorrect');

    //Click update next button
    await desGroupsPagePopUp.clickUpdateNextButton();

    //Update the fields
    //Update on paidStatutoryHolidays
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.paidStatutoryHolidays)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.paidStatutoryHolidays, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.paidStatutoryHolidays.value).eql('$9,999,999', 'paidStatutoryHolidays validation incorrect');

    //Update on payRelievingHigherPosition
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.payRelievingHigherPosition)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.payRelievingHigherPosition, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.payRelievingHigherPosition.value).eql('$9,999,999', 'payRelievingHigherPosition validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelovertime();

    //Validate max 7 and no alpha on premPayHrsWorkedStat15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.premPayHrsWorkedStat15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.premPayHrsWorkedStat15, '9999999999999');

    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat15.value).eql('$9,999,999', 'premPayHrsWorkedStat15 validation incorrect');

    //Click update button
    await desGroupsPagePopUp.clickUpdateButton();

    //Validate the updates
    //select the group for update validation
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'R - Professional Association of Residents';
    var groupIndex = desGroupsPage.dataIndexOfDesignatedGroup(designatedGroupsData, designatedGroupValue);
    var groupSelected = desGroupsPage.designatedGroups().nth(groupIndex);

    await t
        .click(groupSelected);

    //Validate Update on paidStatutoryHolidays
    await t
        .expect(desGroupsPagePopUp.paidStatutoryHolidays.value).eql('$9,999,999.00', 'paidStatutoryHolidays validation incorrect');

    //Validate Update on payRelievingHigherPosition
    await t
        .expect(desGroupsPagePopUp.payRelievingHigherPosition.value).eql('$9,999,999.00', 'payRelievingHigherPosition validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelovertime();

    //Validate Validate max 7 and no alpha on premPayHrsWorkedStat15
    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat15.value).eql('$9,999,999.00', 'premPayHrsWorkedStat15 validation incorrect');

    //Click update button
    await desGroupsPagePopUp.clickCancelButton();

    //Validate the updates
    //select the group for update validation
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'A - Ambulance Paramedics and Dispatchers';
    var groupIndex = desGroupsPage.dataIndexOfDesignatedGroup(designatedGroupsData, designatedGroupValue);
    var groupSelected = desGroupsPage.designatedGroups().nth(groupIndex);

    await t
        .click(groupSelected);

    //Validate Update on paidStatutoryHolidays
    await t
        .expect(desGroupsPagePopUp.paidStatutoryHolidays.value).eql('$9,999,999.00', 'paidStatutoryHolidays validation incorrect');

    //Validate Update on payRelievingHigherPosition
    await t
        .expect(desGroupsPagePopUp.payRelievingHigherPosition.value).eql('$9,999,999.00', 'payRelievingHigherPosition validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelovertime();

    //Validate Validate max 7 and no alpha on premPayHrsWorkedStat15
    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat15.value).eql('$9,999,999.00', 'premPayHrsWorkedStat15 validation incorrect');

    //Click update button
    await desGroupsPagePopUp.clickCancelButton();
});

test('27. Update designated group, go to next and cancel the update of the next designated group', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //select the group for update
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'R - Professional Association of Residents';
    var groupIndex = desGroupsPage.dataIndexOfDesignatedGroup(designatedGroupsData, designatedGroupValue);
    var groupSelected = desGroupsPage.designatedGroups().nth(groupIndex);

    await t
        .click(groupSelected);

    //Update the fields
    //Update on paidStatutoryHolidays
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.paidStatutoryHolidays)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.paidStatutoryHolidays, '888888888888');

    await t
        .expect(desGroupsPagePopUp.paidStatutoryHolidays.value).eql('$8,888,888', 'paidStatutoryHolidays validation incorrect');

    //Update on payRelievingHigherPosition
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.payRelievingHigherPosition)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.payRelievingHigherPosition, '888888888888');

    await t
        .expect(desGroupsPagePopUp.payRelievingHigherPosition.value).eql('$8,888,888', 'payRelievingHigherPosition validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelovertime();

    //Validate max 7 and no alpha on premPayHrsWorkedStat15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.premPayHrsWorkedStat15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.premPayHrsWorkedStat15, '888888888888');

    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat15.value).eql('$8,888,888', 'premPayHrsWorkedStat15 validation incorrect');

    //Click update next button
    await desGroupsPagePopUp.clickUpdateNextButton();

    //Update the fields
    //Update on paidStatutoryHolidays
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.paidStatutoryHolidays)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.paidStatutoryHolidays, '888888888888');

    await t
        .expect(desGroupsPagePopUp.paidStatutoryHolidays.value).eql('$8,888,888', 'paidStatutoryHolidays validation incorrect');

    //Update on payRelievingHigherPosition
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.payRelievingHigherPosition)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.payRelievingHigherPosition, '888888888888');

    await t
        .expect(desGroupsPagePopUp.payRelievingHigherPosition.value).eql('$8,888,888', 'payRelievingHigherPosition validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelovertime();

    //Validate max 7 and no alpha on premPayHrsWorkedStat15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.premPayHrsWorkedStat15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.premPayHrsWorkedStat15, '888888888888');

    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat15.value).eql('$8,888,888', 'premPayHrsWorkedStat15 validation incorrect');

    //Click update button
    await desGroupsPagePopUp.clickCancelButton();

    //Validate the updates
    //select the group for update validation
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'R - Professional Association of Residents';
    var groupIndex = desGroupsPage.dataIndexOfDesignatedGroup(designatedGroupsData, designatedGroupValue);
    var groupSelected = desGroupsPage.designatedGroups().nth(groupIndex);

    await t
        .click(groupSelected);

    //Validate Update on paidStatutoryHolidays
    await t
        .expect(desGroupsPagePopUp.paidStatutoryHolidays.value).eql('$8,888,888.00', 'paidStatutoryHolidays validation incorrect');

    //Validate Update on payRelievingHigherPosition
    await t
        .expect(desGroupsPagePopUp.payRelievingHigherPosition.value).eql('$8,888,888.00', 'payRelievingHigherPosition validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelovertime();

    //Validate Validate max 7 and no alpha on premPayHrsWorkedStat15
    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat15.value).eql('$8,888,888.00', 'premPayHrsWorkedStat15 validation incorrect');

    //Click update button
    await desGroupsPagePopUp.clickCancelButton();

    //Validate the updates
    //select the group for update validation
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'A - Ambulance Paramedics and Dispatchers';
    var groupIndex = desGroupsPage.dataIndexOfDesignatedGroup(designatedGroupsData, designatedGroupValue);
    var groupSelected = desGroupsPage.designatedGroups().nth(groupIndex);

    await t
        .click(groupSelected);

    //Validate Update on paidStatutoryHolidays
    await t
        .expect(desGroupsPagePopUp.paidStatutoryHolidays.value).eql('$9,999,999.00', 'paidStatutoryHolidays validation incorrect');

    //Validate Update on payRelievingHigherPosition
    await t
        .expect(desGroupsPagePopUp.payRelievingHigherPosition.value).eql('$9,999,999.00', 'payRelievingHigherPosition validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelovertime();

    //Validate Validate max 7 and no alpha on premPayHrsWorkedStat15
    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat15.value).eql('$9,999,999.00', 'premPayHrsWorkedStat15 validation incorrect');

    //Click update button
    await desGroupsPagePopUp.clickCancelButton();
});


test('28. Delete designated group', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //select the group for update validation
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'A - Ambulance Paramedics and Dispatchers';
    var groupIndex = desGroupsPage.dataIndexOfDesignatedGroup(designatedGroupsData, designatedGroupValue);
    var groupSelected = desGroupsPage.designatedGroups().nth(groupIndex);

    await t
        .click(groupSelected);

    //Click update button
    await desGroupsPagePopUp.clickDeleteButton();

    //Click confirm button
    await desGroupsPagePopUp.confirmDeleteDesGroupsP();

    //Get the designated group data in the table
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'A - Ambulance Paramedics and Dispatchers';

    //Verify that a record has been deleted in the designated groups section
    await t
        .wait(2000)
        .expect(desGroupsPage.dataContainsDesignatedGroup(designatedGroupsData,
                                                          designatedGroupValue)).notOk();
});

test('29. Cancel the delete of a designated group', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //select the group for update validation
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'R - Professional Association of Residents';
    var groupIndex = desGroupsPage.dataIndexOfDesignatedGroup(designatedGroupsData, designatedGroupValue);
    var groupSelected = desGroupsPage.designatedGroups().nth(groupIndex);

    await t
        .click(groupSelected);

    //Click update button
    await desGroupsPagePopUp.clickDeleteButton();

    //Click confirm button
    await desGroupsPagePopUp.cancelDeleteDesGroupsP();

    //Get the designated group data in the table
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'R - Professional Association of Residents';

    //Verify that a record has been deleted in the designated groups section
    await t
        .wait(2000)
        .expect(desGroupsPage.dataContainsDesignatedGroup(designatedGroupsData,
                                                          designatedGroupValue)).ok();
});

test('30. Update designated group, go to next and delete the next designated group', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //select the group for update
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'A - Ambulance Paramedics and Dispatchers';
    var groupIndex = desGroupsPage.dataIndexOfDesignatedGroup(designatedGroupsData, designatedGroupValue);
    var groupSelected = desGroupsPage.designatedGroups().nth(groupIndex);

    await t
        .click(groupSelected);

    //Update the fields
    //Update on paidStatutoryHolidays
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.paidStatutoryHolidays)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.paidStatutoryHolidays, '777777777777');

    await t
        .expect(desGroupsPagePopUp.paidStatutoryHolidays.value).eql('$7,777,777', 'paidStatutoryHolidays validation incorrect');

    //Update on payRelievingHigherPosition
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.payRelievingHigherPosition)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.payRelievingHigherPosition, '777777777777');

    await t
        .expect(desGroupsPagePopUp.payRelievingHigherPosition.value).eql('$7,777,777', 'payRelievingHigherPosition validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelovertime();

    //Update premPayHrsWorkedStat15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.premPayHrsWorkedStat15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.premPayHrsWorkedStat15, '777777777777');

    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat15.value).eql('$7,777,777', 'premPayHrsWorkedStat15 validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelleave();

    //update sickleavebank
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.sickleavebank)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.sickleavebank, '222222222222');

    await t
        .expect(desGroupsPagePopUp.sickleavebank.value).eql('2,222,222', 'sickleavebank validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelallowance();

    //Update onCallMealPeriods
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.onCallMealPeriods)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.onCallMealPeriods, '333333333333');

    await t
        .expect(desGroupsPagePopUp.onCallMealPeriods.value).eql('$3,333,333', 'onCallMealPeriods validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelpay();

    //update dental
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.dental)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.dental, '4444444444444');

    await t
        .expect(desGroupsPagePopUp.dental.value).eql('$4,444,444', 'dental validation incorrect');

    //Click update next button
    await desGroupsPagePopUp.clickUpdateNextButton();

    //Click update button
    await desGroupsPagePopUp.clickDeleteButton();

    //Click confirm button
    await desGroupsPagePopUp.confirmDeleteDesGroupsP();

    //Get the designated group data in the table
    var designatedGroupsData2 = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue2 = 'R - Professional Association of Residents';

    //Verify that a record has been deleted in the designated groups section
    await t
        .wait(2000)
        .expect(desGroupsPage.dataContainsDesignatedGroup(designatedGroupsData,
                                                          designatedGroupValue)).notOk();

    //Validate the updates
    //select the group for update validation
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'A - Ambulance Paramedics and Dispatchers';
    var groupIndex = desGroupsPage.dataIndexOfDesignatedGroup(designatedGroupsData, designatedGroupValue);
    var groupSelected = desGroupsPage.designatedGroups().nth(groupIndex);

    await t
        .click(groupSelected);

    //Validate Update on paidStatutoryHolidays
    await t
        .expect(desGroupsPagePopUp.paidStatutoryHolidays.value).eql('$7,777,777.00', 'paidStatutoryHolidays validation incorrect');

    //Validate Update on payRelievingHigherPosition
    await t
        .expect(desGroupsPagePopUp.payRelievingHigherPosition.value).eql('$7,777,777.00', 'payRelievingHigherPosition validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelovertime();

    //Validate Validate max 7 and no alpha on premPayHrsWorkedStat15
    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat15.value).eql('$7,777,777.00', 'premPayHrsWorkedStat15 validation incorrect');

    //Click update button
    await desGroupsPagePopUp.clickCancelButton();
});

test('31. Export Payroll Summary Entry', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //open the export summary
    await exportPage.clickexportsummary();

    //Validate page load with header
    //Verify the buttons are present
    await t
        .wait(100)
        .expect(exportPage.backToPayrollSummary().visible).ok();

    await t
        .wait(100)
        .expect(exportPage.printPayrollSummary().visible).ok();

    //TODO Fix the current date format
    //Validate Date
//    var currentDate = new Date()
//  await t
//      .expect(exportPage.headerDate.innerText).eql(currentDate, 'headerDate validation incorrect');

    //Validate Corp Employer
    await t
        .expect(exportPage.headerCorpEmp.innerText).eql('6004 TestOrg5', 'headerCorpEmp validation incorrect');

    //Validate Site Employer
    await t
        .expect(exportPage.headerSiteEmp.innerText).eql('6005 TestSite5', 'headerSiteEmp validation incorrect');

    //Validate Reporting Period
    var currentDate = new Date(),
        lastYear = currentDate.getFullYear() - 1;
    var reportingPeriodFromDate = new Date(lastYear, 0, 1);
    reportingPeriodFromDate.setDate(reportingPeriodFromDate.getDate() + 8);
    var reportingPeriodFromDateStr = getShortDateString(reportingPeriodFromDate).replace(/ /g, '/');

    var reportingPeriodToDate = new Date(lastYear, 5, 30);
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() + 8);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate).replace(/ /g, '/');
    await t
        .expect(exportPage.headerReportingPeriod.innerText).eql(reportingPeriodFromDateStr + ' to ' + reportingPeriodToDateStr, 'headerReportingPeriod validation incorrect');

    //Validate content of employee table
    var employeeData = await exportPage.employeeData();
    var employeeValue1 = '9988999999';
    var employeeValue2 = '9999999999';

    await t
        .expect(exportPage.dataContainsEmployeeData(employeeData, employeeValue1)).ok();

    await t
        .expect(exportPage.dataContainsEmployeeData(employeeData, employeeValue2)).ok();

    //Validate content of overtime
    var overTimeData = await exportPage.overTimeData();
    var overTimeValue1 = 'Premium Pay for Stats (1.5)';
    var exportOverTimeTableCount = await exportPage.exportOverTimeTableCount();

    await t
        .expect(exportPage.dataContainsOverTimeData(overTimeData, overTimeValue1, exportOverTimeTableCount, 0)).ok();

    //Validate column count
    await t
        .expect(exportPage.exportOverTimeTableCount()).eql(3, 'exportOverTimeTableCount validation incorrect');

    //Validate content of leave
    var leaveData = await exportPage.leaveData();
    var leaveDataValue1 = 'Sick Leave Bank';
    var exportLeaveTableCount = await exportPage.exportLeaveTableCount();

    await t
        .expect(exportPage.dataContainsLeaveData(leaveData, leaveDataValue1, exportLeaveTableCount, 0)).ok();

    //Validate column count
    await t
        .expect(exportPage.exportLeaveTableCount()).eql(3, 'exportLeaveTableCount validation incorrect');

    //Validate content of allowance
    var allowanceData = await exportPage.allowanceData();
    var allowanceDataValue1 = 'On Call Meal';
    var exportAllowanceTableCount = await exportPage.exportAllowanceTableCount();

    await t
        .expect(exportPage.dataContainsAllowanceData(allowanceData, allowanceDataValue1, exportAllowanceTableCount, 0)).ok();

    //Validate column count
    await t
        .expect(exportPage.exportAllowanceTableCount()).eql(3, 'exportAllowanceTableCount validation incorrect');

    //Validate content of pay/
    var payData = await exportPage.payData();
    var payDataValue1 = 'Dental';
    var exportPayTableCount = await exportPage.exportPayTableCount();

    await t
        .expect(exportPage.dataContainsAllowanceData(payData, payDataValue1, exportPayTableCount, 0)).ok();

    //Validate column count
    await t
        .expect(exportPage.exportPayTableCount()).eql(3, 'exportPayTableCount validation incorrect');

    //do some updates to chance the report for update validations
    await exportPage.clickBackToPayrollSummary();

    //Add one extra designated group with minimal information
    await desGroupsPage.clickCreateButton();
    await selectInDropdownList(desGroupsPagePopUp.designatedGroup, desGroupsPagePopUp.designatedGroupOptions, 'Community');

    //Update on paidStatutoryHolidays
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.paidStatutoryHolidays)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.paidStatutoryHolidays, '777777777777');

    await t
        .expect(desGroupsPagePopUp.paidStatutoryHolidays.value).eql('$7,777,777', 'paidStatutoryHolidays validation incorrect');

    //Update on payRelievingHigherPosition
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.payRelievingHigherPosition)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.payRelievingHigherPosition, '777777777777');

    await t
        .expect(desGroupsPagePopUp.payRelievingHigherPosition.value).eql('$7,777,777', 'payRelievingHigherPosition validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelovertime();

    //Update premPayHrsWorkedStat15
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.premPayHrsWorkedStat15)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.premPayHrsWorkedStat15, '777777777777');

    await t
        .expect(desGroupsPagePopUp.premPayHrsWorkedStat15.value).eql('$7,777,777', 'premPayHrsWorkedStat15 validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelleave();

    //update sickleavebank
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.sickleavebank)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.sickleavebank, '222222222222');

    await t
        .expect(desGroupsPagePopUp.sickleavebank.value).eql('2,222,222', 'sickleavebank validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelallowance();

    //Update onCallMealPeriods
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.onCallMealPeriods)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.onCallMealPeriods, '333333333333');

    await t
        .expect(desGroupsPagePopUp.onCallMealPeriods.value).eql('$3,333,333', 'onCallMealPeriods validation incorrect');

    //colapsed
    await desGroupsPagePopUp.expandPanelpay();

    //update dental
    await t
        .setTestSpeed(0.5)
        .selectText(desGroupsPagePopUp.dental)
        .pressKey('delete')
        .typeText(desGroupsPagePopUp.dental, '4444444444444');

    await t
        .expect(desGroupsPagePopUp.dental.value).eql('$4,444,444', 'dental validation incorrect');

    await desGroupsPagePopUp.clickCreateButton();

    //Verify there are no error messages
    await t
        .expect(desGroupsPagePopUp.errorMessages().count).eql(0, 'There are error messages not allowing to create the designated group');

    //Wait for the popup to close
    await t
        .wait(1000);

    //open the export summary
    await exportPage.clickexportsummary();

    //Validate page load with header
    //Verify the buttons are present
    await t
        .wait(100)
        .expect(exportPage.backToPayrollSummary().visible).ok();

    await t
        .wait(100)
        .expect(exportPage.printPayrollSummary().visible).ok();

    //Validate content of overtime
    var overTimeData2 = await exportPage.overTimeData();
    var overTimeValue1 = '15555554.00';
    var exportOverTimeTableCount = await exportPage.exportOverTimeTableCount();

    await t
        .expect(exportPage.dataContainsOverTimeData(overTimeData2, overTimeValue1, exportOverTimeTableCount, 3)).ok();

    //Validate column count
    await t
        .expect(exportPage.exportOverTimeTableCount()).eql(4, 'exportOverTimeTableCount validation incorrect');

    //Validate content of leave
    var leaveData2 = await exportPage.leaveData();
    var leaveDataValue1 = '4444444.00';
    var exportLeaveTableCount = await exportPage.exportLeaveTableCount();

    await t
        .expect(exportPage.dataContainsLeaveData(leaveData2, leaveDataValue1, exportLeaveTableCount, 3)).ok();

    //Validate column count
    await t
        .expect(exportPage.exportLeaveTableCount()).eql(4, 'exportLeaveTableCount validation incorrect');

    //Validate content of allowance
    var allowanceData2 = await exportPage.allowanceData();
    var allowanceDataValue1 = '6666666.00';
    var exportAllowanceTableCount = await exportPage.exportAllowanceTableCount();

    await t
        .expect(exportPage.dataContainsAllowanceData(allowanceData2, allowanceDataValue1, exportAllowanceTableCount, 3)).ok();

    //Validate column count
    await t
        .expect(exportPage.exportAllowanceTableCount()).eql(4, 'exportAllowanceTableCount validation incorrect');

    //Validate content of pay/
    var payData2 = await exportPage.payData();
    var payDataValue1 = '8888888.00';
    var exportPayTableCount = await exportPage.exportPayTableCount();

    await t
        .expect(exportPage.dataContainsAllowanceData(payData2, payDataValue1, exportPayTableCount, 3)).ok();

    //Validate column count
    await t
        .expect(exportPage.exportPayTableCount()).eql(4, 'exportPayTableCount validation incorrect');

    //do some updates to chance the report for update validations
    await exportPage.clickBackToPayrollSummary();

    //Cleanup
    //select the group for update validation
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'C - Community';
    var groupIndex = desGroupsPage.dataIndexOfDesignatedGroup(designatedGroupsData, designatedGroupValue);
    var groupSelected = desGroupsPage.designatedGroups().nth(groupIndex);

    await t
        .click(groupSelected);

    //Click update button
    await desGroupsPagePopUp.clickDeleteButton();

    //Click confirm button
    await desGroupsPagePopUp.confirmDeleteDesGroupsP();

    //Get the designated group data in the table
    var designatedGroupsData = await desGroupsPage.designatedGroupsData();
    var designatedGroupValue = 'C - Community';

    //Verify that a record has been deleted in the designated groups section
    await t
        .wait(2000)
        .expect(desGroupsPage.dataContainsDesignatedGroup(designatedGroupsData,
                                                          designatedGroupValue)).notOk();
});

test('32. Cancel delete of a Payroll Summary Entry', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Click Delete button
    await headerPage.clickDeleteButton();

    //Click Confirm Delete button
    await headerPage.cancelDeletePayrollSummary();

    //Set variables
    var corporateID = '6004';
    var siteID = '6005';

    var currentDate = new Date(),
        currentYear = currentDate.getFullYear();
    var reportingPeriodFromDate = new Date(currentYear, 0, 1);
    reportingPeriodFromDate.setDate(reportingPeriodFromDate.getDate() + 8);
    var reportingPeriodFromDateStr = getShortDateString(reportingPeriodFromDate);

    var reportingPeriodToDate = new Date(currentYear, 5, 30);
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() + 8);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate);

    //Get the payroll summary data in the table
    var payrollSummaryReportsData = await page.payrollSummaryReportsData()

    //Verify that the entry was not deleted in the summary table
    await t
        .expect(page.dataContainsPayrollSummary(payrollSummaryReportsData, corporateID, siteID, reportingPeriodFromDateStr, reportingPeriodToDateStr, 'IN PROGRESS')).notOk();
});

test('33. Submit Payroll Summary Entry', async t => {
    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Click submit button
    await headerPage.clickSubmitButton();

    //Click submit cancel button
    await headerPage.cancelSubmitPayrollSummary();

    //Verify pop up is closed
    await t
        .expect(headerPage.confirmSubmitDialog.filterVisible().exists).notOk();

    //Click submit button
    await headerPage.clickSubmitButton();

    //Click submit confirm button
    await headerPage.confirmSubmitPayrollSummary();

    //confirm the Payroll was submitted
    await editPayrollSummary('6004', '6005', 'SUBMITTED');

    //Click submit confirm button
    await headerPage.clickCloseButton();
});

test('34. Delete a Payroll Summary Entry - Main delete option', async t => {
    //remove the submitted lock
    //navigate to the confirmation page
    await NavBar.clickadminTabsLink();

    await NavBar.clickdataEntryConfirmationLink();

    //Clear the search field
    await t
        .selectText(confirmationPage.inputSearchString)
        .pressKey('delete');

    //Set one search
    await t
        .selectText(confirmationPage.inputSearchString)
        .pressKey('delete')
        .typeText(confirmationPage.inputSearchString, '6004');

    //Activate the search
    await t
        .click(confirmationPage.searchButton);

    //Select first result in the table
    var firstRow = confirmationPage.getDatas().nth(0);

    //Select the row
    await t
        .click(firstRow);

    //Verify the view is open
    await t
        .wait(100)
        .expect(confirmationPage.dataDialog().visible).ok();

    //Validate the delete confirmation open
    await confirmationPage.confirmDataDialog();

    //Verify the view is open
    await t
        .wait(100)
        .expect(confirmationPage.deleteDataDialog().visible).ok();

    //Delete the confirmation
    await confirmationPage.confirmDeleteDataDialog();

    //Clear the search field
    await t
        .selectText(confirmationPage.inputSearchString)
        .pressKey('delete');

    //Set one search
    await t
        .typeText(confirmationPage.inputSearchString, '6004');

    //Activate the search
    await t
        .click(confirmationPage.searchButton);

    //Verify the delete has been processed
    await t
        .wait(2000)
        .expect(confirmationPage.dataTable.textContent).contains('No records found.');


    //Verify the confirmation is closed
    await t
        .wait(100)
        .expect(confirmationPage.deleteDataDialog().visible).notOk();

    //Verify the view is closed
    await t
        .wait(100)
        .expect(confirmationPage.dataDialog().visible).notOk();


    //navigate to the payroll page
    await NavBar.clickPayrollLink();

    await page.clickEnterPayrollLink();

    //Edit Payroll Summary Entry
    await editPayrollSummary('6004', '6005', 'IN PROGRESS');

    //Click Delete button
    await headerPage.clickDeleteButton();

    //Click Confirm Delete button
    await headerPage.confirmDeletePayrollSummary();

    //Set variables
    var corporateID = '6004';
    var siteID = '6005';

    var currentDate = new Date(),
        currentYear = currentDate.getFullYear();
    var reportingPeriodFromDate = new Date(currentYear, 0, 1);
    reportingPeriodFromDate.setDate(reportingPeriodFromDate.getDate() + 8);
    var reportingPeriodFromDateStr = getShortDateString(reportingPeriodFromDate);

    var reportingPeriodToDate = new Date(currentYear, 5, 30);
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() + 8);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate);

    //Get the payroll summary data in the table
    var payrollSummaryReportsData = await page.payrollSummaryReportsData()

    //Verify that the entry was deleted in the summary table
    await t
        .expect(page.dataContainsPayrollSummary(payrollSummaryReportsData, corporateID, siteID, reportingPeriodFromDateStr, reportingPeriodToDateStr, 'IN PROGRESS')).notOk();
});