import { initTest } from '../helpers/common.helper';
import { urlFor } from '../helpers/url.helper';
import { regularAccUser } from '../helpers/user.helper';
import { selectorByDataRK } from '../helpers/selector.helper';
import { isDisabled, hasErrorState, selectInDropdownList } from '../helpers/field.helper';
import NavBar from '../page-objects/topNav';
import testcafeUtility from '../page-objects/testcafeUtility';
import adminCTClassificationCodes from '../page-objects/adminCTClassificationCodes';

fixture `HSCIS - Admin CT Classification Codes`
    .page(urlFor(''))
    .beforeEach( async t => {
        await initTest(regularAccUser);
    //Set navigation links
        await NavBar.clickadminTabsLink();

        await NavBar.clickcodeTablesLink();
    //****************
});

const page = new adminCTClassificationCodes();

test('01. Smoke Test', async t => {
    await t
        .click(page.classificationCodesMenuClosed().nth(1));

    await t
        .wait(100)
        .click(page.classificationCodesMenuClosed().nth(0));

    await t
        .wait(100)
        .click(page.classificationCodesMenuOpen().nth(0));
});

test('02. Search a few lines', async t => {
    //Open the tab
    await t
        .click(page.classificationCodesMenuClosed().nth(0));

    //Place into view update
    await t
        .hover(page.dataTable)
        .wait(100);
    
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, page.searchString);
    
    //Activate the search
    await t
        .click(page.searchButton);
        
    //Verify the search has been processed
    await t
        .wait(1000)
        .expect(page.dataTable.textContent).contains(page.searchString);
        
});

test('03. Select a row and reach update view', async t => {
    //Open the tab
    await t
        .click(page.classificationCodesMenuClosed().nth(0));

    //Place into view update
    await t
        .hover(page.dataTable)
        .wait(100);
    
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, page.searchString);
    
    //Activate the search
    await t
        .click(page.searchButton);

    //Select first result in the table
    var firstRow = page.getDatas().nth(0);
        
    await t
        .click(firstRow);

    //Validate the confirmation was selected    
    await t
        .wait(1000)
        .expect(firstRow.textContent).contains(page.searchString);

    //Close of the view
    await page.cancelDataDialog();

    //Verify the view is closed
    await t
        .wait(100)
        .expect(page.dataDialog().visible).notOk();
    
});

test('04. create a new row', async t => {
    //Open the tab
    await t
        .click(page.classificationCodesMenuClosed().nth(0));

    //****** Test the view
    //Open the create view
    await t
        .wait(100)
        .click(page.createButton);
        
    //Verify the view is open
    await t
        .wait(100)
        .expect(page.createDataDialog().visible).ok();
    
    //Cancel the view
    await page.cancelCreateDataDialog();

    //****** create test begin
    //Open the create view
    await t
        .wait(100)
        .click(page.createButton);
        
    //Verify the view is open
    await t
        .wait(100)
        .expect(page.createDataDialog().visible).ok();
        
    //Create the empty record
    await page.confirmCreateDataDialog();
        
    //Validate the record was failed
    await t
        .wait(100)
        .expect(page.errorMessage.textContent).contains('Code: Value is required.');
        
    //***** Test Code required
    //Open the create view
    await t
        .wait(100)
        .click(page.createButton);
        
    //Verify the view is open
    await t
        .wait(100)
        .expect(page.createDataDialog().visible).ok();
        
    //Fill in the description
    await t
        .typeText(page.messageInputCreate, 'Tastytest i am a test cafe created row.999999999999999999999999999999999999999999999999999999999999999');

    //Fill in the rate grid
    await t
        .typeText(page.rateGridInput, '9999999999sdseg99999999999999999999999');
        
    //select the active flag
    await selectInDropdownList(page.activeInput, page.activeInputOption, 'Active');

    //select the group flag
    await selectInDropdownList(page.groupInput, page.groupInputOption, 'C - Community');

    //Create the record
    await page.confirmCreateDataDialog();
        
    //Validate the record require code
    await t
        .wait(100)
        .expect(page.errorMessage.textContent).contains('Code: Value is required.');
        
    //***** Test description required
    //Open the create view
    await t
        .wait(100)
        .click(page.createButton);
        
    //Verify the view is open
    await t
        .wait(100)
        .expect(page.createDataDialog().visible).ok();
        
    //Fill in the code
    await t
        .typeText(page.codeInput, '99cdssd99899');
        
    //select the active flag
    await selectInDropdownList(page.activeInput, page.activeInputOption, 'Active');

    //select the group flag
    await selectInDropdownList(page.groupInput, page.groupInputOption, 'C - Community');

    //Create the record
    await page.confirmCreateDataDialog();

    //Validate the record require description
    await t
        .wait(100)
        .expect(page.errorMessage.textContent).contains('Description: Value is required.');

    //***** Test active flag required
    //Open the create view
    await t
        .wait(100)
        .click(page.createButton);
        
    //Verify the view is open
    await t
        .wait(100)
        .expect(page.createDataDialog().visible).ok();
        
    //Fill in the code
    await t
        .typeText(page.codeInput, '99cdssd99899');
        
    //Fill in the description
    await t
        .typeText(page.messageInputCreate, 'Tastytest i am a test cafe created row.999999999999999999999999999999999999999999999999999999999999999');

    //select the group flag
    await selectInDropdownList(page.groupInput, page.groupInputOption, 'C - Community');

    //Create the record
    await page.confirmCreateDataDialog();

    //Validate the record require active flag
    await t
        .wait(100)
        .expect(page.errorMessage.textContent).contains('Active Flag: Value is required.');
        
    //***** Test Group required
    //Open the create view
    await t
        .wait(100)
        .click(page.createButton);
        
    //Verify the view is open
    await t
        .wait(100)
        .expect(page.createDataDialog().visible).ok();
        
    //Fill in the code
    await t
        .typeText(page.codeInput, '99cdssd99899');
        
    //Fill in the description
    await t
        .typeText(page.messageInputCreate, 'Tastytest i am a test cafe created row.999999999999999999999999999999999999999999999999999999999999999');

    //select the active flag
    await selectInDropdownList(page.activeInput, page.activeInputOption, 'Active');

    //Create the record
    await page.confirmCreateDataDialog();
        
    //Validate the record require Group
    await t
        .wait(100)
        .expect(page.errorMessage.textContent).contains('Designated Group: Value is required.');

    //***** Create the record
    //Open the create view
    await t
        .wait(100)
        .click(page.createButton);
        
    //Verify the view is open
    await t
        .wait(100)
        .expect(page.createDataDialog().visible).ok();
        
    //Fill in the code
    await t
        .typeText(page.codeInput, '99cdssd99899');
        
    //Fill in the description
    await t
        .typeText(page.messageInputCreate, 'Tastytest i am a test cafe created row.999999999999999999999999999999999999999999999999999999999999999');

    //Fill in the rate grid
    await t
        .typeText(page.rateGridInput, '9999999999sdseg99999999999999999999999');
        
    //select the active flag
    await selectInDropdownList(page.activeInput, page.activeInputOption, 'Active');

    //select the group flag
    await selectInDropdownList(page.groupInput, page.groupInputOption, 'C - Community');

    //Create the record
    await page.confirmCreateDataDialog();

    //Validate the record is created
    await t
        .wait(100)
        .expect(page.errorMessage.textContent).contains('Record was successfully created');

    //***** Create the record again
    //Open the create view
    await t
        .wait(100)
        .click(page.createButton);
        
    //Verify the view is open
    await t
        .wait(100)
        .expect(page.createDataDialog().visible).ok();
        
    //Fill in the code
    await t
        .typeText(page.codeInput, '99cdssd99899');
        
    //Fill in the description
    await t
        .typeText(page.messageInputCreate, 'Tastytest i am a test cafe created row.999999999999999999999999999999999999999999999999999999999999999');

    //Fill in the rate grid
    await t
        .typeText(page.rateGridInput, '9999999999sdseg99999999999999999999999');
        
    //select the active flag
    await selectInDropdownList(page.activeInput, page.activeInputOption, 'Active');

    //select the group flag
    await selectInDropdownList(page.groupInput, page.groupInputOption, 'C - Community');

    //Create the record
    await page.confirmCreateDataDialog();

    //Validate the record is created
    await t
        .wait(100)
        .expect(page.errorMessage.textContent).contains('Code for this record already exists');

});

test('05. Select a row and update it', async t => {
    //Open the tab
    await t
        .click(page.classificationCodesMenuClosed().nth(0));

    //Place into view update
    await t
        .hover(page.dataTable)
        .wait(100);
    
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, 'Tastytest ');
    
    //Activate the search
    await t
        .click(page.searchButton);
        
    //Verify the record is present
    await t
        .wait(1000)
        .expect(page.dataTable.textContent).contains('Tastytest ');

    //Select first result in the table
    var firstRow = page.getDatas().nth(0);
    
    //Validate the confirmation was selected    
    await t
        .wait(1000)
        .expect(firstRow.textContent).contains('Tastytest ');

    //***** Test description required
    // Select the row
    await t
        .click(firstRow);

    //Verify the view is open
    await t
        .wait(100)
        .expect(page.dataDialog().visible).ok();
        
    //Go to message field and reset with void
    await t
        .selectText(page.messageInput)
        .pressKey('delete');

    //Go to rate grid field and reset with void
    await t
        .selectText(page.rateGrid)
        .pressKey('delete');

    //Confirm the Update
    await page.confirmDataDialog();
    
    //Validate the description is required
    await t
        .wait(100)
        .expect(page.errorMessage.textContent).contains('Description: Value is required.');

    //****** Test the update
    // Select the row
    await t
        .click(firstRow);

    //Verify the view is open
    await t
        .wait(100)
        .expect(page.dataDialog().visible).ok();
        
    //Go to message field and reset with new value
    await t
        .selectText(page.messageInput)
        .pressKey('delete')
        .typeText(page.messageInput, 'Tastymuffintest i am a test cafe created row.999999999999999999999999999999999999999999999999999999999999999');

    //Go to rate grid field and reset with new value
    await t
        .selectText(page.rateGrid)
        .pressKey('delete')
        .typeText(page.rateGrid, '9999999999sdseg99999999999999999999999');

    //Confirm the Update
    await page.confirmDataDialog();

    //Verify the confirmation is closed
    await t
        .wait(100)
        .expect(page.dataDialog().visible).notOk();

    //Validate the record was created
    await t
        .wait(100)
        .expect(page.errorMessage.textContent).contains('Record was successfully updated');
    
    //****** Delete the test record
    //Set navigation links to utility
        await NavBar.clicktestUtilityLink();
    
    //Delete the classification added in the tests
        await testcafeUtility.clickdeleteHcdClassificationLink();

    //Validate the record was deleted
    await t
        .wait(2000)
        .expect(testcafeUtility.testCafeUtilityMessages().textContent).contains('Record was successfully deleted');

});