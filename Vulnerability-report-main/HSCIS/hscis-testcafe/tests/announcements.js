import { initTest } from '../helpers/common.helper';
import { urlFor } from '../helpers/url.helper';
import { regularAccUser } from '../helpers/user.helper';
import { selectorByDataRK } from '../helpers/selector.helper';
import { isDisabled, hasErrorState, selectInDropdownList } from '../helpers/field.helper';
import NavBar from '../page-objects/topNav';
import announcement from '../page-objects/announcement';
import homePage from '../page-objects/homePage';

fixture `HSCIS - Announcement`
    .page(urlFor(''))
    .beforeEach( async t => {
        await initTest(regularAccUser);

	//Set navigation links
		await NavBar.clickadminTabsLink();

		await NavBar.clickannouncementsLink();
	//****************
});

const page = new announcement();
const home = new homePage();


test('01. Smoke Test', async t => {
    await t
        .hover(page.publishButton);

    await t
        .hover(page.dataForm);

    await t
        .hover(page.contentTextArea);
});

test('02. Test publish', async t => {
    //enter test string
    await t
		.selectText(page.contentTextArea)
		.pressKey('home')    
        .typeText(page.contentTextArea, 'TastyTestMuffin');

	await page.clickpublishButton();

    //Verify published message is displayed: The content was successfully published
    await t
        .expect(page.infoMessages().withText("The content was successfully published").exists).ok();
	
	//navigate to home page
	await NavBar.clickhomeLink();

	//Verify modification
	await t
		.expect(home.announcementText.textContent).contains('TastyTestMuffin');
		
	//Navigate back to announcement
		await NavBar.clickadminTabsLink();

		await NavBar.clickannouncementsLink();

    //enter test string
    await t
		.selectText(page.contentTextArea, 0, 15)
		.pressKey('delete');    

	await page.clickpublishButton();

    //Verify published message is displayed: The content was successfully published
    await t
        .expect(page.infoMessages().withText("The content was successfully published").exists).ok();
	
	//navigate to home page
	await NavBar.clickhomeLink();

	//Verify modification
	await t
		.expect(home.announcementText.textContent).notContains('TastyTestMuffin');
});
