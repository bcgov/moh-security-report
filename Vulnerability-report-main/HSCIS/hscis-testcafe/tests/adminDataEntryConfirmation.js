import { t } from 'testcafe';
import { initTest } from '../helpers/common.helper';
import { urlFor } from '../helpers/url.helper';
import { regularAccUser } from '../helpers/user.helper';
import { getShortDateString } from '../helpers/date.helper';
import { selectorByDataRK } from '../helpers/selector.helper';
import { isDisabled, hasErrorState, selectInDropdownList, closeDatePicker } from '../helpers/field.helper';
import NavBar from '../page-objects/topNav';
import testcafeUtility from '../page-objects/testcafeUtility';
import adminDataEntryConfirmation from '../page-objects/adminDataEntryConfirmation';
import EnterPayrollSummaryPage from '../page-objects/enterPayrollSummary';
import EnterPayrollSummaryHeaderPage from '../page-objects/enterPayrollSummaryHeader';
import EnterPayrollSummaryDesGroupsPage from '../page-objects/enterPayrollSummaryDesGroups';
import EnterPayrollSummaryDesGroupsPagePopUp from '../page-objects/enterPayrollSummaryDesGroupPopUp';
import EnterPayrollSummaryEmployeePage from '../page-objects/enterPayrollSummaryEmployee';
import EnterPayrollSummaryEmployeePagePopUp from '../page-objects/enterPayrollSummaryEmployeePopUp';

fixture `HSCIS - Admin Data Entry Confirmation`
    .page(urlFor(''))
    .beforeEach( async t => {
        await initTest(regularAccUser);
    //Set navigation links
        await NavBar.clickadminTabsLink();

        await NavBar.clickdataEntryConfirmationLink();
    //****************
});

const page = new adminDataEntryConfirmation();
const adminEnterPayrollSummaryPage = new EnterPayrollSummaryPage();
const headerPage = new EnterPayrollSummaryHeaderPage();
const desGroupsPage = new EnterPayrollSummaryDesGroupsPage();
const desGroupsPagePopUp = new EnterPayrollSummaryDesGroupsPagePopUp();
const employeePage = new EnterPayrollSummaryEmployeePage();
const employeePagePopUp = new EnterPayrollSummaryEmployeePagePopUp();

test('01. Smoke Test', async t => {
    await t
        .click(page.searchButton);

    await t
        .hover(page.inputSearchString);

    await t
        .hover(page.searchButton);
});

test('02. Search a few lines', async t => {
    //Place into view the Data Entry Confirmation
    await t
        .hover(page.dataTable)
        .wait(100);
    
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, page.searchString);
    
    //Activate the search
    await t
        .click(page.searchButton);
        
    //Verify the search has been processed
    await t
        .wait(1000)
        .expect(page.dataTable.textContent).contains(page.searchResult1);
        
});

test('03. Select a row and reach confirmation view', async t => {
    //Place into view the Data Entry Confirmation
    await t
        .hover(page.dataTable)
        .wait(100);
    
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, page.searchString);
    
    //Activate the search
    await t
        .click(page.searchButton);

    //Select first result in the table
    var firstRow = page.getDatas().nth(0);
        
    await t
        .click(firstRow);

    //Validate the confirmation was selected    
    await t
        .wait(1000)
        .expect(firstRow.textContent).contains(page.firstLineContain);

    //Close of the view
    await page.cancelDataDialog();

    //Verify the view is closed
    await t
        .wait(100)
        .expect(page.dataDialog().visible).notOk();
    
});

test('04. Select a row and reach delete confirmation', async t => {
    //Place into view the Data Entry Confirmation
    await t
        .hover(page.dataTable)
        .wait(100);
    
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, page.searchString);
    
    //Activate the search
    await t
        .click(page.searchButton);

    //Select first result in the table
    var firstRow = page.getDatas().nth(0);
        
    await t
        .click(firstRow);

    //Validate the confirmation was selected    
    await t
        .wait(1000)
        .expect(firstRow.textContent).contains(page.firstLineContain);

    //Verify the view is open
    await t
        .wait(100)
        .expect(page.dataDialog().visible).ok();

    //Validate the delete confirmation open
    await page.confirmDataDialog();
    
    //Verify the view is open
    await t
        .wait(100)
        .expect(page.deleteDataDialog().visible).ok();

    //Cancel the delete
    await page.cancelDeleteDataDialog();
    
    //Verify the confirmation is closed
    await t
        .wait(100)
        .expect(page.deleteDataDialog().visible).notOk();
    
    //Cancel the delete
    await page.cancelDataDialog();

    //Verify the view is closed
    await t
        .wait(100)
        .expect(page.dataDialog().visible).notOk();
    
});

async function createPayrollSummaryData(corporateID, siteID) {
    //Navigate to the payroll to create the data
        await NavBar.clickPayrollLink();

        await adminEnterPayrollSummaryPage.clickEnterPayrollLink();

        await adminEnterPayrollSummaryPage.clickCreateButton();
    
    //Select corporate #
    await selectInDropdownList(headerPage.corporateID, headerPage.corporateIDOptions, corporateID);
    
    //Give some time to the site list to load
    await t
        .wait(1000);
    
    //Select site #
    await selectInDropdownList(headerPage.siteID, headerPage.siteIDOptions, siteID);
    
    var currentDate = new Date(),
        lastYear = currentDate.getFullYear() - 1;
    
    //Set Reporting period From date to 8 days after January 1st
    var reportingPeriodFromDate = new Date(lastYear, 0, 1);
    reportingPeriodFromDate.setDate(reportingPeriodFromDate.getDate() + 8);
    var reportingPeriodFromDateStr = getShortDateString(reportingPeriodFromDate);
    await t
        .typeText(headerPage.reportingPeriodFrom, reportingPeriodFromDateStr);
    await closeDatePicker(headerPage.reportingPeriodFrom);  
    
    //Set Reporting period To date 8 days after June 30th
    var reportingPeriodToDate = new Date(lastYear, 5, 30);
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() + 8);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate);
    await t
        .typeText(headerPage.reportingPeriodTo, reportingPeriodToDateStr);
    await closeDatePicker(headerPage.reportingPeriodTo);    
    
    if (typeof beforeValidateFunc === "function") {
        await beforeValidateFunc();
    }
    
    //Click Validate button
    await headerPage.clickValidateButton();

    //Add one designated group with minimal information
    await desGroupsPage.clickCreateButton();
    await selectInDropdownList(desGroupsPagePopUp.designatedGroup, desGroupsPagePopUp.designatedGroupOptions, 'Community');
    await desGroupsPagePopUp.clickCreateButton();
    
    //Verify there are no error messages
    await t
        .expect(desGroupsPagePopUp.errorMessages().count).eql(0, 'There are error messages not allowing to create the designated group');
        
    //Wait for the popup to close
    await t
        .wait(1000);

    //Create employee
    await createEmployee();

    //Click Validate button
    await headerPage.clickValidateButton();


    //Click submit button
    await headerPage.clickSubmitButton();

    //Click submit confirm button
    await headerPage.confirmSubmitPayrollSummary();
}

async function createEmployee() {
    //Click create employee button
    await employeePage.clickCreateButton();
    
    //Verify employee popup create mode
    await employeePagePopUp.verifyCreateMode();
    
    //Search employee with Employee Number
    await t
        .typeText(employeePagePopUp.employeeNumber, '999999999999999');
    
    await employeePagePopUp.clickEmployeeFindButton();
    
    //Verify field status
    await employeePagePopUp.verifyCreateModeAfterSearch();
    
    //Fill fields
    await t
        .typeText(employeePagePopUp.employeeSIN, '1234567890123');
    
    //Select designated group code
    var groupCode = 'C';
    await selectInDropdownList(employeePagePopUp.designatedGroupCode, employeePagePopUp.designatedGroupCodeOptions, groupCode);

    //Select union Code
    var unionCode = 'B2';
    await selectInDropdownList(employeePagePopUp.unionCode, employeePagePopUp.unionCodeOptions, unionCode);

    //Enter date of birth
    await t
        .typeText(employeePagePopUp.dateOfBirth, '1990 06 06');
    await closeDatePicker(employeePagePopUp.dateOfBirth);   

    //Select gender
    var gender = 'F';
    await selectInDropdownList(employeePagePopUp.gender, employeePagePopUp.genderOptions, gender);

    //Select class code
    var classCode = '80101';
    await t
        .wait(1000);
    await selectInDropdownList(employeePagePopUp.classCode, employeePagePopUp.classCodeOptions, classCode);

    //Select increment
    var increment = '1';
    await selectInDropdownList(employeePagePopUp.increment, employeePagePopUp.incrementOptions, increment);

    //Enter original date of hire
    await t
        .typeText(employeePagePopUp.originalDateOfHire, '2020 06 06');
    await closeDatePicker(employeePagePopUp.originalDateOfHire);

    //Enter seniority start date
    await t
        .typeText(employeePagePopUp.seniorityStartDate, '2020 06 06');
    await closeDatePicker(employeePagePopUp.seniorityStartDate);

    //Select job status
    var jobStatus = 'F';
    await selectInDropdownList(employeePagePopUp.jobStatus.parent(), employeePagePopUp.jobStatusOptions, jobStatus);

    //Enter wage rate
    await t
        .typeText(employeePagePopUp.wageRate, '30');
    
    //Enter paid hours
    await t
        .typeText(employeePagePopUp.regularPaidHours, '99');
    
    //Enter vacation hours
    await t
        .typeText(employeePagePopUp.vacationHours, '99');
        
    //Click create button
    await employeePagePopUp.clickConfirmButton();
    
    //Verify pop up is closed
    await t
        .expect(employeePagePopUp.popUpPanel.filterVisible().exists).notOk();

    //Get the employees in the table
    var employeesData = await employeePage.employeesData();
    var employeeNumber = '9999999999';
    
    //Verify that a new record has been created in the employees section
    await t
        .expect(employeePage.dataContainsEmployee(employeesData, employeeNumber)).ok();
}

async function cleanPayrollSummaryData(corporateID, siteID) {
    //navigate to the payroll page
    await NavBar.clickPayrollLink();

    await adminEnterPayrollSummaryPage.clickEnterPayrollLink();

    //Edit Payroll Summary Entry
    await editPayrollSummary(corporateID, siteID, 'IN PROGRESS');

    await t
        .wait(1000);

    //Click Delete button
    await headerPage.clickDeleteButton();

    //Click Confirm Delete button
    await headerPage.confirmDeletePayrollSummary();
    
    //Set variables
    var currentDate = new Date(),
        currentYear = currentDate.getFullYear();
    var reportingPeriodFromDate = new Date(currentYear, 0, 1);
    reportingPeriodFromDate.setDate(reportingPeriodFromDate.getDate() + 8);
    var reportingPeriodFromDateStr = getShortDateString(reportingPeriodFromDate);

    var reportingPeriodToDate = new Date(currentYear, 5, 30);
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() + 8);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate);
       
    //Get the payroll summary data in the table
    var payrollSummaryReportsData = await adminEnterPayrollSummaryPage.payrollSummaryReportsData()
    
    //Verify that the entry was deleted in the summary table
    await t
        .expect(adminEnterPayrollSummaryPage.dataContainsPayrollSummary(payrollSummaryReportsData, corporateID, siteID, reportingPeriodFromDateStr, reportingPeriodToDateStr, 'IN PROGRESS')).notOk();
}

async function editPayrollSummary(corporateID, siteID, payrollSummaryStatus) {
    await t
        .wait(1000);
        
    var currentDate = new Date(),
        lastYear = currentDate.getFullYear() - 1;
    
    //Set Reporting period From date to 8 days after January 1st
    var reportingPeriodFromDate = new Date(lastYear, 0, 1);
    reportingPeriodFromDate.setDate(reportingPeriodFromDate.getDate() + 8);
    var reportingPeriodFromDateStr = getShortDateString(reportingPeriodFromDate).replace(/ /g, '-');
    
    //Set Reporting period To date 8 days after June 30th
    var reportingPeriodToDate = new Date(lastYear, 5, 30);
    reportingPeriodToDate.setDate(reportingPeriodToDate.getDate() + 8);
    var reportingPeriodToDateStr = getShortDateString(reportingPeriodToDate).replace(/ /g, '-');
    
    var dataList = await adminEnterPayrollSummaryPage.payrollSummaryReportsData(),
        index = adminEnterPayrollSummaryPage.dataIndexOfPayrollSummary(dataList, corporateID, siteID, reportingPeriodFromDateStr, reportingPeriodToDateStr, payrollSummaryStatus);
    
    //Verify test record exists
    await t
        .expect(index).gt(-1, 'Test record not found in the payroll summary list');
        
    var payrollSummary = adminEnterPayrollSummaryPage.payrollSummaryReports().nth(index);
    
    await t
        .click(payrollSummary);
}

test('05. Select a row and reach delete confirmation and delete', async t => {
    //Create the record to delete
        await createPayrollSummaryData('6004', '6005');

    //Set navigation links
        await NavBar.clickadminTabsLink();
        await NavBar.clickdataEntryConfirmationLink();

    //Place into view the Data Entry Confirmation
    await t
        .hover(page.dataTable)
        .wait(100);
    
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, page.searchStringDel);
    
    //Activate the search
    await t
        .click(page.searchButton);

    //Select first result in the table
    var firstRow = page.getDatas().nth(0);
        

    //Validate the confirmation was selected    
    await t
        .wait(1000)
        .expect(firstRow.textContent).contains(page.searchStringDel);

    //Select the row
    await t
        .click(firstRow);

    //Verify the view is open
    await t
        .wait(100)
        .expect(page.dataDialog().visible).ok();

    //Validate the delete confirmation open
    await page.confirmDataDialog();
    
    //Verify the view is open
    await t
        .wait(100)
        .expect(page.deleteDataDialog().visible).ok();

    //Delete the confirmation
    await page.confirmDeleteDataDialog();
    
    //Clear the search field
    await t
        .selectText(page.inputSearchString)
        .pressKey('delete');    

    //Set one search 
    await t
        .typeText(page.inputSearchString, page.searchStringDel);
    
    //Activate the search
    await t
        .click(page.searchButton);
        
    //Verify the delete has been processed
    await t
        .wait(1000)
        .expect(page.dataTable.textContent).contains('No records found.');

    //Verify the confirmation is closed
    await t
        .wait(100)
        .expect(page.deleteDataDialog().visible).notOk();
    
    //Verify the view is closed
    await t
        .wait(100)
        .expect(page.dataDialog().visible).notOk();
        
    //Cleanup
    await cleanPayrollSummaryData('6004', '6005');
});
