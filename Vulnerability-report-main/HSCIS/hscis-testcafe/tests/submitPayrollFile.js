import { initTest } from '../helpers/common.helper';
import { urlFor } from '../helpers/url.helper';
import { regularAccUser } from '../helpers/user.helper';
import { selectorByDataRK } from '../helpers/selector.helper';
import { isDisabled, hasErrorState, selectInDropdownList } from '../helpers/field.helper';
import NavBar from '../page-objects/topNav';
import SubmitPayrollFilePage from '../page-objects/submitPayrollFile';

fixture `HSCIS - Submit Payroll Extract`
    .page(urlFor(''))
    .beforeEach( async t => {
        await initTest(regularAccUser);

        await NavBar.clickPayrollLink();

        await page.clickSubmitPayrollLink();
    });

const page = new SubmitPayrollFilePage();

test('01. Smoke Test', async t => {
    await selectInDropdownList(page.selectQuarter, page.selectQuarterOptions, 'Q1');

    await t
        .hover(page.reportsPanel);

    await t
        .hover(page.downloadButton);
});

test('02. Upload 1 File', async t => {
    //Place into view the submission table
    await t
        .hover(page.submissionTable)
        .wait(1000);
    
    //Verify upload button is enabled
    await t
        .expect(isDisabled(page.fileUploadButton)).notOk();
    
    //Upload 1 file
    await t
        .setFilesToUpload(page.fileUploadInput, [
            './payroll/good-test-file-1.txt'
        ]);
    
    //Verify the file appears in submission table
    await t
        .wait(100)
        .expect(page.submissionTable.textContent).contains('IN PROGRESS');
        
    //Verify there are no error messages
    await t
        .expect(page.fileUploadMessageComponent().count).eql(0);
        
    //Verify upload component is not shown
	//TODO
    //await t
      //  .expect(page.fileUploadComponent.exists).notOk();
        
    //Verify the file has been processed
    await t
        .wait(3000)
        .expect(page.submissionTable.textContent).contains('ACCEPTED');
});

test('03. Upload 2 Files', async t => {
    //Place into view the submission table
    await t
        .hover(page.submissionTable)
        .wait(1000);
        
    //Upload 2 files
    await t
        .setFilesToUpload(page.fileUploadInput, [
            './payroll/good-test-file-2.txt',
            './payroll/good-test-file-3.txt'
        ]);
        
    //Verify error message: Cannot upload more than one file.
    //TODO
 //   await t
   //     .expect(1).eql(0, 'Test case has not been completed.');
});

test('04. Upload File of wrong file type', async t => {
    //Place into view the submission table
    await t
        .hover(page.submissionTable)
        .wait(1000);
        
    //Upload 1 file of wrong file type
    await t
        .setFilesToUpload(page.fileUploadInput, [
            './payroll/bad-test-file-1.log'
        ]);
        
    //Verify error message: Invalid file type bad-test-file-1.log
    await t
        .expect(page.fileUploadMessageComponent().textContent).contains('Invalid file type')
        .expect(page.fileUploadMessageDetailComponent().textContent).contains('bad-test-file-1.log');
        
    //Verify upload button is enabled
    await t
        .expect(isDisabled(page.fileUploadButton)).notOk();
});

test('05. Upload Empty File', async t => {
    //Place into view the submission table
    await t
        .hover(page.submissionTable)
        .wait(1000);
        
    //Upload empty file
    await t
        .setFilesToUpload(page.fileUploadInput, [
            './payroll/good-test-file-4.txt'
        ]);

    //Verify there are no error messages
    await t
        .expect(page.fileUploadMessageComponent().count).eql(0);
        
    //Verify upload component is not shown
	//TODO
    //await t
      //  .expect(page.fileUploadComponent.exists).notOk();
        
    //Verify the file has been processed
    await t
        .wait(3000)
        .expect(page.submissionTable.textContent).contains('ACCEPTED');
});

test('06. Upload Empty File of wrong file type', async t => {
    //Place into view the submission table
    await t
        .hover(page.submissionTable)
        .wait(1000);
        
    //Upload empty file of wrong file type
    await t
        .setFilesToUpload(page.fileUploadInput, [
            './payroll/bad-test-file-2.log'
        ]);
        
    //Verify error message: Invalid file type
    await t
        .expect(page.fileUploadMessageComponent().textContent).contains('Invalid file type')
        .expect(page.fileUploadMessageDetailComponent().textContent).notContains('bad-test-file-2.log');
        
    //Verify upload button is enabled
    await t
        .expect(isDisabled(page.fileUploadButton)).notOk();
});

test('07. Download 1 Payroll Extract Report', async t => {
    //Navigate to the reports panel and give some time for the payroll extract report list to load
    await t
        .hover(page.reportsPanel)
        .wait(2000);

    //Verify download button is disabled
    await t
        .expect(isDisabled(page.downloadButton)).ok();
        
    //Select one payroll extract report
    var firstExtractReport = page.payrollExtractReports().nth(0);
    await t
        .click(firstExtractReport);
    
    //Give some time for the click event to execute
    await t
        .wait(1000);
    
    //Verify download button is enabled
    await t
        .expect(isDisabled(page.downloadButton)).notOk();
    
    //Click Download button
    await page.clickDownloadButton();
    
    //Give some time for the file to be downloaded
    await t
        .wait(5000);
        
    //Verify a file is downloaded
    //Note: It is not possible to verify the file download because of limitations in TestCafe
    
    //Unselect payroll extract report
    await t
        .click(firstExtractReport);
    
    //Give some time for the click event to execute
    await t
        .wait(1000);
    
    //Verify download button is disabled
    await t
        .expect(isDisabled(page.downloadButton)).ok();
});

test('08. Download 2 Payroll Extract Reports', async t => {
    //Navigate to the reports panel and give some time for the payroll extract report list to load
    await t
        .hover(page.reportsPanel)
        .wait(2000);

    //Query the payroll extract reports
    var extractReports = page.payrollExtractReports();
        
    //Select first payroll extract report
    await t
        .click(extractReports.nth(0));
    
    //Give some time for the click event to execute
    await t
        .wait(1000);
        
    //Select second payroll extract report
    await t
        .click(extractReports.nth(1));
    
    //Give some time for the click event to execute
    await t
        .wait(1000);
    
    //Verify download button is enabled
    await t
        .expect(isDisabled(page.downloadButton)).notOk();
    
    //Click Download button
    await page.clickDownloadButton();
    
    //Give some time for the zip file to be downloaded
    await t
        .wait(7000);
    
    //Verify a zip file is downloaded
    //Note: It is not possible to verify the file download because of limitations in TestCafe
    
    //Unselect first payroll extract report
    await t
        .click(extractReports.nth(0));
    
    //Give some time for the click event to execute
    await t
        .wait(1000);
        
    //Unselect second payroll extract report
    await t
        .click(extractReports.nth(1));
    
    //Give some time for the click event to execute
    await t
        .wait(1000);
    
    //Verify download button is disabled
    await t
        .expect(isDisabled(page.downloadButton)).ok();
});

test('09. Delete 1 Payroll Extract Report', async t => {
    //Navigate to the reports panel and give some time for the payroll extract report list to load
    await t
        .hover(page.reportsPanel)
        .wait(2000);

    //Verify delete button is disabled
    await t
        .expect(isDisabled(page.deleteButton)).ok();
        
    //Select one payroll extract report
    var firstExtractReport = page.payrollExtractReports().nth(0),
        firstExtractReportName = await firstExtractReport.parent("tr").getAttribute("data-rk");
    await t
        .click(firstExtractReport);
    
    //Give some time for the click event to execute
    await t
        .wait(1000);
    
    //Verify delete button is enabled
    await t
        .expect(isDisabled(page.deleteButton)).notOk();
    
    //Click Delete button
    await page.clickDeleteButton();
    
    //Confirm extract report deletion
    await page.confirmDeleteExtractReport();
    
    //Give some time for the delete to be executed
    await t
        .wait(2000);
    
    //Verify the extract report was deleted
    await t
        .expect(selectorByDataRK(firstExtractReportName).exists).notOk();
    
    //Verify delete button is disabled
    await t
        .expect(isDisabled(page.deleteButton)).ok();
});

test('10. Cancel delete of 1 Payroll Extract Report', async t => {
    //Navigate to the reports panel and give some time for the payroll extract report list to load
    await t
        .hover(page.reportsPanel)
        .wait(2000);

    //Verify delete button is disabled
    await t
        .expect(isDisabled(page.deleteButton)).ok();
        
    //Select one payroll extract report
    var firstExtractReport = page.payrollExtractReports().nth(0),
        firstExtractReportName = await firstExtractReport.parent("tr").getAttribute("data-rk");
    await t
        .click(firstExtractReport);
    
    //Give some time for the click event to execute
    await t
        .wait(1000);
    
    //Click Delete button
    await page.clickDeleteButton();
    
    //Cancel extract report deletion
    await page.cancelDeleteExtractReport();
    
    //Verify the extract report has not been deleted
    await t
        .expect(selectorByDataRK(firstExtractReportName).exists).ok();
    
    //Verify delete button is enabled
    await t
        .expect(isDisabled(page.deleteButton)).notOk();
});

test('11. Delete 2 Payroll Extract Reports', async t => {
    //Navigate to the reports panel and give some time for the payroll extract report list to load
    await t
        .hover(page.reportsPanel)
        .wait(2000);
    
    //Query the payroll extract reports
    var extractReports = page.payrollExtractReports();
        
    //Select first payroll extract report
    var firstExtractReport = extractReports.nth(0),
        firstExtractReportName = await firstExtractReport.parent("tr").getAttribute("data-rk");
    await t
        .click(firstExtractReport);
    
    //Give some time for the click event to execute
    await t
        .wait(1000);
        
    //Select second payroll extract report
    var secondExtractReport = extractReports.nth(1),
        secondExtractReportName = await secondExtractReport.parent("tr").getAttribute("data-rk");
    await t
        .click(secondExtractReport);
    
    //Give some time for the click event to execute
    await t
        .wait(1000);
    
    //Verify delete button is enabled
    await t
        .expect(isDisabled(page.deleteButton)).notOk();
    
    //Click Delete button
    await page.clickDeleteButton();
    
    //Confirm extract report deletion
    await page.confirmDeleteExtractReport();
    
    //Give some time for the delete to be executed
    await t
        .wait(3000);
    
    //Verify the extract reports were deleted
    await t
        .expect(selectorByDataRK(firstExtractReportName).exists).notOk()
        .expect(selectorByDataRK(secondExtractReportName).exists).notOk();
    
    //Verify delete button is disabled
    await t
        .expect(isDisabled(page.deleteButton)).ok();
});