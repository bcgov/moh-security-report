import { t } from 'testcafe';
import { selectorById } from '../helpers/selector.helper';
import { isDisabled } from '../helpers/field.helper';

export default class EnterPayrollSummaryHeaderPage {
    constructor () {
        this.corporateID                 = selectorById("corporateID");
        this.corporateIDValue            = selectorById("corporateID_label");
        this.corporateIDOptions          = selectorById("corporateID_items").find("li");
        this.siteID                      = selectorById("siteID");
        this.siteIDValue                 = selectorById("siteID_label");
        this.siteIDOptions               = selectorById("siteID_items").find("li");
        this.reportingPeriodFrom         = selectorById("reportingFrom_input");
        this.reportingPeriodTo           = selectorById("reportingTo_input");
        this.corporateName               = selectorById("corpName");
        this.siteName                    = selectorById("siteName");
        this.orginizationStatus          = selectorById("orgStatus");
        this.validateButton              = selectorById("validatePeriod");
        this.cancelButton                = selectorById("cancel");
        this.submitButton                = selectorById("submitpayrollsummary");
        this.deleteButton                = selectorById("deletepayrollsummary");
        this.exportButton                = selectorById("exportsummary");
        this.closeButton                 = selectorById("close");        
        this.messagesComponent           = selectorById("entryPayrollTableForm:messages");
        this.confirmDeleteDialog         = selectorById("deleteConfirm");
        this.confirmSubmitDialog         = selectorById("summarySubmitConfirmForm:submitConfirm");
    }
    
    async clickValidateButton() {
        await t.
            click(this.validateButton);
    }
    
    async clickCancelButton() {
        await t.
            click(this.cancelButton);
    }
    
    async clickSubmitButton() {
        await t.
            click(this.submitButton);
    }
    
    async clickDeleteButton() {
        await t.
            click(this.deleteButton);
    }
    
    async clickCloseButton() {
        await t.
            click(this.closeButton);
    }
    
    errorMessages() {
        return this.messagesComponent.find('.ui-messages-error-summary');
    }
    
    warningMessages() {
        return this.messagesComponent.find('.ui-messages-warn-summary');
    }
    
    async verifyCreateMode(desGroupsPage, employeePage) {
        //Verify that all fields exist
        await t
            .expect(this.corporateID.exists).ok()
            .expect(this.siteID.exists).ok()
            .expect(this.reportingPeriodFrom.exists).ok()
            .expect(this.reportingPeriodTo.exists).ok()
            .expect(this.corporateName.exists).ok()
            .expect(this.siteName.exists).ok()
            .expect(this.orginizationStatus.exists).ok();
        
        //Verify that all fields are empty
        await t
            .expect(this.corporateIDValue.textContent).eql('Select', 'Input is not empty')
            .expect(this.siteIDValue.textContent).eql('Select', 'Input is not empty')
            .expect(this.reportingPeriodFrom.value).eql('', 'Input is not empty')
            .expect(this.reportingPeriodTo.value).eql('', 'Input is not empty')
            .expect(this.corporateName.value).eql('', 'Input is not empty')
            .expect(this.siteName.value).eql('', 'Input is not empty')
            .expect(this.orginizationStatus.value).eql('', 'Input is not empty');
            
        //Verify the site, corporate and reporting period can be changed
        await t
            .expect(isDisabled(this.corporateID)).notOk()
            .expect(isDisabled(this.siteID)).notOk()
            .expect(isDisabled(this.reportingPeriodFrom)).notOk()
            .expect(isDisabled(this.reportingPeriodTo)).notOk();
        
        //Verify validate and cancel buttons exist
        await t
            .expect(this.validateButton.exists).ok()
            .expect(this.cancelButton.exists).ok();;
        
        //Verify validate and cancel buttons are enabled
        await t
            .expect(isDisabled(this.validateButton)).notOk()
            .expect(isDisabled(this.cancelButton)).notOk();
        
        //Verify section "designated groups" does not exist
        await t
            .expect(desGroupsPage.designatedGroupsPanel.exists).notOk()
            .expect(desGroupsPage.createButton.exists).notOk();
        
        //Verify section "employees" does not exist
        await t
            .expect(employeePage.employeesPanel.exists).notOk()
            .expect(employeePage.createButton.exists).notOk();
        
        //Verify Close button does not exist
        await t
            .expect(this.closeButton.exists).notOk();
            
        //Verify Submit button does not exist
        await t
            .expect(this.submitButton.exists).notOk();
            
        //Verify Export button does not exist
        await t
            .expect(this.exportButton.exists).notOk();
    }
    
    deletePayrollSummaryConfirmDialogYesButton() {
        return this.confirmDeleteDialog.find(".danger");
    }
    
    deletePayrollSummaryConfirmDialogNoButton() {
        return this.confirmDeleteDialog.find(".ui-confirmdialog-no");
    }
    
    async confirmDeletePayrollSummary() {
        await t.
            click(this.deletePayrollSummaryConfirmDialogYesButton());
    }
    
    async cancelDeletePayrollSummary() {
        await t.
            click(this.deletePayrollSummaryConfirmDialogNoButton());
    }

    submitPayrollSummaryConfirmDialogYesButton() {
        return this.confirmSubmitDialog.find(".ui-confirmdialog-yes");
    }
    
    submitPayrollSummaryConfirmDialogNoButton() {
        return this.confirmSubmitDialog.find(".ui-confirmdialog-no");
    }
    
    async confirmSubmitPayrollSummary() {
        await t.
            click(this.submitPayrollSummaryConfirmDialogYesButton());
    }
    
    async cancelSubmitPayrollSummary() {
        await t.
            click(this.submitPayrollSummaryConfirmDialogNoButton());
    }
}