import { t } from 'testcafe';
import { selectorById, queryById } from '../helpers/selector.helper';
import { isDisabled } from '../helpers/field.helper';

export default class EnterPayrollSummaryEmployeePagePopUp {
    constructor () {
        this.popUpPanel                 = selectorById("employeeDialog");
        this.employeeNumber             = this.popUpPanel.find(queryById("empNm"));
        this.employeeFindButton         = this.popUpPanel.find(queryById("employeeFind"));
        this.employeeSIN                = this.popUpPanel.find(queryById("empSin"));
        this.designatedGroupCode        = this.popUpPanel.find(queryById("groupcode"));
        this.designatedGroupCodeValue   = this.popUpPanel.find(queryById("groupcode_label"));
        this.designatedGroupCodeOptions = selectorById("groupcode_items").find("li");
        this.unionCode                  = this.popUpPanel.find(queryById("unioncode"));
        this.unionCodeValue             = this.popUpPanel.find(queryById("unioncode_label"));
        this.unionCodeOptions           = selectorById("unioncode_items").find("li");
        this.dateOfBirth                = this.popUpPanel.find(queryById("dateofbirth_input"));
        this.gender                     = this.popUpPanel.find(queryById("gender"));
        this.genderValue                = this.popUpPanel.find(queryById("gender_label"));
        this.genderOptions              = selectorById("gender_items").find("li");
        this.classCode                  = this.popUpPanel.find(queryById("classcode"));
        this.classCodeValue             = this.popUpPanel.find(queryById("classcode_label"));
        this.classCodeOptions           = selectorById("classcode_items").find("li");
        this.terminationDate            = this.popUpPanel.find(queryById("terminationdate_input"));
        this.terminationCode            = this.popUpPanel.find(queryById("termcode"));
        this.terminationCodeValue       = this.popUpPanel.find(queryById("termcode_label"));
        this.terminationCodeOptions     = selectorById("termcode_items").find("li");
        this.layeredOverPosition        = this.popUpPanel.find(queryById("layeredoverposition_input"));
        this.increment                  = this.popUpPanel.find(queryById("increment"));
        this.incrementValue             = this.popUpPanel.find(queryById("increment_label"));
        this.incrementOptions           = selectorById("increment_items").find("li");
        this.wageRate                   = this.popUpPanel.find(queryById("wgRate_input"));
        this.wageRateValue              = this.popUpPanel.find(queryById("wgRate_hinput"));
        this.regularPaidHours           = this.popUpPanel.find(queryById("regpaidhours_input"));
        this.jobStatus                  = this.popUpPanel.find(queryById("jbstatus_label"));
        this.jobStatusOptions     		= selectorById("jbstatus_items").find("li");
        this.vacationHours              = this.popUpPanel.find(queryById("vachours_input"));
        this.originalDateOfHire         = this.popUpPanel.find(queryById("dateofhire_input"));
        this.jobTitle                   = this.popUpPanel.find(queryById("jobtitle"));
        this.seniorityStartDate         = this.popUpPanel.find(queryById("senstartdate_input"));
        this.integratedPosition         = this.popUpPanel.find(queryById("intpos"));
        this.integratedPositionValue    = this.popUpPanel.find(queryById("intpos_label"));
        this.confirmButton        		= this.popUpPanel.find(queryById("createemployee"));
        this.confirmUpdateButton        = this.popUpPanel.find(queryById("updateemployee"));
        this.nextButton                 = this.popUpPanel.find(queryById("createemployeenext"));
        this.nextUpdateButton           = this.popUpPanel.find(queryById("updatenextemployee"));
        this.deleteButton               = this.popUpPanel.find(queryById("deleteemployee"));
        this.cancelButton               = this.popUpPanel.find(queryById("cancelemployee"));
		this.confirmDelete				= selectorById("employeeDelConfirmFormDelete");
		this.cancelDelete				= selectorById("employeeDelConfirmFormCancel");
		this.emplMessages				= selectorById("editEmployeeDialogForm:employeeMessages");
    }

    errorMessages() {
	   return this.emplMessages.find('.ui-messages-error-summary');
    }
    
    warningMessages() {
	   return this.emplMessages.find('.ui-messages-warn-summary');
    }
    
    async clickEmployeeFindButton() {
        await t.
            click(this.employeeFindButton);
    }
    
    async clickConfirmButton() {
        await t.
            click(this.confirmButton);
    }
    
    async clickConfirmUpdateButton() {
        await t.
            click(this.confirmUpdateButton);
    }

    async clickNextButton() {
        await t.
            click(this.nextButton);
    }
    
    async clickNextUpdateButton() {
        await t.
            click(this.nextUpdateButton);
    }

    async clickDeleteButton() {
        await t.
            click(this.deleteButton);
    }
    
    async clickCancelButton() {
        await t.
            click(this.cancelButton);
    }
    
    async clickConfirmDeleteButton() {
        await t.
            click(this.confirmDelete);
    }
    
    async clickConfirmCancelButton() {
        await t.
            click(this.cancelDelete);
    }

    async verifyCreateMode() {
        //Verify that all fields exist
        await t
            .expect(this.employeeNumber.exists).ok()
            .expect(this.employeeSIN.exists).ok()
            .expect(this.designatedGroupCode.exists).ok()
            .expect(this.unionCode.exists).ok()
            .expect(this.dateOfBirth.exists).ok()
            .expect(this.gender.exists).ok()
            .expect(this.classCode.exists).ok()
            .expect(this.terminationDate.exists).ok()
            .expect(this.terminationCode.exists).ok()
            .expect(this.layeredOverPosition.exists).ok()
            .expect(this.increment.exists).ok()
            .expect(this.wageRate.exists).ok()
            .expect(this.regularPaidHours.exists).ok()
            .expect(this.jobStatus.exists).ok()
            .expect(this.vacationHours.exists).ok()
            .expect(this.originalDateOfHire.exists).ok()
            .expect(this.jobTitle.exists).ok()
            .expect(this.seniorityStartDate.exists).ok()
            .expect(this.integratedPosition.exists).ok();
        
        //Verify all buttons exist
        await t
            .expect(this.employeeFindButton.exists).ok()
            .expect(this.confirmButton.exists).ok()
            .expect(this.nextButton.exists).ok()
            .expect(this.cancelButton.exists).ok();
        
        //Verify delete button does not exist
        await t
            .expect(this.deleteButton.exists).notOk();
        
        //Verify that all fields are empty
        await t
            .expect(this.employeeNumber.value).eql('', 'Input is not empty')
            .expect(this.employeeSIN.value).eql('', 'Input is not empty')
            .expect(this.designatedGroupCodeValue.textContent).eql('Select', 'Input is not empty')
            .expect(this.unionCodeValue.textContent).eql('Select', 'Input is not empty')
            .expect(this.dateOfBirth.value).eql('', 'Input is not empty')
            .expect(this.genderValue.textContent).eql('Select', 'Input is not empty')
            .expect(this.classCodeValue.textContent).eql('Select', 'Input is not empty')
            .expect(this.terminationDate.value).eql('', 'Input is not empty')
            .expect(this.terminationCodeValue.textContent).eql('Select', 'Input is not empty')
            .expect(this.layeredOverPosition.value).eql('', 'Input is not empty')//??
            .expect(this.incrementValue.textContent).eql('Select', 'Input is not empty')
            .expect(this.wageRateValue.value).eql('', 'Input is not empty')
            .expect(this.regularPaidHours.value).eql('', 'Input is not empty')//??
            .expect(this.jobStatus.textContent).eql('Select', 'Input is not empty')
            .expect(this.vacationHours.value).eql('', 'Input is not empty')
            .expect(this.originalDateOfHire.value).eql('', 'Input is not empty')
            .expect(this.jobTitle.value).eql('', 'Input is not empty')
            .expect(this.seniorityStartDate.value).eql('', 'Input is not empty')
            .expect(this.integratedPositionValue.textContent).eql('Select', 'Input is not empty');
            
        //Verify disabled fields
        await t
            .expect(isDisabled(this.employeeSIN)).ok()
            .expect(isDisabled(this.designatedGroupCode)).ok()
            .expect(isDisabled(this.unionCode)).ok()
            .expect(isDisabled(this.dateOfBirth)).ok()
            .expect(isDisabled(this.gender)).ok()
            .expect(isDisabled(this.classCode)).ok()
            .expect(isDisabled(this.terminationDate)).ok()
            .expect(isDisabled(this.terminationCode)).ok()
            .expect(isDisabled(this.layeredOverPosition)).ok()
            .expect(isDisabled(this.increment)).ok()
            .expect(isDisabled(this.wageRate)).ok()
            .expect(isDisabled(this.regularPaidHours)).ok()
            .expect(isDisabled(this.jobStatus.parent())).ok()
            .expect(isDisabled(this.vacationHours)).ok()
            .expect(isDisabled(this.originalDateOfHire)).ok()
            .expect(isDisabled(this.jobTitle)).ok()
            .expect(isDisabled(this.seniorityStartDate)).ok()
            .expect(isDisabled(this.integratedPosition)).ok();
            
        //Verify enabled fields
        await t
            .expect(isDisabled(this.employeeNumber)).notOk();
        
        //Verify disabled buttons
        await t
            .expect(isDisabled(this.confirmButton)).ok()
            .expect(isDisabled(this.nextButton)).ok();
        
        //Verify enabled buttons
        await t
            .expect(isDisabled(this.employeeFindButton)).notOk()
            .expect(isDisabled(this.cancelButton)).notOk();
    }
    
    async verifyCreateModeAfterSearch() {
        await t
            .expect(isDisabled(this.employeeSIN)).notOk()
            .expect(isDisabled(this.designatedGroupCode)).notOk()
            .expect(isDisabled(this.unionCode)).notOk()
            .expect(isDisabled(this.dateOfBirth)).notOk()
            .expect(isDisabled(this.gender)).notOk()
            .expect(isDisabled(this.classCode)).notOk()
            .expect(isDisabled(this.terminationDate)).notOk()
            .expect(isDisabled(this.terminationCode)).notOk()
            .expect(isDisabled(this.layeredOverPosition)).notOk()
            .expect(isDisabled(this.increment)).notOk()
            .expect(isDisabled(this.wageRate)).notOk()
            .expect(isDisabled(this.regularPaidHours)).notOk()
            .expect(isDisabled(this.jobStatus)).notOk()
            .expect(isDisabled(this.vacationHours)).notOk()
            .expect(isDisabled(this.originalDateOfHire)).notOk()
            .expect(isDisabled(this.jobTitle)).ok()
            .expect(isDisabled(this.seniorityStartDate)).notOk()
            .expect(isDisabled(this.integratedPosition)).notOk();
    }
}