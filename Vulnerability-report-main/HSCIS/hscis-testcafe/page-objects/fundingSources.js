import { Selector, t } from 'testcafe';
import { selectorById, queryById, selectorByAria } from '../helpers/selector.helper';
import { extractDataFromTable } from '../helpers/table.helper';

export default class fundingSources {
    constructor () {
        this.dataForm 				= selectorById("enterFundingSourcesTableForm");
        this.fundingTable 			= selectorById("fundingTable");
        this.fundingTableData 		= selectorById("fundingTable_data");
        this.corporateID 			= selectorById("corporateID");
        this.corporateIDValue       = selectorById("corporateID_label");
        this.corporateIDOptions     = selectorById("enterFundingSourcesTableForm:corporateID_items").find("li");
        this.siteID 				= selectorById("siteID");
        this.siteIDValue       		= selectorById("siteID_label");
        this.siteIDOptions     		= selectorById("siteID_items").find("li");
        this.fiscalId 				= selectorById("fiscalId");
        this.fiscalIdValue       	= selectorById("fiscalId_label");
        this.fiscalIdOptions     	= selectorById("fiscalId_items").find("li");
        this.createFunding 			= selectorById("createId");
        this.submitId 				= selectorById("submitId");
        this.totalFunding 			= selectorById("enterFundingSourcesTableForm:fundingTable:totalFunding");

		//update funding
		this.fundingSourceUpdateDialog 		= selectorById("fundingSourceUpdate");
		this.updateFundingSourceForm 		= selectorById("updateFundingSourceForm");
		this.updateFundingSourceCode 		= selectorById("fundingSourceCode");
        this.fundingSourceCodeValue       	= selectorById("fundingSourceCode_label");
        this.fundingSourceCodeOptions     	= selectorById("fundingSourceCode_items").find("li");
		this.updateProjAmount 				= selectorById("projAmount");
		this.updateFormUpdate 				= selectorById("updateFormUpdate");
		this.deleteFundingSourceButton 		= selectorById("deleteFundingSourceButton");
		this.cancelUpdateFundingSource 		= selectorById("cancelUpdateFundingSource");
		this.updateProjAmountValue 			= selectorById("updateFundingSourceForm:projAmount_hinput");
		
		//deleteFundingSource Dialog
		this.deleteFundingSourceDialog 	= selectorById("deleteFundingSource");
		this.deleteConfirmButton 		= selectorById("updateFundingSourceForm:deleteConfirmButton");
		this.deleteCancelButton 		= selectorById("updateFundingSourceForm:deleteCancelButton");
   
		//popup create createFundingSourceForm
		this.fundingSourceCreateDialog 		= selectorById("fundingSourceCreate");
		this.createFundingSourceForm 		= selectorById("createFundingSourceForm");
		this.fundingSourceCode 				= selectorById("createFundingSourceForm:fundingSourceCode");
        this.fundingSourceCodeValue       	= selectorById("createFundingSourceForm:fundingSourceCode_label");
        this.fundingSourceCodeOptions     	= selectorById("createFundingSourceForm:fundingSourceCode_items").find("li");
		this.projAmount 					= selectorById("createFundingSourceForm:projAmount");
		this.confirmCreateFundingSource		= selectorById("createFundingSourceForm:confirmCreateFundingSource");
		this.cancelCreateFundingSource 		= selectorById("createFundingSourceForm:cancelCreateFundingSource");
		this.projValue 						= selectorById("createFundingSourceForm:projAmount_hinput");
		
		//messages
		this.enterFundingSourcesTableFormMessages 	= selectorById("enterFundingSourcesTableForm:messages");
		
		
	}
	
    fundingTableDataList() {
        return this.fundingTableData.find("tr");
    }

    async fundingData() {
        return extractDataFromTable(this.fundingTableData);
    }

	async clickCreateFunding() {
        await t.
            click(this.createFunding());
    }

	async clickCancelCreateFundingSource() {
        await t.
            click(this.cancelCreateFundingSource());
    }

	async clickconfirmCreateFundingSource() {
        await t.
            click(this.confirmCreateFundingSource());
    }

	async clickcancelUpdateFundingSource() {
        await t.
            click(this.cancelUpdateFundingSource());
    }

	async clickupdateFormUpdate() {
        await t.
            click(this.updateFormUpdate());
    }

	async clickdeleteFundingSourceButton() {
        await t.
            click(this.deleteFundingSourceButton());
    }

	async clickdeleteConfirmButton() {
        await t.
            click(this.deleteConfirmButton());
    }

	async clickdeleteCancelButton() {
        await t.
            click(this.deleteCancelButton());
    }

    dataIndexOfFundingSource(data, valueToCheck) {
        for (let rowNumber = 0; rowNumber < data.length; rowNumber++) {
            let row = data[rowNumber];
            if (row.length === 3 &&
                row[0] == valueToCheck) {
                return rowNumber;
            }
        }
        return -1;
    }

    dataContainsFundingSource(data, valueToCheck) {
        return this.dataIndexOfFundingSource(data, valueToCheck) !== -1;
    }

}