import { Selector, t } from 'testcafe';
import { selectorById, queryById, selectorByAria } from '../helpers/selector.helper';
import { extractDataFromTable } from '../helpers/table.helper';

export default class enterPayrollSummaryExport {
    constructor () {
        this.dataForm 						= selectorById("entryPayrollTableForm");
        this.exportEmployeeTable 			= selectorById("entryPayrollTableForm:exportEmployeeTable");
        this.exportEmployeeTableData 		= selectorById("entryPayrollTableForm:exportEmployeeTable_data");
        this.exportOverTimeTable 			= selectorById("entryPayrollTableForm:exportDesignatedGroupSummaryID:exportOverTimeTable");
        this.exportOverTimeTableData 		= selectorById("entryPayrollTableForm:exportDesignatedGroupSummaryID:exportOverTimeTable_data");
        this.exportOverTimeTable_head 		= selectorById("entryPayrollTableForm:exportDesignatedGroupSummaryID:exportOverTimeTable_head");
        this.exportLeaveTable 				= selectorById("entryPayrollTableForm:exportDesignatedGroupSummaryID:exportLeaveTable");
        this.exportLeaveTableData 			= selectorById("entryPayrollTableForm:exportDesignatedGroupSummaryID:exportLeaveTable_data");
        this.exportLeaveTable_head 			= selectorById("entryPayrollTableForm:exportDesignatedGroupSummaryID:exportLeaveTable_head");
        this.exportAllowanceTable 			= selectorById("entryPayrollTableForm:exportDesignatedGroupSummaryID:exportAllowanceTable");
        this.exportAllowanceTableData 		= selectorById("entryPayrollTableForm:exportDesignatedGroupSummaryID:exportAllowanceTable_data");
        this.exportAllowanceTable_head 		= selectorById("entryPayrollTableForm:exportDesignatedGroupSummaryID:exportAllowanceTable_head");
        this.exportPayTable 				= selectorById("entryPayrollTableForm:exportDesignatedGroupSummaryID:exportPayTable");
        this.exportPayTableData 			= selectorById("entryPayrollTableForm:exportDesignatedGroupSummaryID:exportPayTable_data");
        this.exportPayTable_head 			= selectorById("entryPayrollTableForm:exportDesignatedGroupSummaryID:exportPayTable_head");
		this.exportsummary					= selectorById("entryPayrollTableForm:exportsummary");
		this.backToPayrollSummary			= selectorById("entryPayrollTableForm:backToPayrollSummary");
		this.printPayrollSummary			= selectorById("entryPayrollTableForm:printPayrollSummary");
		this.headerDate						= selectorById("entryPayrollTableForm:headerDate");
		this.headerCorpEmp					= selectorById("entryPayrollTableForm:headerCorpEmp");
		this.headerSiteEmp					= selectorById("entryPayrollTableForm:headerSiteEmp");
		this.headerReportingPeriod			= selectorById("headerReportingPeriod");
	}

    exportEmployeeTableList() {
        return this.exportEmployeeTableData.find("tr");
    }

    async employeeData() {
        return extractDataFromTable(this.exportEmployeeTableData);
    }

    dataIndexOfEmployeeData(data, valueToCheck) {
        for (let rowNumber = 0; rowNumber < data.length; rowNumber++) {
            let row = data[rowNumber];
            if (row.length === 6 &&
                row[0] == valueToCheck) {
                return rowNumber;
            }
        }
        return -1;
    }

    dataContainsEmployeeData(data, valueToCheck) {
        return this.dataIndexOfEmployeeData(data, valueToCheck) !== -1;
    }

    exportOverTimeTableList() {
        return this.exportOverTimeTableData.find("tr");
    }

    async overTimeData() {
        return extractDataFromTable(this.exportOverTimeTableData);
    }

    exportOverTimeTableCount() {
        return this.exportOverTimeTable_head.find("th").count;
    }
//working one
    dataIndexOfOverTimeData(data, valueToCheck, colToCheck, colNumber) {
        for (let rowNumber = 0; rowNumber < data.length; rowNumber++) {
            let row = data[rowNumber];
            if (row.length === colToCheck &&
                row[colNumber] == valueToCheck) {
                return rowNumber;
            }
        }
        return -1;
    }

    dataContainsOverTimeData(data, valueToCheck, colToCheck, indexCol) {
        return this.dataIndexOfOverTimeData(data, valueToCheck, colToCheck, indexCol) !== -1;
    }

    exportLeaveTableList() {
        return this.exportLeaveTableData.find("tr");
    }

    async leaveData() {
        return extractDataFromTable(this.exportLeaveTableData);
    }

    exportLeaveTableCount() {
        return this.exportLeaveTable_head.find("th").count;
    }

    dataIndexOfLeaveData(data, valueToCheck, colToCheck, colNumber) {
        for (let rowNumber = 0; rowNumber < data.length; rowNumber++) {
            let row = data[rowNumber];
            if (row.length === colToCheck &&
                row[colNumber] == valueToCheck) {
                return rowNumber;
            }
        }
        return -1;
    }

    dataContainsLeaveData(data, valueToCheck, colToCheck, indexCol) {
        return this.dataIndexOfLeaveData(data, valueToCheck, colToCheck, indexCol) !== -1;
    }

    exportAllowanceTableList() {
        return this.exportAllowanceTableData.find("tr");
    }

    async allowanceData() {
        return extractDataFromTable(this.exportAllowanceTableData);
    }

    exportAllowanceTableCount() {
        return this.exportAllowanceTable_head.find("th").count;
    }

    dataIndexOfAllowanceData(data, valueToCheck, colToCheck, colNumber) {
        for (let rowNumber = 0; rowNumber < data.length; rowNumber++) {
            let row = data[rowNumber];
            if (row.length === colToCheck &&
                row[colNumber] == valueToCheck) {
                return rowNumber;
            }
        }
        return -1;
    }

    dataContainsAllowanceData(data, valueToCheck, colToCheck, indexCol) {
        return this.dataIndexOfAllowanceData(data, valueToCheck, colToCheck, indexCol) !== -1;
    }

    exportPayTableList() {
        return this.exportPayTableData.find("tr");
    }

    async payData() {
        return extractDataFromTable(this.exportPayTableData);
    }

    exportPayTableCount() {
        return this.exportPayTable_head.find("th").count;
    }

    dataIndexOfPayData(data, valueToCheck, colToCheck, colNumber) {
        for (let rowNumber = 0; rowNumber < data.length; rowNumber++) {
            let row = data[rowNumber];
            if (row.length === colToCheck &&
                row[colNumber] == valueToCheck) {
                return rowNumber;
            }
        }
        return -1;
    }

    dataContainsPayData(data, valueToCheck, colToCheck, indexCol) {
        return this.dataIndexOfPayData(data, valueToCheck, colToCheck, indexCol) !== -1;
    }

	async clickBackToPayrollSummary() {
        await t.
            click(this.backToPayrollSummary());
    }

	async clickPrintPayrollSummary() {
        await t.
            click(this.printPayrollSummary());
    }

	async clickexportsummary() {
        await t.
            click(this.exportsummary());
    }
}