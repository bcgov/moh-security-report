import { Selector, t } from 'testcafe';
import { selectorById, selectorByAria, queryById } from '../helpers/selector.helper';
import { extractDataFromTable } from '../helpers/table.helper';

export default class adminMembership {
    constructor () {
        this.dataForm 					= selectorById("membershipForm");
        this.inputSearchString 			= selectorById("inputSearchString");
        this.searchButton 				= selectorById("searchButtonGo");
        this.dataTable 					= selectorById("membershipTable");
        this.dataTableData 				= selectorById("membershipTable_data");
		this.membershipCreateDialog 	= selectorById("membershipCreateDialog");
		this.createMembershipForm 		= selectorById("createMembershipForm");
        this.corpEmpNum         		= this.membershipCreateDialog.find(queryById("corpEmpNum"));
        this.siteEmpNum         		= this.membershipCreateDialog.find(queryById("siteEmpNum"));
        this.legName         			= this.membershipCreateDialog.find(queryById("legName"));
        this.opName         			= this.membershipCreateDialog.find(queryById("opName"));
        this.hnftpAccount         		= this.membershipCreateDialog.find(queryById("hnftpAccount"));
        this.address1         			= this.membershipCreateDialog.find(queryById("address1"));
        this.address2         			= this.membershipCreateDialog.find(queryById("address2"));
        this.city         				= this.membershipCreateDialog.find(queryById("city"));
        this.province      				= this.membershipCreateDialog.find(queryById("province"));
        this.postCode      				= this.membershipCreateDialog.find(queryById("postCode"));
        this.areaCode      				= this.membershipCreateDialog.find(queryById("areaCode"));
        this.phoneNum      				= this.membershipCreateDialog.find(queryById("phoneNum"));
        this.contactName1      			= this.membershipCreateDialog.find(queryById("contactName1"));
        this.contactName2      			= this.membershipCreateDialog.find(queryById("contactName2"));
        this.areaCode1      			= this.membershipCreateDialog.find(queryById("areaCode1"));
        this.contactPhone1      		= this.membershipCreateDialog.find(queryById("contactPhone1"));
        this.areaCode2      			= this.membershipCreateDialog.find(queryById("areaCode2"));
        this.contactPhone2      		= this.membershipCreateDialog.find(queryById("contactPhone2"));
        this.contactEmail1      		= this.membershipCreateDialog.find(queryById("contactEmail1"));
        this.contactEmail2      		= this.membershipCreateDialog.find(queryById("contactEmail2"));
        this.contactLdap1      			= this.membershipCreateDialog.find(queryById("contactLdap1"));
        this.contactLdap2      			= this.membershipCreateDialog.find(queryById("contactLdap2"));
        this.commentsNotes      		= this.membershipCreateDialog.find(queryById("commentsNotes"));
        this.confirmCreateMembership    = selectorById("createMembershipForm:confirmCreateMembership");
        this.cancelCreateMembership     = selectorById("createMembershipForm:cancelCreateMembership");
        this.healthAuthorityNumber        = this.membershipCreateDialog.find(queryById("healthAuthorityNumber"));
        this.healthAuthorityNumberValue   = this.membershipCreateDialog.find(queryById("healthAuthorityNumber_label"));
        this.healthAuthorityNumberOptions = selectorById("healthAuthorityNumber_items").find("li");
        this.reportedWithin        		= this.membershipCreateDialog.find(queryById("reportedWithin"));
        this.reportedWithinValue   		= this.membershipCreateDialog.find(queryById("reportedWithin_label"));
        this.reportedWithinOptions 		= selectorById("reportedWithin_items").find("li");
        this.memberType        			= this.membershipCreateDialog.find(queryById("memberType"));
        this.memberTypeValue   			= this.membershipCreateDialog.find(queryById("memberType_label"));
        this.memberTypeOptions 			= selectorById("memberType_items").find("li");
        this.payrollType        		= this.membershipCreateDialog.find(queryById("payrollType"));
        this.payrollTypeValue   		= this.membershipCreateDialog.find(queryById("payrollType_label"));
        this.payrollTypeOptions 		= selectorById("payrollType_items").find("li");
        this.serviceTypeCd        		= this.membershipCreateDialog.find(queryById("serviceTypeCd"));
        this.serviceTypeCdValue   		= this.membershipCreateDialog.find(queryById("serviceTypeCd_label"));
        this.serviceTypeCdOptions 		= selectorById("serviceTypeCd_items").find("li");
        this.activeFlag        			= this.membershipCreateDialog.find(queryById("activeFlag"));
        this.activeFlagValue   			= this.membershipCreateDialog.find(queryById("activeFlag_label"));
        this.activeFlagOptions 			= selectorById("activeFlag_items").find("li");
        this.organizationStatus        	= this.membershipCreateDialog.find(queryById("organizationStatus"));
        this.organizationStatusValue   	= this.membershipCreateDialog.find(queryById("organizationStatus_label"));
        this.organizationStatusOptions 	= selectorById("organizationStatus_items").find("li");
        this.summaryFlag        		= this.membershipCreateDialog.find(queryById("summaryFlag"));
        this.summaryFlagValue   		= this.membershipCreateDialog.find(queryById("summaryFlag_label"));
        this.summaryFlagOptions 		= selectorById("summaryFlag_items").find("li");
        this.membDateTest            	= this.membershipCreateDialog.find(queryById("membDateTest_input"));
        this.createButton      			= selectorById("createButton");
        this.deleteMembership      		= selectorById("updateMembershipForm:deleteMembership");
        this.cancelMembership      		= selectorById("updateMembershipForm:cancelMembership");
        this.updateMembership      		= selectorById("updateMembershipForm:updateMembership");
        this.confirmDeleteMembership    = selectorById("updateMembershipForm:confirmDeleteMembership");
        this.cancelDeleteMembership     = selectorById("updateMembershipForm:cancelDeleteMembership");
        this.messagesComponent          = selectorById("createMembershipForm:createMembershipMessages");
        this.notesPopup          		= selectorById("notesPopup");
        this.notePopupClose   			= selectorById("notePopup:notePopupClose");
		this.commentsNotesPopup			= this.notesPopup.find(queryById("commentsNotes"));
    }
	
    getDatas() {
        return this.dataTableData.find(".ui-datatable-selectable");
    }
    
	dataDialog() {
        return Selector("span").withText('Update Membership').parent(".ui-confirm-dialog");
    }

	dataDialog() {
        return Selector("span").withText('Update Membership').parent(".ui-confirm-dialog");
    }

    errorMessages() {
	   return this.messagesComponent.find('.ui-messages-error-summary');
    }

    infoMessages() {
	   return this.messagesComponent.find('.ui-messages-info-summary');
    }

    async clickNotePopupClose() {
        await t.
            click(this.notePopupClose);
    }

    async clickCreateButton() {
        await t.
            click(this.createButton);
    }

    async confirmCreateMembershipClick() {
        await t.
            click(this.confirmCreateMembership);
    }
 
    async cancelCreateMembershipClick() {
        await t.
            click(this.cancelCreateMembership);
    }

    async deleteMembershipClick() {
        await t.
            click(this.deleteMembership);
    }

	dataUpdateDialogYesButton() {
        return this.dataDialog().find(".danger");
    }
    
    dataUpdateDialogNoButton() {
        return selectorById("updateMembershipForm:cancelMembership");
    }

	async confirmUpdateDataDialog() {
        await t.
            click(this.dataUpdateDialogYesButton());
    }
    
    async cancelUpdateDataDialog() {
        await t.
            click(this.dataUpdateDialogNoButton());
    }

	deleteDataDialog() {
        return Selector("span").withText('Are you sure you want to delete').parent(".ui-confirm-dialog");
    }

    deleteDataDialogYesButton() {
        return this.deleteDataDialog().find(".danger");
    }
    
    deleteDataDialogNoButton() {
        return this.deleteDataDialog().find(".ui-confirmdialog-no");
    }

	async confirmDeleteDataDialog() {
        await t.
            click(this.deleteDataDialogYesButton());
    }
    
    async cancelDeleteDataDialog() {
        await t.
            click(this.deleteDataDialogNoButton());
    }

    async membershipData() {
        return extractDataFromTable(this.dataTableData);
    }

    membershipDataList() {
        return this.dataTableData.find("tr");
    }
	
    dataIndexOfMembership(data, corpEmpNum, siteEmpNum) {
        for (let rowNumber = 0; rowNumber < data.length; rowNumber++) {
            let row = data[rowNumber];
            if (row.length === 7 &&
                row[0] == corpEmpNum &&
                row[1] == siteEmpNum) {
                return rowNumber;
            }
        }
        return -1;
    }
    
    dataContainsMembership(data, corpEmpNum, siteEmpNum) {
        return this.dataIndexOfMembership(data, corpEmpNum, siteEmpNum) !== -1;
    }

	viewNotesLink(lineIndex) {
		return this.membershipDataList().nth(lineIndex).find(".notes");
	}

	async clickViewNotesLink(lineIndex) {
        await t.
            click(this.viewNotesLink(lineIndex));
    }
}