package ca.bc.gov.health.hscis.validators;

import ca.bc.gov.health.hscis.view.payroll.EnterPayrollSummaryView;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.component.UIComponent;
import jakarta.faces.component.UIInput;
import jakarta.faces.context.FacesContext;
import jakarta.faces.validator.FacesValidator;
import jakarta.faces.validator.Validator;
import jakarta.faces.validator.ValidatorException;
import jakarta.inject.Inject;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;

/**
 * FacesValidator for validating Date of Birth values
 *
 * @author CGI Information Management Consultants Inc.
 */
@FacesValidator(value = "DateOfBirthValidator", managed = true)
public class DateOfBirthValidator implements Validator {

  private static final LocalDate MAX_LOCAL_DATE = LocalDate.of(1900, 1, 1);
  private static final int MIN_AGE = 15;
  private static final int MAX_AGE = 80;

  @Inject EnterPayrollSummaryView enterPayrollSummaryView;

  /**
   * Validate the employee's date of birth. In order to shorten the length of the warning message
   * for modal window space consideration, "greater/less than expected max/min n-1/n+1" is used
   * instead. The following rules are validated:
   * <li>Birthdate must be after 1900-01-01
   * <li>No birthdate that would make a person over/equal to the age of 80
   * <li>No birthdate that would make a person under/equal to the age of 15
   *
   * @see jakarta.faces.validator.Validator#validate(jakarta.faces.context.FacesContext,
   *     jakarta.faces.component.UIComponent, java.lang.Object)
   * @param context
   * @param component
   * @param value
   */
  @Override
  public void validate(FacesContext context, UIComponent component, Object value) {

    String errorMsg = null;
    String warningMsg = null;
    String saveMsg = null;
    String event = null;
    LocalDate dateOfBirth = (LocalDate) value;

    // Skip validations triggered by EnterPayrollSummaryView.dateOfBirthValidWarnChangeListener()
    event =
        context.getExternalContext().getRequestParameterMap().get("jakarta.faces.partial.event");
    if (event == null || !"change".equals(event)) {
      if (!dateOfBirth.isAfter(MAX_LOCAL_DATE)) {
        errorMsg =
            "Date of Birth: Value must be after "
                + MAX_LOCAL_DATE.format(DateTimeFormatter.ofPattern("yyyy MM dd"));
      }

      if (errorMsg != null) {
        throw new ValidatorException(
            new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMsg, errorMsg));
      }

      int years = Period.between(dateOfBirth, LocalDate.now()).getYears();
      if (years >= MAX_AGE) {
        warningMsg = "Date of Birth: Age is greater than expected max of " + (MAX_AGE - 1);
      } else if (years <= MIN_AGE) {
        warningMsg = "Date of Birth: Age is less than expected min of " + (MIN_AGE + 1);
      }

      if (warningMsg != null) {
        if (!enterPayrollSummaryView.isDateOfBirthValidWarn()) {
          // Invalidate component only on initial warning to allow for user override
          ((UIInput) component).setValid(false);
          enterPayrollSummaryView.setDateOfBirthValidWarn(true);
        }

        // Prevent duplicate Click <button> to save messages
        if (!context.getMessages("saveMsg").hasNext()) {
          if (enterPayrollSummaryView.getPopupEmpMode()
              == EnterPayrollSummaryView.PopupMode.CREATE) {
            saveMsg = "<i>Click Create to save</i>";
          } else if (enterPayrollSummaryView.getPopupEmpMode()
              == EnterPayrollSummaryView.PopupMode.EDIT) {
            saveMsg = "<i>Click Update to save</i>";
          }
          context.addMessage(
              "saveMsg", new FacesMessage(FacesMessage.SEVERITY_WARN, saveMsg, saveMsg));
        }

        context.addMessage(
            component.getClientId(),
            new FacesMessage(FacesMessage.SEVERITY_WARN, warningMsg, warningMsg));
      }
    }
  }
}
