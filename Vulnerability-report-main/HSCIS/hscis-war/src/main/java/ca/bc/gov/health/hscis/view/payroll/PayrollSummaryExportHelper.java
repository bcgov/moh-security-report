/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.hscis.view.payroll;

import ca.bc.gov.health.hscis.dto.PayrollSummaryGroupComp;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;

public class PayrollSummaryExportHelper {

  public static final List<String> overTimeFieldList = new ArrayList();

  public static final List<String> leaveFieldList = new ArrayList();

  public static final List<String> allowanceFieldList = new ArrayList();

  public static final List<String> payFieldList = new ArrayList();

  private static final Map<String, String> fieldsdMapping = new HashMap();

  public static void init() {

    overTimeFieldList.add("premPayHrsWorkedStat15");
    overTimeFieldList.add("regWorkDayOvertime15");
    overTimeFieldList.add("regDayOffOvertime15");
    overTimeFieldList.add("overtimeInsuffNotice15");
    overTimeFieldList.add("callBack15");
    overTimeFieldList.add("otherOvertime15");
    overTimeFieldList.add("totalOvertime15");
    overTimeFieldList.add("premPayHrsWorkedStat2");
    overTimeFieldList.add("regWorkDayOvertime2");
    overTimeFieldList.add("regDayOffOvertime2");
    overTimeFieldList.add("overtimeInsuffNotice2");
    overTimeFieldList.add("callBack2");
    overTimeFieldList.add("otherOvertime2");
    overTimeFieldList.add("totalOvertime2");
    overTimeFieldList.add("premPayHrsWorkedStat25");

    leaveFieldList.add("sickLeaveBank");
    leaveFieldList.add("specialLeave");
    leaveFieldList.add("employerPaidUnionBusiness");
    leaveFieldList.add("allOtherPaidLeaves");
    leaveFieldList.add("sickLeavePaid");
    leaveFieldList.add("compassionateLeave");
    leaveFieldList.add("educationLeave");
    leaveFieldList.add("paidLeaveWhileOnWcb");
    leaveFieldList.add("sickLeaveCashPayout");
    leaveFieldList.add("juryDuty");
    leaveFieldList.add("timeOffInLieuCto");
    leaveFieldList.add("sickLeaveBank");

    allowanceFieldList.add("onCallMealPeriods");
    allowanceFieldList.add("shiftPremiumsWeekends");
    allowanceFieldList.add("respPaySpecialAllowances");
    allowanceFieldList.add("isolationAllowance");
    allowanceFieldList.add("maternityLeaveSebPlan");
    allowanceFieldList.add("shiftPremiumsEvenings");
    allowanceFieldList.add("primaryRate");
    allowanceFieldList.add("travelAllowance");
    allowanceFieldList.add("mealAllowance");
    allowanceFieldList.add("otherPremiumsAllowances");
    allowanceFieldList.add("shiftPremiumsNights");
    allowanceFieldList.add("qualificationDifferentials");
    allowanceFieldList.add("uniformAllowance");
    allowanceFieldList.add("severanceAllowancePaid");

    payFieldList.add("superannuation");
    payFieldList.add("dental");
    payFieldList.add("ei");
    payFieldList.add("longTermDisability");
    payFieldList.add("homeSupportHolLieuPay");
    payFieldList.add("liveInPay");
    payFieldList.add("telephoneConsultationPay");
    payFieldList.add("msp");
    payFieldList.add("cpp");
    payFieldList.add("groupLifeAdd");
    payFieldList.add("casualStatHolVacationPay");
    payFieldList.add("superShiftPremium");
    payFieldList.add("onCallDifferentials");
    payFieldList.add("pensionPlanRrsp");
    payFieldList.add("extendedHealth");
    payFieldList.add("wcb");
    payFieldList.add("retroAndLumpSumPayout");
    payFieldList.add("difficultToFillUnitPremium");
    payFieldList.add("overnightPay");

    // over time
    fieldsdMapping.put("premPayHrsWorkedStat15", "Premium Pay for Stats (1.5)");
    fieldsdMapping.put("regWorkDayOvertime15", "Regular Work OT (1.5)");
    fieldsdMapping.put("regDayOffOvertime15", "Regular Day Off OT (1.5)");
    fieldsdMapping.put("overtimeInsuffNotice15", "OT for Insufficient Notice (1.5)");
    fieldsdMapping.put("callBack15", "Call Back (1.5)");
    fieldsdMapping.put("otherOvertime15", "Other Overtime (1.5)");
    fieldsdMapping.put("totalOvertime15", "Total Overtime (1.5)");
    fieldsdMapping.put("premPayHrsWorkedStat2", "Premium Pay for Stats (2.0)");
    fieldsdMapping.put("regWorkDayOvertime2", "Regular Work OT (2.0)");
    fieldsdMapping.put("regDayOffOvertime2", "Regular Day Off OT (2.0)");
    fieldsdMapping.put("overtimeInsuffNotice2", "OT for Insufficient Notice (2.0)");
    fieldsdMapping.put("callBack2", "Call Back (2.0)");
    fieldsdMapping.put("otherOvertime2", "Other Overtime (2.0)");
    fieldsdMapping.put("totalOvertime2", "Total Overtime (2.0)");
    fieldsdMapping.put("premPayHrsWorkedStat25", "Premium Pay for Stats (2.5)");

    // leave
    fieldsdMapping.put("sickLeaveBank", "Sick Leave Bank");
    fieldsdMapping.put("specialLeave", "Special Leave");
    fieldsdMapping.put("employerPaidUnionBusiness", "Employer Paid Union Business");
    fieldsdMapping.put("allOtherPaidLeaves", "All Other Paid Leaves");
    fieldsdMapping.put("sickLeavePaid", "Sick Leave Paid");
    fieldsdMapping.put("compassionateLeave", "Compassionate Leave");
    fieldsdMapping.put("educationLeave", "Education Leave");
    fieldsdMapping.put("paidLeaveWhileOnWcb", "Paid While on WCB");
    fieldsdMapping.put("sickLeaveCashPayout", "Sick Leave Cash Payout");
    fieldsdMapping.put("juryDuty", "Jury Duty");
    fieldsdMapping.put("timeOffInLieuCto", "Time Off in Lieu (CTO)");

    // allowance
    fieldsdMapping.put("onCallMealPeriods", "On Call Meal");
    fieldsdMapping.put("shiftPremiumsWeekends", "Shift Prem. (Weekend)");
    fieldsdMapping.put("respPaySpecialAllowances", "Resp. Pay/Spec Allowance");
    fieldsdMapping.put("isolationAllowance", "Isolation Allowance");
    fieldsdMapping.put("maternityLeaveSebPlan", "Mat./Pat. Leave");
    fieldsdMapping.put("shiftPremiumsEvenings", "Shift Prem. (Evening)");
    fieldsdMapping.put("primaryRate", "On Call Dffrntl. (Primary Rate)");
    fieldsdMapping.put("travelAllowance", "Travel Allowance");
    fieldsdMapping.put("mealAllowance", "Meal Allowance");
    fieldsdMapping.put("otherPremiumsAllowances", "Other Prems/Allows");
    fieldsdMapping.put("shiftPremiumsNights", "Shift Prem. (Night)");
    fieldsdMapping.put("qualificationDifferentials", "Qualification Differential");
    fieldsdMapping.put("uniformAllowance", "Uniform Allowance");
    fieldsdMapping.put("severanceAllowancePaid", "Severance Allowance Paid");

    // pay
    fieldsdMapping.put("superannuation", "Superannuation");
    fieldsdMapping.put("dental", "Dental");
    fieldsdMapping.put("ei", "EI");
    fieldsdMapping.put("longTermDisability", "Long Term Disability");
    fieldsdMapping.put("homeSupportHolLieuPay", "Home Supp. Hol. Pay");
    fieldsdMapping.put("liveInPay", "Live-In Pay");
    fieldsdMapping.put("telephoneConsultationPay", "Telephone Consultation Pay");
    fieldsdMapping.put("msp", "MSP");
    fieldsdMapping.put("cpp", "CPP");
    fieldsdMapping.put("groupLifeAdd", "Group Life/ADD");
    fieldsdMapping.put("casualStatHolVacationPay", "Casual Stat. Vac. Pay");
    fieldsdMapping.put("superShiftPremium", "Super Shift Premium");
    fieldsdMapping.put("onCallDifferentials", "On-Call Differentials (2nd Rate)");
    fieldsdMapping.put("pensionPlanRrsp", "Pension/RRSP");
    fieldsdMapping.put("extendedHealth", "Extended Health");
    fieldsdMapping.put("wcb", "WCB");
    fieldsdMapping.put("retroAndLumpSumPayout", "Retro/Lump Sum Payout");
    fieldsdMapping.put("difficultToFillUnitPremium", "Difficult-to-Fill Unit Premium");
    fieldsdMapping.put("overnightPay", "Overnight Pay");
  }

  public static void sumTotalForAllGroups(
      List<DesignatedGroupExportDataBean> exportList, Map<String, BigDecimal> groupValueSumMap) {

    for (Iterator<DesignatedGroupExportDataBean> iterator = exportList.iterator();
        iterator.hasNext(); ) {
      DesignatedGroupExportDataBean exportDataBean =
          (DesignatedGroupExportDataBean) iterator.next();
      exportDataBean.setTotal(
          exportDataBean
              .getGroupA()
              .add(
                  exportDataBean
                      .getGroupB()
                      .add(
                          exportDataBean
                              .getGroupC()
                              .add(
                                  exportDataBean
                                      .getGroupD()
                                      .add(
                                          exportDataBean
                                              .getGroupE()
                                              .add(
                                                  exportDataBean
                                                      .getGroupF()
                                                      .add(
                                                          exportDataBean
                                                              .getGroupN()
                                                              .add(
                                                                  exportDataBean
                                                                      .getGroupP()
                                                                      .add(
                                                                          exportDataBean
                                                                              .getGroupR()
                                                                              .add(
                                                                                  exportDataBean
                                                                                      .getGroupS()))))))))));
      groupValueSumMap.put("total", groupValueSumMap.get("total").add(exportDataBean.getTotal()));
      if (exportDataBean.getTotal().compareTo(BigDecimal.ZERO) == 0) {
        iterator.remove();
        continue;
      }
      String reportedFieldToDisplay = fieldsdMapping.get(exportDataBean.getReportedField());
      exportDataBean.setReportedField(reportedFieldToDisplay == null ? "" : reportedFieldToDisplay);
    }
  }

  public static void convertByCategory(
      PayrollSummaryGroupComp groupComp,
      DesignatedGroupExportDataBean exportDataBean,
      String attribute,
      List<DesignatedGroupExportDataBean> exportDataBeanByCategory,
      List<String> fieldList,
      Map<String, BigDecimal> groupValueSumMap) {

    if (fieldList.contains(attribute)) {
      if (!exportDataBeanByCategory.contains(exportDataBean)) {
        exportDataBeanByCategory.add(exportDataBean);
      }
      exportDataBean =
          exportDataBeanByCategory.get(exportDataBeanByCategory.indexOf(exportDataBean));
      groupCompToExportDataBean(groupComp, exportDataBean, attribute, groupValueSumMap);
    }
  }

  private static void groupCompToExportDataBean(
      PayrollSummaryGroupComp groupComp,
      DesignatedGroupExportDataBean exportDataBean,
      String attribute,
      Map<String, BigDecimal> groupValueSumMap) {

    String designatedGroup = groupComp.getDesignatedGroup().getDesignatedGroupCode();
    try {
      switch (designatedGroup) {
        case "A":
          {
            BigDecimal valueOfAttribute = groupComp.getByField(groupComp, attribute);
            exportDataBean.setGroupA(valueOfAttribute == null ? BigDecimal.ZERO : valueOfAttribute);
            groupValueSumMap.put("A", groupValueSumMap.get("A").add(exportDataBean.getGroupA()));
            break;
          }
        case "B":
          {
            BigDecimal valueOfAttribute = groupComp.getByField(groupComp, attribute);
            exportDataBean.setGroupB(valueOfAttribute == null ? BigDecimal.ZERO : valueOfAttribute);
            groupValueSumMap.put("B", groupValueSumMap.get("B").add(exportDataBean.getGroupB()));
            break;
          }
        case "C":
          {
            BigDecimal valueOfAttribute = groupComp.getByField(groupComp, attribute);
            exportDataBean.setGroupC(valueOfAttribute == null ? BigDecimal.ZERO : valueOfAttribute);
            groupValueSumMap.put("C", groupValueSumMap.get("C").add(exportDataBean.getGroupC()));
            break;
          }
        case "D":
          {
            BigDecimal valueOfAttribute = groupComp.getByField(groupComp, attribute);
            exportDataBean.setGroupD(valueOfAttribute == null ? BigDecimal.ZERO : valueOfAttribute);
            groupValueSumMap.put("D", groupValueSumMap.get("D").add(exportDataBean.getGroupD()));
            break;
          }
        case "E":
          {
            BigDecimal valueOfAttribute = groupComp.getByField(groupComp, attribute);
            exportDataBean.setGroupE(valueOfAttribute == null ? BigDecimal.ZERO : valueOfAttribute);
            groupValueSumMap.put("E", groupValueSumMap.get("E").add(exportDataBean.getGroupE()));
            break;
          }
        case "F":
          {
            BigDecimal valueOfAttribute = groupComp.getByField(groupComp, attribute);
            exportDataBean.setGroupF(valueOfAttribute == null ? BigDecimal.ZERO : valueOfAttribute);
            groupValueSumMap.put("F", groupValueSumMap.get("F").add(exportDataBean.getGroupF()));
            break;
          }
        case "N":
          {
            BigDecimal valueOfAttribute = groupComp.getByField(groupComp, attribute);
            exportDataBean.setGroupN(valueOfAttribute == null ? BigDecimal.ZERO : valueOfAttribute);
            groupValueSumMap.put("N", groupValueSumMap.get("N").add(exportDataBean.getGroupN()));
            break;
          }
        case "P":
          {
            BigDecimal valueOfAttribute = groupComp.getByField(groupComp, attribute);
            exportDataBean.setGroupP(valueOfAttribute == null ? BigDecimal.ZERO : valueOfAttribute);
            groupValueSumMap.put("P", groupValueSumMap.get("P").add(exportDataBean.getGroupP()));
            break;
          }
        case "R":
          {
            BigDecimal valueOfAttribute = groupComp.getByField(groupComp, attribute);
            exportDataBean.setGroupR(valueOfAttribute == null ? BigDecimal.ZERO : valueOfAttribute);
            groupValueSumMap.put("R", groupValueSumMap.get("R").add(exportDataBean.getGroupR()));
            break;
          }
        case "S":
          {
            BigDecimal valueOfAttribute = groupComp.getByField(groupComp, attribute);
            exportDataBean.setGroupS(valueOfAttribute == null ? BigDecimal.ZERO : valueOfAttribute);
            groupValueSumMap.put("S", groupValueSumMap.get("S").add(exportDataBean.getGroupS()));
            break;
          }
      }
    } catch (IllegalArgumentException ex) {
      java.util.logging.Logger.getLogger(EnterPayrollSummaryView.class.getName())
          .log(Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(EnterPayrollSummaryView.class.getName())
          .log(Level.SEVERE, null, ex);
    } catch (NoSuchFieldException ex) {
      java.util.logging.Logger.getLogger(EnterPayrollSummaryView.class.getName())
          .log(Level.SEVERE, null, ex);
    }
  }
}
