package ca.bc.gov.health.hscis.view;

import static ca.bc.gov.health.hscis.dao.HscisAdminDao.CUSTOM_DATE_FORMAT;

import ca.bc.gov.health.hscis.exception.HscisException;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.application.FacesMessage.Severity;
import jakarta.faces.component.UIComponent;
import jakarta.faces.component.UIInput;
import jakarta.faces.context.FacesContext;
import java.io.Serializable;
import java.text.MessageFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

/** The Class BaseBean. */
public class BaseView implements Serializable {
  private static final long serialVersionUID = 1L;

  /** Instantiates a new base bean. */
  public BaseView() {
    // Nothing to init here
  }

  /**
   * Shortcut method to add an error FacesMessage
   *
   * @param msg String - The text of the message to add
   */
  protected void addErrorMessage(String msg) {
    addMessage(msg, FacesMessage.SEVERITY_ERROR);
  }

  /**
   * Shortcut method to add an error FacesMessage
   *
   * @param msg String - The text of the message to add
   * @param clientId String - The client identifier to associate the message with
   */
  protected void addErrorMessage(String msg, String clientId) {
    addMessage(msg, FacesMessage.SEVERITY_ERROR, clientId);
  }

  /**
   * Shortcut method to add an informational FacesMessage
   *
   * @param msg String - The text of the message to add
   */
  protected void addInfoMessage(String msg) {
    addMessage(msg, FacesMessage.SEVERITY_INFO);
  }

  /**
   * Shortcut method to add an informational FacesMessage
   *
   * @param msg String - The text of the message to add
   * @param clientId String - The client identifier to associate the message with
   */
  protected void addInfoMessage(String msg, String clientId) {
    addMessage(msg, FacesMessage.SEVERITY_INFO, clientId);
  }

  /**
   * Shortcut method to add a warning FacesMessage
   *
   * @param msg String - The text of the message to add
   */
  protected void addWarnMessage(String msg) {
    addMessage(msg, FacesMessage.SEVERITY_WARN);
  }

  /**
   * Shortcut method to add a warning FacesMessage
   *
   * @param msg String - The text of the message to add
   * @param clientId String - The client identifier to associate the message with
   */
  protected void addWarnMessage(String msg, String clientId) {
    addMessage(msg, FacesMessage.SEVERITY_WARN, clientId);
  }

  /**
   * Shortcut method to add a FacesMessage
   *
   * @param faceMsg FacesMessage - The message to add
   */
  protected void addMessage(FacesMessage faceMsg) {
    FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(true);
    FacesContext.getCurrentInstance().addMessage(null, faceMsg);
  }

  /**
   * Shortcut method to add a FacesMessage
   *
   * @param msg String - The text of the message to add
   * @param severity Severity - The FacesMessage.Severity level to add
   */
  private void addMessage(String msg, Severity severity) {
    addMessage(msg, severity, null);
  }

  /**
   * Shortcut method to add a FacesMessage
   *
   * @param msg String - The text of the message to add
   * @param severity Severity - The FacesMessage.Severity level to add
   * @param clientId String - The client identifier to associate the message with
   */
  private void addMessage(String msg, Severity severity, String clientId) {
    invalidateComponent(clientId);
    FacesContext.getCurrentInstance().addMessage(clientId, new FacesMessage(severity, msg, msg));
  }

  /**
   * Adds the message
   *
   * @param severity the severity
   * @param message the message
   * @param isFlash the is flash
   */
  protected void addMessage(Severity severity, String message, boolean isFlash) {
    FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(isFlash);
    FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(severity, message, null));
  }

  /**
   * Adds the message
   *
   * @param e the e
   */
  protected void addMessage(HscisException e) {
    addMessage(e, true);
  }

  /**
   * Adds the message
   *
   * @param e the e
   * @param isFlash the is flash
   */
  protected void addMessage(HscisException e, boolean isFlash) {
    addMessage(FacesMessage.SEVERITY_ERROR, formatMessage(e), isFlash);
  }

  /**
   * Invalidate UIComponent
   *
   * @param clientId String - The client identifier to set invalid
   */
  protected void invalidateComponent(String clientId) {
    if (clientId != null && !clientId.isBlank()) {
      UIComponent component =
          FacesContext.getCurrentInstance().getViewRoot().findComponent(clientId);
      if (component instanceof UIInput) {
        ((UIInput) component).setValid(false);
      }
    }
  }

  /**
   * Format message
   *
   * @param e the e
   * @return the string
   */
  private String formatMessage(HscisException e) {
    return MessageFormat.format("Fatal error: ref={0} {1}", e.getCorrelationId(), e.getMessage());
  }

  /**
   * Convert a string date value to the custom display format in HSCIS ("MMM-dd-yyyy")
   *
   * @param date
   * @return the formatted date string
   */
  public String convertDateToDisplay(String date) {
    String retDate = "";
    if (date != null) {
      retDate = date.trim();
      try {
        if (retDate.contains("-")) {
          retDate =
              LocalDate.parse(retDate, DateTimeFormatter.ISO_DATE)
                  .format(DateTimeFormatter.ofPattern(CUSTOM_DATE_FORMAT))
                  .toUpperCase();
        } else if (retDate.length() == 8) {
          retDate =
              LocalDate.parse(retDate, DateTimeFormatter.BASIC_ISO_DATE)
                  .format(DateTimeFormatter.ofPattern(CUSTOM_DATE_FORMAT))
                  .toUpperCase();
        }
      } catch (DateTimeParseException e) {
        retDate = "Invalid Date";
      }
    }
    return retDate;
  }

  public String convertTypeToText(String type) {
    if (type.trim().equalsIgnoreCase("F")) {
      return "Fatal";
    } else {
      return "Warning";
    }
  }

  private String truncateString(String string, int maxLength, boolean rtl) {
    if (string.length() > maxLength) {
      if (rtl == true) {
        /* Necessary when setting style="direction: rtl" for <p:selectManyMenu> */
        string = "..." + string.substring(0, maxLength - 4);
      } else {
        string = string.substring(0, maxLength - 4) + "...";
      }
    }
    return string;
  }

  /**
   * Truncate a string value to the provided maxLength
   *
   * @param string
   * @param maxLength
   * @return the truncated string
   */
  public String truncateString(String string, int maxLength) {
    return truncateString(string, maxLength, false);
  }

  /**
   * Truncate a string value to the provided maxLength; adjusted for direction: rtl
   *
   * @param string
   * @param maxLength
   * @return the truncated string; adjusted for direction: rtl
   */
  public String truncateStringRTL(String string, int maxLength) {
    return truncateString(string, maxLength, true);
  }
}
