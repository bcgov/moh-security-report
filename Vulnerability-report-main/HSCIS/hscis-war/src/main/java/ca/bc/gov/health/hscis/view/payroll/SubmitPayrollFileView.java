package ca.bc.gov.health.hscis.view.payroll;

import ca.bc.gov.health.hscis.dto.FileSubmission;
import ca.bc.gov.health.hscis.dto.FileSubmissionStatus;
import ca.bc.gov.health.hscis.dto.SubmissionReport;
import ca.bc.gov.health.hscis.exception.HscisException;
import ca.bc.gov.health.hscis.service.HscisFileSubmissionService;
import ca.bc.gov.health.hscis.view.BaseView;
import ca.bc.gov.health.security.UserPrincipal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@ViewScoped
@Named("SubmitPayrollFileView")
public class SubmitPayrollFileView extends BaseView {

  private static final long serialVersionUID = 1L;

  private static Logger logger = LoggerFactory.getLogger(SubmitPayrollFileView.class);

  @EJB private HscisFileSubmissionService sfdsService;
  @Inject private UserPrincipal user;

  private String selectedAccount;
  private Integer selectedYear;
  private String selectedQuarter;
  private List<FileSubmission> submissions = new ArrayList<>();
  private List<SubmissionReport> reports = new ArrayList<>();
  private List<SubmissionReport> selectedReports = new ArrayList<>();
  // TODO: Harcoded to 30 seconds for now. Should we add config?
  private Long refreshInterval = 30L * 1000L;

  private List<Integer> years = new ArrayList<>();

  @PostConstruct
  public void init() {
    // Init account
    // Initial value is first account
    selectedAccount = user.getMailboxes().stream().findFirst().map(m -> m.getName()).orElse(null);

    // Init years
    // 3 years in the future to 2 years in the past
    int curYear = LocalDate.now().getYear();
    for (int y = curYear + 3; y > curYear - 3; y--) {
      years.add(y);
    }
    selectedYear = curYear;

    // Init quarters
    selectedQuarter = getCurrentQuarter();
  }

  // TODO Move to service for reuse??
  public String getCurrentQuarter() {
    // Initial value is current quarter. Q1 is JAN-MAR, etc...
    int curMonth = LocalDate.now().getMonthValue();
    int curQuarter = (curMonth / 3) + 1;
    return String.format("Q%1d", curQuarter);
  }

  public List<SelectItem> getAccounts() {
    return user.getMailboxes().stream()
        .map(m -> new SelectItem(m.getName(), m.getDescription() + " (" + m.getName() + ")"))
        .collect(Collectors.toList());
  }

  public List<Integer> getYears() {
    return years;
  }

  public List<String> getQuarters() {
    return List.of("Q1", "Q2", "Q3", "Q4");
  }

  public boolean isUploadEnabled() {
    return (!user.getMailboxes().isEmpty());
  }

  public boolean isDownloadEnabled() {
    return selectedReports.size() > 0;
  }

  public boolean isDeleteEnabled() {
    return isDownloadEnabled();
  }

  /**
   * Upload handler. Called by fileUpload component when file has finished uploading.
   *
   * @param event
   */
  public void handleFileUpload(FileUploadEvent event) {
    try {
      logger.debug("file uploaded to webapp");

      // Just make sure only one file submitted
      if (submissions.size() > 0) {
        addErrorMessage("Cannot upload more than one file.");
      }

      // TODO: Do we want to show original or renamed filename in client?
      String sfdsName =
          sfdsService.buildPayrollFilename(selectedAccount, selectedYear, selectedQuarter);

      // Add file to submission list
      FileSubmission submission =
          new FileSubmission(
              selectedAccount,
              sfdsName,
              event.getFile().getSize(),
              event.getFile().getInputStream());
      submissions.add(submission);
    } catch (IOException e) {
      // TODO: better message
      FacesMessage msg =
          new FacesMessage(FacesMessage.SEVERITY_FATAL, "Fatal error in upload", e.getMessage());
      FacesContext.getCurrentInstance().addMessage(null, msg);
    }
  }

  /** Submit the file to SFDS. Called by completeUpload component after the file is uploaded. */
  public void submitFile() {
    if (!submissions.isEmpty()) {
      submitFile(submissions.get(0));
    }
  }

  /**
   * Send the file to the SFDS mailbox.
   *
   * @param submission File to submit
   * @return True is successful.
   */
  private boolean submitFile(FileSubmission submission) {
    try {
      logger.debug("Submitting to SFDS");
      sfdsService.submitFile(submission);
      submission.setStatus(FileSubmissionStatus.ACCEPTED);
    } catch (HscisException e) {
      submission.setStatus(FileSubmissionStatus.ERROR);
      // TODO: better message
      logger.error("Error in submitFile", e);
      FacesMessage msg =
          new FacesMessage(FacesMessage.SEVERITY_ERROR, "Fatal error in upload", e.getMessage());
      FacesContext.getCurrentInstance().addMessage(null, msg);
      return false;
    }
    return true;
  }

  /**
   * Returns a list of selected filenames
   *
   * @return
   */
  private List<String> getSelectedFileNames() {
    List<String> names =
        selectedReports.stream().map(r -> r.getFilename()).collect(Collectors.toList());
    return names;
  }

  /**
   * Download button action
   *
   * @return
   */
  public StreamedContent download() {
    List<String> selectedFileNames = getSelectedFileNames();
    switch (selectedFileNames.size()) {
      case 0:
        // Do nothing
        return null;
      case 1:
        // Dowload PDF
        return downloadFile(selectedFileNames.get(0));
      default:
        // Dowload Zip
        return downloadZip(selectedFileNames);
    }
  }

  /**
   * Download one file as PDF
   *
   * @param filename
   * @return
   */
  private StreamedContent downloadFile(String filename) {
    try {
      logger.debug("Downloading " + filename);
      byte[] filecontent = sfdsService.downloadFile(selectedAccount, filename);
      // TODO Encoding?
      DefaultStreamedContent streamContent =
          DefaultStreamedContent.builder().name(filename).contentType("application/pdf").stream(
                  () -> new ByteArrayInputStream(filecontent))
              .build();
      return streamContent;
    } catch (HscisException e) {
      // TODO: better message
      logger.error("Error in download", e);
      FacesMessage msg =
          new FacesMessage(
              FacesMessage.SEVERITY_ERROR, "Fatal error dowmloading " + filename, e.getMessage());
      FacesContext.getCurrentInstance().addMessage(null, msg);
      return null;
    }
  }

  /**
   * Download multiple files as PDF
   *
   * @param filename
   * @return
   */
  private StreamedContent downloadZip(List<String> filenames) {
    try {
      logger.debug("Downloading " + String.join(",", filenames));
      byte[] filecontent = sfdsService.downloadFiles(selectedAccount, filenames);
      // TODO Encoding?
      DefaultStreamedContent streamContent =
          DefaultStreamedContent.builder()
              .name("reports.zip")
              .contentType("application/zip")
              .stream(() -> new ByteArrayInputStream(filecontent))
              .build();
      return streamContent;
    } catch (HscisException e) {
      // TODO: better message
      logger.error("Error in download", e);
      FacesMessage msg =
          new FacesMessage(
              FacesMessage.SEVERITY_ERROR,
              "Fatal error dowmloading multiple files",
              e.getMessage());
      FacesContext.getCurrentInstance().addMessage(null, msg);
      return null;
    }
  }

  /** Delete button action */
  public void delete() {
    List<String> selectedFileNames = getSelectedFileNames();
    try {
      sfdsService.deleteFiles(selectedAccount, selectedFileNames);
      selectedReports.clear();
      refreshReportList();
    } catch (HscisException e) {
      addMessage(e);
    }
  }

  /** Refresh list Action */
  public void refreshReportList() {
    try {
      reports = sfdsService.listValidationReports(selectedAccount);
    } catch (HscisException e) {
      addMessage(e);
    }
  }

  public String getSelectedAccount() {
    return selectedAccount;
  }

  public void setSelectedAccount(String selectedAccount) {
    this.selectedAccount = selectedAccount;
  }

  public Integer getSelectedYear() {
    return selectedYear;
  }

  public void setSelectedYear(Integer selectedYear) {
    this.selectedYear = selectedYear;
  }

  public String getSelectedQuarter() {
    return selectedQuarter;
  }

  public void setSelectedQuarter(String selectedQuarter) {
    this.selectedQuarter = selectedQuarter;
  }

  public List<FileSubmission> getSubmissions() {
    return submissions;
  }

  public void setSubmissions(List<FileSubmission> submissions) {
    this.submissions = submissions;
  }

  public List<SubmissionReport> getReports() {
    return reports;
  }

  public void setReports(List<SubmissionReport> reports) {
    this.reports = reports;
  }

  public Long getRefreshInterval() {
    return refreshInterval;
  }

  public void setRefreshInterval(Long refreshInterval) {
    this.refreshInterval = refreshInterval;
  }

  public List<SubmissionReport> getSelectedReports() {
    return selectedReports;
  }

  public void setSelectedReports(List<SubmissionReport> reports) {
    this.selectedReports = reports;
  }
}
