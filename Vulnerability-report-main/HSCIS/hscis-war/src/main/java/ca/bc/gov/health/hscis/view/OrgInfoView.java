package ca.bc.gov.health.hscis.view;

import ca.bc.gov.health.hscis.entity.HcdMembership;
import ca.bc.gov.health.hscis.service.HscisOrgInfoService;
import ca.bc.gov.health.security.UserPrincipal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@ViewScoped
@Named("OrgInfoView")
public class OrgInfoView extends BaseView {

  private static final long serialVersionUID = 1L;

  private static Logger logger = LoggerFactory.getLogger(OrgInfoView.class);

  @EJB private HscisOrgInfoService orgInfoService;
  @Inject private UserPrincipal user;

  private HcdMembership corpMembership;
  private HcdMembership siteMembership;
  private List<HcdMembership> membershipsByCorpIds;
  private List<HcdMembership> membershipsBySiteIds;

  private Comparator<HcdMembership> compareBySortOrder;

  @PostConstruct
  public void init() {
    compareBySortOrder =
        (HcdMembership o1, HcdMembership o2) ->
            Long.compare(o1.getSiteEmployerNumber(), o2.getSiteEmployerNumber());
    membershipsBySiteIds = new ArrayList<>();
    membershipsByCorpIds = orgInfoService.listMemberships(user.getName());
    membershipsByCorpIds =
        membershipsByCorpIds.stream()
            .filter(distinctByKey(p -> p.getCorporateEmployerNumber()))
            .collect(Collectors.toList());
    Collections.sort(membershipsByCorpIds, compareBySortOrder);
  }

  public static <T> Predicate<T> distinctByKey(Function<? super T, ?> keyExtractor) {
    Map<Object, Boolean> seen = new ConcurrentHashMap<>();
    return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
  }

  public void updateCorpId() {
    // Create and list Site Employer dropdown in order by Site Employer Number
    membershipsBySiteIds =
        orgInfoService.listMembershipByCorpId(corpMembership.getCorporateEmployerNumber());
    Collections.sort(membershipsBySiteIds, compareBySortOrder);

    siteMembership = corpMembership;
  }

  public boolean isPrimaryContactSet(HcdMembership values) {
    return !(values.getContactName1() == null
        && values.getEmail1() == null
        && values.getAreaCode1() == null
        && values.getPhone1() == null);
  }

  public boolean isSecondaryContactSet(HcdMembership values) {
    return !(values.getContactName2() == null
        && values.getEmail2() == null
        && values.getAreaCode2() == null
        && values.getPhone2() == null);
  }

  public HcdMembership getCorpMembership() {
    return corpMembership;
  }

  public void setCorpMembership(HcdMembership corpMembership) {
    this.corpMembership = corpMembership;
  }

  public HcdMembership getSiteMembership() {
    return siteMembership;
  }

  public void setSiteMembership(HcdMembership siteMembership) {
    this.siteMembership = siteMembership;
  }

  public List<HcdMembership> getMembershipsByCorpIds() {
    return membershipsByCorpIds;
  }

  public void setMembershipsByCorpIds(List<HcdMembership> membershipsByCorpIds) {
    this.membershipsByCorpIds = membershipsByCorpIds;
  }

  public List<HcdMembership> getMembershipsBySiteIds() {
    return membershipsBySiteIds;
  }

  public void setMembershipsBySiteIds(List<HcdMembership> membershipsBySiteIds) {
    this.membershipsBySiteIds = membershipsBySiteIds;
  }
}
