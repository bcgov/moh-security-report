package ca.bc.gov.health.hscis.view.payroll;

import ca.bc.gov.health.hscis.entity.HcdFundingSources;
import ca.bc.gov.health.hscis.entity.HcdProjectedFunding;
import ca.bc.gov.health.hscis.service.HscisAdminService;
import ca.bc.gov.health.hscis.service.HscisFundingSourcesService;
import ca.bc.gov.health.hscis.view.ApplicationBean;
import ca.bc.gov.health.hscis.view.BaseView;
import ca.bc.gov.health.security.UserPrincipal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import org.primefaces.PrimeFaces;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@ViewScoped
@Named("EnterFundingSourcesView")
public class EnterFundingSourcesView extends BaseView {

  private static final long serialVersionUID = 1L;

  private static Logger logger = LoggerFactory.getLogger(EnterFundingSourcesView.class);

  @EJB private HscisFundingSourcesService fundingSourcesService;
  @EJB private HscisAdminService adminService;
  @Inject private ApplicationBean applicationBean;
  @Inject private UserPrincipal user;

  private List<HcdProjectedFunding> fundingSourceRows;
  private HcdProjectedFunding selectedFundingSourceRow = new HcdProjectedFunding();
  private HcdProjectedFunding newFundingSourceRow = new HcdProjectedFunding();
  private Boolean totalAmountFlag = false;
  private HcdFundingSources fundingSourceCode;
  private Long hscisId;
  private Long corpId;
  private Long siteId;
  private List<Long> corpIdList;
  private List<Long> siteIdList;
  private BigDecimal projectedAmount = BigDecimal.ZERO;
  private BigDecimal projectedAmountTotal = BigDecimal.ZERO;
  private String fiscalYear;
  private List<String> fiscalYearList;

  @PostConstruct
  public void init() {
    corpIdList = fundingSourcesService.listCorpIds(user.getName());
    applicationBean.initFundingSourceCodes();
    refreshFiscalYearList();
  }

  public void createEmptyFundingSourceRow() {
    newFundingSourceRow = new HcdProjectedFunding();
  }

  public void refreshFiscalYearList() {
    fiscalYearList = new ArrayList<>();
    int year = Calendar.getInstance().get(Calendar.YEAR);
    int month = Calendar.getInstance().get(Calendar.MONTH);
    // Calculates current fiscal year (fiscal year runs April 1 - March 31)
    if (month >= 3) {
      fiscalYear = year + "/" + (year + 1);
    } else {
      fiscalYear = (year - 1) + "/" + year;
    }
    String fiscalYearPrevious2 = (year - 2) + "/" + (year - 1);
    String fiscalYearPrevious1 = (year - 1) + "/" + year;
    String fiscalYearFollowing = (year + 1) + "/" + (year + 2);

    fiscalYearList.add(fiscalYearPrevious2);
    fiscalYearList.add(fiscalYearPrevious1);
    fiscalYearList.add(fiscalYear);
    fiscalYearList.add(fiscalYearFollowing);
  }

  public void refreshFundingSourcesList() {
    hscisId = fundingSourcesService.refreshHscisId(corpId, siteId);
    fundingSourceRows = fundingSourcesService.refreshFundingSourceRows(hscisId, fiscalYear);
    if (!fundingSourceRows.isEmpty()) {
      totalAmountFlag = true;
      refreshTotalProjectedAmount();
    } else {
      totalAmountFlag = false;
    }
  }

  public void refreshTotalProjectedAmount() {
    projectedAmountTotal = BigDecimal.ZERO;
    for (HcdProjectedFunding projectedFunding : fundingSourceRows) {
      projectedAmountTotal = projectedAmountTotal.add(projectedFunding.getProjectedAmount());
    }
  }

  public void updateFundingSourceRow() {
    selectedFundingSourceRow.setLastModifiedOn(getDate());
    FacesMessage message = fundingSourcesService.updateFundingSource(selectedFundingSourceRow);
    addMessage(message);
    PrimeFaces.current().executeScript("PF('cdUpdateFundingSource').hide();");
    PrimeFaces.current().ajax().update("enterFundingSourcesTableForm:messages");
    refreshFundingSourcesList();
  }

  public void deleteFundingSource() {
    FacesMessage message = fundingSourcesService.deleteFundingSource(selectedFundingSourceRow);
    addMessage(message);
    refreshFundingSourcesList();
  }

  public void createFundingSourceRow() {
    newFundingSourceRow.setHealthOrgHscisId(hscisId);
    newFundingSourceRow.setFundingSource(fundingSourceCode);
    newFundingSourceRow.setProjectedAmount(projectedAmount);
    newFundingSourceRow.setFiscalYear(fiscalYear);
    newFundingSourceRow.setCreatedOn(getDate());
    newFundingSourceRow.setLastModifiedOn(getDate());
    newFundingSourceRow.setCreatedBy(user.getName());
    newFundingSourceRow.setLastModifiedBy(user.getName());
    FacesMessage message = fundingSourcesService.createFundingSource(newFundingSourceRow);
    addMessage(message);
    PrimeFaces.current().executeScript("PF('cdCreateFundingSource').hide();");
    PrimeFaces.current().ajax().update("enterFundingSourcesTableForm:messages");
    refreshFundingSourcesList();
  }

  public void siteIdDynamic() {
    siteIdList = adminService.listSiteIdByCorpId(corpId);
    siteId = null;
    fundingSourceRows = null;
  }

  public Date getDate() {
    Date now = new Date();
    return now;
  }

  public Long getHscisId() {
    return hscisId;
  }

  public void setHscisId(Long hscisId) {
    this.hscisId = hscisId;
  }

  public Long getCorpId() {
    return corpId;
  }

  public void setCorpId(Long corpId) {
    this.corpId = corpId;
  }

  public Long getSiteId() {
    return siteId;
  }

  public void setSiteId(Long siteId) {
    this.siteId = siteId;
  }

  public BigDecimal getProjectedAmount() {
    return projectedAmount;
  }

  public void setProjectedAmount(BigDecimal projectedAmount) {
    this.projectedAmount = projectedAmount;
  }

  public BigDecimal getProjectedAmountTotal() {
    return projectedAmountTotal;
  }

  public void setProjectedAmountTotal(BigDecimal projectedAmountTotal) {
    this.projectedAmountTotal = projectedAmountTotal;
  }

  public List<Long> getCorpIdList() {
    return corpIdList;
  }

  public void setCorpIdList(List<Long> corpIdList) {
    this.corpIdList = corpIdList;
  }

  public List<Long> getSiteIdList() {
    return siteIdList;
  }

  public void setSiteIdList(List<Long> siteIdList) {
    this.siteIdList = siteIdList;
  }

  public String getFiscalYear() {
    return fiscalYear;
  }

  public void setFiscalYear(String fiscalYear) {
    this.fiscalYear = fiscalYear;
  }

  public List<String> getFiscalYearList() {
    return fiscalYearList;
  }

  public void setFiscalYearList(List<String> fiscalYearList) {
    this.fiscalYearList = fiscalYearList;
  }

  public List<HcdProjectedFunding> getFundingSourceRows() {
    return fundingSourceRows;
  }

  public void setFundingSourceRows(List<HcdProjectedFunding> fundingSourceRows) {
    this.fundingSourceRows = fundingSourceRows;
  }

  public HcdProjectedFunding getSelectedFundingSourceRow() {
    return selectedFundingSourceRow;
  }

  public void setSelectedFundingSourceRow(HcdProjectedFunding selectedFundingSourceRow) {
    this.selectedFundingSourceRow = selectedFundingSourceRow;
  }

  public HcdFundingSources getFundingSourceCode() {
    return fundingSourceCode;
  }

  public void setFundingSourceCode(HcdFundingSources fundingSourceCode) {
    this.fundingSourceCode = fundingSourceCode;
  }

  public Boolean getTotalAmountFlag() {
    return totalAmountFlag;
  }

  public void setTotalAmountFlag(Boolean totalAmountFlag) {
    this.totalAmountFlag = totalAmountFlag;
  }
}
