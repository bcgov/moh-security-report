package ca.bc.gov.health.hscis.validators;

import ca.bc.gov.health.hscis.view.payroll.EnterPayrollSummaryView;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.component.UIComponent;
import jakarta.faces.component.UIInput;
import jakarta.faces.context.FacesContext;
import jakarta.faces.validator.FacesValidator;
import jakarta.faces.validator.Validator;
import jakarta.faces.validator.ValidatorException;
import jakarta.inject.Inject;
import java.math.BigDecimal;
import java.util.Arrays;

/**
 * FacesValidator for validating Wage Rate values
 *
 * @author CGI Information Management Consultants Inc.
 */
@FacesValidator(value = "WageRateValidator", managed = true)
public class WageRateValidator implements Validator {

  private static final String DESIGNATED_GROUP_CODE = "designatedGroupCode";
  private static final String[] DESIGNATED_GROUP_UNDER_60 = {"C", "F", "B", "S"};
  private static final String[] DESIGNATED_GROUP_OVER_100 = {"D", "E"};
  private static final double MIN_RATE = 6;

  @Inject EnterPayrollSummaryView enterPayrollSummaryView;

  /**
   * Validate the employee's wage rate. The following rules are validated:
   * <li>The minimum wage rate can't less than $6/hour
   * <li>If wage rate < 14, warning "Possible insufficient Wage Rate"
   * <li>If wage rate > 60 and Des. group is C, F, B or S, warning "Possible excessive Wage Rate for
   *     Des. Group X"
   * <li>If wage rate > 100 and Des. group is not D and E, warning "Possible excessive Wage Rate for
   *     Des. Group X"
   * <li>If wage rate > 200, warning "Possible excessive Wage Rate for Des. Group X"
   *
   * @see jakarta.faces.validator.Validator#validate(jakarta.faces.context.FacesContext,
   *     jakarta.faces.component.UIComponent, java.lang.Object)
   * @param context
   * @param component
   * @param value
   */
  @Override
  public void validate(FacesContext context, UIComponent component, Object value) {

    String errorMsg = null;
    String warningMsg = null;
    String saveMsg = null;
    String event = null;
    String designatedGroupCode = (String) component.getAttributes().get(DESIGNATED_GROUP_CODE);
    double wageRate = ((BigDecimal) value).doubleValue();

    // Skip validations triggered by EnterPayrollSummaryView.wageRateValidWarnChangeListener()
    event =
        context.getExternalContext().getRequestParameterMap().get("jakarta.faces.partial.event");
    if (event == null || !"change".equals(event)) {
      if (wageRate < MIN_RATE) {
        errorMsg = String.format("Wage Rate: Value is less than allowable min of $%.2f", MIN_RATE);
      }

      if (errorMsg != null) {
        throw new ValidatorException(
            new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMsg, errorMsg));
      }

      if (wageRate < 14) {
        warningMsg = "Possible insufficient Wage Rate";
      } else if (wageRate > 200) {
        warningMsg = "Possible excessive Wage Rate for Des. Group " + designatedGroupCode;
      } else if (designatedGroupCode != null) {
        if (wageRate > 60
            && Arrays.asList(DESIGNATED_GROUP_UNDER_60).contains(designatedGroupCode)) {
          warningMsg = "Possible excessive Wage Rate for Des. Group " + designatedGroupCode;
        } else if (wageRate > 100
            && !Arrays.asList(DESIGNATED_GROUP_OVER_100).contains(designatedGroupCode)) {
          warningMsg = "Possible excessive Wage Rate for Des. Group " + designatedGroupCode;
        }
      }

      if (warningMsg != null) {
        if (!enterPayrollSummaryView.isWageRateValidWarn()) {
          // Invalidate component only on initial warning to allow for user override
          ((UIInput) component).setValid(false);
          enterPayrollSummaryView.setWageRateValidWarn(true);
        }

        // Prevent duplicate Click <button> to save messages
        if (!context.getMessages("saveMsg").hasNext()) {
          if (enterPayrollSummaryView.getPopupEmpMode()
              == EnterPayrollSummaryView.PopupMode.CREATE) {
            saveMsg = "<i>Click Create to save</i>";
          } else if (enterPayrollSummaryView.getPopupEmpMode()
              == EnterPayrollSummaryView.PopupMode.EDIT) {
            saveMsg = "<i>Click Update to save</i>";
          }
          context.addMessage(
              "saveMsg", new FacesMessage(FacesMessage.SEVERITY_WARN, saveMsg, saveMsg));
        }

        context.addMessage(
            component.getClientId(),
            new FacesMessage(FacesMessage.SEVERITY_WARN, warningMsg, warningMsg));
      }
    }
  }
}
