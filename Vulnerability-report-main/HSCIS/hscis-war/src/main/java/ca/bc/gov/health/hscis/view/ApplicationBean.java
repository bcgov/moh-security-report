package ca.bc.gov.health.hscis.view;

import ca.bc.gov.health.hscis.entity.HcdDesignatedGroup;
import ca.bc.gov.health.hscis.entity.HcdFundingSources;
import ca.bc.gov.health.hscis.entity.HcdHealthAuthority;
import ca.bc.gov.health.hscis.entity.HcdMembershipType;
import ca.bc.gov.health.hscis.entity.HcdOrganizationStatus;
import ca.bc.gov.health.hscis.entity.HcdServiceType;
import ca.bc.gov.health.hscis.service.HscisAdminService;
import ca.bc.gov.health.hscis.service.HscisFundingSourcesService;
import jakarta.annotation.PostConstruct;
import jakarta.annotation.Resource;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Properties;

/**
 * Application scoped backing bean for objects loaded at application start
 *
 * @author CGI Information Management Consultants Inc.
 */
@ApplicationScoped
@Named("ApplicationBean")
public class ApplicationBean implements Serializable {

  private static final long serialVersionUID = 1L;

  @Inject private HscisAdminService adminService;
  @Inject private HscisFundingSourcesService fundingSourcesService;

  @Resource(lookup = "java:app/hscis/sfds_properties")
  private Properties sfdsProperties;

  private List<HcdHealthAuthority> healthAuthorityCodes;
  private List<HcdDesignatedGroup> designatedGroups;
  private List<HcdMembershipType> membershipTypes;
  private List<HcdOrganizationStatus> organizationStatusCode;
  private List<HcdServiceType> serviceTypeCodes;
  private List<HcdFundingSources> fundingSourceCodes;

  /** Initialize ApplicationBean */
  @PostConstruct
  public void init() {
    initHealthAuthorityCodes();
    initDesignatedGroups();
    initMembershipTypes();
    initOrganizationStatusCodes();
    initServiceTypeCodes();
    initFundingSourceCodes();
  }

  /** Initialize health authority codes droplist */
  public void initHealthAuthorityCodes() {
    healthAuthorityCodes = adminService.listHealthAuthorityCodes();
    Comparator<HcdHealthAuthority> compareBySortOrder =
        (HcdHealthAuthority o1, HcdHealthAuthority o2) ->
            o1.getHealthAuthorityNumber().compareTo(o2.getHealthAuthorityNumber());
    Collections.sort(healthAuthorityCodes, compareBySortOrder);
  }

  /** @return the gethealthAuthorityCodes */
  public List<HcdHealthAuthority> getHealthAuthorityCodes() {
    return healthAuthorityCodes;
  }

  /** Initialize designated groups droplist */
  public void initDesignatedGroups() {
    designatedGroups = adminService.listDesignatedGroups();
    Comparator<HcdDesignatedGroup> compareBySortOrder =
        (HcdDesignatedGroup o1, HcdDesignatedGroup o2) ->
            o1.getDesignatedGroupCode().compareToIgnoreCase(o2.getDesignatedGroupCode());
    Collections.sort(designatedGroups, compareBySortOrder);
  }

  /** @return the getDesignatedGroups */
  public List<HcdDesignatedGroup> getDesignatedGroups() {
    return designatedGroups;
  }

  /** Initialize membership types droplist */
  public void initMembershipTypes() {
    membershipTypes = adminService.listMembershipTypes();
    Comparator<HcdMembershipType> compareBySortOrder =
        (HcdMembershipType o1, HcdMembershipType o2) ->
            o1.getMemberTypeCode().compareToIgnoreCase(o2.getMemberTypeCode());
    Collections.sort(membershipTypes, compareBySortOrder);
  }

  /** @return the getMembershipTypes */
  public List<HcdMembershipType> getMembershipTypes() {
    return membershipTypes;
  }

  /** Initialize organization status codes droplist */
  public void initOrganizationStatusCodes() {
    organizationStatusCode = adminService.listOrganizationStatusCodes();
    Comparator<HcdOrganizationStatus> compareBySortOrder =
        (HcdOrganizationStatus o1, HcdOrganizationStatus o2) ->
            o1.getOrganizationStatusCode().compareToIgnoreCase(o2.getOrganizationStatusCode());
    Collections.sort(organizationStatusCode, compareBySortOrder);
  }

  /** @return the getOrganizationStatusCodes values */
  public List<HcdOrganizationStatus> getOrganizationStatusCodes() {
    return organizationStatusCode;
  }

  /** Initialize service type codes droplist */
  public void initServiceTypeCodes() {
    serviceTypeCodes = adminService.listServiceTypeCodes();
    Comparator<HcdServiceType> compareBySortOrder =
        (HcdServiceType o1, HcdServiceType o2) -> o1.getCode().compareToIgnoreCase(o2.getCode());
    Collections.sort(serviceTypeCodes, compareBySortOrder);
  }

  /** @return the getServiceTypeCodes values */
  public List<HcdServiceType> getServiceTypeCodes() {
    return serviceTypeCodes;
  }

  /** Initialize funding source codes droplist */
  public void initFundingSourceCodes() {
    fundingSourceCodes = fundingSourcesService.listFundingSourceCodes();
    Comparator<HcdFundingSources> compareBySortOrder =
        (HcdFundingSources o1, HcdFundingSources o2) ->
            o1.getFundingSourceCode().compareToIgnoreCase(o2.getFundingSourceCode());
    Collections.sort(fundingSourceCodes, compareBySortOrder);
  }

  /** @return the getFundingSourceCodes values */
  public List<HcdFundingSources> getFundingSourceCodes() {
    return fundingSourceCodes;
  }

  /** @return the getSfdsProperties values */
  public Properties getSfdsProperties() {
    return sfdsProperties;
  }
}
