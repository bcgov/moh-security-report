package ca.bc.gov.health.hscis.validators;

import jakarta.faces.application.FacesMessage;
import jakarta.faces.component.UIComponent;
import jakarta.faces.context.FacesContext;
import jakarta.faces.validator.FacesValidator;
import jakarta.faces.validator.Validator;
import jakarta.faces.validator.ValidatorException;
import java.util.Arrays;

/**
 * FacesValidator for validating Union Code values
 *
 * @author CGI Information Management Consultants Inc.
 */
@FacesValidator("UnionCodeValidator")
public class UnionCodeValidator implements Validator {

  private static final String DESIGNATED_GROUP_CODE = "designatedGroupCode";
  private static final String[] DESIGNATED_GROUP_WITH_UNION = {"A", "C", "F", "N", "P", "R"};
  private static final String[] DESIGNATED_GROUP_WITHOUT_UNION = {"B", "E"};
  private static final String NON_UNION_CODE = "N1";

  /**
   * Validate the employee's union. The following rules are validated:
   * <li>If Designated Group is B or E, union must be N1
   * <li>If Designated Group is A, C, F, N, P, or R, union cannot be N1
   *
   * @see jakarta.faces.validator.Validator#validate(jakarta.faces.context.FacesContext,
   *     jakarta.faces.component.UIComponent, java.lang.Object)
   * @param context
   * @param component
   * @param value
   */
  @Override
  public void validate(FacesContext context, UIComponent component, Object value) {

    String errorMsg = null;
    String designatedGroupCode = (String) component.getAttributes().get(DESIGNATED_GROUP_CODE);

    if (designatedGroupCode != null) {
      if (Arrays.asList(DESIGNATED_GROUP_WITHOUT_UNION).contains(designatedGroupCode)) {
        if (!NON_UNION_CODE.equalsIgnoreCase((String) value)) {
          errorMsg = "If Designated Group is B or E, union must be N1";
        }
      } else if (Arrays.asList(DESIGNATED_GROUP_WITH_UNION).contains(designatedGroupCode)
          && NON_UNION_CODE.equalsIgnoreCase((String) value)) {
        errorMsg = "If Des. Group is A, C, F, N, P, or R, union cannot be N1";
      }

      if (errorMsg != null) {
        throw new ValidatorException(
            new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMsg, errorMsg));
      }
    }
  }
}
