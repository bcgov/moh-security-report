package ca.bc.gov.health.hscis.view.payroll;

import ca.bc.gov.health.hscis.dto.PayrollSummary;
import ca.bc.gov.health.hscis.dto.PayrollSummaryEmployee;
import ca.bc.gov.health.hscis.dto.PayrollSummaryGroupComp;
import ca.bc.gov.health.hscis.dto.PayrollSummaryStatus;
import ca.bc.gov.health.hscis.entity.HcdClassification;
import ca.bc.gov.health.hscis.entity.HcdDesignatedGroup;
import ca.bc.gov.health.hscis.entity.HcdGender;
import ca.bc.gov.health.hscis.entity.HcdJobStatus;
import ca.bc.gov.health.hscis.entity.HcdMembership;
import ca.bc.gov.health.hscis.entity.HcdOrganizationStatus;
import ca.bc.gov.health.hscis.entity.HcdTerminationCode;
import ca.bc.gov.health.hscis.entity.HcdUnion;
import ca.bc.gov.health.hscis.entity.PayrollSummaryPK;
import ca.bc.gov.health.hscis.exception.HscisException;
import ca.bc.gov.health.hscis.service.HscisAdminService;
import ca.bc.gov.health.hscis.service.HscisPayrollSummaryService;
import ca.bc.gov.health.hscis.view.BaseView;
import ca.bc.gov.health.security.UserPrincipal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.component.UIComponent;
import jakarta.faces.context.FacesContext;
import jakarta.faces.event.ComponentSystemEvent;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.primefaces.PrimeFaces;
import org.primefaces.component.datatable.DataTable;
import org.primefaces.component.datepicker.DatePicker;
import org.primefaces.component.selectonemenu.SelectOneMenu;
import org.primefaces.event.SelectEvent;
import org.primefaces.model.SortMeta;
import org.primefaces.model.SortOrder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@ViewScoped
@Named("EnterPayrollSummaryView")
public class EnterPayrollSummaryView extends BaseView {

  private static final long serialVersionUID = 1L;

  private static Logger logger = LoggerFactory.getLogger(EnterPayrollSummaryView.class);

  @EJB private HscisPayrollSummaryService payrollSummaryService;
  @EJB private HscisAdminService adminService;
  @Inject private UserPrincipal user;

  private boolean empSearched = false;
  private boolean jobTitleDisabled = false;

  private Map<String, BigDecimal> groupValueSumMap = new HashMap<>();

  private boolean dateOfBirthValidWarn = false;
  private boolean wageRateValidWarn = false;

  // List of summaries in the summary list
  private List<PayrollSummary> summaries = new ArrayList<>();

  // Summary being edited/created
  private PayrollSummary summary;
  private PayrollSummaryGroupComp selectedGroup = new PayrollSummaryGroupComp();
  private PayrollSummaryEmployee selectedEmployee = new PayrollSummaryEmployee();
  private String employeeNumber = "";

  // List of available memberships for user used in selection box
  private List<HcdMembership> memberships = new ArrayList<>();

  // List of available designated groups for selection box
  private List<HcdDesignatedGroup> designatedGroups = new ArrayList<>();

  // List of available union codes for selection box
  private List<HcdUnion> unionCodes = new ArrayList<>();

  // List of available genders for selection box
  private List<HcdGender> genders = new ArrayList<>();

  // List of available genders for selection box
  private List<HcdClassification> classCodes = new ArrayList<>();

  // List of available termination codes for selection box
  private List<HcdTerminationCode> terminationCodes = new ArrayList<>();

  // List of available increments for selection box
  private List<String> increments = new ArrayList<>();

  // List of available job status for selection box
  private List<HcdJobStatus> jobStatus = new ArrayList<>();

  private List<DesignatedGroupExportDataBean> exportOverTimeList = new ArrayList<>();

  private List<DesignatedGroupExportDataBean> exportLeaveList = new ArrayList<>();

  private List<DesignatedGroupExportDataBean> exportAllowanceList = new ArrayList<>();

  private List<DesignatedGroupExportDataBean> exportPayList = new ArrayList<>();

  private String submitSummaryValidationResult = "";

  // Main page mode
  public enum PageMode {
    LIST,
    CREATESUMMARY,
    EDIT,
    READONLY,
    EXPORT
  };

  // TODO: Refactor this so can be used by other forms
  public enum PopupMode {
    CREATE,
    EDIT,
    READONLY
  };

  // Initial mode id LIST
  private PageMode pageMode = PageMode.LIST;
  private PopupMode popupEmpMode = PopupMode.READONLY;
  private PopupMode popupGrpMode = PopupMode.READONLY;

  @PostConstruct
  public void init() {
    try {
      // Preloads data for the logged on user
      summaries = payrollSummaryService.listPayrollSummaries(user.getName());
      memberships = payrollSummaryService.listMemberships(user.getName());
      designatedGroups = adminService.refreshDesignatedGroupsList();
      unionCodes = adminService.refreshUnionsList();
      genders = adminService.refreshGenderList();
      classCodes = adminService.refreshClassificationCodesList();
      terminationCodes = adminService.refreshTerminationCodesList();
      increments = payrollSummaryService.listIncrements();
      jobStatus = adminService.refreshJobStatusList();

      groupValueSumMap.put("A", BigDecimal.ZERO);
      groupValueSumMap.put("B", BigDecimal.ZERO);
      groupValueSumMap.put("C", BigDecimal.ZERO);
      groupValueSumMap.put("D", BigDecimal.ZERO);
      groupValueSumMap.put("E", BigDecimal.ZERO);
      groupValueSumMap.put("F", BigDecimal.ZERO);
      groupValueSumMap.put("N", BigDecimal.ZERO);
      groupValueSumMap.put("P", BigDecimal.ZERO);
      groupValueSumMap.put("R", BigDecimal.ZERO);
      groupValueSumMap.put("S", BigDecimal.ZERO);
      groupValueSumMap.put("total", BigDecimal.ZERO);
    } catch (HscisException e) {
      addMessage(e);
    }
  }

  /**
   * Returns a list of corpId for the corporateID select
   *
   * @return
   */
  public List<Long> getCorpIds() {
    return memberships.stream()
        .map(m -> m.getCorporateEmployerNumber())
        .distinct()
        .sorted()
        .collect(Collectors.toList());
  }

  /**
   * Returns a list of corpId for the siteID select
   *
   * @return
   */
  public List<Long> getSiteIds() {
    return memberships.stream()
        .filter(m -> (m.getCorporateEmployerNumber().equals(summary.getEmployerID())))
        .map(m -> m.getSiteEmployerNumber())
        .distinct()
        .sorted()
        .collect(Collectors.toList());
  }

  public void onPayrollSummarySelect(SelectEvent<PayrollSummary> event) {
    summary = event.getObject();
    pageMode = PageMode.EDIT;
    if (summary.getStatus() == PayrollSummaryStatus.COMPLETED) {
      pageMode = PageMode.READONLY;
    }
  }

  /**
   * Validate the period (from - to). The following rules are validated: <br>
   * <li>To Date must be after From date
   * <li>To Date must be before or equal current date
   * <li>From Date must be within 22 days of January 1
   * <li>To Date must be within 22 days of June 30 or December 31
   * <li>Period must not already exists (in progress or completed) <br>
   *     <b>Rules for new members:</b>
   * <li>From Date can be after 22 days before January 1 (current year)
   * <li>From Date cannot be before 22 days before January 1
   *
   * @param event
   */
  public void validatePeriod(ComponentSystemEvent event) {
    UIComponent components = event.getComponent();

    // get From Date
    DatePicker fromDateInput = (DatePicker) components.findComponent("reportingFrom");
    LocalDate fromDate = (LocalDate) fromDateInput.getLocalValue();

    // get To Date
    DatePicker toDateInput = (DatePicker) components.findComponent("reportingTo");
    LocalDate toDate = (LocalDate) toDateInput.getLocalValue();

    // get corpId
    SelectOneMenu corpIdInput = (SelectOneMenu) components.findComponent("corporateID");
    Long corpId = (Long) corpIdInput.getLocalValue();

    // get siteId
    SelectOneMenu siteIdInput = (SelectOneMenu) components.findComponent("siteID");
    Long siteId = (Long) siteIdInput.getLocalValue();

    // Let required="true" do its job.
    if (corpId == null || siteId == null || fromDate == null || toDate == null) {
      return;
    }

    List<String> errors = payrollSummaryService.validatePeriod(corpId, siteId, fromDate, toDate);

    // List all validation errors
    if (errors != null && errors.size() > 0) {
      String clientId = "";
      for (String error : errors) {
        summary = null;
        if (error.startsWith("Reporting To")) {
          clientId = "entryPayrollTableForm:reportingTo";
        } else if (error.startsWith("Reporting From")) {
          clientId = "entryPayrollTableForm:reportingFrom";
        } else if (error.equals("A payroll summary already exists for this period")) {
          summary =
              payrollSummaryService.loadSummary(
                  new PayrollSummaryPK(corpId, siteId, fromDate, toDate));
          if (summary.getStatus() == PayrollSummaryStatus.COMPLETED) {
            pageMode = PageMode.READONLY;
          }
        } else {
          invalidateComponent("entryPayrollTableForm:reportingTo");
          invalidateComponent("entryPayrollTableForm:reportingFrom");
        }
        if (summary != null) {
          // Exact summary match found on corpId, siteId, fromDate, toDate
          addWarnMessage(error);
        } else {
          summary = new PayrollSummary();
          addErrorMessage(error, clientId);
        }
      }
    }
  }

  /**
   * Returns the selected membership according to the selectedCorpId and selectedSiteId
   *
   * @return
   */
  private Optional<HcdMembership> getSelectedMembership() {
    return memberships.stream()
        .filter(
            m ->
                (m.getCorporateEmployerNumber().equals(summary.getEmployerID())
                    && m.getSiteEmployerNumber().equals(summary.getSiteID())))
        .findFirst();
  }

  /**
   * Returns the selected membership legal name for the corpName output
   *
   * @return
   */
  public String getCorpName() {
    return getSelectedMembership().map(m -> m.getLegalName()).orElse(null);
  }

  /**
   * Returns the selected membership operating name for the siteName output
   *
   * @return
   */
  public String getSiteName() {
    return getSelectedMembership().map(m -> m.getOperatingName()).orElse(null);
  }

  /**
   * Returns the selected membership org status for the orgStatus output
   *
   * @return
   */
  public String getOrgStatus() {
    HcdOrganizationStatus orgStatus =
        getSelectedMembership().map(m -> m.getOrganizationStatus()).orElse(null);
    // orgStatus can be null
    if (orgStatus != null) {
      return orgStatus.getDescription();
    }
    return null;
  }

  public boolean isExportEnabled() {
    if (summary != null) {
      return (summary.getEmployeeSummaries().size() + summary.getGroupSummaries().size() >= 1);
    }
    return true;
  }

  // Payroll submission is enabled in Edit Mode only when at least one Group or Employee is entered
  // and it has not been completed.
  public boolean isSubmitEnabled() {
    if (summary != null) {
      if (summary.getStatus() == PayrollSummaryStatus.COMPLETED) {
        return false;
      }

      return (summary.getEmployeeSummaries().size() + summary.getGroupSummaries().size() >= 1);
    }
    return true;
  }

  /** Create button action. */
  public void createSummary() {
    pageMode = PageMode.CREATESUMMARY;
    // init new payroll summary
    summary = new PayrollSummary();
    // clear inputs
    SelectOneMenu corpIdInput =
        (SelectOneMenu)
            FacesContext.getCurrentInstance()
                .getViewRoot()
                .findComponent("entryPayrollTableForm:corporateID");
    corpIdInput.setValue(null);
    SelectOneMenu siteIdInput =
        (SelectOneMenu)
            FacesContext.getCurrentInstance()
                .getViewRoot()
                .findComponent("entryPayrollTableForm:siteID");
    siteIdInput.setValue(null);
    DatePicker fromDateInput =
        (DatePicker)
            FacesContext.getCurrentInstance()
                .getViewRoot()
                .findComponent("entryPayrollTableForm:reportingFrom");
    fromDateInput.setValue(null);
    DatePicker toDateInput =
        (DatePicker)
            FacesContext.getCurrentInstance()
                .getViewRoot()
                .findComponent("entryPayrollTableForm:reportingTo");
    toDateInput.setValue(null);
  }

  /** Validate button action. */
  public void validateSummary() {
    if (pageMode == PageMode.CREATESUMMARY) {
      pageMode = PageMode.EDIT;
    }
  }

  /** Opens the Designated group popup in CREATE mode. */
  public void openDesGroup() {
    PrimeFaces.current().resetInputs("editDesGroupDialogForm");
    SelectOneMenu designatedGroupInput =
        (SelectOneMenu)
            FacesContext.getCurrentInstance()
                .getViewRoot()
                .findComponent("editDesGroupDialogForm:desgroup");
    designatedGroupInput.setValue(null);
    popupGrpMode = PopupMode.CREATE;
    selectedGroup = new PayrollSummaryGroupComp();
    selectedGroup.setDesignatedGroup(new HcdDesignatedGroup());
    selectedGroup.setLastModifiedBy(user.getName());
    selectedGroup.setSummary(summary);

    PrimeFaces.current().executeScript("PF('createDesGroupDialog').show();");
  }

  /** Opens the Designated group popup in EDIT mode. */
  public void editDesGroup(SelectEvent<PayrollSummaryGroupComp> event) {
    PrimeFaces.current().resetInputs("editDesGroupDialogForm");
    popupGrpMode = PopupMode.EDIT;
    if (summary.getStatus() == PayrollSummaryStatus.COMPLETED) {
      popupGrpMode = PopupMode.READONLY;
    }
    selectedGroup = event.getObject();
    PrimeFaces.current().executeScript("PF('createDesGroupDialog').show();");
  }

  public String getDesGroupPopupTitle() {
    if (popupGrpMode == PopupMode.READONLY) {
      return "Designated Group Data";
    }
    if (popupGrpMode == PopupMode.EDIT) {
      return "Update Designated Group Data";
    }
    return "Create Designated Group Data";
  }

  /** Creates a designated group and closes the popup */
  public void createDesGroup() {
    List<PayrollSummaryGroupComp> groups = summary.getGroupSummaries();
    if (groups.stream()
        .filter(
            o ->
                o.getDesignatedGroup()
                    .getDesignatedGroupCode()
                    .equals(selectedGroup.getDesignatedGroup().getDesignatedGroupCode()))
        .findFirst()
        .isPresent()) {
      HcdDesignatedGroup desGroup =
          designatedGroups.stream()
              .filter(
                  dG ->
                      dG.getDesignatedGroupCode()
                          .equals(selectedGroup.getDesignatedGroup().getDesignatedGroupCode()))
              .findAny()
              .orElse(null);
      if (desGroup != null) {
        addErrorMessage(
            "Duplicate Entry for Designated Group: " + desGroup.getDescription(), "selectedGroup");
      }
      return;
    }

    try {
      // create a designated group
      payrollSummaryService.addDesignatedGroup(summary, selectedGroup);

      // reload the payroll summary
      reloadPayrollSummary();

      PrimeFaces.current().executeScript("PF('createDesGroupDialog').hide();");
    } catch (HscisException e) {
      addMessage(new HscisException("Fatal error saving data", e));
    }
  }

  /** Reload payroll summary */
  private PayrollSummary reloadPayrollSummary() {
    // get the payroll summary from the list
    PayrollSummary currentSummary =
        summaries.stream().filter(s -> s.getPK().equals(summary.getPK())).findAny().orElse(null);
    // reload the payroll summary
    summary = payrollSummaryService.loadSummary(summary.getPK());
    if (summary != null) {
      // reload the list
      if (currentSummary != null) {
        summaries.remove(currentSummary);
      }
      summaries.add(summary);
    } else {
      // remove from the list
      summaries.remove(currentSummary);
    }

    return summary;
  }

  /** Updates a designated group and closes the popup */
  public void updateDesGroup() {
    try {
      // update a designated group
      selectedGroup.setLastModifiedBy(user.getName());
      payrollSummaryService.updateDesignatedGroup(selectedGroup);
      // reload the payroll summary
      reloadPayrollSummary();

      PrimeFaces.current().executeScript("PF('createDesGroupDialog').hide();");
    } catch (HscisException e) {
      addMessage(new HscisException("Fatal error saving data", e));
    }
  }

  /** Updates a designated group then select the next one */
  public void updateNextDesGroup() {
    try {
      // update a designated group
      selectedGroup.setLastModifiedBy(user.getName());
      payrollSummaryService.updateDesignatedGroup(selectedGroup);
      // reload the payroll summary
      reloadPayrollSummary();

      selectedGroup = findNextGroup(summary, selectedGroup);

      // if last one, close the popup
      if (selectedGroup == null) {
        selectedGroup = new PayrollSummaryGroupComp();
        PrimeFaces.current().executeScript("PF('createDesGroupDialog').hide();");
      }

    } catch (HscisException e) {
      addMessage(new HscisException("Fatal error saving data", e));
    }
  }

  /**
   * Returns the next PayrollSummaryGroupComp according to the DataTable component ordering.
   *
   * @param summary
   * @param selectedGroup
   * @return
   */
  protected PayrollSummaryGroupComp findNextGroup(
      PayrollSummary summary, PayrollSummaryGroupComp selectedGroup) {

    // TODO: Crappy code. Should be refactored to be more generic for reuse.
    // Get the datatable component
    DataTable table =
        (DataTable)
            FacesContext.getCurrentInstance()
                .getViewRoot()
                .findComponent("entryPayrollTableForm:groupTable");

    // get the sort column; only one is ever expected as p:dataTable defaults to sortMode="single"
    SortMeta sortBy = table.getActiveSortMeta().entrySet().iterator().next().getValue();

    // Create a comparator
    Comparator<PayrollSummaryGroupComp> comp;
    if (sortBy.getField().equals("lastModified")) {
      comp =
          (PayrollSummaryGroupComp o1, PayrollSummaryGroupComp o2) ->
              new CompareToBuilder()
                  .append(o1.getLastModified(), o2.getLastModified())
                  .toComparison();
    } else {
      comp =
          (PayrollSummaryGroupComp o1, PayrollSummaryGroupComp o2) ->
              new CompareToBuilder()
                  .append(
                      o1.getDesignatedGroup().getDesignatedGroupCode(),
                      o2.getDesignatedGroup().getDesignatedGroupCode())
                  .toComparison();
    }
    // reverse if descending
    if (SortOrder.DESCENDING.name().equalsIgnoreCase(sortBy.getOrder().toString())) {
      comp = comp.reversed();
    }

    // Sort the list
    List<PayrollSummaryGroupComp> sortedList =
        summary.getGroupSummaries().stream().sorted(comp).collect(Collectors.toList());

    // Find the index of the selected group
    int i = sortedList.indexOf(selectedGroup);

    // Return the next one or null if last
    if (i < sortedList.size() - 1) {
      return sortedList.get(i + 1);
    } else {
      return null;
    }
  }

  /**
   * Deletes a designated group. Shows a confirm dialog if it is the last entry (group or employee)
   * for the current summary
   */
  public void deleteDesGroup() {
    try {
      payrollSummaryService.deleteDesignatedGroup(summary, selectedGroup);

      // reload the payroll summary
      PayrollSummary currentSummary = reloadPayrollSummary();

      if (currentSummary == null) {
        // payroll summary is empty, go to list after delete
        pageMode = PageMode.LIST;
        // Reload just in case
        summaries = payrollSummaryService.listPayrollSummaries(user.getName());
      }

      PrimeFaces.current().executeScript("PF('createDesGroupDialog').hide();");
    } catch (HscisException e) {
      // TODO: show error?
      addMessage(new HscisException("Fatal error deleting data", e));
    }
  }

  /**
   * Returns a confirmation message.
   *
   * @param entityName
   * @return
   */
  public String deleteConfirmationMessage(String entityName) {
    if (summary == null) {
      return "";
    }
    if (isLastEntry()) {
      return String.format(
          "This is the only entry for this payroll summary. The Payroll Summary will also be deleted. Are you sure you want to delete this %s entry?",
          entityName);
    } else {
      return String.format("Are you sure you want to delete this %s entry?", entityName);
    }
  }

  /** @return if there is only one payroll summary entry (group or employee) */
  protected boolean isLastEntry() {
    if (summary != null) {
      return (summary.getEmployeeSummaries().size() + summary.getGroupSummaries().size() == 1);
    }
    return true;
  }

  private void clearValidationWarnings() {
    Iterator<FacesMessage> msgIterator = FacesContext.getCurrentInstance().getMessages();
    while (msgIterator.hasNext()) {
      if (msgIterator.next().getSeverity() == FacesMessage.SEVERITY_WARN) {
        msgIterator.remove();
      }
    }
    dateOfBirthValidWarn = false;
    wageRateValidWarn = false;
  }

  /** Opens the Employee popup in CREATE mode. */
  public void openEmployee() {
    PrimeFaces.current().resetInputs("editEmployeeDialogForm");
    popupEmpMode = PopupMode.CREATE;
    selectedEmployee = new PayrollSummaryEmployee();
    selectedEmployee.setDesignatedGroup(new HcdDesignatedGroup());
    selectedEmployee.setClassification(new HcdClassification());
    selectedEmployee.setGender(new HcdGender());
    selectedEmployee.setJobStatus(new HcdJobStatus());
    selectedEmployee.setUnion(new HcdUnion());
    selectedEmployee.setSummary(summary);
    selectedEmployee.setLastModifiedBy(user.getName());
    classCodes = new ArrayList();
    empSearched = false;
    jobTitleDisabled = true;
    clearValidationWarnings();
    PrimeFaces.current().executeScript("PF('createEmployeeDialog').show();");
  }

  public void findEmployeeCurrentPeriod() {

    List<PayrollSummaryEmployee> payrollSummaryEmployeeList = summary.getEmployeeSummaries();
    for (PayrollSummaryEmployee pse : payrollSummaryEmployeeList) {
      // Find employee number in current payroll summary
      if (pse.getEmployeeNumber().equalsIgnoreCase(selectedEmployee.getEmployeeNumber())) {
        // Create a deep copy during duplicate creation
        selectedEmployee = new PayrollSummaryEmployee(pse);
        selectedEmployee.setWageRate(null);
        selectedEmployee.setRegularPaidHours(null);
        selectedEmployee.setVacationHrsUsedInTheYear(null);
        filterClassCodesByDesGroup();
        updateJobTitleDisabled();
        addWarnMessage("<i>Click Create to save</i>", "saveMsg");
        addWarnMessage(
            "Duplicate Entry for Employee Number: " + pse.getEmployeeNumber(), "employeeMessages");
        empSearched = true;
        break;
      }
    }
    // Temporarily set employeeNumber to be used in getSelectedEmployee()
    employeeNumber = selectedEmployee.getEmployeeNumber();

    // If not in current, find in previous submitted payroll summaries
    if (!empSearched) {
      findEmployeePreviousPeriod();
    }
  }

  public void findEmployeePreviousPeriod() {
    Collections.sort(summaries, (a, b) -> a.getLastModified().compareTo(b.getLastModified()));
    Collections.reverse(summaries);
    int i = 0;
    for (PayrollSummary ps : summaries) {
      long siteID = ps.getSiteID();
      long currentSiteID = summary.getSiteID();
      if (siteID == currentSiteID && ps.getStatus() == PayrollSummaryStatus.COMPLETED) {
        // Only find employee number in up to two of the previously completed payroll summaries
        if (i++ >= 2) {
          break;
        }
        List<PayrollSummaryEmployee> payrollSummaryEmployeeList = ps.getEmployeeSummaries();
        for (PayrollSummaryEmployee pse : payrollSummaryEmployeeList) {
          if (pse.getEmployeeNumber().equalsIgnoreCase(selectedEmployee.getEmployeeNumber())) {
            // Create a deep copy during duplicate creation
            selectedEmployee = new PayrollSummaryEmployee(pse);
            selectedEmployee.setSummary(summary);
            selectedEmployee.setWageRate(null);
            selectedEmployee.setRegularPaidHours(null);
            selectedEmployee.setVacationHrsUsedInTheYear(null);
            filterClassCodesByDesGroup();
            updateJobTitleDisabled();
            empSearched = true;
            break;
          }
        }
      }
    }
    empSearched = true;
  }

  /**
   * Opens the Employee popup in EDIT mode.
   *
   * @param event
   */
  public void editEmployee(SelectEvent<PayrollSummaryEmployee> event) {
    PrimeFaces.current().resetInputs("editEmployeeDialogForm");
    popupEmpMode = PopupMode.EDIT;
    if (summary.getStatus() == PayrollSummaryStatus.COMPLETED) {
      popupEmpMode = PopupMode.READONLY;
    }
    // Reload employee if change listeners have set Designated Group or Classification Code
    selectedEmployee = payrollSummaryService.loadEmployee(event.getObject().getId());
    filterClassCodesByDesGroup();
    updateJobTitleDisabled();
    empSearched = true;
    clearValidationWarnings();
    PrimeFaces.current().executeScript("PF('createEmployeeDialog').show();");
  }

  public String getEmployeePopupTitle() {
    if (popupEmpMode == PopupMode.READONLY) {
      return "Employee Data";
    }
    if (popupEmpMode == PopupMode.EDIT) {
      return "Update Employee Data";
    }
    return "Create Employee Data";
  }

  /** Creates an employee and closes the popup */
  public void createEmployee() {
    try {
      // create an employee
      payrollSummaryService.addEmployee(summary, selectedEmployee);
      // reload the payroll summary
      reloadPayrollSummary();
      clearValidationWarnings();
      PrimeFaces.current().executeScript("PF('createEmployeeDialog').hide();");
    } catch (HscisException e) {
      addMessage(new HscisException("Fatal error saving data", e));
    }
  }

  /** Creates an employee and then clears the popup to enter the next one */
  public void createEmployeeNext() {
    try {
      // create an employee
      payrollSummaryService.addEmployee(summary, selectedEmployee);
      // reload the payroll summary
      reloadPayrollSummary();
      // go to next
      selectedEmployee = new PayrollSummaryEmployee();
      selectedEmployee.setDesignatedGroup(new HcdDesignatedGroup());
      selectedEmployee.setClassification(new HcdClassification());
      selectedEmployee.setGender(new HcdGender());
      selectedEmployee.setJobStatus(new HcdJobStatus());
      selectedEmployee.setUnion(new HcdUnion());
      selectedEmployee.setSummary(summary);
      selectedEmployee.setLastModifiedBy(user.getName());
      classCodes = new ArrayList();
      empSearched = false;
      jobTitleDisabled = true;
      clearValidationWarnings();
    } catch (HscisException e) {
      addMessage(new HscisException("Fatal error saving data", e));
    }
  }

  /** Updates an employee and closes the popup */
  public void updateEmployee() {
    try {
      // update an employee
      selectedEmployee.setLastModifiedBy(user.getName());
      payrollSummaryService.updateEmployee(selectedEmployee);
      // reload the payroll summary
      reloadPayrollSummary();
      clearValidationWarnings();
      PrimeFaces.current().executeScript("PF('createEmployeeDialog').hide();");
    } catch (HscisException e) {
      addMessage(new HscisException("Fatal error saving data", e));
    }
  }

  /** Updates an employee then select the next one */
  public void updateNextEmployee() {
    try {
      // update an employee
      selectedEmployee.setLastModifiedBy(user.getName());
      payrollSummaryService.updateEmployee(selectedEmployee);
      // reload the payroll summary
      reloadPayrollSummary();

      selectedEmployee = findNextEmployee(summary, selectedEmployee);

      // if last one, close the popup
      if (selectedEmployee == null) {
        selectedEmployee = new PayrollSummaryEmployee();
        PrimeFaces.current().executeScript("PF('createEmployeeDialog').hide();");
      } else {
        filterClassCodesByDesGroup();
        updateJobTitleDisabled();
        clearValidationWarnings();
      }

    } catch (HscisException e) {
      addMessage(new HscisException("Fatal error saving data", e));
    }
  }

  /**
   * Returns the next PayrollSummaryEmployee according to the DataTable component ordering.
   *
   * @param summary
   * @param selectedEmployee
   * @return
   */
  protected PayrollSummaryEmployee findNextEmployee(
      PayrollSummary summary, PayrollSummaryEmployee selectedEmployee) {

    // TODO: Crappy code. Should be refactored to be more generic for reuse.
    // Get the datatable component
    DataTable table =
        (DataTable)
            FacesContext.getCurrentInstance()
                .getViewRoot()
                .findComponent("entryPayrollTableForm:employeeTable");

    // get the sort column; only one is ever expected as p:dataTable defaults to sortMode="single"
    SortMeta sortBy = table.getActiveSortMeta().entrySet().iterator().next().getValue();

    // Create a comparator
    Comparator<PayrollSummaryEmployee> comp;
    if (sortBy.getField().equals("lastModified")) {
      comp =
          (PayrollSummaryEmployee o1, PayrollSummaryEmployee o2) ->
              new CompareToBuilder()
                  .append(o1.getLastModified(), o2.getLastModified())
                  .toComparison();
    } else if (sortBy.getField().equals("regularPaidHours")) {
      comp =
          (PayrollSummaryEmployee o1, PayrollSummaryEmployee o2) ->
              new CompareToBuilder()
                  .append(o1.getRegularPaidHours(), o2.getRegularPaidHours())
                  .toComparison();
    } else if (sortBy.getField().equals("classification.classificationCode")) {
      comp =
          (PayrollSummaryEmployee o1, PayrollSummaryEmployee o2) ->
              new CompareToBuilder()
                  .append(
                      o1.getClassification().getClassificationCode(),
                      o2.getClassification().getClassificationCode())
                  .toComparison();
    } else if (sortBy.getField().equals("designatedGroup.designatedGroupCode")) {
      comp =
          (PayrollSummaryEmployee o1, PayrollSummaryEmployee o2) ->
              new CompareToBuilder()
                  .append(
                      o1.getDesignatedGroup().getDesignatedGroupCode(),
                      o2.getDesignatedGroup().getDesignatedGroupCode())
                  .toComparison();
    } else {
      comp =
          (PayrollSummaryEmployee o1, PayrollSummaryEmployee o2) ->
              new CompareToBuilder().append(o1.getId(), o2.getId()).toComparison();
    }
    // reverse if descending
    if (SortOrder.DESCENDING.name().equalsIgnoreCase(sortBy.getOrder().toString())) {
      comp = comp.reversed();
    }

    // Sort the list
    List<PayrollSummaryEmployee> sortedList =
        summary.getEmployeeSummaries().stream().sorted(comp).collect(Collectors.toList());

    // Find the index of the selected group
    int i = sortedList.indexOf(selectedEmployee);
    // Return the next one or null if last
    if (i < sortedList.size() - 1) {
      return sortedList.get(i + 1);
    } else {
      return null;
    }
  }

  /**
   * Deletes an employee. Shows a confirm dialog if it is the last entry (group or employee) for the
   * current summary
   */
  public void deleteEmployee() {
    try {
      payrollSummaryService.deleteEmployee(summary, selectedEmployee);

      // reload the payroll summary
      PayrollSummary currentSummary = reloadPayrollSummary();

      if (currentSummary == null) {
        // payroll summary is empty, go to list after delete
        pageMode = PageMode.LIST;
        // Reload just in case
        summaries = payrollSummaryService.listPayrollSummaries(user.getName());
      }

      PrimeFaces.current().executeScript("PF('createEmployeeDialog').hide();");
    } catch (HscisException e) {
      // TODO: show error?
      addMessage(new HscisException("Fatal error deleting data", e));
    }
  }

  public void deleteSummary() {
    try {
      payrollSummaryService.deletePayrollSummary(summary);
      // go to list after delete
      pageMode = PageMode.LIST;
      // Reload just in case
      summaries = payrollSummaryService.listPayrollSummaries(user.getName());
    } catch (HscisException e) {
      // TODO: show error?
      addMessage(new HscisException("Fatal error deleting data", e));
    }
  }

  public void submitSummary() {

    submitSummaryValidationResult = "<ul>";
    List<String> submitSummaryValidationResultList = validateSubmitSummary();
    // passed payroll summary validation
    if (submitSummaryValidationResultList.isEmpty()) {
      try {
        payrollSummaryService.submitPayrollSummary(summary, user.getName());
        // change to list mode
        pageMode = PageMode.LIST;
        // add message
        addMessage(
            new FacesMessage(
                FacesMessage.SEVERITY_INFO,
                "The Payroll Summary was successfully submitted to the Ministry of Health",
                null));
        PrimeFaces.current().ajax().update("messages");
        PrimeFaces.current().executeScript("window.scrollTo(0,0);");
        // reload the payroll summary
        reloadPayrollSummary();
      } catch (HscisException e) {
        // TODO: show error?
        addMessage(new HscisException("Fatal error the submiting payroll summary", e));
      }
    } else {
      // Show validation errors one by one
      submitSummaryValidationResultList.forEach(
          result -> {
            submitSummaryValidationResult = submitSummaryValidationResult + result;
          });
      submitSummaryValidationResult = submitSummaryValidationResult + "</ul>";
      logger.debug(submitSummaryValidationResult);
      PrimeFaces.current().executeScript("PF('validSummary').show()");
    }
  }

  /**
   * Every Designated group created needs at least one employee in the summary table; Every employee
   * needs a designated group in the summary table
   *
   * @return
   */
  private List<String> validateSubmitSummary() {

    List<String> errorList = new ArrayList();

    List<HcdDesignatedGroup> designatedGroupList = new ArrayList<>();
    List<HcdDesignatedGroup> employeeDesignatedGroupList = new ArrayList<>();

    summary.getEmployeeSummaries().stream()
        .filter(employee -> (!employeeDesignatedGroupList.contains(employee.getDesignatedGroup())))
        .forEachOrdered(
            employee -> {
              employeeDesignatedGroupList.add(employee.getDesignatedGroup());
            });

    summary
        .getGroupSummaries()
        .forEach(
            payrollSummaryGroupComp -> {
              designatedGroupList.add(payrollSummaryGroupComp.getDesignatedGroup());
            });

    designatedGroupList.stream()
        .filter(designatedGroup -> (!employeeDesignatedGroupList.contains(designatedGroup)))
        .forEachOrdered(
            designatedGroup -> {
              String error =
                  "<li>You have a Designated Group Summary record for <strong>'"
                      + designatedGroup.getDescription()
                      + "'</strong>."
                      + "There must be at least one Employee record for this Designated Group.</li>";
              errorList.add(error);
            });

    employeeDesignatedGroupList.stream()
        .filter(employeeDesignatedGroup -> (!designatedGroupList.contains(employeeDesignatedGroup)))
        .forEachOrdered(
            employeeDesignatedGroup -> {
              String error =
                  "<li>You have one or more Employee records belonging to the Designated Group <strong>'"
                      + employeeDesignatedGroup.getDescription()
                      + "'</strong> but there is no corresponding Designated Group Summary record for <strong>'"
                      + employeeDesignatedGroup.getDescription()
                      + "'</strong>.</li>";
              errorList.add(error);
            });

    return errorList;
  }

  public void exportSummary() {

    PrimeFaces.current().executeScript("window.scrollTo(0,0);");
    PayrollSummaryExportHelper.init();
    pageMode = PageMode.EXPORT;
    // Unselect each Designated Group tab to "reset" the @ViewScoped EnterPayrollSummaryView
    // Select each Designated Group tab because activeIndex="0,1,2,3" does not work as expected
    PrimeFaces.current().executeScript("PF('exportDesignatedGroupSummaryPages').unselect(0);");
    PrimeFaces.current().executeScript("PF('exportDesignatedGroupSummaryPages').select(0);");
    exportOverTimeList.clear();
    PrimeFaces.current().executeScript("PF('exportDesignatedGroupSummaryPages').unselect(1);");
    PrimeFaces.current().executeScript("PF('exportDesignatedGroupSummaryPages').select(1);");
    exportLeaveList.clear();
    PrimeFaces.current().executeScript("PF('exportDesignatedGroupSummaryPages').unselect(2);");
    PrimeFaces.current().executeScript("PF('exportDesignatedGroupSummaryPages').select(2);");
    exportAllowanceList.clear();
    PrimeFaces.current().executeScript("PF('exportDesignatedGroupSummaryPages').unselect(3);");
    PrimeFaces.current().executeScript("PF('exportDesignatedGroupSummaryPages').select(3);");
    exportPayList.clear();

    groupValueSumMap.replaceAll((k, v) -> v = BigDecimal.ZERO);

    Class<?> c = PayrollSummaryGroupComp.class;
    Field[] groupCompfields = c.getDeclaredFields();

    List<PayrollSummaryGroupComp> groupSummaryList = summary.getGroupSummaries();
    Iterator<PayrollSummaryGroupComp> groupCompIt = groupSummaryList.iterator();

    while (groupCompIt.hasNext()) {

      PayrollSummaryGroupComp groupComp = (PayrollSummaryGroupComp) groupCompIt.next();

      for (Field field : groupCompfields) {
        String attribute = field.getName();
        DesignatedGroupExportDataBean exportDataBean = new DesignatedGroupExportDataBean();
        exportDataBean.setReportedField(attribute);

        PayrollSummaryExportHelper.convertByCategory(
            groupComp,
            exportDataBean,
            attribute,
            exportOverTimeList,
            PayrollSummaryExportHelper.overTimeFieldList,
            groupValueSumMap);
        PayrollSummaryExportHelper.convertByCategory(
            groupComp,
            exportDataBean,
            attribute,
            exportLeaveList,
            PayrollSummaryExportHelper.leaveFieldList,
            groupValueSumMap);
        PayrollSummaryExportHelper.convertByCategory(
            groupComp,
            exportDataBean,
            attribute,
            exportAllowanceList,
            PayrollSummaryExportHelper.allowanceFieldList,
            groupValueSumMap);
        PayrollSummaryExportHelper.convertByCategory(
            groupComp,
            exportDataBean,
            attribute,
            exportPayList,
            PayrollSummaryExportHelper.payFieldList,
            groupValueSumMap);
      }
    }
    PayrollSummaryExportHelper.sumTotalForAllGroups(exportOverTimeList, groupValueSumMap);
    PayrollSummaryExportHelper.sumTotalForAllGroups(exportLeaveList, groupValueSumMap);
    PayrollSummaryExportHelper.sumTotalForAllGroups(exportAllowanceList, groupValueSumMap);
    PayrollSummaryExportHelper.sumTotalForAllGroups(exportPayList, groupValueSumMap);

    logger.debug(exportOverTimeList.size() + "");
    exportOverTimeList.forEach(
        bean -> {
          logger.debug(bean.getReportedField());
        });
  }

  public void filterClassCodesByDesGroup() {
    wageRateValidWarn = false;
    classCodes =
        payrollSummaryService.listClassCodesByDesignatedGroup(
            selectedEmployee.getDesignatedGroup().getDesignatedGroupCode());
  }

  public void filterJobTitleByClassCode() {
    updateJobTitleDisabled();
    if (jobTitleDisabled) {
      selectedEmployee.setJobTitle("N/A");
    } else {
      selectedEmployee.setJobTitle("");
    }
  }

  public void updateJobTitleDisabled() {
    if (classCodes != null && classCodes.indexOf(selectedEmployee.getClassification()) > 0) {
      String codeDesc =
          classCodes.get(classCodes.indexOf(selectedEmployee.getClassification())).getDescription();
      jobTitleDisabled = !(codeDesc != null && codeDesc.startsWith("Unlisted"));
    } else {
      jobTitleDisabled = true;
    }
  }

  public void dateOfBirthValidWarnChangeListener() {
    dateOfBirthValidWarn = false;
  }

  public void wageRateValidWarnChangeListener() {
    wageRateValidWarn = false;
  }

  public void cancel() {
    pageMode = PageMode.LIST;
  }

  public void backToPayrollSummary() {
    if (summary.getStatus() == PayrollSummaryStatus.COMPLETED) {
      pageMode = PageMode.READONLY;
    } else {
      pageMode = PageMode.EDIT;
    }
  }

  public Date getCurrentDate() {
    return new Date();
  }

  public List<PayrollSummary> getSummaries() {
    return summaries;
  }

  public void setSummaries(List<PayrollSummary> summaries) {
    this.summaries = summaries;
  }

  public PayrollSummary getSummary() {
    return summary;
  }

  public void setSummary(PayrollSummary summary) {
    this.summary = summary;
  }

  public PayrollSummaryGroupComp getSelectedGroup() {
    return selectedGroup;
  }

  public void setSelectedGroup(PayrollSummaryGroupComp selectedGroup) {
    this.selectedGroup = selectedGroup;
  }

  public List<HcdMembership> getMemberships() {
    return memberships;
  }

  public void setMemberships(List<HcdMembership> memberships) {
    this.memberships = memberships;
  }

  public List<HcdDesignatedGroup> getDesignatedGroups() {
    Collections.sort(
        designatedGroups,
        (var sItem1, var sItem2) -> {
          String sItem1Label = sItem1.getDesignatedGroupCode();
          String sItem2Label = sItem2.getDesignatedGroupCode();
          return (sItem1Label.compareToIgnoreCase(sItem2Label));
        });
    return designatedGroups;
  }

  public void setDesignatedGroups(List<HcdDesignatedGroup> designatedGroups) {
    this.designatedGroups = designatedGroups;
  }

  public List<HcdUnion> getUnionCodes() {
    Collections.sort(
        unionCodes,
        (var sItem1, var sItem2) -> {
          String sItem1Label = sItem1.getUnionCode();
          String sItem2Label = sItem2.getUnionCode();
          return (sItem1Label.compareToIgnoreCase(sItem2Label));
        });
    return unionCodes;
  }

  public void setUnionCodes(List<HcdUnion> unionCodes) {
    this.unionCodes = unionCodes;
  }

  public List<HcdGender> getGenders() {
    Collections.sort(
        genders,
        (var sItem1, var sItem2) -> {
          String sItem1Label = sItem1.getGenderCode();
          String sItem2Label = sItem2.getGenderCode();
          return (sItem1Label.compareToIgnoreCase(sItem2Label));
        });
    return genders;
  }

  public void setGenders(List<HcdGender> genders) {
    this.genders = genders;
  }

  public List<HcdClassification> getClassCodes() {
    Collections.sort(
        classCodes,
        (var sItem1, var sItem2) -> {
          Integer sItem1Label = sItem1.getClassificationCode();
          Integer sItem2Label = sItem2.getClassificationCode();
          return (sItem1Label.compareTo(sItem2Label));
        });
    return classCodes;
  }

  public void setClassCodes(List<HcdClassification> classCodes) {
    this.classCodes = classCodes;
  }

  public List<HcdTerminationCode> getTerminationCodes() {
    Collections.sort(
        terminationCodes,
        (var sItem1, var sItem2) -> {
          String sItem1Label = sItem1.getTerminationCode();
          String sItem2Label = sItem2.getTerminationCode();
          return (sItem1Label.compareToIgnoreCase(sItem2Label));
        });
    return terminationCodes;
  }

  public void setTerminationCodes(List<HcdTerminationCode> terminationCodes) {
    this.terminationCodes = terminationCodes;
  }

  public List<String> getIncrements() {
    return increments;
  }

  public void setIncrements(List<String> increments) {
    this.increments = increments;
  }

  public List<HcdJobStatus> getJobStatus() {
    Collections.sort(
        jobStatus,
        (var sItem1, var sItem2) -> {
          String sItem1Label = sItem1.getJobStatusCode();
          String sItem2Label = sItem2.getJobStatusCode();
          return (sItem1Label.compareToIgnoreCase(sItem2Label));
        });
    return jobStatus;
  }

  public void setJobStatus(List<HcdJobStatus> jobStatus) {
    this.jobStatus = jobStatus;
  }

  /**
   * Instead of a regular getter, this includes a janky JSF fix after either moving from Java EE 8
   * to Jakarta EE 10 or PrimeFaces 10 to 12 where the selectedEmployee becomes null after an
   * initial validation phase occurs in the enterPayrollSummaryEmployePopup.xhtml. Any subsequent
   * click of a "Create"-like button yields a "jakarta.el.PropertyNotFoundException: Target
   * Unreachable, 'null' returned null".
   *
   * @return the selectedEmployee
   */
  public PayrollSummaryEmployee getSelectedEmployee() {
    if (selectedEmployee == null) {
      selectedEmployee = new PayrollSummaryEmployee();
      selectedEmployee.setEmployeeNumber(employeeNumber);
      selectedEmployee.setSummary(summary);
      filterJobTitleByClassCode();
    }
    return selectedEmployee;
  }

  public void setSelectedEmployee(PayrollSummaryEmployee selectedEmployee) {
    this.selectedEmployee = selectedEmployee;
  }

  public PageMode getPageMode() {
    return pageMode;
  }

  public void setPageMode(PageMode pageMode) {
    this.pageMode = pageMode;
  }

  public PopupMode getPopupEmpMode() {
    return popupEmpMode;
  }

  public void setPopupEmpMode(PopupMode popupEmpMode) {
    this.popupEmpMode = popupEmpMode;
  }

  public PopupMode getPopupGrpMode() {
    return popupGrpMode;
  }

  public void setPopupGrpMode(PopupMode popupGrpMode) {
    this.popupGrpMode = popupGrpMode;
  }

  public boolean isEmpSearched() {
    return empSearched;
  }

  public void setEmpSearched(boolean empSearched) {
    this.empSearched = empSearched;
  }

  public boolean isJobTitleDisabled() {
    return jobTitleDisabled;
  }

  public void setJobTitleDisabled(boolean jobTitleDisabled) {
    this.jobTitleDisabled = jobTitleDisabled;
  }

  public List<DesignatedGroupExportDataBean> getExportOverTimeList() {
    return exportOverTimeList;
  }

  public void setExportOverTimeList(List<DesignatedGroupExportDataBean> exportOverTimeList) {
    this.exportOverTimeList = exportOverTimeList;
  }

  public List<DesignatedGroupExportDataBean> getExportLeaveList() {
    return exportLeaveList;
  }

  public void setExportLeaveList(List<DesignatedGroupExportDataBean> exportLeaveList) {
    this.exportLeaveList = exportLeaveList;
  }

  public List<DesignatedGroupExportDataBean> getExportAllowanceList() {
    return exportAllowanceList;
  }

  public void setExportAllowanceList(List<DesignatedGroupExportDataBean> exportAllowanceList) {
    this.exportAllowanceList = exportAllowanceList;
  }

  public List<DesignatedGroupExportDataBean> getExportPayList() {
    return exportPayList;
  }

  public void setExportPayList(List<DesignatedGroupExportDataBean> exportPayList) {
    this.exportPayList = exportPayList;
  }

  public Map<String, BigDecimal> getGroupValueSumMap() {
    return groupValueSumMap;
  }

  public void setGroupValueSumMap(Map<String, BigDecimal> groupValueSumMap) {
    this.groupValueSumMap = groupValueSumMap;
  }

  public String getSubmitSummaryValidationResult() {
    return submitSummaryValidationResult;
  }

  public void setSubmitSummaryValidationResult(String submitSummaryValidationResult) {
    this.submitSummaryValidationResult = submitSummaryValidationResult;
  }

  public String getEmployeeNumber() {
    return employeeNumber;
  }

  public void setEmployeeNumber(String employeeNumber) {
    this.employeeNumber = employeeNumber;
  }

  public boolean isDateOfBirthValidWarn() {
    return dateOfBirthValidWarn;
  }

  public void setDateOfBirthValidWarn(boolean dateOfBirthValidWarn) {
    this.dateOfBirthValidWarn = dateOfBirthValidWarn;
  }

  public boolean isWageRateValidWarn() {
    return wageRateValidWarn;
  }

  public void setWageRateValidWarn(boolean wageRateValidWarn) {
    this.wageRateValidWarn = wageRateValidWarn;
  }
}
