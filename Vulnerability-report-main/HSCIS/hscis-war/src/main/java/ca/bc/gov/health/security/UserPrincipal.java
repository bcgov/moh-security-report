package ca.bc.gov.health.security;

import ca.bc.gov.health.sfds.entity.Account;
import ca.bc.gov.health.sfds.files.Mailbox;
import ca.bc.gov.health.sfds.service.SfdsService;
import jakarta.enterprise.context.SessionScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.json.Json;
import jakarta.json.JsonArray;
import jakarta.json.JsonObject;
import jakarta.json.JsonReader;
import jakarta.json.JsonValue;
import java.io.Serializable;
import java.io.StringReader;
import java.security.Principal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

/**
 * HSCIS Security Principal based off of SFDS
 *
 * @author CGI Information Management Consultants Inc.
 */
@Named("UserPrincipal")
@SessionScoped
public class UserPrincipal implements Principal, Serializable {

  private static final long serialVersionUID = -5539694028843145976L;

  @Inject SfdsService sfdsService;

  private static final String JSON_OBJECT = "OBJECT";

  private static final String MAILBOX_ELEMENT = "m";
  private static final String USES_ELEMENT = "u";
  private static final String PERMISSIONS_ELEMENT = "p";

  private static final String HSCIS_USE = "hscis";

  private String name;
  private Set<String> roles = new HashSet<>();
  private String rawMailboxes; // Serialized JSON array of mailboxes
  private List<Mailbox> mailboxes;

  public UserPrincipal() {
    this.name = "";
  }

  private String getAccountName(String accountIdentifier) {
    /* Set a default mailbox description */
    String accountName = "MAILBOX";
    Account account = sfdsService.findAccountByAccountIdentifier(accountIdentifier);
    if (account != null && account.getName() != null) {
      accountName = account.getName().toUpperCase();
    }
    return accountName;
  }

  private JsonArray getJsonMailboxes() {
    JsonArray jsonMailboxes = null;
    if (rawMailboxes != null && !rawMailboxes.isEmpty()) {
      try (JsonReader jsonReader = Json.createReader(new StringReader(rawMailboxes))) {
        jsonMailboxes = jsonReader.readArray();
      }
    }
    return jsonMailboxes;
  }

  private void parseMailboxes() {
    mailboxes = new ArrayList<>();
    JsonArray jsonMailboxes = getJsonMailboxes();
    if (jsonMailboxes != null) {
      for (JsonValue jsonMailbox : jsonMailboxes) {
        Mailbox mailbox = new Mailbox();
        if (JSON_OBJECT.equalsIgnoreCase(jsonMailbox.getValueType().name())) {
          JsonObject jsonMailboxObj = jsonMailbox.asJsonObject();
          mailbox.setName(jsonMailboxObj.getString(MAILBOX_ELEMENT));
          mailbox.setPrivileges(
              transformPermissions(jsonMailboxObj.getString(PERMISSIONS_ELEMENT)));
          mailbox.setStrPrivileges(jsonMailboxObj.getString(PERMISSIONS_ELEMENT));
          JsonArray jsonMailboxUses = jsonMailboxObj.getJsonArray(USES_ELEMENT);
          if (jsonMailboxUses != null) {
            mailbox.setUses(new ArrayList<>());
            for (JsonValue jsonUse : jsonMailboxUses) {
              String use = jsonUse.toString().replaceAll("\"", "");
              if (HSCIS_USE.equalsIgnoreCase(use)) {
                mailbox.getUses().add(use);
                mailboxes.add(mailbox);
                break;
              }
            }
          }
        }
      }
    }
  }

  public String getUserInfo() {
    StringBuilder sb = new StringBuilder("Username: ").append(name);
    sb.append("\nRoles: [");
    if (!roles.isEmpty()) {
      roles.forEach(role -> sb.append(role).append(", "));
      sb.delete(sb.lastIndexOf(","), sb.lastIndexOf(",") + 1);
      sb.delete(sb.lastIndexOf(" "), sb.lastIndexOf(" ") + 1);
    }
    sb.append("]");
    sb.append("\nMailboxes:\n");
    for (Mailbox mailbox : getMailboxes()) {
      sb.append("\t").append(mailbox.getName());
      sb.append("\n\t\tPermission: ").append(mailbox.getStrPrivileges());
      sb.append("\n\t\tUses: [");
      mailbox.getUses().forEach(use -> sb.append(use).append(", "));
      sb.delete(sb.lastIndexOf(","), sb.lastIndexOf(",") + 1);
      sb.delete(sb.lastIndexOf(" "), sb.lastIndexOf(" ") + 1);
      sb.append("]").append("\n");
    }
    return sb.toString();
  }

  /**
   * Returns a list of mailboxes (HNFile accounts) available for the logged on user
   *
   * @return
   */
  public List<Mailbox> getMailboxes() {
    if (mailboxes == null) {
      parseMailboxes();
    }

    for (Mailbox mailbox : mailboxes) {
      if (mailbox.getDescription() == null) {
        String accountName = getAccountName(mailbox.getName());
        mailbox.setDescription(accountName);
      }
    }

    /* Mailbox as assigned from Keycloak User Management Console may have been deleted and therefore null */
    return mailboxes.stream()
        .filter(mailbox -> (mailbox.getName() != null && mailbox.getDescription() != null))
        .collect(Collectors.toList());
  }

  private static byte transformPermissions(String permissions) {
    byte result = 0;
    String[] p = permissions.split("-");
    if ((p != null) && (p.length > 0)) {
      for (int i = 0; i < p.length; i++) {
        if ("get".equalsIgnoreCase(p[i])) {
          result = (byte) (result | 1);
        }
        if ("send".equalsIgnoreCase(p[i])) {
          result = (byte) (result | 2);
        }
        if ("delete".equalsIgnoreCase(p[i])) {
          result = (byte) (result | 4);
        }
      }
    }
    return result;
  }

  @Override
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public Set<String> getRoles() {
    return roles;
  }

  public void setRoles(Set<String> roles) {
    this.roles = roles;
  }

  public String getRawMailboxes() {
    return rawMailboxes;
  }

  public void setRawMailboxes(String rawMailboxes) {
    this.rawMailboxes = rawMailboxes;
  }

  public void setMailboxes(List<Mailbox> mailboxes) {
    this.mailboxes = mailboxes;
  }
}
