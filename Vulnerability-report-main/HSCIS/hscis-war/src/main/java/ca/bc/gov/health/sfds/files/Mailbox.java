package ca.bc.gov.health.sfds.files;

import java.io.Serializable;
import java.util.List;

/**
 * POJO for mailboxes. Includes text id, description permissions and associated uses.
 *
 * @author vladimir.dovgalyuk Last edition as of June 03, 2021
 */
public class Mailbox implements Serializable {

  /** Determines if a deserialized file is compatible with this class. */
  private static final long serialVersionUID = -2267484474365120523L;

  private List<String> uses; // See Javadoc for UserPrincipal
  private String name; // -> ACCOUNTS.ACCOUNT_IDENTIFIER
  private String description; // -> ACCOUNTS.NAME
  private byte privileges;
  private String strPrivileges;

  /**
   * Corresponds to the physical name of the mailbox directory and the value of the
   * FDS.ACCOUNTS.ACCOUNT_IDENTIFIER field
   *
   * @return Mailbox text ID
   */
  public String getName() {
    return name;
  }

  /**
   * Sets text identifier
   *
   * @param name Mailbox text ID
   */
  public void setName(String name) {
    this.name = name;
  }

  /**
   * The value of the FDS.ACCOUNTS.NAME field, which is populated from the clients.ini file.
   *
   * @return Mailbox description
   */
  public String getDescription() {
    return description;
  }

  public String getCompleteDescription() {
    StringBuilder sb = new StringBuilder(description);
    sb.append(" (").append(name).append(")");
    return sb.toString();
  }

  /**
   * Sets mailbox description
   *
   * @param description Mailbox description
   */
  public void setDescription(String description) {
    this.description = description;
  }

  /**
   * User's privileges for the mailbox encoded as a single byte. First bit for 'get' => 1 Second bit
   * for 'send' => 2 Third bit for 'delete' => 4
   *
   * @return User's privileges for the mailbox
   */
  public byte getPrivileges() {
    return privileges;
  }

  /**
   * Sets user's privileges on the mailbox
   *
   * @param privileges Privileges encoded as byte
   */
  public void setPrivileges(byte privileges) {
    this.privileges = privileges;
  }

  @Override
  public String toString() {
    StringBuilder sb =
        new StringBuilder("\nMailbox:\n")
            .append("\tName = ")
            .append(this.getName())
            .append("\n")
            .append("\tDescription = ")
            .append(this.getDescription())
            .append("\n");

    sb.append("\tPrivileges = [")
        .append(this.hasGet() ? " get" : "")
        .append(this.hasSend() ? " send" : "")
        .append(this.hasDelete() ? " delete" : "")
        .append(" ]\n");

    sb.append("\tUses = ").append(this.getUses());

    return sb.toString();
  }

  /**
   * List of SFDS uses identifiers for the mailbox
   *
   * @return List of use text IDs
   */
  public List<String> getUses() {
    return uses;
  }

  /**
   * Sets SFDS uses for the mailbox
   *
   * @param uses List of uses ID
   */
  public void setUses(List<String> uses) {
    this.uses = uses;
  }

  /**
   * Checks if a user has 'get' permission
   *
   * @return true if a user can see files in the mailbox, false otherwise
   */
  public boolean hasGet() {
    return (privileges & (byte) 1) != 0;
  }

  /**
   * Checks if a user has 'send' permission
   *
   * @return true if a user can send files from the mailbox, false otherwise
   */
  public boolean hasSend() {
    return (privileges & (byte) 2) != 0;
  }

  /**
   * Checks if a user has 'delete' permission
   *
   * @return true if a user can delete files from the mailbox, false otherwise
   */
  public boolean hasDelete() {
    return (privileges & (byte) 4) != 0;
  }

  public String getStrPrivileges() {
    return strPrivileges;
  }

  public void setStrPrivileges(String strPrivileges) {
    this.strPrivileges = strPrivileges;
  }
}
