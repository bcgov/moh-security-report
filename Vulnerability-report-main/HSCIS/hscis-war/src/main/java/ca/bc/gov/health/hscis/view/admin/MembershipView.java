package ca.bc.gov.health.hscis.view.admin;

import ca.bc.gov.health.hscis.entity.HcdMembership;
import ca.bc.gov.health.hscis.service.HscisAdminService;
import ca.bc.gov.health.hscis.view.BaseView;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.primefaces.PrimeFaces;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@ViewScoped
@Named("MembershipView")
public class MembershipView extends BaseView {

  private static final long serialVersionUID = 1L;

  private static Logger logger = LoggerFactory.getLogger(MembershipView.class);

  @EJB private HscisAdminService adminService;

  private List<HcdMembership> memberships;
  private HcdMembership selectedMembership = new HcdMembership();
  private HcdMembership newMembership = new HcdMembership();
  private String searchValue;
  private List<Long> reportedWithinList;
  private String commentsNotes;
  private String originalHnftp;
  private String payrollTypeUpdate;
  private String payrollTypeCreate;
  private String hnftpValueUpdate;
  private String hnftpValueCreate;
  private Map<String, String> payrollTypes;

  @PostConstruct
  public void init() {
    searchValue = "";
    originalHnftp = "";
    memberships = adminService.refreshMembershipList();
    payrollTypes = new HashMap<>();
    payrollTypes.put("HNFile", "HNFile");
    payrollTypes.put("Data Entry", "DATA ENTRY");
    payrollTypes.put("Not Eligible", "NOT ELIGIBLE");
  }

  public void searchMembershipList() {
    memberships = adminService.searchMembershipList(searchValue);
  }

  public void createEmptyMembershipRow() {
    newMembership = new HcdMembership();
  }

  public void onRowSelect() {
    reportedWithinList =
        adminService.listSiteIdByCorpId(selectedMembership.getCorporateEmployerNumber());
    reportedWithinList.remove(selectedMembership.getSiteEmployerNumber());
    originalHnftp = selectedMembership.getHnftpAccount();
    hnftpValueUpdate = originalHnftp;
    if (selectedMembership.getHnftpAccount() != null
        && !selectedMembership.getHnftpAccount().equalsIgnoreCase("DATA ENTRY")
        && !selectedMembership.getHnftpAccount().equalsIgnoreCase("NOT ELIGIBLE")) {
      payrollTypeUpdate = "HNFile";
    } else {
      payrollTypeUpdate = selectedMembership.getHnftpAccount();
    }
  }

  /** @Delete the membership row */
  public void deleteMembership() {
    FacesMessage message = adminService.deleteMembership(selectedMembership);
    addMessage(message);
    searchMembershipList();
  }

  /** @Update the membership record */
  public void updateMembership() {
    if (payrollTypeUpdate.equals("HNFile")) {
      selectedMembership.setHnftpAccount(hnftpValueUpdate);
    }
    FacesMessage message = adminService.updateMembership(selectedMembership);
    addMessage(message);
    PrimeFaces.current().executeScript("PF('cdUpdateMembership').hide();");
    PrimeFaces.current().ajax().update("membershipMessages");
    searchMembershipList();
  }

  /** @Create the new membership record */
  public void createMembershipRow() {
    newMembership.setHscisId(newMembership.getHscisId());
    FacesMessage message = adminService.createMembershipRow(newMembership);
    addMessage(message);
    if (message.getSummary().equals("Site Employer # already exists")) {
      PrimeFaces.current().ajax().update("createMembershipMessages");
      return;
    }
    PrimeFaces.current().executeScript("PF('cdCreateMembership').hide();");
    PrimeFaces.current().ajax().update("membershipMessages");
    searchMembershipList();
  }

  public void reportedWithinDynamic() {
    reportedWithinList =
        adminService.listSiteIdByCorpId(newMembership.getCorporateEmployerNumber());
    reportedWithinList.remove(newMembership.getSiteEmployerNumber());
  }

  /** @return the membership list */
  public List<HcdMembership> getMemberships() {
    return memberships;
  }

  /** @param memberships the memberships to set */
  public void setMemberships(List<HcdMembership> memberships) {
    this.memberships = memberships;
  }

  /** @return the new membership */
  public HcdMembership getNewMembership() {
    return newMembership;
  }

  /** @param newMembership the new membership to set */
  public void setNewMembership(HcdMembership newMembership) {
    this.newMembership = newMembership;
  }

  /** @return the selected membership */
  public HcdMembership getSelectedMembership() {
    return selectedMembership;
  }

  /** @param selectedMembership the membership to set */
  public void setSelectedMembership(HcdMembership selectedMembership) {
    this.selectedMembership = selectedMembership;
  }

  /** @return the searchValue */
  public String getSearchValue() {
    return searchValue;
  }

  /** @param searchValue the searchValue to set */
  public void setSearchValue(String searchValue) {
    this.searchValue = searchValue;
  }

  /** @return the reportedWithinList */
  public List<Long> getReportedWithinList() {
    return reportedWithinList;
  }

  /** @param reportedWithinList the reportedWithinList to set */
  public void setReportedWithinList(List<Long> reportedWithinList) {
    this.reportedWithinList = reportedWithinList;
  }

  /** @return the commentsNotes */
  public String getCommentsNotes() {
    return commentsNotes;
  }

  /** @param commentsNotes the commentsNotes to set */
  public void setCommentsNotes(String commentsNotes) {
    this.commentsNotes = commentsNotes;
  }

  /** @return the payrollTypeUpdate */
  public String getPayrollTypeUpdate() {
    return payrollTypeUpdate;
  }

  /** @param payrollTypeUpdate the payrollTypeUpdate to set */
  public void setPayrollTypeUpdate(String payrollTypeUpdate) {
    this.payrollTypeUpdate = payrollTypeUpdate;
  }

  /** @return the payrollTypeCreate */
  public String getPayrollTypeCreate() {
    return payrollTypeCreate;
  }

  /** @param payrollTypeCreate the payrollTypeCreate to set */
  public void setPayrollTypeCreate(String payrollTypeCreate) {
    this.payrollTypeCreate = payrollTypeCreate;
  }

  /** @return the hnftpValueUpdate */
  public String getHnftpValueUpdate() {
    return hnftpValueUpdate;
  }

  /** @param hnftpValueUpdate the hnftpValueUpdate to set */
  public void setHnftpValueUpdate(String hnftpValueUpdate) {
    this.hnftpValueUpdate = hnftpValueUpdate;
  }

  /** @return the hnftpValueCreate */
  public String getHnftpValueCreate() {
    return hnftpValueCreate;
  }

  /** @param hnftpValueCreate the hnftpValueCreate to set */
  public void setHnftpValueCreate(String hnftpValueCreate) {
    this.hnftpValueCreate = hnftpValueCreate;
  }

  /** @return the originalHnftp */
  public String getOriginalHnftp() {
    return originalHnftp;
  }

  /** @param originalHnftp the originalHnftp to set */
  public void setOriginalHnftp(String originalHnftp) {
    this.originalHnftp = originalHnftp;
  }

  /** @return the payrollTypes */
  public Map<String, String> getPayrollTypes() {
    return payrollTypes;
  }

  public void onPayrollTypeUpdate() {
    if (payrollTypeUpdate != null && !payrollTypeUpdate.equals("")) {
      hnftpValueUpdate = payrollTypeUpdate;
      if (!hnftpValueUpdate.equals("HNFile")) {
        selectedMembership.setHnftpAccount(hnftpValueUpdate);
      } else if (!originalHnftp.equalsIgnoreCase("DATA ENTRY")
          && !originalHnftp.equalsIgnoreCase("NOT ELIGIBLE")) {
        if (!originalHnftp.equals("HNFile") || originalHnftp != null) {
          hnftpValueUpdate = originalHnftp;
        }
        selectedMembership.setHnftpAccount(originalHnftp);
      } else {
        selectedMembership.setHnftpAccount("");
        hnftpValueUpdate = "";
      }
    } else {
      hnftpValueUpdate = "";
    }
  }

  public void onPayrollTypeCreate() {
    if (payrollTypeCreate != null && !payrollTypeCreate.equals("")) {
      hnftpValueCreate = payrollTypeCreate;
      if (!hnftpValueCreate.equals("HNFile")) {
        newMembership.setHnftpAccount(hnftpValueCreate);
      } else {
        newMembership.setHnftpAccount("");
      }
    } else hnftpValueCreate = "";
  }
}
