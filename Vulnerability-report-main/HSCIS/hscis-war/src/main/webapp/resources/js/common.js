function onGovMenuClick() {
  $('div.navbar-government-header-button,.government-menu-close-button').on('click', toggleGov);
}
function toggleGov() {
  var m = document.getElementById('government-menu');
  if (m.style.display == 'none') {
    m.style.display = 'block';
    m.style.visibility = 'visible';
  } else {
    m.style.display = 'none';
    m.style.visibility = 'hidden';
  }

  var d = document.querySelector('div.navbar-government-header-button span');
  d.classList.toggle('arrow-down');
  d.classList.toggle('arrow-up');
}

function confirmExit() {
  return confirm("Please confirm you want to sign out. \nThis will also end all other active Keycloak, PHSA, or SiteMinder sessions you have open.");
}

function adjustMainContentHeight() {
  var minimumContentHeight = $("html").height() - $("#navbar").height() - $("#footer").height();
  $("#main-layout").attr("style", "min-height: " + minimumContentHeight + "px;");
}

/**
 * Returns the PrimefacesWidget from ID
 * @param id
 * @returns {*}
 */
function getWidgetVarById(id) {
  for (var propertyName in PrimeFaces.widgets) {
    var widget = PrimeFaces.widgets[propertyName];
    if (widget && widget.id === id) {
      return widget;
    }
  }
}

/**
 * Hides all Primefaces message box
 * @returns
 */
function clearMessages() {
  $('.ui-messages-close').each(function (i) {
    this.click();
  });
}

$(document).ready(function () {
  /**
   * Menu Navigation JS
   * Ensure parent stays active when a user hovers over expanded menu
   */
  $('li.dropdown').mouseenter(function () {
    $(this).toggleClass('active-dropdown');
  });

  $('li.dropdown').mouseleave(function () {
    $(this).toggleClass('active-dropdown');
  });

  /**
   * Fix a primefaces bug 
   * Clicking the scrollbar of an autocomplete dropdown closes the window
   */
  $('body').on('mousedown', '.ui-autocomplete-panel', function (event) {
    event.stopImmediatePropagation();
  });

  adjustMainContentHeight();
});

$(window).resize(function () {
  adjustMainContentHeight();
});

// Session Management
const TIMEOUT = 1920000; // 32 MINS slightly longer than KC session timeout, 1 minute less than timeout in web.xml
const ACTIVITY_CHECK_INTERVAL = 60000; // 1 min
const MAX_TIME_REMAINING_BEFORE_GROWL = 120000; // growl will be shown when this many seconds are remaining in the session

$(document).ready(function () {
  $.active = false;
  $.growl = false;
  $.elapsed = 0;
  $('body').bind('click keypress', function () {
    $.active = true;
  });
  checkActivity();
  setInterval(checkActivity, ACTIVITY_CHECK_INTERVAL); // function, interval
});

function checkActivity() {
  if ($.active) {
    $.elapsed = 0;
    $.active = false;
    $.growl = false;
    PF('timeoutWarning').removeAll();
    extendSession(); // p:remoteCommand in gov30Template.xhtml
  }
  if ($.elapsed < TIMEOUT) {
    $.elapsed += ACTIVITY_CHECK_INTERVAL;
    // console.log($.elapsed + " " + new Date());

    if ($.elapsed > (TIMEOUT - MAX_TIME_REMAINING_BEFORE_GROWL) && $.growl === false) {
      PF('timeoutWarning').show([{
          "summary": "Your session is about to expire",
          "detail": "Please continue using the application to extend your session",
          "severity": "warn"}]);
      $.growl = true;
    }
  } else {
    endSession().then(() => location.reload());
  }
}