package ca.bc.gov.health.hscis.service;

import ca.bc.gov.health.hscis.dto.FileSubmission;
import ca.bc.gov.health.hscis.dto.SubmissionReport;
import ca.bc.gov.health.hscis.exception.HscisException;
import ca.bc.gov.health.hscis.service.helper.HscisSfdsHelper;
import com.jcraft.jsch.ChannelSftp.LsEntry;
import jakarta.ejb.LocalBean;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.stream.Collectors;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** Service for SFDS related operations */
@Stateless
@LocalBean
public class HscisFileSubmissionService {
  private static Logger logger = LoggerFactory.getLogger(HscisFileSubmissionService.class);

  @Inject private HscisSfdsHelper sfdsHelper;

  private final String sftpPathIn = "/hnet/clients/%s/toclient";
  private final String sftpPathOut = "/hnet/clients/%s";

  /**
   * Builds the full SFDS path for a mailbox
   *
   * @param mailbox
   * @param isInbox true for inbox path, false for outbox path
   * @return
   */
  protected String buildSfdsPath(String mailbox, boolean isInbox) {
    if (isInbox) {
      return String.format(sftpPathIn, mailbox);
    } else {
      return String.format(sftpPathOut, mailbox);
    }
  }

  /**
   * Builds a payroll submission file name. The load script needs a certain name format to recognize
   * it as a payroll extract file. The format is HSxxxYQ.yyyymmmdd_hhmmss.txt where
   * <li>HS: 'HS' prefix
   * <li>xxx: mailbox name
   * <li>Y: last digit of current year
   * <li>Q: quarter as 1 to 4
   * <li>yyyymmmdd_hhmmss: current LocalDate/time
   *
   * @param mailbox Mailbox id
   * @param year Payroll year
   * @param quarter Quarter in Qx format (not validated, assumes one of "Q1", "Q2", "Q3" or "Q4")
   * @return
   */
  public String buildPayrollFilename(String mailbox, Integer year, String quarter) {
    // Assert parameter valid
    if (StringUtils.isBlank(mailbox)) {
      throw new IllegalArgumentException("Null mailbox");
    }
    if (year == null) {
      throw new IllegalArgumentException("Null year");
    }
    if (StringUtils.isBlank(quarter)) {
      throw new IllegalArgumentException("Null quarter");
    }

    String lastYearDigit = StringUtils.right(String.valueOf(year), 1);
    String lastQuarterDigit = StringUtils.right(quarter, 1);

    String filename =
        String.join(
            "",
            "HS",
            mailbox,
            lastYearDigit,
            lastQuarterDigit,
            ".",
            LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss")),
            ".txt");
    return filename;
  }

  /**
   * List all the validations reports for a given IN mailbox.
   *
   * @param mailbox
   * @return
   * @throws HscisException
   */
  public List<SubmissionReport> listValidationReports(String mailbox) throws HscisException {

    String sftpPath = buildSfdsPath(mailbox, true);

    List<LsEntry> directoryEntries = sfdsHelper.listDirectoryEntries(sftpPath);

    List<SubmissionReport> fileList =
        directoryEntries.stream()
            .filter(e -> sfdsHelper.isListedFile(e))
            .map(
                f -> {
                  return new SubmissionReport(
                      sfdsHelper.getFilename(f),
                      sfdsHelper.getFileSize(f),
                      sfdsHelper.getModifiedTime(f),
                      "E. Corp", // TODO: Get corp
                      true); // TODO: Set valid/invalid
                })
            .collect(Collectors.toList());

    return fileList;
  }

  /**
   * Submits a payroll extract file to SFDS.
   *
   * @param submittedFile
   * @throws HscisException
   */
  public void submitFile(FileSubmission submittedFile) throws HscisException {
    // Assert parameter valid
    if (submittedFile == null) {
      throw new IllegalArgumentException("Null parameter");
    }
    if (StringUtils.isBlank(submittedFile.getMailbox())) {
      throw new IllegalArgumentException("Null mailbox");
    }
    if (StringUtils.isBlank(submittedFile.getFilename())) {
      throw new IllegalArgumentException("Null filename");
    }

    String sftpPath = buildSfdsPath(submittedFile.getMailbox(), false);
    sfdsHelper.uploadFile(submittedFile.getStream(), submittedFile.getFilename(), sftpPath);
  }

  /**
   * Reads a file from SFDS. Returns a pdf file.
   *
   * @param mailbox
   * @param filename
   * @return File read from SFDS (pdf)
   * @throws HscisException
   */
  public byte[] downloadFile(String mailbox, String filename) throws HscisException {
    // Assert parameter valid
    if (StringUtils.isBlank(mailbox)) {
      throw new IllegalArgumentException("Null mailbox");
    }
    if (StringUtils.isBlank(filename)) {
      throw new IllegalArgumentException("Null filename");
    }

    String sftpPath = buildSfdsPath(mailbox, true);
    return sfdsHelper.downloadFile(filename, sftpPath);
  }

  /**
   * Reads multiple files from SFDS. Returns zip file containing pdf files.
   *
   * @param mailbox
   * @param filenames
   * @return Zip file with files read from SFDS (pdf).
   * @throws HscisException
   */
  public byte[] downloadFiles(String mailbox, List<String> filenames) throws HscisException {
    // Assert parameter valid
    if (StringUtils.isBlank(mailbox)) {
      throw new IllegalArgumentException("Null mailbox");
    }
    if (filenames == null) {
      throw new IllegalArgumentException("Null filenames");
    }

    String sftpPath = buildSfdsPath(mailbox, true);
    return sfdsHelper.downloadFiles(filenames, sftpPath);
  }

  public void deleteFiles(String mailbox, List<String> filenames) throws HscisException {
    if (filenames == null) {
      throw new IllegalArgumentException("Null filenames");
    }

    String sftpPath = buildSfdsPath(mailbox, true);
    sfdsHelper.deleteFiles(filenames, sftpPath);
  }
}
