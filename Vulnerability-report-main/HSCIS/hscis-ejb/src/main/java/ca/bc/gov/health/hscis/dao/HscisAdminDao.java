package ca.bc.gov.health.hscis.dao;

import ca.bc.gov.health.hscis.entity.HcdAnnouncements;
import ca.bc.gov.health.hscis.entity.HcdClassification;
import ca.bc.gov.health.hscis.entity.HcdDesignatedGroup;
import ca.bc.gov.health.hscis.entity.HcdFundingSources;
import ca.bc.gov.health.hscis.entity.HcdGender;
import ca.bc.gov.health.hscis.entity.HcdHealthAuthority;
import ca.bc.gov.health.hscis.entity.HcdJobStatus;
import ca.bc.gov.health.hscis.entity.HcdMembership;
import ca.bc.gov.health.hscis.entity.HcdMembershipType;
import ca.bc.gov.health.hscis.entity.HcdMisFuncCentAccnts;
import ca.bc.gov.health.hscis.entity.HcdMisSecStatAccnts;
import ca.bc.gov.health.hscis.entity.HcdOrganizationStatus;
import ca.bc.gov.health.hscis.entity.HcdPeriodConfirmation;
import ca.bc.gov.health.hscis.entity.HcdServiceType;
import ca.bc.gov.health.hscis.entity.HcdTerminationCode;
import ca.bc.gov.health.hscis.entity.HcdUnion;
import ca.bc.gov.health.hscis.entity.HcdUploads;
import ca.bc.gov.health.hscis.entity.HcdValidationRules;
import jakarta.faces.application.FacesMessage;
import jakarta.inject.Named;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.persistence.PersistenceContext;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeFormatterBuilder;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.Locale;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Named
public class HscisAdminDao {

  @PersistenceContext(unitName = "hscis-ejb_pu")
  private EntityManager em;

  private static Logger logger = LoggerFactory.getLogger(HscisAdminDao.class);

  public static final String CUSTOM_DATE_FORMAT = "MMM-dd-yyyy";

  /**
   * The custom date formatter that formats or parses a date such as 'JAN-01-2013'. This is the
   * default format displayed in all HSCIS datatables.
   */
  private static final DateTimeFormatter CUSTOM_DATE;

  static {
    CUSTOM_DATE =
        new DateTimeFormatterBuilder()
            .parseCaseInsensitive()
            .appendPattern(CUSTOM_DATE_FORMAT)
            .toFormatter(Locale.ENGLISH);
  }

  public List<HcdMembership> refreshMembershipList() {
    return em.createNamedQuery("HcdMembership.findAll", HcdMembership.class).getResultList();
  }

  public List<HcdUploads> refreshHNFileConfirmationsList() {
    return em.createNamedQuery("HcdUploads.findAll", HcdUploads.class).getResultList();
  }

  public List<HcdValidationRules> refreshValidationsList() {
    return em.createNamedQuery("HcdValidationRules.findAll", HcdValidationRules.class)
        .getResultList();
  }

  public List<HcdPeriodConfirmation> refreshDataEntryConfirmationsList() {
    return em.createNamedQuery("HcdPeriodConfirmation.findAll", HcdPeriodConfirmation.class)
        .getResultList();
  }

  public List<HcdClassification> refreshClassificationCodesList() {
    return em.createNamedQuery("HcdClassification.findAll", HcdClassification.class)
        .getResultList();
  }

  public List<HcdMembershipType> refreshMembershipTypesList() {
    return em.createNamedQuery("HcdMembershipType.findAll", HcdMembershipType.class)
        .getResultList();
  }

  public List<HcdHealthAuthority> refreshHealthAuthoritiesList() {
    return em.createNamedQuery("HcdHealthAuthority.findAll", HcdHealthAuthority.class)
        .getResultList();
  }

  public List<HcdOrganizationStatus> refreshOrganizationStatusList() {
    return em.createNamedQuery("HcdOrganizationStatus.findAll", HcdOrganizationStatus.class)
        .getResultList();
  }

  public List<HcdDesignatedGroup> refreshDesignatedGroupsList() {
    return em.createNamedQuery("HcdDesignatedGroup.findAll", HcdDesignatedGroup.class)
        .getResultList();
  }

  public List<HcdGender> refreshGenderList() {
    return em.createNamedQuery("HcdGender.findAll", HcdGender.class).getResultList();
  }

  public List<HcdJobStatus> refreshJobStatusList() {
    return em.createNamedQuery("HcdJobStatus.findAll", HcdJobStatus.class).getResultList();
  }

  public List<HcdUnion> refreshUnionsList() {
    return em.createNamedQuery("HcdUnion.findAll", HcdUnion.class).getResultList();
  }

  public List<HcdTerminationCode> refreshTerminationCodesList() {
    return em.createNamedQuery("HcdTerminationCode.findAll", HcdTerminationCode.class)
        .getResultList();
  }

  public List<HcdFundingSources> refreshFundingSourceCodesList() {
    return em.createNamedQuery("HcdFundingSources.findAll", HcdFundingSources.class)
        .getResultList();
  }

  public List<HcdMisFuncCentAccnts> refreshMisFunctionalCodesList() {
    return em.createNamedQuery("HcdMisFuncCentAccnts.findAll", HcdMisFuncCentAccnts.class)
        .getResultList();
  }

  public List<HcdMisSecStatAccnts> refreshMisSecondaryCodesList() {
    return em.createNamedQuery("HcdMisSecStatAccnts.findAll", HcdMisSecStatAccnts.class)
        .getResultList();
  }

  public List<HcdServiceType> refreshServiceTypeList() {
    return em.createNamedQuery("HcdServiceType.findAll", HcdServiceType.class).getResultList();
  }

  public List<HcdHealthAuthority> listHealthAuthorityCodes() {
    return em.createNamedQuery("HcdHealthAuthority.findAll", HcdHealthAuthority.class)
        .getResultList();
  }

  public List<HcdDesignatedGroup> listDesignatedGroups() {
    return em.createNamedQuery("HcdDesignatedGroup.findAll", HcdDesignatedGroup.class)
        .getResultList();
  }

  public List<HcdMembershipType> listMembershipTypes() {
    return em.createNamedQuery("HcdMembershipType.findAll", HcdMembershipType.class)
        .getResultList();
  }

  public List<HcdOrganizationStatus> listOrganizationStatusCodes() {
    return em.createNamedQuery("HcdOrganizationStatus.findAll", HcdOrganizationStatus.class)
        .getResultList();
  }

  public List<HcdServiceType> listServiceTypeCodes() {
    return em.createNamedQuery("HcdServiceType.findAll", HcdServiceType.class).getResultList();
  }

  public List<Long> listSiteIdByCorpId(Object id) {
    return em.createNamedQuery("HcdMembership.findSiteByCorp", Long.class)
        .setParameter("corpId", id)
        .getResultList();
  }

  public HcdAnnouncements findAnnouncement() {
    try {
      return em.createNamedQuery("HcdAnnouncements.findAnnouncement", HcdAnnouncements.class)
          .getSingleResult();
    } catch (NoResultException e) {
      return new HcdAnnouncements();
    }
  }

  public HcdClassification findClassificationCodeById(Object id) {
    try {
      return em.createNamedQuery("HcdClassification.findById", HcdClassification.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdMembership findMembershipByHscisId(Object id) {
    try {
      return em.createNamedQuery("HcdMembership.findByHscisId", HcdMembership.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdMembership findMembershipBySiteId(Object id) {
    try {
      return em.createNamedQuery("HcdMembership.findBySite", HcdMembership.class)
          .setParameter("siteId", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdMembershipType findMembershipTypeById(Object id) {
    try {
      return em.createNamedQuery("HcdMembershipType.findById", HcdMembershipType.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdHealthAuthority findHealthAuthorityById(Object id) {
    try {
      return em.createNamedQuery("HcdHealthAuthority.findById", HcdHealthAuthority.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdOrganizationStatus findOrganizationStatusById(Object id) {
    try {
      return em.createNamedQuery("HcdOrganizationStatus.findById", HcdOrganizationStatus.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdDesignatedGroup findDesignatedGroupById(Object id) {
    try {
      return em.createNamedQuery("HcdDesignatedGroup.findById", HcdDesignatedGroup.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdGender findGenderById(Object id) {
    try {
      return em.createNamedQuery("HcdGender.findById", HcdGender.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdJobStatus findJobStatusById(Object id) {
    try {
      return em.createNamedQuery("HcdJobStatus.findById", HcdJobStatus.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdUnion findUnionById(Object id) {
    try {
      return em.createNamedQuery("HcdUnion.findById", HcdUnion.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdTerminationCode findTerminationCodeById(Object id) {
    try {
      return em.createNamedQuery("HcdTerminationCode.findById", HcdTerminationCode.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdFundingSources findFundingSourceCodeById(Object id) {
    try {
      return em.createNamedQuery("HcdFundingSources.findById", HcdFundingSources.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdMisFuncCentAccnts findMisFunctionalCodeById(Object id) {
    try {
      return em.createNamedQuery("HcdMisFuncCentAccnts.findById", HcdMisFuncCentAccnts.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdMisSecStatAccnts findMisSecondaryCodeById(Object id) {
    try {
      return em.createNamedQuery("HcdMisSecStatAccnts.findById", HcdMisSecStatAccnts.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdServiceType findServiceTypeById(Object id) {
    try {
      return em.createNamedQuery("HcdServiceType.findById", HcdServiceType.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  /**
   * Parse a String that follows the common date formats for HSCIS (MMM-dd-yyyy, yyyy-MM-dd,
   * yyyyMMdd) into a LocalDate
   *
   * @param date
   * @return the parsed LocalDate
   */
  private LocalDate parseDate(String date) {

    LocalDate parsedDate = null;

    try {
      if (date.contains("-")) {
        if (date.matches("[a-zA-Z]{3}-[0-9]{2}-[0-9]{4}")) { // E.g. JAN-01-2013 search
          parsedDate = LocalDate.parse(date, CUSTOM_DATE);
        } else {
          parsedDate = LocalDate.parse(date, DateTimeFormatter.ISO_DATE);
        }
      } else if (date.matches("[0-9]{8}")) { // E.g. 20130101 search
        parsedDate = LocalDate.parse(date, DateTimeFormatter.BASIC_ISO_DATE);
      }
    } catch (DateTimeParseException e) {
      parsedDate = null;
    }
    return parsedDate;
  }

  public List<HcdMembership> searchMembershipList(String searchValue) {

    searchValue = searchValue.trim();
    if (searchValue.isBlank() || searchValue.equals("*")) {
      return refreshMembershipList();
    } else {
      searchValue = "%" + searchValue.toUpperCase() + "%";
      return em.createNamedQuery("HcdMembership.findAllSearch", HcdMembership.class)
          .setParameter("searchValue", searchValue)
          .getResultList();
    }
  }

  public List<HcdUploads> searchHNFileConfirmationsList(String searchValue) {

    LocalDate parsedDate = LocalDate.MAX; // Set non-null value to pass equality check in query

    searchValue = searchValue.trim();
    if (searchValue.isBlank() || searchValue.equals("*")) {
      return refreshHNFileConfirmationsList();
    } else {
      parsedDate = parseDate(searchValue);
      if (parsedDate == null) {
        searchValue = "%" + searchValue.toUpperCase() + "%";
      } else {
        searchValue = parsedDate.format(DateTimeFormatter.BASIC_ISO_DATE);
      }
    }
    return em.createNamedQuery("HcdUploads.findAllSearch", HcdUploads.class)
        .setParameter("searchValue", searchValue)
        .setParameter("searchDate", parsedDate)
        .getResultList();
  }

  public List<HcdValidationRules> searchValidationsList(String searchValue) {

    searchValue = searchValue.trim();
    if (searchValue.isBlank() || searchValue.equals("*")) {
      return refreshValidationsList();
    } else {
      searchValue = "%" + searchValue.toUpperCase() + "%";
      return em.createNamedQuery("HcdValidationRules.findAllSearch", HcdValidationRules.class)
          .setParameter("searchValue", searchValue)
          .getResultList();
    }
  }

  public List<HcdPeriodConfirmation> searchDataEntryConfirmationsList(String searchValue) {

    LocalDate parsedDate = LocalDate.MAX; // Set non-null value to pass equality check in query

    searchValue = searchValue.trim();
    if (searchValue.isBlank() || searchValue.equals("*")) {
      return refreshDataEntryConfirmationsList();
    } else {
      parsedDate = parseDate(searchValue);
      if (parsedDate == null) {
        searchValue = "%" + searchValue.toUpperCase() + "%";
      }
    }
    return em.createNamedQuery("HcdPeriodConfirmation.findAllSearch", HcdPeriodConfirmation.class)
        .setParameter("searchValue", searchValue)
        .setParameter("searchDate", parsedDate)
        .getResultList();
  }

  public List<HcdClassification> searchClassificationCodesList(String searchValue) {

    searchValue = searchValue.trim();
    if (searchValue.isBlank() || searchValue.equals("*")) {
      return refreshClassificationCodesList();
    } else {
      searchValue = "%" + searchValue.toUpperCase() + "%";
      return em.createNamedQuery("HcdClassification.findAllSearch", HcdClassification.class)
          .setParameter("searchValue", searchValue)
          .getResultList();
    }
  }

  public List<HcdMisFuncCentAccnts> searchMisFunctionalCodesList(String searchValue) {

    searchValue = searchValue.trim();
    if (searchValue.isBlank() || searchValue.equals("*")) {
      return refreshMisFunctionalCodesList();
    } else {
      searchValue = "%" + searchValue.toUpperCase() + "%";
      return em.createNamedQuery("HcdMisFuncCentAccnts.findAllSearch", HcdMisFuncCentAccnts.class)
          .setParameter("searchValue", searchValue)
          .getResultList();
    }
  }

  public List<HcdMisSecStatAccnts> searchMisSecondaryCodesList(String searchValue) {

    searchValue = searchValue.trim();
    if (searchValue.isBlank() || searchValue.equals("*")) {
      return refreshMisSecondaryCodesList();
    } else {
      searchValue = "%" + searchValue.toUpperCase() + "%";
      return em.createNamedQuery("HcdMisSecStatAccnts.findAllSearch", HcdMisSecStatAccnts.class)
          .setParameter("searchValue", searchValue)
          .getResultList();
    }
  }

  public FacesMessage deleteMembership(HcdMembership membership) {
    try {
      HcdMembership toRemove = em.merge(membership);
      em.remove(toRemove);
      em.flush();
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
    } catch (Exception e) {
      logger.error("deleteMembership: ", e);
      return new FacesMessage(
          FacesMessage.SEVERITY_ERROR, "Record could not be deleted: Child record(s) found", null);
    }
  }

  public FacesMessage deleteHNFileConfirmation(HcdUploads upload) {
    try {
      HcdUploads toRemove = em.merge(upload);
      em.remove(toRemove);
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
    } catch (Exception e) {
      logger.error("deleteHNFileConfirmation: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be deleted", null);
    }
  }

  public FacesMessage deleteDataEntryConfirmation(HcdPeriodConfirmation periodConfirmation) {
    try {
      HcdPeriodConfirmation toRemove = em.merge(periodConfirmation);
      em.remove(toRemove);
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
    } catch (Exception e) {
      logger.error("deleteDataEntryConfirmation: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be deleted", null);
    }
  }

  public FacesMessage publishAnnouncement(HcdAnnouncements announcement) {
    try {
      em.merge(announcement);
      em.flush();
      return new FacesMessage(
          FacesMessage.SEVERITY_INFO, "The content was successfully published", null);
    } catch (Exception e) {
      logger.error("publishAnnouncement: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Content could not be published", null);
    }
  }

  public FacesMessage updateMembership(HcdMembership membership) {
    try {
      em.merge(membership);
      em.flush();
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully updated", null);
    } catch (Exception e) {
      logger.error("updateMembership: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be updated", null);
    }
  }

  public FacesMessage updateValidationRow(HcdValidationRules validationRule) {
    try {
      em.merge(validationRule);
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully updated", null);
    } catch (Exception e) {
      logger.error("updateValidationRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be updated", null);
    }
  }

  public FacesMessage updateClassificationCodeRow(HcdClassification classification) {
    try {
      em.merge(classification);
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully updated", null);
    } catch (Exception e) {
      logger.error("updateClassificationRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be updated", null);
    }
  }

  public FacesMessage updateMembershipTypeRow(HcdMembershipType membershipType) {
    try {
      em.merge(membershipType);
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully updated", null);
    } catch (Exception e) {
      logger.error("updateMembershipTypeRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be updated", null);
    }
  }

  public FacesMessage updateHealthAuthorityRow(HcdHealthAuthority healthAuthority) {
    try {
      em.merge(healthAuthority);
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully updated", null);
    } catch (Exception e) {
      logger.error("updateHealthAuthorityRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be updated", null);
    }
  }

  public FacesMessage updateOrganizationStatusRow(HcdOrganizationStatus organizationStatus) {
    try {
      em.merge(organizationStatus);
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully updated", null);
    } catch (Exception e) {
      logger.error("updateOrganizationStatusRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be updated", null);
    }
  }

  public FacesMessage updateDesignatedGroupRow(HcdDesignatedGroup designatedGroup) {
    try {
      em.merge(designatedGroup);
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully updated", null);
    } catch (Exception e) {
      logger.error("updateDesignatedGroupRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be updated", null);
    }
  }

  public FacesMessage updateGenderRow(HcdGender gender) {
    try {
      em.merge(gender);
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully updated", null);
    } catch (Exception e) {
      logger.error("updateGenderRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be updated", null);
    }
  }

  public FacesMessage updateJobStatusRow(HcdJobStatus jobStatus) {
    try {
      em.merge(jobStatus);
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully updated", null);
    } catch (Exception e) {
      logger.error("updateJobStatusRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be updated", null);
    }
  }

  public FacesMessage updateUnionRow(HcdUnion union) {
    try {
      em.merge(union);
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully updated", null);
    } catch (Exception e) {
      logger.error("updateUnionRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be updated", null);
    }
  }

  public FacesMessage updateTerminationCodeRow(HcdTerminationCode terminationCode) {
    try {
      em.merge(terminationCode);
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully updated", null);
    } catch (Exception e) {
      logger.error("updateTerminationCodeRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be updated", null);
    }
  }

  public FacesMessage updateFundingSourceCodeRow(HcdFundingSources fundingSource) {
    try {
      em.merge(fundingSource);
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully updated", null);
    } catch (Exception e) {
      logger.error("updateFundingSourceCodeRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be updated", null);
    }
  }

  public FacesMessage updateMisFunctionalCodeRow(HcdMisFuncCentAccnts misFuncCentAccnt) {
    try {
      em.merge(misFuncCentAccnt);
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully updated", null);
    } catch (Exception e) {
      logger.error("updateMisFunctionalCodeRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be updated", null);
    }
  }

  public FacesMessage updateMisSecondaryCodeRow(HcdMisSecStatAccnts misSecStatAccnt) {
    try {
      em.merge(misSecStatAccnt);
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully updated", null);
    } catch (Exception e) {
      logger.error("updateMisSecondaryCodeRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be updated", null);
    }
  }

  public FacesMessage updateServiceTypeRow(HcdServiceType serviceType) {
    try {
      em.merge(serviceType);
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully updated", null);
    } catch (Exception e) {
      logger.error("updateServiceTypeRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be updated", null);
    }
  }

  public FacesMessage createClassificationCodeRow(HcdClassification classification) {
    try {
      if (findClassificationCodeById(classification.getClassificationCode()) == null) {
        em.persist(classification);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully created", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record already exists", null);
      }
    } catch (Exception e) {
      logger.error("createClassificationRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be created", null);
    }
  }

  public FacesMessage createMembershipRow(HcdMembership membership) {
    try {
      if (findMembershipBySiteId(membership.getSiteEmployerNumber()) == null) {
        em.persist(membership);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully created", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Site Employer # already exists", null);
      }
    } catch (Exception e) {
      logger.error("createMembershipRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be created", null);
    }
  }

  public FacesMessage createMembershipTypeRow(HcdMembershipType membershipType) {
    try {
      if (findMembershipTypeById(membershipType.getMemberTypeCode()) == null) {
        em.persist(membershipType);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully created", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Type for this record already exists", null);
      }
    } catch (Exception e) {
      logger.error("createMembershipTypeRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be created", null);
    }
  }

  public FacesMessage createHealthAuthorityRow(HcdHealthAuthority healthAuthority) {
    try {
      if (findHealthAuthorityById(healthAuthority.getHealthAuthorityNumber()) == null) {
        em.persist(healthAuthority);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully created", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Number for this record already exists", null);
      }
    } catch (Exception e) {
      logger.error("createHealthAuthorityRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be created", null);
    }
  }

  public FacesMessage createOrganizationStatusRow(HcdOrganizationStatus organizationStatus) {
    try {
      if (findOrganizationStatusById(organizationStatus.getOrganizationStatusCode()) == null) {
        em.persist(organizationStatus);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully created", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record already exists", null);
      }
    } catch (Exception e) {
      logger.error("createOrganizationStatusRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be created", null);
    }
  }

  public FacesMessage createDesignatedGroupRow(HcdDesignatedGroup designatedGroup) {
    try {
      if (findDesignatedGroupById(designatedGroup.getDesignatedGroupCode()) == null) {
        em.persist(designatedGroup);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully created", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record already exists", null);
      }
    } catch (Exception e) {
      logger.error("createDesignatedGroupRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be created", null);
    }
  }

  public FacesMessage createGenderRow(HcdGender gender) {
    try {
      if (findGenderById(gender.getGenderCode()) == null) {
        em.persist(gender);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully created", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record already exists", null);
      }
    } catch (Exception e) {
      logger.error("createGenderRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be created", null);
    }
  }

  public FacesMessage createJobStatusRow(HcdJobStatus jobStatus) {
    try {
      if (findJobStatusById(jobStatus.getJobStatusCode()) == null) {
        em.persist(jobStatus);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully created", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record already exists", null);
      }
    } catch (Exception e) {
      logger.error("createJobStatusRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be created", null);
    }
  }

  public FacesMessage createUnionRow(HcdUnion union) {
    try {
      if (findUnionById(union.getUnionCode()) == null) {
        em.persist(union);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully created", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record already exists", null);
      }
    } catch (Exception e) {
      logger.error("createUnionRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be created", null);
    }
  }

  public FacesMessage createTerminationCodeRow(HcdTerminationCode terminationCode) {
    try {
      if (findTerminationCodeById(terminationCode.getTerminationCode()) == null) {
        em.persist(terminationCode);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully created", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record already exists", null);
      }
    } catch (Exception e) {
      logger.error("createTerminationCodeRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be created", null);
    }
  }

  public FacesMessage createFundingSourceCodeRow(HcdFundingSources fundingSource) {
    try {
      if (findFundingSourceCodeById(fundingSource.getFundingSourceCode()) == null) {
        em.persist(fundingSource);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully created", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record already exists", null);
      }
    } catch (Exception e) {
      logger.error("createFundingSourceCodeRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be created", null);
    }
  }

  public FacesMessage createMisFunctionalCodeRow(HcdMisFuncCentAccnts misFuncCentAccnt) {
    try {
      if (findMisFunctionalCodeById(misFuncCentAccnt.getAccount()) == null) {
        em.persist(misFuncCentAccnt);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully created", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Account for this record already exists", null);
      }
    } catch (Exception e) {
      logger.error("createMisFunctionalCodeRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be created", null);
    }
  }

  public FacesMessage createMisSecondaryCodeRow(HcdMisSecStatAccnts misSecStatAccnt) {
    try {
      if (findMisSecondaryCodeById(misSecStatAccnt.getAccount()) == null) {
        em.persist(misSecStatAccnt);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully created", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Account for this record already exists", null);
      }
    } catch (Exception e) {
      logger.error("createMisSecondaryCodeRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be created", null);
    }
  }

  public FacesMessage createServiceTypeRow(HcdServiceType serviceType) {
    try {
      if (findServiceTypeById(serviceType.getCode()) == null) {
        em.persist(serviceType);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully created", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record already exists", null);
      }
    } catch (Exception e) {
      logger.error("createServiceTypeRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be created", null);
    }
  }
}
