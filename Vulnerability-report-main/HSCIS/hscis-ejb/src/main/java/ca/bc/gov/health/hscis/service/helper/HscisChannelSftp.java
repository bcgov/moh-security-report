package ca.bc.gov.health.hscis.service.helper;

import ca.bc.gov.health.hscis.exception.HscisException;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.ChannelSftp.LsEntry;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Properties;
import javax.naming.InitialContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HscisChannelSftp implements AutoCloseable {

  private static Logger logger = LoggerFactory.getLogger(HscisChannelSftp.class);

  private ChannelSftp sftpChannel;

  private Properties sfdsProperties;

  @SuppressWarnings("unused")
  private int transferMode = 0;

  private Session session;

  @SuppressWarnings("unused")
  private int timeout = 30000;

  private int port = 22;

  private String hostname;
  private String username;
  private String privKeyFile;
  private String knownHostsFile;

  public HscisChannelSftp() throws HscisException {
    init();
    connect();
  }

  private void init() throws HscisException {
    try {
      sfdsProperties = (Properties) new InitialContext().lookup("java:app/hscis/sfds_properties");
      if (sfdsProperties != null) {
        hostname = sfdsProperties.getProperty("hostname");
        username = sfdsProperties.getProperty("username");
        privKeyFile = sfdsProperties.getProperty("privKeyFile");
        knownHostsFile = sfdsProperties.getProperty("knownHostsFile");
        if (sfdsProperties.getProperty("timeout") != null) {
          timeout = Integer.valueOf(sfdsProperties.getProperty("timeout"));
        }
        if (sfdsProperties.getProperty("port") != null) {
          port = Integer.valueOf(sfdsProperties.getProperty("port"));
        }
      } else {
        throw new HscisException("JNDI hscis/sfds_properties not found.");
      }
    } catch (Exception ex) {
      throw new HscisException(ex.getMessage());
    }
  }

  /**
   * Connects to the SFDS server via SFTP
   *
   * @throws HscisException
   */
  public void connect() throws HscisException {
    try {
      JSch jsch = new JSch();
      jsch.addIdentity(privKeyFile);
      session = jsch.getSession(username, hostname, port);

      if (knownHostsFile != null && !knownHostsFile.isEmpty()) {
        jsch.setKnownHosts(knownHostsFile);
      } else {
        throw new HscisException("Cannot find the known host file");
      }

      // HNFTP SFTP server still proposes using ssh-rsa
      session.setConfig("server_host_key", session.getConfig("server_host_key") + ",ssh-rsa");
      session.setConfig(
          "PubkeyAcceptedAlgorithms", session.getConfig("PubkeyAcceptedAlgorithms") + ",ssh-rsa");

      session.connect();
      sftpChannel = (ChannelSftp) session.openChannel("sftp");
      sftpChannel.connect();

      if (sftpChannel == null || !sftpChannel.isConnected()) {
        throw new HscisException("Cannot connect to sftp using private keys");
      } else {
        logger.debug("Connected to SFTP server");
      }

    } catch (JSchException ex) {
      throw new HscisException(ex.getMessage());
    }
  }

  /**
   * Return if connected to the SFDS server
   *
   * @return
   */
  public boolean isConnected() {
    return (sftpChannel != null && sftpChannel.isConnected());
  }

  /**
   * Disconnects to the SFDS server
   *
   * @throws HscisException
   */
  public void disconnect() throws HscisException {
    try {
      sftpChannel.disconnect();
      session.disconnect();
      logger.debug("Disconnected from SFTP server");
    } catch (Exception ex) {
      throw new HscisException(ex.getMessage());
    }
  }

  @Override
  public void close() throws HscisException {
    if (isConnected()) {
      disconnect();
    }
  }

  @SuppressWarnings("unchecked")
  public List<LsEntry> ls(String remotePath) throws HscisException {
    try {
      logger.debug("SFDS ls: {}", remotePath);
      return sftpChannel.ls(remotePath);
    } catch (SftpException e) {
      throw new HscisException(e);
    }
  }

  public void put(InputStream file, String fullFilename) throws HscisException {
    try {
      logger.debug("SFDS upload: {}", fullFilename);
      sftpChannel.put(file, fullFilename);
    } catch (SftpException e) {
      throw new HscisException(e);
    }
  }

  public InputStream get(String fullFilename) throws HscisException {
    try {
      logger.debug("SFDS download: {}", fullFilename);
      return sftpChannel.get(fullFilename);
    } catch (SftpException e) {
      throw new HscisException(e);
    }
  }

  public void get(String fullFilename, OutputStream os) throws HscisException {
    try {
      logger.debug("SFDS download: {}", fullFilename);
      sftpChannel.get(fullFilename, os);
    } catch (SftpException e) {
      throw new HscisException(e);
    }
  }

  public void delete(String fullFilename) throws HscisException {
    try {
      logger.debug("SFDS delete: {}", fullFilename);
      sftpChannel.rm(fullFilename);
    } catch (SftpException e) {
      throw new HscisException(e);
    }
  }
}
