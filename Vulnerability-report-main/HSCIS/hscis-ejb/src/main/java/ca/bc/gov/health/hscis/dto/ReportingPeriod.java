package ca.bc.gov.health.hscis.dto;

import java.io.Serializable;
import java.time.LocalDate;
import java.time.Month;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import org.apache.commons.lang3.builder.EqualsBuilder;
import org.apache.commons.lang3.builder.HashCodeBuilder;

/**
 * Payroll Summary reporting period.
 *
 * <p>There are 2 periods per year (one for the first 6 months and one for all 12 months). From date
 * must be within +/- 22 days from Jan 1st (exception: for new members, from date can be more than
 * 22 days after Jan 1st). To date must be within +/- 22 days from Jun 30th for first period or
 * within +/- 22 days from Dec 31th for second period.
 */
public class ReportingPeriod implements Serializable, Comparable<ReportingPeriod> {

  private static final long serialVersionUID = 1L;

  private LocalDate fromDate;
  private LocalDate toDate;
  private Integer reportingYear;
  private ReportingPeriodCode periodCode;

  /**
   * Compare reporting periods using reportingYear and period number. <b>Note:</b> Periods with
   * different from-to dates can be equal if they fall in the same year/period.
   */
  public static final Comparator<ReportingPeriod> reportingPeriodComparator =
      Comparator.comparing(ReportingPeriod::getReportingYear)
          .thenComparing(p -> p.getPeriodCode().getNumber());

  // TODO: find better name
  protected static int REPORTING_PERIOD_RANGE = 22;

  public ReportingPeriod() {}

  /**
   * Creates a Reporting period. reportingYear and periodCode are calculated according to toDate.
   *
   * @param fromDate
   * @param toDate
   */
  public ReportingPeriod(LocalDate fromDate, LocalDate toDate) {
    super();
    this.fromDate = fromDate;
    this.toDate = toDate;
    calcYearPeriod(toDate);
  }

  /**
   * Validate the period (fromDate - toDate). The following rules are validated:
   * <li>To Date must be after From date
   * <li>To Date must be before or equal current date
   * <li>From Date must be within 22 days of January 1
   * <li>To Date must be within 22 days of June 30 or December 31'
   * <li>Period must not already exists (in progress or completed) <br>
   *     <b>Rules for new members:</b>
   * <li>From Date can be after 22 days before January 1 (current year)
   * <li>From Date cannot be before 22 days before January 1
   *
   * @param fromDate
   * @param toDate
   * @return List of all error messages, empty list for no errors
   * @throws IllegalArgumentException for null parameters
   */
  public static List<String> validatePeriod(LocalDate fromDate, LocalDate toDate) {
    return validatePeriod(fromDate, toDate, false);
  }

  public static List<String> validatePeriod(
      LocalDate fromDate, LocalDate toDate, boolean newMember) {
    // Assume non null values
    if (fromDate == null || toDate == null) {
      throw new IllegalArgumentException("Null values in validatePeriod");
    }

    List<String> errors = new ArrayList<>();

    if (!fromDate.isBefore(toDate)) {
      errors.add("Reporting To must be after Reporting From date");
    }

    if (toDate.isAfter(LocalDate.now())) {
      errors.add("Reporting To must be less than or equal to the Current Date");
    }

    LocalDate effectivePeriodStart = roundToJan1(fromDate);
    if (!newMember) {
      // This one is skipped for new members
      if (effectivePeriodStart == null) {
        errors.add(
            String.format(
                "Reporting From must be +/- 22 days from Jan 1st of reporting year",
                ReportingPeriod.REPORTING_PERIOD_RANGE));
      }
    } else {
      // for new member
      effectivePeriodStart = LocalDate.of(fromDate.getYear(), 1, 1);
    }

    // Try June 30
    LocalDate effectivePeriodEnd = roundToJun30(toDate);
    if (effectivePeriodEnd == null) {
      // Try Dec 30
      effectivePeriodEnd = roundToDec31(toDate);
      if (effectivePeriodEnd == null) {
        errors.add(
            String.format(
                "Reporting To must be +/- 22 days from June 30 or December 31",
                ReportingPeriod.REPORTING_PERIOD_RANGE));
      } else {
        // For last period, cannot exceed dec 31
        if (toDate.isAfter(effectivePeriodEnd)) {
          errors.add("Reporting To cannot exceed December 31");
        }
      }
    }

    if (effectivePeriodStart != null && effectivePeriodEnd != null) {
      if (effectivePeriodStart.getYear() != effectivePeriodEnd.getYear()) {
        errors.add("Reporting Period Range too large. Period must be for only 1 year");
      }
    }

    // if all passes, return empty list
    return errors;
  }

  /**
   * Calculate the reporting year and period according to toDate.
   *
   * @param toDate
   */
  protected void calcYearPeriod(LocalDate toDate) {
    this.reportingYear = calcReportingYear(toDate);
    this.periodCode = calcPeriodNumber(toDate);
  }

  /**
   * Calculate reporting year according to toDate.
   *
   * @param toDate
   */
  protected static Integer calcReportingYear(LocalDate toDate) {
    if (toDate != null) {
      return toDate.plusDays(-1L * REPORTING_PERIOD_RANGE).getYear();
    }
    return null;
  }

  /**
   * Calculate reporting year according to fromDate.
   *
   * @param fromDate
   */
  protected static Integer calcReportingYearFrom(LocalDate fromDate) {
    if (fromDate != null) {
      return fromDate.plusDays(REPORTING_PERIOD_RANGE).getYear();
    }
    return null;
  }

  /**
   * Calculate reporting period according to toDate.
   *
   * @param toDate
   */
  protected static ReportingPeriodCode calcPeriodNumber(LocalDate toDate) {
    if (toDate != null) {
      int month = toDate.getMonthValue();
      if (month >= 6 && month <= 7) {
        return ReportingPeriodCode.JAN_JUN;
      } else {
        return ReportingPeriodCode.JAN_DEC;
      }
    }
    return null;
  }

  /**
   * Round to nearest Jan 1 if within +/- 22 days from Jan 1.
   *
   * @param fromDate
   * @return null if more than +/- 22 days from Jan 1.
   */
  protected static LocalDate roundToJan1(LocalDate fromDate) {
    LocalDate jan1 = LocalDate.of(calcReportingYearFrom(fromDate), Month.JANUARY, 1);

    if (Math.abs(ChronoUnit.DAYS.between(jan1, fromDate))
        <= ReportingPeriod.REPORTING_PERIOD_RANGE) {
      return jan1;
    }

    // outside of +/- 22 days
    return null;
  }

  /**
   * Round to nearest Jun 30 if within +/- 22 days from Jun 30.
   *
   * @param toDate
   * @return null if more than +/- 22 days from Jun 30.
   */
  protected static LocalDate roundToJun30(LocalDate toDate) {
    LocalDate jun30 = LocalDate.of(calcReportingYear(toDate), Month.JUNE, 30);

    if (Math.abs(ChronoUnit.DAYS.between(jun30, toDate))
        <= ReportingPeriod.REPORTING_PERIOD_RANGE) {
      return jun30;
    }

    // outside of +/- 22 days
    return null;
  }

  /**
   * Round to nearest Dec 31 if within +/- 22 days from Dec 31.
   *
   * @param fromDate
   * @return null if more than +/- 22 days from Dec 31.
   */
  protected static LocalDate roundToDec31(LocalDate toDate) {
    LocalDate dec31 = LocalDate.of(calcReportingYear(toDate), Month.DECEMBER, 31);

    if (Math.abs(ChronoUnit.DAYS.between(dec31, toDate))
        <= ReportingPeriod.REPORTING_PERIOD_RANGE) {
      return dec31;
    }

    // outside of +/- 22 days
    return null;
  }

  @Override
  public int hashCode() {
    return new HashCodeBuilder().append(reportingYear).append(periodCode.getNumber()).toHashCode();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj instanceof ReportingPeriod) {
      final ReportingPeriod other = (ReportingPeriod) obj;
      return new EqualsBuilder()
          .append(reportingYear, other.reportingYear)
          .append(periodCode.getNumber(), other.periodCode.getNumber())
          .isEquals();
    } else {
      return false;
    }
  }

  @Override
  public int compareTo(ReportingPeriod other) {
    return reportingPeriodComparator.compare(this, other);
  }

  public LocalDate getFromDate() {
    return fromDate;
  }

  public void setFromDate(LocalDate fromDate) {
    this.fromDate = fromDate;
  }

  public LocalDate getToDate() {
    return toDate;
  }

  public void setToDate(LocalDate toDate) {
    this.toDate = toDate;
    // have to recalculate reporting year/period
    calcYearPeriod(toDate);
  }

  public Integer getReportingYear() {
    return reportingYear;
  }

  public ReportingPeriodCode getPeriodCode() {
    return periodCode;
  }
}
