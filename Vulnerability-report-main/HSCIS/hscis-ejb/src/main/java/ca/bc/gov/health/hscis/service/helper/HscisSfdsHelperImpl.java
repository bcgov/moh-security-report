package ca.bc.gov.health.hscis.service.helper;

import ca.bc.gov.health.hscis.exception.HscisException;
import com.jcraft.jsch.ChannelSftp.LsEntry;
import jakarta.enterprise.inject.Default;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import org.apache.commons.lang3.time.StopWatch;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Default
public class HscisSfdsHelperImpl implements HscisSfdsHelper {

  private static Logger logger = LoggerFactory.getLogger(HscisSfdsHelperImpl.class);

  /**
   * Returns if a SFDS file should be included in the list. Only files with S_IFDIR, S_IFLNK,
   * S_IFBLK at false are returned.
   *
   * @param e
   * @return
   */
  @Override
  public boolean isListedFile(LsEntry e) {
    return !e.getAttrs().isDir() && !e.getAttrs().isLink() && !e.getAttrs().isBlk();
  }

  /**
   * Get the modified time of a SFDS file.
   *
   * @param e
   * @return
   */
  @Override
  public LocalDateTime getModifiedTime(LsEntry e) {
    return LocalDateTime.ofInstant(
        Instant.ofEpochSecond(e.getAttrs().getMTime()), ZoneId.systemDefault());
  }

  /**
   * Returns the size of the SFDS file.
   *
   * @param e
   * @return
   */
  @Override
  public Long getFileSize(LsEntry e) {
    return e.getAttrs().getSize();
  }

  /**
   * Returns the short filename of the SFDS file.
   *
   * @param f
   * @return
   */
  @Override
  public String getFilename(LsEntry f) {
    return f.getFilename();
  }

  @Override
  public List<LsEntry> listDirectoryEntries(String remotePath) throws HscisException {
    try (HscisChannelSftp channel = new HscisChannelSftp()) {

      List<LsEntry> directoryEntries = channel.ls(remotePath);

      return directoryEntries;
    }
  }

  /**
   * Upload a file to SFDS in a given path
   *
   * @param file content of the file
   * @param filename name of the file
   * @param remotePath path to write (NOTE: Unix style path ie.: "/xxx/yyy". Do not include trailing
   *     '/')
   * @throws HscisException
   */
  @Override
  public void uploadFile(InputStream file, String filename, String remotePath)
      throws HscisException {
    StopWatch watch = new StopWatch();
    watch.start();
    String fullFilename = String.join("/", remotePath, filename);
    try (HscisChannelSftp channel = new HscisChannelSftp()) {
      // TODO: Use callback for async upload
      channel.put(file, fullFilename);
    } catch (Exception e) {
      throw new HscisException(e);
    } finally {
      watch.stop();
      logger.debug(String.join(" ", "SFDS upload", fullFilename, watch.toString()));
    }
  }

  /**
   * Downloads a file from SFDS in a given path
   *
   * @param filename name of the file
   * @param remotePath path to write (NOTE: Unix style path ie.: "/xxx/yyy". Do not include trailing
   *     '/')
   * @return file content
   * @throws HscisException
   */
  @Override
  public byte[] downloadFile(String filename, String remotePath) throws HscisException {
    StopWatch watch = new StopWatch();
    watch.start();
    String fullFilename = String.join("/", remotePath, filename);
    try (HscisChannelSftp channel = new HscisChannelSftp()) {
      ByteArrayOutputStream os = new ByteArrayOutputStream();

      channel.get(fullFilename, os);

      return os.toByteArray();

    } catch (Exception e) {
      throw new HscisException(e);
    } finally {
      watch.stop();
      logger.debug(String.join(" ", "SFDS download", fullFilename, watch.toString()));
    }
  }

  /**
   * Downloads a file from SFDS in a given path
   *
   * @param filename name of the file
   * @param remotePath path to write (NOTE: Unix style path ie.: "/xxx/yyy". Do not include trailing
   *     '/')
   * @return file content
   * @throws HscisException
   */
  @Override
  public byte[] downloadFiles(List<String> filenames, String remotePath) throws HscisException {
    StopWatch watch = new StopWatch();
    watch.start();

    try (HscisChannelSftp channel = new HscisChannelSftp();
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        ZipOutputStream zipos = new ZipOutputStream(bos)) {

      zipos.setLevel(0);

      for (String filename : filenames) {
        String fullFilename = String.join("/", remotePath, filename);

        ZipEntry zipEntry = new ZipEntry(filename);
        zipos.putNextEntry(zipEntry);
        try (InputStream is = channel.get(fullFilename)) {
          byte[] bytes = new byte[1024];
          int length;
          while ((length = is.read(bytes)) >= 0) {
            zipos.write(bytes, 0, length);
          }
        }
      }

      zipos.closeEntry();
      zipos.finish();

      return bos.toByteArray();
    } catch (Exception e) {
      throw new HscisException(e);
    } finally {
      watch.stop();
      logger.debug(String.join(" ", "SFDS download", watch.toString()));
    }
  }

  @Override
  public void deleteFiles(List<String> filenames, String remotePath) throws HscisException {
    StopWatch watch = new StopWatch();
    watch.start();

    try (HscisChannelSftp channel = new HscisChannelSftp()) {
      for (String filename : filenames) {
        String fullFilename = String.join("/", remotePath, filename);
        channel.delete(fullFilename);
      }
    } catch (Exception e) {
      throw new HscisException(e);
    } finally {
      watch.stop();
      logger.debug(String.join(" ", "SFDS delete", watch.toString()));
    }
  }
}
