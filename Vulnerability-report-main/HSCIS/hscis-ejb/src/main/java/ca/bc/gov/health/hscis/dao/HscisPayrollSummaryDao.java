package ca.bc.gov.health.hscis.dao;

import ca.bc.gov.health.hscis.entity.HcdClassification;
import ca.bc.gov.health.hscis.entity.HcdMembership;
import ca.bc.gov.health.hscis.entity.HcdPayrollSummary;
import ca.bc.gov.health.hscis.entity.HcdPayrollSummaryEmployee;
import ca.bc.gov.health.hscis.entity.HcdPayrollSummaryGroupComp;
import ca.bc.gov.health.hscis.entity.PayrollSummaryPK;
import jakarta.inject.Named;
import jakarta.persistence.EntityGraph;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.persistence.PersistenceContext;
import java.util.List;

@Named
public class HscisPayrollSummaryDao {

  @PersistenceContext(unitName = "hscis-ejb_pu")
  private EntityManager em;

  /**
   * Returns all PayrollSummaries by user. User is accessed via the membership table.
   *
   * @param userId
   * @return
   */
  public List<HcdPayrollSummary> listPayrollSummaries(String userId) {
    return em.createNamedQuery("HcdPayrollSummary.findByUser", HcdPayrollSummary.class)
        .setParameter("userId", userId)
        .getResultList();
  }

  /**
   * Returns all PayrollSummaries by membership id.
   *
   * @param hscisId
   * @return
   */
  public List<HcdPayrollSummary> listPayrollSummaries(long hscisId) {
    return em.createNamedQuery("HcdPayrollSummary.findByMember", HcdPayrollSummary.class)
        .setParameter("hscisId", hscisId)
        .getResultList();
  }

  /**
   * Returns a PayrollSummary. Also loads employees and groups children.
   *
   * @param pk
   * @return
   */
  public HcdPayrollSummary readPayrollSummary(PayrollSummaryPK pk) {
    try {
      EntityGraph<?> graph = em.getEntityGraph("fullsummary");
      return em.createNamedQuery("HcdPayrollSummary.findByKey", HcdPayrollSummary.class)
          .setParameter("corporateEmployerNumber", pk.getCorporateEmployerNumber())
          .setParameter("siteEmployerNumber", pk.getSiteEmployerNumber())
          .setParameter("reportingFrom", pk.getReportingFrom())
          .setParameter("reportingTo", pk.getReportingTo())
          .setHint("jakarta.persistence.loadgraph", graph)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  /**
   * Returns the membership corresponding to a siteId
   *
   * @param siteId
   * @return
   */
  public HcdMembership readMembership(Long siteId) {
    try {
      return em.createNamedQuery("HcdMembership.findBySite", HcdMembership.class)
          .setParameter("siteId", siteId)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  /**
   * Returns all memberships by user
   *
   * @param userId
   * @return
   */
  public List<HcdMembership> readMemberships(String userId) {
    return em.createNamedQuery("HcdMembership.findByUserAndSummary", HcdMembership.class)
        .setParameter("userId", userId)
        .getResultList();
  }

  /**
   * Returns all HcdPayrollSummaryGroupComp by payrollSummary
   *
   * @param summaryPk
   * @return
   */
  public List<HcdPayrollSummaryGroupComp> listPayrollSummaryGroupComp(PayrollSummaryPK summaryPk) {
    return em.createNamedQuery(
            "HcdPayrollSummaryGroupComp.findBySummary", HcdPayrollSummaryGroupComp.class)
        .setParameter("corporateEmployerNumber", summaryPk.getCorporateEmployerNumber())
        .setParameter("siteEmployerNumber", summaryPk.getSiteEmployerNumber())
        .setParameter("reportingTo", summaryPk.getReportingTo())
        .getResultList();
  }

  /**
   * Returns one HcdPayrollSummaryGroupComp by id
   *
   * @param id
   * @return
   */
  public HcdPayrollSummaryGroupComp readPayrollSummaryGroupComp(Long id) {
    try {
      return em.createNamedQuery(
              "HcdPayrollSummaryGroupComp.findById", HcdPayrollSummaryGroupComp.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  /**
   * Returns one HcdPayrollSummaryGroupComp by id
   *
   * @param id
   * @return
   */
  public HcdPayrollSummaryEmployee readPayrollSummaryEmployee(Long id) {
    try {
      return em.createNamedQuery(
              "HcdPayrollSummaryEmployee.findById", HcdPayrollSummaryEmployee.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public List<HcdClassification> listClassCodesByDesignatedGroup(String code) {
    try {
      return em.createNamedQuery(
              "HcdClassification.findByDesignatedGroupCode", HcdClassification.class)
          .setParameter("code", code)
          .getResultList();
    } catch (NoResultException e) {
      return null;
    }
  }

  /**
   * Saves an entity to the database.
   *
   * @param entity
   */
  public void save(Object entity) {
    saveAndReturn(entity);
  }

  /**
   * Saves an entity to the database and returns it.
   *
   * @param entity
   * @return the Object
   */
  public Object saveAndReturn(Object entity) {
    // Must merge entities created by mappers. Make sure child objects relationship are set to
    // Cascade.MERGE.
    entity = em.merge(entity);
    em.persist(entity);
    return entity;
  }

  /**
   * Deletes an entity to the database.
   *
   * @param entity
   */
  public void delete(Object entity) {
    // Must merge entities created by mappers. Make sure child objects relationship are set to
    // Cascade.MERGE.
    entity = em.merge(entity);
    em.remove(entity);
  }

  /** Resets the JPA cache. */
  public void resetCache() {
    em.flush();
    em.getEntityManagerFactory().getCache().evictAll();
  }

  /**
   * Deletes a PayrollSummary.
   *
   * @param pk
   * @return
   */
  public boolean deletePayrollSummary(PayrollSummaryPK pk) {
    try {
      int groupDeletedCount =
          em.createNamedQuery(
                  "HcdPayrollSummaryGroupComp.deleteBySummary", HcdPayrollSummaryGroupComp.class)
              .setParameter("corporateEmployerNumber", pk.getCorporateEmployerNumber())
              .setParameter("siteEmployerNumber", pk.getSiteEmployerNumber())
              .setParameter("reportingFrom", pk.getReportingFrom())
              .setParameter("reportingTo", pk.getReportingTo())
              .executeUpdate();
      int employeeDeletedCount =
          em.createNamedQuery(
                  "HcdPayrollSummaryEmployee.deleteBySummary", HcdPayrollSummaryEmployee.class)
              .setParameter("corporateEmployerNumber", pk.getCorporateEmployerNumber())
              .setParameter("siteEmployerNumber", pk.getSiteEmployerNumber())
              .setParameter("reportingFrom", pk.getReportingFrom())
              .setParameter("reportingTo", pk.getReportingTo())
              .executeUpdate();
      return groupDeletedCount >= 1 || employeeDeletedCount >= 1;
    } catch (Exception e) {
      System.out.println(e.getMessage());
      return false;
    }
  }
}
