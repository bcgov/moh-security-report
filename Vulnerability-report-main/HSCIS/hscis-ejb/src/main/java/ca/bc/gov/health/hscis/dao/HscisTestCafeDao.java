package ca.bc.gov.health.hscis.dao;

import ca.bc.gov.health.hscis.entity.HcdClassification;
import ca.bc.gov.health.hscis.entity.HcdDesignatedGroup;
import ca.bc.gov.health.hscis.entity.HcdFundingSources;
import ca.bc.gov.health.hscis.entity.HcdGender;
import ca.bc.gov.health.hscis.entity.HcdHealthAuthority;
import ca.bc.gov.health.hscis.entity.HcdJobStatus;
import ca.bc.gov.health.hscis.entity.HcdMembership;
import ca.bc.gov.health.hscis.entity.HcdMembershipType;
import ca.bc.gov.health.hscis.entity.HcdMisFuncCentAccnts;
import ca.bc.gov.health.hscis.entity.HcdMisSecStatAccnts;
import ca.bc.gov.health.hscis.entity.HcdOrganizationStatus;
import ca.bc.gov.health.hscis.entity.HcdPeriodConfirmation;
import ca.bc.gov.health.hscis.entity.HcdServiceType;
import ca.bc.gov.health.hscis.entity.HcdTerminationCode;
import ca.bc.gov.health.hscis.entity.HcdUnion;
import ca.bc.gov.health.hscis.entity.HcdUploads;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Named;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.persistence.PersistenceContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Named
public class HscisTestCafeDao {

  @PersistenceContext(unitName = "hscis-ejb_pu")
  private EntityManager em;

  private static Logger logger = LoggerFactory.getLogger(HscisTestCafeDao.class);

  private static String tcUser = "testcafe";

  public boolean isTCUser() {
    if (FacesContext.getCurrentInstance()
        .getExternalContext()
        .getUserPrincipal()
        .getName()
        .equals(tcUser)) {
      return true;
    }
    return false;
  }

  public FacesMessage createHcdUploadsRow(HcdUploads newHcdUploads) {
    try {
      if (findHcdUploadsById(newHcdUploads.getPayfilId()) == null) {
        em.persist(newHcdUploads);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully created", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "ID for this record already exists", null);
      }
    } catch (Exception e) {
      logger.error("createHcdUploadsRow: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be created", null);
    }
  }

  public FacesMessage deleteHcdClassification(HcdClassification oldHcdClassification) {
    try {
      HcdClassification targetRow =
          findHcdClassificationById(oldHcdClassification.getClassificationCode());
      if (targetRow != null) {
        HcdClassification toRemove = em.merge(targetRow);
        em.remove(toRemove);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "ID for this record does not exists", null);
      }
    } catch (Exception e) {
      logger.error("deleteHcdClassification: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be deleted", null);
    }
  }

  public FacesMessage deleteHcdMembershipType(HcdMembershipType oldHcdMembershipType) {
    try {
      HcdMembershipType targetRow =
          findHcdMembershipTypeById(oldHcdMembershipType.getMemberTypeCode());
      if (targetRow != null) {
        HcdMembershipType toRemove = em.merge(targetRow);
        em.remove(toRemove);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Type for this record does not exists", null);
      }
    } catch (Exception e) {
      logger.error("deleteHcdMembershipType: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be deleted", null);
    }
  }

  public FacesMessage deleteHcdHealthAuthority(HcdHealthAuthority oldHcdHealthAuthority) {
    try {
      HcdHealthAuthority targetRow =
          findHcdHealthAuthorityById(oldHcdHealthAuthority.getHealthAuthorityNumber());
      if (targetRow != null) {
        HcdHealthAuthority toRemove = em.merge(targetRow);
        em.remove(toRemove);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Number for this record does not exists", null);
      }
    } catch (Exception e) {
      logger.error("deleteHcdHealthAuthority: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be deleted", null);
    }
  }

  public FacesMessage deleteHcdOrganizationStatus(HcdOrganizationStatus oldHcdOrganizationStatus) {
    try {
      HcdOrganizationStatus targetRow =
          findHcdOrganizationStatusById(oldHcdOrganizationStatus.getOrganizationStatusCode());
      if (targetRow != null) {
        HcdOrganizationStatus toRemove = em.merge(targetRow);
        em.remove(toRemove);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record does not exists", null);
      }
    } catch (Exception e) {
      logger.error("deleteHcdOrganizationStatus: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be deleted", null);
    }
  }

  public FacesMessage deleteHcdDesignatedGroup(HcdDesignatedGroup oldHcdDesignatedGroup) {
    try {
      HcdDesignatedGroup targetRow =
          findHcdDesignatedGroupById(oldHcdDesignatedGroup.getDesignatedGroupCode());
      if (targetRow != null) {
        HcdDesignatedGroup toRemove = em.merge(targetRow);
        em.remove(toRemove);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record does not exists", null);
      }
    } catch (Exception e) {
      logger.error("deleteHcdDesignatedGroup: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be deleted", null);
    }
  }

  public FacesMessage deleteHcdGender(HcdGender oldHcdGender) {
    try {
      HcdGender targetRow = findHcdGenderById(oldHcdGender.getGenderCode());
      if (targetRow != null) {
        HcdGender toRemove = em.merge(targetRow);
        em.remove(toRemove);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record does not exists", null);
      }
    } catch (Exception e) {
      logger.error("deleteHcdGender: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be deleted", null);
    }
  }

  public FacesMessage deleteHcdJobStatus(HcdJobStatus oldHcdJobStatus) {
    try {
      HcdJobStatus targetRow = findHcdJobStatusById(oldHcdJobStatus.getJobStatusCode());
      if (targetRow != null) {
        HcdJobStatus toRemove = em.merge(targetRow);
        em.remove(toRemove);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record does not exists", null);
      }
    } catch (Exception e) {
      logger.error("deleteHcdJobStatus: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be deleted", null);
    }
  }

  public FacesMessage deleteHcdUnion(HcdUnion oldHcdUnion) {
    try {
      HcdUnion targetRow = findHcdUnionById(oldHcdUnion.getUnionCode());
      if (targetRow != null) {
        HcdUnion toRemove = em.merge(targetRow);
        em.remove(toRemove);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record does not exists", null);
      }
    } catch (Exception e) {
      logger.error("deleteHcdUnion: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be deleted", null);
    }
  }

  public FacesMessage deleteHcdTerminationCode(HcdTerminationCode oldHcdTerminationCode) {
    try {
      HcdTerminationCode targetRow =
          findHcdTerminationCodeById(oldHcdTerminationCode.getTerminationCode());
      if (targetRow != null) {
        HcdTerminationCode toRemove = em.merge(targetRow);
        em.remove(toRemove);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record does not exists", null);
      }
    } catch (Exception e) {
      logger.error("deleteHcdTerminationCode: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be deleted", null);
    }
  }

  public FacesMessage deleteHcdFundingSources(HcdFundingSources oldHcdFundingSources) {
    try {
      HcdFundingSources targetRow =
          findHcdFundingSourcesById(oldHcdFundingSources.getFundingSourceCode());
      if (targetRow != null) {
        HcdFundingSources toRemove = em.merge(targetRow);
        em.remove(toRemove);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record does not exists", null);
      }
    } catch (Exception e) {
      logger.error("deleteHcdFundingSources: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be deleted", null);
    }
  }

  public FacesMessage deleteHcdMisFuncCentAccnts(HcdMisFuncCentAccnts oldHcdMisFuncCentAccnts) {
    try {
      HcdMisFuncCentAccnts targetRow =
          findHcdMisFuncCentAccntsById(oldHcdMisFuncCentAccnts.getAccount());
      if (targetRow != null) {
        HcdMisFuncCentAccnts toRemove = em.merge(targetRow);
        em.remove(toRemove);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Account for this record does not exists", null);
      }
    } catch (Exception e) {
      logger.error("deleteHcdMisFuncCentAccnts: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be deleted", null);
    }
  }

  public FacesMessage deleteHcdMisSecStatAccnts(HcdMisSecStatAccnts oldHcdMisSecStatAccnts) {
    try {
      HcdMisSecStatAccnts targetRow =
          findHcdMisSecStatAccntsById(oldHcdMisSecStatAccnts.getAccount());
      if (targetRow != null) {
        HcdMisSecStatAccnts toRemove = em.merge(targetRow);
        em.remove(toRemove);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Account for this record does not exists", null);
      }
    } catch (Exception e) {
      logger.error("deleteHcdMisSecStatAccnts: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be deleted", null);
    }
  }

  public FacesMessage deleteHcdServiceType(HcdServiceType oldHcdServiceType) {
    try {
      HcdServiceType targetRow = findHcdServiceTypeById(oldHcdServiceType.getCode());
      if (targetRow != null) {
        HcdServiceType toRemove = em.merge(targetRow);
        em.remove(toRemove);
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Code for this record does not exists", null);
      }
    } catch (Exception e) {
      logger.error("deleteHcdServiceType: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be deleted", null);
    }
  }

  public HcdUploads findHcdUploadsById(Object id) {
    try {
      return em.createNamedQuery("HcdUploads.findById", HcdUploads.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdPeriodConfirmation findHcdPeriodConfirmationById(Object id) {
    try {
      return em.createNamedQuery("HcdPeriodConfirmation.findById", HcdPeriodConfirmation.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdMembership findHcdMembershipById(Object id) {
    try {
      return em.createNamedQuery("HcdMembership.findBySite", HcdMembership.class)
          .setParameter("siteId", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdClassification findHcdClassificationById(Object id) {
    try {
      return em.createNamedQuery("HcdClassification.findById", HcdClassification.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdMembershipType findHcdMembershipTypeById(Object id) {
    try {
      return em.createNamedQuery("HcdMembershipType.findById", HcdMembershipType.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdHealthAuthority findHcdHealthAuthorityById(Object id) {
    try {
      return em.createNamedQuery("HcdHealthAuthority.findById", HcdHealthAuthority.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdOrganizationStatus findHcdOrganizationStatusById(Object id) {
    try {
      return em.createNamedQuery("HcdOrganizationStatus.findById", HcdOrganizationStatus.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdDesignatedGroup findHcdDesignatedGroupById(Object id) {
    try {
      return em.createNamedQuery("HcdDesignatedGroup.findById", HcdDesignatedGroup.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdGender findHcdGenderById(Object id) {
    try {
      return em.createNamedQuery("HcdGender.findById", HcdGender.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdJobStatus findHcdJobStatusById(Object id) {
    try {
      return em.createNamedQuery("HcdJobStatus.findById", HcdJobStatus.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdUnion findHcdUnionById(Object id) {
    try {
      return em.createNamedQuery("HcdUnion.findById", HcdUnion.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdTerminationCode findHcdTerminationCodeById(Object id) {
    try {
      return em.createNamedQuery("HcdTerminationCode.findById", HcdTerminationCode.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdFundingSources findHcdFundingSourcesById(Object id) {
    try {
      return em.createNamedQuery("HcdFundingSources.findById", HcdFundingSources.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdMisFuncCentAccnts findHcdMisFuncCentAccntsById(Object id) {
    try {
      return em.createNamedQuery("HcdMisFuncCentAccnts.findById", HcdMisFuncCentAccnts.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdMisSecStatAccnts findHcdMisSecStatAccntsById(Object id) {
    try {
      return em.createNamedQuery("HcdMisSecStatAccnts.findById", HcdMisSecStatAccnts.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  public HcdServiceType findHcdServiceTypeById(Object id) {
    try {
      return em.createNamedQuery("HcdServiceType.findById", HcdServiceType.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }
}
