package ca.bc.gov.health.hscis.service.helper;

import ca.bc.gov.health.hscis.exception.HscisException;
import com.jcraft.jsch.ChannelSftp.LsEntry;
import java.io.InputStream;
import java.time.LocalDateTime;
import java.util.List;

public interface HscisSfdsHelper {

  /**
   * Lists all SFDS entry in a given path
   *
   * @param remotePath SFDS path to list (NOTE: Unix style path ie.: "/xxx/yyy". Do not include
   *     trailing '/').
   * @return
   * @throws HscisException
   */
  List<LsEntry> listDirectoryEntries(String remotePath) throws HscisException;

  /**
   * Upload a file to SFDS in a given path
   *
   * @param file content of the file
   * @param filename name of the file
   * @param remotePath path to write (NOTE: Unix style path ie.: "/xxx/yyy". Do not include trailing
   *     '/')
   * @throws HscisException
   */
  void uploadFile(InputStream file, String filename, String remotePath) throws HscisException;

  /**
   * Downloads a file from SFDS in a given path
   *
   * @param filename name of the file
   * @param remotePath path to write (NOTE: Unix style path ie.: "/xxx/yyy". Do not include trailing
   *     '/')
   * @return file content
   * @throws HscisException
   */
  byte[] downloadFile(String filename, String remotePath) throws HscisException;

  /**
   * Downloads a file from SFDS in a given path
   *
   * @param filenames list of file name
   * @param remotePath path to write (NOTE: Unix style path ie.: "/xxx/yyy". Do not include trailing
   *     '/')
   * @return file content
   * @throws HscisException
   */
  byte[] downloadFiles(List<String> filenames, String remotePath) throws HscisException;

  /**
   * Downloads all files from SFDS in a given path
   *
   * @param filenames list of file name
   * @param sftpPath remotePath path to write (NOTE: Unix style path ie.: "/xxx/yyy". Do not include
   *     trailing '/')
   * @throws HscisException
   */
  void deleteFiles(List<String> filenames, String sftpPath) throws HscisException;

  /**
   * Returns if a SFDS file should be included in the list. Only files with S_IFDIR, S_IFLNK,
   * S_IFBLK at false are returned.
   *
   * @param e
   * @return
   */
  boolean isListedFile(LsEntry e);

  /**
   * Get the modified time of a SFDS file.
   *
   * @param e
   * @return
   */
  LocalDateTime getModifiedTime(LsEntry e);

  /**
   * Returns the size of the SFDS file.
   *
   * @param e
   * @return
   */
  Long getFileSize(LsEntry e);

  /**
   * Returns the short filename of the SFDS file.
   *
   * @param f
   * @return
   */
  String getFilename(LsEntry f);
}
