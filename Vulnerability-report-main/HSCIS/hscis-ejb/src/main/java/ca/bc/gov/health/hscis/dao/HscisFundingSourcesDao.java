package ca.bc.gov.health.hscis.dao;

import ca.bc.gov.health.hscis.entity.HcdFundingSources;
import ca.bc.gov.health.hscis.entity.HcdProjectedFunding;
import jakarta.faces.application.FacesMessage;
import jakarta.inject.Named;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.persistence.PersistenceContext;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Named
public class HscisFundingSourcesDao {

  @PersistenceContext(unitName = "hscis-ejb_pu")
  private EntityManager em;

  private static Logger logger = LoggerFactory.getLogger(HscisFundingSourcesDao.class);

  /**
   * Returns all funding source codes and descriptions
   *
   * @return
   */
  public List<HcdFundingSources> listFundingSourceCodes() {
    return em.createNamedQuery("HcdFundingSources.findAll", HcdFundingSources.class)
        .getResultList();
  }

  /**
   * Returns funding source by source ID
   *
   * @param id
   * @return
   */
  public HcdProjectedFunding findFundingSourceBySourceId(Object id) {
    try {
      return em.createNamedQuery("HcdProjectedFunding.findBySourceId", HcdProjectedFunding.class)
          .setParameter("sourceId", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  /**
   * Returns all projected funding information based on hscis id and fiscal year
   *
   * @param hscisId
   * @param fiscalYear
   * @return
   */
  public List<HcdProjectedFunding> refreshFundingSourceRows(Object hscisId, Object fiscalYear) {
    return em.createNamedQuery("HcdProjectedFunding.findAllFilter", HcdProjectedFunding.class)
        .setParameter("hscisId", hscisId)
        .setParameter("fiscalYear", fiscalYear)
        .getResultList();
  }

  /**
   * Returns the hscisId associated with the corp/site id combo
   *
   * @param corpId
   * @param siteId
   * @return
   */
  public Long refreshHscisId(Object corpId, Object siteId) {
    return em.createNamedQuery("HcdMembership.findHscisIdByCorpAndSite", Long.class)
        .setParameter("corpId", corpId)
        .setParameter("siteId", siteId)
        .getSingleResult();
  }

  /**
   * Returns all corp ids by user
   *
   * @param userId
   * @return
   */
  public List<Long> listCorpIds(String userId) {
    return em.createNamedQuery("HcdMembership.findCorpByUser", Long.class)
        .setParameter("userId", userId)
        .getResultList();
  }

  /**
   * Returns funding source by ID
   *
   * @return
   */
  public HcdFundingSources findFundingSourceById(Object id) {
    try {
      return em.createNamedQuery("HcdFundingSources.findById", HcdFundingSources.class)
          .setParameter("id", id)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }

  /**
   * Updates an existing funding source
   *
   * @param fundingSource
   * @return
   */
  public FacesMessage updateFundingSource(HcdProjectedFunding fundingSource) {
    try {
      em.merge(fundingSource);
      em.flush();
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully updated", null);
    } catch (Exception e) {
      logger.error("updateFundingSource: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be updated", null);
    }
  }

  /**
   * Deletes an existing funding source
   *
   * @param fundingSource
   * @return
   */
  public FacesMessage deleteFundingSource(HcdProjectedFunding fundingSource) {
    try {
      HcdProjectedFunding toRemove = em.merge(fundingSource);
      em.remove(toRemove);
      em.flush();
      return new FacesMessage(FacesMessage.SEVERITY_INFO, "Record was successfully deleted", null);
    } catch (Exception e) {
      logger.error("deleteFundingSource: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be deleted", null);
    }
  }

  /**
   * Creates a new funding source
   *
   * @param fundingSource
   * @return
   */
  public FacesMessage createFundingSource(HcdProjectedFunding fundingSource) {
    try {
      if (findFundingSourceBySourceId(fundingSource.getSourceId()) == null) {
        em.persist(fundingSource);
        em.flush();
        return new FacesMessage(
            FacesMessage.SEVERITY_INFO, "Record was successfully created", null);
      } else {
        return new FacesMessage(
            FacesMessage.SEVERITY_ERROR, "Record with Source ID already exists", null);
      }
    } catch (Exception e) {
      logger.error("createFundingSource: ", e);
      return new FacesMessage(FacesMessage.SEVERITY_ERROR, "Record could not be created", null);
    }
  }
}
