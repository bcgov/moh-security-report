package ca.bc.gov.health.hscis.dto;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;

import java.time.LocalDate;
import java.util.List;
import org.junit.jupiter.api.Test;

public class ReportingPeriodTest {

  private static int testYear = 2020;

  @Test
  public void testEquals() {
    ReportingPeriod period1 =
        new ReportingPeriod(LocalDate.of(testYear, 01, 22), LocalDate.of(testYear, 07, 20));
    ReportingPeriod period2 =
        new ReportingPeriod(LocalDate.of(testYear - 1, 12, 22), LocalDate.of(testYear, 06, 10));
    ReportingPeriod period3 =
        new ReportingPeriod(LocalDate.of(testYear, 01, 22), LocalDate.of(testYear + 1, 01, 20));

    assertEquals(period1, period2);
    assertNotEquals(period1, period3);
    assertNotEquals(period2, period3);
  }

  @Test
  public void testCompareTo() {
    ReportingPeriod period1 =
        new ReportingPeriod(LocalDate.of(testYear, 01, 22), LocalDate.of(testYear, 07, 20));
    ReportingPeriod period2 =
        new ReportingPeriod(LocalDate.of(testYear - 1, 12, 22), LocalDate.of(testYear, 06, 10));
    ReportingPeriod period3 =
        new ReportingPeriod(LocalDate.of(testYear, 01, 22), LocalDate.of(testYear + 1, 01, 20));

    assertEquals(0, period1.compareTo(period2));
    assertEquals(-1, period1.compareTo(period3));
    assertEquals(1, period3.compareTo(period2));
  }

  @Test
  public void testValidate_toAfterFrom() {
    String errorMessage = "Reporting To must be after Reporting From date";

    // From < To: OK
    LocalDate fromDate = LocalDate.of(testYear, 01, 01);
    LocalDate toDate = LocalDate.of(testYear, 07, 01);
    List<String> errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorNotContains(errors, errorMessage);

    // From = To: error
    fromDate = LocalDate.of(testYear, 07, 01);
    toDate = LocalDate.of(testYear, 07, 01);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorContains(errors, errorMessage);

    // From > To: error
    fromDate = LocalDate.of(testYear, 07, 01);
    toDate = LocalDate.of(testYear, 01, 01);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorContains(errors, errorMessage);
  }

  @Test
  public void testValidate_toAfterToday() {
    String errorMessage = "Reporting To must be less than or equal to the Current Date";

    // To = today: OK
    LocalDate fromDate = LocalDate.of(testYear, 07, 01);
    LocalDate toDate = LocalDate.now();
    List<String> errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorNotContains(errors, errorMessage);

    // To > today: OK
    fromDate = LocalDate.of(testYear, 07, 01);
    toDate = LocalDate.now().plusDays(1);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorContains(errors, errorMessage);
  }

  @Test
  public void testValidate_from22days() {
    String errorMessage = "Reporting From must be +/- 22 days from Jan 1st of reporting year";

    // From = Jan 1 : OK
    LocalDate fromDate = LocalDate.of(testYear, 01, 01);
    LocalDate toDate = LocalDate.of(testYear, 07, 01);
    List<String> errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorNotContains(errors, errorMessage);

    // From = Jan 1 - 22 days : OK
    fromDate = LocalDate.of(testYear, 01, 01).plusDays(-22);
    toDate = LocalDate.of(testYear, 07, 01);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorNotContains(errors, errorMessage);

    // From < Jan 1 - 22 days : error
    fromDate = LocalDate.of(testYear, 01, 01).plusDays(-23);
    toDate = LocalDate.of(testYear, 07, 01);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorContains(errors, errorMessage);

    // From = Jan 1 + 22 days : OK
    fromDate = LocalDate.of(testYear, 01, 01).plusDays(22);
    toDate = LocalDate.of(testYear, 07, 01);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorNotContains(errors, errorMessage);

    // From > Jan 1 + 22 days : error
    fromDate = LocalDate.of(testYear, 01, 01).plusDays(23);
    toDate = LocalDate.of(testYear, 07, 01);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorContains(errors, errorMessage);
  }

  @Test
  public void testValidate_from22days_newmember() {
    String errorMessage = "Reporting From must be +/- 22 days from Jan 1st of reporting year";

    // From = Jan 1 : OK
    LocalDate fromDate = LocalDate.of(testYear, 01, 01);
    LocalDate toDate = LocalDate.of(testYear, 07, 01);
    List<String> errors = ReportingPeriod.validatePeriod(fromDate, toDate, true);
    assertErrorNotContains(errors, errorMessage);

    // From = Jan 1 - 22 days : OK
    fromDate = LocalDate.of(testYear, 01, 01).plusDays(-22);
    toDate = LocalDate.of(testYear, 07, 01);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate, true);
    assertErrorNotContains(errors, errorMessage);

    // From < Jan 1 - 22 days : OK for new members
    fromDate = LocalDate.of(testYear, 01, 01).plusDays(-23);
    toDate = LocalDate.of(testYear, 07, 01);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate, true);
    assertErrorNotContains(errors, errorMessage);

    // From = Jan 1 + 22 days : OK
    fromDate = LocalDate.of(testYear, 01, 01).plusDays(22);
    toDate = LocalDate.of(testYear, 07, 01);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate, true);
    assertErrorNotContains(errors, errorMessage);

    // From > Jan 1 + 22 days : OK for new members
    fromDate = LocalDate.of(testYear, 01, 01).plusDays(23);
    toDate = LocalDate.of(testYear, 07, 01);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate, true);
    assertErrorNotContains(errors, errorMessage);
  }

  @Test
  public void testValidate_to22days_june30() {
    String errorMessage = "Reporting To must be +/- 22 days from June 30 or December 31";

    // To = Jun 30 : OK
    LocalDate fromDate = LocalDate.of(testYear, 01, 01);
    LocalDate toDate = LocalDate.of(testYear, 06, 30);
    List<String> errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorNotContains(errors, errorMessage);

    // To = Jun 30 - 22 days : OK
    fromDate = LocalDate.of(testYear, 01, 01);
    toDate = LocalDate.of(testYear, 06, 30).plusDays(-22);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorNotContains(errors, errorMessage);

    // To = Jun 30 - 22 days : error
    fromDate = LocalDate.of(testYear, 01, 01);
    toDate = LocalDate.of(testYear, 06, 30).plusDays(-23);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorContains(errors, errorMessage);

    // To = Jun 30 + 22 days : OK
    fromDate = LocalDate.of(testYear, 01, 01);
    toDate = LocalDate.of(testYear, 06, 30).plusDays(22);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorNotContains(errors, errorMessage);

    // To = Jun 30 + 22 days : error
    fromDate = LocalDate.of(testYear, 01, 01);
    toDate = LocalDate.of(testYear, 06, 30).plusDays(23);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorContains(errors, errorMessage);
  }

  @Test
  public void testValidate_to22days_decemeber31() {
    String errorMessage = "Reporting To must be +/- 22 days from June 30 or December 31";
    String errorMessage2 = "Reporting To cannot exceed December 31";

    // To = Dec 31 : OK
    LocalDate fromDate = LocalDate.of(testYear, 01, 01);
    LocalDate toDate = LocalDate.of(testYear, 12, 31);
    List<String> errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorNotContains(errors, errorMessage);
    assertNull(errors.stream().filter(e -> e.contains(errorMessage2)).findAny().orElse(null));

    // To = Dec 31 - 22 days : OK
    fromDate = LocalDate.of(testYear, 01, 01);
    toDate = LocalDate.of(testYear, 12, 31).plusDays(-22);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorNotContains(errors, errorMessage);
    assertNull(errors.stream().filter(e -> e.contains(errorMessage2)).findAny().orElse(null));

    // To = Dec 31 - 22 days : error
    fromDate = LocalDate.of(testYear, 01, 01);
    toDate = LocalDate.of(testYear, 12, 31).plusDays(-23);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorContains(errors, errorMessage);
    assertNull(errors.stream().filter(e -> e.contains(errorMessage2)).findAny().orElse(null));

    // To = Dec 31 + 1 day : error
    fromDate = LocalDate.of(testYear, 01, 01);
    toDate = LocalDate.of(testYear + 1, 01, 01);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorNotContains(errors, errorMessage);
    assertNotNull(errors.stream().filter(e -> e.contains(errorMessage2)).findAny().orElse(null));
  }

  @Test
  public void testValidate_onlyoneyear() {
    String errorMessage = "Reporting Period Range too large. Period must be for only 1 year";

    // To and from same year: OK
    LocalDate fromDate = LocalDate.of(testYear, 01, 01);
    LocalDate toDate = LocalDate.of(testYear, 12, 31);
    List<String> errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorNotContains(errors, errorMessage);

    // To and from 2 years: not OK
    fromDate = LocalDate.of(testYear, 01, 01);
    toDate = LocalDate.of(testYear + 1, 12, 31);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate);
    assertErrorContains(errors, errorMessage);
  }

  @Test
  public void testValidate_onlyoneyear_newmember() {
    String errorMessage = "Reporting Period Range too large. Period must be for only 1 year";

    // To and from same year: OK
    LocalDate fromDate = LocalDate.of(testYear - 1, 05, 01);
    LocalDate toDate = LocalDate.of(testYear, 10, 31);
    List<String> errors = ReportingPeriod.validatePeriod(fromDate, toDate, true);
    assertErrorNotContains(errors, errorMessage);

    // To and from 2 years: not OK
    fromDate = LocalDate.of(testYear, 05, 01);
    toDate = LocalDate.of(testYear + 1, 12, 31);
    errors = ReportingPeriod.validatePeriod(fromDate, toDate, true);
    assertErrorContains(errors, errorMessage);
  }

  private void assertErrorContains(List<String> errors, String errorMessage) {
    assertNotNull(
        errors.stream().filter(e -> e.contains(errorMessage)).findAny().orElse(null),
        "Expecting error: " + errorMessage);
  }

  private void assertErrorNotContains(List<String> errors, String errorMessage) {
    assertNull(
        errors.stream().filter(e -> e.contains(errorMessage)).findAny().orElse(null),
        "Expecting no error: " + errorMessage);
  }
}
