package ca.bc.gov.health.hscis.service;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.fail;

import ca.bc.gov.health.hscis.dto.FileSubmission;
import ca.bc.gov.health.hscis.dto.SubmissionReport;
import ca.bc.gov.health.hscis.exception.HscisException;
import ca.bc.gov.health.hscis.service.helper.HscisSfdsHelper;
import com.jcraft.jsch.ChannelSftp.LsEntry;
import java.io.InputStream;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

@ExtendWith(MockitoExtension.class)
public class HscisFileSubmissionServiceTest {

  @InjectMocks HscisFileSubmissionService service = new HscisFileSubmissionService();

  @Mock HscisSfdsHelper helper;

  @Test
  public void buildPathTest() {

    assertEquals("/hnet/clients/ala/toclient", service.buildSfdsPath("ala", true));
    assertEquals("/hnet/clients/xxx", service.buildSfdsPath("xxx", false));
  }

  @Test
  public void buildPayrollFilename_EmptyMailbox() {
    assertThrows(
        IllegalArgumentException.class, () -> service.buildPayrollFilename(" ", 2020, "Q1"));
  }

  @Test
  public void buildPayrollFilename_NullYear() {
    assertThrows(
        IllegalArgumentException.class, () -> service.buildPayrollFilename("xxx", null, "Q1"));
  }

  @Test
  public void buildPayrollFilename_EmptyQuarter() {
    assertThrows(
        IllegalArgumentException.class, () -> service.buildPayrollFilename("xxx", 2020, null));
  }

  @Test
  public void buildPayrollFilename_OK() {
    String mailbox = "xxx";
    Integer year = 2022;
    String quarter = "Q4";

    String filename = service.buildPayrollFilename(mailbox, year, quarter);

    assertNotNull(filename);
    // Parse the string
    String parts[] = filename.split("\\.");
    assertEquals(3, parts.length);
    // FirstPart
    assertEquals("HSxxx24", parts[0]);
    // SecoundPart
    try {
      LocalDateTime.parse(parts[1], DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
    } catch (DateTimeParseException e) {
      fail("Invalid LocalDate");
    }
    // third part
    assertEquals("txt", parts[2]);
  }

  @Test
  public void testSubmit_Null() {
    assertThrows(IllegalArgumentException.class, () -> service.submitFile(null));
  }

  @Test
  public void testSubmit_EmptyMailbox() {
    FileSubmission subm =
        new FileSubmission() {
          {
            setMailbox("");
            setFilename("file.txt");
          }
        };

    assertThrows(IllegalArgumentException.class, () -> service.submitFile(subm));
  }

  @Test
  public void testSubmit_EmptyFilename() {
    FileSubmission subm =
        new FileSubmission() {
          {
            setMailbox("ala");
            setFilename(null);
          }
        };

    assertThrows(IllegalArgumentException.class, () -> service.submitFile(subm));
  }

  @Test
  public void testSubmit_OK() throws HscisException {
    InputStream stream = Mockito.mock(InputStream.class);
    FileSubmission subm =
        new FileSubmission() {
          {
            setMailbox("ala");
            setFilename("file.txt");
            setStream(stream);
          }
        };

    String sfdsPath = "/hnet/clients/ala";

    Mockito.doNothing().when(helper).uploadFile(stream, "file.txt", sfdsPath);

    service.submitFile(subm);

    Mockito.verify(helper, Mockito.times(1)).uploadFile(stream, "file.txt", sfdsPath);
  }

  @Test
  public void testDownload_EmptyMailbox() {
    assertThrows(IllegalArgumentException.class, () -> service.downloadFile(null, "test.txt"));
  }

  @Test
  public void testDownload_EmptyFilename() {
    assertThrows(IllegalArgumentException.class, () -> service.downloadFile("mailbox", "   "));
  }

  @Test
  public void testDownload_OK() throws HscisException {
    //    InputStream stream = Mockito.mock(InputStream.class);
    byte[] file = new byte[] {};

    String sfdsPath = "/hnet/clients/ala/toclient";

    Mockito.when(helper.downloadFile("file.txt", sfdsPath)).thenReturn(file);

    byte[] ret = service.downloadFile("ala", "file.txt");
    assertEquals(file, ret);

    Mockito.verify(helper, Mockito.times(1)).downloadFile("file.txt", sfdsPath);
  }

  @Test
  public void testListReports_OK() throws HscisException {
    String sfdsPath = "/hnet/clients/ala/toclient";
    LocalDateTime dt = LocalDateTime.now();

    LsEntry mockentry1 = Mockito.mock(LsEntry.class);
    LsEntry mockentry2 = Mockito.mock(LsEntry.class);
    List<LsEntry> entryList = List.of(mockentry1, mockentry2);

    Mockito.when(helper.isListedFile(mockentry1)).thenReturn(true);
    Mockito.when(helper.isListedFile(mockentry2)).thenReturn(false);
    Mockito.when(helper.getFilename(mockentry1)).thenReturn("file1.pdf");
    Mockito.when(helper.getFileSize(mockentry1)).thenReturn(123L);
    Mockito.when(helper.getModifiedTime(mockentry1)).thenReturn(dt);

    Mockito.when(helper.listDirectoryEntries(sfdsPath)).thenReturn(entryList);

    List<SubmissionReport> reportlist = service.listValidationReports("ala");

    assertNotNull(reportlist);
    assertEquals(1, reportlist.size());
    assertEquals("file1.pdf", reportlist.get(0).getFilename());
    assertEquals(123L, reportlist.get(0).getFilesize());
    assertEquals(dt, reportlist.get(0).getModifiedTime());
  }
}
