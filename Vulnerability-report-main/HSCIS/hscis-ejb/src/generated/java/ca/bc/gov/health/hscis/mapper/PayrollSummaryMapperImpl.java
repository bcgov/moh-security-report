package ca.bc.gov.health.hscis.mapper;

import ca.bc.gov.health.hscis.dto.PayrollSummary;
import ca.bc.gov.health.hscis.dto.ReportingPeriod;
import ca.bc.gov.health.hscis.entity.HcdMembership;
import ca.bc.gov.health.hscis.entity.HcdPayrollSummary;
import ca.bc.gov.health.hscis.entity.PayrollSummaryPK;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor"
)
@ApplicationScoped
public class PayrollSummaryMapperImpl implements PayrollSummaryMapper {

    @Inject
    private PayrollSummaryGroupCompMapper payrollSummaryGroupCompMapper;
    @Inject
    private PayrollSummaryEmployeeMapper payrollSummaryEmployeeMapper;

    @Override
    public PayrollSummary toSummary(HcdPayrollSummary hcdPayrollSummary) {
        if ( hcdPayrollSummary == null ) {
            return null;
        }

        PayrollSummary payrollSummary = new PayrollSummary();

        payrollSummary.setReportingPeriod( payrollSummaryPKToReportingPeriod( hcdPayrollSummary.getId() ) );
        payrollSummary.setEmployerID( hcdPayrollSummaryIdCorporateEmployerNumber( hcdPayrollSummary ) );
        payrollSummary.setSiteID( hcdPayrollSummaryIdSiteEmployerNumber( hcdPayrollSummary ) );
        payrollSummary.setLastModified( hcdPayrollSummary.getLastModified() );
        payrollSummary.setStatus( PayrollSummaryMapper.toStatus( hcdPayrollSummary.getCompleteDate() ) );
        payrollSummary.setGroupSummaries( payrollSummaryGroupCompMapper.toDtos( hcdPayrollSummary.getPayrollSummaryGroupComp() ) );
        payrollSummary.setEmployeeSummaries( payrollSummaryEmployeeMapper.toDtos( hcdPayrollSummary.getPayrollSummaryEmployee() ) );
        payrollSummary.setMembershipId( hcdPayrollSummaryMembershipHscisId( hcdPayrollSummary ) );

        return payrollSummary;
    }

    @Override
    public List<PayrollSummary> toSummaries(List<HcdPayrollSummary> hcdPayrollSummaries) {
        if ( hcdPayrollSummaries == null ) {
            return null;
        }

        List<PayrollSummary> list = new ArrayList<PayrollSummary>( hcdPayrollSummaries.size() );
        for ( HcdPayrollSummary hcdPayrollSummary : hcdPayrollSummaries ) {
            list.add( toSummary( hcdPayrollSummary ) );
        }

        return list;
    }

    protected ReportingPeriod payrollSummaryPKToReportingPeriod(PayrollSummaryPK payrollSummaryPK) {
        if ( payrollSummaryPK == null ) {
            return null;
        }

        ReportingPeriod reportingPeriod = new ReportingPeriod();

        reportingPeriod.setFromDate( payrollSummaryPK.getReportingFrom() );
        reportingPeriod.setToDate( payrollSummaryPK.getReportingTo() );

        return reportingPeriod;
    }

    private Long hcdPayrollSummaryIdCorporateEmployerNumber(HcdPayrollSummary hcdPayrollSummary) {
        if ( hcdPayrollSummary == null ) {
            return null;
        }
        PayrollSummaryPK id = hcdPayrollSummary.getId();
        if ( id == null ) {
            return null;
        }
        long corporateEmployerNumber = id.getCorporateEmployerNumber();
        return corporateEmployerNumber;
    }

    private Long hcdPayrollSummaryIdSiteEmployerNumber(HcdPayrollSummary hcdPayrollSummary) {
        if ( hcdPayrollSummary == null ) {
            return null;
        }
        PayrollSummaryPK id = hcdPayrollSummary.getId();
        if ( id == null ) {
            return null;
        }
        long siteEmployerNumber = id.getSiteEmployerNumber();
        return siteEmployerNumber;
    }

    private Long hcdPayrollSummaryMembershipHscisId(HcdPayrollSummary hcdPayrollSummary) {
        if ( hcdPayrollSummary == null ) {
            return null;
        }
        HcdMembership membership = hcdPayrollSummary.getMembership();
        if ( membership == null ) {
            return null;
        }
        Long hscisId = membership.getHscisId();
        if ( hscisId == null ) {
            return null;
        }
        return hscisId;
    }
}
