package ca.bc.gov.health.hscis.mapper;

import ca.bc.gov.health.hscis.dto.PayrollSummary;
import ca.bc.gov.health.hscis.dto.PayrollSummaryEmployee;
import ca.bc.gov.health.hscis.dto.ReportingPeriod;
import ca.bc.gov.health.hscis.entity.HcdMembership;
import ca.bc.gov.health.hscis.entity.HcdPayrollSummaryEmployee;
import jakarta.enterprise.context.ApplicationScoped;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.processing.Generated;

@Generated(
    value = "org.mapstruct.ap.MappingProcessor"
)
@ApplicationScoped
public class PayrollSummaryEmployeeMapperImpl implements PayrollSummaryEmployeeMapper {

    @Override
    public PayrollSummaryEmployee toDto(HcdPayrollSummaryEmployee entity) {
        if ( entity == null ) {
            return null;
        }

        PayrollSummaryEmployee payrollSummaryEmployee = new PayrollSummaryEmployee();

        payrollSummaryEmployee.setSummary( hcdPayrollSummaryEmployeeToPayrollSummary( entity ) );
        payrollSummaryEmployee.setId( entity.getHcdPaysumEmpId() );
        payrollSummaryEmployee.setHscisid( entityHcdMembershipHscisId( entity ) );
        payrollSummaryEmployee.setDesignatedGroup( entity.getHcdDesignatedGroup() );
        payrollSummaryEmployee.setClassification( entity.getHcdClassification() );
        payrollSummaryEmployee.setGender( entity.getHcdGender() );
        payrollSummaryEmployee.setJobStatus( entity.getHcdJobStatus() );
        payrollSummaryEmployee.setTerminationCode( entity.getHcdTerminationCode() );
        payrollSummaryEmployee.setUnion( entity.getHcdUnion() );
        payrollSummaryEmployee.setEmployeeNumber( entity.getEmployeeNumber() );
        payrollSummaryEmployee.setEmployeeSinCrypt( entity.getEmployeeSinCrypt() );
        payrollSummaryEmployee.setEmployeeSinHash( entity.getEmployeeSinHash() );
        payrollSummaryEmployee.setIncrementValue( entity.getIncrementValue() );
        payrollSummaryEmployee.setIntegratedPosition( entity.getIntegratedPosition() );
        payrollSummaryEmployee.setJobTitle( entity.getJobTitle() );
        payrollSummaryEmployee.setLayeredoverPositionsClasscd( entity.getLayeredoverPositionsClasscd() );
        payrollSummaryEmployee.setOriginalDateHire( entity.getOriginalDateHire() );
        payrollSummaryEmployee.setPositionFte( entity.getPositionFte() );
        payrollSummaryEmployee.setRegularPaidHours( entity.getRegularPaidHours() );
        payrollSummaryEmployee.setSeniorityStartDate( entity.getSeniorityStartDate() );
        payrollSummaryEmployee.setTerminationDate( entity.getTerminationDate() );
        payrollSummaryEmployee.setVacationEntitlement( entity.getVacationEntitlement() );
        payrollSummaryEmployee.setVacationHrsUsedInTheYear( entity.getVacationHrsUsedInTheYear() );
        payrollSummaryEmployee.setWageRate( entity.getWageRate() );
        payrollSummaryEmployee.setDateBirth( entity.getDateBirth() );
        payrollSummaryEmployee.setLastModifiedBy( entity.getLastModifiedBy() );

        setLastModified( payrollSummaryEmployee, entity );

        return payrollSummaryEmployee;
    }

    @Override
    public List<PayrollSummaryEmployee> toDtos(List<HcdPayrollSummaryEmployee> entities) {
        if ( entities == null ) {
            return null;
        }

        List<PayrollSummaryEmployee> list = new ArrayList<PayrollSummaryEmployee>( entities.size() );
        for ( HcdPayrollSummaryEmployee hcdPayrollSummaryEmployee : entities ) {
            list.add( toDto( hcdPayrollSummaryEmployee ) );
        }

        return list;
    }

    @Override
    public HcdPayrollSummaryEmployee toEntity(PayrollSummaryEmployee dto, HcdPayrollSummaryEmployee entity) {
        if ( dto == null ) {
            return entity;
        }

        if ( entity.getHcdMembership() == null ) {
            entity.setHcdMembership( new HcdMembership() );
        }
        payrollSummaryEmployeeToHcdMembership( dto, entity.getHcdMembership() );
        if ( dto.getId() != null ) {
            entity.setHcdPaysumEmpId( dto.getId() );
        }
        entity.setCorporateEmployerNumber( dtoSummaryEmployerID( dto ) );
        entity.setSiteEmployerNumber( dtoSummarySiteID( dto ) );
        entity.setReportingFrom( dtoSummaryReportingPeriodFromDate( dto ) );
        entity.setReportingTo( dtoSummaryReportingPeriodToDate( dto ) );
        entity.setHcdDesignatedGroup( dto.getDesignatedGroup() );
        entity.setHcdClassification( dto.getClassification() );
        entity.setHcdGender( dto.getGender() );
        entity.setHcdJobStatus( dto.getJobStatus() );
        entity.setHcdTerminationCode( dto.getTerminationCode() );
        entity.setHcdUnion( dto.getUnion() );
        entity.setEmployeeNumber( dto.getEmployeeNumber() );
        entity.setEmployeeSinCrypt( dto.getEmployeeSinCrypt() );
        entity.setEmployeeSinHash( dto.getEmployeeSinHash() );
        entity.setIncrementValue( dto.getIncrementValue() );
        entity.setIntegratedPosition( dto.getIntegratedPosition() );
        entity.setJobTitle( dto.getJobTitle() );
        entity.setLayeredoverPositionsClasscd( dto.getLayeredoverPositionsClasscd() );
        entity.setOriginalDateHire( dto.getOriginalDateHire() );
        entity.setPositionFte( dto.getPositionFte() );
        entity.setRegularPaidHours( dto.getRegularPaidHours() );
        entity.setSeniorityStartDate( dto.getSeniorityStartDate() );
        entity.setTerminationDate( dto.getTerminationDate() );
        entity.setVacationEntitlement( dto.getVacationEntitlement() );
        entity.setVacationHrsUsedInTheYear( dto.getVacationHrsUsedInTheYear() );
        entity.setWageRate( dto.getWageRate() );
        entity.setDateBirth( dto.getDateBirth() );
        entity.setLastModifiedBy( dto.getLastModifiedBy() );

        return entity;
    }

    protected ReportingPeriod hcdPayrollSummaryEmployeeToReportingPeriod(HcdPayrollSummaryEmployee hcdPayrollSummaryEmployee) {
        if ( hcdPayrollSummaryEmployee == null ) {
            return null;
        }

        ReportingPeriod reportingPeriod = new ReportingPeriod();

        reportingPeriod.setFromDate( hcdPayrollSummaryEmployee.getReportingFrom() );
        reportingPeriod.setToDate( hcdPayrollSummaryEmployee.getReportingTo() );

        return reportingPeriod;
    }

    protected PayrollSummary hcdPayrollSummaryEmployeeToPayrollSummary(HcdPayrollSummaryEmployee hcdPayrollSummaryEmployee) {
        if ( hcdPayrollSummaryEmployee == null ) {
            return null;
        }

        PayrollSummary payrollSummary = new PayrollSummary();

        payrollSummary.setReportingPeriod( hcdPayrollSummaryEmployeeToReportingPeriod( hcdPayrollSummaryEmployee ) );
        payrollSummary.setEmployerID( hcdPayrollSummaryEmployee.getCorporateEmployerNumber() );
        payrollSummary.setSiteID( hcdPayrollSummaryEmployee.getSiteEmployerNumber() );

        return payrollSummary;
    }

    private Long entityHcdMembershipHscisId(HcdPayrollSummaryEmployee hcdPayrollSummaryEmployee) {
        if ( hcdPayrollSummaryEmployee == null ) {
            return null;
        }
        HcdMembership hcdMembership = hcdPayrollSummaryEmployee.getHcdMembership();
        if ( hcdMembership == null ) {
            return null;
        }
        Long hscisId = hcdMembership.getHscisId();
        if ( hscisId == null ) {
            return null;
        }
        return hscisId;
    }

    protected void payrollSummaryEmployeeToHcdMembership(PayrollSummaryEmployee payrollSummaryEmployee, HcdMembership mappingTarget) {
        if ( payrollSummaryEmployee == null ) {
            return;
        }

        mappingTarget.setHscisId( payrollSummaryEmployee.getHscisid() );
    }

    private Long dtoSummaryEmployerID(PayrollSummaryEmployee payrollSummaryEmployee) {
        if ( payrollSummaryEmployee == null ) {
            return null;
        }
        PayrollSummary summary = payrollSummaryEmployee.getSummary();
        if ( summary == null ) {
            return null;
        }
        Long employerID = summary.getEmployerID();
        if ( employerID == null ) {
            return null;
        }
        return employerID;
    }

    private Long dtoSummarySiteID(PayrollSummaryEmployee payrollSummaryEmployee) {
        if ( payrollSummaryEmployee == null ) {
            return null;
        }
        PayrollSummary summary = payrollSummaryEmployee.getSummary();
        if ( summary == null ) {
            return null;
        }
        Long siteID = summary.getSiteID();
        if ( siteID == null ) {
            return null;
        }
        return siteID;
    }

    private LocalDate dtoSummaryReportingPeriodFromDate(PayrollSummaryEmployee payrollSummaryEmployee) {
        if ( payrollSummaryEmployee == null ) {
            return null;
        }
        PayrollSummary summary = payrollSummaryEmployee.getSummary();
        if ( summary == null ) {
            return null;
        }
        ReportingPeriod reportingPeriod = summary.getReportingPeriod();
        if ( reportingPeriod == null ) {
            return null;
        }
        LocalDate fromDate = reportingPeriod.getFromDate();
        if ( fromDate == null ) {
            return null;
        }
        return fromDate;
    }

    private LocalDate dtoSummaryReportingPeriodToDate(PayrollSummaryEmployee payrollSummaryEmployee) {
        if ( payrollSummaryEmployee == null ) {
            return null;
        }
        PayrollSummary summary = payrollSummaryEmployee.getSummary();
        if ( summary == null ) {
            return null;
        }
        ReportingPeriod reportingPeriod = summary.getReportingPeriod();
        if ( reportingPeriod == null ) {
            return null;
        }
        LocalDate toDate = reportingPeriod.getToDate();
        if ( toDate == null ) {
            return null;
        }
        return toDate;
    }
}
