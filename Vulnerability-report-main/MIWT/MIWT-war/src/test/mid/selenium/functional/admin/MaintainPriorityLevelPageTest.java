package mid.selenium.functional.admin;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import mid.selenium.functional.util.DataUtils;
import mid.selenium.functional.util.ValidationUtils;
import mid.selenium.pageobjects.admin.HomePageAdmin;
import mid.selenium.pageobjects.admin.MaintainPriorityLevelCodeTablePage;
import mid.selenium.pageobjects.fragment.LeftMenuCodeTables;
import mid.selenium.pageobjects.utils.PageObjectFactory;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import selenium.util.ActionBot;
import selenium.util.BrowserCapabilities;
import selenium.util.Constants;
import selenium.util.WebDriverFactory;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class MaintainPriorityLevelPageTest {

    private static final Logger logger = Logger.getLogger(MaintainPriorityLevelPageTest.class.getName());
    private static DesiredCapabilities desiredCapabilities;
    private static WebDriver driver;
    private static HomePageAdmin adminHomePage;
    private static MaintainPriorityLevelCodeTablePage maintainPriorityLevelCodeTablePage;

    private static LeftMenuCodeTables codeTables;
    private static ActionBot actionBot;
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(Constants.DATE_FORMATTER);

    public MaintainPriorityLevelPageTest() {
    }

    @BeforeClass
    public static void setUpClass() throws Exception {

        desiredCapabilities = BrowserCapabilities.getInstance(BrowserCapabilities.BROWSER.IE);
        driver = WebDriverFactory.getInstance(WebDriverFactory.DRIVER_TYPE.SERVER, desiredCapabilities);

        actionBot = new ActionBot(driver);

        codeTables = PageObjectFactory.getCodeTablesMenu(driver, desiredCapabilities);
        adminHomePage = PageObjectFactory.getAdminHomePage(driver, desiredCapabilities);
        maintainPriorityLevelCodeTablePage = new MaintainPriorityLevelCodeTablePage(adminHomePage, codeTables, driver, desiredCapabilities.getBrowserName()).get();


    }

    @AfterClass
    public static void tearDownClass() {
        maintainPriorityLevelCodeTablePage.cleanup();
        codeTables.showMaintainPriorityLevelForm();
        
        if (!adminHomePage.isIsSuite()) {
            adminHomePage.signOut();
            driver.quit();
        }
    }
    
    @After
    public void tearDown() {
       maintainPriorityLevelCodeTablePage.cancelForm();
       actionBot.waitForAjaxToComplete();
    }

    @Test
    public void testPageLoad() {
        logger.log(Level.INFO, "Running: 'MaintainPriorityLevelCodeTablePage: testPageLoad'");
        maintainPriorityLevelCodeTablePage.assertPageLoaded();

    }
    
    @Test
    public void testAddNewEntry() {
        logger.log(Level.INFO, "Running: 'MaintainPriorityLevelCodeTablePage: testAddNewEntry'");

        String modalityCd = DataUtils.getRandomItemFromDropdown(MaintainPriorityLevelCodeTablePage.XPATH_FOR_MODALITY_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String priorityLevelCd = DataUtils.generateRandomTextWithLength(10);     
        String description = DataUtils.generateRandomTextWithLength(10);   
        String priorityLevelDetails = DataUtils.generateRandomTextWithLength(10);    
        String benchmarkDays = DataUtils.generateRandomTextWithLength(10);   
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainPriorityLevelCodeTablePage.addRecord(modalityCd, priorityLevelCd, description, priorityLevelDetails, benchmarkDays, effectiveDate);
        maintainPriorityLevelCodeTablePage.submitForm(MaintainPriorityLevelCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainPriorityLevelCodeTablePage.assertAddSuccessfulMessageDisplayed();        
        maintainPriorityLevelCodeTablePage.assertNoGlobalValidationErrors();
        maintainPriorityLevelCodeTablePage.assertRecordExist(actionBot.findValueForDisplayedText(driver.findElement(By.xpath(MaintainPriorityLevelCodeTablePage.XPATH_FOR_MODALITY_CD_FIELD)), modalityCd)
                                                                    , priorityLevelCd, description, priorityLevelDetails, benchmarkDays, effectiveDate);
    }
    
    @Test
    public void testCancelNewEntry() {
        logger.log(Level.INFO, "Running: 'MaintainPriorityLevelCodeTablePage: testCancelNewEntry'");

        String modalityCd = DataUtils.getRandomItemFromDropdown(MaintainPriorityLevelCodeTablePage.XPATH_FOR_MODALITY_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String priorityLevelCd = DataUtils.generateRandomTextWithLength(10);     
        String description = DataUtils.generateRandomTextWithLength(10);   
        String priorityLevelDetails = DataUtils.generateRandomTextWithLength(10);    
        String benchmarkDays = DataUtils.generateRandomTextWithLength(10);   
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainPriorityLevelCodeTablePage.addRecord(modalityCd, priorityLevelCd, description, priorityLevelDetails, benchmarkDays, effectiveDate, effectiveDate);
        maintainPriorityLevelCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        maintainPriorityLevelCodeTablePage.assertFieldsAreReset();
        
    }
    
    @Test
    public void testCancelAfterValidationErrors() {
        logger.log(Level.INFO, "Running: 'MaintainPriorityLevelCodeTablePage: testCancelAfterValidationErrors'");
        codeTables.showMaintainPriorityLevelForm();
        
        maintainPriorityLevelCodeTablePage.submitForm(MaintainPriorityLevelCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        
        maintainPriorityLevelCodeTablePage.assertValidationErrorDisplayed(MaintainPriorityLevelCodeTablePage.MODALITY_TYPE_CODE_FIELD_REQUIRED);
        maintainPriorityLevelCodeTablePage.assertValidationErrorDisplayed(MaintainPriorityLevelCodeTablePage.PRIORITY_LEVEL_CD_REQUIRED);         
        maintainPriorityLevelCodeTablePage.assertValidationErrorDisplayed(MaintainPriorityLevelCodeTablePage.DESCRIPTION_FIELD_REQUIRED); 
        maintainPriorityLevelCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_REQUIRED);
        
        maintainPriorityLevelCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        maintainPriorityLevelCodeTablePage.assertNoGlobalValidationErrors();
        
    }

    
    @Test
    public void testEditEntry() {
        logger.log(Level.INFO, "Running: 'MaintainPriorityLevelCodeTablePage: testEditEntry'");
        
        String modalityCd = DataUtils.getRandomItemFromDropdown(MaintainPriorityLevelCodeTablePage.XPATH_FOR_MODALITY_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String priorityLevelCd = DataUtils.generateRandomTextWithLength(10);     
        String description = DataUtils.generateRandomTextWithLength(10);   
        String priorityLevelDetails = DataUtils.generateRandomTextWithLength(10);    
        String benchmarkDays = DataUtils.generateRandomTextWithLength(10);    
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainPriorityLevelCodeTablePage.addRecord(modalityCd, priorityLevelCd, description, priorityLevelDetails, benchmarkDays, effectiveDate);
        maintainPriorityLevelCodeTablePage.submitForm(MaintainPriorityLevelCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainPriorityLevelCodeTablePage.selectRecord(actionBot.findValueForDisplayedText(driver.findElement(By.xpath(MaintainPriorityLevelCodeTablePage.XPATH_FOR_MODALITY_CD_FIELD)), modalityCd)
                                                                , priorityLevelCd, description, priorityLevelDetails, benchmarkDays, effectiveDate);
        actionBot.waitForAjaxToComplete();
        
        modalityCd = DataUtils.getRandomItemFromDropdown(MaintainPriorityLevelCodeTablePage.XPATH_FOR_MODALITY_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        priorityLevelCd = DataUtils.generateRandomTextWithLength(10);     
        description = DataUtils.generateRandomTextWithLength(10);   
        priorityLevelDetails = DataUtils.generateRandomTextWithLength(10);    
        benchmarkDays = DataUtils.generateRandomTextWithLength(10);   

        
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, 1);        
        effectiveDate = DATE_FORMAT.format(cal.getTime());
        
        maintainPriorityLevelCodeTablePage.updateRecord(modalityCd, priorityLevelCd, description, priorityLevelDetails, benchmarkDays, effectiveDate);       
        maintainPriorityLevelCodeTablePage.submitForm(MaintainPriorityLevelCodeTablePage.SUBMIT_BUTTONS.UPDATE);
        actionBot.waitForAjaxToComplete();
 
        maintainPriorityLevelCodeTablePage.assertUpdateSuccessfulMessageDisplayed();
        maintainPriorityLevelCodeTablePage.assertRecordExist(actionBot.findValueForDisplayedText(driver.findElement(By.xpath(MaintainPriorityLevelCodeTablePage.XPATH_FOR_MODALITY_CD_FIELD)), modalityCd)
                                                                    , priorityLevelCd, description, priorityLevelDetails, benchmarkDays, effectiveDate);
    }
    
    @Test
    public void testInputValidation() {
        logger.log(Level.INFO, "Running: 'MaintainPriorityLevelCodeTablePage: testInputValidation'");
        

        String modalityCd = "";
        String priorityLevelCd = "";    
        String description = "";
        String priorityLevelDetails = "";    
        String benchmarkDays = ""; 
        String effectiveDate = "";
        String expiryDate = "";

        maintainPriorityLevelCodeTablePage.addRecord(modalityCd, priorityLevelCd, description, priorityLevelDetails, benchmarkDays, effectiveDate);
        maintainPriorityLevelCodeTablePage.submitForm(MaintainPriorityLevelCodeTablePage.SUBMIT_BUTTONS.ADD);        
        actionBot.waitForAjaxToComplete();

        maintainPriorityLevelCodeTablePage.assertValidationErrorDisplayed(MaintainPriorityLevelCodeTablePage.MODALITY_TYPE_CODE_FIELD_REQUIRED);
        maintainPriorityLevelCodeTablePage.assertValidationErrorDisplayed(MaintainPriorityLevelCodeTablePage.PRIORITY_LEVEL_CD_REQUIRED);         
        maintainPriorityLevelCodeTablePage.assertValidationErrorDisplayed(MaintainPriorityLevelCodeTablePage.DESCRIPTION_FIELD_REQUIRED); 
        maintainPriorityLevelCodeTablePage.assertValidationErrorDisplayed(MaintainPriorityLevelCodeTablePage.DESCRIPTION_FIELD_REQUIRED); 
        maintainPriorityLevelCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_REQUIRED);
        
        
        // Test for invalid values in date Fields
        maintainPriorityLevelCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        modalityCd = DataUtils.getRandomItemFromDropdown(MaintainPriorityLevelCodeTablePage.XPATH_FOR_MODALITY_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        priorityLevelCd = DataUtils.generateRandomTextWithLength(10);     
        description = DataUtils.generateRandomTextWithLength(10);   
        priorityLevelDetails = DataUtils.generateRandomTextWithLength(10);    
        benchmarkDays = DataUtils.generateRandomTextWithLength(10);   
        effectiveDate = "x";
        expiryDate = "x";
        maintainPriorityLevelCodeTablePage.addRecord(modalityCd, priorityLevelCd, description, priorityLevelDetails, benchmarkDays, effectiveDate, expiryDate);
        maintainPriorityLevelCodeTablePage.submitForm(MaintainPriorityLevelCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainPriorityLevelCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_INVALID);
        maintainPriorityLevelCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EXPIRY_DATE_INVALID);
               

         // Test to check validation message is displayed when expiry date is less than effective date
        maintainPriorityLevelCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        modalityCd = DataUtils.getRandomItemFromDropdown(MaintainPriorityLevelCodeTablePage.XPATH_FOR_MODALITY_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        priorityLevelCd = DataUtils.generateRandomTextWithLength(10);     
        description = DataUtils.generateRandomTextWithLength(10);   
        priorityLevelDetails = DataUtils.generateRandomTextWithLength(10);    
        benchmarkDays = DataUtils.generateRandomTextWithLength(10);   
        effectiveDate = DATE_FORMAT.format(new Date());
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, -1);        
        expiryDate = DATE_FORMAT.format(cal.getTime());
        
        maintainPriorityLevelCodeTablePage.addRecord(modalityCd, priorityLevelCd, description, priorityLevelDetails, benchmarkDays, effectiveDate, expiryDate);
        maintainPriorityLevelCodeTablePage.submitForm(MaintainPriorityLevelCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainPriorityLevelCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EXPIRY_MUST_BE_GREATER_THAN_EFFECTIVE_DATE);
        
        
         // Test to check validation message is displayed when the value in fields have reached their maximum length
        priorityLevelCd = DataUtils.generateRandomTextWithLength(32);     
        description = DataUtils.generateRandomTextWithLength(255);   
        priorityLevelDetails = DataUtils.generateRandomTextWithLength(50);    
        benchmarkDays = DataUtils.generateRandomTextWithLength(10);   

        maintainPriorityLevelCodeTablePage.addRecord(modalityCd, priorityLevelCd, description, priorityLevelDetails, benchmarkDays, effectiveDate, expiryDate);
        
        maintainPriorityLevelCodeTablePage.assertValidationErrorDisplayed(MaintainPriorityLevelCodeTablePage.XPATH_FOR_PRIORITY_LEVEL_CD_FIELD_LENGTH_VALIDATION);
        maintainPriorityLevelCodeTablePage.assertValidationErrorDisplayed(MaintainPriorityLevelCodeTablePage.XPATH_FOR_DESCRIPTION_FIELD_LENGTH_VALIDATION);
        maintainPriorityLevelCodeTablePage.assertValidationErrorDisplayed(MaintainPriorityLevelCodeTablePage.XPATH_FOR_BENCHMARK_DAYS_FIELD_LENGTH_VALIDATION);
        
        
        // Test to check no validation message is displayed when the values in all fields have not reached their maximum length 
        priorityLevelCd = DataUtils.generateRandomTextWithLength(10);     
        description = DataUtils.generateRandomTextWithLength(10);   
        priorityLevelDetails = DataUtils.generateRandomTextWithLength(10);    
        benchmarkDays = DataUtils.generateRandomTextWithLength(8);   

        maintainPriorityLevelCodeTablePage.addRecord(modalityCd, priorityLevelCd, description, priorityLevelDetails, benchmarkDays, effectiveDate, expiryDate);        
        maintainPriorityLevelCodeTablePage.assertNoMaximumLengthValidationErrorDisplayed();        
       

    }

    @Test
    @Ignore  // Date comparison (Expiry date) is not correct comparing an empty field with a field that has a value makes the empty field greater
    public void testResultSorting() {
        logger.log(Level.INFO, "Running: 'MaintainPriorityLevelCodeTablePage: testResultSorting'");
        maintainPriorityLevelCodeTablePage.assertTableSortingWorks();
    }
    
    @Test
    public void testResultPaging() {
        logger.log(Level.INFO, "Running: 'MaintainPriorityLevelCodeTablePage: testResultPaging'");        
        maintainPriorityLevelCodeTablePage.assertTablePaginationWorks();
    }
    
    
    @Test
    public void testRecordSelection() {
        logger.log(Level.INFO, "Running: 'MaintainPriorityLevelCodeTablePage: testRecordSelection'");        
        maintainPriorityLevelCodeTablePage.assertRecordSelectionWorks();
    }
}