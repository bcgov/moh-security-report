package mid.selenium.functional.admin;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import mid.selenium.functional.util.DataUtils;
import mid.selenium.functional.util.ValidationUtils;
import mid.selenium.pageobjects.admin.HomePageAdmin;
import mid.selenium.pageobjects.admin.MaintainFacilityCodeTablePage;
import mid.selenium.pageobjects.fragment.LeftMenuCodeTables;
import mid.selenium.pageobjects.utils.PageObjectFactory;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import selenium.util.ActionBot;
import selenium.util.BrowserCapabilities;
import selenium.util.Constants;
import selenium.util.WebDriverFactory;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class MaintainFacilityPageTest {

    private static final Logger logger = Logger.getLogger(MaintainFacilityPageTest.class.getName());
    private static DesiredCapabilities desiredCapabilities;
    private static WebDriver driver;
    private static HomePageAdmin adminHomePage;
    private static MaintainFacilityCodeTablePage maintainFacilityCodeTablePage;

    private static LeftMenuCodeTables codeTables;
    private static ActionBot actionBot;
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(Constants.DATE_FORMATTER);

    public MaintainFacilityPageTest() {
    }

    @BeforeClass
    public static void setUpClass() throws Exception {

        desiredCapabilities = BrowserCapabilities.getInstance(BrowserCapabilities.BROWSER.IE);
        driver = WebDriverFactory.getInstance(WebDriverFactory.DRIVER_TYPE.SERVER, desiredCapabilities);

        actionBot = new ActionBot(driver);

        codeTables = PageObjectFactory.getCodeTablesMenu(driver, desiredCapabilities);
        adminHomePage = PageObjectFactory.getAdminHomePage(driver, desiredCapabilities);
        maintainFacilityCodeTablePage = new MaintainFacilityCodeTablePage(adminHomePage, codeTables, driver, desiredCapabilities.getBrowserName()).get();


    }

    @AfterClass
    public static void tearDownClass() {
        maintainFacilityCodeTablePage.cleanup();
        codeTables.showMaintainFacilityForm();
        
        if (!adminHomePage.isIsSuite()) {
            adminHomePage.signOut();
            driver.quit();
        }
    }
    
    @After
    public void tearDown() {
       maintainFacilityCodeTablePage.cancelForm();
       actionBot.waitForAjaxToComplete();
    }

    @Test
    public void testPageLoad() {
        logger.log(Level.INFO, "Running: 'MaintainFacilityCodeTablePage: testPageLoad'");
        maintainFacilityCodeTablePage.assertPageLoaded();

    }
    
    @Test
    @Ignore  //Bug: Table omits Address line 3 Column
    public void testAddNewEntry() {
        logger.log(Level.INFO, "Running: 'MaintainFacilityCodeTablePage: testAddNewEntry'");

        String healthAuthority = DataUtils.getRandomItemFromDropdown(MaintainFacilityCodeTablePage.XPATH_FOR_HEALTH_AUTHORITY_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String facilityId = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(10));     
        String facilityName = DataUtils.generateRandomTextWithLength(10);     
        String addressLine1 = DataUtils.generateRandomTextWithLength(10);     
        String addressLine2 = DataUtils.generateRandomTextWithLength(10);
        String addressLine3 = DataUtils.generateRandomTextWithLength(10);     
        String cityName = DataUtils.generateRandomTextWithLength(10);
        String postalCode = DataUtils.generateRandomTextWithLength(10);     
        String hsdaCode = DataUtils.generateRandomTextWithLength(10);
        String hsdaName = DataUtils.generateRandomTextWithLength(10);
        String lhaCode = DataUtils.generateRandomTextWithLength(10);
        String lhaName = DataUtils.generateRandomTextWithLength(10); 
        
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainFacilityCodeTablePage.addRecord(healthAuthority, facilityId, facilityName, addressLine1, addressLine2, addressLine3
                                                , cityName, postalCode, hsdaCode, hsdaName, lhaCode, lhaName, effectiveDate);
        maintainFacilityCodeTablePage.submitForm(MaintainFacilityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainFacilityCodeTablePage.assertAddSuccessfulMessageDisplayed();       
        maintainFacilityCodeTablePage.assertNoGlobalValidationErrors();
        maintainFacilityCodeTablePage.assertRecordExist(actionBot.findValueForDisplayedText(driver.findElement(By.xpath(MaintainFacilityCodeTablePage.XPATH_FOR_HEALTH_AUTHORITY_FIELD)), healthAuthority)
                                                                    , facilityId, facilityName, addressLine1, addressLine2, addressLine3
                                                                    , cityName, postalCode, hsdaCode, hsdaName, lhaCode, lhaName, effectiveDate);
    }
    
    @Test
    public void testCancelNewEntry() {
        logger.log(Level.INFO, "Running: 'MaintainFacilityCodeTablePage: testCancelNewEntry'");

        String healthAuthority = DataUtils.getRandomItemFromDropdown(MaintainFacilityCodeTablePage.XPATH_FOR_HEALTH_AUTHORITY_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String facilityId = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(10));     
        String facilityName = DataUtils.generateRandomTextWithLength(10);     
        String addressLine1 = DataUtils.generateRandomTextWithLength(10);     
        String addressLine2 = DataUtils.generateRandomTextWithLength(10);
        String addressLine3 = DataUtils.generateRandomTextWithLength(10);     
        String cityName = DataUtils.generateRandomTextWithLength(10);
        String postalCode = DataUtils.generateRandomTextWithLength(10);     
        String hsdaCode = DataUtils.generateRandomTextWithLength(10);
        String hsdaName = DataUtils.generateRandomTextWithLength(10);
        String lhaCode = DataUtils.generateRandomTextWithLength(10);
        String lhaName = DataUtils.generateRandomTextWithLength(10);   
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainFacilityCodeTablePage.addRecord(healthAuthority, facilityId, facilityName, addressLine1, addressLine2, addressLine3
                                                , cityName, postalCode, hsdaCode, hsdaName, lhaCode, lhaName, effectiveDate, effectiveDate);
        maintainFacilityCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        maintainFacilityCodeTablePage.assertFieldsAreReset();
        
    }
    
    @Test
    public void testCancelAfterValidationErrors() {
        logger.log(Level.INFO, "Running: 'MaintainFacilityCodeTablePage: testCancelAfterValidationErrors'");
        codeTables.showMaintainFacilityForm();
        
        maintainFacilityCodeTablePage.submitForm(MaintainFacilityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.HEALTH_AUTHORITY_FIELD_REQUIRED);
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.FACILITY_ID_REQUIRED);         
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.FACILITY_NAME_FIELD_REQUIRED); 
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_REQUIRED);
        
        maintainFacilityCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        maintainFacilityCodeTablePage.assertNoGlobalValidationErrors();
        
    }

    
    @Test
    @Ignore  //Bug: Table omits Address line 3 Column
    public void testEditEntry() {
        logger.log(Level.INFO, "Running: 'MaintainFacilityCodeTablePage: testEditEntry'");
        
        String healthAuthority = DataUtils.getRandomItemFromDropdown(MaintainFacilityCodeTablePage.XPATH_FOR_HEALTH_AUTHORITY_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String facilityId = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(10));     
        String facilityName = DataUtils.generateRandomTextWithLength(10);     
        String addressLine1 = DataUtils.generateRandomTextWithLength(10);     
        String addressLine2 = DataUtils.generateRandomTextWithLength(10);
        String addressLine3 = DataUtils.generateRandomTextWithLength(10);     
        String cityName = DataUtils.generateRandomTextWithLength(10);
        String postalCode = DataUtils.generateRandomTextWithLength(10);     
        String hsdaCode = DataUtils.generateRandomTextWithLength(10);
        String hsdaName = DataUtils.generateRandomTextWithLength(10);
        String lhaCode = DataUtils.generateRandomTextWithLength(10);
        String lhaName = DataUtils.generateRandomTextWithLength(10);     
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainFacilityCodeTablePage.addRecord(healthAuthority, facilityId, facilityName, addressLine1, addressLine2, addressLine3
                                                , cityName, postalCode, hsdaCode, hsdaName, lhaCode, lhaName, effectiveDate);
        maintainFacilityCodeTablePage.submitForm(MaintainFacilityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainFacilityCodeTablePage.selectRecord(actionBot.findValueForDisplayedText(driver.findElement(By.xpath(MaintainFacilityCodeTablePage.XPATH_FOR_HEALTH_AUTHORITY_FIELD)), healthAuthority)
                                                                    , facilityId, facilityName, addressLine1, addressLine2, addressLine3
                                                                    , cityName, postalCode, hsdaCode, hsdaName, lhaCode, lhaName, effectiveDate);
        
        healthAuthority = DataUtils.getRandomItemFromDropdown(MaintainFacilityCodeTablePage.XPATH_FOR_HEALTH_AUTHORITY_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        facilityId = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(10));     
        facilityName = DataUtils.generateRandomTextWithLength(10);     
        addressLine1 = DataUtils.generateRandomTextWithLength(10);     
        addressLine2 = DataUtils.generateRandomTextWithLength(10);
        addressLine3 = DataUtils.generateRandomTextWithLength(10);     
        cityName = DataUtils.generateRandomTextWithLength(10);
        postalCode = DataUtils.generateRandomTextWithLength(10);     
        hsdaCode = DataUtils.generateRandomTextWithLength(10);
        hsdaName = DataUtils.generateRandomTextWithLength(10);
        lhaCode = DataUtils.generateRandomTextWithLength(10);
        lhaName = DataUtils.generateRandomTextWithLength(10);   

        
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, 1);        
        effectiveDate = DATE_FORMAT.format(cal.getTime());
        
        maintainFacilityCodeTablePage.updateRecord(healthAuthority, facilityId, facilityName, addressLine1, addressLine2, addressLine3
                                                , cityName, postalCode, hsdaCode, hsdaName, lhaCode, lhaName, effectiveDate);       
        maintainFacilityCodeTablePage.submitForm(MaintainFacilityCodeTablePage.SUBMIT_BUTTONS.UPDATE);
        actionBot.waitForAjaxToComplete();
        
        maintainFacilityCodeTablePage.assertUpdateSuccessfulMessageDisplayed();
        maintainFacilityCodeTablePage.assertRecordExist(actionBot.findValueForDisplayedText(driver.findElement(By.xpath(MaintainFacilityCodeTablePage.XPATH_FOR_HEALTH_AUTHORITY_FIELD)), healthAuthority)
                                                                    , facilityId, facilityName, addressLine1, addressLine2, addressLine3
                                                                    , cityName, postalCode, hsdaCode, hsdaName, lhaCode, lhaName, effectiveDate);
    }
    
    @Test
    @Ignore // BUG: City Name maximum length validation message not displayed when maximum length was reached
    public void testInputValidation() {
        logger.log(Level.INFO, "Running: 'MaintainFacilityCodeTablePage: testInputValidation'");
        
        
        // Test for required fields
        
        String healthAuthority = ""; 
        String facilityId = "";     
        String facilityName = "";     
        String addressLine1 = "";     
        String addressLine2 = "";
        String addressLine3 = "";     
        String cityName = "";
        String postalCode = "";     
        String hsdaCode = "";
        String hsdaName = "";
        String lhaCode = "";
        String lhaName = ""; 
        String effectiveDate = "";
        String expiryDate = "";

        maintainFacilityCodeTablePage.addRecord(healthAuthority, facilityId, facilityName, addressLine1, addressLine2, addressLine3
                                                , cityName, postalCode, hsdaCode, hsdaName, lhaCode, lhaName, effectiveDate);
        maintainFacilityCodeTablePage.submitForm(MaintainFacilityCodeTablePage.SUBMIT_BUTTONS.ADD); 
        actionBot.waitForAjaxToComplete();  
        
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.HEALTH_AUTHORITY_FIELD_REQUIRED);
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.FACILITY_ID_REQUIRED);         
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.FACILITY_NAME_FIELD_REQUIRED); 
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_REQUIRED);
        
        
        // Test for invalid values in date Fields
        maintainFacilityCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        healthAuthority = DataUtils.getRandomItemFromDropdown(MaintainFacilityCodeTablePage.XPATH_FOR_HEALTH_AUTHORITY_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        facilityId = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(10));     
        facilityName = DataUtils.generateRandomTextWithLength(10);     
        addressLine1 = DataUtils.generateRandomTextWithLength(10);     
        addressLine2 = DataUtils.generateRandomTextWithLength(10);
        addressLine3 = DataUtils.generateRandomTextWithLength(10);     
        cityName = DataUtils.generateRandomTextWithLength(10);
        postalCode = DataUtils.generateRandomTextWithLength(10);     
        hsdaCode = DataUtils.generateRandomTextWithLength(10);
        hsdaName = DataUtils.generateRandomTextWithLength(10);
        lhaCode = DataUtils.generateRandomTextWithLength(10);
        lhaName = DataUtils.generateRandomTextWithLength(10);   
        effectiveDate = "x";
        expiryDate = "x";
        maintainFacilityCodeTablePage.addRecord(healthAuthority, facilityId, facilityName, addressLine1, addressLine2, addressLine3
                                                , cityName, postalCode, hsdaCode, hsdaName, lhaCode, lhaName, effectiveDate, expiryDate);
        maintainFacilityCodeTablePage.submitForm(MaintainFacilityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_INVALID);
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EXPIRY_DATE_INVALID);
               
        
        
         // Test to check validation message is displayed when expiry date is less than effective date
        maintainFacilityCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();

        healthAuthority = DataUtils.getRandomItemFromDropdown(MaintainFacilityCodeTablePage.XPATH_FOR_HEALTH_AUTHORITY_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        facilityId = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(10));     
        facilityName = DataUtils.generateRandomTextWithLength(10);     
        addressLine1 = DataUtils.generateRandomTextWithLength(10);     
        addressLine2 = DataUtils.generateRandomTextWithLength(10);
        addressLine3 = DataUtils.generateRandomTextWithLength(10);     
        cityName = DataUtils.generateRandomTextWithLength(10);
        postalCode = DataUtils.generateRandomTextWithLength(10);     
        hsdaCode = DataUtils.generateRandomTextWithLength(10);
        hsdaName = DataUtils.generateRandomTextWithLength(10);
        lhaCode = DataUtils.generateRandomTextWithLength(10);
        lhaName = DataUtils.generateRandomTextWithLength(10);    
        effectiveDate = DATE_FORMAT.format(new Date());
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, -1);        
        expiryDate = DATE_FORMAT.format(cal.getTime());
        
        maintainFacilityCodeTablePage.addRecord(healthAuthority, facilityId, facilityName, addressLine1, addressLine2, addressLine3
                                                , cityName, postalCode, hsdaCode, hsdaName, lhaCode, lhaName, effectiveDate, expiryDate);
        maintainFacilityCodeTablePage.submitForm(MaintainFacilityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EXPIRY_MUST_BE_GREATER_THAN_EFFECTIVE_DATE);
        
        
         // Test to check validation message is displayed when the value in fields have reached their maximum length
        facilityId = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(10));     
        facilityName = DataUtils.generateRandomTextWithLength(255);     
        addressLine1 = DataUtils.generateRandomTextWithLength(255);     
        addressLine2 = DataUtils.generateRandomTextWithLength(255);
        addressLine3 = DataUtils.generateRandomTextWithLength(255);     
        cityName = DataUtils.generateRandomTextWithLength(30);
        postalCode = DataUtils.generateRandomTextWithLength(10);     
        hsdaCode = DataUtils.generateRandomTextWithLength(32);
        hsdaName = DataUtils.generateRandomTextWithLength(50);
        lhaCode = DataUtils.generateRandomTextWithLength(32);
        lhaName = DataUtils.generateRandomTextWithLength(50);    

        maintainFacilityCodeTablePage.addRecord(healthAuthority, facilityId, facilityName, addressLine1, addressLine2, addressLine3
                                                , cityName, postalCode, hsdaCode, hsdaName, lhaCode, lhaName, effectiveDate, expiryDate);
        
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.FACILITY_ID_MAXIMUM_FIELD_LENGTH);
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.FACILITY_NAME_MAXIMUM_FIELD_LENGTH);
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.ADDRESS_LINE_1_MAXIMUM_FIELD_LENGTH);
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.ADDRESS_LINE_2_MAXIMUM_FIELD_LENGTH);
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.ADDRESS_LINE_3_MAXIMUM_FIELD_LENGTH);
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.CITY_NAME_MAXIMUM_FIELD_LENGTH);
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.POSTAL_CODE_MAXIMUM_FIELD_LENGTH);
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.HSDA_CODE_MAXIMUM_FIELD_LENGTH);
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.HSDA_NAME_MAXIMUM_FIELD_LENGTH);
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.LHA_CODE_MAXIMUM_FIELD_LENGTH);
        maintainFacilityCodeTablePage.assertValidationErrorDisplayed(MaintainFacilityCodeTablePage.LHA_NAME_MAXIMUM_FIELD_LENGTH);
        
        
        // Test to check no validation message is displayed when the values in all fields have not reached their maximum length 
        facilityId = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(8));     
        facilityName = DataUtils.generateRandomTextWithLength(10);     
        addressLine1 = DataUtils.generateRandomTextWithLength(10);     
        addressLine2 = DataUtils.generateRandomTextWithLength(10);
        addressLine3 = DataUtils.generateRandomTextWithLength(10);     
        cityName = DataUtils.generateRandomTextWithLength(10);
        postalCode = DataUtils.generateRandomTextWithLength(8);     
        hsdaCode = DataUtils.generateRandomTextWithLength(10);
        hsdaName = DataUtils.generateRandomTextWithLength(10);
        lhaCode = DataUtils.generateRandomTextWithLength(10);
        lhaName = DataUtils.generateRandomTextWithLength(10);   

        maintainFacilityCodeTablePage.addRecord(healthAuthority, facilityId, facilityName, addressLine1, addressLine2, addressLine3
                                                , cityName, postalCode, hsdaCode, hsdaName, lhaCode, lhaName, effectiveDate, expiryDate);        
        maintainFacilityCodeTablePage.assertNoMaximumLengthValidationErrorDisplayed();        
       

    }

    @Test
    @Ignore  // Date comparison (Expiry date) is not correct comparing an empty field with a field that has a value makes the empty field greater
    public void testResultSorting() {
        logger.log(Level.INFO, "Running: 'MaintainFacilityCodeTablePage: testResultSorting'");
        maintainFacilityCodeTablePage.assertTableSortingWorks();
    }
    
    @Test
    public void testResultPaging() {
        logger.log(Level.INFO, "Running: 'MaintainFacilityCodeTablePage: testResultPaging'");        
        maintainFacilityCodeTablePage.assertTablePaginationWorks();
    }
    
    
    @Test
    @Ignore  //Bug: Table omits Address line 3 Column
    public void testRecordSelection() {
        logger.log(Level.INFO, "Running: 'MaintainFacilityCodeTablePage: testRecordSelection'");        
        maintainFacilityCodeTablePage.assertRecordSelectionWorks();
    }
}