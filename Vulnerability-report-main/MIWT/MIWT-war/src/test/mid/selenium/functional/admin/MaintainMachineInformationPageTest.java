package mid.selenium.functional.admin;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import mid.selenium.functional.util.DataUtils;
import mid.selenium.functional.util.ValidationUtils;
import mid.selenium.pageobjects.admin.HomePageAdmin;
import mid.selenium.pageobjects.admin.MaintainMachineInformationCodeTablePage;
import mid.selenium.pageobjects.fragment.LeftMenuCodeTables;
import mid.selenium.pageobjects.utils.PageObjectFactory;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import selenium.util.ActionBot;
import selenium.util.BrowserCapabilities;
import selenium.util.Constants;
import selenium.util.WebDriverFactory;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class MaintainMachineInformationPageTest {

    private static final Logger logger = Logger.getLogger(MaintainMachineInformationPageTest.class.getName());
    private static DesiredCapabilities desiredCapabilities;
    private static WebDriver driver;
    private static HomePageAdmin adminHomePage;
    private static MaintainMachineInformationCodeTablePage maintainMachineInformationCodeTablePage;

    private static LeftMenuCodeTables codeTables;
    private static ActionBot actionBot;
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(Constants.DATE_FORMATTER);

    public MaintainMachineInformationPageTest() {
    }

    @BeforeClass
    public static void setUpClass() throws Exception {

        desiredCapabilities = BrowserCapabilities.getInstance(BrowserCapabilities.BROWSER.IE);
        driver = WebDriverFactory.getInstance(WebDriverFactory.DRIVER_TYPE.SERVER, desiredCapabilities);

        actionBot = new ActionBot(driver);

        codeTables = PageObjectFactory.getCodeTablesMenu(driver, desiredCapabilities);
        adminHomePage = PageObjectFactory.getAdminHomePage(driver, desiredCapabilities);
        maintainMachineInformationCodeTablePage = new MaintainMachineInformationCodeTablePage(adminHomePage, codeTables, driver, desiredCapabilities.getBrowserName()).get();


    }

    @AfterClass
    public static void tearDownClass() {
        maintainMachineInformationCodeTablePage.cleanup();
        codeTables.showMaintainMachineInformationForm();
        
        if (!adminHomePage.isIsSuite()) {
            adminHomePage.signOut();
            driver.quit();
        }
    }
    
    @After
    public void tearDown() {
       maintainMachineInformationCodeTablePage.cancelForm();
       actionBot.waitForAjaxToComplete();
    }

    @Test
    public void testPageLoad() {
        logger.log(Level.INFO, "Running: 'MaintainMachineInformationCodeTablePage: testPageLoad'");
        maintainMachineInformationCodeTablePage.assertPageLoaded();

    }
    
    @Test
    public void testAddNewEntry() {
        logger.log(Level.INFO, "Running: 'MaintainMachineInformationCodeTablePage: testAddNewEntry'");

        String modalityCd = DataUtils.getRandomItemFromDropdown(MaintainMachineInformationCodeTablePage.XPATH_FOR_MODALITY_TYPE_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String facilityName = DataUtils.getRandomItemFromDropdown(MaintainMachineInformationCodeTablePage.XPATH_FOR_FACILITY_NAME_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String machineId = DataUtils.generateRandomTextWithLength(10);     
        String description = DataUtils.generateRandomTextWithLength(10);   
        String department = DataUtils.generateRandomTextWithLength(10);    
        String roomNumber = DataUtils.generateRandomTextWithLength(10);   
        String assetNumber = DataUtils.generateRandomTextWithLength(10); 
        String modelNumber = DataUtils.generateRandomTextWithLength(10); 
        String serialNumber = DataUtils.generateRandomTextWithLength(10); 
        String deviceCode = DataUtils.generateRandomTextWithLength(10); 
        String systemNumber = DataUtils.generateRandomTextWithLength(10); 
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainMachineInformationCodeTablePage.addRecord(modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber , modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate);
        maintainMachineInformationCodeTablePage.submitForm(MaintainMachineInformationCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainMachineInformationCodeTablePage.assertAddSuccessfulMessageDisplayed();        
        maintainMachineInformationCodeTablePage.assertNoGlobalValidationErrors();
        maintainMachineInformationCodeTablePage.assertRecordExist(actionBot.findValueForDisplayedText(driver.findElement(By.xpath(MaintainMachineInformationCodeTablePage.XPATH_FOR_MODALITY_TYPE_CD_FIELD)), modalityCd)
                                                                    , facilityName, machineId, description, department, roomNumber, assetNumber 
                                                                    , modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate);
    }
    
    @Test
    public void testCancelNewEntry() {
        logger.log(Level.INFO, "Running: 'MaintainMachineInformationCodeTablePage: testCancelNewEntry'");

        String modalityCd = DataUtils.getRandomItemFromDropdown(MaintainMachineInformationCodeTablePage.XPATH_FOR_MODALITY_TYPE_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String facilityName = DataUtils.getRandomItemFromDropdown(MaintainMachineInformationCodeTablePage.XPATH_FOR_FACILITY_NAME_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String machineId = DataUtils.generateRandomTextWithLength(10);     
        String description = DataUtils.generateRandomTextWithLength(10);   
        String department = DataUtils.generateRandomTextWithLength(10);    
        String roomNumber = DataUtils.generateRandomTextWithLength(10);   
        String assetNumber = DataUtils.generateRandomTextWithLength(10); 
        String modelNumber = DataUtils.generateRandomTextWithLength(10); 
        String serialNumber = DataUtils.generateRandomTextWithLength(10); 
        String deviceCode = DataUtils.generateRandomTextWithLength(10); 
        String systemNumber = DataUtils.generateRandomTextWithLength(10); 
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainMachineInformationCodeTablePage.addRecord(modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber , modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate, effectiveDate);
        maintainMachineInformationCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        maintainMachineInformationCodeTablePage.assertFieldsAreReset();
        
    }
    
    @Test
    public void testCancelAfterValidationErrors() {
        logger.log(Level.INFO, "Running: 'MaintainMachineInformationCodeTablePage: testCancelAfterValidationErrors'");
        codeTables.showMaintainMachineInformationForm();
        
        maintainMachineInformationCodeTablePage.submitForm(MaintainMachineInformationCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.MACHINE_ID_FIELD_REQUIRED);
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.FACILITY_NAME_FIELD_REQUIRED);        
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.MACHINE_ID_FIELD_REQUIRED); 
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.DESCRIPTION_FIELD_REQUIRED); 
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_REQUIRED);
        
        maintainMachineInformationCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        maintainMachineInformationCodeTablePage.assertNoGlobalValidationErrors();
        
    }

    
    @Test
    @Ignore // Bug: Record in table not updating all fields after making changes
    public void testEditEntry() {
        logger.log(Level.INFO, "Running: 'MaintainMachineInformationCodeTablePage: testEditEntry'");
        
        String modalityCd = DataUtils.getRandomItemFromDropdown(MaintainMachineInformationCodeTablePage.XPATH_FOR_MODALITY_TYPE_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String facilityName = DataUtils.getRandomItemFromDropdown(MaintainMachineInformationCodeTablePage.XPATH_FOR_FACILITY_NAME_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String machineId = DataUtils.generateRandomTextWithLength(10);     
        String description = DataUtils.generateRandomTextWithLength(10);   
        String department = DataUtils.generateRandomTextWithLength(10);    
        String roomNumber = DataUtils.generateRandomTextWithLength(10);   
        String assetNumber = DataUtils.generateRandomTextWithLength(10); 
        String modelNumber = DataUtils.generateRandomTextWithLength(10); 
        String serialNumber = DataUtils.generateRandomTextWithLength(10); 
        String deviceCode = DataUtils.generateRandomTextWithLength(10); 
        String systemNumber = DataUtils.generateRandomTextWithLength(10); 
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainMachineInformationCodeTablePage.addRecord(modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber , modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate);
        maintainMachineInformationCodeTablePage.submitForm(MaintainMachineInformationCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainMachineInformationCodeTablePage.selectRecord(actionBot.findValueForDisplayedText(driver.findElement(By.xpath(MaintainMachineInformationCodeTablePage.XPATH_FOR_MODALITY_TYPE_CD_FIELD)), modalityCd)
                                                                , facilityName, machineId, description, department, roomNumber, assetNumber , modelNumber
                                                                , serialNumber, deviceCode, systemNumber, effectiveDate);
        actionBot.waitForAjaxToComplete();
        
        modalityCd = DataUtils.getRandomItemFromDropdown(MaintainMachineInformationCodeTablePage.XPATH_FOR_MODALITY_TYPE_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        facilityName = DataUtils.getRandomItemFromDropdown(MaintainMachineInformationCodeTablePage.XPATH_FOR_FACILITY_NAME_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        machineId = DataUtils.generateRandomTextWithLength(10);     
        description = DataUtils.generateRandomTextWithLength(10);   
        department = DataUtils.generateRandomTextWithLength(10);    
        roomNumber = DataUtils.generateRandomTextWithLength(10);   
        assetNumber = DataUtils.generateRandomTextWithLength(10); 
        modelNumber = DataUtils.generateRandomTextWithLength(10); 
        serialNumber = DataUtils.generateRandomTextWithLength(10); 
        deviceCode = DataUtils.generateRandomTextWithLength(10); 
        systemNumber = DataUtils.generateRandomTextWithLength(10); 
        
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, 1);        
        effectiveDate = DATE_FORMAT.format(cal.getTime());
        
        maintainMachineInformationCodeTablePage.updateRecord(modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber , modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate);       
        maintainMachineInformationCodeTablePage.submitForm(MaintainMachineInformationCodeTablePage.SUBMIT_BUTTONS.UPDATE);
        actionBot.waitForAjaxToComplete();
 
        maintainMachineInformationCodeTablePage.assertUpdateSuccessfulMessageDisplayed();
        maintainMachineInformationCodeTablePage.assertRecordExist(actionBot.findValueForDisplayedText(driver.findElement(By.xpath(MaintainMachineInformationCodeTablePage.XPATH_FOR_MODALITY_TYPE_CD_FIELD)), modalityCd)
                                                                    , facilityName, machineId, description, department, roomNumber, assetNumber 
                                                                    , modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate);
    }
    
    @Test
    @Ignore // Bug at testing expiry date/effective date, Anatomical Imaging region province field is disabled when validation fails
    public void testInputValidation() {
        logger.log(Level.INFO, "Running: 'MaintainMachineInformationCodeTablePage: testInputValidation'");
        
        
        // Test for required fields
        maintainMachineInformationCodeTablePage.cancelForm();
        
        String modalityCd = "";
        String facilityName = "";
        String machineId = "";    
        String description = "";
        String department = "";    
        String roomNumber = "";
        String assetNumber = ""; 
        String modelNumber = ""; 
        String serialNumber = "";
        String deviceCode = "";
        String systemNumber = ""; 
        String effectiveDate = "";
        String expiryDate = "";

        maintainMachineInformationCodeTablePage.addRecord(modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber , modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate);
        maintainMachineInformationCodeTablePage.submitForm(MaintainMachineInformationCodeTablePage.SUBMIT_BUTTONS.ADD);        
        actionBot.waitForAjaxToComplete();
        
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.MACHINE_ID_FIELD_REQUIRED);
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.FACILITY_NAME_FIELD_REQUIRED);        
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.MACHINE_ID_FIELD_REQUIRED); 
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.DESCRIPTION_FIELD_REQUIRED); 
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_REQUIRED);
        
        
        // Test for invalid values in date Fields
        maintainMachineInformationCodeTablePage.cancelForm();
        
        modalityCd = DataUtils.getRandomItemFromDropdown(MaintainMachineInformationCodeTablePage.XPATH_FOR_MODALITY_TYPE_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        facilityName = DataUtils.getRandomItemFromDropdown(MaintainMachineInformationCodeTablePage.XPATH_FOR_FACILITY_NAME_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        machineId = DataUtils.generateRandomTextWithLength(10);     
        description = DataUtils.generateRandomTextWithLength(10);   
        department = DataUtils.generateRandomTextWithLength(10);    
        roomNumber = DataUtils.generateRandomTextWithLength(10);   
        assetNumber = DataUtils.generateRandomTextWithLength(10); 
        modelNumber = DataUtils.generateRandomTextWithLength(10); 
        serialNumber = DataUtils.generateRandomTextWithLength(10); 
        deviceCode = DataUtils.generateRandomTextWithLength(10); 
        systemNumber = DataUtils.generateRandomTextWithLength(10); 
        effectiveDate = "x";
        expiryDate = "x";
        maintainMachineInformationCodeTablePage.addRecord(modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber , modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate, expiryDate);
        maintainMachineInformationCodeTablePage.submitForm(MaintainMachineInformationCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_INVALID);
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EXPIRY_DATE_INVALID);               
        
         // Test to check validation message is displayed when expiry date is less than effective date
        maintainMachineInformationCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        modalityCd = DataUtils.getRandomItemFromDropdown(MaintainMachineInformationCodeTablePage.XPATH_FOR_MODALITY_TYPE_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        facilityName = DataUtils.getRandomItemFromDropdown(MaintainMachineInformationCodeTablePage.XPATH_FOR_FACILITY_NAME_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        machineId = DataUtils.generateRandomTextWithLength(10);     
        description = DataUtils.generateRandomTextWithLength(10);   
        department = DataUtils.generateRandomTextWithLength(10);    
        roomNumber = DataUtils.generateRandomTextWithLength(10);   
        assetNumber = DataUtils.generateRandomTextWithLength(10); 
        modelNumber = DataUtils.generateRandomTextWithLength(10); 
        serialNumber = DataUtils.generateRandomTextWithLength(10); 
        deviceCode = DataUtils.generateRandomTextWithLength(10); 
        systemNumber = DataUtils.generateRandomTextWithLength(10);
        effectiveDate = DATE_FORMAT.format(new Date());
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, -1);        
        expiryDate = DATE_FORMAT.format(cal.getTime());
        
        maintainMachineInformationCodeTablePage.addRecord(modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber , modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate, expiryDate);
        maintainMachineInformationCodeTablePage.submitForm(MaintainMachineInformationCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EXPIRY_MUST_BE_GREATER_THAN_EFFECTIVE_DATE);
        
        
         // Test to check validation message is displayed when the value in fields have reached their maximum length
        machineId = DataUtils.generateRandomTextWithLength(32);     
        description = DataUtils.generateRandomTextWithLength(50);   
        department = DataUtils.generateRandomTextWithLength(50);    
        roomNumber = DataUtils.generateRandomTextWithLength(32);   
        assetNumber = DataUtils.generateRandomTextWithLength(32); 
        modelNumber = DataUtils.generateRandomTextWithLength(32); 
        serialNumber = DataUtils.generateRandomTextWithLength(32); 
        deviceCode = DataUtils.generateRandomTextWithLength(32); 
        systemNumber = DataUtils.generateRandomTextWithLength(32);
        maintainMachineInformationCodeTablePage.addRecord(modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber , modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate, expiryDate);
        
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.XPATH_FOR_MACHINE_ID_FIELD_LENGTH_VALIDATION);
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.XPATH_FOR_DESCRIPTION_FIELD_LENGTH_VALIDATION);
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.XPATH_FOR_DEPARTMENT_FIELD_LENGTH_VALIDATION);
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.XPATH_FOR_ROOM_NUMBER_FIELD_LENGTH_VALIDATION);
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.XPATH_FOR_ASSET_NUMBER_FIELD_LENGTH_VALIDATION);
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.XPATH_FOR_MODEL_NUMBER_FIELD_LENGTH_VALIDATION);
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.XPATH_FOR_SERIAL_NUMBER_FIELD_LENGTH_VALIDATION);
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.XPATH_FOR_DEVICE_CODE_FIELD_LENGTH_VALIDATION);
        maintainMachineInformationCodeTablePage.assertValidationErrorDisplayed(MaintainMachineInformationCodeTablePage.XPATH_FOR_SYSTEM_NUMBER_FIELD_LENGTH_VALIDATION);
        
        
        // Test to check no validation message is displayed when the values in all fields have not reached their maximum length 
        machineId = DataUtils.generateRandomTextWithLength(10);     
        description = DataUtils.generateRandomTextWithLength(10);   
        department = DataUtils.generateRandomTextWithLength(10);    
        roomNumber = DataUtils.generateRandomTextWithLength(10);   
        assetNumber = DataUtils.generateRandomTextWithLength(10); 
        modelNumber = DataUtils.generateRandomTextWithLength(10); 
        serialNumber = DataUtils.generateRandomTextWithLength(10); 
        deviceCode = DataUtils.generateRandomTextWithLength(10); 
        systemNumber = DataUtils.generateRandomTextWithLength(10);
        maintainMachineInformationCodeTablePage.addRecord(modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber , modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate, expiryDate);        
        maintainMachineInformationCodeTablePage.assertNoMaximumLengthValidationErrorDisplayed();
        
       

    }

    @Test
    @Ignore  // Date comparison (Expiry date) is not correct comparing an empty field with a field that has a value makes the empty field greater
    public void testResultSorting() {
        logger.log(Level.INFO, "Running: 'MaintainMachineInformationCodeTablePage: testResultSorting'");
        maintainMachineInformationCodeTablePage.assertTableSortingWorks();
    }
    
    @Test
    public void testResultPaging() {
        logger.log(Level.INFO, "Running: 'MaintainMachineInformationCodeTablePage: testResultPaging'");        
        maintainMachineInformationCodeTablePage.assertTablePaginationWorks();
    }
    
    
    @Test
    public void testRecordSelection() {
        logger.log(Level.INFO, "Running: 'MaintainMachineInformationCodeTablePage: testRecordSelection'");        
        maintainMachineInformationCodeTablePage.assertRecordSelectionWorks();
    }
}