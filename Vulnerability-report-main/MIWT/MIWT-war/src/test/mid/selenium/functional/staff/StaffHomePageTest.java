package mid.selenium.functional.staff;

import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import mid.selenium.pageobjects.admin.HomePageAdmin;
import mid.selenium.pageobjects.HomePageStaff;
import mid.selenium.pageobjects.fragment.LeftMenuAdmin;
import mid.selenium.pageobjects.fragment.LeftMenuCodeTables;
import mid.selenium.pageobjects.fragment.LeftMenuHAMappings;
import mid.selenium.pageobjects.fragment.LeftMenuReports;
import mid.selenium.pageobjects.fragment.LeftMenuSnapshot;
import mid.selenium.pageobjects.fragment.LeftMenuStaff;
import mid.selenium.pageobjects.fragment.LeftMenuUploadFile;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import selenium.pageobject.LoginPage;
import selenium.util.ActionBot;
import selenium.util.Constants;
import selenium.util.UserAccounts;
import selenium.util.WebDriverFactory;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class StaffHomePageTest {

    private static final Logger logger = Logger.getLogger(StaffHomePageTest.class.getName());
    private static DesiredCapabilities desiredCapabilities;
    private static WebDriver driver;
    private static HomePageStaff staffHomePage;
    private static ActionBot actionBot;

    public StaffHomePageTest() {
    }

    @BeforeClass
    public static void setUpClass() throws Exception {
        desiredCapabilities = DesiredCapabilities.internetExplorer();
        desiredCapabilities.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);

        driver = WebDriverFactory.getInstance(WebDriverFactory.DRIVER_TYPE.SERVER, desiredCapabilities);

        actionBot = new ActionBot(driver);

        LoginPage loginPage = new LoginPage(driver, desiredCapabilities.getBrowserName(), UserAccounts.STAFF, UserAccounts.getPassword(UserAccounts.STAFF));
        LeftMenuReports reports = new LeftMenuReports(driver, desiredCapabilities.getBrowserName());
        LeftMenuStaff leftMenu = new LeftMenuStaff(reports, driver, desiredCapabilities.getBrowserName());
        staffHomePage = new HomePageStaff(loginPage, leftMenu, driver, desiredCapabilities.getBrowserName()).get();


    }

    @AfterClass
    public static void tearDownClass() {
        staffHomePage.signOut();
        driver.quit();
    }


    @Test
    public void testPageLoad() {
        logger.log(Level.INFO, "Running: 'StaffHomePageTest: testPageLoad'");
        LeftMenuSnapshot snapshot = new LeftMenuSnapshot(driver, desiredCapabilities.getBrowserName());
        LeftMenuHAMappings haMappings = new LeftMenuHAMappings(driver, desiredCapabilities.getBrowserName());
        LeftMenuCodeTables codeTables = new LeftMenuCodeTables(driver, desiredCapabilities.getBrowserName());
        LeftMenuUploadFile upload = new LeftMenuUploadFile(driver, desiredCapabilities.getBrowserName());
        
        staffHomePage.assertPageLoaded();
        snapshot.assertNotLoaded();
        haMappings.assertNotLoaded();
        codeTables.assertNotLoaded();
        upload.assertNotLoaded();

    }

}