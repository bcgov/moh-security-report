package mid.selenium.functional.admin;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import mid.selenium.functional.util.DataUtils;
import mid.selenium.functional.util.ValidationUtils;
import mid.selenium.pageobjects.admin.HomePageAdmin;
import mid.selenium.pageobjects.admin.MaintainHealthAuthorityCodeTablePage;
import mid.selenium.pageobjects.fragment.LeftMenuCodeTables;
import mid.selenium.pageobjects.utils.PageObjectFactory;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import selenium.util.ActionBot;
import selenium.util.BrowserCapabilities;
import selenium.util.Constants;
import selenium.util.WebDriverFactory;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class MaintainHealthAuthorityPageTest {

    private static final Logger logger = Logger.getLogger(MaintainHealthAuthorityPageTest.class.getName());
    private static DesiredCapabilities desiredCapabilities;
    private static WebDriver driver;
    private static HomePageAdmin adminHomePage;
    private static MaintainHealthAuthorityCodeTablePage maintainHealthAuthorityCodeTablePage;

    private static LeftMenuCodeTables codeTables;
    private static ActionBot actionBot;
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(Constants.DATE_FORMATTER);

    public MaintainHealthAuthorityPageTest() {
    }

    @BeforeClass
    public static void setUpClass() throws Exception {

        desiredCapabilities = BrowserCapabilities.getInstance(BrowserCapabilities.BROWSER.IE);
        driver = WebDriverFactory.getInstance(WebDriverFactory.DRIVER_TYPE.SERVER, desiredCapabilities);

        actionBot = new ActionBot(driver);

        codeTables = PageObjectFactory.getCodeTablesMenu(driver, desiredCapabilities);
        adminHomePage = PageObjectFactory.getAdminHomePage(driver, desiredCapabilities);
        maintainHealthAuthorityCodeTablePage = new MaintainHealthAuthorityCodeTablePage(adminHomePage, codeTables, driver, desiredCapabilities.getBrowserName()).get();


    }

    @AfterClass
    public static void tearDownClass() {
        maintainHealthAuthorityCodeTablePage.cleanup();
        codeTables.showMaintainHealthAuthorityForm();
        
        if (!adminHomePage.isIsSuite()) {
            adminHomePage.signOut();
            driver.quit();
        }
    }
    
    @After
    public void tearDown() {
       maintainHealthAuthorityCodeTablePage.cancelForm();
       actionBot.waitForAjaxToComplete();
    }

    @Test
    public void testPageLoad() {
        logger.log(Level.INFO, "Running: 'MaintainHealthAuthorityCodeTablePage: testPageLoad'");
        maintainHealthAuthorityCodeTablePage.assertPageLoaded();

    }
    
    @Test
    public void testAddNewEntry() {
        logger.log(Level.INFO, "Running: 'MaintainHealthAuthorityCodeTablePage: testAddNewEntry'");
        
        String id = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String code = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String name = String.valueOf(DataUtils.generateRandomTextWithLength(10));        
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainHealthAuthorityCodeTablePage.addRecord(id, code, name, effectiveDate);
        maintainHealthAuthorityCodeTablePage.submitForm(MaintainHealthAuthorityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

         maintainHealthAuthorityCodeTablePage.assertAddSuccessfulMessageDisplayed();        
        maintainHealthAuthorityCodeTablePage.assertNoGlobalValidationErrors();
        maintainHealthAuthorityCodeTablePage.assertRecordExist(id, code, name, effectiveDate);
    }
    
    @Test
    public void testCancelNewEntry() {
        logger.log(Level.INFO, "Running: 'MaintainHealthAuthorityCodeTablePage: testCancelNewEntry'");

        String code = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String name = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String id = String.valueOf(DataUtils.generateRandomTextWithLength(10));

        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainHealthAuthorityCodeTablePage.addRecord(id, code, name, effectiveDate, effectiveDate);
        maintainHealthAuthorityCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        maintainHealthAuthorityCodeTablePage.assertFieldsAreReset();
        
    }
    
    @Test
    public void testCancelAfterValidationErrors() {
        logger.log(Level.INFO, "Running: 'MaintainHealthAuthorityCodeTablePage: testCancelAfterValidationErrors'");
        codeTables.showMaintainHealthAuthorityForm();
        
        maintainHealthAuthorityCodeTablePage.submitForm(MaintainHealthAuthorityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        
        maintainHealthAuthorityCodeTablePage.assertValidationErrorDisplayed(MaintainHealthAuthorityCodeTablePage.HEALTH_AUTHORITY_ID_FIELD_REQUIRED);
        maintainHealthAuthorityCodeTablePage.assertValidationErrorDisplayed(MaintainHealthAuthorityCodeTablePage.HEALTH_AUTHORITY_CODE_FIELD_REQUIRED);
        maintainHealthAuthorityCodeTablePage.assertValidationErrorDisplayed(MaintainHealthAuthorityCodeTablePage.HEALTH_AUTHORITY_NAME_FIELD_REQUIRED);        
        maintainHealthAuthorityCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_REQUIRED);
        
        maintainHealthAuthorityCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        maintainHealthAuthorityCodeTablePage.assertNoGlobalValidationErrors();
        
    }

    
    @Test
    public void testEditEntry() {
        logger.log(Level.INFO, "Running: 'MaintainHealthAuthorityCodeTablePage: testEditEntry'");
        
        String code = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String name = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String id = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainHealthAuthorityCodeTablePage.addRecord(id, code, name, effectiveDate);
        maintainHealthAuthorityCodeTablePage.submitForm(MaintainHealthAuthorityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
            
        maintainHealthAuthorityCodeTablePage.selectRecord(id, code, name, effectiveDate);
        actionBot.waitForAjaxToComplete();
        
        code = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        name = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, 1);        
        effectiveDate = DATE_FORMAT.format(cal.getTime());
        
        maintainHealthAuthorityCodeTablePage.updateRecord(code, name, effectiveDate);
        maintainHealthAuthorityCodeTablePage.assertCodeFieldNotEditable();        
        maintainHealthAuthorityCodeTablePage.submitForm(MaintainHealthAuthorityCodeTablePage.SUBMIT_BUTTONS.UPDATE);
        actionBot.waitForAjaxToComplete();
      
        maintainHealthAuthorityCodeTablePage.assertUpdateSuccessfulMessageDisplayed();
        maintainHealthAuthorityCodeTablePage.assertRecordExist(id, code, name, effectiveDate);
    }
    
    @Test
    @Ignore // Bug at testing expiry date/effective date, Anatomical Imaging region code field is disabled when validation fails
    public void testInputValidation() {
        logger.log(Level.INFO, "Running: 'MaintainHealthAuthorityCodeTablePage: testInputValidation'");
                
        String code = "";
        String name = "";
        String id = "";
        String effectiveDate = "";
        String expiryDate = "";

        maintainHealthAuthorityCodeTablePage.addRecord(id, code, name, effectiveDate);
        maintainHealthAuthorityCodeTablePage.submitForm(MaintainHealthAuthorityCodeTablePage.SUBMIT_BUTTONS.ADD);        
        actionBot.waitForAjaxToComplete();

        maintainHealthAuthorityCodeTablePage.assertValidationErrorDisplayed(MaintainHealthAuthorityCodeTablePage.HEALTH_AUTHORITY_CODE_FIELD_REQUIRED);
        maintainHealthAuthorityCodeTablePage.assertValidationErrorDisplayed(MaintainHealthAuthorityCodeTablePage.HEALTH_AUTHORITY_NAME_FIELD_REQUIRED);
        maintainHealthAuthorityCodeTablePage.assertValidationErrorDisplayed(MaintainHealthAuthorityCodeTablePage.HEALTH_AUTHORITY_ID_FIELD_REQUIRED);
        maintainHealthAuthorityCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_REQUIRED);
        
        
        // Test for invalid values in all Fields
        maintainHealthAuthorityCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        code = "x";
        name = "x";
        id = "x";
        effectiveDate = "x";
        expiryDate = "x";
        maintainHealthAuthorityCodeTablePage.addRecord(id, code, name, effectiveDate, expiryDate);
        maintainHealthAuthorityCodeTablePage.submitForm(MaintainHealthAuthorityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainHealthAuthorityCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_INVALID);
        maintainHealthAuthorityCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EXPIRY_DATE_INVALID);
               
                
         // Test to check validation message is displayed when expiry date is less than effective date
        maintainHealthAuthorityCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        code = "x";
        name = "x";
        id = "x";
        effectiveDate = DATE_FORMAT.format(new Date());
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, -1);        
        expiryDate = DATE_FORMAT.format(cal.getTime());
        
        maintainHealthAuthorityCodeTablePage.addRecord(id, code, name, effectiveDate, expiryDate);
        maintainHealthAuthorityCodeTablePage.submitForm(MaintainHealthAuthorityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainHealthAuthorityCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EXPIRY_MUST_BE_GREATER_THAN_EFFECTIVE_DATE);
        
        
         // Test to check validation message is displayed when the values in Anantomical Code,  Name and Description have reached their maximum length
        code = String.valueOf(DataUtils.generateRandomTextWithLength(10));    
        name = String.valueOf(DataUtils.generateRandomTextWithLength(255));   
        id = String.valueOf(DataUtils.generateRandomTextWithLength(255));   
        maintainHealthAuthorityCodeTablePage.addRecord(id, code, name, effectiveDate, expiryDate);
        
         maintainHealthAuthorityCodeTablePage.assertValidationErrorDisplayed(MaintainHealthAuthorityCodeTablePage.HEALTH_AUTHORITY_CODE_MAXIMUM_FIELD_LENGTH);
        maintainHealthAuthorityCodeTablePage.assertValidationErrorDisplayed(MaintainHealthAuthorityCodeTablePage.HEALTH_AUTHORITY_NAME_MAXIMUM_FIELD_LENGTH);
        maintainHealthAuthorityCodeTablePage.assertValidationErrorDisplayed(MaintainHealthAuthorityCodeTablePage.HEALTH_AUTHORITY_ID_MAXIMUM_FIELD_LENGTH);
        
        
        // Test to check no validation message is displayed when the values in Anantomical Code and Anantomical Name have not reached their maximum length 
        code = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(9));   
        name = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(9)); 
        id = String.valueOf(DataUtils.generateRandomTextWithLength(10));  
        maintainHealthAuthorityCodeTablePage.addRecord(id, code, name, effectiveDate, expiryDate);        
        maintainHealthAuthorityCodeTablePage.assertNoMaximumLengthValidationErrorDisplayed();
        
       

    }
    
    @Test
    public void testCodeUniqueness() {
        logger.log(Level.INFO, "Running: 'MaintainAppropriatenessCodeTablePage: testCodeUniqueness'");
        
        String code = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String name = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String id = String.valueOf(DataUtils.generateRandomTextWithLength(10));  
        String effectiveDate = DATE_FORMAT.format(new Date());
        
        maintainHealthAuthorityCodeTablePage.addRecord(id, code, name, effectiveDate);   
        maintainHealthAuthorityCodeTablePage.submitForm(MaintainHealthAuthorityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        
        maintainHealthAuthorityCodeTablePage.addRecord(id, code, name, effectiveDate);   
        maintainHealthAuthorityCodeTablePage.submitForm(MaintainHealthAuthorityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        maintainHealthAuthorityCodeTablePage.assertValidationErrorDisplayed(MaintainHealthAuthorityCodeTablePage.HEALTH_AUTHORITY_ID_FIELD_UNIQUE);
    }
    
    @Test
    public void testCancelEditEntry() {
        logger.log(Level.INFO, "Running: 'MaintainHealthAuthorityCodeTablePage: testCancelEditEntry'");
        
        String code = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String name = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String id = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String effectiveDate = DATE_FORMAT.format(new Date());
        
        maintainHealthAuthorityCodeTablePage.selectRecord();
        actionBot.waitForAjaxToComplete();
        
        maintainHealthAuthorityCodeTablePage.updateRecord(code, name, effectiveDate);
        maintainHealthAuthorityCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        maintainHealthAuthorityCodeTablePage.assertRecordDoesNotExist(id, code, name, effectiveDate);
                
    }
    

    @Test
    @Ignore  // Date comparison (Expiry date) is not correct comparing an empty field with a field that has a value makes the empty field greater
    public void testResultSorting() {
        logger.log(Level.INFO, "Running: 'MaintainHealthAuthorityCodeTablePage: testResultSorting'");
        maintainHealthAuthorityCodeTablePage.assertTableSortingWorks();
    }
    
    @Test
    public void testResultPaging() {
        logger.log(Level.INFO, "Running: 'MaintainHealthAuthorityCodeTablePage: testResultPaging'");        
        maintainHealthAuthorityCodeTablePage.assertTablePaginationWorks();
    }
    
    
    @Test
    public void testRecordSelection() {
        logger.log(Level.INFO, "Running: 'MaintainHealthAuthorityCodeTablePage: testRecordSelection'");        
        maintainHealthAuthorityCodeTablePage.assertRecordSelectionWorks();
    }
}