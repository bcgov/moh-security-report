package mid.selenium.functional.admin;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import mid.selenium.functional.util.DataUtils;
import mid.selenium.functional.util.ValidationUtils;
import mid.selenium.pageobjects.admin.HomePageAdmin;
import mid.selenium.pageobjects.admin.MaintainAgeRangeCodeTablePage;
import mid.selenium.pageobjects.fragment.LeftMenuCodeTables;
import mid.selenium.pageobjects.fragment.LeftMenuHAMappings;
import mid.selenium.pageobjects.utils.PageObjectFactory;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import selenium.util.ActionBot;
import selenium.util.BrowserCapabilities;
import selenium.util.Constants;
import selenium.util.WebDriverFactory;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class MaintainAgeRangePageTest {

    private static final Logger logger = Logger.getLogger(MaintainAgeRangePageTest.class.getName());
    private static DesiredCapabilities desiredCapabilities;
    private static WebDriver driver;
    private static HomePageAdmin adminHomePage;
    private static MaintainAgeRangeCodeTablePage maintainAgeRangeCodeTablePage;
    private static LeftMenuCodeTables codeTables;
    private static ActionBot actionBot;
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(Constants.DATE_FORMATTER);

    public MaintainAgeRangePageTest() {
    }

    @BeforeClass
    public static void setUpClass() throws Exception {

        desiredCapabilities = BrowserCapabilities.getInstance(BrowserCapabilities.BROWSER.IE);
        driver = WebDriverFactory.getInstance(WebDriverFactory.DRIVER_TYPE.SERVER, desiredCapabilities);

        actionBot = new ActionBot(driver); 
        
        codeTables = PageObjectFactory.getCodeTablesMenu(driver, desiredCapabilities);
        adminHomePage = PageObjectFactory.getAdminHomePage(driver, desiredCapabilities);
        maintainAgeRangeCodeTablePage = new MaintainAgeRangeCodeTablePage(adminHomePage, codeTables, driver, desiredCapabilities.getBrowserName()).get();

    }

    @AfterClass
    public static void tearDownClass() {
        maintainAgeRangeCodeTablePage.cleanup();
        codeTables.showMaintainAgeRangeForm();
        
        if (!adminHomePage.isIsSuite()) {
            adminHomePage.signOut();
            driver.quit();
        }
    }
    
    @After
    public void tearDown() {
       maintainAgeRangeCodeTablePage.cancelForm();
       actionBot.waitForAjaxToComplete();
    }

    @Test
    public void testPageLoad() {
        logger.log(Level.INFO, "Running: 'MaintainAgeRangePageTest: testPageLoad'");
        maintainAgeRangeCodeTablePage.assertPageLoaded();

    }
    
    @Test
    public void testAddNewEntry() {
        logger.log(Level.INFO, "Running: 'MaintainAgeRangePageTest: testAddNewEntry'");
        String startAge = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(10));
        String endAge = String.valueOf(DataUtils.generateRandomNumberWithMaxLengthAndOffset(10, 1));

        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainAgeRangeCodeTablePage.addRecord(startAge, endAge, effectiveDate);
        maintainAgeRangeCodeTablePage.submitForm(MaintainAgeRangeCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        maintainAgeRangeCodeTablePage.assertAddSuccessfulMessageDisplayed();
        
        maintainAgeRangeCodeTablePage.assertNoGlobalValidationErrors();
        maintainAgeRangeCodeTablePage.assertRecordExist(startAge, endAge, effectiveDate);
    }
    
    @Test
    public void testCancelNewEntry() {
        logger.log(Level.INFO, "Running: 'MaintainAgeRangePageTest: testCancelNewEntry'");

        String startAge = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(10));
        String endAge = String.valueOf(DataUtils.generateRandomNumberWithMaxLengthAndOffset(10, 1));

        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainAgeRangeCodeTablePage.addRecord(startAge, endAge, effectiveDate, effectiveDate);
        maintainAgeRangeCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        maintainAgeRangeCodeTablePage.assertFieldsAreReset();
        
    }
    
    @Test
    public void testCancelAfterValidationErrors() {
        logger.log(Level.INFO, "Running: 'MaintainAgeRangePageTest: testCancelAfterValidationErrors'");
        codeTables.showMaintainAgeRangeForm();
        
        maintainAgeRangeCodeTablePage.submitForm(MaintainAgeRangeCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        
        maintainAgeRangeCodeTablePage.assertValidationErrorDisplayed(MaintainAgeRangeCodeTablePage.START_AGE_REQUIRED);
        maintainAgeRangeCodeTablePage.assertValidationErrorDisplayed(MaintainAgeRangeCodeTablePage.END_AGE_REQUIRED);
        maintainAgeRangeCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_REQUIRED);
        
        maintainAgeRangeCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        maintainAgeRangeCodeTablePage.assertNoGlobalValidationErrors();
        
    }

    
    @Test
    public void testEditEntry() {
        logger.log(Level.INFO, "Running: 'MaintainAgeRangePageTest: testEditEntry'");
        
        String startAge = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(10));
        String endAge = String.valueOf(DataUtils.generateRandomNumberWithMaxLengthAndOffset(10, 1));
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainAgeRangeCodeTablePage.addRecord(startAge, endAge, effectiveDate);
        maintainAgeRangeCodeTablePage.submitForm(MaintainAgeRangeCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainAgeRangeCodeTablePage.selectRecord(startAge, endAge, effectiveDate);
        startAge = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(10));
        endAge = String.valueOf(DataUtils.generateRandomNumberWithMaxLengthAndOffset(10, 1));
        
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, 1);        
        effectiveDate = DATE_FORMAT.format(cal.getTime());
        
        maintainAgeRangeCodeTablePage.updateRecord(startAge, endAge, effectiveDate);
        maintainAgeRangeCodeTablePage.submitForm(MaintainAgeRangeCodeTablePage.SUBMIT_BUTTONS.UPDATE);
        actionBot.waitForAjaxToComplete();
        
        maintainAgeRangeCodeTablePage.assertUpdateSuccessfulMessageDisplayed();
        maintainAgeRangeCodeTablePage.assertRecordExist(startAge, endAge, effectiveDate);
    }
    
    @Test
    public void testInputValidation() {
        logger.log(Level.INFO, "Running: 'MaintainAgeRangePageTest: testInputValidation'");
        
        
        // Test for required fields        
        String startAge = "";
        String endAge = "";
        String effectiveDate = "";
        String expiryDate = "";

        maintainAgeRangeCodeTablePage.addRecord(startAge, endAge, effectiveDate);
        maintainAgeRangeCodeTablePage.submitForm(MaintainAgeRangeCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();  
        maintainAgeRangeCodeTablePage.assertValidationErrorDisplayed(MaintainAgeRangeCodeTablePage.START_AGE_REQUIRED);
        maintainAgeRangeCodeTablePage.assertValidationErrorDisplayed(MaintainAgeRangeCodeTablePage.END_AGE_REQUIRED);
        maintainAgeRangeCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_REQUIRED);
        
        
        // Test for invalid values in Start Age and End Age Fields
        maintainAgeRangeCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        startAge = "x";
        endAge = "x";
        maintainAgeRangeCodeTablePage.addRecord(startAge, endAge, effectiveDate);
        maintainAgeRangeCodeTablePage.submitForm(MaintainAgeRangeCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        maintainAgeRangeCodeTablePage.assertValidationErrorDisplayed(MaintainAgeRangeCodeTablePage.START_AGE_POSITIVE_WHOLE_NUMBER);
        maintainAgeRangeCodeTablePage.assertValidationErrorDisplayed(MaintainAgeRangeCodeTablePage.START_END_POSITIVE_WHOLE_NUMBER);
        
        
        // Test for invalid values in all Fields
        maintainAgeRangeCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        startAge = "x";
        endAge = "x";
        effectiveDate = "x";
        expiryDate = "x";
        maintainAgeRangeCodeTablePage.addRecord(startAge, endAge, effectiveDate, expiryDate);
        maintainAgeRangeCodeTablePage.submitForm(MaintainAgeRangeCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        maintainAgeRangeCodeTablePage.assertValidationErrorDisplayed(MaintainAgeRangeCodeTablePage.START_AGE_POSITIVE_WHOLE_NUMBER);
        maintainAgeRangeCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_INVALID);
        maintainAgeRangeCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EXPIRY_DATE_INVALID);
        
        
        // Test to check validation message is displayed when start age and end age are equal
        maintainAgeRangeCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        startAge = "2";
        endAge = "2";
        effectiveDate = DATE_FORMAT.format(new Date());
        maintainAgeRangeCodeTablePage.addRecord(startAge, endAge, effectiveDate);
        maintainAgeRangeCodeTablePage.submitForm(MaintainAgeRangeCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        maintainAgeRangeCodeTablePage.assertValidationErrorDisplayed(MaintainAgeRangeCodeTablePage.START_AGE_MUST_BE_LESS_THAN_END_AGE);
        
        
        // Test to check validation message is displayed when start age is greater than end age
        maintainAgeRangeCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        startAge = "3";
        endAge = "2";
        effectiveDate = DATE_FORMAT.format(new Date());
        maintainAgeRangeCodeTablePage.addRecord(startAge, endAge, effectiveDate);
        maintainAgeRangeCodeTablePage.submitForm(MaintainAgeRangeCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();      
        maintainAgeRangeCodeTablePage.assertValidationErrorDisplayed(MaintainAgeRangeCodeTablePage.START_AGE_MUST_BE_LESS_THAN_END_AGE);
                
         // Test to check validation message is displayed when expiry date is less than effective date
        maintainAgeRangeCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        startAge = "2";
        endAge = "3";
        effectiveDate = DATE_FORMAT.format(new Date());
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, -1);        
        expiryDate = DATE_FORMAT.format(cal.getTime());
        
        maintainAgeRangeCodeTablePage.addRecord(startAge, endAge, effectiveDate, expiryDate);
        maintainAgeRangeCodeTablePage.submitForm(MaintainAgeRangeCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        maintainAgeRangeCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EXPIRY_MUST_BE_GREATER_THAN_EFFECTIVE_DATE);
        
        
         // Test to check validation message is displayed when the values in start age and end age have reached their maximum length
        startAge = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(10));    
        endAge = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(10));   
        maintainAgeRangeCodeTablePage.addRecord(startAge, endAge, effectiveDate, expiryDate);
        
        actionBot.waitForLoadingUsingXpath(MaintainAgeRangeCodeTablePage.XPATH_FOR_START_AGE_FIELD_LENGTH_VALIDATION, Constants.MEDIUM_TIMEOUT);
        actionBot.waitForLoadingUsingXpath(MaintainAgeRangeCodeTablePage.XPATH_FOR_END_AGE_FIELD_LENGTH_VALIDATION, Constants.MEDIUM_TIMEOUT);
        maintainAgeRangeCodeTablePage.assertValidationErrorDisplayed(MaintainAgeRangeCodeTablePage.START_AGE_MAXIMUM_FIELD_LENGTH);
        maintainAgeRangeCodeTablePage.assertValidationErrorDisplayed(MaintainAgeRangeCodeTablePage.END_AGE_MAXIMUM_FIELD_LENGTH);
        
        // Test to check no validation message is displayed when the values in start age and end age have not reached their maximum length 
        startAge = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(9));   
        endAge = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(9)); 
        maintainAgeRangeCodeTablePage.addRecord(startAge, endAge, effectiveDate, expiryDate);        
        maintainAgeRangeCodeTablePage.assertNoMaximumLengthValidationErrorDisplayed();
        
       

    }
    
    
    @Test
    public void testCancelEditEntry() {
        logger.log(Level.INFO, "Running: 'MaintainAgeRangePageTest: testCancelEditEntry'");
        
        String startAge = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(10));
        String endAge = String.valueOf(DataUtils.generateRandomNumberWithMaxLengthAndOffset(10, 1));
        String effectiveDate = DATE_FORMAT.format(new Date());
        
        maintainAgeRangeCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        maintainAgeRangeCodeTablePage.selectRecord();
        actionBot.waitForAjaxToComplete();
        maintainAgeRangeCodeTablePage.updateRecord(startAge, endAge, effectiveDate);
        maintainAgeRangeCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        maintainAgeRangeCodeTablePage.assertRecordDoesNotExist(startAge, endAge, effectiveDate);
                
    }
    

    @Test
    @Ignore // Age sorting isa incorrect, needs to be fixed.
             // Date comparison (Expiry date) is not correct comparing an empty field with a field that has a value makes the empty field greater    
    public void testResultSorting() {
        logger.log(Level.INFO, "Running: 'MaintainAgeRangePageTest: testResultSorting'");
        maintainAgeRangeCodeTablePage.assertTableSortingWorks();
    }
    
    @Test
    public void testResultPaging() {
        logger.log(Level.INFO, "Running: 'MaintainAgeRangePageTest: testResultPaging'");        
        maintainAgeRangeCodeTablePage.assertTablePaginationWorks();
    }
    
    
    @Test
    public void testRecordSelection() {
        logger.log(Level.INFO, "Running: 'MaintainAgeRangePageTest: testRecordSelection'");        
        maintainAgeRangeCodeTablePage.assertRecordSelectionWorks();
    }
}