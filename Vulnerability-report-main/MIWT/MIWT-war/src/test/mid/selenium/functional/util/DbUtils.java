package mid.selenium.functional.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import selenium.util.Constants;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class DbUtils {

    public enum TYPE {

        NUMBER, STRING, DATE, CLOB
    }

    public static void executeStatement(String tableName, String operation, List<Map<String, FieldValue>> data) {

        String[] sql = createStatements(tableName, operation, data);

        try (Connection conn = DriverManager.getConnection(Constants.DB_URL, Constants.DB_USER, Constants.DB_PASSWORD);
                Statement stmt = conn.createStatement()) {

            for (String s : sql) {
                stmt.addBatch(s);
            }

            stmt.executeBatch();
        } catch (SQLException ex) {
            Logger.getLogger(DbUtils.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private static String[] createStatements(String tableName, String operation, List<Map<String, FieldValue>> data) {

        String[] sql = new String[data.size()];
        StringBuilder builder = new StringBuilder();

        for (int i = 0; i < sql.length; i++) {
            Iterator<Entry<String, FieldValue>> itr = data.get(i).entrySet().iterator();
            Entry<String, FieldValue> temp;
            if (operation.equalsIgnoreCase("DELETE")) {
                builder.append(operation).append(" FROM ").append(tableName).append(" WHERE ");

                while (itr.hasNext()) {
                    temp = itr.next();

                    if (TYPE.STRING.equals(temp.getValue().type)) {
                        builder.append(temp.getKey()).append(" = '").append(temp.getValue().value).append("'");
                    } else if (TYPE.CLOB.equals(temp.getValue().type)) {
                        builder.append(temp.getKey()).append(" = TO_CLOB('").append(temp.getValue().value).append("')");                      
                    } else if (TYPE.NUMBER.equals(temp.getValue().type)) {
                        builder.append(temp.getKey()).append(" = ").append(temp.getValue().value);                        
                    } else if (TYPE.DATE.equals(temp.getValue().type)) {
                        builder.append(temp.getKey()).append(" = TO_DATE('").append(temp.getValue().value).append("', '").append(Constants.DB_DATE_FORMATTER).append("')");
                    }
                    
                    builder.append(" AND ");
                }
                
                // remove trailing ' AND '
                builder.delete(builder.lastIndexOf(" AND "), builder.length());
                sql[i] = builder.toString();
                builder.delete(0, builder.length());
            }
        }

        return sql;
    }

    public static class FieldValue {

        public final TYPE type;
        public final Object value;

        public FieldValue(TYPE type, Object value) {
            this.type = type;
            this.value = value;
        }
    }
}
