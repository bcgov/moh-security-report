package mid.selenium.functional.admin;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import mid.selenium.functional.util.DataUtils;
import mid.selenium.functional.util.ValidationUtils;
import mid.selenium.pageobjects.admin.HomePageAdmin;
import mid.selenium.pageobjects.admin.MaintainProcedureCodeTablePage;
import mid.selenium.pageobjects.fragment.LeftMenuCodeTables;
import mid.selenium.pageobjects.utils.PageObjectFactory;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import selenium.util.ActionBot;
import selenium.util.BrowserCapabilities;
import selenium.util.Constants;
import selenium.util.WebDriverFactory;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class MaintainProcedurePageTest {

    private static final Logger logger = Logger.getLogger(MaintainProcedurePageTest.class.getName());
    private static DesiredCapabilities desiredCapabilities;
    private static WebDriver driver;
    private static HomePageAdmin adminHomePage;
    private static MaintainProcedureCodeTablePage maintainProcedureCodeTablePage;
    private static LeftMenuCodeTables codeTables;
    private static ActionBot actionBot;
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(Constants.DATE_FORMATTER);

    public MaintainProcedurePageTest() {
    }

    @BeforeClass
    public static void setUpClass() throws Exception {

        desiredCapabilities = BrowserCapabilities.getInstance(BrowserCapabilities.BROWSER.IE);
        driver = WebDriverFactory.getInstance(WebDriverFactory.DRIVER_TYPE.SERVER, desiredCapabilities);

        actionBot = new ActionBot(driver);

        codeTables = PageObjectFactory.getCodeTablesMenu(driver, desiredCapabilities);
        adminHomePage = PageObjectFactory.getAdminHomePage(driver, desiredCapabilities);
        maintainProcedureCodeTablePage = new MaintainProcedureCodeTablePage(adminHomePage, codeTables, driver, desiredCapabilities.getBrowserName()).get();


    }

    @AfterClass
    public static void tearDownClass() {
        maintainProcedureCodeTablePage.cleanup();
        codeTables.showMaintainProcedureForm();

        if (!adminHomePage.isIsSuite()) {
            adminHomePage.signOut();
            driver.quit();
        }
    }

    @After
    public void tearDown() {
        maintainProcedureCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
    }

    @Test
    public void testPageLoad() {
        logger.log(Level.INFO, "Running: 'MaintainProcedurePageTest: testPageLoad'");
        maintainProcedureCodeTablePage.assertPageLoaded();

    }

    @Test
    public void testAddNewEntry() {
        logger.log(Level.INFO, "Running: 'MaintainProcedurePageTest: testAddNewEntry'");

        String modalityCd = DataUtils.getRandomItemFromDropdown(MaintainProcedureCodeTablePage.XPATH_FOR_MODALITY_TYPE_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String imagingRegion = DataUtils.getRandomItemFromDropdown(MaintainProcedureCodeTablePage.XPATH_FOR_IMAGING_REGION_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String rPidCode = DataUtils.generateRandomTextWithLength(10);
        String rPidDescription = DataUtils.generateRandomTextWithLength(10);
        String snomedCd = DataUtils.generateRandomTextWithLength(10);
        String snomedDescription = DataUtils.generateRandomTextWithLength(10);
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainProcedureCodeTablePage.addRecord(modalityCd, imagingRegion, rPidCode, rPidDescription, snomedCd, snomedDescription, effectiveDate);
        maintainProcedureCodeTablePage.submitForm(MaintainProcedureCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainProcedureCodeTablePage.assertAddSuccessfulMessageDisplayed();
        maintainProcedureCodeTablePage.assertNoGlobalValidationErrors();

        maintainProcedureCodeTablePage.sortEffectiveDateColumnInDescendingOrder();
        maintainProcedureCodeTablePage.assertRecordExist(modalityCd, imagingRegion, rPidCode, rPidDescription, snomedCd, snomedDescription, effectiveDate);
    }

    @Test
    @Ignore // Bug : Picklist for Linked RID does not get reset after clicking cancel
    public void testCancelNewEntry() {
        logger.log(Level.INFO, "Running: 'MaintainProcedurePageTest: testCancelNewEntry'");

        String modalityCd = DataUtils.getRandomItemFromDropdown(MaintainProcedureCodeTablePage.XPATH_FOR_MODALITY_TYPE_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String imagingRegion = DataUtils.getRandomItemFromDropdown(MaintainProcedureCodeTablePage.XPATH_FOR_IMAGING_REGION_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String rPidCode = DataUtils.generateRandomTextWithLength(10);
        String rPidDescription = DataUtils.generateRandomTextWithLength(10);
        String snomedCd = DataUtils.generateRandomTextWithLength(10);
        String snomedDescription = DataUtils.generateRandomTextWithLength(10);
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainProcedureCodeTablePage.addRecord(modalityCd, imagingRegion, rPidCode, rPidDescription, snomedCd, snomedDescription, effectiveDate, effectiveDate);
        maintainProcedureCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();

        maintainProcedureCodeTablePage.assertFieldsAreReset();

    }

    @Test
    public void testCancelAfterValidationErrors() {
        logger.log(Level.INFO, "Running: 'MaintainProcedurePageTest: testCancelAfterValidationErrors'");
        codeTables.showMaintainProcedureForm();

        maintainProcedureCodeTablePage.submitForm(MaintainProcedureCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainProcedureCodeTablePage.assertValidationErrorDisplayed(MaintainProcedureCodeTablePage.MODALITY_TYPE_CODE_FIELD_REQUIRED);
        maintainProcedureCodeTablePage.assertValidationErrorDisplayed(MaintainProcedureCodeTablePage.IMAGING_REGION_FIELD_REQUIRED);
        maintainProcedureCodeTablePage.assertValidationErrorDisplayed(MaintainProcedureCodeTablePage.RPID_CODE_FIELD_REQUIRED);
        maintainProcedureCodeTablePage.assertValidationErrorDisplayed(MaintainProcedureCodeTablePage.RPID_DESCRIPTION_FIELD_REQUIRED);
        maintainProcedureCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_REQUIRED);

        maintainProcedureCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        maintainProcedureCodeTablePage.assertNoGlobalValidationErrors();

    }

    @Test
    public void testEditEntry() {
        logger.log(Level.INFO, "Running: 'MaintainProcedurePageTest: testEditEntry'");

        String modalityCd = DataUtils.getRandomItemFromDropdown(MaintainProcedureCodeTablePage.XPATH_FOR_MODALITY_TYPE_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String imagingRegion = DataUtils.getRandomItemFromDropdown(MaintainProcedureCodeTablePage.XPATH_FOR_IMAGING_REGION_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        String rPidCode = DataUtils.generateRandomTextWithLength(10);
        String rPidDescription = DataUtils.generateRandomTextWithLength(10);
        String snomedCd = DataUtils.generateRandomTextWithLength(10);
        String snomedDescription = DataUtils.generateRandomTextWithLength(10);
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainProcedureCodeTablePage.addRecord(modalityCd, imagingRegion, rPidCode, rPidDescription, snomedCd, snomedDescription, effectiveDate);
        maintainProcedureCodeTablePage.submitForm(MaintainProcedureCodeTablePage.SUBMIT_BUTTONS.ADD);

        actionBot.waitForAjaxToComplete();
        maintainProcedureCodeTablePage.sortEffectiveDateColumnInDescendingOrder();
        actionBot.waitForAjaxToComplete();
        
        maintainProcedureCodeTablePage.selectRecord(modalityCd, imagingRegion, rPidCode, rPidDescription, snomedCd, snomedDescription, effectiveDate);
        actionBot.waitForAjaxToComplete();

        modalityCd = DataUtils.getRandomItemFromDropdown(MaintainProcedureCodeTablePage.XPATH_FOR_MODALITY_TYPE_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        imagingRegion = DataUtils.getRandomItemFromDropdown(MaintainProcedureCodeTablePage.XPATH_FOR_IMAGING_REGION_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        rPidCode = DataUtils.generateRandomTextWithLength(10);
        rPidDescription = DataUtils.generateRandomTextWithLength(10);
        snomedCd = DataUtils.generateRandomTextWithLength(10);
        snomedDescription = DataUtils.generateRandomTextWithLength(10);

        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, 1);
        effectiveDate = DATE_FORMAT.format(cal.getTime());

        maintainProcedureCodeTablePage.updateRecord(modalityCd, imagingRegion, rPidCode, rPidDescription, snomedCd, snomedDescription, effectiveDate);
        maintainProcedureCodeTablePage.submitForm(MaintainProcedureCodeTablePage.SUBMIT_BUTTONS.UPDATE);
        actionBot.waitForAjaxToComplete();

        maintainProcedureCodeTablePage.assertUpdateSuccessfulMessageDisplayed();
        maintainProcedureCodeTablePage.sortEffectiveDateColumnInDescendingOrder();
        maintainProcedureCodeTablePage.assertRecordExist(modalityCd, imagingRegion, rPidCode, rPidDescription, snomedCd, snomedDescription, effectiveDate);
    }

    @Test
    //@Ignore // Bug at testing expiry date/effective date, Anatomical Imaging region province field is disabled when validation fails
    public void testInputValidation() {
        logger.log(Level.INFO, "Running: 'MaintainProcedurePageTest: testInputValidation'");


        // Test for required fields

        String modalityCd = "";
        String imagingRegion = "";
        String rPidCode = "";
        String rPidDescription = "";
        String snomedCd = "";
        String snomedDescription = "";
        String effectiveDate = "";
        String expiryDate = "";

        maintainProcedureCodeTablePage.addRecord(modalityCd, imagingRegion, rPidCode, rPidDescription, snomedCd, snomedDescription, effectiveDate);
        maintainProcedureCodeTablePage.submitForm(MaintainProcedureCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainProcedureCodeTablePage.assertValidationErrorDisplayed(MaintainProcedureCodeTablePage.MODALITY_TYPE_CODE_FIELD_REQUIRED);
        maintainProcedureCodeTablePage.assertValidationErrorDisplayed(MaintainProcedureCodeTablePage.IMAGING_REGION_FIELD_REQUIRED);
        maintainProcedureCodeTablePage.assertValidationErrorDisplayed(MaintainProcedureCodeTablePage.RPID_CODE_FIELD_REQUIRED);
        maintainProcedureCodeTablePage.assertValidationErrorDisplayed(MaintainProcedureCodeTablePage.RPID_DESCRIPTION_FIELD_REQUIRED);
        maintainProcedureCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_REQUIRED);


        // Test for invalid values in date Fields
        maintainProcedureCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();

        modalityCd = DataUtils.getRandomItemFromDropdown(MaintainProcedureCodeTablePage.XPATH_FOR_MODALITY_TYPE_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        imagingRegion = DataUtils.getRandomItemFromDropdown(MaintainProcedureCodeTablePage.XPATH_FOR_IMAGING_REGION_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        rPidCode = DataUtils.generateRandomTextWithLength(10);
        rPidDescription = DataUtils.generateRandomTextWithLength(10);
        snomedCd = DataUtils.generateRandomTextWithLength(10);
        snomedDescription = DataUtils.generateRandomTextWithLength(10);
        effectiveDate = "x";
        expiryDate = "x";
        maintainProcedureCodeTablePage.addRecord(modalityCd, imagingRegion, rPidCode, rPidDescription, snomedCd, snomedDescription, effectiveDate, expiryDate);
        maintainProcedureCodeTablePage.submitForm(MaintainProcedureCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForLoadingUsingXpath(ValidationUtils.XPATH_FOR_GLOBAL_VALIDATION_MSG, Constants.MEDIUM_TIMEOUT);
        maintainProcedureCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_INVALID);
        maintainProcedureCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EXPIRY_DATE_INVALID);



        // Test to check validation message is displayed when expiry date is less than effective date
        maintainProcedureCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();

        modalityCd = DataUtils.getRandomItemFromDropdown(MaintainProcedureCodeTablePage.XPATH_FOR_MODALITY_TYPE_CD_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        imagingRegion = DataUtils.getRandomItemFromDropdown(MaintainProcedureCodeTablePage.XPATH_FOR_IMAGING_REGION_FIELD, true, DataUtils.SearchType.XPATH, driver, actionBot);
        rPidCode = DataUtils.generateRandomTextWithLength(10);
        rPidDescription = DataUtils.generateRandomTextWithLength(10);
        snomedCd = DataUtils.generateRandomTextWithLength(10);
        snomedDescription = DataUtils.generateRandomTextWithLength(10);
        effectiveDate = DATE_FORMAT.format(new Date());
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, -1);
        expiryDate = DATE_FORMAT.format(cal.getTime());

        maintainProcedureCodeTablePage.addRecord(modalityCd, imagingRegion, rPidCode, rPidDescription, snomedCd, snomedDescription, effectiveDate, expiryDate);
        maintainProcedureCodeTablePage.submitForm(MaintainProcedureCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainProcedureCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EXPIRY_MUST_BE_GREATER_THAN_EFFECTIVE_DATE);


        // Test to check validation message is displayed when the value in fields have reached their maximum length
        rPidCode = DataUtils.generateRandomTextWithLength(32);
        rPidDescription = DataUtils.generateRandomTextWithLength(255);
        snomedCd = DataUtils.generateRandomTextWithLength(32);
        snomedDescription = DataUtils.generateRandomTextWithLength(255);
        maintainProcedureCodeTablePage.addRecord(modalityCd, imagingRegion, rPidCode, rPidDescription, snomedCd, snomedDescription, effectiveDate, expiryDate);

        actionBot.waitForLoadingUsingXpath(MaintainProcedureCodeTablePage.XPATH_FOR_RPID_CODE_FIELD_LENGTH_VALIDATION, Constants.MEDIUM_TIMEOUT);
        maintainProcedureCodeTablePage.assertValidationErrorDisplayed(MaintainProcedureCodeTablePage.XPATH_FOR_RPID_DESCRIPTION_FIELD_LENGTH_VALIDATION);
        maintainProcedureCodeTablePage.assertValidationErrorDisplayed(MaintainProcedureCodeTablePage.XPATH_FOR_SNOMED_CD_FIELD_LENGTH_VALIDATION);
        maintainProcedureCodeTablePage.assertValidationErrorDisplayed(MaintainProcedureCodeTablePage.XPATH_FOR_SNOMED_DESCRIPTION_FIELD_LENGTH_VALIDATION);


        // Test to check no validation message is displayed when the values in all fields have not reached their maximum length 
        rPidCode = DataUtils.generateRandomTextWithLength(10);
        rPidDescription = DataUtils.generateRandomTextWithLength(10);
        snomedCd = DataUtils.generateRandomTextWithLength(10);
        snomedDescription = DataUtils.generateRandomTextWithLength(10);
        maintainProcedureCodeTablePage.addRecord(modalityCd, imagingRegion, rPidCode, rPidDescription, snomedCd, snomedDescription, effectiveDate, expiryDate);
        maintainProcedureCodeTablePage.assertNoMaximumLengthValidationErrorDisplayed();



    }

    @Test
    @Ignore  // Date comparison (Expiry date) is not correct comparing an empty field with a field that has a value makes the empty field greater
    public void testResultSorting() {
        logger.log(Level.INFO, "Running: 'MaintainProcedurePageTest: testResultSorting'");
        maintainProcedureCodeTablePage.assertTableSortingWorks();
    }

    @Test
    public void testResultPaging() {
        logger.log(Level.INFO, "Running: 'MaintainProcedurePageTest: testResultPaging'");
        maintainProcedureCodeTablePage.assertTablePaginationWorks();
    }
    
    @Test
    public void testFilterResult() {
        logger.log(Level.INFO, "Running: 'MaintainProcedurePageTest: testFilterResult'");        
        maintainProcedureCodeTablePage.filterByModality("Computed Tomography");
    }

    @Test
    public void testRecordSelection() {
        logger.log(Level.INFO, "Running: 'MaintainProcedurePageTest: testRecordSelection'");        
        maintainProcedureCodeTablePage.assertRecordSelectionWorks();
    }
}