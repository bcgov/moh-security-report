package mid.selenium.functional.admin;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import mid.selenium.functional.util.DataUtils;
import mid.selenium.functional.util.ValidationUtils;
import mid.selenium.pageobjects.admin.HomePageAdmin;
import mid.selenium.pageobjects.admin.MaintainCityCodeTablePage;
import mid.selenium.pageobjects.fragment.LeftMenuCodeTables;
import mid.selenium.pageobjects.utils.PageObjectFactory;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import selenium.util.ActionBot;
import selenium.util.BrowserCapabilities;
import selenium.util.Constants;
import selenium.util.WebDriverFactory;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class MaintainCityPageTest {

    private static final Logger logger = Logger.getLogger(MaintainCityPageTest.class.getName());
    private static DesiredCapabilities desiredCapabilities;
    private static WebDriver driver;
    private static HomePageAdmin adminHomePage;
    private static MaintainCityCodeTablePage maintainCityCodeTablePage;

    private static LeftMenuCodeTables codeTables;
    private static ActionBot actionBot;
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(Constants.DATE_FORMATTER);

    public MaintainCityPageTest() {
    }

    @BeforeClass
    public static void setUpClass() throws Exception {

        desiredCapabilities = BrowserCapabilities.getInstance(BrowserCapabilities.BROWSER.IE);
        driver = WebDriverFactory.getInstance(WebDriverFactory.DRIVER_TYPE.SERVER, desiredCapabilities);

        actionBot = new ActionBot(driver);

        codeTables = PageObjectFactory.getCodeTablesMenu(driver, desiredCapabilities);
        adminHomePage = PageObjectFactory.getAdminHomePage(driver, desiredCapabilities);
        maintainCityCodeTablePage = new MaintainCityCodeTablePage(adminHomePage, codeTables, driver, desiredCapabilities.getBrowserName()).get();

    }

    @AfterClass
    public static void tearDownClass() {
        maintainCityCodeTablePage.cleanup();
        codeTables.showMaintainCityForm();
        
        if (!adminHomePage.isIsSuite()) {
            adminHomePage.signOut();
            driver.quit();
        }
    }
    
    @After
    public void tearDown() {
       maintainCityCodeTablePage.cancelForm();
       actionBot.waitForAjaxToComplete();
    }

    @Test
    public void testPageLoad() {
        logger.log(Level.INFO, "Running: 'MaintainCityCodeTablePage: testPageLoad'");
        maintainCityCodeTablePage.assertPageLoaded();

    }
    
    @Test
    public void testAddNewEntry() {
        logger.log(Level.INFO, "Running: 'MaintainCityCodeTablePage: testAddNewEntry'");
        
        String province = String.valueOf(DataUtils.getProvince());
        String name = String.valueOf(DataUtils.generateRandomTextWithLength(10));        
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainCityCodeTablePage.addRecord(province, name, effectiveDate);
        maintainCityCodeTablePage.submitForm(MaintainCityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainCityCodeTablePage.assertAddSuccessfulMessageDisplayed();        
        maintainCityCodeTablePage.assertNoGlobalValidationErrors();
        maintainCityCodeTablePage.assertRecordExist(name, effectiveDate);
    }
    
    @Test
    public void testCancelNewEntry() {
        logger.log(Level.INFO, "Running: 'MaintainCityCodeTablePage: testCancelNewEntry'");

        String province = String.valueOf(DataUtils.getProvince());
        String name = String.valueOf(DataUtils.generateRandomTextWithLength(10));

        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainCityCodeTablePage.addRecord(province, name, effectiveDate, effectiveDate);
        maintainCityCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        maintainCityCodeTablePage.assertFieldsAreReset();
        
    }
    
    @Test
    public void testCancelAfterValidationErrors() {
        logger.log(Level.INFO, "Running: 'MaintainCityCodeTablePage: testCancelAfterValidationErrors'");
        codeTables.showMaintainCityForm();
        
        maintainCityCodeTablePage.submitForm(MaintainCityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        
        maintainCityCodeTablePage.assertValidationErrorDisplayed(MaintainCityCodeTablePage.CITY_PROVINCE_CODE_FIELD_REQUIRED);
        maintainCityCodeTablePage.assertValidationErrorDisplayed(MaintainCityCodeTablePage.CITY_NAME_FIELD_REQUIRED);        
        maintainCityCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_REQUIRED);
        
        maintainCityCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        maintainCityCodeTablePage.assertNoGlobalValidationErrors();
        
    }

    
    @Test
    public void testEditEntry() {
        logger.log(Level.INFO, "Running: 'MaintainCityCodeTablePage: testEditEntry'");
        
        String province = String.valueOf(DataUtils.getProvince());
        String name = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainCityCodeTablePage.addRecord(province, name, effectiveDate);
        maintainCityCodeTablePage.submitForm(MaintainCityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainCityCodeTablePage.selectRecord(name, effectiveDate);
        actionBot.waitForAjaxToComplete();
        
        province = String.valueOf(DataUtils.getProvince());
        name = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, 1);        
        effectiveDate = DATE_FORMAT.format(cal.getTime());
        
        maintainCityCodeTablePage.updateRecord(province, name, effectiveDate);       
        maintainCityCodeTablePage.submitForm(MaintainCityCodeTablePage.SUBMIT_BUTTONS.UPDATE);
        actionBot.waitForAjaxToComplete();
        
        maintainCityCodeTablePage.assertUpdateSuccessfulMessageDisplayed();
        maintainCityCodeTablePage.assertRecordExist(name, effectiveDate);
    }
    
    @Test
    @Ignore // Bug at testing expiry date/effective date, Anatomical Imaging region province field is disabled when validation fails
    public void testInputValidation() {
        logger.log(Level.INFO, "Running: 'MaintainCityCodeTablePage: testInputValidation'");
        
        
        // Test for required fields        
        String province = "";
        String name = "";
        String effectiveDate = "";
        String expiryDate = "";

        maintainCityCodeTablePage.addRecord(province, name, effectiveDate);
        maintainCityCodeTablePage.submitForm(MaintainCityCodeTablePage.SUBMIT_BUTTONS.ADD);  
        actionBot.waitForAjaxToComplete();      
        maintainCityCodeTablePage.assertValidationErrorDisplayed(MaintainCityCodeTablePage.CITY_PROVINCE_CODE_FIELD_REQUIRED);
        maintainCityCodeTablePage.assertValidationErrorDisplayed(MaintainCityCodeTablePage.CITY_NAME_FIELD_REQUIRED);
        maintainCityCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_REQUIRED);
        

        // Test for invalid values in all Fields
        maintainCityCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        province = "x";
        name = "x";
        effectiveDate = "x";
        expiryDate = "x";
        maintainCityCodeTablePage.addRecord(province, name, effectiveDate, expiryDate);
        maintainCityCodeTablePage.submitForm(MaintainCityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        maintainCityCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_INVALID);
        maintainCityCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EXPIRY_DATE_INVALID);                       
        
         // Test to check validation message is displayed when expiry date is less than effective date
        maintainCityCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        province = "x";
        name = "x";
        effectiveDate = DATE_FORMAT.format(new Date());
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, -1);        
        expiryDate = DATE_FORMAT.format(cal.getTime());
        
        maintainCityCodeTablePage.addRecord(province, name, effectiveDate, expiryDate);
        maintainCityCodeTablePage.submitForm(MaintainCityCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        maintainCityCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EXPIRY_MUST_BE_GREATER_THAN_EFFECTIVE_DATE);
        
        
         // Test to check validation message is displayed when the values in Anantomical Code,  Name and Description have reached their maximum length
        province = String.valueOf(DataUtils.getProvince());    
        name = String.valueOf(DataUtils.generateRandomTextWithLength(255));    
        maintainCityCodeTablePage.addRecord(province, name, effectiveDate, expiryDate);    
        maintainCityCodeTablePage.assertValidationErrorDisplayed(MaintainCityCodeTablePage.CITY_NAME_MAXIMUM_FIELD_LENGTH);
        
        
        // Test to check no validation message is displayed when the values in Anantomical Code and Anantomical Name have not reached their maximum length 
        province = String.valueOf(DataUtils.getProvince());   
        name = String.valueOf(DataUtils.generateRandomNumberWithMaxLength(9));  
        maintainCityCodeTablePage.addRecord(province, name, effectiveDate, expiryDate);        
        maintainCityCodeTablePage.assertNoMaximumLengthValidationErrorDisplayed();
        
       

    }
    
    @Test
    public void testCancelEditEntry() {
        logger.log(Level.INFO, "Running: 'MaintainCityCodeTablePage: testCancelEditEntry'");
        
        String province = String.valueOf(DataUtils.getProvince());
        String name = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String effectiveDate = DATE_FORMAT.format(new Date());
        
        maintainCityCodeTablePage.selectRecord();
        actionBot.waitForAjaxToComplete();
        maintainCityCodeTablePage.updateRecord(province, name, effectiveDate);
        maintainCityCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        maintainCityCodeTablePage.assertRecordDoesNotExist(name, effectiveDate);
                
    }
    

    @Test
    @Ignore  // Date comparison (Expiry date) is not correct comparing an empty field with a field that has a value makes the empty field greater
    public void testResultSorting() {
        logger.log(Level.INFO, "Running: 'MaintainCityCodeTablePage: testResultSorting'");
        maintainCityCodeTablePage.assertTableSortingWorks();
    }
    
    @Test
    public void testResultPaging() {
        logger.log(Level.INFO, "Running: 'MaintainCityCodeTablePage: testResultPaging'");        
        maintainCityCodeTablePage.assertTablePaginationWorks();
    }
    
    
    @Test
    public void testRecordSelection() {
        logger.log(Level.INFO, "Running: 'MaintainCityCodeTablePage: testRecordSelection'");        
        maintainCityCodeTablePage.assertRecordSelectionWorks();
    }
}