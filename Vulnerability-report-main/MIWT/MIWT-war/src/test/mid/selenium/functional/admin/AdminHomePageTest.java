package mid.selenium.functional.admin;

import java.util.logging.Level;
import java.util.logging.Logger;
import mid.selenium.pageobjects.admin.HomePageAdmin;
import mid.selenium.pageobjects.fragment.LeftMenuCodeTables;
import mid.selenium.pageobjects.fragment.LeftMenuHAMappings;
import mid.selenium.pageobjects.fragment.LeftMenuUploadFile;
import mid.selenium.pageobjects.utils.PageObjectFactory;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import selenium.util.ActionBot;
import selenium.util.BrowserCapabilities;
import selenium.util.WebDriverFactory;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class AdminHomePageTest {

    private static final Logger logger = Logger.getLogger(AdminHomePageTest.class.getName());
    private static DesiredCapabilities desiredCapabilities;
    private static WebDriver driver;
    private static HomePageAdmin adminHomePage;
    private static LeftMenuHAMappings haMappings;
    private static LeftMenuCodeTables codeTables;
    private static ActionBot actionBot;

    public AdminHomePageTest() {
    }

    @BeforeClass
    public static void setUpClass() throws Exception {
        
        desiredCapabilities = BrowserCapabilities.getInstance(BrowserCapabilities.BROWSER.IE);
        driver = WebDriverFactory.getInstance(WebDriverFactory.DRIVER_TYPE.SERVER, desiredCapabilities);

        actionBot = new ActionBot(driver);
        haMappings = PageObjectFactory.getHAMappingsMenu(driver, desiredCapabilities); 
        codeTables = PageObjectFactory.getCodeTablesMenu(driver, desiredCapabilities);
        adminHomePage = PageObjectFactory.getAdminHomePage(driver, desiredCapabilities).get(); 


    }

    @AfterClass
    public static void tearDownClass() {
        if (!adminHomePage.isIsSuite()) {
            adminHomePage.signOut();
            driver.quit();
        }
    }


    @Test
    public void testPageLoad() {
        logger.log(Level.INFO, "Running: 'AdminHomePageTest: testPageLoad'");
        LeftMenuUploadFile upload = new LeftMenuUploadFile(driver, desiredCapabilities.getBrowserName());
        adminHomePage.assertPageLoaded();
        upload.assertNotLoaded();

    }
    
    @Test
    public void testHAMappingMenuOpen() {
        logger.log(Level.INFO, "Running: 'AdminHomePageTest: testHAMappingMenuOpen'");
        haMappings.openMenu();       
        haMappings.assertChildrenMenuOpen();
        
        codeTables.assertChildrenMenuClose();

    }
    
    @Test
    @Ignore
    public void testCodeTablesMenuOpen() {
        logger.log(Level.INFO, "Running: 'AdminHomePageTest: testCodeTablesMenuOpen'");
                
        codeTables.openMenu();
        codeTables.assertChildrenMenuOpen();        
        haMappings.assertChildrenMenuClose();

    }
    
    @Test
    public void testHAMappingMenuClose() {
        logger.log(Level.INFO, "Running: 'AdminHomePageTest: testHAMappingMenuClose'");
        haMappings.openMenu();
        haMappings.closeMenu();
        haMappings.assertChildrenMenuClose();

    }
    
    @Test
    @Ignore
    public void testHAMappingMenuCloseByOpeningAnotherMenu() {
        logger.log(Level.INFO, "Running: 'AdminHomePageTest: testHAMappingMenuCloseByOpeningAnotherMenu'");
        
        haMappings.openMenu();
        codeTables.openMenu();
        
        haMappings.assertChildrenMenuClose();
        codeTables.assertChildrenMenuOpen();

    }
    
    @Test
    public void testCodeTablesMenuClose() {
        logger.log(Level.INFO, "Running: 'AdminHomePageTest: testCodeTablesMenuClose'");
        
        codeTables.openMenu();
        codeTables.closeMenu();
        codeTables.assertChildrenMenuClose();

    }
    
    @Test
    public void testCodeTablesMenuCloseByOpeningAnotherMenu() {
        logger.log(Level.INFO, "Running: 'AdminHomePageTest: testCodeTablesMenuCloseByOpeningAnotherMenu'");
        
        codeTables.openMenu();
        haMappings.openMenu();
        
        codeTables.assertChildrenMenuClose();        
        haMappings.assertChildrenMenuOpen();

    }

}