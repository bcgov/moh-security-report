package mid.selenium.functional.admin;

import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import mid.selenium.functional.util.DataUtils;
import mid.selenium.functional.util.ValidationUtils;
import mid.selenium.pageobjects.admin.HomePageAdmin;
import mid.selenium.pageobjects.admin.MaintainPostponementReasonCodeTablePage;
import mid.selenium.pageobjects.fragment.LeftMenuCodeTables;
import mid.selenium.pageobjects.utils.PageObjectFactory;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import selenium.util.ActionBot;
import selenium.util.BrowserCapabilities;
import selenium.util.Constants;
import selenium.util.WebDriverFactory;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class MaintainPostponementReasonPageTest {

    private static final Logger logger = Logger.getLogger(MaintainPostponementReasonPageTest.class.getName());
    private static DesiredCapabilities desiredCapabilities;
    private static WebDriver driver;
    private static HomePageAdmin adminHomePage;
    private static MaintainPostponementReasonCodeTablePage maintainPostponementReasonCodeTablePage;

    private static LeftMenuCodeTables codeTables;
    private static ActionBot actionBot;
    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat(Constants.DATE_FORMATTER);

    public MaintainPostponementReasonPageTest() {
    }

    @BeforeClass
    public static void setUpClass() throws Exception {

        desiredCapabilities = BrowserCapabilities.getInstance(BrowserCapabilities.BROWSER.IE);
        driver = WebDriverFactory.getInstance(WebDriverFactory.DRIVER_TYPE.SERVER, desiredCapabilities);

        actionBot = new ActionBot(driver);

        codeTables = PageObjectFactory.getCodeTablesMenu(driver, desiredCapabilities);
        adminHomePage = PageObjectFactory.getAdminHomePage(driver, desiredCapabilities);
        maintainPostponementReasonCodeTablePage = new MaintainPostponementReasonCodeTablePage(adminHomePage, codeTables, driver, desiredCapabilities.getBrowserName()).get();


    }

    @AfterClass
    public static void tearDownClass() {
        maintainPostponementReasonCodeTablePage.cleanup();
        codeTables.showMaintainPostponementReasonForm();
        
        if (!adminHomePage.isIsSuite()) {
            adminHomePage.signOut();
            driver.quit();
        }
    }
    
    @After
    public void tearDown() {
       maintainPostponementReasonCodeTablePage.cancelForm();
       actionBot.waitForAjaxToComplete();
    }

    @Test
    public void testPageLoad() {
        logger.log(Level.INFO, "Running: 'MaintainPostponementReasonCodeTablePage: testPageLoad'");
        maintainPostponementReasonCodeTablePage.assertPageLoaded();

    }
    
    @Test
    public void testAddNewEntry() {
        logger.log(Level.INFO, "Running: 'MaintainPostponementReasonCodeTablePage: testAddNewEntry'");
        
        String code = String.valueOf(DataUtils.generateRandomTextWithLengthAndPossibleVariations(2));
        String description = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String effectiveDate = DATE_FORMAT.format(new Date());

        maintainPostponementReasonCodeTablePage.addRecord(code, description, effectiveDate);
        maintainPostponementReasonCodeTablePage.submitForm(MaintainPostponementReasonCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainPostponementReasonCodeTablePage.assertAddSuccessfulMessageDisplayed();        
        maintainPostponementReasonCodeTablePage.assertNoGlobalValidationErrors();
        maintainPostponementReasonCodeTablePage.assertRecordExist(code, description, effectiveDate);
    }
    
    @Test
    public void testCancelNewEntry() {
        logger.log(Level.INFO, "Running: 'MaintainPostponementReasonCodeTablePage: testCancelNewEntry'");

        String code = String.valueOf(DataUtils.generateRandomTextWithLengthAndPossibleVariations(2));
        String description = String.valueOf(DataUtils.generateRandomTextWithLength(10));

        String effectiveDate = DATE_FORMAT.format(new Date());
        maintainPostponementReasonCodeTablePage.addRecord(code, description, effectiveDate, effectiveDate);
        maintainPostponementReasonCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        maintainPostponementReasonCodeTablePage.assertFieldsAreReset();
        
    }
    
    @Test
    public void testCancelAfterValidationErrors() {
        logger.log(Level.INFO, "Running: 'MaintainPostponementReasonCodeTablePage: testCancelAfterValidationErrors'");
        codeTables.showMaintainPostponementReasonForm();
        
        maintainPostponementReasonCodeTablePage.submitForm(MaintainPostponementReasonCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        
        maintainPostponementReasonCodeTablePage.assertValidationErrorDisplayed(MaintainPostponementReasonCodeTablePage.POSTPONEMENT_REASON_CODE_FIELD_REQUIRED);
        maintainPostponementReasonCodeTablePage.assertValidationErrorDisplayed(MaintainPostponementReasonCodeTablePage.POSTPONEMENT_REASON_DESCRIPTION_FIELD_REQUIRED);
        maintainPostponementReasonCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_REQUIRED);
        
        maintainPostponementReasonCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        maintainPostponementReasonCodeTablePage.assertNoGlobalValidationErrors();
        
    }

    
    @Test
    public void testEditEntry() {
        logger.log(Level.INFO, "Running: 'MaintainPostponementReasonCodeTablePage: testEditEntry'");
        
        String code = String.valueOf(DataUtils.generateRandomTextWithLengthAndPossibleVariations(2));
        String description = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String effectiveDate = DATE_FORMAT.format(new Date());
        
        maintainPostponementReasonCodeTablePage.addRecord(code, description, effectiveDate);
        maintainPostponementReasonCodeTablePage.submitForm(MaintainPostponementReasonCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainPostponementReasonCodeTablePage.selectRecord(code, description, effectiveDate);
        actionBot.waitForAjaxToComplete();
        
        description = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, 1);        
        effectiveDate = DATE_FORMAT.format(cal.getTime());
        
        maintainPostponementReasonCodeTablePage.updateRecord(description, effectiveDate);
        maintainPostponementReasonCodeTablePage.assertCodeFieldNotEditable();        
        maintainPostponementReasonCodeTablePage.submitForm(MaintainPostponementReasonCodeTablePage.SUBMIT_BUTTONS.UPDATE);
        actionBot.waitForAjaxToComplete();
      
        maintainPostponementReasonCodeTablePage.assertUpdateSuccessfulMessageDisplayed();
        maintainPostponementReasonCodeTablePage.assertRecordExist(code, description, effectiveDate);
    }
    
    @Test
    @Ignore // Bug at testing expiry date/effective date, Appropriatness code field is disabled when validation fails
    public void testInputValidation() {
        logger.log(Level.INFO, "Running: 'MaintainPostponementReasonCodeTablePage: testInputValidation'");       
        
        String code = "";
        String description = "";
        String effectiveDate = "";
        String expiryDate = "";

        maintainPostponementReasonCodeTablePage.addRecord(code, description, effectiveDate);
        maintainPostponementReasonCodeTablePage.submitForm(MaintainPostponementReasonCodeTablePage.SUBMIT_BUTTONS.ADD);        
        actionBot.waitForAjaxToComplete();

        maintainPostponementReasonCodeTablePage.assertValidationErrorDisplayed(MaintainPostponementReasonCodeTablePage.POSTPONEMENT_REASON_CODE_FIELD_REQUIRED);
        maintainPostponementReasonCodeTablePage.assertValidationErrorDisplayed(MaintainPostponementReasonCodeTablePage.POSTPONEMENT_REASON_DESCRIPTION_FIELD_REQUIRED);
        maintainPostponementReasonCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_REQUIRED);
        
        
        // Test for invalid values in all Fields
        maintainPostponementReasonCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        code = "x";
        description = "x";
        effectiveDate = "x";
        expiryDate = "x";
        maintainPostponementReasonCodeTablePage.addRecord(code, description, effectiveDate, expiryDate);
        maintainPostponementReasonCodeTablePage.submitForm(MaintainPostponementReasonCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainPostponementReasonCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EFFECTIVE_DATE_INVALID);
        maintainPostponementReasonCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EXPIRY_DATE_INVALID);
               
        
        
         // Test to check validation message is displayed when expiry date is less than effective date
        maintainPostponementReasonCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        code = "x";
        description = "x";
        effectiveDate = DATE_FORMAT.format(new Date());
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, -1);        
        expiryDate = DATE_FORMAT.format(cal.getTime());
        
        maintainPostponementReasonCodeTablePage.addRecord(code, description, effectiveDate, expiryDate);
        maintainPostponementReasonCodeTablePage.submitForm(MaintainPostponementReasonCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();

        maintainPostponementReasonCodeTablePage.assertValidationErrorDisplayed(ValidationUtils.EXPIRY_MUST_BE_GREATER_THAN_EFFECTIVE_DATE);
        
        
         // Test to check validation message is displayed when the values in Anantomical Code,  Name and Description have reached their maximum length
        code = String.valueOf(DataUtils.generateRandomTextWithLengthAndPossibleVariations(2));     
        description = String.valueOf(DataUtils.generateRandomTextWithLength(255));   
        maintainPostponementReasonCodeTablePage.addRecord(code, description, effectiveDate, expiryDate);
        
        maintainPostponementReasonCodeTablePage.assertValidationErrorDisplayed(MaintainPostponementReasonCodeTablePage.POSTPONEMENT_REASON_CODE_MAXIMUM_FIELD_LENGTH);
        maintainPostponementReasonCodeTablePage.assertValidationErrorDisplayed(MaintainPostponementReasonCodeTablePage.POSTPONEMENT_REASON_DESCRIPTION_MAXIMUM_FIELD_LENGTH);
        
        
        // Test to check no validation message is displayed when the values in Anantomical Code and Anantomical Name have not reached their maximum length 
        code = String.valueOf(DataUtils.generateRandomTextWithLengthAndPossibleVariations(2));   
        description = String.valueOf(DataUtils.generateRandomTextWithLength(10));  
        maintainPostponementReasonCodeTablePage.addRecord(code, description, effectiveDate, expiryDate);        
        maintainPostponementReasonCodeTablePage.assertNoMaximumLengthValidationErrorDisplayed();              

    }
    
    @Test
    public void testCodeUniqueness() {
        logger.log(Level.INFO, "Running: 'MaintainPostponementReasonCodeTablePage: testCodeUniqueness'");
        
        String code = String.valueOf(DataUtils.generateRandomTextWithLengthAndPossibleVariations(2));  
        String description = String.valueOf(DataUtils.generateRandomTextWithLength(10));  
        String effectiveDate = DATE_FORMAT.format(new Date());
        
        maintainPostponementReasonCodeTablePage.addRecord(code, description, effectiveDate);   
        maintainPostponementReasonCodeTablePage.submitForm(MaintainPostponementReasonCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        
        maintainPostponementReasonCodeTablePage.addRecord(code, description, effectiveDate);   
        maintainPostponementReasonCodeTablePage.submitForm(MaintainPostponementReasonCodeTablePage.SUBMIT_BUTTONS.ADD);
        actionBot.waitForAjaxToComplete();
        maintainPostponementReasonCodeTablePage.assertValidationErrorDisplayed(MaintainPostponementReasonCodeTablePage.POSTPONEMENT_REASON_CODE_FIELD_UNIQUE);
    }
    
    
    @Test
    public void testCancelEditEntry() {
        logger.log(Level.INFO, "Running: 'MaintainPostponementReasonCodeTablePage: testCancelEditEntry'");
        
        String code = String.valueOf(DataUtils.generateRandomTextWithLengthAndPossibleVariations(2));
        String description = String.valueOf(DataUtils.generateRandomTextWithLength(10));
        String effectiveDate = DATE_FORMAT.format(new Date());
        
        maintainPostponementReasonCodeTablePage.selectRecord();
        actionBot.waitForAjaxToComplete();
        maintainPostponementReasonCodeTablePage.updateRecord(description, effectiveDate);
        maintainPostponementReasonCodeTablePage.cancelForm();
        actionBot.waitForAjaxToComplete();
        
        maintainPostponementReasonCodeTablePage.assertRecordDoesNotExist(code, description, effectiveDate);
                
    }
    

    @Test
    @Ignore  // Date comparison (Expiry date) is not correct comparing an empty field with a field that has a value makes the empty field greater
    public void testResultSorting() {
        logger.log(Level.INFO, "Running: 'MaintainPostponementReasonCodeTablePage: testResultSorting'");
        maintainPostponementReasonCodeTablePage.assertTableSortingWorks();
    }
    
    @Test
    public void testResultPaging() {
        logger.log(Level.INFO, "Running: 'MaintainPostponementReasonCodeTablePage: testResultPaging'");        
        maintainPostponementReasonCodeTablePage.assertTablePaginationWorks();
    }
    
    
    @Test
    public void testRecordSelection() {
        logger.log(Level.INFO, "Running: 'MaintainPostponementReasonCodeTablePage: testRecordSelection'");        
        maintainPostponementReasonCodeTablePage.assertRecordSelectionWorks();
    }
    
}