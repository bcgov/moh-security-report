package mid.selenium.functional.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;
import selenium.util.ActionBot;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class DataUtils {

    public enum SearchType {

        XPATH, ID, NAME
    }
    private static final String[] PROVINCES = {"Alberta", "British Columbia", "Manitoba", "New Brunswick", "Newfoundland and Labrador", "Northwest Territories", "Nova Scotia", "Nunavut", "Ontario", "Prince Edward Island", "Quebec", "Saskatchewan", "Yukon", "Out of Country", "Unknown"};
    private static final String[] MODALITY = {"Bone Densitometry", "Computed Tomography", "X-ray Angiography / Heart Catheterization", "Magnetic Resonance Imaging", "Mammography", "Nuclear Medicine", "Ultrasound", "X-Ray", "Echocardiography", "Positron Emission Tomography", "Fluoroscopy"};

    public static long generateRandomNumber() {
        return System.currentTimeMillis();
    }

    public static long generateRandomNumberWithOffset(int offset) {
        return System.currentTimeMillis() + offset;
    }

    public static long generateRandomNumberWithMaxLength(int length) {
        long value = generateRandomNumber();
        String temp = String.valueOf(value);

        if (temp.length() > length) {
            temp = temp.substring(0, length);
            value = Long.parseLong(temp);
        }
        return value;
    }

    public static long generateRandomNumberWithMaxLengthAndOffset(int length, int offset) {
        long value = generateRandomNumberWithOffset(offset);
        String temp = String.valueOf(value);

        while (temp.length() > length) {
            temp = temp.substring(0, length);
            value = Long.parseLong(temp);
            value += offset;
            temp = String.valueOf(temp);
        }
        return value;
    }

    public static String generateRandomText() {
        return String.valueOf(generateRandomNumber());
    }

    public static String generateRandomTextWithLength(int length) {
        StringBuilder builder = new StringBuilder();

        while (builder.length() < length) {
            builder.append(generateRandomText());
        }

        if (builder.length() > length) {
            builder.delete(length, builder.length());
        }

        return builder.toString();
    }

    public static String generateRandomTextWithLengthAndPossibleVariations(int length) {
        StringBuilder builder = new StringBuilder();

        while (builder.length() < length) {
            builder.append(generateRandomText());
        }

        if (builder.length() > length) {
            builder.delete(0, builder.length() - length);
        }

        return builder.toString();
    }

    public static boolean isValidNumber(String strNumber) {

        try {
            Long.parseLong(strNumber);
            return true;
        } catch (NumberFormatException nfe) {
            return false;
        }
    }

    public static boolean isDateValid(String strDate, String format) {

        try {
            SimpleDateFormat dtParser = new SimpleDateFormat(format);
            dtParser.parse(strDate);
            return true;
        } catch (ParseException pe) {
            return false;
        }
    }

    public static String getProvince() {
        int index = (int) Math.floor(Math.random() * PROVINCES.length);
        return PROVINCES[index];
    }

    public static String getModality() {
        int index = (int) Math.floor(Math.random() * MODALITY.length);
        return MODALITY[index];
    }

    public static String getRandomItemFromDropdown(String searchStringForElement, boolean skipFirst, SearchType searchType, WebDriver driver, ActionBot actionBot) {
        WebElement selectElement = null;
        if (SearchType.ID.equals(searchType)) {
            selectElement = driver.findElement(By.id(searchStringForElement));

        } else if (SearchType.XPATH.equals(searchType)) {
            selectElement = driver.findElement(By.xpath(searchStringForElement));

        } else if (SearchType.NAME.equals(searchType)) {
            selectElement = driver.findElement(By.name(searchStringForElement));
        }

        Select select = new Select(selectElement);
        List<WebElement> elems = select.getOptions();
        int index = (int) Math.floor(Math.random() * elems.size());

        if (skipFirst && index == 0) {
            index++;
        }

        return elems.get(index).getText();
    }
}
