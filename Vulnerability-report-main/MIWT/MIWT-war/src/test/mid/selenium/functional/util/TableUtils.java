package mid.selenium.functional.util;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import selenium.util.ActionBot;
import selenium.util.Constants;

import static org.junit.Assert.*;
import org.openqa.selenium.NoSuchElementException;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class TableUtils {

    private static final int MAX_PAGES_TO_NAVIGATE = 5;

    public static void testTablePagination(String idForTable, String idForPaginator, WebDriver driver, ActionBot actionBot) {
        WebElement elem = driver.findElement(By.id(idForPaginator));
        int pages = pagesToProcess(elem.findElements(By.xpath("//span[@class='ui-paginator-pages']/span")).size());
        final String xpathForTableRows = "//div[@id='" + idForTable + "']//tbody/tr";
        int firstRecordOnPageIndex = 0;
        int lastRecordOnPageIndex = 0;

        for (int i = 1; i <= pages; i++) {
            actionBot.click(By.xpath("(//span[@class='ui-paginator-pages']/span)[" + i + "]"));
            actionBot.waitForLoadingUsingXpath(xpathForTableRows + "[@data-ri='" + firstRecordOnPageIndex + "']", Constants.LONG_TIMEOUT);

            if (i == 1) {
                lastRecordOnPageIndex += (driver.findElements(By.xpath(xpathForTableRows)).size() - 1);
            } else {
                firstRecordOnPageIndex = lastRecordOnPageIndex + 1;
                lastRecordOnPageIndex += (driver.findElements(By.xpath(xpathForTableRows)).size());
            }

            assertEquals(Integer.parseInt(driver.findElement(By.xpath(xpathForTableRows + "[1]")).getAttribute("data-ri")), firstRecordOnPageIndex);
            assertEquals(Integer.parseInt(driver.findElement(By.xpath(xpathForTableRows + "[last()]")).getAttribute("data-ri")), lastRecordOnPageIndex);

            firstRecordOnPageIndex = lastRecordOnPageIndex + 1;
        }
    }

    public static void testSortColumnAscending(String idForTable, int indexForColumnToBeSorted, String columnName, WebDriver driver, ActionBot actionBot, Comparator comparator) {
        final String xpathForTableRows = "//div[@id='" + idForTable + "']//tbody/tr";

        List<WebElement> elems = driver.findElements(By.xpath(xpathForTableRows));

        String prev = null;
        String current;
        int compareResult;
        for (int i = 0; i < elems.size(); i++) {
            current = driver.findElement(By.xpath("(" + xpathForTableRows + ")[" + (i + 1) + "]/td[" + (indexForColumnToBeSorted + 1) + "]")).getText();

            if (prev == null) {
                prev = current;
                continue;
            }

            // Use a comparartor if one is provided; otheriwse use string comparison
            if (comparator != null) {
                compareResult = comparator.compare(prev, current);
            } else {
                compareResult = prev.compareTo(current);
            }

            assert compareResult <= 0 : String.format("Row %s has a value less than row %s for column %s", i + 1, i, columnName);

            prev = current;
        }

    }

    // Test column sorting ascending and descending on all available
    public static void testColumnSortingWorks(String tableId, String xpathForColumnTobeSorted, String paginatorId, String columnName, int columPosition, Comparator comparator, WebDriver driver, ActionBot actionBot) {

        int pages = pagesToProcess(noOfPagesInDataScroller(paginatorId, driver));

        // reset to the first page if table has more than one page
        if (pages > 1) {
            goToFirstPageInTableUsingFirstButton(tableId, paginatorId, driver, actionBot);
        }

        // Sort column in ascending order
        sortColumnAscending(tableId, xpathForColumnTobeSorted, driver, actionBot);
        for (int i = 0; i < pages; i++) {

            testSortColumnAscending(tableId, columPosition - 1, columnName, driver, actionBot, comparator);

            if (pages > 1 && morePagesAvailable(paginatorId, driver)) {
                // go to next page
                nextPage(tableId, paginatorId, driver, actionBot);
                //goToNextPageInTableUsingNextButton(tableId, paginatorId, driver, actionBot);
            }
        }


        // reset to the first page if table has more than one page
        if (pages > 1) {
            goToFirstPageInTableUsingFirstButton(tableId, paginatorId, driver, actionBot);
        }

        // Sort column in descending order
        sortColumnDescending(tableId, xpathForColumnTobeSorted, driver, actionBot);
        for (int i = 0; i < pages; i++) {
            testSortColumnDescending(tableId, columPosition - 1, columnName, driver, actionBot, comparator);

            if (pages > 1 && morePagesAvailable(paginatorId, driver)) {
                // go to next page
                nextPage(tableId, paginatorId, driver, actionBot);
               // goToNextPageInTableUsingNextButton(tableId, paginatorId, driver, actionBot);
            }
        }

    }

    public static void testRecordSelectionWorks(String tableId, String xpathForTableRows, String[] xpathForFields, String paginatorId, String xpathForControlElement, String xpathForResetControlElement, String xpathForResetElement, WebDriver driver, ActionBot actionBot) {

        int pages = pagesToProcess(noOfPagesInDataScroller(paginatorId, driver));

        if (pages > 1) {
            //Ensure we start from the first page in table
            TableUtils.goToFirstPageInTableUsingFirstButton(tableId, paginatorId, driver, actionBot);
        }

        for (int i = 1; i <= pages; i++) {
            int rowsOnPage = driver.findElements(By.xpath(xpathForTableRows)).size();
            for (int j = 1; j <= rowsOnPage; j++) {
                actionBot.click(By.xpath(xpathForTableRows + "[" + j + "]/td[last()]/button"));
                actionBot.waitForLoadingUsingXpath(xpathForControlElement, Constants.MEDIUM_TIMEOUT);
                testFieldsUpdatedAfterRowSelection(xpathForFields, xpathForTableRows, j, driver, actionBot, false);
                
                actionBot.click(By.xpath(xpathForResetElement));
                actionBot.waitForLoadingUsingXpath(xpathForResetControlElement, Constants.MEDIUM_TIMEOUT);
            }

            if (pages > 1 && morePagesAvailable(paginatorId, driver)) {
               // goToNextPageInTableUsingNextButton(tableId, paginatorId, driver, actionBot);
                nextPage(tableId, paginatorId, driver, actionBot);
            }
        }

    }
    
    public static void testFilterTable(String tableId, String xpathForTableRows, int columnPosition, String expectedValue, String paginatorId, WebDriver driver, ActionBot actionBot) {

        int pages = pagesToProcess(noOfPagesInDataScroller(paginatorId, driver));

        if (pages > 1) {
            //Ensure we start from the first page in table
            TableUtils.goToFirstPageInTableUsingFirstButton(tableId, paginatorId, driver, actionBot);
        }

        for (int i = 1; i <= pages; i++) {
            int rowsOnPage = driver.findElements(By.xpath(xpathForTableRows)).size();
            for (int j = 1; j <= rowsOnPage; j++) {
                assertEquals(expectedValue, driver.findElement(By.xpath(xpathForTableRows + "[" + j + "]/td[" + columnPosition + "]")).getText());

            }

            if (pages > 1 && morePagesAvailable(paginatorId, driver)) {
               // goToNextPageInTableUsingNextButton(tableId, paginatorId, driver, actionBot);
                nextPage(tableId, paginatorId, driver, actionBot);
            }
        }

    }

    public static List<String> getRowValues(String idForTable, int rowToFetch, int[] colsToFetch, WebDriver driver, ActionBot actionBot) {
        final String xpathForTableRows = "//div[@id='" + idForTable + "']//tbody/tr";

        List<WebElement> colsInThisRow = driver.findElements(By.xpath("(" + xpathForTableRows + ")[" + rowToFetch + "]/td"));
        List<String> values = new ArrayList<>();

        for (int i = 1; i <= colsInThisRow.size(); i++) {

            if (Arrays.binarySearch(colsToFetch, i) >= 0) {
                values.add(colsInThisRow.get(i - 1).getText());
            }
        }

        return values;
    }

    public static String getCellValue(String idForTable, int rowIndex, int colIndex, WebDriver driver, ActionBot actionBot) {
        final String xpathForTableRows = "//div[@id='" + idForTable + "']//tbody/tr";
        return driver.findElement(By.xpath("(" + xpathForTableRows + ")[" + (rowIndex + 1) + "]//td[" + (colIndex + 1) + "]")).getText();
    }

    public static void testSortColumnDescending(String idForTable, int indexForColumnToBeSorted, String columnName, WebDriver driver, ActionBot actionBot, Comparator comparator) {
        final String xpathForTableRows = "//div[@id='" + idForTable + "']//tbody/tr";

        List<WebElement> elems = driver.findElements(By.xpath(xpathForTableRows));

        String prev = null;
        String current;
        int compareResult;
        for (int i = 0; i < elems.size(); i++) {
            current = driver.findElement(By.xpath("(" + xpathForTableRows + ")[" + (i + 1) + "]/td[" + (indexForColumnToBeSorted + 1) + "]")).getText();

            if (prev == null) {
                prev = current;
                continue;
            }

            // Use a comparator if one is provided; otheriwse use string comparison
            if (comparator != null) {
                compareResult = comparator.compare(prev, current);
            } else {
                compareResult = prev.compareTo(current);
            }

            assert compareResult >= 0 : String.format("Row %s has a value greater than row %s for column %s", i + 1, i, columnName);
            prev = current;
        }
    }

    public static void sortColumnAscending(String idForTable, String xPathForColumnToBeSorted, WebDriver driver, ActionBot actionBot) {
        actionBot.click(driver.findElement(By.xpath(xPathForColumnToBeSorted)));
        actionBot.waitForAjaxToComplete();
        WebElement sortElem = driver.findElement(By.xpath(xPathForColumnToBeSorted + "/span[contains(@class, 'ui-sortable-column-icon')]"));

        // if this column is not sorted in ascending order, click again to sort in ascending order
        if (!sortElem.getAttribute("class").contains("ui-icon-triangle-1-n")) {
            actionBot.click(driver.findElement(By.xpath(xPathForColumnToBeSorted)));
            actionBot.waitForAjaxToComplete();
        }
    }

    public static void sortColumnDescending(String idForTable, String xPathForColumnToBeSorted, WebDriver driver, ActionBot actionBot) {

        actionBot.click(driver.findElement(By.xpath(xPathForColumnToBeSorted)));
        actionBot.waitForAjaxToComplete();
        WebElement sortElem = driver.findElement(By.xpath(xPathForColumnToBeSorted + "/span[contains(@class, 'ui-sortable-column-icon')]"));

        // if this column is not sorted in descending order, click again to sort in descending order
        if (!sortElem.getAttribute("class").contains("ui-icon-triangle-1-s")) {
            actionBot.click(driver.findElement(By.xpath(xPathForColumnToBeSorted)));
            actionBot.waitForAjaxToComplete();
        }
    }

    public static void goToNextPageInTableUsingPageButton(String idForTable, String idForPaginator, WebDriver driver, ActionBot actionBot) {

        WebElement elem = driver.findElement(By.id(idForPaginator));
        List<WebElement> elems = elem.findElements(By.xpath("//div[@id='" + idForPaginator + "']//span[@class='ui-paginator-pages']/span"));

        for (int i = 0; i < elems.size(); i++) {

            if (i == elems.size() - 1) {
                break;
            }

            if (elems.get(i).getAttribute("class").contains("ui-state-active")) {
                actionBot.click(elems.get(i + 1));
                actionBot.waitForAjaxToComplete();
            }
        }

    }

    public static void goToFirstPageInTableUsingFirstButton(String idForTable, String idForPaginator, WebDriver driver, ActionBot actionBot) {
        WebElement elem = driver.findElement(By.xpath("//div[@id='" + idForPaginator + "']//span[contains(@class, 'ui-paginator-first')]"));
        actionBot.click(elem);
        actionBot.waitForAjaxToComplete();
    }

    public static void goToPreviousPageInTableUsingPreviousButton(String idForTable, String idForPaginator, WebDriver driver, ActionBot actionBot) {
        WebElement elem = driver.findElement(By.xpath("//div[@id='" + idForPaginator + "']//span[contains(@class, 'ui-paginator-prev')]"));
        actionBot.click(elem);
        actionBot.waitForAjaxToComplete();
    }

    public static void goToNextPageInTableUsingNextButton(String idForTable, String idForPaginator, WebDriver driver, ActionBot actionBot) {
        WebElement elem = driver.findElement(By.xpath("//div[@id='" + idForPaginator + "']//span[contains(@class, 'ui-paginator-next')]"));
        actionBot.click(elem);
        actionBot.waitForAjaxToComplete();
    }

    public static void goToLastPageInTableUsingLastButton(String idForTable, String idForPaginator, WebDriver driver, ActionBot actionBot) {
        WebElement elem = driver.findElement(By.xpath("//div[@id='" + idForPaginator + "']//span[contains(@class, 'ui-paginator-last')]"));
        actionBot.click(elem);
        actionBot.waitForAjaxToComplete();
    }

    public static int noOfPagesInDataScroller(String idForDataScroller, WebDriver driver) {
        int pages = 0;
        try {
            WebElement elem = driver.findElement(By.id(idForDataScroller));
            pages = elem.findElements(By.xpath("//span[@class='ui-paginator-pages']/span")).size();
        } catch (NoSuchElementException nse) {
            pages = 1;
        }

        return pages;
    }

    // Does a record matching the searchData provided exist in the table
    public static boolean doesRecordExist(String[] searchData, String tableId, String xpathForTableRows, String paginatorId, WebDriver driver, ActionBot actionBot) {

        int pages = noOfPagesInDataScroller(paginatorId, driver);

        if (pages > 1) {
            goToFirstPageInTableUsingFirstButton(tableId, paginatorId, driver, actionBot);
        }

        boolean found = false;
        int[] colsToFetch = new int[searchData.length]; //{1, 2, 3, 4, 5};

        //create an array position of columns to fetch startng from 1 instead of index 0
        for (int i = 0; i < colsToFetch.length; i++) {
            colsToFetch[i] = i + 1;
        }

        List<String> rowValues;
        int rows;
        outer:
        while (true) {
            //   for (int i = 0; i < pages; i++) {

            rows = driver.findElements(By.xpath(xpathForTableRows)).size();
            for (int j = 1; j <= rows; j++) {
                rowValues = TableUtils.getRowValues(tableId, j, colsToFetch, driver, actionBot);
                if (rowValues.size() == colsToFetch.length) {
                    boolean isMatched = true;
                    for (int x = 0; x < rowValues.size(); x++) {
                        if (!rowValues.get(x).equals(searchData[x])) {
                            isMatched = false;
                            break;
                        }
                    }

                    // If there is a macth, stop searching
                    if (isMatched) {
                        found = true;
                        break outer;
                    }
                }
            }

            if (pages > 1 && morePagesAvailable(paginatorId, driver)) {
                // go to next page
                nextPage(tableId, paginatorId, driver, actionBot);       
            } else {
                break;
            }
        }

        return found;
    }

    // Select a record from the table that matches the searchData 
    public static void selectRecord(String[] searchData, String tableId, String xpathForTableRows, String paginatorId, WebDriver driver, ActionBot actionBot) {

        int pages = noOfPagesInDataScroller(paginatorId, driver);

        if (pages > 1) {
            goToFirstPageInTableUsingFirstButton(tableId, paginatorId, driver, actionBot);
        }

        int[] colsToFetch = new int[searchData.length];

        //create an array position of columns to fetch startng from 1 instead of index 0
        for (int i = 0; i < colsToFetch.length; i++) {
            colsToFetch[i] = i + 1;
        }

        List<String> rowValues;
        int rows;
        outer:
        while (true) {
            //    for (int i = 0; i < pages; i++) {

            rows = driver.findElements(By.xpath(xpathForTableRows)).size();
            for (int j = 1; j <= rows; j++) {
                rowValues = TableUtils.getRowValues(tableId, j, colsToFetch, driver, actionBot);
                if (rowValues.size() == colsToFetch.length) {
                    boolean isMatched = true;
                    for (int x = 0; x < rowValues.size(); x++) {
                        if (!rowValues.get(x).equals(searchData[x])) {
                            isMatched = false;
                            break;
                        }
                    }

                    // If there is a macth, stop searching
                    if (isMatched) {
                        actionBot.click(driver.findElement(By.xpath("//div[@id='" + tableId + "']//tbody/tr[" + j + "]/td[last()]/button")));
                        actionBot.waitForAjaxToComplete();
                        break outer;
                    }
                }
            }

            if (pages > 1 && morePagesAvailable(paginatorId, driver)) {
                // go to next page
                nextPage(tableId, paginatorId, driver, actionBot);
            } else {
                break;
            }
        }
    }

    // Select any record from the table
    public static void selectRecord(String tableId, String xpathForTableRows, String paginatorId, WebDriver driver, ActionBot actionBot) {

        int pages = TableUtils.noOfPagesInDataScroller(paginatorId, driver);

        if (pages > 1) {
            goToFirstPageInTableUsingFirstButton(tableId, paginatorId, driver, actionBot);
        }

        if (driver.findElements(By.xpath(xpathForTableRows)).size() > 0) {
            // select the first record
            actionBot.click(driver.findElement(By.xpath("//div[@id='" + tableId + "']//tbody/tr[" + 1 + "]/td[last()]/button")));
            actionBot.waitForAjaxToComplete();
        }

    }

    public static void testFieldsUpdatedAfterRowSelection(String[] xpathForFields, String xpathForTableRows, int row, WebDriver driver, ActionBot actionBot, boolean includeLastColumn) {

        List<WebElement> elems = driver.findElements(By.xpath(xpathForTableRows + "[" + row + "]/td"));
        int size = includeLastColumn ? elems.size() : elems.size() - 1;

        for (int i = 0; i < size; i++) {
            assertEquals(elems.get(i).getText(), driver.findElement(By.xpath(xpathForFields[i])).getAttribute("value"));
        }
    }

    private static int pagesToProcess(int allPages) {

        if (allPages > MAX_PAGES_TO_NAVIGATE) {
            return MAX_PAGES_TO_NAVIGATE;
        }

        return allPages;
    }

    public static boolean morePagesAvailable(String idForPaginator, WebDriver driver) {
        return !driver.findElement(By.xpath("//div[@id='" + idForPaginator + "']//span[contains(@class, 'ui-paginator-next')]")).getAttribute("class").contains("ui-state-disabled");

    }

    public static void nextPage(String tableId, String paginatorId, WebDriver driver, ActionBot actionBot) {
        // go to next page
    //    int currentPage = Integer.parseInt(driver.findElement(By.xpath("//div[@id='" + paginatorId + "']//span[contains(@class, 'ui-paginator-page') and contains(@class, 'ui-state-active')]")).getText());

        // driver.findElement(By.xpath("//div[@id='" + paginatorId + "']//span[contains(@class, 'ui-paginator-page') and text() = '"+ ++currentPage + "']"));
        goToNextPageInTableUsingNextButton(tableId, paginatorId, driver, actionBot);

        // It's important to wait for the number button for the new page to be highlighted befor proceeding to ensure
        // ajax call is over and DOM has been updated; otherwise, elements reference may become stale or cannot be found  
        actionBot.waitForAjaxToComplete();
        //actionBot.waitForLoadingUsingXpath("//div[@id='" + paginatorId + "']//span[contains(@class, 'ui-paginator-page') and contains(@class, 'ui-state-active') and text() = '" + ++currentPage + "']", Constants.MEDIUM_TIMEOUT);

    }
}
