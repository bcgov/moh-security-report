package mid.selenium.pageobjects.fragment;


import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.LoadableComponent;
import selenium.util.ActionBot;

import static org.junit.Assert.*;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class LeftMenuHAMappings extends LoadableComponent<LeftMenuHAMappings> {

    public static final String ID_FOR_MORE_ICON = "imgsub4";
    public static final String XPATH_FOR_PARENT_MENU_NODE_LINK = "//a[contains(@onclick, 'SwitchMenu') and contains(@onclick, 'sub4') and contains(@onclick, 'masterdiv')]";
    
    public static final String ID_FOR_CHILD_MENU_CONTAINER = "sub4";
    public static final String XPATH_FOR_APPROPRIATENESS_LINK = "//a[contains(@href, 'MaintainAppropriatenessMap.xhtml')]";
    public static final String XPATH_FOR_CANCELLATION_REASON_LINK = "//a[contains(@href, 'MaintainCancellationReasonMap.xhtml')]";
    public static final String XPATH_FOR_ENCOUNTER_TYPE_LINK = "//a[contains(@href, 'MaintainEncounterTypeMap.xhtml')]";
    public static final String XPATH_FOR_FINDINGS_LINK = "//a[contains(@href, 'MaintainFindingsMap.xhtml')]";
    public static final String XPATH_FOR_FUNDING_TYPE_LINK = "//a[contains(@href, 'MaintainFundingTypeMap.xhtml')]";
    public static final String XPATH_FOR_GENDER_LINK = "//a[contains(@href, 'MaintainGenderMap.xhtml')]";
    public static final String XPATH_FOR_MODALITY_LINK = "//a[contains(@href, 'MaintainModalityMap.xhtml')]";
    public static final String XPATH_FOR_POSTPONEMENT_REASON_LINK = "//a[contains(@href, 'MaintainPostponeReasonMap.xhtml')]";
    public static final String XPATH_FOR_PRIORITY_LEVEL_LINK = "//a[contains(@href, 'MaintainPriorityLevelMap.xhtml')]";
    public static final String XPATH_FOR_PROCEDURE_LINK = "//a[contains(@href, 'MaintainProcedureMap.xhtml')]";
    public static final String XPATH_FOR_PROVINCE_LINK = "//a[contains(@href, 'MaintainProvinceMap.xhtml')]";
    public static final String XPATH_FOR_REASON_FOR_EXAM_LINK = "//a[contains(@href, 'MaintainExamReasonMap.xhtml')]";
    public static final String XPATH_FOR_STATUS_LINK = "//a[contains(@href, 'MaintainStatusMap.xhtml')]";
    public static final String XPATH_FOR_TIMED_FOLLOWUP_LINK = "//a[contains(@href, 'MaintainTimedExamMap.xhtml')]";
    

    private final WebDriver driver;
    private String handle;
    private final ActionBot actionBot;
    private final String browser;    

    public LeftMenuHAMappings(WebDriver driver, String browser) {
        this.driver = driver;
        this.browser = browser;
        actionBot = new ActionBot(driver);
        
        PageFactory.initElements(driver, this);
    }

    @Override
    protected void load() {
        PageFactory.initElements(driver, this);
    }

    @Override
    protected void isLoaded() throws Error {

        try {
            driver.findElement(By.xpath(XPATH_FOR_PARENT_MENU_NODE_LINK));
            assert true;
        } catch (NoSuchElementException e) {
            load();
        }
    }
    
    public void setHandle(String handle) {
        this.handle = handle;
    }
    
    public void openMenu() {
        
        WebElement elem = driver.findElement(By.id(ID_FOR_CHILD_MENU_CONTAINER));
        
        if (!elem.isDisplayed()) {
            actionBot.click(driver.findElement(By.xpath(XPATH_FOR_PARENT_MENU_NODE_LINK)));
        }
    }
    
    public void closeMenu() {
        WebElement elem = driver.findElement(By.id(ID_FOR_CHILD_MENU_CONTAINER));
        
        if (elem.isDisplayed()) {
            actionBot.click(driver.findElement(By.xpath(XPATH_FOR_PARENT_MENU_NODE_LINK)));
        }
    }


    public void showAppropriatenessMappingForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_APPROPRIATENESS_LINK)));
    }
    
    public void showCancellationReasonMappingForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_CANCELLATION_REASON_LINK)));
    }
    
    public void showEncounterTypeMappingForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_ENCOUNTER_TYPE_LINK)));
    }
    
    public void showFindingsMappingForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_FINDINGS_LINK)));
    }
    
    public void showFundingTypeMappingForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_FUNDING_TYPE_LINK)));
    }
    
    public void showGenderMappingForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_GENDER_LINK)));
    }
    
    public void showModalityMappingForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_MODALITY_LINK)));
    }
    
    public void showPostponementReasonMappingForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_POSTPONEMENT_REASON_LINK)));
    }
    
    public void showPriorityLevelMappingForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_PRIORITY_LEVEL_LINK)));
    }
    
    public void showProcedureMappingForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_PROCEDURE_LINK)));
    }

    public void showProvinceMappingForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_PROVINCE_LINK)));
    }
    
    public void showReasonForExamMappingForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_REASON_FOR_EXAM_LINK)));
    }
    
    public void showStatusMappingForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_STATUS_LINK)));
    }
    
    public void showTimedFollowupMappingForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_TIMED_FOLLOWUP_LINK)));
    }
    
    public void assertChildrenMenuOpen() {    
        assertTrue(driver.findElement(By.id(ID_FOR_CHILD_MENU_CONTAINER)).isDisplayed());
        assertTrue(driver.findElement(By.id(ID_FOR_MORE_ICON)).getAttribute("src").endsWith("less.gif"));
               
    }
    
    public void assertChildrenMenuClose() {   
        assertTrue(!driver.findElement(By.id(ID_FOR_CHILD_MENU_CONTAINER)).isDisplayed());
        assertTrue(driver.findElement(By.id(ID_FOR_MORE_ICON)).getAttribute("src").endsWith("more.gif")); 
    }
    
    public void assertNotLoaded() {

        try {
            driver.findElement(By.xpath(XPATH_FOR_APPROPRIATENESS_LINK));
            assert false : "Appropriateness link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_CANCELLATION_REASON_LINK));
            assert false : "Cancellation Reason link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }

        try {
            driver.findElement(By.xpath(XPATH_FOR_ENCOUNTER_TYPE_LINK));
            assert false : "Encounter Type link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_ENCOUNTER_TYPE_LINK));
            assert false : "Encounter Type link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
                
        try {
            driver.findElement(By.xpath(XPATH_FOR_FINDINGS_LINK));
            assert false : "Findings link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_FINDINGS_LINK));
            assert false : "Funding Type link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_GENDER_LINK));
            assert false : "Gender link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }

        try {
            driver.findElement(By.xpath(XPATH_FOR_MODALITY_LINK));
            assert false : "Modality link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_POSTPONEMENT_REASON_LINK));
            assert false : "Postponement Reason link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_PRIORITY_LEVEL_LINK));
            assert false : "Priority Level link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_PROCEDURE_LINK));
            assert false : "Procedure link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_PROVINCE_LINK));
            assert false : "Province link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_REASON_FOR_EXAM_LINK));
            assert false : "Reason for Exam link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
    }
       
    
    public void assertLoaded() {

        try {
            driver.findElement(By.xpath(XPATH_FOR_APPROPRIATENESS_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Appropriateness link is not being displayed when it should be";            
        }
        
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_CANCELLATION_REASON_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Cancellation Reason link is not being displayed when it should be";            
        }

        try {
            driver.findElement(By.xpath(XPATH_FOR_ENCOUNTER_TYPE_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Encounter Type link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_FINDINGS_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Findings link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_FUNDING_TYPE_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Funding Type link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_GENDER_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Gender link is not being displayed when it should be";            
        }       
                
        try {
            driver.findElement(By.xpath(XPATH_FOR_MODALITY_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Modality link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_POSTPONEMENT_REASON_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Postponement Reason link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_PRIORITY_LEVEL_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Priority Level link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_PROCEDURE_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Procedure link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_PROVINCE_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Province link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_REASON_FOR_EXAM_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Reason for Exam link is not being displayed when it should be";            
        }
    }
}
