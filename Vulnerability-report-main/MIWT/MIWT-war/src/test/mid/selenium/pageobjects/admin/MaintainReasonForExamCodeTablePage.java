package mid.selenium.pageobjects.admin;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import mid.selenium.functional.util.ConvertStringToDateComparator;
import mid.selenium.functional.util.DbUtils;
import mid.selenium.functional.util.DbUtils.FieldValue;
import mid.selenium.functional.util.TableUtils;
import mid.selenium.functional.util.ValidationUtils;
import mid.selenium.pageobjects.fragment.LeftMenuCodeTables;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.LoadableComponent;
import selenium.util.ActionBot;
import selenium.util.Constants;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class MaintainReasonForExamCodeTablePage extends LoadableComponent<MaintainReasonForExamCodeTablePage> {

    public enum SUBMIT_BUTTONS {
        ADD, UPDATE
    }
    
    // DB Column names for the associated table
     public static final String DB_TABLE_NAME = "MIRD_EXAM_REASON";
    public static final String DB_CODE_COLUMN = "EXAM_REASON_CD";
    public static final String DB_DESCRIPTION_COLUMN = "EXAM_REASON_DESC";
    public static final String DB_EFFECTIVE_DT_COLUMN = "EFFECTIVE_DT";
    public static final String DB_EXPIRY_DT_COLUMN = "EXPIRY_DT";    
    
    //Page Object constants
    public static final String REASON_FOR_EXAM_CODE_NAME = "Reason for Exam Code";
    public static final String XPATH_FOR_HOME_PAGE_FORM = "//form[@id='form1' and contains(@action, 'MaintainExamReason.xhtml')]";
    public static final String XPATH_FOR_REASON_FOR_EXAM_CODE_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[1]";
    public static final String XPATH_FOR_REASON_FOR_EXAM_DESCRIPTION_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[2]";
    public static final String XPATH_FOR_EFFECTIVE_DATE_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input[contains(@class, 'hasDatepicker')])[1]";
    public static final String XPATH_FOR_EFFECTIVE_DATE_CALENDAR_BUTTON = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input[contains(@class, 'hasDatepicker')])[1]/../button";
    public static final String XPATH_FOR_EXPIRY_DATE_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input[contains(@class, 'hasDatepicker')])[2]";
    public static final String XPATH_FOR_EXPIRY_DATE_CALENDAR_BUTTON = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input[contains(@class, 'hasDatepicker')])[2]/../button";
    public static final String XPATH_FOR_ADD_BUTTON = "//button/span[text()='Add']/..";
    public static final String XPATH_FOR_UPDATE_BUTTON = "//button/span[text()='Update']/..";
    public static final String XPATH_FOR_CANCEL_BUTTON = "//button/span[text()='Cancel']/..";
    public static final String ID_FOR_RESULT_TABLE = "form1:listTable";
    public static final String XPATH_FOR_TABLE_ROWS = "//div[@id='" + ID_FOR_RESULT_TABLE + "']//tbody/tr";
    public static final String ID_FOR_BOTTOM_PAGINATOR = ID_FOR_RESULT_TABLE + "_paginator_bottom";
    public static final String XPATH_FOR_REASON_FOR_EXAM_CODE_FIELD_LENGTH_VALIDATION = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[1]/../span[@class='lengthWarn']";
    public static final String XPATH_FOR_REASON_FOR_EXAM_DESCRIPTION_FIELD_LENGTH_VALIDATION = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[2]/../span[@class='lengthWarn']";
    public static final String XPATH_FOR_REASON_FOR_EXAM_CODE_FIELD_VALIDATION_MSG = "//div[@id='content']//span[@class='ui-messages-error-summary' and contains(text(), 'Reason for Exam') and contains(text(), 'Code')]";
    public static final String XPATH_FOR_REASON_FOR_EXAM_DESCRIPTION_FIELD_VALIDATION_MSG = "//div[@id='content']//span[@class='ui-messages-error-summary' and contains(text(), 'Reason for Exam') and contains(text(), 'Description')]";
    public static final String XPATH_FOR_EFFECTIVE_DATE_VALIDATION_MSG = "//div[@id='content']//span[@class='ui-messages-error-summary' and contains(text(), 'Effective')]";
    public static final String XPATH_FOR_EXPIRY_DATE_VALIDATION_MSG = "//div[@id='content']//span[@class='ui-messages-error-summary' and contains(text(), 'Expiry')]";
    //Messages
    public static final String REASON_FOR_EXAM_CODE_FIELD_UNIQUE = "Reason for Exam Code must be unique";
    public static final String REASON_FOR_EXAM_CODE_FIELD_REQUIRED = "Reason for Exam Code is required.";
    public static final String REASON_FOR_EXAM_DESCRIPTION_FIELD_REQUIRED = "Reason for Exam Description is required";
    public static final String REASON_FOR_EXAM_CODE_MAXIMUM_FIELD_LENGTH = "Maximum Field Length Reached for Reason for Exam Code";
    public static final String REASON_FOR_EXAM_DESCRIPTION_MAXIMUM_FIELD_LENGTH = "Maximum Field Length Reached for Reason for Exam Description";
    //Fragments and Selenium objects
    private final WebDriver driver;
    private String[] handles;
    private final ActionBot actionBot;
    private final String browser;
    private final LoadableComponent<?> parent;
    private final LeftMenuCodeTables leftMenuCodeTables;
    private List<Map<String, FieldValue>> insertedRecords = new ArrayList<>();

    public MaintainReasonForExamCodeTablePage(LoadableComponent<?> parent, LeftMenuCodeTables leftMenuCodeTables, WebDriver driver, String browser) {

        this.driver = driver;
        this.browser = browser;
        this.parent = parent;
        this.leftMenuCodeTables = leftMenuCodeTables;
        actionBot = new ActionBot(driver);


        PageFactory.initElements(driver, this);

    }

    @Override
    protected void load() {
        parent.get();
        actionBot.waitForLoadingUsingXpath(HomePageAdmin.XPATH_FOR_HOME_PAGE_FORM, Constants.SHORT_TIMEOUT);
        leftMenuCodeTables.openMenu();
        leftMenuCodeTables.showMaintainReasonForExamForm();
    }

    @Override
    protected void isLoaded() throws Error {

        try {
            driver.findElement(By.xpath(ID_FOR_RESULT_TABLE));
            assert true;
        } catch (NoSuchElementException e) {
            load();
        }
    }

    public void submitForm(SUBMIT_BUTTONS button) {

        if (SUBMIT_BUTTONS.ADD.equals(button)) {
            actionBot.click(driver.findElement(By.xpath(XPATH_FOR_ADD_BUTTON)));
        } else if (SUBMIT_BUTTONS.UPDATE.equals(button)) {
            actionBot.click(driver.findElement(By.xpath(XPATH_FOR_UPDATE_BUTTON)));
        }
    }

    public void cancelForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_CANCEL_BUTTON)));
    }

    public void selectRecord(String... searchParameters) {
        TableUtils.selectRecord(searchParameters, ID_FOR_RESULT_TABLE, "//div[@id='" + ID_FOR_RESULT_TABLE + "']//tbody/tr", ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
    }

    public void selectRecord() {
        TableUtils.selectRecord(ID_FOR_RESULT_TABLE, "//div[@id='" + ID_FOR_RESULT_TABLE + "']//tbody/tr", ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
    }

    public void addRecord(String code, String description, String effectiveDate) {
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_REASON_FOR_EXAM_CODE_FIELD)), code);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_REASON_FOR_EXAM_DESCRIPTION_FIELD)), description);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_EFFECTIVE_DATE_FIELD)), effectiveDate);
        
        Map<String, FieldValue> data = new HashMap<>();
        data.put(DB_CODE_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, code));
        data.put(DB_DESCRIPTION_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, description));
        data.put(DB_EFFECTIVE_DT_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.DATE, effectiveDate));
        
        insertedRecords.add(data);
    
    }

    public void addRecord(String code, String description, String effectiveDate, String expiryDate) {
        addRecord(code, description, effectiveDate);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_EXPIRY_DATE_FIELD)), expiryDate);

    }

    public void updateRecord(String description, String effectiveDate) {
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_REASON_FOR_EXAM_DESCRIPTION_FIELD)), description);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_EFFECTIVE_DATE_FIELD)), effectiveDate);
        
        Map<String, FieldValue> data = new HashMap<>();
        data.put(DB_DESCRIPTION_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, description));
        data.put(DB_EFFECTIVE_DT_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.DATE, effectiveDate));
        
        insertedRecords.add(data);
    }

    public void updateRecord(String description, String effectiveDate, String expiryDate) {
        updateRecord(description, effectiveDate);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_EXPIRY_DATE_FIELD)), expiryDate);

    }

    public boolean doesRecordExist(String... searchParameters) {
        return TableUtils.doesRecordExist(searchParameters, ID_FOR_RESULT_TABLE, "//div[@id='" + ID_FOR_RESULT_TABLE + "']//tbody/tr", ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
    }

    public void assertPageLoaded() {
        try {

            driver.findElement(By.id(ID_FOR_RESULT_TABLE));
            assert driver.getCurrentUrl().endsWith("MaintainExamReason.xhtml") : "URL in address bar is not pointin to MaintainExamReason.xhtml page";
        } catch (NoSuchElementException nse) {
            assert false : "Maintain Reason for Exam(CodeTables) is not being loaded";
        }
    }

    public void assertNoGlobalValidationErrors() {
        try {
            driver.findElement(By.xpath(ValidationUtils.XPATH_FOR_GLOBAL_VALIDATION_MSG));
            assert false : "No error message expected to be displayed";
        } catch (NoSuchElementException nse) {
            assert true;
        }
    }

    public void assertFieldsAreReset() {
        assert driver.findElement(By.xpath(XPATH_FOR_REASON_FOR_EXAM_CODE_FIELD)).getAttribute("value").isEmpty() : "Reason for Exam Code field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_REASON_FOR_EXAM_DESCRIPTION_FIELD)).getAttribute("value").isEmpty() : "Reason for Exam Description field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_EFFECTIVE_DATE_FIELD)).getAttribute("value").isEmpty() : "Effective Date field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_EXPIRY_DATE_FIELD)).getAttribute("value").isEmpty() : "Expiry Date field must be empty after pressing cancel button";

    }

    public void assertRecordExist(String code, String description, String effectiveDate) {
        assert doesRecordExist(code, description, effectiveDate) : String.format("Entry with the values '%s', '%s' and '%s' does not exist", code, description, effectiveDate);
    }

    public void assertRecordDoesNotExist(String code, String description, String effectiveDate) {
        assert !doesRecordExist(code, description, effectiveDate) : String.format("Entry with the values '%s', '%s' and '%s' does not exist", code, description, effectiveDate);
    }

    public void assertRecordExist(String code, String name, String description, String effectiveDate, String expiryDate) {
        assert doesRecordExist(code, description, effectiveDate, expiryDate) : String.format("Entry with the values '%s', '%s', '%s', '%s' and '%s' does not exist", code, name, description, effectiveDate, expiryDate);
    }

    public void assertEntryUpdatedSuccessfully(String code, String effectiveDate, String expiryDate) {
        assertRecordExist(code, effectiveDate, expiryDate);
    }

    public void assertAddSuccessfulMessageDisplayed() {
        ValidationUtils.assertMessageIsDisplayed(ValidationUtils.XPATH_SUCCESSFUL_MSG, ValidationUtils.ADD_SUCCESSFUL, driver);
    }

    public void assertUpdateSuccessfulMessageDisplayed() {

        try {
            driver.findElement(By.xpath(ValidationUtils.XPATH_FOR_GLOBAL_VALIDATION_MSG));
            assert false : "No error message expected to be displayed";
        } catch (NoSuchElementException nse) {
            assert true;
        }
    }

    public void assertValidationErrorDisplayed(String message) {


        switch (message) {
            case REASON_FOR_EXAM_CODE_FIELD_REQUIRED:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_REASON_FOR_EXAM_CODE_FIELD_VALIDATION_MSG, REASON_FOR_EXAM_CODE_FIELD_REQUIRED, driver);
                break;
            case ValidationUtils.EFFECTIVE_DATE_REQUIRED:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_EFFECTIVE_DATE_VALIDATION_MSG, ValidationUtils.EFFECTIVE_DATE_REQUIRED, driver);
                break;
            case ValidationUtils.EFFECTIVE_DATE_INVALID:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_EFFECTIVE_DATE_VALIDATION_MSG, ValidationUtils.EFFECTIVE_DATE_INVALID, driver);
                break;
            case ValidationUtils.EXPIRY_DATE_INVALID:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_EXPIRY_DATE_VALIDATION_MSG, ValidationUtils.EXPIRY_DATE_INVALID, driver);
                break;
            case ValidationUtils.EXPIRY_MUST_BE_GREATER_THAN_EFFECTIVE_DATE:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_EXPIRY_DATE_VALIDATION_MSG, ValidationUtils.EXPIRY_MUST_BE_GREATER_THAN_EFFECTIVE_DATE, driver);
                break;
            case REASON_FOR_EXAM_CODE_MAXIMUM_FIELD_LENGTH:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_REASON_FOR_EXAM_CODE_FIELD_LENGTH_VALIDATION, ValidationUtils.MAXIMUM_FIELD_LENGTH_REACHED, driver);
                break;
            case REASON_FOR_EXAM_DESCRIPTION_MAXIMUM_FIELD_LENGTH:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_REASON_FOR_EXAM_DESCRIPTION_FIELD_LENGTH_VALIDATION, ValidationUtils.MAXIMUM_FIELD_LENGTH_REACHED, driver);
                break;
            case REASON_FOR_EXAM_CODE_FIELD_UNIQUE:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_REASON_FOR_EXAM_CODE_FIELD_VALIDATION_MSG, REASON_FOR_EXAM_CODE_FIELD_UNIQUE, driver);
                break;
        }
    }

    public void assertNoMaximumLengthValidationErrorDisplayed() {

        try {

            driver.findElement(By.xpath(XPATH_FOR_REASON_FOR_EXAM_CODE_FIELD_LENGTH_VALIDATION));
            assert false : ValidationUtils.MAXIMUM_FIELD_LENGTH_VALIDATION_MSG_NOT_EXPECTED;
        } catch (NoSuchElementException nse) {
            assert true;
        }


        try {

            driver.findElement(By.xpath(XPATH_FOR_REASON_FOR_EXAM_DESCRIPTION_FIELD_LENGTH_VALIDATION));
            assert false : ValidationUtils.MAXIMUM_FIELD_LENGTH_VALIDATION_MSG_NOT_EXPECTED;
        } catch (NoSuchElementException nse) {
            assert true;
        }
    }

    public void assertTableSortingWorks() {

        // Sorting for Reason for Exam CodeColumn
        Comparator dateComparator = new ConvertStringToDateComparator("dd-MMM-yyyy");
        int columPosition = 1;
        String xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        String columnName = "Reason for Exam Code";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);

        // Sorting for Reason for Exam Description Column
        columPosition = 2;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Reason for Exam Description";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);

        // Sorting for effective date Column
        columPosition = 3;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Effective Date";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, dateComparator, driver, actionBot);

        // Sorting for Expiry date Column
        columPosition = 4;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Expiry Date";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, dateComparator, driver, actionBot);

    }

    public void assertTablePaginationWorks() {
        int pages = TableUtils.noOfPagesInDataScroller(ID_FOR_BOTTOM_PAGINATOR, driver);

        if (pages > 1) {
            TableUtils.testTablePagination(ID_FOR_RESULT_TABLE, ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
        }
    }

    public void assertRecordSelectionWorks() {

        String[] xpathForFields = {XPATH_FOR_REASON_FOR_EXAM_CODE_FIELD, XPATH_FOR_REASON_FOR_EXAM_DESCRIPTION_FIELD, XPATH_FOR_EFFECTIVE_DATE_FIELD, XPATH_FOR_EXPIRY_DATE_FIELD};
        TableUtils.testRecordSelectionWorks(ID_FOR_RESULT_TABLE, XPATH_FOR_TABLE_ROWS, xpathForFields, ID_FOR_BOTTOM_PAGINATOR, XPATH_FOR_UPDATE_BUTTON, XPATH_FOR_ADD_BUTTON, XPATH_FOR_CANCEL_BUTTON, driver, actionBot);

    }

    public void assertCodeFieldNotEditable() {
        ValidationUtils.assertFieldIsNotEditable(XPATH_FOR_REASON_FOR_EXAM_CODE_FIELD, REASON_FOR_EXAM_CODE_NAME, driver, actionBot);
    }

    public void cleanup() {                
        DbUtils.executeStatement(DB_TABLE_NAME, "DELETE", insertedRecords);
    }
}
