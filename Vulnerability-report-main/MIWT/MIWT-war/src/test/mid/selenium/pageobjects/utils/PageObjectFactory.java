package mid.selenium.pageobjects.utils;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import mid.selenium.pageobjects.admin.HomePageAdmin;
import mid.selenium.pageobjects.admin.MaintainAgeRangeCodeTablePage;
import mid.selenium.pageobjects.admin.MaintainAnatomicalCodeTablePage;
import mid.selenium.pageobjects.fragment.LeftMenuAdmin;
import mid.selenium.pageobjects.fragment.LeftMenuCodeTables;
import mid.selenium.pageobjects.fragment.LeftMenuHAMappings;
import mid.selenium.pageobjects.fragment.LeftMenuHeader;
import mid.selenium.pageobjects.fragment.LeftMenuReports;
import mid.selenium.pageobjects.fragment.LeftMenuSnapshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import selenium.pageobject.LoginPage;
import selenium.util.UserAccounts;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class PageObjectFactory {

    public enum LoginType {
        ADMIN, STAFF, HA
    }

    private static Map<String, LoginPage> loginPages = new ConcurrentHashMap<>();
    private static LeftMenuReports reports;
    private static LeftMenuSnapshot snapshot;
    private static LeftMenuHAMappings haMappings;
    private static LeftMenuHeader menuHeader;
    private static LeftMenuCodeTables codeTables;
    private static LeftMenuAdmin adminLeftMenu;
    private static HomePageAdmin homePageAdmin;
    private static MaintainAgeRangeCodeTablePage maintainAgeRangeCodeTablePage;
    private static MaintainAnatomicalCodeTablePage maintainAnatomicalCodeTablePage;

    public synchronized static LoginPage getLoginPage(WebDriver driver, DesiredCapabilities desiredCapabilities, LoginType loginType, String userName, String password) {

        String key = desiredCapabilities.getBrowserName() + loginType.toString() + userName;
        LoginPage page = loginPages.get(key);

        if (page == null) {
            if (LoginType.ADMIN.equals(loginType)) {
                page = new LoginPage(driver, desiredCapabilities.getBrowserName(), UserAccounts.ADMIN, UserAccounts.getPassword(UserAccounts.ADMIN));
            } else if (LoginType.STAFF.equals(loginType)) {
                page = new LoginPage(driver, desiredCapabilities.getBrowserName(), UserAccounts.STAFF, UserAccounts.getPassword(UserAccounts.STAFF));
            } else if (LoginType.HA.equals(loginType)) {
                page = new LoginPage(driver, desiredCapabilities.getBrowserName(), UserAccounts.HA_VAC_ISLAND, UserAccounts.getPassword(UserAccounts.HA_VAC_ISLAND));
            }            
        }
        
        loginPages.put(key, page);

        return page;
    }
    
    public synchronized static LeftMenuHeader getHeaderMenu(WebDriver driver, DesiredCapabilities desiredCapabilities) {
        
        if (menuHeader == null) {
            menuHeader = new LeftMenuHeader(driver, desiredCapabilities.getBrowserName());
        }
        
        return menuHeader;
    }
    
    public synchronized static LeftMenuReports getReportMenu(WebDriver driver, DesiredCapabilities desiredCapabilities) {
        
        if (reports == null) {
            reports = new LeftMenuReports(driver, desiredCapabilities.getBrowserName());
        }
        
        return reports;
    }
    
    public synchronized static LeftMenuSnapshot getSnapshotMenu(WebDriver driver, DesiredCapabilities desiredCapabilities) {
        
        if (snapshot == null) {
            snapshot = new LeftMenuSnapshot(driver, desiredCapabilities.getBrowserName());
        }
        
        return snapshot;
    }
    
    public synchronized static LeftMenuHAMappings getHAMappingsMenu(WebDriver driver, DesiredCapabilities desiredCapabilities) {
        
        if (haMappings == null) {
            haMappings = new LeftMenuHAMappings(driver, desiredCapabilities.getBrowserName());
        }
        
        return haMappings;
    }
    
    public synchronized static LeftMenuCodeTables getCodeTablesMenu(WebDriver driver, DesiredCapabilities desiredCapabilities) {
        
        if (codeTables == null) {
            codeTables = new LeftMenuCodeTables(driver, desiredCapabilities.getBrowserName());
        }
        
        return codeTables;
    }
    
    public synchronized static LeftMenuAdmin getAdminLeftMenu(WebDriver driver, DesiredCapabilities desiredCapabilities) {
        if (adminLeftMenu == null) {
            adminLeftMenu = new LeftMenuAdmin(getHeaderMenu(driver, desiredCapabilities), getReportMenu(driver, desiredCapabilities), getSnapshotMenu(driver, desiredCapabilities), getHAMappingsMenu(driver, desiredCapabilities), getCodeTablesMenu(driver, desiredCapabilities), driver, desiredCapabilities.getBrowserName());
        }
        
        return adminLeftMenu;
    }
    
    public synchronized static HomePageAdmin getAdminHomePage(WebDriver driver, DesiredCapabilities desiredCapabilities) {
        if (homePageAdmin == null) {
            homePageAdmin = new HomePageAdmin(getLoginPage(driver, desiredCapabilities, LoginType.ADMIN, UserAccounts.ADMIN, UserAccounts.getPassword(UserAccounts.ADMIN))
                                        , getAdminLeftMenu(driver, desiredCapabilities)
                                        , driver
                                        , desiredCapabilities.getBrowserName());
        }
        
        return  homePageAdmin;
    }
    
//    public synchronized static MaintainAgeRangeCodeTablePage getAdminAgeRangeCodeTablePage(WebDriver driver, DesiredCapabilities desiredCapabilities, LoginType loginType) {
//        if (maintainAgeRangeCodeTablePage == null) {
//            maintainAgeRangeCodeTablePage = new MaintainAgeRangeCodeTablePage(getAdminHomePage(driver, desiredCapabilities, loginType)
//                                        , getCodeTablesMenu(driver, desiredCapabilities)
//                                        , driver
//                                        , desiredCapabilities.getBrowserName());
//        }
//        
//        return  maintainAgeRangeCodeTablePage;
//    }
//    
//     public synchronized static MaintainAnatomicalCodeTablePage getAdminAnatomicalImagingCodeTablePage(WebDriver driver, DesiredCapabilities desiredCapabilities, LoginType loginType) {
//        if (maintainAnatomicalCodeTablePage == null) {
//            maintainAnatomicalCodeTablePage = new MaintainAnatomicalCodeTablePage(getAdminHomePage(driver, desiredCapabilities, loginType)
//                                        , getCodeTablesMenu(driver, desiredCapabilities)
//                                        , driver
//                                        , desiredCapabilities.getBrowserName());
//        }
//        
//        return  maintainAnatomicalCodeTablePage;
//    }
}
