package mid.selenium.pageobjects.admin;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import mid.selenium.functional.util.ConvertStringToDateComparator;
import mid.selenium.functional.util.DbUtils;
import mid.selenium.functional.util.DbUtils.FieldValue;
import mid.selenium.functional.util.TableUtils;
import mid.selenium.functional.util.ValidationUtils;
import mid.selenium.pageobjects.fragment.LeftMenuCodeTables;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.LoadableComponent;
import selenium.util.ActionBot;
import selenium.util.Constants;
import static org.junit.Assert.*;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class MaintainMachineInformationCodeTablePage extends LoadableComponent<MaintainMachineInformationCodeTablePage> {

    public enum SUBMIT_BUTTONS {

        ADD, UPDATE
    }
    // DB Column names for the associated table
    public static final String DB_TABLE_NAME = "MIRD_EQUIPMENT";
    public static final String DB_MODALITY_CD_COLUMN = "MODALITY_TYPE_CD";
    public static final String DB_FACILITY_ID_COLUMN = "FACILITY_ID";
    public static final String DB_MACHINE_ID_COLUMN = "MACHINE_ID";
    public static final String DB_DESCRIPTION_COLUMN = "DESCRIPTION";
    public static final String DB_DEPARTMENT_COLUMN = "DEPARTMENT";
    public static final String DB_ROOM_NUMBER_COLUMN = "ROOM_NUMBER";
    public static final String DB_ASSET_NUMBER_COLUMN = "ASSET_NUMBER";
    public static final String DB_MODEL_NUMBER_COLUMN = "MODEL_NUMBER";
    public static final String DB_SERIAL_NUMBER_COLUMN = "SERIAL_NUMBER";
    public static final String DB_DEVICE_CODE_COLUMN = "DEVICE_CODE";
    public static final String DB_SYSTEM_NUMBER_COLUMN = "SYSTEM_NUMBER";
    public static final String DB_EFFECTIVE_DT_COLUMN = "EFFECTIVE_DT";
    public static final String DB_EXPIRY_DT_COLUMN = "EXPIRY_DT";
    public static final String XPATH_FOR_HOME_PAGE_FORM = "//form[@id='form1' and contains(@action, 'MaintainEquipment.xhtml')]";
    public static final String XPATH_FOR_MODALITY_TYPE_CD_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//select)[1]";
    public static final String XPATH_FOR_FACILITY_NAME_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//select)[2]";
    public static final String XPATH_FOR_MACHINE_ID_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[1]";
    public static final String XPATH_FOR_DESCRIPTION_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[2]";
    public static final String XPATH_FOR_DEPARTMENT_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[3]";
    public static final String XPATH_FOR_ROOM_NUMBER_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[4]";
    public static final String XPATH_FOR_ASSET_NUMBER_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[5]";
    public static final String XPATH_FOR_MODEL_NUMBER_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[6]";
    public static final String XPATH_FOR_SERIAL_NUMBER_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[7]";
    public static final String XPATH_FOR_DEVICE_CODE_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[8]";
    public static final String XPATH_FOR_SYSTEM_NUMBER_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[9]";
    public static final String XPATH_FOR_EFFECTIVE_DATE_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input[contains(@class, 'hasDatepicker')])[1]";
    public static final String XPATH_FOR_EFFECTIVE_DATE_CALENDAR_BUTTON = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input[contains(@class, 'hasDatepicker')])[1]/../button";
    public static final String XPATH_FOR_EXPIRY_DATE_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input[contains(@class, 'hasDatepicker')])[2]";
    public static final String XPATH_FOR_EXPIRY_DATE_CALENDAR_BUTTON = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input[contains(@class, 'hasDatepicker')])[2]/../button";
    public static final String XPATH_FOR_ADD_BUTTON = "//button/span[text()='Add']/..";
    public static final String XPATH_FOR_UPDATE_BUTTON = "//button/span[text()='Update']/..";
    public static final String XPATH_FOR_CANCEL_BUTTON = "//button/span[text()='Cancel']/..";
    public static final String ID_FOR_RESULT_TABLE = "form1:listTable";
    public static final String XPATH_FOR_TABLE_ROWS = "//div[@id='" + ID_FOR_RESULT_TABLE + "']//tbody/tr";
    public static final String ID_FOR_BOTTOM_PAGINATOR = ID_FOR_RESULT_TABLE + "_paginator_bottom";
    public static final String XPATH_FOR_MACHINE_ID_FIELD_LENGTH_VALIDATION = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[1]/../span[@class='lengthWarn']";
    public static final String XPATH_FOR_DESCRIPTION_FIELD_LENGTH_VALIDATION = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[2]/../span[@class='lengthWarn']";
    public static final String XPATH_FOR_DEPARTMENT_FIELD_LENGTH_VALIDATION = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[3]/../span[@class='lengthWarn']";
    public static final String XPATH_FOR_ROOM_NUMBER_FIELD_LENGTH_VALIDATION = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[4]/../span[@class='lengthWarn']";
    public static final String XPATH_FOR_ASSET_NUMBER_FIELD_LENGTH_VALIDATION = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[5]/../span[@class='lengthWarn']";
    public static final String XPATH_FOR_MODEL_NUMBER_FIELD_LENGTH_VALIDATION = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[6]/../span[@class='lengthWarn']";
    public static final String XPATH_FOR_SERIAL_NUMBER_FIELD_LENGTH_VALIDATION = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[7]/../span[@class='lengthWarn']";
    public static final String XPATH_FOR_DEVICE_CODE_FIELD_LENGTH_VALIDATION = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[8]/../span[@class='lengthWarn']";
    public static final String XPATH_FOR_SYSTEM_NUMBER_FIELD_LENGTH_VALIDATION = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[9]/../span[@class='lengthWarn']";
    public static final String XPATH_FOR_MODALITY_TYPE_CODE_FIELD_VALIDATION_MSG = "//div[@id='content']//span[@class='ui-messages-error-summary' and contains(text(), 'Modality Type Code')]";
    public static final String XPATH_FOR_FACILITY_NAME_FIELD_VALIDATION_MSG = "//div[@id='content']//span[@class='ui-messages-error-summary' and contains(text(), 'Facility Name')]";
    public static final String XPATH_FOR_MACHINE_ID_FIELD_VALIDATION_MSG = "//div[@id='content']//span[@class='ui-messages-error-summary' and contains(text(), 'Machine Id')]";
    public static final String XPATH_FOR_DESCRIPTION_FIELD_VALIDATION_MSG = "//div[@id='content']//span[@class='ui-messages-error-summary' and contains(text(), 'Description')]";
    public static final String XPATH_FOR_EFFECTIVE_DATE_VALIDATION_MSG = "//div[@id='content']//span[@class='ui-messages-error-summary' and contains(text(), 'Effective')]";
    public static final String XPATH_FOR_EXPIRY_DATE_VALIDATION_MSG = "//div[@id='content']//span[@class='ui-messages-error-summary' and contains(text(), 'Expiry')]";
    //Messages
    public static final String MODALITY_TYPE_CODE_FIELD_REQUIRED = "Modality Type Code is required";
    public static final String FACILITY_NAME_FIELD_REQUIRED = "Facility Name is required";
    public static final String MACHINE_ID_FIELD_REQUIRED = "Machine Id is required";
    public static final String DESCRIPTION_FIELD_REQUIRED = "Description is required";
    public static final String MACHINE_ID_MAXIMUM_FIELD_LENGTH = "Maximum Field Length Reached for Machine Id";
    public static final String DESCRIPTION_MAXIMUM_FIELD_LENGTH = "Maximum Field Length Reached for Description";
    public static final String DEPARTMENT_MAXIMUM_FIELD_LENGTH = "Maximum Field Length Reached for Department";
    public static final String ROOM_NUMBER_MAXIMUM_FIELD_LENGTH = "Maximum Field Length Reached for Room Number";
    public static final String ASSET_NUMBER_MAXIMUM_FIELD_LENGTH = "Maximum Field Length Reached for Asset Number";
    public static final String MODEL_NUMBER_MAXIMUM_FIELD_LENGTH = "Maximum Field Length Reached for Model Number";
    public static final String SERIAL_NUMBER_MAXIMUM_FIELD_LENGTH = "Maximum Field Length Reached for Serial Number";
    public static final String DEVICE_CODE_MAXIMUM_FIELD_LENGTH = "Maximum Field Length Reached for Device Code";
    public static final String SYSTEM_NUMBER_MAXIMUM_FIELD_LENGTH = "Maximum Field Length Reached for System Number";
    //Fragments and Selenium objects
    private final WebDriver driver;
    private String[] handles;
    private final ActionBot actionBot;
    private final String browser;
    private final LoadableComponent<?> parent;
    private final LeftMenuCodeTables leftMenuCodeTables;
    private List<Map<String, DbUtils.FieldValue>> insertedRecords = new ArrayList<>();

    public MaintainMachineInformationCodeTablePage(LoadableComponent<?> parent, LeftMenuCodeTables leftMenuCodeTables, WebDriver driver, String browser) {

        this.driver = driver;
        this.browser = browser;
        this.parent = parent;
        this.leftMenuCodeTables = leftMenuCodeTables;
        actionBot = new ActionBot(driver);


        PageFactory.initElements(driver, this);

    }

    @Override
    protected void load() {
        parent.get();
        actionBot.waitForLoadingUsingXpath(HomePageAdmin.XPATH_FOR_HOME_PAGE_FORM, Constants.SHORT_TIMEOUT);
        leftMenuCodeTables.openMenu();
        leftMenuCodeTables.showMaintainMachineInformationForm();
    }

    @Override
    protected void isLoaded() throws Error {

        try {
            driver.findElement(By.xpath(ID_FOR_RESULT_TABLE));
            assert true;
        } catch (NoSuchElementException e) {
            load();
        }
    }

    public void submitForm(SUBMIT_BUTTONS button) {

        if (SUBMIT_BUTTONS.ADD.equals(button)) {
            actionBot.click(driver.findElement(By.xpath(XPATH_FOR_ADD_BUTTON)));
        } else if (SUBMIT_BUTTONS.UPDATE.equals(button)) {
            actionBot.click(driver.findElement(By.xpath(XPATH_FOR_UPDATE_BUTTON)));
        }
    }

    public void cancelForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_CANCEL_BUTTON)));
    }

    public void selectRecord(String... searchParameters) {
        TableUtils.selectRecord(searchParameters, ID_FOR_RESULT_TABLE, "//div[@id='" + ID_FOR_RESULT_TABLE + "']//tbody/tr", ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
    }

    public void selectRecord() {
        TableUtils.selectRecord(ID_FOR_RESULT_TABLE, "//div[@id='" + ID_FOR_RESULT_TABLE + "']//tbody/tr", ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
    }

    public void addRecord(String modalityCd, String facilityName, String machineId, String description, String department, String roomNumber, String assetNumber, String modelNumber, String serialNumber, String deviceCode, String systemNumber, String effectiveDate) {

        actionBot.selectByDisplayedText(driver.findElement(By.xpath(XPATH_FOR_MODALITY_TYPE_CD_FIELD)), modalityCd);
        actionBot.selectByDisplayedText(driver.findElement(By.xpath(XPATH_FOR_FACILITY_NAME_FIELD)), facilityName);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_MACHINE_ID_FIELD)), machineId);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_DESCRIPTION_FIELD)), description);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_DEPARTMENT_FIELD)), department);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_ROOM_NUMBER_FIELD)), roomNumber);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_ASSET_NUMBER_FIELD)), assetNumber);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_MODEL_NUMBER_FIELD)), modelNumber);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_SERIAL_NUMBER_FIELD)), serialNumber);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_DEVICE_CODE_FIELD)), deviceCode);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_SYSTEM_NUMBER_FIELD)), systemNumber);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_EFFECTIVE_DATE_FIELD)), effectiveDate);


        Map<String, FieldValue> data = new HashMap<>();
        data.put(DB_MODALITY_CD_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, actionBot.findValueForDisplayedText(driver.findElement(By.xpath(XPATH_FOR_MODALITY_TYPE_CD_FIELD)), modalityCd)));
        data.put(DB_FACILITY_ID_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.NUMBER, actionBot.findValueForDisplayedText(driver.findElement(By.xpath(XPATH_FOR_FACILITY_NAME_FIELD)), facilityName)));
        data.put(DB_MACHINE_ID_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, machineId));
        data.put(DB_DESCRIPTION_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, description));
        data.put(DB_DEPARTMENT_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, department));
        data.put(DB_ROOM_NUMBER_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, roomNumber));
        data.put(DB_ASSET_NUMBER_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, assetNumber));
        data.put(DB_MODEL_NUMBER_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, modelNumber));
        data.put(DB_SERIAL_NUMBER_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, serialNumber));
        data.put(DB_DEVICE_CODE_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, deviceCode));
        data.put(DB_SYSTEM_NUMBER_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, systemNumber));
        data.put(DB_EFFECTIVE_DT_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.DATE, effectiveDate));

        insertedRecords.add(data);
    }

    public void addRecord(String modalityCd, String facilityName, String machineId, String description, String department, String roomNumber, String assetNumber, String modelNumber, String serialNumber, String deviceCode, String systemNumber, String effectiveDate, String expiryDate) {
        addRecord(modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber, modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_EXPIRY_DATE_FIELD)), expiryDate);

    }

    public void updateRecord(String modalityCd, String facilityName, String machineId, String description, String department, String roomNumber, String assetNumber, String modelNumber, String serialNumber, String deviceCode, String systemNumber, String effectiveDate) {
        addRecord(modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber, modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate);
    }

    public void updateRecord(String modalityCd, String facilityName, String machineId, String description, String department, String roomNumber, String assetNumber, String modelNumber, String serialNumber, String deviceCode, String systemNumber, String effectiveDate, String expiryDate) {
        updateRecord(modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber, modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_EXPIRY_DATE_FIELD)), expiryDate);
    }

    public boolean doesRecordExist(String... searchParameters) {
        return TableUtils.doesRecordExist(searchParameters, ID_FOR_RESULT_TABLE, "//div[@id='" + ID_FOR_RESULT_TABLE + "']//tbody/tr", ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
    }

    public void assertPageLoaded() {
        try {

            driver.findElement(By.id(ID_FOR_RESULT_TABLE));
            assert driver.getCurrentUrl().endsWith("MaintainEquipment.xhtml") : "URL in address bar is not pointin to MaintainEquipment.xhtml page";
        } catch (NoSuchElementException nse) {
            assert false : "Maintain Health Authority (CodeTables) is not being loaded";
        }
    }

    public void assertNoGlobalValidationErrors() {
        try {
            driver.findElement(By.xpath(ValidationUtils.XPATH_FOR_GLOBAL_VALIDATION_MSG));
            assert false : "No error message expected to be displayed";
        } catch (NoSuchElementException nse) {
            assert true;
        }
    }

    public void assertFieldsAreReset() {
        assert actionBot.valueForCurrentSelection(driver.findElement(By.xpath(XPATH_FOR_MODALITY_TYPE_CD_FIELD))).isEmpty() : "Modality Type Code field must be empty after pressing cancel button";
        assert actionBot.valueForCurrentSelection(driver.findElement(By.xpath(XPATH_FOR_FACILITY_NAME_FIELD))).isEmpty() : "Facility Name field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_MACHINE_ID_FIELD)).getAttribute("value").isEmpty() : "Machine Id field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_DESCRIPTION_FIELD)).getAttribute("value").isEmpty() : "Description field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_DEPARTMENT_FIELD)).getAttribute("value").isEmpty() : "Department field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_ROOM_NUMBER_FIELD)).getAttribute("value").isEmpty() : "Room Number field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_ASSET_NUMBER_FIELD)).getAttribute("value").isEmpty() : "Asset Number field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_MODEL_NUMBER_FIELD)).getAttribute("value").isEmpty() : "Model Number field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_SERIAL_NUMBER_FIELD)).getAttribute("value").isEmpty() : "Serial Number field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_DEVICE_CODE_FIELD)).getAttribute("value").isEmpty() : "Device Code field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_SYSTEM_NUMBER_FIELD)).getAttribute("value").isEmpty() : "System Number field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_EFFECTIVE_DATE_FIELD)).getAttribute("value").isEmpty() : "Effective Date field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_EXPIRY_DATE_FIELD)).getAttribute("value").isEmpty() : "Expiry Date field must be empty after pressing cancel button";

    }

    public void assertRecordExist(String modalityCd, String facilityName, String machineId, String description, String department, String roomNumber, String assetNumber, String modelNumber, String serialNumber, String deviceCode, String systemNumber, String effectiveDate) {
        assert doesRecordExist(modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber, modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate) : String.format("Entry with the values '%s', '%s', '%s' and '%s' does not exist", modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber, modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate);
    }

    public void assertRecordDoesNotExist(String modalityCd, String facilityName, String machineId, String description, String department, String roomNumber, String assetNumber, String modelNumber, String serialNumber, String deviceCode, String systemNumber, String effectiveDate) {
        assert !doesRecordExist(modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber, modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate) : String.format("Entry with the values '%s', '%s', '%s' and '%s' does not exist", modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber, modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate);
    }

    public void assertRecordExist(String modalityCd, String facilityName, String machineId, String description, String department, String roomNumber, String assetNumber, String modelNumber, String serialNumber, String deviceCode, String systemNumber, String effectiveDate, String expiryDate) {
        assert doesRecordExist(modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber, modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate, expiryDate) : String.format("Entry with the values '%s', '%s', '%s', '%s' and '%s' does not exist", modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber, modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate, expiryDate);
    }

    public void assertEntryUpdatedSuccessfully(String modalityCd, String facilityName, String machineId, String description, String department, String roomNumber, String assetNumber, String modelNumber, String serialNumber, String deviceCode, String systemNumber, String effectiveDate, String expiryDate) {
        assertRecordExist(modalityCd, facilityName, machineId, description, department, roomNumber, assetNumber, modelNumber, serialNumber, deviceCode, systemNumber, effectiveDate, expiryDate);
    }

    public void assertAddSuccessfulMessageDisplayed() {
        ValidationUtils.assertMessageIsDisplayed(ValidationUtils.XPATH_SUCCESSFUL_MSG, ValidationUtils.ADD_SUCCESSFUL, driver);
    }

    public void assertUpdateSuccessfulMessageDisplayed() {

        try {
            driver.findElement(By.xpath(ValidationUtils.XPATH_FOR_GLOBAL_VALIDATION_MSG));
            assert false : "No error message expected to be displayed";
        } catch (NoSuchElementException nse) {
            assert true;
        }
    }

    public void assertValidationErrorDisplayed(String message) {


        switch (message) {
            case MODALITY_TYPE_CODE_FIELD_REQUIRED:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_MODALITY_TYPE_CODE_FIELD_VALIDATION_MSG, MODALITY_TYPE_CODE_FIELD_REQUIRED, driver);
                break;
            case FACILITY_NAME_FIELD_REQUIRED:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_FACILITY_NAME_FIELD_VALIDATION_MSG, FACILITY_NAME_FIELD_REQUIRED, driver);
                break;
            case MACHINE_ID_FIELD_REQUIRED:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_MACHINE_ID_FIELD_VALIDATION_MSG, MACHINE_ID_FIELD_REQUIRED, driver);
                break;
            case DESCRIPTION_FIELD_REQUIRED:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_DESCRIPTION_FIELD_VALIDATION_MSG, DESCRIPTION_FIELD_REQUIRED, driver);
                break;
            case ValidationUtils.EFFECTIVE_DATE_REQUIRED:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_EFFECTIVE_DATE_VALIDATION_MSG, ValidationUtils.EFFECTIVE_DATE_REQUIRED, driver);
                break;
            case ValidationUtils.EFFECTIVE_DATE_INVALID:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_EFFECTIVE_DATE_VALIDATION_MSG, ValidationUtils.EFFECTIVE_DATE_INVALID, driver);
                break;
            case ValidationUtils.EXPIRY_DATE_INVALID:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_EXPIRY_DATE_VALIDATION_MSG, ValidationUtils.EXPIRY_DATE_INVALID, driver);
                break;
            case ValidationUtils.EXPIRY_MUST_BE_GREATER_THAN_EFFECTIVE_DATE:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_EXPIRY_DATE_VALIDATION_MSG, ValidationUtils.EXPIRY_MUST_BE_GREATER_THAN_EFFECTIVE_DATE, driver);
                break;
            case MACHINE_ID_MAXIMUM_FIELD_LENGTH:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_MACHINE_ID_FIELD_LENGTH_VALIDATION, ValidationUtils.MAXIMUM_FIELD_LENGTH_REACHED, driver);
                break;
            case DESCRIPTION_MAXIMUM_FIELD_LENGTH:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_DESCRIPTION_FIELD_LENGTH_VALIDATION, ValidationUtils.MAXIMUM_FIELD_LENGTH_REACHED, driver);
                break;
            case DEPARTMENT_MAXIMUM_FIELD_LENGTH:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_DEPARTMENT_FIELD_LENGTH_VALIDATION, ValidationUtils.MAXIMUM_FIELD_LENGTH_REACHED, driver);
                break;
            case ROOM_NUMBER_MAXIMUM_FIELD_LENGTH:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_ROOM_NUMBER_FIELD_LENGTH_VALIDATION, ValidationUtils.MAXIMUM_FIELD_LENGTH_REACHED, driver);
                break;
            case ASSET_NUMBER_MAXIMUM_FIELD_LENGTH:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_ASSET_NUMBER_FIELD_LENGTH_VALIDATION, ValidationUtils.MAXIMUM_FIELD_LENGTH_REACHED, driver);
                break;
            case MODEL_NUMBER_MAXIMUM_FIELD_LENGTH:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_MODEL_NUMBER_FIELD_LENGTH_VALIDATION, ValidationUtils.MAXIMUM_FIELD_LENGTH_REACHED, driver);
                break;
            case SERIAL_NUMBER_MAXIMUM_FIELD_LENGTH:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_SERIAL_NUMBER_FIELD_LENGTH_VALIDATION, ValidationUtils.MAXIMUM_FIELD_LENGTH_REACHED, driver);
                break;
            case DEVICE_CODE_MAXIMUM_FIELD_LENGTH:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_DEVICE_CODE_FIELD_LENGTH_VALIDATION, ValidationUtils.MAXIMUM_FIELD_LENGTH_REACHED, driver);
                break;
            case SYSTEM_NUMBER_MAXIMUM_FIELD_LENGTH:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_SYSTEM_NUMBER_FIELD_LENGTH_VALIDATION, ValidationUtils.MAXIMUM_FIELD_LENGTH_REACHED, driver);
                break;

        }

    }

    public void assertNoMaximumLengthValidationErrorDisplayed() {

        try {

            driver.findElement(By.xpath(XPATH_FOR_MACHINE_ID_FIELD_LENGTH_VALIDATION));
            assert false : ValidationUtils.MAXIMUM_FIELD_LENGTH_VALIDATION_MSG_NOT_EXPECTED;
        } catch (NoSuchElementException nse) {
            assert true;
        }

        try {

            driver.findElement(By.xpath(XPATH_FOR_DESCRIPTION_FIELD_LENGTH_VALIDATION));
            assert false : ValidationUtils.MAXIMUM_FIELD_LENGTH_VALIDATION_MSG_NOT_EXPECTED;
        } catch (NoSuchElementException nse) {
            assert true;
        }

        try {

            driver.findElement(By.xpath(XPATH_FOR_DEPARTMENT_FIELD_LENGTH_VALIDATION));
            assert false : ValidationUtils.MAXIMUM_FIELD_LENGTH_VALIDATION_MSG_NOT_EXPECTED;
        } catch (NoSuchElementException nse) {
            assert true;
        }

        try {

            driver.findElement(By.xpath(XPATH_FOR_ROOM_NUMBER_FIELD_LENGTH_VALIDATION));
            assert false : ValidationUtils.MAXIMUM_FIELD_LENGTH_VALIDATION_MSG_NOT_EXPECTED;
        } catch (NoSuchElementException nse) {
            assert true;
        }


        try {

            driver.findElement(By.xpath(XPATH_FOR_ASSET_NUMBER_FIELD_LENGTH_VALIDATION));
            assert false : ValidationUtils.MAXIMUM_FIELD_LENGTH_VALIDATION_MSG_NOT_EXPECTED;
        } catch (NoSuchElementException nse) {
            assert true;
        }


        try {

            driver.findElement(By.xpath(XPATH_FOR_MODEL_NUMBER_FIELD_LENGTH_VALIDATION));
            assert false : ValidationUtils.MAXIMUM_FIELD_LENGTH_VALIDATION_MSG_NOT_EXPECTED;
        } catch (NoSuchElementException nse) {
            assert true;
        }


        try {

            driver.findElement(By.xpath(XPATH_FOR_SERIAL_NUMBER_FIELD_LENGTH_VALIDATION));
            assert false : ValidationUtils.MAXIMUM_FIELD_LENGTH_VALIDATION_MSG_NOT_EXPECTED;
        } catch (NoSuchElementException nse) {
            assert true;
        }


        try {

            driver.findElement(By.xpath(XPATH_FOR_DEVICE_CODE_FIELD_LENGTH_VALIDATION));
            assert false : ValidationUtils.MAXIMUM_FIELD_LENGTH_VALIDATION_MSG_NOT_EXPECTED;
        } catch (NoSuchElementException nse) {
            assert true;
        }

        try {

            driver.findElement(By.xpath(XPATH_FOR_SYSTEM_NUMBER_FIELD_LENGTH_VALIDATION));
            assert false : ValidationUtils.MAXIMUM_FIELD_LENGTH_VALIDATION_MSG_NOT_EXPECTED;
        } catch (NoSuchElementException nse) {
            assert true;
        }

    }

    public void assertTableSortingWorks() {

        // Sorting for Modality Type Code Column
        Comparator dateComparator = new ConvertStringToDateComparator("dd-MMM-yyyy");
        int columPosition = 1;
        String xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        String columnName = "Modality Type Code";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);

        // Sorting for Facility Name Column
        columPosition = 2;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Facility Name";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);


        // Sorting for Machine Id Column
        columPosition = 3;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Machine Id";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);

        // Sorting for Description Column
        columPosition = 4;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Description";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);

        // Sorting for Department Column
        columPosition = 5;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Department";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);

        // Sorting for Room Number Column
        columPosition = 6;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Room Number";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);

        // Sorting for Asset Number Column
        columPosition = 7;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Asset Number";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);

        // Sorting for Model Number Column
        columPosition = 8;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Model Number";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);

        // Sorting for Serial Number Column
        columPosition = 9;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Serial Number";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);

        // Sorting for Device Code Column
        columPosition = 9;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Device Code";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);


        // Sorting for System Number Column
        columPosition = 11;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "System Number";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);

        // Sorting for effective date Column
        columPosition = 12;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Effective Date";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, dateComparator, driver, actionBot);

        // Sorting for Expiry date Column
        columPosition = 13;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Expiry Date";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, dateComparator, driver, actionBot);

    }

    public void assertTablePaginationWorks() {
        int pages = TableUtils.noOfPagesInDataScroller(ID_FOR_BOTTOM_PAGINATOR, driver);

        if (pages > 1) {
            TableUtils.testTablePagination(ID_FOR_RESULT_TABLE, ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
        }
    }

    public void assertRecordSelectionWorks() {
        String[] xpathForFields = {XPATH_FOR_MODALITY_TYPE_CD_FIELD, XPATH_FOR_FACILITY_NAME_FIELD, XPATH_FOR_MACHINE_ID_FIELD, XPATH_FOR_DESCRIPTION_FIELD, XPATH_FOR_DEPARTMENT_FIELD, XPATH_FOR_ROOM_NUMBER_FIELD, XPATH_FOR_ASSET_NUMBER_FIELD, XPATH_FOR_MODEL_NUMBER_FIELD, XPATH_FOR_SERIAL_NUMBER_FIELD, XPATH_FOR_DEVICE_CODE_FIELD, XPATH_FOR_SYSTEM_NUMBER_FIELD, XPATH_FOR_EFFECTIVE_DATE_FIELD, XPATH_FOR_EXPIRY_DATE_FIELD};
        //   TableUtils.testRecordSelectionWorks(ID_FOR_RESULT_TABLE, XPATH_FOR_TABLE_ROWS, xpathForFields, ID_FOR_BOTTOM_PAGINATOR, XPATH_FOR_UPDATE_BUTTON, XPATH_FOR_ADD_BUTTON, XPATH_FOR_CANCEL_BUTTON, driver, actionBot);

        int pages = 3; // process maximum of 3 pages

        if (pages > 1) {
            //Ensure we start from the first page in table
            TableUtils.goToFirstPageInTableUsingFirstButton(ID_FOR_RESULT_TABLE, ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
        }

        for (int i = 1; i <= pages; i++) {
            int rowsOnPage = driver.findElements(By.xpath(XPATH_FOR_TABLE_ROWS)).size();
            for (int j = 1; j <= rowsOnPage; j++) {
                actionBot.click(By.xpath(XPATH_FOR_TABLE_ROWS + "[" + j + "]/td[last()]/button"));
                actionBot.waitForLoadingUsingXpath(XPATH_FOR_UPDATE_BUTTON, Constants.MEDIUM_TIMEOUT);

                List<WebElement> elems = driver.findElements(By.xpath(XPATH_FOR_TABLE_ROWS + "[" + j + "]/td"));
                int size = elems.size() - 1;  // avoid the last column, which holds the select button

                for (int x = 0; x < size; x++) {

                    if (x == 0) { 
                        // Since we are looking at Modality Type Code Column, we need to check against the code displayed in column against
                        // the value for the current selection in the Modality Type Code dropdown
                        assertEquals(elems.get(x).getText(), actionBot.valueForCurrentSelection(driver.findElement(By.xpath(XPATH_FOR_MODALITY_TYPE_CD_FIELD))));
                    } else if (x == 1) { 
                        // Since we are looking at facility Code Column, we need to check the facility name displayed in column against
                        // the text for the current selection in the Facility name dropdown
                        assertEquals(elems.get(x).getText(), actionBot.textForCurrentSelection(driver.findElement(By.xpath(XPATH_FOR_FACILITY_NAME_FIELD))));
                    } else {
                        assertEquals(elems.get(x).getText(), driver.findElement(By.xpath(xpathForFields[x])).getAttribute("value"));
                    }

                }

                actionBot.click(By.xpath(XPATH_FOR_CANCEL_BUTTON));
                actionBot.waitForLoadingUsingXpath(XPATH_FOR_ADD_BUTTON, Constants.MEDIUM_TIMEOUT);
            }

            if (pages > 1 && TableUtils.morePagesAvailable(ID_FOR_BOTTOM_PAGINATOR, driver)) {
                // goToNextPageInTableUsingNextButton(tableId, paginatorId, driver, actionBot);
                TableUtils.nextPage(ID_FOR_RESULT_TABLE, ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
            }
        }
    }

    public void cleanup() {
        DbUtils.executeStatement(DB_TABLE_NAME, "DELETE", insertedRecords);
    }
}
