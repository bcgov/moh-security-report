package mid.selenium.pageobjects.admin;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import mid.selenium.functional.util.ConvertStringToDateComparator;
import mid.selenium.functional.util.DbUtils;
import mid.selenium.functional.util.DbUtils.FieldValue;
import mid.selenium.functional.util.TableUtils;
import mid.selenium.functional.util.ValidationUtils;
import mid.selenium.pageobjects.fragment.LeftMenuCodeTables;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.LoadableComponent;
import selenium.util.ActionBot;
import selenium.util.Constants;

import static org.junit.Assert.*;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class MaintainProcedureCodeTablePage extends LoadableComponent<MaintainProcedureCodeTablePage> {

    public enum SUBMIT_BUTTONS {

        ADD, UPDATE
    }
    // DB Column names for the associated table
    public static final String DB_TABLE_NAME = "MIRD_PROCEDURE";
    public static final String DB_MODALITY_CD_COLUMN = "MODALITY_TYPE_CD";
    public static final String DB_IMAGING_REGION_COLUMN = "IMAGING_REGION_CD";
    public static final String DB_PROV_RIP_CODE_COLUMN = "PROV_PROCEDURE_RPID_CD";
    public static final String DB_RPID_DESCRIPTION_COLUMN = "PROV_PROCEDURE_RPID_DESC";
    public static final String DB_SNOMED_CD_COLUMN = "SNOMED_CD";
    public static final String DB_SNOMED_DESC_COLUMN = "SNOMED_DESC";
    public static final String DB_EFFECTIVE_DT_COLUMN = "EFFECTIVE_DT";
    public static final String DB_EXPIRY_DT_COLUMN = "EXPIRY_DT";
    // Form fields
    public static final String XPATH_FOR_HOME_PAGE_FORM = "//form[@id='form1' and contains(@action, 'MaintainProcedure.xhtml')]";
    public static final String XPATH_FOR_MODALITY_TYPE_CD_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//select)[1]";
    public static final String XPATH_FOR_IMAGING_REGION_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//select)[2]";
    public static final String XPATH_FOR_RPID_CODE_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[1]";
    public static final String XPATH_FOR_RPID_DESCRIPTION_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[2]";
    public static final String XPATH_FOR_SNOMED_CD_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[3]";
    public static final String XPATH_FOR_SNOMED_DESCRIPTION_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[4]"; 
    public static final String XPATH_FOR_EFFECTIVE_DATE_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input[contains(@class, 'hasDatepicker')])[1]";
    public static final String XPATH_FOR_EFFECTIVE_DATE_CALENDAR_BUTTON = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input[contains(@class, 'hasDatepicker')])[1]/../button";
    public static final String XPATH_FOR_EXPIRY_DATE_FIELD = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input[contains(@class, 'hasDatepicker')])[2]";
    public static final String XPATH_FOR_EXPIRY_DATE_CALENDAR_BUTTON = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input[contains(@class, 'hasDatepicker')])[2]/../button";
    public static final String XPATH_FOR_SELECTED_RADLEX = "//ul[contains(@class, 'ui-picklist-target')]";
    public static final String XPATH_FOR_MODALITY_FILTER = "(//div[@id='\" + ID_FOR_RESULT_TABLE + \"']//th)[1]/select";
    
    //Buttons
    public static final String XPATH_FOR_ADD_BUTTON = "//button/span[text()='Add']/..";
    public static final String XPATH_FOR_UPDATE_BUTTON = "//button/span[text()='Update']/..";
    public static final String XPATH_FOR_CANCEL_BUTTON = "//button/span[text()='Cancel']/..";
    //table
    public static final String ID_FOR_RESULT_TABLE = "form1:listTable";
    public static final String XPATH_FOR_TABLE_ROWS = "//div[@id='" + ID_FOR_RESULT_TABLE + "']//tbody/tr";
    public static final String ID_FOR_BOTTOM_PAGINATOR = ID_FOR_RESULT_TABLE + "_paginator_bottom";
    //Form field additional elements
    public static final String XPATH_FOR_RPID_CODE_FIELD_LENGTH_VALIDATION = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[1]/../span[@class='lengthWarn']";
    public static final String XPATH_FOR_RPID_DESCRIPTION_FIELD_LENGTH_VALIDATION = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[2]/../span[@class='lengthWarn']";
    public static final String XPATH_FOR_SNOMED_CD_FIELD_LENGTH_VALIDATION = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[3]/../span[@class='lengthWarn']";
    public static final String XPATH_FOR_SNOMED_DESCRIPTION_FIELD_LENGTH_VALIDATION = "(//div[@id='form1:entry']/div[@id='form1:entry_content']//tbody//input)[4]/../span[@class='lengthWarn']";
    //xpath for finding validation messages
    public static final String XPATH_FOR_MODALITY_TYPE_CODE_FIELD_VALIDATION_MSG = "//div[@id='content']//span[@class='ui-messages-error-summary' and contains(text(), 'Modality')]";
    public static final String XPATH_FOR_IMAGING_REGION_FIELD_VALIDATION_MSG = "//div[@id='content']//span[@class='ui-messages-error-summary' and contains(text(), 'Anatomical Imaging Region')]";
    public static final String XPATH_FOR_RPID_CODE_FIELD_VALIDATION_MSG = "//div[@id='content']//span[@class='ui-messages-error-summary' and contains(text(), 'Procedure RPID Code')]";
    public static final String XPATH_FOR_RPID_DESCRIPTION_FIELD_VALIDATION_MSG = "//div[@id='content']//span[@class='ui-messages-error-summary' and contains(text(), 'Procedure RPID Description')]";
    public static final String XPATH_FOR_EFFECTIVE_DATE_VALIDATION_MSG = "//div[@id='content']//span[@class='ui-messages-error-summary' and contains(text(), 'Effective')]";
    public static final String XPATH_FOR_EXPIRY_DATE_VALIDATION_MSG = "//div[@id='content']//span[@class='ui-messages-error-summary' and contains(text(), 'Expiry')]";
    //Messages
    public static final String MODALITY_TYPE_CODE_FIELD_REQUIRED = "Modality is required";
    public static final String IMAGING_REGION_FIELD_REQUIRED = "Anatomical Imaging Region is required";
    public static final String RPID_CODE_FIELD_REQUIRED = "Procedure RPID Code is required";
    public static final String RPID_DESCRIPTION_FIELD_REQUIRED = "Procedure RPID Description is required";
    public static final String RPID_CODE_MAXIMUM_FIELD_LENGTH = "Maximum Field Length Reached for Procedure RPID Code";
    public static final String RPID_DESCRIPTION_MAXIMUM_FIELD_LENGTH = "Maximum Field Length Reached for Procedure RPID Description";
    public static final String SNOMED_CD_MAXIMUM_FIELD_LENGTH = "Maximum Field Length Reached for SNOMED CD";
    public static final String SNOMED_DESCRIPTION_MAXIMUM_FIELD_LENGTH = "Maximum Field Length Reached for SNOMED Description";

    //Fragments and Selenium objects
    private final WebDriver driver;
    private String[] handles;
    private final ActionBot actionBot;
    private final String browser;
    private final LoadableComponent<?> parent;
    private final LeftMenuCodeTables leftMenuCodeTables;
    private List<Map<String, DbUtils.FieldValue>> insertedRecords = new ArrayList<>();

    public MaintainProcedureCodeTablePage(LoadableComponent<?> parent, LeftMenuCodeTables leftMenuCodeTables, WebDriver driver, String browser) {

        this.driver = driver;
        this.browser = browser;
        this.parent = parent;
        this.leftMenuCodeTables = leftMenuCodeTables;
        actionBot = new ActionBot(driver);


        PageFactory.initElements(driver, this);

    }

    @Override
    protected void load() {
        parent.get();
        actionBot.waitForLoadingUsingXpath(HomePageAdmin.XPATH_FOR_HOME_PAGE_FORM, Constants.SHORT_TIMEOUT);
        leftMenuCodeTables.openMenu();
        leftMenuCodeTables.showMaintainProcedureForm();
    }

    @Override
    protected void isLoaded() throws Error {

        try {
            driver.findElement(By.xpath(ID_FOR_RESULT_TABLE));
            assert true;
        } catch (NoSuchElementException e) {
            load();
        }
    }

    public void submitForm(SUBMIT_BUTTONS button) {

        if (SUBMIT_BUTTONS.ADD.equals(button)) {
            actionBot.click(driver.findElement(By.xpath(XPATH_FOR_ADD_BUTTON)));
        } else if (SUBMIT_BUTTONS.UPDATE.equals(button)) {
            actionBot.click(driver.findElement(By.xpath(XPATH_FOR_UPDATE_BUTTON)));
        }                
    }

    public void cancelForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_CANCEL_BUTTON)));
    }

    public void selectRecord(String... searchParameters) {
        TableUtils.selectRecord(searchParameters, ID_FOR_RESULT_TABLE, "//div[@id='" + ID_FOR_RESULT_TABLE + "']//tbody/tr", ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
    }

    public void selectRecord() {
        TableUtils.selectRecord(ID_FOR_RESULT_TABLE, "//div[@id='" + ID_FOR_RESULT_TABLE + "']//tbody/tr", ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
    }

    public void addRecord(String modalityCd, String imagingRegion, String rPidCd, String rPidDescription, String snomedCd, String snomedDescription, String effectiveDate) {

        actionBot.selectByDisplayedText(driver.findElement(By.xpath(XPATH_FOR_MODALITY_TYPE_CD_FIELD)), modalityCd);
        actionBot.selectByDisplayedText(driver.findElement(By.xpath(XPATH_FOR_IMAGING_REGION_FIELD)), imagingRegion);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_RPID_CODE_FIELD)), rPidCd);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_RPID_DESCRIPTION_FIELD)), rPidDescription);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_SNOMED_CD_FIELD)), snomedCd);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_SNOMED_DESCRIPTION_FIELD)), snomedDescription);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_EFFECTIVE_DATE_FIELD)), effectiveDate);


        Map<String, FieldValue> data = new HashMap<>();
        data.put(DB_MODALITY_CD_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, actionBot.findValueForDisplayedText(driver.findElement(By.xpath(XPATH_FOR_MODALITY_TYPE_CD_FIELD)), modalityCd)));
        data.put(DB_IMAGING_REGION_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, actionBot.findValueForDisplayedText(driver.findElement(By.xpath(XPATH_FOR_IMAGING_REGION_FIELD)), imagingRegion)));
        data.put(DB_PROV_RIP_CODE_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, rPidCd));
        data.put(DB_RPID_DESCRIPTION_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, rPidDescription));
        data.put(DB_SNOMED_CD_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, snomedCd));
        data.put(DB_SNOMED_DESC_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.STRING, snomedDescription));
        data.put(DB_EFFECTIVE_DT_COLUMN, new DbUtils.FieldValue(DbUtils.TYPE.DATE, effectiveDate));

        insertedRecords.add(data);
    }

    public void addRecord(String modalityCd, String imagingRegion, String rPidCd, String rPidDescription, String snomedCd, String snomedDescription, String effectiveDate, String expiryDate) {
        addRecord(modalityCd, imagingRegion, rPidCd, rPidDescription, snomedCd, snomedDescription, effectiveDate);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_EXPIRY_DATE_FIELD)), expiryDate);

    }

    public void updateRecord(String modalityCd, String imagingRegion, String rPidCd, String rPidDescription, String snomedCd, String snomedDescription, String effectiveDate) {
        addRecord(modalityCd, imagingRegion, rPidCd, rPidDescription, snomedCd, snomedDescription, effectiveDate);
    }

    public void updateRecord(String modalityCd, String imagingRegion, String rPidCd, String rPidDescription, String snomedCd, String snomedDescription, String effectiveDate, String expiryDate) {
        updateRecord(modalityCd, imagingRegion, rPidCd, rPidDescription, snomedCd, snomedDescription, effectiveDate);
        actionBot.type(driver.findElement(By.xpath(XPATH_FOR_EXPIRY_DATE_FIELD)), expiryDate);
    }

    public boolean doesRecordExist(String... searchParameters) {
        return TableUtils.doesRecordExist(searchParameters, ID_FOR_RESULT_TABLE, "//div[@id='" + ID_FOR_RESULT_TABLE + "']//tbody/tr", ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
    }

    public void assertPageLoaded() {
        try {

            driver.findElement(By.id(ID_FOR_RESULT_TABLE));
            assert driver.getCurrentUrl().endsWith("MaintainProcedure.xhtml") : "URL in address bar is not pointin to MaintainProcedure.xhtml page";
        } catch (NoSuchElementException nse) {
            assert false : "Maintain Health Authority (CodeTables) is not being loaded";
        }
    }

    public void assertNoGlobalValidationErrors() {
        try {
            driver.findElement(By.xpath(ValidationUtils.XPATH_FOR_GLOBAL_VALIDATION_MSG));
            assert false : "No error message expected to be displayed";
        } catch (NoSuchElementException nse) {
            assert true;
        }
    }

    public void assertFieldsAreReset() {
        assert actionBot.valueForCurrentSelection(driver.findElement(By.xpath(XPATH_FOR_MODALITY_TYPE_CD_FIELD))).isEmpty() : "Modality Type Code field must be empty after pressing cancel button";
        assert actionBot.valueForCurrentSelection(driver.findElement(By.xpath(XPATH_FOR_IMAGING_REGION_FIELD))).isEmpty() : "Anatomical Imaging Region field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_RPID_CODE_FIELD)).getAttribute("value").isEmpty() : "Procedure RPID Code field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_RPID_DESCRIPTION_FIELD)).getAttribute("value").isEmpty() : "Procedure RPID Description field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_SNOMED_CD_FIELD)).getAttribute("value").isEmpty() : "Snomed CD field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_SNOMED_DESCRIPTION_FIELD)).getAttribute("value").isEmpty() : "Snomed Description field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_EFFECTIVE_DATE_FIELD)).getAttribute("value").isEmpty() : "Effective Date field must be empty after pressing cancel button";
        assert driver.findElement(By.xpath(XPATH_FOR_EXPIRY_DATE_FIELD)).getAttribute("value").isEmpty() : "Expiry Date field must be empty after pressing cancel button";
        
        WebElement elem = driver.findElement(By.xpath(XPATH_FOR_SELECTED_RADLEX));
        
        try {
            elem.findElements(By.xpath(XPATH_FOR_SELECTED_RADLEX + "/li"));
            assert false: "RID Selected values should be empty";
        } catch (NoSuchElementException nse) {
            assert true;
        }
                
    }

    public void assertRecordExist(String modalityCd, String imagingRegion, String rPidCd, String rPidDescription, String snomedCd, String snomedDescription, String effectiveDate) {
        assert doesRecordExist(modalityCd, imagingRegion, rPidCd, rPidDescription, snomedCd, snomedDescription, effectiveDate) : String.format("Entry with the values '%s', '%s', '%s' and '%s' does not exist", modalityCd, imagingRegion, rPidCd, rPidDescription, snomedCd, snomedDescription, effectiveDate);
    }

    public void assertRecordDoesNotExist(String modalityCd, String imagingRegion, String rPidCd, String rPidDescription, String snomedCd, String snomedDescription, String effectiveDate) {
        assert !doesRecordExist(modalityCd, imagingRegion, rPidCd, rPidDescription, snomedCd, snomedDescription, effectiveDate) : String.format("Entry with the values '%s', '%s', '%s' and '%s' does not exist", modalityCd, imagingRegion, rPidCd, rPidDescription, snomedCd, snomedDescription, effectiveDate);
    }

    public void assertRecordExist(String modalityCd, String imagingRegion, String rPidCd, String rPidDescription, String snomedCd, String snomedDescription, String effectiveDate, String expiryDate) {
        assert doesRecordExist(modalityCd, imagingRegion, rPidCd, rPidDescription, snomedCd, snomedDescription, effectiveDate, expiryDate) : String.format("Entry with the values '%s', '%s', '%s', '%s' and '%s' does not exist", modalityCd, imagingRegion, rPidCd, rPidDescription, snomedCd, snomedDescription, effectiveDate, expiryDate);
    }

    public void assertEntryUpdatedSuccessfully(String modalityCd, String imagingRegion, String rPidCd, String rPidDescription, String snomedCd, String snomedDescription, String effectiveDate, String expiryDate) {
        assertRecordExist(modalityCd, imagingRegion, rPidCd, rPidDescription, snomedCd, snomedDescription, effectiveDate, expiryDate);
    }

    public void assertAddSuccessfulMessageDisplayed() {
        ValidationUtils.assertMessageIsDisplayed(ValidationUtils.XPATH_SUCCESSFUL_MSG, ValidationUtils.ADD_SUCCESSFUL, driver);
    }

    public void assertUpdateSuccessfulMessageDisplayed() {

        try {
            driver.findElement(By.xpath(ValidationUtils.XPATH_FOR_GLOBAL_VALIDATION_MSG));
            assert false : "No error message expected to be displayed";
        } catch (NoSuchElementException nse) {
            assert true;
        }
    }

    public void assertValidationErrorDisplayed(String message) {


        switch (message) {
            case MODALITY_TYPE_CODE_FIELD_REQUIRED:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_MODALITY_TYPE_CODE_FIELD_VALIDATION_MSG, MODALITY_TYPE_CODE_FIELD_REQUIRED, driver);
                break;
            case IMAGING_REGION_FIELD_REQUIRED:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_IMAGING_REGION_FIELD_VALIDATION_MSG, IMAGING_REGION_FIELD_REQUIRED, driver);
                break;
            case RPID_CODE_FIELD_REQUIRED:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_RPID_CODE_FIELD_VALIDATION_MSG, RPID_CODE_FIELD_REQUIRED, driver);
                break;
            case RPID_DESCRIPTION_FIELD_REQUIRED:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_RPID_DESCRIPTION_FIELD_VALIDATION_MSG, RPID_DESCRIPTION_FIELD_REQUIRED, driver);
                break;
            case ValidationUtils.EFFECTIVE_DATE_REQUIRED:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_EFFECTIVE_DATE_VALIDATION_MSG, ValidationUtils.EFFECTIVE_DATE_REQUIRED, driver);
                break;
            case ValidationUtils.EFFECTIVE_DATE_INVALID:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_EFFECTIVE_DATE_VALIDATION_MSG, ValidationUtils.EFFECTIVE_DATE_INVALID, driver);
                break;
            case ValidationUtils.EXPIRY_DATE_INVALID:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_EXPIRY_DATE_VALIDATION_MSG, ValidationUtils.EXPIRY_DATE_INVALID, driver);
                break;
            case ValidationUtils.EXPIRY_MUST_BE_GREATER_THAN_EFFECTIVE_DATE:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_EXPIRY_DATE_VALIDATION_MSG, ValidationUtils.EXPIRY_MUST_BE_GREATER_THAN_EFFECTIVE_DATE, driver);
                break;
            case RPID_CODE_MAXIMUM_FIELD_LENGTH:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_RPID_CODE_FIELD_LENGTH_VALIDATION, ValidationUtils.MAXIMUM_FIELD_LENGTH_REACHED, driver);
                break;
            case RPID_DESCRIPTION_MAXIMUM_FIELD_LENGTH:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_RPID_DESCRIPTION_FIELD_LENGTH_VALIDATION, ValidationUtils.MAXIMUM_FIELD_LENGTH_REACHED, driver);
                break;
            case SNOMED_CD_MAXIMUM_FIELD_LENGTH:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_SNOMED_CD_FIELD_LENGTH_VALIDATION, ValidationUtils.MAXIMUM_FIELD_LENGTH_REACHED, driver);
                break;
            case SNOMED_DESCRIPTION_MAXIMUM_FIELD_LENGTH:
                ValidationUtils.assertMessageIsDisplayed(XPATH_FOR_SNOMED_DESCRIPTION_FIELD_LENGTH_VALIDATION, ValidationUtils.MAXIMUM_FIELD_LENGTH_REACHED, driver);
                break;

        }

    }

    public void assertNoMaximumLengthValidationErrorDisplayed() {

        try {

            driver.findElement(By.xpath(XPATH_FOR_RPID_CODE_FIELD_LENGTH_VALIDATION));
            assert false : ValidationUtils.MAXIMUM_FIELD_LENGTH_VALIDATION_MSG_NOT_EXPECTED;
        } catch (NoSuchElementException nse) {
            assert true;
        }

        try {

            driver.findElement(By.xpath(XPATH_FOR_RPID_DESCRIPTION_FIELD_LENGTH_VALIDATION));
            assert false : ValidationUtils.MAXIMUM_FIELD_LENGTH_VALIDATION_MSG_NOT_EXPECTED;
        } catch (NoSuchElementException nse) {
            assert true;
        }

        try {

            driver.findElement(By.xpath(XPATH_FOR_SNOMED_CD_FIELD_LENGTH_VALIDATION));
            assert false : ValidationUtils.MAXIMUM_FIELD_LENGTH_VALIDATION_MSG_NOT_EXPECTED;
        } catch (NoSuchElementException nse) {
            assert true;
        }

        try {

            driver.findElement(By.xpath(XPATH_FOR_SNOMED_DESCRIPTION_FIELD_LENGTH_VALIDATION));
            assert false : ValidationUtils.MAXIMUM_FIELD_LENGTH_VALIDATION_MSG_NOT_EXPECTED;
        } catch (NoSuchElementException nse) {
            assert true;
        }
       
    }

    public void assertTableSortingWorks() {

        // Sorting for Modality Column
        Comparator dateComparator = new ConvertStringToDateComparator("dd-MMM-yyyy");
        int columPosition = 1;
        String xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        String columnName = "Modality";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);

        // Sorting for Anatomical Imaging Region Column
        columPosition = 2;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Anatomical Imaging Region";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);


        // Sorting for Procedure RPID Code Column
        columPosition = 3;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Procedure RPID Code";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);

        // Sorting for Procedure RPID Description Column
        columPosition = 4;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Procedure RPID Description";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);

        // Sorting for Snomed CD Column
        columPosition = 5;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Snomed CD";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);

        // Sorting for Snomed Description Column
        columPosition = 6;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Snomed Description";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, null, driver, actionBot);        

        // Sorting for effective date Column
        columPosition = 7;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Effective Date";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, dateComparator, driver, actionBot);

        // Sorting for Expiry date Column
        columPosition = 8;
        xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[" + columPosition + "]";
        columnName = "Expiry Date";
        TableUtils.testColumnSortingWorks(ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, ID_FOR_BOTTOM_PAGINATOR, columnName, columPosition, dateComparator, driver, actionBot);

    }

    public void assertTablePaginationWorks() {
        int pages = TableUtils.noOfPagesInDataScroller(ID_FOR_BOTTOM_PAGINATOR, driver);

        if (pages > 1) {
            TableUtils.testTablePagination(ID_FOR_RESULT_TABLE, ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
        }
    }
    
    public void assertRecordSelectionWorks() {
        String[] xpathForFields = {XPATH_FOR_MODALITY_TYPE_CD_FIELD, XPATH_FOR_IMAGING_REGION_FIELD, XPATH_FOR_RPID_CODE_FIELD, XPATH_FOR_RPID_DESCRIPTION_FIELD, XPATH_FOR_SNOMED_CD_FIELD, XPATH_FOR_SNOMED_DESCRIPTION_FIELD, XPATH_FOR_EFFECTIVE_DATE_FIELD, XPATH_FOR_EXPIRY_DATE_FIELD};
        //   TableUtils.testRecordSelectionWorks(ID_FOR_RESULT_TABLE, XPATH_FOR_TABLE_ROWS, xpathForFields, ID_FOR_BOTTOM_PAGINATOR, XPATH_FOR_UPDATE_BUTTON, XPATH_FOR_ADD_BUTTON, XPATH_FOR_CANCEL_BUTTON, driver, actionBot);

        int pages = 3; // process maximum of 3 pages

        if (pages > 1) {
            //Ensure we start from the first page in table
            TableUtils.goToFirstPageInTableUsingFirstButton(ID_FOR_RESULT_TABLE, ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
        }

        for (int i = 1; i <= pages; i++) {
            int rowsOnPage = driver.findElements(By.xpath(XPATH_FOR_TABLE_ROWS)).size();
            for (int j = 1; j <= rowsOnPage; j++) {
                actionBot.click(By.xpath(XPATH_FOR_TABLE_ROWS + "[" + j + "]/td[last()]/button"));                
                actionBot.waitForLoadingUsingXpath(XPATH_FOR_UPDATE_BUTTON, Constants.MEDIUM_TIMEOUT);

                List<WebElement> elems = driver.findElements(By.xpath(XPATH_FOR_TABLE_ROWS + "[" + j + "]/td"));
                int size = elems.size() - 1;  // avoid the last column, which holds the select button

                for (int x = 0; x < size; x++) {

                    if (x == 0) {
                        // Since we are looking at Health Authority Column, we need to check against the code displayed in column against
                        // the value for the current selection in the Health Authority dropdown
                        assertEquals(elems.get(x).getText(), actionBot.textForCurrentSelection(driver.findElement(By.xpath(XPATH_FOR_MODALITY_TYPE_CD_FIELD))));
                    } else if (x == 1) {
                        // Since we are looking at Health Authority Column, we need to check against the code displayed in column against
                        // the value for the current selection in the Health Authority dropdown
                        assertEquals(elems.get(x).getText(), actionBot.textForCurrentSelection(driver.findElement(By.xpath(XPATH_FOR_IMAGING_REGION_FIELD))));
                    }else {
                        assertEquals(elems.get(x).getText(), driver.findElement(By.xpath(xpathForFields[x])).getAttribute("value"));
                    }

                }

                actionBot.click(By.xpath(XPATH_FOR_CANCEL_BUTTON));
                actionBot.waitForLoadingUsingXpath(XPATH_FOR_ADD_BUTTON, Constants.MEDIUM_TIMEOUT);
            }

            if (pages > 1 && TableUtils.morePagesAvailable(ID_FOR_BOTTOM_PAGINATOR, driver)) {
                TableUtils.nextPage(ID_FOR_RESULT_TABLE, ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
            }
        }
    }

    public void cleanup() {
        DbUtils.executeStatement(DB_TABLE_NAME, "DELETE", insertedRecords);
    }
    
    public void sortEffectiveDateColumnInDescendingOrder() {
        String xpathForColumnTobeSorted = "(//div[@id='" + ID_FOR_RESULT_TABLE + "']//th)[7]";
        TableUtils.sortColumnDescending(MaintainProcedureCodeTablePage.ID_FOR_RESULT_TABLE, xpathForColumnTobeSorted, driver, actionBot);
    }
    
    public void filterByModality(String modality) {
        WebElement elem = driver.findElement(By.xpath(XPATH_FOR_MODALITY_FILTER));
        actionBot.selectByDisplayedText(elem, modality);
        actionBot.waitForAjaxToComplete();
        TableUtils.testFilterTable(ID_FOR_RESULT_TABLE, XPATH_FOR_TABLE_ROWS, 1, modality, ID_FOR_BOTTOM_PAGINATOR, driver, actionBot);
    }
}
