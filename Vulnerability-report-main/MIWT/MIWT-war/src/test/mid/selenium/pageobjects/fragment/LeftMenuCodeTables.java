package mid.selenium.pageobjects.fragment;


import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.LoadableComponent;
import selenium.util.ActionBot;
import static org.junit.Assert.*;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class LeftMenuCodeTables extends LoadableComponent<LeftMenuCodeTables> {
    
    
    public static final String XPATH_VIEW_CREATE_SNAPSHOTS_LINK = "//a[contains(@href, 'Snapshots.xhtml')]";
    
    public static final String ID_FOR_MORE_ICON = "imgsub5";
    public static final String XPATH_FOR_PARENT_MENU_NODE_LINK = "//a[text()='Maintain Code Tables']";
    
    public static final String ID_FOR_CHILD_MENU_CONTAINER = "sub5";
    public static final String XPATH_FOR_AGE_RANGE_LINK = "//a[contains(@href, 'MaintainAgeRange.xhtml')]";
    public static final String XPATH_FOR_ANATOMICAL_IMAGING_REGION_LINK = "//a[contains(@href, 'MaintainAnatomicalImagingRegion.xhtml')]";
    public static final String XPATH_FOR_APPROPRIATENESS_LINK = "//a[contains(@href, 'MaintainAppropriateness.xhtml')]";
    public static final String XPATH_FOR_CANCELLATION_REASON_LINK = "//a[contains(@href, 'MaintainCancellationReason.xhtml')]";
    public static final String XPATH_FOR_CITY_LINK = "//a[contains(@href, 'MaintainCity.xhtml')]";
    public static final String XPATH_FOR_ENCOUNTER_TYPE_LINK = "//a[contains(@href, 'MaintainEncounterType.xhtml')]";
    public static final String XPATH_FOR_FACILITY_LINK = "//a[contains(@href, 'MaintainFacility.xhtml')]";
    public static final String XPATH_FOR_FINDINGS_LINK = "//a[contains(@href, 'MaintainFindings.xhtml')]";
    public static final String XPATH_FOR_FUNDING_TYPE_LINK = "//a[contains(@href, 'MaintainFundingType.xhtml')]";
    public static final String XPATH_FOR_GENDER_LINK = "//a[contains(@href, 'MaintainGender.xhtml')]";
    public static final String XPATH_FOR_HEALTH_AUTHORITY_LINK = "//a[contains(@href, 'MaintainHealthAuthority.xhtml')]";
    public static final String XPATH_FOR_MACHINE_INFORMATION_LINK = "//a[contains(@href, 'MaintainEquipment.xhtml')]";
    public static final String XPATH_FOR_MODALITY_LINK = "//a[contains(@href, 'MaintainModality.xhtml')]";
    public static final String XPATH_FOR_POSTPONEMENT_REASON_LINK = "//a[contains(@href, 'MaintainPostponeReason.xhtml')]";
    public static final String XPATH_FOR_PRIORITY_LEVEL_LINK = "//a[contains(@href, 'MaintainPriorityLevel.xhtml')]";
    public static final String XPATH_FOR_PROCEDURE_LINK = "//a[contains(@href, 'MaintainProcedure.xhtml')]";
    public static final String XPATH_FOR_PROVINCE_LINK = "//a[contains(@href, 'MaintainProvince.xhtml')]";
    public static final String XPATH_FOR_RADLEX_RID_LINK = "//a[contains(@href, 'MaintainRadlexRid.xhtml')]";
    public static final String XPATH_FOR_REASON_FOR_EXAM_LINK = "//a[contains(@href, 'MaintainExamReason.xhtml')]";


    private final WebDriver driver;
    private String handle;
    private final ActionBot actionBot;
    private final String browser;


    public LeftMenuCodeTables(WebDriver driver, String browser) {
        this.driver = driver;
        this.browser = browser;
        actionBot = new ActionBot(driver);
        
        PageFactory.initElements(driver, this);
    }

    @Override
    protected void load() {
        PageFactory.initElements(driver, this);
    }

    @Override
    protected void isLoaded() throws Error {

        try {
            driver.findElement(By.xpath(XPATH_FOR_PARENT_MENU_NODE_LINK));
            assert true;
        } catch (NoSuchElementException e) {
            load();

        }
    }
    
    public void setHandle(String handle) {
        this.handle = handle;
    }

    public void openMenu() {
        
        WebElement elem = driver.findElement(By.id(ID_FOR_CHILD_MENU_CONTAINER));
        
        if (!elem.isDisplayed()) {
            actionBot.click(driver.findElement(By.xpath(XPATH_FOR_PARENT_MENU_NODE_LINK)));
        }
    }
    
    public void closeMenu() {
        WebElement elem = driver.findElement(By.id(ID_FOR_CHILD_MENU_CONTAINER));
        
        if (elem.isDisplayed()) {
            actionBot.click(driver.findElement(By.xpath(XPATH_FOR_PARENT_MENU_NODE_LINK)));
        }
    }


    public void showMaintainAgeRangeForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_AGE_RANGE_LINK)));
    }
    
    public void showMaintainAnatomicalImagingRegionForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_ANATOMICAL_IMAGING_REGION_LINK)));
    }
    
    public void showMaintainAppropriatenessForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_APPROPRIATENESS_LINK)));
    }
    
    public void showMaintainCancellationReasonForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_CANCELLATION_REASON_LINK)));
    }
    
    public void showMaintainCityForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_CITY_LINK)));
    }
    
    public void showMaintainEncounterTypeForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_ENCOUNTER_TYPE_LINK)));
    }
    
    public void showMaintainFacilityForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_FACILITY_LINK)));
    }
    
    public void showMaintainFindingsForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_FINDINGS_LINK)));
    }
    
    public void showMaintainFundingTypeForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_FUNDING_TYPE_LINK)));
    }
    
    public void showMaintainGenderForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_GENDER_LINK)));
    }
    
    public void showMaintainHealthAuthorityForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_HEALTH_AUTHORITY_LINK)));
    }
    
    public void showMaintainMachineInformationForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_MACHINE_INFORMATION_LINK)));
    }
    
    public void showMaintainModalityForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_MODALITY_LINK)));
    }
    
    public void showMaintainPostponementReasonForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_POSTPONEMENT_REASON_LINK)));
    }
    
    public void showMaintainPriorityLevelForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_PRIORITY_LEVEL_LINK)));
    }
    
    public void showMaintainProcedureForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_PROCEDURE_LINK)));
    }

    public void showMaintainProvinceForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_PROVINCE_LINK)));
    }
    
    public void showMaintainRadlexRidForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_RADLEX_RID_LINK)));
    }
    
    public void showMaintainReasonForExamForm() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_REASON_FOR_EXAM_LINK)));
    }
    
    public void assertChildrenMenuOpen() {    
        assertTrue(driver.findElement(By.id(ID_FOR_CHILD_MENU_CONTAINER)).isDisplayed());
        assertTrue(driver.findElement(By.id(ID_FOR_MORE_ICON)).getAttribute("src").endsWith("less.gif"));
        
    }
    
    public void assertChildrenMenuClose() {       
        assertTrue(!driver.findElement(By.id(ID_FOR_CHILD_MENU_CONTAINER)).isDisplayed());
        assertTrue(driver.findElement(By.id(ID_FOR_MORE_ICON)).getAttribute("src").endsWith("more.gif"));        
    }
  
    public void assertNotLoaded() {
        try {
            driver.findElement(By.xpath(XPATH_FOR_AGE_RANGE_LINK));
            assert false : "Age Range link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_ANATOMICAL_IMAGING_REGION_LINK));
            assert false : "Anatomical Imaging Region link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_APPROPRIATENESS_LINK));
            assert false : "Appropriateness link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_CANCELLATION_REASON_LINK));
            assert false : "Cancellation Reason link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_CITY_LINK));
            assert false : "City link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_ENCOUNTER_TYPE_LINK));
            assert false : "Encounter Type link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_ENCOUNTER_TYPE_LINK));
            assert false : "Encounter Type link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
                
        try {
            driver.findElement(By.xpath(XPATH_FOR_FACILITY_LINK));
            assert false : "Facility link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_FINDINGS_LINK));
            assert false : "Findings link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_FINDINGS_LINK));
            assert false : "Funding Type link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_GENDER_LINK));
            assert false : "Gender link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_HEALTH_AUTHORITY_LINK));
            assert false : "Health Authority link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_MACHINE_INFORMATION_LINK));
            assert false : "Machine Information link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_MODALITY_LINK));
            assert false : "Modality link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_POSTPONEMENT_REASON_LINK));
            assert false : "Postponement Reason link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_PRIORITY_LEVEL_LINK));
            assert false : "Priority Level link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_PROCEDURE_LINK));
            assert false : "Procedure link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_PROVINCE_LINK));
            assert false : "Province link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_RADLEX_RID_LINK));
            assert false : "Radlex Rid link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_REASON_FOR_EXAM_LINK));
            assert false : "Reason for Exam link is being displayed when it should not";
        } catch(NoSuchElementException nse) {
            assert true;
        }
    }
       
    
    public void assertLoaded() {
        try {
            driver.findElement(By.xpath(XPATH_FOR_AGE_RANGE_LINK));
            assert true;
        } catch(NoSuchElementException nse) {            
            assert false : "Age Range link is not being displayed when it should be";
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_ANATOMICAL_IMAGING_REGION_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Anatomical Imaging Region link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_APPROPRIATENESS_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Appropriateness link is not being displayed when it should be";            
        }
        
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_CANCELLATION_REASON_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Cancellation Reason link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_CITY_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "City link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_ENCOUNTER_TYPE_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Encounter Type link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_FACILITY_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Facility link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_FINDINGS_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Findings link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_FUNDING_TYPE_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Funding Type link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_GENDER_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Gender link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_HEALTH_AUTHORITY_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Health Authority link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_MACHINE_INFORMATION_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Machine Information link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_MODALITY_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Modality link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_POSTPONEMENT_REASON_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Postponement Reason link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_PRIORITY_LEVEL_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Priority Level link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_PROCEDURE_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Procedure link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_PROVINCE_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Province link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_RADLEX_RID_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Radlex Rid link is not being displayed when it should be";            
        }
        
        try {
            driver.findElement(By.xpath(XPATH_FOR_REASON_FOR_EXAM_LINK));
            assert true;
        } catch(NoSuchElementException nse) {
            assert false : "Reason for Exam link is not being displayed when it should be";            
        }
    }
}
