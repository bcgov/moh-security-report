package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.jsf.BaseBean;
import ca.bc.gov.health.mid.ejb.entity.HealthAuthority;
import ca.bc.gov.health.mid.ejb.entity.StatusMap;
import ca.bc.gov.health.mid.ejb.session.HealthAuthorityFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.StatusMapFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainStatusMap")
@ViewScoped
/**
 * Backing bean for StatusMap code table maintenance
 * @author JSF Code Generator
 */
public class MaintainStatusMap extends BaseBean implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private StatusMapFacadeLocal statusMapFacade;

    @EJB
    private HealthAuthorityFacadeLocal healthAuthorityFacade;

    /* List of all values in the code table */
    private List<StatusMap> allStatusMaps;

    /* The instance we're currently editing */
    private StatusMap statusMap;

    /* PK of the selected instance */
    private Object selectedKey;

    private HealthAuthority selectedHealthAuthority;
    private Object mappedValue;
    private String haStatusCd;

    /**
     * Default Constructor
     */
    public MaintainStatusMap() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        clear();
    }

    /**
     * update the list by HA
     */
    public String changeHealthAuthority() {
        allStatusMaps = statusMapFacade.findAllByHA(statusMap.getHealthAuthorityId());

        if (allStatusMaps == null || allStatusMaps.isEmpty()) {
            selectedHealthAuthority = healthAuthorityFacade.find(statusMap.getHealthAuthorityId().getHealthAuthorityId());
        } else {
            selectedHealthAuthority = allStatusMaps.get(0).getHealthAuthorityId();
        }

        statusMap = new StatusMap();
        statusMap.setHealthAuthorityId(selectedHealthAuthority);

        return null;
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        statusMapFacade.create(statusMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        statusMapFacade.edit(statusMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        statusMapFacade.remove(statusMapFacade.find(selectedKey));

        init();
        addInfoMessage("Record deleted.");
        return null;
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        haStatusCd = null;
        mappedValue = null;

        statusMap = new StatusMap();

        if (user.isHaUser()) {
            statusMap.setHealthAuthorityId(user.getHealthAuthority());
            allStatusMaps = statusMapFacade.findAllByHA(statusMap.getHealthAuthorityId());
        } else {
            statusMap.setHealthAuthorityId(new HealthAuthority());
        }
        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        statusMap = statusMapFacade.find(selectedKey);
        haStatusCd = statusMap.getHaStatusCd();
        mappedValue = statusMap.getStatusCd();
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (statusMap.getHealthAuthorityId() != null && statusMap.getHealthAuthorityId().getHealthAuthorityId() == null) {
            statusMap.setHealthAuthorityId(null);
        }
    }

    /* Getters and Setters */
    public List<StatusMap> getAllStatusMaps() {
        return allStatusMaps;
    }

    public void setAllStatusMaps(List<StatusMap> allStatusMaps) {
        this.allStatusMaps = allStatusMaps;
    }

    public StatusMap getStatusMap() {
        return statusMap;
    }

    public void setStatusMap(StatusMap statusMap) {
        this.statusMap = statusMap;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public HealthAuthority getSelectedHealthAuthority() {
        return selectedHealthAuthority;
    }

    public Object getMappedValue() {
        return mappedValue;
    }

    public void setMappedValue(Object mappedValue) {
        this.mappedValue = mappedValue;
    }

    public String getHaStatusCd() {
        return haStatusCd;
    }

    public void setHaStatusCd(String haStatusCd) {
        this.haStatusCd = haStatusCd;
    }

    private void populateModelFields() {
        statusMap.setHaStatusCd(haStatusCd);
        statusMap.setStatusCd(mappedValue != null ? mappedValue.toString() : null);
    }

    private boolean isValid() {

        boolean isError = false;

        if (haStatusCd == null || haStatusCd.isEmpty()) {
            super.addErrorMessage(getResourceValue("StatusMap.haStatusCd.desc") + " is required");
            isError = true;
        }

        if (mappedValue == null || mappedValue.toString().isEmpty()) {
            super.addErrorMessage(getResourceValue("StatusMap.statusCd.desc") + " is required");
            isError = true;
        }

        for (StatusMap row : allStatusMaps) {
            if (!row.getStatusMapId().equals(statusMap.getStatusMapId()) &&
                    row.getHealthAuthorityId().equals(statusMap.getHealthAuthorityId()) &&
                    row.getHaStatusCd().equalsIgnoreCase(haStatusCd)) {
                super.addErrorMessage(getResourceValue("StatusMap.haStatusCd.desc") + " must be unique");
                isError = true;
            }
        }

        return isError;
    }
}