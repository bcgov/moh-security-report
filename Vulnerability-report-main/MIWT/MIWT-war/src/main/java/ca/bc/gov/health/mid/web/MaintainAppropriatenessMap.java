package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.mid.ejb.entity.Appropriateness;
import ca.bc.gov.health.mid.ejb.entity.AppropriatenessMap;
import ca.bc.gov.health.mid.ejb.entity.HealthAuthority;
import ca.bc.gov.health.mid.ejb.session.AppropriatenessFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.AppropriatenessMapFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.HealthAuthorityFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainAppropriatenessMap")
@ViewScoped
/**
 * Backing bean for AppropriatenessMap code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainAppropriatenessMap extends MappingScreen implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private AppropriatenessMapFacadeLocal appropriatenessMapFacade;
    @EJB
    private AppropriatenessFacadeLocal appropriatenessFacade;
    @EJB
    private HealthAuthorityFacadeLocal healthAuthorityFacade;

    /* List of all values in the code table */
    private List<AppropriatenessMap> allAppropriatenessMaps;

    /* The instance we're currently editing */
    private AppropriatenessMap appropriatenessMap;

    /* PK of the selected instance */
    private Object selectedKey;
    private HealthAuthority selectedHealthAuthority;
    private Object mappedValue;
    private String haAppropriatenessCd;

    /**
     * Default Constructor
     */
    public MaintainAppropriatenessMap() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        clear();
        super.setupDropLists(appropriatenessFacade.findAllValid(), "appropriatenessDesc", "appropriatenessCd");
    }

    /**
     * update the list by HA
     */
    public String changeHealthAuthority() {
        allAppropriatenessMaps = appropriatenessMapFacade.findAllByHA(appropriatenessMap.getHealthAuthorityId());

        if (allAppropriatenessMaps == null || allAppropriatenessMaps.isEmpty()) {
            selectedHealthAuthority = healthAuthorityFacade.find(appropriatenessMap.getHealthAuthorityId().getHealthAuthorityId());
        } else {
            selectedHealthAuthority = allAppropriatenessMaps.get(0).getHealthAuthorityId();
        }

        appropriatenessMap = new AppropriatenessMap();
        appropriatenessMap.setHealthAuthorityId(selectedHealthAuthority);
        return null;
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        appropriatenessMapFacade.create(appropriatenessMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        //TODO Validate is that commented line is required.
        //    ((Droplists) findBean("Droplists")).init();
        init();
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        appropriatenessMap.setAppropriatenessCd(new Appropriateness(appropriatenessMap.getAppropriatenessCd().getAppropriatenessCd()));
        appropriatenessMapFacade.edit(appropriatenessMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        //TODO Validate is that commented line is required.
        //     ((Droplists) findBean("Droplists")).init();
        init();
        selectedKey = null;
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        appropriatenessMapFacade.remove(appropriatenessMapFacade.find(selectedKey));
                init();
        addInfoMessage("Record deleted.");
        return clear();
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        haAppropriatenessCd = null;
        mappedValue = null;

        appropriatenessMap = new AppropriatenessMap();
        appropriatenessMap.setAppropriatenessCd(new Appropriateness());

        if (user.isHaUser()) {
            appropriatenessMap.setHealthAuthorityId(user.getHealthAuthority());
            allAppropriatenessMaps = appropriatenessMapFacade.findAllByHA(appropriatenessMap.getHealthAuthorityId());
        } else {
            appropriatenessMap.setHealthAuthorityId(new HealthAuthority());
        }

        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        appropriatenessMap = appropriatenessMapFacade.find(selectedKey);
        haAppropriatenessCd = appropriatenessMap.getHaAppropriatenessCd();
        mappedValue = appropriatenessMap.getAppropriatenessCd().getAppropriatenessCd();
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (appropriatenessMap.getHealthAuthorityId() != null && appropriatenessMap.getHealthAuthorityId().getHealthAuthorityId() == null) {
            appropriatenessMap.setHealthAuthorityId(null);
        }
        if (appropriatenessMap.getAppropriatenessCd() != null && appropriatenessMap.getAppropriatenessCd().getAppropriatenessCd() == null) {
            appropriatenessMap.setAppropriatenessCd(null);
        }
    }
    /* Getters and Setters */

    public List<AppropriatenessMap> getAllAppropriatenessMaps() {
        return allAppropriatenessMaps;
    }

    public void setAllAppropriatenessMaps(List<AppropriatenessMap> allAppropriatenessMaps) {
        this.allAppropriatenessMaps = allAppropriatenessMaps;
    }

    public AppropriatenessMap getAppropriatenessMap() {
        return appropriatenessMap;
    }

    public void setAppropriatenessMap(AppropriatenessMap appropriatenessMap) {
        this.appropriatenessMap = appropriatenessMap;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public HealthAuthority getSelectedHealthAuthority() {
        return selectedHealthAuthority;
    }

    public Object getMappedValue() {
        return mappedValue;
    }

    public String getHaAppropriatenessCd() {
        return haAppropriatenessCd;
    }

    public void setHaAppropriatenessCd(String haAppropriatenessCd) {
        this.haAppropriatenessCd = haAppropriatenessCd;
    }

    public void setMappedValue(Object mappedValue) {
        this.mappedValue = mappedValue;
    }

    private void populateModelFields() {
        appropriatenessMap.setHaAppropriatenessCd(haAppropriatenessCd);

        if (appropriatenessMap.getAppropriatenessCd() != null) {
            appropriatenessMap.getAppropriatenessCd().setAppropriatenessCd(mappedValue != null ? mappedValue.toString() : null);
        } else {
            appropriatenessMap.setAppropriatenessCd(new Appropriateness(mappedValue != null ? mappedValue.toString() : null));
        }
    }

    private boolean isValid() {

        boolean isError = false;

        if (haAppropriatenessCd == null || haAppropriatenessCd.isEmpty()) {
            super.addErrorMessage(getResourceValue("AppropriatenessMap.haAppropriatenessCd.desc") + " is required");
            isError = true;
        }

        if (mappedValue == null || mappedValue.toString().isEmpty()) {
            super.addErrorMessage(getResourceValue("AppropriatenessMap.appropriatenessCd.desc") + " is required");
            isError = true;
        }

        for (AppropriatenessMap row : allAppropriatenessMaps) {
            if (!row.getAppropriatenessMapId().equals(appropriatenessMap.getAppropriatenessMapId()) &&
                    row.getHealthAuthorityId().equals(appropriatenessMap.getHealthAuthorityId()) &&
                    row.getHaAppropriatenessCd().equalsIgnoreCase(haAppropriatenessCd)) {
                super.addErrorMessage(getResourceValue("AppropriatenessMap.haAppropriatenessCd.desc") + " must be unique");
                isError = true;
            }
        }

        return isError;
    }
}