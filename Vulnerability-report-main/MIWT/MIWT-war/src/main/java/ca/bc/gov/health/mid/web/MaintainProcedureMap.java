package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.mid.ejb.entity.HealthAuthority;
import ca.bc.gov.health.mid.ejb.entity.Modality;
import ca.bc.gov.health.mid.ejb.entity.Procedure;
import ca.bc.gov.health.mid.ejb.entity.ProcedureMap;
import ca.bc.gov.health.mid.ejb.session.HealthAuthorityFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.ProcedureFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.ProcedureMapFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.util.*;
import org.primefaces.PrimeFaces;

@Named("MaintainProcedureMap")
@ViewScoped
/**
 * Backing bean for ProcedureMap code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainProcedureMap extends MappingScreen implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private ProcedureMapFacadeLocal procedureMapFacade;
    @EJB
    private ProcedureFacadeLocal procedureFacade;
    @EJB
    private HealthAuthorityFacadeLocal healthAuthorityFacade;

    @Inject
    Droplists droplists;

    /* List of all values in the code table */
    private List<ProcedureMap> allProcedureMaps;
    private List<ProcedureMap> filteredProcedureMaps;
    private List<SelectItem> modalityFilterOptions;

    /* The instance we're currently editing */
    private ProcedureMap procedureMap;

    /* PK of the selected instance */
    private Object selectedKey;
    private HealthAuthority selectedHealthAuthority;
    private Object mappedValue;
    private String haProcedureCd;
    /**
     * Parameter for filtering
     */
    private String modalityCd;
    private String contrastCd;
    /**
     * Filtered list of procedures
     */
    private Map<String, String> filteredProcedures;

    /**
     * Default Constructor
     */
    public MaintainProcedureMap() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        clear();

        super.setupDropListsMultiLabel(procedureFacade.findAllValid(), new String[]{"provProcedureRpidDesc", "provProcedureRpidCd"}, "procedureId");
        modalityCd = null;
        contrastCd = null;
        filterProcedures();
        modalityFilterOptions = new ArrayList<SelectItem>();
        modalityFilterOptions.add(new SelectItem("", ""));
        modalityFilterOptions.addAll(droplists.getModalitys());
    }

    /**
     * update the list by HA
     */
    public String changeHealthAuthority() {
        allProcedureMaps = procedureMapFacade.findAllByHA(procedureMap.getHealthAuthorityId());

        if (allProcedureMaps == null || allProcedureMaps.isEmpty()) {
            selectedHealthAuthority = healthAuthorityFacade.find(procedureMap.getHealthAuthorityId().getHealthAuthorityId());
        } else {
            selectedHealthAuthority = allProcedureMaps.get(0).getHealthAuthorityId();
        }

        procedureMap = new ProcedureMap();
        procedureMap.setHealthAuthorityId(selectedHealthAuthority);

        return null;
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        try {
            procedureMapFacade.create(procedureMap);
        } catch (Throwable t) {
            t.printStackTrace();
        }
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();

        return null;
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        procedureMap.setProcedureId(new Procedure(Long.valueOf(mappedValue.toString())));
        procedureMapFacade.edit(procedureMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        procedureMapFacade.remove(procedureMapFacade.find(selectedKey));

        init();
        addInfoMessage("Record deleted.");
        return null;
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        modalityCd = null;
        contrastCd = null;
        haProcedureCd = null;
        mappedValue = null;

        procedureMap = new ProcedureMap();
        procedureMap.setProcedureId(new Procedure());

        if (user.isHaUser()) {
            procedureMap.setHealthAuthorityId(user.getHealthAuthority());

            allProcedureMaps = procedureMapFacade.findAllByHA(procedureMap.getHealthAuthorityId());
        } else {
            procedureMap.setHealthAuthorityId(new HealthAuthority());
        }

        filterProcedures();
        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        procedureMap = procedureMapFacade.find(selectedKey);
        haProcedureCd = procedureMap.getHaProcedureCd();
        modalityCd = procedureMap.getProcedureId().getModalityTypeCd().getModalityTypeCd();
        contrastCd = procedureMap.getContrastCd();
        mappedValue = procedureMap.getProcedureId().getProcedureId();
        filterProcedures();
        PrimeFaces instance = PrimeFaces.current();
        instance.scrollTo("navbar");
        return null;
    }

    /**
     * Filters the list of available procedures by modality
     *
     * @return String
     */
    public void filterProcedures() {
        //need a case for both not being null how this gonna work
        List<Procedure> procedures;
        if (modalityCd == null) {
            procedures = procedureFacade.findAllValid();   
        } else {
            Procedure query = new Procedure();
            query.setModalityTypeCd(new Modality(modalityCd));
            procedures = procedureFacade.search(query);
        } 
    
        filteredProcedures = new TreeMap<>();
        for (Procedure procedure : procedures) {
            filteredProcedures.put(procedure.getProvProcedureRpidDesc(), procedure.getProcedureId().toString());
        }

        super.setupDropListsMultiLabel(procedures, new String[]{"provProcedureRpidDesc", "provProcedureRpidCd"}, "procedureId");
        // Collections.sort(filteredProcedures,SelectItemHelper.comparator);
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (procedureMap.getProcedureId() != null && procedureMap.getProcedureId().getProcedureId() == null) {
            procedureMap.setProcedureId(null);
        }
        if (procedureMap.getHealthAuthorityId() != null && procedureMap.getHealthAuthorityId().getHealthAuthorityId() == null) {
            procedureMap.setHealthAuthorityId(null);
        }

    }
    /* Getters and Setters */

    public List<ProcedureMap> getAllProcedureMaps() {
        return allProcedureMaps;
    }

    public void setAllProcedureMaps(List<ProcedureMap> allProcedureMaps) {
        this.allProcedureMaps = allProcedureMaps;
    }

    public ProcedureMap getProcedureMap() {
        return procedureMap;
    }

    public void setProcedureMap(ProcedureMap procedureMap) {
        this.procedureMap = procedureMap;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public String getModalityCd() {
        return modalityCd;
    }

    public void setModalityCd(String modalityCd) {
        this.modalityCd = modalityCd;
    }
    
    public String getContrastCd() {
        return contrastCd;
    }
    
    public void setContrastCd(String contrastCd) {
        this.contrastCd = contrastCd;
    }

    public Object getMappedValue() {
        return mappedValue;
    }

    public void setMappedValue(Object mappedValue) {
        this.mappedValue = mappedValue;
    }

    public String getHaProcedureCd() {
        return haProcedureCd;
    }

    public void setHaProcedureCd(String haProcedureCd) {
        if (haProcedureCd != null && !haProcedureCd.isEmpty()) {
            this.haProcedureCd = haProcedureCd.trim().toUpperCase();
        } else {
            this.haProcedureCd = haProcedureCd;
        }
    }

    public Map<String, String> getFilteredProcedures() {
        return filteredProcedures;
    }

    public HealthAuthority getSelectedHealthAuthority() {
        return selectedHealthAuthority;
    }

    public List<ProcedureMap> getFilteredProcedureMaps() {
        return filteredProcedureMaps;
    }

    public void setFilteredProcedureMaps(List<ProcedureMap> filteredProcedureMaps) {
        this.filteredProcedureMaps = filteredProcedureMaps;
    }

    public List<SelectItem> getModalityFilterOptions() {
        return modalityFilterOptions;
    }

    public void setModalityFilterOptions(List<SelectItem> modalityFilterOptions) {
        this.modalityFilterOptions = modalityFilterOptions;
    }

    private void populateModelFields() {
        procedureMap.setHaProcedureCd(haProcedureCd);
        procedureMap.setModalityCd(modalityCd);
        procedureMap.setContrastCd(contrastCd);
        if (procedureMap.getProcedureId() != null) {
            procedureMap.getProcedureId().setProcedureId(mappedValue != null ? Long.valueOf(mappedValue.toString()) : null);

        } else {
            Procedure temp = new Procedure();
            temp.setProcedureId(mappedValue != null ? Long.valueOf(mappedValue.toString()) : null);
            procedureMap.setProcedureId(temp);
        }
    }

    private boolean isValid() {

        boolean isError = false;

        if (modalityCd == null || modalityCd.isEmpty()) {
            super.addErrorMessage(getResourceValue("Procedure.modalityTypeCd.desc") + " is required");
            isError = true;
        }

        if (haProcedureCd == null || haProcedureCd.isEmpty()) {
            super.addErrorMessage(getResourceValue("ProcedureMap.haProcedureCd.desc") + " is required");
            isError = true;
        }

        if (mappedValue == null || mappedValue.toString().isEmpty()) {
            super.addErrorMessage(getResourceValue("ProcedureMap.procedureId.desc") + " is required");
            isError = true;
        }

        for (ProcedureMap row : allProcedureMaps) {
            if (!row.getProcedureMapId().equals(procedureMap.getProcedureMapId()) &&
                    row.getHealthAuthorityId().equals(procedureMap.getHealthAuthorityId()) &&
                    row.getProcedureId().getModalityTypeCd().getModalityTypeCd().equals(modalityCd) &&
                    row.getHaProcedureCd().equalsIgnoreCase(haProcedureCd)) {
                super.addErrorMessage("Health Authority Procedure Code must be unique within a Modality");
                isError = true;
            }
        }

        return isError;
    }
}