package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.mid.ejb.entity.Findings;
import ca.bc.gov.health.mid.ejb.entity.FindingsMap;
import ca.bc.gov.health.mid.ejb.entity.HealthAuthority;
import ca.bc.gov.health.mid.ejb.session.FindingsFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.FindingsMapFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.HealthAuthorityFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainFindingsMap")
@ViewScoped
/**
 * Backing bean for FindingsMap code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainFindingsMap extends MappingScreen implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private FindingsMapFacadeLocal findingsMapFacade;
    @EJB
    private FindingsFacadeLocal findingsFacade;
    @EJB
    private HealthAuthorityFacadeLocal healthAuthorityFacade;

    /* List of all values in the code table */
    private List<FindingsMap> allFindingsMaps;

    /* The instance we're currently editing */
    private FindingsMap findingsMap;

    /* PK of the selected instance */
    private Object selectedKey;
    private HealthAuthority selectedHealthAuthority;
    private Object mappedValue;
    private String haFindingCd;

    /**
     * Default Constructor
     */
    public MaintainFindingsMap() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        clear();
        super.setupDropLists(findingsFacade.findAllValid(), "findingDesc", "findingCd");
    }

    /**
     * update the list by HA
     */
    public String changeHealthAuthority() {
        allFindingsMaps = findingsMapFacade.findAllByHA(findingsMap.getHealthAuthorityId());

        if (allFindingsMaps == null || allFindingsMaps.isEmpty()) {
            selectedHealthAuthority = healthAuthorityFacade.find(findingsMap.getHealthAuthorityId().getHealthAuthorityId());
        } else {
            selectedHealthAuthority = allFindingsMaps.get(0).getHealthAuthorityId();
        }

        findingsMap = new FindingsMap();
        findingsMap.setHealthAuthorityId(selectedHealthAuthority);

        return null;
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        findingsMapFacade.create(findingsMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        findingsMap.setFindingCd(new Findings(findingsMap.getFindingCd().getFindingCd()));
        findingsMapFacade.edit(findingsMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        findingsMapFacade.remove(findingsMapFacade.find(selectedKey));

        init();
        addInfoMessage("Record deleted.");
        return null;
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        haFindingCd = null;
        mappedValue = null;

        findingsMap = new FindingsMap();
        findingsMap.setFindingCd(new Findings());

        if (user.isHaUser()) {
            findingsMap.setHealthAuthorityId(user.getHealthAuthority());
            allFindingsMaps = findingsMapFacade.findAllByHA(findingsMap.getHealthAuthorityId());
        } else {
            findingsMap.setHealthAuthorityId(new HealthAuthority());
        }

        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        findingsMap = findingsMapFacade.find(selectedKey);
        haFindingCd = findingsMap.getHaFindingCd();
        mappedValue = findingsMap.getFindingCd().getFindingCd();
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (findingsMap.getHealthAuthorityId() != null && findingsMap.getHealthAuthorityId().getHealthAuthorityId() == null) {
            findingsMap.setHealthAuthorityId(null);
        }
        if (findingsMap.getFindingCd() != null && findingsMap.getFindingCd().getFindingCd() == null) {
            findingsMap.setFindingCd(null);
        }
    }
    /* Getters and Setters */

    public List<FindingsMap> getAllFindingsMaps() {
        return allFindingsMaps;
    }

    public void setAllFindingsMaps(List<FindingsMap> allFindingsMaps) {
        this.allFindingsMaps = allFindingsMaps;
    }

    public FindingsMap getFindingsMap() {
        return findingsMap;
    }

    public void setFindingsMap(FindingsMap findingsMap) {
        this.findingsMap = findingsMap;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public HealthAuthority getSelectedHealthAuthority() {
        return selectedHealthAuthority;
    }

    public Object getMappedValue() {
        return mappedValue;
    }

    public void setMappedValue(Object mappedValue) {
        this.mappedValue = mappedValue;
    }

    public String getHaFindingCd() {
        return haFindingCd;
    }

    public void setHaFindingCd(String haFindingCd) {
        this.haFindingCd = haFindingCd;
    }

    private void populateModelFields() {
        findingsMap.setHaFindingCd(haFindingCd);

        if (findingsMap.getFindingCd() != null) {
            findingsMap.getFindingCd().setFindingCd(mappedValue != null ? mappedValue.toString() : null);
        } else {
            findingsMap.setFindingCd(new Findings(mappedValue != null ? mappedValue.toString() : null));
        }
    }

    private boolean isValid() {

        boolean isError = false;

        if (haFindingCd == null || haFindingCd.isEmpty()) {
            super.addErrorMessage(getResourceValue("FindingsMap.haFindingCd.desc") + " is required");
            isError = true;
        }

        if (mappedValue == null || mappedValue.toString().isEmpty()) {
            super.addErrorMessage(getResourceValue("FindingsMap.findingCd.desc") + " is required");
            isError = true;
        }

        for (FindingsMap row : allFindingsMaps) {
            if (!row.getFindingMapId().equals(findingsMap.getFindingMapId()) &&
                    row.getHealthAuthorityId().equals(findingsMap.getHealthAuthorityId()) &&
                    row.getHaFindingCd().equalsIgnoreCase(haFindingCd)) {
                super.addErrorMessage(getResourceValue("FindingsMap.haFindingCd.desc") + " must be unique");
                isError = true;
            }
        }

        return isError;
    }
}