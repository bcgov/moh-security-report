package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.jsf.SelectItemHelper;
import ca.bc.gov.health.mid.ejb.entity.Snapshot;
import ca.bc.gov.health.mid.ejb.session.*;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.faces.model.SelectItem;
import jakarta.inject.Named;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

@ApplicationScoped
@Named("Droplists")
public class Droplists {

    @EJB
    private BodyPartFacadeLocal bodyPartFacade;
    @EJB
    private AgeRangeFacadeLocal AgeRangeFacade;
    @EJB
    private AnatomicalImagingRegionFacadeLocal AnatomicalImagingRegionFacade;
    @EJB
    private AnatomicalImgagingRegionMapFacadeLocal AnatomicalImgagingRegionMapFacade;
    @EJB
    private AppropriatenessFacadeLocal AppropriatenessFacade;
    @EJB
    private AppropriatenessMapFacadeLocal AppropriatenessMapFacade;
    @EJB
    private BookingFacadeLocal BookingFacade;
    @EJB
    private CancellationReasonFacadeLocal CancellationReasonFacade;
    @EJB
    private CancellationReasonMapFacadeLocal CancellationReasonMapFacade;
    @EJB
    private CityFacadeLocal CityFacade;
    @EJB
    private CompletedProcedureFacadeLocal CompletedProcedureFacade;
    @EJB
    private ContrastFacadeLocal ContrastFacade;
    //@EJB
    //private ContrastMapFacadeLocal ContrastMapFacade;
    @EJB
    private DataApprovalFacadeLocal DataApprovalFacade;
    @EJB
    private EncounterTypeFacadeLocal EncounterTypeFacade;
    @EJB
    private EncounterTypeMapFacadeLocal EncounterTypeMapFacade;
    @EJB
    private EquipmentFacadeLocal EquipmentFacade;
    @EJB
    private ExamReasonFacadeLocal ExamReasonFacade;
    @EJB
    private ExamReasonMapFacadeLocal ExamReasonMapFacade;
    @EJB
    private FacilityFacadeLocal FacilityFacade;
    @EJB
    private FindingsFacadeLocal FindingsFacade;
    @EJB
    private FindingsMapFacadeLocal FindingsMapFacade;
    @EJB
    private FundingTypeFacadeLocal FundingTypeFacade;
    @EJB
    private FundingTypeMapFacadeLocal FundingTypeMapFacade;
    @EJB
    private GenderFacadeLocal GenderFacade;
    @EJB
    private GenderMapFacadeLocal GenderMapFacade;
    @EJB
    private HealthAuthorityFacadeLocal HealthAuthorityFacade;
    @EJB
    private ImagingProcedureFacadeLocal ImagingProcedureFacade;
    @EJB
    private ModalityFacadeLocal ModalityFacade;
    @EJB
    private ModalityMapFacadeLocal ModalityMapFacade;
    @EJB
    private PatientFacadeLocal PatientFacade;
    @EJB
    private PostponeReasonFacadeLocal PostponeReasonFacade;
    @EJB
    private PostponeReasonMapFacadeLocal PostponeReasonMapFacade;
    @EJB
    private PriorityLevelFacadeLocal PriorityLevelFacade;
    @EJB
    private PriorityLevelMapFacadeLocal PriorityLevelMapFacade;
    @EJB
    private ProcedureFacadeLocal ProcedureFacade;
    @EJB
    private ProcedureMapFacadeLocal ProcedureMapFacade;
    @EJB
    private ProcedureRidFacadeLocal ProcedureRidFacade;
    @EJB
    private ProvinceFacadeLocal ProvinceFacade;
    @EJB
    private ProvinceMapFacadeLocal ProvinceMapFacade;
    @EJB
    private RadlexRidFacadeLocal RadlexRidFacade;
    @EJB
    private SnapshotFacadeLocal SnapshotFacade;
    @EJB
    private SnapshotLogFacadeLocal SnapshotLogFacade;
    @EJB
    private SpecialtyFacadeLocal SpecialtyFacade;
    @EJB
    private StatusMapFacadeLocal StatusMapFacade;
    @EJB
    private TimedExamMapFacadeLocal TimedExamMapFacade;

    private List<SelectItem> citys;
    private List<SelectItem> bodyParts;
    private List<SelectItem> healthAuthoritys;
    private List<SelectItem> provinces;
    private List<SelectItem> yesNoList;
    private List<SelectItem> statusList;

    @PostConstruct
    public void init() {
        citys = SelectItemHelper.buildSelectItemList(CityFacade.findAll(), "cityNm", "cityId");
        bodyParts = SelectItemHelper.buildSelectItemList(bodyPartFacade.findAllValid(), "bpNm", "bpCd");
        healthAuthoritys = SelectItemHelper.buildSelectItemList(HealthAuthorityFacade.findAll(), "healthAuthorityCd", "healthAuthorityId");
        provinces = SelectItemHelper.buildSelectItemList(ProvinceFacade.findAll(), "provinceDesc", "provinceCd");
        yesNoList = creatYesNoList();
        statusList = createStatusList();
    }

    public List<SelectItem> getAgeRanges() {
        return SelectItemHelper.buildSelectItemList(AgeRangeFacade.findAll(), new String[]{"startAge", "endAge"}, " - ", "ageRangeId");
    }

    public List<SelectItem> getValidAgeRanges() {
        return SelectItemHelper.buildSelectItemList(AgeRangeFacade.findAllValid(), new String[]{"startAge", "endAge"}, " - ", "ageRangeId", false);
    }

    public List<SelectItem> getAllAnatomicalImagingRegions() {
        return SelectItemHelper.buildSelectItemList(AnatomicalImagingRegionFacade.findAll(), "imagingRegionNm", "imagingRegionCd");
    }

    public List<SelectItem> getValidAnatomicalImagingRegions() {
        return SelectItemHelper.buildSelectItemList(AnatomicalImagingRegionFacade.findAllValid(), "imagingRegionNm", "imagingRegionCd");
    }

    public List<SelectItem> getAnatomicalImgagingRegionMaps() {
        return SelectItemHelper.buildSelectItemList(AnatomicalImgagingRegionMapFacade.findAll(), "", "");
    }

    public List<SelectItem> getAppropriatenesss() {
        return SelectItemHelper.buildSelectItemList(AppropriatenessFacade.findAll(), "appropriatenessDesc", "appropriatenessCd");
    }

    public List<SelectItem> getValidAppropriatenesss() {
        return SelectItemHelper.buildSelectItemList(AppropriatenessFacade.findAllValid(), "appropriatenessDesc", "appropriatenessCd");
    }

    public List<SelectItem> getAppropriatenessMaps() {
        return SelectItemHelper.buildSelectItemList(AppropriatenessMapFacade.findAll(), "", "");
    }

    public List<SelectItem> getBookings() {
        return SelectItemHelper.buildSelectItemList(BookingFacade.findAll(), "statusCd", "bookingId");
    }

    public List<SelectItem> getValidBodyParts() {
        return SelectItemHelper.buildSelectItemList(bodyPartFacade.findAllValid(), "bpNm", "bpCd");
    }

    public List<SelectItem> getValidCancellationReasons() {
        return SelectItemHelper.buildSelectItemList(CancellationReasonFacade.findAllValid(), "cancellationReasonDesc", "cancellationReasonCd");
    }

    public List<SelectItem> getCancellationReasons() {
        return SelectItemHelper.buildSelectItemList(CancellationReasonFacade.findAll(), "cancellationReasonDesc", "cancellationReasonCd");
    }

    public List<SelectItem> getCancellationReasonMaps() {
        return SelectItemHelper.buildSelectItemList(CancellationReasonMapFacade.findAll(), "", "");
    }

    public List<SelectItem> getCitys() {
        return citys;
    }

    public List<SelectItem> getBodyParts() {
        return bodyParts;
    }

    public List<SelectItem> getCompletedProcedures() {
        return SelectItemHelper.buildSelectItemList(CompletedProcedureFacade.findAll(), "haProcedureId", "completedProcedureId");
    }


    public List<SelectItem> getDataApprovals() {
        return SelectItemHelper.buildSelectItemList(DataApprovalFacade.findAll(), "approvalDtm", "dataApprovalId");
    }

    public List<SelectItem> getEncounterTypes() {
        return SelectItemHelper.buildSelectItemList(EncounterTypeFacade.findAll(), "encounterTypeDesc", "encounterTypeCd");
    }

    public List<SelectItem> getValidEncounterTypes() {
        return SelectItemHelper.buildSelectItemList(EncounterTypeFacade.findAllValid(), "encounterTypeDesc", "encounterTypeCd");
    }

    public List<SelectItem> getEncounterTypeMaps() {
        return SelectItemHelper.buildSelectItemList(EncounterTypeMapFacade.findAll(), "", "");
    }

    public List<SelectItem> getEquipments() {
        return SelectItemHelper.buildSelectItemList(EquipmentFacade.findAll(), "description", "equipmentId");
    }

    public List<SelectItem> getExamReasons() {
        return SelectItemHelper.buildSelectItemList(ExamReasonFacade.findAll(), "examReasonDesc", "examReasonCd");
    }

    public List<SelectItem> getExamReasonMaps() {
        return SelectItemHelper.buildSelectItemList(ExamReasonMapFacade.findAll(), "", "");
    }

    public List<SelectItem> getFacilitys() {
        return SelectItemHelper.buildSelectItemList(FacilityFacade.findAll(), "facilityNm", "facilityId");
    }

    public List<SelectItem> getValidFacilitys() {
        return SelectItemHelper.buildSelectItemList(FacilityFacade.findAllValid(), "facilityNm", "facilityId");
    }

    public List<SelectItem> getFindingss() {
        return SelectItemHelper.buildSelectItemList(FindingsFacade.findAll(), "findingDesc", "findingCd");
    }

    public List<SelectItem> getFindingsMaps() {
        return SelectItemHelper.buildSelectItemList(FindingsMapFacade.findAll(), "", "");
    }

    public List<SelectItem> getFundingTypes() {
        return SelectItemHelper.buildSelectItemList(FundingTypeFacade.findAll(), "fundingTypeDesc", "fundingTypeCd");
    }

    public List<SelectItem> getValidFundingTypes() {
        return SelectItemHelper.buildSelectItemList(FundingTypeFacade.findAllValid(), "fundingTypeDesc", "fundingTypeCd");
    }

    public List<SelectItem> getFundingTypeMaps() {
        return SelectItemHelper.buildSelectItemList(FundingTypeMapFacade.findAll(), "", "");
    }

    public List<SelectItem> getGenders() {
        return SelectItemHelper.buildSelectItemList(GenderFacade.findAll(), "genderDesc", "genderCd");
    }

    public List<SelectItem> getValidGenders() {
        return SelectItemHelper.buildSelectItemList(GenderFacade.findAllValid(), "genderDesc", "genderCd");
    }

    public List<SelectItem> getGenderMaps() {
        return SelectItemHelper.buildSelectItemList(GenderMapFacade.findAll(), "", "");
    }

    public List<SelectItem> getHealthAuthoritys() {
        return healthAuthoritys;
    }

    public List<SelectItem> getImagingProcedures() {
        return SelectItemHelper.buildSelectItemList(ImagingProcedureFacade.findAll(), "statusCd", "imagingProcedureId");
    }

    public List<SelectItem> getModalitys() {
        return SelectItemHelper.buildSelectItemList(ModalityFacade.findAll(), "modalityTypeDesc", "modalityTypeCd");
    }

    public List<SelectItem> getValidModalitys() {
        return SelectItemHelper.buildSelectItemList(ModalityFacade.findAllValid(), "modalityTypeDesc", "modalityTypeCd");
    }

    public List<SelectItem> getModalityMaps() {
        return SelectItemHelper.buildSelectItemList(ModalityMapFacade.findAll(), "", "");
    }
    
    public List<SelectItem> getContrasts() {
        return SelectItemHelper.buildSelectItemList(ContrastFacade.findAll(), "contrastTypeDesc", "contrastTypeCd");
    }
    
    public List<SelectItem> getValidContrasts() {
        return SelectItemHelper.buildSelectItemList(ContrastFacade.findAllValid(), "contrastTypeDesc", "contrastTypeCd");
    }
    
    //public List<SelectItem> getContrastMaps() {
    //    return SelectItemHelper.buildSelectItemList(ContrastMapFacade.findAll(), "", "");
    //}

    public List<SelectItem> getPatients() {
        return SelectItemHelper.buildSelectItemList(PatientFacade.findAll(), "firstGivenNm", "patientId");
    }

    public List<SelectItem> getPostponeReasons() {
        return SelectItemHelper.buildSelectItemList(PostponeReasonFacade.findAll(), "postponeReasonDesc", "postponeReasonCd");
    }

    public List<SelectItem> getPostponeReasonMaps() {
        return SelectItemHelper.buildSelectItemList(PostponeReasonMapFacade.findAll(), "", "");
    }

    public List<SelectItem> getPriorityLevels() {
        return SelectItemHelper.buildSelectItemList(PriorityLevelFacade.findAll(), new String[]{"modalityCd", "priorityLevelDesc"}, " - ", "priorityLevelId");
    }

    public List<SelectItem> getValidPriorityLevels() {
        return SelectItemHelper.buildSelectItemList(PriorityLevelFacade.findAllValid(), new String[]{"modalityCd", "priorityLevelDesc"}, " - ", "priorityLevelId");
    }

    public List<SelectItem> getPriorityLevelMaps() {
        return SelectItemHelper.buildSelectItemList(PriorityLevelMapFacade.findAll(), "", "");
    }

    public List<SelectItem> getProcedures() {
        return SelectItemHelper.buildSelectItemList(ProcedureFacade.findAll(), "provProcedureRpidDesc", "procedureId");
    }

    public List<SelectItem> getValidProcedures() {
        return SelectItemHelper.buildSelectItemList(ProcedureFacade.findAllValid(), "provProcedureRpidDesc", "procedureId");
    }

    public List<SelectItem> getProcedureMaps() {
        return SelectItemHelper.buildSelectItemList(ProcedureMapFacade.findAll(), "", "");
    }

    public List<SelectItem> getProcedureRids() {
        return SelectItemHelper.buildSelectItemList(ProcedureRidFacade.findAll(), "", "");
    }

    public List<SelectItem> getProvinces() {
        return provinces;
    }

    public List<SelectItem> getProvinceMaps() {
        return SelectItemHelper.buildSelectItemList(ProvinceMapFacade.findAll(), "", "");
    }

    public List<SelectItem> getRadlexRids() {
        return SelectItemHelper.buildSelectItemList(RadlexRidFacade.findAll(), "ridDescription", "ridCode");
    }

    public List<SelectItem> getYesNoList() {
        return yesNoList;
    }

    public List<SelectItem> getStatusList() {
        return statusList;
    }

    public List<SelectItem> creatYesNoList() {
        yesNoList = new ArrayList();
        yesNoList.add(new SelectItem("Y", "Yes"));
        yesNoList.add(new SelectItem("N", "No"));
        return yesNoList;
    }

    public List<SelectItem> createStatusList() {
        statusList = new ArrayList();
        statusList.add(new SelectItem("Active", "Active"));
        statusList.add(new SelectItem("Cancelled", "Cancelled"));
        statusList.add(new SelectItem("Completed", "Completed"));

        return statusList;
    }

    public Map<String, Long> getSnapshots() {
        List<Snapshot> snapshots = SnapshotFacade.findAll();
        Map<String, Long> snapshotDropdown = new LinkedHashMap<>();

        for (Snapshot s : snapshots) {
            snapshotDropdown.put(String.format("%s => (%s to %s)", s.getSnapshotId(), DateFormat.getDateInstance(DateFormat.MEDIUM).format(s.getReportingPeriodStartDt()), DateFormat.getDateInstance(DateFormat.MEDIUM).format(s.getReportingPeriodEndDt())), s.getSnapshotId());
        }

        return snapshotDropdown;
    }

    public List<SelectItem> getSnapshotLogs() {
        return SelectItemHelper.buildSelectItemList(SnapshotLogFacade.findAll(), "rowsProcessed", "snapshotLogId");
    }

    public List<SelectItem> getSpecialtys() {
        return SelectItemHelper.buildSelectItemList(SpecialtyFacade.findAll(), "specialtyDesc", "specialtyCd");
    }

    public List<SelectItem> getStatusMaps() {
        return SelectItemHelper.buildSelectItemList(StatusMapFacade.findAll(), "", "");
    }

    public List<SelectItem> getTimedExamMaps() {
        return SelectItemHelper.buildSelectItemList(TimedExamMapFacade.findAll(), "", "");
    }

    public SelectItem getSelectItemById(List<SelectItem> list, String id) {
        for (SelectItem st : list) {
            if (st.getValue().toString().equals(id)) return st;
        }
        return null;
    }

    public void reloadCitys() {
        citys = SelectItemHelper.buildSelectItemList(CityFacade.findAll(), "cityNm", "cityId");
    }

    public void reloadBodyparts() {
        bodyParts = SelectItemHelper.buildSelectItemList(bodyPartFacade.findAllValid(), "bpNm", "bpCd");
    }

    public void reloadHealthAuthorities() {
        healthAuthoritys = SelectItemHelper.buildSelectItemList(HealthAuthorityFacade.findAll(), "healthAuthorityCd", "healthAuthorityId");
    }

    public void reloadProvinces() {
        provinces = SelectItemHelper.buildSelectItemList(ProvinceFacade.findAll(), "provinceDesc", "provinceCd");
    }
}
