package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.mid.ejb.entity.HealthAuthority;
import ca.bc.gov.health.mid.ejb.entity.Modality;
import ca.bc.gov.health.mid.ejb.entity.PriorityLevel;
import ca.bc.gov.health.mid.ejb.entity.PriorityLevelMap;
import ca.bc.gov.health.mid.ejb.session.HealthAuthorityFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.PriorityLevelFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.PriorityLevelMapFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainPriorityLevelMap")
@ViewScoped
/**
 * Backing bean for PriorityLevelMap code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainPriorityLevelMap extends MappingScreen implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private PriorityLevelMapFacadeLocal priorityLevelMapFacade;
    @EJB
    private PriorityLevelFacadeLocal priorityLevelFacade;
    @EJB
    private HealthAuthorityFacadeLocal healthAuthorityFacade;

    /* List of all values in the code table */
    private List<PriorityLevelMap> allPriorityLevelMaps;

    /* The instance we're currently editing */
    private PriorityLevelMap priorityLevelMap;

    /* PK of the selected instance */
    private Object selectedKey;
    private HealthAuthority selectedHealthAuthority;
    private Object mappedValue;
    private String modalityTypeCd;
    private String haPriorityLevelCd;

    /**
     * Default Constructor
     */
    public MaintainPriorityLevelMap() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        clear();
        super.setupDropListsMultiLabel(priorityLevelFacade.findAllValid(), new String[]{"priorityLevelDesc", "modalityCd"}, "priorityLevelId");
    }

    /**
     * update the list by HA
     */
    public String changeHealthAuthority() {
        allPriorityLevelMaps = priorityLevelMapFacade.findAllByHA(priorityLevelMap.getHealthAuthorityId());

        if (allPriorityLevelMaps == null || allPriorityLevelMaps.isEmpty()) {
            selectedHealthAuthority = healthAuthorityFacade.find(priorityLevelMap.getHealthAuthorityId().getHealthAuthorityId());
        } else {
            selectedHealthAuthority = allPriorityLevelMaps.get(0).getHealthAuthorityId();
        }

        priorityLevelMap = new PriorityLevelMap();
        priorityLevelMap.setHealthAuthorityId(selectedHealthAuthority);

        return null;
    }

    /**
     * update the list by HA
     */
    public String changeModality() {
        if (modalityTypeCd != null && !modalityTypeCd.isEmpty()) {
            super.setupDropListsMultiLabel(priorityLevelFacade.findAllValidByModality(new Modality(modalityTypeCd)), new String[]{"priorityLevelDesc", "modalityCd"}, "priorityLevelId");
        } else {
            mappedValue = null;
            super.setupDropListsMultiLabel(priorityLevelFacade.findAllValid(), new String[]{"priorityLevelDesc", "modalityCd"}, "priorityLevelId");
        }

        return null;
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        priorityLevelMapFacade.create(priorityLevelMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        priorityLevelMap.setPriorityLevelId(new PriorityLevel(priorityLevelMap.getPriorityLevelId().getPriorityLevelId()));
        priorityLevelMap.setModalityTypeCd(new Modality(modalityTypeCd));
        priorityLevelMapFacade.edit(priorityLevelMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        priorityLevelMapFacade.remove(priorityLevelMapFacade.find(selectedKey));

        init();
        addInfoMessage("Record deleted.");
        return null;
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        modalityTypeCd = null;
        haPriorityLevelCd = null;
        mappedValue = null;

        priorityLevelMap = new PriorityLevelMap();
        priorityLevelMap.setPriorityLevelId(new PriorityLevel());
        priorityLevelMap.setModalityTypeCd(new Modality());

        if (user.isHaUser()) {
            priorityLevelMap.setHealthAuthorityId(user.getHealthAuthority());
            allPriorityLevelMaps = priorityLevelMapFacade.findAllByHA(priorityLevelMap.getHealthAuthorityId());
        } else {
            priorityLevelMap.setHealthAuthorityId(new HealthAuthority());
        }

        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        priorityLevelMap = priorityLevelMapFacade.find(selectedKey);
        haPriorityLevelCd = priorityLevelMap.getHaPriorityLevelCd();
        modalityTypeCd = priorityLevelMap.getModalityTypeCd().getModalityTypeCd();
        mappedValue = priorityLevelMap.getPriorityLevelId().getPriorityLevelId();
        super.setupDropListsMultiLabel(priorityLevelFacade.findAllValidByModality(priorityLevelMap.getModalityTypeCd()), new String[]{"priorityLevelDesc", "modalityCd"}, "priorityLevelId");
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (priorityLevelMap.getPriorityLevelId() != null && priorityLevelMap.getPriorityLevelId().getPriorityLevelId() == null) {
            priorityLevelMap.setPriorityLevelId(null);
        }
        if (priorityLevelMap.getModalityTypeCd() != null && priorityLevelMap.getModalityTypeCd().getModalityTypeCd() == null) {
            priorityLevelMap.setModalityTypeCd(null);
        }
        if (priorityLevelMap.getHealthAuthorityId() != null && priorityLevelMap.getHealthAuthorityId().getHealthAuthorityId() == null) {
            priorityLevelMap.setHealthAuthorityId(null);
        }
    }
    /* Getters and Setters */

    public List<PriorityLevelMap> getAllPriorityLevelMaps() {
        return allPriorityLevelMaps;
    }

    public void setAllPriorityLevelMaps(List<PriorityLevelMap> allPriorityLevelMaps) {
        this.allPriorityLevelMaps = allPriorityLevelMaps;
    }

    public PriorityLevelMap getPriorityLevelMap() {
        return priorityLevelMap;
    }

    public void setPriorityLevelMap(PriorityLevelMap priorityLevelMap) {
        this.priorityLevelMap = priorityLevelMap;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public HealthAuthority getSelectedHealthAuthority() {
        return selectedHealthAuthority;
    }

    public Object getMappedValue() {
        return mappedValue;
    }

    public void setMappedValue(Object mappedValue) {
        this.mappedValue = mappedValue;
    }

    public String getModalityTypeCd() {
        return modalityTypeCd;
    }

    public void setModalityTypeCd(String modalityTypeCd) {
        this.modalityTypeCd = modalityTypeCd;
    }

    public String getHaPriorityLevelCd() {
        return haPriorityLevelCd;
    }

    public void setHaPriorityLevelCd(String haPriorityLevelCd) {
        this.haPriorityLevelCd = haPriorityLevelCd;
    }

    private void populateModelFields() {
        priorityLevelMap.setHaPriorityLevelCd(haPriorityLevelCd);

        if (priorityLevelMap.getPriorityLevelId() != null) {
            priorityLevelMap.getPriorityLevelId().setPriorityLevelId(mappedValue != null ? Long.valueOf(mappedValue.toString()) : null);

        } else {
            PriorityLevel temp = new PriorityLevel();
            temp.setPriorityLevelId(mappedValue != null ? Long.valueOf(mappedValue.toString()) : null);
            priorityLevelMap.setPriorityLevelId(temp);
        }


        if (priorityLevelMap.getModalityTypeCd() != null) {
            priorityLevelMap.getModalityTypeCd().setModalityTypeCd(modalityTypeCd);
        } else {
            priorityLevelMap.setModalityTypeCd(new Modality(modalityTypeCd));
        }
    }

    private boolean isValid() {

        boolean isError = false;

        if (modalityTypeCd == null || modalityTypeCd.isEmpty()) {
            super.addErrorMessage(getResourceValue("PriorityLevelMap.modalityTypeCd.desc") + " is required");
            isError = true;
        }

        if (haPriorityLevelCd == null || haPriorityLevelCd.isEmpty()) {
            super.addErrorMessage(getResourceValue("PriorityLevelMap.haPriorityLevelCd.desc") + " is required");
            isError = true;
        }

        if (mappedValue == null || mappedValue.toString().isEmpty()) {
            super.addErrorMessage(getResourceValue("PriorityLevelMap.priorityLevelId.desc") + " is required");
            isError = true;
        }

        for (PriorityLevelMap row : allPriorityLevelMaps) {
            if (!row.getPriorityLevelMapId().equals(priorityLevelMap.getPriorityLevelMapId()) &&
                    row.getHealthAuthorityId().equals(priorityLevelMap.getHealthAuthorityId()) &&
                    row.getModalityTypeCd().getModalityTypeCd().equals(modalityTypeCd) &&
                    row.getHaPriorityLevelCd().equalsIgnoreCase(haPriorityLevelCd)) {
                super.addErrorMessage(getResourceValue("PriorityLevelMap.haPriorityLevelCd.desc") + " must be unique within a modality");
                isError = true;
            }
        }

        return isError;
    }
}