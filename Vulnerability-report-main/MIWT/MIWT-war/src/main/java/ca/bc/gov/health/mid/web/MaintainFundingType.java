package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.jsf.BaseBean;
import ca.bc.gov.health.mid.ejb.entity.FundingType;
import ca.bc.gov.health.mid.ejb.session.FundingTypeFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainFundingType")
@ViewScoped
/**
 * Backing bean for FundingType code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainFundingType extends BaseBean implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private FundingTypeFacadeLocal fundingTypeFacade;

    /* List of all values in the code table */
    private List<FundingType> allFundingTypes;

    /* The instance we're currently editing */
    private FundingType fundingType;

    /* PK of the selected instance */
    private Object selectedKey;

    /**
     * Default Constructor
     */
    public MaintainFundingType() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        allFundingTypes = fundingTypeFacade.findAll();
        fundingType = new FundingType();
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();
        if (validForm(1)) {
            return null;
        }
        fundingTypeFacade.create(fundingType);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        ((Droplists) findBeanDL("Droplists")).init();
        return clear();
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();
        if (validForm(2)) {
            return null;
        }
        fundingTypeFacade.edit(fundingType);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        ((Droplists) findBeanDL("Droplists")).init();
        return clear();
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        fundingTypeFacade.remove(fundingType);
        init();
        addInfoMessage("Record deleted.");
        return clear();
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        fundingType = new FundingType();
        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        fundingType = fundingTypeFacade.find(selectedKey);
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
    }
    /* Getters and Setters */

    public List<FundingType> getAllFundingTypes() {
        return allFundingTypes;
    }

    public void setAllFundingTypes(List<FundingType> allFundingTypes) {
        this.allFundingTypes = allFundingTypes;
    }

    public FundingType getFundingType() {
        return fundingType;
    }

    public void setFundingType(FundingType fundingType) {
        this.fundingType = fundingType;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    /**
     * Validate the form elements
     *
     * @param action - 1 Add 2 Update
     */
    private boolean validForm(int action) {

        boolean isError = false;
        if (fundingType.getExpiryDt() != null && fundingType.getExpiryDt().compareTo(fundingType.getEffectiveDt()) < 0) {
            addErrorMessage("Expiry Date must be greater than Effective Date");
            isError = true;
        }

        if (action == 1 && allFundingTypes != null) {
            for (int i = 0; i < allFundingTypes.size(); i++) {
                if (allFundingTypes.get(i).getFundingTypeCd().equalsIgnoreCase(fundingType.getFundingTypeCd())) {
                    addErrorMessage("Funding Type Code must be unique");
                    isError = true;
                    break;
                }
            }
        }

        return isError;
    }
}