package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.jsf.BaseBean;
import ca.bc.gov.health.mid.ejb.entity.DataApproval;
import ca.bc.gov.health.mid.ejb.entity.Snapshot;
import ca.bc.gov.health.mid.ejb.entity.SnapshotLog;
import ca.bc.gov.health.mid.ejb.session.DataApprovalFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.SnapshotFacadeLocal;
import ca.bc.gov.health.mid.ejb.snapshot.SnapshotProcessor;
import ca.bc.gov.health.mid.util.ApplicationConfig;
import ca.bc.gov.health.mid.util.MailService;
import ca.bc.gov.health.mid.util.SnapshotEmailEnum;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.FormatStyle;
import java.util.*;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.logging.Logger;
import org.primefaces.PrimeFaces;

/**
 * @author CGI Information Management Consultants Inc.
 */
@Named("Snapshots")
@ViewScoped
public class Snapshots extends BaseBean {

    private static final Logger logger = Logger.getLogger(Snapshots.class.getName());

    @EJB
    private SnapshotFacadeLocal snapshotFacade;

    @EJB
    private SnapshotProcessor snapshotProcessor;

    @EJB
    private DataApprovalFacadeLocal approvalFacade;

    @Inject
    private User user;

    @Inject
    private SnapshotErrors snapshotErrors;

    @Inject
    private MailService mailService;

    @Inject
    private ApplicationConfig applicationConfig;

    private List<Snapshot> snapshots;
    private List<DataApproval> approvals;

    /* Progress bar attributes */
    private AtomicInteger total = new AtomicInteger(1);
    private AtomicInteger complete = new AtomicInteger(0);

    private Snapshot snapshot;
    private List<String> errorMessages;
    
    private boolean sentEmail = false;

    public Snapshots() {
    }

    @PostConstruct
    public void init() {
        snapshots = snapshotFacade.findAll();
        for (Snapshot snap : snapshots) {
            Collections.sort(snap.getSnapshotLogList(), new Comparator<SnapshotLog>() {
                @Override
                public int compare(SnapshotLog o1, SnapshotLog o2) {
                    return o1.getHealthAuthorityId().getHealthAuthorityId().compareTo(o2.getHealthAuthorityId().getHealthAuthorityId());
                }
            });
        }
        approvals = approvalFacade.currentApprovals();
        total = new AtomicInteger(1);
        complete = new AtomicInteger(0);
        for (String msg : snapshotErrors.getMessages()) {
            addErrorMessage("Record could not be inserted into snapshot - " + msg);
        }
        snapshotErrors.getMessages().clear();
    }

    public String viewSnapshot() {
        return null;
    }

    private long startTime = 0;
    private double averageTime;

    public String createSnapshot() {
        try {
            if (!snapshotProcessor.createSnapshot(user.getUserName(), user.getEmail())) {
                addErrorMessage("A snapshot is already in progress.");
            } else {
                sentEmail = false;
            }           
        } catch (Exception e) {
            addErrorMessage("The snapshot could not be created: " + e.getMessage());
        }
        return null;
    }

    public void onSnapshotComplete() {
        snapshots = snapshotFacade.findAll();
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Snapshot creation completed.", ""));
        PrimeFaces.current().executeScript("PF('pbAJax').cancel();PF('progressDialog').hide();location.reload()");

        snapshotErrors.setMessages(snapshotProcessor.getMessages());
        for (String message : snapshotErrors.getMessages()) {
            addErrorMessage(message);
        }

     //   sendEmail(Objects.isNull(snapshot)?new Date():snapshot.getCreatedOnDtm());
    }

    /**
     * Send an email that a snapshot has been created
     * @param creationDate of the snapshot
     */
    private void sendEmail(Date creationDate) {
      if (!sentEmail) {

        final ZonedDateTime zonedDateTime = creationDate.toInstant().atZone(ZoneId.systemDefault());
        final String emailSubject = "Snapshot notification - " + DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM).format(zonedDateTime);

        Map<String, Object> data = new HashMap<>();
        data.put(SnapshotEmailEnum.ENVIRONMENT.getValue(), applicationConfig.getEnvironment());
        data.put(SnapshotEmailEnum.USERNAME.getValue(), user.getUserName());
        data.put(SnapshotEmailEnum.SNAPSHOT_DATE_TIME.getValue(), DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM).format(zonedDateTime));

        mailService.sendEmailTemplate(user.getEmail(), emailSubject, SnapshotEmailEnum.getEmailTemplateName(), data);
        sentEmail = true;
      }  
    }

    /**
     * Getters and Setters
     */
    public List<Snapshot> getSnapshots() {
        return snapshots;
    }

    public void setSnapshots(List<Snapshot> snapshots) {
        this.snapshots = snapshots;
    }

    public List<DataApproval> getApprovals() {
        return approvals;
    }

    public void setApprovals(List<DataApproval> approvals) {
        this.approvals = approvals;
    }

    public Snapshot getSnapshot() {
        return snapshot;
    }

    public void setSnapshot(Snapshot snapshot) {
        this.snapshot = snapshot;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public SnapshotErrors getSnapshotErrors() {
        return snapshotErrors;
    }

    public void setSnapshotErrors(SnapshotErrors snapshotErrors) {
        this.snapshotErrors = snapshotErrors;
    }
}
