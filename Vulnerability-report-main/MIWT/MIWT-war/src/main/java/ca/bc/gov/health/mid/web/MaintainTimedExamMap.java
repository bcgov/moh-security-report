package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.jsf.BaseBean;
import ca.bc.gov.health.mid.ejb.entity.HealthAuthority;
import ca.bc.gov.health.mid.ejb.entity.TimedExamMap;
import ca.bc.gov.health.mid.ejb.session.HealthAuthorityFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.TimedExamMapFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainTimedExamMap")
@ViewScoped
/**
 * Backing bean for TimedExamMap code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainTimedExamMap extends BaseBean implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private TimedExamMapFacadeLocal timedExamMapFacade;

    @EJB
    private HealthAuthorityFacadeLocal healthAuthorityFacade;

    /* List of all values in the code table */
    private List<TimedExamMap> allTimedExamMaps;

    /* The instance we're currently editing */
    private TimedExamMap timedExamMap;

    /* PK of the selected instance */
    private Object selectedKey;

    private HealthAuthority selectedHealthAuthority;
    private Object mappedValue;
    private String haTimedExamCd;

    /**
     * Default Constructor
     */
    public MaintainTimedExamMap() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        clear();
    }

    /**
     * update the list by HA
     */
    public String changeHealthAuthority() {
        allTimedExamMaps = timedExamMapFacade.findAllByHA(timedExamMap.getHealthAuthorityId());

        if (allTimedExamMaps == null || allTimedExamMaps.isEmpty()) {
            selectedHealthAuthority = healthAuthorityFacade.find(timedExamMap.getHealthAuthorityId().getHealthAuthorityId());
        } else {
            selectedHealthAuthority = allTimedExamMaps.get(0).getHealthAuthorityId();
        }

        timedExamMap = new TimedExamMap();
        timedExamMap.setHealthAuthorityId(selectedHealthAuthority);

        return null;
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        timedExamMapFacade.create(timedExamMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        timedExamMapFacade.edit(timedExamMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        timedExamMapFacade.remove(timedExamMapFacade.find(selectedKey));

        init();
        addInfoMessage("Record deleted.");
        return null;
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        haTimedExamCd = null;
        mappedValue = null;

        timedExamMap = new TimedExamMap();

        if (user.isHaUser()) {
            timedExamMap.setHealthAuthorityId(user.getHealthAuthority());
            allTimedExamMaps = timedExamMapFacade.findAllByHA(timedExamMap.getHealthAuthorityId());
        } else {
            timedExamMap.setHealthAuthorityId(new HealthAuthority());
        }

        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        timedExamMap = timedExamMapFacade.find(selectedKey);
        haTimedExamCd = timedExamMap.getHaTimedExamCd();
        mappedValue = timedExamMap.getTimedExamYn();
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (timedExamMap.getHealthAuthorityId() != null && timedExamMap.getHealthAuthorityId().getHealthAuthorityId() == null) {
            timedExamMap.setHealthAuthorityId(null);
        }
    }
    /* Getters and Setters */

    public List<TimedExamMap> getAllTimedExamMaps() {
        return allTimedExamMaps;
    }

    public void setAllTimedExamMaps(List<TimedExamMap> allTimedExamMaps) {
        this.allTimedExamMaps = allTimedExamMaps;
    }

    public TimedExamMap getTimedExamMap() {
        return timedExamMap;
    }

    public void setTimedExamMap(TimedExamMap timedExamMap) {
        this.timedExamMap = timedExamMap;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public HealthAuthority getSelectedHealthAuthority() {
        return selectedHealthAuthority;
    }

    public Object getMappedValue() {
        return mappedValue;
    }

    public void setMappedValue(Object mappedValue) {
        this.mappedValue = mappedValue;
    }

    public String getHaTimedExamCd() {
        return haTimedExamCd;
    }

    public void setHaTimedExamCd(String haTimedExamCd) {
        this.haTimedExamCd = haTimedExamCd;
    }

    private void populateModelFields() {
        timedExamMap.setHaTimedExamCd(haTimedExamCd);
        timedExamMap.setTimedExamYn(mappedValue != null ? mappedValue.toString() : null);

    }

    private boolean isValid() {

        boolean isError = false;

        if (haTimedExamCd == null || haTimedExamCd.isEmpty()) {
            super.addErrorMessage(getResourceValue("TimedExamMap.haTimedExamCd.desc") + " is required");
            isError = true;
        }

        if (mappedValue == null || mappedValue.toString().isEmpty()) {
            super.addErrorMessage(getResourceValue("TimedExamMap.timedExamYn.desc") + " is required");
            isError = true;
        }

        for (TimedExamMap row : allTimedExamMaps) {
            if (!row.getTimedExamMapId().equals(timedExamMap.getTimedExamMapId()) &&
                    row.getHealthAuthorityId().equals(timedExamMap.getHealthAuthorityId()) &&
                    row.getHaTimedExamCd().equalsIgnoreCase(haTimedExamCd)) {
                super.addErrorMessage(getResourceValue("TimedExamMap.haTimedExamCd.desc") + " must be unique");
                isError = true;
            }
        }

        return isError;
    }
}