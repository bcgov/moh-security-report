package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.jsf.BaseBean;
import jakarta.faces.context.FacesContext;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import org.apache.commons.beanutils.PropertyUtils;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class MappingScreen extends BaseBean {

    protected Map<String, Object> codesByCode;
    protected Map<String, Object> codesByDescription;
    protected boolean byDescription = true;

    public String toggleDisplay() {
        byDescription = !byDescription;
        return null;
    }

    public Map<String, Object> getCodesByCode() {
        return codesByCode;
    }

    public Map<String, Object> getDropListData() {
        return byDescription ? codesByDescription : codesByCode;
    }

    public Map<String, Object> getCodesByDescription() {
        return codesByDescription;
    }

    public boolean getByDescription() {
        return byDescription;
    }

    public void setByDescription(boolean byDescription) {
        this.byDescription = byDescription;
    }

    void setupDropLists(List values, String labelProperty, String valueProperty) {
        codesByCode = new TreeMap<>();
        codesByDescription = new TreeMap<>();
        for (Object row : values) {
            try {
                String label = (String) PropertyUtils.getProperty(row, labelProperty);
                if (label.length()>70){
                    label = label.substring(0,67)+"...";
                }
                Object value = PropertyUtils.getProperty(row, valueProperty);
                try {
                    Date expiryDate = (Date) PropertyUtils.getProperty(row, "expiryDt");
                    if (expiryDate == null || expiryDate.after(new Date())) {
                        codesByCode.put(value + " [" + label + "]", value);
                        codesByDescription.put(label + " [" + value + "]", value);
                    }
                } catch (Exception ex) {
                    codesByCode.put(value + " [" + label + "]", value);
                    codesByDescription.put(label + " [" + value + "]", value);
                }
            } catch (Exception e) {
                FacesContext.getCurrentInstance().getExternalContext().log(e.getMessage(), e);
            }
        }
    }

    void setupDropListsMultiLabel(List values, String[] labelProperty, String valueProperty) {
        codesByCode = new TreeMap<>();
        codesByDescription = new TreeMap<>();
        for (Object row : values) {
            try {
                String label1 = (String) PropertyUtils.getProperty(row, labelProperty[0]);
                String label2 = (String) PropertyUtils.getProperty(row, labelProperty[1]);
                Object value = PropertyUtils.getProperty(row, valueProperty);
                try {
                    Date expiryDate = (Date) PropertyUtils.getProperty(row, "expiryDt");
                    if (expiryDate == null || expiryDate.after(new Date())) {
                        codesByDescription.put(label1 + " [" + label2 + "]", value);
                        codesByCode.put(label2 + " [" + label1 + "]", value);
                    }
                } catch (Exception ex) {
                    codesByDescription.put(label1 + " [" + label2 + "]", value);
                    codesByCode.put(label2 + " [" + label1 + "]", value);
                }
            } catch (Exception e) {
                FacesContext.getCurrentInstance().getExternalContext().log(e.getMessage(), e);
            }
        }
    }
//    void setupDropLists(List values, String labelProperty, String valueProperty) {
//        codesByCode = new TreeMap<>();
//        codesByDescription = new TreeMap<>();
//        for (Object row : values) {
//            try {
//                String label = (String) PropertyUtils.getProperty(row, labelProperty);
//                Object value = PropertyUtils.getProperty(row, valueProperty);
//                codesByCode.put(value + " [" + label + "]", value.toString());
//                codesByDescription.put(label + " [" + value + "]", value.toString());
//            } catch (Exception e) {
//                FacesContext.getCurrentInstance().getExternalContext().log(e.getMessage(), e);
//            }
//        }
//    }
}
