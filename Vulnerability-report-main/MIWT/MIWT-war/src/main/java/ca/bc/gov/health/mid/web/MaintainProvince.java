package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.jsf.BaseBean;
import ca.bc.gov.health.mid.ejb.entity.Province;
import ca.bc.gov.health.mid.ejb.session.ProvinceFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainProvince")
@ViewScoped
/**
 * Backing bean for Province code table maintenance
 * @author JSF Code Generator
 */
public class MaintainProvince extends BaseBean implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private ProvinceFacadeLocal provinceFacade;

    @Inject
    private Droplists droplists;

    /* List of all values in the code table */
    private List<Province> allProvinces;

    /* The instance we're currently editing */
    private Province province;

    /* PK of the selected instance */
    private Object selectedKey;

    /**
     * Default Constructor
     */
    public MaintainProvince() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        allProvinces = provinceFacade.findAll();
        province = new Province();
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();
        if (validForm(1)) {
            return null;
        }
        provinceFacade.create(province);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        ((Droplists) findBeanDL("Droplists")).init();
        return clear();
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();
        if (validForm(2)) {
            return null;
        }
        provinceFacade.edit(province);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        ((Droplists) findBeanDL("Droplists")).init();
        return clear();
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        provinceFacade.remove(province);
        init();
        droplists.reloadProvinces();
        addInfoMessage("Record deleted.");
        return clear();
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        province = new Province();
        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        province = provinceFacade.find(selectedKey);
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
    }

    /* Getters and Setters */
    public List<Province> getAllProvinces() {
        return allProvinces;
    }

    public void setAllProvinces(List<Province> allProvinces) {
        this.allProvinces = allProvinces;
    }

    public Province getProvince() {
        return province;
    }

    public void setProvince(Province province) {
        this.province = province;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    /**
     * Validate the form elements
     *
     * @param action - 1 Add 2 Update
     */
    private boolean validForm(int action) {


        boolean isError = false;
        if (province.getExpiryDt() != null && province.getExpiryDt().compareTo(province.getEffectiveDt()) < 0) {
            addErrorMessage("Expiry Date must be greater than Effective Date");
            isError = true;
        }

        if (action == 1 && allProvinces != null) {
            for (int i = 0; i < allProvinces.size(); i++) {
                if (allProvinces.get(i).getProvinceCd().equalsIgnoreCase(province.getProvinceCd())) {
                    addErrorMessage("Province Code must be unique");
                    isError = true;
                    break;
                }
            }
        }

        return isError;
    }
}