package ca.bc.gov.health.jsf;

import ca.bc.gov.health.mid.web.Droplists;
import ca.bc.gov.health.mid.web.User;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.application.FacesMessage.Severity;
import jakarta.faces.component.UIComponent;
import jakarta.faces.component.UIInput;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Inject;
import jakarta.servlet.http.HttpServletResponse;
import java.io.OutputStream;
import java.util.List;
import java.util.ResourceBundle;
import org.primefaces.component.datatable.DataTable;
import org.primefaces.component.export.ExportConfiguration;
import org.primefaces.component.export.Exporter;

/**
 * Base class for JSF backing beans
 *
 * @author CGI Information Management Consultants Inc.
 */
public class BaseBean implements java.io.Serializable {

    @Inject
    protected User user;
    private ResourceBundle bundle;

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }


    /**
     * Looks up a bean in the FacesContext
     *
     * @param name String - name of the managed bean
     * @return Object - the managed bean instance
     */
    //TODO Commented as reference.
//    public Object findBean(String name) {
//        FacesContext facesContext = FacesContext.getCurrentInstance();
//        return facesContext.getApplication().createValueBinding("#{" + name + "}").getValue(facesContext);
//    }

    public Object findBean(String name) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        return facesContext.getApplication().getExpressionFactory().createValueExpression(facesContext.getELContext(), "#{" + name + "}", this.getClass()).getValue(facesContext.getELContext());
    }

    public Object findBeanDL(String name) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        return facesContext.getApplication().getExpressionFactory().createValueExpression(facesContext.getELContext(), "#{" + name + "}", Droplists.class).getValue(facesContext.getELContext());
    }
    
    public void addErrorMessage(String msg) {
        addMessage(msg, FacesMessage.SEVERITY_ERROR);
    }

    public void addInfoMessage(String msg) {
        addMessage(msg, FacesMessage.SEVERITY_INFO);
    }

    private void addMessage(String msg, Severity severity) {
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(severity, msg, msg));
    }

    public void resetComponent(String componentId) {
        UIComponent form = (UIComponent) FacesContext.getCurrentInstance().getViewRoot().findComponent(componentId);
        resetComponent(form);
    }

    public void resetComponent(UIComponent form) {
        for (UIComponent uic : form.getChildren()) {
            if (uic instanceof UIInput) {
                UIInput evh = (UIInput) uic;
                evh.resetValue();
            }
            resetComponent(uic);
        }
    }

    /**
     * Exports a search results table as a PDF document
     *
     * @return String
     */
    public String exportSearchResultsAsPdf() {
        exportSearchResults("pdf");
        return null;
    }

    /**
     * Exports a search results table as a PDF document
     *
     * @return String
     */
    public String exportSearchResultsAsXls() {
        exportSearchResults("xls");
        return null;
    }

    /**
     * Exports a search results table as a PDF document
     *
     * @return String
     */
    public String exportSearchResultsAsCsv() {
        exportSearchResults("csv");
        return null;
    }

    /**
     * Exports a RichTable or PrimeTable to the desired format
     *
     * @param type - CSV / XLS / PDF
     * @return
     */
    private String exportSearchResults(String type) {
        FacesContext fc = FacesContext.getCurrentInstance();
        HttpServletResponse response = (HttpServletResponse) fc.getExternalContext().getResponse();
        response.reset();
        Object component = fc.getViewRoot().findComponent("form1:resultsTable");
        DataTable dt = (DataTable) component;
        List<DataTable> dtTables = null;
        dtTables.add(dt);
        
//        if (component instanceof UIDataTable) {
//            UIDataTable rdt = (UIDataTable) fc.getViewRoot().findComponent("form1:resultsTable");
//            dt = new DataTable();
//            dt.setValue(rdt.getValue());
//            dt.setVar(rdt.getVar());
//            dt.getChildren().addAll(rdt.getChildren());
//        } else {
//            dt = (DataTable) component;
//        }

//Exporter exporter = ExporterFactory.getExporterForType(type, null);
      Exporter exporter = null ;
      //exporter.
      ExportConfiguration test = ExportConfiguration.builder().encodingType("UTF-8").build();

      OutputStream ops = null;
        try {
            //exporter.export(fc, dt, "export", false, false, "UTF-8", null, null, null, null);
            exporter.export(fc, dtTables, ops,  test);
            fc.responseComplete();
        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Unable to export: " + e.getMessage(), "Unable to export: " + e.getMessage()));
        }

        return null;
    }

    public String getResourceValue(String key) {

        if (bundle == null) {
            FacesContext context = FacesContext.getCurrentInstance();
            bundle = context.getApplication().getResourceBundle(context, "msg");

        }

        return bundle.getString(key);

    }
}
