package ca.bc.gov.health.jsf;

import jakarta.faces.model.SelectItem;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import org.apache.commons.beanutils.PropertyUtils;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class SelectItemHelper {

    public static Comparator<SelectItem> comparator = new Comparator<SelectItem>() {
                public int compare(SelectItem o1, SelectItem o2) {
                    return o1.getLabel().compareTo(o2.getLabel());
                }
            };
    
    public static List buildSelectItemList(List list, String labelProperty, String valueProperty) {
        return buildSelectItemList(list, labelProperty, valueProperty, true);
    }
    
    public static List buildSelectItemList(List list, String[] labelProperty, String delimiter, String valueProperty) {
       List outList = new ArrayList();
        
        if (delimiter == null || delimiter.isEmpty()) {
            delimiter = " ";
        }
        
        for (Iterator it = list.iterator(); it.hasNext();) {
            Object item = it.next();
            SelectItem selectItem = new SelectItem();
            StringBuilder builder = new StringBuilder();
            try {
                
                for (String s : labelProperty) {
                    builder.append(PropertyUtils.getProperty(item, s).toString()).append(delimiter);
                }
                
                // remove trailing delimiter
                builder.delete(builder.length() - delimiter.length(), builder.length());               
                
                selectItem.setValue(PropertyUtils.getProperty(item, valueProperty));
                selectItem.setLabel(builder.toString());
                outList.add(selectItem);
            } catch (Exception e) {
                //e.printStackTrace();
            }
        }
        
        Collections.sort(outList, comparator);
           
        return outList;
    }
    
    public static List buildSelectItemList(List list, String[] labelProperty, String delimiter, String valueProperty, boolean sort) {
       List outList = new ArrayList();
        
        if (delimiter == null || delimiter.isEmpty()) {
            delimiter = " ";
        }
        
        for (Iterator it = list.iterator(); it.hasNext();) {
            Object item = it.next();
            SelectItem selectItem = new SelectItem();
            StringBuilder builder = new StringBuilder();
            try {
                
                for (String s : labelProperty) {
                    builder.append(PropertyUtils.getProperty(item, s).toString()).append(delimiter);
                }
                
                // remove trailing delimiter
                builder.delete(builder.length() - delimiter.length(), builder.length());               
                
                selectItem.setValue(PropertyUtils.getProperty(item, valueProperty));
                selectItem.setLabel(builder.toString());
                outList.add(selectItem);
            } catch (Exception e) {
                //e.printStackTrace();
            }
        }
        
        if (sort) {
            Collections.sort(outList, comparator);
        }   
           
        return outList;
    }

    public static List buildSelectItemList(List list, String labelProperty, String valueProperty, boolean doSort) {
        List outList = new ArrayList();
        for (Iterator it = list.iterator(); it.hasNext();) {
            Object item = it.next();
            SelectItem selectItem = new SelectItem();
            try {
                selectItem.setValue(PropertyUtils.getProperty(item, valueProperty));
                selectItem.setLabel(PropertyUtils.getProperty(item, labelProperty).toString());
                outList.add(selectItem);
            } catch (Exception e) {
                //e.printStackTrace();
            }
        }
        if (doSort) {
            Collections.sort(outList, comparator);
        }
        return outList;
    }
}
