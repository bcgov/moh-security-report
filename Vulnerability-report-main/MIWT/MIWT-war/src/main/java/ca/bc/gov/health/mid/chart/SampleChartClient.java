package ca.bc.gov.health.mid.chart;

import java.io.FileOutputStream;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * Sample client application - renders a chart with random data.
 * @author CGI Information Management Consultants Inc.
 */
public final class SampleChartClient {

    private static final Double HUNDRED = 100.0;
    private static final Integer DEFAULT_WIDTH = 800;
    private static final Integer DEFAULT_HEIGHT = 600;

    /**
     * Private Constructor
     */
    private SampleChartClient() {
    }

    /**
     * Sample Application
     * @param args String[]
     * @throws java.lang.Exception
     */
    public static void main(String[] args) throws Exception {
        ChartHelper.createCategoryPieChart("Distribution of cases by Priority Level ", ChartHelper.createPieDataset(createSimpleMap()),
                DEFAULT_WIDTH, DEFAULT_HEIGHT, new FileOutputStream("c:/chart1.png"));
        ChartHelper.createCategoryBarChart("Distribution of cases by Priority Level and Health Authority","Health Authority","% of Cases", ChartHelper.createDataset(createMap()),
                DEFAULT_WIDTH, DEFAULT_HEIGHT, new FileOutputStream("c:/chart2.png"));
    }

    /**
     * Creates sample data set for use with sample application
     * @return Map<String,Map<String,Double>>
     */
    private static Map<String, Map<String, Double>> createMap() {
        Map<String, Map<String, Double>> map = new LinkedHashMap<String, Map<String, Double>>();
        Map<String, Double> pl1 = new LinkedHashMap<String, Double>();
        pl1.put("FHA", Math.random() * HUNDRED);
        pl1.put("IHA", Math.random() * HUNDRED);
        pl1.put("NHA", Math.random() * HUNDRED);
        pl1.put("PHSA", Math.random() * HUNDRED);
        pl1.put("VCHA", Math.random() * HUNDRED);
        pl1.put("VIHA", Math.random() * HUNDRED);
        pl1.put("BC", pl1.get("FHA") + pl1.get("IHA") + pl1.get("NHA") + pl1.get("PHSA") + pl1.get("VCHA") + pl1.get("VIHA"));
        map.put("P1", pl1);
        Map<String, Double> pl2 = new LinkedHashMap<String, Double>();
        pl2.put("FHA", Math.random() * HUNDRED);
        pl2.put("IHA", Math.random() * HUNDRED);
        pl2.put("NHA", Math.random() * HUNDRED);
        pl2.put("PHSA", Math.random() * HUNDRED);
        pl2.put("VCHA", Math.random() * HUNDRED);
        pl2.put("VIHA", Math.random() * HUNDRED);
        pl2.put("BC", pl2.get("FHA") + pl2.get("IHA") + pl2.get("NHA") + pl2.get("PHSA") + pl2.get("VCHA") + pl2.get("VIHA"));
        map.put("P2", pl2);
        Map<String, Double> pl3 = new LinkedHashMap<String, Double>();
        pl3.put("FHA", Math.random() * HUNDRED);
        pl3.put("IHA", Math.random() * HUNDRED);
        pl3.put("NHA", Math.random() * HUNDRED);
        pl3.put("PHSA", Math.random() * HUNDRED);
        pl3.put("VCHA", Math.random() * HUNDRED);
        pl3.put("VIHA", Math.random() * HUNDRED);
        pl3.put("BC", pl3.get("FHA") + pl3.get("IHA") + pl3.get("NHA") + pl3.get("PHSA") + pl3.get("VCHA") + pl3.get("VIHA"));
        map.put("P3", pl3);
        Map<String, Double> pl4 = new LinkedHashMap<String, Double>();
        pl4.put("FHA", Math.random() * HUNDRED);
        pl4.put("IHA", Math.random() * HUNDRED);
        pl4.put("NHA", Math.random() * HUNDRED);
        pl4.put("PHSA", Math.random() * HUNDRED);
        pl4.put("VCHA", Math.random() * HUNDRED);
        pl4.put("VIHA", Math.random() * HUNDRED);
        pl4.put("BC", pl4.get("FHA") + pl4.get("IHA") + pl4.get("NHA") + pl4.get("PHSA") + pl4.get("VCHA") + pl4.get("VIHA"));
        map.put("P4", pl4);
        Map<String, Double> pl5 = new LinkedHashMap<String, Double>();
        pl5.put("FHA", Math.random() * HUNDRED);
        pl5.put("IHA", Math.random() * HUNDRED);
        pl5.put("NHA", Math.random() * HUNDRED);
        pl5.put("PHSA", Math.random() * HUNDRED);
        pl5.put("VCHA", Math.random() * HUNDRED);
        pl5.put("VIHA", Math.random() * HUNDRED);
        pl5.put("BC", pl5.get("FHA") + pl5.get("IHA") + pl5.get("NHA") + pl5.get("PHSA") + pl5.get("VCHA") + pl5.get("VIHA"));
        map.put("Indeterminate", pl5);

        return map;
    }

    /**
     * Creates sample data set for use with sample application
     * @return Map<String,Map<String,Double>>
     */
    private static Map<String, Double> createSimpleMap() {
        Map<String, Double> map = new LinkedHashMap<String, Double>();
        map.put("P1", Math.random() * HUNDRED);
        map.put("P2", Math.random() * HUNDRED);
        map.put("P3", Math.random() * HUNDRED);
        map.put("P4", Math.random() * HUNDRED);
        map.put("Indeterminate", Math.random() * HUNDRED);
        return map;
    }
}
