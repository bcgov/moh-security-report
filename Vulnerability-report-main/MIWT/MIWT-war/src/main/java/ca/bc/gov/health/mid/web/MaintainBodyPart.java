package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.jsf.BaseBean;
import ca.bc.gov.health.mid.ejb.entity.BodyPart;
import ca.bc.gov.health.mid.ejb.session.BodyPartFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

/**
 * @author CGI Information Management Consultants Inc.
 */
@Named("MaintainBodyPart")
@ViewScoped
public class MaintainBodyPart extends BaseBean implements java.io.Serializable {

    @EJB
    private BodyPartFacadeLocal bodyPartFacade;

    @Inject
    private Droplists droplists;

    /* List of all values in the code table */
    private List<BodyPart> allBodyParts;

    /* The instance we're currently editing */
    private BodyPart bodyPart;

    /* PK of the selected instance */
    private Object selectedKey;


    /**
     * Creates a new instance of MaintainBodyPart
     */
    public MaintainBodyPart() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        allBodyParts = bodyPartFacade.findAll();
        bodyPart = new BodyPart();

    }

    /**
     * Adds a new record
     */
    public String add() {

        if (validForm(1)) {
            return null;
        }
        bodyPartFacade.create(bodyPart);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        ((Droplists) findBeanDL("Droplists")).init();
        return clear();
    }

    /**
     * Updates an existing record
     */
    public String update() {
        if (validForm(2)) {
            return null;
        }

        bodyPartFacade.edit(bodyPart);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        ((Droplists) findBeanDL("Droplists")).init();
        return clear();
    }

    /**
     * Deletes a record
     */
    public String delete() {

        bodyPartFacade.remove(bodyPart);
        init();
        droplists.reloadBodyparts();
        addInfoMessage("Record deleted.");
        return clear();
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        bodyPart = new BodyPart();

        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        bodyPart = bodyPartFacade.find(selectedKey);
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }


    public List<BodyPart> getAllBodyParts() {
        return allBodyParts;
    }

    public void setAllBodyParts(List<BodyPart> allBodyParts) {
        this.allBodyParts = allBodyParts;
    }

    public BodyPart getBodyPart() {
        return bodyPart;
    }

    public void setBodyPart(BodyPart bodyPart) {
        this.bodyPart = bodyPart;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }


    /**
     * Validate the form elements
     *
     * @param action - 1 Add 2 Update
     */
    private boolean validForm(int action) {

        boolean isError = false;
        if (bodyPart.getExpiryDt() != null && bodyPart.getExpiryDt().compareTo(bodyPart.getEffectiveDt()) < 0) {
            addErrorMessage("Expiry Date must be greater than Effective Date");
            isError = true;
        }

        if (action == 1 && allBodyParts != null) {
            for (int i = 0; i < allBodyParts.size(); i++) {
                if (allBodyParts.get(i).getBpCd().equals(bodyPart.getBpCd())) {
                    addErrorMessage("Body Part must be unique");
                    isError = true;
                    break;
                }
            }
        }
        return isError;
    }

}
