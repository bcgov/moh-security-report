package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.mid.ejb.entity.HealthAuthority;
import ca.bc.gov.health.mid.ejb.entity.PostponeReason;
import ca.bc.gov.health.mid.ejb.entity.PostponeReasonMap;
import ca.bc.gov.health.mid.ejb.session.HealthAuthorityFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.PostponeReasonFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.PostponeReasonMapFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainPostponeReasonMap")
@ViewScoped
/**
 * Backing bean for PostponeReasonMap code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainPostponeReasonMap extends MappingScreen implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private PostponeReasonMapFacadeLocal postponeReasonMapFacade;
    @EJB
    private PostponeReasonFacadeLocal postponeReasonFacade;
    @EJB
    private HealthAuthorityFacadeLocal healthAuthorityFacade;

    /* List of all values in the code table */
    private List<PostponeReasonMap> allPostponeReasonMaps;

    /* The instance we're currently editing */
    private PostponeReasonMap postponeReasonMap;

    /* PK of the selected instance */
    private Object selectedKey;
    private HealthAuthority selectedHealthAuthority;
    private Object mappedValue;
    private String haPostponeReasonCd;

    /**
     * Default Constructor
     */
    public MaintainPostponeReasonMap() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        clear();
        super.setupDropLists(postponeReasonFacade.findAllValid(), "postponeReasonDesc", "postponeReasonCd");
    }

    /**
     * update the list by HA
     */
    public String changeHealthAuthority() {
        allPostponeReasonMaps = postponeReasonMapFacade.findAllByHA(postponeReasonMap.getHealthAuthorityId());

        if (allPostponeReasonMaps == null || allPostponeReasonMaps.isEmpty()) {
            selectedHealthAuthority = healthAuthorityFacade.find(postponeReasonMap.getHealthAuthorityId().getHealthAuthorityId());
        } else {
            selectedHealthAuthority = allPostponeReasonMaps.get(0).getHealthAuthorityId();
        }

        postponeReasonMap = new PostponeReasonMap();
        postponeReasonMap.setHealthAuthorityId(selectedHealthAuthority);

        return null;
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        postponeReasonMapFacade.create(postponeReasonMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        postponeReasonMap.setPostponeReasonCd(new PostponeReason(postponeReasonMap.getPostponeReasonCd().getPostponeReasonCd()));
        postponeReasonMapFacade.edit(postponeReasonMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        postponeReasonMapFacade.remove(postponeReasonMapFacade.find(selectedKey));

        init();
        addInfoMessage("Record deleted.");
        return null;
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        haPostponeReasonCd = null;
        mappedValue = null;

        postponeReasonMap = new PostponeReasonMap();
        postponeReasonMap.setPostponeReasonCd(new PostponeReason());

        if (user.isHaUser()) {
            postponeReasonMap.setHealthAuthorityId(user.getHealthAuthority());
            allPostponeReasonMaps = postponeReasonMapFacade.findAllByHA(postponeReasonMap.getHealthAuthorityId());
        } else {
            postponeReasonMap.setHealthAuthorityId(new HealthAuthority());
        }

        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        postponeReasonMap = postponeReasonMapFacade.find(selectedKey);
        haPostponeReasonCd = postponeReasonMap.getHaPostponeReasonCd();
        mappedValue = postponeReasonMap.getPostponeReasonCd().getPostponeReasonCd();
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (postponeReasonMap.getPostponeReasonCd() != null && postponeReasonMap.getPostponeReasonCd().getPostponeReasonCd() == null) {
            postponeReasonMap.setPostponeReasonCd(null);
        }
        if (postponeReasonMap.getHealthAuthorityId() != null && postponeReasonMap.getHealthAuthorityId().getHealthAuthorityId() == null) {
            postponeReasonMap.setHealthAuthorityId(null);
        }
    }
    /* Getters and Setters */

    public List<PostponeReasonMap> getAllPostponeReasonMaps() {
        return allPostponeReasonMaps;
    }

    public void setAllPostponeReasonMaps(List<PostponeReasonMap> allPostponeReasonMaps) {
        this.allPostponeReasonMaps = allPostponeReasonMaps;
    }

    public PostponeReasonMap getPostponeReasonMap() {
        return postponeReasonMap;
    }

    public void setPostponeReasonMap(PostponeReasonMap postponeReasonMap) {
        this.postponeReasonMap = postponeReasonMap;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public HealthAuthority getSelectedHealthAuthority() {
        return selectedHealthAuthority;
    }

    public Object getMappedValue() {
        return mappedValue;
    }

    public void setMappedValue(Object mappedValue) {
        this.mappedValue = mappedValue;
    }

    public String getHaPostponeReasonCd() {
        return haPostponeReasonCd;
    }

    public void setHaPostponeReasonCd(String haPostponeReasonCd) {
        this.haPostponeReasonCd = haPostponeReasonCd;
    }

    private void populateModelFields() {
        postponeReasonMap.setHaPostponeReasonCd(haPostponeReasonCd);

        if (postponeReasonMap.getPostponeReasonCd() != null) {
            postponeReasonMap.getPostponeReasonCd().setPostponeReasonCd(mappedValue != null ? mappedValue.toString() : null);
        } else {
            postponeReasonMap.setPostponeReasonCd(new PostponeReason(mappedValue != null ? mappedValue.toString() : null));
        }
    }

    private boolean isValid() {

        boolean isError = false;

        if (haPostponeReasonCd == null || haPostponeReasonCd.isEmpty()) {
            super.addErrorMessage(getResourceValue("PostponeReasonMap.haPostponeReasonCd.desc") + " is required");
            isError = true;
        }

        if (mappedValue == null || mappedValue.toString().isEmpty()) {
            super.addErrorMessage(getResourceValue("PostponeReasonMap.postponeReasonCd.desc") + " is required");
            isError = true;
        }

        for (PostponeReasonMap row : allPostponeReasonMaps) {
            if (!row.getPostponeReasonMapId().equals(postponeReasonMap.getPostponeReasonMapId()) &&
                    row.getHealthAuthorityId().equals(postponeReasonMap.getHealthAuthorityId()) &&
                    row.getHaPostponeReasonCd().equalsIgnoreCase(haPostponeReasonCd)) {
                super.addErrorMessage(getResourceValue("PostponeReasonMap.haPostponeReasonCd.desc") + " must be unique");
                isError = true;
            }
        }

        return isError;
    }
}