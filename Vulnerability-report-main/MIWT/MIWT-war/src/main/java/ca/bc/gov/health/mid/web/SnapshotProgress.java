package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.mid.ejb.snapshot.SnapshotProcessor;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Named;
import java.util.concurrent.TimeUnit;

@Named("SnapshotProgress")
@ApplicationScoped
public class SnapshotProgress {

    @EJB
    private SnapshotProcessor processor;

    private long startTime;

    public void onSnapshotStart() {
        startTime = System.currentTimeMillis();
    }

    public String getRunningTime() {
        long millis = processor.getRunningTime();
        if (millis < 60000) {
            return String.format("%d sec", TimeUnit.MILLISECONDS.toSeconds(millis));
        }
        return String.format("%d min, %02d sec",
                TimeUnit.MILLISECONDS.toMinutes(millis),
                TimeUnit.MILLISECONDS.toSeconds(millis) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis))
        );
    }

    public String getAverageTime() {
        long millis = processor.getAverageTime();
        if (millis == 0) {
            return "";
        }
        if (millis < 60000) {
            return String.format("%02d sec", TimeUnit.MILLISECONDS.toSeconds(millis));
        }
        return String.format("%02d min, %02d sec",
                TimeUnit.MILLISECONDS.toMinutes(millis),
                TimeUnit.MILLISECONDS.toSeconds(millis) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis))
        );
    }

    public Integer getProgress() {
        return processor.getProgress();
    }

    public boolean isInProgress() {
        return processor.getState() == SnapshotProcessor.State.ARCHIVE
                || processor.getState() == SnapshotProcessor.State.PROCESS;
    }

    public String getState() {
        switch (processor.getState()) {
            case ARCHIVE:
                return "Archiving snapshot...";
            case PROCESS:
                return "Processing new snapshot...";
            case COMPLETE:
            case IDLE:
            default:
                return "Waiting...";
        }
    }
}
