package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.mid.ejb.entity.FundingType;
import ca.bc.gov.health.mid.ejb.entity.FundingTypeMap;
import ca.bc.gov.health.mid.ejb.entity.HealthAuthority;
import ca.bc.gov.health.mid.ejb.session.FundingTypeFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.FundingTypeMapFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.HealthAuthorityFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainFundingTypeMap")
@ViewScoped
/**
 * Backing bean for FundingTypeMap code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainFundingTypeMap extends MappingScreen implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private FundingTypeMapFacadeLocal fundingTypeMapFacade;
    @EJB
    private FundingTypeFacadeLocal fundingTypeFacade;
    @EJB
    private HealthAuthorityFacadeLocal healthAuthorityFacade;

    /* List of all values in the code table */
    private List<FundingTypeMap> allFundingTypeMaps;

    /* The instance we're currently editing */
    private FundingTypeMap fundingTypeMap;

    /* PK of the selected instance */
    private Object selectedKey;
    private HealthAuthority selectedHealthAuthority;
    private Object mappedValue;
    private String haFundingTypeCd;

    /**
     * Default Constructor
     */
    public MaintainFundingTypeMap() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        clear();
        super.setupDropLists(fundingTypeFacade.findAllValid(), "fundingTypeDesc", "fundingTypeCd");
    }

    /**
     * update the list by HA
     */
    public String changeHealthAuthority() {
        allFundingTypeMaps = fundingTypeMapFacade.findAllByHA(fundingTypeMap.getHealthAuthorityId());

        if (allFundingTypeMaps == null || allFundingTypeMaps.isEmpty()) {
            selectedHealthAuthority = healthAuthorityFacade.find(fundingTypeMap.getHealthAuthorityId().getHealthAuthorityId());
        } else {
            selectedHealthAuthority = allFundingTypeMaps.get(0).getHealthAuthorityId();
        }

        fundingTypeMap = new FundingTypeMap();
        fundingTypeMap.setHealthAuthorityId(selectedHealthAuthority);

        return null;
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        fundingTypeMapFacade.create(fundingTypeMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        fundingTypeMap.setFundingTypeCd(new FundingType(fundingTypeMap.getFundingTypeCd().getFundingTypeCd()));
        fundingTypeMapFacade.edit(fundingTypeMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        fundingTypeMapFacade.remove(fundingTypeMapFacade.find(selectedKey));

        init();
        addInfoMessage("Record deleted.");
        return null;
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        haFundingTypeCd = null;
        mappedValue = null;

        fundingTypeMap = new FundingTypeMap();
        fundingTypeMap.setFundingTypeCd(new FundingType());

        if (user.isHaUser()) {
            fundingTypeMap.setHealthAuthorityId(user.getHealthAuthority());
            allFundingTypeMaps = fundingTypeMapFacade.findAllByHA(fundingTypeMap.getHealthAuthorityId());
        } else {
            fundingTypeMap.setHealthAuthorityId(new HealthAuthority());
        }

        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        fundingTypeMap = fundingTypeMapFacade.find(selectedKey);
        haFundingTypeCd = fundingTypeMap.getHaFundingTypeCd();
        mappedValue = fundingTypeMap.getFundingTypeCd().getFundingTypeCd();
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (fundingTypeMap.getHealthAuthorityId() != null && fundingTypeMap.getHealthAuthorityId().getHealthAuthorityId() == null) {
            fundingTypeMap.setHealthAuthorityId(null);
        }
        if (fundingTypeMap.getFundingTypeCd() != null && fundingTypeMap.getFundingTypeCd().getFundingTypeCd() == null) {
            fundingTypeMap.setFundingTypeCd(null);
        }
    }
    /* Getters and Setters */

    public List<FundingTypeMap> getAllFundingTypeMaps() {
        return allFundingTypeMaps;
    }

    public void setAllFundingTypeMaps(List<FundingTypeMap> allFundingTypeMaps) {
        this.allFundingTypeMaps = allFundingTypeMaps;
    }

    public FundingTypeMap getFundingTypeMap() {
        return fundingTypeMap;
    }

    public void setFundingTypeMap(FundingTypeMap fundingTypeMap) {
        this.fundingTypeMap = fundingTypeMap;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public HealthAuthority getSelectedHealthAuthority() {
        return selectedHealthAuthority;
    }

    public Object getMappedValue() {
        return mappedValue;
    }

    public void setMappedValue(Object mappedValue) {
        this.mappedValue = mappedValue;
    }

    public String getHaFundingTypeCd() {
        return haFundingTypeCd;
    }

    public void setHaFundingTypeCd(String haFundingTypeCd) {
        this.haFundingTypeCd = haFundingTypeCd;
    }

    private void populateModelFields() {
        fundingTypeMap.setHaFundingTypeCd(haFundingTypeCd);

        if (fundingTypeMap.getFundingTypeCd() != null) {
            fundingTypeMap.getFundingTypeCd().setFundingTypeCd(mappedValue != null ? mappedValue.toString() : null);
        } else {
            fundingTypeMap.setFundingTypeCd(new FundingType(mappedValue != null ? mappedValue.toString() : null));
        }
    }

    private boolean isValid() {

        boolean isError = false;

        if (haFundingTypeCd == null || haFundingTypeCd.isEmpty()) {
            super.addErrorMessage(getResourceValue("FundingTypeMap.haFundingTypeCd.desc") + " is required");
            isError = true;
        }

        if (mappedValue == null || mappedValue.toString().isEmpty()) {
            super.addErrorMessage(getResourceValue("FundingTypeMap.fundingTypeCd.desc") + " is required");
            isError = true;
        }

        for (FundingTypeMap row : allFundingTypeMaps) {
            if (!row.getFundingTypeMapId().equals(fundingTypeMap.getFundingTypeMapId()) &&
                    row.getHealthAuthorityId().equals(fundingTypeMap.getHealthAuthorityId()) &&
                    row.getHaFundingTypeCd().equalsIgnoreCase(haFundingTypeCd)) {
                super.addErrorMessage(getResourceValue("FundingTypeMap.haFundingTypeCd.desc") + " must be unique");
                isError = true;
            }
        }

        return isError;
    }
}