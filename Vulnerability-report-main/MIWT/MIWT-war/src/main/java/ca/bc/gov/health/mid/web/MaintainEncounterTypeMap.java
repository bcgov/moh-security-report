package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.mid.ejb.entity.EncounterType;
import ca.bc.gov.health.mid.ejb.entity.EncounterTypeMap;
import ca.bc.gov.health.mid.ejb.entity.HealthAuthority;
import ca.bc.gov.health.mid.ejb.session.EncounterTypeFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.EncounterTypeMapFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.HealthAuthorityFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainEncounterTypeMap")
@ViewScoped
/**
 * Backing bean for EncounterTypeMap code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainEncounterTypeMap extends MappingScreen implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private EncounterTypeMapFacadeLocal encounterTypeMapFacade;
    @EJB
    private EncounterTypeFacadeLocal encounterTypeFacade;
    @EJB
    private HealthAuthorityFacadeLocal healthAuthorityFacade;

    /* List of all values in the code table */
    private List<EncounterTypeMap> allEncounterTypeMaps;

    /* The instance we're currently editing */
    private EncounterTypeMap encounterTypeMap;

    /* PK of the selected instance */
    private Object selectedKey;
    private HealthAuthority selectedHealthAuthority;
    private Object mappedValue;
    private String haEncounterTypeCd;

    /**
     * Default Constructor
     */
    public MaintainEncounterTypeMap() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        clear();
        super.setupDropLists(encounterTypeFacade.findAllValid(), "encounterTypeDesc", "encounterTypeCd");
    }

    /**
     * update the list by HA
     */
    public String changeHealthAuthority() {
        allEncounterTypeMaps = encounterTypeMapFacade.findAllByHA(encounterTypeMap.getHealthAuthorityId());

        if (allEncounterTypeMaps == null || allEncounterTypeMaps.isEmpty()) {
            selectedHealthAuthority = healthAuthorityFacade.find(encounterTypeMap.getHealthAuthorityId().getHealthAuthorityId());
        } else {
            selectedHealthAuthority = allEncounterTypeMaps.get(0).getHealthAuthorityId();
        }

        encounterTypeMap = new EncounterTypeMap();
        encounterTypeMap.setHealthAuthorityId(selectedHealthAuthority);

        return null;
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        encounterTypeMapFacade.create(encounterTypeMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        encounterTypeMap.setEncounterTypeCd(new EncounterType(encounterTypeMap.getEncounterTypeCd().getEncounterTypeCd()));
        encounterTypeMapFacade.edit(encounterTypeMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        encounterTypeMapFacade.remove(encounterTypeMapFacade.find(selectedKey));

        init();
        addInfoMessage("Record deleted.");
        return null;
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        haEncounterTypeCd = null;
        mappedValue = null;

        encounterTypeMap = new EncounterTypeMap();
        encounterTypeMap.setEncounterTypeCd(new EncounterType());

        if (user.isHaUser()) {
            encounterTypeMap.setHealthAuthorityId(user.getHealthAuthority());
            allEncounterTypeMaps = encounterTypeMapFacade.findAllByHA(encounterTypeMap.getHealthAuthorityId());
        } else {
            encounterTypeMap.setHealthAuthorityId(new HealthAuthority());
        }

        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        encounterTypeMap = encounterTypeMapFacade.find(selectedKey);
        haEncounterTypeCd = encounterTypeMap.getHaEncounterTypeCd();
        mappedValue = encounterTypeMap.getEncounterTypeCd().getEncounterTypeCd();
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (encounterTypeMap.getHealthAuthorityId() != null && encounterTypeMap.getHealthAuthorityId().getHealthAuthorityId() == null) {
            encounterTypeMap.setHealthAuthorityId(null);
        }
        if (encounterTypeMap.getEncounterTypeCd() != null && encounterTypeMap.getEncounterTypeCd().getEncounterTypeCd() == null) {
            encounterTypeMap.setEncounterTypeCd(null);
        }
    }
    /* Getters and Setters */

    public List<EncounterTypeMap> getAllEncounterTypeMaps() {
        return allEncounterTypeMaps;
    }

    public void setAllEncounterTypeMaps(List<EncounterTypeMap> allEncounterTypeMaps) {
        this.allEncounterTypeMaps = allEncounterTypeMaps;
    }

    public EncounterTypeMap getEncounterTypeMap() {
        return encounterTypeMap;
    }

    public void setEncounterTypeMap(EncounterTypeMap encounterTypeMap) {
        this.encounterTypeMap = encounterTypeMap;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public HealthAuthority getSelectedHealthAuthority() {
        return selectedHealthAuthority;
    }

    public Object getMappedValue() {
        return mappedValue;
    }

    public void setMappedValue(Object mappedValue) {
        this.mappedValue = mappedValue;
    }

    public String getHaEncounterTypeCd() {
        return haEncounterTypeCd;
    }

    public void setHaEncounterTypeCd(String haEncounterTypeCd) {
        this.haEncounterTypeCd = haEncounterTypeCd;
    }

    private void populateModelFields() {
        encounterTypeMap.setHaEncounterTypeCd(haEncounterTypeCd);

        if (encounterTypeMap.getEncounterTypeCd() != null) {
            encounterTypeMap.getEncounterTypeCd().setEncounterTypeCd(mappedValue != null ? mappedValue.toString() : null);
        } else {
            encounterTypeMap.setEncounterTypeCd(new EncounterType(mappedValue != null ? mappedValue.toString() : null));
        }
    }

    private boolean isValid() {

        boolean isError = false;

        if (haEncounterTypeCd == null || haEncounterTypeCd.isEmpty()) {
            super.addErrorMessage(getResourceValue("EncounterTypeMap.haEncounterTypeCd.desc") + " is required");
            isError = true;
        }

        if (mappedValue == null || mappedValue.toString().isEmpty()) {
            super.addErrorMessage(getResourceValue("EncounterTypeMap.encounterTypeCd.desc") + " is required");
            isError = true;
        }

        for (EncounterTypeMap row : allEncounterTypeMaps) {
            if (!row.getEncounterTypeMapId().equals(encounterTypeMap.getEncounterTypeMapId()) &&
                    row.getHealthAuthorityId().equals(encounterTypeMap.getHealthAuthorityId()) &&
                    row.getHaEncounterTypeCd().equalsIgnoreCase(haEncounterTypeCd)) {
                super.addErrorMessage(getResourceValue("EncounterTypeMap.haEncounterTypeCd.desc") + " must be unique");
                isError = true;
            }
        }

        return isError;
    }
}