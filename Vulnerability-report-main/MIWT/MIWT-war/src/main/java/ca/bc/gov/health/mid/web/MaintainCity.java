package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.jsf.BaseBean;
import ca.bc.gov.health.mid.ejb.entity.City;
import ca.bc.gov.health.mid.ejb.entity.Province;
import ca.bc.gov.health.mid.ejb.session.CityFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainCity")
@ViewScoped
/**
 * Backing bean for City code table maintenance
 * @author JSF Code Generator
 */
public class MaintainCity extends BaseBean implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private CityFacadeLocal cityFacade;

    @Inject
    private Droplists droplists;

    /* List of all values in the code table */
    private List<City> allCitys;

    /* The instance we're currently editing */
    private City city;

    /* PK of the selected instance */
    private Object selectedKey;

    /**
     * Default Constructor
     */
    public MaintainCity() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        allCitys = cityFacade.findAll();
        city = new City();
        if (city.getProvinceCd() == null) {
            city.setProvinceCd(new Province());
        }
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();
        if (validForm()) {
            return null;
        }
        cityFacade.create(city);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        ((Droplists) findBeanDL("Droplists")).init();
        return clear();
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();
        if (validForm()) {
            return null;
        }
        cityFacade.edit(city);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        ((Droplists) findBeanDL("Droplists")).init();
        return clear();
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        cityFacade.remove(city);
        init();
        droplists.reloadCitys();
        addInfoMessage("Record deleted.");
        return clear();
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        city = new City();
        if (city.getProvinceCd() == null) {
            city.setProvinceCd(new Province());
        }
        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        city = cityFacade.find(selectedKey);
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (city.getProvinceCd() != null && city.getProvinceCd().getProvinceCd() == null) {
            city.setProvinceCd(null);
        }
    }

    /* Getters and Setters */
    public List<City> getAllCitys() {
        return allCitys;
    }

    public void setAllCitys(List<City> allCitys) {
        this.allCitys = allCitys;
    }

    public City getCity() {
        return city;
    }

    public void setCity(City city) {
        this.city = city;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    /* Validate the form elements */
    private boolean validForm() {

        boolean isError = false;
        if (city.getExpiryDt() != null && city.getExpiryDt().compareTo(city.getEffectiveDt()) < 0) {
            addErrorMessage("Expiry Date must be greater than Effective Date");
            isError = true;
        }

        if (allCitys != null) {
            for (City allCity : allCitys) {
                if (allCity.getProvinceCd().getProvinceCd().equals(city.getProvinceCd().getProvinceCd())
                        && allCity.getCityNm().equalsIgnoreCase(city.getCityNm())) {
                    addErrorMessage("City name must be unique");
                    isError = true;
                    break;
                }
            }
        }
        return isError;
    }
}