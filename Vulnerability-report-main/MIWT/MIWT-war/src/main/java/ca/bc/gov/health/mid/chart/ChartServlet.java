package ca.bc.gov.health.mid.chart;

import ca.bc.gov.health.mid.ejb.entity.custom.CaseDistributionFilter;
import ca.bc.gov.health.mid.web.CaseDistribution;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.jfree.data.general.KeyedValues2DDataset;
import org.jfree.data.general.PieDataset;

/**
 * Servlet to display charts generated by JFreeChart
 *
 * @author CGI Information Management Consultants Inc.
 */
public class ChartServlet extends HttpServlet {

    SimpleDateFormat sdf = new SimpleDateFormat("dd MMM yyyy");

    /**
     * Handles HTTP Get requests
     *
     * @param request  HttpServletRequest
     * @param response HttpServletResponse
     * @throws ServletException
     * @throws IOException
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        CaseDistribution cd = (CaseDistribution) request.getSession().getAttribute("CaseDistribution");
        if (cd == null || cd.getData() == null) {
            return;
        }
        String chartType = "pie";
        if (cd.getData().values().iterator().next().size() > 2) {
            chartType = "bar";
        }

        // These headers are not really preventing the browser from caching the chart image
        // The workaround is to map the ChartServlet to accept any request in form /chart/*, and used a UUID
        // to generate an alphanumeric sequence to make the image request appear unique all the time
        response.setHeader("Cache-Control", "no-store, max-age=0, must-revalidate, proxy-revalidate");
        response.setHeader("Expires", "0");
        response.setContentType("image/png");

        if ("pie".equals(chartType)) {
            createPieChart(response, cd);
        } else if ("bar".equals(chartType)) {
            createBarChart(response, cd);
        }

        response.getOutputStream().flush();
        response.flushBuffer();
    }

    /**
     * Renders a pie chart to the servlet output stream
     *
     * @param response HttpServletResponse - HTTP response
     * @param cd       CaseDistribution - parameters
     */
    private void createPieChart(HttpServletResponse response, CaseDistribution cd) {
        Map<String, Map> data = cd.getData();
        Map<String, Double> values = new HashMap<>();
        for (String key : data.keySet()) {
            if (!key.equals("Total")) {
                Map map = data.get(key);
                Double value = Double.parseDouble(map.get("total").toString());
                if (value > 0) {
                    values.put(key, value);
                }
            }
        }
        PieDataset dataSet = ChartHelper.createPieDataset(values);
        try {
            String dateRange = sdf.format(cd.getStartDate()) + " to " + sdf.format(cd.getEndDate());
            ChartHelper.createCategoryPieChart(cd.getCriteria().getCriteriaDisplayTxt() + dateRange, dataSet, 800, 600, response.getOutputStream());
        } catch (Exception e) {
            getServletContext().log("Error while creating Pie chart", e);
        }
    }

    /**
     * Renders a bar chart to the servlet output stream
     *
     * @param response HttpServletResponse - HTTP response
     * @param cd       CaseDistribution - parameters
     */
    private void createBarChart(HttpServletResponse response, CaseDistribution cd) {
        Map<String, Map> data = cd.getData();
        Map<String, Map<String, Double>> map = new HashMap<>();
        for (Map row : data.values()) {
            Map<String, Double> newRow = new HashMap<>();
            for (Object key : row.keySet()) {
                String keyVal = key.toString();
                if (!"label".equals(keyVal)) {
                    Double value = Double.parseDouble(row.get(key).toString());
                    if (value > 0) {
                        newRow.put(keyVal, value);
                    }
                }
            }
            if (!"Total".equals(row.get("label").toString())) {
                map.put(row.get("label").toString(), newRow);
            }
        }
        KeyedValues2DDataset dataSet = ChartHelper.createDataset(map);

        String xLabel = null;
        try {
            List<CaseDistributionFilter> filters = cd.getCriteria().getFilters();

            for (CaseDistributionFilter f : filters) {

                if (f.getSecondaryGrouping()) {
                    xLabel = f.getLabel();
                    break;
                }
            }
            String dateRange = sdf.format(cd.getStartDate()) + " to " + sdf.format(cd.getEndDate());
            ChartHelper.createCategoryBarChart(cd.getCriteria().getGroupingDisplayTxt() + dateRange, xLabel, "% of Cases", dataSet, 800, 600, response.getOutputStream());
        } catch (Exception e) {
            getServletContext().log("Error while creating Bar chart", e);
        }
    }

}
