package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.jsf.BaseBean;
import ca.bc.gov.health.mid.ejb.entity.AgeRange;
import ca.bc.gov.health.mid.ejb.session.AgeRangeFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainAgeRange")
@ViewScoped
/**
 * Backing bean for AgeRange code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainAgeRange extends BaseBean implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private AgeRangeFacadeLocal ageRangeFacade;

    /* List of all values in the code table */
    private List<AgeRange> allAgeRanges;

    /* The instance we're currently editing */
    private AgeRange ageRange;

    /* PK of the selected instance */
    private Object selectedKey;
    //   @Min(value=0, message="Start age cannot be less than zero(0)")
    private String startAge;
    //  @Min(value=1, message="End age cannot be less than 1")
    private String endAge;

    /**
     * Default Constructor
     */
    public MaintainAgeRange() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        allAgeRanges = ageRangeFacade.findAll();
        ageRange = new AgeRange();
        startAge="";
        endAge="";
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();
        if (validForm(1)) {
            return null;
        }

        updateAgesOnEntity();
        ageRangeFacade.create(ageRange);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        return clear();
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();
        if (validForm(2)) {
            return null;
        }
        updateAgesOnEntity();
        ageRangeFacade.edit(ageRange);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        return clear();
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        ageRangeFacade.remove(ageRange);
        addInfoMessage("Record deleted.");
        init();
        //TODO Validate this following line if Delete get enabled for Age Range.
        ((Droplists) findBeanDL("Droplists")).init();
        return clear();
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        ageRange = new AgeRange();
        startAge = "";
        endAge = "";
        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        ageRange = ageRangeFacade.find(selectedKey);
         startAge = Long.toString(ageRange.getStartAge());
        endAge = Long.toString(ageRange.getEndAge());
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
    }
    /* Getters and Setters */

    public List<AgeRange> getAllAgeRanges() {
        return allAgeRanges;
    }

    public void setAllAgeRanges(List<AgeRange> allAgeRanges) {
        this.allAgeRanges = allAgeRanges;
    }

    public AgeRange getAgeRange() {
        return ageRange;
    }

    public void setAgeRange(AgeRange ageRange) {
        this.ageRange = ageRange;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public String getStartAge() {
        return startAge;
    }

    public void setStartAge(String startAge) {
        this.startAge = startAge;
    }

    public String getEndAge() {
        return endAge;
    }

    public void setEndAge(String endAge) {
        this.endAge = endAge;
    }

    private void updateAgesOnEntity() {
        ageRange.setStartAge(Long.parseLong(startAge));
        ageRange.setEndAge(Long.parseLong(endAge));
    }

    /**
     * Validate the form elements
     *
     * @param action - 1 Add 2 Update
     */
    private boolean validForm(int action) {

        //ResourceBundle messageResource = ResourceBundle.getBundle("MessageResources"); 
        boolean isError = false;
        if (ageRange.getExpiryDt() != null && ageRange.getExpiryDt().compareTo(ageRange.getEffectiveDt()) < 0) {
            addErrorMessage("Expiry Date must be greater than Effective Date");
            isError = true;
        }

        long tempStartAge = 0;
        long tempEndAge = 0;

        try {
            tempStartAge = Long.parseLong(startAge);

            if (tempStartAge < 0) {
                throw new IllegalArgumentException();
            }

        } catch (Exception e) {
            addErrorMessage("Start age must be a positive whole number");
            isError = true;
        }

        try {
            tempEndAge = Long.parseLong(endAge);

            if (tempEndAge < 0) {
                throw new IllegalArgumentException();
            }

        } catch (Exception e) {
            addErrorMessage("End age must be a positive whole number");
            isError = true;
            return isError;
        }

        if (tempStartAge >= tempEndAge) {
            addErrorMessage("Start age must be less than End age");
            isError = true;
        }

        if (action == 1 && allAgeRanges != null) {
            long tempMax = 0;
            for (int i = 0; i < allAgeRanges.size(); i++) {
                Long currentEndAge = allAgeRanges.get(i).getEndAge();
                if (tempMax <= currentEndAge) {
                    tempMax = currentEndAge;
                }
            }
            if (tempStartAge != tempMax + 1) {
                addErrorMessage("Age ranges must be continuous and no overlapping allowed");
                isError = true;
            }
        }
        return isError;
    }
}