package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.mid.ejb.entity.CancellationReason;
import ca.bc.gov.health.mid.ejb.entity.CancellationReasonMap;
import ca.bc.gov.health.mid.ejb.entity.HealthAuthority;
import ca.bc.gov.health.mid.ejb.session.CancellationReasonFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.CancellationReasonMapFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.HealthAuthorityFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainCancellationReasonMap")
@ViewScoped
/**
 * Backing bean for CancellationReasonMap code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainCancellationReasonMap extends MappingScreen implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private CancellationReasonMapFacadeLocal cancellationReasonMapFacade;
    @EJB
    private CancellationReasonFacadeLocal cancellationReasonFacade;
    @EJB
    private HealthAuthorityFacadeLocal healthAuthorityFacade;

    /* List of all values in the code table */
    private List<CancellationReasonMap> allCancellationReasonMaps;

    /* The instance we're currently editing */
    private CancellationReasonMap cancellationReasonMap;

    /* PK of the selected instance */
    private Object selectedKey;
    private HealthAuthority selectedHealthAuthority;
    private Object mappedValue;
    private String haCancellationReasonCd;

    /**
     * Default Constructor
     */
    public MaintainCancellationReasonMap() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {

        clear();
        super.setupDropLists(cancellationReasonFacade.findAllValid(), "cancellationReasonDesc", "cancellationReasonCd");
    }

    /**
     * update the list by HA
     */
    public String changeHealthAuthority() {
        allCancellationReasonMaps = cancellationReasonMapFacade.findAllByHA(cancellationReasonMap.getHealthAuthorityId());

        if (allCancellationReasonMaps == null || allCancellationReasonMaps.isEmpty()) {
            selectedHealthAuthority = healthAuthorityFacade.find(cancellationReasonMap.getHealthAuthorityId().getHealthAuthorityId());
        } else {
            selectedHealthAuthority = allCancellationReasonMaps.get(0).getHealthAuthorityId();
        }

        cancellationReasonMap = new CancellationReasonMap();
        cancellationReasonMap.setHealthAuthorityId(selectedHealthAuthority);

        return null;
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        cancellationReasonMapFacade.create(cancellationReasonMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        cancellationReasonMap.setCancellationReasonCd(new CancellationReason(cancellationReasonMap.getCancellationReasonCd().getCancellationReasonCd()));
        cancellationReasonMapFacade.edit(cancellationReasonMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        cancellationReasonMapFacade.remove(cancellationReasonMapFacade.find(selectedKey));

        init();
        addInfoMessage("Record deleted.");
        return null;
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        haCancellationReasonCd = null;
        mappedValue = null;

        cancellationReasonMap = new CancellationReasonMap();
        cancellationReasonMap.setCancellationReasonCd(new CancellationReason());

        if (user.isHaUser()) {
            cancellationReasonMap.setHealthAuthorityId(user.getHealthAuthority());
            allCancellationReasonMaps = cancellationReasonMapFacade.findAllByHA(cancellationReasonMap.getHealthAuthorityId());
        } else {
            cancellationReasonMap.setHealthAuthorityId(new HealthAuthority());
        }
        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        cancellationReasonMap = cancellationReasonMapFacade.find(selectedKey);
        haCancellationReasonCd = cancellationReasonMap.getHaCancellationReasonCd();
        mappedValue = cancellationReasonMap.getCancellationReasonCd().getCancellationReasonCd();
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (cancellationReasonMap.getHealthAuthorityId() != null && cancellationReasonMap.getHealthAuthorityId().getHealthAuthorityId() == null) {
            cancellationReasonMap.setHealthAuthorityId(null);
        }
        if (cancellationReasonMap.getCancellationReasonCd() != null && cancellationReasonMap.getCancellationReasonCd().getCancellationReasonCd() == null) {
            cancellationReasonMap.setCancellationReasonCd(null);
        }
    }
    /* Getters and Setters */

    public List<CancellationReasonMap> getAllCancellationReasonMaps() {
        return allCancellationReasonMaps;
    }

    public void setAllCancellationReasonMaps(List<CancellationReasonMap> allCancellationReasonMaps) {
        this.allCancellationReasonMaps = allCancellationReasonMaps;
    }

    public CancellationReasonMap getCancellationReasonMap() {
        return cancellationReasonMap;
    }

    public void setCancellationReasonMap(CancellationReasonMap cancellationReasonMap) {
        this.cancellationReasonMap = cancellationReasonMap;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public HealthAuthority getSelectedHealthAuthority() {
        return selectedHealthAuthority;
    }

    public Object getMappedValue() {
        return mappedValue;
    }

    public String getHaCancellationReasonCd() {
        return haCancellationReasonCd;
    }

    public void setHaCancellationReasonCd(String haCancellationReasonCd) {
        this.haCancellationReasonCd = haCancellationReasonCd;
    }

    public void setMappedValue(Object mappedValue) {
        this.mappedValue = mappedValue;


    }

    private void populateModelFields() {
        cancellationReasonMap.setHaCancellationReasonCd(haCancellationReasonCd);

        if (cancellationReasonMap.getCancellationReasonCd() != null) {
            cancellationReasonMap.getCancellationReasonCd().setCancellationReasonCd(mappedValue != null ? mappedValue.toString() : null);
        } else {
            cancellationReasonMap.setCancellationReasonCd(new CancellationReason(mappedValue != null ? mappedValue.toString() : null));
        }
    }

    private boolean isValid() {

        boolean isError = false;

        if (haCancellationReasonCd == null || haCancellationReasonCd.isEmpty()) {
            super.addErrorMessage(getResourceValue("CancellationReasonMap.haCancellationReasonCd.desc") + " is required");
            isError = true;
        }

        if (mappedValue == null || mappedValue.toString().isEmpty()) {
            super.addErrorMessage(getResourceValue("CancellationReasonMap.cancellationReasonCd.desc") + " is required");
            isError = true;
        }

        for (CancellationReasonMap row : allCancellationReasonMaps) {
            if (!row.getCancellationRsnMapId().equals(cancellationReasonMap.getCancellationRsnMapId()) &&
                    row.getHealthAuthorityId().equals(cancellationReasonMap.getHealthAuthorityId()) &&
                    row.getHaCancellationReasonCd().equalsIgnoreCase(haCancellationReasonCd)) {
                super.addErrorMessage(getResourceValue("CancellationReasonMap.haCancellationReasonCd.desc") + " must be unique");
                isError = true;
            }
        }

        return isError;
    }
}