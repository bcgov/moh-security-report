package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.mid.ejb.entity.HealthAuthority;
import ca.bc.gov.health.mid.ejb.entity.Modality;
import ca.bc.gov.health.mid.ejb.entity.ModalityMap;
import ca.bc.gov.health.mid.ejb.session.HealthAuthorityFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.ModalityFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.ModalityMapFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainModalityMap")
@ViewScoped
/**
 * Backing bean for ModalityMap code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainModalityMap extends MappingScreen implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private ModalityMapFacadeLocal modalityMapFacade;
    @EJB
    private ModalityFacadeLocal modalityFacade;
    @EJB
    private HealthAuthorityFacadeLocal healthAuthorityFacade;

    /* List of all values in the code table */
    private List<ModalityMap> allModalityMaps;

    /* The instance we're currently editing */
    private ModalityMap modalityMap;

    /* PK of the selected instance */
    private Object selectedKey;
    private HealthAuthority selectedHealthAuthority;
    private Object mappedValue;
    private String haModalityCd;

    /**
     * Default Constructor
     */
    public MaintainModalityMap() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        clear();
        super.setupDropLists(modalityFacade.findAllValid(), "modalityTypeDesc", "modalityTypeCd");
    }

    /**
     * update the list by HA
     */
    public String changeHealthAuthority() {
        allModalityMaps = modalityMapFacade.findAllByHA(modalityMap.getHealthAuthorityId());

        if (allModalityMaps == null || allModalityMaps.isEmpty()) {
            selectedHealthAuthority = healthAuthorityFacade.find(modalityMap.getHealthAuthorityId().getHealthAuthorityId());
        } else {
            selectedHealthAuthority = allModalityMaps.get(0).getHealthAuthorityId();
        }

        modalityMap = new ModalityMap();
        modalityMap.setHealthAuthorityId(selectedHealthAuthority);

        return null;
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        modalityMapFacade.create(modalityMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        modalityMap.setModalityCd(new Modality(modalityMap.getModalityCd().getModalityTypeCd()));
        modalityMapFacade.edit(modalityMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        modalityMapFacade.remove(modalityMapFacade.find(selectedKey));

        init();
        addInfoMessage("Record deleted.");
        return null;
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        haModalityCd = null;
        mappedValue = null;

        modalityMap = new ModalityMap();
        modalityMap.setModalityCd(new Modality());

        if (user.isHaUser()) {
            modalityMap.setHealthAuthorityId(user.getHealthAuthority());
            allModalityMaps = modalityMapFacade.findAllByHA(modalityMap.getHealthAuthorityId());
        } else {
            modalityMap.setHealthAuthorityId(new HealthAuthority());
        }

        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        modalityMap = modalityMapFacade.find(selectedKey);
        haModalityCd = modalityMap.getHaModalityCd();
        mappedValue = modalityMap.getModalityCd().getModalityTypeCd();
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (modalityMap.getModalityCd() != null && modalityMap.getModalityCd().getModalityTypeCd() == null) {
            modalityMap.setModalityCd(null);
        }
        if (modalityMap.getHealthAuthorityId() != null && modalityMap.getHealthAuthorityId().getHealthAuthorityId() == null) {
            modalityMap.setHealthAuthorityId(null);
        }
    }
    /* Getters and Setters */

    public List<ModalityMap> getAllModalityMaps() {
        return allModalityMaps;
    }

    public void setAllModalityMaps(List<ModalityMap> allModalityMaps) {
        this.allModalityMaps = allModalityMaps;
    }

    public ModalityMap getModalityMap() {
        return modalityMap;
    }

    public void setModalityMap(ModalityMap modalityMap) {
        this.modalityMap = modalityMap;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public HealthAuthority getSelectedHealthAuthority() {
        return selectedHealthAuthority;
    }

    public Object getMappedValue() {
        return mappedValue;
    }

    public void setMappedValue(Object mappedValue) {
        this.mappedValue = mappedValue;
    }

    public String getHaModalityCd() {
        return haModalityCd;
    }

    public void setHaModalityCd(String haModalityCd) {
        this.haModalityCd = haModalityCd;
    }

    private void populateModelFields() {
        modalityMap.setHaModalityCd(haModalityCd);

        if (modalityMap.getModalityCd() != null) {
            modalityMap.getModalityCd().setModalityTypeCd(mappedValue != null ? mappedValue.toString() : null);
        } else {
            modalityMap.setModalityCd(new Modality(mappedValue != null ? mappedValue.toString() : null));
        }
    }

    private boolean isValid() {

        boolean isError = false;

        if (haModalityCd == null || haModalityCd.isEmpty()) {
            super.addErrorMessage(getResourceValue("ModalityMap.haModalityCd.desc") + " is required");
            isError = true;
        }

        if (mappedValue == null || mappedValue.toString().isEmpty()) {
            super.addErrorMessage(getResourceValue("ModalityMap.modalityCd.desc") + " is required");
            isError = true;
        }

        for (ModalityMap row : allModalityMaps) {
            if (!row.getModalityMapId().equals(modalityMap.getModalityMapId()) &&
                    row.getHealthAuthorityId().equals(modalityMap.getHealthAuthorityId()) &&
                    row.getHaModalityCd().equalsIgnoreCase(haModalityCd)) {
                super.addErrorMessage(getResourceValue("ModalityMap.haModalityCd.desc") + " must be unique");
                isError = true;
            }
        }

        return isError;
    }
}