package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.mid.ejb.entity.AnatomicalImagingRegion;
import ca.bc.gov.health.mid.ejb.entity.AnatomicalImgagingRegionMap;
import ca.bc.gov.health.mid.ejb.entity.HealthAuthority;
import ca.bc.gov.health.mid.ejb.session.AnatomicalImagingRegionFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.AnatomicalImgagingRegionMapFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.HealthAuthorityFacadeLocal;
import ca.bc.gov.health.mid.util.CSVUtils;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.primefaces.PrimeFaces;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;

@Named("MaintainAnatomicalImgagingRegionMap")
@ViewScoped
/**
 * Backing bean for AnatomicalImgagingRegionMap code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainAnatomicalImgagingRegionMap extends MappingScreen implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private AnatomicalImgagingRegionMapFacadeLocal anatomicalImgagingRegionMapFacade;
    @EJB
    private AnatomicalImagingRegionFacadeLocal anatomicalImagingFacade;

    @EJB
    private HealthAuthorityFacadeLocal healthAuthorityFacade;

    /* List of all values in the code table */
    private List<AnatomicalImgagingRegionMap> allAnatomicalImgagingRegionMaps;

    /* The instance we're currently editing */
    private AnatomicalImgagingRegionMap anatomicalImgagingRegionMap;

    /* PK of the selected instance */
    private Object selectedKey;

    private HealthAuthority selectedHealthAuthority;

    private List<AnatomicalImgagingRegionMap> anatomicalImagingRegionMapsList;

    /**
     * Default Constructor
     */
    public MaintainAnatomicalImgagingRegionMap() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {

        anatomicalImgagingRegionMap = new AnatomicalImgagingRegionMap();
        if (anatomicalImgagingRegionMap.getHealthAuthorityId() == null) {
            anatomicalImgagingRegionMap.setHealthAuthorityId(new HealthAuthority());
        }
        if (anatomicalImgagingRegionMap.getImagingRegionCd() == null) {
            anatomicalImgagingRegionMap.setImagingRegionCd(new AnatomicalImagingRegion());
        }
        if (user.isHaUser()) {
            anatomicalImgagingRegionMap.setHealthAuthorityId(user.getHealthAuthority());
            allAnatomicalImgagingRegionMaps = anatomicalImgagingRegionMapFacade.findMappingsForHA(user.getHealthAuthority());
        }

        super.setupDropLists(anatomicalImagingFacade.findAll(), "imagingRegionNm", "imagingRegionCd");
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();
        anatomicalImgagingRegionMapFacade.create(anatomicalImgagingRegionMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        //TODO Validate is that commented line is required.
        //((Droplists) findBean("Droplists")).init();
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();
        anatomicalImgagingRegionMap.setImagingRegionCd(new AnatomicalImagingRegion(anatomicalImgagingRegionMap.getImagingRegionCd().getImagingRegionCd()));
        anatomicalImgagingRegionMapFacade.edit(anatomicalImgagingRegionMap);
        anatomicalImgagingRegionMap.setHealthAuthorityId(user.getHealthAuthority());
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        //TODO Validate is that commented line is required.
        //((Droplists) findBean("Droplists")).init();
        selectedKey = null;
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        anatomicalImgagingRegionMapFacade.remove(anatomicalImgagingRegionMapFacade.find(selectedKey));

        init();
        //TODO Validate is that commented line is required.
        //((Droplists) findBean("Droplists")).init();
        addInfoMessage("Record deleted.");
        return clear();
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        anatomicalImgagingRegionMap = new AnatomicalImgagingRegionMap();
        if (anatomicalImgagingRegionMap.getHealthAuthorityId() == null) {
            anatomicalImgagingRegionMap.setHealthAuthorityId(new HealthAuthority());
        }
        if (anatomicalImgagingRegionMap.getImagingRegionCd() == null) {
            anatomicalImgagingRegionMap.setImagingRegionCd(new AnatomicalImagingRegion());
        }
        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        anatomicalImgagingRegionMap = anatomicalImgagingRegionMapFacade.find(selectedKey);
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    public String changeHealthAuthority() {

        allAnatomicalImgagingRegionMaps = anatomicalImgagingRegionMapFacade.findMappingsForHA(anatomicalImgagingRegionMap.getHealthAuthorityId());

        if (allAnatomicalImgagingRegionMaps == null || allAnatomicalImgagingRegionMaps.isEmpty()) {
            selectedHealthAuthority = healthAuthorityFacade.find(anatomicalImgagingRegionMap.getHealthAuthorityId().getHealthAuthorityId());
        } else {
            selectedHealthAuthority = allAnatomicalImgagingRegionMaps.get(0).getHealthAuthorityId();
        }

        anatomicalImgagingRegionMap = new AnatomicalImgagingRegionMap();
        anatomicalImgagingRegionMap.setHealthAuthorityId(selectedHealthAuthority);
        return null;
    }

    public StreamedContent generate() {
        anatomicalImagingRegionMapsList = anatomicalImgagingRegionMapFacade.findAll();
        ByteArrayOutputStream dest = new ByteArrayOutputStream();
        OutputStreamWriter writer = new OutputStreamWriter(dest);
        try {
            CSVUtils.writeLine(writer, Arrays.asList("ANA_IMG_REGION_MAP_ID",
                    "HA_IMAGING_REGION_CD",
                    "HA_IMAGING_REGION_DESC",
                    "CREATED_ON_DTM",
                    "LAST_MODIFIED_ON_DTM",
                    "CREATED_BY_NM",
                    "LAST_MODIFIED_BY_NM",
                    "STATELESS_TRANSACTION_NBR",
                    "HEALTH_AUTHORITY_ID",
                    "IMAGING_REGION_CD"
            ));
            for (int i = 1; i < anatomicalImagingRegionMapsList.size(); i++) {
                CSVUtils.writeLine(writer, Arrays.asList(CSVUtils.checkNull(anatomicalImagingRegionMapsList.get(i).getAnaImgRegionMapId()),
                        CSVUtils.checkNull(anatomicalImagingRegionMapsList.get(i).getHaImagingRegionCd()),
                        CSVUtils.checkNull(anatomicalImagingRegionMapsList.get(i).getHaImagingRegionDesc()),
                        CSVUtils.checkNull(anatomicalImagingRegionMapsList.get(i).getCreatedOnDtm()),
                        CSVUtils.checkNull(anatomicalImagingRegionMapsList.get(i).getLastModifiedOnDtm()),
                        CSVUtils.checkNull(anatomicalImagingRegionMapsList.get(i).getCreatedByNm()),
                        CSVUtils.checkNull(anatomicalImagingRegionMapsList.get(i).getLastModifiedByNm()),
                        CSVUtils.checkNull(anatomicalImagingRegionMapsList.get(i).getStatelessTransactionNbr()),
                        CSVUtils.checkNull(anatomicalImagingRegionMapsList.get(i).getHealthAuthorityId().getHealthAuthorityId()),
                        CSVUtils.checkNull(anatomicalImagingRegionMapsList.get(i).getImagingRegionCd().getImagingRegionCd())
                ));
            }
            writer.flush();
            writer.close();
            ByteArrayInputStream stream = new ByteArrayInputStream(dest.toByteArray());
            StreamedContent file = DefaultStreamedContent.builder().contentType("application/csv").name("downloaded_file.csv").stream(() -> stream).build();
            return file;
        } catch (IOException ex) {
            Logger.getLogger(MaintainProvinceMap.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

     /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (anatomicalImgagingRegionMap.getHealthAuthorityId() != null && anatomicalImgagingRegionMap.getHealthAuthorityId().getHealthAuthorityId() == null) {
            anatomicalImgagingRegionMap.setHealthAuthorityId(null);
        }
        if (anatomicalImgagingRegionMap.getImagingRegionCd() != null && anatomicalImgagingRegionMap.getImagingRegionCd().getImagingRegionCd() == null) {
            anatomicalImgagingRegionMap.setImagingRegionCd(null);
        }
    }
    /* Getters and Setters */

    public List<AnatomicalImgagingRegionMap> getAllAnatomicalImgagingRegionMaps() {
        return allAnatomicalImgagingRegionMaps;
    }

    public void setAllAnatomicalImgagingRegionMaps(List<AnatomicalImgagingRegionMap> allAnatomicalImgagingRegionMaps) {
        this.allAnatomicalImgagingRegionMaps = allAnatomicalImgagingRegionMaps;
    }

    public AnatomicalImgagingRegionMap getAnatomicalImgagingRegionMap() {
        return anatomicalImgagingRegionMap;
    }

    public void setAnatomicalImgagingRegionMap(AnatomicalImgagingRegionMap anatomicalImgagingRegionMap) {
        this.anatomicalImgagingRegionMap = anatomicalImgagingRegionMap;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public HealthAuthority getSelectedHealthAuthority() {
        return selectedHealthAuthority;
    }


}