package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.mid.ejb.entity.ExamReason;
import ca.bc.gov.health.mid.ejb.entity.ExamReasonMap;
import ca.bc.gov.health.mid.ejb.entity.HealthAuthority;
import ca.bc.gov.health.mid.ejb.session.ExamReasonFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.ExamReasonMapFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.HealthAuthorityFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainExamReasonMap")
@ViewScoped
/**
 * Backing bean for ExamReasonMap code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainExamReasonMap extends MappingScreen implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private ExamReasonMapFacadeLocal examReasonMapFacade;
    @EJB
    private ExamReasonFacadeLocal examReasonFacade;
    @EJB
    private HealthAuthorityFacadeLocal healthAuthorityFacade;

    /* List of all values in the code table */
    private List<ExamReasonMap> allExamReasonMaps;

    /* The instance we're currently editing */
    private ExamReasonMap examReasonMap;

    /* PK of the selected instance */
    private Object selectedKey;
    private HealthAuthority selectedHealthAuthority;
    private Object mappedValue;
    private String haExamReasonCd;

    /**
     * Default Constructor
     */
    public MaintainExamReasonMap() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        clear();
        super.setupDropLists(examReasonFacade.findAllValid(), "examReasonDesc", "examReasonCd");
    }

    public String changeHealthAuthority() {
        allExamReasonMaps = examReasonMapFacade.findAllByHA(examReasonMap.getHealthAuthorityId());

        if (allExamReasonMaps == null || allExamReasonMaps.isEmpty()) {
            selectedHealthAuthority = healthAuthorityFacade.find(examReasonMap.getHealthAuthorityId().getHealthAuthorityId());
        } else {
            selectedHealthAuthority = allExamReasonMaps.get(0).getHealthAuthorityId();
        }

        examReasonMap = new ExamReasonMap();
        examReasonMap.setHealthAuthorityId(selectedHealthAuthority);

        return null;
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        examReasonMapFacade.create(examReasonMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        examReasonMap.setExamReasonCd(new ExamReason(examReasonMap.getExamReasonCd().getExamReasonCd()));
        examReasonMapFacade.edit(examReasonMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        examReasonMapFacade.remove(examReasonMapFacade.find(selectedKey));

        init();
        addInfoMessage("Record deleted.");
        return null;
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        haExamReasonCd = null;
        mappedValue = null;

        examReasonMap = new ExamReasonMap();
        examReasonMap.setExamReasonCd(new ExamReason());

        if (user.isHaUser()) {
            examReasonMap.setHealthAuthorityId(user.getHealthAuthority());
            allExamReasonMaps = examReasonMapFacade.findAllByHA(examReasonMap.getHealthAuthorityId());
        } else {
            examReasonMap.setHealthAuthorityId(new HealthAuthority());
        }

        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        examReasonMap = examReasonMapFacade.find(selectedKey);
        haExamReasonCd = examReasonMap.getHaExamReasonCd();
        mappedValue = examReasonMap.getExamReasonCd().getExamReasonCd();
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (examReasonMap.getHealthAuthorityId() != null && examReasonMap.getHealthAuthorityId().getHealthAuthorityId() == null) {
            examReasonMap.setHealthAuthorityId(null);
        }
        if (examReasonMap.getExamReasonCd() != null && examReasonMap.getExamReasonCd().getExamReasonCd() == null) {
            examReasonMap.setExamReasonCd(null);
        }
    }
    /* Getters and Setters */

    public List<ExamReasonMap> getAllExamReasonMaps() {
        return allExamReasonMaps;
    }

    public void setAllExamReasonMaps(List<ExamReasonMap> allExamReasonMaps) {
        this.allExamReasonMaps = allExamReasonMaps;
    }

    public ExamReasonMap getExamReasonMap() {
        return examReasonMap;
    }

    public void setExamReasonMap(ExamReasonMap examReasonMap) {
        this.examReasonMap = examReasonMap;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public HealthAuthority getSelectedHealthAuthority() {
        return selectedHealthAuthority;
    }

    public Object getMappedValue() {
        return mappedValue;
    }

    public void setMappedValue(Object mappedValue) {
        this.mappedValue = mappedValue;
    }

    public String getHaExamReasonCd() {
        return haExamReasonCd;
    }

    public void setHaExamReasonCd(String haExamReasonCd) {
        this.haExamReasonCd = haExamReasonCd;
    }


    private void populateModelFields() {
        examReasonMap.setHaExamReasonCd(haExamReasonCd);

        if (examReasonMap.getExamReasonCd() != null) {
            examReasonMap.getExamReasonCd().setExamReasonCd(mappedValue != null ? mappedValue.toString() : null);
        } else {
            examReasonMap.setExamReasonCd(new ExamReason(mappedValue != null ? mappedValue.toString() : null));
        }
    }

    private boolean isValid() {

        boolean isError = false;

        if (haExamReasonCd == null || haExamReasonCd.isEmpty()) {
            super.addErrorMessage(getResourceValue("ExamReasonMap.haExamReasonCd.desc") + " is required");
            isError = true;
        }

        if (mappedValue == null || mappedValue.toString().isEmpty()) {
            super.addErrorMessage(getResourceValue("ExamReasonMap.examReasonCd.desc") + " is required");
            isError = true;
        }

        for (ExamReasonMap row : allExamReasonMaps) {
            if (!row.getExamReasonMapId().equals(examReasonMap.getExamReasonMapId()) &&
                    row.getHealthAuthorityId().equals(examReasonMap.getHealthAuthorityId()) &&
                    row.getHaExamReasonCd().equalsIgnoreCase(haExamReasonCd)) {
                super.addErrorMessage(getResourceValue("ExamReasonMap.haExamReasonCd.desc") + " must be unique");
                isError = true;
            }
        }

        return isError;
    }
}