package ca.bc.gov.health.mid.chart;

import java.awt.*;
import java.io.OutputStream;
import java.text.AttributedString;
import java.util.*;
import java.util.List;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartUtils;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.AxisLocation;
import org.jfree.chart.axis.CategoryLabelPositions;
import org.jfree.chart.labels.ItemLabelAnchor;
import org.jfree.chart.labels.ItemLabelPosition;
import org.jfree.chart.labels.PieSectionLabelGenerator;
import org.jfree.chart.labels.StandardCategoryItemLabelGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PiePlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.StackedBarRenderer;
import org.jfree.chart.renderer.category.StandardBarPainter;
import org.jfree.chart.ui.RectangleEdge;
import org.jfree.chart.ui.TextAnchor;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.general.DefaultKeyedValues2DDataset;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.data.general.KeyedValues2DDataset;
import org.jfree.data.general.PieDataset;

/**
 * Utility class for rendering Charts
 *
 * @author CGI Information Management Consultants Inc.
 */
public final class ChartHelper {

    /**
     * Font constants *
     */
    private static final Font TITLE_FONT = new Font("Helvetica, Arial, sans-serif", Font.BOLD, 24);
    private static final Font LEGEND_FONT = new Font("Helvetica, Arial, sans-serif", Font.BOLD, 16);
    private static final Font BASE_FONT = new Font("Helvetica, Arial, sans-serif", Font.PLAIN, 10);
    private static final Font BASE_FONT_LARGE = new Font("Helvetica, Arial, sans-serif", Font.PLAIN, 16);
    /**
     * Color constants *
     */
    private static final Color[] COLORS = new Color[]{
        new Color(22, 35, 54),
        new Color(85, 16, 18),
        new Color(27, 62, 27),
        new Color(100, 65, 0),
        new Color(57, 97, 100),
        new Color(100, 67, 83)
    };
    private static final Color TITLE_COLOR = new Color(0, 20, 40);

    /**
     * Private Constructor
     */
    private ChartHelper() {
    }

    public static PieDataset createPieDataset(Map<String, Double> map) {
        DefaultPieDataset ds = new DefaultPieDataset();
        Set<String> cats = map.keySet();
        List<String> categories = new ArrayList<String>();
        categories.addAll(cats);
        Collections.sort(categories);
        for (String category : categories) {
            ds.insertValue(ds.getItemCount(), category, map.get(category));
        }
        return ds;
    }

    /**
     * Converts a generic data structure to a KeyedValues2DDataset
     *
     * @param map Map<String, Map<String, Double>> @ret
     * u
     * rn KeyedValues2DDataset
     */
    public static KeyedValues2DDataset createDataset(Map<String, Map<String, Double>> map) {
        DefaultKeyedValues2DDataset ds = new DefaultKeyedValues2DDataset();
        Set<String> cats = map.keySet();
        List<String> categories = new ArrayList<String>();
        categories.addAll(cats);
        Collections.sort(categories);
        Set<String> allSubcategories = new HashSet<String>();
        for (String category : categories) {
            allSubcategories.addAll(map.get(category).keySet());
        }
        List<String> subCategories = new ArrayList<String>();
        subCategories.addAll(allSubcategories);
        Collections.sort(subCategories);
        for (String category : categories) {
            for (String subCategory : subCategories) {
                ds.addValue(map.get(category).get(subCategory), category, subCategory);
            }
        }
        return ds;
    }

    /**
     * Creates a category bar chart based on the input parameters
     *
     * @param title String - Title of the chart
     * @param ds DataSet - Dataset to be rendered
     * @param width - Width of the output image in pixels
     * @param height - Height of the output image in pixels
     * @param os OutputStream - Destination of the output image
     * @throws java.lang.Exception
     */
    public static void createCategoryPieChart(String title, PieDataset ds,
            int width, int height, OutputStream os) {

        JFreeChart chart = ChartFactory.createPieChart(title, ds, true, false, false);

        PiePlot plot = (PiePlot) chart.getPlot();

        int rows = ds.getItemCount();
        for (int i = 0; i < rows; i++) {
            plot.setSectionPaint(i, COLORS[i % COLORS.length]);
        }

        chart.getLegend().setPosition(RectangleEdge.TOP);
        chart.getLegend().setItemFont(LEGEND_FONT);
        chart.getLegend().setBorder(0, 0, 0, 0);
        chart.getTitle().setFont(TITLE_FONT);
        chart.getTitle().setPaint(TITLE_COLOR);


        //plot.set
        plot.setBackgroundPaint(Color.white);
        plot.setOutlineVisible(false);
        plot.setLabelFont(BASE_FONT_LARGE);
        plot.setCircular(true);

        plot.setLabelGenerator(new PieSectionLabelGenerator() {
            @Override
            public String generateSectionLabel(PieDataset pd, Comparable cmprbl) {
                int total = getTotal(pd);
                int count = pd.getValue(cmprbl).intValue();
                return cmprbl.toString() + " " + (int) (Math.round((count * 100) / total)) + "% (" + count + ")";
            }

            private int getTotal(PieDataset pd) {
                int count = pd.getItemCount();
                int sum = 0;
                for (int i = 0; i < count; i++) {
                    sum += pd.getValue(i).intValue();
                }
                return sum;
            }

            @Override
            public AttributedString generateAttributedSectionLabel(PieDataset pd, Comparable cmprbl) {
                return new AttributedString(generateSectionLabel(pd, cmprbl));
            }
        });

        try {
            ChartUtils.writeChartAsPNG(os, chart, width, height);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Creates a category bar chart based on the input parameters
     *
     * @param title String - Title of the chart
     * @param ds DataSet - Dataset to be rendered
     * @param width - Width of the output image in pixels
     * @param height - Height of the output image in pixels
     * @param os OutputStream - Destination of the output image
     * @throws java.lang.Exception
     */
    public static void createCategoryBarChart(String title, String xLabel, String yLabel,
            CategoryDataset ds, int width, int height, OutputStream os) {

        JFreeChart chart = ChartFactory.createStackedBarChart(title, "", "", ds,
                PlotOrientation.VERTICAL, true, false, false);
        CategoryPlot plot = (CategoryPlot) chart.getPlot();
        chart.getLegend().setPosition(RectangleEdge.TOP);
        chart.getLegend().setItemFont(LEGEND_FONT);
        chart.getLegend().setBorder(0, 0, 0, 0);
        chart.getTitle().setFont(TITLE_FONT);
        chart.getTitle().setPaint(TITLE_COLOR);

        int cols = ds.getColumnCount();
        int rows = ds.getRowCount();

        width = Math.max(width, 100 + cols * 85);
        height = Math.max(height, 200 + rows * 25);

        //plot.set
        plot.setBackgroundPaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);
        plot.setRangeAxisLocation(AxisLocation.BOTTOM_OR_LEFT);
        plot.setOutlineVisible(false);
        StackedBarRenderer br = (StackedBarRenderer) plot.getRenderer();
        br.setRenderAsPercentages(true);

        for (int i = 0; i < rows; i++) {
            br.setSeriesPaint(i, COLORS[i % COLORS.length]);
        }
        br.setDrawBarOutline(true);
        br.setSeriesOutlinePaint(0, Color.WHITE);
        br.setShadowPaint(Color.LIGHT_GRAY);
        br.setBarPainter(new StandardBarPainter());
        br.setDefaultItemLabelFont(BASE_FONT);
        br.setDefaultOutlinePaint(Color.white, false);
        br.setDefaultItemLabelsVisible(true);
        ItemLabelPosition position = new ItemLabelPosition(ItemLabelAnchor.CENTER, TextAnchor.BOTTOM_CENTER, TextAnchor.TOP_LEFT, 0);
        br.setDefaultPositiveItemLabelPosition(position);
        br.setDefaultItemLabelGenerator(new StandardCategoryItemLabelGenerator() {
            @Override
            public String generateLabel(CategoryDataset arg0, int arg1, int arg2) {
                Number n = arg0.getValue(arg1, arg2);
                int count = n.intValue();
                int sum = getSum(arg0, arg2);
                return (sum == 0 ? sum : (count * 100) / sum) + "%\n (" + n.intValue() + ")";
            }

            public int getSum(CategoryDataset data, int idx) {
                int rows = data.getRowCount();
                int count = 0;
                for (int i = 0; i < rows; i++) {
                    Number value = data.getValue(i, idx);
                    if (value != null) {
                        count += value.intValue();
                    }
                }
                return count;
            }
        });
        plot.getRangeAxis().setVisible(true);
        plot.getRangeAxis().setLabel(yLabel);
        plot.getDomainAxis().setLabel(xLabel);

        plot.getDomainAxis().setCategoryLabelPositions(CategoryLabelPositions.DOWN_45);
        try {
            ChartUtils.writeChartAsPNG(os, chart, width, height);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }
}
