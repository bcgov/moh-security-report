package ca.bc.gov.health.mid.web.filter;

import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.FilterConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

/**
 * This filter is used to set header in forcing IE to run in version 8 mode.
 * Trying to use meta tag failed because primefaces and richfaces scripts and
 * styles are written into the head before the meta tag thus causing the meta
 * tag to be ignored
 *
 * @author CGI Information Management Consultants Inc.
 */
public class HeaderManipulator implements Filter {
    
    private static final boolean debug = false;
    // The filter configuration object we are associated with.  If
    // this value is null, this filter instance is not currently
    // configured. 
    private FilterConfig filterConfig = null;
    
    public HeaderManipulator() {
        
    }    
    
    private void doBeforeProcessing(ServletRequest request, ServletResponse response)
            throws IOException, ServletException {
        if (debug) {
            log("HeaderManipulator:DoBeforeProcessing");
        }
        
        String ieMode = filterConfig.getInitParameter("force_ie_mode");
        ((HttpServletResponse)response).setHeader("X-UA-Compatible", ieMode);
    }    
    
    private void doAfterProcessing(ServletRequest request, ServletResponse response)
            throws IOException, ServletException {
        if (debug) {
            log("HeaderManipulator:DoAfterProcessing");
        }
            
    }

    /**
     *
     * @param request The servlet request we are processing
     * @param response The servlet response we are creating
     * @param chain The filter chain we are processing
     *
     * @exception IOException if an input/output error occurs
     * @exception ServletException if a servlet error occurs
     */
    @Override
    public void doFilter(ServletRequest request, ServletResponse response,
            FilterChain chain)
            throws IOException, ServletException {
        
        if (debug) {
            log("HeaderManipulator:doFilter()");
        }
        
        doBeforeProcessing(request, response);
        
        try {
            chain.doFilter(request, response);
        } catch (Throwable t) {

            filterConfig.getServletContext().log("Error while running filter", t); 
        }
        
        doAfterProcessing(request, response);

       
    }

    /**
     * Return the filter configuration object for this filter.
     */
    public FilterConfig getFilterConfig() {
        return (this.filterConfig);
    }

    /**
     * Set the filter configuration object for this filter.
     *
     * @param filterConfig The filter configuration object
     */
    public void setFilterConfig(FilterConfig filterConfig) {
        this.filterConfig = filterConfig;
    }

    /**
     * Destroy method for this filter
     */
    @Override
    public void destroy() {        
    }

    /**
     * Init method for this filter
     */
    @Override
    public void init(FilterConfig filterConfig) {        
        this.filterConfig = filterConfig;
        if (filterConfig != null) {
            if (debug) {                
                log("HeaderManipulator:Initializing filter");
            }
        }
    }

    
  
    
    public void log(String msg) {
        filterConfig.getServletContext().log(msg);        
    }
}
