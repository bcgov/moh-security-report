package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.jsf.BaseBean;
import ca.bc.gov.health.mid.ejb.entity.*;
import ca.bc.gov.health.mid.ejb.session.*;
import ca.bc.gov.health.mid.util.NumberFirstAlphanumericComparator;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.ArrayList;
import java.util.List;
import org.primefaces.PrimeFaces;
import org.primefaces.model.DualListModel;

@Named("MaintainProcedure")
@ViewScoped
/**
 * Backing bean for Procedure code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainProcedure extends BaseBean implements java.io.Serializable {

    @EJB
    private BodyPartFacadeLocal bodyPartFacade;

    /* Facade for persistence */
    @EJB
    private ProcedureFacadeLocal procedureFacade;
    @EJB
    private ProcedureRidFacadeLocal procedureRidFacade;
    @EJB
    private RadlexRidFacadeLocal RadlexRidFacade;
    @EJB
    private ModalityFacadeLocal modalityFacade;
    @EJB
    private AnatomicalImagingRegionFacadeLocal anatomicalImagingRegionFacade;

    /* List of all values in the code table */
    private List<Procedure> allProcedures;
    /* The instance we're currently editing */
    private Procedure procedure;


    /* PK of the selected instance */
    private Object selectedKey;
    //   private List<SelectItem> selectedRidValues;
    private DualListModel<RadlexRid> radlexIds;
    private List<SelectItem> modalityFilterOptions;
    private NumberFirstAlphanumericComparator comparator = new NumberFirstAlphanumericComparator();

    /**
     * Default Constructor
     */
    public MaintainProcedure() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {

        List<RadlexRid> source = new ArrayList<>();
        List<RadlexRid> target = new ArrayList<>();
        allProcedures = procedureFacade.findAll();


        // may need application restart when new codes are added
        // Loading over 30,000 codes from the database everytime
        // makes the application untresponsive. This codes will hardly change
        // so it may be better to load once when this bean is being initialized
        source = RadlexRidFacade.findAll();
        radlexIds = new DualListModel<>(source, target);

        clear();

        modalityFilterOptions = new ArrayList<SelectItem>();
        modalityFilterOptions.add(new SelectItem("", ""));
        modalityFilterOptions.addAll(((Droplists) super.findBeanDL("Droplists")).getModalitys());
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();
        if (validForm(1)) {
            return null;
        }
        updateRadlexListForProcedure();
        procedureFacade.create(procedure);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        ((Droplists) findBeanDL("Droplists")).init();
        return clear();
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();
        if (validForm(2)) {
            return null;
        }

        updateRadlexListForProcedure();

        Droplists droplist = ((Droplists) super.findBeanDL("Droplists"));
        boolean isAlreadyPersisted = false;
        String newModalityCd = procedure.getModalityTypeCd().getModalityTypeCd();
        String newImagingRegion = procedure.getImagingRegionCd().getImagingRegionCd();
        String newBodyPartCd = procedure.getBodyPartCd().getBpCd();
        List<SelectItem> anatomicalRegions = droplist.getValidAnatomicalImagingRegions();

        // We need to check whether the anatomical region for the procedure has changed
        // so that we can managed the entities relationship correctly
        for (SelectItem item : anatomicalRegions) {

            if (newImagingRegion.equals(item.getValue())) {

                if (!procedure.getImagingRegionCd().getImagingRegionNm().equals(item.getLabel())) {
                    AnatomicalImagingRegion imgRegion = anatomicalImagingRegionFacade.find(newImagingRegion);
                    imgRegion.getProcedureList().add(procedure);
                    procedure.setImagingRegionCd(imgRegion);
                    anatomicalImagingRegionFacade.edit(imgRegion);
                    procedure = procedureFacade.find(procedure.getProcedureId());
                    isAlreadyPersisted = true;
                    break;
                }

                break;
            }
        }


        List<SelectItem> modalities = droplist.getValidModalitys();

        // We need to check whether the modality for the procedure has changed
        // so that we can managed the entities relationship correctly
        for (SelectItem item : modalities) {

            if (newModalityCd.equals(item.getValue())) {

                if (!procedure.getModalityTypeCd().getModalityTypeDesc().equals(item.getLabel())) {
                    Modality modality = modalityFacade.find(newModalityCd);
                    modality.getProcedureList().add(procedure);
                    procedure.setModalityTypeCd(modality);
                    modalityFacade.edit(modality);
                    procedure = procedureFacade.find(procedure.getProcedureId());
                    isAlreadyPersisted = true;
                    break;
                }

                break;
            }
        }
        List<SelectItem> bodyParts = droplist.getValidBodyParts();

        // We need to check whether the body part for the procedure has changed
        // so that we can managed the entities relationship correctly
        for (SelectItem item : bodyParts) {

            if (newBodyPartCd.equals(item.getValue())) {

                if (procedure.getBodyPartCd().getBpNm()==null || !procedure.getBodyPartCd().getBpNm().equals(item.getLabel())) {
                    BodyPart bodyPart = bodyPartFacade.find(newBodyPartCd);
                    bodyPart.getProcedureList().add(procedure);
                    procedure.setBodyPartCd(bodyPart);
                    bodyPartFacade.edit(bodyPart);
                    procedure = procedureFacade.find(procedure.getProcedureId());
                    isAlreadyPersisted = true;
                    break;
                }

                break;
            }
        }

        if (!isAlreadyPersisted) {
            procedureFacade.edit(procedure);
        }
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
      ((Droplists) findBeanDL("Droplists")).init();
        return clear();
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        procedureFacade.remove(procedure);
        init();
        addInfoMessage("Record deleted.");
        return clear();
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        procedure = new Procedure();
        procedure.setModalityTypeCd(new Modality());
        procedure.setImagingRegionCd(new AnatomicalImagingRegion());
        procedure.setBodyPartCd(new BodyPart());
        radlexIds.getTarget().clear();
        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        procedure = procedureFacade.find(selectedKey);
        if (procedure.getBodyPartCd()==null)
        {
        procedure.setBodyPartCd(new BodyPart());
        }
        radlexIds.getTarget().clear();
        for (ProcedureRid rid : procedure.getProcedureRidList()) {
            radlexIds.getTarget().add(rid.getRidCode());
            radlexIds.getSource().remove(rid.getRidCode());
        }
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
    }
    /* Getters and Setters */

    public List<Procedure> getAllProcedures() {
        return allProcedures;
    }

    public void setAllProcedures(List<Procedure> allProcedures) {
        this.allProcedures = allProcedures;
    }

    public Procedure getProcedure() {
        return procedure;
    }

    public void setProcedure(Procedure procedure) {
        this.procedure = procedure;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public DualListModel<RadlexRid> getRadlexIds() {
        return radlexIds;
    }

    public void setRadlexIds(DualListModel<RadlexRid> radlexIds) {
        this.radlexIds = radlexIds;
    }

    private void updateRadlexListForProcedure() {

        List<ProcedureRid> procedureRidList = new ArrayList<>();

        ProcedureRid temp;
        for (RadlexRid id : radlexIds.getTarget()) {
            temp = new ProcedureRid();
            temp.setRidCode(id);
            temp.setProcedureId(procedure);

            procedureRidList.add(temp);
        }

        procedure.setProcedureRidList(procedureRidList);
    }

    /**
     * Validate the form elements
     *
     * @param action - 1 Add 2 Update
     */
    private boolean validForm(int action) {

        boolean isError = false;
        if (procedure.getExpiryDt() != null && procedure.getExpiryDt().compareTo(procedure.getEffectiveDt()) < 0) {
            addErrorMessage("Expiry Date must be greater than Effective Date");
            isError = true;
        }

        if (action == 1 && allProcedures != null) {
            for (int i = 0; i < allProcedures.size(); i++) {
                if (allProcedures.get(i).getModalityTypeCd().getModalityTypeCd().equals(procedure.getModalityTypeCd().getModalityTypeCd())
                        && allProcedures.get(i).getProvProcedureRpidCd().equalsIgnoreCase(procedure.getProvProcedureRpidCd())) {
                    addErrorMessage("A combination Modality Code and Procedure Code must be unique");
                    isError = true;
                    break;
                }
            }
        }

        return isError;
    }

    public List<SelectItem> getModalityFilterOptions() {
        return modalityFilterOptions;
    }

    public void setModalityFilterOptions(List<SelectItem> modalityFilterOptions) {
        this.modalityFilterOptions = modalityFilterOptions;
    }

    public int sortByRpidCode(Object left, Object right) {
        return comparator.compare(left.toString(), right.toString());
    }
}