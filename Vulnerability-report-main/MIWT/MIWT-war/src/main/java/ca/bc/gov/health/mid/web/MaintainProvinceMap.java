package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.mid.ejb.entity.HealthAuthority;
import ca.bc.gov.health.mid.ejb.entity.Province;
import ca.bc.gov.health.mid.ejb.entity.ProvinceMap;
import ca.bc.gov.health.mid.ejb.session.HealthAuthorityFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.ProvinceFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.ProvinceMapFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainProvinceMap")
@ViewScoped
/**
 * Backing bean for ProvinceMap code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainProvinceMap extends MappingScreen implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private ProvinceMapFacadeLocal provinceMapFacade;
    @EJB
    private ProvinceFacadeLocal provinceFacade;
    @EJB
    private HealthAuthorityFacadeLocal healthAuthorityFacade;

    /* List of all values in the code table */
    private List<ProvinceMap> allProvinceMaps;

    /* The instance we're currently editing */
    private ProvinceMap provinceMap;

    /* PK of the selected instance */
    private Object selectedKey;
    private HealthAuthority selectedHealthAuthority;
    private Object mappedValue;
    private String haProvinceCd;


    /**
     * Default Constructor
     */
    public MaintainProvinceMap() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        clear();
        super.setupDropLists(provinceFacade.findAllValid(), "provinceDesc", "provinceCd");
    }

    /**
     * update the list by HA
     */
    public String changeHealthAuthority() {
        allProvinceMaps = provinceMapFacade.findAllByHA(provinceMap.getHealthAuthorityId());

        if (allProvinceMaps == null || allProvinceMaps.isEmpty()) {
            selectedHealthAuthority = healthAuthorityFacade.find(provinceMap.getHealthAuthorityId().getHealthAuthorityId());
        } else {
            selectedHealthAuthority = allProvinceMaps.get(0).getHealthAuthorityId();
        }

        provinceMap = new ProvinceMap();
        provinceMap.setHealthAuthorityId(selectedHealthAuthority);

        return null;
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        if (isValid()) {
            return null;
        }

        ProvinceMap existing = null;

        for (ProvinceMap temp : allProvinceMaps) {

            if (temp.getHaProvinceCd().equalsIgnoreCase(provinceMap.getHaProvinceCd())) {
                existing = temp;
                break;
            }
        }

        if (existing != null) {
            super.addErrorMessage("Province code '" + provinceMap.getHaProvinceCd() + "' exists already");
            return null;
        }

        populateModelFields();
        provinceMapFacade.create(provinceMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        provinceMap.setProvinceCd(new Province(provinceMap.getProvinceCd().getProvinceCd()));
        provinceMapFacade.edit(provinceMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        provinceMapFacade.remove(provinceMapFacade.find(selectedKey));

        init();
        addInfoMessage("Record deleted.");
        return null;
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        haProvinceCd = null;
        mappedValue = null;

        provinceMap = new ProvinceMap();
        provinceMap.setProvinceCd(new Province());

        if (user.isHaUser()) {
            provinceMap.setHealthAuthorityId(user.getHealthAuthority());
            allProvinceMaps = provinceMapFacade.findAllByHA(provinceMap.getHealthAuthorityId());
        } else {
            provinceMap.setHealthAuthorityId(new HealthAuthority());
        }

        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        provinceMap = provinceMapFacade.find(selectedKey);
        haProvinceCd = provinceMap.getHaProvinceCd();
        mappedValue = provinceMap.getProvinceCd().getProvinceCd();
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (provinceMap.getProvinceCd() != null && provinceMap.getProvinceCd().getProvinceCd() == null) {
            provinceMap.setProvinceCd(null);
        }
        if (provinceMap.getHealthAuthorityId() != null && provinceMap.getHealthAuthorityId().getHealthAuthorityId() == null) {
            provinceMap.setHealthAuthorityId(null);
        }
    }
    /* Getters and Setters */

    public List<ProvinceMap> getAllProvinceMaps() {
        return allProvinceMaps;
    }

    public void setAllProvinceMaps(List<ProvinceMap> allProvinceMaps) {
        this.allProvinceMaps = allProvinceMaps;
    }

    public ProvinceMap getProvinceMap() {
        return provinceMap;
    }

    public void setProvinceMap(ProvinceMap provinceMap) {
        this.provinceMap = provinceMap;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public HealthAuthority getSelectedHealthAuthority() {
        return selectedHealthAuthority;
    }

    public Object getMappedValue() {
        return mappedValue;
    }

    public void setMappedValue(Object mappedValue) {
        this.mappedValue = mappedValue;
    }

    public String getHaProvinceCd() {
        return haProvinceCd;
    }

    public void setHaProvinceCd(String haProvinceCd) {
        this.haProvinceCd = haProvinceCd;
    }

    private void populateModelFields() {
        provinceMap.setHaProvinceCd(haProvinceCd);

        if (provinceMap.getProvinceCd() != null) {
            provinceMap.getProvinceCd().setProvinceCd(mappedValue != null ? mappedValue.toString() : null);
        } else {
            provinceMap.setProvinceCd(new Province(mappedValue != null ? mappedValue.toString() : null));
        }
    }

    private boolean isValid() {

        boolean isError = false;

        if (haProvinceCd == null || haProvinceCd.isEmpty()) {
            super.addErrorMessage(getResourceValue("ProvinceMap.haProvinceCd.desc") + " is required");
            isError = true;
        }

        if (mappedValue == null || mappedValue.toString().isEmpty()) {
            super.addErrorMessage(getResourceValue("ProvinceMap.provinceCd.desc") + " is required");
            isError = true;
        }

        for (ProvinceMap row : allProvinceMaps) {
            if (!row.getProvinceMapId().equals(provinceMap.getProvinceMapId()) &&
                    row.getHealthAuthorityId().equals(provinceMap.getHealthAuthorityId()) &&
                    row.getHaProvinceCd().equalsIgnoreCase(haProvinceCd)) {
                super.addErrorMessage(getResourceValue("ProvinceMap.haProvinceCd.desc") + " must be unique");
                isError = true;
            }
        }

        return isError;
    }
}