package ca.bc.gov.health.mid.web;

import ca.bc.gov.health.mid.ejb.entity.Gender;
import ca.bc.gov.health.mid.ejb.entity.GenderMap;
import ca.bc.gov.health.mid.ejb.entity.HealthAuthority;
import ca.bc.gov.health.mid.ejb.session.GenderFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.GenderMapFacadeLocal;
import ca.bc.gov.health.mid.ejb.session.HealthAuthorityFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;
import org.primefaces.PrimeFaces;

@Named("MaintainGenderMap")
@ViewScoped
/**
 * Backing bean for GenderMap code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainGenderMap extends MappingScreen implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private GenderMapFacadeLocal genderMapFacade;
    @EJB
    private GenderFacadeLocal genderFacade;
    @EJB
    private HealthAuthorityFacadeLocal healthAuthorityFacade;

    /* List of all values in the code table */
    private List<GenderMap> allGenderMaps;

    /* The instance we're currently editing */
    private GenderMap genderMap;

    /* PK of the selected instance */
    private Object selectedKey;
    private HealthAuthority selectedHealthAuthority;
    private Object mappedValue;
    private String haGenderCd;

    /**
     * Default Constructor
     */
    public MaintainGenderMap() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        clear();
        super.setupDropLists(genderFacade.findAllValid(), "genderDesc", "genderCd");
    }

    /**
     * update the list by HA
     */
    public String changeHealthAuthority() {
        allGenderMaps = genderMapFacade.findAllByHA(genderMap.getHealthAuthorityId());

        if (allGenderMaps == null || allGenderMaps.isEmpty()) {
            selectedHealthAuthority = healthAuthorityFacade.find(genderMap.getHealthAuthorityId().getHealthAuthorityId());
        } else {
            selectedHealthAuthority = allGenderMaps.get(0).getHealthAuthorityId();
        }

        genderMap = new GenderMap();
        genderMap.setHealthAuthorityId(selectedHealthAuthority);

        return null;
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        genderMapFacade.create(genderMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();

        if (isValid()) {
            return null;
        }

        populateModelFields();
        genderMap.setGenderCd(new Gender(genderMap.getGenderCd().getGenderCd()));
        genderMapFacade.edit(genderMap);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        genderMapFacade.remove(genderMapFacade.find(selectedKey));

        init();
        addInfoMessage("Record deleted.");
        return null;
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        haGenderCd = null;
        mappedValue = null;

        genderMap = new GenderMap();
        genderMap.setGenderCd(new Gender());

        if (user.isHaUser()) {
            genderMap.setHealthAuthorityId(user.getHealthAuthority());
            allGenderMaps = genderMapFacade.findAllByHA(genderMap.getHealthAuthorityId());
        } else {
            genderMap.setHealthAuthorityId(new HealthAuthority());
        }

        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        genderMap = genderMapFacade.find(selectedKey);
        haGenderCd = genderMap.getHaGenderCd();
        mappedValue = genderMap.getGenderCd().getGenderCd();
        PrimeFaces.current().scrollTo("navbar");
        return null;
    }


    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (genderMap.getHealthAuthorityId() != null && genderMap.getHealthAuthorityId().getHealthAuthorityId() == null) {
            genderMap.setHealthAuthorityId(null);
        }
        if (genderMap.getGenderCd() != null && genderMap.getGenderCd().getGenderCd() == null) {
            genderMap.setGenderCd(null);
        }
    }
    /* Getters and Setters */

    public List<GenderMap> getAllGenderMaps() {
        return allGenderMaps;
    }

    public void setAllGenderMaps(List<GenderMap> allGenderMaps) {
        this.allGenderMaps = allGenderMaps;
    }

    public GenderMap getGenderMap() {
        return genderMap;
    }

    public void setGenderMap(GenderMap genderMap) {
        this.genderMap = genderMap;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    public HealthAuthority getSelectedHealthAuthority() {
        return selectedHealthAuthority;
    }

    public Object getMappedValue() {
        return mappedValue;
    }

    public void setMappedValue(Object mappedValue) {
        this.mappedValue = mappedValue;
    }

    public String getHaGenderCd() {
        return haGenderCd;
    }

    public void setHaGenderCd(String haGenderCd) {
        this.haGenderCd = haGenderCd;
    }

    private void populateModelFields() {
        genderMap.setHaGenderCd(haGenderCd);

        if (genderMap.getGenderCd() != null) {
            genderMap.getGenderCd().setGenderCd(mappedValue != null ? mappedValue.toString() : null);
        } else {
            genderMap.setGenderCd(new Gender(mappedValue != null ? mappedValue.toString() : null));
        }
    }

    private boolean isValid() {

        boolean isError = false;

        if (haGenderCd == null || haGenderCd.isEmpty()) {
            super.addErrorMessage(getResourceValue("GenderMap.haGenderCd.desc") + " is required");
            isError = true;
        }

        if (mappedValue == null || mappedValue.toString().isEmpty()) {
            super.addErrorMessage(getResourceValue("GenderMap.genderCd.desc") + " is required");
            isError = true;
        }

        for (GenderMap row : allGenderMaps) {
            if (!row.getGenderMapId().equals(genderMap.getGenderMapId()) &&
                    row.getHealthAuthorityId().equals(genderMap.getHealthAuthorityId()) &&
                    row.getHaGenderCd().equalsIgnoreCase(haGenderCd)) {
                super.addErrorMessage(getResourceValue("GenderMap.haGenderCd.desc") + " must be unique");
                isError = true;
            }
        }

        return isError;
    }
}