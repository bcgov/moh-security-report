package ca.bc.gov.health.mid.util;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import freemarker.template.TemplateExceptionHandler;
import jakarta.annotation.PostConstruct;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.mail.Message;
import jakarta.mail.MessagingException;
import jakarta.mail.Session;
import jakarta.mail.Transport;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;
import java.io.IOException;
import java.io.Serializable;
import java.io.StringWriter;
import java.nio.charset.StandardCharsets;
import java.util.Date;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.lang3.StringUtils;

/**
 * EmailService is a service that allows to send emails via SMTP
 */
@Named
@ApplicationScoped
public class MailService implements Serializable {

    private static final Logger logger = Logger.getLogger(MailService.class.getName());
    private static final String MAIL_FROM = "noreply-miwt@gov.bc.ca";

    @Inject
    private ApplicationConfig applicationConfig;

    private Properties mailProperties;
    private Configuration freemarkerConfiguration;

    @PostConstruct
    private void init() {
        mailProperties = new Properties();
        mailProperties.put("mail.smtp.host", applicationConfig.getMailServerHost());
        mailProperties.put("mail.smtp.port", applicationConfig.getMailServerPort());
        mailProperties.put("mail.transport.protocol", "smtp");
        mailProperties.put("mail.smtp.auth", "false");
        mailProperties.put("mail.debug", applicationConfig.getMailDebug());

        freemarkerConfiguration = new Configuration(Configuration.VERSION_2_3_30);
        freemarkerConfiguration.setClassForTemplateLoading(this.getClass(), "/templates");
        freemarkerConfiguration.setDefaultEncoding(StandardCharsets.UTF_8.name());
        freemarkerConfiguration.setTemplateExceptionHandler(TemplateExceptionHandler.RETHROW_HANDLER);
        freemarkerConfiguration.setLogTemplateExceptions(false);
        freemarkerConfiguration.setWrapUncheckedExceptions(true);
        freemarkerConfiguration.setFallbackOnNullLoopVariable(false);
    }

    public void sendEmail(String to, String subject, String content) {

        if (!StringUtils.isBlank(to) || (applicationConfig.getMailCc().length > 0)) {
            try {
                Session session = Session.getDefaultInstance(mailProperties, null);
                MimeMessage mimeMessage = new MimeMessage(session);
                mimeMessage.setFrom(MAIL_FROM);
                mimeMessage.setRecipients(Message.RecipientType.TO, to);

                // Always send an email in CC for all environments
                String destCced = "";
                if (applicationConfig.getMailCc().length > 0) {
                    mimeMessage.setRecipients(Message.RecipientType.CC, applicationConfig.getMailCc());
                    for (InternetAddress mailCc : applicationConfig.getMailCc()) {
                        destCced = destCced + " ** " + mailCc.getAddress();
                    }
                }
                logger.log(Level.INFO, "** Sending confirmation email to: " + to);
                logger.log(Level.INFO, "** Sending confirmation email Cceds: " + destCced);
                mimeMessage.setSubject("MIWT " + applicationConfig.getEnvironment() + " - " + StringUtils.defaultString(subject));
                mimeMessage.setSentDate(new Date());
                mimeMessage.setText(StringUtils.defaultString(content), StandardCharsets.UTF_8.name(), "html");

                Transport.send(mimeMessage);
            } catch (MessagingException e) {
                String msg = "An error occurred while sending an email.";
                logger.log(Level.SEVERE, msg, e);
            }
        }
    }

    public void sendEmailTemplate(String to, String subject, String emailTemplateName, Map<String, Object> contentData) {

        try {
            Template freemarkerTemplate = freemarkerConfiguration.getTemplate(emailTemplateName);
            StringWriter stringWriter = new StringWriter();
            freemarkerTemplate.process(contentData, stringWriter);
            sendEmail(to, subject, stringWriter.toString());
        } catch (IOException | TemplateException e) {
            String msg = "An error occurred while sending an email using a template.";
            logger.log(Level.SEVERE, msg, e);
        }
    }
}
