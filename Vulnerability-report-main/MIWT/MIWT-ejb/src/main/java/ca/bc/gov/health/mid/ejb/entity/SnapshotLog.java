package ca.bc.gov.health.mid.ejb.entity;

import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Version;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.io.Serializable;
import java.util.Date;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
@Entity
@EntityListeners({AuditListener.class})
@Table(name = "MIRD_SNAPSHOT_LOG")
@SequenceGenerator(name="SnapshotLogSeq", sequenceName="MIRD_SNAPSHOT_LOG_SEQ", allocationSize=1, initialValue=1)
@NamedQueries({
    @NamedQuery(name = "SnapshotLog.findAll", query = "SELECT s FROM SnapshotLog s")})
public class SnapshotLog implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
@GeneratedValue(strategy=GenerationType.SEQUENCE,generator="SnapshotLogSeq")
        @NotNull
    @Column(name = "SNAPSHOT_LOG_ID")
    private Long snapshotLogId;
    @Column(name = "ROWS_PROCESSED")
    private Long rowsProcessed;
    @Column(name = "ROWS_REJECTED")
    private Long rowsRejected;
    @Column(name = "ROWS_WITH_WARNINGS")
    private Long rowsWithWarnings;
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Size(max = 32)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Size(max = 32)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
	@Version
    private Long statelessTransactionNbr;
    @JoinColumn(name = "SNAPSHOT_ID", referencedColumnName = "SNAPSHOT_ID")
    @ManyToOne(optional = false)
    private Snapshot snapshotId;
    @JoinColumn(name = "HEALTH_AUTHORITY_ID", referencedColumnName = "HEALTH_AUTHORITY_ID")
    @ManyToOne(optional = false)
    private HealthAuthority healthAuthorityId;

    public SnapshotLog() {
    }

    public SnapshotLog(Long snapshotLogId) {
        this.snapshotLogId = snapshotLogId;
    }

    public Long getSnapshotLogId() {
        return snapshotLogId;
    }

    public void setSnapshotLogId(Long snapshotLogId) {
        this.snapshotLogId = snapshotLogId;
    }

    public Long getRowsProcessed() {
        return rowsProcessed;
    }

    public void setRowsProcessed(Long rowsProcessed) {
        this.rowsProcessed = rowsProcessed;
    }

    public Long getRowsRejected() {
        return rowsRejected;
    }

    public void setRowsRejected(Long rowsRejected) {
        this.rowsRejected = rowsRejected;
    }

    public Long getRowsWithWarnings() {
        return rowsWithWarnings;
    }

    public void setRowsWithWarnings(Long rowsWithWarnings) {
        this.rowsWithWarnings = rowsWithWarnings;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public Snapshot getSnapshotId() {
        return snapshotId;
    }

    public void setSnapshotId(Snapshot snapshotId) {
        this.snapshotId = snapshotId;
    }

    public HealthAuthority getHealthAuthorityId() {
        return healthAuthorityId;
    }

    public void setHealthAuthorityId(HealthAuthority healthAuthorityId) {
        this.healthAuthorityId = healthAuthorityId;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (snapshotLogId != null ? snapshotLogId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof SnapshotLog)) {
            return false;
        }
        SnapshotLog other = (SnapshotLog) object;
        if ((this.snapshotLogId == null && other.snapshotLogId != null) || (this.snapshotLogId != null && !this.snapshotLogId.equals(other.snapshotLogId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.mid.ejb.entity.SnapshotLog[ snapshotLogId=" + snapshotLogId + " ]";
    }
    
}
