package ca.bc.gov.health.mid.util;

import ca.bc.gov.health.mid.ejb.entity.ImagingProcedure;
import ca.bc.gov.health.mid.ejb.entity.SnapshotRecord;
import java.math.BigDecimal;
import java.security.MessageDigest;
import java.sql.Date;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class ConversionHelper {

    private static final Logger logger = Logger.getLogger(ConversionHelper.class.getName());
    private final static SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
    static{
        sdf.setLenient(false);
    }
    private final static SimpleDateFormat stf = new SimpleDateFormat("H:mm");

    private static String recordString(String[] arr) {
        String result = "";
        for (String x : arr) {
            result += x;
        }
        return result;
    }
    
    private static String convertSHA256(String input) {
               
        String result;
        
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            md.update(input.getBytes());
            byte byteData[] = md.digest();

            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < byteData.length; i++) {
             sb.append(Integer.toString((byteData[i] & 0xff) + 0x100, 16).substring(1));
            }
            result = sb.toString();
        } 
        catch (Exception e) {
            e.printStackTrace(System.err);
            result = "";
            logger.log(Level.WARNING, "Errors in convertSHA256, result string: " + result);
        }
        return result;
       
    }
    
    public static ImagingProcedure convertToImagingProcedure(String[] arr) {     
        ImagingProcedure imagingProcedure = new ImagingProcedure();
        imagingProcedure.setStatusCd(arr[0]);
        imagingProcedure.setPHN(arr[1]);
        imagingProcedure.setFirstGivenNm(arr[2]);
        imagingProcedure.setSecondGivenNm(arr[3]);
        imagingProcedure.setThirdGivenNm(arr[4]);
        imagingProcedure.setSurnameNm(arr[5]);
        imagingProcedure.setPreferredNm(arr[6]);
        imagingProcedure.setBirthDt(toDate(arr[7]));
        imagingProcedure.setGenderCd(arr[8]);
        imagingProcedure.setAddressLine1(arr[9]);
        imagingProcedure.setAddressLine2(arr[10]);
        imagingProcedure.setAddressLine3(arr[11]);
        imagingProcedure.setCity(arr[12]);
        imagingProcedure.setProvinceCd(arr[13]);
        imagingProcedure.setPostalCode(arr[14]);
        imagingProcedure.setBookingId(arr[15]);
        imagingProcedure.setFacilityId(toLong(arr[16]));
        imagingProcedure.setPractitionerId(arr[17]);
        imagingProcedure.setMspNo(arr[18]);
        imagingProcedure.setEncounterTypeCd(arr[19]);
        imagingProcedure.setExamReason(arr[20]);
        imagingProcedure.setAppropriatenessCd(arr[21]);
        imagingProcedure.setPriorityLevel(arr[22]);
        imagingProcedure.setModalityCd(arr[23]);
        imagingProcedure.setHaProcedureCd(arr[24]);
        imagingProcedure.setExamCount(toInt(arr[25])); ////18679 replacing imagingProcedure.setProvProcedureCd(arr[25]);
        imagingProcedure.setSnomedCd(arr[26]);
        imagingProcedure.setSedationYn(arr[27]);
        imagingProcedure.setTimedExamYn(arr[28]);
        imagingProcedure.setReferralDt(toDate(arr[29]));
        imagingProcedure.setBookingFormReceivedDt(toDate(arr[30]));
        imagingProcedure.setBookingCreatedDt(toDate(arr[31]));
        imagingProcedure.setProcedureScheduledDt(toDate(arr[32]));
        imagingProcedure.setProcedureCancelledDt(toDate(arr[33]));
        imagingProcedure.setCancellationReasonCd(arr[34]);
        imagingProcedure.setProcedurePostponedDt(toDate(arr[35]));
        imagingProcedure.setPostponementReasonCd(arr[36]);
        imagingProcedure.setPatientUnavailStartDt1(toDate(arr[37]));
        imagingProcedure.setPatientUnavailEndDt1(toDate(arr[38]));
        imagingProcedure.setPatientUnavailStartDt2(toDate(arr[39]));
        imagingProcedure.setPatientUnavailEndDt2(toDate(arr[40]));
        imagingProcedure.setPatientUnavailStartDt3(toDate(arr[41]));
        imagingProcedure.setPatientUnavailEndDt3(toDate(arr[42]));
        imagingProcedure.setExamId(arr[43]);
        imagingProcedure.setUrn(arr[44]);
        imagingProcedure.setMrn(arr[45]);
        imagingProcedure.setFacilityIdCompleted(toLong(arr[46]));
        imagingProcedure.setMachineId(arr[47]);
        imagingProcedure.setModalityCdCompleted(arr[48]);
        imagingProcedure.setHaProcedureCdCompleted(arr[49]);
        imagingProcedure.setExamCountCompleted(toInt(arr[50])); //18679 replacing imagingProcedure.setProvProcedureCdCompleted(arr[50]);
        imagingProcedure.setSnomedCdCompleted(arr[51]);
        imagingProcedure.setSedationYnCompleted(arr[52]);
        imagingProcedure.setProcedureDuration(toLong(arr[53]));
        imagingProcedure.setProcedurePerformedDt(toDate(arr[54]));
        imagingProcedure.setResultsAvailDt(toDate(arr[55]));
        imagingProcedure.setDiagnosisTxt(arr[56]);
        imagingProcedure.setFundingTypeCd(arr[57]);
 
        String record = recordString(arr);
        String checksum = convertSHA256(record);
        imagingProcedure.setChecksum(checksum);
        
        return imagingProcedure;

    }

    public static String[] convertToStringArray(ImagingProcedure imagingProcedure) {
        String[] arr = new String[64];

        arr[0] = imagingProcedure.getStatusCd();
        arr[1] = imagingProcedure.getPHN();
        arr[2] = imagingProcedure.getFirstGivenNm();
        arr[3] = imagingProcedure.getSecondGivenNm();
        arr[4] = imagingProcedure.getThirdGivenNm();
        arr[5] = imagingProcedure.getSurnameNm();
        arr[6] = imagingProcedure.getPreferredNm();
        arr[7] = convertDateToString(imagingProcedure.getBirthDt());
        arr[8] = imagingProcedure.getGenderCd();
        arr[9] = imagingProcedure.getAddressLine1();
        arr[10] = imagingProcedure.getAddressLine2();
        arr[11] = imagingProcedure.getAddressLine3();
        arr[12] = imagingProcedure.getCity();
        arr[13] = imagingProcedure.getProvinceCd();
        arr[14] = imagingProcedure.getPostalCode();
        arr[15] = imagingProcedure.getBookingId();
        arr[16] = convertLongToString(imagingProcedure.getFacilityId());
        arr[17] = imagingProcedure.getPractitionerId();
        arr[18] = imagingProcedure.getMspNo();
        arr[19] = imagingProcedure.getEncounterTypeCd();
        arr[20] = imagingProcedure.getExamReason();
        arr[21] = imagingProcedure.getAppropriatenessCd();
        arr[22] = imagingProcedure.getPriorityLevel();
        arr[23] = imagingProcedure.getModalityCd();
        arr[24] = imagingProcedure.getHaProcedureCd();
        arr[25] = convertIntegerToString(imagingProcedure.getExamCount()); //#18679 replacing imagingProcedure.getProvProcedureCd
        arr[26] = imagingProcedure.getSnomedCd();
        arr[27] = imagingProcedure.getSedationYn();
        arr[28] = imagingProcedure.getTimedExamYn();
        arr[29] = convertDateToString(imagingProcedure.getReferralDt());
        arr[30] = convertDateToString(imagingProcedure.getBookingFormReceivedDt());
        arr[31] = convertDateToString(imagingProcedure.getBookingCreatedDt());
        arr[32] = convertDateToString(imagingProcedure.getProcedureScheduledDt());
        arr[33] = convertDateToString(imagingProcedure.getProcedureCancelledDt());
        arr[34] = imagingProcedure.getCancellationReasonCd();
        arr[35] = convertDateToString(imagingProcedure.getProcedurePostponedDt());
        arr[36] = imagingProcedure.getPostponementReasonCd();
        arr[37] = convertDateToString(imagingProcedure.getPatientUnavailStartDt1());
        arr[38] = convertDateToString(imagingProcedure.getPatientUnavailEndDt1());
        arr[39] = convertDateToString(imagingProcedure.getPatientUnavailStartDt2());
        arr[40] = convertDateToString(imagingProcedure.getPatientUnavailEndDt2());
        arr[41] = convertDateToString(imagingProcedure.getPatientUnavailStartDt3());
        arr[42] = convertDateToString(imagingProcedure.getPatientUnavailEndDt3());
        arr[43] = imagingProcedure.getExamId();
        arr[44] = imagingProcedure.getUrn();
        arr[45] = imagingProcedure.getMrn();
        arr[46] = convertLongToString(imagingProcedure.getFacilityIdCompleted());
        arr[47] = imagingProcedure.getMachineId();
        arr[48] = imagingProcedure.getModalityCdCompleted();
        arr[49] = imagingProcedure.getHaProcedureCdCompleted();
        arr[50] = convertIntegerToString(imagingProcedure.getExamCountCompleted()); //#18679 replacing imagingProcedure.getProvProcedureCdCompleted();
        arr[51] = imagingProcedure.getSnomedCdCompleted();
        arr[52] = imagingProcedure.getSedationYnCompleted();
        arr[53] = convertLongToString(imagingProcedure.getProcedureDuration());
        arr[54] = convertDateToString(imagingProcedure.getProcedurePerformedDt());
        arr[55] = convertDateToString(imagingProcedure.getResultsAvailDt());
        arr[56] = imagingProcedure.getDiagnosisTxt();
        arr[57] = imagingProcedure.getFundingTypeCd();
        arr[58] = imagingProcedure.getHealthAuthorityCd();
        arr[59] = convertDateToString(imagingProcedure.getCreatedOnDtm());
        arr[60] = convertDateToString(imagingProcedure.getLastModifiedOnDtm());
        arr[61] = imagingProcedure.getCreatedByNm();
        arr[62] = imagingProcedure.getLastModifiedByNm();
        arr[63] = convertLongToString(imagingProcedure.getStatelessTransactionNbr());

        return arr;
    }
    
public static String[] convertToStringArray(SnapshotRecord imagingProcedure) {
        String[] arr = new String[64];

        arr[0] = imagingProcedure.getStatusCd();
        arr[1] = imagingProcedure.getPhn();
        arr[2] = imagingProcedure.getFirstGivenNm();
        arr[3] = imagingProcedure.getSecondGivenNm();
        arr[4] = imagingProcedure.getThirdGivenNm();
        arr[5] = imagingProcedure.getSurnameNm();
        arr[6] = imagingProcedure.getPreferredNm();
        arr[7] = convertDateToString(imagingProcedure.getBirthDt());
        arr[8] = imagingProcedure.getGenderCd();
        arr[9] = imagingProcedure.getAddressLine1();
        arr[10] = imagingProcedure.getAddressLine2();
        arr[11] = imagingProcedure.getAddressLine3();
        arr[12] = imagingProcedure.getCity();
        arr[13] = imagingProcedure.getProvinceCd();
        arr[14] = imagingProcedure.getPostalCode();
        arr[15] = imagingProcedure.getBookingId();
        arr[16] = convertLongToString(imagingProcedure.getFacilityId());
        arr[17] = imagingProcedure.getPractitionerId();
        arr[18] = imagingProcedure.getMspNo();
        arr[19] = imagingProcedure.getEncounterTypeCd();
        arr[20] = imagingProcedure.getExamReason();
        arr[21] = imagingProcedure.getAppropriatenessCd();
        arr[22] = convertLongToString(imagingProcedure.getPriorityLevelId());
        arr[23] = imagingProcedure.getModalityCd();
        arr[24] = imagingProcedure.getHaProcedureCd();
        arr[25] = convertIntegerToString(imagingProcedure.getExamCount()); //#18679 Putting code here eventhough this method isn't called anymore
        arr[26] = imagingProcedure.getSnomedCd();
        arr[27] = imagingProcedure.getSedationYn();
        arr[28] = imagingProcedure.getTimedExamYn();
        arr[29] = convertDateToString(imagingProcedure.getReferralDt());
        arr[30] = convertDateToString(imagingProcedure.getBookingFormReceivedDt());
        arr[31] = convertDateToString(imagingProcedure.getBookingCreatedDt());
        arr[32] = convertDateToString(imagingProcedure.getProcedureScheduledDt());
        arr[33] = convertDateToString(imagingProcedure.getProcedureCancelledDt());
        arr[34] = imagingProcedure.getCancellationReasonCd();
        arr[35] = convertDateToString(imagingProcedure.getProcedurePostponedDt());
        arr[36] = imagingProcedure.getPostponementReasonCd();
        arr[37] = convertDateToString(imagingProcedure.getPatientUnavailStartDt1());
        arr[38] = convertDateToString(imagingProcedure.getPatientUnavailEndDt1());
        arr[39] = convertDateToString(imagingProcedure.getPatientUnavailStartDt2());
        arr[40] = convertDateToString(imagingProcedure.getPatientUnavailEndDt2());
        arr[41] = convertDateToString(imagingProcedure.getPatientUnavailStartDt3());
        arr[42] = convertDateToString(imagingProcedure.getPatientUnavailEndDt3());
        arr[43] = imagingProcedure.getExamId();
        arr[44] = imagingProcedure.getUrn();
        arr[45] = imagingProcedure.getMrn();
        arr[46] = convertLongToString(imagingProcedure.getFacilityIdCompleted());
        arr[47] = convertLongToString(imagingProcedure.getMachineId());
        arr[48] = imagingProcedure.getModalityCdCompleted();
        arr[49] = imagingProcedure.getHaProcedureCdCompleted();
        arr[50] = convertIntegerToString(imagingProcedure.getExamCountCompleted()); //#18679 Putting code here eventhough this method isn't called anymore
        arr[51] = imagingProcedure.getSnomedCdCompleted();
        arr[52] = imagingProcedure.getSedationYnCompleted();
        arr[53] = convertLongToString(imagingProcedure.getProcedureDuration());
        arr[54] = convertDateToString(imagingProcedure.getProcedurePerformedDt());
        arr[55] = convertDateToString(imagingProcedure.getResultsAvailDt());
        arr[56] = imagingProcedure.getFindingCd();
        arr[57] = imagingProcedure.getFundingTypeCd();
        arr[58] = imagingProcedure.getHealthAuthorityId().toString();
        arr[59] = convertDateToString(imagingProcedure.getCreatedOnDtm());
        arr[60] = convertDateToString(imagingProcedure.getLastModifiedOnDtm());
        arr[61] = imagingProcedure.getCreatedByNm();
        arr[62] = imagingProcedure.getLastModifiedByNm();
        arr[63] = convertLongToString(imagingProcedure.getStatelessTransactionNbr());

        return arr;
    }    

    public static String convertDateToString(java.util.Date date) {

        if (date == null) {
            return null;
        }
        StringBuilder builder = new StringBuilder();
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);

        int month = cal.get(Calendar.MONTH) + 1; // Month is index based so we need to add 1

        builder.append(cal.get(Calendar.YEAR))
                .append(month < 10 ? "0" + month : month) // Prefix month by 0 if less that 10
                .append(cal.get(Calendar.DAY_OF_MONTH) < 10 ? "0" + cal.get(Calendar.DAY_OF_MONTH) : cal.get(Calendar.DAY_OF_MONTH)); // Prefix day by 0 if less that 10


        return builder.toString();

    }

    public static String convertDateToString(java.sql.Date date) {

        if (date == null) {
            return null;
        }

        return convertDateToString(new java.util.Date(date.getTime()));

    }

    public static String convertTimeToString(java.util.Date date) {

        if (date == null) {
            return null;
        }
        StringBuilder builder = new StringBuilder();
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);


        builder.append(cal.get(Calendar.HOUR_OF_DAY))
                .append(":")
                .append(Calendar.MINUTE < 10 ? "0" + Calendar.MINUTE : Calendar.MINUTE); // Prefix minute by 0 if less that 10


        return builder.toString();

    }

    public static String convertTimeToString(java.sql.Date date) {

        if (date == null) {
            return null;
        }

        return convertTimeToString(new java.util.Date(date.getTime()));

    }

    public static String convertLongToString(Long longValue) {

        if (longValue == null) {
            return null;
        }

        return longValue.toString();
    }

    public static String convertIntegerToString(Integer intValue) {

        if (intValue == null) {
            return null;
        }

        return intValue.toString();
    }

    public static String convertShortToString(Short shortValue) {

        if (shortValue == null) {
            return null;
        }

        return shortValue.toString();
    }

    public static Date convertStringToDate(String dateStr) {

        if (dateStr == null || dateStr.trim().isEmpty()) {
            return null;
        }

        DateFormat formatter;
        java.util.Date date;
        formatter = new SimpleDateFormat("yyyy/MM/dd");
        try {
            date = formatter.parse(dateStr);

        } catch (ParseException pe) {
            System.out.printf("'%s' is not a valid date", dateStr);
            return null;
        }

        return new Date(date.getTime());

    }

    public static Long convertStringToLong(String longStr) {

        Long value = null;

        try {
            value = Long.parseLong(longStr);
        } catch (NumberFormatException pe) {
            System.out.printf("'%s' is not a valid number", longStr);
        }
        return value;
    }

    public static BigDecimal convertStringToBigDecimal(String longStr) {

        BigDecimal value = null;

        try {
            value = new BigDecimal(longStr);
        } catch (NumberFormatException pe) {
            System.out.printf("'%s' is not a valid number", longStr);
        }
        return value;
    }

    private static Long toLong(String string) {
        if (string == null || "".equals(string)) {
            return null;
        }
        try {
            return Long.parseLong(string);
        } catch (NumberFormatException nfe) {
            return null;
        }
    }

    private static java.util.Date toDate(String string) {
        if (string == null || "".equals(string)) {
            return null;
        }
        try {
            return sdf.parse(string);
        } catch (ParseException | NumberFormatException nfe) {
            return null;
        }      
    }

    private static Integer toInt(String string) {
        if (string == null || "".equals(string)) {
            return null;
        }
        try {
            return Integer.parseInt(string);
        } catch (NumberFormatException nfe) {
            return null;
        }
    }

    private static java.util.Date toTime(String string) {
        if (string == null || "".equals(string)) {
            return null;
        }
        try {
            return stf.parse(string);
        } catch (ParseException | NumberFormatException ex) {
            return null;
        }
    }
   
}

