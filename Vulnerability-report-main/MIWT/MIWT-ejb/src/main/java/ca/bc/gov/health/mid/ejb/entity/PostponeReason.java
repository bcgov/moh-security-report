package ca.bc.gov.health.mid.ejb.entity;

import ca.bc.gov.health.annotation.CodeTable;
import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.FetchType;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Version;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.io.Serializable;
import java.util.Date;
import java.util.List;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
@Entity
@EntityListeners({AuditListener.class})
@Table(name = "MIRD_POSTPONE_REASON")
@NamedQueries({
    @NamedQuery(name = "PostponeReason.findAll", query = "SELECT p FROM PostponeReason p"),
    @NamedQuery(name = "PostponeReason.findAllValid", query = "SELECT e FROM PostponeReason e WHERE e.expiryDt IS NULL OR e.expiryDt >= CURRENT_DATE ORDER BY e.postponeReasonCd")})
@CodeTable(label="POSTPONE_REASON_DESC",value="POSTPONE_REASON_CD")
public class PostponeReason implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 32)
    @Column(name = "POSTPONE_REASON_CD")
    private String postponeReasonCd;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 255)
    @Column(name = "POSTPONE_REASON_DESC")
    private String postponeReasonDesc;
    @Basic(optional = false)
    @NotNull
    @Column(name = "EFFECTIVE_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date effectiveDt;
    @Column(name = "EXPIRY_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date expiryDt;
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Size(max = 32)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Size(max = 32)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
	@Version
    private Long statelessTransactionNbr;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "postponeReasonCd", fetch=FetchType.LAZY)
    private List<PostponeReasonMap> postponeReasonMapList;
    @OneToMany(mappedBy = "postponedReasonCd", fetch=FetchType.LAZY)
    private List<Booking> bookingList;

    public PostponeReason() {
    }

    public PostponeReason(String postponeReasonCd) {
        this.postponeReasonCd = postponeReasonCd;
    }

    public PostponeReason(String postponeReasonCd, String postponeReasonDesc, Date effectiveDt) {
        this.postponeReasonCd = postponeReasonCd;
        this.postponeReasonDesc = postponeReasonDesc;
        this.effectiveDt = effectiveDt;
    }

    public String getPostponeReasonCd() {
        return postponeReasonCd;
    }

    public void setPostponeReasonCd(String postponeReasonCd) {
        this.postponeReasonCd = postponeReasonCd;
    }

    public String getPostponeReasonDesc() {
        return postponeReasonDesc;
    }

    public void setPostponeReasonDesc(String postponeReasonDesc) {
        this.postponeReasonDesc = postponeReasonDesc;
    }

    public Date getEffectiveDt() {
        return effectiveDt;
    }

    public void setEffectiveDt(Date effectiveDt) {
        this.effectiveDt = effectiveDt;
    }

    public Date getExpiryDt() {
        return expiryDt;
    }

    public void setExpiryDt(Date expiryDt) {
        this.expiryDt = expiryDt;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public List<PostponeReasonMap> getPostponeReasonMapList() {
        return postponeReasonMapList;
    }

    public void setPostponeReasonMapList(List<PostponeReasonMap> postponeReasonMapList) {
        this.postponeReasonMapList = postponeReasonMapList;
    }

    public List<Booking> getBookingList() {
        return bookingList;
    }

    public void setBookingList(List<Booking> bookingList) {
        this.bookingList = bookingList;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (postponeReasonCd != null ? postponeReasonCd.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof PostponeReason)) {
            return false;
        }
        PostponeReason other = (PostponeReason) object;
        if ((this.postponeReasonCd == null && other.postponeReasonCd != null) || (this.postponeReasonCd != null && !this.postponeReasonCd.equals(other.postponeReasonCd))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.mid.ejb.entity.PostponeReason[ postponeReasonCd=" + postponeReasonCd + " ]";
    }
    
    public boolean isExpired() {
		return expiryDt != null && expiryDt.before(new Date());
	}
    
}
