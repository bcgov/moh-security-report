package ca.bc.gov.health.mid.ejb.entity;

import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.io.Serializable;
import java.util.Date;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
@Entity
@Table(name = "MID_UPLOAD_STAT")
@NamedQueries({
    @NamedQuery(name = "UploadStat.findAll", query = "SELECT u FROM UploadStat u")})
@SequenceGenerator(name="UploadStatSeq", sequenceName="MID_UPLOAD_STAT_SEQ", allocationSize=1, initialValue=1)       
@EntityListeners({AuditListener.class})
public class UploadStat implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @GeneratedValue(strategy=GenerationType.SEQUENCE,generator="UploadStatSeq")
    @NotNull
    @Column(name = "UPLOAD_STAT_ID")
    private Long uploadStatId;
    @NotNull
    @Column(name = "HEALTH_AUTHORITY_ID")
    private Long healthAuthorityId;
    @Basic(optional = false)    
    @NotNull
    @Column(name = "UPLOAD_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    private Date uploadDate;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 255)
    @Column(name = "FILENAME")
    private String filename;
    @Basic(optional = false)
    @NotNull
    @Column(name = "UPLOADED")
    private long uploaded;
    @Basic(optional = false)
    @NotNull
    @Column(name = "FATAL_ERROR")
    private long fatalError;
    @Basic(optional = false)
    @NotNull
    @Column(name = "SUBMITTED")
    private long submitted;
    @Basic(optional = false)
    @NotNull
    @Column(name = "MAPPING_ERROR")
    private long mappingError;
    @Basic(optional = false)
    @NotNull
    @Column(name = "WARNING")
    private long warning;
    @Basic(optional = false)
    @NotNull
    @Column(name = "ACCEPTED")
    private long accepted;
    @Basic(optional = false)
    @NotNull
    @Column(name = "INSERTED")
    private long inserted;
    @Basic(optional = false)
    @NotNull
    @Column(name = "UPDATED")
    private long updated;
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Size(max = 32)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Size(max = 32)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
    private Long statelessTransactionNbr;
    
    @Basic(optional = false)
    @NotNull
    @Column(name = "IGNORED")
    private long ignored;

    public UploadStat() {
    }

    public UploadStat(Long uploadStatId) {
        this.uploadStatId = uploadStatId;
    }

    public UploadStat(Long uploadStatId, Date uploadDate, String filename, long uploaded, long fatalError, long submitted, long mappingError, long warning, long accepted, long inserted, long updated, long ignored) {
        this.uploadStatId = uploadStatId;
        this.uploadDate = uploadDate;
        this.filename = filename;
        this.uploaded = uploaded;
        this.fatalError = fatalError;
        this.submitted = submitted;
        this.mappingError = mappingError;
        this.warning = warning;
        this.accepted = accepted;
        this.inserted = inserted;
        this.updated = updated;
        this.ignored = ignored;
    }

    public Long getUploadStatId() {
        return uploadStatId;
    }

    public void setUploadStatId(Long uploadStatId) {
        this.uploadStatId = uploadStatId;
    }

    public Date getUploadDate() {
        return uploadDate;
    }

    public void setUploadDate(Date uploadDate) {
        this.uploadDate = uploadDate;
    }

    public String getFilename() {
        return filename;
    }

    public void setFilename(String filename) {
        this.filename = filename;
    }

    public long getUploaded() {
        return uploaded;
    }

    public void setUploaded(long uploaded) {
        this.uploaded = uploaded;
    }

    public long getFatalError() {
        return fatalError;
    }

    public void setFatalError(long fatalError) {
        this.fatalError = fatalError;
    }

    public long getSubmitted() {
        return submitted;
    }

    public void setSubmitted(long submitted) {
        this.submitted = submitted;
    }

    public long getMappingError() {
        return mappingError;
    }

    public void setMappingError(long mappingError) {
        this.mappingError = mappingError;
    }

    public long getWarning() {
        return warning;
    }

    public void setWarning(long warning) {
        this.warning = warning;
    }

    public long getAccepted() {
        return accepted;
    }

    public void setAccepted(long accepted) {
        this.accepted = accepted;
    }

    public long getInserted() {
        return inserted;
    }

    public void setInserted(long inserted) {
        this.inserted = inserted;
    }

    public long getUpdated() {
        return updated;
    }

    public void setUpdated(long updated) {
        this.updated = updated;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public Long getHealthAuthorityId() {
        return healthAuthorityId;
    }

    public void setHealthAuthorityId(Long healthAuthorityId) {
        this.healthAuthorityId = healthAuthorityId;
    }
    
    public long getIgnored() {
        return ignored;
    }

    public void setIgnored(long ignored) {
        this.ignored = ignored;
    }
    
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (uploadStatId != null ? uploadStatId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof UploadStat)) {
            return false;
        }
        UploadStat other = (UploadStat) object;
        if ((this.uploadStatId == null && other.uploadStatId != null) || (this.uploadStatId != null && !this.uploadStatId.equals(other.uploadStatId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.mid.ejb.entity.UploadStat[ uploadStatId=" + uploadStatId + " ]";
    }
    
}
