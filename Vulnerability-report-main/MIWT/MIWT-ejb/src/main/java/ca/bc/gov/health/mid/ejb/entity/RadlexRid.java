package ca.bc.gov.health.mid.ejb.entity;

import ca.bc.gov.health.annotation.CodeTable;
import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.FetchType;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Version;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.io.Serializable;
import java.util.Date;
import java.util.List;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
@Entity
@EntityListeners({AuditListener.class})
@Table(name = "MIRD_RADLEX_RID")
@NamedQueries({
    @NamedQuery(name = "RadlexRid.findAll", query = "SELECT r FROM RadlexRid r order by r.ridCode")})
@CodeTable(label="RID_DESCRIPTION",value="RID_CODE")
public class RadlexRid implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 32)
    @Column(name = "RID_CODE")
    private String ridCode;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 255)
    @Column(name = "RID_DESCRIPTION")
    private String ridDescription;
    @Column(name = "EFFECTIVE_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date effectiveDt;
    @Column(name = "EXPIRY_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date expiryDt;
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Size(max = 32)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Size(max = 30)
    @Column(name = "LAST_UPDATED_BY_NM")
    private String lastUpdatedByNm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
	@Version
    private Long statelessTransactionNbr;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "ridCode", fetch=FetchType.LAZY)
    private List<ProcedureRid> procedureRidList;

    public RadlexRid() {
    }

    public RadlexRid(String ridCode) {
        this.ridCode = ridCode;
    }

    public RadlexRid(String ridCode, String ridDescription) {
        this.ridCode = ridCode;
        this.ridDescription = ridDescription;
    }

    public String getRidCode() {
        return ridCode;
    }

    public void setRidCode(String ridCode) {
        this.ridCode = ridCode;
    }

    public String getRidDescription() {
        return ridDescription;
    }

    public void setRidDescription(String ridDescription) {
        this.ridDescription = ridDescription;
    }

    public Date getEffectiveDt() {
        return effectiveDt;
    }

    public void setEffectiveDt(Date effectiveDt) {
        this.effectiveDt = effectiveDt;
    }

    public Date getExpiryDt() {
        return expiryDt;
    }

    public void setExpiryDt(Date expiryDt) {
        this.expiryDt = expiryDt;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public String getLastUpdatedByNm() {
        return lastUpdatedByNm;
    }

    public void setLastUpdatedByNm(String lastUpdatedByNm) {
        this.lastUpdatedByNm = lastUpdatedByNm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public List<ProcedureRid> getProcedureRidList() {
        return procedureRidList;
    }

    public void setProcedureRidList(List<ProcedureRid> procedureRidList) {
        this.procedureRidList = procedureRidList;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (ridCode != null ? ridCode.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof RadlexRid)) {
            return false;
        }
        RadlexRid other = (RadlexRid) object;
        if ((this.ridCode == null && other.ridCode != null) || (this.ridCode != null && !this.ridCode.equals(other.ridCode))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.mid.ejb.entity.RadlexRid[ ridCode=" + ridCode + " ]";
    }
    
}
