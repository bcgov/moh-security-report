package ca.bc.gov.health.mid.ejb.entity;

import ca.bc.gov.health.annotation.CodeTable;
import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.FetchType;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Version;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.io.Serializable;
import java.util.Date;
import java.util.List;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
@Entity
@EntityListeners({AuditListener.class})
@Table(name = "MIRD_ANATOMICAL_IMAGING_REGION")
@NamedQueries({
    @NamedQuery(name = "AnatomicalImagingRegion.findAll", query = "SELECT a FROM AnatomicalImagingRegion a")
   , @NamedQuery(name = "AnatomicalImagingRegion.findAllValid", query = "SELECT a FROM AnatomicalImagingRegion a where a.expiryDt IS NULL OR a.expiryDt >= CURRENT_DATE ORDER BY a.imagingRegionCd")})
@CodeTable(label="IMAGING_REGION_NM",value="IMAGING_REGION_CD")
public class AnatomicalImagingRegion implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 30)
    @Column(name = "IMAGING_REGION_CD")
    private String imagingRegionCd;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 255)
    @Column(name = "IMAGING_REGION_NM")
    private String imagingRegionNm;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 255)
    @Column(name = "IMAGING_REGION_DESC")
    private String imagingRegionDesc;
    @Basic(optional = false)
    @NotNull
    @Column(name = "EFFECTIVE_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date effectiveDt;
    @Column(name = "EXPIRY_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date expiryDt;
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Size(max = 32)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Size(max = 32)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
	@Version
    private Long statelessTransactionNbr;
    @OneToMany(mappedBy = "firstImagingRegionCd", fetch=FetchType.LAZY)
    private List<Booking> bookingList;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "imagingRegionCd", fetch=FetchType.LAZY)
    private List<Procedure> procedureList;
    @OneToMany(mappedBy = "firstImagingRegionCd", fetch=FetchType.LAZY)
    private List<CompletedProcedure> completedProcedureList;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "imagingRegionCd", fetch=FetchType.LAZY)
    private List<AnatomicalImgagingRegionMap> anatomicalImgagingRegionMapList;

    public AnatomicalImagingRegion() {
    }

    public AnatomicalImagingRegion(String imagingRegionCd) {
        this.imagingRegionCd = imagingRegionCd;
    }

    public AnatomicalImagingRegion(String imagingRegionCd, String imagingRegionNm, String imagingRegionDesc, Date effectiveDt) {
        this.imagingRegionCd = imagingRegionCd;
        this.imagingRegionNm = imagingRegionNm;
        this.imagingRegionDesc = imagingRegionDesc;
        this.effectiveDt = effectiveDt;
    }

    public String getImagingRegionCd() {
        return imagingRegionCd;
    }

    public void setImagingRegionCd(String imagingRegionCd) {
        this.imagingRegionCd = imagingRegionCd;
    }

    public String getImagingRegionNm() {
        return imagingRegionNm;
    }

    public void setImagingRegionNm(String imagingRegionNm) {
        this.imagingRegionNm = imagingRegionNm;
    }

    public String getImagingRegionDesc() {
        return imagingRegionDesc;
    }

    public void setImagingRegionDesc(String imagingRegionDesc) {
        this.imagingRegionDesc = imagingRegionDesc;
    }

    public Date getEffectiveDt() {
        return effectiveDt;
    }

    public void setEffectiveDt(Date effectiveDt) {
        this.effectiveDt = effectiveDt;
    }

    public Date getExpiryDt() {
        return expiryDt;
    }

    public void setExpiryDt(Date expiryDt) {
        this.expiryDt = expiryDt;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public List<Booking> getBookingList() {
        return bookingList;
    }

    public void setBookingList(List<Booking> bookingList) {
        this.bookingList = bookingList;
    }

    public List<CompletedProcedure> getCompletedProcedureList() {
        return completedProcedureList;
    }

    public void setCompletedProcedureList(List<CompletedProcedure> completedProcedureList) {
        this.completedProcedureList = completedProcedureList;
    }

    public List<Procedure> getProcedureList() {
        return procedureList;
    }

    public void setProcedureList(List<Procedure> procedureList) {
        this.procedureList = procedureList;
    }
    
    public List<AnatomicalImgagingRegionMap> getAnatomicalImgagingRegionMapList() {
        return anatomicalImgagingRegionMapList;
    }

    public void setAnatomicalImgagingRegionMapList(List<AnatomicalImgagingRegionMap> anatomicalImgagingRegionMapList) {
        this.anatomicalImgagingRegionMapList = anatomicalImgagingRegionMapList;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (imagingRegionCd != null ? imagingRegionCd.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof AnatomicalImagingRegion)) {
            return false;
        }
        AnatomicalImagingRegion other = (AnatomicalImagingRegion) object;
        if ((this.imagingRegionCd == null && other.imagingRegionCd != null) || (this.imagingRegionCd != null && !this.imagingRegionCd.equals(other.imagingRegionCd))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.mid.ejb.entity.AnatomicalImagingRegion[ imagingRegionCd=" + imagingRegionCd + " ]";
    }
    
}
