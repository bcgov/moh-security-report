package ca.bc.gov.health.mid.ejb.entity.custom;

import jakarta.faces.model.SelectItem;
import java.util.ArrayList;
import java.util.List;

/**
 * Holds one row of search criteria options
 *
 * @author CGI Information Management Consultants Inc.
 */
public class WaitTimesFilter implements Comparable<WaitTimesFilter> {

    private int sortOrder;
    private boolean includeInReport;
    private String label;
    private String column;
    private List<SelectItem> options;
    private String[] selectedOptions;

    public WaitTimesFilter(String column, String label, List<SelectItem> options, int sortOrder) {
        selectedOptions = new String[0];
        this.column = column;
        this.label = label;
        this.options = options;
        this.sortOrder = sortOrder;
    }

    @Override
    public int compareTo(WaitTimesFilter o) {
        return Integer.valueOf(sortOrder).compareTo(o.sortOrder);
    }

    /**
     * Getters and Setters
     */
    public boolean isIncludeInReport() {
        return includeInReport;
    }

    public void setIncludeInReport(boolean includeInReport) {
        this.includeInReport = includeInReport;
    }

    public String getLabel() {
        return label;
    }

    public void setLabel(String label) {
        this.label = label;
    }

    public List<SelectItem> getOptions() {
        return options;
    }

    public void setOptions(List<SelectItem> options) {
        this.options = options;
    }

    public String[] getSelectedOptions() {
        return selectedOptions;
    }

    public void setSelectedOptions(String[] selectedOptions) {
        this.selectedOptions = selectedOptions;
    }

    public String getColumn() {
        return column;
    }

    public void setColumn(String column) {
        this.column = column;
    }

    public int getSortOrder() {
        return sortOrder;
    }

    public void setSortOrder(int sortOrder) {
        this.sortOrder = sortOrder;
    }

    public String getSelectedOptionValues() {

        StringBuilder builder = null;

        if (selectedOptions != null && selectedOptions.length > 0) {
            builder = new StringBuilder();

            for (String s : selectedOptions) {
                builder.append(s).append(", ");

                for (SelectItem f : options) {
                    if (f.getValue().toString().equals(s)) {
                        builder.append(f.getLabel()).append(", ");
                        break;
                    }
                }
            }

            builder.delete(builder.length() - 2, builder.length());

        }

        return builder == null ? null : builder.toString();
    }

    public List<SelectItem> getSelectedOptionAsSelectItem() {

        List<SelectItem> mapped = new ArrayList<>();

        for (String s : selectedOptions) {

            for (SelectItem f : options) {
                if (f.getValue().toString().equals(s)) {
                    mapped.add(f);
                    break;
                }
            }
        }

        return mapped;
    }

    public String getFilterDisplayTxt() {
        StringBuilder labelTxt = new StringBuilder();

        if (options == null) {
            labelTxt.append(label);
        }

        if (selectedOptions != null && selectedOptions.length > 0) {
            labelTxt.append(label).append(" = ");

            for (SelectItem s : getSelectedOptionAsSelectItem()) {
                labelTxt.append(s.getLabel()).append(", ");
            }
            labelTxt.delete(labelTxt.length() - 2, labelTxt.length());
        }

        return labelTxt.toString();
    }
}
