package ca.bc.gov.health.mid.ejb.entity;

import ca.bc.gov.health.annotation.CodeTable;
import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import ca.bc.gov.health.ejb.entitylistener.JournalListener;
import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Version;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.io.Serializable;
import java.util.Date;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
@Entity
@EntityListeners({AuditListener.class,JournalListener.class})
@Table(name = "MID_PROCEDURE_MAP")
@SequenceGenerator(name="ProcedureMapSeq", sequenceName="MID_PROCEDURE_MAP_SEQ", allocationSize=1, initialValue=1)
@NamedQueries({
    @NamedQuery(name = "ProcedureMap.findAll", query = "SELECT p FROM ProcedureMap p"),
    @NamedQuery(name = "ProcedureMap.findAllByHA", query = "SELECT p FROM ProcedureMap p WHERE p.healthAuthorityId = :haCode"),
    @NamedQuery(name = "ProcedureMap.findNonExpired", query = "SELECT p FROM ProcedureMap p JOIN p.procedureId pr WHERE pr.expiryDt IS NULL OR pr.expiryDt > CURRENT_TIMESTAMP")})
@CodeTable
public class ProcedureMap implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
@GeneratedValue(strategy=GenerationType.SEQUENCE,generator="ProcedureMapSeq")
        @NotNull
    @Column(name = "PROCEDURE_MAP_ID")
    private Long procedureMapId;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 32)
    @Column(name = "HA_PROCEDURE_CD")
    private String haProcedureCd;
    @NotNull
    @Size(min = 1, max = 32)
    @Column(name = "MODALITY_CD")
    private String modalityCd;
    @NotNull
    @Size(min = 1, max = 32)
    @Column(name = "CONTRAST_CD")
    private String contrastCd;
    @Size(max = 255)
    @Column(name = "HA_PROCEDURE_DESC")
    private String haProcedureDesc;
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Size(max = 32)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Size(max = 32)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
	@Version
    private Long statelessTransactionNbr;
    @JoinColumn(name = "PROCEDURE_ID", referencedColumnName = "PROCEDURE_ID")
    @ManyToOne(optional = false)
    private Procedure procedureId;
    @JoinColumn(name = "HEALTH_AUTHORITY_ID", referencedColumnName = "HEALTH_AUTHORITY_ID")
    @ManyToOne(optional = false)
    private HealthAuthority healthAuthorityId;
//    @JoinColumn(name = "FACILITY_ID", referencedColumnName = "FACILITY_ID")
//    @ManyToOne(optional = false)
//    private Facility facilityId;

    public ProcedureMap() {
    }

    public ProcedureMap(Long procedureMapId) {
        this.procedureMapId = procedureMapId;
    }

    public ProcedureMap(Long procedureMapId, String haProcedureCd) {
        this.procedureMapId = procedureMapId;
        this.haProcedureCd = haProcedureCd;
    }

    public Long getProcedureMapId() {
        return procedureMapId;
    }

    public void setProcedureMapId(Long procedureMapId) {
        this.procedureMapId = procedureMapId;
    }

    public String getHaProcedureCd() {
        return haProcedureCd;
    }

    public void setHaProcedureCd(String haProcedureCd) {
        this.haProcedureCd = haProcedureCd;
    }

    public String getHaProcedureDesc() {
        return haProcedureDesc;
    }

    public void setHaProcedureDesc(String haProcedureDesc) {
        this.haProcedureDesc = haProcedureDesc;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public Procedure getProcedureId() {
        return procedureId;
    }

    public void setProcedureId(Procedure procedureId) {
        this.procedureId = procedureId;
    }

    public HealthAuthority getHealthAuthorityId() {
        return healthAuthorityId;
    }

    public void setHealthAuthorityId(HealthAuthority healthAuthorityId) {
        this.healthAuthorityId = healthAuthorityId;
    }

    //    public Facility getFacilityId() {
    //        return facilityId;
    //    }
    //
    //    public void setFacilityId(Facility facilityId) {
    //        this.facilityId = facilityId;
    //    }
    public String getModalityCd() {
        return modalityCd;
    }

    public void setModalityCd(String modalityCd) {
        this.modalityCd = modalityCd;
    }

    public String getContrastCd() {
        return contrastCd;
    }

    public void setContrastCd(String contrastCd) {
        this.contrastCd = contrastCd;
    }

    
    
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (procedureMapId != null ? procedureMapId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof ProcedureMap)) {
            return false;
        }
        ProcedureMap other = (ProcedureMap) object;
        if ((this.procedureMapId == null && other.procedureMapId != null) || (this.procedureMapId != null && !this.procedureMapId.equals(other.procedureMapId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.mid.ejb.entity.ProcedureMap[ procedureMapId=" + procedureMapId + " ]";
    }
    
}
