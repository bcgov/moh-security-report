package ca.bc.gov.health.mid.ejb.entity;

import ca.bc.gov.health.annotation.CodeTable;
import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.io.Serializable;
import java.util.Date;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
@Entity
@EntityListeners({AuditListener.class})
@Table(name = "MIRD_CONTRAST_INDICATOR")
@NamedQueries({
    @NamedQuery(name = "Contrast.findAll", query = "SELECT m FROM Contrast m"),
    @NamedQuery(name = "Contrast.findAllValid", query = "SELECT e FROM Contrast e WHERE e.expiryDt IS NULL OR e.expiryDt >= CURRENT_DATE ORDER BY e.contrastTypeCd")})
@CodeTable(label="CONTRAST_TYPE_DESC",value="CONTRAST_TYPE_CD")
@Cacheable
public class Contrast implements Serializable {
    @Basic(optional = false)
    @NotNull
    @Column(name = "EFFECTIVE_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date effectiveDt;
    @Column(name = "EXPIRY_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date expiryDt;
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 32)
    @Column(name = "CONTRAST_TYPE_CD")
    private String contrastTypeCd;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 255)
    @Column(name = "CONTRAST_TYPE_DESC")
    private String contrastTypeDesc;
    @Size(max = 32)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Size(max = 32)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
	@Version
    private Long statelessTransactionNbr;

    public Contrast() {
    }

    public Contrast(String contrastTypeCd) {
        this.contrastTypeCd = contrastTypeCd;
    }

    public Contrast(String contrastTypeCd, String contrastTypeDesc, Date effectiveDt) {
        this.contrastTypeCd = contrastTypeCd;
        this.contrastTypeDesc = contrastTypeDesc;
        this.effectiveDt = effectiveDt;
    }

    public String getContrastTypeCd() {
        return contrastTypeCd;
    }

    public void setContrastTypeCd(String contrastTypeCd) {
        this.contrastTypeCd = contrastTypeCd;
    }

    public String getContrastTypeDesc() {
        return contrastTypeDesc;
    }

    public void setContrastTypeDesc(String contrastTypeDesc) {
        this.contrastTypeDesc = contrastTypeDesc;
    }

    public Date getEffectiveDt() {
        return effectiveDt;
    }

    public void setEffectiveDt(Date effectiveDt) {
        this.effectiveDt = effectiveDt;
    }

    public Date getExpiryDt() {
        return expiryDt;
    }

    public void setExpiryDt(Date expiryDt) {
        this.expiryDt = expiryDt;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (contrastTypeCd != null ? contrastTypeCd.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Contrast)) {
            return false;
        }
        Contrast other = (Contrast) object;
        if ((this.contrastTypeCd == null && other.contrastTypeCd != null) || (this.contrastTypeCd != null && !this.contrastTypeCd.equals(other.contrastTypeCd))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.mid.ejb.entity.Contrast[ contrastTypeCd=" + contrastTypeCd + " ]";
    }
    
    public boolean isExpired() {
		return expiryDt != null && expiryDt.before(new Date());
	}
    
}