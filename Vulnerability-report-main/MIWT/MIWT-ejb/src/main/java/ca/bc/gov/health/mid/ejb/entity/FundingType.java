package ca.bc.gov.health.mid.ejb.entity;

import ca.bc.gov.health.annotation.CodeTable;
import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.FetchType;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Version;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.io.Serializable;
import java.util.Date;
import java.util.List;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
@Entity
@EntityListeners({AuditListener.class})
@Table(name = "MIRD_FUNDING_TYPE")
@NamedQueries({
    @NamedQuery(name = "FundingType.findAll", query = "SELECT f FROM FundingType f"),
    @NamedQuery(name = "FundingType.findAllValid", query = "SELECT e FROM FundingType e WHERE e.expiryDt IS NULL OR e.expiryDt >= CURRENT_DATE ORDER BY e.fundingTypeDesc")})
@CodeTable(label="FUNDING_TYPE_DESC",value="FUNDING_TYPE_CD")
public class FundingType implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 32)
    @Column(name = "FUNDING_TYPE_CD")
    private String fundingTypeCd;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 255)
    @Column(name = "FUNDING_TYPE_DESC")
    private String fundingTypeDesc;
    @Basic(optional = false)
    @NotNull
    @Column(name = "EFFECTIVE_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date effectiveDt;
    @Column(name = "EXPIRY_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date expiryDt;
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Size(max = 32)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Size(max = 32)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
	@Version
    private Long statelessTransactionNbr;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "fundingTypeCd", fetch=FetchType.LAZY)
    private List<FundingTypeMap> fundingTypeMapList;
    @OneToMany(mappedBy = "fundingTypeCd", fetch=FetchType.LAZY)
    private List<CompletedProcedure> completedProcedureList;

    public FundingType() {
    }

    public FundingType(String fundingTypeCd) {
        this.fundingTypeCd = fundingTypeCd;
    }

    public FundingType(String fundingTypeCd, String fundingTypeDesc, Date effectiveDt) {
        this.fundingTypeCd = fundingTypeCd;
        this.fundingTypeDesc = fundingTypeDesc;
        this.effectiveDt = effectiveDt;
    }

    public String getFundingTypeCd() {
        return fundingTypeCd;
    }

    public void setFundingTypeCd(String fundingTypeCd) {
        this.fundingTypeCd = fundingTypeCd;
    }

    public String getFundingTypeDesc() {
        return fundingTypeDesc;
    }

    public void setFundingTypeDesc(String fundingTypeDesc) {
        this.fundingTypeDesc = fundingTypeDesc;
    }

    public Date getEffectiveDt() {
        return effectiveDt;
    }

    public void setEffectiveDt(Date effectiveDt) {
        this.effectiveDt = effectiveDt;
    }

    public Date getExpiryDt() {
        return expiryDt;
    }

    public void setExpiryDt(Date expiryDt) {
        this.expiryDt = expiryDt;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public List<FundingTypeMap> getFundingTypeMapList() {
        return fundingTypeMapList;
    }

    public void setFundingTypeMapList(List<FundingTypeMap> fundingTypeMapList) {
        this.fundingTypeMapList = fundingTypeMapList;
    }

    public List<CompletedProcedure> getCompletedProcedureList() {
        return completedProcedureList;
    }

    public void setCompletedProcedureList(List<CompletedProcedure> completedProcedureList) {
        this.completedProcedureList = completedProcedureList;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (fundingTypeCd != null ? fundingTypeCd.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof FundingType)) {
            return false;
        }
        FundingType other = (FundingType) object;
        if ((this.fundingTypeCd == null && other.fundingTypeCd != null) || (this.fundingTypeCd != null && !this.fundingTypeCd.equals(other.fundingTypeCd))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.mid.ejb.entity.FundingType[ fundingTypeCd=" + fundingTypeCd + " ]";
    }
    
    public boolean isExpired() {
		return expiryDt != null && expiryDt.before(new Date());
	}
    
}
