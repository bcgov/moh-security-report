package ca.bc.gov.health.mid.ejb.entity;

import ca.bc.gov.health.annotation.CodeTable;
import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import ca.bc.gov.health.ejb.entitylistener.JournalListener;
import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Version;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.io.Serializable;
import java.util.Date;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
@Entity
@EntityListeners({AuditListener.class,JournalListener.class})
@Table(name = "MID_APPROPRIATENESS_MAP")
@SequenceGenerator(name="AppropriatenessMapSeq", sequenceName="MID_APPROPRIATENESS_MAP_SEQ", allocationSize=1, initialValue=1)
@NamedQueries({
    @NamedQuery(name = "AppropriatenessMap.findAll", query = "SELECT a FROM AppropriatenessMap a"),
    @NamedQuery(name = "AppropriatenessMap.findAllByHA", query = "SELECT a FROM AppropriatenessMap a WHERE a.healthAuthorityId = :haCode"),
    @NamedQuery(name = "AppropriatenessMap.findNonExpired", query = "SELECT a FROM AppropriatenessMap a JOIN a.appropriatenessCd ac WHERE ac.expiryDt IS NULL OR ac.expiryDt > CURRENT_TIMESTAMP")})
@CodeTable
public class AppropriatenessMap implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
@GeneratedValue(strategy=GenerationType.SEQUENCE,generator="AppropriatenessMapSeq")
        @NotNull
    @Column(name = "APPROPRIATENESS_MAP_ID")
    private Long appropriatenessMapId;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 32)
    @Column(name = "HA_APPROPRIATENESS_CD")
    private String haAppropriatenessCd;
    @Size(max = 255)
    @Column(name = "HA_APPROPRIATENESS_DESC")
    private String haAppropriatenessDesc;
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Size(max = 32)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Size(max = 32)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
	@Version
    private Long statelessTransactionNbr;
    @JoinColumn(name = "HEALTH_AUTHORITY_ID", referencedColumnName = "HEALTH_AUTHORITY_ID")
    @ManyToOne(optional = false)
    private HealthAuthority healthAuthorityId;
    @JoinColumn(name = "APPROPRIATENESS_CD", referencedColumnName = "APPROPRIATENESS_CD")
    @ManyToOne(optional = false)
    private Appropriateness appropriatenessCd;

    public AppropriatenessMap() {
    }

    public AppropriatenessMap(Long appropriatenessMapId) {
        this.appropriatenessMapId = appropriatenessMapId;
    }

    public AppropriatenessMap(Long appropriatenessMapId, String haAppropriatenessCd) {
        this.appropriatenessMapId = appropriatenessMapId;
        this.haAppropriatenessCd = haAppropriatenessCd;
    }

    public Long getAppropriatenessMapId() {
        return appropriatenessMapId;
    }

    public void setAppropriatenessMapId(Long appropriatenessMapId) {
        this.appropriatenessMapId = appropriatenessMapId;
    }

    public String getHaAppropriatenessCd() {
        return haAppropriatenessCd;
    }

    public void setHaAppropriatenessCd(String haAppropriatenessCd) {
        this.haAppropriatenessCd = haAppropriatenessCd;
    }

    public String getHaAppropriatenessDesc() {
        return haAppropriatenessDesc;
    }

    public void setHaAppropriatenessDesc(String haAppropriatenessDesc) {
        this.haAppropriatenessDesc = haAppropriatenessDesc;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public HealthAuthority getHealthAuthorityId() {
        return healthAuthorityId;
    }

    public void setHealthAuthorityId(HealthAuthority healthAuthorityId) {
        this.healthAuthorityId = healthAuthorityId;
    }

    public Appropriateness getAppropriatenessCd() {
        return appropriatenessCd;
    }

    public void setAppropriatenessCd(Appropriateness appropriatenessCd) {
        this.appropriatenessCd = appropriatenessCd;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (appropriatenessMapId != null ? appropriatenessMapId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof AppropriatenessMap)) {
            return false;
        }
        AppropriatenessMap other = (AppropriatenessMap) object;
        if ((this.appropriatenessMapId == null && other.appropriatenessMapId != null) || (this.appropriatenessMapId != null && !this.appropriatenessMapId.equals(other.appropriatenessMapId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.mid.ejb.entity.AppropriatenessMap[ appropriatenessMapId=" + appropriatenessMapId + " ]";
    }
    
}
