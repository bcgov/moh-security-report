package ca.bc.gov.health.mid.ejb.entity;

import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.io.Serializable;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
@Entity
@EntityListeners({AuditListener.class})
@Table(name = "MIRD_SNAPSHOT")
@SequenceGenerator(name="SnapshotSeq", sequenceName="MIRD_SNAPSHOT_SEQ", allocationSize=1, initialValue=1)
@NamedQueries({
    @NamedQuery(name = "Snapshot.findAll", query = "SELECT s FROM Snapshot s order by s.snapshotId desc")
})
public class Snapshot implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
@GeneratedValue(strategy=GenerationType.SEQUENCE,generator="SnapshotSeq")
        @NotNull
    @Column(name = "SNAPSHOT_ID")
    private Long snapshotId;
    @Basic(optional = false)
    @NotNull
    @Column(name = "REPORTING_PERIOD_START_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date reportingPeriodStartDt;
    @Basic(optional = false)
    @NotNull
    @Column(name = "REPORTING_PERIOD_END_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date reportingPeriodEndDt;
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Size(max = 32)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Size(max = 32)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
	@Version
    private Long statelessTransactionNbr;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "snapshotId")
    private List<SnapshotLog> snapshotLogList;

    public Snapshot() {
    }

    public Snapshot(Long snapshotId) {
        this.snapshotId = snapshotId;
    }

    public Snapshot(Long snapshotId, Date reportingPeriodStartDt, Date reportingPeriodEndDt) {
        this.snapshotId = snapshotId;
        this.reportingPeriodStartDt = reportingPeriodStartDt;
        this.reportingPeriodEndDt = reportingPeriodEndDt;
    }

    public Long getSnapshotId() {
        return snapshotId;
    }

    public void setSnapshotId(Long snapshotId) {
        this.snapshotId = snapshotId;
    }

    public Date getReportingPeriodStartDt() {
        return reportingPeriodStartDt;
    }

    public void setReportingPeriodStartDt(Date reportingPeriodStartDt) {
        this.reportingPeriodStartDt = reportingPeriodStartDt;
    }

    public Date getReportingPeriodEndDt() {
        return reportingPeriodEndDt;
    }

    public void setReportingPeriodEndDt(Date reportingPeriodEndDt) {
        this.reportingPeriodEndDt = reportingPeriodEndDt;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public List<SnapshotLog> getSnapshotLogList() {
        Collections.sort(snapshotLogList, new Comparator<SnapshotLog>(){

            @Override
            public int compare(SnapshotLog o1, SnapshotLog o2) {
                return o1.getHealthAuthorityId().getHealthAuthorityId().compareTo(o2.getHealthAuthorityId().getHealthAuthorityId());
            }
            
        });
        return snapshotLogList;
    }

    public void setSnapshotLogList(List<SnapshotLog> snapshotLogList) {
        this.snapshotLogList = snapshotLogList;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (snapshotId != null ? snapshotId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Snapshot)) {
            return false;
        }
        Snapshot other = (Snapshot) object;
        if ((this.snapshotId == null && other.snapshotId != null) || (this.snapshotId != null && !this.snapshotId.equals(other.snapshotId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.mid.ejb.entity.Snapshot[ snapshotId=" + snapshotId + " ]";
    }
    
}
