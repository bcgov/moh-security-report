package ca.bc.gov.health.mid.ejb.entity;

import ca.bc.gov.health.annotation.CodeTable;
import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Version;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.io.Serializable;
import java.util.Date;
import java.util.List;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
@Entity
@EntityListeners({AuditListener.class})
@Table(name = "MIRD_PROCEDURE")
@SequenceGenerator(name="ProcedureSeq", sequenceName="MIRD_PROCEDURE_SEQ", allocationSize=1, initialValue=1)
@NamedQueries({
    @NamedQuery(name = "Procedure.findAll", query = "SELECT p FROM Procedure p"),
    @NamedQuery(name = "Procedure.findAllValid", query = "SELECT e FROM Procedure e WHERE e.expiryDt IS NULL OR e.expiryDt >= CURRENT_DATE ORDER BY e.procedureId")})
@CodeTable(label="PROV_PROCEDURE_RPID_DESC",value="PROCEDURE_ID")
public class Procedure implements Serializable {

    @JoinColumn(name = "BODY_PART_CD", referencedColumnName = "BP_CD")
    @ManyToOne
    private BodyPart bodyPartCd;
    @Basic(optional = false)
    @NotNull
    @Column(name = "EFFECTIVE_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date effectiveDt;
    @Column(name = "EXPIRY_DT")
    @Temporal(TemporalType.TIMESTAMP)
    private Date expiryDt;
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @JoinColumn(name = "MODALITY_TYPE_CD", referencedColumnName = "MODALITY_TYPE_CD")
    @ManyToOne(optional = false)
    private Modality modalityTypeCd;
    @JoinColumn(name = "IMAGING_REGION_CD", referencedColumnName = "IMAGING_REGION_CD")
    @ManyToOne(optional = false)
    private AnatomicalImagingRegion imagingRegionCd;
    private static final long serialVersionUID = 1L;
    @Id
@GeneratedValue(strategy=GenerationType.SEQUENCE,generator="ProcedureSeq")
        @NotNull
    @Column(name = "PROCEDURE_ID")
    private Long procedureId;
    @Size(max = 32)
    @Column(name = "PROV_PROCEDURE_RPID_CD")
    private String provProcedureRpidCd;
    @Size(max = 255)
    @Column(name = "PROV_PROCEDURE_RPID_DESC")
    private String provProcedureRpidDesc;
    @Size(max = 32)
    @Column(name = "SNOMED_CD")
    private String snomedCd;
    @Size(max = 255)
    @Column(name = "SNOMED_DESC")
    private String snomedDesc;
    @Size(max = 32)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Size(max = 32)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
	@Version
    private Long statelessTransactionNbr;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "procedureId", fetch=FetchType.LAZY)
    private List<ProcedureMap> procedureMapList;
    @OneToMany(mappedBy = "procedureId", fetch=FetchType.LAZY)
    private List<Booking> bookingList;
    @OneToMany(cascade = CascadeType.ALL, orphanRemoval=true, mappedBy = "procedureId", fetch=FetchType.LAZY)
    private List<ProcedureRid> procedureRidList;
    @OneToMany(mappedBy = "procedureId", fetch=FetchType.LAZY)
    private List<CompletedProcedure> completedProcedureList;

    public Procedure() {
    }

    public Procedure(Long procedureId) {
        this.procedureId = procedureId;
    }

    public Long getProcedureId() {
        return procedureId;
    }

    public void setProcedureId(Long procedureId) {
        this.procedureId = procedureId;
    }

    public String getProvProcedureRpidCd() {
        return provProcedureRpidCd;
    }

    public void setProvProcedureRpidCd(String provProcedureRpidCd) {
        this.provProcedureRpidCd = provProcedureRpidCd;
    }

    public String getProvProcedureRpidDesc() {
        return provProcedureRpidDesc;
    }

    public void setProvProcedureRpidDesc(String provProcedureRpidDesc) {
        this.provProcedureRpidDesc = provProcedureRpidDesc;
    }

    public String getSnomedCd() {
        return snomedCd;
    }

    public void setSnomedCd(String snomedCd) {
        this.snomedCd = snomedCd;
    }

    public String getSnomedDesc() {
        return snomedDesc;
    }

    public void setSnomedDesc(String snomedDesc) {
        this.snomedDesc = snomedDesc;
    }

    public Date getEffectiveDt() {
        return effectiveDt;
    }

    public void setEffectiveDt(Date effectiveDt) {
        this.effectiveDt = effectiveDt;
    }

    public Date getExpiryDt() {
        return expiryDt;
    }

    public void setExpiryDt(Date expiryDt) {
        this.expiryDt = expiryDt;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public List<ProcedureMap> getProcedureMapList() {
        return procedureMapList;
    }

    public void setProcedureMapList(List<ProcedureMap> procedureMapList) {
        this.procedureMapList = procedureMapList;
    }

    public List<Booking> getBookingList() {
        return bookingList;
    }

    public void setBookingList(List<Booking> bookingList) {
        this.bookingList = bookingList;
    }

    public List<ProcedureRid> getProcedureRidList() {
        return procedureRidList;
    }

    public void setProcedureRidList(List<ProcedureRid> procedureRidList) {
        this.procedureRidList = procedureRidList;
    }

    public List<CompletedProcedure> getCompletedProcedureList() {
        return completedProcedureList;
    }

    public void setCompletedProcedureList(List<CompletedProcedure> completedProcedureList) {
        this.completedProcedureList = completedProcedureList;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (procedureId != null ? procedureId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Procedure)) {
            return false;
        }
        Procedure other = (Procedure) object;
        if ((this.procedureId == null && other.procedureId != null) || (this.procedureId != null && !this.procedureId.equals(other.procedureId))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.mid.ejb.entity.Procedure[ procedureId=" + procedureId + " ]";
    }


    public Modality getModalityTypeCd() {
        return modalityTypeCd;
    }

    public void setModalityTypeCd(Modality modalityTypeCd) {
        this.modalityTypeCd = modalityTypeCd;
    }
    
    public AnatomicalImagingRegion getImagingRegionCd() {
        return imagingRegionCd;
    }

    public void setImagingRegionCd(AnatomicalImagingRegion imagingRegionCd) {
        this.imagingRegionCd = imagingRegionCd;
    }

    public BodyPart getBodyPartCd() {
        return bodyPartCd;
    }

    public void setBodyPartCd(BodyPart bodyPartCd) {
        this.bodyPartCd = bodyPartCd;
    }
    
    public boolean isExpired() {
		return expiryDt != null && expiryDt.before(new Date());
	}
}
