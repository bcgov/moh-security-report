package ca.bc.gov.health.mid.ejb.snapshot;

import ca.bc.gov.health.mid.ejb.entity.*;
import jakarta.validation.ConstraintViolationException;
import jakarta.validation.Validator;

public class RecordValidator {

    private final Validator validator;

    public RecordValidator(Validator validator) {
        this.validator = validator;
    }

    public boolean validate(SnapshotRecord record) {
        try {
            Patient patient = getPatient(record);
            Booking booking = getBooking(record, patient);
            if ("Completed".equals(record.getStatusCd())) {
                CompletedProcedure cp = getProcedure(record, booking);
                if (!validator.validate(cp).isEmpty()) {
                    return false;
                }
            }
            return validator.validate(patient).isEmpty() && validator.validate(booking).isEmpty();
        } catch (ConstraintViolationException exception) {
            return false;
        }
    }

    private CompletedProcedure getProcedure(SnapshotRecord record, Booking booking) {
        CompletedProcedure cp;
        cp = new CompletedProcedure();
        cp.setBookingId(booking);
        cp.setAgeRangeId(new AgeRange(record.getAgeRangeId()));
        if (record.getMachineId() != null) {
            cp.setEquipmentId(new Equipment(record.getMachineId()));
        }
        cp.setFacilityId(new Facility(record.getFacilityIdCompleted()));
        cp.setHealthAuthorityId(record.getHealthAuthorityId());
        cp.setPriorityLevelId(record.getPriorityLevelId());
        cp.setTimedExamYn(record.getTimedExamYn());
        cp.setGenderCd(record.getGenderCd());
        cp.setFinalResultsAvailDt(record.getResultsAvailDt());
        if (record.getFindingCd() != null) {
            cp.setFindingCd(new Findings(record.getFindingCd()));
        }
        cp.setFirstImagingRegionCd(new AnatomicalImagingRegion(record.getImagingRegionCd()));
        cp.setBodyPartCd(new BodyPart(record.getBodyPartCdCompleted()));
        if (record.getFundingTypeCd() != null) {
            cp.setFundingTypeCd(new FundingType(record.getFundingTypeCd()));
        }
        cp.setHaProcedureId(record.getHaProcedureCdCompleted());
        cp.setModalityCd(new Modality(record.getModalityCdCompleted()));
        cp.setMspNo(record.getMspNo());
        cp.setPractitionerId(record.getPractitionerId());
        cp.setProcedureId(new Procedure(Long.parseLong(record.getProcedureIdCompleted())));
        cp.setProcedurePerformedDt(record.getProcedurePerformedDt());
        cp.setProcedureDuration(record.getProcedureDuration());
        cp.setSedationYn(record.getSedationYnCompleted());
        cp.setUrn(record.getUrn());
        cp.setCompletedProcedureId(0l);
        cp.setExamCount(record.getExamCountCompleted()); //#18679 adding new ExamCount column
        return cp;
    }

    private Booking getBooking(SnapshotRecord record, Patient patient) {
        Booking booking = new Booking();
        booking.setProcedureBookingId(record.getBookingId());
        booking.setStatusCd(record.getStatusCd());
        booking.setHealthAuthorityId(record.getHealthAuthorityId());
        if (record.getAppropriatenessCd() != null) {
            booking.setAppropriatenessCd(new Appropriateness(record.getAppropriatenessCd()));
        }
        booking.setModalityTypeCd(new Modality(record.getModalityCd()));
        booking.setBookingFormCreatedDt(record.getBookingCreatedDt());
        booking.setBookingFormReceivedDt(record.getBookingFormReceivedDt());
        if (record.getCancellationReasonCd() != null) {
            booking.setCancellationReasonCd(new CancellationReason(record.getCancellationReasonCd()));
        }
        if (record.getEncounterTypeCd() != null) {
            booking.setEncounterTypeCd(new EncounterType(record.getEncounterTypeCd()));
        }
        if (record.getMachineId() != null) {
            booking.setEquipmentId(new Equipment(record.getMachineId()));
        }
        booking.setExamId(record.getExamId());
        if (record.getExamReason() != null) {
            booking.setExamReason(new ExamReason(record.getExamReason()));
        }
        booking.setFacilityId(new Facility(record.getFacilityId()));

        booking.setFirstImagingRegionCd(new AnatomicalImagingRegion(record.getImagingRegionCd()));
        booking.setBodyPartCd(new BodyPart(record.getBodyPartCd()));
        booking.setMspNo(record.getMspNo());
        booking.setPatUnavailEndDt1(record.getPatientUnavailEndDt1());
        booking.setPatUnavailEndDt2(record.getPatientUnavailEndDt2());
        booking.setPatUnavailEndDt3(record.getPatientUnavailEndDt3());
        booking.setPatUnavailStartDt1(record.getPatientUnavailStartDt1());
        booking.setPatUnavailStartDt2(record.getPatientUnavailStartDt2());
        booking.setPatUnavailStartDt3(record.getPatientUnavailStartDt3());
        booking.setPatientId(patient);
        if (record.getPostponementReasonCd() != null) {
            booking.setPostponedReasonCd(new PostponeReason(record.getPostponementReasonCd()));
        }
        booking.setPractitionerId(record.getPractitionerId());
        booking.setPriorityLevel(new PriorityLevel(record.getPriorityLevelId()));
        booking.setProcedureCancelledDt(record.getProcedureCancelledDt());
        //Empty procedure if null
        if (record.getProcedureId() == null) {
            booking.setProcedureId(new Procedure());
        } else {
            booking.setProcedureId(new Procedure(Long.parseLong(record.getProcedureId())));
        }
        booking.setProcedurePerformedDt(record.getProcedurePerformedDt());
        booking.setProcedurePostponedDt(record.getProcedurePostponedDt());
        booking.setProcedureScheduledDt(record.getProcedureScheduledDt());
        booking.setTimedExamYn(record.getTimedExamYn().charAt(0));
        booking.setSedationYn(record.getSedationYn());
        booking.setReferralDt(record.getReferralDt());
        booking.setResultsSentDt(record.getResultsAvailDt());
        booking.setExamCount(record.getExamCount());
        booking.setBookingId(0L);
        return booking;
    }

    private Patient getPatient(SnapshotRecord record) {
        Patient patient = new Patient();
        patient.setAddressLine1Txt(record.getAddressLine1());
        patient.setAddressLine2Txt(record.getAddressLine2());
        patient.setAddressLine3Txt(record.getAddressLine3());
        patient.setBirthDt(record.getBirthDt());
        patient.setFirstGivenNm(record.getFirstGivenNm());
        patient.setGenderCd(new Gender(record.getGenderCd()));
        patient.setMRN(record.getMrn());
        patient.setPHN(record.getPhn());
        patient.setPostalCodeTxt(record.getPostalCode());
        patient.setPreferredNm(record.getPreferredNm());
        patient.setProvinceCd(new Province(record.getProvinceCd()));
        patient.setSecondGivenNm(record.getSecondGivenNm());
        patient.setSurnameNm(record.getSurnameNm());
        patient.setThirdGivenNm(record.getThirdGivenNm());
        patient.setPatientId(0L);
        return patient;
    }

}
