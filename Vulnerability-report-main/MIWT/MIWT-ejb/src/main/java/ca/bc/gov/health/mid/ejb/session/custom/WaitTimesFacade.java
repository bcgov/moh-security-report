package ca.bc.gov.health.mid.ejb.session.custom;

import ca.bc.gov.health.mid.ejb.entity.custom.WaitTimesCriteria;
import ca.bc.gov.health.mid.ejb.entity.custom.WaitTimesFilter;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Facade for running wait times queries
 *
 * @author CGI Information Management Consultants Inc.
 */
@Stateless
public class WaitTimesFacade implements WaitTimesFacadeLocal {

    @PersistenceContext
    private EntityManager em;

    /**
     * Runs the query based on provided parameters
     *
     * @param snapshotId Long
     * @param startDate Date
     * @param endDate Date
     * @param criteria WaitTimesCriteria
     * @return List<Map> - The query results
     */
    @Override
    public List<Map> getResultsForForParams(Long snapshotId, Date startDate, Date endDate, WaitTimesCriteria criteria) {
        
        List<Map> data = new ArrayList<>();
        List<WaitTimesFilter> selectedFilters = new ArrayList<>();
        
        for (WaitTimesFilter filter : criteria.getFilters()) {
            if (filter.isIncludeInReport()) {

                selectedFilters.add(filter);
                String[] selectedOptions;

                // If no filter values are selected, then extract all options as selectedOptions
                if (filter.getOptions() != null && filter.getOptions().size() > 0 && (filter.getSelectedOptions() == null || filter.getSelectedOptions().length == 0)) {
                    selectedOptions = new String[filter.getOptions().size()];

                    for (int i = 0; i < filter.getOptions().size(); i++) {
                        selectedOptions[i] = filter.getOptions().get(i).getValue().toString();
                    }

                    filter.setSelectedOptions(selectedOptions);
                }
            }
        }

        // Holds a map of table and their abbreviations
        Map<String, String> tableAliasMap = new LinkedHashMap<>();

        for (WaitTimesFilter f : selectedFilters) {
            if (f.getColumn().equalsIgnoreCase("MODALITY_TYPE_CD")) {
                tableAliasMap.put(snapshotId == null ? "MIRD_MODALITY" : "MISA_MODALITY", "MODA");

            } else if (f.getColumn().equalsIgnoreCase("HEALTH_AUTHORITY_ID")) {
                tableAliasMap.put(snapshotId == null ? "MIRD_HEALTH_AUTHORITY" : "MISA_HEALTH_AUTHORITY", "HA");

            } else if (f.getColumn().equalsIgnoreCase("FACILITY_ID")) {
                tableAliasMap.put(snapshotId == null ? "MIRD_FACILITY" : "MISA_FACILITY", "FAC");

            } else if (f.getColumn().equalsIgnoreCase("FIRST_IMAGING_REGION_CD")) {
                tableAliasMap.put(snapshotId == null ? "MIRD_ANATOMICAL_IMAGING_REGION" : "MISA_ANAT_IMG_RGN", "IMG");

            }else if (f.getColumn().equalsIgnoreCase("BODY_PART_CD")) {
                tableAliasMap.put(snapshotId == null ? "MIRD_BODY_PART" : "MISA_BODY_PART", "BDP");

            } else if (f.getColumn().equalsIgnoreCase("PRIORITY_LEVEL_ID")) {
                tableAliasMap.put(snapshotId == null ? "MIRD_PRIORITY_LEVEL" : "MISA_PRIORITY_LEVEL", "PRL");

            } else if (f.getColumn().equalsIgnoreCase("GENDER_CD")) {
                tableAliasMap.put(snapshotId == null ? "MIRD_GENDER" : "MISA_GENDER", "GND");

            } else if (f.getColumn().equalsIgnoreCase("AGE_RANGE_ID")) {
                tableAliasMap.put(snapshotId == null ? "MIRD_AGE_RANGE" : "MISA_AGE_RANGE", "AGE");

            } else if (f.getColumn().equalsIgnoreCase("ENCOUNTER_TYPE_CD")) {
                tableAliasMap.put(snapshotId == null ? "MIRD_ENCOUNTER_TYPE" : "MISA_ENCOUNTER_TYPE", "ENC");

            } else if (f.getColumn().equalsIgnoreCase("FUNDING_TYPE_CD")) {
                tableAliasMap.put(snapshotId == null ? "MIRD_FUNDING_TYPE" : "MISA_FUNDING_TYPE", "FUND");

            } else if (f.getColumn().equalsIgnoreCase("TIMED_EXAM_YN")) {
                tableAliasMap.put(snapshotId == null ? "MIRD_BOOKING" : "MISA_BOOKING", "FUND");
                tableAliasMap.put(snapshotId == null ? "MIRD_PATIENT" : "MISA_PATIENT", "PT");
            }
        }

        StringBuilder outerSelectBuilder = new StringBuilder("SELECT ");
        StringBuilder innerSelectBuilder = new StringBuilder("SELECT ");
        innerSelectBuilder.append("GREATEST(0,CALCULATE_WAIT_DAYS(")
                          .append("CP.PROCEDURE_PERFORMED_DT, ")
                          .append("BK.BOOKING_FORM_RECEIVED_DT, ")
                          .append("BK.PAT_UNAVAIL_START_DT_1, ")
                          .append("BK.PAT_UNAVAIL_END_DT_1, ")
                          .append("BK.PAT_UNAVAIL_START_DT_2, ")
                          .append("BK.PAT_UNAVAIL_END_DT_2, ")
                          .append("BK.PAT_UNAVAIL_START_DT_3, ")
                          .append("BK.PAT_UNAVAIL_END_DT_3 ")
                          .append(")) WAIT_DAYS, ");
        StringBuilder joinBuilder = new StringBuilder("FROM ");
        joinBuilder.append(snapshotId == null 
                ? "MIRD_COMPLETED_PROCEDURE CP JOIN MIRD_BOOKING BK ON CP.BOOKING_ID = BK.BOOKING_ID "
                : "MISA_COMPLETED_PROCEDURE CP JOIN MISA_BOOKING BK ON CP.BOOKING_ID = BK.BOOKING_ID AND CP.SNAPSHOT_ID = BK.SNAPSHOT_ID ");
        StringBuilder whereBuilder = new StringBuilder("WHERE ");
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        
        whereBuilder.append("CP.PROCEDURE_PERFORMED_DT >= TO_DATE('"+sdf.format(startDate)+"','YYYY-MM-DD') AND ");
        whereBuilder.append("CP.PROCEDURE_PERFORMED_DT <= TO_DATE('"+sdf.format(endDate)+"','YYYY-MM-DD') AND ");
        
        StringBuilder groupByBuilder = new StringBuilder();

        if (snapshotId != null) {
            whereBuilder.append("CP.SNAPSHOT_ID = ").append(snapshotId).append(" AND ");
        }

        for (WaitTimesFilter filter : criteria.getFilters()) {
            if (filter.isIncludeInReport()) {
                if (filter.getOptions() == null) {

                    switch (filter.getColumn()) {
                        case "TOTAL":
                            outerSelectBuilder.append("COUNT (WAIT_DAYS) AS TOTAL, ");
                            break;
                        case "MIN":
                            outerSelectBuilder.append("MIN (WAIT_DAYS) AS LOWEST, ");
                            break;
                        case "MAX":
                            outerSelectBuilder.append("MAX (WAIT_DAYS) AS MAXIMUM, ");
                            break;
                        case "AVG":
                            outerSelectBuilder.append("ROUND (AVG (WAIT_DAYS),1) AS AVERAGE, ");
                            break;
                        case "25":
                            outerSelectBuilder.append("ROUND(PERCENTILE_CONT (0.25) WITHIN GROUP (ORDER BY (WAIT_DAYS)),1) TWENTY_FIFTH_PERCENTILE, ");
                            break;
                        case "50":
                            outerSelectBuilder.append("ROUND(PERCENTILE_CONT (0.5) WITHIN GROUP (ORDER BY (WAIT_DAYS)),1) FIFTIETH_PERCENTILE, ");
                            break;
                        case "75":
                            outerSelectBuilder.append("ROUND(PERCENTILE_CONT (0.75) WITHIN GROUP (ORDER BY (WAIT_DAYS)),1) SEVENTY_FIFTH_PERCENTILE, ");
                            break;
                        case "90":
                            outerSelectBuilder.append("ROUND(PERCENTILE_CONT (0.90) WITHIN GROUP (ORDER BY (WAIT_DAYS)),1) NINETIETH_PERCENTILE, ");
                            break;
                    }

                } else {

                    String alias;

                    switch (filter.getColumn()) {

                        case "MODALITY_TYPE_CD":
                            alias = tableAliasMap.get(snapshotId == null ? "MIRD_MODALITY" : "MISA_MODALITY");
                            innerSelectBuilder.append(alias).append(".MODALITY_TYPE_DESC, ");
                            joinBuilder.append(snapshotId == null ? "JOIN MIRD_MODALITY " : "JOIN MISA_MODALITY ")
                                       .append(alias).append(" ON ").append(alias).append(".MODALITY_TYPE_CD").append(" = CP.MODALITY_CD ");
                            if (snapshotId!=null){
                                joinBuilder.append("AND ").append(alias).append(".SNAPSHOT_ID = CP.SNAPSHOT_ID ");
                            }
                            outerSelectBuilder.append("MODALITY_TYPE_DESC, ");
                            groupByBuilder.append("MODALITY_TYPE_DESC, ");
                            whereBuilder.append(alias).append(".MODALITY_TYPE_CD IN (").append(prepareINClause(true, filter.getSelectedOptions())).append(") AND ");
                            break;
                        case "CONTRAST_TYPE_CD":
                            alias = tableAliasMap.get(snapshotId == null ? "MIRD_CONTRAST_INDICATOR" : "MISA_CONTRAST_INDICATOR");
                            innerSelectBuilder.append(alias).append(".CONTRAST_TYPE_DESC, ");
                            joinBuilder.append(snapshotId == null ? "JOIN MIRD_CONTRAST_INDICATOR " : "JOIN MISA_CONTRAST_INDICATOR ")
                                       .append(alias).append(" ON ").append(alias).append(".CONTRAST_TYPE_CD").append(" = CP.CONTRAST_CD ");
                            if (snapshotId!=null){
                                joinBuilder.append("AND ").append(alias).append(".SNAPSHOT_ID = CP.SNAPSHOT_ID ");
                            }
                            outerSelectBuilder.append("CONTRAST_TYPE_DESC, ");
                            groupByBuilder.append("CONTRAST_TYPE_DESC, ");
                            whereBuilder.append(alias).append(".CONTRAST_TYPE_CD IN (").append(prepareINClause(true, filter.getSelectedOptions())).append(") AND ");
                            break;
                        case "HEALTH_AUTHORITY_ID":
                            alias = tableAliasMap.get(snapshotId == null ? "MIRD_HEALTH_AUTHORITY" : "MISA_HEALTH_AUTHORITY");
                            innerSelectBuilder.append(alias).append(".HEALTH_AUTHORITY_CD, ");
                            joinBuilder.append(snapshotId == null ? "JOIN MIRD_HEALTH_AUTHORITY " : "JOIN MISA_HEALTH_AUTHORITY ")
                                       .append(alias).append(" ON ").append(alias).append(".HEALTH_AUTHORITY_ID").append(" = CP.HEALTH_AUTHORITY_ID ");
                            if (snapshotId!=null){
                                joinBuilder.append("AND ").append(alias).append(".SNAPSHOT_ID = CP.SNAPSHOT_ID ");
                            }                            
                            outerSelectBuilder.append("HEALTH_AUTHORITY_CD, ");
                            groupByBuilder.append("HEALTH_AUTHORITY_CD, ");
                            whereBuilder.append(alias).append(".HEALTH_AUTHORITY_ID IN (").append(prepareINClause(false, filter.getSelectedOptions())).append(") AND ");
                            break;
                        case "FACILITY_ID":
                            alias = tableAliasMap.get(snapshotId == null ? "MIRD_FACILITY" : "MISA_FACILITY");
                            innerSelectBuilder.append(alias).append(".FACILITY_NM, ");
                            joinBuilder.append(snapshotId == null ? "JOIN MIRD_FACILITY " : "JOIN MISA_FACILITY ")
                                       .append(alias).append(" ON ").append(alias).append(".FACILITY_ID").append(" = CP.FACILITY_ID ");                                  
                            if (snapshotId!=null){
                                joinBuilder.append("AND ").append(alias).append(".SNAPSHOT_ID = CP.SNAPSHOT_ID ");
                            }
                            outerSelectBuilder.append("FACILITY_NM, ");
                            groupByBuilder.append("FACILITY_NM, ");
                            whereBuilder.append(alias).append(".FACILITY_ID IN (").append(prepareINClause(false, filter.getSelectedOptions())).append(") AND ");
                            break;
                        case "FIRST_IMAGING_REGION_CD":
                            alias = tableAliasMap.get(snapshotId == null ? "MIRD_ANATOMICAL_IMAGING_REGION" : "MISA_ANAT_IMG_RGN");
                            innerSelectBuilder.append(alias).append(".IMAGING_REGION_NM, ");
                            joinBuilder.append(snapshotId == null ? "JOIN MIRD_ANATOMICAL_IMAGING_REGION " : "JOIN MISA_ANAT_IMG_RGN ")
                                       .append(alias).append(" ON ").append(alias).append(".IMAGING_REGION_CD").append(" = CP.FIRST_IMAGING_REGION_CD ");                                
                            if (snapshotId!=null){
                                joinBuilder.append("AND ").append(alias).append(".SNAPSHOT_ID = CP.SNAPSHOT_ID ");
                            }
                            outerSelectBuilder.append("IMAGING_REGION_NM, ");
                            groupByBuilder.append("IMAGING_REGION_NM, ");
                            whereBuilder.append(alias).append(".IMAGING_REGION_CD IN (").append(prepareINClause(true, filter.getSelectedOptions())).append(") AND ");
                            break;
                        case "BODY_PART_CD":
                            alias = tableAliasMap.get(snapshotId == null ? "MIRD_BODY_PART" : "MISA_BODY_PART");
                            innerSelectBuilder.append(alias).append(".BP_NM, ");
                            joinBuilder.append(snapshotId == null ? "JOIN MIRD_BODY_PART " : "JOIN MISA_BODY_PART")
                                       .append(alias).append(" ON ").append(alias).append(".BP_CD").append(" = CP.BODY_PART_CD ");                                
                            if (snapshotId!=null){
                                joinBuilder.append("AND ").append(alias).append(".SNAPSHOT_ID = CP.SNAPSHOT_ID ");
                            }
                            outerSelectBuilder.append("BP_NM, ");
                            groupByBuilder.append("BP_NM, ");
                            whereBuilder.append(alias).append(".BP_CD IN (").append(prepareINClause(true, filter.getSelectedOptions())).append(") AND ");
                            break;
                        case "PRIORITY_LEVEL_ID":
                            alias = tableAliasMap.get(snapshotId == null ? "MIRD_PRIORITY_LEVEL" : "MISA_PRIORITY_LEVEL");
                            innerSelectBuilder.append(alias).append(".MODALITY_CD || ' - ' || ");
                            innerSelectBuilder.append(alias).append(".PRIORITY_LEVEL_DESC AS PRIORITY_DESC, ");
                            joinBuilder.append(snapshotId == null ? "JOIN MIRD_PRIORITY_LEVEL " : "JOIN MISA_PRIORITY_LEVEL ")
                                       .append(alias).append(" ON ").append(alias).append(".PRIORITY_LEVEL_ID").append(" = CP.PRIORITY_LEVEL_ID ");                                  
                            if (snapshotId!=null){
                                joinBuilder.append("AND ").append(alias).append(".SNAPSHOT_ID = CP.SNAPSHOT_ID ");
                            }
                            outerSelectBuilder.append("PRIORITY_DESC, ");
                            groupByBuilder.append("PRIORITY_DESC, ");
                            whereBuilder.append(alias).append(".PRIORITY_LEVEL_ID IN (").append(prepareINClause(false, filter.getSelectedOptions())).append(") AND ");
                            break;
                        case "GENDER_CD":
                            alias = tableAliasMap.get(snapshotId == null ? "MIRD_GENDER" : "MISA_GENDER");
                            innerSelectBuilder.append(alias).append(".GENDER_DESC, ");
                            joinBuilder.append(snapshotId == null ? "JOIN MIRD_GENDER " : "JOIN MISA_GENDER ")
                                       .append(alias).append(" ON ").append(alias).append(".GENDER_CD").append(" = CP.GENDER_CD ");         
                            if (snapshotId!=null){
                                joinBuilder.append("AND ").append(alias).append(".SNAPSHOT_ID = CP.SNAPSHOT_ID ");
                            }
                            outerSelectBuilder.append("GENDER_DESC, ");
                            groupByBuilder.append("GENDER_DESC, ");
                            whereBuilder.append(alias).append(".GENDER_CD IN (").append(prepareINClause(true, filter.getSelectedOptions())).append(") AND ");
                            break;
                        case "AGE_RANGE_ID":
                            alias = tableAliasMap.get(snapshotId == null ? "MIRD_AGE_RANGE" : "MISA_AGE_RANGE");
                            innerSelectBuilder.append(alias).append(".START_AGE, ");  // need to change to a range in the DB
                            joinBuilder.append(snapshotId == null ? "JOIN MIRD_AGE_RANGE " : "JOIN MISA_AGE_RANGE ")
                                       .append(alias).append(" ON ").append(alias).append(".AGE_RANGE_ID").append(" = CP.AGE_RANGE_ID ");                               
                            if (snapshotId!=null){
                                joinBuilder.append("AND ").append(alias).append(".SNAPSHOT_ID = CP.SNAPSHOT_ID ");
                            }
                            outerSelectBuilder.append("START_AGE, ");
                            groupByBuilder.append("START_AGE, ");
                            whereBuilder.append(alias).append(".AGE_RANGE_ID IN (").append(prepareINClause(false, filter.getSelectedOptions())).append(") AND ");
                            break;
                        case "ENCOUNTER_TYPE_CD":
                            alias = tableAliasMap.get(snapshotId == null ? "MIRD_ENCOUNTER_TYPE" : "MISA_ENCOUNTER_TYPE");
                            innerSelectBuilder.append(alias).append(".ENCOUNTER_TYPE_DESC, ");
                            joinBuilder.append(snapshotId == null ? "JOIN MIRD_ENCOUNTER_TYPE " : "JOIN MISA_ENCOUNTER_TYPE ")
                                       .append(alias).append(" ON ").append(alias).append(".ENCOUNTER_TYPE_CD").append(" = BK.ENCOUNTER_TYPE_CD ");                     
                            if (snapshotId!=null){
                                joinBuilder.append("AND ").append(alias).append(".SNAPSHOT_ID = CP.SNAPSHOT_ID ");
                            }
                            outerSelectBuilder.append("ENCOUNTER_TYPE_DESC, ");
                            groupByBuilder.append("ENCOUNTER_TYPE_DESC, ");
                            whereBuilder.append(alias).append(".ENCOUNTER_TYPE_CD IN (").append(prepareINClause(true, filter.getSelectedOptions())).append(") AND ");
                            break;
                        case "FUNDING_TYPE_CD":
                            alias = tableAliasMap.get(snapshotId == null ? "MIRD_FUNDING_TYPE" : "MISA_FUNDING_TYPE");
                            innerSelectBuilder.append(alias).append(".FUNDING_TYPE_DESC, ");
                            joinBuilder.append(snapshotId == null ? "JOIN MIRD_FUNDING_TYPE " : "JOIN MISA_FUNDING_TYPE ")
                                       .append(alias).append(" ON ").append(alias).append(".FUNDING_TYPE_CD").append(" = CP.FUNDING_TYPE_CD ");                   
                            if (snapshotId!=null){
                                joinBuilder.append("AND ").append(alias).append(".SNAPSHOT_ID = CP.SNAPSHOT_ID ");
                            }
                            outerSelectBuilder.append("FUNDING_TYPE_DESC, ");
                            groupByBuilder.append("FUNDING_TYPE_DESC, ");
                            whereBuilder.append(alias).append(".FUNDING_TYPE_CD IN (").append(prepareINClause(true, filter.getSelectedOptions())).append(") AND ");
                            break;
                        case "TIMED_EXAM_YN":
                            innerSelectBuilder.append("CASE WHEN BK.TIMED_EXAM_YN = 'Y' THEN 'Yes' ELSE 'No' END TIMED_EXAM_YN, ");
                            outerSelectBuilder.append("TIMED_EXAM_YN, ");
                            groupByBuilder.append("TIMED_EXAM_YN, ");
                            whereBuilder.append("BK.TIMED_EXAM_YN IN (").append(prepareINClause(true, filter.getSelectedOptions())).append(") AND ");
                            break;
                        case "ADULT_YN":
                            alias = "PT";
                            innerSelectBuilder.append("CASE WHEN MONTHS_BETWEEN(CP.PROCEDURE_PERFORMED_DT, PT.BIRTH_DT) / 12 >= 17 THEN 'Adult' ELSE 'Pediatric' END ADULT_YN, ");
                            joinBuilder.append(snapshotId == null ? "JOIN MIRD_PATIENT " : "JOIN MISA_PATIENT ")
                                       .append(alias).append(" ON ").append(alias).append(".PATIENT_ID").append(" = BK.PATIENT_ID ");                   
                            if (snapshotId!=null){
                                joinBuilder.append("AND ").append(alias).append(".SNAPSHOT_ID = CP.SNAPSHOT_ID ");
                            }                            
                            
                            outerSelectBuilder.append("ADULT_YN, ");
                            groupByBuilder.append("ADULT_YN, ");
                            
                            // only add where clause if either Y or N is selected
                            if (filter.getSelectedOptions().length == 1) {
                                
                                // Adult i.e Y age must be 17 and above otherwise below 17
                                if (filter.getSelectedOptions()[0].equalsIgnoreCase("Y")) {
                                     whereBuilder.append("MONTHS_BETWEEN(CP.PROCEDURE_PERFORMED_DT, PT.BIRTH_DT) / 12 >= 17 AND ");
                                } else {
                                     whereBuilder.append("MONTHS_BETWEEN(CP.PROCEDURE_PERFORMED_DT, PT.BIRTH_DT) / 12 < 17 AND ");
                                }
                            }
                           
                            break;
                    }
                }
            }
        }

        // remove trailing comma
        innerSelectBuilder.deleteCharAt(innerSelectBuilder.lastIndexOf(","));
        groupByBuilder.deleteCharAt(groupByBuilder.lastIndexOf(","));

        // remove trailing "AND" and close inner select query using a parenthesis
        whereBuilder.delete(whereBuilder.lastIndexOf("AND"), whereBuilder.length());
        
        //add joins and where clause to inner select query
        innerSelectBuilder.append(joinBuilder).append(whereBuilder);

        // compose outer select query using inner select query and groupbuilder
        outerSelectBuilder.deleteCharAt(outerSelectBuilder.lastIndexOf(","))
                          .append(" FROM (")  
                          .append(innerSelectBuilder)
                          .append(") ")
                          .append("GROUP BY ").append(groupByBuilder)
                          .append("ORDER BY ").append(groupByBuilder);


        List<Object[]> result = em.createNativeQuery(outerSelectBuilder.toString()).getResultList();
        
        Map<String, Object> rowMap;
        for (Object[] row : result) {
            
            rowMap = new LinkedHashMap<>();
            
            for (int i = 0; i < row.length; i++) {               
                rowMap.put(selectedFilters.get(i).getColumn(), row[i]);
            }
            data.add(rowMap);
        }

        return data;
    }

    private String prepareINClause(boolean qouteValues, String[] selectedOptions) {

        StringBuilder builder = new StringBuilder();
        for (String s : selectedOptions) {

            if (qouteValues) {
                builder.append("'").append(s).append("', ");
            } else {
                builder.append(s).append(", ");
            }
        }

        // replace last two characters with closing parenthesis 
        return builder.delete(builder.length() - 2, builder.length()).toString();
    }
}