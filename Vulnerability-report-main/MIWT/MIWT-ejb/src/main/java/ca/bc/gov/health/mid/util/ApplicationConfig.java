package ca.bc.gov.health.mid.util;

import jakarta.annotation.PostConstruct;
import jakarta.annotation.Resource;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Named;
import jakarta.mail.internet.AddressException;
import jakarta.mail.internet.InternetAddress;
import java.io.Serializable;
import java.util.Properties;
import java.util.logging.Logger;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.math.NumberUtils;

/**
 * Extract values from the JNDI application_properties
 */
@Named
@ApplicationScoped
public class ApplicationConfig implements Serializable {

    private static final Logger logger = Logger.getLogger(ApplicationConfig.class.getName());

    @Resource(lookup = "java:app/miwt/application_properties")
    private Properties jndiApplicationProperties;

    private String mailServerHost;
    private int mailServerPort;
    private String mailDebug;
    private InternetAddress[] mailCc;
    private String environment;

    @PostConstruct
    private void init() {
        mailServerHost = StringUtils.defaultString(jndiApplicationProperties.getProperty("mailServer"));

        if (NumberUtils.isParsable(jndiApplicationProperties.getProperty("mailPort"))) {
            mailServerPort = Integer.parseInt(jndiApplicationProperties.getProperty("mailPort"));
        } else {
            logger.severe("The SMTP port number is invalid. It will be defaulted to 25.");
            mailServerPort = 25;
        }

        mailDebug = StringUtils.defaultString(jndiApplicationProperties.getProperty("mailDebug"));
        environment = StringUtils.defaultString(jndiApplicationProperties.getProperty("env"));

        try {
            mailCc = InternetAddress.parse(jndiApplicationProperties.getProperty("mailCc").replace(';', ','));
        } catch (AddressException ex) {
            logger.severe("The CC mailing list is invalid. It will be defaulted to empty.");
            mailCc = new InternetAddress[0];
        }
    }

    public String getMailServerHost() {
        return mailServerHost;
    }

    public int getMailServerPort() {
        return mailServerPort;
    }

    public String getMailDebug() {
        return mailDebug;
    }

    public InternetAddress[] getMailCc() {
        return mailCc;
    }

    public String getEnvironment() {
        return environment;
    }
}
