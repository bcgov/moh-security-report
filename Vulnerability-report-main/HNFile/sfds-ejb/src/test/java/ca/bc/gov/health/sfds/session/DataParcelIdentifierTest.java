package ca.bc.gov.health.sfds.session;

import ca.bc.gov.health.sfds.dto.BulletinDto;
import ca.bc.gov.health.sfds.util.SFDSConstants;
import jakarta.persistence.EntityTransaction;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Before;
import org.junit.Test;

public class DataParcelIdentifierTest extends AbstractFacadeTest {

    private static final Logger LOG = LogManager.getLogger(DataParcelIdentifierTest.class);

    protected static DataParcelIdentifierFacade facade;

    @Before
    public void setUp() {
        facade = new DataParcelIdentifierFacade();
        facade.setEntityManager(entityManager);
    }

    @Test
    public void createDataParcelIdentifier() {
        LOG.debug("\n===== Testing DataParcelIdentifier creation");
        BulletinDto bulletin = new BulletinDto(
                null,
                null,
                bulletinExternalIdentifier,
                bulletinContext,
                null, null,
                SFDSConstants.ALL_BULLETINS,
                "");
        EntityTransaction t = entityManager.getTransaction();
        if (t.isActive()) {
            t.rollback();
        }
        t.begin();
        try {
            Long id = facade.createParcelIdentifier(bulletin, "JUnit_Test");
            assert (id != null);
            assert (id > 0);
            // Try creating a bulletin with the same context and use, shall get error code -100 
            id = facade.createParcelIdentifier(bulletin, "JUnit_Test");
            assert (id != null);
            assert (id == -100L);
        } catch (Exception e) {
            LOG.error("Exception in createParcelIdentifier", e.fillInStackTrace());
            t.rollback();
            throw new RuntimeException(e);
        }
        t.rollback();
        LOG.debug("\n===== Test completed \n");
    }

    @Test
    public void getAll() {
        LOG.debug("\n===== Testing findAll method for DataParcelIdentifierFacade");
        List<?> list = facade.findAll();
        assert (list.size() > 0);
        LOG.debug("{} item(s) found", list.size());
        int count = facade.count();
        assert (list.size() == count);
        LOG.debug("\n===== Test completed \n");
    }

}
