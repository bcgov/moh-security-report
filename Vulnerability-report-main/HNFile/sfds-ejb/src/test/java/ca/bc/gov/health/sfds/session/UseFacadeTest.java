package ca.bc.gov.health.sfds.session;

import ca.bc.gov.health.sfds.dto.MetaDto;
import ca.bc.gov.health.sfds.dto.UseDto;
import ca.bc.gov.health.sfds.entity.Rulesbasedaccount;
import ca.bc.gov.health.sfds.entity.Use;
import ca.bc.gov.health.sfds.exception.DuplicateRecordException;
import jakarta.persistence.EntityTransaction;
import jakarta.persistence.Query;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Before;
import org.junit.Test;

/**
 * Tests for UseFacade
 *
 * @author vladimir.dovgalyuk
 *
 */
public class UseFacadeTest extends AbstractFacadeTest {

    private static final Logger LOG = LogManager.getLogger(UseFacadeTest.class);

    protected static UseFacade facade;

    @Before
    public void setUp() {
        facade = new UseFacade();
        facade.setEntityManager(entityManager);
    }

    @Test
    public void testFindAll() {
        LOG.debug("\n===== Testing find all");
        List<UseDto> list = facade.getAllUses();
        assert (!list.isEmpty());
        for (UseDto use : list) {
            LOG.debug(use);
        }
        LOG.debug("\n===== Test completed \n");
    }

    @Test
    public void testFindByUseId() {
        LOG.debug("\n===== Testing find by use ID");
        UseDto use = facade.getByUseId("phc");
        assert (use != null);
        LOG.debug("Use = {} ", use);
        LOG.debug("\n===== Test completed \n");
    }

    @Test
    public void testCreateUse() {
        LOG.debug("\n====== Testing use creation");
        EntityTransaction t = prepTx();
        try {
            List<UseDto> list = facade.getAllUses();
            int count = list.size();

            UseDto useDto = new UseDto();
            setRequiredUseFields(useDto);

            facade.createUse(useDto);

            list = facade.getAllUses();
            assert (list.size() > count);

        } catch (Exception e) {
            LOG.error("Exception in createUse", e.fillInStackTrace());
            t.rollback();
            throw new RuntimeException(e);
        }
        t.rollback();
        LOG.debug("\n===== Test completed \n");
    }

    @Test
    public void testUpdateUseRegToMulti() {
        LOG.debug("\n====== Testing use creation");
        EntityTransaction t = prepTx();
        try {
            UseDto useDto = new UseDto();
            setRequiredUseFields(useDto);

            facade.createUse(useDto);

            int rulesbasedaccountCountBefore = countRulesbasedaccounts();

            useDto.setMulti(true);

            facade.updateUse(useDto);

            assert (rulesbasedaccountCountBefore > countRulesbasedaccounts());
        } catch (Exception e) {
            LOG.error("Exception in createUse", e.fillInStackTrace());
            t.rollback();
            throw new RuntimeException(e);
        }
        t.rollback();
        LOG.debug("\n===== Test completed \n");
    }

    @Test
    public void testUpdateUseMultiToReg() {
        LOG.debug("\n====== Testing use creation");
        EntityTransaction t = prepTx();
        try {
            UseDto useDto = new UseDto();
            setRequiredUseFields(useDto);
            useDto.setMulti(true);

            facade.createUse(useDto);

            int rulesbasedaccountCountBefore = countRulesbasedaccounts();

            useDto.setMulti(false);
            useDto.getRulesbasedaccountDto().setSendingUseId("sending_use_id");
            useDto.getRulesbasedaccountDto().setBusinessArea("business_area");
            useDto.getRulesbasedaccountDto().setRecipient("recipient");

            facade.updateUse(useDto);

            assert (rulesbasedaccountCountBefore < countRulesbasedaccounts());
        } catch (Exception e) {
            LOG.error("Exception in createUse", e.fillInStackTrace());
            t.rollback();
            throw new RuntimeException(e);
        }
        t.rollback();
        LOG.debug("\n===== Test completed \n");
    }

    @Test
    public void testDeleteUse() {
        LOG.debug("\n====== Testing use deletion");
        EntityTransaction t = prepTx();
        try {

            UseDto useDto = new UseDto();
            setRequiredUseFields(useDto);
            facade.createUse(useDto);

            List<UseDto> uses = facade.getAllUses();
            int useCount = uses.size();

            int rulesbasedaccountCountBefore = countRulesbasedaccounts();

            facade.deleteUse(useDto);

            uses = facade.getAllUses();
            assert (uses.size() < useCount);

            assert (countRulesbasedaccounts() < rulesbasedaccountCountBefore);

        } catch (Exception e) {
            LOG.error("Exception in createUse", e.fillInStackTrace());
            t.rollback();
            throw new RuntimeException(e);
        }
        t.rollback();
        LOG.debug("\n===== Test completed \n");
    }

    private int countRulesbasedaccounts() {
        Query query = entityManager.createNamedQuery("Rulesbasedaccount.findAll");
        @SuppressWarnings("unchecked")
        List<Rulesbasedaccount> rulesbasedaccounts = query.getResultList();
        return rulesbasedaccounts.size();
    }

    @Test
    public void testCreateUseWithExistingUseId() {
        LOG.debug("\n====== Testing use creation, expecting exception");
        EntityTransaction t = prepTx();
        try {
            List<UseDto> list = facade.getAllUses();
            int count = list.size();

            UseDto useDto = new UseDto();
            setRequiredUseFields(useDto);

            facade.createUse(useDto);
            facade.createUse(useDto);

            list = facade.getAllUses();
            assert (list.size() > count);

        } catch (DuplicateRecordException e) {
            LOG.debug("Encountered duplicate record types: " + e.getDuplicateRecordTypes());
            assert (e.getDuplicateRecordTypes().size() == 2);
        } catch (Exception e) {
            LOG.error("Exception in createUse", e.fillInStackTrace());
            t.rollback();
            throw new RuntimeException(e);
        }
        t.rollback();
        LOG.debug("\n===== Test completed \n");
    }

    @Test
    public void testCreateMultiUse() {
        LOG.debug("\n====== Testing create multi use ");
        EntityTransaction t = prepTx();
        try {
            UseDto useDto = new UseDto();
            setRequiredUseFields(useDto);
            useDto.setMulti(true);

            facade.createUse(useDto);

            Use use = facade.getByUseId("tmp_use");
            assert (use.isMulti());

        } catch (Exception e) {
            LOG.error("Exception in createUse", e.fillInStackTrace());
            t.rollback();
            throw new RuntimeException(e);
        }
        t.rollback();
        LOG.debug("\n===== Test completed \n");
    }

    @Test
    public void getActiveAccountMetas() {
        LOG.debug("\n===== Testing getActiveUseMetas");
        List<MetaDto> result = facade.getUseMetas();
        assert (!result.isEmpty());
        LOG.debug("\n===== found " + result.size() + " active accounts");
        LOG.debug("\n===== Test completed \n");
    }

    private void setRequiredUseFields(UseDto useDto) {
        useDto.setUseId("tmp_use");
        useDto.setName("tmp_use_name");
        useDto.getRulesbasedaccountDto().setAccountId("account_id");
        useDto.getRulesbasedaccountDto().setSendingUseId("sending_use_id");
        useDto.getRulesbasedaccountDto().setBusinessArea("business_area");
        useDto.getRulesbasedaccountDto().setRecipient("recipient");
        useDto.setGetLabel("get_label");
        useDto.setSendLabel("send_label");
    }

    private EntityTransaction prepTx() {
        EntityTransaction t = entityManager.getTransaction();
        if (t.isActive()) {
            t.rollback();
        }
        t.begin();
        return t;
    }

}
