package ca.bc.gov.health.sfds.session;

import ca.bc.gov.health.sfds.dto.BulletinDto;
import ca.bc.gov.health.sfds.entity.DataParcel;
import ca.bc.gov.health.sfds.util.SFDSConstants;
import jakarta.persistence.EntityTransaction;
import java.nio.charset.StandardCharsets;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Before;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class DataParcelTest extends AbstractFacadeTest {

    private static final Logger LOG = LogManager.getLogger(DataParcelTest.class);

    protected static DataParcelFacade facade;
    protected static DataParcelProviderFacade providerFacade;

    private static String bulletinExternalIdentifier = "JUNITTEST";
    private static String bulletinContext = "JUNITTEST";

    @Before
    public void setUp() {
        facade = new DataParcelFacade();
        facade.setEntityManager(entityManager);
        providerFacade = new DataParcelProviderFacade();
        providerFacade.setEntityManager(entityManager);
    }

    @Test
    public void createDataParcel() {
        LOG.debug("\n===== Testing DataParcel creation");
        BulletinDto bulletin = new BulletinDto(
                null,
                null,
                bulletinExternalIdentifier,
                bulletinContext,
                null,
                null,
                SFDSConstants.ALL_BULLETINS,
                "Sample summary");
        EntityTransaction t = entityManager.getTransaction();
        if (t.isActive()) {
            t.rollback();
        }
        t.begin();
        try {
            Long id = facade.createDataParcel(bulletin, JUNIT_USER);
            assert (id != null);
            DataParcel parcel = facade.findDataParcel(id);
            entityManager.refresh(parcel);
            assert (parcel.getCreateDate() != null);
        } catch (Exception e) {
            LOG.error("Exception in createDataParcel", e.fillInStackTrace());
            t.rollback();
            throw new RuntimeException(e);
        }
        t.rollback();
        LOG.debug("\n===== Test completed \n");
    }

    @Test
    public void updateDataParcel() {
        LOG.debug("\n===== Testing DataParcel update");
        BulletinDto bulletin = new BulletinDto(
                null,
                null,
                bulletinExternalIdentifier,
                bulletinContext,
                null,
                null,
                SFDSConstants.ALL_BULLETINS,
                "Sample summary");
        EntityTransaction t = entityManager.getTransaction();
        if (t.isActive()) {
            t.rollback();
        }
        t.begin();
        try {
            Long id = facade.createDataParcel(bulletin, JUNIT_USER);
            assert (id != null);
            Long dataParcelProviderId = providerFacade.createDataParcelProvider("Sample content".getBytes(StandardCharsets.UTF_8), JUNIT_USER);
            assert (dataParcelProviderId != null);
            assert (dataParcelProviderId > 0);
            facade.updateDataParcel(id, "New sample summary", dataParcelProviderId, JUNIT_USER);
            DataParcel parcel = facade.findDataParcel(id);
            entityManager.refresh(parcel);
            assert (parcel.getModifyDate() != null);
        } catch (Exception e) {
            LOG.error("Exception in updateDataParcel", e.fillInStackTrace());
            t.rollback();
            throw new RuntimeException(e);
        }
        t.rollback();
        LOG.debug("\n===== Test completed \n");
    }

}
