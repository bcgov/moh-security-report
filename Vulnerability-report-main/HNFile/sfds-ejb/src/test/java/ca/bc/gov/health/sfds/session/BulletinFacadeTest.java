package ca.bc.gov.health.sfds.session;

import ca.bc.gov.health.sfds.dto.BulletinDto;
import ca.bc.gov.health.sfds.util.SFDSConstants;
import ca.bc.gov.health.sfds.util.SFDSUtils;
import jakarta.persistence.EntityTransaction;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class BulletinFacadeTest extends AbstractFacadeTest {

    private static final Logger LOG = LogManager.getLogger(BulletinFacadeTest.class);

    protected static BulletinsFacade bulletinsFacade;
    protected static DataParcelIdentifierFacade dataParcelIdentifierFacade;
    protected static DataParcelProviderFacade dataParcelProviderFacade;
    protected static ParcelContextReferenceFacade parcelContextReferenceFacade;
    protected static DataParcelFacade dataParcelFacade;

    protected static Long bulletinsId;
    protected static List<Long> bulletinIds;

    @BeforeClass
    public static void setUpClass() {
        AbstractFacadeTest.setUpClass();
        bulletinsId = null;
        bulletinIds = new ArrayList<Long>();
    }

    @Before
    public void setUp() {
        bulletinsFacade = new BulletinsFacade();
        bulletinsFacade.setEntityManager(entityManager);
        dataParcelIdentifierFacade = new DataParcelIdentifierFacade();
        dataParcelIdentifierFacade.setEntityManager(entityManager);
        dataParcelProviderFacade = new DataParcelProviderFacade();
        dataParcelProviderFacade.setEntityManager(entityManager);
        dataParcelFacade = new DataParcelFacade();
        dataParcelFacade.setEntityManager(entityManager);
        parcelContextReferenceFacade = new ParcelContextReferenceFacade();
        parcelContextReferenceFacade.setEntityManager(entityManager);

        bulletinsFacade.setDataParcelFacade(dataParcelFacade);
        bulletinsFacade.setDataParcelIdentifierFacade(dataParcelIdentifierFacade);
        bulletinsFacade.setDataParcelProviderFacade(dataParcelProviderFacade);
        bulletinsFacade.setParcelContextReferenceFacade(parcelContextReferenceFacade);
    }

    @Test
    public void aGetAllActiveBulletins() {
        bulletinsId = dataParcelIdentifierFacade.getBulletinContextId();
        assert (bulletinsId != null);
        LOG.debug("\n===== Testing getAllNotExpiredBulletins using {} as Bulletin context ID", bulletinsId);
        List<BulletinDto> list = bulletinsFacade.getAllNotExpiredBulletins(bulletinsId);
        assert (list.size() > 0);
        LOG.debug("{} bulletin(s) found", list.size());
        for (BulletinDto dto : list) {
            LOG.debug(dto);
            bulletinIds.add(dto.getParcelId());
        }
        LOG.debug("\n===== Test completed \n");
    }

    @Test
    public void bGetAllBulletinsForAllUse() {
        assert (bulletinsId != null);
        LOG.debug("\n===== Testing getAllBulletinsForUses using {} as Bulletin context ID", bulletinsId);
        List<BulletinDto> list = bulletinsFacade.getAllBulletinsForUses(bulletinsId, Arrays.asList(SFDSConstants.ALL_BULLETINS));
        assert (list.size() > 0);
        LOG.debug("{} bulletin(s) found", list.size());
        for (BulletinDto dto : list) {
            LOG.debug(dto);
            bulletinIds.add(dto.getParcelId());
        }
        LOG.debug("\n===== Test completed \n");
    }

    @Test
    public void cGetActiveBulletinsForAll() {
        assert (bulletinsId != null);
        LOG.debug("\n===== Testing getNotExpiredBulletinsForUses using {} as Bulletin context ID", bulletinsId);
        List<BulletinDto> list = bulletinsFacade.getNotExpiredBulletinsForUses(bulletinsId, Arrays.asList(SFDSConstants.ALL_BULLETINS));
        assert (list.size() > 0);
        LOG.debug("{} bulletin(s) found", list.size());
        for (BulletinDto dto : list) {
            LOG.debug(dto);
            bulletinIds.add(dto.getParcelId());
        }
        LOG.debug("\n===== Test completed \n");
    }

    @Test
    public void dGetBulletinsData() {
        assert (bulletinIds != null);
        LOG.debug("\n====== Testing getParcelData for all available bulletins");
        try {
            for (Long id : bulletinIds) {
                byte[] b = dataParcelProviderFacade.getParcelData(id);
                assert (b.length > 0);
                LOG.debug("\n MIME type = {}", SFDSUtils.getMimeType(b));
                String s = SFDSUtils.parseBodyToHTML(b);
                LOG.debug("\n {} \n", s);
            }
        } catch (Exception e) {
            LOG.fatal("Exception when getting Parcel Data", e.fillInStackTrace());
        }
        LOG.debug("\n===== Test completed \n");

    }

    @Test
    public void eCreateBulletin() {
        LOG.debug("\n====== Testing bulletin creation");
        EntityTransaction t = entityManager.getTransaction();
        if (t.isActive()) {
            t.rollback();
        }
        t.begin();
        try {
            List<BulletinDto> list = bulletinsFacade.getAllBulletinsForUses(bulletinsId, Arrays.asList(SFDSConstants.ALL_BULLETINS));
            int count = list.size();

            SimpleDateFormat sdf = new SimpleDateFormat("DD-mm-yyyy");
            BulletinDto bulletin = new BulletinDto(
                    null,
                    null,
                    bulletinExternalIdentifier,
                    bulletinContext,
                    sdf.parse("01-01-2021"),
                    sdf.parse("01-01-2222"),
                    SFDSConstants.ALL_BULLETINS,
                    "Sample summary");
            boolean result = bulletinsFacade.createBulletin(bulletin, "Sample bulletin content", JUNIT_USER);
            assert (result);
            assert (bulletin.getParcelId() > 0);
            assert (bulletin.getParcelContextReferenceId() > 0);

            list = bulletinsFacade.getAllBulletinsForUses(bulletinsId, Arrays.asList(SFDSConstants.ALL_BULLETINS));
            assert (list.size() > count);

        } catch (Exception e) {
            LOG.error("Exception in createBulletin", e.fillInStackTrace());
            t.rollback();
            throw new RuntimeException(e);
        }
        t.rollback();
        LOG.debug("\n===== Test completed \n");
    }

    @Test
    public void fUpdateBulletin() {
        LOG.debug("\n====== Testing bulletin update");
        EntityTransaction t = entityManager.getTransaction();
        if (t.isActive()) {
            t.rollback();
        }
        t.begin();
        try {

            List<BulletinDto> list = bulletinsFacade.getAllBulletinsForUses(bulletinsId, Arrays.asList(SFDSConstants.ALL_BULLETINS));
            assert (list.size() > 0);
            int count = list.size();

            BulletinDto bulletin = list.get(0);
            bulletin.setParentContext("unknown");
            Set<String> changedFields = new HashSet<>();
            changedFields.add(SFDSConstants.BULLETIN_USES_ID);
            boolean result = bulletinsFacade.updateBulletin(bulletin, "New content", changedFields, JUNIT_USER);
            assert (result);

            list = bulletinsFacade.getAllBulletinsForUses(bulletinsId, Arrays.asList(SFDSConstants.ALL_BULLETINS));
            assert (list.size() < count);
        } catch (Exception e) {
            LOG.error("Exception in updateBulletin", e.fillInStackTrace());
            t.rollback();
            throw new RuntimeException(e);
        }
        t.rollback();
        LOG.debug("\n===== Test completed \n");
    }

    @Test
    public void gDeleteBulletin() {
        LOG.debug("\n====== Testing bulletin delete");
        EntityTransaction t = entityManager.getTransaction();
        if (t.isActive()) {
            t.rollback();
        }
        t.begin();
        try {

            List<BulletinDto> list = bulletinsFacade.getAllBulletinsForUses(bulletinsId, Arrays.asList(SFDSConstants.ALL_BULLETINS));
            assert (list.size() > 0);
            int count = list.size();

            BulletinDto bulletin = list.get(0);
            bulletinsFacade.deletBulletin(bulletin);

            list = bulletinsFacade.getAllBulletinsForUses(bulletinsId, Arrays.asList(SFDSConstants.ALL_BULLETINS));
            assert (list.size() < count);

        } catch (Exception e) {
            LOG.error("Exception in updateBulletin", e.fillInStackTrace());
            t.rollback();
            throw new RuntimeException(e);
        }
        t.rollback();
        LOG.debug("\n===== Test completed \n");
    }
}
