package ca.bc.gov.health.sfds.session;

import ca.bc.gov.health.sfds.dto.BulletinDto;
import ca.bc.gov.health.sfds.entity.DataParcelIdentifier;
import ca.bc.gov.health.sfds.service.IDataParcelIdentifierFacade;
import ca.bc.gov.health.sfds.util.SFDSConstants;
import jakarta.ejb.Stateless;
import jakarta.ejb.TransactionManagement;
import jakarta.ejb.TransactionManagementType;
import jakarta.persistence.Query;
import jakarta.persistence.TemporalType;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Facade for dealing with Data parcel identifier entity
 *
 * @author vladimir.dovgalyuk
 */
@Stateless
@TransactionManagement(TransactionManagementType.CONTAINER)
public class DataParcelIdentifierFacade extends AbstractFacade<DataParcelIdentifier>
        implements IDataParcelIdentifierFacade {

    private static final Logger LOG = LogManager.getLogger(DataParcelIdentifierFacade.class);

    /**
     * no-arg constructor
     */
    public DataParcelIdentifierFacade() {
        super(DataParcelIdentifier.class);
    }

    @Override
    public Long getIdByContextIdCode(String code, Long parentDataParcelIdentifier, String userId) {
        LOG.debug("Retrieving Data Parcel Identifier ID for the context code {}", code);
        Query query = getEntityManager().createNamedQuery("DataParcelIdentifier.findByContextId");
        query.setParameter("code", code);
        query.setParameter("lowDate", SFDSConstants.getLowDate(), TemporalType.DATE);
        query.setParameter("highDate", SFDSConstants.getHighDate(), TemporalType.DATE);
        query.setParameter("currentDate", new Date(), TemporalType.DATE);
        query.setParameter("parentDataParcelIdentifier", parentDataParcelIdentifier);
        @SuppressWarnings("unchecked")
        List<Long> result = query.getResultList();
        if (result.isEmpty()) {
            LOG.info("Data Parcel Identifier ID for the context code {} does not exist, creating it", code);
            DataParcelIdentifier newDataParcelIdentifier = new DataParcelIdentifier();
            DataParcelIdentifier parent = findById(parentDataParcelIdentifier);
            newDataParcelIdentifier.setParentDataParcelIdentifier(parent);
            newDataParcelIdentifier.setCreateDate(new Date());
            newDataParcelIdentifier.setDpiType(SFDSConstants.BULLETIN_DPI_TYPE);
            newDataParcelIdentifier.setContextIdCode(code);
            newDataParcelIdentifier.setCreateUser(userId);
            entityManager.persist(newDataParcelIdentifier);

            LOG.info("Data Parcel Identifier ID for the context code {} created", code);
            return newDataParcelIdentifier.getId();
        } else {
            return result.get(0);
        }
    }

    @Override
    public Long getBulletinContextId() {
        return getParentContextId(SFDSConstants.RootDataParcelIdentifiersForFDS.BULLETINS, null);
    }

    @Override
    public Long getUserFilesContextId() {
        return getParentContextId(SFDSConstants.RootDataParcelIdentifiersForFDS.USER_FILES, null);
    }

    private Long getParentContextId(SFDSConstants.RootDataParcelIdentifiersForFDS type, String user) {
        Long fdsId = getIdByContextIdCode(SFDSConstants.FDS_CONTEXT_ID, null, user);
        return getIdByContextIdCode(type.getCode(), fdsId, user);
    }

    @Override
    public Long createParcelIdentifier(BulletinDto bulletin, String user) {
        LOG.debug("Create new Data Parcel Identifier for bulletin {}", bulletin);

        Long bulletinContextId = getParentContextId(bulletin.getType(), user);
        Long parentContextId = getIdByContextIdCode(bulletin.getParentContext(), bulletinContextId, user);

        DataParcelIdentifier parentDataParcelIdentifier = findById(parentContextId);
        if (contextCodeExists(bulletin.getContext(), parentDataParcelIdentifier.getId(), bulletin.getEffectiveDate())) {
            LOG.error("Data Parcel Identifier with context code {} and use {} already exists.", bulletin.getContext(), bulletin.getParentContext());
            return -100L;
        }

        DataParcelIdentifier newDataParcelIdentifier = new DataParcelIdentifier();
        newDataParcelIdentifier.setParentDataParcelIdentifier(parentDataParcelIdentifier);
        newDataParcelIdentifier.setContextIdCode(bulletin.getContext());
        newDataParcelIdentifier.setDpiType(SFDSConstants.BULLETIN_DPI_TYPE);
        newDataParcelIdentifier.setCreateUser(user);

        getEntityManager().persist(newDataParcelIdentifier);

        LOG.debug("New Data Parcel Identifier ID is  {}", newDataParcelIdentifier.getId());

        return newDataParcelIdentifier.getId();
    }

    @Override
    public boolean updateParcelIdentifier(Long id, String use, String user) {

        Long dpiId = getIdByContextIdCode(use, getBulletinContextId(), user);

        DataParcelIdentifier dataParcelIdentifier = findById(id);

        if (contextCodeExists(dataParcelIdentifier.getContextIdCode(), dpiId, dataParcelIdentifier.getEffectiveDate())) {
            LOG.error("Data Parcel Identifier with context code {} and use {} already exists.", dataParcelIdentifier.getContextIdCode(), dpiId);
            return false;
        }

        DataParcelIdentifier parentDataParcelIdentifier = findById(dpiId);

        dataParcelIdentifier.setParentDataParcelIdentifier(parentDataParcelIdentifier);
        dataParcelIdentifier.setModifyUser(user);
        getEntityManager().merge(dataParcelIdentifier);

        return true;

    }

    @Override
    public void deleteParcelIdentifier(Long id) {
        DataParcelIdentifier dataParcelIdentifier = findById(id);
        getEntityManager().remove(dataParcelIdentifier);
    }

    public DataParcelIdentifier findById(Long id) {
        Query query = getEntityManager().createNamedQuery("DataParcelIdentifier.findById");
        query.setParameter("id", id);
        return (DataParcelIdentifier) query.getSingleResult();
    }

    private boolean contextCodeExists(String context, Long parentId, Date effectiveDate) {
        LOG.debug("Check if Data Parcel Identifier with context code {} and dpi_id {} already exists.", context, parentId);
        Query checkQuery = getEntityManager().createNamedQuery("DataParcelIdentifier.findByUniqueKey");
        checkQuery.setParameter("code", context);
        checkQuery.setParameter("parentDataParcelIdentifier", parentId);
        checkQuery.setParameter("lowDate", SFDSConstants.getLowDate(), TemporalType.DATE);
        checkQuery.setParameter("effectiveDate", effectiveDate, TemporalType.DATE);
        if (!checkQuery.getResultList().isEmpty()) {
            LOG.warn("Data Parcel Identifier with context code {} and dpi_id {} already exists.", context, parentId);
            return true;
        }
        return false;
    }

}
