package ca.bc.gov.health.sfds.session;

import ca.bc.gov.health.sfds.dto.MetaDto;
import ca.bc.gov.health.sfds.dto.RecipientDto;
import ca.bc.gov.health.sfds.entity.Account;
import ca.bc.gov.health.sfds.service.IAccountsFacade;
import jakarta.annotation.Resource;
import jakarta.ejb.Stateless;
import jakarta.ejb.TransactionManagement;
import jakarta.ejb.TransactionManagementType;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

@Stateless
@TransactionManagement(TransactionManagementType.CONTAINER)
public class AccountsFacade implements IAccountsFacade {

    @Resource(lookup = "java:app/sfds/sfds_properties")
    Properties sfdsProperties;

    private static final Logger LOG = LogManager.getLogger(AccountsFacade.class);

    @PersistenceContext(unitName = "sfds-ejb_pu")
    protected EntityManager entityManager;

    @Override
    public String getDescription(String accountId) {
        LOG.debug("Retrieving description of account {}", accountId);
        Query query = entityManager.createNamedQuery("Account.findByAccountIdentifier");
        query.setParameter("accountIdentifier", accountId);
        @SuppressWarnings("unchecked")
        List<Account> accounts = query.getResultList();
        if (accounts.isEmpty()) {
            LOG.error("Invalid account is : {}", accountId);
            return null;
        }
        LOG.debug("Account {} is described as \'{}\'", accountId, accounts.get(0).getName());
        return accounts.get(0).getName().toUpperCase();
    }

    @Override
    public List<RecipientDto> getRecipients(String consumer, String filter) {

        String maxNumber = "100";
        if (sfdsProperties != null) {
            maxNumber = sfdsProperties.getProperty("fds.maxSearchResults");
        }

        Query query = entityManager.createNamedQuery("Account.findRecipients");
        query.setParameter("consumer", consumer);
        query.setParameter("criteria", filter);
        query.setParameter("maximum", maxNumber);
        @SuppressWarnings("unchecked")
        List<RecipientDto> tempResult = query.getResultList();
        List<RecipientDto> result = new ArrayList<>();
        String accountId = "";
        for (RecipientDto recipient : tempResult) {
            if (!recipient.getAccountIdentifier().equals(accountId)) {
                accountId = recipient.getAccountIdentifier();
                result.add(recipient);
            } else {
                if (!result.isEmpty()) {
                    result.get(result.size() - 1).addToCities(recipient.getCity());
                    result.get(result.size() - 1).addToPracPayeeNumbers(recipient.getPracPayeeNumber());
                }
            }
        }

        return result;
    }

    @Override
    public List<MetaDto> getActiveAccountMetas() {
        List<MetaDto> result = new ArrayList<>();

        for (Account account : this.getActiveAccounts()) {
            result.add(account.getMeta());
        }

        return result;
    }

    private List<Account> getActiveAccounts() {
        Query query = entityManager.createNamedQuery("Account.findAllActive");

        @SuppressWarnings("unchecked")
        List<Account> accounts = query.getResultList();
        return accounts;
    }

}
