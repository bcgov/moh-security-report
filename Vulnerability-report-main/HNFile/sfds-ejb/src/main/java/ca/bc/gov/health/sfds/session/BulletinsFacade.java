package ca.bc.gov.health.sfds.session;

import ca.bc.gov.health.sfds.dto.BulletinDto;
import ca.bc.gov.health.sfds.dto.ParcelContextReferenceDto;
import ca.bc.gov.health.sfds.service.IBulletinsFacade;
import ca.bc.gov.health.sfds.service.IDataParcelFacade;
import ca.bc.gov.health.sfds.service.IDataParcelIdentifierFacade;
import ca.bc.gov.health.sfds.service.IDataParcelProviderFacade;
import ca.bc.gov.health.sfds.service.IParcelContextReferenceFacade;
import ca.bc.gov.health.sfds.util.SFDSConstants;
import jakarta.ejb.EJB;
import jakarta.ejb.Stateless;
import jakarta.ejb.TransactionManagement;
import jakarta.ejb.TransactionManagementType;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Set;

/**
 * Facade for dealing with SFDS Bulletins
 *
 * @author vladimir.dovgalyuk
 */
@Stateless
@TransactionManagement(TransactionManagementType.CONTAINER)
public class BulletinsFacade implements IBulletinsFacade {

    private static final String BULLETIN_PARAMETER = "bulletin";

    @PersistenceContext(unitName = "sfds-ejb_pu")
    protected EntityManager entityManager;

    @EJB
    private IDataParcelProviderFacade dataParcelProviderFacade;
    @EJB
    private IDataParcelFacade dataParcelFacade;
    @EJB
    private IDataParcelIdentifierFacade dataParcelIdentifierFacade;
    @EJB
    private IParcelContextReferenceFacade parcelContextReferenceFacade;

    public EntityManager getEntityManager() {
        return this.entityManager;
    }

    public void setEntityManager(EntityManager em) {
        this.entityManager = em;
    }

    @Override
    public List<BulletinDto> getAllNotExpiredBulletins(Long bulletinConextId) {
        Query query = entityManager.createNamedQuery("DataParcel.findAllNotExpiredBuletins");
        query.setParameter(BULLETIN_PARAMETER, bulletinConextId);
        @SuppressWarnings("unchecked")
        List<BulletinDto> result = query.getResultList();
        return result;
    }

    @Override
    public List<BulletinDto> getAllBulletinsForUses(Long bulletinConextId, List<String> uses) {
        Query query = entityManager.createNamedQuery("DataParcel.findAllBuletinsForUses");
        query.setParameter(BULLETIN_PARAMETER, bulletinConextId);
        query.setParameter("uses", convertListOfUses(uses));
        @SuppressWarnings("unchecked")
        List<BulletinDto> result = query.getResultList();
        return result;
    }

    @Override
    public List<BulletinDto> getNotExpiredBulletinsForUses(Long bulletinConextId, List<String> uses) {
        Query query = entityManager.createNamedQuery("DataParcel.findAllNotExpiredBuletinsForUses");
        query.setParameter(BULLETIN_PARAMETER, bulletinConextId);
        query.setParameter("uses", convertListOfUses(uses));
        @SuppressWarnings("unchecked")
        List<BulletinDto> result = query.getResultList();
        return result;
    }

    private String convertListOfUses(List<String> uses) {
        if (!uses.isEmpty()) {
            StringBuilder strUses = new StringBuilder();
            for (String use : uses) {
                strUses.append(use).append(",");
            }
            String s = strUses.toString();
            s = s.substring(0, s.length() - 1);
            return s;
        } else {
            return "";
        }
    }

    @Override
    public boolean createBulletin(BulletinDto bulletin, String content, String user) {

        Charset charset = StandardCharsets.UTF_8;
        return createBulletin(bulletin, content.getBytes(charset), user);
    }

    @Override
    public boolean createBulletin(BulletinDto bulletin, byte[] content, String user) {

        // 1. Create new Data Parcel Identifier
        Long dpiId = dataParcelIdentifierFacade.createParcelIdentifier(bulletin, user);
        if (dpiId <= 0) {
            bulletin.setParcelId(dpiId);
            return false;
        }

        // 2. Create new DATA_PARCELS entity
        Long dpId = dataParcelFacade.createDataParcel(bulletin, user);
        if (dpId <= 0) {
            return false;
        }

        // 3. Create new PARCEL_CONTEXT_REFERENCES entity
        Long id = parcelContextReferenceFacade.createParcelContextReference(
                dpId,
                dpiId,
                bulletin.getEffectiveDate(),
                bulletin.getEndDate(),
                user);
        if (id <= 0) {
            return false;
        }
        bulletin.setParcelContextReferenceId(id);

        // 4. Create new DATA_PARCEL_PROVIDERS entity
        Long dppId = dataParcelProviderFacade.createDataParcelProvider(content, user);
        if (dppId <= 0) {
            return false;
        }
        bulletin.setParcelId(dppId);

        // 5. Update DATA_PARCELS entity from the step #2, set DPP_ID
        dataParcelFacade.updateDataParcel(dpId, null, dppId, user);

        return true;
    }

    @Override
    public boolean updateBulletin(BulletinDto bulletin, String content, Set<String> changedFields, String user) {

        boolean result = true;

        if (changedFields.contains(SFDSConstants.BULLETIN_SUMMARY_ID) || changedFields.contains(SFDSConstants.BULLETIN_USES_ID)) {

            // Get DATA_PARCEL_IDENTIFIERS and DATA_PARCELS IDs
            ParcelContextReferenceDto dto = parcelContextReferenceFacade.findById(bulletin.getParcelContextReferenceId());

            if (changedFields.contains(SFDSConstants.BULLETIN_USES_ID)) {
                result = dataParcelIdentifierFacade.updateParcelIdentifier(dto.getDpiId().longValue(), bulletin.getParentContext(), user);
                if (!result) {
                    return result; // Stop updating if duplicate entry was detected
                }
            }

            if (changedFields.contains(SFDSConstants.BULLETIN_SUMMARY_ID)) {
                dataParcelFacade.updateDataParcel(dto.getDprId().longValue(), bulletin.getSummary(), bulletin.getParcelId(), user);
            }
        }

        if (changedFields.contains(SFDSConstants.BULLETIN_EFFECTIVE_DATE_ID) || changedFields.contains(SFDSConstants.BULLETIN_END_DATE_ID)) {
            // Dates have been changed, update PARCEL_CONTEXT_REFERENCES
            parcelContextReferenceFacade.updateParcelContextReference(
                    bulletin.getParcelContextReferenceId(), bulletin.getEffectiveDate(), bulletin.getEndDate(), user);
        }

        if (changedFields.contains(SFDSConstants.BULLETIN_CONTENT_ID)) {
            // Bulletin comment has been changed, update DATA_PARCEL_PROVIDERS
            dataParcelProviderFacade.updateDataParcelProvider(bulletin.getParcelId(), content, user);
        }

        return result;
    }

    @Override
    public void deletBulletin(BulletinDto bulletin) {

        ParcelContextReferenceDto dto = parcelContextReferenceFacade.findById(bulletin.getParcelContextReferenceId());

        // Manual implementation of cascade deletion, start from PARCEL_CONTEXT_REFERENCES
        parcelContextReferenceFacade.deleteParcelContextReference(bulletin.getParcelContextReferenceId());

        // Next goes DATA_PARCEL_IDENTIFIERS
        dataParcelIdentifierFacade.deleteParcelIdentifier(dto.getDpiId().longValue());

        // Next goes DATA_PARCELS
        dataParcelFacade.deleteDataParcel(dto.getDprId().longValue());

        // Last is DATA_PARCEL_PROVIDERS
        dataParcelProviderFacade.deleteDataParcelProvider(bulletin.getParcelId());

    }

    /**
     * For tests only
     */
    protected void setDataParcelIdentifierFacade(IDataParcelIdentifierFacade f) {
        dataParcelIdentifierFacade = f;
    }

    protected void setDataParcelProviderFacade(IDataParcelProviderFacade f) {
        dataParcelProviderFacade = f;
    }

    protected void setDataParcelFacade(IDataParcelFacade f) {
        dataParcelFacade = f;
    }

    protected void setParcelContextReferenceFacade(IParcelContextReferenceFacade f) {
        parcelContextReferenceFacade = f;
    }

}
