package ca.bc.gov.health.sfds.session;

import ca.bc.gov.health.sfds.dto.ParcelContextReferenceDto;
import ca.bc.gov.health.sfds.entity.DataParcel;
import ca.bc.gov.health.sfds.entity.DataParcelIdentifier;
import ca.bc.gov.health.sfds.entity.ParcelContextReference;
import ca.bc.gov.health.sfds.service.IParcelContextReferenceFacade;
import jakarta.ejb.Stateless;
import jakarta.ejb.TransactionManagement;
import jakarta.ejb.TransactionManagementType;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.Date;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

@Stateless
@TransactionManagement(TransactionManagementType.CONTAINER)
public class ParcelContextReferenceFacade extends AbstractFacade<ParcelContextReference> implements IParcelContextReferenceFacade {

    private static final Logger LOG = LogManager.getLogger(ParcelContextReferenceFacade.class);
    private static final String FIND_BY_ID_QUERY = "ParcelContextReference.findById";

    /**
     * no-arg constructor
     */
    public ParcelContextReferenceFacade() {
        super(ParcelContextReference.class);
    }

    @Override
    public Long createParcelContextReference(Long dpId, Long dpiId, Date startDate, Date endDate, String user) {
        LOG.debug("Create new instance of ParcelContextReference with DPR_ID = {} and DPI_ID = {}", dpId, dpiId);

        Query dpiQuery = getEntityManager().createNamedQuery("DataParcelIdentifier.findById");
        dpiQuery.setParameter("id", dpiId);
        DataParcelIdentifier dataParcelIdentifier = (DataParcelIdentifier) dpiQuery.getSingleResult();

        Query dpQuery = getEntityManager().createNamedQuery("DataParcel.findById");
        dpQuery.setParameter("id", dpId);
        DataParcel dataParcel = (DataParcel) dpQuery.getSingleResult();

        ParcelContextReference parcelContextReference = new ParcelContextReference();
        parcelContextReference.setDataParcelIdentifier(dataParcelIdentifier);
        parcelContextReference.setDataParcel(dataParcel);
        parcelContextReference.setCreateUser(user);
        parcelContextReference.setDeliveryCount(new BigDecimal(0));

        if (startDate != null) {
            parcelContextReference.setEffectiveDate(startDate);
        }

        if (endDate != null) {
            parcelContextReference.setEndDate(endDate);
        }

        getEntityManager().persist(parcelContextReference);

        LOG.debug("New instance of ParcelContextReference created, id = {}", parcelContextReference.getId());

        return parcelContextReference.getId();
    }

    @Override
    public ParcelContextReferenceDto findById(Long id) {

        return findByIdInternal(id);
    }

    @Override
    public void updateParcelContextReference(Long id, Date startDate, Date endDate, String user) {

        LOG.debug("Updating ParcelContextReference with ID {}", id);

        ParcelContextReference parcelContextReference = findByIdInternal(id);
        parcelContextReference.setEffectiveDate(startDate);
        parcelContextReference.setEndDate(endDate);
        parcelContextReference.setModifyUser(user);
        getEntityManager().merge(parcelContextReference);

        LOG.debug("ParcelContextReference with ID {} updated", id);
    }

    @Override
    public void deleteParcelContextReference(Long id) {

        LOG.debug("Deleting ParcelContextReference with ID {}", id);

        ParcelContextReference parcelContextReference = findByIdInternal(id);
        getEntityManager().remove(parcelContextReference);

        LOG.debug("ParcelContextReference with ID {} deleted", id);
    }

    public ParcelContextReference findByIdInternal(Long id) {
        Query query = getEntityManager().createNamedQuery(FIND_BY_ID_QUERY);
        query.setParameter("id", id);
        return (ParcelContextReference) query.getSingleResult();
    }

}
