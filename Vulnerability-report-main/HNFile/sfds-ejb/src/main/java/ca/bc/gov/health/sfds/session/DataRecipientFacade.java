package ca.bc.gov.health.sfds.session;

import ca.bc.gov.health.sfds.entity.DataRecipient;
import ca.bc.gov.health.sfds.service.IDataRecipientFacade;
import ca.bc.gov.health.sfds.util.SFDSConstants;
import jakarta.ejb.Stateless;
import jakarta.ejb.TransactionManagement;
import jakarta.ejb.TransactionManagementType;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Implementation of IDataRecipientFacade
 *
 * @author vladimir.dovgalyuk
 *
 */
@Stateless
@TransactionManagement(TransactionManagementType.CONTAINER)
public class DataRecipientFacade extends AbstractFacade<DataRecipient> implements IDataRecipientFacade {

    private static final Logger LOG = LogManager.getLogger(DataRecipientFacade.class);

    /**
     * No argument constructor
     */
    public DataRecipientFacade() {
        super(DataRecipient.class);
    }

    /**
     * See IDataRecipientFacade description
     */
    @Override
    public boolean softDeleteRecord(BigDecimal id, BigDecimal lockSeqNum, String user) {
        LOG.info("Soft deletion of DataRecipient with id {} and lock sequence number {}", id, lockSeqNum);
        boolean result = changeRecordStatus(SFDSConstants.FileStatuses.PENDING_DELETE.getDatabaseStatus(), id, lockSeqNum, user);
        if (result) {
            LOG.debug("Record successfully deleted");
        } else {
            LOG.error("Errors detected while deleting DataRecipient record");
        }
        return result;
    }

    @Override
    public boolean updateRecordStatus(String newStatus, BigDecimal id, BigDecimal lockSeqNum, String user) {
        LOG.info("Change status of DataRecipient with id {} and lock sequence number {} to {}", id, lockSeqNum, newStatus);
        boolean result = changeRecordStatus(newStatus, id, lockSeqNum, user);
        if (result) {
            LOG.debug("Record status successfully changed");
        } else {
            LOG.error("Errors detected while changing status of DataRecipient record");
        }
        return result;
    }

    private boolean changeRecordStatus(String newStatus, BigDecimal id, BigDecimal lockSeqNum, String user) {

        Query query = getEntityManager().createNamedQuery("DataRecipient.findByIdAndLockNumber");
        query.setParameter("id", id);
        query.setParameter("lockSeqNum", lockSeqNum);

        @SuppressWarnings("unchecked")
        List<DataRecipient> dataRecipients = query.getResultList();
        if (dataRecipients.isEmpty()) { // Nothing found
            LOG.error("Row not found for id {} or lock_seq_num {} is incorrect", id, lockSeqNum);
            return false;
        }

        DataRecipient dataRecipient = dataRecipients.get(0);

        dataRecipient.setDataTransferStatus(newStatus);
        dataRecipient.setModifyUser(user);
        if (SFDSConstants.FileStatuses.DOWNLOADED.getDatabaseStatus().equals(newStatus)) {
            dataRecipient.setReceivingDate(new Date());
            dataRecipient.setReceivingUid(user);
        }
        getEntityManager().persist(dataRecipient);
        return true;

    }

}
