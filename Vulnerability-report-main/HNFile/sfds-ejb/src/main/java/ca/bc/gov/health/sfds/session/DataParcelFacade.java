package ca.bc.gov.health.sfds.session;

import ca.bc.gov.health.sfds.dto.BulletinDto;
import ca.bc.gov.health.sfds.entity.DataParcel;
import ca.bc.gov.health.sfds.entity.DataParcelProvider;
import ca.bc.gov.health.sfds.service.IDataParcelFacade;
import ca.bc.gov.health.sfds.util.SFDSConstants;
import jakarta.ejb.Stateless;
import jakarta.ejb.TransactionManagement;
import jakarta.ejb.TransactionManagementType;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

@Stateless
@TransactionManagement(TransactionManagementType.CONTAINER)
public class DataParcelFacade extends AbstractFacade<DataParcel> implements IDataParcelFacade {

    private static final Logger LOG = LogManager.getLogger(DataParcelFacade.class);

    /**
     * no-arg constructor
     */
    public DataParcelFacade() {
        super(DataParcel.class);
    }

    @Override
    public Long createDataParcel(BulletinDto bulletin, String user) {

        LOG.debug("Create new data parcel for bulletin {}", bulletin);

        DataParcel dataParcel = new DataParcel();

        dataParcel.setCreateUser(user);
        dataParcel.setDataSource(SFDSConstants.BULLETIN_DATA_SOURCE);
        dataParcel.setSummary(bulletin.getSummary());
        switch (bulletin.getType()) {
            case USER_FILES:
                dataParcel.setDataSize(new BigDecimal(bulletin.getSize()));
                break;
            case BATCH:
                dataParcel.setDataSize(new BigDecimal(0));
                break;
            default:
                dataParcel.setDataSize(new BigDecimal(0));
        }

        dataParcel.setSourceIdentifier(bulletin.getExternalIdentifier());

        getEntityManager().persist(dataParcel);

        LOG.debug("New data parcel ID is {}", dataParcel.getId());

        return dataParcel.getId();
    }

    public DataParcel findDataParcel(Long id) {
        Query query = getEntityManager().createNamedQuery("DataParcel.findById");
        query.setParameter("id", id);
        return (DataParcel) query.getSingleResult();
    }

    @Override
    public void updateDataParcel(Long id, String summary, Long dataParcelProviderId, String user) {

        LOG.debug("Modify existing Data Parcel with id {}", id);
        DataParcel dataParcel = findDataParcel(id);
        boolean modified = false;
        if (summary != null) {
            dataParcel.setSummary(summary);
            modified = true;
        }
        if (dataParcelProviderId != null) {
            modified = true;
            Query query = getEntityManager().createNamedQuery("DataParcelProvider.findById");
            query.setParameter("id", dataParcelProviderId);
            dataParcel.setDataParcelProvider((DataParcelProvider) query.getSingleResult());
        }
        if (modified) {
            dataParcel.setModifyUser(user);
            getEntityManager().persist(dataParcel);
            LOG.debug("Data Parcel modified");
        }
    }

    @Override
    public void deleteDataParcel(Long id) {
        DataParcel dataParcel = findDataParcel(id);
        getEntityManager().remove(dataParcel);
    }

}
