package ca.bc.gov.health.sfds.entity;

import jakarta.persistence.*;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

/**
 * The persistent class for the DATA_PARCELS database table.
 */
@Entity
@Table(name = "DATA_PARCELS")
@NamedQuery(name = "DataParcel.findAll", query = "SELECT d FROM DataParcel d")
@NamedQuery(name = "DataParcel.findById", query = "SELECT d FROM DataParcel d WHERE d.id = :id")
@NamedNativeQuery(
        name = "DataParcel.findAllNotExpiredBuletins",
        query
        = "SELECT dpp.id                   parcel_id, "
        + "       dpr.source_identifier    external_Identifier, "
        + "   	pcr.id                   parcel_context_reference_id, "
        + "       q.context_id_code        context, "
        + "       pcr.effective_date       effective_date, "
        + "       pcr.end_date             end_date, "
        + "       q.parent_context_id_code parent_context, "
        + "       dpr.summary              summary "
        + "  FROM parcel_context_references pcr "
        + " inner join data_parcels dpr on pcr.dpr_id = dpr.id "
        + "  left outer join data_parcel_providers dpp on dpr.dpp_id = dpp.id "
        + " inner join (select dpi.id, "
        + "                    dpi.context_id_code, "
        + "                    dpi_parent.context_id_code as parent_context_id_code "
        + "               from data_parcel_identifiers dpi"
        + "               left outer join data_parcel_identifiers dpi_parent on dpi.dpi_id = dpi_parent.id "
        + "              where NVL(dpi.effective_date, TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) <= sysdate "
        + "                AND NVL(dpi.end_date, TO_DATE('31-DEC-3999', 'DD-MON-YYYY')) > sysdate "
        + "             CONNECT BY PRIOR dpi.id = dpi.dpi_id "
        + "              START WITH dpi.dpi_id = ?bulletin) q on q.id = pcr.dpi_id "
        + " WHERE NVL(pcr.effective_date, TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) <= sysdate "
        + "   AND NVL(pcr.end_date, TO_DATE('31-DEC-3999', 'DD-MON-YYYY')) > sysdate "
        + " ORDER BY pcr.end_date DESC",
        resultSetMapping = "AllBulletins"
)
@NamedNativeQuery(
        name = "DataParcel.findAllNotExpiredBuletinsForUses",
        query
        = "SELECT dpp.id                   parcel_id, "
        + "       dpr.source_identifier    external_Identifier, "
        + "   	pcr.id                   parcel_context_reference_id, "
        + "       q.context_id_code        context, "
        + "       pcr.effective_date       effective_date, "
        + "       pcr.end_date             end_date, "
        + "       q.parent_context_id_code parent_context, "
        + "       dpr.summary              summary "
        + "  FROM parcel_context_references pcr "
        + " inner join data_parcels dpr on pcr.dpr_id = dpr.id "
        + "  left outer join data_parcel_providers dpp on dpr.dpp_id = dpp.id "
        + " inner join (select dpi.id, "
        + "                    dpi.context_id_code, "
        + "                    dpi_parent.context_id_code as parent_context_id_code "
        + "               from data_parcel_identifiers dpi"
        + "               left outer join data_parcel_identifiers dpi_parent on dpi.dpi_id = dpi_parent.id "
        + "              where NVL(dpi.effective_date, TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) <= sysdate "
        + "                AND NVL(dpi.end_date, TO_DATE('31-DEC-3999', 'DD-MON-YYYY')) > sysdate "
        + "             CONNECT BY PRIOR dpi.id = dpi.dpi_id "
        + "              START WITH dpi.dpi_id = ?bulletin) q on q.id = pcr.dpi_id "
        + " WHERE NVL(pcr.effective_date, TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) <= sysdate "
        + "   AND NVL(pcr.end_date, TO_DATE('31-DEC-3999', 'DD-MON-YYYY')) > sysdate "
        + "   AND q.parent_context_id_code in (select regexp_substr(?uses,'[^,]+', 1, level) from dual connect by regexp_substr(?uses, '[^,]+', 1, level) is not null ) "
        + " ORDER BY pcr.end_date DESC",
        resultSetMapping = "AllBulletins"
)
@NamedNativeQuery(
        name = "DataParcel.findAllBuletinsForUses",
        query
        = "SELECT dpp.id                   parcel_id, "
        + "       dpr.source_identifier    external_Identifier, "
        + "   	pcr.id                   parcel_context_reference_id, "
        + "       q.context_id_code        context, "
        + "       pcr.effective_date       effective_date, "
        + "       pcr.end_date             end_date, "
        + "       q.parent_context_id_code parent_context, "
        + "       dpr.summary              summary "
        + "  FROM parcel_context_references pcr "
        + " inner join data_parcels dpr on pcr.dpr_id = dpr.id "
        + "  left outer join data_parcel_providers dpp on dpr.dpp_id = dpp.id "
        + " inner join (select dpi.id, "
        + "                    dpi.context_id_code, "
        + "                    dpi_parent.context_id_code as parent_context_id_code "
        + "               from data_parcel_identifiers dpi"
        + "               left outer join data_parcel_identifiers dpi_parent on dpi.dpi_id = dpi_parent.id "
        + "              where NVL(dpi.effective_date, TO_DATE('01-JAN-1900', 'DD-MON-YYYY')) <= sysdate "
        + "                AND NVL(dpi.end_date, TO_DATE('31-DEC-3999', 'DD-MON-YYYY')) > sysdate "
        + "             CONNECT BY PRIOR dpi.id = dpi.dpi_id "
        + "              START WITH dpi.dpi_id = ?bulletin) q on q.id = pcr.dpi_id "
        + "  WHERE q.parent_context_id_code in (select regexp_substr(?uses,'[^,]+', 1, level) from dual connect by regexp_substr(?uses, '[^,]+', 1, level) is not null ) "
        + " ORDER BY pcr.end_date DESC",
        resultSetMapping = "AllBulletins"
)
@SqlResultSetMapping(
        name = "AllBulletins",
        classes = {
            @ConstructorResult(
                    columns = {
                        @ColumnResult(name = "parcel_id", type = Long.class),
                        @ColumnResult(name = "parcel_context_reference_id", type = Long.class),
                        @ColumnResult(name = "external_Identifier"),
                        @ColumnResult(name = "context"),
                        @ColumnResult(name = "effective_date", type = Date.class),
                        @ColumnResult(name = "end_date", type = Date.class),
                        @ColumnResult(name = "parent_context"),
                        @ColumnResult(name = "summary")
                    },
                    targetClass = ca.bc.gov.health.sfds.dto.BulletinDto.class)
        }
)
@SequenceGenerator(name = "DATA_PARCELS_ID_GENERATOR", sequenceName = "DPCL_SEQ", allocationSize = 1)
public class DataParcel implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "DATA_PARCELS_ID_GENERATOR")
    @Column(name = "ID")
    private long id;

    @Temporal(TemporalType.DATE)
    @Column(name = "CREATE_DATE")
    private Date createDate;

    @Column(name = "CREATE_USER")
    private String createUser;

    @Column(name = "DATA_SIZE")
    private BigDecimal dataSize;

    @Column(name = "DATA_SOURCE")
    private String dataSource;

    @Column(name = "LOCK_SEQ_NUM")
    private BigDecimal lockSeqNum;

    @Temporal(TemporalType.DATE)
    @Column(name = "MODIFY_DATE")
    private Date modifyDate;

    @Column(name = "MODIFY_USER")
    private String modifyUser;

    @Column(name = "RETRIEVER_CLASS")
    private String retrieverClass;

    @Column(name = "SOURCE_IDENTIFIER")
    private String sourceIdentifier;

    @Column(name = "SUMMARY")
    private String summary;

    // bi-directional many-to-one association to DataParcelProvider
    @ManyToOne
    @JoinColumn(name = "DPP_ID")
    private DataParcelProvider dataParcelProvider;

    // bi-directional many-to-one association to ParcelContextReference
    @OneToMany(mappedBy = "dataParcel")
    private List<ParcelContextReference> parcelContextReferences;

    public DataParcel() {
        super();
    }

    public long getId() {
        return this.id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public Date getCreateDate() {
        return this.createDate;
    }

    public void setCreateDate(Date createDate) {
        this.createDate = createDate;
    }

    public String getCreateUser() {
        return this.createUser;
    }

    public void setCreateUser(String createUser) {
        this.createUser = createUser;
    }

    public BigDecimal getDataSize() {
        return this.dataSize;
    }

    public void setDataSize(BigDecimal dataSize) {
        this.dataSize = dataSize;
    }

    public String getDataSource() {
        return this.dataSource;
    }

    public void setDataSource(String dataSource) {
        this.dataSource = dataSource;
    }

    public BigDecimal getLockSeqNum() {
        return this.lockSeqNum;
    }

    public void setLockSeqNum(BigDecimal lockSeqNum) {
        this.lockSeqNum = lockSeqNum;
    }

    public Date getModifyDate() {
        return this.modifyDate;
    }

    public void setModifyDate(Date modifyDate) {
        this.modifyDate = modifyDate;
    }

    public String getModifyUser() {
        return this.modifyUser;
    }

    public void setModifyUser(String modifyUser) {
        this.modifyUser = modifyUser;
    }

    public String getRetrieverClass() {
        return this.retrieverClass;
    }

    public void setRetrieverClass(String retrieverClass) {
        this.retrieverClass = retrieverClass;
    }

    public String getSourceIdentifier() {
        return this.sourceIdentifier;
    }

    public void setSourceIdentifier(String sourceIdentifier) {
        this.sourceIdentifier = sourceIdentifier;
    }

    public String getSummary() {
        return this.summary;
    }

    public void setSummary(String summary) {
        this.summary = summary;
    }

    public DataParcelProvider getDataParcelProvider() {
        return this.dataParcelProvider;
    }

    public void setDataParcelProvider(DataParcelProvider dataParcelProvider) {
        this.dataParcelProvider = dataParcelProvider;
    }

    public List<ParcelContextReference> getParcelContextReferences() {
        return this.parcelContextReferences;
    }

    public void setParcelContextReferences(List<ParcelContextReference> parcelContextReferences) {
        this.parcelContextReferences = parcelContextReferences;
    }

    public ParcelContextReference addParcelContextReference(
            ParcelContextReference parcelContextReference) {
        getParcelContextReferences().add(parcelContextReference);
        parcelContextReference.setDataParcel(this);

        return parcelContextReference;
    }

    public ParcelContextReference removeParcelContextReference(
            ParcelContextReference parcelContextReference) {
        getParcelContextReferences().remove(parcelContextReference);
        parcelContextReference.setDataParcel(null);

        return parcelContextReference;
    }
}
