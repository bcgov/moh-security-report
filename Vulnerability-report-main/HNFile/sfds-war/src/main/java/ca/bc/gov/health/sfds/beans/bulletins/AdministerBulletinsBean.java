package ca.bc.gov.health.sfds.beans.bulletins;

import ca.bc.gov.health.security.UserPrincipal;
import ca.bc.gov.health.sfds.dto.BulletinDto;
import ca.bc.gov.health.sfds.service.IBulletinsFacade;
import ca.bc.gov.health.sfds.service.IDataParcelIdentifierFacade;
import ca.bc.gov.health.sfds.service.IDataParcelProviderFacade;
import ca.bc.gov.health.sfds.util.SFDSConstants;
import ca.bc.gov.health.sfds.util.SFDSUtils;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.component.UIComponent;
import jakarta.faces.context.FacesContext;
import jakarta.faces.event.ValueChangeEvent;
import jakarta.faces.model.SelectItem;
import jakarta.faces.validator.Validator;
import jakarta.faces.validator.ValidatorException;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.primefaces.PrimeFaces;
import org.primefaces.component.datepicker.DatePicker;
import org.primefaces.event.SelectEvent;

/**
 * Backing bean for managing Bulletins
 *
 * @author vladimir.dovgalyuk
 */
@Named("AdministerBulletinsBean")
@ViewScoped
public class AdministerBulletinsBean implements Serializable {

    private static final long serialVersionUID = -7063187108718032646L;
    private static final Logger LOG = LogManager.getLogger(AdministerBulletinsBean.class);
    private static final String CREATE_FORM_ID = "bulletinCreateForm";
    private static final String BULLETINS_FORM = "bulletinsForm";
    private static final String BULLETIN_END_DATE_UI_ID = "bulletinCreateForm:bulletinEndDate";

    public Validator<Object> getDateValidator() {
        return new Validator<Object>() {
            @Override
            public void validate(FacesContext context, UIComponent component, Object value) throws ValidatorException {
                DatePicker endDateControl = (DatePicker) context.getViewRoot().findComponent(BULLETIN_END_DATE_UI_ID);
                if ((context.getViewRoot().findComponent(BULLETIN_END_DATE_UI_ID) instanceof DatePicker)
                        && (endDateControl.getSubmittedValue() != null)
                        && (!"".equals(endDateControl.getSubmittedValue()))
                        && (value != null)) {
                    String dateFormat = endDateControl.getPattern();
                    SimpleDateFormat sdf = new SimpleDateFormat(dateFormat);
                    try {
                        Date endDate = sdf.parse(endDateControl.getSubmittedValue().toString());
                        Date startDate = (Date) value;
                        if ((endDate != null) && (endDate.getTime() < startDate.getTime())) {
                            throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                    SFDSUtils.getBundle().getString("bulletins.admin.message.validate.dates"),
                                    SFDSUtils.getBundle().getString("bulletins.admin.message.validate.dates")));
                        }
                    } catch (ParseException e) {
                        LOG.error("");
                        String m
                                = MessageFormat.format(
                                        SFDSUtils.getBundle().getString("bulletins.admin.message.validate.invalidEndDate"),
                                        dateFormat);
                        throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR, m, m));
                    }
                }
            }
        };
    }

    @EJB
    private IDataParcelIdentifierFacade dataParcelIdentifierFacade;

    @EJB
    private IBulletinsFacade bulletinsFacade;

    @EJB
    private IDataParcelProviderFacade dataParcelProviderFacade;

    @Inject
    private UserPrincipal userPrincipal;

    private static volatile Long bulletinsParcelIdentifierID = null;

    private List<SelectItem> usesList;

    private static synchronized void setBulletinsParcelIdentifierID(Long bulletinsParcelIdentifierID) {
        AdministerBulletinsBean.bulletinsParcelIdentifierID = bulletinsParcelIdentifierID;
    }

    private List<BulletinDto> bulletins;
    private List<BulletinDto> filteredBulletins;
    private BulletinDto currentBulletin;
    private BulletinDto bulletinForDialogue;

    public BulletinDto getBulletinForDialogue() {
        return bulletinForDialogue;
    }

    public void setBulletinForDialogue(BulletinDto bulletinForDialogue) {
        this.bulletinForDialogue = bulletinForDialogue;
    }

    /* For View Content dialogue */
    private String dialogueHeader;
    private String bulletinText;
    private String bulletinTrueText;
    private Set<String> changedFields;

    public BulletinDto getCurrentBulletin() {
        return currentBulletin;
    }

    public void setCurrentBulletin(BulletinDto currentBulletin) {
        this.currentBulletin = currentBulletin;
    }

    /**
     * Initialize the page
     */
    @PostConstruct
    public void init() {
        LOG.debug("Initializing AdministerBulletinsBean");
        if (AdministerBulletinsBean.bulletinsParcelIdentifierID == null) {
            Long fdsId = dataParcelIdentifierFacade.getIdByContextIdCode(SFDSConstants.FDS_CONTEXT_ID, null, userPrincipal.getName());
            AdministerBulletinsBean.setBulletinsParcelIdentifierID(
                    dataParcelIdentifierFacade.getIdByContextIdCode(
                            SFDSConstants.RootDataParcelIdentifiersForFDS.BULLETINS.getCode(),
                            fdsId,
                            userPrincipal.getName()));
        }

        populateBulletinsList();

        initiateUsesSelectItems();

        instantiateBulletin();

        resetChangedFields();

        LOG.debug("AdministerBulletinsBean initialized");
    }

    private void populateBulletinsList() {
        List<String> uses = new ArrayList<>();
        uses.add(SFDSConstants.ALL_BULLETINS);
        for (String use : userPrincipal.getUsesAsList()) {
            uses.add(use);
        }

        setBulletins(bulletinsFacade.getAllBulletinsForUses((bulletinsParcelIdentifierID), uses));
    }

    private void initiateUsesSelectItems() {
        usesList = new ArrayList<>();
        usesList.add(new SelectItem(SFDSConstants.ALL_BULLETINS));
        for (String use : userPrincipal.getUsesAsList()) {
            usesList.add(new SelectItem(use));
        }
    }

    public List<SelectItem> getAvailableUses() {
        if (usesList == null) {
            initiateUsesSelectItems();
        }
        return usesList;
    }

    /**
     * Handler of the row click event
     *
     * @param event
     */
    @SuppressWarnings("rawtypes")
    public void retrieveCurrentBulletin(SelectEvent event) {

        LOG.debug("Bulletin with parcel ID {} selected from {}", currentBulletin.getParcelId(), event.getComponent().getId());
        dialogueHeader = currentBulletin.getExternalIdentifier();

        byte[] content = dataParcelProviderFacade.getParcelData(currentBulletin.getParcelId());
        resetChangedFields();

        bulletinForDialogue = new BulletinDto(currentBulletin.getParcelId(),
                currentBulletin.getParcelContextReferenceId(),
                currentBulletin.getExternalIdentifier(),
                currentBulletin.getContext(),
                currentBulletin.getEffectiveDate(),
                currentBulletin.getEndDate(),
                currentBulletin.getParentContext(),
                currentBulletin.getSummary());

        try {
            bulletinText = SFDSUtils.parseBodyToHTML(content);
        } catch (Exception e) {
            LOG.fatal(SFDSUtils.getBundle().getString("bulletins.parsing.error"), e.fillInStackTrace());
            bulletinText = SFDSUtils.getBundle().getString("bulletins.parsing.error");
        }
    }

    public void valueChanged(ValueChangeEvent event) {
        if (event.getComponent().getAttributes().get(SFDSConstants.BULLETINS_INTERNAL_ATTRIBUTE) != null) {
            changedFields.add(event.getComponent().getAttributes().get(SFDSConstants.BULLETINS_INTERNAL_ATTRIBUTE).toString());
        }
    }

    /**
     * Instantiates new bulletin
     */
    public void instantiateBulletin() {
        LOG.debug("Instantiating new bulletin");
        bulletinForDialogue = new BulletinDto(-1L, null, null, null, null, null, null, null);
        currentBulletin = new BulletinDto(-1L, null, null, null, null, null, null, null);
        setBulletinText("");
    }

    public List<BulletinDto> getBulletins() {
        return bulletins;
    }

    public void setBulletins(List<BulletinDto> bulletins) {
        this.bulletins = bulletins;
    }

    public String getDialogueHeader() {
        return dialogueHeader;
    }

    public void setDialogueHeader(String dialogueHeader) {
        this.dialogueHeader = dialogueHeader;
    }

    public String getCreateDialogueHeader() {
        if (getIsCreate()) {
            return SFDSUtils.getBundle().getString("bulletins.admin.create");
        } else {
            return SFDSUtils.getBundle().getString("bulletins.admin.update");
        }
    }

    public boolean getIsCreate() {
        return (currentBulletin.getParcelId() < 0);
    }

    public String getBulletinText() {
        return bulletinText;
    }

    public void setBulletinText(String bulletinText) {
        this.bulletinText = bulletinText;
    }

    public List<BulletinDto> getFilteredBulletins() {
        return filteredBulletins;
    }

    public void setFilteredBulletins(List<BulletinDto> filteredBulletins) {
        this.filteredBulletins = filteredBulletins;
    }

    /**
     * Creates a new bulletin
     */
    public void createBulletin() {
        LOG.debug("Creating new bulletin");
        resetChangedFields();
        try {
            bulletinForDialogue.setExternalIdentifier(bulletinForDialogue.getContext());
            boolean result = bulletinsFacade.createBulletin(bulletinForDialogue, bulletinTrueText, userPrincipal.getName());

            if (result) {
                populateBulletinsList();
                PrimeFaces.current().ajax().update(BULLETINS_FORM);
                SFDSUtils.addInfoMessage(
                        CREATE_FORM_ID,
                        SFDSUtils.getBundle().getString("bulletins.admin.message.create.info"),
                        bulletinForDialogue.getExternalIdentifier());
                LOG.info("Bulletin with ID {} successfully created", bulletinForDialogue.getParcelId());
            } else {
                Long code = bulletinForDialogue.getParcelId();
                if (code == -100L) {
                    SFDSUtils.addErrorMessage(
                            CREATE_FORM_ID,
                            SFDSUtils.getBundle().getString("bulletins.admin.message.create.duplicate"));
                } else {
                    SFDSUtils.addErrorMessage(
                            CREATE_FORM_ID,
                            SFDSUtils.getBundle().getString("bulletins.admin.message.create.error"));
                }
                LOG.error("There were errors during bulletin creation");
            }
        } catch (Exception e) {
            SFDSUtils.addErrorMessage(
                    CREATE_FORM_ID,
                    SFDSUtils.getBundle().getString("bulletins.admin.message.create.exception"),
                    e.getMessage());
            LOG.error("Exception thrown when creating a new bulletin", e.fillInStackTrace());
        }
    }

    /**
     * Update selected bulletin
     */
    public void updateBulletin() {
        LOG.debug("Updating bulletin with ID {}", currentBulletin.getParcelId());
        try {
            boolean result = bulletinsFacade.updateBulletin(bulletinForDialogue, bulletinTrueText, changedFields, userPrincipal.getName());
            if (result) {
                populateBulletinsList();
                PrimeFaces.current().ajax().update(BULLETINS_FORM);
                SFDSUtils.addInfoMessage(
                        CREATE_FORM_ID,
                        SFDSUtils.getBundle().getString("bulletins.admin.message.update.info"),
                        currentBulletin.getExternalIdentifier());
                LOG.info("Bulletin with ID {} successfully updated", currentBulletin.getParcelId());
            } else {
                SFDSUtils.addErrorMessage(
                        CREATE_FORM_ID,
                        SFDSUtils.getBundle().getString("bulletins.admin.message.create.duplicate"));
                LOG.error("There were errors during bulletin creation");
            }
        } catch (Exception e) {
            SFDSUtils.addErrorMessage(
                    CREATE_FORM_ID,
                    SFDSUtils.getBundle().getString("bulletins.admin.message.update.exception"),
                    e.getMessage());
            LOG.error("Exception thrown when updating the existing bulletin", e.fillInStackTrace());
        }

        resetChangedFields();
    }

    /**
     * Delete existing bulletin
     */
    public void deleteBulletin() {
        LOG.debug("Deleting bulletin with ID {}", currentBulletin.getParcelId());
        try {
            bulletinsFacade.deletBulletin(currentBulletin);
            populateBulletinsList();
            PrimeFaces.current().ajax().update(BULLETINS_FORM);
            SFDSUtils.addInfoMessage(
                    CREATE_FORM_ID,
                    SFDSUtils.getBundle().getString("bulletins.admin.message.delete.info"),
                    currentBulletin.getExternalIdentifier());
            LOG.info("Bulletin with ID {} successfully deleted", currentBulletin.getParcelId());
        } catch (Exception e) {
            SFDSUtils.addErrorMessage(
                    CREATE_FORM_ID,
                    SFDSUtils.getBundle().getString("bulletins.admin.message.delete.exception"),
                    e.getMessage());
            LOG.error("Exception thrown when deleting the existing bulletin", e.fillInStackTrace());
        }
    }

    public void clearCurrentBulletin() {
        PrimeFaces.current().resetInputs(CREATE_FORM_ID);
    }

    public void resetChangedFields() {
        changedFields = new HashSet<>();
    }

    public String getBulletinInternalAttributeName() {
        return SFDSConstants.BULLETINS_INTERNAL_ATTRIBUTE;
    }

    public String getBulletinUseListInternalId() {
        return SFDSConstants.BULLETIN_USES_ID;
    }

    public String getBulletinEffectiveDateInternalId() {
        return SFDSConstants.BULLETIN_EFFECTIVE_DATE_ID;
    }

    public String getBulletinExpiredDateInternalId() {
        return SFDSConstants.BULLETIN_END_DATE_ID;
    }

    public String getBulletinSummaryInternalId() {
        return SFDSConstants.BULLETIN_SUMMARY_ID;
    }

    public String getBulletinContentInternalId() {
        return SFDSConstants.BULLETIN_CONTENT_ID;
    }

    public String getBulletinTrueText() {
        return bulletinTrueText;
    }

    public void setBulletinTrueText(String bulletinTrueText) {
        this.bulletinTrueText = bulletinTrueText;
    }
}
