package ca.bc.gov.health.sfds.beans.files;

import ca.bc.gov.health.security.UserPrincipal;
import ca.bc.gov.health.sfds.service.IDataRecipientFacade;
import ca.bc.gov.health.sfds.service.IFilesFacade;
import ca.bc.gov.health.sfds.util.SFDSConstants;
import ca.bc.gov.health.sfds.util.SFDSUtils;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.SessionScoped;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.ByteArrayInputStream;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Collections;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import org.primefaces.util.Constants;

/**
 * Session scoped bean for file download.
 *
 * The download file functionality is wrapped into a separate backing bean because download gets invoked twice, at the
 * page rendering phase and at the response rendering phase. Once the browser sees <p:fileDownload.../> it sends another
 * request ignoring previously returned stream. At the second time all variables from the View scope are unavailable, so
 * they have to be saved in the session context.
 *
 * @author vladimir.dovgalyuk
 *
 */
@SessionScoped
@Named("FileDownloadBean")
public class FileDownloadBean implements Serializable {

    private static final long serialVersionUID = -974989190057648391L;
    private static final Logger LOG = LogManager.getLogger(FileDownloadBean.class);

    @Inject
    private UserPrincipal userPrincipal;

    @EJB
    private IFilesFacade filesFacade;

    @EJB
    private IDataRecipientFacade dataRecipientFacade;

    private String filePhysicalName;
    private String mailboxName;
    private String dataRecipientId;
    private String dataRecipientLockSeqNum;

    /**
     * Returns file content from the server
     *
     * @return File content as StreamedContent
     */
    public StreamedContent getFileContent() {

        FacesContext context = FacesContext.getCurrentInstance();

        /**
         * Set primefaces.download cookie for PrimeFaces.monitorDownload to work as expected (see
         * https://stackoverflow.com/a/20664991 for further details)
         */
        context.getExternalContext().addResponseCookie(Constants.DOWNLOAD_COOKIE, "true",
                Collections.<String, Object>emptyMap());

        // HTML markup generation phase, values from View scoped BB are available
        if (context.getCurrentPhaseId() != null) {
            filePhysicalName = context.getExternalContext().getRequestParameterMap()
                    .get(SFDSConstants.FILE_REAL_NAME_PARAMETER);
            String fileName = context.getExternalContext().getRequestParameterMap()
                    .get(SFDSConstants.FILE_SAVE_NAME_PARAMETER);
            mailboxName = context.getExternalContext().getRequestParameterMap()
                    .get(SFDSConstants.MAILBOX_NAME_PARAMETER);
            dataRecipientId = context.getExternalContext().getRequestParameterMap()
                    .get(SFDSConstants.DATA_RECIPIENT_ID_PARAMETER);
            dataRecipientLockSeqNum = context.getExternalContext().getRequestParameterMap()
                    .get(SFDSConstants.DATA_RECIPIENT_LOCK_SEQ_NUM_PARAMETER);
            LOG.debug(
                    "First phase: page rendering. \n\tParameters passed are: file name = {}, saved file name = {}, mailbox name = {}, dataRecipientId = {}, dataRecipientLockSeqNum = {}",
                    filePhysicalName,
                    fileName,
                    mailboxName,
                    (dataRecipientId == null ? "null" : dataRecipientId),
                    (dataRecipientLockSeqNum == null ? "null" : dataRecipientLockSeqNum));
        }

        LOG.debug("Second phase: retrieving and streaming file content.");
        LOG.info("Getting content of the file {} from the mailbox {}", filePhysicalName, mailboxName);

        StringBuilder pathToFile = new StringBuilder(SFDSConstants.SFTP_PATH_TO_MAILBOXES)
                .append(SFDSConstants.SFTP_PATH_DELIMITER)
                .append(mailboxName)
                .append(SFDSConstants.SFTP_PATH_DELIMITER)
                .append(SFDSConstants.SFTP_PATH_WITHIN_MAILBOX);
        LOG.debug("Path to file = {}", pathToFile);

        byte[] content = filesFacade.getFileContent(filePhysicalName, pathToFile.toString());
        LOG.debug("File size in bytes = {}", content.length);

        String mimeType;
        try {
            mimeType = SFDSUtils.getMimeType(content);
        } catch (Exception e) {
            LOG.warn("Exception met while detecting MIME type of the file", e.fillInStackTrace());
            mimeType = "application/octet-stream";
        }
        LOG.debug("MIME type is {}", mimeType);

        if ((dataRecipientId != null) && (dataRecipientLockSeqNum != null)) {
            // Change status in metadata

            if (dataRecipientFacade.updateRecordStatus(SFDSConstants.FileStatuses.DOWNLOADED.getDatabaseStatus(),
                    new BigDecimal(dataRecipientId),
                    new BigDecimal(dataRecipientLockSeqNum),
                    userPrincipal.getName())) {
                LOG.info("File status is changed to {}, data recipient ID = {}", SFDSConstants.FileStatuses.DOWNLOADED.getDescription(), dataRecipientId);
            } else {
                LOG.error("There were errors when changing file status for data recipient ID {} and lock sequence number {}", dataRecipientId, dataRecipientLockSeqNum);
            }
        }

        return DefaultStreamedContent.builder().name(filePhysicalName).contentType(mimeType).stream(() -> new ByteArrayInputStream(content))
                .build();
    }

}
