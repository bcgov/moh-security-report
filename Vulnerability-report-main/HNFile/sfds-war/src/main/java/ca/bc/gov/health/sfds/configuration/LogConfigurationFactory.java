package ca.bc.gov.health.sfds.configuration;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.net.URI;
import java.util.Properties;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import org.apache.logging.log4j.Level;
import org.apache.logging.log4j.core.Filter;
import org.apache.logging.log4j.core.LoggerContext;
import org.apache.logging.log4j.core.appender.ConsoleAppender;
import org.apache.logging.log4j.core.config.Configuration;
import org.apache.logging.log4j.core.config.ConfigurationFactory;
import org.apache.logging.log4j.core.config.ConfigurationSource;
import org.apache.logging.log4j.core.config.Order;
import org.apache.logging.log4j.core.config.builder.api.AppenderComponentBuilder;
import org.apache.logging.log4j.core.config.builder.api.ComponentBuilder;
import org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilder;
import org.apache.logging.log4j.core.config.builder.api.FilterComponentBuilder;
import org.apache.logging.log4j.core.config.builder.api.LoggerComponentBuilder;
import org.apache.logging.log4j.core.config.builder.api.RootLoggerComponentBuilder;
import org.apache.logging.log4j.core.config.builder.impl.BuiltConfiguration;
import org.apache.logging.log4j.core.config.plugins.Plugin;
import org.apache.logging.log4j.core.config.properties.PropertiesConfigurationFactory;

@Plugin(name = "LogConfigurationFactory", category = ConfigurationFactory.CATEGORY)
@Order(100)
public class LogConfigurationFactory extends ConfigurationFactory {

  private static Properties loggingProperties = null;

  private static String configurationStatus = "ERROR";
  private static String thresholdFilterLevel = "WARN";
  private static String consoleAppenderPatternLayout = "%d [%t] %-5level: %msg%n%throwable";
  private static String fileAppenderPatternLayout = "%d [%t] %-5level: %msg%n%throwable";
  private static String fileAppenderName = "${sys:com.sun.aas.instanceRoot}/logs/sfds.log";
  private static String fileAppenderPattern =
      "${sys:com.sun.aas.instanceRoot}/logs/sfds-%d{MM-dd-yy}.log.gz";

  /*
   * Returns hard-coded programmatic configuration
   */
  private static Configuration createConfiguration(
      final String name, ConfigurationBuilder<BuiltConfiguration> builder) {

    builder.setConfigurationName(name);

    builder.setStatusLevel(
        Level.toLevel(
            configurationStatus,
            Level.ERROR)); // The level of internal Log4j events that should be logged to the console.

    FilterComponentBuilder filter =
        builder
            .newFilter("ThresholdFilter", Filter.Result.ACCEPT, Filter.Result.NEUTRAL)
            .addAttribute("level", Level.toLevel(thresholdFilterLevel));
    builder.add(filter);

    // Appenders - two by default, console and file

    // Console Appender
    AppenderComponentBuilder appenderBuilder =
        builder
            .newAppender("Stdout", "CONSOLE")
            .addAttribute("target", ConsoleAppender.Target.SYSTEM_OUT);
    appenderBuilder.add(
        builder.newLayout("PatternLayout").addAttribute("pattern", consoleAppenderPatternLayout));
    builder.add(appenderBuilder);

    // Rolling File Appender
    AppenderComponentBuilder fileAppenderBuilder = builder.newAppender("Logfile", "RollingFile");
    fileAppenderBuilder.add(
        builder.newLayout("PatternLayout").addAttribute("pattern", fileAppenderPatternLayout));
    fileAppenderBuilder.addAttribute("fileName", fileAppenderName);
    fileAppenderBuilder.addAttribute("filePattern", fileAppenderPattern);

    ComponentBuilder<?> triggeringPolicy =
        builder
            .newComponent("Policies")
            .addComponent(builder.newComponent("TimeBasedTriggeringPolicy"));
    fileAppenderBuilder.addComponent(triggeringPolicy);

    builder.add(fileAppenderBuilder);

    // SFDS logger
    String loggerLevel = "INFO";
    LoggerComponentBuilder logger =
        builder.newLogger("ca.bc.gov.health.sfds", Level.toLevel(loggerLevel));

    logger.add(builder.newAppenderRef("Stdout"));
    logger.add(builder.newAppenderRef("Logfile"));

    logger.addAttribute("additivity", "false");

    builder.add(logger);

    // Root logger
    String rootLoggerLevel = "ERROR";
    RootLoggerComponentBuilder rootLogger = builder.newRootLogger(Level.toLevel(rootLoggerLevel));
    rootLogger.add(builder.newAppenderRef("Stdout"));
    rootLogger.add(builder.newAppenderRef("Logfile"));
    builder.add(rootLogger);
    return builder.build();
  }

  @Override
  protected String[] getSupportedTypes() {
    return new String[] {"*"};
  }

  @Override
  public Configuration getConfiguration(LoggerContext loggerContext, ConfigurationSource source) {
    return getConfiguration(loggerContext, source.toString(), null);
  }

  @Override
  public Configuration getConfiguration(
      final LoggerContext loggerContext, final String name, final URI configLocation) {

    ConfigurationBuilder<BuiltConfiguration> builder = newConfigurationBuilder();
    PropertiesConfigurationFactory factory = new PropertiesConfigurationFactory();

    try {
      getProperties();
      ByteArrayOutputStream baos = new ByteArrayOutputStream();
      loggingProperties.store(baos, "Sample");
      ConfigurationSource src =
          new ConfigurationSource(new ByteArrayInputStream(baos.toByteArray()));
      return factory.getConfiguration(loggerContext, src);
    } catch (Exception e) {
      LOGGER.error("Error when getting configuration from JNDI context", e.fillInStackTrace());
      LOGGER.error("Switching to hard-coded programmatic configuration");
      return createConfiguration(name, builder);
    }
  }

  private static void getProperties() throws NamingException {
    if (loggingProperties == null) {
      Context ctx = new InitialContext();
      loggingProperties = (Properties) ctx.lookup("java:app/sfds/log4j_properties");
    }
  }
}
