package ca.bc.gov.health.sfds.beans.bulletins;

import ca.bc.gov.health.security.UserPrincipal;
import ca.bc.gov.health.sfds.dto.BulletinDto;
import ca.bc.gov.health.sfds.service.IBulletinsFacade;
import ca.bc.gov.health.sfds.service.IDataParcelIdentifierFacade;
import ca.bc.gov.health.sfds.service.IDataParcelProviderFacade;
import ca.bc.gov.health.sfds.util.SFDSConstants;
import ca.bc.gov.health.sfds.util.SFDSUtils;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.primefaces.event.SelectEvent;

/**
 * Backing bean for viewing Bulletins
 *
 * @author vladimir.dovgalyuk
 */
@Named("ViewBulletinsBean")
@ViewScoped
public class ViewBulletinsBean implements Serializable {

    private static final long serialVersionUID = -5287491679627872517L;
    private static final Logger LOG = LogManager.getLogger(ViewBulletinsBean.class);

    @EJB
    private IDataParcelIdentifierFacade dataParcelIdentifierFacade;

    @EJB
    private IBulletinsFacade bulletinsFacade;

    @EJB
    private IDataParcelProviderFacade dataParcelProviderFacade;

    @Inject
    private UserPrincipal userPrincipal;

    private static volatile Long bulletinsParcelIdentifierID = null;

    private List<SelectItem> usesList;

    private static synchronized void setBulletinsParcelIdentifierID(Long bulletinsParcelIdentifierID) {
        ViewBulletinsBean.bulletinsParcelIdentifierID = bulletinsParcelIdentifierID;
    }

    private List<BulletinDto> bulletins;
    private List<BulletinDto> filteredBulletins;
    private BulletinDto currentBulletin;

    /* For View Content dialogue */
    private String dialogueHeader;
    private String bulletinText;

    public BulletinDto getCurrentBulletin() {
        return currentBulletin;
    }

    public void setCurrentBulletin(BulletinDto currentBulletin) {
        this.currentBulletin = currentBulletin;
    }

    /**
     * Initialize the page
     */
    @PostConstruct
    public void init() {
        LOG.debug("Initializing ViewBulletinsBean");
        if (ViewBulletinsBean.bulletinsParcelIdentifierID == null) {
            Long fdsId = dataParcelIdentifierFacade.getIdByContextIdCode(SFDSConstants.FDS_CONTEXT_ID, null, userPrincipal.getName());
            ViewBulletinsBean.setBulletinsParcelIdentifierID(
                    dataParcelIdentifierFacade.getIdByContextIdCode(
                            SFDSConstants.RootDataParcelIdentifiersForFDS.BULLETINS.getCode(),
                            fdsId, userPrincipal.getName()));
        }

        populateBulletinsList();

        initiateUsesSelectItems();

        currentBulletin = new BulletinDto(-1L, null, null, null, null, null, null, null);

        LOG.debug("ViewBulletinsBean initialized");
    }

    private void populateBulletinsList() {
        List<String> uses = new ArrayList<>();
        uses.add(SFDSConstants.ALL_BULLETINS);
        for (String use : userPrincipal.getUsesAsList()) {
            uses.add(use);
        }

        setBulletins(bulletinsFacade.getNotExpiredBulletinsForUses((bulletinsParcelIdentifierID), uses));
    }

    private void initiateUsesSelectItems() {
        usesList = new ArrayList<>();
        usesList.add(new SelectItem(SFDSConstants.ALL_BULLETINS));
        for (String use : userPrincipal.getUsesAsList()) {
            usesList.add(new SelectItem(use));
        }
    }

    public List<SelectItem> getAvailableUses() {
        if (usesList == null) {
            initiateUsesSelectItems();
        }
        return usesList;
    }

    /**
     * Handler of the row click event
     *
     * @param event
     */
    @SuppressWarnings("rawtypes")
    public void retrieveCurrentBulletin(SelectEvent event) {

        LOG.debug("Bulletin with parcel {} selected from {}", currentBulletin.getParcelId(),
                event.getComponent().getId());
        dialogueHeader = currentBulletin.getExternalIdentifier();

        byte[] content = dataParcelProviderFacade.getParcelData(currentBulletin.getParcelId());

        try {
            bulletinText = SFDSUtils.parseBodyToHTML(content);
        } catch (Exception e) {
            LOG.fatal(SFDSUtils.getBundle().getString("bulletins.parsing.error"), e.fillInStackTrace());
            bulletinText = SFDSUtils.getBundle().getString("bulletins.parsing.error");
        }
    }

    public List<BulletinDto> getBulletins() {
        return bulletins;
    }

    public void setBulletins(List<BulletinDto> bulletins) {
        this.bulletins = bulletins;
    }

    public String getDialogueHeader() {
        return dialogueHeader;
    }

    public void setDialogueHeader(String dialogueHeader) {
        this.dialogueHeader = dialogueHeader;
    }

    public boolean getIsCreate() {
        return (currentBulletin.getParcelId() < 0);
    }

    public String getBulletinText() {
        return bulletinText;
    }

    public void setBulletinText(String bulletinText) {
        this.bulletinText = bulletinText;
    }

    public List<BulletinDto> getFilteredBulletins() {
        return filteredBulletins;
    }

    public void setFilteredBulletins(List<BulletinDto> filteredBulletins) {
        this.filteredBulletins = filteredBulletins;
    }

}
