package ca.bc.gov.health.sfds.beans.uses;

import ca.bc.gov.health.security.UserPrincipal;
import ca.bc.gov.health.sfds.dto.UseDto;
import ca.bc.gov.health.sfds.exception.DuplicateRecordException;
import ca.bc.gov.health.sfds.service.IUseFacade;
import ca.bc.gov.health.sfds.util.SFDSUtils;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.primefaces.PrimeFaces;

/**
 * Backing bean for viewing Uses.
 *
 * @author alexey.malikov
 *
 */
@Named("AdministerUsesBean")
@ViewScoped
public class AdministerUsesBean implements Serializable {

    private static final long serialVersionUID = -4715766760839544593L;
    private static final Logger LOG = LogManager.getLogger(AdministerUsesBean.class);

    private static final String CREATE_USE_FORM = "useCreateForm";
    private static final String USES_FORM = "usesForm";
    public static final String ALPHANUMERIC_PATTERN_WITH_SPACE = "^[a-zA-Z0-9 ]+$";
    public static final String ALPHANUMERIC_PATTERN = "^[a-zA-Z0-9]+$";
    private static final String MULTI = "Multi";

    @EJB
    private IUseFacade usesFacade;

    @Inject
    private UserPrincipal userPrincipal;

    private List<UseDto> uses;
    private UseDto currentUse;
    private boolean multiMode;

    /**
     * Initialize the page.
     */
    @PostConstruct
    public void init() {
        this.uses = usesFacade.getAllUses();

        this.instantiateUse();
    }

    /**
     * Instantiates new use
     */
    public void instantiateUse() {
        LOG.debug("Instantiating new use");
        this.currentUse = new UseDto();
        this.initCurrentUse();
    }

    public void initCurrentUse() {
        this.setMultiMode(this.getCurrentUse().isMulti());
    }

    /**
     * Delete existing use
     */
    public void deleteUse() {
        LOG.debug("Deleting use with ID {}", currentUse.getUseId());

        try {
            usesFacade.deleteUse(currentUse);

            SFDSUtils.addInfoMessage(CREATE_USE_FORM, SFDSUtils.getBundle().getString("uses.admin.message.delete.info"),
                    currentUse.getUseId());
            LOG.info("Use with ID {} successfully deleted", currentUse.getUseId());

            init();
            PrimeFaces.current().ajax().update(USES_FORM);
        } catch (Exception e) {
            SFDSUtils.addErrorMessage(CREATE_USE_FORM,
                    SFDSUtils.getBundle().getString("uses.admin.message.delete.exception"), e.getMessage());
            LOG.error("Exception thrown when deleting the existing use", e.fillInStackTrace());
        }
    }

    /**
     * Update selected use
     */
    public void updateUse() {
        if (usesFacade.rulesBasedAccountExists(currentUse.getRulesbasedaccountDto().getAccountId(),
                currentUse.getRulesbasedaccountDto().getId())) {
            SFDSUtils.addErrorMessage(CREATE_USE_FORM,
                    SFDSUtils.getBundle().getString("uses.admin.message.create.duplicate.account"));
        } else {
            LOG.debug("Updating use with ID {}", currentUse.getUseId());
            this.currentUse.setMulti(this.isMultiMode());
            this.currentUse.setModifyUser(this.userPrincipal.getName());
            this.usesFacade.updateUse(this.currentUse);

            SFDSUtils.addInfoMessage(CREATE_USE_FORM, SFDSUtils.getBundle().getString("uses.admin.message.update.info"),
                    currentUse.getUseId());
            LOG.info("Use with ID {} successfully updated", currentUse.getUseId());

            init();
            PrimeFaces.current().ajax().update(USES_FORM);
        }
    }

    /**
     * Creates a new use
     */
    public void createUse() {
        LOG.debug("Creating new use");
        try {
            if (usesFacade.rulesBasedAccountExists(currentUse.getRulesbasedaccountDto().getAccountId(), null)) {
                SFDSUtils.addErrorMessage(CREATE_USE_FORM,
                        SFDSUtils.getBundle().getString("uses.admin.message.create.duplicate.account"));
            } else {
                this.currentUse.setMulti(this.isMultiMode());
                this.currentUse.setCreateUser(this.userPrincipal.getName());
                this.usesFacade.createUse(this.currentUse);

                SFDSUtils.addInfoMessage(CREATE_USE_FORM,
                        SFDSUtils.getBundle().getString("uses.admin.message.create.info"), currentUse.getUseId());
                LOG.info("Use with ID {} successfully created", currentUse.getUseId());

                init();
                PrimeFaces.current().ajax().update(USES_FORM);
            }
        } catch (DuplicateRecordException e) {
            if (e.getDuplicateRecordTypes().contains(DuplicateRecordException.RecordType.USE)) {
                SFDSUtils.addErrorMessage(CREATE_USE_FORM,
                        SFDSUtils.getBundle().getString("uses.admin.message.create.duplicate.use"));
            }

            if (e.getDuplicateRecordTypes().contains(DuplicateRecordException.RecordType.RULESBASEDACCOUNT)) {
                SFDSUtils.addErrorMessage(CREATE_USE_FORM,
                        SFDSUtils.getBundle().getString("uses.admin.message.create.duplicate.recipient"));
            }

            PrimeFaces.current().scrollTo("useCreateForm:useMessages");
        } catch (Exception e) {
            SFDSUtils.addErrorMessage(CREATE_USE_FORM,
                    SFDSUtils.getBundle().getString("uses.admin.message.create.exception"), e.getMessage());
            LOG.error("Exception thrown when creating a new use", e.fillInStackTrace());
        }
    }

    public List<UseDto> getUses() {
        return uses;
    }

    public void setUses(List<UseDto> uses) {
        this.uses = uses;
    }

    public UseDto getCurrentUse() {
        return currentUse;
    }

    public void setCurrentUse(UseDto currentUse) {
        this.currentUse = currentUse;
    }

    public boolean isMultiMode() {
        return multiMode;
    }

    public void setMultiMode(boolean multiMode) {
        this.multiMode = multiMode;
    }

    public void setMultiLabel() {
        // noop
    }

    public String getMultiLabel() {
        return MULTI;
    }
}
