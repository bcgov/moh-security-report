package ca.bc.gov.health.sfds.beans.files;

import ca.bc.gov.health.security.UserPrincipal;
import ca.bc.gov.health.sfds.dto.RecipientDto;
import ca.bc.gov.health.sfds.dto.UseDto;
import ca.bc.gov.health.sfds.enums.BooleanYesNo;
import ca.bc.gov.health.sfds.files.Mailbox;
import ca.bc.gov.health.sfds.files.SendFileEntry;
import ca.bc.gov.health.sfds.service.IAccountsFacade;
import ca.bc.gov.health.sfds.service.IFilesFacade;
import ca.bc.gov.health.sfds.service.IUseFacade;
import ca.bc.gov.health.sfds.util.SFDSConstants;
import ca.bc.gov.health.sfds.util.SFDSUtils;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.context.FacesContext;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.primefaces.PrimeFaces;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.event.SelectEvent;
import org.primefaces.event.TransferEvent;
import org.primefaces.event.UnselectEvent;
import org.primefaces.model.DualListModel;
import org.primefaces.util.Constants;

@ViewScoped
@Named("SendFileBean")
public class SendFileBean implements Serializable {

    private static final long serialVersionUID = 360524905929361144L;
    private static final Logger LOG = LogManager.getLogger(SendFileBean.class);

    private static final String FILE_SUBMIT_FORM = "fileSubmitForm";
    private static final String NO_FILE = "sendFile.error.noFile";
    private static final String EMMPTY_FILE = "sendFile.error.emptyFile";

    private List<SelectItem> availableMailboxes;
    private List<SelectItem> usesForSelectedMailbox;
    private String selectedMailbox = "";
    private UseDto selectedUse = new UseDto();

    private List<SelectItem> availableYears;
    private String selectedYear;
    private List<SelectItem> availableQuarters;
    private String selectedQuarter;
    private String recipientSearchFilter;
    private String messageSubject;
    private String messageBody;

    // Block of boolean variables to control panels visibility
    private boolean calendarPanelVisible; // Year/Quarter panel for HSCIS
    private boolean fileUploadPanelVisible; // File upload panel
    private boolean multiSendPanelVisible; // Multiple recipients panel
    private boolean sendMessagePanelVisible; // Text Message 

    private DualListModel<RecipientDto> recipients;
    private List<RecipientDto> allRecipients;
    private RecipientDto selectedRecipient;

    private transient List<SendFileEntry> uploadedFiles;
    private SendFileEntry currentFile;
    private long timeElapsed;
    private boolean locked = true;

    private boolean allowedToSendFile = false;
    private boolean sendConfirmation;
    private boolean sendConfirmationForMessage;
    private boolean canSendFile;

    private SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");

    @Inject
    private UserPrincipal userPrincipal;

    @EJB
    private IUseFacade useFacade;

    @EJB
    private IFilesFacade filesFacade;

    @EJB
    private IAccountsFacade accountsFacade;

    /**
     * Initialize the page
     */
    @PostConstruct
    public void init() {
        LOG.debug("Initializing SendFileBean");

        availableMailboxes = SFDSUtils.getListOfMailboxes(userPrincipal.getMailboxes(), true, false);

        availableQuarters = new ArrayList<>();
        for (int i = 1; i <= 4; i++) {
            availableQuarters.add(new SelectItem(Integer.toString(i), "Q" + i));
        }

        buildListOfYears();

        uploadedFiles = new ArrayList<>();
        recipients = new DualListModel<>(new ArrayList<>(), new ArrayList<>());
        hideAllPanels();
        canSendFile = false;
    }

    /**
     * Populate list of items for Year drop-down
     */
    private void buildListOfYears() {
        int currentYearInt = Calendar.getInstance().get(Calendar.YEAR);
        setSelectedYear(Integer.toString(currentYearInt));
        availableYears = new ArrayList<>();
        for (int i = currentYearInt - 2; i <= currentYearInt + 3; i++) {
            availableYears.add(new SelectItem(Integer.toString(i), Integer.toString(i)));
        }
        // Calculate the current quarter
        setSelectedQuarter(Integer.toString(Calendar.getInstance().get(Calendar.MONTH) / 3 + 1));
    }

    /**
     * Handler for changing mailbox selection
     */
    public void onMailboxChange() {
        usesForSelectedMailbox = new ArrayList<>();
        setSelectedUse(new UseDto());
        hideAllPanels();

        if (getSelectedMailbox() != null) {
            LOG.debug("Mailbox {} selected, looking for associated uses", getSelectedMailbox());
            Mailbox mailbox = getSelectedMailboxObject();
            if (mailbox != null) {
                for (String useId : mailbox.getUses()) {
                    UseDto use = useFacade.getByUseId(useId);
                    /* Use as assigned from Keycloak User Management Console may have been deleted and therefore null */
                    if (use != null) {
                        usesForSelectedMailbox.add(
                                new SelectItem(use.getUseId(), use.getSendLabel() + " (" + use.getUseId() + ")"));
                    }
                }
            } else {
                LOG.error("getSelectedMailboxObject() returned null for {}", getSelectedMailbox());
            }
        } else {
            LOG.debug("No mailbox selected");
        }
        pageReset();
    }

    private Mailbox getSelectedMailboxObject() {
        for (Mailbox mailbox : userPrincipal.getMailboxes()) {
            if (mailbox.getName().equals(getSelectedMailbox())) {
                return mailbox;
            }
        }
        return null;
    }

    /**
     * Handler for changing mailbox selection
     */
    public void onRecipientChange() {
        LOG.debug("Recipient {} selected", getSelectedUse().getUseId());
        setSelectedUse(useFacade.getByUseId(getSelectedUse().getUseId()));
        LOG.debug("Selected use is {}", getSelectedUse());

        if (getSelectedUse() != null) {

            if (SFDSConstants.HSCIS.equals(getSelectedUse().getUseId())) {
                calendarPanelVisible = true;
                multiSendPanelVisible = false;
            } else {
                calendarPanelVisible = false;
                if (getSelectedUse().isMulti()) {
                    multiSendPanelVisible = true;
                    recipientSearchFilter = "";
                } else {
                    multiSendPanelVisible = false;
                }
            }

            if (getSelectedUse().getUseId() == null) {
                fileUploadPanelVisible = false;
            } else {
                fileUploadPanelVisible = true;
            }

            sendMessagePanelVisible = BooleanYesNo.YES.getValue().equals(getSelectedUse().getTextMessage());
        } else {
            hideAllPanels();
            selectedUse = new UseDto();
        }
        pageReset();
    }

    private void pageReset() {
        uploadedFiles = new ArrayList<>();
        recipients = new DualListModel<>(new ArrayList<>(), new ArrayList<>());
        messageSubject = "";
        messageBody = "";
    }

    private void hideAllPanels() {
        multiSendPanelVisible = false;
        calendarPanelVisible = false;
        sendMessagePanelVisible = false;
        fileUploadPanelVisible = false;
    }

    /**
     * File Upload.
     *
     * @param event
     * @throws InterruptedException
     */
    public void upload(FileUploadEvent event) throws InterruptedException {
        while (locked) {
            try {
                Thread.sleep(100);
                LOG.debug("Waiting ...");
            } catch (InterruptedException e) {
                LOG.error(e.getMessage(), e.fillInStackTrace());
                throw e;
            }
        }
        LOG.debug("Uploading file {}", event.getFile().getFileName());
        try {
            SendFileEntry entry = uploadedFiles.get(uploadedFiles.size() - 1);
            timeElapsed = new Date().getTime() - timeElapsed;
            entry.setTimeElapsed(timeElapsed);
            entry.setStatus(SFDSConstants.FileSubmitStatuses.UPLOADED);
            entry.setContent(event.getFile().getContent());
            entry.setSize(event.getFile().getSize());
            LOG.debug("Upload completed, time elapsed = {} ms", timeElapsed);
        } catch (Exception e) {
            LOG.error(e.getMessage(), e.fillInStackTrace());
        } finally {
            locked = true;
        }
    }

    /**
     * File upload process initiated
     */
    public void onStartUpload() {
        timeElapsed = new Date().getTime();
        String filename = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap().get("fileName");
        SendFileEntry entry = new SendFileEntry(uploadedFiles.size());
        entry.setName(filename);
        entry.setStatus(SFDSConstants.FileSubmitStatuses.UPLOAD_IN_PROGRESS);
        uploadedFiles.add(entry);
        PrimeFaces.current().ajax().update("fileSubmitForm:uploadedFiles");
        locked = false;
        LOG.debug("Upload of the file {} started", filename);
    }

    /**
     * Row in the table with uploaded files is selected
     *
     * @param event SelectEvent<SendFileEntry>
     */
    public void onRowSelect(SelectEvent<SendFileEntry> event) {
        if (event.getObject().getStatus().equals(SFDSConstants.FileSubmitStatuses.UPLOADED)) {
            allowedToSendFile = true;
        } else {
            allowedToSendFile = false;
        }
    }

    /**
     * Row in the table with uploaded files is unselected (Ctrl+click)
     *
     * @param event UnelectEvent<SendFileEntry>
     */
    public void onRowUnselect(UnselectEvent<SendFileEntry> event) {
        allowedToSendFile = false;
    }

    /**
     * File send initiated, "Send File" button clicked
     */
    public void startSend() {
        LOG.debug("Start button clicked, checking selected file");
        canSendFile = true;
        if (currentFile == null) {
            LOG.error(SFDSUtils.getBundle().getString(NO_FILE));
            SFDSUtils.addErrorMessage(FILE_SUBMIT_FORM, SFDSUtils.getBundle().getString(NO_FILE));
            canSendFile = false;

        }
        if (isMultiSendPanelVisible() && recipients.getTarget().isEmpty()) {
            LOG.info("Validation failed, no recipients selected");
            SFDSUtils.addErrorMessageNoValidation(FILE_SUBMIT_FORM,
                    SFDSUtils.getBundle().getString("sendFile.error.noRecipients"));
            canSendFile = false;
        }
        if (!canSendFile) {
            return;
        }

        currentFile.setStatus(SFDSConstants.FileSubmitStatuses.SENDING_IN_PROGRESS);
        allowedToSendFile = false;
        refreshComponentsForSend();
    }

    /**
     * Main method - push the file out and report its send status.
     */
    public void endSend() {
        if (canSendFile) {
            if ((currentFile != null) && (currentFile.getSize() > 0)) {
                LOG.info("Start sending file {}", currentFile.getName());
                Date submittedDate = new Date();

                // Actual sending goes here
                currentFile.setSubmitted(submittedDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
                refreshComponentsForSend();
                boolean result = false;
                if (!getSelectedUse().isMulti()) {
                    // Single recipient
                    if (SFDSConstants.HSCIS.equals(getSelectedUse().getUseId())) {
                        result = filesFacade.sendFile(selectedMailbox, sendConfirmation, currentFile, getSelectedUse(), userPrincipal.getName(), selectedYear.substring(3, 4), selectedQuarter);
                    } else {
                        result = filesFacade.sendFile(selectedMailbox, sendConfirmation, currentFile, getSelectedUse(), userPrincipal.getName());
                    }
                } else {
                    // Multiple recipients
                    result = filesFacade.sendFile(selectedMailbox, sendConfirmation, currentFile, getSelectedUse(), recipients.getTarget(), userPrincipal.getName());
                }

                if (result) {
                    // Reporting success
                    currentFile.setStatus(SFDSConstants.FileSubmitStatuses.DELIVERED);
                    currentFile.setUploadTimeElapsed(new Date().getTime() - submittedDate.getTime());
                    refreshComponentsForSend();

                    String successMessage = SFDSUtils.getBundle().getString("sendFile.success.file");
                    String mailboxName = "N/A";
                    String recipientName = "N/A";
                    for (SelectItem mailbox : this.availableMailboxes) {
                        if (selectedMailbox.equals(mailbox.getValue())) {
                            mailboxName = mailbox.getLabel();
                            break;
                        }
                    }
                    if (!getSelectedUse().isMulti()) {
                        for (SelectItem recipient : this.usesForSelectedMailbox) {
                            if (getSelectedUse().getUseId().equals(recipient.getValue())) {
                                recipientName = recipient.getLabel();
                                break;
                            }
                        }
                    } else {
                        StringBuilder rn = new StringBuilder("");
                        int count = 0;
                        for (RecipientDto recipient : recipients.getTarget()) {
                            rn.append(recipient.getName());
                            if (++count < recipients.getTarget().size()) {
                                rn.append(", ");
                            }
                        }
                        recipientName = rn.toString().trim();
                    }

                    SFDSUtils.addInfoMessage(FILE_SUBMIT_FORM, successMessage,
                            mailboxName,
                            recipientName,
                            currentFile.getName(),
                            (sendConfirmation ? "Yes" : "No"),
                            sdf.format(submittedDate));

                    LOG.info("Sending completed successfully");
                } else {
                    // Reporting general error
                    currentFile.setStatus(SFDSConstants.FileSubmitStatuses.SYS_ERROR);
                    currentFile.setSubmitted(null);
                    refreshComponentsForSend();
                    SFDSUtils.addErrorMessage(FILE_SUBMIT_FORM,
                            SFDSUtils.getBundle().getString("sendFile.error.general"));
                }
            } else {
                if (currentFile == null) {
                    LOG.error(SFDSUtils.getBundle().getString(NO_FILE));
                    SFDSUtils.addErrorMessageNoValidation(FILE_SUBMIT_FORM, SFDSUtils.getBundle().getString(NO_FILE));
                } else {
                    // Reporting empty file
                    LOG.error(SFDSUtils.getBundle().getString(EMMPTY_FILE));
                    currentFile.setStatus(SFDSConstants.FileSubmitStatuses.SYS_ERROR);
                    currentFile.setSubmitted(null);
                    SFDSUtils.addErrorMessageNoValidation(FILE_SUBMIT_FORM, SFDSUtils.getBundle().getString(EMMPTY_FILE));
                    refreshComponentsForSend();
                }
            }
        }
    }

    /**
     * Sending message
     */
    public void sendMessage() {
        LOG.debug("Start sending message, validating data");

        boolean hasErrors = false;
        if ((getMessageSubject() == null) || "".equals(getMessageSubject().trim())) {
            LOG.info("Validation failed, message subject is empty");
            SFDSUtils.addErrorMessageNoValidation(FILE_SUBMIT_FORM,
                    SFDSUtils.getBundle().getString("sendFile.error.subject"));
            hasErrors = true;
        }
        if (isMultiSendPanelVisible() && recipients.getTarget().isEmpty()) {
            LOG.info("Validation failed, no recipients selected");
            SFDSUtils.addErrorMessageNoValidation(FILE_SUBMIT_FORM,
                    SFDSUtils.getBundle().getString("sendFile.error.noRecipients"));
            hasErrors = true;
        }
        if (hasErrors) {
            return;
        }

        String sendingAccount = "";
        Mailbox m = getSelectedMailboxObject();
        if (m != null) {
            sendingAccount = m.getName();
        } else {
            LOG.error("getSelectedMailboxObject() returned null for {}", getSelectedMailbox());
            SFDSUtils.addErrorMessageNoValidation(FILE_SUBMIT_FORM,
                    SFDSUtils.getBundle().getString("sendFile.error.recipient"), getSelectedMailbox());
            return;
        }

        SendFileEntry message = new SendFileEntry(-1);
        Date submittedDate = new Date();
        message.setSubmitted(submittedDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime());
        message.setName(SFDSConstants.TEXT_MESSAGE_FILE_NAME);
        message.setContent(composeMessageFile(sendingAccount, getSelectedUse().getUseId()).getBytes());
        message.setSize(message.getContent().length);
        boolean result;
        if (!getSelectedUse().isMulti()) // Single recipient
        {
            result = filesFacade.sendFile(selectedMailbox, sendConfirmationForMessage, message, getSelectedUse(), userPrincipal.getName());
        } else // Multiple recipients
        {
            result = filesFacade.sendFile(selectedMailbox, sendConfirmationForMessage, message, getSelectedUse(), recipients.getTarget(), userPrincipal.getName());
        }

        if (!result) {
            // Report errors
            SFDSUtils.addErrorMessage(FILE_SUBMIT_FORM,
                    SFDSUtils.getBundle().getString("sendFile.error.message"));
        } else {
            String successMessage = SFDSUtils.getBundle().getString("sendFile.success.message");
            String mailboxName = m.getDescription();
            String recipientName = "N/A";
            if (!getSelectedUse().isMulti()) {
                for (SelectItem recipient : this.usesForSelectedMailbox) {
                    if (getSelectedUse().getUseId().equals(recipient.getValue())) {
                        recipientName = recipient.getLabel();
                        break;
                    }
                }
            } else {
                StringBuilder rn = new StringBuilder("");
                int count = 0;
                for (RecipientDto recipient : recipients.getTarget()) {
                    rn.append(recipient.getName());
                    if (++count < recipients.getTarget().size()) {
                        rn.append(", ");
                    }
                }
                recipientName = rn.toString().trim();
            }

            SFDSUtils.addInfoMessage(FILE_SUBMIT_FORM, successMessage,
                    mailboxName,
                    recipientName,
                    (sendConfirmationForMessage ? "Yes" : "No"),
                    sdf.format(submittedDate));
            LOG.info("Sending completed successfully");
        }
    }

    private String composeMessageFile(String account, String use) {
        StringBuilder sb = new StringBuilder();
        sb.append("From User:").append(userPrincipal.getName()).append(SFDSConstants.EOL);
        sb.append("From Account:").append(account).append(SFDSConstants.EOL);
        sb.append("From Use:").append(use).append(SFDSConstants.EOL);
        sb.append("Subject:").append(getMessageSubject()).append(SFDSConstants.EOL).append(SFDSConstants.EOL);
        sb.append(getMessageBody());
        return sb.toString();
    }

    /**
     * Search for recipients
     */
    public void findRecipients() {
        LOG.debug("Looking for recipients with the consumer {} and conditions {}", selectedUse.getUseId(), recipientSearchFilter);
        List<RecipientDto> source = new ArrayList<>();
        if (!"".equals(recipientSearchFilter.trim())) {
            allRecipients = accountsFacade.getRecipients(selectedUse.getUseId(),
                    SFDSUtils.transformSearchFilter(recipientSearchFilter));

            if (!allRecipients.isEmpty()) {
                if (allRecipients.size() > 1) {
                    LOG.debug("{} recipients found", allRecipients.size());
                } else {
                    LOG.debug("{} recipient found", allRecipients.size());
                }

                for (RecipientDto dto : allRecipients) {
                    source.add(dto);
                }
            }
        }
        recipients.setSource(source);
    }

    /**
     * Handler for pick list items transfer
     *
     * @param event TransferEvent
     */
    public void onTransfer(TransferEvent event) {
        refreshComponentsForSend();
    }

    /**
     * Shows selected recipient's details
     */
    public void recipientDetails() {
        LOG.debug("Details link hit");
        FacesContext context = FacesContext.getCurrentInstance();

        /**
         * Set primefaces.download cookie for PrimeFaces.monitorDownload to work as expected (see
         * https://stackoverflow.com/a/20664991 for further details)
         */
        context.getExternalContext().addResponseCookie(Constants.DOWNLOAD_COOKIE, "true",
                Collections.<String, Object>emptyMap());

        String recipientId = context.getExternalContext().getRequestParameterMap().get(SFDSConstants.RECIPIENT_ID_PARAMETER);
        LOG.debug("Recipient ID is {}", recipientId);

        if (recipientId != null) {
            for (RecipientDto recipient : allRecipients) {
                if (recipientId.equals(recipient.getAccountIdentifier())) {
                    selectedRecipient = recipient;
                    PrimeFaces.current().ajax().update("recipientInfoForm:recipientInfoDialog");
                    break;
                }
            }
        }
    }

    private void refreshComponentsForSend() {
        PrimeFaces.current().ajax().update("fileSubmitForm:uploadedFiles");
        PrimeFaces.current().ajax().update("fileSubmitForm:sendConfirmation");
        PrimeFaces.current().ajax().update("fileSubmitForm:fileSubmitButton");
    }

    public void onMessageChange() {
        LOG.debug("Message subject changed to {}", getMessageSubject());
    }

    /**
     * Getters and setters
     */
    public List<SelectItem> getAvailableMailboxes() {
        return availableMailboxes;
    }

    public void setAvailableMailboxes(List<SelectItem> availableMailboxes) {
        this.availableMailboxes = availableMailboxes;
    }

    public String getSelectedMailbox() {
        return selectedMailbox;
    }

    public void setSelectedMailbox(String selectedMailbox) {
        this.selectedMailbox = selectedMailbox;
    }

    public List<SelectItem> getUsesForSelectedMailbox() {
        return usesForSelectedMailbox;
    }

    public void setUsesForSelectedMailbox(List<SelectItem> usesForSelectedMailbox) {
        this.usesForSelectedMailbox = usesForSelectedMailbox;
    }

    public List<SelectItem> getAvailableYears() {
        return availableYears;
    }

    public void setAvailableYears(List<SelectItem> years) {
        this.availableYears = years;
    }

    public List<SelectItem> getAvailableQuarters() {
        return availableQuarters;
    }

    public void setAvailableQuarters(List<SelectItem> quarters) {
        this.availableQuarters = quarters;
    }

    public String getSelectedYear() {
        return selectedYear;
    }

    public void setSelectedYear(String selectedYear) {
        this.selectedYear = selectedYear;
    }

    public String getSelectedQuarter() {
        return selectedQuarter;
    }

    public void setSelectedQuarter(String selectedQuarter) {
        this.selectedQuarter = selectedQuarter;
    }

    public boolean isCalendarPanelVisible() {
        return calendarPanelVisible;
    }

    public void setCalendarPanelVisible(boolean calendarPanelVisible) {
        this.calendarPanelVisible = calendarPanelVisible;
    }

    public boolean isFileUploadPanelVisible() {
        return fileUploadPanelVisible;
    }

    public void setFileUploadPanelVisible(boolean fileUploadPanelVisible) {
        this.fileUploadPanelVisible = fileUploadPanelVisible;
    }

    public boolean isSendConfirmation() {
        return sendConfirmation;
    }

    public void setSendConfirmation(boolean sendConfirmation) {
        this.sendConfirmation = sendConfirmation;
    }

    public SendFileEntry getCurrentFile() {
        return currentFile;
    }

    public void setCurrentFile(SendFileEntry currentFile) {
        this.currentFile = currentFile;
    }

    public boolean isAllowedToSendFile() {
        return allowedToSendFile;
    }

    public void setAllowedToSendFile(boolean allowedToSend) {
        this.allowedToSendFile = allowedToSend;
    }

    public boolean isAllowedToSendMessage() {
        return (getMessageSubject() != null && getMessageSubject().length() > 0);
    }

    public UseDto getSelectedUse() {
        return selectedUse;
    }

    public void setSelectedUse(UseDto selectedUse) {
        this.selectedUse = selectedUse;
    }

    public boolean isMultiSendPanelVisible() {
        return multiSendPanelVisible;
    }

    public void setMultiSendPanelVisible(boolean multiSendPanelVisible) {
        this.multiSendPanelVisible = multiSendPanelVisible;
    }

    public DualListModel<RecipientDto> getRecipients() {
        return recipients;
    }

    public void setRecipients(DualListModel<RecipientDto> recipients) {
        this.recipients = recipients;
    }

    public String getRecipientSearchFilter() {
        return recipientSearchFilter;
    }

    public void setRecipientSearchFilter(String recipientSearchFilter) {
        this.recipientSearchFilter = recipientSearchFilter;
    }

    public RecipientDto getSelectedRecipient() {
        return selectedRecipient;
    }

    public void setSelectedRecipient(RecipientDto selectedRecipient) {
        this.selectedRecipient = selectedRecipient;
    }

    public boolean isSendMessagePanelVisible() {
        return sendMessagePanelVisible;
    }

    public void setSendMessagePanelVisible(boolean sendMessagePanelVisible) {
        this.sendMessagePanelVisible = sendMessagePanelVisible;
    }

    public List<SendFileEntry> getUploadedFiles() {
        return uploadedFiles;
    }

    public void setUploadedFiles(List<SendFileEntry> uploadedFiles) {
        this.uploadedFiles = uploadedFiles;
    }

    public String getMessageSubject() {
        return messageSubject;
    }

    public void setMessageSubject(String messageSubject) {
        this.messageSubject = messageSubject;
    }

    public String getMessageBody() {
        return messageBody;
    }

    public void setMessageBody(String messageBody) {
        this.messageBody = messageBody;
    }

    public boolean isSendConfirmationForMessage() {
        return sendConfirmationForMessage;
    }

    public void setSendConfirmationForMessage(boolean sendConfirmationForMessage) {
        this.sendConfirmationForMessage = sendConfirmationForMessage;
    }

}
