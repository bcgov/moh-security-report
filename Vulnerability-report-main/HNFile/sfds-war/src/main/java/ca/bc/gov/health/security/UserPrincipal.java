package ca.bc.gov.health.security;

import ca.bc.gov.health.sfds.files.Mailbox;
import ca.bc.gov.health.sfds.service.IAccountsFacade;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.SessionScoped;
import jakarta.inject.Named;
import jakarta.json.Json;
import jakarta.json.JsonArray;
import jakarta.json.JsonObject;
import jakarta.json.JsonReader;
import jakarta.json.JsonValue;
import java.io.Serializable;
import java.io.StringReader;
import java.security.Principal;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * SFDS Security Principal
 *
 * This is how it looks as of August 6, 2021:
 *
 * User Principal
 *      ├ Mailbox 1 (privileges)
 *      │  ├ Use 1.1
 *      │  ├ Use 1.1
 *      │  ...
 *      │  └ Use 1.M1
 *      ├ Mailbox 2 (privileges)
 *      │  ├ Use 2.1
 *      │  ├ Use 2.1
 *      │  ...
 *      │  └ Use 2.M2
 *      ...
 *      └ Mailbox N (privileges)
 *              ├ Use N.1
 *              ├ Use N.1
 *              ...
 *              └ Use N.MN
 *
 * Privileges are encoded as 1 for get, 2 for send and 4 for delete.
 * Therefore the resulting JSON will look like,
 * <p>
        [
            {
                "m": "mailbox1",
                "p": N1,
                "u": [
                    "use1",
                    "use2"
                ]
            },
            {
                "m": "mailbox2",
                "p": N2,
                "u": [
                    "use1",
                    "use2"
                ]
            },
            ...
        ]	
 * </p>
 *
 * @author vladimir.dovgalyuk
 *
 */
@Named("UserPrincipal")
@SessionScoped
public class UserPrincipal implements Principal, Serializable {

    private static final long serialVersionUID = -5539694028843145976L;
    private static final Logger LOG = LogManager.getLogger(UserPrincipal.class);

    private static final String JSON_OBJECT = "OBJECT";

    private static final String MAILBOX_ELEMENT = "m";
    private static final String USES_ELEMENT = "u";
    private static final String PERMISSIONS_ELEMENT = "p";

    private String name;
    private Set<String> roles = new HashSet<>();
    private String rawMailboxes; // Serialized JSON array of mailboxes
    private List<Mailbox> mailboxes;

    @EJB
    private IAccountsFacade accountsFacade;

    public UserPrincipal() {
        this.name = "";
    }

    private JsonArray getJsonMailboxes() {
        JsonArray jsonMailboxes = null;
        if (rawMailboxes != null && !rawMailboxes.isEmpty()) {
            try (JsonReader jsonReader = Json.createReader(new StringReader(rawMailboxes))) {
                jsonMailboxes = jsonReader.readArray();
            }
        }
        return jsonMailboxes;
    }

    private void parseMailboxes() {
        mailboxes = new ArrayList<>();
        JsonArray jsonMailboxes = getJsonMailboxes();
        if (jsonMailboxes != null) {
            for (JsonValue jsonMailbox : jsonMailboxes) {
                Mailbox mailbox = new Mailbox();
                if (JSON_OBJECT.equalsIgnoreCase(jsonMailbox.getValueType().name())) {
                    JsonObject jsonMailboxObj = jsonMailbox.asJsonObject();
                    mailbox.setName(jsonMailboxObj.getString(MAILBOX_ELEMENT));
                    mailbox.setPrivileges(
                            transformPermissions(jsonMailboxObj.getString(PERMISSIONS_ELEMENT)));
                    mailbox.setStrPrivileges(jsonMailboxObj.getString(PERMISSIONS_ELEMENT));
                    JsonArray jsonMailboxUses = jsonMailboxObj.getJsonArray(USES_ELEMENT);
                    if (jsonMailboxUses != null) {
                        mailbox.setUses(new ArrayList<>());
                        for (JsonValue jsonUse : jsonMailboxUses) {
                            String use = jsonUse.toString().replaceAll("\"", "");
                            mailbox.getUses().add(use);
                        }
                    }
                    mailboxes.add(mailbox);
                }
            }
        }
    }

    public List<String> getUsesAsList() {
        if (mailboxes == null) {
            parseMailboxes();
        }

        List<String> uniqueUses = new ArrayList<>();
        mailboxes.forEach(mailbox -> uniqueUses.addAll(mailbox.getUses()));

        return uniqueUses;
    }

    public String getUserInfo() {
        StringBuilder sb = new StringBuilder("Username: ").append(name);
        sb.append("\nRoles: [");
        if (!roles.isEmpty()) {
            roles.forEach(role -> sb.append(role).append(", "));
            sb.delete(sb.lastIndexOf(","), sb.lastIndexOf(",") + 1);
            sb.delete(sb.lastIndexOf(" "), sb.lastIndexOf(" ") + 1);
        }
        sb.append("]");
        sb.append("\nMailboxes:\n");
        for (Mailbox mailbox : getMailboxes()) {
            sb.append("\t").append(mailbox.getName());
            sb.append("\n\t\tPermission: ").append(mailbox.getStrPrivileges());
            sb.append("\n\t\tUses: [");
            mailbox.getUses().forEach(use -> sb.append(use).append(", "));
            sb.delete(sb.lastIndexOf(","), sb.lastIndexOf(",") + 1);
            sb.delete(sb.lastIndexOf(" "), sb.lastIndexOf(" ") + 1);
            sb.append("]").append("\n");
        }
        return sb.toString();
    }

    public List<Mailbox> getMailboxes() {
        if (mailboxes == null) {
            parseMailboxes();
        }

        for (Mailbox mailbox : mailboxes) {
            if (mailbox.getDescription() == null) {
                mailbox.setDescription(accountsFacade.getDescription(mailbox.getName()));
            }
        }

        /* Mailbox as assigned from Keycloak User Management Console may have been deleted and therefore null */
        return mailboxes.stream()
                .filter(mailbox -> (mailbox.getName() != null && mailbox.getDescription() != null))
                .collect(Collectors.toList());
    }

    private static byte transformPermissions(String permissions) {
        byte result = 0;
        String[] p = permissions.split("-");
        if ((p != null) && (p.length > 0)) {
            for (int i = 0; i < p.length; i++) {
                if ("get".equalsIgnoreCase(p[i])) {
                    result = (byte) (result | 1);
                }
                if ("send".equalsIgnoreCase(p[i])) {
                    result = (byte) (result | 2);
                }
                if ("delete".equalsIgnoreCase(p[i])) {
                    result = (byte) (result | 4);
                }
            }
        }
        return result;
    }

    @Override
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Set<String> getRoles() {
        return roles;
    }

    public void setRoles(Set<String> roles) {
        this.roles = roles;
    }

    public String getRawMailboxes() {
        return rawMailboxes;
    }

    public void setRawMailboxes(String rawMailboxes) {
        this.rawMailboxes = rawMailboxes;
    }

    public void setMailboxes(List<Mailbox> mailboxes) {
        this.mailboxes = mailboxes;
    }
}
