package ca.bc.gov.health.sfds.beans.files;

import ca.bc.gov.health.security.UserPrincipal;
import ca.bc.gov.health.sfds.files.FileDescription;
import ca.bc.gov.health.sfds.files.FileDescriptionGroup;
import ca.bc.gov.health.sfds.files.Mailbox;
import ca.bc.gov.health.sfds.service.IFilesFacade;
import ca.bc.gov.health.sfds.util.SFDSUtils;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.primefaces.PrimeFaces;

/**
 * Backing bean for Inbox page
 *
 * @author vladimir.dovgalyuk
 *
 */
@ViewScoped
@Named("InboxBean")
public class InboxBean implements Serializable {

    /**
     * Determines if a deserialized file is compatible with this class.
     */
    private static final long serialVersionUID = -978880145138754536L;

    private static final Logger LOG = LogManager.getLogger(InboxBean.class);

    private static final String FILES_FORM = "filesForm";

    private List<SelectItem> availableMailboxes;
    private String selectedMailbox = "";
    private List<FileDescription> files;
    private List<FileDescriptionGroup> groups;

    private FileDescription currentFile;
    private boolean deleteEnabled;

    @Inject
    private UserPrincipal userPrincipal;

    @EJB
    private IFilesFacade filesFacade;

    /**
     * Initialize the page
     */
    @PostConstruct
    public void init() {
        LOG.debug("Initializing InboxBean");

        availableMailboxes = SFDSUtils.getListOfMailboxes(userPrincipal.getMailboxes(), false, true);

        setFiles(new ArrayList<>());
        setGroups(new ArrayList<>());

        LOG.debug("Initialization completed");
    }

    /**
     * Handler for changing mailbox selection
     */
    public void onMailboxChange() {
        if (getSelectedMailbox() != null) {
            LOG.debug("Mailbox {} selected", selectedMailbox);
            try {

                // Looking for the selected mailbox in the user session
                for (Mailbox m : userPrincipal.getMailboxes()) {
                    if (m.getName().equals(getSelectedMailbox())) { // Mailbox found
                        LOG.debug(m);
                        groups = filesFacade.getGroupedFilesFromMailbox(m);
                        LOG.debug("File groups retrieved, totally {} group(s)", groups.size());
                        deleteEnabled = m.hasDelete(); // Check if a user has 'delete' privilege
                    }
                }
            } catch (Exception e) {
                LOG.error("Error retrieving files from mailbox", e.fillInStackTrace());
                SFDSUtils.addErrorMessage(
                        null,
                        SFDSUtils.getBundle().getString("inbox.getMailboxFiles.exception"),
                        e.getMessage());
            }
        } else {
            setGroups(new ArrayList<>());
        }
    }

    /**
     * Delete displayed file
     */
    public void deleteFile() {
        boolean result = true;
        LOG.info("Deleting file {}", currentFile.getFileName());
        for (Mailbox m : userPrincipal.getMailboxes()) {
            if (m.getName().equals(getSelectedMailbox())) {
                LOG.debug(m);
                result = filesFacade.deleteFileFromMailbox(m, currentFile, userPrincipal.getName());
                if (result) {
                    groups = filesFacade.getGroupedFilesFromMailbox(m);
                    PrimeFaces.current().ajax().update(FILES_FORM);
                    SFDSUtils.addInfoMessage(FILES_FORM,
                            SFDSUtils.getBundle().getString("inbox.file.delete.success"),
                            currentFile.getFileName());
                    LOG.info("File deleted");
                } else {
                    SFDSUtils.addErrorMessage(FILES_FORM,
                            SFDSUtils.getBundle().getString("inbox.file.delete.error"),
                            currentFile.getFileName());
                    LOG.warn("File NOT deleted");
                }
                break;
            }
        }

    }

    /**
     * Getters and setters
     */
    public List<FileDescription> getFiles() {
        return files;
    }

    public void setFiles(List<FileDescription> files) {
        this.files = files;
    }

    public List<SelectItem> getAvailableMailboxes() {
        return availableMailboxes;
    }

    public void setAvailableMailboxes(List<SelectItem> availableMailboxes) {
        this.availableMailboxes = availableMailboxes;
    }

    public String getSelectedMailbox() {
        return selectedMailbox;
    }

    public void setSelectedMailbox(String selectedMailbox) {
        this.selectedMailbox = selectedMailbox;
    }

    public FileDescription getCurrentFile() {
        return currentFile;
    }

    public void setCurrentFile(FileDescription currentFile) {
        this.currentFile = currentFile;
    }

    public List<FileDescriptionGroup> getGroups() {
        return groups;
    }

    public void setGroups(List<FileDescriptionGroup> groups) {
        this.groups = groups;
    }

    public boolean isDeleteEnabled() {
        return deleteEnabled;
    }

    public void setDeleteEnabled(boolean deleteEnabled) {
        this.deleteEnabled = deleteEnabled;
    }

}
