package ca.bc.gov.health.sfds.service.helper;

import ca.bc.gov.health.sfds.files.ServerFileEntry;
import ca.bc.gov.health.sfds.util.SFDSConstants;
import com.jcraft.jsch.ChannelSftp.LsEntry;
import java.util.List;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.junit.BeforeClass;
import org.junit.Test;

public class SftpHelperTest {

    private static final Logger LOG = LogManager.getLogger(SftpHelperTest.class);

    @BeforeClass
    public static void setUpClass() {
        System.setProperty("java.naming.factory.initial", "ca.bc.gov.health.sfds.service.helper.ContextFactory");
    }

    @Test
    public void testConnectivity() {

        LOG.debug("\n===== Testing SFTP connectivity with parameters defined in the local instance of glassfish-resources.xml");
        try {
            List<LsEntry> mailboxes = SftpHelper.listDirectoryEntries(SFDSConstants.SFTP_PATH_TO_MAILBOXES);
            assert (mailboxes.size() > 0);
            for (LsEntry o : mailboxes) {
                LOG.debug(o.toString());
            }
        } catch (Exception e) {
            LOG.error("General error", e.fillInStackTrace());
        }
        LOG.debug("\n===== Test completed \n");
    }

    @Test
    public void checkMailboxExists() {
        LOG.debug("\n===== Testing mailbox existence detector");
        try {
            List<LsEntry> mailboxes = SftpHelper.listDirectoryEntries(SFDSConstants.SFTP_PATH_TO_MAILBOXES);
            assert (mailboxes.size() > 0);
            boolean result = SftpHelper.fileExists(SFDSConstants.SFTP_PATH_TO_MAILBOXES, mailboxes.get(0).getFilename());
            assert (result);
            result = SftpHelper.fileExists(SFDSConstants.SFTP_PATH_TO_MAILBOXES, "complete_gibberish");
            assert (!result);
        } catch (Exception e) {
            LOG.error("General error", e.fillInStackTrace());
        }
        LOG.debug("\n===== Test completed \n");
    }

    @Test
    public void listFilesInMailbox() {
        LOG.debug("\n===== Testing file listing");
        try {
            List<LsEntry> mailboxes = SftpHelper.listDirectoryEntries(SFDSConstants.SFTP_PATH_TO_MAILBOXES);
            assert (mailboxes.size() > 0);
            for (LsEntry entry : mailboxes) {
                List<ServerFileEntry> content = SftpHelper
                        .listFileEntries(SFDSConstants.SFTP_PATH_TO_MAILBOXES + SFDSConstants.SFTP_PATH_DELIMITER
                                + entry.getFilename() + SFDSConstants.SFTP_PATH_DELIMITER + SFDSConstants.SFTP_PATH_WITHIN_MAILBOX);
                if (content.size() > 0) {
                    LOG.debug("Mailbox {} selected", entry.getFilename());
                    for (ServerFileEntry files : content) {
                        LOG.debug("\t{} : size {}", files.getName(), files.getSize());
                    }
                    break;
                }
            }

        } catch (Exception e) {
            LOG.error("General error", e.fillInStackTrace());
        }

        LOG.debug("\n===== Test completed \n");
    }

}
