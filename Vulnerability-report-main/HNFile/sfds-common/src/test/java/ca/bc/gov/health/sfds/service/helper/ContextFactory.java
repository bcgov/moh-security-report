package ca.bc.gov.health.sfds.service.helper;

import ca.bc.gov.health.sfds.util.SFDSConstants;
import java.io.File;
import java.util.Hashtable;
import java.util.Properties;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.naming.spi.InitialContextFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.mockito.Mockito;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

public class ContextFactory implements InitialContextFactory {

    private static final Logger LOG = LogManager.getLogger(ContextFactory.class);

    private static InitialContext mockInitialContext;

    @Override
    public Context getInitialContext(Hashtable<?, ?> environment) throws NamingException {
        if (mockInitialContext == null) {
            mockInitialContext = Mockito.mock(InitialContext.class);
        }
        Mockito.when(mockInitialContext.lookup(SFDSConstants.SFTP_RESOURCE_JNDI_NAME)).thenReturn(getSftpSettings());
        return mockInitialContext;
    }

    private static Properties getSftpSettings() {
        Properties result = new Properties();
        File directory = new File("./");
        String path = directory.getAbsolutePath();

        path = path.replaceAll("sfds-([a-z])*\\\\\\.", "sfds-ear\\\\src\\\\main\\\\application\\\\META-INF\\\\glassfish-resources.xml");

        File resources = new File(path);
        try {
            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
            factory.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);

            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.parse(resources);
            document.getDocumentElement().normalize();
            NodeList nList = document.getElementsByTagName("custom-resource");
            for (int i = 0; i < nList.getLength(); i++) {
                Node node = nList.item(i);
                String customResourceName = ((Element) node).getAttribute("jndi-name");

                if ("sfds/sftp_properties".equals(customResourceName)) {
                    NodeList children = node.getChildNodes();
                    for (int j = 0; j < children.getLength(); j++) {
                        if (children.item(j) instanceof Element) {
                            Element el = (Element) children.item(j);
                            if ("property".equals(el.getTagName())) {
                                result.put(el.getAttribute("name"), el.getAttribute("value"));
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            LOG.error("Error when getting SFTP properties", e.fillInStackTrace());
        }
        return result;
    }
}
