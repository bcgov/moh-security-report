package ca.bc.gov.health.sfds.service.helper;

import ca.bc.gov.health.sfds.exception.SFDSException;
import ca.bc.gov.health.sfds.files.ServerFileEntry;
import ca.bc.gov.health.sfds.util.SFDSConstants;
import com.jcraft.jsch.ChannelSftp.LsEntry;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Taken from package ca.bc.gov.health.hscis.service.helper;
 *
 * @author vladimir.dovgalyuk
 *
 */
public class SftpHelper {

    private static final Logger LOG = LogManager.getLogger(SftpHelper.class);

    /**
     * Lists all directory entries on the given path, . and .. not included
     *
     * @param remotePath path to files (NOTE: Unix style path i.e.: "/xxx/yyy". Do not include trailing '/').
     * @return list of LsEntry for directories on the path
     * @throws SFDSException
     */
    public static List<LsEntry> listDirectoryEntries(String remotePath) throws SFDSException {
        try (ChannelSftp channel = new ChannelSftp()) {
            return channel.lsDir(remotePath);
        }
    }

    /**
     * Lists all regular files on the given path
     *
     * @param remotePath path to files (NOTE: Unix style path i.e.: "/xxx/yyy". Do not include trailing '/').
     * @return list of ServerFileEntry objects for files on the path
     * @throws SFDSException
     */
    public static List<ServerFileEntry> listFileEntries(String remotePath) throws SFDSException {
        try (ChannelSftp channel = new ChannelSftp()) {
            List<LsEntry> entries = channel.lsFile(remotePath);
            List<ServerFileEntry> result = new ArrayList<>();
            for (LsEntry entry : entries) {
                result.add(new ServerFileEntry(entry));
            }
            return result;
        }
    }

    /**
     * Checks if the directory entry exists on the given path
     *
     * @param remotePath path to parent directory
     * @param fileName directory name
     * @return true if directory exists on the path, false otherwise
     * @throws SFDSException
     */
    public static boolean fileExists(String remotePath, String fileName) throws SFDSException {
        try (ChannelSftp channel = new ChannelSftp()) {
            return channel.fileExists(remotePath, fileName);
        }
    }

    /**
     * Uploads file to the given path
     *
     * @param file content of the file
     * @param filename name of the file
     * @param remotePath path to file (NOTE: Unix style path i.e.: "/xxx/yyy". Do not include trailing '/')
     * @throws SFDSException
     */
    public static void uploadFile(InputStream file, String filename, String remotePath) throws SFDSException {
        LOG.debug("Uploading file {} to {}", filename, remotePath);
        String fullFilename = String.join(SFDSConstants.SFTP_PATH_DELIMITER, remotePath, filename);
        try (ChannelSftp channel = new ChannelSftp()) {
            channel.put(file, fullFilename);
        } catch (Exception e) {
            throw new SFDSException(e.getMessage(), e);
        } finally {
            LOG.debug("Upload completed");
        }
    }

    /**
     * Downloads file content from the given path
     *
     * @param filename name of the file
     * @param remotePath path to write (NOTE: Unix style path i.e.: "/xxx/yyy". Do not include trailing '/')
     * @return file content
     * @throws SFDSException
     */
    public static byte[] downloadFile(String filename, String remotePath) throws SFDSException {
        LOG.debug("Downloading file {} from {}", filename, remotePath);
        String fullFilename = String.join(SFDSConstants.SFTP_PATH_DELIMITER, remotePath, filename);
        try (ChannelSftp channel = new ChannelSftp()) {
            ByteArrayOutputStream os = new ByteArrayOutputStream();

            channel.get(fullFilename, os);

            return os.toByteArray();

        } catch (Exception e) {
            throw new SFDSException(e.getMessage(), e);
        } finally {
            LOG.debug("Download completed");
        }
    }

    /**
     * Downloads content of multiple files located at a given path
     *
     * @param filenames name of the file
     * @param remotePath path to write (NOTE: Unix style path i.e.: "/xxx/yyy". Do not include trailing '/')
     * @return ZIP archive with files contents
     * @throws SFDSException
     */
    public static byte[] downloadFiles(List<String> filenames, String remotePath) throws SFDSException {
        LOG.debug("Downloading files from {}", remotePath);
        try (ChannelSftp channel = new ChannelSftp();
                ByteArrayOutputStream bos = new ByteArrayOutputStream();
                ZipOutputStream zipos = new ZipOutputStream(bos)) {
            zipos.setLevel(0);

            for (String filename : filenames) {
                String fullFilename = String.join("/", remotePath, filename);

                ZipEntry zipEntry = new ZipEntry(filename);
                zipos.putNextEntry(zipEntry);
                try (InputStream is = channel.get(fullFilename)) {
                    byte[] bytes = new byte[1024];
                    int length;
                    while ((length = is.read(bytes)) >= 0) {
                        zipos.write(bytes, 0, length);
                    }
                }
            }

            zipos.closeEntry();
            zipos.finish();

            return bos.toByteArray();
        } catch (Exception e) {
            throw new SFDSException(e.getMessage(), e);
        } finally {
            LOG.debug("Download completed");
        }
    }

    /**
     * Deletes specified file from the provided path
     *
     * @param filename list of file name
     * @param remotePath path to write (NOTE: Unix style path i.e.: "/xxx/yyy". Do not include trailing '/')
     * @throws SFDSException
     */
    public static void deleteFile(String filename, String remotePath) throws SFDSException {
        LOG.debug("Deleting file {} from {}", filename, remotePath);
        try (ChannelSftp channel = new ChannelSftp()) {
            String fullFilename = String.join(SFDSConstants.SFTP_PATH_DELIMITER, remotePath, filename);
            channel.delete(fullFilename);
            LOG.debug("File has been deleted");
        } catch (Exception e) {
            throw new SFDSException(e.getMessage(), e);
        }
    }

    /**
     * Returns true if a file should be included in the list. Only files with S_IFDIR, S_IFLNK, S_IFBLK at false are
     * returned.
     *
     * @param e File metadata from system (LsEntry)
     * @return true if a file should be included in the list
     */
    public static boolean isListedFile(LsEntry e) {
        return !e.getAttrs().isDir() && !e.getAttrs().isLink() && !e.getAttrs().isBlk();
    }

    /**
     * Retrieves file modified date/time
     *
     * @param e File metadata from system (LsEntry)
     * @return LocalDateTime
     */
    public static LocalDateTime getModifiedTime(LsEntry e) {
        return LocalDateTime.ofInstant(Instant.ofEpochSecond(e.getAttrs().getMTime()), ZoneId.systemDefault());
    }

    /**
     * Return size of the file
     *
     * @param e File metadata from system (LsEntry)
     * @return
     */
    public static Long getFileSize(LsEntry e) {
        return e.getAttrs().getSize();
    }

    /**
     * Returns short filename of the file.
     *
     * @param f File metadata from system (LsEntry)
     * @return File name
     */
    public static String getFilename(LsEntry f) {
        return f.getFilename();
    }

}
