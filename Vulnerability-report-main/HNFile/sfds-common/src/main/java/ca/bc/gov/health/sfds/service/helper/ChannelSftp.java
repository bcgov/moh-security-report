package ca.bc.gov.health.sfds.service.helper;

import ca.bc.gov.health.sfds.exception.SFDSException;
import ca.bc.gov.health.sfds.util.SFDSConstants;
import com.jcraft.jsch.ChannelSftp.LsEntry;
import com.jcraft.jsch.ChannelSftp.LsEntrySelector;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import com.jcraft.jsch.SftpException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import java.util.Vector;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 * Stolen from
 * https://subversion.hlth.gov.bc.ca/svn/HSCIS/branches/jogs-hscis/hscis/hscis-ejb/src/main/java/ca/bc/gov/health/hscis/service/helper/HscisChannelSftp.java
 *
 * @author vladimir.dovgalyuk
 *
 */
public class ChannelSftp implements AutoCloseable {

    private com.jcraft.jsch.ChannelSftp sftpChannel = null;
    private static final Logger logger = LogManager.getLogger(ChannelSftp.class);

    private Session session = null;

    private int port = 22;
    private String hostname;
    private String username;
    private String privKeyFile;
    private String knownHostsFile;

    public ChannelSftp() throws SFDSException {
        init();
        connect();
    }

    private void init() throws SFDSException {
        try {
            Properties props = (Properties) new InitialContext().lookup(SFDSConstants.SFTP_RESOURCE_JNDI_NAME);
            if (props != null) {
                hostname = props.getProperty("hostname");
                username = props.getProperty("username");
                privKeyFile = props.getProperty("privKeyFile");
                knownHostsFile = props.getProperty("knownHostsFile");
                if (props.getProperty("port") != null) {
                    port = Integer.valueOf(props.getProperty("port"));
                }
            } else {
                throw new SFDSException("SFTP connection properties are not provided");
            }
        } catch (NamingException ex) {
            throw new SFDSException("JNDI " + SFDSConstants.SFTP_RESOURCE_JNDI_NAME + " not found.");
        }
    }

    /**
     * Connects to the SFTP server
     *
     * @throws SFDSException
     */
    public void connect() throws SFDSException {
        try {
            JSch jsch = new JSch();
            jsch.addIdentity(privKeyFile);
            session = jsch.getSession(username, hostname, port);

            if (knownHostsFile != null && !knownHostsFile.isEmpty()) {
                jsch.setKnownHosts(knownHostsFile);
            } else {
                throw new SFDSException("Cannot find the known host file");
            }
            // SFTP server still proposes using ssh-rsa
            session.setConfig("server_host_key", session.getConfig("server_host_key") + ",ssh-rsa");
            session.setConfig("PubkeyAcceptedAlgorithms", session.getConfig("PubkeyAcceptedAlgorithms") + ",ssh-rsa");
            session.connect();
            sftpChannel = (com.jcraft.jsch.ChannelSftp) session.openChannel("sftp");
            sftpChannel.connect();

            if (!sftpChannel.isConnected()) {
                throw new SFDSException("Cannot connect to sftp using provided private key");
            } else {
                logger.debug("Connected to SFTP server");
            }

        } catch (JSchException ex) {
            logger.error(ex.getMessage(), ex.fillInStackTrace());
            throw new SFDSException(ex.getMessage());
        }
    }

    /**
     * Return true if connected to the SFTP server
     *
     * @throws SFDSException
     */
    public boolean isConnected() {
        return (sftpChannel != null && sftpChannel.isConnected());
    }

    /**
     * Disconnects from the SFTP server
     *
     * @throws SFDSException
     */
    public void disconnect() throws SFDSException {
        try {
            sftpChannel.disconnect();
            session.disconnect();
            logger.debug("Disconnected from SFTP server");
        } catch (Exception ex) {
            throw new SFDSException(ex.getMessage());
        }
    }

    @Override
    public void close() throws SFDSException {
        if (isConnected()) {
            disconnect();
        }
    }

    @SuppressWarnings("unchecked")
    public List<LsEntry> ls(String remotePath) throws SFDSException {
        try {
            logger.debug("ls: {}", remotePath);
            return sftpChannel.ls(remotePath);
        } catch (SftpException e) {
            throw new SFDSException("Exception in ChannelSftp.ls(...)", e);
        }
    }

    /**
     * Lists custom directories on the provided path, '.' and '..' are not included.
     *
     * @param remotePath Path on the server
     * @return List of directories meta info objects
     * @throws SFDSException
     */
    public List<LsEntry> lsDir(String remotePath) throws SFDSException {
        try {
            logger.debug("lsDir: {}", remotePath);
            List<LsEntry> list = new ArrayList<>();
    
            Vector<LsEntry> entries = sftpChannel.ls(remotePath);
            for (LsEntry entry : entries) {
                if (entry.getAttrs().isDir() && !".".equals(entry.getFilename()) && !"..".equals(entry.getFilename())) {
                    list.add(entry);
                }
            }
    
            return list;
        } catch (SftpException e) {
            throw new SFDSException("Exception in ChannelSftp.lsDir(...)", e);
        }
    }

    /**
     * Lists standard files on the provided path
     *
     * @param remotePath Path on the server
     * @return List of files meta info objects
     * @throws SFDSException
     */
    public List<LsEntry> lsFile(String remotePath) throws SFDSException {
        try {
            logger.debug("lsFile: {}", remotePath);
            List<LsEntry> list = new ArrayList<>();

            sftpChannel.ls(remotePath, (LsEntry entry) -> {
                if (entry.getAttrs().isReg()) {
                    list.add(entry);
                }
                return LsEntrySelector.CONTINUE;
            });

            return list;
        } catch (SftpException e) {
            throw new SFDSException("Exception in ChannelSftp.lsFile(...)", e);
        }
    }

    /**
     * Checks if the directory entry exists on the given path
     *
     * @param remotePath Path on the server
     * @param fileName Directory name
     * @return True if directory exists, false otherwise
     * @throws SFDSException
     */
    public boolean fileExists(String remotePath, String fileName) throws SFDSException {
        try {
            logger.debug("Check if file {} exists on the path {}", fileName, remotePath);
            AtomicBoolean result = new AtomicBoolean(false);

            sftpChannel.ls(remotePath, (LsEntry entry) -> {
                if (fileName.equals(entry.getFilename()) && entry.getAttrs().isDir()) {
                    result.set(true);
                    return LsEntrySelector.CONTINUE;
                }
                return LsEntrySelector.CONTINUE;
            });

            return result.get();
        } catch (SftpException e) {
            throw new SFDSException("Exception in ChannelSftp.fileExists(...)", e);
        }
    }

    public void put(InputStream file, String fullFilename) throws SFDSException {
        try {
            logger.debug("upload: {}", fullFilename);
            sftpChannel.put(file, fullFilename);
        } catch (SftpException e) {
            throw new SFDSException("Exception while uploading file in ChannelSftp", e);
        }
    }

    public InputStream get(String fullFilename) throws SFDSException {
        try {
            logger.debug("download: {}", fullFilename);
            return sftpChannel.get(fullFilename);
        } catch (SftpException e) {
            throw new SFDSException("Exception while downloading file in ChannelSftp", e);
        }
    }

    public void get(String fullFilename, OutputStream os) throws SFDSException {
        try {
            logger.debug("download: {}", fullFilename);
            sftpChannel.get(fullFilename, os);
        } catch (SftpException e) {
            throw new SFDSException("Exception while downloading file content in ChannelSftp", e);
        }
    }

    public void delete(String fullFilename) throws SFDSException {
        try {
            logger.debug("delete: {}", fullFilename);
            sftpChannel.rm(fullFilename);
        } catch (SftpException e) {
            throw new SFDSException("Exception while deleting file in ChannelSftp", e);
        }
    }

}
