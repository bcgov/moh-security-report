package ca.bc.gov.health.sfds.files;

import ca.bc.gov.health.sfds.util.SFDSConstants;
import java.io.Serializable;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Date;

/**
 * Auxiliary POJO for the Send File page data table
 *
 * @author vladimir.dovgalyuk
 *
 */
public class SendFileEntry implements Serializable {

    private static final long serialVersionUID = -8380116280583704333L;

    private long size;
    private long timeElapsed;
    private long uploadTimeElapsed;
    private String name;
    private LocalDateTime submitted;
    private SFDSConstants.FileSubmitStatuses status;
    private int id;
    private byte[] content;

    public SendFileEntry(int id) {
        this.id = id;
    }

    /**
     * File size in bytes
     *
     * @return Number of bytes in file
     */
    public long getSize() {
        return size;
    }

    public void setSize(long size) {
        this.size = size;
    }

    public String getSizeInKb() {
        long size = this.getSize();
        size = (size + 512) / 1024;
        if (size == 0) {
            size = 1;
        }
        return Long.toString(size) + "K";
    }

    /**
     * Time spent on file upload
     *
     * @return Time spent on file upload expressed in milliseconds
     */
    public long getTimeElapsed() {
        return timeElapsed;
    }

    public void setTimeElapsed(long timeElapsed) {
        this.timeElapsed = timeElapsed;
    }

    public String getSpeed() {
        String result = "";
        if (getTimeElapsed() > 0) {
            double f = (1000.0 * getSize()) / getTimeElapsed();
            f = (f + 512) / 1024;
            result = Long.toString(Math.round(f)) + " KB/sec";
        }
        return result;
    }

    public String getUploadSpeed() {
        String result = "";
        if (getUploadTimeElapsed() > 0) {
            double f = (1000.0 * getSize()) / getUploadTimeElapsed();
            f = (f + 512) / 1024;
            result = Long.toString(Math.round(f)) + " KB/sec";
        }
        return result;
    }

    /**
     * File physical name
     *
     * @return File's name
     */
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    /**
     * Date and time the file was submitted
     *
     * @return Date the file was submitted
     */
    public LocalDateTime getSubmitted() {
        return submitted;
    }

    public Date getSubmittedDate() {
        return Date.from(this.getSubmitted().atZone(ZoneId.systemDefault()).toInstant());
    }

    public void setSubmitted(LocalDateTime submitted) {
        this.submitted = submitted;
    }

    public String getSubmittedStr() {
        if (submitted == null) {
            return "";
        } else {
            return submitted.format(DateTimeFormatter.ofPattern("dd/MM/yyyy@h:mm"));
        }
    }

    /**
     * Internal ID
     *
     * @return Internal ID
     */
    public int getId() {
        return id;
    }

    /**
     * File status
     *
     * @return FileSubmitStatuses enumeration
     */
    public SFDSConstants.FileSubmitStatuses getStatus() {
        return status;
    }

    public void setStatus(SFDSConstants.FileSubmitStatuses status) {
        this.status = status;
    }

    public byte[] getContent() {
        return content;
    }

    public void setContent(byte[] content) {
        this.content = content;
    }

    public long getUploadTimeElapsed() {
        return uploadTimeElapsed;
    }

    public void setUploadTimeElapsed(long uploadTimeElapsed) {
        this.uploadTimeElapsed = uploadTimeElapsed;
    }

}
