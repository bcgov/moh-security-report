package ca.bc.gov.health.sfds.util;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.stream.Stream;

/**
 * @author vladimir.dovgalyuk
 */
public final class SFDSConstants {

    private SFDSConstants() {
    }

    public static final String FDS_CONTEXT_ID = "FDS";
    public static final String ALL_BULLETINS = "All";
    public static final String BULLETIN_DPI_TYPE = "CXT";
    public static final String BULLETIN_DATA_SOURCE = "API";
    public static final String BULLETIN_DPP_TYPE = "DBT";

    // Keycloak claim keys
    public static final int MAX_NUMBER_OF_CLAIM_KEYS = 5; // Maximum number of sfds_auth_* attributes
    public static final String USES_CLAIM_KEY = "sfds_auth";

    // Pseudo-id values for Manage Bulletins page
    public static final String BULLETINS_INTERNAL_ATTRIBUTE = "internal";
    public static final String BULLETIN_USES_ID = "bulletinUse";
    public static final String BULLETIN_EFFECTIVE_DATE_ID = "bulletinEffectiveDate";
    public static final String BULLETIN_END_DATE_ID = "bulletinExpiresDate";
    public static final String BULLETIN_SUMMARY_ID = "bulletinSummary";
    public static final String BULLETIN_CONTENT_ID = "bulletinTrueContent";

    // SFTP Connector
    public static final String SFTP_RESOURCE_JNDI_NAME = "java:app/sfds/sftp_properties";
    public static final String SFTP_PATH_TO_MAILBOXES = "/hnet/clients";
    public static final String SFTP_PATH_WITHIN_MAILBOX = "toclient";
    public static final String SFTP_PATH_DELIMITER = "/";

    public static final String FILE_WITH_NO_METADATA = "Miscellaneous Files";

    public static final String FILE_REAL_NAME_PARAMETER = "filePhysicalName";
    public static final String FILE_SAVE_NAME_PARAMETER = "fileSaveName";
    public static final String MAILBOX_NAME_PARAMETER = "mailboxName";
    public static final String DATA_RECIPIENT_ID_PARAMETER = "dataRecipientId";
    public static final String DATA_RECIPIENT_LOCK_SEQ_NUM_PARAMETER = "dataRecipientLockSeqNum";
    public static final String RECIPIENT_ID_PARAMETER = "recipientId";

    public static final String HSCIS = "hscis"; // Health Sector Compensation Information System - special use

    public static final String TEXT_MESSAGE_FILE_NAME = "TEXT MESSAGE"; // Value of DATA_TRANSPORT_TRANSACTIONS.FILENAME for messages
    public static final String TEXT_MESSAGE_BUSINESS_FILE_NAME = "TextMessage"; // DATA_RECIPIENTS.BUSINESS_FILENAME for messages
    public static final String EOL = Character.toString((char) 10) + Character.toString((char) 13);

    // CORS Headers
    public static final String CORS_HEADERS_ORIGIN = "Access-Control-Allow-Origin";
    public static final String CORS_HEADERS_METHODS = "Access-Control-Allow-Methods";
    public static final String CORS_HEADERS_HEADERS = "Access-Control-Allow-Headers";

    /**
     * Time constant used in the parcel management package: g_lo_date DATE := TO_DATE('01-JAN-1900','DD-MON-YYYY');
     */
    private static Date lowDate = null;

    public static Date getLowDate() {
        if (lowDate == null) {
            Calendar calendar = new GregorianCalendar(1900, 0, 1, 0, 0);
            lowDate = calendar.getTime();
        }
        return lowDate;
    }

    /**
     * Time constant used in the parcel management package: g_hi_date DATE := TO_DATE('31-DEC-3999','DD-MON-YYYY');
     */
    private static Date highDate = null;

    public static Date getHighDate() {
        if (highDate == null) {
            Calendar calendar = new GregorianCalendar(3999, 11, 31, 0, 0);
            highDate = calendar.getTime();
        }
        return highDate;
    }

    /**
     * File statuses
     */
    public enum FileStatuses {
        DOWNLOADED("DOWNLOADED", "Received"),
        DELIVERED("DELIVERED", "New"),
        PENDING_DELETE("PENDING DELETE", "Deleted"),
        PENDING_DELIVERY("PENDING DELIVERY", "Pending delivery");

        private FileStatuses(String databaseStatus, String description) {
            this.databaseStatus = databaseStatus;
            this.description = description;
        }

        public static String getDescriptionByDatabaseStatus(String status) {
            FileStatuses fileStatus = Stream.of(FileStatuses.values()).filter(d -> d.getDatabaseStatus().equals(status)).findFirst().orElse(null);
            return (fileStatus == null ? "N/A" : fileStatus.getDescription());
        }

        public static boolean isNew(String description) {
            FileStatuses fileStatus = Stream.of(FileStatuses.values()).filter(d -> d.getDescription().equals(description)).findFirst().orElse(null);
            if (fileStatus == null) {
                return false;
            } else {
                return (fileStatus.equals(DELIVERED));
            }
        }

        public String getDescription() {
            return description;
        }

        public String getDatabaseStatus() {
            return databaseStatus;
        }

        private final String databaseStatus;
        private final String description;

    }

    /**
     *
     * File statuses to be displayed on the File Send page
     *
     */
    public enum FileSubmitStatuses {
        UPLOAD_IN_PROGRESS("Upload in Progress", "IN_PROGRESS"),
        UPLOADED("Uploaded", "UPLOADED"),
        SENDING_IN_PROGRESS("Sending in Progress", "IN_PROGRESS"),
        DELIVERED("File Delivered", "DELIVERED"),
        SYS_ERROR("System Error", "ERROR");

        private FileSubmitStatuses(String description, String code) {
            this.description = description;
            this.code = code;
        }

        private final String description;
        private final String code;

        public String getDescription() {
            return description;
        }

        public String getCode() {
            return code;
        }
    }

    /**
     * Enumeration for top DATA_PARCEL_IDENTIFIERS entries under FDS identifier
     */
    public enum RootDataParcelIdentifiersForFDS {
        BATCH("BATCH"),
        USER_FILES("USER FILES"),
        BULLETINS("BULLETINS"),
        DYNAMIC("DYNAMIC");

        private RootDataParcelIdentifiersForFDS(String code) {
            this.code = code;
        }

        private final String code;

        public String getCode() {
            return code;
        }
    }
}
