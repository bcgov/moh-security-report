package ca.bc.gov.health.sfds.service;

import ca.bc.gov.health.sfds.dto.RecipientDto;
import ca.bc.gov.health.sfds.dto.UseDto;
import ca.bc.gov.health.sfds.files.FileDescription;
import ca.bc.gov.health.sfds.files.FileDescriptionGroup;
import ca.bc.gov.health.sfds.files.Mailbox;
import ca.bc.gov.health.sfds.files.SendFileEntry;
import jakarta.ejb.Local;
import java.util.List;

/**
 * Facade for operations with files
 *
 * @author vladimir.dovgalyuk
 *
 */
@Local
public interface IFilesFacade {

    /**
     * Retrieves the list of files from the indicated mailbox along with their metadata (if possible).
     *
     * @param mailbox Mailbox Object
     *
     * @return List of FileDescription objects
     */
    public List<FileDescription> getFilesFromMailbox(Mailbox mailbox);

    /**
     * Retrieves the list of files from the indicated mailbox along with their metadata (if possible) and groups them by
     * Use name.
     *
     * @param mailbox Mailbox Object
     * @return List of FileDescription groups
     */
    public List<FileDescriptionGroup> getGroupedFilesFromMailbox(Mailbox mailbox);

    /**
     * Downloads file content
     *
     * @param fileName File name without path
     * @param pathToFile Complete path to file on the remote server
     * @return Array of bytes representing file content
     */
    public byte[] getFileContent(String fileName, String pathToFile);

    /**
     * Deletes file from the mailbox.
     *
     * File is deletes physically if there are no meta data, otherwise it is marked as PENDING DELETE in DATA_RECIPIENTS
     * and will harvested by the agent.
     *
     * @param mailbox Mailbox Object
     * @param fileDescription File description
     * @param user Authenticated user
     * @return true, if operation was successful, false otherwise
     */
    public boolean deleteFileFromMailbox(Mailbox mailbox, FileDescription fileDescription, String user);

    /**
     * Basic file send - single recipient
     *
     * @param accountId Id of sending mailbox (From)
     * @param confirmation True if there is a need for confirmation, false otherwise
     * @param file SendFileEntry object describing sent file
     * @param use Use describing file recipient
     * @param user Authenticated user
     * @param params Array of additional parameters used by FileRenamer instances
     * @return true if send was successful, false otherwise
     */
    public boolean sendFile(String accountId, boolean confirmation, SendFileEntry file, UseDto use, String user, String... params);

    /**
     * Sending files to multiple recipients
     *
     * @param accountId Id of sending mailbox (From)
     * @param confirmation True if there is a need for confirmation, false otherwise
     * @param file SendFileEntry object describing sent file
     * @param use Use designated as To
     * @param recipients List of recipients
     * @param user Authenticated user
     * @param params Array of additional parameters used by FileRenamer instances
     * @return true if send was successful, false otherwise
     */
    public boolean sendFile(String accountId, boolean confirmation, SendFileEntry file, UseDto use, List<RecipientDto> recipients, String user, String... params);

}
