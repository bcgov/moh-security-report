/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.jsf;

import ca.bc.gov.health.pacl.ejb.entity.Letter;
import ca.bc.gov.health.pacl.ejb.entity.LetterMspDetail;
import ca.bc.gov.health.pacl.ejb.entity.PharmacyProvider;
import ca.bc.gov.health.pacl.ejb.entity.PlansM;
import ca.bc.gov.health.pacl.ejb.entity.PracSvaProject;
import ca.bc.gov.health.pacl.ejb.entity.Prescriptions;
import ca.bc.gov.health.pacl.ejb.entity.Project;
import ca.bc.gov.health.pacl.ejb.entity.ProstheticsAndOrthotics;
import ca.bc.gov.health.pacl.ejb.entity.ServiceMsp;
import ca.bc.gov.health.pacl.util.Util;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * Build letter template using sample data for preview functionality.
 * @author dan.stepanov
 */
public class LetterTemplatePreviewSample {

    /**
     * Project instance for previewing.
     */
    private Project sampleProject = new Project();
    /**
     * Letter instance for previewing.
     */
    private Letter sampleLetter = new Letter();
    private LetterMspDetail sampleLetterMsp = new LetterMspDetail();
    /**
     * PharmacyProvider instance for previewing.
     */
    private PharmacyProvider pharmacyProvider = new PharmacyProvider();
    private PracSvaProject pracSvaProject = new PracSvaProject();
    /**
     * Prescriptions instance for previewing.
     */
    private Prescriptions prescriptions = new Prescriptions();
    /**
     * ProstheticsAndOrthotics instance for previewing.
     */
    private ProstheticsAndOrthotics prostheticsAndOrthotics = new ProstheticsAndOrthotics();
    /**
     * Plan M instance for previewing.
     */
    private PlansM planM = new PlansM();
    /**
     * new list of sample prescriptions claims.
     */
    private List<Prescriptions> previewPrescriptions = new ArrayList<>();
    /**
     * new list of sample ProstheticsAndOrthotics claims.
     */
    private List<ProstheticsAndOrthotics> previewProsthOrth = new ArrayList<>();
    /**
     * new list of sample plan M claims.
     */
    private List<PlansM> previewPlanM = new ArrayList<>();
    /**
     * new list of sample service MSP claims.
     */
    private List<ServiceMsp> previewServiceMsp = new ArrayList<>();
    /**
     * Default Constructor.
     */
    public LetterTemplatePreviewSample() {
    }

    /**
     * Getter and setters.
     */
    public Project getSampleProject() {
        // Setup sample Project name/year/month info for template preview.
        sampleProject.setName("Letter Template Sample");
        sampleProject.setProjectMonth("Jan");
        sampleProject.setProjectYear("2014");        
        return sampleProject;
    }

    public void setSampleProject(Project sampleProject) {
        this.sampleProject = sampleProject;
    }

    public Letter getSampleLetter() {
        // Setup sample Letter info for template preview.
        sampleLetter.setBarcode(Long.valueOf("100000000000100"));
        sampleLetter.setPhn(Long.valueOf("9999999999"));
        sampleLetter.setRecipientAddress("TOP OF THE STAIRS|BENEATH THE MAT|1536 MIDDLE ROAD|HAZELTON BC");
        sampleLetter.setRecipientLastName("PATIENT_FIRST_NM");
        sampleLetter.setRecipientFirstName("PATIENT_LAST_NM");
        sampleLetter.setRecipientCity("");
        sampleLetter.setRecipientProvince("");
        sampleLetter.setRecipientPostalCode("V9V 9V9");
        sampleLetter.setLetterDate(new Date());
        sampleLetter.setPharmacyProviderId(getPharmacyProvider());
        sampleLetter.setCaseCode(Util.generateCaseCode());
        return sampleLetter;
    }
    
    public LetterMspDetail getSampleLetterMsp(){
        sampleLetterMsp.setBarcode(Long.valueOf(10));
        sampleLetterMsp.setId(Long.valueOf("100000000000100"));
        sampleLetterMsp.setPhn(Long.valueOf("9999999999"));
        sampleLetterMsp.setRecipientAddress("TOP OF THE STAIRS|BENEATH THE MAT|1536 MIDDLE ROAD|HAZELTON BC");
        sampleLetterMsp.setRecipientLastName("PATIENT_FIRST_NM");
        sampleLetterMsp.setRecipientFirstName("PATIENT_LAST_NM");
        sampleLetterMsp.setRecipientCity("");
        sampleLetterMsp.setRecipientProvince("");
        sampleLetterMsp.setRecipientPostalCode("V9V 9V9");
        sampleLetterMsp.setLetterDate(new Date());
        sampleLetterMsp.setPracSvaProjectId(getPracSvaProject());
        sampleLetterMsp.setCaseCode(Util.generateCaseCode());
        return sampleLetterMsp; 
    }
            

    public void setSampleLetterMsp(LetterMspDetail sampleLetterMsp) {
        this.sampleLetterMsp = sampleLetterMsp;
    }
    
    public void setSampleLetter(Letter sampleLetter) {
        this.sampleLetter = sampleLetter;
    }
    
    public PracSvaProject getPracSvaProject(){
        pracSvaProject.setId(Long.valueOf(10));
        pracSvaProject.setSvaProjectCode("M16010001");
        pracSvaProject.setSvaProjectDesc("THIS IS A PREVIEW");
        pracSvaProject.setPracSurname("PRACT_LAST_NM");
        pracSvaProject.setPracFirstGvnNm("PRACT_FIRST_NM");
        pracSvaProject.setPracSptyDesc("PRAC_SPECIALTY");
        pracSvaProject.setPracIdnt("A99");
        return pracSvaProject;
    }

    public PharmacyProvider getPharmacyProvider() {
        // Setup sample PharmacyProvider info for template preview.
        pharmacyProvider.setCode("BC00000A11");
        pharmacyProvider.setName("SAMPLE PHARMACY NAME");
        return pharmacyProvider;
    }

    public void setPharmacyProvider(PharmacyProvider pharmacyProvider) {
        this.pharmacyProvider = pharmacyProvider;
    }
    
    public void setPracSvaProject(PracSvaProject pracSvaProject) {
        this.pracSvaProject = pracSvaProject;
    }

    public Prescriptions getPrescriptions() {
        // Setup sample Prescriptions claim info for template preview.
        prescriptions.setId(Long.valueOf(10));
        prescriptions.setPrescriptionDate(new Date());
        prescriptions.setBrandName("APO-SIMVASTATIN");
        prescriptions.setGenericName("SIMVASTATIN");
        prescriptions.setDrugStrength("10 MG");
        prescriptions.setPractitionerFirstNm("PRACT_FIRST_NM");
        prescriptions.setPractitionerLastNm("PRACT_LAST_NM");
        prescriptions.setQuantity(new BigDecimal(90));
        return prescriptions;
    }

    public void setPrescriptions(Prescriptions prescriptions) {
        this.prescriptions = prescriptions;
    }

    public ProstheticsAndOrthotics getProstheticsAndOrthotics() {
        // Setup sample ProstheticsAndOrthotics claim info for template preview.
        prostheticsAndOrthotics.setId(Long.valueOf(20));
        prostheticsAndOrthotics.setPAndODate(new Date());
        prostheticsAndOrthotics.setMedicalDeviceBenefit("SAMPLE TIBIA PROSTHESIS");
        prostheticsAndOrthotics.setTotalPhCarePay(new BigDecimal(1700));
        prostheticsAndOrthotics.setTotalCoCarePay(new BigDecimal(4200));
        return prostheticsAndOrthotics;
    }

    public void setProstheticsAndOrthotics(ProstheticsAndOrthotics prostheticsAndOrthotics) {
        this.prostheticsAndOrthotics = prostheticsAndOrthotics;
    }

    public PlansM getPlanM() {
        // Setup sample plan M claim info for template preview.
        planM.setId(Long.valueOf(30));
        planM.setPlanMDate(new Date());
        planM.setMedicationReviewDesc("MEDICATION REVIEW STANDARD");
        planM.setDspgPracFirstNm("PHARM_FIRST_NM");
        planM.setDspgPracLastNm("PHARM_LAST_NM");
        return planM;
    }

    public void setPlanM(PlansM planM) {
        this.planM = planM;
    }
    
    public ServiceMsp getServicesMsp(String shortDesc, String longDesc) {
        // Setup sample service MSP claim info for template preview.
        ServiceMsp temp = new ServiceMsp();
        PracSvaProject pracSVATemp = new PracSvaProject();
        temp.setId(Long.valueOf(30));
        temp.setSrvDate(new Date());
        temp.setPdFitm(shortDesc);
        temp.setPdFitmDscr(longDesc);
        pracSVATemp.setPracFirstGvnNm("PRAC_FIRST_NM");
        pracSVATemp.setPracSurname("PRAC_LAST_NM");
        temp.setPracSvaProjectId(pracSVATemp);
        return temp;
    }
    
    public List<ServiceMsp> getPreviewServiceMsp() {
        // add the sample service
        ServiceMsp tempService = getServicesMsp("COMPLETE EXAMINATION","a \"complete examination\" occurs when the physician takes a detailed medical history including a review of previous medical problems, current medications and medical problems in the family.  a complete physical examination requires the patient to be suitably undressed and the physician to examine all areas of the body.  this includes examination of the eyes, ears, nose, throat, skin, abdomen, reflexes, pulses, listening to the heart and  lungs, measuring the blood pressure, and where necessary, examination of breasts and reproductive organs. a routine annual complete physical examination is not considered a benefit of msp. it is to be billed to msp only when it is medically necessary to perform a comprehensive examination, due to the nature of the patient`s problem.");
        for (int i = 1; i <= 6; i++) {
            previewServiceMsp.add(tempService);
        }
        return previewServiceMsp;
    }

    public void setPreviewServiceMsp(List<ServiceMsp> previewServiceMsp) {
        this.previewServiceMsp = previewServiceMsp;
    }

    public List<Prescriptions> getPreviewPrescriptions() {
        // add the sample prescription claim
        previewPrescriptions.add(getPrescriptions());
        return previewPrescriptions;
    }

    public void setPreviewPrescriptions(List<Prescriptions> previewPrescriptions) {
        this.previewPrescriptions = previewPrescriptions;
    }

    public List<ProstheticsAndOrthotics> getPreviewProsthOrth() {
        // add the sample ProstheticsAndOrthotics claim
        previewProsthOrth.add(getProstheticsAndOrthotics());
        return previewProsthOrth;
    }

    public void setPreviewProsthOrth(List<ProstheticsAndOrthotics> previewProsthOrth) {
        this.previewProsthOrth = previewProsthOrth;
    }

    public List<PlansM> getPreviewPlanM() {
        // add the sample plan M claim
        previewPlanM.add(getPlanM());
        return previewPlanM;
    }

    public void setPreviewPlanM(List<PlansM> previewPlanM) {
        this.previewPlanM = previewPlanM;
    }

}