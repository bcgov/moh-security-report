/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.web;

import ca.bc.gov.health.jsf.BaseBean;
import static ca.bc.gov.health.jsf.BaseBean.addErrorMessage;
import ca.bc.gov.health.pacl.ejb.entity.AdminOptions;
import ca.bc.gov.health.pacl.ejb.entity.ApplicationAuditDtlLog;
import ca.bc.gov.health.pacl.ejb.entity.ApplicationAuditLog;
import ca.bc.gov.health.pacl.ejb.entity.CodesLetterStatus;
import ca.bc.gov.health.pacl.ejb.entity.CodesPcarePlan;
import ca.bc.gov.health.pacl.ejb.entity.CodesProjectType;
import ca.bc.gov.health.pacl.ejb.entity.Letter;
import ca.bc.gov.health.pacl.ejb.entity.LetterTemplate;
import ca.bc.gov.health.pacl.ejb.entity.PharmacyProvider;
import ca.bc.gov.health.pacl.ejb.entity.PlansM;
import ca.bc.gov.health.pacl.ejb.entity.Prescriptions;
import ca.bc.gov.health.pacl.ejb.entity.Project;
import ca.bc.gov.health.pacl.ejb.entity.ProjectPlans;
import ca.bc.gov.health.pacl.ejb.entity.ProstheticsAndOrthotics;
import ca.bc.gov.health.pacl.ejb.session.AdminOptionsFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.ApplicationAuditLogFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.CodesLetterStatusFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.CodesLetterTemplateTypeFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.CodesPcarePlanFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.CodesProjectStatusFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.CodesProjectTypeFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.HIHealthProductFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.PharmacyProviderFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.ProjectFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.ProjectPlansFacadeLocal;
import ca.bc.gov.health.pacl.model.ProjectLetter;
import ca.bc.gov.health.pacl.util.PaclConstants;
import ca.bc.gov.health.pacl.util.Util;
import fish.payara.security.openid.api.OpenIdContext;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.ejb.EJBException;
import jakarta.faces.event.ValueChangeEvent;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;

/**
 * Backing bean for creating a new project.
 *
 * @author dan.stepanov
 */
@Named("createProject")
@ViewScoped
public class CreateProjectBean extends BaseBean {

    private static Logger logger = Logger.getLogger(CreateProjectBean.class.getName());
    /**
     * new value for the project date.
     */
    private Date projectDate;
    /**
     * new value for the doctor number.
     */
    private String doctorNumber;
    /**
     * new value for the patient PHN.
     */
    private String phn;
    /**
     * new value for the ingredient Cost.
     */
    private BigDecimal ingredientCost;
    /**
     * Lists of selected pharmacare plans to display on the screen.
     */
    private List<String> selectedPharmacarePlans = new ArrayList<>();
    /**
     * Lists pharmacare plan M to display on the screen.
     */
    private List<String> selectedPharmacarePlanM = new ArrayList<>();
    /**
     * new value for the input pharmacy code.
     */
    private String inputPharmacyCodes;
    /**
     * new value for the current users email from keycloak
     */
    private String email;
    /**
     * new value for the input drug codes DINPINs.
     */
    private String inputDrugCodes;
    /**
     * Lists pharmacy codes verified in HI.
     */
    private List<String> pharmCodesHI = new ArrayList<>();
    /*
     * Facade for persistence
     */
    @EJB
    private transient HIHealthProductFacadeLocal hiHealthProductFacade;

    @EJB
    private transient CodesPcarePlanFacadeLocal codesPcarePlanFacade;

    @EJB
    private transient CodesProjectTypeFacadeLocal codesProjectTypeFacade;

    @EJB
    private transient AdminOptionsFacadeLocal adminOptionsFacade;

    @EJB
    private transient ProjectPlansFacadeLocal projectPlansFacade;

    @EJB
    private transient ProjectFacadeLocal projectFacade;

    @EJB
    private transient PharmacyProviderFacadeLocal pharmacyProviderFacade;

    @EJB
    private transient CodesProjectStatusFacadeLocal codesProjectStatusFacade;

    @EJB
    private transient CodesLetterTemplateTypeFacadeLocal codesLetterTemplTypeFacade;

    @EJB
    private transient CodesLetterStatusFacadeLocal codesLetterStatusFacade;

    @EJB
    private transient ApplicationAuditLogFacadeLocal applicationAuditLogFacade;

    @Inject
    private OpenIdContext context;

    /*
     * The instance we're currently editing
     */
    private Project project;
    /*
     * new object for PharmacyProvider pharmacyProvider.
     */
    private PharmacyProvider pharmacyProvider;
    /**
     * letter template type for prescriptions.
     */
    long templateTypePrescript;
    /**
     * letter template type for Prosth and Orth.
     */
    long templateTypePO;
    /**
     * letter template type for plan M.
     */
    long templateTypePlanM;
    /*
     * The instance letter we're retrieving and caching
     */
    CodesLetterStatus letterStatusNoResponse;
    /*
     * List of default pharmacare plans for pharmacy/PO project types.
     */
    List<CodesPcarePlan> defaultPharmacarePlanCodes;
    /*
     * List of default pharmacare plan M.
     */
    List<CodesPcarePlan> defaultPlanMCode;
    /**
     * max patients value for each letter run type.
     */
    private long maxPatients;
    /**
     * The HILogin object is used to connect to the HI context. Direct usage of @Inject causes a
     * ContextNotActiveException (WELD-001303). To prevent this issue, the init() method employs findBean() to obtain
     * the object.
     */
    private HealthIdeasLogin hiLogin;

    /**
     * Default constructor.
     */
    public CreateProjectBean() {
        super();
    }

    /**
     * Initializes this bean after injection.
     */
    @PostConstruct
    public void init() {
        clear();
        getSelectedPharmacarePlans();
        if (context.getAccessToken() != null) {
            email = context.getAccessToken().getJwtClaims().getStringClaim("email").orElse("");
        }
        hiLogin = new HealthIdeasLogin();
        hiLogin = (HealthIdeasLogin) hiLogin.findBean("HealthIdeasLogin");
    }
    
    /**
     * form validation method when create a new project.
     *
     * @return boolean
     */
    public final boolean validateProject() {

        boolean isNotError = true;
        // verify other fields
        // check if projectType was selected before create
        if (project.getProjectTypeId().getId().equals(new Long("-1"))
                || project.getProjectTypeId() == null) {
            addErrorMessage("Project Type must be selected  before creating"
                    + " a new project.");
            isNotError = false;
        }
        // check if the search fields contain invalid chars
        String invalidChars = "[!#$%&()*+,/:;<=>?@\\[\\]^\\_\\`\\{|\\}~‚ƒ„…†‡ˆ‰Š‹Œ‘“”•–—˜™š›œŸ¡¢£¤¥¦§¨©ª«¬¬®¯°±²³´µ¶•¸¹º»¼½¾¿ÃÅÆÐÑÕ×ØÞßãåæðñõ÷øþÿ]";
        if (Util.notEmpty(project.getName())) {
            String firstCharPrj = project.getName().substring(0, 1);
            if (firstCharPrj.matches(invalidChars)) {
                addErrorMessage("Project Name cannot contain special characters");
                isNotError = false;
            }
        }

        // verify if claim start date is after the claim end date.
        if (project.getProjectFromDate().after(project.getProjectToDate())) {
            addErrorMessage("The claim start date cannot be after the claim end date.");
            isNotError = false;
        }

        // verify if project name and project month/year are unique in .
        if (projectFacade.projectExist(project)) {
            addErrorMessage("The project name and project year/month already "
                    + "exist in the system.");
            isNotError = false;
        }

        // verify if max. patients value is a positive number and > 0.
        if (project.getMaxPatients() <= 0) {
            addErrorMessage("The maximum number of patients must be "
                    + "a positive number.");
            isNotError = false;
        }
        // verify if the max number of patients per pharmacy/provider
        // exceeds the default Patient Limit from Admin Options
        AdminOptions adminOptions = adminOptionsFacade.findDefaultPatientLimit().get(0);
        logger.info("adminOptions max patients = ".concat(String.valueOf(adminOptions.getDefaultPatientLimit())));
        logger.info("max patients from screen = ".concat(String.valueOf(project.getMaxPatients())));
        if (project.getMaxPatients() > adminOptions.getDefaultPatientLimit()) {
            addErrorMessage("The maximum number of patients exceeds "
                    + "the default patient limit.");
            isNotError = false;
        }

        // validate the pharmacy/PO provider code format from HI
        // “BC00000axx” where ‘a’ means letter and x means letter or digit
        // (e.g. c and BC00000ABC)
        String[] pharmCodes = inputPharmacyCodes.toUpperCase().trim().split(",");
        Pattern p = Pattern.compile("^(BC00000)[A-Z][A-Z0-9]{2}$");
        for (String pharmacyCode : pharmCodes) {
            if (!p.matcher(pharmacyCode).lookingAt()) {
                // display error message if Pharmacy input code doesn't have the latest format
                addErrorMessage("Pharmacy/Provider input code doesn't match the latest formats.");
                isNotError = false;
                break;
            }
        }
        // search HealthIdeas for the pharmacy codes;
        List<String> pharmCodesList = new ArrayList<>();
        for (String pharmCode : pharmCodes) {
            pharmCodesList.add(pharmCode.trim());
        }
        pharmCodesHI = hiHealthProductFacade.verifyProviderCodesHI(hiLogin.getEntityManager(), pharmCodesList);
        // display info message if pharmacy input code is not in HI
        if (pharmCodesHI != null && pharmCodesHI.isEmpty()) {
            addErrorMessage("Pharmacy/Provider code doesn't exist"
                    + " in the system.");
            isNotError = false;
        }

        return isNotError;
    }

    /**
     * Creates a new project type record.
     *
     * @return String
     */
    public String add() {
        // validate screen input valus and the business rules
        if (!validateProject()) {
            return null;
        }

        // pharmacare plans for the selected values from the screen
        List<String> phCarePlanNames = new ArrayList<>();
        for (String phCarePlanId : selectedPharmacarePlans) {
            String phCarePlanName = codesPcarePlanFacade.findPharmaCarePlanNameById(Long.parseLong(phCarePlanId));
            phCarePlanNames.add(phCarePlanName);
        }
        // pharmacare plan M selection from the screen
        List<String> phCarePlanMnames = new ArrayList<>();
        for (String phCarePlanId : selectedPharmacarePlanM) {
            String phCarePlanM = codesPcarePlanFacade.findPharmaCarePlanNameById(Long.parseLong(phCarePlanId));
            phCarePlanMnames.add(phCarePlanM);
        }

        // create a list of drug codes from the screen
        String[] drugCodes = inputDrugCodes.trim().split(",");
        List<String> drugCodesScreen = new ArrayList<>();
        for (String drugCode : drugCodes) {
            drugCodesScreen.add(drugCode.trim());
        }

        // retrieve Letters details from HI and then depending on the selected
        // project type are set in project letter
        if (PaclConstants.PHARMACY_PROJECT_TYPE.equals(project.getProjectTypeId().getName())) {

            calculatePharmacyProjectClaims(pharmCodesHI, phCarePlanNames,
                    project, drugCodesScreen, doctorNumber, phn, ingredientCost);
        } else if (PaclConstants.PO_PROJECT_TYPE.equals(project.getProjectTypeId().getName())) {

            calculatePOProvidersProjectClaims(pharmCodesHI, phCarePlanNames,
                    project, phn);
        } else if (PaclConstants.PLAN_M_PROJECT_TYPE.equals(project.getProjectTypeId().getName())) {

            calculatePlanMProjectClaims(pharmCodesHI, phCarePlanMnames, project,
                    drugCodesScreen, doctorNumber, phn);
        }
        return clear();
    }

    /**
     * Retrieve the patient claims from HI per each pharmacy. If claims exists insert a new project type and the
     * selected pharmacare plans, then populates the pharmacy/letter/prescription entities.
     *
     * @param pharmCodesScreen List<String> - pharmacy codes selected from the screen
     * @param phCarePlanNames List<String> - pharmacare plans selected from the screen
     * @param project Project - project with input values from session/screen
     * @param drugCodesScreen List<String> - drug codes from the screen
     * @param doctorNumber String - prescriber practitioner id from screen
     * @param phn String - PHN input value from the screen
     * @param ingredientCost BigDecimal - ingredient cost input value from the screen
     */
    private void calculatePharmacyProjectClaims(
            List<String> pharmCodesScreen, List<String> phCarePlanNames,
            Project project, List<String> drugCodesScreen, String doctorNumber,
            String phn, BigDecimal ingredientCost) {

        List<PharmacyProvider> distinctPharmacies;

        // create a new instance of project letter type
        ProjectLetter projectLetter = new ProjectLetter();
        projectLetter.setHiPrescriptionLetters(
                hiHealthProductFacade.getHIClaimsForPharmacy(hiLogin.getEntityManager(),
                        pharmCodesScreen, phCarePlanNames, project, drugCodesScreen,
                        doctorNumber, phn, ingredientCost));
        distinctPharmacies = projectLetter.getClaimsForPharmacy();
        // verify the results for pharmacies/patients/claims
        if (distinctPharmacies.isEmpty()) {
            addWarnMessage("The selection criteria for this project type"
                    + " has no results.");
        } else if (distinctPharmacies.size() > 0) {
            // set project info with values from the screen
            setProjectInfo(project, pharmCodesScreen);

            // create pharmacare plans for the selected project
            populateProjectPlans(selectedPharmacarePlans, project);

            // insert new pharmacies/providers
            for (PharmacyProvider pharmProvider : distinctPharmacies) {
                pharmProvider.setProjectId(project);
                pharmProvider.setId(null);

                // create patients for the pharmacy/provider
                for (Letter letter : pharmProvider.getLetterList()) {
                    letter.setPharmacyProviderId(pharmProvider);
                    letter.setProjectId(project);
                    letter.setLetterTemplateId(new LetterTemplate(getTemplateTypePrescript()));
                    letter.setStatusId(getLetterStatusNoResponse());
                    // insert new letters for patients per pharmacy/provider
                    letter.setId(null);

                    // create prescriptions for each letter Patient
                    for (Prescriptions prescription : letter.getPrescriptionsList()) {
                        prescription.setLetterId(letter);
                        // insert new prescriptions for each letter
                        prescription.setId(null);
                    }
                }
                // create new pharmacies for the selected letters/prescriptions
                logger.log(Level.INFO, "pharmProvider details before inserts = ".concat(String.valueOf(pharmProvider.getCode())));
                pharmacyProviderFacade.create(pharmProvider);

            }

            // check timestamp after inserts
            java.util.Date date2 = new java.util.Date();
            logger.log(Level.INFO, "timestamp after inserts PACL db = ".concat(new java.sql.Timestamp(date2.getTime()).toString()));
            addInfoMessage("Project was created successfully.");
            project.setPharmacyProviderList(distinctPharmacies);
        }
    }

    /**
     * Set the all project types with input values from the session/screen.
     *
     * @param project Project - project with input values from session/screen
     *
     */
    private void setProjectInfo(Project project, List<String> pharmCodesScreen) {
        // set project with values from the screen
        // set this value with logged user id
        String applicationUserName = findUserName();
        project.setProjectOwner(applicationUserName);
        project.setEmail(email);
        // set initial project status to 'Open'
        project.setStatusId(codesProjectStatusFacade.findByName(PaclConstants.PROJECT_STATUS_OPEN));

        // timestamp check pacl inserts
        java.util.Date date = new java.util.Date();
        logger.log(Level.INFO, "timestamp before inserts PACL db = ".concat(new java.sql.Timestamp(date.getTime()).toString()));

        // create a new project type
        try {
            projectFacade.create(project);

            // Create Audit log
            ApplicationAuditLog applicationAuditLog = new ApplicationAuditLog("Create Project");
            List<ApplicationAuditDtlLog> logDetailList = new ArrayList<>();
            logDetailList.add(new ApplicationAuditDtlLog(applicationAuditLog, "Project Owner", findUserName()));
            logDetailList.add(new ApplicationAuditDtlLog(applicationAuditLog, "Project Name", project.getName()));
            logDetailList.add(new ApplicationAuditDtlLog(applicationAuditLog, "Project Month", project.getProjectMonth()));
            logDetailList.add(new ApplicationAuditDtlLog(applicationAuditLog, "Project Year", project.getProjectYear()));
            logDetailList.add(new ApplicationAuditDtlLog(applicationAuditLog, "Project Id", (project.getId().toString())));
            logDetailList.add(new ApplicationAuditDtlLog(applicationAuditLog, "Pharmacy/Provider Input Codes", (pharmCodesScreen.toString())));

            applicationAuditLog.setApplicationAuditDtlLogList(logDetailList);
            applicationAuditLogFacade.create(applicationAuditLog);

        } catch (EJBException e) {
            for (Throwable t = e.getCause(); t != null; t = t.getCause()) {
                if (t.getClass().getName().equals("java.sql.SQLException")) {
                    addErrorMessage("Cannot add record, as it violates a constraint.");
                }
            }
        }
    }

    /**
     * Create the pharmacare plans for the pharmacies/PO providers for the selected project type.
     *
     * @param selectedPharmacarePlans List<String> - selected pharmacare plans from the screen
     * @param project Project - selected project
     *
     * @return List<ProjectPlans>
     */
    private List<ProjectPlans> populateProjectPlans(
            List<String> selectedPharmacarePlans, Project project) {

        // create pharmacare plans for the selected project
        List<ProjectPlans> projectPlansList = new ArrayList<>();

        for (String pcarePlan : selectedPharmacarePlans) {
            ProjectPlans projectPlans = new ProjectPlans();
            projectPlans.setPcarePlanId(new CodesPcarePlan(Long.parseLong(pcarePlan)));
            projectPlans.setProjectId(project);
            projectPlansList.add(projectPlans);
        }

        // insert new project plans
        for (ProjectPlans prjPlans : projectPlansList) {
            prjPlans.setId(null);
            projectPlansFacade.create(prjPlans);
        }
        project.setProjectPlansList(projectPlansList);

        return projectPlansList;
    }

    /**
     * Create the pharmacare for plan M for the selected project.
     *
     * @param selectedPharmacarePlans List<String> - selected pharmacare plans from the screen
     * @param project Project - selected project
     *
     * @return List<ProjectPlans>
     */
    private List<ProjectPlans> populateProjectPlanM(
            List<String> selectedPharmacarePlanM, Project project) {

        // create pharmacare plans for the selected project
        List<ProjectPlans> projectPlansList = new ArrayList<>();

        for (String pcarePlan : selectedPharmacarePlanM) {
            ProjectPlans projectPlans = new ProjectPlans();
            projectPlans.setPcarePlanId(new CodesPcarePlan(Long.parseLong(pcarePlan)));
            projectPlans.setProjectId(project);
            projectPlansList.add(projectPlans);
        }

        // insert new project plans
        for (ProjectPlans prjPlans : projectPlansList) {
            prjPlans.setId(null);
            projectPlansFacade.create(prjPlans);
        }
        project.setProjectPlansList(projectPlansList);

        return projectPlansList;
    }

    /**
     * Retrieve the patient claims from HI per each PO provider. If claims exists insert a new project type and the
     * selected pharmacare plans, then populates the provider/letter/prostheticsOrthontics entities.
     *
     * @param pharmCodesScreen List<String> - pharmacy codes selected from the screen
     * @param phCarePlanNames List<String> - pharmacare plans selected from the screen
     * @param project Project - project with input values from session/screen
     * @param phn String - PHN input value from the screen
     */
    private void calculatePOProvidersProjectClaims(
            List<String> providerCodesScreen, List<String> phCarePlanNames,
            Project project, String phn) {

        List<PharmacyProvider> distinctPOProviders;

        // create a new instance of project letter type
        ProjectLetter projectLetter = new ProjectLetter();
        projectLetter.setHiPrescriptionLetters(
                hiHealthProductFacade.getHIClaimsForPOProvider(hiLogin.getEntityManager(),
                        providerCodesScreen, phCarePlanNames, project, phn));
        distinctPOProviders = projectLetter.getPOClaimsForProvider();
        // verify the results for pharmacies/patients/claims
        if (distinctPOProviders.isEmpty()) {
            addWarnMessage("The selection criteria for this project type has no results.");
        } else if (distinctPOProviders.size() > 0) {
            // set project info with values from the screen
            setProjectInfo(project, providerCodesScreen);

            // create pharmacare plans for the selected project
            populateProjectPlans(selectedPharmacarePlans, project);

            // insert new pharmacies/providers
            for (PharmacyProvider pharmProvider : distinctPOProviders) {
                pharmProvider.setProjectId(project);
                pharmProvider.setId(null);

                // create patients for the pharmacy/provider
                for (Letter letter : pharmProvider.getLetterList()) {
                    letter.setPharmacyProviderId(pharmProvider);
                    letter.setProjectId(project);
                    letter.setLetterTemplateId(new LetterTemplate(getTemplateTypePO()));
                    letter.setStatusId(getLetterStatusNoResponse());
                    // insert new letters for patients per pharmacy/provider
                    letter.setId(null);

                    // create ProstheticsAndOrthotics for each letter Patient
                    for (ProstheticsAndOrthotics prosthOrth : letter.getProsthOrthList()) {
                        prosthOrth.setLetterId(letter);
                        // insert new P&O claims for each letter
                        prosthOrth.setId(null);
                    }
                }

                // create new pharmacies for the selected letters/prescriptions
                pharmacyProviderFacade.create(pharmProvider);

            }
            addInfoMessage("Project was created successfully.");
            project.setPharmacyProviderList(distinctPOProviders);
        }

    }

    /**
     * Retrieve the patient claims from HI per each pharmacy. If claims exists insert a new project type and the
     * selected pharmacare plans, then populates the pharmacy/letter/planM entities.
     *
     * @param pharmCodesScreen List<String> - pharmacy codes selected from the screen
     * @param phCarePlanMnames List<String> - pharmacare plan M selected from the screen
     * @param project Project - project with input values from session/screen
     * @param drugCodesScreen List<String> - optional field with drug codes from the screen
     * @param doctorNumber String - dispensing practitioner id from screen
     * @param phn String - PHN input value from the screen
     */
    private void calculatePlanMProjectClaims(
            List<String> pharmCodesScreen, List<String> phCarePlanMnames,
            Project project, List<String> drugCodesScreen, String doctorNumber,
            String phn) {

        List<PharmacyProvider> distinctPharmacies;

        // create a new instance of project letter type
        ProjectLetter projectLetter = new ProjectLetter();
        projectLetter.setHiPrescriptionLetters(
                hiHealthProductFacade.getHIClaimsForPharmacyPlanM(hiLogin.getEntityManager(),
                        pharmCodesScreen, phCarePlanMnames, project, drugCodesScreen,
                        doctorNumber, phn));
        distinctPharmacies = projectLetter.getPlanMClaimsForPharmacy();
        // verify the results for pharmacies/patients/claims
        if (distinctPharmacies.isEmpty()) {
            addWarnMessage("The selection criteria for this project type has no results.");
        } else if (distinctPharmacies.size() > 0) {
            // set project info with values from the screen
            setProjectInfo(project, pharmCodesScreen);

            // create pharmacare plan M for the selected project
            populateProjectPlanM(selectedPharmacarePlanM, project);

            // insert new pharmacies/providers
            for (PharmacyProvider pharmProvider : distinctPharmacies) {
                pharmProvider.setProjectId(project);
                pharmProvider.setId(null);

                // create patients for the pharmacy/provider
                for (Letter letter : pharmProvider.getLetterList()) {
                    letter.setPharmacyProviderId(pharmProvider);
                    letter.setProjectId(project);
                    letter.setLetterTemplateId(new LetterTemplate(getTemplateTypePlanM()));
                    letter.setStatusId(getLetterStatusNoResponse());
                    // insert new letters for patients per pharmacy/provider
                    letter.setId(null);

                    // create plan M claim letter types for each patient
                    for (PlansM planM : letter.getPlansMList()) {
                        planM.setLetterId(letter);
                        // insert new plan M claims for each letter
                        planM.setId(null);
                    }
                }
                // create new pharmacies for the selected letters/plan M
                pharmacyProviderFacade.create(pharmProvider);

            }
            addInfoMessage("Project was created successfully.");
            project.setPharmacyProviderList(distinctPharmacies);
        }

    }

    /**
     * Clears the form.
     *
     * @return String
     */
    public String clear() {
        project = new Project();
        project.setProjectTypeId(new CodesProjectType());
        getSelectedPharmacarePlans();
        projectDate = null;
        inputPharmacyCodes = null;
        inputDrugCodes = null;
        doctorNumber = null;
        phn = null;
        ingredientCost = null;
        resetComponent("createProjectForm");
        return null;
    }

    /* Getters and Setters */
    public Date getProjectDate() {
        return projectDate;
    }

    public void setProjectDate(Date projectDate) {
        this.projectDate = projectDate;
        Calendar instance = Calendar.getInstance();
        instance.setTime(projectDate);
        String month = String.valueOf(instance.get(Calendar.MONTH) + 1);
        project.setProjectMonth(month.length() == 1 ? "0" + month : month);
        project.setProjectYear(String.valueOf(instance.get(Calendar.YEAR)));

    }

    public List<String> getSelectedPharmacarePlans() {
        selectedPharmacarePlans.clear();
        getDefaultPharmacarePlanCodes().forEach((CodesPcarePlan codesPcare) -> {
            selectedPharmacarePlans.add(codesPcare.getId().toString());
        });

        return selectedPharmacarePlans;
    }

    public List<String> getSelectedPharmacarePlanM() {
        selectedPharmacarePlanM.clear();
        getDefaultPlanMCode().forEach((codesPcare) -> {
            selectedPharmacarePlanM.add(codesPcare.getId().toString());
        });
        return selectedPharmacarePlanM;
    }

    public void setSelectedPharmacarePlanM(List<String> selectedPharmacarePlanM) {
        // Check and add items to the list individually, ensuring that they are added as Strings and not Longs
        this.selectedPharmacarePlanM = new ArrayList();
        selectedPharmacarePlanM.forEach((Object pharmaPlanM) -> {
            if (pharmaPlanM instanceof Long) {
                this.selectedPharmacarePlanM.add(Long.toString((Long) pharmaPlanM));
            } else {
                this.selectedPharmacarePlanM.add((String) pharmaPlanM);
            }
        });
    }

    public void changeProjectType(ValueChangeEvent e) {
        if (((Long) e.getNewValue()) != -1) {
            project.setProjectTypeId(codesProjectTypeFacade.find(e.getNewValue()));
        } else {
            project.setProjectTypeId(new CodesProjectType());
        }
    }

    public void setSelectedPharmacarePlans(List<String> selectedPharmacarePlans) {
        // Check and add items to the list individually, ensuring that they are added as Strings and not Longs
        this.selectedPharmacarePlans = new ArrayList();
        selectedPharmacarePlans.forEach((Object pharmaPlans) -> {
            if (pharmaPlans instanceof Long) {
                this.selectedPharmacarePlans.add(Long.toString((Long) pharmaPlans));
            } else {
                this.selectedPharmacarePlans.add((String) pharmaPlans);
            }
        });
    }

    public Project getProject() {
        return project;
    }

    public void setProject(Project project) {
        this.project = project;
    }

    public PharmacyProvider getPharmacyProvider() {
        return pharmacyProvider;
    }

    public void setPharmacyProvider(PharmacyProvider pharmacyProvider) {
        this.pharmacyProvider = pharmacyProvider;
    }

    public String getInputPharmacyCodes() {
        return inputPharmacyCodes;
    }

    public void setInputPharmacyCodes(String inputPharmacyCodes) {
        this.inputPharmacyCodes = inputPharmacyCodes;
    }

    public String getInputDrugCodes() {
        return inputDrugCodes;
    }

    public void setInputDrugCodes(String inputDrugCodes) {
        this.inputDrugCodes = inputDrugCodes;
    }

    public String getDoctorNumber() {
        return doctorNumber;
    }

    public void setDoctorNumber(String doctorNumber) {
        this.doctorNumber = doctorNumber;
    }

    public String getPhn() {
        return phn;
    }

    public void setPhn(String phn) {
        this.phn = phn;
    }

    public BigDecimal getIngredientCost() {
        return ingredientCost;
    }

    public void setIngredientCost(BigDecimal ingredientCost) {
        this.ingredientCost = ingredientCost;
    }

    public List<String> getPharmCodesHI() {
        return pharmCodesHI;
    }

    public void setPharmCodesHI(List<String> pharmCodesHI) {
        this.pharmCodesHI = pharmCodesHI;
    }

    public long getTemplateTypePrescript() {
        templateTypePrescript = codesLetterTemplTypeFacade.findByName(PaclConstants.PHARMACY_LETTER_TYPE).getId();
        return templateTypePrescript;
    }

    public long getTemplateTypePO() {
        templateTypePO = codesLetterTemplTypeFacade.findByName(PaclConstants.PO_LETTER_TYPE).getId();
        return templateTypePO;
    }

    public long getTemplateTypePlanM() {
        templateTypePlanM = codesLetterTemplTypeFacade.findByName(PaclConstants.PLAN_M_LETTER_TYPE).getId();
        return templateTypePlanM;
    }

    public CodesLetterStatus getLetterStatusNoResponse() {
        letterStatusNoResponse = codesLetterStatusFacade.findByName(PaclConstants.LETTER_STATUS_NO_RESPONSE);
        return letterStatusNoResponse;
    }

    public List<CodesPcarePlan> getDefaultPharmacarePlanCodes() {
        defaultPharmacarePlanCodes = codesPcarePlanFacade.findByDefaultSelected();
        return defaultPharmacarePlanCodes;
    }

    public List<CodesPcarePlan> getDefaultPlanMCode() {
        defaultPlanMCode = codesPcarePlanFacade.findByDefaultSelectedPlanM();
        return defaultPlanMCode;
    }

    public long getMaxPatients() {
        logger.info("defaultMaxPatients Pharmacare = ".concat(String.valueOf(PaclConstants.DEFAULT_PHARMA_MAX_PATIENTS)));
        maxPatients = PaclConstants.DEFAULT_PHARMA_MAX_PATIENTS;
        return maxPatients;
    }

    public void setMaxPatients(long maxPatients) {
        this.maxPatients = maxPatients;
        project.setMaxPatients(maxPatients);
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }

}
