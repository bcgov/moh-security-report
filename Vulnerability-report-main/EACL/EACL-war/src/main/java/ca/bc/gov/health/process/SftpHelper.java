/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.process;

import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;
import com.jcraft.jsch.JSchException;
import com.jcraft.jsch.Session;
import jakarta.annotation.Resource;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Properties;
import java.util.logging.Logger;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperPrint;
import org.joda.time.LocalDateTime;

/**
 *
 * @author trevor.schiavone
 */
public class SftpHelper {

    private static final String className = SftpHelper.class.getName();
    private static final Logger logger = Logger.getLogger(className);

    /* this is the decimal representation of octal 700
    since chmod permissions are octal but jsch passes them as decimal */
    private static final int DIR_PERMISSIONS = 448;

    // Used to get the properties from the JNDI
    @Resource(lookup = "java:app/eacl/sftp")
    private Properties properties;

    public Session session;
    public ChannelSftp sftpChannel;

    public void initializeSftpChannel() throws JSchException, NamingException {

        JSch jsch = new JSch();
        Context initialContext = new InitialContext();
        properties = (Properties) initialContext.lookup("java:app/eacl/sftp");
        session = jsch.getSession(properties.getProperty("username"), properties.getProperty("host"));
        session.setPassword(properties.getProperty("password"));
        session.setConfig("StrictHostKeyChecking", "no");

        // Maintain the connection to avoid a broken pipe with the server after 10 minutes of inactivity
        session.setServerAliveInterval(300);
        session.setServerAliveCountMax(3);
        session.connect();

        sftpChannel = (ChannelSftp) session.openChannel("sftp");
        sftpChannel.connect();

    }

    /**
     * Method that creates the SFTP directory and returns it's name
     *
     * @param projectName
     * @return String dirName
     * @throws Exception
     */
    public String createSftpFolder(String projectName) throws Exception {

        String dirName;
        LocalDateTime date = LocalDateTime.now();

        // SFTP server no longer handles ':' delimiters in the timestamp
        dirName = "Inbox/" + properties.getProperty("environment") + "/" + projectName + " " + date.toString("yyyy-MM-dd HHmmss");
        logger.info(dirName);

        // Create SFTP directory for the current run being printed
        sftpChannel.mkdir(dirName);
        sftpChannel.chmod(DIR_PERMISSIONS, dirName);

        return dirName;
    }

    /**
     * Method that uploads a PDF file to the SFTP server
     *
     * @param jprint
     * @param fileName
     * @param dirName
     * @throws Exception
     */
    public void uploadData(JasperPrint jprint, String fileName, String dirName) throws Exception {

        // Get the PDF stream and write it in a temp file to then create a file on the SFTP and write in it
        File tmpFile = new File(fileName);
        try (FileOutputStream fw = new FileOutputStream(tmpFile)) {
            try (ByteArrayOutputStream pdfStream = new ByteArrayOutputStream()) {
                JasperExportManager.exportReportToPdfStream(jprint, pdfStream);
                fw.write(pdfStream.toByteArray());
                pdfStream.flush();
            }
            try (FileInputStream fis = new FileInputStream(tmpFile)) {
                String filePathName = dirName + "/" + fileName;
                sftpChannel.put(fis, filePathName);
            }
            fw.flush();
        }
    }

    /**
     * Ends the SFTP connection
     */
    public void releaseResources() {
        if (sftpChannel != null) {
            sftpChannel.disconnect();
        }
        if (session != null) {
            session.disconnect();
        }
    }

}
