package ca.bc.gov.health.pacl.web;

import ca.bc.gov.health.jsf.BaseBean;
import static ca.bc.gov.health.jsf.BaseBean.addErrorMessage;
import static ca.bc.gov.health.jsf.BaseBean.addInfoMessage;
import ca.bc.gov.health.jsf.LetterTemplatePreviewSample;
import ca.bc.gov.health.pacl.ejb.entity.*;
import ca.bc.gov.health.pacl.ejb.session.*;
import ca.bc.gov.health.pacl.jasper.JasperLetter;
import ca.bc.gov.health.pacl.jasper.JasperLetterMsp;
import ca.bc.gov.health.pacl.jasper.JasperLetterMspCollection;
import ca.bc.gov.health.pacl.util.PaclConstants;
import ca.bc.gov.health.pacl.util.Util;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.SessionScoped;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.event.ValueChangeEvent;
import jakarta.faces.validator.ValidatorException;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;
import org.primefaces.model.file.UploadedFile;

/**
 * Backing bean for editing LetterTemplates.
 *
 * @author JSF Code Generator
 */
@Named("MaintainLetterTemplate")
@SessionScoped
public class MaintainLetterTemplate extends BaseBean {

    private static ResourceBundle bundle = ResourceBundle.getBundle("MessageResources", FacesContext.getCurrentInstance().getViewRoot().getLocale());
    private static Logger logger = Logger.getLogger(MaintainLetterTemplate.class.getName());
    /**
     * EJB to handle persistence.
     */
    @EJB
    private transient LetterTemplateFacadeLocal letterTemplateFacade;

    @EJB
    private transient CodesLetterTemplateTypeFacadeLocal codesLetterTemplateTypeFacade;

    /**
     * Instance we're currently editing.
     */
    private LetterTemplate letterTemplate;
    /**
     * Instance used for previewing.
     */
    private LetterTemplatePreviewSample letterTemplateSample;
    /**
     * Sender signature file to be uploaded.
     */
    private UploadedFile senderSignatureFile;
    /**
     * Ministry logo file to be uploaded.
     */
    private UploadedFile ministryLogoFile;
    /**
     * preview jasper report letter instance to generate.
     */

    /**
     * Use to reload pdf preview file when a change is made
     */
    private String TemplateID;

    /**
     * Use to display the preview pdf file
     */
    private StreamedContent content;

    private static final String SESSION_JPRINT = "reportJasperPrint",
            SESSION_FILENAME = "reportFileName",
            SESSION_SHOW_DIALOGUE = "showPrintDialogue";

    private static enum Result {

        SUCCESS("SUCCESS"), ERROR("ERROR"), WARNING("WARNING");
        private final String literal;

        Result(String value) {
            this.literal = value;
        }

        @Override
        public String toString() {
            return literal;
        }
    };

    @Inject
    private ApplicationSelectionBean applicationSelectionBean;

    /**
     * Default Constructor.
     */
    public MaintainLetterTemplate() {
    }

    /**
     * Initializes this bean.
     */
    @PostConstruct
    public void init() {
        letterTemplate = new LetterTemplate();
        letterTemplateSample = new LetterTemplatePreviewSample();
        clear();
    }

    public void resetData() {
        if (!FacesContext.getCurrentInstance().getPartialViewContext().isAjaxRequest()) {
            init();
        }
    }

    /**
     * Preview the letters for the selected letter template type.
     *
     * @return One of three following values:
     * <ul>
     * <li> SUCCESS
     * <li> WARNING
     * <li> ERROR
     * </ul>
     */
    public String previewLetter() {
        nullify();
        if (!validateLetterTemplate()) {
            return null;
        }

        Result result = generateLetters(false);
        if (result.equals(Result.SUCCESS)) {
        } else {
            addErrorMessage(bundle.getString("letterTemplate.PreviewError"));
        }
        letterTemplateSample = new LetterTemplatePreviewSample();
        return result.toString();
    }

    private List<JasperLetter> createPrescriptionLetter() {
        JasperLetter jasperLetter;
        Letter sampleLetter = letterTemplateSample.getSampleLetter();
        sampleLetter.setPrescriptionsList(letterTemplateSample.getPreviewPrescriptions());
        // jasper report letter type to set with sample letters
        // based on the letter template type selected
        jasperLetter = new JasperLetter(sampleLetter);
        jasperLetter.setLetter(sampleLetter);

        List<JasperLetter> lettersToPrint = new ArrayList<>();
        lettersToPrint.add(jasperLetter);

        return lettersToPrint;
    }

    private List<JasperLetter> createProstheticAndOrthoticLetter() {
        JasperLetter jasperLetter;
        Letter sampleLetter = letterTemplateSample.getSampleLetter();
        sampleLetter.setProsthOrthList(letterTemplateSample.getPreviewProsthOrth());
        // jasper report letter type to set with sample letters
        // based on the letter template type selected
        jasperLetter = new JasperLetter(sampleLetter);
        jasperLetter.setLetter(sampleLetter);

        List<JasperLetter> lettersToPrint = new ArrayList<>();
        lettersToPrint.add(jasperLetter);

        return lettersToPrint;
    }

    private List<JasperLetterMsp> createSvaLetter() {
        JasperLetterMsp jasperLetter;
        LetterMspDetail sampleLetter = letterTemplateSample.getSampleLetterMsp();
        sampleLetter.setServiceMspList(letterTemplateSample.getPreviewServiceMsp());
        // jasper report letter type to set with sample letters
        // based on the letter template type selected
        jasperLetter = new JasperLetterMsp(null, sampleLetter);
        jasperLetter.setLetterMsp(sampleLetter);

        List<JasperLetterMsp> lettersToPrint = new ArrayList<>();
        lettersToPrint.add(jasperLetter);

        return lettersToPrint;
    }

    private List<JasperLetter> createPlanMLetter() {
        JasperLetter jasperLetter;
        Letter sampleLetter = letterTemplateSample.getSampleLetter();
        sampleLetter.setPlansMList(letterTemplateSample.getPreviewPlanM());
        // jasper report letter type to set with sample letters
        // based on the letter template type selected
        jasperLetter = new JasperLetter(sampleLetter);
        jasperLetter.setLetter(sampleLetter);

        List<JasperLetter> lettersToPrint = new ArrayList<>();
        lettersToPrint.add(jasperLetter);

        return lettersToPrint;
    }

    /**
     * Performs report generation for the selected letter template type and saves the JasperPrint object in session for
     * further printing.
     *
     * @return One of three following values:
     * <ul>
     * <li> SUCCESS
     * <li> WARNING
     * <li> ERROR
     * </ul>
     */
    private Result generateLetters(boolean showDialog) {

        // create new letterPreview object that has the selected 
        // LetterTemplate instance for preview function
        JasperLetterMspCollection letterPreview = new JasperLetterMspCollection(letterTemplate);
        letterPreview.setLetterTemplate(letterTemplate);

        // sample project with info from LetterTemplateSample instance for preview
        Project sampleProject = letterTemplateSample.getSampleProject();
        letterPreview.setProjectName(sampleProject.getName());
        letterPreview.setProjectMonth(sampleProject.getProjectMonth());
        letterPreview.setProjectYear(sampleProject.getProjectYear());
        String reportName;
        String templateName = letterPreview.getLetterTemplate().getLetterTemplateTypeId().getName();
        String fileName = sampleProject.getName();
        // depending on the template type selection set the corresponding
        // prescription/prosthandorth/planM list of claims and assign the report type/name
        switch (templateName.trim()) {
            case "PRESCRIPTIONS":
                letterPreview.setLetters(createPrescriptionLetter());
                reportName = "PrescriptionLetter.jasper";
                fileName += "_PrescriptionLetters";
                break;
            case "PROSTHETICS AND ORTHOTICS":
                letterPreview.setLetters(createProstheticAndOrthoticLetter());
                reportName = "ProstheticAndOrthoticLetter.jasper";
                fileName += "_ProstheticAndOrthoticLetters";
                break;
            case "SELECT SERVICE":
                letterPreview.setLettersMsp(createSvaLetter());
                reportName = "SelectServiceLetter.jasper";
                fileName += "_SelectServiceLetter";
                break;
            case "SELECT SERVICE QUESTIONS":
                letterPreview.setLettersMsp(createSvaLetter());
                reportName = "SelectServiceQuestionsLetter.jasper";
                fileName += "_SelectServiceQuestionsLetter";
                break;
            case "RANDOM MONTHLY":
                letterPreview.setLettersMsp(createSvaLetter());
                reportName = "RandomMonthlyLetter.jasper";
                fileName += "_RandomMonthlyLetter";
                break;
            default:
                letterPreview.setLetters(createPlanMLetter());
                createPlanMLetter();
                reportName = "PlanMLetter.jasper";
                fileName += "_PlanMLetters";
        }

        fileName += "_" + new java.text.SimpleDateFormat("ddMMyyyy-HHmmss").format(new Date());
        fileName += ".pdf";
        logger.log(Level.INFO, "Report file for the sample project: "
                .concat(sampleProject.getName())
                .concat(" is ")
                .concat(reportName));
        logger.log(Level.INFO, "PDF File name: ".concat(fileName));

        try {
            logger.log(Level.INFO, "Generating the report");
            JRBeanCollectionDataSource ds;
            JasperPrint jprint;

            if (letterPreview.getLetters() != null) {
                ds = new JRBeanCollectionDataSource(letterPreview.getLetters());
                jprint = JasperFillManager.fillReport(
                        Thread.currentThread().getContextClassLoader().getResourceAsStream(reportName),
                        letterPreview.getParameters(), ds);
            } else {
                ds = new JRBeanCollectionDataSource(letterPreview.getLettersMsp());
                jprint = JasperFillManager.fillReport(
                        Thread.currentThread().getContextClassLoader().getResourceAsStream(reportName),
                        letterPreview.getParametersMsp(), ds);
            }

            // Export to the session
            logger.log(Level.INFO, "Exporting the report to the user session");

            FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put(SESSION_JPRINT, jprint);
            FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put(SESSION_FILENAME, fileName);
            FacesContext.getCurrentInstance().getExternalContext().getSessionMap().put(SESSION_SHOW_DIALOGUE, showDialog);
            if (letterPreview.getLetters() != null) {
                logger.log(Level.INFO, "PDF export to the session completed; "
                        .concat(String.valueOf(letterPreview.getLetters().size()))
                        .concat(" letter ").concat((letterPreview.getLetters().size() == 1 ? "" : "s"))
                        .concat(" printed"));
            } else {
                logger.log(Level.INFO, "PDF export to the session completed; "
                        .concat(String.valueOf(letterPreview.getLettersMsp().size()))
                        .concat(" letter ").concat((letterPreview.getLettersMsp().size() == 1 ? "" : "s"))
                        .concat(" printed"));
            }
            // Print/preview letter template from the user session
            printLetterTemplateFromSession();
            return Result.SUCCESS;
        } catch (JRException e) {
            logger.log(Level.SEVERE, "Jasper Report exception occured when previewing letter template.", e);
        }

        return Result.SUCCESS;
    }

    /**
     * Print letter template type instance from user session into the response output.
     *
     * @param jprint JasperPrint instance with the report
     * @param fileName File name for the report
     * @param showDialog If true then show the print dialog when PDF is opened
     * @throws JRException
     * @throws IOException
     */
    private void printToResponse(JasperPrint jprint, String fileName,
            boolean showDialog) throws JRException, IOException {

        ByteArrayOutputStream pdfStream = new ByteArrayOutputStream();
        JasperExportManager.exportReportToPdfStream(jprint, pdfStream);
        TemplateID = UUID.randomUUID().toString();
        content = DefaultStreamedContent.builder().contentType("application/pdf").stream(() -> (new ByteArrayInputStream(pdfStream.toByteArray()))).build();
    }

    /**
     * Print letter template type report from the user session into the response output.
     */
    public void printLetterTemplateFromSession() {

        try {
            if (FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get(SESSION_JPRINT) != null) {
                logger.log(Level.INFO, "Printing letter template sample from JasperPrint stored in the user session");

                JasperPrint jprint = (JasperPrint) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get(SESSION_JPRINT);
                String fileName = (String) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get(SESSION_FILENAME);
                Boolean showDialog = (Boolean) FacesContext.getCurrentInstance().getExternalContext().getSessionMap().get(SESSION_SHOW_DIALOGUE);

                printToResponse(jprint, fileName, showDialog);

                FacesContext.getCurrentInstance().getExternalContext().getSessionMap().remove(SESSION_JPRINT);
                FacesContext.getCurrentInstance().getExternalContext().getSessionMap().remove(SESSION_FILENAME);
                FacesContext.getCurrentInstance().getExternalContext().getSessionMap().remove(SESSION_SHOW_DIALOGUE);
                addInfoMessage(bundle.getString("letterTemplate.PreviewSuccess"));
                logger.log(Level.INFO, "Letter template successfully previewed");
            }
        } catch (JRException e) {
            logger.log(Level.SEVERE, "Jasper exception occured when filling the report", e);
        } catch (IOException ioe) {
            logger.log(Level.SEVERE, "I/O exception when filling the report", ioe);
        }
    }

    /**
     * Updates an existing record.
     */
    public String save() {
        nullify();
        if (!validateLetterTemplate()) {
            return null;
        }
        letterTemplateFacade.edit(letterTemplate);
        addInfoMessage(bundle.getString("letterTemplate.SavedSuccess"));
        setupLetterType();
        return null;
    }

    /**
     * Clears the form depending on the logged user role.
     */
    public String clear() {
        letterTemplate = new LetterTemplate();
        logger.log(Level.INFO, "getUserRole() name = ".concat(getUserRole()));
        logger.log(Level.INFO, "applicationSelectionBean app name = ".concat(applicationSelectionBean.getApp()));

        if (("SYSADMIN".equals(getUserRole()))
                || ("Super_Sysadmin".equals(getUserRole()) && "pacl".equals(applicationSelectionBean.getApp()))) {
            letterTemplate.setLetterTemplateTypeId(codesLetterTemplateTypeFacade.findByName(PaclConstants.PHARMACY_LETTER_TYPE));
        } else if ("EACL_Sysadmin".equals(getUserRole())
                || ("Super_Sysadmin".equals(getUserRole()) && "sva".equals(applicationSelectionBean.getApp()))) {
            letterTemplate.setLetterTemplateTypeId(codesLetterTemplateTypeFacade.findByName(PaclConstants.RANDOM_LTR_TEMPLATE_TYPE));
        }
        letterTemplate = letterTemplateFacade.findByLetterTemplateTypeId(letterTemplate.getLetterTemplateTypeId());
        logger.log(Level.INFO, "letter template name = ".concat(letterTemplate.getName()));
        return null;
    }

    /**
     * Cancel screen changes on the form.
     */
    public String cancel() {
        letterTemplateSample = new LetterTemplatePreviewSample();
        // reset the uploaded file components to null values;
        ministryLogoFile = null;
        senderSignatureFile = null;
        setupLetterType();
        logger.log(Level.INFO, "Cancel letter template changes = ".concat(letterTemplate.getName()));
        return null;
    }

    /**
     * Setup letter template type selected.
     */
    public String setupLetterType() {
        if (letterTemplate.getLetterTemplateTypeId() != null) {
            letterTemplate = letterTemplateFacade.findByLetterTemplateTypeId(letterTemplate.getLetterTemplateTypeId());
            logger.log(Level.INFO, "letter template selected = ".concat(letterTemplate.getName()));
        }
        return null;
    }

    /**
     * Form validation method when save/preview changes for letter template.
     *
     * @return boolean
     */
    public final boolean validateLetterTemplate() {

        boolean isNotError = true;
        // check if letter template name input is not empty before save/preview
        if (!Util.notEmpty(letterTemplate.getName())) {
            addErrorMessage("Letter Template Name: Value is required before Save or Preview.");
            isNotError = false;
        }
        // check if letter template type was selected before save/preview
        if (letterTemplate.getLetterTemplateTypeId().getId().equals(new Long("-1"))
                || letterTemplate.getLetterTemplateTypeId() == null) {
            addErrorMessage("Letter Template Type must be selected.");
            isNotError = false;
        }

        return isNotError;
    }

    /**
     * Upload images for sender signature graphic.
     *
     * @param event FileUploadEvent - richfaces file upload event
     * @throws Exception e - ValidatorException exception thrown
     *
     * @return String
     */
    public String uploadSenderSignatureFile(FileUploadEvent event) throws Exception {
        senderSignatureFile = event.getFile();
        uploadFile(event);
        letterTemplate.setSenderSignatureGraphic(senderSignatureFile.getContent());
        return null;
    }

    /**
     * Upload images for ministry logo.
     *
     * @param event FileUploadEvent - Primefaces file upload event
     * @throws Exception e - ValidatorException exception thrown
     *
     * @return String
     */
    public String uploadMinistryLogoFile(FileUploadEvent event) throws Exception {
        ministryLogoFile = event.getFile();
        uploadFile(event);
        letterTemplate.setMinistryLogo(ministryLogoFile.getContent());
        return null;
    }

    /**
     * Upload file for sender signature graphic and ministry Logo images.
     *
     * @param event FileUploadEvent - Primefaces file upload event
     * @throws Exception e - ValidatorException exception thrown
     *
     * @return String
     */
    public String uploadFile(FileUploadEvent event) throws Exception {
        UploadedFile fileToUpload = event.getFile();
        String name = fileToUpload.getFileName();

        if (name.contains("\\")) {
            name = name.substring(name.lastIndexOf("\\") + 1);
        }
        if (name.length() > PaclConstants.MAX_FILENAME_LENGTH_UPLOAD) {
            String message = "Filename for file to upload must be "
                    + PaclConstants.MAX_FILENAME_LENGTH_UPLOAD
                    + " characters or less.";
            addErrorMessage(message);
            throw new ValidatorException(new FacesMessage(message));
        }
        // validate file size (should not be greater than 100 Kb)
        logger.log(Level.INFO, "Upload file size: ".concat(String.valueOf(fileToUpload.getSize())));
        if (fileToUpload.getSize() > PaclConstants.MAX_SIZE_UPLOAD_FILE) {
            String message = "File size exceeds maximum allowed of 100 Kb.";
            addErrorMessage(message);
            throw new ValidatorException(new FacesMessage(message));
        }

        return null;
    }

    /**
     * Nullifies any child objects which don't have valid PKs set.
     */
    private void nullify() {
        if (letterTemplate.getLetterTemplateTypeId() != null
                && letterTemplate.getLetterTemplateTypeId().getId() == null) {
            letterTemplate.setLetterTemplateTypeId(null);
        }
    }

    /* Getters and Setters */
    public LetterTemplate getLetterTemplate() {
        return letterTemplate;
    }

    public void setLetterTemplate(LetterTemplate letterTemplate) {
        this.letterTemplate = letterTemplate;
    }

    public UploadedFile getSenderSignatureFile() {
        return senderSignatureFile;
    }

    public void setSenderSignatureFile(UploadedFile senderSignatureFile) {
        this.senderSignatureFile = senderSignatureFile;
    }

    public UploadedFile getMinistryLogoFile() {
        return ministryLogoFile;
    }

    public void setMinistryLogoFile(UploadedFile ministryLogoFile) {
        this.ministryLogoFile = ministryLogoFile;
    }

    public void changeLetterTemplateType(ValueChangeEvent e) {
        logger.log(Level.INFO, "letter template selected value = ".concat(e.getNewValue().toString()));
        letterTemplate.setLetterTemplateTypeId(codesLetterTemplateTypeFacade.find(e.getNewValue()));
        setupLetterType();
    }

    public LetterTemplatePreviewSample getLetterTemplateSample() {
        return letterTemplateSample;
    }

    public void setLetterTemplateSample(LetterTemplatePreviewSample letterTemplateSample) {
        this.letterTemplateSample = letterTemplateSample;
    }

    public String getTemplateID() {
        return TemplateID;
    }

    public void setTemplateID(String TemplateID) {
        this.TemplateID = TemplateID;
    }

    public StreamedContent getContent() throws IOException {
        if (content != null) {
            content.getStream().get().reset();
        }
        return content;
    }

    public void setContent(StreamedContent content) {
        this.content = content;
    }

}
