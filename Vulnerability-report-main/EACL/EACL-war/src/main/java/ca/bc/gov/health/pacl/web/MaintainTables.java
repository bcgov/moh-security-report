/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.web;

import ca.bc.gov.health.jsf.BaseBean;
import static ca.bc.gov.health.jsf.BaseBean.addErrorMessage;
import static ca.bc.gov.health.jsf.BaseBean.addInfoMessage;
import static ca.bc.gov.health.jsf.BaseBean.addWarnMessage;
import ca.bc.gov.health.jsf.NaturalOrderComparator;
import ca.bc.gov.health.jsf.SelectItemHelper;
import ca.bc.gov.health.pacl.ejb.entity.CodesFeeItemExcl;
import ca.bc.gov.health.pacl.ejb.entity.CodesFeeItemLongExcl;
import ca.bc.gov.health.pacl.ejb.entity.CodesPayeeExcl;
import ca.bc.gov.health.pacl.ejb.entity.CodesPracExcl;
import ca.bc.gov.health.pacl.ejb.entity.CodesSubscriberExcl;
import ca.bc.gov.health.pacl.ejb.session.CodesFeeItemExclFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.CodesFeeItemLongExclFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.CodesPayeeExclFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.CodesPracExclFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.CodesSubscriberExclFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.context.FacesContext;
import jakarta.faces.model.SelectItem;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import jakarta.servlet.http.HttpServletResponse;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.primefaces.component.datatable.DataTable;
import org.primefaces.event.SelectEvent;

/**
 *
 * @author Michael.Tremblay
 */
@Named("maintainTables")
@ViewScoped
public class MaintainTables extends BaseBean {

    private static ResourceBundle bundle = ResourceBundle.getBundle("MessageResources", FacesContext.getCurrentInstance().getViewRoot().getLocale());
    private static Logger logger = Logger.getLogger(MaintainTables.class.getName());

    /**
     * Facade for persistence.
     */
    @EJB
    private transient CodesFeeItemExclFacadeLocal feeItemsFacade;
    @EJB
    private transient CodesFeeItemLongExclFacadeLocal feeItemsLongFacade;
    @EJB
    private transient CodesPayeeExclFacadeLocal payeeFacade;
    @EJB
    private transient CodesPracExclFacadeLocal pracFacade;
    @EJB
    private transient CodesSubscriberExclFacadeLocal subFacade;

    //Entities to be modified or added into the database
    private CodesFeeItemExcl feeItemExcl;
    private CodesFeeItemLongExcl feeItemLongExcl;
    private CodesPayeeExcl payeeExcl;
    private CodesPracExcl pracExcl;
    private CodesSubscriberExcl subExcl;

    private String feeItemCode;
    private String feeItemCodeTemp;
    private String feeItemCodeSearch;
    private String feeItemShortDesc;
    private String feeItemLongDescCode;
    private String feeItemLongDescCodeTemp;
    private String feeItemLongDescCodeSearch;
    private String feeItemLongDesc;
    private String subPhn;
    private String subPhnTemp;
    private String subPhnSearch;
    private String pracBillingNumber;
    private String pracBillingNumberTemp;
    private String pracBillingNumberSearch;
    private String payeeIdt;
    private String payeeIdtTemp;
    private String payeeIdtSearch;
    private Date startDate;
    private Date endDate;
    private String exclDesc;

    /**
     * Lists of items to display
     */
    private List<CodesFeeItemExcl> feeItemsList = new ArrayList<>();
    private List<CodesFeeItemLongExcl> feeItemsLongList = new ArrayList<>();
    private List<CodesPayeeExcl> payeeList = new ArrayList<>();
    private List<CodesPracExcl> pracList = new ArrayList<>();
    private List<CodesSubscriberExcl> subList = new ArrayList<>();


    /*
     * Selectors
     */
    private CodesFeeItemExcl feeItemExclSel;
    private CodesFeeItemLongExcl feeItemLongExclSel;
    private CodesPayeeExcl payeeExclSel;
    private CodesPracExcl pracExclSel;
    private CodesSubscriberExcl subExclSel;

    private List<CodesFeeItemExcl> feeItemsSelected = new ArrayList<>();
    private List<CodesFeeItemLongExcl> feeItemsLongSelected = new ArrayList<>();
    private List<CodesPayeeExcl> payeeSelected = new ArrayList<>();
    private List<CodesPracExcl> pracSelected = new ArrayList<>();
    private List<CodesSubscriberExcl> subSelected = new ArrayList<>();

    //Value to render the proper table panel
    private boolean displayFeeItems = false;
    private boolean displayFeeItemsLong = false;
    private boolean displayPayee = false;
    private boolean displayPrac = false;
    private boolean displaySub = false;
    private String panelToDisplay;

    //Verify if exclusion is checked
    private boolean exclusionCheck = false;

    //String Buffer to write to CSV file
    private StringBuilder reportCSV;

    //Constants for panel display
    private static final String FEE_ITEM_PANEL = "1";
    private static final String FEE_ITEM_LONG_PANEL = "2";
    private static final String SUB_PANEL = "3";
    private static final String PRAC_PANEL = "4";
    private static final String PAYEE_PANEL = "5";

    private List<SelectItem> codesFeeItemLongList;

    private NaturalOrderComparator comparator = new NaturalOrderComparator();

    //Default Constructor
    public MaintainTables() {
    }

    /**
     * Initializes this bean after injection is complete.
     */
    @PostConstruct
    public void init() {
        panelToDisplay = FEE_ITEM_PANEL;

        feeItemExcl = new CodesFeeItemExcl();
        feeItemLongExcl = new CodesFeeItemLongExcl();
        subExcl = new CodesSubscriberExcl();
        pracExcl = new CodesPracExcl();
        payeeExcl = new CodesPayeeExcl();

        codesFeeItemLongList = SelectItemHelper.buildSelectItemList(feeItemsLongFacade.findAll(), "fitmDscrCd", "id");

        Collections.sort(codesFeeItemLongList, new NaturalOrderComparator());

        changePanelDisplay();
    }

    /**
     * Verify if the letterPrinted value is set to Y
     *
     * @param feeItem
     * @return
     */
    public boolean verifyFeeItemExclusionTag(CodesFeeItemExcl feeItem) {
        if (feeItem.getExclusionFlag() == null) {
            exclusionCheck = false;
        } else {
            exclusionCheck = feeItem.getExclusionFlag().equals('Y');
        }
        return exclusionCheck;
    }

    /**
     * Enables the panel to display depending on the menu selection
     */
    public void changePanelDisplay() {

        startDate = null;
        endDate = null;
        exclDesc = "";

        displayFeeItems = false;
        displayFeeItemsLong = false;
        displayPayee = false;
        displayPrac = false;
        displaySub = false;
        
        feeItemsLongList = new ArrayList<>();
        subList = new ArrayList<>();
        pracList = new ArrayList<>();
        payeeList = new ArrayList<>();
        feeItemsList = new ArrayList<>();
        
        feeItemLongDescCodeSearch = "";
        subPhnSearch = null;
        pracBillingNumberSearch = "";
        payeeIdtSearch = "";
        feeItemCodeSearch = "";
        
        switch (panelToDisplay.trim()) {
            case FEE_ITEM_LONG_PANEL:
                displayFeeItemsLong = true;
                break;
            case SUB_PANEL:
                displaySub = true;
                break;
            case PRAC_PANEL:
                displayPrac = true;
                break;
            case PAYEE_PANEL:
                displayPayee = true;
                break;
            case FEE_ITEM_PANEL:
                displayFeeItems = true;
                break;
        }
    }

    /**
     * Method used to search exclusions from the database
     */
    public void search() {

        feeItemCode = null;
        feeItemShortDesc = null;
        feeItemLongDescCode = null;
        feeItemLongDesc = null;
        subPhn = null;
        pracBillingNumber = null;
        payeeIdt = null;
        startDate = null;
        endDate = null;
        exclDesc = null;

        switch (panelToDisplay.trim()) {
            case FEE_ITEM_LONG_PANEL:
                searchFeeItemLong();
                break;
            case SUB_PANEL:
                searchSub();
                break;
            case PRAC_PANEL:
                searchPrac();
                break;
            case PAYEE_PANEL:
                searchPayee();
                break;
            case FEE_ITEM_PANEL:
                searchFeeItem();
                break;
        }
    }

    /**
     * Method used to search fee items with the user's input
     */
    public void searchFeeItem() {

        DataTable dataTable = (DataTable) FacesContext.getCurrentInstance().getViewRoot().findComponent("tableMaintenanceForm:feeItemsTable");
        dataTable.reset();

        //Replacing * by % for DB purposes
        feeItemCodeSearch = feeItemCodeSearch.replaceAll("\\*", "%");

        feeItemsList = new ArrayList<>();
        feeItemsList = feeItemsFacade.findByFeeCode(feeItemCodeSearch);

        if (feeItemsList.isEmpty()) {
            addWarnMessage(bundle.getString("maintainTables.noFeeItems"));
        }
        feeItemCodeSearch = feeItemCodeSearch.replaceAll("%", "\\*");
    }

    /**
     * Method used to search fee item long descriptions with the user's input
     */
    public void searchFeeItemLong() {

        DataTable dataTable = (DataTable) FacesContext.getCurrentInstance().getViewRoot().findComponent("tableMaintenanceForm:feeItemsLongTable");
        dataTable.reset();

        //Replacing * by % for DB purposes
        feeItemLongDescCodeSearch = feeItemLongDescCodeSearch.replaceAll("\\*", "%");

        feeItemsLongList = new ArrayList<>();
        feeItemsLongList = feeItemsLongFacade.findByFeeLongCode(feeItemLongDescCodeSearch);

        if (feeItemsLongList.isEmpty()) {
            addWarnMessage(bundle.getString("maintainTables.noFeeItemsLong"));
        }

        feeItemLongDescCodeSearch = feeItemLongDescCodeSearch.replaceAll("%", "\\*");
    }

    /**
     * Method used to search subscribers with the user's input
     */
    public String searchSub() {

        DataTable dataTable = (DataTable) FacesContext.getCurrentInstance().getViewRoot().findComponent("tableMaintenanceForm:subscriberTable");
        dataTable.reset();

        //Replacing * by % for DB purposes
        subPhnSearch = subPhnSearch.replaceAll("\\*", "%");

        subList = new ArrayList<>();
        subList = subFacade.findByPhn(subPhnSearch);

        if (subList.isEmpty()) {
            addWarnMessage(bundle.getString("maintainTables.noPhns"));
        }
        subPhnSearch = subPhnSearch.replaceAll("%", "\\*");
        return null;
    }

    /**
     * Method used to search practitioners with the user's input
     */
    public void searchPrac() {

        DataTable dataTable = (DataTable) FacesContext.getCurrentInstance().getViewRoot().findComponent("tableMaintenanceForm:practitionerTable");
        dataTable.reset();

        //Replacing * by % for DB purposes
        pracBillingNumberSearch = pracBillingNumberSearch.replaceAll("\\*", "%");

        pracList = new ArrayList<>();
        pracList = pracFacade.findByPracBillingNumber(pracBillingNumberSearch);

        if (pracList.isEmpty()) {
            addWarnMessage(bundle.getString("maintainTables.noPracs"));
        }
        pracBillingNumberSearch = pracBillingNumberSearch.replaceAll("%", "\\*");
    }

    /**
     * Method used to search payess with the user's input
     */
    public void searchPayee() {

        DataTable dataTable = (DataTable) FacesContext.getCurrentInstance().getViewRoot().findComponent("tableMaintenanceForm:payeeTable");
        dataTable.reset();

        //Replacing * by % for DB purposes
        payeeIdtSearch = payeeIdtSearch.replaceAll("\\*", "%");

        payeeList = new ArrayList<>();
        payeeList = payeeFacade.findByPayeeCode(payeeIdtSearch);

        if (payeeList.isEmpty()) {
            addWarnMessage(bundle.getString("maintainTables.noPayess"));
        }
        payeeIdtSearch = payeeIdtSearch.replaceAll("%", "\\*");
    }

    /**
     * Sets the selected object infos to be displayed
     *
     * @param event
     */
    public void onRowSelect(SelectEvent event) {
        
        switch (panelToDisplay.trim()) {
            case FEE_ITEM_LONG_PANEL:
                feeItemLongExcl = new CodesFeeItemLongExcl();
                feeItemLongExcl = (CodesFeeItemLongExcl) event.getObject();
                feeItemLongDescCode = feeItemLongExcl.getFitmDscrCd();
                feeItemLongDesc = feeItemLongExcl.getFitmLongDscr();
                feeItemLongDescCodeTemp = feeItemLongDescCode;
                break;
            case SUB_PANEL:
                subExcl = new CodesSubscriberExcl();
                subExcl = (CodesSubscriberExcl) event.getObject();
                subPhn = subExcl.getPhn();
                startDate = subExcl.getStartDate();
                endDate = subExcl.getEndDate();
                exclDesc = subExcl.getExclDesc();
                subPhnTemp = subPhn;
                break;
            case PRAC_PANEL:
                pracExcl = new CodesPracExcl();
                pracExcl = (CodesPracExcl) event.getObject();
                pracBillingNumber = pracExcl.getPracBllgNum();
                startDate = pracExcl.getStartDate();
                endDate = pracExcl.getEndDate();
                exclDesc = pracExcl.getExclDesc();
                pracBillingNumberTemp = pracBillingNumber;
                break;
            case PAYEE_PANEL:
                payeeExcl = new CodesPayeeExcl();
                payeeExcl = (CodesPayeeExcl) event.getObject();
                payeeIdt = payeeExcl.getPayeeIdnt();
                startDate = payeeExcl.getStartDate();
                endDate = payeeExcl.getEndDate();
                exclDesc = payeeExcl.getExclDesc();
                payeeIdtTemp = payeeIdt;
                break;
            case FEE_ITEM_PANEL:
                feeItemExcl = new CodesFeeItemExcl();
                feeItemExcl = (CodesFeeItemExcl) event.getObject();
                feeItemCode = feeItemExcl.getFitmCd();
                feeItemLongDescCode = feeItemsLongFacade.findByCode(feeItemExcl.getFitmDscrCd()).getId().toString();
                feeItemShortDesc = feeItemExcl.getFitmShortDscr();
                feeItemCodeTemp = feeItemCode;
                verifyFeeItemExclusionTag(feeItemExcl);
                break;
        }
    }

    /**
     * Method used to update the Selected Object into the database
     */
    public void update() {

        switch (panelToDisplay.trim()) {
            case FEE_ITEM_LONG_PANEL:
                editFeeItemLong();
                break;
            case SUB_PANEL:
                editSubExcl();
                break;
            case PRAC_PANEL:
                editPracExcl();
                break;
            case PAYEE_PANEL:
                editPayeeExcl();
                break;
            case FEE_ITEM_PANEL:
                editFeeItem();
                break;
        }
    }
//BCMOHAM-15859
    public boolean validateCharsNumAndAlphabet(String entry) {
        return entry.matches("^[a-zA-Z0-9]+$");
    }
    /*
    Validates that the characters are only numbers
    */
    public boolean validateChars(String entry) {
        return entry.matches("^[0-9]+$");
    }

    /**
     * Method that will edit the fee item while verifying the exclusion flag
     */
    public String editFeeItem() {

        if (!validateChars(feeItemCode)) {
            addErrorMessage("Fee Item Code " + bundle.getString("maintainTables.numeric"));
            return null;
        }

        if (!feeItemCode.equals(feeItemCodeTemp)) {
            addErrorMessage("Fee Item Code cannot be modified");
            return null;
        }
        if (exclusionCheck) {
            feeItemExcl.setExclusionFlag('Y');
        } else {
            feeItemExcl.setExclusionFlag('N');
        }

        feeItemExcl.setFitmCd(feeItemCode);
        feeItemExcl.setFitmDscrCd(getLongDescCode(feeItemLongDescCode));
        feeItemExcl.setFitmShortDscr(feeItemShortDesc);

        try {
            //Validates if fee code already exists if it has been modified in the screen.
            if (isFeeCodeExist()) {
                if (feeItemExcl.getFitmCd().equals(feeItemCodeTemp)) {
                    feeItemsFacade.edit(feeItemExcl);
                    addInfoMessage(bundle.getString("maintainTables.feeItemModified"));
                    logger.log(Level.INFO, "Fee Item has been modified. Fee Code : ".concat(feeItemExcl.getFitmCd()));
                    feeItemExcl = new CodesFeeItemExcl();
                    feeItemCode = "";
                    feeItemShortDesc = "";
                    feeItemLongDescCode = "";
                } else {
                    addErrorMessage(bundle.getString("maintainTables.feeItemExists"));
                }
            } else {
                feeItemsFacade.edit(feeItemExcl);
                addInfoMessage(bundle.getString("maintainTables.feeItemModified"));
                logger.log(Level.INFO, "Fee Item has been modified. Fee Code : ".concat(feeItemExcl.getFitmCd()));
                feeItemExcl = new CodesFeeItemExcl();
                feeItemCode = "";
                feeItemShortDesc = "";
                feeItemLongDescCode = "";
            }
        } catch (Exception e) {
            addErrorMessage(bundle.getString("maintainTables.systemError"));
        }
        return null;
    }

    /**
     * Verifies if feeCode exists in the database
     *
     * @return
     */
    public boolean isFeeCodeExist() {
        try {
            return feeItemsFacade.findFeeItemByCode(feeItemExcl.getFitmCd()).getId() != null;
        } catch (Exception e) {
            return true;
        }
    }

    /**
     * Method that will edit the fee item long
     */
    public String editFeeItemLong() {

        if (!validateChars(feeItemLongDescCode)) {
            addErrorMessage("Fee Item Long Description Code " + bundle.getString("maintainTables.numeric"));
            return null;
        }

        if (!feeItemLongDescCode.equals(feeItemLongDescCodeTemp)) {
            addErrorMessage("Fee Item Long Description Code cannot be modified");
            return null;
        }

        feeItemLongExcl.setFitmDscrCd(feeItemLongDescCode);
        feeItemLongExcl.setFitmLongDscr(feeItemLongDesc);

        try {
            if (isFeeCodeLongExist()) {
                if (feeItemLongExcl.getFitmDscrCd().equals(feeItemLongDescCodeTemp)) {
                    feeItemsLongFacade.edit(feeItemLongExcl);
                    addInfoMessage(bundle.getString("maintainTables.feeItemLongModified"));
                    logger.log(Level.INFO, "Fee Item Long Description has been modified. Long Description # : ".concat(feeItemLongExcl.getFitmDscrCd()));
                    feeItemLongExcl = new CodesFeeItemLongExcl();
                    feeItemLongDescCode = "";
                    feeItemLongDesc = "";
                } else {
                    addErrorMessage(bundle.getString("maintainTables.feeItemLongExists"));
                }
            } else {
                feeItemsLongFacade.edit(feeItemLongExcl);
                addInfoMessage(bundle.getString("maintainTables.feeItemLongModified"));
                logger.log(Level.INFO, "Fee Item Long Description has been modified. Long Description # : ".concat(feeItemLongExcl.getFitmDscrCd()));
                feeItemLongExcl = new CodesFeeItemLongExcl();
                feeItemLongDescCode = "";
                feeItemLongDesc = "";
            }
        } catch (Exception e) {
            addErrorMessage(bundle.getString("maintainTables.systemError"));
        }
        return null;
    }

    /**
     * Verifies if the long description exists in the database
     *
     * @return
     */
    public boolean isFeeCodeLongExist() {
        try {
            return feeItemsLongFacade.findByCode(feeItemLongExcl.getFitmDscrCd()).getId() != null;
        } catch (Exception e) {
            return true;
        }
    }

    /**
     * Method that will edit the subscriber exclusion
     */
    public String editSubExcl() {

        // mod check algorithm for the BC PHNs
//            if (!Util.modCheck(String.valueOf(subPhn))) {
//                addErrorMessage("The PHN submitted is not valid. "
//                    + "Please check the PHN and re-enter.");
//               return null;
//           }
        if (endDate.before(startDate)) {
            addErrorMessage(bundle.getString("maintainTables.endAfterStart"));
            return null;
        }

        subExcl.setPhn(subPhn);
        subExcl.setStartDate(startDate);
        subExcl.setEndDate(endDate);
        subExcl.setExclDesc(exclDesc);

        try {
            if (isSubExist()) {
                if (subExcl.getPhn().equals(subPhnTemp)) {
                    subFacade.edit(subExcl);
                    addInfoMessage(bundle.getString("maintainTables.phnModified"));
                    logger.log(Level.INFO, "Subscriber Exclusion has been modified. PHN : ".concat(String.valueOf(subExcl.getPhn())));
                    subExcl = new CodesSubscriberExcl();
                    subPhn = null;
                    startDate = new Date();
                    endDate = new Date();
                    exclDesc = "";
                } else {
                    addErrorMessage(bundle.getString("maintainTables.phnExists"));
                }
            } else {
                subFacade.edit(subExcl);
                addInfoMessage(bundle.getString("maintainTables.phnModified"));
                logger.log(Level.INFO, "Subscriber Exclusion has been modified. PHN : ".concat(String.valueOf(subExcl.getPhn())));
                subExcl = new CodesSubscriberExcl();
                subPhn = null;
                startDate = new Date();
                endDate = new Date();
                exclDesc = "";
            }
        } catch (Exception e) {
            addErrorMessage(bundle.getString("maintainTables.systemError"));
        }
        return null;
    }

    /**
     * Verifies if sub exclusion already exists
     *
     * @return
     */
    public boolean isSubExist() {
        try {
            return subFacade.findSubscriberByPHN(subExcl.getPhn()).getId() != null;
        } catch (Exception e) {
            return true;
        }
    }

    /**
     * Method that will edit the practitioner exclusion
     *
     * @return
     */
    public String editPracExcl() {

        if (!validateCharsNumAndAlphabet(pracBillingNumber)) {
            addErrorMessage("Practitioner Code " + bundle.getString("maintainTables.numeric"));
            return null;
        }

        if (endDate.before(startDate)) {
            addErrorMessage(bundle.getString("maintainTables.endAfterStart"));
            return null;
        }

        pracExcl.setPracBllgNum(pracBillingNumber);
        pracExcl.setStartDate(startDate);
        pracExcl.setEndDate(endDate);
        pracExcl.setExclDesc(exclDesc);

        try {
            if (isPracExist()) {
                if (pracExcl.getPracBllgNum().equals(pracBillingNumberTemp)) {
                    pracFacade.edit(pracExcl);
                    addInfoMessage(bundle.getString("maintainTables.pracModified"));
                    logger.log(Level.INFO, "Practitioner Exclusion has been modified. Practitioner billing # : ".concat(pracExcl.getPracBllgNum()));
                    pracExcl = new CodesPracExcl();
                    pracBillingNumber = "";
                    startDate = new Date();
                    endDate = new Date();
                    exclDesc = "";
                } else {
                    addErrorMessage(bundle.getString("maintainTables.pracExists"));
                }
            } else {
                pracFacade.edit(pracExcl);
                addInfoMessage(bundle.getString("maintainTables.pracModified"));
                logger.log(Level.INFO, "Practitioner Exclusion has been modified. Practitioner billing # : ".concat(pracExcl.getPracBllgNum()));
                pracExcl = new CodesPracExcl();
                pracBillingNumber = "";
                startDate = new Date();
                endDate = new Date();
                exclDesc = "";
            }
        } catch (Exception e) {
            addErrorMessage(bundle.getString("maintainTables.systemError"));
        }
        return null;
    }

    /**
     * Verifies if prac exclusion exists in DB
     *
     * @return
     */
    public boolean isPracExist() {
        try {
            return pracFacade.findPracByNumber(pracExcl.getPracBllgNum()).getId() != null;
        } catch (Exception e) {
            return true;
        }
    }

    /**
     * Method that will edit the payee exclusion
     */
    public String editPayeeExcl() {

        if (endDate.before(startDate)) {
            addErrorMessage(bundle.getString("maintainTables.endAfterStart"));
            return null;
        }
        payeeExcl.setPayeeIdnt(payeeIdt);
        payeeExcl.setStartDate(startDate);
        payeeExcl.setEndDate(endDate);
        payeeExcl.setExclDesc(exclDesc);

        try {
            if (isPayeeExist()) {
                if (payeeExcl.getPayeeIdnt().equals(payeeIdtTemp)) {
                    payeeFacade.edit(payeeExcl);
                    addInfoMessage(bundle.getString("maintainTables.payeeModified"));
                    logger.log(Level.INFO, "Payee Exclusion has been modified. Payee # : ".concat(payeeExcl.getPayeeIdnt()));
                    payeeExcl = new CodesPayeeExcl();
                    payeeIdt = "";
                    startDate = new Date();
                    endDate = new Date();
                    exclDesc = "";
                } else {
                    addErrorMessage(bundle.getString("maintainTables.payeeExists"));
                }
            } else {
                payeeFacade.edit(payeeExcl);
                addInfoMessage(bundle.getString("maintainTables.payeeModified"));
                logger.log(Level.INFO, "Payee Exclusion has been modified. Payee # : ".concat(payeeExcl.getPayeeIdnt()));
                payeeExcl = new CodesPayeeExcl();
                payeeIdt = "";
                startDate = new Date();
                endDate = new Date();
                exclDesc = "";
            }
        } catch (Exception e) {
            addErrorMessage(bundle.getString("maintainTables.systemError"));
        }
        return null;
    }

    /**
     * Verifies if payee exclusion already exists
     *
     * @return
     */
    public boolean isPayeeExist() {
        try {
            return payeeFacade.findPayeeByCode(payeeExcl.getPayeeIdnt()).getId() != null;
        } catch (Exception e) {
            return true;
        }
    }

    /**
     * Method used to add new items to the database
     */
    public void add() {

        switch (panelToDisplay.trim()) {
            case FEE_ITEM_LONG_PANEL:
                createFeeItemLong();
                break;
            case SUB_PANEL:
                createSubExcl();
                break;
            case PRAC_PANEL:
                createPracExcl();
                break;
            case PAYEE_PANEL:
                createPayeeExcl();
                break;
            case FEE_ITEM_PANEL:
                createFeeItem();
                break;
        }
    }

    /**
     * Method that will create the fee item while verifying the exclusion flag
     *
     * @return
     */
    public String createFeeItem() {

        if (!validateChars(feeItemCode)) {
            addErrorMessage("Fee Item Code " + bundle.getString("maintainTables.numeric"));
            return null;
        }

        feeItemExcl = new CodesFeeItemExcl();

        feeItemExcl.setFitmCd(feeItemCode);
        feeItemExcl.setFitmDscrCd(getLongDescCode(feeItemLongDescCode));
        feeItemExcl.setFitmShortDscr(feeItemShortDesc);
        feeItemExcl.setCodesMaintCntrlId(1L);

        if (exclusionCheck) {
            feeItemExcl.setExclusionFlag('Y');
        } else {
            feeItemExcl.setExclusionFlag('N');
        }

        try {
            if (!isFeeCodeExist()) {
                feeItemsFacade.create(feeItemExcl);
                addInfoMessage(bundle.getString("maintainTables.feeItemCreated"));
                logger.log(Level.INFO, "Fee Item has been created. Fee Code : ".concat(feeItemExcl.getFitmCd()));
                feeItemsList.add(feeItemExcl);
                feeItemExcl = new CodesFeeItemExcl();

                feeItemCode = "";
                feeItemShortDesc = "";
                feeItemLongDescCode = "";
            } else {
                addErrorMessage(bundle.getString("maintainTables.feeItemExists"));
            }
        } catch (Exception e) {
            addErrorMessage(bundle.getString("maintainTables.systemError"));
        }
        return null;
    }

    /**
     * Method that will create the fee item long
     *
     * @return
     */
    public String createFeeItemLong() {

        if (!validateChars(feeItemLongDescCode)) {
            addErrorMessage("Fee Item Long Description Code " + bundle.getString("maintainTables.numeric"));
            return null;
        }

        feeItemLongExcl = new CodesFeeItemLongExcl();

        feeItemLongExcl.setFitmDscrCd(feeItemLongDescCode);
        feeItemLongExcl.setFitmLongDscr(feeItemLongDesc);
        feeItemLongExcl.setCodesMaintCntrlId(2L);

        try {
            if (!isFeeCodeLongExist()) {
                feeItemsLongFacade.create(feeItemLongExcl);
                addInfoMessage(bundle.getString("maintainTables.feeItemLongCreated"));
                logger.log(Level.INFO, "Fee Item Long Description has been created. Long Description # : ".concat(feeItemLongExcl.getFitmDscrCd()));
                feeItemsLongList.add(feeItemLongExcl);
                feeItemLongExcl = new CodesFeeItemLongExcl();
                feeItemLongDescCode = "";
                feeItemLongDesc = "";
            } else {
                addErrorMessage(bundle.getString("maintainTables.feeItemLongExists"));
            }
        } catch (Exception e) {
            addErrorMessage(bundle.getString("maintainTables.systemError"));
        }
        codesFeeItemLongList = SelectItemHelper.buildSelectItemList(feeItemsLongFacade.findAll(), "fitmDscrCd", "id");
        return null;
    }

    /**
     * Method that will create the subscriber exclusion
     */
    public String createSubExcl() {

        // mod check algorithm for the BC PHNs
//            if (!Util.modCheck(String.valueOf(subPhn))) {
//                addErrorMessage("The PHN submitted is not valid. "
//                    + "Please check the PHN and re-enter.");
//               return null;
//           }
        if (endDate.before(startDate)) {
            addErrorMessage(bundle.getString("maintainTables.endAfterStart"));
            return null;
        }
        subExcl = new CodesSubscriberExcl();

        subExcl.setPhn(subPhn);
        subExcl.setStartDate(startDate);
        subExcl.setEndDate(endDate);
        subExcl.setExclDesc(exclDesc);
        subExcl.setCodesMaintCntrlId(3L);

        try {
            if (!isSubExist()) {
                subFacade.create(subExcl);
                addInfoMessage(bundle.getString("maintainTables.phnCreated"));
                logger.log(Level.INFO, "Subscriber Exclusion has been created. PHN : ".concat(String.valueOf(subExcl.getPhn())));
                subList.add(subExcl);
                subExcl = new CodesSubscriberExcl();
                subPhn = null;
                startDate = new Date();
                endDate = new Date();
                exclDesc = "";
            } else {
                addErrorMessage(bundle.getString("maintainTables.phnExists"));
            }
        } catch (Exception e) {
            addErrorMessage(bundle.getString("maintainTables.systemError"));
        }

        return null;
    }

    /**
     * Method that will create the practitioner exclusion
     *
     * @return
     */
    public String createPracExcl() {

        if (endDate.before(startDate)) {
            addErrorMessage(bundle.getString("maintainTables.endAfterStart"));
            return null;
        }

        if (!validateCharsNumAndAlphabet(pracBillingNumber)) {
            addErrorMessage("Practitioner Code " + bundle.getString("maintainTables.numeric"));
            return null;
        }

        pracExcl = new CodesPracExcl();

        pracExcl.setPracBllgNum(pracBillingNumber);
        pracExcl.setStartDate(startDate);
        pracExcl.setEndDate(endDate);
        pracExcl.setExclDesc(exclDesc);
        pracExcl.setCodesMaintCntrlId(4L);

        try {
            if (!isPracExist()) {
                pracFacade.create(pracExcl);
                addInfoMessage(bundle.getString("maintainTables.pracCreated"));
                logger.log(Level.INFO, "Practitioner Exclusion has been created. Practitioner billing # : ".concat(pracExcl.getPracBllgNum()));
                pracList.add(pracExcl);
                pracExcl = new CodesPracExcl();
                pracBillingNumber = "";
                startDate = new Date();
                endDate = new Date();
                exclDesc = "";
            } else {
                addErrorMessage(bundle.getString("maintainTables.pracExists"));
            }
        } catch (Exception e) {
            addErrorMessage(bundle.getString("maintainTables.systemError"));
        }

        return null;
    }

    /**
     * Method that will create the payee exclusion
     */
    public String createPayeeExcl() {

        if (endDate.before(startDate)) {
            addErrorMessage(bundle.getString("maintainTables.endAfterStart"));
            return null;
        }

        payeeExcl = new CodesPayeeExcl();

        payeeExcl.setPayeeIdnt(payeeIdt);
        payeeExcl.setStartDate(startDate);
        payeeExcl.setEndDate(endDate);
        payeeExcl.setExclDesc(exclDesc);
        payeeExcl.setCodesMaintCntrlId(5L);

        try {
            if (!isPayeeExist()) {
                payeeFacade.create(payeeExcl);
                addInfoMessage(bundle.getString("maintainTables.payeeCreated"));
                logger.log(Level.INFO, "Payee Exclusion has been created. Payee # : ".concat(payeeExcl.getPayeeIdnt()));
                payeeList.add(payeeExcl);
                payeeExcl = new CodesPayeeExcl();
                payeeIdt = "";
                startDate = new Date();
                endDate = new Date();
                exclDesc = "";
            } else {
                addErrorMessage(bundle.getString("maintainTables.payeeExists"));
            }
        } catch (Exception e) {
            addErrorMessage(bundle.getString("maintainTables.systemError"));
        }

        return null;
    }

    /**
     * Method used to add new items to the database
     */
    public void print() {
        String fileName = "Exclusions";
        switch (panelToDisplay.trim()) {
            case FEE_ITEM_LONG_PANEL:
                generateFeeItemLongDescReportCSV();
                fileName = "Fee_Item_Long_Descriptions";
                break;
            case SUB_PANEL:
                generateSubExclReportCSV();
                fileName = "Subscribers";
                break;
            case PRAC_PANEL:
                generatePracExclReportCSV();
                fileName = "Practitioners";
                break;
            case PAYEE_PANEL:
                generatePayeeExclReportCSV();
                fileName = "Payees";
                break;
            case FEE_ITEM_PANEL:
                generateFeeItemReportCSV();
                fileName = "Fee_Items";
                break;
        }
        exportReportCSV(fileName);
    }

    /**
     *
     * Pre-generate the CSV Report for Fee Items
     */
    public void generateFeeItemReportCSV() {
        reportCSV = new StringBuilder();
        reportCSV.append("\"Fee Code\",\"Exclusion Tag\","
                + "\"Long Description Number\",\"Fee Code Short Description\"\n");

        for (CodesFeeItemExcl feeItem : feeItemsList) {

            reportCSV.append("\"").append(feeItem.getFitmCd()).append("\",");
            reportCSV.append("\"").append(feeItem.getExclusionFlag()).append("\",");
            reportCSV.append("\"").append(feeItem.getFitmDscrCd()).append("\",");
            reportCSV.append("\"").append(feeItem.getFitmShortDscr()).append("\"\n");
        }
        logger.log(Level.INFO, "Fee Item report has been generated");
    }

    /**
     *
     * Pre-generate the CSV Report for Fee Items Long Descriptions
     */
    public void generateFeeItemLongDescReportCSV() {
        reportCSV = new StringBuilder();
        reportCSV.append("\"Long Description Number\",\"Long Description\"\n");

        for (CodesFeeItemLongExcl feeItemLong : feeItemsLongList) {

            reportCSV.append("\"").append(feeItemLong.getFitmDscrCd()).append("\",");
            reportCSV.append("\"").append(feeItemLong.getFitmLongDscr()).append("\"\n");
        }
        logger.log(Level.INFO, "Fee Item Long Description report has been generated");
    }

    /**
     *
     * Pre-generate the CSV Report for subscribers
     */
    public void generateSubExclReportCSV() {
        reportCSV = new StringBuilder();
        reportCSV.append("\"PHN\",\"Start Date\","
                + "\"End Date\",\"Exclusion Description\"\n");

        for (CodesSubscriberExcl sub : subList) {

            reportCSV.append("\"").append(sub.getPhn()).append("\",");
            reportCSV.append("\"").append(dateFormatter(sub.getStartDate())).append("\",");
            reportCSV.append("\"").append(dateFormatter(sub.getEndDate())).append("\",");
            reportCSV.append("\"").append(sub.getExclDesc()).append("\"\n");
        }
        logger.log(Level.INFO, "Subscriber exclusions report has been generated");
    }

    /**
     *
     * Pre-generate the CSV Report for practitioners
     */
    public void generatePracExclReportCSV() {
        reportCSV = new StringBuilder();
        reportCSV.append("\"Practitioner Billing Number\",\"Start Date\","
                + "\"End Date\",\"Exclusion Description\"\n");

        for (CodesPracExcl prac : pracList) {

            reportCSV.append("\"").append(prac.getPracBllgNum()).append("\",");
            reportCSV.append("\"").append(dateFormatter(prac.getStartDate())).append("\",");
            reportCSV.append("\"").append(dateFormatter(prac.getEndDate())).append("\",");
            reportCSV.append("\"").append(prac.getExclDesc()).append("\"\n");
        }
        logger.log(Level.INFO, "Practitioner exclusions report has been generated");
    }

    /**
     *
     * Pre-generate the CSV Report for payees
     */
    public void generatePayeeExclReportCSV() {
        reportCSV = new StringBuilder();
        reportCSV.append("\"Payee Number\",\"Start Date\","
                + "\"End Date\",\"Exclusion Description\"\n");

        for (CodesPayeeExcl payee : payeeList) {

            reportCSV.append("\"").append(payee.getPayeeIdnt()).append("\",");
            reportCSV.append("\"").append(dateFormatter(payee.getStartDate())).append("\",");
            reportCSV.append("\"").append(dateFormatter(payee.getEndDate())).append("\",");
            reportCSV.append("\"").append(payee.getExclDesc()).append("\"\n");
        }
        logger.log(Level.INFO, "Payee exclusions report has been generated");
    }

    /**
     * Export exclusions report as CSV.
     *
     * @param filename
     * @return String
     */
    public String exportReportCSV(String filename) {

        HttpServletResponse response = (HttpServletResponse) FacesContext.getCurrentInstance().getExternalContext().getResponse();
        response.setContentType("text/csv");
        response.setHeader("content-disposition", "attachment;filename=" + filename + ".csv");
        try (PrintWriter out = response.getWriter()) {
            out.print(reportCSV.toString());
            addInfoMessage(bundle.getString("maintainTables.reportExportSuccess"));
        } catch (Exception e) {
            addErrorMessage(bundle.getString("maintainTables.reportExportError") + e.getMessage());
        }
        return null;
    }

    /**
     * Code to format the date to the specific format
     *
     * @param dateToFormat
     * @return String
     */
    public String dateFormatter(Date dateToFormat) {

        if (dateToFormat != null) {
            return new SimpleDateFormat("yyyy-MM-dd").format(dateToFormat);
        } else {
            return "";
        }
    }

    /**
     * Code to get the int value of the codes for the ordering in datatables
     *
     * @param code
     * @return long
     */
    public long getIntValueCode(String code) {

        try {
            if (!"".equals(code)) {
                return Long.parseLong(code);
            } else {
                return 0;
            }
        } catch (NumberFormatException e) {
            return 0;
        }
    }

    /**
     * Code to display the right long description code
     *
     * @return
     */
    public String getLongDescCode(String Id) {
        return feeItemsLongFacade.findById(Long.parseLong(Id)).getFitmDscrCd();
    }

    /*
    Getters and setters
     */
    public CodesFeeItemExcl getFeeItemExcl() {
        return feeItemExcl;
    }

    public void setFeeItemExcl(CodesFeeItemExcl feeItemExcl) {
        this.feeItemExcl = feeItemExcl;
    }

    public CodesPayeeExcl getPayeeExcl() {
        return payeeExcl;
    }

    public void setPayeeExcl(CodesPayeeExcl payeeExcl) {
        this.payeeExcl = payeeExcl;
    }

    public CodesPracExcl getPracExcl() {
        return pracExcl;
    }

    public void setPracExcl(CodesPracExcl pracExcl) {
        this.pracExcl = pracExcl;
    }

    public CodesSubscriberExcl getSubExcl() {
        return subExcl;
    }

    public void setSubExcl(CodesSubscriberExcl subExcl) {
        this.subExcl = subExcl;
    }

    public List<CodesFeeItemExcl> getFeeItemsList() {
        return feeItemsList;
    }

    public void setFeeItemsList(List<CodesFeeItemExcl> feeItemsList) {
        this.feeItemsList = feeItemsList;
    }

    public List<CodesFeeItemLongExcl> getFeeItemsLongList() {
        return feeItemsLongList;
    }

    public void setFeeItemsLongList(List<CodesFeeItemLongExcl> feeItemsLongList) {
        this.feeItemsLongList = feeItemsLongList;
    }

    public List<CodesPayeeExcl> getPayeeList() {
        return payeeList;
    }

    public void setPayeeList(List<CodesPayeeExcl> payeeList) {
        this.payeeList = payeeList;
    }

    public List<CodesPracExcl> getPracList() {
        return pracList;
    }

    public void setPracList(List<CodesPracExcl> pracList) {
        this.pracList = pracList;
    }

    public List<CodesSubscriberExcl> getSubList() {
        return subList;
    }

    public void setSubList(List<CodesSubscriberExcl> subList) {
        this.subList = subList;
    }

    public boolean isDisplayFeeItems() {
        return displayFeeItems;
    }

    public void setDisplayFeeItems(boolean displayFeeItems) {
        this.displayFeeItems = displayFeeItems;
    }

    public boolean isDisplayFeeItemsLong() {
        return displayFeeItemsLong;
    }

    public void setDisplayFeeItemsLong(boolean displayFeeItemsLong) {
        this.displayFeeItemsLong = displayFeeItemsLong;
    }

    public boolean isDisplayPayee() {
        return displayPayee;
    }

    public void setDisplayPayee(boolean displayPayee) {
        this.displayPayee = displayPayee;
    }

    public boolean isDisplaySub() {
        return displaySub;
    }

    public void setDisplaySub(boolean displaySub) {
        this.displaySub = displaySub;
    }

    public List<CodesFeeItemExcl> getFeeItemsSelected() {
        return feeItemsSelected;
    }

    public void setFeeItemsSelected(List<CodesFeeItemExcl> feeItemsSelected) {
        this.feeItemsSelected = feeItemsSelected;
    }

    public List<CodesFeeItemLongExcl> getFeeItemsLongSelected() {
        return feeItemsLongSelected;
    }

    public void setFeeItemsLongSelected(List<CodesFeeItemLongExcl> feeItemsLongSelected) {
        this.feeItemsLongSelected = feeItemsLongSelected;
    }

    public List<CodesPayeeExcl> getPayeeSelected() {
        return payeeSelected;
    }

    public void setPayeeSelected(List<CodesPayeeExcl> payeeSelected) {
        this.payeeSelected = payeeSelected;
    }

    public List<CodesPracExcl> getPracSelected() {
        return pracSelected;
    }

    public void setPracSelected(List<CodesPracExcl> pracSelected) {
        this.pracSelected = pracSelected;
    }

    public List<CodesSubscriberExcl> getSubSelected() {
        return subSelected;
    }

    public void setSubSelected(List<CodesSubscriberExcl> subSelected) {
        this.subSelected = subSelected;
    }

    public String getPanelToDisplay() {
        return panelToDisplay;
    }

    public void setPanelToDisplay(String panelToDisplay) {
        this.panelToDisplay = panelToDisplay;
    }

    public CodesFeeItemLongExcl getFeeItemLongExcl() {
        return feeItemLongExcl;
    }

    public void setFeeItemLongExcl(CodesFeeItemLongExcl feeItemLongExcl) {
        this.feeItemLongExcl = feeItemLongExcl;
    }

    public boolean isDisplayPrac() {
        return displayPrac;
    }

    public void setDisplayPrac(boolean displayPrac) {
        this.displayPrac = displayPrac;
    }

    public boolean isExclusionCheck() {
        return exclusionCheck;
    }

    public void setExclusionCheck(boolean exclusion) {
        this.exclusionCheck = exclusion;
    }

    public CodesFeeItemExcl getFeeItemExclSel() {
        return feeItemExclSel;
    }

    public void setFeeItemExclSel(CodesFeeItemExcl feeItemExclSel) {
        this.feeItemExclSel = feeItemExclSel;
    }

    public CodesFeeItemLongExcl getFeeItemLongExclSel() {
        return feeItemLongExclSel;
    }

    public void setFeeItemLongExclSel(CodesFeeItemLongExcl feeItemLongExclSel) {
        this.feeItemLongExclSel = feeItemLongExclSel;
    }

    public CodesPayeeExcl getPayeeExclSel() {
        return payeeExclSel;
    }

    public void setPayeeExclSel(CodesPayeeExcl payeeExclSel) {
        this.payeeExclSel = payeeExclSel;
    }

    public CodesPracExcl getPracExclSel() {
        return pracExclSel;
    }

    public void setPracExclSel(CodesPracExcl pracExclSel) {
        this.pracExclSel = pracExclSel;
    }

    public CodesSubscriberExcl getSubExclSel() {
        return subExclSel;
    }

    public void setSubExclSel(CodesSubscriberExcl subExclSel) {
        this.subExclSel = subExclSel;
    }

    public String getFeeItemCode() {
        return feeItemCode;
    }

    public void setFeeItemCode(String feeItemCode) {
        this.feeItemCode = feeItemCode;
    }

    public String getFeeItemShortDesc() {
        return feeItemShortDesc;
    }

    public void setFeeItemShortDesc(String feeItemShortDesc) {
        this.feeItemShortDesc = feeItemShortDesc;
    }

    public String getFeeItemLongDescCode() {
        return feeItemLongDescCode;
    }

    public void setFeeItemLongDescCode(String feeItemLongDescCode) {
        this.feeItemLongDescCode = feeItemLongDescCode;
    }

    public String getFeeItemLongDesc() {
        return feeItemLongDesc;
    }

    public void setFeeItemLongDesc(String feeItemLongDesc) {
        this.feeItemLongDesc = feeItemLongDesc;
    }

    public String getSubPhn() {
        return subPhn;
    }

    public void setSubPhn(String subPhn) {
        this.subPhn = subPhn;
    }

    public String getPracBillingNumber() {
        return pracBillingNumber;
    }

    public void setPracBillingNumber(String pracBillingNumber) {
        this.pracBillingNumber = pracBillingNumber;
    }

    public String getPayeeIdt() {
        return payeeIdt;
    }

    public void setPayeeIdt(String payeeIdt) {
        this.payeeIdt = payeeIdt;
    }

    public Date getStartDate() {
        return startDate;
    }

    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }

    public Date getEndDate() {
        return endDate;
    }

    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }

    public String getExclDesc() {
        return exclDesc;
    }

    public void setExclDesc(String exclDesc) {
        this.exclDesc = exclDesc;
    }

    public String getFeeItemCodeSearch() {
        return feeItemCodeSearch;
    }

    public void setFeeItemCodeSearch(String feeItemCodeSearch) {
        this.feeItemCodeSearch = feeItemCodeSearch;
    }

    public String getFeeItemLongDescCodeSearch() {
        return feeItemLongDescCodeSearch;
    }

    public void setFeeItemLongDescCodeSearch(String feeItemLongDescCodeSearch) {
        this.feeItemLongDescCodeSearch = feeItemLongDescCodeSearch;
    }

    public String getSubPhnSearch() {
        return subPhnSearch;
    }

    public void setSubPhnSearch(String subPhnSearch) {
        this.subPhnSearch = subPhnSearch;
    }

    public String getPracBillingNumberSearch() {
        return pracBillingNumberSearch;
    }

    public void setPracBillingNumberSearch(String pracBillingNumberSearch) {
        this.pracBillingNumberSearch = pracBillingNumberSearch;
    }

    public String getPayeeIdtSearch() {
        return payeeIdtSearch;
    }

    public void setPayeeIdtSearch(String payeeIdtSearch) {
        this.payeeIdtSearch = payeeIdtSearch;
    }

    public List<SelectItem> getCodesFeeItemLongList() {
        return codesFeeItemLongList;
    }

    public void setCodesFeeItemLongList(List<SelectItem> codesFeeItemLongList) {
        this.codesFeeItemLongList = codesFeeItemLongList;
    }

    public NaturalOrderComparator getComparator() {
        return comparator;
    }

    public void setComparator(NaturalOrderComparator comparator) {
        this.comparator = comparator;
    }
}
