/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.jsf;

import fish.payara.security.openid.api.OpenIdContext;
import jakarta.el.ELContext;
import jakarta.el.ValueExpression;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.component.UIComponent;
import jakarta.faces.component.UIInput;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Inject;
import java.security.Principal;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

/**
 * Base class for JSF backing beans.
 *
 * @author greg.perkins
 */
public class BaseBean implements java.io.Serializable {

    @Inject
    private OpenIdContext context;

    private static Logger logger = Logger.getLogger(BaseBean.class.getName());

    /**
     * Looks up a bean in the FacesContext.
     *
     * @param name String - name of the managed bean
     * @return Object - the managed bean instance
     */
    public Object findBean(String name) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ValueExpression valueExpression = facesContext.getApplication().getExpressionFactory()
                .createValueExpression(elContext, "#{" + name + "}", Object.class);
        return valueExpression.getValue(elContext);
    }

    /**
     * Shortcut method to add an informational FacesMessage.
     *
     * @param msg String - The text of the info message to add
     */
    public static void addInfoMessage(String msg) {
        FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage(FacesMessage.SEVERITY_INFO, msg, msg));
    }

    /**
     * Shortcut method to add a warning FacesMessage.
     *
     * @param msg String - The text of the warn message to add
     */
    public static void addWarnMessage(String msg) {
        FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage(FacesMessage.SEVERITY_WARN, msg, msg));
    }

    /**
     * Shortcut method to add an error FacesMessage.
     *
     * @param msg String - The text of the error message to add
     */
    public static void addErrorMessage(String msg) {
        FacesContext.getCurrentInstance().addMessage(null,
                new FacesMessage(FacesMessage.SEVERITY_ERROR, msg, msg));
    }

    /**
     * Shortcut method to add an error FacesMessage related to a specific component.
     *
     * @param msg String - The text of the error message to add
     * @param componentId String - the ID of the component
     */
    public static void addErrorMessage(String msg, String componentId) {
        FacesContext.getCurrentInstance().addMessage(componentId,
                new FacesMessage(FacesMessage.SEVERITY_ERROR, msg, msg));
    }

    /**
     * Pulls the current user's name.
     *
     * @return String
     */
    protected String findUserName() {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        Principal principal = facesContext.getExternalContext().getUserPrincipal();
        String user = principal.getName();

        return user == null ? "" : user;
    }

    /**
     * Pulls the current user's role.
     *
     * @return String - User's role, or "" if no role found
     */
    public String getUserRole() {
        if (context.getCallerGroups() != null && !context.getCallerGroups().isEmpty()) {
            List<String> userRoles = new ArrayList<>(context.getCallerGroups());
            return userRoles.get(0);
        } else {
            return "";
        }
    }

    /**
     * Method to reset UI component id on the form.
     *
     * @param componentId String - component id value from the screen
     */
    public void resetComponent(String componentId) {

        UIComponent form = (UIComponent) FacesContext.getCurrentInstance().getViewRoot().findComponent(componentId);
        resetComponent(form);
    }

    /**
     * Method to reset UI component id on the form.
     *
     * @param form UIComponent - UIComponent form value from the screen
     */
    public void resetComponent(UIComponent form) {
        for (UIComponent uic : form.getChildren()) {
            if (uic instanceof UIInput) {
                UIInput evh = (UIInput) uic;
                evh.resetValue();
            }
            resetComponent(uic);
        }
    }

}
