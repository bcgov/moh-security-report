/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.process;

import ca.bc.gov.health.pacl.ejb.entity.ApplicationAuditDtlLog;
import ca.bc.gov.health.pacl.ejb.entity.ApplicationAuditLog;
import ca.bc.gov.health.pacl.ejb.entity.LetterBatchPrintStg;
import ca.bc.gov.health.pacl.ejb.entity.LetterMspDetail;
import ca.bc.gov.health.pacl.ejb.entity.PracSvaProject;
import ca.bc.gov.health.pacl.ejb.entity.Project;
import ca.bc.gov.health.pacl.ejb.session.ApplicationAuditLogFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.LetterBatchPrintStgFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.LetterMspDetailFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.LetterTemplateFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.ProjectFacadeLocal;
import ca.bc.gov.health.pacl.jasper.JasperLetterMsp;
import ca.bc.gov.health.pacl.jasper.JasperLetterMspCollection;
import ca.bc.gov.health.pacl.web.LetterRunDetailBean;
import jakarta.ejb.EJB;
import jakarta.ejb.Stateless;
import jakarta.faces.context.FacesContext;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.security.Principal;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import org.joda.time.LocalDateTime;

/**
 *
 * @author Michael.Tremblay
 */
@Stateless
public class ProcessLettersInterface {

    private static final String className = LetterRunDetailBean.class.getName();
    private static final Logger logger = Logger.getLogger(className);

    @EJB
    private ProjectFacadeLocal projectFacade;
    @EJB
    private LetterMspDetailFacadeLocal letterFacade;
    @EJB
    private ApplicationAuditLogFacadeLocal applicationAuditLogFacade;
    @EJB
    private LetterTemplateFacadeLocal letterTemplateFacade;
    @EJB
    private LetterBatchPrintStgFacadeLocal letterBatchPrintStgFacade;

    //Count variables to do the validation with letters to print and SFTP
    private int letterCountSftp;
    int letterCountBatchPrintStg;
    int multiplier;

    private SftpHelper sftpHelper = new SftpHelper();

    /**
     * Method that generates letters and sends them to an SFTP server
     *
     * @param projectId
     * @param svaResultsSelected
     * @param printingDate
     * @return String
     * @throws java.io.FileNotFoundException
     */
    public String generateLetters(Long projectId, List<PracSvaProject> svaResultsSelected, Date printingDate) throws FileNotFoundException, IOException {
        try {
            setDefaultCountValues();

            //Find project by project ID
            Project project = projectFacade.findProjectById(projectId);

            sftpHelper.initializeSftpChannel();

            List<JasperLetterMsp> selectedPatientsList = new ArrayList<>();

            if (!svaResultsSelected.isEmpty()) {
                letterBatchPrintStgFacade.removeAll();

                String dirName;
                List<JasperLetterMsp> lettersToPrint = new ArrayList<>();

                dirName = sftpHelper.createSftpFolder(project.getName());
                selectedPatientsList = addToSelectedPatients(selectedPatientsList, svaResultsSelected, project);
                lettersToPrint = addLettersToPrint(project, selectedPatientsList, printingDate);

                if (lettersToPrint.size() > 0) {

                    String reportName = "";

                    JasperLetterMspCollection letters = new JasperLetterMspCollection(letterTemplateFacade.find(lettersToPrint.get(0).getLetterTemplateId().getId()));
                    letters = initializeLetters(letters, lettersToPrint, project);

                    String templateName = letters.getLetterTemplate().getLetterTemplateTypeId().getName();

                    String trimmedTemplateName = templateName.trim();

                    reportName = getTemplateName(reportName, trimmedTemplateName);

                    logger.log(Level.INFO, "Report file for the report: ".concat(project.getName())
                            .concat(" is ").concat(templateName));

                    // Print
                    for (JasperLetterMsp letterMspGenerate : letters.getLettersMsp()) {
                        printLetterToSftp(reportName, letterMspGenerate, dirName, project, letters);
                        letterCountSftp++;
                    }
                    letterBatchPrintStgFacade.clearEm();
                    logger.log(Level.INFO, "PDF batch export to the SFTP server completed; "
                            .concat(String.valueOf(letters.getLettersMsp().size()))
                            .concat(" letter").concat(letters.getLettersMsp().size() == 1 ? "" : "s").concat(" printed"));
                }
            }

            if (validateSftpTransfer(project)) {
                logger.log(Level.INFO, "Printing process completed successfully for project: ".concat(project.getName()));
                return "Printing process completed successfully";
            } else {
                logger.log(Level.SEVERE, "The number of letters that has been uploaded does not match with the number of letters in the run: ".concat(project.getName()));
                return "The number of letters that has been uploaded does not match with the number of letters in the run";
            }

        } catch (Exception e) {
            logger.log(Level.SEVERE, e.toString());
            e.printStackTrace();
            return "There was an error with the printing process. Please try again. ";
        } finally {
            sftpHelper.releaseResources();
        }
    }

    /**
     * Method that logs the letters to print and adds them to the letters to
     * print list
     *
     * @param project
     * @param selectedPatientsList
     * @param printingDate
     * @return
     */
    public List<JasperLetterMsp> addLettersToPrint(Project project, List<JasperLetterMsp> selectedPatientsList, Date printingDate) {

        List<JasperLetterMsp> lettersToPrint = new ArrayList<>();

        //Create Audit Log
        ApplicationAuditLog applicationAuditLog = new ApplicationAuditLog("Print Letters Details");
        List<ApplicationAuditDtlLog> logDetailList = new ArrayList<>();

        for (JasperLetterMsp letterMsp_ : selectedPatientsList) {

            if (printingDate != null) {
                letterMsp_.setLetterDate(printingDate);
            }
            lettersToPrint.add(new JasperLetterMsp(null, letterMsp_.getLetterMsp()));
            logDetailList.add(new ApplicationAuditDtlLog(applicationAuditLog, "Letter Ids Selected", (letterMsp_.getLetterMsp().getId().toString())));
        }

        String userName = findActiveUser();
        logDetailList.add(new ApplicationAuditDtlLog(applicationAuditLog, "Application Username", userName));
        logDetailList.add(new ApplicationAuditDtlLog(applicationAuditLog, "Project Details: Name", project.getName()));
        logDetailList.add(new ApplicationAuditDtlLog(applicationAuditLog, "Project Details: Id", (project.getId().toString())));

        // set auditing detail logs and saved audit records in database
        // for selected letters
        applicationAuditLog.setApplicationAuditDtlLogList(logDetailList);
        applicationAuditLogFacade.create(applicationAuditLog);

        return lettersToPrint;
    }

    /**
     * Look up the current username for DB auditing purposes
     * If there is no active FacesContext, return a default 
     * 'Un-Authenticated' username
     * @return String
     */
    private String findActiveUser() {
        //If no active FacesContext, use default System user
        String userName = "Un-Authenticated";
        FacesContext facesContext = FacesContext.getCurrentInstance();
        if (facesContext!=null){
            Principal principal = facesContext.getExternalContext().getUserPrincipal();
            if (principal!=null){
                userName = principal.getName();
            }
        }
        return userName;
    }

    /**
     * Method that sets the default count values
     */
    public void setDefaultCountValues() {
        letterCountSftp = 0;
        letterCountBatchPrintStg = 0;
        multiplier = 1;
    }

    /**
     * Method that takes the letters to print and sends them to the
     * selectedPatients list
     *
     * @param selectedPatientsList
     * @param svaResultsSelected
     * @param project
     * @return
     *
     */
    public List<JasperLetterMsp> addToSelectedPatients(List<JasperLetterMsp> selectedPatientsList, List<PracSvaProject> svaResultsSelected, Project project) {

        for (PracSvaProject sva : svaResultsSelected) {
            List<LetterMspDetail> letterMspDetailList = letterFacade.findBySvaCodePracCode(sva.getPracIdnt(), sva.getSvaProjectCode(), project.getId().intValue());

            for (LetterMspDetail letter : letterMspDetailList) {
                JasperLetterMsp letterToAdd = new JasperLetterMsp(null, letter);
                selectedPatientsList.add(letterToAdd);
            }
        }
        return selectedPatientsList;
    }

    /**
     * Method that regroups other methods for the letter generation/export to
     * sftp
     *
     * @param reportName
     * @param letterMspGenerate
     * @param dirName
     * @param project
     * @param letters
     * @throws java.lang.Exception
     */
    public void printLetterToSftp(String reportName, JasperLetterMsp letterMspGenerate, String dirName, Project project, JasperLetterMspCollection letters) throws Exception {

        String fileName = "";
        JRBeanCollectionDataSource ds = null;

        ds = setJasperDS(ds, letterMspGenerate);
        fileName = getFileName(fileName, letterMspGenerate);

        logger.log(Level.INFO, "PDF File name: ".concat(fileName));

        //generates Jasper letter
        JasperPrint jprint = JasperFillManager.fillReport(Thread.currentThread().getContextClassLoader().getResourceAsStream(reportName), letters.getParametersMsp(), ds);

        //Export letter to SFTP
        sftpHelper.uploadData(jprint, fileName, dirName);
        logger.log(Level.INFO, "PDF export to the SFTP server completed");

        addLetterBatchPrintStgToDB(project, letterMspGenerate, jprint);
    }

    /**
     * Method that set the datasource to generate a letter with Jasper
     *
     * @param ds
     * @param letterMspGenerate
     * @return
     */
    public JRBeanCollectionDataSource setJasperDS(JRBeanCollectionDataSource ds, JasperLetterMsp letterMspGenerate) {

        List<JasperLetterMsp> letterToPrint = new ArrayList<>();
        letterToPrint.add(letterMspGenerate);
        ds = new JRBeanCollectionDataSource(letterToPrint);
        return ds;

    }

    /**
     * This methods initializes the letters list for printing
     *
     * @param letters
     * @param lettersToPrint
     * @param project
     * @return
     *
     */
    public JasperLetterMspCollection initializeLetters(JasperLetterMspCollection letters, List<JasperLetterMsp> lettersToPrint, Project project) {

        letters.setLettersMsp(lettersToPrint);
        letters.setProjectName(project.getName());
        letters.setProjectMonth(project.getProjectMonth());
        letters.setProjectYear(project.getProjectYear());

        return letters;
    }

    /**
     * Method that returns filename for a letter
     *
     * @param fileName
     * @param letterMspGenerate
     * @return
     */
    public String getFileName(String fileName, JasperLetterMsp letterMspGenerate) {

        LocalDateTime fileDate = LocalDateTime.now();

        fileName = "HTHEACL." + fileDate.toString("MMM.dd.yyyy") + "." + letterMspGenerate.getSvaProjectCode() + "." + letterMspGenerate.getBarcode() + ".pdf";
        return fileName;
    }

    /**
     * Creates new instances of letterBatchPrintStg and adds them to the DB
     *
     * @param project
     * @param letterMspGenerate
     * @param jprint
     * @throws java.lang.Exception
     */
    public void addLetterBatchPrintStgToDB(Project project, JasperLetterMsp letterMspGenerate, JasperPrint jprint) throws Exception {

        LetterBatchPrintStg letterBatch;

        letterBatch = new LetterBatchPrintStg();
        
        letterBatch.setProjectId(project.getId());
        letterBatch.setPracSvaProjectId(letterMspGenerate.getPracSvaProjectId().getId());
        letterBatch.setLetterId(letterMspGenerate.getLetterMsp().getId());
        letterBatch.setLetterTypeCode(letterMspGenerate.getLetterMsp().getLetterTemplateId().getId());
        letterBatch.setLetterContDesc(jprint);
        letterBatch.setLastModifiedByNm(findActiveUser());

        //Commiting the letterBatch every 500 new objects
        if (letterCountBatchPrintStg == 500 * multiplier) {
            letterBatchPrintStgFacade.clearEm();
            multiplier++;
        }
        letterBatchPrintStgFacade.create(letterBatch);
        letterCountBatchPrintStg++;
    }

    /**
     * Get Jasper template name to generate the letters
     *
     * @param reportName
     * @param trimmedTemplateName
     * @return
     *
     */
    public String getTemplateName(String reportName, String trimmedTemplateName) {
        switch (trimmedTemplateName) {
            case "SELECT SERVICE":
                reportName = "SelectServiceLetter.jasper";
                break;
            case "SELECT SERVICE QUESTIONS":
                reportName = "SelectServiceQuestionsLetter.jasper";
                break;
            case "RANDOM MONTHLY":
                reportName = "RandomMonthlyLetter.jasper";
                break;
            default:
                reportName = "";
                break;
        }
        return reportName;
    }

    /**
     * Method that validates if the amount of letters to print is the same as
     * the amount of letters that have been transfered to SFTP
     *
     * @param project
     * @return
     */
    public Boolean validateSftpTransfer(Project project) {

        //TODO - Removed validation due to the folder issue on the SFTP 
        if (letterCountBatchPrintStg == letterCountSftp) {

            if (project.getFirstPrintingDate() == null) {
                project.setFirstPrintingDate(new Date());
            }

            project.getLetterMspDetailList().forEach((LetterMspDetail letterEdit) -> {
                letterEdit.setLetterPrintedFlag('Y');
            });

            projectFacade.editWithReturn(project);
            return true;
            
        } else {
            logger.log(Level.SEVERE, "The number of letters that has been uploaded does not match with the number of letters in the run  :".concat(project.getName()));
            return false;
        }
    }
}
