package ca.bc.gov.health.pacl.web;

import ca.bc.gov.health.jsf.BaseBean;
import ca.bc.gov.health.pacl.ejb.entity.*;
import ca.bc.gov.health.pacl.ejb.session.*;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;
import java.util.ResourceBundle;

//Backing bean for setting new admnin options for EACL
@Named("MaintainAdminOptionsEACL")
@ViewScoped
public class MaintainAdminOptionsEACL extends BaseBean {

    private static ResourceBundle bundle = ResourceBundle.getBundle("MessageResources", FacesContext.getCurrentInstance().getViewRoot().getLocale());
    //EJB to handle persistence
    @EJB
    private AdminOptionsMspFacadeLocal adminOptionsMspFacade;

    //Instance we're currently editing
    private AdminOptionsMsp adminOptionsMsp;

    //Default Constructor
    public MaintainAdminOptionsEACL() {
    }

    //Initializes this bean
    @PostConstruct
    public void init() {
        // Set options to the latest database entry  
        List<AdminOptionsMsp> adminOpts = adminOptionsMspFacade.findDefaultPatientLimit();
        if (!adminOpts.isEmpty()) {
            adminOptionsMsp = adminOpts.get(0);
        } else {
            adminOptionsMsp = new AdminOptionsMsp();
        }
    }

    //Saves new record with the user's inputs
    public String save() {

        if (!validateAdminOptions()) {
            return null;
        }

        nullify();

        adminOptionsMspFacade.create(adminOptionsMsp);
        addInfoMessage(bundle.getString("adminOptions.NewSaved"));
        return null;
    }

    //Validates the input fields before saving to the database
    public boolean validateAdminOptions() {

        boolean isNotError = true;

        // verify if max. patients value is a positive number and >= 0.
        if (adminOptionsMsp.getDefaultPatientMaxLimit() <= 0) {
            addErrorMessage(bundle.getString("adminOption.MaxPatientPositive"));
            isNotError = false;
        }
        // verify if min. patients value is a positive number and >= 0.
        //verify if min <= max
        if (adminOptionsMsp.getDefaultPatientMinLimit() <= 0) {
            addErrorMessage(bundle.getString("adminOption.MinPatientPositive"));
            isNotError = false;
        } else if (adminOptionsMsp.getDefaultPatientMinLimit() > adminOptionsMsp.getDefaultPatientMaxLimit()) {
            addErrorMessage(bundle.getString("adminOption.PatientsMinLowerMax"));
            isNotError = false;
        }
        //Verify if max. claims value is a positive number and >=0.
        if (adminOptionsMsp.getDefaultClaimMaxLimit() <= 0) {
            addErrorMessage(bundle.getString("adminOption.MaxClaimsPositive"));
            isNotError = false;
        }
        //Verify if min. claims value is a positive number and >=0.
        //Verify min claims<=max claims
        if (adminOptionsMsp.getDefaultClaimMinLimit() <= 0) {
            addErrorMessage(bundle.getString("adminOption.MinClaimsPositive"));
            isNotError = false;
        } else if (adminOptionsMsp.getDefaultClaimMinLimit() > adminOptionsMsp.getDefaultClaimMaxLimit()) {
            addErrorMessage(bundle.getString("adminOption.ClaimsMinLowerMax"));
            isNotError = false;
        }
        
        //Verify if min. claims value is a positive number and >=0.
        //Verify min claims<=max claims
        if (adminOptionsMsp.getDefaultClaimMinLimit() > 6 || adminOptionsMsp.getDefaultClaimMaxLimit() >6) {
            addErrorMessage(bundle.getString("adminOption.LowerThan6"));
            isNotError = false;
        } 

        // verify if days before archive value is a positive number and > 0.
        if (adminOptionsMsp.getDaysBeforeArchive() <= 0) {
            addErrorMessage(bundle.getString("adminOption.daysBeforeArchivePositive"));
            isNotError = false;
        }
        // verify if days of first reminder email is a positive number and > 0
        //validate the email reminder is lower than amount of days before the archive
        if (adminOptionsMsp.getFirstReminderEmail() <= 0) {
            addErrorMessage(bundle.getString("adminOption.FirstReminderPositive"));
            isNotError = false;
        } else if (adminOptionsMsp.getFirstReminderEmail() >= adminOptionsMsp.getDaysBeforeArchive()) {
            addErrorMessage(bundle.getString("adminOption.FirstReminderLowerArchive"));
            isNotError = false;
        }
        // verify if days of second reminder email is a positive number and > 0
        //validate the second reminder is lower than the 1st one
        //validate the email reminder is lower than amount of days before the archive 
        if (adminOptionsMsp.getSecondReminderEmail() <= 0) {
            addErrorMessage(bundle.getString("adminOption.SecondReminderPositive"));
            isNotError = false;
        } else if (adminOptionsMsp.getSecondReminderEmail() >= adminOptionsMsp.getFirstReminderEmail()) {
            addErrorMessage(bundle.getString("adminOption.SecondReminderLowerArchive"));
            isNotError = false;
        } else if (adminOptionsMsp.getSecondReminderEmail() >= adminOptionsMsp.getDaysBeforeArchive()) {
            addErrorMessage(bundle.getString("adminOption.SecondReminderLowerFirst"));
            isNotError = false;
        }
        return isNotError;
    }

    //Nullifys the object's ID so that we can insert in DB
    private void nullify() {
        adminOptionsMsp.setId(null);
    }
    //Getters and Setters 

    public AdminOptionsMspFacadeLocal getAdminOptionsMspFacade() {
        return adminOptionsMspFacade;
    }

    public AdminOptionsMsp getAdminOptionsMsp() {
        return adminOptionsMsp;
    }

    public void setAdminOptionsMspFacade(AdminOptionsMspFacade adminOptionsMspFacade) {
        this.adminOptionsMspFacade = adminOptionsMspFacade;
    }

    public void setAdminOptionsMsp(AdminOptionsMsp adminOptionsMsp) {
        this.adminOptionsMsp = adminOptionsMsp;
    }
}
