/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.web;

import ca.bc.gov.health.jsf.BaseBean;
import static ca.bc.gov.health.jsf.BaseBean.addErrorMessage;
import static ca.bc.gov.health.jsf.BaseBean.addInfoMessage;
import ca.bc.gov.health.pacl.ejb.entity.ApplicationAuditDtlLog;
import ca.bc.gov.health.pacl.ejb.entity.ApplicationAuditLog;
import ca.bc.gov.health.pacl.ejb.entity.CodesLetterStatus;
import ca.bc.gov.health.pacl.ejb.entity.LetterMspDetail;
import ca.bc.gov.health.pacl.ejb.entity.PracSvaProject;
import ca.bc.gov.health.pacl.ejb.entity.ServiceMsp;
import ca.bc.gov.health.pacl.ejb.session.ApplicationAuditLogFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.CodesLetterStatusFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.LetterMspDetailFacadeLocal;
import ca.bc.gov.health.pacl.util.PaclConstants;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.component.UIData;
import jakarta.faces.context.FacesContext;
import jakarta.faces.event.ValueChangeEvent;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.ResourceBundle;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import org.apache.commons.lang3.StringUtils;
import org.primefaces.component.datatable.DataTable;
import org.primefaces.event.CellEditEvent;

/**
 * Backing bean for finding patient letters by PHN and displaying letter MSP
 * summary details.
 *
 * @author dan.stepanov
 */
@Named("findPatientByPhn")
@ViewScoped
public class FindPatientByPhnBean extends BaseBean {

    private static Logger logger = Logger.getLogger(FindPatientByPhnBean.class.getName());
    private static ResourceBundle bundle = ResourceBundle.getBundle("MessageResources", FacesContext.getCurrentInstance().getViewRoot().getLocale());

    /**
     * Facade for persistence.
     */
    @EJB
    private transient LetterMspDetailFacadeLocal letterMspFacade;
    @EJB
    private transient ApplicationAuditLogFacadeLocal applicationAuditLogFacade;
    @EJB
    private transient CodesLetterStatusFacadeLocal codesLetterStatusFacade;
    /**
     * The instances we're currently editing.
     */
    private LetterMspDetail letterMspDetail;
    private PracSvaProject pracSva;
    private String searchBy;
    private String filter;
    
    private static final String SEARCH_BY_PHN = "PHN";
    private static final String SEARCH_BY_CASE_CODE = "CASE_CODE";

    /**
     * This index is set from the screen when the user selects a search result
     * item the index is used to retrieve the letter MSP details from the letter
     * MSP list.
     */
    private Integer selectedIndex;
    /**
     * List of search results to display.
     */
    private List<LetterMspDetail> patientResults = new ArrayList<>();

    /**
     * Default constructor.
     */
    public FindPatientByPhnBean() {
        super();
    }

    /**
     * Initializes this bean after injection is complete.
     */
    @PostConstruct
    public void init() {
        clear();
    }

    /**
     * Clears the state of this bean.
     */
    public String clear() {
        letterMspDetail = new LetterMspDetail();
        pracSva = new PracSvaProject();
        patientResults = new ArrayList<>();
        return null;
    }

    /**
     *
     * Retrieves the patient letter records based on input selection criteria.
     *
     * @return String
     */
    public String findPatient() {

        DataTable dataTable = (DataTable) FacesContext.getCurrentInstance().getViewRoot().findComponent("tableSearchByPhnForm:resultsTable");
        dataTable.reset();
        // validate the form fields
        if (!validateFindPatient()) {
            return null;
        }
        
        // retrieve patient letters from from the facade session by PHN or Case Code.
        // Case code is the default
        if (SEARCH_BY_PHN.equals(getSearchBy())) {
            letterMspDetail.setPhn(Long.valueOf(getFilter().trim()));
            patientResults = letterMspFacade.findPatientLettersByPhn(letterMspDetail.getPhn());
        } else {
            letterMspDetail.setCaseCode(getFilter().trim());
            patientResults = letterMspFacade.findLettersByCaseCode(letterMspDetail.getCaseCode());
        }

        // create auditing log if there are patient letters in the result
        if (!patientResults.isEmpty()) {

            patientResults.forEach((LetterMspDetail result) -> {
                Collections.sort(result.getServiceMspList(), (final ServiceMsp lhs, ServiceMsp rhs) ->
                        rhs.getSrvDate().compareTo(lhs.getSrvDate()));
            });
            
            // Create Audit log
            ApplicationAuditLog applicationAuditLog = new ApplicationAuditLog("View Search Letter By PHN Details");
            List<ApplicationAuditDtlLog> logDetailList = new ArrayList<>();
            logDetailList.add(new ApplicationAuditDtlLog(applicationAuditLog,
                    "Application Username", findUserName()));
            String input = "";
            if (SEARCH_BY_PHN.equals(getSearchBy())) {
                input = letterMspDetail.getPhn().toString();
            } else if (SEARCH_BY_CASE_CODE.equals(getSearchBy())) {
                input = letterMspDetail.getCaseCode();
            }
            logDetailList.add(new ApplicationAuditDtlLog(applicationAuditLog,
                    "Input", input));
            for (LetterMspDetail letterDetail : patientResults) {
                logDetailList.add(new ApplicationAuditDtlLog(applicationAuditLog,
                        "SVA Project Details: SVA Code",
                        (letterDetail.getPracSvaProjectId().getSvaProjectCode())));
                logDetailList.add(new ApplicationAuditDtlLog(applicationAuditLog,
                        "SVA Project Details: Prac Code",
                        (letterDetail.getPracSvaProjectId().getPracBllgNum())));
                logDetailList.add(new ApplicationAuditDtlLog(applicationAuditLog,
                        "Letter Msp Details: Ids",
                        (letterDetail.getId().toString())));
            }

        } else {
            // add info message if there are no project records to display
            String msgKey = "case.search.NoResults";
            if (SEARCH_BY_PHN.equals(getSearchBy())) {
                msgKey = "phn.search.NoResults";
            }
            addWarnMessage(bundle.getString(msgKey));
        }
        return null;
    }

    /**
     * Display patients age
     *
     * @param birthDate
     * @return
     */
    public int displayAge(Date birthDate) {

        Date now = new Date();
        long timeBetween = now.getTime() - birthDate.getTime();
        double yearsBetween = timeBetween / 3.156e+10;
        int age = (int) Math.floor(yearsBetween);

        return age;
    }

    /**
     * Validates user input search criteria and practitioner code format from
     * HI.
     *
     * @return boolean
     */
    public boolean validateFindPatient() {

        boolean valid = true;

        // verify that search criteria has at least one input field value
        if (StringUtils.isNotEmpty(getFilter())) {

            if (getSearchBy().equals(SEARCH_BY_PHN)) {
                // validate the PHN code format before mode check
                String regExpDigits = "\\d+";
                Pattern pat = Pattern.compile(regExpDigits);

                // TODO! remove check for PHN length = 8 (only 10 digits) for UAT/PROD environments
                if (!pat.matcher(getFilter().trim()).matches()) {
                    addErrorMessage(bundle.getString("phn.search.DigitsOnly"));
                    valid = false;

                } else if (getFilter().trim().length() < 8
                        || getFilter().trim().length() > 10) {
                    addErrorMessage(bundle.getString("phn.search.FormatError"));
                    valid = false;
                }
            } else {
                // validate case code
                Pattern pat = Pattern.compile("[a-zA-Z]{6}");
                if (!pat.matcher(getFilter().trim().toUpperCase()).matches()) {
                    addErrorMessage(bundle.getString("case_code.search.FormatError"));
                    valid = false;
                }
            }

        } else {
            addErrorMessage(bundle.getString("phn.search.NoInput"));
            valid = false;

        }
        logger.info("in validateFindPatient isNotError = ".concat(String.valueOf(valid)));
        return valid;
    }

    /**
     * Method to change the letter status when a datatable cell is edited.
     *
     * @param event CellEditEvent - CellEditEvent listener parameter from
     * PrimeFaces UI when a cell is edited.
     *
     * @return
     */
    public void onCellEdit(CellEditEvent event) {

        LetterMspDetail letterMspEdit = (LetterMspDetail) ((DataTable) event.getComponent()).getRowData();
        CodesLetterStatus status = codesLetterStatusFacade.findById(letterMspEdit.getStatusId().getId().intValue());
        letterMspEdit.setStatusId(status);

        letterMspFacade.edit(letterMspEdit);

        addInfoMessage(bundle.getString("phn.search.LetterStatusModified"));
    }
    
    /**
     * Change the patient letter status depending on the user selection.
     */
    public void changeLetterStatus(ValueChangeEvent e) {
        if ((Long) e.getNewValue() != -1) {
            UIData table = (UIData) e.getComponent().findComponent("resultsTable");
            int index = table.getRowIndex();
            LetterMspDetail instance = patientResults.get(index);
            instance.setStatusId(new CodesLetterStatus((Long) e.getNewValue()));
            instance = letterMspFacade.editWithReturn(instance);
            addInfoMessage(bundle.getString("project.projectDetails.letter.changeStatus"));
        }
    }

    /**
     * Method to disable the Letter status modification depending on SVA project
     * status. Status = 'Closed' then disable edits.
     *
     * @param pracSva PracSvaProject - PracSvaProject entity to check status.
     *
     * @return boolean
     */
    public boolean disableLetterStatus(PracSvaProject pracSva) {

        boolean disableLetterStatus = false;
        if (pracSva.getSvaProjectStatusId().getName().equals(PaclConstants.PROJECT_STATUS_CLOSE)) {
            disableLetterStatus = true;
        }

        return disableLetterStatus;
    }

    /* Getters and Setters */
    public Integer getSelectedIndex() {
        return selectedIndex;
    }

    public void setSelectedIndex(Integer selectedIndex) {
        this.selectedIndex = selectedIndex;
    }

    public List<LetterMspDetail> getPatientResults() {
        return patientResults;
    }

    public void setPatientResults(List<LetterMspDetail> patientResults) {
        this.patientResults = patientResults;
    }

    public PracSvaProject getPracSva() {
        return pracSva;
    }

    public void setPracSva(PracSvaProject pracSva) {
        this.pracSva = pracSva;
    }

    public LetterMspDetail getLetterMspDetail() {
        return letterMspDetail;
    }

    public void setLetterMspDetail(LetterMspDetail letterMspDetail) {
        this.letterMspDetail = letterMspDetail;
    }
    
    public String getSearchBy() {
        return this.searchBy;
    }

    public void setSearchBy(String searchBy) {
        this.searchBy = searchBy;
    }
    
    public String getFilter() {
        return filter;
    }

    public void setFilter(String filter) {
        this.filter = filter;
    }
}
