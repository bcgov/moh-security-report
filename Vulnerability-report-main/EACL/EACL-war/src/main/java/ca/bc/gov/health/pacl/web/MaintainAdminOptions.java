package ca.bc.gov.health.pacl.web;
import ca.bc.gov.health.jsf.BaseBean;
import ca.bc.gov.health.pacl.ejb.entity.*;
import ca.bc.gov.health.pacl.ejb.session.*;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;

/**
 * Backing bean for editing AdminOptions.
 * @author JSF Code Generator
 */
@Named("MaintainAdminOptions")
@ViewScoped
public class MaintainAdminOptions extends BaseBean {

    /* EJB to handle persistence */
    @EJB
    private transient AdminOptionsFacadeLocal adminOptionsFacade;

    /* Instance we're currently editing */
    private AdminOptions adminOptions;

    /**
     * Default Constructor.
     */
    public MaintainAdminOptions(){}

    /**
     * Initializes this bean.
     */
    @PostConstruct
    public void init() {
        // populate the admin options fields with the most recent saved values.  
        List<AdminOptions> adminOpts = adminOptionsFacade.findDefaultPatientLimit();
        if (!adminOpts.isEmpty()) {
            adminOptions = adminOpts.get(0);            
        } else {
            adminOptions = new AdminOptions();
        }
    }
    
    /**
     * Saves new record with configuration parameters.
     */
    public String save() {
        // validates the form fields
        if (!validateAdminOptions()) {
            return null;
        }
        nullify();
        adminOptionsFacade.create(adminOptions);
        addInfoMessage("New admin configurations were saved successfully.");
        return null;
    }

    /**
     * Clears the form.
     */
    public String clear() {
        adminOptions = new AdminOptions();
        return null;
    }

    /**
     * Validates the input fields before save.
     *
     * @return boolean
     */
    public boolean validateAdminOptions() {

        boolean isNotError = true;

        // verify if max. patients value is a positive number and > 0.
        if (adminOptions.getDefaultPatientLimit() <= 0) {
            addErrorMessage("The maximum number of patients must be"
                    + " a positive number.");
            isNotError = false;
        }
        // verify if days before archive value is a positive number and > 0.
        if (adminOptions.getDaysBeforeArchive() <= 0) {
            addErrorMessage("The number of days before archive must be"
                    + " a positive number.");
            isNotError = false;
        }
        // verify if days of first reminder email is a positive number and > 0.
        if (adminOptions.getFirstReminderEmail() <= 0) {
            addErrorMessage("The number of days of first reminder email must be"
                    + " a positive number.");
            isNotError = false;
        }
        // verify if days of second reminder email is a positive number and > 0.
        if (adminOptions.getSecondReminderEmail() <= 0) {
            addErrorMessage("The number of days of second reminder email must"
                    + " be a positive number.");
            isNotError = false;
        }

        return isNotError;
    }

    /**
     * Nullifies any child objects which don't have valid PKs set.
     */
    private void nullify() {
        adminOptions.setId(null);
    }

    /* Getters and Setters */
    public AdminOptions getAdminOptions(){
        return adminOptions;
    }

    public void setAdminOptions(AdminOptions adminOptions){
        this.adminOptions = adminOptions;
    }
    
}