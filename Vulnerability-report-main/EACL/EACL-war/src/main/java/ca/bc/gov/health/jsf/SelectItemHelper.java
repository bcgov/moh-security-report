/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.jsf;

import jakarta.faces.model.SelectItem;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import org.apache.commons.beanutils.PropertyUtils;

/**
 *
 * @author greg.perkins
 */
public class SelectItemHelper {

    // with only the list itself
    public static List buildSelectItemList(List list) {
        List<SelectItem> outList = new ArrayList();
        for (Iterator it = list.iterator(); it.hasNext();) {
            Object item = it.next();
            SelectItem selectItem = new SelectItem();

            selectItem.setValue(item);
            if (item != null) {
                selectItem.setLabel(item.toString());
            }
            outList.add(selectItem);
        }

        return outList;
    }

    // build a list of label/properties without sorting
    public static List buildSelectItemListWithoutSort(List list,
            String labelProperty, String valueProperty) {
        return buildSelectItemList(list, labelProperty, null, valueProperty, false);
    }

    // without second label string
    // without sorting
    public static List buildSelectItemList(List list,
            String labelProperty, String valueProperty) {
        return buildSelectItemList(list, labelProperty, null, valueProperty, true);
    }

    // without second label string
    public static List buildSelectItemList(List list,
            String labelProperty, String valueProperty, boolean doSort) {
        return buildSelectItemList(list, labelProperty, null, valueProperty, doSort);
    }

    // without sorting
    public static List buildSelectItemListMultipleLabels(List list,
            String labelPropertyPrefix, String labelPropertySuffix,
            String valueProperty) {
        return buildSelectItemList(list, labelPropertyPrefix, labelPropertySuffix, valueProperty, true);
    }

    public static List buildSelectItemList(List list,
            String labelPropertyPrefix, String labelPropertySuffix,
            String valueProperty, boolean doSort) {
        return buildSelectItemList(list, labelPropertyPrefix, labelPropertySuffix, valueProperty, doSort, 110);
    }

    // with all inputs
    public static List buildSelectItemList(List list,
            String labelPropertyPrefix, String labelPropertySuffix,
            String valueProperty, boolean doSort, int maxLength) {

        List<SelectItem> outList = new ArrayList();
        for (Iterator it = list.iterator(); it.hasNext();) {
            Object item = it.next();
            SelectItem selectItem = new SelectItem();
            try {
                selectItem.setValue(PropertyUtils.getProperty(item, valueProperty));
                String label = PropertyUtils.getProperty(item, labelPropertyPrefix).toString();
                label = labelPropertySuffix == null ? label : label + " - " + PropertyUtils.getProperty(item, labelPropertySuffix).toString();
                if (label.length() > maxLength) {
                    label = label.substring(0, 97) + "...";
                }
                selectItem.setLabel(label);
                outList.add(selectItem);
            } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {
                //e.printStackTrace();
            }
        }
        if (doSort) {
            outList.sort((SelectItem o1, SelectItem o2) -> o1.getLabel().compareTo(o2.getLabel()));
        }
        return outList;
    }

}
