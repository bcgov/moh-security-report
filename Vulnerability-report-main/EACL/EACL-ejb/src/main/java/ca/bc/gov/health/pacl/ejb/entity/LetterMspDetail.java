/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.ejb.entity;

import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import ca.bc.gov.health.pacl.util.AddressHelper;
import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.FetchType;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlTransient;
import java.io.Serializable;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import org.apache.commons.lang3.RandomStringUtils;

/**
 *
 * @author Michael.Tremblay
 */
@Entity
@EntityListeners({AuditListener.class})

@Table(name = "LETTER_MSP_DETAIL")
@SequenceGenerator(name = "LetterMspDetailSeq", sequenceName = "LETTER_MSP_DETAIL_SEQ", allocationSize = 1, initialValue = 1)

@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "LetterMspDetail.findAll", query = "SELECT l FROM LetterMspDetail l"),
    @NamedQuery(name = "LetterMspDetail.findById", query = "SELECT l FROM LetterMspDetail l WHERE l.id = :id"),
    @NamedQuery(name = "LetterMspDetail.findByBarcode", query = "SELECT l FROM LetterMspDetail l WHERE l.barcode = :barcode"),
    @NamedQuery(name = "LetterMspDetail.findByPhn", query = "SELECT l FROM LetterMspDetail l WHERE l.phn = :phn ORDER BY l.createdOnDtm DESC"),
    @NamedQuery(name = "LetterMspDetail.findByCaseCode", query = "SELECT l FROM LetterMspDetail l WHERE l.caseCode = :caseCode ORDER BY l.createdOnDtm DESC"),
    @NamedQuery(name = "LetterMspDetail.findByRecipientLastName", query = "SELECT l FROM LetterMspDetail l WHERE l.recipientLastName = :recipientLastName"),
    @NamedQuery(name = "LetterMspDetail.findByRecipientFirstName", query = "SELECT l FROM LetterMspDetail l WHERE l.recipientFirstName = :recipientFirstName"),
    @NamedQuery(name = "LetterMspDetail.findByRecipientBirthday", query = "SELECT l FROM LetterMspDetail l WHERE l.recipientBirthday = :recipientBirthday"),
    @NamedQuery(name = "LetterMspDetail.findByRecipientAddress", query = "SELECT l FROM LetterMspDetail l WHERE l.recipientAddress = :recipientAddress"),
    @NamedQuery(name = "LetterMspDetail.findByRecipientCountry", query = "SELECT l FROM LetterMspDetail l WHERE l.recipientCountry = :recipientCountry"),
    @NamedQuery(name = "LetterMspDetail.findByRecipientCity", query = "SELECT l FROM LetterMspDetail l WHERE l.recipientCity = :recipientCity"),
    @NamedQuery(name = "LetterMspDetail.findByRecipientProvince", query = "SELECT l FROM LetterMspDetail l WHERE l.recipientProvince = :recipientProvince"),
    @NamedQuery(name = "LetterMspDetail.findByRecipientPostalCode", query = "SELECT l FROM LetterMspDetail l WHERE l.recipientPostalCode = :recipientPostalCode"),
    @NamedQuery(name = "LetterMspDetail.findByLetterPrintedFlag", query = "SELECT l FROM LetterMspDetail l WHERE l.letterPrintedFlag = :letterPrintedFlag"),
    @NamedQuery(name = "LetterMspDetail.findByLetterDate", query = "SELECT l FROM LetterMspDetail l WHERE l.letterDate = :letterDate"),
    @NamedQuery(name = "LetterMspDetail.findByCreatedByNm", query = "SELECT l FROM LetterMspDetail l WHERE l.createdByNm = :createdByNm"),
    @NamedQuery(name = "LetterMspDetail.findByCreatedOnDtm", query = "SELECT l FROM LetterMspDetail l WHERE l.createdOnDtm = :createdOnDtm"),
    @NamedQuery(name = "LetterMspDetail.findByLastModifiedByNm", query = "SELECT l FROM LetterMspDetail l WHERE l.lastModifiedByNm = :lastModifiedByNm"),
    @NamedQuery(name = "LetterMspDetail.findByLastModifiedOnDtm", query = "SELECT l FROM LetterMspDetail l WHERE l.lastModifiedOnDtm = :lastModifiedOnDtm"),
    @NamedQuery(name = "LetterMspDetail.findByProjectId", query = "SELECT l FROM LetterMspDetail l WHERE l.projectId = :projectId"),
    @NamedQuery(name = "LetterMspDetail.findBySvaCodePracCode", query = "SELECT l FROM LetterMspDetail l WHERE l.pracSvaProjectId.pracBllgNum = :pracBllgNum AND l.pracSvaProjectId.svaProjectCode = :svaProjectCode AND l.projectId.id=:id"),
    @NamedQuery(name = "LetterMspDetail.findByPracSvaProjectId", query = "SELECT l FROM LetterMspDetail l WHERE l.pracSvaProjectId = :pracSvaProjectId")})
public class LetterMspDetail implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "LetterMspDetailSeq")
    @Basic(optional = false)
    @NotNull
    @Column(name = "ID")
    private Long id;
    @Basic(optional = false)
    @NotNull
    @Column(name = "BARCODE", insertable = false)
    private long barcode;
    @Basic(optional = false)
    @NotNull
    @Column(name = "PHN")
    private Long phn;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 200)
    @Column(name = "RECIPIENT_LAST_NAME")
    private String recipientLastName;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 200)
    @Column(name = "RECIPIENT_FIRST_NAME")
    private String recipientFirstName;
    @Column(name = "RECIPIENT_BIRTHDAY")
    @Temporal(TemporalType.TIMESTAMP)
    private Date recipientBirthday;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 1000)
    @Column(name = "RECIPIENT_ADDRESS")
    private String recipientAddress;
    @Size(max = 240)
    @Column(name = "RECIPIENT_COUNTRY")
    private String recipientCountry;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 50)
    @Column(name = "RECIPIENT_CITY")
    private String recipientCity;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 240)
    @Column(name = "RECIPIENT_PROVINCE")
    private String recipientProvince;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 240)
    @Column(name = "RECIPIENT_POSTAL_CODE")
    private String recipientPostalCode;
    @Basic(optional = false)
    @NotNull
    @Column(name = "LETTER_PRINTED_FLAG", insertable = false)
    private Character letterPrintedFlag;
    @Column(name = "LETTER_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    private Date letterDate;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Basic(optional = false)
    @NotNull
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Size(max = 100)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
    private Long statelessTransactionNbr;
    @JoinColumn(name = "PROJECT_ID", referencedColumnName = "ID")
    @ManyToOne(optional = false)
    private Project projectId;
    @JoinColumn(name = "PRAC_SVA_PROJECT_ID", referencedColumnName = "ID")
    @ManyToOne(optional = false)
    private PracSvaProject pracSvaProjectId;
    @JoinColumn(name = "LETTER_TEMPLATE_ID", referencedColumnName = "ID")
    @ManyToOne(optional = false)
    private LetterTemplate letterTemplateId;
    @JoinColumn(name = "STATUS_ID", referencedColumnName = "ID")
    @ManyToOne(optional = false)
    private CodesLetterStatus statusId;
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "letterMspId")
    private List<ServiceMsp> serviceMspList;
    @Column(name = "CASE_CODE")
    private String caseCode;
    @Column(name = "RELATIONSHIP")
    private String relationship;
    @Column(name = "NOTES")
    @Size(max = 4000)
    private String notes;
    @Column(name = "ADMIN_NOTES")
    @Size(max = 4000)
    private String adminNotes;

    public LetterMspDetail() {
        this.caseCode = newCaseCode();
    }

    public LetterMspDetail(Long id) {
        this.id = id;
    }

    public LetterMspDetail(Long id, long barcode, Long phn,
            String recipientLastName, String recipientFirstName,
            String recipientAddress, String recipientCity,
            String recipientProvince, String recipientPostalCode,
            Character letterPrintedFlag, String createdByNm,
            Date createdOnDtm) {
        this.id = id;
        this.barcode = barcode;
        this.phn = phn;
        this.recipientLastName = recipientLastName;
        this.recipientFirstName = recipientFirstName;
        this.recipientAddress = recipientAddress;
        this.recipientCity = recipientCity;
        this.recipientProvince = recipientProvince;
        this.recipientPostalCode = recipientPostalCode;
        this.letterPrintedFlag = letterPrintedFlag;
        this.createdByNm = createdByNm;
        this.createdOnDtm = createdOnDtm;
    }
    
    private String newCaseCode() {
        return RandomStringUtils.randomAlphabetic(6).toUpperCase();
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getBarcode() {
        return barcode;
    }

    public void setBarcode(long barcode) {
        this.barcode = barcode;
    }

    public Long getPhn() {
        return phn;
    }

    public void setPhn(Long phn) {
        this.phn = phn;
    }

    public String getRecipientLastName() {
        return recipientLastName;
    }

    public void setRecipientLastName(String recipientLastName) {
        this.recipientLastName = recipientLastName;
    }

    public String getRecipientFirstName() {
        return recipientFirstName;
    }

    public void setRecipientFirstName(String recipientFirstName) {
        this.recipientFirstName = recipientFirstName;
    }

    public Date getRecipientBirthday() {
        return recipientBirthday;
    }

    public void setRecipientBirthday(Date recipientBirthday) {
        this.recipientBirthday = recipientBirthday;
    }

    public String getRecipientAddress() {
        return AddressHelper.displayAddress(recipientAddress, recipientPostalCode, recipientCity, recipientProvince);
    }

    public void setRecipientAddress(String recipientAddress) {
        this.recipientAddress = recipientAddress;
    }

    public String getRecipientCountry() {
        return recipientCountry;
    }

    public void setRecipientCountry(String recipientCountry) {
        this.recipientCountry = recipientCountry;
    }

    public String getRecipientCity() {
        return recipientCity;
    }

    public void setRecipientCity(String recipientCity) {
        this.recipientCity = recipientCity;
    }

    public String getRecipientProvince() {
        return recipientProvince;
    }

    public void setRecipientProvince(String recipientProvince) {
        this.recipientProvince = recipientProvince;
    }

    public String getRecipientPostalCode() {
        return recipientPostalCode;
    }

    public void setRecipientPostalCode(String recipientPostalCode) {
        this.recipientPostalCode = recipientPostalCode;
    }

    public Character getLetterPrintedFlag() {
        return letterPrintedFlag;
    }

    public void setLetterPrintedFlag(Character letterPrintedFlag) {
        this.letterPrintedFlag = letterPrintedFlag;
    }

    public Date getLetterDate() {
        return letterDate;
    }

    public void setLetterDate(Date letterDate) {
        this.letterDate = letterDate;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public Project getProjectId() {
        return projectId;
    }

    public void setProjectId(Project projectId) {
        this.projectId = projectId;
    }

    public PracSvaProject getPracSvaProjectId() {
        return pracSvaProjectId;
    }

    public void setPracSvaProjectId(PracSvaProject pracSvaProjectId) {
        this.pracSvaProjectId = pracSvaProjectId;
    }

    @XmlTransient
    public LetterTemplate getLetterTemplateId() {
        return letterTemplateId;
    }

    public void setLetterTemplateId(LetterTemplate letterTemplateId) {
        this.letterTemplateId = letterTemplateId;
    }

    public CodesLetterStatus getStatusId() {
        return statusId;
    }

    public void setStatusId(CodesLetterStatus statusId) {
        this.statusId = statusId;
    }

    @XmlTransient
    public List<ServiceMsp> getServiceMspList() {
        return serviceMspList;
    }

    public List<ServiceMsp> getSortedServiceMspList() {
        Collections.sort(serviceMspList, (ServiceMsp other, ServiceMsp one) ->
                one.getSrvDate().compareTo(other.getSrvDate()));

        return serviceMspList;
    }

    public void setServiceMspList(List<ServiceMsp> serviceMspList) {
        this.serviceMspList = serviceMspList;
    }
    
    public String getCaseCode() {
        return caseCode;
    }

    public void setCaseCode(String caseCode) {
        this.caseCode = caseCode;
    }

    public String getRelationship() {
        return relationship;
    }

    public void setRelationship(String relationship) {
        this.relationship = relationship;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }
    
    public String getAdminNotes() {
        return adminNotes;
    }

    public void setAdminNotes(String adminNotes) {
        this.adminNotes = adminNotes;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof LetterMspDetail)) {
            return false;
        }
        LetterMspDetail other = (LetterMspDetail) object;
        return !((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id)));
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.pacl.ejb.entity.LetterMspDetail[ id=" + id + " ]";
    }

}
