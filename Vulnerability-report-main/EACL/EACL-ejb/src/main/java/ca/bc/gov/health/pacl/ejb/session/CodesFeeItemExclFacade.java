/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.ejb.session;

import ca.bc.gov.health.pacl.ejb.entity.CodesFeeItemExcl;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Dan.Stepanov
 */
@Stateless
public class CodesFeeItemExclFacade extends AbstractFacade<CodesFeeItemExcl> implements CodesFeeItemExclFacadeLocal {

    @PersistenceContext(unitName = "PACLPU")
    private EntityManager em;

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public CodesFeeItemExclFacade() {
        super(CodesFeeItemExcl.class);
    }

    /**
     * Finds fee item codes that are not excluded (exclusion flag not 'Y' and null).
     * @param exclusionFlag String - exclusion flag for the fee item records
     *
     * @return List<CodesFeeItemExcl>
     */
    @Override
    public List<CodesFeeItemExcl> findExcludedFeeItemCodes(String exclusionFlag) {
        Query query = em.createNativeQuery("SELECT * FROM CODES_FEE_ITEM_EXCL cfi"
                + " WHERE cfi.EXCLUSION_FLAG <> ?1 OR cfi.EXCLUSION_FLAG IS NULL", CodesFeeItemExcl.class);
        query.setParameter(1, Character.valueOf(exclusionFlag.charAt(0)));
        return query.getResultList();
    }

    /**
     * Finds fee item short description by fee item code.
     * @param feeItemCode String - fee item code identifier
     *
     * @return CodesFeeItemExcl
     */
    @Override
    public CodesFeeItemExcl findFeeItemByCode(String feeItemCode) throws Exception {

        CodesFeeItemExcl codesFeeItemExcl = new CodesFeeItemExcl();
        Query q = em.createNamedQuery("CodesFeeItemExcl.findByFitmCd");
        q.setParameter("fitmCd", feeItemCode);

        try {  //if part
            if ((CodesFeeItemExcl) q.getSingleResult() != null) {
                return codesFeeItemExcl = (CodesFeeItemExcl) q.getSingleResult();
            } 
        } catch(NoResultException e) {
            //create a new CodesFeeItemExcl record.
            return codesFeeItemExcl = new CodesFeeItemExcl();
        }

        return codesFeeItemExcl;
    }
    
    /**
     * Used to return a list of searched fee items
     * @param code
     * @return 
     */
    @Override
    public List<CodesFeeItemExcl> findByFeeCode(String code){
        List<CodesFeeItemExcl> codesFeeItemExclList = new ArrayList<>();
        Query q = em.createNamedQuery("CodesFeeItemExcl.findByFitmCdLike");
        q.setParameter("fitmCd", code );

        try {  
            return codesFeeItemExclList = q.getResultList();
        } catch(NoResultException e) {
            //create a new CodesFeeItemExcl record.
            return codesFeeItemExclList = new ArrayList<>();
        }
    }

    /**
     * Finds fee item code by the Long Description Code.
     * @param longId
     *
     * @return CodesFeeItemExcl
     *
     */
    @Override
    public CodesFeeItemExcl findFeeItemByLong(String longId){
        CodesFeeItemExcl codesFeeItemExcl = new CodesFeeItemExcl();
        Query q = em.createNamedQuery("CodesFeeItemExcl.findByFitmDscrCd");
        q.setParameter("fitmDscrCd", longId);
        
        try {  //if part
            if ((CodesFeeItemExcl) q.getSingleResult() != null) {
                return codesFeeItemExcl = (CodesFeeItemExcl) q.getSingleResult();
            } 
        } catch(NoResultException e) {
            //create a new CodesFeeItemExcl record.
            return codesFeeItemExcl = new CodesFeeItemExcl();
        }
        return codesFeeItemExcl;
    }

}
