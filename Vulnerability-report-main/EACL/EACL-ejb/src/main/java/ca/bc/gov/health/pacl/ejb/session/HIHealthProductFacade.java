/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.ejb.session;

import ca.bc.gov.health.pacl.ejb.entity.AdminOptions;
import ca.bc.gov.health.pacl.ejb.entity.AdminOptionsMsp;
import ca.bc.gov.health.pacl.ejb.entity.CodesDrugRestrictions;
import ca.bc.gov.health.pacl.ejb.entity.CodesProjectDinPin;
import ca.bc.gov.health.pacl.ejb.entity.Project;
import ca.bc.gov.health.pacl.model.HIPrescriptionLetter;
import ca.bc.gov.health.pacl.util.AddressHelper;
import ca.bc.gov.health.pacl.util.PaclConstants;
import ca.bc.gov.health.pacl.util.FuzzyMatch;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.ejb.EJBException;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.Query;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import ca.bc.gov.health.pacl.model.EmailMessage;
import ca.bc.gov.health.pacl.service.EmailService;




/**
 *
 * @author Dan.Stepanov
 */
@Stateless
public class HIHealthProductFacade implements HIHealthProductFacadeLocal {

    private static Logger logger = Logger.getLogger(HIHealthProductFacade.class.getName());

    /*
     * Facade for persistence for drug restrictions, inclusions and adminOptions
     */
    @EJB
    private CodesDrugRestrictionsFacadeLocal drugRestrictionsFacade;
    @EJB
    private CodesProjectDinPinFacadeLocal projectDinPinFacade;
    @EJB
    private AdminOptionsFacadeLocal adminOptionsFacade;
    @EJB
    private HealthideasFacadeLocal hiFacade;

    /**
     * Which AHIP schema will we be connecting to?.
     */
    private String schemaPrefix;

    /**
     * Default Constructor.
     */
    public HIHealthProductFacade() {
    }

    /**
     * Lookup the AHIP schema prefix for this environment.
     */
    @PostConstruct
    public void init(){
        schemaPrefix = hiFacade.lookupSchemaPrefixFromJNDI();
    }

    /**
     * Verify if provider codes from screen exists in HI.
     * @param EntityManager em - Entity Manager instance to use
     * @param pharmCodes List<String> - provider input codes
     *
     * @return List<String>
     */
    @Override
    public List<String> verifyProviderCodesHI(EntityManager em, List<String> pharmCodes) {
        List<String> pharmCodesHI = new ArrayList<>();
        // search HealthIdeas for the pharmacy codes;
        // then create a list of PharmacyProvider instances
        pharmCodes.forEach((String pharmacyCode) -> {
            List<String> pharmCodesScreen = new ArrayList<>();
            Query query = em.createNativeQuery("select FAC.FCTY_IDNT AS PHMCD"
                    + " FROM " + schemaPrefix + ".CB_DTL_DM_FCTY_VW FAC"
                            + "  WHERE FAC.FCTY_IDNT = ?1");
            query.setParameter(1, pharmacyCode.trim().toUpperCase());
            try {
                pharmCodesScreen = query.getResultList();
            } catch (EJBException e) {
                for (Throwable t = e.getCause(); t != null; t = t.getCause()) {
                    if (t.getClass().getName().equals("java.sql.SQLException")) {
                        logger.log(Level.INFO, "Cannot find the record in the system.", e);
                        throw e;
                    }
                }
            }
            if (!pharmCodesScreen.isEmpty()) {
                pharmCodesHI.add(pharmacyCode.trim());
            }
        });
        return pharmCodesHI;
    }

    /**
     * Finds pharmacy/provider name by code in HI.
     * @param EntityManager em - Entity Manager instance to use
     * @param pharmacyPOfromHI String - provider input code
     *
     * @return String
     */
    @Override
    public String findProviderName(EntityManager em, String pharmacyPOfromHI) {
        Query query = em.createNativeQuery("select FAC.FCTY AS PHM_NAME"
                + " FROM " + schemaPrefix + ".CB_DTL_DM_FCTY_VW FAC"
                + " WHERE FAC.FCTY_IDNT = ?1");
        query.setParameter(1, pharmacyPOfromHI);
        return (String) query.getSingleResult();
    }

    /**
     * Retrieve the claims records for the selected pharmacies from HI
     * with mandatory/optional fields.
     *
     * @param EntityManager em - Entity Manager instance to use
     * @param pharmCodesScreen List<String> - pharmacy codes selected from the screen
     * @param phCarePlanNames List<String> - pharmacare plans selected from the screen
     * @param project Project - project with input values from session/screen
     * @param drugCodesScreen List<String> - drug codes from the screen
     * @param doctorNumber String - prescriber practitioner id from screen
     * @param phn String - PHN input value from the screen
     * @param ingredientCost BigDecimal  - ingredient cost input value from the screen
     *
     * @return List<HIPrescriptionLetter> hIPrescriptionLetters - a list of
     * records with prescriptions/letters/pharmacies from HI
     */
    @Override
    public List<HIPrescriptionLetter> getHIClaimsForPharmacy(EntityManager em,
            List<String> pharmCodes, List<String> phCarePlans, Project project,
            List<String> optionalDrugCodes, String doctorNumber, String phn,
            BigDecimal ingredientCost) {

        // build the pharmacy codes
        String delimiter = ", ";
        String apos = "'";

        Iterator<? extends String> iter = pharmCodes.iterator();
        StringBuilder pharmCodeString = new StringBuilder();
        pharmCodeString.append(apos).append(iter.next()).append(apos);
        while (iter.hasNext()) {
            pharmCodeString.append(delimiter).append(apos).append(iter.next()).append(apos);
        }

        // build the pharmacare plans codes
        Iterator<? extends String> iterPlans = phCarePlans.iterator();
        StringBuilder phCareString = new StringBuilder();
        phCareString.append(apos).append(iterPlans.next()).append(apos);
        while (iterPlans.hasNext()) {
            phCareString.append(delimiter).append(apos).append(iterPlans.next()).append(apos);
        }

        // retrieve drug restrictions
        List<String> drugRestrictions = new ArrayList<>();
        for (CodesDrugRestrictions drugRestrict : drugRestrictionsFacade.findAll()) {
            String drugRst = drugRestrict.getRestrictionDesc();
            drugRestrictions.add(drugRst);
        }
        // build the drug restriction rules
        Iterator<? extends String> iterDrugs = drugRestrictions.iterator();
        StringBuilder restrDrugs = new StringBuilder();
        restrDrugs.append(" AND ").append(iterDrugs.next());
        while (iterDrugs.hasNext()) {
            restrDrugs.append(" AND ").append(iterDrugs.next());
        }

        // timestamp check HI
        java.util.Date date = new java.util.Date();
        logger.log(Level.INFO, "timestamp before query HI = : " + new java.sql.Timestamp(date.getTime()));

        StringBuilder queryBuilderHI = new StringBuilder();
        // Subquery to identify all matching PHN records
        // Optimized the query - removed api_clntcmpl_app.getAttribute calls
        // and parsing of the address/city/province/postal code/country 
        queryBuilderHI.append("with t as ("
                + " SELECT DISTINCT"
                + " FT.CLM_NUM AS CLM_NUM,"
                + " FAC.FCTY_IDNT AS PHMCD,"
                + " FAC.FCTY AS PHM_NAME,"
                + " CLNT.CLNT_IDNT AS PHNNUM,"
                + " CLNT.CLNT_ANON_IDNT_ID AS CLNT_ANON_IDNT_ID,"
                + " FT.SRV_DATE AS DTOFSERV,"
                + " FT.DSPD_QTY AS QTYDISP,"
                + " HP.DIN_PIN AS DINPIN,"
                + " HP.TYDF_CODE AS TYDF_CODE,"
                + " HP.DRUG_BRAND_NM AS BRAND_NAME,"
                + " HP.GEN_DRUG AS GENERIC_NAME,"
                + " HP.GEN_DRUG_STRGTH AS DRUG_STRENGTH,"
                + " FT.BLD_PROD_COST AS INGRCLM,"
                + " CLNT.MRG_CLNT_BRTH_DATE AS BRDT,"
                + schemaPrefix+".api_clntcmpl_app.getAttributeClient(CLNT.mrg_clnt_anon_id, 'MAILING_ADDRESS') AS clnt_addr,"
                + schemaPrefix+".api_clntcmpl_app.getAttributeClient(CLNT.mrg_clnt_anon_id, 'MAIL_ADDRESS_LINE') AS clnt_addr_comparision_field,"
                        
                + " PRAC.PRSCR_PRAC_LIC_BODY_IDNT || '-' || PRAC.PRSCR_PRAC_IDNT AS PRSCR_PRAC_ID,"
                + " PRAC.PRSCR_PRAC_SURNM AS DOC_SURNAME,"
                + " PRAC.PRSCR_PRAC_1ST_GVN_NM AS DOC_FNAME"
                + " FROM "+schemaPrefix+".CB_DTL_FT_PCARECLM_VWP FT,"
                + " "+schemaPrefix+".CB_DTL_DM_CLNT_VW CLNT,"
                + " "+schemaPrefix+".CB_DTL_DM_HLTH_PROD_VW HP,"
                + " "+schemaPrefix+".CB_DTL_DM_FCTY_VW FAC,"
                + " "+schemaPrefix+".CB_DTL_DM_PRSCR_PRAC_VW PRAC,"
                + " "+schemaPrefix+".CB_DTL_DM_PCARE_PLAN_VW PCPLAN,"
                + " "+schemaPrefix+".CB_DTL_DM_CLNT_GEOG_VW ADDR"
                + " WHERE FT.CLNT_LABEL         = CLNT.LABEL"
                + " AND FT.FCTY_LABEL           = FAC.LABEL"
                + " AND FT.HLTH_PROD_LABEL      = HP.LABEL"
                + " AND FT.HLTH_PROD_TYDF_CODE  = HP.TYDF_CODE"
                + " AND FT.PRSCR_PRAC_LABEL     = PRAC.LABEL"
                + " AND FT.PCARE_PLAN_LABEL     = PCPLAN.LABEL"
                + " AND ( FT.DDCTBL_STATUS = 'YP'  OR  FT.PD_SPEC_SRV_FEE > 0 )"
                + " AND FT.pd_spec_srv_fee     = 0"
                + " AND FT.PCARE_PMT_STS_LABEL = 'P'"
                + " AND FAC.FCTY_IDNT IN (" + pharmCodeString.toString() + ")"
                + " AND PCPLAN.PCARE_PLAN_CD IN (" + phCareString.toString() + ")"
                + " AND CLNT.MRG_CLNT_DTH_DATE IS NULL "
                + " AND (MONTHS_BETWEEN(SYSDATE, CLNT.MRG_CLNT_BRTH_DATE) / 12 >= 20"
                + " OR MONTHS_BETWEEN(SYSDATE, CLNT.MRG_CLNT_BRTH_DATE) / 12 <= 9)"
                + " AND FT.TOT_PCARE_PD_AMT    > 0"
                + " AND CLNT.CLNT_IDNT_CDG     = 'PHN'"
                + " AND CLNT.LABEL             = FT.CLNT_LABEL"
                + " AND ADDR.primary_anon_id   = FT.CLNT_GEOG_PRIMARY_ANON_ID"
                + " AND FT.SRV_DATE BETWEEN ?1 AND ?2"
                + restrDrugs.toString()
                + " AND HP.TYDF_CODE = 'MNFHLTHPRD'");

        // HI query with optional search parameters
        // optional search parameters - build drug codes DINPINs from the screen
        if (!optionalDrugCodes.isEmpty() && !optionalDrugCodes.contains((String) "")) {
            Iterator<? extends String> iterDrugCodes = optionalDrugCodes.iterator();
            StringBuilder optionalDrugCodeStr = new StringBuilder();
            optionalDrugCodeStr.append(apos).append(iterDrugCodes.next()).append(apos);
            while (iterDrugCodes.hasNext()) {
                optionalDrugCodeStr.append(delimiter).append(apos).append(iterDrugCodes.next()).append(apos);
            }
            // drug numbers - DINPINs from the screen
            if ((!optionalDrugCodeStr.toString().isEmpty() && !"''".equals(optionalDrugCodeStr.toString()))
                    && optionalDrugCodeStr.toString() != null) {
                queryBuilderHI.append(" AND HP.DIN_PIN IN (" + optionalDrugCodeStr.toString() + ")");
            }
        }
        // doctor number from the screen
        if (doctorNumber != null && !doctorNumber.isEmpty()) {
            queryBuilderHI.append(" AND PRSCR_PRAC_LIC_BODY_IDNT || '-' || PRSCR_PRAC_IDNT = '"
                    + doctorNumber.trim() + "'");
        }
        // patient PHN from the screen
        if (phn != null && !phn.isEmpty()) {
            queryBuilderHI.append(" AND CLNT.CLNT_IDNT = " + phn.trim() + "");
        }
        // ingredient drug cost from the screen
        if (ingredientCost != null) {
            queryBuilderHI.append(" AND FT.BLD_PROD_COST >= " + ingredientCost + "");
        }

        String afterOptionalQuery =
                " AND PRAC.PRSCR_PRAC_SURNM IS NOT NULL )";
        queryBuilderHI.append(afterOptionalQuery);

        // Select random PHNs per pharmacy from the subquery that return
        // all matching PHNs and limit to the max number of PHN per pharmacy
        // provided at the screen multiplied with an 'over-sampling' coeficient.
        // Then selects the detailed claims for the
        // PHNs randomly selected in the above query and limit the claims
        // to the max number of claims per PHN from the screen input.
        String endQueryHI =
                " SELECT"
                + " PHMCD,"
                + " PHM_NAME,"
                + " PHNNUM,"
                + " DTOFSERV,"
                + " QTYDISP,"
                + " DINPIN,"
                + " BRAND_NAME,"
                + " GENERIC_NAME,"
                + " DRUG_STRENGTH,"
                + " INGRCLM,"
                + " BRDT,"
                + " clnt_addr,"
                + " address_line_1,"
                + "address_line_2,"
                + "address_line_3,"
                + "address_line_4,"
                + " POSTAL_CODE,"
                + " LEGAL_SURNAME,"
                + " LEGAL_FIRST_GIVEN_NAME,"
                + " TYDF_CODE,"
                + " PRSCR_PRAC_ID,"
                + " DOC_SURNAME,"
                + " DOC_FNAME,"
                + "clnt_addr_comparision_field"
                
                + "    FROM ( "
                + "      SELECT"
                + "         DENSE_RANK () OVER (PARTITION BY t1.PHMCD ORDER BY t1.PHMCD, t1.PHNNUM DESC) COUNT_PHN_PER_PHARM,"
                + "         ROW_NUMBER () OVER (PARTITION BY t1.PHNNUM ORDER BY t1.PHNNUM) COUNT_CLM_PER_PHN,"
                + "         t1.PHMCD,"
                + "         PHM_NAME,"
                + "         t1.PHNNUM,"
                + "         CLNT_ANON_IDNT_ID,"
                + "         DTOFSERV,"
                + "         QTYDISP,"
                + "         DINPIN,"
                + "         BRAND_NAME,"
                + "         GENERIC_NAME,"
                + "         DRUG_STRENGTH,"
                + "         INGRCLM,"
                + "         BRDT,"
                + "         clnt_addr,"
                + "         SUBSTR(clnt_addr, 1,                         INSTR(clnt_addr,'|',1)-1)                            AS address_line_1,"
                + "         SUBSTR(clnt_addr, INSTR(clnt_addr,'|',1,1)+1,INSTR(clnt_addr,'|',1,2)-INSTR(clnt_addr,'|',1)-1)   AS address_line_2,"
                + "         SUBSTR(clnt_addr, INSTR(clnt_addr,'|',1,2)+1,INSTR(clnt_addr,'|',1,3)-INSTR(clnt_addr,'|',1,2)-1) AS address_line_3,"
                + "         SUBSTR(clnt_addr, INSTR(clnt_addr,'|',1,3)+1,INSTR(clnt_addr,'|',1,4)-INSTR(clnt_addr,'|',1,3)-1) AS address_line_4,"
                + "         SUBSTR(clnt_addr, INSTR(clnt_addr,'|',1,4)+1)                                                     AS postal_code,"
                + "         "+schemaPrefix+".api_clntcmpl_app.getAttribute(CLNT_ANON_IDNT_ID, 'LEGAL_SURNAME') AS LEGAL_SURNAME,"
                + "         "+schemaPrefix+".api_clntcmpl_app.getAttribute(CLNT_ANON_IDNT_ID,'LEGAL_FIRST_GIVEN_NAME') AS LEGAL_FIRST_GIVEN_NAME,"
                + "         TYDF_CODE,"
                + "         PRSCR_PRAC_ID,"
                + "         DOC_SURNAME,"
                + "         DOC_FNAME,"
                + "         clnt_addr_comparision_field"
                + "      FROM"
                + "            ( SELECT PHNNUM,"
                + "                    PHMCD,"
                + "                    ROW_NUMBER() over (PARTITION BY PHMCD ORDER  BY DBMS_RANDOM.random ) rk_phn_per_pharm"
                + "             FROM (SELECT DISTINCT PHNNUM, PHMCD from t) ) t1, t"
                + "        WHERE  t1.rk_phn_per_pharm <= " + project.getMaxPatients() * PaclConstants.OVER_SAMPLING_COEFICIENT
                + "           AND    t.PHNNUM = t1.PHNNUM"
                + "           AND    t.PHMCD = t1.PHMCD)"
                + "  WHERE COUNT_PHN_PER_PHARM <= " + project.getMaxPatients()
                + "    AND COUNT_CLM_PER_PHN <= " + PaclConstants.MAX_CLAIMS_LETTER_PRESCR // TODO - add new field for prescriptions claim counter in ADMIN_OPTIONS table
                + "    AND LEGAL_SURNAME IS NOT NULL"
                + "    AND LEGAL_FIRST_GIVEN_NAME IS NOT NULL"
                + "    AND address_line_1 IS NOT NULL"
                + "    AND POSTAL_CODE IS NOT NULL AND POSTAL_CODE LIKE 'V%'"
                + " ORDER BY PHMCD, COUNT_PHN_PER_PHARM, COUNT_CLM_PER_PHN";

        queryBuilderHI.append(endQueryHI);
        Query queryHI = em.createNativeQuery(queryBuilderHI.toString());
        logger.log(Level.INFO, "query HI = " + queryBuilderHI.toString());

        queryHI.setParameter(1, project.getProjectFromDate());
        queryHI.setParameter(2, project.getProjectToDate());
        List result = queryHI.getResultList();

        java.util.Date date2 = new java.util.Date();
        logger.log(Level.INFO, "timestamp after query HI = : " + new java.sql.Timestamp(date2.getTime()));
        List<String> ErrorList = new ArrayList<>();
            
        List<HIPrescriptionLetter> hIPrescriptionLetters = new ArrayList<>(result.size());

        Object[] record;
        HIPrescriptionLetter hiPrescr;
        for (int i = 0; i < result.size(); i++) {
            record = (Object[]) result.get(i);
            
            //BCMOHAM-18966
            
            
            String Address1 = ((String)record[12]).toLowerCase().replaceAll("\\s+","");
            String AddressComparison = ((String)record[23]).toLowerCase().replaceAll("\\s+","");
            logger.log(Level.INFO, "Checking street address for quality: {0}", Address1);
            int matchScore = FuzzyMatch.fuzzyMatch(Address1, AddressComparison);
            if (matchScore < 85 && result.size() > 1)
            {
                logger.log(Level.INFO, "Prescription Letter Batch Error: Address rejected due to low confidence match: {0}", Address1);
                ErrorList.add(Address1 + "|" + AddressComparison );
            }
            
            else
            {

            hiPrescr = new HIPrescriptionLetter();
            hiPrescr.setPharmacyCode((String) record[0]);
            hiPrescr.setPharmacyName((String) record[1]);
            hiPrescr.setPhn(Long.parseLong((String) record[2]));
            hiPrescr.setPrescriptionDate((Date) record[3]);
            hiPrescr.setMedicationQuantity((BigDecimal) record[4]);
            hiPrescr.setDinPin((String) record[5]);
            hiPrescr.setMedicationBrandName((String) record[6]);
            hiPrescr.setMedicationGenericName((String) record[7]);
            hiPrescr.setDrugStrength((String) record[8]);
            hiPrescr.setIngredientCost((BigDecimal) record[9]);
            hiPrescr.setPatientBirthday((Date) record[10]);
            hiPrescr.setPatientAddress((String) record[11]);
            hiPrescr.setPatientStreetAddress(AddressHelper.concatAddress((String) record[12],(String) record[13],(String) record[14],(String) record[15]));
            hiPrescr.setPatientPostalCode((String) record[16]);
            hiPrescr.setPatientCity(" ");
            hiPrescr.setPatientProvince(" ");
            hiPrescr.setPatientLastNm((String) record[17]);
            hiPrescr.setPatientFirstNm((String) record[18]);
            hiPrescr.setTypeDefCode((String) record[19]);
            hiPrescr.setPhysicianId((String) record[20]);
            hiPrescr.setPhysicianLastNm((String) record[21]);
            hiPrescr.setPhysicianFirstNm((String) record[22]);

            hIPrescriptionLetters.add(hiPrescr);
            }
        }
  
        if(!ErrorList.isEmpty())
        {
            //try
            //{
            //    sendWarningEmail(ErrorList);
            //}
            //catch (EJBException e) {
            //             logger.log(Level.INFO, "The email for the list of rejected addresses for this letter run cannot be sent to the Admin Email, probably because the admin email address has not been set in the database {0}" , e);
            //}
        }
        
        return hIPrescriptionLetters;
    }

    /**
     * Retrieve the claims records for selected P&O providers from HI
     * with mandatory/optional fields.
     *
     * @param EntityManager em - Entity Manager instance to use
     * @param pharmCodesScreen List<String> - pharmacy codes selected from the screen
     * @param phCarePlanNames List<String> - pharmacare plans selected from the screen
     * @param project Project - project with input values from session/screen
     * @param phn String - PHN input value from the screen
     *
     * @return List<HIPrescriptionLetter> hIPrescriptionLetters - a list of
     * records with PO claims/letters/pharmacies from HI
     */
    @Override
    public List<HIPrescriptionLetter> getHIClaimsForPOProvider(EntityManager em,
            List<String> pharmCodes, List<String> phCarePlans,
            Project project, String phn) {

        // build the pharmacy codes
        String delimiter = ", ";
        String apos = "'";

        Iterator<? extends String> iter = pharmCodes.iterator();
        StringBuilder pharmCodeString = new StringBuilder();
        pharmCodeString.append(apos).append(iter.next()).append(apos);
        while (iter.hasNext()) {
            pharmCodeString.append(delimiter).append(apos).append(iter.next()).append(apos);
        }

        // build the pharmacare plans codes
        Iterator<? extends String> iterPlans = phCarePlans.iterator();
        StringBuilder phCareString = new StringBuilder();
        phCareString.append(apos).append(iterPlans.next()).append(apos);
        while (iterPlans.hasNext()) {
            phCareString.append(delimiter).append(apos).append(iterPlans.next()).append(apos);
        }

        // retrieve DINPINs inclusions
        List<String> dinPinInclusions = new ArrayList<>();
        for (CodesProjectDinPin projDinPin : projectDinPinFacade.findDinPinByProjectTypeId(project.getProjectTypeId().getId())) {
            String dinPinIncl = projDinPin.getDinPin();
            dinPinInclusions.add(dinPinIncl);
        }
        // build the DINPINs inclusions 
        Iterator<? extends String> iterDinPins = dinPinInclusions.iterator();
        StringBuilder dinPinString = new StringBuilder();
        dinPinString.append(apos).append(iterDinPins.next()).append(apos);
        while (iterDinPins.hasNext()) {
            dinPinString.append(delimiter).append(apos).append(iterDinPins.next()).append(apos);
        }
        StringBuilder queryBuilderHI = new StringBuilder();

        // Subquery to identify all matching PHN records
        // Optimized the query - removed api_clntcmpl_app.getAttribute calls
        // and parsing of the address/city/province/postal code/country 
        queryBuilderHI.append("with t as ("
                + " SELECT DISTINCT"
                + " FT.CLM_NUM AS CLM_NUM,"
                + " FAC.FCTY_IDNT AS PHMCD,"
                + " FAC.FCTY AS PHM_NAME,"
                + " CLNT.CLNT_IDNT AS PHNNUM,"
                + " CLNT.CLNT_ANON_IDNT_ID AS CLNT_ANON_IDNT_ID,"
                + " FT.SRV_DATE AS DTOFSERV,"
                + " HP.DIN_PIN AS DINPIN,"
                + " HP.TYDF_CODE AS TYDF_CODE,"
                + " HP.DRUG_BRAND_NM AS MEDICAL_DEVICE_BENEFIT,"
                + " FT.TOT_PCARE_PD_AMT AS TOTAL_PCARE_PAY,"
                + " FT.OUTS_COPAY_AMT AS TOTAL_COPAY,"
                + " CLNT.MRG_CLNT_BRTH_DATE AS BRDT,"
                + schemaPrefix + ".api_clntcmpl_app.getAttributeClient(CLNT.mrg_clnt_anon_id, 'MAILING_ADDRESS') AS clnt_addr,"
                + schemaPrefix+".api_clntcmpl_app.getAttributeClient(CLNT.mrg_clnt_anon_id, 'MAIL_ADDRESS_LINE') AS clnt_addr_comparision_field"
                + " FROM "+schemaPrefix+".CB_DTL_FT_PCARECLM_VWP FT,"
                + " "+schemaPrefix+".CB_DTL_DM_CLNT_VW CLNT,"
                + " "+schemaPrefix+".CB_DTL_DM_HLTH_PROD_VW HP,"
                + " "+schemaPrefix+".CB_DTL_DM_FCTY_VW FAC,"
                + " "+schemaPrefix+".CB_DTL_DM_PRSCR_PRAC_VW PRAC,"
                + " "+schemaPrefix+".CB_DTL_DM_PCARE_PLAN_VW PCPLAN,"
                + " "+schemaPrefix+".CB_DTL_DM_CLNT_GEOG_VW ADDR"
                + " WHERE FT.CLNT_LABEL = CLNT.LABEL"
                + " AND FT.FCTY_LABEL = FAC.LABEL"
                + " AND FT.HLTH_PROD_LABEL = HP.LABEL"
                + " AND FT.HLTH_PROD_TYDF_CODE = HP.TYDF_CODE"
                + " AND FT.PRSCR_PRAC_LABEL = PRAC.LABEL"
                + " AND FT.PCARE_PLAN_LABEL = PCPLAN.LABEL"
                + " AND ( FT.DDCTBL_STATUS = 'YP' OR FT.PD_SPEC_SRV_FEE > 0 )"
                + " AND FT.PD_SPEC_SRV_FEE = 0"
                + " AND FT.PCARE_PMT_STS_LABEL = 'P'"
                + " AND FAC.FCTY_IDNT IN (" + pharmCodeString.toString() + ")"
                + " AND PCPLAN.PCARE_PLAN_CD IN (" + phCareString.toString() + ")"
                + " AND CLNT.MRG_CLNT_DTH_DATE IS NULL"
                + " AND FT.TOT_PCARE_PD_AMT > 0"
                + " AND CLNT.CLNT_IDNT_CDG = 'PHN'"
                + " AND ADDR.PRIMARY_ANON_ID = FT.CLNT_GEOG_PRIMARY_ANON_ID"
                + " AND FT.SRV_DATE BETWEEN ?1 AND ?2"
                + " AND HP.DIN_PIN IN (" + dinPinString.toString() + ")"
                + " AND HP.TYDF_CODE = 'MNFHLTHPRD'");        

        // HI query with optional search parameters
        // patient PHN from the screen
        if (phn != null && !phn.isEmpty()) {
            queryBuilderHI.append(" AND CLNT.CLNT_IDNT = " + phn.trim() + "");
        }

        String afterOptionalQuery =
                " )";
        queryBuilderHI.append(afterOptionalQuery);

        // Select random PHNs per pharmacy from the subquery that return
        // all matching PHNs and limit to the max number of PHN per pharmacy
        // provided at the screen multiplied with an 'over-sampling' coeficient.
        // Then selects the detailed claims for the
        // PHNs randomly selected in the above query and limit the claims
        // to the max number of claims per PHN from the screen input.
        String endQueryHI =
                " SELECT"
                + " PHMCD,"
                + " PHM_NAME,"
                + " PHNNUM,"
                + " DTOFSERV,"
                + " DINPIN,"
                + " MEDICAL_DEVICE_BENEFIT,"
                + " TOTAL_PCARE_PAY,"
                + " TOTAL_COPAY,"
                + " BRDT,"
                + " CLNT_ADDR,"
                + " address_line_1,"
                + "address_line_2,"
                + "address_line_3,"
                + "address_line_4,"
                + " POSTAL_CODE,"
                + " LEGAL_SURNAME,"
                + " LEGAL_FIRST_GIVEN_NAME,"
                + "clnt_addr_comparision_field,"
                + " TYDF_CODE"
                + "    FROM ( "
                + "      SELECT"
                + "         DENSE_RANK () OVER (PARTITION BY t1.PHMCD ORDER BY t1.PHMCD, t1.PHNNUM DESC) COUNT_PHN_PER_PHARM,"
                + "         ROW_NUMBER () OVER (PARTITION BY t1.PHNNUM ORDER BY t1.PHNNUM) COUNT_CLM_PER_PHN,"
                + "         t1.PHMCD,"
                + "         PHM_NAME,"
                + "         t1.PHNNUM,"
                + "         CLNT_ANON_IDNT_ID,"
                + "         DTOFSERV,"
                + "         DINPIN,"
                + "         MEDICAL_DEVICE_BENEFIT,"
                + "         TOTAL_PCARE_PAY,"
                + "         TOTAL_COPAY,"
                + "         BRDT,"
                + "         clnt_addr,"
                + "         SUBSTR(clnt_addr, 1,                         INSTR(clnt_addr,'|',1)-1)                            AS address_line_1,"
                + "         SUBSTR(clnt_addr, INSTR(clnt_addr,'|',1,1)+1,INSTR(clnt_addr,'|',1,2)-INSTR(clnt_addr,'|',1)-1)   AS address_line_2,"
                + "         SUBSTR(clnt_addr, INSTR(clnt_addr,'|',1,2)+1,INSTR(clnt_addr,'|',1,3)-INSTR(clnt_addr,'|',1,2)-1) AS address_line_3,"
                + "         SUBSTR(clnt_addr, INSTR(clnt_addr,'|',1,3)+1,INSTR(clnt_addr,'|',1,4)-INSTR(clnt_addr,'|',1,3)-1) AS address_line_4,"
                + "         SUBSTR(clnt_addr, INSTR(clnt_addr,'|',1,4)+1)                                                     AS postal_code, "
                + "         "+schemaPrefix+".api_clntcmpl_app.getAttribute(CLNT_ANON_IDNT_ID, 'LEGAL_SURNAME') AS LEGAL_SURNAME,"
                + "         "+schemaPrefix+".api_clntcmpl_app.getAttribute(CLNT_ANON_IDNT_ID,'LEGAL_FIRST_GIVEN_NAME') AS LEGAL_FIRST_GIVEN_NAME,"
                + "         clnt_addr_comparision_field,"
                + "         TYDF_CODE"
                + "      FROM"
                + "            ( SELECT PHNNUM,"
                + "                    PHMCD,"
                + "                    ROW_NUMBER() over (PARTITION BY PHMCD ORDER  BY DBMS_RANDOM.random ) rk_phn_per_pharm"
                + "             FROM (SELECT DISTINCT  PHNNUM, PHMCD from t) ) t1, t"
                + "        WHERE  t1.rk_phn_per_pharm <= " + project.getMaxPatients() * PaclConstants.OVER_SAMPLING_COEFICIENT
                + "           AND    t.PHNNUM = t1.PHNNUM"
                + "           AND    t.PHMCD = t1.PHMCD  )"
                + "  WHERE  COUNT_PHN_PER_PHARM <= " + project.getMaxPatients()
                + "    AND  COUNT_CLM_PER_PHN <= " + PaclConstants.MAX_CLAIMS_LETTER_PO // TODO - add new field for P&O claim counter in ADMIN_OPTIONS table
                + "    AND LEGAL_SURNAME IS NOT NULL"
                + "    AND LEGAL_FIRST_GIVEN_NAME IS NOT NULL"
                + "    AND address_line_1 IS NOT NULL"
                + "    AND POSTAL_CODE IS NOT NULL AND POSTAL_CODE LIKE 'V%'"
                + " ORDER BY PHMCD, COUNT_PHN_PER_PHARM, COUNT_CLM_PER_PHN";

        queryBuilderHI.append(endQueryHI);
        Query queryHI = em.createNativeQuery(queryBuilderHI.toString());
        logger.log(Level.INFO, "query HI = " + queryBuilderHI.toString());

        queryHI.setParameter(1, project.getProjectFromDate());
        queryHI.setParameter(2, project.getProjectToDate());
        List result = queryHI.getResultList();

        List<HIPrescriptionLetter> hILettersPO = new ArrayList<>(result.size());
            List<String> ErrorList = new ArrayList<>();

        Object[] record;
        HIPrescriptionLetter hiLetterPO;
        for (int i = 0; i < result.size(); i++) {
            record = (Object[]) result.get(i);
            //BCMOHAM-18966
            
            
            String Address1 = ((String)record[10]).toLowerCase().replaceAll("\\s+","");
            String AddressComparison = ((String)record[17]).toLowerCase().replaceAll("\\s+","");;
            logger.log(Level.INFO, "Checking street address for quality: {0}", Address1);
            int matchScore = FuzzyMatch.fuzzyMatch(Address1, AddressComparison);
            if (matchScore < 85 && result.size() > 1)
            {
                logger.log(Level.INFO, "PO Letter Batch Error: Address rejected due to low confidence match: {0}", Address1);
                ErrorList.add(Address1 + "|" + AddressComparison );
            }
            
            else
            {
            hiLetterPO = new HIPrescriptionLetter();
            hiLetterPO.setPharmacyCode((String) record[0]);
            hiLetterPO.setPharmacyName((String) record[1]);
            hiLetterPO.setPhn(Long.parseLong((String) record[2]));
            hiLetterPO.setPrescriptionDate((Date) record[3]);
            hiLetterPO.setDinPin((String) record[4]);
            hiLetterPO.setMedicationBrandName((String) record[5]);
            hiLetterPO.setTotalPcarePay((BigDecimal) record[6]);
            hiLetterPO.setTotalCoPay((BigDecimal) record[7]);
            hiLetterPO.setPatientBirthday((Date) record[8]);
            hiLetterPO.setPatientAddress((String) record[9]);
            hiLetterPO.setPatientStreetAddress(AddressHelper.concatAddress((String) record[10],(String) record[11],(String) record[12],(String) record[13]));
            hiLetterPO.setPatientCity(" ");
            hiLetterPO.setPatientProvince(" ");
            hiLetterPO.setPatientPostalCode((String) record[14]);
            hiLetterPO.setPatientLastNm((String) record[15]);
            hiLetterPO.setPatientFirstNm((String) record[16]);
            hiLetterPO.setTypeDefCode((String) record[18]);

            hILettersPO.add(hiLetterPO);
            }
        }

        
        if(!ErrorList.isEmpty())
        {
            //try
            //{
            //    sendWarningEmail(ErrorList);
           // }
           // catch (EJBException e) {
           //              logger.log(Level.INFO, "The email for the list of rejected addresses for this letter run cannot be sent to the Admin Email, probably because the admin email address has not been set in the database {0}" , e);
           // }
        }
        return hILettersPO;
    }

    /**
     * Retrieve the claims records for plan M from HI
     * with mandatory/optional fields.
     *
     * @param EntityManager em - Entity Manager instance to use
     * @param pharmCodesScreen List<String> - pharmacy codes selected from the screen
     * @param phCarePlanMnames List<String> - pharmacare plan M selected from the screen
     * @param project Project - project with input values from session/screen
     * @param optionalDrugCodes List<String> - optional field with drug codes from the screen
     * @param pharmacistNumber String - dispensing practitioner id from screen
     * @param phn String - PHN input value from the screen
     *
     * @return List<HIPrescriptionLetter> hIPrescriptionLetters - a list of
     * records with plan M claims/letters/pharmacies from HI
     */
    @Override
    public List<HIPrescriptionLetter> getHIClaimsForPharmacyPlanM(EntityManager em,
            List<String> pharmCodes, List<String> phCarePlanMnames,
            Project project, List<String> optionalDrugCodes,
            String pharmacistNumber, String phn) {

        // build the pharmacy codes
        String delimiter = ", ";
        String apos = "'";

        Iterator<? extends String> iter = pharmCodes.iterator();
        StringBuilder pharmCodeString = new StringBuilder();
        pharmCodeString.append(apos).append(iter.next()).append(apos);
        while (iter.hasNext()) {
            pharmCodeString.append(delimiter).append(apos).append(iter.next()).append(apos);
        }

        // build the pharmacare plans codes
        Iterator<? extends String> iterPlanM = phCarePlanMnames.iterator();
        StringBuilder phCareString = new StringBuilder();
        phCareString.append(apos).append(iterPlanM.next()).append(apos);
        while (iterPlanM.hasNext()) {
            phCareString.append(delimiter).append(apos).append(iterPlanM.next()).append(apos);
        }

        // retrieve DINPINs inclusions
        List<String> dinPinInclusions = new ArrayList<>();
        for (CodesProjectDinPin projDinPin : projectDinPinFacade.findDinPinByProjectTypeId(project.getProjectTypeId().getId())) {
            String dinPinIncl = projDinPin.getDinPin();
            dinPinInclusions.add(dinPinIncl);
        }
        // build the DINPINs inclusions
        Iterator<? extends String> iterDinPins = dinPinInclusions.iterator();
        StringBuilder dinPinString = new StringBuilder();
        dinPinString.append(apos).append(iterDinPins.next()).append(apos);
        while (iterDinPins.hasNext()) {
            dinPinString.append(delimiter).append(apos).append(iterDinPins.next()).append(apos);
        }

        StringBuilder queryBuilderHI = new StringBuilder();
        // Subquery to identify all matching PHN records
        // Optimized the query - removed api_clntcmpl_app.getAttribute calls
        // and parsing of the address/city/province/postal code/country 
        queryBuilderHI.append("with t as ("
                + " SELECT DISTINCT"
                + " FT.CLM_NUM AS CLM_NUM,"
                + " FAC.FCTY_IDNT AS PHMCD,"
                + " FAC.FCTY AS PHM_NAME,"
                + " CLNT.CLNT_IDNT AS PHNNUM,"
                + " CLNT.CLNT_ANON_IDNT_ID AS CLNT_ANON_IDNT_ID,"
                + " FT.SRV_DATE AS DTOFSERV,"
                + " HP.DIN_PIN AS DINPIN,"
                + " HP.TYDF_CODE AS TYDF_CODE,"
                + " HP.DRUG_BRAND_NM AS BRAND_NAME,"
                + " CLNT.MRG_CLNT_BRTH_DATE AS BRDT,"
                + schemaPrefix+".api_clntcmpl_app.getAttributeClient(CLNT.mrg_clnt_anon_id, 'MAILING_ADDRESS') AS clnt_addr,"
                + schemaPrefix+".api_clntcmpl_app.getAttributeClient(CLNT.mrg_clnt_anon_id, 'MAIL_ADDRESS_LINE') AS clnt_addr_comparision_field,"
                + " PRAC.DSPG_PRAC_LIC_BODY_IDNT || '-' || PRAC.DSPG_PRAC_IDNT AS DSPG_PRAC_ID,"
                + " PRAC.DSPG_PRAC_SURNM AS PHARM_SURNAME,"
                + " PRAC.DSPG_PRAC_1ST_GVN_NM AS PHARM_FNAME"
                + " FROM "+schemaPrefix+".CB_DTL_FT_PCARECLM_VWP FT,"
                + " "+schemaPrefix+".CB_DTL_DM_CLNT_VW CLNT,"
                + " "+schemaPrefix+".CB_DTL_DM_HLTH_PROD_VW HP,"
                + " "+schemaPrefix+".CB_DTL_DM_FCTY_VW FAC,"
                + " "+schemaPrefix+".CB_DTL_DM_DSPG_PRAC_VW PRAC,"
                + " "+schemaPrefix+".CB_DTL_DM_PCARE_PLAN_VW PCPLAN,"
                + " "+schemaPrefix+".CB_DTL_DM_CLNT_GEOG_VW ADDR"
                + " WHERE FT.CLNT_LABEL = CLNT.LABEL"
                + " AND FT.FCTY_LABEL = FAC.LABEL"
                + " AND FT.HLTH_PROD_LABEL = HP.LABEL"
                + " AND FT.HLTH_PROD_TYDF_CODE = HP.TYDF_CODE"
                + " AND FT.DSPG_PRAC_LABEL = PRAC.LABEL"
                // Temporary until Ministry loads plan M data - currently there is no data in HI
                // for plan M in CB_DTL_DM_PCARE_PLAN_VW table
                //            + " AND FT.PCARE_PLAN_LABEL = PCPLAN.LABEL"
                + " AND FAC.FCTY_IDNT IN (" + pharmCodeString.toString() + ")"
                // Temporary - no data in HI for plan M in CB_DTL_DM_PCARE_PLAN_VW
                //            + " AND PCPLAN.PCARE_PLAN_CD IN (" + phCareString.toString() + ")"
                + " AND FT.PCARE_PMT_STS_LABEL NOT IN ('R', 'N')"
                + " AND CLNT.MRG_CLNT_DTH_DATE IS NULL"
                + " AND CLNT.CLNT_IDNT_CDG = 'PHN'"
                + " AND ADDR.PRIMARY_ANON_ID = FT.CLNT_GEOG_PRIMARY_ANON_ID"
                + " AND FT.SRV_DATE BETWEEN ?1 AND ?2"
                + " AND HP.DIN_PIN IN (" + dinPinString.toString() + ")"
                + " AND HP.TYDF_CODE = 'MNFHLTHPRD'");        

        // HI query with optional search parameters
        // optional search parameters - build drug codes DINPINs from the screen
        if (!optionalDrugCodes.isEmpty() && !optionalDrugCodes.contains((String) "")) {
            Iterator<? extends String> iterDrugCodes = optionalDrugCodes.iterator();
            StringBuilder optionalDrugCodeStr = new StringBuilder();
            optionalDrugCodeStr.append(apos).append(iterDrugCodes.next()).append(apos);
            while (iterDrugCodes.hasNext()) {
                optionalDrugCodeStr.append(delimiter).append(apos).append(iterDrugCodes.next()).append(apos);
            }
            // drug numbers - DINPINs from the screen
            if ((!optionalDrugCodeStr.toString().isEmpty() && !"''".equals(optionalDrugCodeStr.toString()))
                    && optionalDrugCodeStr.toString() != null) {
                queryBuilderHI.append(" AND HP.DIN_PIN IN (" + optionalDrugCodeStr.toString() + ")");
            }
        }
        // Pharmacist number from the screen
        if (pharmacistNumber != null && !pharmacistNumber.isEmpty()) {
            queryBuilderHI.append(" AND DSPG_PRAC_LIC_BODY_IDNT || '-' || DSPG_PRAC_IDNT = '"
                    + pharmacistNumber.trim() + "'");
        }
        // patient PHN from the screen
        if (phn != null && !phn.isEmpty()) {
            queryBuilderHI.append(" AND CLNT.CLNT_IDNT = " + phn.trim() + "");
        }

        String afterOptionalQuery =
                " AND PRAC.DSPG_PRAC_SURNM IS NOT NULL)";
        queryBuilderHI.append(afterOptionalQuery);

        // Select random PHNs per pharmacy from the subquery that return
        // all matching PHNs and limit to the max number of PHN per pharmacy
        // provided at the screen multiplied with an 'over-sampling' coeficient.
        // Then selects the detailed claims for the
        // PHNs randomly selected in the above query and limit the claims
        // to the max number of claims per PHN from the screen input.
        String endQueryHI =
                " SELECT"
                + " PHMCD,"
                + " PHM_NAME,"
                + " PHNNUM,"
                + " DTOFSERV,"
                + " DINPIN,"
                + " BRAND_NAME,"
                + " BRDT,"
                + " CLNT_ADDR,"
                + " address_line_1,"
                + "address_line_2,"
                + "address_line_3,"
                + "address_line_4,"
                + " POSTAL_CODE,"
                + " LEGAL_SURNAME,"
                + " LEGAL_FIRST_GIVEN_NAME,"
                + " TYDF_CODE,"
                + " DSPG_PRAC_ID,"
                + " PHARM_SURNAME,"
                + " PHARM_FNAME,"
                + "clnt_addr_comparision_field"
                + "    FROM ( "
                + "      SELECT"
                + "         DENSE_RANK () OVER (PARTITION BY t1.PHMCD ORDER BY t1.PHMCD, t1.PHNNUM DESC) COUNT_PHN_PER_PHARM,"
                + "         ROW_NUMBER () OVER (PARTITION BY t1.PHNNUM ORDER BY t1.PHNNUM) COUNT_CLM_PER_PHN,"
                + "         t1.PHMCD,"
                + "         PHM_NAME,"
                + "         t1.PHNNUM,"
                + "         CLNT_ANON_IDNT_ID,"
                + "         DTOFSERV,"
                + "         DINPIN,"
                + "         BRAND_NAME,"
                + "         BRDT,"
                + "         CLNT_ADDR,"
                + "         SUBSTR(clnt_addr, 1,                         INSTR(clnt_addr,'|',1)-1)                            AS address_line_1,"
                + "         SUBSTR(clnt_addr, INSTR(clnt_addr,'|',1,1)+1,INSTR(clnt_addr,'|',1,2)-INSTR(clnt_addr,'|',1)-1)   AS address_line_2,"
                + "         SUBSTR(clnt_addr, INSTR(clnt_addr,'|',1,2)+1,INSTR(clnt_addr,'|',1,3)-INSTR(clnt_addr,'|',1,2)-1) AS address_line_3,"
                + "         SUBSTR(clnt_addr, INSTR(clnt_addr,'|',1,3)+1,INSTR(clnt_addr,'|',1,4)-INSTR(clnt_addr,'|',1,3)-1) AS address_line_4,"
                + "         SUBSTR(clnt_addr, INSTR(clnt_addr,'|',1,4)+1)                                                     AS postal_code,"
                + "         "+schemaPrefix+".api_clntcmpl_app.getAttribute(CLNT_ANON_IDNT_ID, 'LEGAL_SURNAME') AS LEGAL_SURNAME,"
                + "         "+schemaPrefix+".api_clntcmpl_app.getAttribute(CLNT_ANON_IDNT_ID,'LEGAL_FIRST_GIVEN_NAME') AS LEGAL_FIRST_GIVEN_NAME,"
                + "         TYDF_CODE,"
                + "         DSPG_PRAC_ID,"
                + "         PHARM_SURNAME,"
                + "         PHARM_FNAME,"
                + "         clnt_addr_comparision_field"
                + "      FROM"
                + "            ( SELECT PHNNUM,"
                + "                    PHMCD,"
                + "                    ROW_NUMBER() over (PARTITION BY PHMCD ORDER  BY DBMS_RANDOM.random ) rk_phn_per_pharm"
                + "             FROM (SELECT DISTINCT  PHNNUM, PHMCD from t) ) t1, t"
                + "        WHERE  t1.rk_phn_per_pharm <= " + project.getMaxPatients() * PaclConstants.OVER_SAMPLING_COEFICIENT
                + "           AND    t.PHNNUM = t1.PHNNUM"
                + "           AND    t.PHMCD = t1.PHMCD  )"
                + "  WHERE  COUNT_PHN_PER_PHARM <= " + project.getMaxPatients()
                + "    AND  COUNT_CLM_PER_PHN <= " + PaclConstants.MAX_CLAIMS_LETTER_PLAN_M // TODO - add new field for planM claim counter in ADMIN_OPTIONS table
                + "    AND LEGAL_SURNAME IS NOT NULL"
                + "    AND LEGAL_FIRST_GIVEN_NAME IS NOT NULL"
                + "    AND address_line_1 IS NOT NULL"
                + "    AND POSTAL_CODE IS NOT NULL AND POSTAL_CODE LIKE 'V%'"
                + " ORDER BY PHMCD, COUNT_PHN_PER_PHARM, COUNT_CLM_PER_PHN";

        queryBuilderHI.append(endQueryHI);
        Query queryHI = em.createNativeQuery(queryBuilderHI.toString());
        logger.log(Level.INFO, "query HI = " + queryBuilderHI.toString());

        queryHI.setParameter(1, project.getProjectFromDate());
        queryHI.setParameter(2, project.getProjectToDate());
        List result = queryHI.getResultList();

        List<HIPrescriptionLetter> hILettersM = new ArrayList<>(result.size());
        List<String> ErrorList = new ArrayList<>();
        Object[] record;
        HIPrescriptionLetter hiLetterPlanM;
        for (int i = 0; i < result.size(); i++) {
            record = (Object[]) result.get(i);
            //BCMOHAM-18966

            String Address1 = ((String)record[8]).toLowerCase().replaceAll("\\s+","");
            String AddressComparison = ((String)record[19]).toLowerCase().replaceAll("\\s+","");;
            logger.log(Level.INFO, "Checking street address for quality: {0}", Address1);
            
            
            int matchScore = FuzzyMatch.fuzzyMatch(Address1, AddressComparison);
            if (matchScore < 85 && result.size() > 1 )
            {
                logger.log(Level.INFO, "Prescription Letter Batch Error: Address rejected due to low confidence match: {0}", Address1);
                ErrorList.add(Address1 + "|" + AddressComparison );
            }
            
            else
            {


            hiLetterPlanM = new HIPrescriptionLetter();
            hiLetterPlanM.setPharmacyCode((String) record[0]);
            hiLetterPlanM.setPharmacyName((String) record[1]);
            hiLetterPlanM.setPhn(Long.parseLong((String) record[2]));
            hiLetterPlanM.setPrescriptionDate((Date) record[3]);
            hiLetterPlanM.setDinPin((String) record[4]);
            hiLetterPlanM.setMedicationBrandName((String) record[5]);
            hiLetterPlanM.setPatientBirthday((Date) record[6]);
            hiLetterPlanM.setPatientAddress((String) record[7]);
            hiLetterPlanM.setPatientStreetAddress(AddressHelper.concatAddress((String) record[8],(String) record[9],(String) record[10],(String) record[11]));
            hiLetterPlanM.setPatientPostalCode((String) record[12]);
            hiLetterPlanM.setPatientCity(" ");
            hiLetterPlanM.setPatientProvince(" ");
            hiLetterPlanM.setPatientLastNm((String) record[13]);
            hiLetterPlanM.setPatientFirstNm((String) record[14]);
            hiLetterPlanM.setTypeDefCode((String) record[15]);
            hiLetterPlanM.setPhysicianId((String) record[16]);
            hiLetterPlanM.setPhysicianLastNm((String) record[17]);
            hiLetterPlanM.setPhysicianFirstNm((String) record[18]);

            hILettersM.add(hiLetterPlanM);
            }
        }

        if(!ErrorList.isEmpty())
        {
            //try
            //{
            //    sendWarningEmail(ErrorList);
            //}
            //catch (EJBException e) {
            //             logger.log(Level.INFO, "The email for the list of rejected addresses for this letter run cannot be sent to the Admin Email, probably because the admin email address has not been set in the database {0}" , e);
            //}
        }
        return hILettersM;
    }

    /**
     * Retrieve the max number of patients allowed per pharmacy.
     *
     * @return long maxPatients - retrieves the max. patients per pharmacy/provider
     */
    public long getHIClaimsForPharmacy() {
        // find the most recent record by date CREATED_ON_DTM
        AdminOptions adminOptions = adminOptionsFacade.findDefaultPatientLimit().get(0);
        long maxPatients = adminOptions.getDefaultPatientLimit();
        return maxPatients;
    }
    
    public void sendWarningEmail(List<String> ErrorList)
    {
        EmailService emailService = new EmailService(PaclConstants.SERVER_EMAIL_HOST, PaclConstants.PACL_SYSTEM_NAME);
        AdminOptionsMsp myAdminOptions = new AdminOptionsMsp();
        String serverAdminEmail = myAdminOptions.getServerAdminEmail();
        EmailMessage myEmailMessage = new EmailMessage();
        myEmailMessage.setEmailAddress(serverAdminEmail);
        String EmailSubject = "Inconsitient addresses were detected in the current letter run and were automatically excluded because of a confidence less than 85%";
        myEmailMessage.setSubject(EmailSubject);
        String ErrorListBody = "";
        
        for (int i = 0; i < ErrorList.size(); i++) {
            String element = ErrorList.get(i);
            ErrorListBody = ErrorListBody + element + "\r\n";
    }
    
        myEmailMessage.setBody(ErrorListBody);
        emailService.sendEmail(myEmailMessage);
    }
    
}