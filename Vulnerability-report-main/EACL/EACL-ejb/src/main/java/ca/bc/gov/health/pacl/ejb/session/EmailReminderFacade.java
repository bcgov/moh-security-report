/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.ejb.session;

import ca.bc.gov.health.pacl.ejb.entity.EmailReminder;
import ca.bc.gov.health.pacl.ejb.entity.Project;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Dan.Stepanov
 */
@Stateless
public class EmailReminderFacade extends AbstractFacade<EmailReminder> implements EmailReminderFacadeLocal {

    private static Logger logger = Logger.getLogger(EmailReminderFacade.class.getName());
    /**
     * New instance for EntityManager class.
     */
    @PersistenceContext(unitName = "PACLPU")
    private EntityManager em;

    /**
     * Gets the local instance of the {@link EntityManager} class.
     * @return entity Manager
     */
    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    /**
     * Default constructor.
     */
    public EmailReminderFacade() {
        super(EmailReminder.class);
    }

    /**
     * Verify if email reminder exists for the project selected for archiving.
     *
     * @param project Project - project to be archived
     *
     * @return EmailReminder emailReminder
     */
    @Override
    public EmailReminder verifyEmailReminderExist(Project project) {
        Query query = em.createNativeQuery("select * from EMAIL_REMINDER er"
                + " where er.PROJECT_ID = ?1", EmailReminder.class);
        query.setParameter(1, project.getId().longValue());
        return (EmailReminder) query.getSingleResult();
    }

    /**
     * Verify if user was notified for the selected project in database.
     *
     * @param project Project - project to be archived
     *
     * @return boolean
     */
    @Override
    public boolean userNotified(Project project) {
        boolean isNotified = false;
        EmailReminder testEmailReminder = new EmailReminder();
        try {
            testEmailReminder = verifyEmailReminderExist(project);
        } catch (Exception e) {
            for (Throwable t = e.getCause(); t != null; t = t.getCause()) {
                if (t.getClass().getName().equals("java.sql.SQLException")) {
                    logger.log(Level.INFO, "Cannot add record, as it violates a constraint.", e);
                    throw e;
                }
            }
        }
        if (testEmailReminder.getId() != null) {
            isNotified = true;
        }
        return isNotified;
    }

    /**
     * Verify if email reminder record has a second reminder date
     * for the selected project to be archived.
     *
     * @param project Project - project to be archived
     *
     * @return EmailReminder emailReminder
     */
    @Override
    public EmailReminder verifySecondDateExist(Project project) {
        Query query = em.createNativeQuery("select * from EMAIL_REMINDER er"
                + " where er.PROJECT_ID = ?1", EmailReminder.class);
        query.setParameter(1, project.getId().longValue());
        return (EmailReminder) query.getSingleResult();
    }
    

    /**
     * Verify if the second reminder date was updated in database for
     * the selected project.
     *
     * @param project Project - project to be archived
     *
     * @return boolean
     */
    @Override
    public boolean secondReminderUpdated(Project project) {
        boolean isSecondReminderUpdated = false;
        EmailReminder testEmailReminder = new EmailReminder();
        try {
            testEmailReminder = verifySecondDateExist(project);
        } catch (Exception e) {
            for (Throwable t = e.getCause(); t != null; t = t.getCause()) {
                if (t.getClass().getName().equals("java.sql.SQLException")) {
                    logger.log(Level.INFO, "Cannot add record, as it violates a constraint.", e);
                    throw e;
                }
            }
        }
        if (testEmailReminder.getSecondReminder() != null) {
            isSecondReminderUpdated = true;
        }
        return isSecondReminderUpdated;
    }

}
