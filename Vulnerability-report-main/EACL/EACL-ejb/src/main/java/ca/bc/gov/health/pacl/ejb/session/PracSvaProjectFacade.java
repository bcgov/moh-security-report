/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.ejb.session;

import ca.bc.gov.health.pacl.ejb.entity.PracSvaProject;
import ca.bc.gov.health.pacl.ejb.entity.Project;
import ca.bc.gov.health.pacl.util.PaclConstants;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Dan.Stepanov
 */
@Stateless
public class PracSvaProjectFacade extends AbstractFacade<PracSvaProject> implements PracSvaProjectFacadeLocal {

    @PersistenceContext(unitName = "PACLPU")
    private EntityManager em;

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public PracSvaProjectFacade() {
        super(PracSvaProject.class);
    }
    
    @Override
    public List<PracSvaProject> findSvaByProjectId(Project project){
        
        Query q = em.createNamedQuery("PracSvaProject.findByProjectId");
        q.setParameter("projectID", project);
         return q.getResultList();
    }

    /**
     * Finds practitioner SVA projects by letter run type.
     * @param letterRunType String - letter run type
     *
     * @return List<PracSvaProject>
     */
    @Override
    public List<PracSvaProject> retrieveRecentSvaCode(String letterRunType) throws Exception {

        List<PracSvaProject> pracSvaProjectList = new ArrayList<>();
        StringBuilder recentSvaService = new StringBuilder();
        recentSvaService.append("select * from PRAC_SVA_PROJECT psp, "
                + "PROJECT prj, CODES_PROJECT_TYPE cpt "
                + "where psp.project_id = prj.id "
                + "and prj.project_type_id = cpt.id ");

        // add conditions for each letter run type
        if (PaclConstants.RANDOM_MONTHLY_TYPE.equals(letterRunType)) {
            recentSvaService.append("and cpt.name = ?1 ");
        } else if (PaclConstants.SELECT_SRV_TYPE.equals(letterRunType) ||
                PaclConstants.SELECT_SRV_QUEST_TYPE.equals(letterRunType)) {
            StringBuilder selectServices = new StringBuilder();
            selectServices.append("'" + PaclConstants.SELECT_SRV_TYPE + "'" +
                    ", " + "'" + PaclConstants.SELECT_SRV_QUEST_TYPE + "'");
            recentSvaService.append("and cpt.name in (" +
                    selectServices.toString() + ") ");
        }

        recentSvaService.append("order by psp.CREATED_ON_DTM desc, "
                + "psp.SVA_PROJECT_CODE desc");

        Query query = em.createNativeQuery(recentSvaService.toString(), PracSvaProject.class);        
        query.setParameter(1, letterRunType);

        try {  //if part
            if ( query.getResultList() != null && !query.getResultList().isEmpty()) {
                return pracSvaProjectList = query.getResultList();
            }
        } catch(NoResultException e) {
            //create a new PracSvaProject record.
            PracSvaProject pracSvaProject = new PracSvaProject();
            pracSvaProjectList.add(pracSvaProject);
            return pracSvaProjectList;
        }

        return pracSvaProjectList;
    }

}