/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.ejb.entitylistener;

import ca.bc.gov.health.pacl.util.CurrentContext;
import ca.bc.gov.health.pacl.util.Util;
import jakarta.faces.context.FacesContext;
import jakarta.persistence.PrePersist;
import jakarta.persistence.PreUpdate;
import java.lang.reflect.InvocationTargetException;
import java.security.Principal;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.beanutils.PropertyUtils;

/**
 *
 * @author greg.perkins
 */
public class AuditListener {

    static final Logger logger = Logger.getLogger(AuditListener.class.getName());
    public static final String USER_SESSION_KEY = "ca.bc.gov.health.login.USER_KEY";

    public AuditListener() {
        logger.log(Level.INFO, "Entity Listener created.");
    }

    @PrePersist
    public void prePersist(Object entity) {
        try {
            PropertyUtils.setProperty(entity, "createdOnDtm", new Date());
            PropertyUtils.setProperty(entity, "statelessTransactionNbr", 1l);
            PropertyUtils.setProperty(entity, "createdByNm", findUserLoggedName());                
        } catch(IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
          logger.warning(e.getMessage());
        }
    }

    @PreUpdate
    public void preUpdate(Object entity) {
        try {
            PropertyUtils.setProperty(entity, "lastModifiedOnDtm", new Date());
            PropertyUtils.setProperty(entity, "lastModifiedByNm", findUserLoggedName());
        } catch(IllegalAccessException | InvocationTargetException | NoSuchMethodException e) {
          logger.warning(e.getMessage());
        }
    }

    /**
     * Pulls the current user's name from FacesContext and CurrentContext.
     *
     * @return String
     */
    private String findUserLoggedName() {
        String userName = "";
        FacesContext ctx = FacesContext.getCurrentInstance();
        String threadUser = CurrentContext.getCurrentUserName().get();

        if (ctx != null) {
            Principal principal = ctx.getExternalContext().getUserPrincipal();
            userName = principal.getName();
        } else if (ctx == null && !Util.notEmpty(threadUser)) {
            userName = "Scheduled Daily Job";
        } else if (ctx == null && Util.notEmpty(threadUser)) {
            userName = threadUser;
        }

        return userName;
    }
}
