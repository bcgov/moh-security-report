/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.service;

import ca.bc.gov.health.pacl.ejb.entity.Project;
import ca.bc.gov.health.pacl.model.AuditUser;
import ca.bc.gov.health.pacl.model.EmailMessage;
import ca.bc.gov.health.pacl.util.PaclConstants;
import jakarta.mail.*;
import jakarta.mail.internet.AddressException;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Service class for sending project reminder email from the email server host.
 *
 * @author dan.stepanov
 */
public class EmailService {

    private static Logger logger = Logger.getLogger(EmailService.class.getName());
    /**
     * Properties object to retrieve system properties.
     */
    private Properties properties;
    /**
     * AuditUser object for editing.
     */
    private AuditUser AuditUser = new AuditUser();
    /**
     * Use to know it is from EACL or PACL project
     */
    private String AuditSystemName;

    /**
     * Constructor with String host parameter.
     *
     * @param host String - email server host address
     * @param auditSystemName String - Use to know it is from EACL or PACL
     * project
     */
    public EmailService(String host, String auditSystemName) {
        AuditSystemName = auditSystemName;
        // Get system properties
        properties = System.getProperties();
        // Setup mail server
        properties.setProperty(PaclConstants.SERVER_EMAIL_HOST, host);
    }

    /**
     * Sends java email messages and adds the same signature to all emails.
     *
     * @param emailObj EmailMessage - Email message model object
     *
     */
    public void sendEmail(EmailMessage emailObj) {
        // Get the default Session object.
        Session session = Session.getDefaultInstance(properties);

        String from = PaclConstants.EMAIL_FROM_ADDRESS_NOTIFICATION;
        String to = emailObj.getEmailAddress();
        String subject = emailObj.getSubject();
        String content = emailObj.getBody()
                + // add the same signature to all emails
                String.format("%n%n%s%n", AuditSystemName + " Audit System");

        try {
            // Create a default MimeMessage object.
            MimeMessage message = new MimeMessage(session);

            // Set From: header field of the header.
            message.setFrom(new InternetAddress(from));

            // Set To: header field of the header.
            message.addRecipients(Message.RecipientType.TO, convertRecipients(to));

            // Set Subject: header field
            message.setSubject(subject);

            // Now set the actual message
            message.setText(content);
            logger.log(Level.INFO, "email message details subject = ".concat(message.getSubject())
                    .concat(" and content = ").concat(content));

            Address[] testAddressTo = (Address[]) message.getRecipients(Message.RecipientType.TO);
            logger.log(Level.INFO, "email message details address user1 = ".concat(testAddressTo[0].toString())
                    .concat(" user 2 = ").concat(testAddressTo[1].toString()));
            // Send message
            Transport.send(message);
        } catch (MessagingException mex) {
            mex.printStackTrace();
        }
    }

    /**
     * Converts email recipient addresses and removes/formats chars from the
     * email addresses.
     *
     * @param recipientStr String - email recipient addresses
     * @throws AddressException
     * @return Address[] - an array of jakarta.mail.Address objects
     *
     */
    private Address[] convertRecipients(String recipientStr) throws AddressException {
        Address[] recipients;

        if (recipientStr.contains(",") || recipientStr.contains(";") || recipientStr.contains(" ")) {
            // format the string for efficient parsing
            recipientStr = recipientStr.replaceAll("[;\\s]+", ",");
            while (recipientStr.contains(",,")) {
                recipientStr = recipientStr.replaceAll(",,", ",");
            }
            // count the number of delimiters, then add one for the length of the array
            recipients = new Address[countThis(recipientStr, ',') + 1];
            // the length of the string is used to determine when to stop parsing
            int len = recipientStr.length();

            // parse the string in a loop, and add each email address to the array
            int fromInt = 0;
            int toInt;
            for (int i = 0; fromInt < len; i++) {
                toInt = recipientStr.indexOf(",", fromInt) > 0 ? recipientStr.indexOf(",", fromInt) : len;
                recipients[i] = new InternetAddress(recipientStr.substring(fromInt, toInt));
                fromInt = toInt + 1;
            }

        } else {
            // usually, there will only be one address, add it to the array
            recipients = new Address[1];
            recipients[0] = new InternetAddress(recipientStr);
        }

        return recipients;
    }

    /**
     * Counts the number of char delimiters from the email addresses.
     *
     * @param str String - email recipient address
     * @param lookFor char - delimiter char to look for
     * @return integer
     *
     */
    private int countThis(String str, char lookFor) {
        int counter = 0;
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) == lookFor) {
                counter++;
            }
        }
        return counter;
    }

    /**
     * Sends first email reminder to PharmaCare project owner and system admins
     * notifying them of remaining days until project will be archived.
     *
     * @param project Project - selected project to be archived
     * @param daysFirstReminder integer - the first reminder of days until
     * project will be archived
     * @param serverAdminEmail String - server Admin Email address
     *
     */
    public void sendEmailFirstNotification(Project project,
            int daysFirstReminder,
            String serverAdminEmail) {
        // send email notifications for the first reminder
        try {
            sendEmailNotifications(project,
                    daysFirstReminder, serverAdminEmail);
        } catch (Exception exception) {
            logger.severe(exception.getMessage());
        }

    }

    /**
     * Sends second email reminder to PharmaCare project owner and system admins
     * notifying them of remaining days until project will be archived.
     *
     * @param project Project - selected project to be archived
     * @param daysSecondReminder integer - the second reminder of days until
     * project will be archived
     * @param serverAdminEmail String - server Admin Email address
     *
     */
    public void sendEmailSecondNotification(Project project,
            int daysSecondReminder,
            String serverAdminEmail) {
        // send email notification for the second reminder
        try {
            sendEmailNotifications(project,
                    daysSecondReminder, serverAdminEmail);
        } catch (Exception exception) {
            logger.severe(exception.getMessage());
        }

    }

    /**
     * Sends email reminders to PharmaCare project owner and system admins
     * notifying them of remaining days until project will be archived.
     *
     * @param project Project - selected project to be archived
     * @param daysSecondReminder integer - the second reminder of days until
     * project will be archived
     * @param serverAdminEmail String - server Admin Email address
     *
     */
    public void sendEmailNotifications(Project project,
            int daysSecondReminder, String serverAdminEmail) {
        EmailMessage newEmail = new EmailMessage();

        String projectName = project.getName();
        String emailDays = String.valueOf(daysSecondReminder);
        String body = String.format("This is a reminder that the " + AuditSystemName + " Confirmation"
                + " Letters project named %s is scheduled to be archived in %s days.",
                projectName, emailDays) + newEmail.getBody();
        newEmail.setBody(body);
        String emailAddressTo = serverAdminEmail;
        if (AuditUser!=null && AuditUser.getAuditUserEmail()!=null){
            logger.info("project user email from LDAP = ".concat(AuditUser.getAuditUserEmail()));
            emailAddressTo = serverAdminEmail+","+AuditUser.getAuditUserEmail();
        }
        String projectOwnerEmail = getProjectOwnerEmail(project);
        if (projectOwnerEmail!=null && !projectOwnerEmail.isEmpty()){
            emailAddressTo = emailAddressTo+","+projectOwnerEmail;
        }
        newEmail.setEmailAddress(emailAddressTo);
        logger.info("emailAddressTo before parsing = ".concat(emailAddressTo));
        String subject = String.format("Project %s is scheduled for archiving",
                projectName) + newEmail.getSubject();
        newEmail.setSubject(subject);
        sendEmail(newEmail);
    }

    /**
     * Retrieves project owner email from LDAP context.
     *
     * @param project Project - selected project to be archived
     *
     * @return String
     *
     */
    public String getProjectOwnerEmail(Project project) {
        if (project.getEmail() == null) {
            logger.log(Level.INFO, "Please notify KeyCloak Administration to have KeyCloak credentials remedied."); //How to handle null case?
        }
        return project.getEmail();
    }

    public AuditUser getAuditUser() {
        return AuditUser;
    }

    public void setAuditUser(AuditUser AuditUser) {
        this.AuditUser = AuditUser;
    }

}
