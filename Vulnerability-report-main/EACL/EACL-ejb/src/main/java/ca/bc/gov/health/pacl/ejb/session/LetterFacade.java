/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.ejb.session;

import ca.bc.gov.health.pacl.ejb.entity.Letter;
import jakarta.ejb.EJBException;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Implementation of the {@link LetterFacadeLocal} interface.
 * @author Dan.Stepanov
 */
@Stateless
public class LetterFacade extends AbstractFacade<Letter> implements LetterFacadeLocal {

    private static Logger logger = Logger.getLogger(LetterFacade.class.getName());

    @PersistenceContext(unitName = "PACLPU")
    private EntityManager em;

    /**
     * Gets the local instance of the {@link EntityManager} class.
     * @return entity Manager
     */
    @Override
    protected EntityManager getEntityManager() {
        return em;
    }
    /**
     * Default constructor.
     */
    public LetterFacade() {
        super(Letter.class);
    }
    /**
     * Retrieves patient letters for the selected project with
     * ordering by patient last name.
     *
     * @param providerId Long - provider Id from the screen
     * @return List<Letter>
     */
    @Override
    public List<Letter> findLettersByProviderId(Long providerId) {
        Query query = em.createNativeQuery("select * from LETTER l"
                + " where l.PHARMACY_PROVIDER_ID = ?1 "
                + " order by l.RECIPIENT_LAST_NAME asc",
                Letter.class);
        query.setParameter(1, providerId);
        return query.getResultList();
    }
    
    /**
     * Finds patient letters by caseCode.
     * @param caseCode String
     *
     * @return List<LetterMspDetail>
     */
    @Override
    public List<Letter> findLettersByCaseCode(String caseCode) {

        Query q = em.createNamedQuery("Letter.findByCaseCode");
        q.setParameter("caseCode", caseCode);

        return q.getResultList();
    }

    /**
     * Default patient letter query with ordering by provider name
     * and patient last name.
     *
     * @param projectId Long - projectId from the screen
     * @return List<Letter>
     */
    @Override
    public List<Letter> orderByProvideNamePatientLastName(Long projectId) {
        Query query = em.createNativeQuery("select * from LETTER l, PHARMACY_PROVIDER ph"
                + " where l.PROJECT_ID =?1"
                + " and l.PHARMACY_PROVIDER_ID = ph.ID"
                + " order by ph.NAME asc, l.RECIPIENT_LAST_NAME asc",
                Letter.class);
        query.setParameter(1, projectId);
        return query.getResultList();
    }

    /*
     * The same as edit, but returns the modified object
     */
    @Override
    public Letter editWithReturn(Letter letter) {
        return getEntityManager().merge(letter);
    }

    /**
     * Retrieves letter objects for the selected input letter barcodes.
     *
     * @param inputLetterBarcodes String - barcode Ids from the screen
     * @return List<Letter>
     */
    @Override
    public List<Letter> findLettersByBarcodes(String inputLetterBarcodes) {

        String[] letterBarCodes = inputLetterBarcodes.trim().split(",");
        List<String> letterCodesList = new ArrayList<>();
        for (String letterBarCode : letterBarCodes) {
            letterCodesList.add(letterBarCode.trim());
        }
        // build the letter barcodes
        String delimiter = ", ";
        String apos = "'";

        Iterator<? extends String> iter = letterCodesList.iterator();
        StringBuilder letterCodeString = new StringBuilder();
        letterCodeString.append(apos).append(iter.next()).append(apos);
        while (iter.hasNext()) {
            letterCodeString.append(delimiter).append(apos).append(iter.next()).append(apos);
        }

        Query query = em.createNativeQuery("select * from LETTER l"
                + " where l.BARCODE IN (" + letterCodeString.toString() + ")",
                Letter.class);

        return query.getResultList();
    }

    /**
     * Verifies if letter exists in the database for
     * the selected input letter barcodes.
     *
     * @param inputLetterBarcodes List<String> - barcode Ids input from the screen
     * @return boolean
     */
    @Override
    public boolean verifyLetterByBarcode(List<String> inputLetterBarcodes) {
        boolean barCodeExist = true;

        for (String letterBarCode : inputLetterBarcodes) {
            List<Letter> letterBarcodes = new ArrayList<>();
            Query query = em.createNativeQuery("select * from LETTER lt"
                + " where lt.BARCODE =?1", Letter.class);
            query.setParameter(1, letterBarCode);
            try {
                letterBarcodes = query.getResultList();
            } catch (EJBException e) {
                for (Throwable t = e.getCause(); t != null; t = t.getCause()) {
                    if (t.getClass().getName().equals("java.sql.SQLException")) {
                        logger.log(Level.INFO, "Cannot find the record in the system.", e);
                        throw e;
                    }
                }
            }
            if (letterBarcodes != null && letterBarcodes.isEmpty()) {
                barCodeExist = false;
            }
        }

        return barCodeExist;
    }

}
