/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.model;

import ca.bc.gov.health.pacl.ejb.entity.LetterMspDetail;
import ca.bc.gov.health.pacl.ejb.entity.PracSvaProject;
import ca.bc.gov.health.pacl.ejb.entity.ServiceMsp;
import ca.bc.gov.health.pacl.util.Util;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

/**
 * Letter run MSP model class to populate the lists of practitioners with
 * patient/serviceMSP info for each letter run type.
 *
 * @author dan.stepanov
 */
public class LetterRunMspModel {

    private static Logger logger = Logger.getLogger(LetterRunMspModel.class.getName());
    /**
     * List of HIServiceMspLetter instances.
     */
    List<HIServiceMspLetter> hiServiceMspLetters = new ArrayList();

    /**
     * Default constructor.
     */
    public LetterRunMspModel() {
    }

    /**
     * Populate the random list of practitioners with patient/service MSP info
     * including: - list of selected practitioners - list of corresponding
     * patient letters for each practitioner/SVA project - list of corresponding
     * service MSP details for each patient letter.
     *
     * @return List<PracSvaProject>
     *
     */
    public List<PracSvaProject> getServiceClaimsForLetterRunRandom() {
        List<PracSvaProject> pracSvaProjects = new ArrayList();
        Map<String, LetterMspDetail> uniqueLetterMspDetailMap = new HashMap<>();
        List<LetterMspDetail> lettersMsp = new ArrayList();
        List<ServiceMsp> servicesMsp = new ArrayList();
        PracSvaProject pracSvaProject;

        try {
            Map<String, PracSvaProject> uniquePracMap = new HashMap<>();

            for (HIServiceMspLetter hiServiceMspLetter : hiServiceMspLetters) {

                if (!uniquePracMap.containsKey(hiServiceMspLetter.getPractitionerCode())) {
                    // set each prac SVA project instance with values from HI
                    pracSvaProject = new PracSvaProject();
                    if (!Util.notEmpty(hiServiceMspLetter.getPractitionerCode())) {
                        pracSvaProject.setPracBllgNum("");
                    } else {
                        pracSvaProject.setPracBllgNum(hiServiceMspLetter.getPractitionerCode());
                    }

                    // if prac identif is missing then set value from prac billing number
                    if (!Util.notEmpty(hiServiceMspLetter.getPractitionerIdentif())) {
                        pracSvaProject.setPracIdnt(hiServiceMspLetter.getPractitionerCode());
                    } else {
                        pracSvaProject.setPracIdnt(hiServiceMspLetter.getPractitionerIdentif());
                    }
                    // set prac speciality code/desc from HI
                    if (!Util.notEmpty(hiServiceMspLetter.getPracSptyCd())) {
                        pracSvaProject.setPracSptyCd(" ");
                    } else {
                        pracSvaProject.setPracSptyCd(hiServiceMspLetter.getPracSptyCd());
                    }
                    if (!Util.notEmpty(hiServiceMspLetter.getPracSptyDesc())) {
                        pracSvaProject.setPracSptyDesc(" ");
                    } else {
                        pracSvaProject.setPracSptyDesc(hiServiceMspLetter.getPracSptyDesc());
                    }

                    if (!Util.notEmpty(hiServiceMspLetter.getPracSurname())) {
                        pracSvaProject.setPracSurname(" ");
                    } else {
                        pracSvaProject.setPracSurname(hiServiceMspLetter.getPracSurname());
                    }
                    if (!Util.notEmpty(hiServiceMspLetter.getPracFirstGivenName())) {
                        pracSvaProject.setPracFirstGvnNm(" ");
                    } else {
                        pracSvaProject.setPracFirstGvnNm(hiServiceMspLetter.getPracFirstGivenName());
                    }
                    if (!Util.notEmpty(hiServiceMspLetter.getPracSecondGivenName())) {
                        pracSvaProject.setPracSecondGvnNm(" ");
                    } else {
                        pracSvaProject.setPracSecondGvnNm(hiServiceMspLetter.getPracSecondGivenName());
                    }
                    if (!Util.notEmpty(hiServiceMspLetter.getPracThirdGivenName())) {
                        pracSvaProject.setPracThirdGvnNm(" ");
                    } else {
                        pracSvaProject.setPracThirdGvnNm(hiServiceMspLetter.getPracThirdGivenName());
                    }

                    uniquePracMap.put(hiServiceMspLetter.getPractitionerCode(), pracSvaProject);
                    pracSvaProjects.add(pracSvaProject);
                    // create an unique MSP letter map that holds the patient phn
                    // and the patient letter instance
                    uniqueLetterMspDetailMap = new HashMap<>();

                    lettersMsp = new ArrayList();
                    pracSvaProject.setLetterMspDetailList(lettersMsp);

                }

                LetterMspDetail letterMspDetail =
                        uniqueLetterMspDetailMap.get(Long.toString(hiServiceMspLetter.getPhn()));
                if (letterMspDetail == null) {

                    letterMspDetail = new LetterMspDetail();
                    // New service MSP list
                    servicesMsp = new ArrayList();

                    // set each letter instance with values from HI
                    if (hiServiceMspLetter.getPhn() != null) {
                        letterMspDetail.setPhn(hiServiceMspLetter.getPhn());
                    }
                    if (hiServiceMspLetter.getPatientBirthday() != null) {
                        letterMspDetail.setRecipientBirthday(hiServiceMspLetter.getPatientBirthday());
                    }
                    if (hiServiceMspLetter.getPatientStreetAddress() == null) {
                        letterMspDetail.setRecipientAddress(" ");
                    } else if (!hiServiceMspLetter.getPatientStreetAddress().isEmpty()
                            && hiServiceMspLetter.getPatientStreetAddress() != null) {
                        letterMspDetail.setRecipientAddress(hiServiceMspLetter.getPatientStreetAddress());
                    }
                    if (hiServiceMspLetter.getPatientCity() == null) {
                        letterMspDetail.setRecipientCity(" ");
                    } else if (!hiServiceMspLetter.getPatientCity().isEmpty()
                            && hiServiceMspLetter.getPatientCity() != null) {
                        letterMspDetail.setRecipientCity(hiServiceMspLetter.getPatientCity());
                    }
                    if (hiServiceMspLetter.getPatientPostalCode() == null) {
                        letterMspDetail.setRecipientPostalCode(" ");
                    } else if (!hiServiceMspLetter.getPatientPostalCode().isEmpty()
                            && hiServiceMspLetter.getPatientPostalCode() != null) {
                        letterMspDetail.setRecipientPostalCode(hiServiceMspLetter.getPatientPostalCode());
                    }
                    if (hiServiceMspLetter.getPatientProvince() == null) {
                        letterMspDetail.setRecipientProvince(" ");
                    } else if (!hiServiceMspLetter.getPatientProvince().isEmpty()
                            && hiServiceMspLetter.getPatientProvince() != null) {
                        letterMspDetail.setRecipientProvince(hiServiceMspLetter.getPatientProvince());
                    }
                    if (hiServiceMspLetter.getPatientCountry() == null) {
                        letterMspDetail.setRecipientCountry(" ");
                    } else if (!hiServiceMspLetter.getPatientCountry().isEmpty()
                            && hiServiceMspLetter.getPatientCountry() != null) {
                        letterMspDetail.setRecipientCountry(hiServiceMspLetter.getPatientCountry());
                    }
                    if (hiServiceMspLetter.getPatientFirstNm() == null) {
                        letterMspDetail.setRecipientFirstName(" ");
                    } else if (!hiServiceMspLetter.getPatientFirstNm().isEmpty()
                            && hiServiceMspLetter.getPatientFirstNm() != null) {
                        letterMspDetail.setRecipientFirstName(hiServiceMspLetter.getPatientFirstNm());
                    }
                    if (hiServiceMspLetter.getPatientLastNm() == null) {
                        letterMspDetail.setRecipientLastName(" ");
                    } else if (!hiServiceMspLetter.getPatientLastNm().isEmpty()
                            && hiServiceMspLetter.getPatientLastNm() != null) {
                        letterMspDetail.setRecipientLastName(hiServiceMspLetter.getPatientLastNm());
                    }
                    uniqueLetterMspDetailMap.put(Long.toString(hiServiceMspLetter.getPhn()), letterMspDetail);
                    lettersMsp.add(letterMspDetail);
                }

                ServiceMsp serviceMsp = new ServiceMsp();
                if (hiServiceMspLetter.getServiceMspDate() != null) {
                    serviceMsp.setSrvDate(hiServiceMspLetter.getServiceMspDate());
                }
                if (hiServiceMspLetter.getFeeItemCode() == null) {
                    serviceMsp.setPdFitmCd("");
                } else if (!hiServiceMspLetter.getFeeItemCode().isEmpty()
                        && hiServiceMspLetter.getFeeItemCode() != null) {
                    serviceMsp.setPdFitmCd(hiServiceMspLetter.getFeeItemCode());
                }
                if (hiServiceMspLetter.getFeeItem() == null) {
                    serviceMsp.setPdFitm("");
                } else if (!hiServiceMspLetter.getFeeItem().isEmpty()
                        && hiServiceMspLetter.getFeeItem() != null) {
                    serviceMsp.setPdFitm(hiServiceMspLetter.getFeeItem());
                }
                if (hiServiceMspLetter.getFeeItemDescr() == null) {
                    serviceMsp.setPdFitmDscr("");
                } else if (!hiServiceMspLetter.getFeeItemDescr().isEmpty()
                        && hiServiceMspLetter.getFeeItemDescr() != null) {
                    serviceMsp.setPdFitmDscr(hiServiceMspLetter.getFeeItemDescr());
                }
                if (hiServiceMspLetter.getServiceCode() == null) {
                    serviceMsp.setPdSrvCd("");
                } else if (!hiServiceMspLetter.getServiceCode().isEmpty()
                        && hiServiceMspLetter.getServiceCode() != null) {
                    serviceMsp.setPdSrvCd(hiServiceMspLetter.getServiceCode());
                }
                if (hiServiceMspLetter.getServiceCdDescr() == null) {
                    serviceMsp.setPdSrvCdDscr("");
                } else if (!hiServiceMspLetter.getServiceCdDescr().isEmpty()
                        && hiServiceMspLetter.getServiceCdDescr() != null) {
                    serviceMsp.setPdSrvCdDscr(hiServiceMspLetter.getServiceCdDescr());
                }

                // exclude patients with incomplete addresses and last/first name
                if (!"".equals(letterMspDetail.getRecipientAddress().trim())
                        && !"".equals(letterMspDetail.getRecipientPostalCode().trim())
                        && !"".equals(letterMspDetail.getRecipientLastName().trim())
                        && !"".equals(letterMspDetail.getRecipientFirstName().trim())) {
                    servicesMsp.add(serviceMsp);
                    letterMspDetail.setServiceMspList(servicesMsp);
                }

            }

            

        } catch (RuntimeException ex) {
            ex.printStackTrace();
        }

        return pracSvaProjects;
    }

    /**
     * Getters and Setters
     */
    public List<HIServiceMspLetter> getHiServiceMspLetters() {
        return hiServiceMspLetters;
    }

    public void setHiServiceMspLetters(List<HIServiceMspLetter> hiServiceMspLetters) {
        this.hiServiceMspLetters = hiServiceMspLetters;
    }
}