/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.model;

import ca.bc.gov.health.pacl.ejb.entity.Letter;
import ca.bc.gov.health.pacl.ejb.entity.PharmacyProvider;
import ca.bc.gov.health.pacl.ejb.entity.PlansM;
import ca.bc.gov.health.pacl.ejb.entity.Prescriptions;
import ca.bc.gov.health.pacl.ejb.entity.ProstheticsAndOrthotics;
import ca.bc.gov.health.pacl.util.Util;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Letter model class to populate the lists of pharmacyProvider
 * with patient/prescriptions/P&O/planM info for each project type.
 *
 * @author dan.stepanov
 */
public class ProjectLetter {

    /**
     * List of HIPrescriptionLetter instances.
     */
    List<HIPrescriptionLetter> hiPrescriptionLetters = new ArrayList();

    /**
     * Default constructor.
     */
    public ProjectLetter() {
    }

    /**
     * Populate the lists of pharmacyProvider with patient/prescription info - a
     * list of selected pharmacies - a lists of corresponding patient letters
     * for each pharmacy - a list of corresponding prescriptions for each
     * patient letter.
     */
    public List<PharmacyProvider> getClaimsForPharmacy() {
        List<PharmacyProvider> pharmacyProviders = new ArrayList();
        Map<String, Letter> uniqueLetterMap = new HashMap<>();
        List<Letter> letters = new ArrayList();
        List<Prescriptions> prescriptions = new ArrayList();
        PharmacyProvider pharmacyProvider;

        try {
            Map<String, PharmacyProvider> uniqueProviderMap = new HashMap<>();

            for (HIPrescriptionLetter hIPrescriptionLetter : hiPrescriptionLetters) {

                if (!uniqueProviderMap.containsKey(hIPrescriptionLetter.getPharmacyCode())) {
                    // set each Pharmacy Provider instance with values from HI
                    pharmacyProvider = new PharmacyProvider();
                    pharmacyProvider.setCode(hIPrescriptionLetter.getPharmacyCode());
                    pharmacyProvider.setName(hIPrescriptionLetter.getPharmacyName());
                    uniqueProviderMap.put(hIPrescriptionLetter.getPharmacyCode(), pharmacyProvider);
                    pharmacyProviders.add(pharmacyProvider);
                    // create an unique letter map that holds the patient phn
                    // and the patient letter instance
                    uniqueLetterMap = new HashMap<>();

                    letters = new ArrayList();
                    pharmacyProvider.setLetterList(letters);

                }

                Letter letter = uniqueLetterMap.get(Long.toString(hIPrescriptionLetter.getPhn()));
                if (letter == null) {

                    letter = new Letter();
                    // New prescription list
                    prescriptions = new ArrayList();
                    // set each letter instance with values from HI
                    if (Long.valueOf(hIPrescriptionLetter.getPhn()) != null) {
                        letter.setPhn(hIPrescriptionLetter.getPhn());
                    }
                    if (hIPrescriptionLetter.getPatientBirthday() != null) {
                        letter.setRecipientBirthday(hIPrescriptionLetter.getPatientBirthday());
                    }
                    if (hIPrescriptionLetter.getPatientStreetAddress() == null) {
                        letter.setRecipientAddress("");
                    } else if (!hIPrescriptionLetter.getPatientStreetAddress().isEmpty()
                            && hIPrescriptionLetter.getPatientStreetAddress() != null) {
                        letter.setRecipientAddress(hIPrescriptionLetter.getPatientStreetAddress());
                    }
                    if (hIPrescriptionLetter.getPatientCity() == null) {
                        letter.setRecipientCity("");
                    } else if (!hIPrescriptionLetter.getPatientCity().isEmpty()
                            && hIPrescriptionLetter.getPatientCity() != null) {
                        letter.setRecipientCity(hIPrescriptionLetter.getPatientCity());
                    }
                    if (hIPrescriptionLetter.getPatientPostalCode() == null) {
                        letter.setRecipientPostalCode("");
                    } else if (!hIPrescriptionLetter.getPatientPostalCode().isEmpty()
                            && hIPrescriptionLetter.getPatientPostalCode() != null) {
                        letter.setRecipientPostalCode(hIPrescriptionLetter.getPatientPostalCode());
                    }
                    if (hIPrescriptionLetter.getPatientProvince() == null) {
                        letter.setRecipientProvince("");
                    } else if (!hIPrescriptionLetter.getPatientProvince().isEmpty()
                            && hIPrescriptionLetter.getPatientProvince() != null) {
                        letter.setRecipientProvince(hIPrescriptionLetter.getPatientProvince());
                    }
                    if (hIPrescriptionLetter.getPatientCountry() == null) {
                        letter.setRecipientCountry("");
                    } else if (!hIPrescriptionLetter.getPatientCountry().isEmpty()
                            && hIPrescriptionLetter.getPatientCountry() != null) {
                        letter.setRecipientCountry(hIPrescriptionLetter.getPatientCountry());
                    }
                    if (hIPrescriptionLetter.getPatientFirstNm() == null) {
                        letter.setRecipientFirstName("");
                    } else if (!hIPrescriptionLetter.getPatientFirstNm().isEmpty()
                            && hIPrescriptionLetter.getPatientFirstNm() != null) {
                        letter.setRecipientFirstName(hIPrescriptionLetter.getPatientFirstNm());
                    }
                    if (hIPrescriptionLetter.getPatientLastNm() == null) {
                        letter.setRecipientLastName("");
                    } else if (!hIPrescriptionLetter.getPatientLastNm().isEmpty()
                            && hIPrescriptionLetter.getPatientLastNm() != null) {
                        letter.setRecipientLastName(hIPrescriptionLetter.getPatientLastNm());
                    }
                    letter.setCaseCode(Util.generateCaseCode());
                    uniqueLetterMap.put(Long.toString(hIPrescriptionLetter.getPhn()), letter);
                }

                Prescriptions prescription = new Prescriptions();
                if (hIPrescriptionLetter.getPrescriptionDate() != null) {
                    prescription.setPrescriptionDate(hIPrescriptionLetter.getPrescriptionDate());
                }
                // some prescriptions have drug strength null values
                // removed the mandatory field from database/entity
                // confirmed with business to display blank values for NULLs
                // and to include the claims
                if (hIPrescriptionLetter.getDrugStrength() == null) {
                    prescription.setDrugStrength("");
                } else if (!hIPrescriptionLetter.getDrugStrength().isEmpty()
                        && hIPrescriptionLetter.getDrugStrength() != null) {
                    prescription.setDrugStrength(hIPrescriptionLetter.getDrugStrength());
                }
                if (!hIPrescriptionLetter.getDinPin().isEmpty()
                        && hIPrescriptionLetter.getDinPin() != null) {
                    prescription.setDinPin(hIPrescriptionLetter.getDinPin());
                }
                if (hIPrescriptionLetter.getMedicationQuantity() == null) {
                    prescription.setQuantity(new BigDecimal("0"));
                } else if (hIPrescriptionLetter.getMedicationQuantity() != null) {
                    prescription.setQuantity(hIPrescriptionLetter.getMedicationQuantity());
                }
                if (hIPrescriptionLetter.getMedicationBrandName() == null) {
                    prescription.setBrandName("");
                } else if (!hIPrescriptionLetter.getMedicationBrandName().isEmpty()
                        && hIPrescriptionLetter.getMedicationBrandName() != null) {
                    prescription.setBrandName(hIPrescriptionLetter.getMedicationBrandName());
                }
                if (hIPrescriptionLetter.getMedicationGenericName() == null) {
                    prescription.setGenericName("");
                } else if (!hIPrescriptionLetter.getMedicationGenericName().isEmpty()
                        && hIPrescriptionLetter.getMedicationGenericName() != null) {
                    prescription.setGenericName(hIPrescriptionLetter.getMedicationGenericName());
                }
                if (hIPrescriptionLetter.getPhysicianId() == null) {
                    prescription.setPractitionerId("");
                } else if (!hIPrescriptionLetter.getPhysicianId().isEmpty()
                        && hIPrescriptionLetter.getPhysicianId() != null) {
                    prescription.setPractitionerId(hIPrescriptionLetter.getPhysicianId());
                }
                if (hIPrescriptionLetter.getPhysicianLastNm() == null) {
                    prescription.setPractitionerLastNm("");
                } else if (!hIPrescriptionLetter.getPhysicianLastNm().isEmpty()
                        && hIPrescriptionLetter.getPhysicianLastNm() != null) {
                    prescription.setPractitionerLastNm(hIPrescriptionLetter.getPhysicianLastNm());
                }
                // some prescriptions have the practitioner prescriber null values
                // confirmed with business to display blank values for NULLs
                // and to include the claims
                if (hIPrescriptionLetter.getPhysicianFirstNm() == null) {
                    prescription.setPractitionerFirstNm("");
                } else if (!hIPrescriptionLetter.getPhysicianFirstNm().isEmpty()
                        && hIPrescriptionLetter.getPhysicianFirstNm() != null) {
                    prescription.setPractitionerFirstNm(hIPrescriptionLetter.getPhysicianFirstNm());
                }

                // exclude patients with incomplete addresses and last/first name
                // and pharmacy prescription claims that don't have doctor id/surname
                if (!"".equals(prescription.getPractitionerLastNm())
                        && !"".equals(prescription.getPractitionerId())
                        && !"".equals(letter.getRecipientLastName())
                        && !"".equals(letter.getRecipientAddress())
                        && !"".equals(letter.getRecipientCity())
                        && !"".equals(letter.getRecipientPostalCode())
                        && !"".equals(letter.getRecipientProvince())
                        && !"".equals(letter.getRecipientLastName())
                        && !"".equals(letter.getRecipientFirstName())) {
                    prescriptions.add(prescription);
                    letter.setPrescriptionsList(prescriptions);
                    letters.add(letter);
                }

            }

        } catch (RuntimeException ex) {
            ex.printStackTrace();
        }

        return pharmacyProviders;
    }

    /**
     * Populate the lists of P&O Provider with patient/prescription info - a
     * list of selected P&O providers - a lists of corresponding patient letters
     * for each provider - a list of corresponding P&O claims for each patient
     * letter.
     */
    public List<PharmacyProvider> getPOClaimsForProvider() {
        List<PharmacyProvider> pharmacyProviders = new ArrayList();
        Map<String, Letter> uniqueLetterMap = new HashMap<>();
        List<Letter> letters = new ArrayList();
        List<ProstheticsAndOrthotics> prosthOrthotics = new ArrayList();
        PharmacyProvider pharmacyProvider;

        try {
            Map<String, PharmacyProvider> uniqueProviderMap = new HashMap<>();

            for (HIPrescriptionLetter hILetterPO : hiPrescriptionLetters) {

                if (!uniqueProviderMap.containsKey(hILetterPO.getPharmacyCode())) {
                    // set each Pharmacy Provider instance with values from HI
                    pharmacyProvider = new PharmacyProvider();
                    pharmacyProvider.setCode(hILetterPO.getPharmacyCode());
                    pharmacyProvider.setName(hILetterPO.getPharmacyName());
                    uniqueProviderMap.put(hILetterPO.getPharmacyCode(), pharmacyProvider);
                    pharmacyProviders.add(pharmacyProvider);
                    // create an unique letter map that holds the patient phn
                    // and the patient letter instance
                    uniqueLetterMap = new HashMap<>();

                    letters = new ArrayList();
                    pharmacyProvider.setLetterList(letters);

                }

                Letter letter = uniqueLetterMap.get(Long.toString(hILetterPO.getPhn()));
                if (letter == null) {

                    letter = new Letter();
                    // New prescription list
                    prosthOrthotics = new ArrayList();
                    // set each letter instance with values from HI
                    if (Long.valueOf(hILetterPO.getPhn()) != null) {
                        letter.setPhn(hILetterPO.getPhn());
                    }
                    if (hILetterPO.getPatientBirthday() != null) {
                        letter.setRecipientBirthday(hILetterPO.getPatientBirthday());
                    }
                    if (hILetterPO.getPatientStreetAddress() == null) {
                        letter.setRecipientAddress("");
                    } else if (!hILetterPO.getPatientStreetAddress().isEmpty()
                            && hILetterPO.getPatientStreetAddress() != null) {
                        letter.setRecipientAddress(hILetterPO.getPatientStreetAddress());
                    }
                    if (hILetterPO.getPatientCity() == null) {
                        letter.setRecipientCity("");
                    } else if (!hILetterPO.getPatientCity().isEmpty()
                            && hILetterPO.getPatientCity() != null) {
                        letter.setRecipientCity(hILetterPO.getPatientCity());
                    }
                    if (hILetterPO.getPatientPostalCode() == null) {
                        letter.setRecipientPostalCode("");
                    } else if (!hILetterPO.getPatientPostalCode().isEmpty()
                            && hILetterPO.getPatientPostalCode() != null) {
                        letter.setRecipientPostalCode(hILetterPO.getPatientPostalCode());
                    }
                    if (hILetterPO.getPatientProvince() == null) {
                        letter.setRecipientProvince("");
                    } else if (!hILetterPO.getPatientProvince().isEmpty()
                            && hILetterPO.getPatientProvince() != null) {
                        letter.setRecipientProvince(hILetterPO.getPatientProvince());
                    }
                    if (hILetterPO.getPatientCountry() == null) {
                        letter.setRecipientCountry("");
                    } else if (!hILetterPO.getPatientCountry().isEmpty()
                            && hILetterPO.getPatientCountry() != null) {
                        letter.setRecipientCountry(hILetterPO.getPatientCountry());
                    }
                    if (hILetterPO.getPatientFirstNm() == null) {
                        letter.setRecipientFirstName("");
                    } else if (!hILetterPO.getPatientFirstNm().isEmpty()
                            && hILetterPO.getPatientFirstNm() != null) {
                        letter.setRecipientFirstName(hILetterPO.getPatientFirstNm());
                    }
                    if (hILetterPO.getPatientLastNm() == null) {
                        letter.setRecipientLastName("");
                    } else if (!hILetterPO.getPatientLastNm().isEmpty()
                            && hILetterPO.getPatientLastNm() != null) {
                        letter.setRecipientLastName(hILetterPO.getPatientLastNm());
                    }
                    letter.setCaseCode(Util.generateCaseCode());
                    uniqueLetterMap.put(Long.toString(hILetterPO.getPhn()), letter);
                }

                ProstheticsAndOrthotics prosthetOrthotic = new ProstheticsAndOrthotics();
                if (hILetterPO.getPrescriptionDate() != null) {
                    prosthetOrthotic.setPAndODate(hILetterPO.getPrescriptionDate());
                }
                if (!hILetterPO.getDinPin().isEmpty()
                        && hILetterPO.getDinPin() != null) {
                    prosthetOrthotic.setDinPin(hILetterPO.getDinPin());
                }
                if (hILetterPO.getTotalPcarePay() == null) {
                    prosthetOrthotic.setTotalPhCarePay(new BigDecimal("0"));
                } else if (hILetterPO.getTotalPcarePay() != null) {
                    prosthetOrthotic.setTotalPhCarePay(hILetterPO.getTotalPcarePay());
                }
                if (hILetterPO.getTotalCoPay() == null) {
                    prosthetOrthotic.setTotalCoCarePay(new BigDecimal("0"));
                } else if (hILetterPO.getTotalCoPay() != null) {
                    prosthetOrthotic.setTotalCoCarePay(hILetterPO.getTotalCoPay());
                }
                if (hILetterPO.getMedicationBrandName() == null) {
                    prosthetOrthotic.setMedicalDeviceBenefit("");
                } else if (!hILetterPO.getMedicationBrandName().isEmpty()
                        && hILetterPO.getMedicationBrandName() != null) {
                    prosthetOrthotic.setMedicalDeviceBenefit(hILetterPO.getMedicationBrandName());
                }
                // exclude patients with incomplete addresses and last/first name
                // and Prosthetics And Orthotic claims that don't have Medical Device Benefit values
                if (!"".equals(letter.getRecipientLastName())
                        && !"".equals(letter.getRecipientAddress())
                        && !"".equals(letter.getRecipientCity())
                        && !"".equals(letter.getRecipientPostalCode())
                        && !"".equals(letter.getRecipientProvince())
                        && !"".equals(letter.getRecipientLastName())
                        && !"".equals(letter.getRecipientFirstName())
                        && !"".equals(prosthetOrthotic.getMedicalDeviceBenefit())) {
                    prosthOrthotics.add(prosthetOrthotic);
                    letter.setProsthOrthList(prosthOrthotics);
                    letters.add(letter);
                }

            }

        } catch (RuntimeException ex) {
            ex.printStackTrace();
        }

        return pharmacyProviders;
    }

    /**
     * Populate the lists of pharmacyProvider with patient/planM info - a list
     * of selected pharmacies - a lists of corresponding patient letters for
     * each pharmacy - a list of corresponding plan M claims for each patient
     * letter.
     */
    public List<PharmacyProvider> getPlanMClaimsForPharmacy() {
        List<PharmacyProvider> pharmacyProviders = new ArrayList();
        Map<String, Letter> uniqueLetterMap = new HashMap<>();
        List<Letter> letters = new ArrayList();
        List<PlansM> claimsPLanM = new ArrayList();
        PharmacyProvider pharmacyProvider;

        try {
            Map<String, PharmacyProvider> uniqueProviderMap = new HashMap<>();

            for (HIPrescriptionLetter hILetterPlanM : hiPrescriptionLetters) {

                if (!uniqueProviderMap.containsKey(hILetterPlanM.getPharmacyCode())) {
                    // set each Pharmacy Provider instance with values from HI
                    pharmacyProvider = new PharmacyProvider();
                    pharmacyProvider.setCode(hILetterPlanM.getPharmacyCode());
                    pharmacyProvider.setName(hILetterPlanM.getPharmacyName());
                    uniqueProviderMap.put(hILetterPlanM.getPharmacyCode(), pharmacyProvider);
                    pharmacyProviders.add(pharmacyProvider);
                    // create an unique letter map that holds the patient phn
                    // and the patient letter instance
                    uniqueLetterMap = new HashMap<>();

                    letters = new ArrayList();
                    pharmacyProvider.setLetterList(letters);

                }

                Letter letter = uniqueLetterMap.get(Long.toString(hILetterPlanM.getPhn()));
                if (letter == null) {

                    letter = new Letter();
                    // New prescription list for plan M claims
                    claimsPLanM = new ArrayList();
                    // set each letter instance with values from HI
                    if (Long.valueOf(hILetterPlanM.getPhn()) != null) {
                        letter.setPhn(hILetterPlanM.getPhn());
                    }
                    if (hILetterPlanM.getPatientBirthday() != null) {
                        letter.setRecipientBirthday(hILetterPlanM.getPatientBirthday());
                    }
                    if (hILetterPlanM.getPatientStreetAddress() == null) {
                        letter.setRecipientAddress("");
                    } else if (!hILetterPlanM.getPatientStreetAddress().isEmpty()
                            && hILetterPlanM.getPatientStreetAddress() != null) {
                        letter.setRecipientAddress(hILetterPlanM.getPatientStreetAddress());
                    }
                    if (hILetterPlanM.getPatientCity() == null) {
                        letter.setRecipientCity("");
                    } else if (!hILetterPlanM.getPatientCity().isEmpty()
                            && hILetterPlanM.getPatientCity() != null) {
                        letter.setRecipientCity(hILetterPlanM.getPatientCity());
                    }
                    if (hILetterPlanM.getPatientPostalCode() == null) {
                        letter.setRecipientPostalCode("");
                    } else if (!hILetterPlanM.getPatientPostalCode().isEmpty()
                            && hILetterPlanM.getPatientPostalCode() != null) {
                        letter.setRecipientPostalCode(hILetterPlanM.getPatientPostalCode());
                    }
                    if (hILetterPlanM.getPatientProvince() == null) {
                        letter.setRecipientProvince("");
                    } else if (!hILetterPlanM.getPatientProvince().isEmpty()
                            && hILetterPlanM.getPatientProvince() != null) {
                        letter.setRecipientProvince(hILetterPlanM.getPatientProvince());
                    }
                    if (hILetterPlanM.getPatientCountry() == null) {
                        letter.setRecipientCountry("");
                    } else if (!hILetterPlanM.getPatientCountry().isEmpty()
                            && hILetterPlanM.getPatientCountry() != null) {
                        letter.setRecipientCountry(hILetterPlanM.getPatientCountry());
                    }
                    if (hILetterPlanM.getPatientFirstNm() == null) {
                        letter.setRecipientFirstName("");
                    } else if (!hILetterPlanM.getPatientFirstNm().isEmpty()
                            && hILetterPlanM.getPatientFirstNm() != null) {
                        letter.setRecipientFirstName(hILetterPlanM.getPatientFirstNm());
                    }
                    if (hILetterPlanM.getPatientLastNm() == null) {
                        letter.setRecipientLastName("");
                    } else if (!hILetterPlanM.getPatientLastNm().isEmpty()
                            && hILetterPlanM.getPatientLastNm() != null) {
                        letter.setRecipientLastName(hILetterPlanM.getPatientLastNm());
                    }
                    letter.setCaseCode(Util.generateCaseCode());
                    uniqueLetterMap.put(Long.toString(hILetterPlanM.getPhn()), letter);
                }

                PlansM claimPlanM = new PlansM();
                if (hILetterPlanM.getPrescriptionDate() != null) {
                    claimPlanM.setPlanMDate(hILetterPlanM.getPrescriptionDate());
                }
                if (!hILetterPlanM.getDinPin().isEmpty()
                        && hILetterPlanM.getDinPin() != null) {
                    claimPlanM.setDinPin(hILetterPlanM.getDinPin());
                }
                if (hILetterPlanM.getMedicationBrandName() == null) {
                    claimPlanM.setMedicationReviewDesc("");
                } else if (!hILetterPlanM.getMedicationBrandName().isEmpty()
                        && hILetterPlanM.getMedicationBrandName() != null) {
                    claimPlanM.setMedicationReviewDesc(hILetterPlanM.getMedicationBrandName());
                }
                if (hILetterPlanM.getPhysicianId() == null) {
                    claimPlanM.setDspgPracId("");
                } else if (!hILetterPlanM.getPhysicianId().isEmpty()
                        && hILetterPlanM.getPhysicianId() != null) {
                    claimPlanM.setDspgPracId(hILetterPlanM.getPhysicianId());
                }
                if (hILetterPlanM.getPhysicianLastNm() == null) {
                    claimPlanM.setDspgPracLastNm("");
                } else if (!hILetterPlanM.getPhysicianLastNm().isEmpty()
                        && hILetterPlanM.getPhysicianLastNm() != null) {
                    claimPlanM.setDspgPracLastNm(hILetterPlanM.getPhysicianLastNm());
                }
                // some planM claims have null values for practitioner dispensing
                // confirmed with business to display blank values for NULLs
                // and to include the claims
                if (hILetterPlanM.getPhysicianFirstNm() == null) {
                    claimPlanM.setDspgPracFirstNm("");
                } else if (hILetterPlanM.getPhysicianFirstNm() != null
                        && !hILetterPlanM.getPhysicianFirstNm().isEmpty()) {
                    claimPlanM.setDspgPracFirstNm(hILetterPlanM.getPhysicianFirstNm());
                }
                // exclude patients with incomplete addresses and last/first name
                // and plan M claims that don't have pharmacist id/surname
                if (!"".equals(claimPlanM.getDspgPracLastNm())
                        && !"".equals(claimPlanM.getDspgPracId())
                        && !"".equals(letter.getRecipientLastName())
                        && !"".equals(letter.getRecipientAddress())
                        && !"".equals(letter.getRecipientCity())
                        && !"".equals(letter.getRecipientPostalCode())
                        && !"".equals(letter.getRecipientProvince())
                        && !"".equals(letter.getRecipientLastName())
                        && !"".equals(letter.getRecipientFirstName())) {
                    claimsPLanM.add(claimPlanM);
                    letter.setPlansMList(claimsPLanM);
                    letters.add(letter);
                }
            }

        } catch (RuntimeException ex) {
            ex.printStackTrace();
        }

        return pharmacyProviders;
    }
    
    /** Getters and Setters */
    public List<HIPrescriptionLetter> getHiPrescriptionLetters() {
        return hiPrescriptionLetters;
    }

    public void setHiPrescriptionLetters(List<HIPrescriptionLetter> hiPrescriptionLetters) {
        this.hiPrescriptionLetters = hiPrescriptionLetters;
    }

}