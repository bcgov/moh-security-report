/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.ejb.session.batch;

import ca.bc.gov.health.ejb.exception.FacadeException;
import ca.bc.gov.health.pacl.ejb.entity.AdminOptionsMsp;
import ca.bc.gov.health.pacl.ejb.entity.ApplicationAuditDtlLog;
import ca.bc.gov.health.pacl.ejb.entity.ApplicationAuditLog;
import ca.bc.gov.health.pacl.ejb.entity.EmailReminder;
import ca.bc.gov.health.pacl.ejb.entity.Project;
import ca.bc.gov.health.pacl.ejb.session.AdminOptionsMspFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.ApplicationAuditLogFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.CodesProjectStatusFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.EmailReminderFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.PracSvaProjectFacadeLocal;
import ca.bc.gov.health.pacl.ejb.session.ProjectSvaFacadeLocal;
import ca.bc.gov.health.pacl.service.EmailService;
import ca.bc.gov.health.pacl.util.PaclConstants;
import ca.bc.gov.health.security.OidcConfig;
import jakarta.ejb.EJB;
import jakarta.ejb.EJBException;
import jakarta.ejb.Schedule;
import jakarta.ejb.Stateless;
import jakarta.ejb.Timer;
import jakarta.inject.Inject;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Daily scheduled job for email reminder notifications and archiving of the
 * selected projects.
 *
 * @author David.Deschenes
 */
@Stateless
public class ProjectArchiveBatchMSP {
    
    @Inject
    private OidcConfig oidcConfig;

    private static final Logger logger = Logger.getLogger(ProjectArchiveBatchMSP.class.getName());

    /*
     * Instance we're currently verifying/editing for recent updates.
     */
    private AdminOptionsMsp adminOptions;
    /*
     * Email service instance for editing.
     */
    private EmailService emailService = new EmailService(PaclConstants.SERVER_EMAIL_HOST, PaclConstants.EACL_SYSTEM_NAME);

    /*
     * Facade for persistence of projects.
     */
    @EJB
    private ProjectSvaFacadeLocal projectFacade;

    /*
     * Facade for persistence of SVAProject .
     */
    @EJB
    private PracSvaProjectFacadeLocal pracSvaProjectFacade;
    /*
     * Facade for persistence of project statuses.
     */
    @EJB
    private transient CodesProjectStatusFacadeLocal codesProjectStatusFacade;
    /*
     * Facade for persistence of admin options.
     */
    @EJB
    private transient AdminOptionsMspFacadeLocal adminOptionsFacade;
    /*
     * Facade for persistence of email Reminders.
     */
    @EJB
    private transient EmailReminderFacadeLocal emailReminderFacade;
    /*
     * Facade for persistence of application autit logs.
     */
    @EJB
    private transient ApplicationAuditLogFacadeLocal applicationAuditLogFacade;

    /**
     * Sends email notifications and updates selected projects to archived
     * status based on daily scheduled EJB timer.
     *
     * @param t Timer - EJB timer interface object for job scheduling
     *
     */
    @Schedule(minute = "15", second = "0", dayOfMonth = "*", month = "*",
            year = "*", hour = "0", timezone = "PST",
            info = "SVAProjectArchiveTimer run daily job")
    public void sendNotifications(Timer t) {
        Date currentDay = new Date();
        logger.log(Level.INFO, "Start SVAProjectArchiveTimer invoked daily: ".concat(currentDay.toString()));

        try {
            // populate the admin options instance with the most recent saved values.  
            adminOptions = adminOptionsFacade.findDefaultPatientLimit().get(0);

            Calendar ActualCheckDate = Calendar.getInstance();
            ActualCheckDate.setTime(new Date());
            ActualCheckDate.add(Calendar.HOUR, 24 * -((int) (adminOptions.getDaysBeforeArchive() - adminOptions.getFirstReminderEmail())));

            //Get all the project that has been create before ActualCheckDate. 
            //With that way, we only have project that is due for an email reminder or to be archive
            List<Project> allProjects = projectFacade.findAllSVAArchivedBatch(ActualCheckDate.getTime());
            List<Project> projectArchiveList = new ArrayList<>();

            // get system admin email
            String serverAdminEmail = adminOptions.getServerAdminEmail();
            // Create Audit log
            ApplicationAuditLog applicationAuditLog = new ApplicationAuditLog("Application Daily Job");
            List<ApplicationAuditDtlLog> logDetailList = new ArrayList<>();
            logDetailList.add(new ApplicationAuditDtlLog(applicationAuditLog, "Application Username", "Application Scheduled Job"));

            allProjects.forEach((Project projectForArchive) -> {
                Date projectCreateDate = projectForArchive.getCreatedOnDtm();
                // add condition for projects not archived
                if (projectForArchive.getArchivedDate() == null
                        && codesProjectStatusFacade.findByName(PaclConstants.PROJECT_STATUS_ARCHIVE) != projectForArchive.getStatusId()) {
                    projectArchiveList.add(projectForArchive);

                    Calendar cal = Calendar.getInstance();
                    cal.setTime(projectCreateDate);
                    // get total days until the project is archived
                    cal.add(Calendar.HOUR, 24 * (int) adminOptions.getDaysBeforeArchive());
                    Date projectTimeoutDate = cal.getTime();
                    //Verify that the project is due to be archive and if both reminder has been sent
                    if (projectTimeoutDate.compareTo(currentDay) <= 0 ) {
                        logger.log(Level.INFO, "projectTimeoutDate is : ".concat(projectTimeoutDate.toString()));
                        logger.log(Level.INFO, "project ID = ".concat(String.valueOf(projectForArchive.getId())));
                        // update project records with archive status and date
                        updateProjectsForArchive(projectForArchive, currentDay);
                        // create audit log details for the selected projects
                        logDetailList.add(new ApplicationAuditDtlLog(
                                applicationAuditLog,
                                "Prj Archived by Job: Name",
                                projectForArchive.getName()));
                        logDetailList.add(new ApplicationAuditDtlLog(
                                applicationAuditLog,
                                "Prj Archived by Job: Owner",
                                projectForArchive.getProjectOwner()));
                        logDetailList.add(new ApplicationAuditDtlLog(
                                applicationAuditLog,
                                "Prj Archived by Job: Id",
                                (projectForArchive.getId().toString())));
                    } //Check if the user had already receive the first notification
                    else if (!emailReminderFacade.userNotified(projectForArchive)) {
                        int daysFirstReminder = (int) adminOptions.getFirstReminderEmail();
                        
                        // check if the project is due for a first notification 
                        if (manageFirstEmailReminder(projectForArchive, cal, currentDay)) {
                            // create audit logs for the first email reminder notifications
                            logDetailList.add(new ApplicationAuditDtlLog(
                                    applicationAuditLog,
                                    "First Reminder Project: Name",
                                    projectForArchive.getName()));
                            logDetailList.add(new ApplicationAuditDtlLog(
                                    applicationAuditLog,
                                    "First Reminder Project: Owner",
                                    projectForArchive.getProjectOwner()));
                            logDetailList.add(new ApplicationAuditDtlLog(
                                    applicationAuditLog,
                                    "First Reminder Project: Id",
                                    (projectForArchive.getId().toString())));
                            logDetailList.add(new ApplicationAuditDtlLog(
                                    applicationAuditLog,
                                    "First Reminder To Admin: Email",
                                    serverAdminEmail));
                            logDetailList.add(new ApplicationAuditDtlLog(
                                    applicationAuditLog,
                                    "First Reminder Project: Days",
                                    String.valueOf(daysFirstReminder)));
                            String ownerEmail = emailService.getProjectOwnerEmail(
                                    projectForArchive);
                            logDetailList.add(new ApplicationAuditDtlLog(
                                    applicationAuditLog,
                                    "First Reminder Owner: Email",
                                    ownerEmail));
                        }
                    } // check if the project is due for a second notification email
                    else if (!emailReminderFacade.secondReminderUpdated(projectForArchive)) {
                        int daysSecondReminder = (int) adminOptions.getSecondReminderEmail();

                        Calendar calSecond = Calendar.getInstance();
                        calSecond.setTime(projectTimeoutDate);
                        if (manageSecondEmailReminder(projectForArchive, calSecond, currentDay)) {
                            // create audit logs for the second email reminder notifications
                            logDetailList.add(new ApplicationAuditDtlLog(
                                    applicationAuditLog,
                                    "Second Reminder Project: Name",
                                    projectForArchive.getName()));
                            logDetailList.add(new ApplicationAuditDtlLog(
                                    applicationAuditLog,
                                    "Second Reminder Project: Owner",
                                    projectForArchive.getProjectOwner()));
                            logDetailList.add(new ApplicationAuditDtlLog(
                                    applicationAuditLog,
                                    "Second Reminder Project: Id",
                                    (projectForArchive.getId().toString())));
                            logDetailList.add(new ApplicationAuditDtlLog(
                                    applicationAuditLog,
                                    "Second Reminder Admin: Email",
                                    serverAdminEmail));
                            logDetailList.add(new ApplicationAuditDtlLog(
                                    applicationAuditLog,
                                    "Second Reminder Project: Days",
                                    String.valueOf(daysSecondReminder)));
                            String ownerEmail = emailService.getProjectOwnerEmail(
                                    projectForArchive);
                            logDetailList.add(new ApplicationAuditDtlLog(
                                    applicationAuditLog,
                                    "Second Reminder Owner: Email",
                                    ownerEmail));
                        }

                    }
                }
            });

            // set auditing detail logs and save audit records
            // in database for selected projects
            applicationAuditLog.setApplicationAuditDtlLogList(logDetailList);
            applicationAuditLogFacade.create(applicationAuditLog);

            logger.log(Level.INFO, "size of list projects to be Archived : ".concat(String.valueOf(projectArchiveList.size())));
        } catch (Exception ex) {
            logger.log(Level.SEVERE, "Create connection : fail");
        }
        generateTimerInfo(t);
        logger.log(Level.INFO, "SVAProjectArchiveTimer batch process completed.");
    }

    /**
     * Use to check if the project is due to a first email reminder and send the
     * email if yes
     *
     * @param projectForArchive
     * @param archiveDueDate
     * @param currentDay
     * @return check if a first email reminder has been send
     */
    private boolean manageFirstEmailReminder(Project projectForArchive, Calendar archiveDueDate, Date currentDay) {
        // Verify first notification emails with reminders days
        // to archive the project
        int daysFirstReminder = (int) adminOptions.getFirstReminderEmail();
        archiveDueDate.add(Calendar.HOUR, -24 * daysFirstReminder);
        Date projectFirstReminderDate = archiveDueDate.getTime();
        // get system admin email
        String serverAdminEmail = adminOptions.getServerAdminEmail();
        //Get number of day before the project will be archived
        int dayBeforeArchive = (int) ((archiveDueDate.getTime().getTime() - currentDay.getTime()) / (1000 * 60 * 60 * 24));
        // verify if the number of day left before the project will be archive is equal to daysFirstReminder
        if (dayBeforeArchive <= daysFirstReminder
                && !emailReminderFacade.userNotified(projectForArchive)) {
            // send first email notifications
            logger.log(Level.INFO, "test projectFirstReminderDate: ".concat(projectFirstReminderDate.toString()));
            emailService.sendEmailFirstNotification(
                    projectForArchive,
                    daysFirstReminder, serverAdminEmail);
            // create first email reminder records for projects to be archived
            logFirstEmailReminderResults(projectForArchive, currentDay);
            return true;
        }
        return false;
    }

    /**
     * Use to check if the project is due to a second email reminder and send
     * the email if it is due
     *
     * @param projectForArchive
     * @param archiveDueDate
     * @param currentDay
     * @return check if a second email reminder has been send
     */
    private boolean manageSecondEmailReminder(Project projectForArchive, Calendar archiveDueDate, Date currentDay) {
        // get system admin email
        String serverAdminEmail = adminOptions.getServerAdminEmail();
        // subtract days for the second email notification
        int daysSecondReminder = (int) adminOptions.getSecondReminderEmail();
        archiveDueDate.add(Calendar.HOUR, -24 * daysSecondReminder);
        Date projectSecondReminderDate = archiveDueDate.getTime();
        logger.log(Level.INFO, "test before email notification projectSecondReminderDate: ".concat(projectSecondReminderDate.toString()));
        //Get number of day before the project will be archived
        int dayBeforeArchive = (int) ((archiveDueDate.getTime().getTime() - currentDay.getTime()) / (1000 * 60 * 60 * 24));
        // verify if the number of day left before the project will be archive is equal to daysSecondReminder
        if (dayBeforeArchive <= daysSecondReminder && !emailReminderFacade.secondReminderUpdated(projectForArchive)) {
            // send second email notifications
            logger.log(Level.INFO, "test projectSecondReminderDate:".concat(projectSecondReminderDate.toString()));
            emailService.sendEmailSecondNotification(
                    projectForArchive,
                    daysSecondReminder, serverAdminEmail);
            // create second email reminder records for projects to be archived
            logSecondEmailReminderResults(projectForArchive, currentDay);
            return true;
        }
        return false;
    }

    /**
     * Updates project records with archived date and status in EACL.PROJECT
     * table.
     *
     * @param projectForArchive Project - selected project to be archived
     * @param currentDay Date - current Date when project is being archived
     *
     */
    private void updateProjectsForArchive(Project projectForArchive, Date currentDay) {

        String updateLog = "UPDATE PROJECT pr"
                + " SET pr.ARCHIVED_DATE = ?,"
                + " pr.STATUS_ID = ?,"
                + " pr.LAST_MODIFIED_BY_NM = '" + PaclConstants.PROJECT_ARCHIVE_BATCH + "',"
                + " pr.LAST_MODIFIED_ON_DTM = sysdate"
                + "   WHERE pr.ID = ?";
        try {
            java.sql.Date currentDate = new java.sql.Date(currentDay.getTime());
            //New Process
            projectForArchive.setArchivedDate(currentDate);
            projectForArchive.setStatusId(codesProjectStatusFacade.findByName(PaclConstants.PROJECT_STATUS_ARCHIVE));
            projectForArchive.setLastModifiedByNm(PaclConstants.PROJECT_ARCHIVE_BATCH);
            projectForArchive.setLastModifiedOnDtm(new Date());
            logger.log(Level.INFO, "updateLog before execute : ".concat(updateLog));
            projectFacade.edit(projectForArchive);
            logger.info(String.format("1 records updated into EACL.PROJECT table in the database."));

        } catch (EJBException e1) {
            logger.log(Level.SEVERE, "Project status archived update failed: {0}", e1.getMessage());
            throw new FacadeException(e1, e1.getClass());
        }
    }

    /**
     * Inserts first email reminder records in EACL.EMAIL_REMINDER table for the
     * selected projects.
     *
     * @param projectForArchive Project - selected project to be archived
     * @param projectFirstReminderDate Date - first Date reminder until project
     * will be archived
     *
     */
    private void logFirstEmailReminderResults(Project projectForArchive, Date projectFirstReminderDate) {

        FacadeException error = null;
        EmailReminder newEmailReminder = new EmailReminder();
        try {
            java.sql.Date firstReminderDate = new java.sql.Date(projectFirstReminderDate.getTime());
            newEmailReminder.setProjectId(projectForArchive);
            newEmailReminder.setProjectTypeId(projectForArchive.getProjectTypeId());
            newEmailReminder.setUserNotified(PaclConstants.USER_NOTIFIED_FLAG);
            newEmailReminder.setFirstReminder(firstReminderDate);
            newEmailReminder.setCreatedByNm(PaclConstants.PROJECT_ARCHIVE_BATCH);
            newEmailReminder.setCreatedOnDtm(new Date());
            emailReminderFacade.create(newEmailReminder);

            logger.info(String.format("1 records inserted into EACL.EMAIL_REMINDER table in the database."));

        } catch (EJBException e1) {
            logger.log(Level.SEVERE, "Email first notification failed: {0}", e1.getMessage());
            throw new FacadeException(e1, e1.getClass());
        }
    }

    /**
     * Updates second email reminder records in EACL.EMAIL_REMINDER table for
     * the selected projects.
     *
     *
     * @param projectForArchive Project - selected project to be archived
     * @param projectSecondReminderDate Date - second Date reminder until
     * project will be archived
     *
     */
    private void logSecondEmailReminderResults(Project projectForArchive, Date projectSecondReminderDate) {
        String updateSecondLog = "UPDATE EMAIL_REMINDER er"
                + " SET er.USER_NOTIFIED = '" + PaclConstants.USER_NOTIFIED_FLAG + "',"
                + " er.SECOND_REMINDER = ?,"
                + " er.LAST_MODIFIED_BY_NM = '" + PaclConstants.PROJECT_ARCHIVE_BATCH + "',"
                + " er.LAST_MODIFIED_ON_DTM = sysdate"
                + "   WHERE er.PROJECT_ID = ?";
        try {
            List<EmailReminder> EmailReminderList = projectForArchive.getEmailReminderList();
            java.sql.Date secondReminderDate = new java.sql.Date(projectSecondReminderDate.getTime());
            for (EmailReminder emailReminder : EmailReminderList) {
                emailReminder.setUserNotified(PaclConstants.USER_NOTIFIED_FLAG);
                emailReminder.setSecondReminder(secondReminderDate);
                emailReminder.setLastModifiedByNm(PaclConstants.PROJECT_ARCHIVE_BATCH);
                emailReminder.setLastModifiedOnDtm(new Date());
                emailReminderFacade.edit(emailReminder);
            }
            logger.log(Level.INFO, "updateSecondLog query : ".concat(updateSecondLog));
            logger.info(String.format("%s records updated into EACL.EMAIL_REMINDER table in the database.", EmailReminderList.size()));

        } catch (EJBException e1) {
            logger.log(Level.SEVERE, "Email second notification failed: {0}", e1.getMessage());
            throw new FacadeException(e1, e1.getClass());
        }
    }

    /**
     * Generate EJB Timer info on daily scheduled job.
     *
     * @param t Timer - EJB timer interface object for job scheduling
     *
     */
    public void generateTimerInfo(Timer t) {
        String timerInfo = (String) t.getInfo();
        logger.log(Level.INFO, "SVAProjectArchiveTimer info: ".concat(timerInfo));
    }
}
