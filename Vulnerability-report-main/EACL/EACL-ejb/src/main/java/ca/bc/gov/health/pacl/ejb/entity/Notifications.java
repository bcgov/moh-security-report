/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.ejb.entity;

import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;

/**
 *
 * @author trevor.schiavone
 */
@Entity
@Table(name = "NOTIFICATIONS")
@SequenceGenerator(name="NotificationSeq", sequenceName="NOTIFICATIONS_SEQ", allocationSize=1, initialValue=1)
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "Notifications.findAll", query = "SELECT n FROM Notifications n"),
    @NamedQuery(name = "Notifications.findById", query = "SELECT n FROM Notifications n WHERE n.id = :id"),
    @NamedQuery(name = "Notifications.findByUserChannel", query = "SELECT n FROM Notifications n WHERE n.userChannel = :userChannel"),
    @NamedQuery(name = "Notifications.findByLetterRunName", query = "SELECT n FROM Notifications n WHERE n.letterRunName = :letterRunName"),
    @NamedQuery(name = "Notifications.findByCreateOrPrint", query = "SELECT n FROM Notifications n WHERE n.createOrPrint = :createOrPrint"),
    @NamedQuery(name = "Notifications.findByMessage", query = "SELECT n FROM Notifications n WHERE n.message = :message"),
    @NamedQuery(name = "Notifications.findByProcessFinish", query = "SELECT n FROM Notifications n WHERE n.processFinish = :processFinish"),
    @NamedQuery(name = "Notifications.findByProcessStart", query = "SELECT n FROM Notifications n WHERE n.processStart = :processStart"),
    @NamedQuery(name = "Notifications.findActivePrintRun", query = "SELECT n FROM Notifications n WHERE n.userChannel = :userChannel AND n.processFinish IS NULL AND n.createOrPrint = 'Print'"),
    @NamedQuery(name = "Notifications.findByUserSorted", query = "SELECT n FROM Notifications n WHERE n.userChannel = :userChannel ORDER BY n.processStart desc"),
    @NamedQuery(name = "Notifications.isActivePrintRun", query = "SELECT COUNT (n) FROM Notifications n WHERE n.processFinish IS NULL AND n.createOrPrint = :createOrPrint")})

public class Notifications implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy=GenerationType.SEQUENCE,generator="NotificationSeq")
    @Basic(optional = false)
    @NotNull
    @Column(name = "ID")
    private BigDecimal id;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "USER_CHANNEL")
    private String userChannel;
    @Size(max = 100)
    @Column(name = "LETTER_RUN_NAME")
    private String letterRunName;
    @Size(max = 10)
    @Column(name = "CREATE_OR_PRINT")
    private String createOrPrint;
    @Size(max = 4000)
    @Column(name = "MESSAGE")
    private String message;
    @Column(name = "PROCESS_START")
    @Temporal(TemporalType.TIMESTAMP)
    private Date processStart;
    @Column(name = "PROCESS_FINISH")
    @Temporal(TemporalType.TIMESTAMP)
    private Date processFinish;
    

    public Notifications() {
    }

    public Notifications(BigDecimal id) {
        this.id = id;
    }

    public Notifications(BigDecimal id, String userChannel) {
        this.id = id;
        this.userChannel = userChannel;
    }

    public BigDecimal getId() {
        return id;
    }

    public void setId(BigDecimal id) {
        this.id = id;
    }

    public String getUserChannel() {
        return userChannel;
    }

    public void setUserChannel(String userChannel) {
        this.userChannel = userChannel;
    }

    public String getLetterRunName() {
        return letterRunName;
    }

    public void setLetterRunName(String letterRunName) {
        this.letterRunName = letterRunName;
    }

    public String getCreateOrPrint() {
        return createOrPrint;
    }

    public void setCreateOrPrint(String createOrPrint) {
        this.createOrPrint = createOrPrint;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public Date getProcessFinish() {
        return processFinish;
    }

    public void setProcessFinish(Date processFinish) {
        this.processFinish = processFinish;
    }

    public Date getProcessStart() {
        return processStart;
    }

    public void setProcessStart(Date processStart) {
        this.processStart = processStart;
    }
    
    

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Notifications)) {
            return false;
        }
        Notifications other = (Notifications) object;
        return !((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id)));
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.pacl.ejb.entity.Notifications[ id=" + id + " ]";
    }
    
}
