/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.ejb.entity;

import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Version;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.xml.bind.annotation.XmlRootElement;
import jakarta.xml.bind.annotation.XmlTransient;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 *
 * @author Dan.Stepanov
 */
@Entity
@EntityListeners({AuditListener.class})

@Table(name = "PROJECT")
@SequenceGenerator(name="ProjectSeq", sequenceName="PROJECT_SEQ", allocationSize=1, initialValue=1)

@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "Project.findAll", query = "SELECT p FROM Project p"),
    @NamedQuery(name = "Project.findById", query = "SELECT p FROM Project p WHERE p.id = :id"),
    @NamedQuery(name = "Project.findByName", query = "SELECT p FROM Project p WHERE p.name = :name"),
    @NamedQuery(name = "Project.findByProjectOwner", query = "SELECT p FROM Project p WHERE p.projectOwner = :projectOwner"),
    @NamedQuery(name = "Project.findByProjectYear", query = "SELECT p FROM Project p WHERE p.projectYear = :projectYear"),
    @NamedQuery(name = "Project.findByProjectMonth", query = "SELECT p FROM Project p WHERE p.projectMonth = :projectMonth"),
    @NamedQuery(name = "Project.findByProjectFromDate", query = "SELECT p FROM Project p WHERE p.projectFromDate = :projectFromDate"),
    @NamedQuery(name = "Project.findByProjectToDate", query = "SELECT p FROM Project p WHERE p.projectToDate = :projectToDate"),
    @NamedQuery(name = "Project.findByMaxPatients", query = "SELECT p FROM Project p WHERE p.maxPatients = :maxPatients"),
    @NamedQuery(name = "Project.findByClosedDate", query = "SELECT p FROM Project p WHERE p.closedDate = :closedDate"),
    @NamedQuery(name = "Project.findByArchivedDate", query = "SELECT p FROM Project p WHERE p.archivedDate = :archivedDate"),
    @NamedQuery(name = "Project.findByFirstPrintingDate", query = "SELECT p FROM Project p WHERE p.firstPrintingDate = :firstPrintingDate"),
    @NamedQuery(name = "Project.findByCreatedByNm", query = "SELECT p FROM Project p WHERE p.createdByNm = :createdByNm"),
    @NamedQuery(name = "Project.findByCreatedOnDtm", query = "SELECT p FROM Project p WHERE p.createdOnDtm = :createdOnDtm"),
    @NamedQuery(name = "Project.findByLastModifiedByNm", query = "SELECT p FROM Project p WHERE p.lastModifiedByNm = :lastModifiedByNm"),
    @NamedQuery(name = "Project.findByLastModifiedOnDtm", query = "SELECT p FROM Project p WHERE p.lastModifiedOnDtm = :lastModifiedOnDtm"),
    @NamedQuery(name = "Project.findByAuditReasonDesc", query = "SELECT p FROM Project p WHERE p.auditReasonDesc = :auditReasonDesc"),
    @NamedQuery(name = "Project.findByEmail", query = "SELECT p FROM Project p WHERE p.email = :email"),
    @NamedQuery(name = "Project.findRecent", query = "SELECT p FROM Project p WHERE p.projectTypeId.id = :id1 OR p.projectTypeId.id = :id2 OR p.projectTypeId.id = :id3 ORDER BY p.createdOnDtm DESC"),
    @NamedQuery(name = "Project.findRecentSVA", query = "SELECT p FROM Project p WHERE p.projectTypeId.id = :id1 OR p.projectTypeId.id = :id2 OR p.projectTypeId.id = :id3 ORDER BY p.createdOnDtm DESC"),
    @NamedQuery(name = "Project.findAllPharmacare", query = "SELECT p FROM Project p WHERE p.projectTypeId.id = 1 OR p.projectTypeId.id = 2 OR p.projectTypeId.id = 3 ORDER BY p.createdOnDtm DESC"),
    @NamedQuery(name = "Project.findAllSVA", query = "SELECT p FROM Project p WHERE p.projectTypeId.id = 21 OR p.projectTypeId.id = 22 OR p.projectTypeId.id = 23 ORDER BY p.createdOnDtm DESC"),
    @NamedQuery(name = "Project.findAllSVAArchivedBatch", query = "SELECT p FROM Project p WHERE (p.projectTypeId.id = 21 OR p.projectTypeId.id = 22 OR p.projectTypeId.id = 23) AND p.createdOnDtm<=:ArchiveDate AND p.statusId.id = 2 ORDER BY p.createdOnDtm DESC"),
    @NamedQuery(name = "Project.findAllpharmArchivedBatch", query = "SELECT p FROM Project p WHERE (p.projectTypeId.id = 1 OR p.projectTypeId.id = 2 OR p.projectTypeId.id = 3) AND p.createdOnDtm<=:ArchiveDate AND p.statusId.id = 2 ORDER BY p.createdOnDtm DESC")})
public class Project implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy=GenerationType.SEQUENCE,generator="ProjectSeq")    
    @NotNull
    @Column(name = "ID")
    private Long id;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "NAME")
    private String name;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "PROJECT_OWNER")
    private String projectOwner;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 4)
    @Column(name = "PROJECT_YEAR")
    private String projectYear = "";
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 3)
    @Column(name = "PROJECT_MONTH")
    private String projectMonth = "";
    @Basic(optional = false)
    @NotNull
    @Column(name = "PROJECT_FROM_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    private Date projectFromDate;
    @Basic(optional = false)
    @NotNull
    @Column(name = "PROJECT_TO_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    private Date projectToDate;
    @Basic(optional = false)
    @NotNull
    @Column(name = "MAX_PATIENTS")
    private Long maxPatients;
    @Column(name = "CLOSED_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    private Date closedDate;
    @Column(name = "ARCHIVED_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    private Date archivedDate;
    @Column(name = "FIRST_PRINTING_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    private Date firstPrintingDate;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Basic(optional = false)
    @NotNull
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Size(max = 100)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
    @Version
    private Long statelessTransactionNbr;
    @Size(max = 1000)
    @Column(name = "AUDIT_REASON_DESC")
    private String auditReasonDesc;
    @Size(max = 64)
    @Column(name = "EMAIL")
    private String email;
    @JoinColumn(name = "PROJECT_TYPE_ID", referencedColumnName = "ID")
    @ManyToOne(optional = false)
    private CodesProjectType projectTypeId;
    @JoinColumn(name = "STATUS_ID", referencedColumnName = "ID")
    @ManyToOne(optional = false)
    private CodesProjectStatus statusId;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "projectId")
    private List<Letter> letterList;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "projectId")
    private List<EmailReminder> emailReminderList;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "projectId")
    private List<ProjectPlans> projectPlansList;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "projectId")
    private List<PharmacyProvider> pharmacyProviderList;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "projectId")
    private List<PracSvaProject> pracSvaProjectList;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "projectId")
    private List<LetterMspDetail> letterMspDetailList;

    /**
     * new value for total letters mailed on statistical report.
     */
    private transient int letterMailedTotal;
    /**
     * new value for total letters not delivered on statistical report.
     */
    private transient int letterNotDeliverTotal;
    /**
     * new value for total letters delivered on statistical report.
     */
    private transient int letterDeliverTotal;
    /**
     * new value for total letters returned per project on statistical report.
     */
    private transient int letterReturnsPerProjectTotal;
    /**
     * new value for total percentage letters returns per project on statistical report.
     */
    private transient int letterReturnsPercentageTotal;
    /**
     * new value for total anomaly letters per project on statistical report.
     */
    private transient int letterAnomalyTotal;
    /**
     * new value for total percentage anomaly letters per project on statistical report.
     */
    private transient int letterAnomalyPercentageTotal;
    /**
     * new list for total letters mailed on statistical report.
     */
    private transient List<Letter> totalMailedLetters = new ArrayList<>();
    /**
     * new list for total letters not delivered on statistical report.
     */
    private transient List<Letter> totalNotDeliverLetters = new ArrayList<>();
    /**
     * new list for total letters with anomalies on statistical report.
     */
    private transient List<Letter> totalAnomalyLetters = new ArrayList<>();
        /**
     * new list for total letters mailed on statistical report for SVA projects.
     */
    private transient List<LetterMspDetail> totalMailedLettersSva = new ArrayList<>();
    /**
     * new list for total letters not delivered on statistical report.
     */
    private transient List<LetterMspDetail> totalNotDeliverLettersSva = new ArrayList<>();
    /**
     * new list for total letters with anomalies on statistical report.
     */
    private transient List<LetterMspDetail> totalAnomalyLettersSva = new ArrayList<>();

    public Project() {
    }

    public Project(Long id) {
        this.id = id;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getProjectOwner() {
        return projectOwner;
    }

    public void setProjectOwner(String projectOwner) {
        this.projectOwner = projectOwner;
    }

    public String getProjectYear() {
        return projectYear;
    }

    public void setProjectYear(String projectYear) {
        this.projectYear = projectYear;
    }

    public String getProjectMonth() {
        return projectMonth;
    }

    public void setProjectMonth(String projectMonth) {
        this.projectMonth = projectMonth;
    }

    public Date getProjectFromDate() {
        return projectFromDate;
    }

    public void setProjectFromDate(Date projectFromDate) {
        this.projectFromDate = projectFromDate;
    }

    public Date getProjectToDate() {
        return projectToDate;
    }

    public void setProjectToDate(Date projectToDate) {
        this.projectToDate = projectToDate;
    }

    public Long getMaxPatients() {
        return maxPatients;
    }

    public void setMaxPatients(Long maxPatients) {
        this.maxPatients = maxPatients;
    }

    public Date getClosedDate() {
        return closedDate;
    }

    public void setClosedDate(Date closedDate) {
        this.closedDate = closedDate;
    }

    public Date getArchivedDate() {
        return archivedDate;
    }

    public void setArchivedDate(Date archivedDate) {
        this.archivedDate = archivedDate;
    }

    public Date getFirstPrintingDate() {
        return firstPrintingDate;
    }

    public void setFirstPrintingDate(Date firstPrintingDate) {
        this.firstPrintingDate = firstPrintingDate;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public CodesProjectType getProjectTypeId() {
        return projectTypeId;
    }

    public void setProjectTypeId(CodesProjectType projectTypeId) {
        this.projectTypeId = projectTypeId;
    }

    public CodesProjectStatus getStatusId() {
        return statusId;
    }

    public void setStatusId(CodesProjectStatus statusId) {
        this.statusId = statusId;
    }

    @XmlTransient
    public List<Letter> getLetterList() {
        return letterList;
    }

    public void setLetterList(List<Letter> letterList) {
        this.letterList = letterList;
    }

    @XmlTransient
    public List<EmailReminder> getEmailReminderList() {
        return emailReminderList;
    }

    public void setEmailReminderList(List<EmailReminder> emailReminderList) {
        this.emailReminderList = emailReminderList;
    }

    @XmlTransient
    public List<ProjectPlans> getProjectPlansList() {
        return projectPlansList;
    }

    public void setProjectPlansList(List<ProjectPlans> projectPlansList) {
        this.projectPlansList = projectPlansList;
    }

    @XmlTransient
    public List<PharmacyProvider> getPharmacyProviderList() {
        return pharmacyProviderList;
    }

    public void setPharmacyProviderList(List<PharmacyProvider> pharmacyProviderList) {
        this.pharmacyProviderList = pharmacyProviderList;
    }

    public int getLetterMailedTotal() {
        return letterMailedTotal;
    }

    public void setLetterMailedTotal(int letterMailedTotal) {
        this.letterMailedTotal = letterMailedTotal;
    }

    public int getLetterNotDeliverTotal() {
        return letterNotDeliverTotal;
    }

    public void setLetterNotDeliverTotal(int letterNotDeliverTotal) {
        this.letterNotDeliverTotal = letterNotDeliverTotal;
    }

    public int getLetterDeliverTotal() {
        return letterDeliverTotal;
    }

    public void setLetterDeliverTotal(int letterDeliverTotal) {
        this.letterDeliverTotal = letterDeliverTotal;
    }

    public List<Letter> getTotalMailedLetters() {
        return totalMailedLetters;
    }

    public void setTotalMailedLetters(List<Letter> totalMailedLetters) {
        this.totalMailedLetters = totalMailedLetters;
    }

    public List<Letter> getTotalNotDeliverLetters() {
        return totalNotDeliverLetters;
    }

    public void setTotalNotDeliverLetters(List<Letter> totalNotDeliverLetters) {
        this.totalNotDeliverLetters = totalNotDeliverLetters;
    }

    public int getLetterReturnsPerProjectTotal() {
        return letterReturnsPerProjectTotal;
    }

    public void setLetterReturnsPerProjectTotal(int letterReturnsPerProjectTotal) {
        this.letterReturnsPerProjectTotal = letterReturnsPerProjectTotal;
    }

    public List<Letter> getTotalAnomalyLetters() {
        return totalAnomalyLetters;
    }

    public void setTotalAnomalyLetters(List<Letter> totalAnomalyLetters) {
        this.totalAnomalyLetters = totalAnomalyLetters;
    }

    public int getLetterAnomalyTotal() {
        return letterAnomalyTotal;
    }

    public void setLetterAnomalyTotal(int letterAnomalyTotal) {
        this.letterAnomalyTotal = letterAnomalyTotal;
    }

    public int getLetterAnomalyPercentageTotal() {
        return letterAnomalyPercentageTotal;
    }

    public void setLetterAnomalyPercentageTotal(int letterAnomalyPercentageTotal) {
        this.letterAnomalyPercentageTotal = letterAnomalyPercentageTotal;
    }

    public int getLetterReturnsPercentageTotal() {
        return letterReturnsPercentageTotal;
    }

    public void setLetterReturnsPercentageTotal(int letterReturnsPercentageTotal) {
        this.letterReturnsPercentageTotal = letterReturnsPercentageTotal;
    }

    public String getAuditReasonDesc() {
        return auditReasonDesc;
    }

    public void setAuditReasonDesc(String auditReasonDesc) {
        this.auditReasonDesc = auditReasonDesc;
    }
    
    public String getEmail() {
        return email;
    }
    
    public void setEmail (String email) {
        this.email = email;
    }
     
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Project)) {
            return false;
        }
        Project other = (Project) object;
        return !((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id)));
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.pacl.ejb.entity.Project[ id=" + id + " ]";
    }

    @XmlTransient
    public List<LetterMspDetail> getLetterMspDetailList() {
        return letterMspDetailList;
    }

    public void setLetterMspDetailList(List<LetterMspDetail> letterMspDetailList) {
        this.letterMspDetailList = letterMspDetailList;
    }

    public List<PracSvaProject> getPracSvaProjectList() {
        return pracSvaProjectList;
    }

    public void setPracSvaProjectList(List<PracSvaProject> pracSvaProjectList) {
        this.pracSvaProjectList = pracSvaProjectList;
    }

    public List<LetterMspDetail> getTotalMailedLettersSva() {
        return totalMailedLettersSva;
    }

    public void setTotalMailedLettersSva(List<LetterMspDetail> totalMailedLettersSva) {
        this.totalMailedLettersSva = totalMailedLettersSva;
    }

    public List<LetterMspDetail> getTotalNotDeliverLettersSva() {
        return totalNotDeliverLettersSva;
    }

    public void setTotalNotDeliverLettersSva(List<LetterMspDetail> totalNotDeliverLettersSva) {
        this.totalNotDeliverLettersSva = totalNotDeliverLettersSva;
    }

    public List<LetterMspDetail> getTotalAnomalyLettersSva() {
        return totalAnomalyLettersSva;
    }

    public void setTotalAnomalyLettersSva(List<LetterMspDetail> totalAnomalyLettersSva) {
        this.totalAnomalyLettersSva = totalAnomalyLettersSva;
    }
    
    
}