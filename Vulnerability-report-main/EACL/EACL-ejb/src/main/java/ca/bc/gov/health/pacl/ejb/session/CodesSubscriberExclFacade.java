/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.ejb.session;

import ca.bc.gov.health.pacl.ejb.entity.CodesSubscriberExcl;
import ca.bc.gov.health.pacl.ejb.entity.Project;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author Dan.Stepanov
 */
@Stateless
public class CodesSubscriberExclFacade extends AbstractFacade<CodesSubscriberExcl> implements CodesSubscriberExclFacadeLocal {

    @PersistenceContext(unitName = "PACLPU")
    private EntityManager em;

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public CodesSubscriberExclFacade() {
        super(CodesSubscriberExcl.class);
    }

    /**
     * Finds excluded PHNs by auditing start/end dates.
     * @param project Project - new letter run that has auditing start/end dates
     *
     * @return List<CodesSubscriberExcl>
     */
    @Override
    public List<CodesSubscriberExcl> findExcludedPhnByAuditDate(Project project) {

        Query query = em.createNativeQuery("SELECT * FROM CODES_SUBSCRIBER_EXCL cse"
                + " WHERE cse.START_DATE <= ?1 AND cse.END_DATE >= ?2", CodesSubscriberExcl.class);
        query.setParameter(1, project.getProjectFromDate());
        query.setParameter(2, project.getProjectToDate());

        return query.getResultList();
    }
    
    /**
     * Finds subscriber exclusion by the PHN
     * 
     * @param phn
     * @return CodesSubscriberExcl
     */
    @Override
    public CodesSubscriberExcl findSubscriberByPHN(String phn) throws Exception {

        CodesSubscriberExcl codesSubExcl = new CodesSubscriberExcl();
        Query q = em.createNamedQuery("CodesSubscriberExcl.findByPhn");
        q.setParameter("phn", phn);

        try {  //if part
            if ((CodesSubscriberExcl) q.getSingleResult() != null) {
                return codesSubExcl = (CodesSubscriberExcl) q.getSingleResult();
            } 
        } catch(NoResultException e) {
            //create a new CodesFeeItemExcl record.
            return codesSubExcl = new CodesSubscriberExcl();
        }

        return codesSubExcl;
    }
    
    /**
     * Returns a list of subscribers that match the user's input
     * @param code
     * @return 
     */
    @Override
    public List<CodesSubscriberExcl> findByPhn(String code){
        List<CodesSubscriberExcl> codesSubExclList;
        Query q = em.createNamedQuery("CodesSubscriberExcl.findByPhnLike");
        q.setParameter("phn", code);

        try {  
            codesSubExclList = q.getResultList();
        } catch(NoResultException e) {
            //create a new CodesFeeItemExcl record.
            codesSubExclList = new ArrayList<>();
        }
        return codesSubExclList;
    }

}
