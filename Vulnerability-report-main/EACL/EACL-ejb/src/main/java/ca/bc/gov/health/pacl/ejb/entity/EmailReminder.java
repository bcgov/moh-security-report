/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.ejb.entity;

import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Version;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.util.Date;

/**
 *
 * @author Dan.Stepanov
 */
@Entity
@EntityListeners({AuditListener.class})

@Table(name = "EMAIL_REMINDER")
@SequenceGenerator(name="EmailReminderSeq", sequenceName="EMAIL_REMINDER_SEQ", allocationSize=1, initialValue=1)

@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "EmailReminder.findAll", query = "SELECT e FROM EmailReminder e"),
    @NamedQuery(name = "EmailReminder.findById", query = "SELECT e FROM EmailReminder e WHERE e.id = :id"),
    @NamedQuery(name = "EmailReminder.findByUserNotified", query = "SELECT e FROM EmailReminder e WHERE e.userNotified = :userNotified"),
    @NamedQuery(name = "EmailReminder.findByFirstReminder", query = "SELECT e FROM EmailReminder e WHERE e.firstReminder = :firstReminder"),
    @NamedQuery(name = "EmailReminder.findBySecondReminder", query = "SELECT e FROM EmailReminder e WHERE e.secondReminder = :secondReminder"),
    @NamedQuery(name = "EmailReminder.findByCreatedByNm", query = "SELECT e FROM EmailReminder e WHERE e.createdByNm = :createdByNm"),
    @NamedQuery(name = "EmailReminder.findByCreatedOnDtm", query = "SELECT e FROM EmailReminder e WHERE e.createdOnDtm = :createdOnDtm"),
    @NamedQuery(name = "EmailReminder.findByLastModifiedByNm", query = "SELECT e FROM EmailReminder e WHERE e.lastModifiedByNm = :lastModifiedByNm"),
    @NamedQuery(name = "EmailReminder.findByLastModifiedOnDtm", query = "SELECT e FROM EmailReminder e WHERE e.lastModifiedOnDtm = :lastModifiedOnDtm")})
public class EmailReminder implements Serializable {

    private static final long serialVersionUID = 1L;
    
    @Id
    @GeneratedValue(strategy=GenerationType.SEQUENCE,generator="EmailReminderSeq")    
    @NotNull
    @Column(name = "ID")
    private Long id;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 1)
    @Column(name = "USER_NOTIFIED")
    private String userNotified;
    @Column(name = "FIRST_REMINDER")
    @Temporal(TemporalType.TIMESTAMP)
    private Date firstReminder;
    @Column(name = "SECOND_REMINDER")
    @Temporal(TemporalType.TIMESTAMP)
    private Date secondReminder;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Basic(optional = false)
    @NotNull
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Size(max = 100)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
    @Version
    private Long statelessTransactionNbr;
    @JoinColumn(name = "PROJECT_ID", referencedColumnName = "ID")
    @ManyToOne(optional = false)
    private Project projectId;
    @JoinColumn(name = "PROJECT_TYPE_ID", referencedColumnName = "ID")
    @ManyToOne(optional = false)
    private CodesProjectType projectTypeId;

    public EmailReminder() {
    }

    public EmailReminder(Long id) {
        this.id = id;
    }

    public EmailReminder(Long id, String userNotified, String createdByNm, Date createdOnDtm) {
        this.id = id;
        this.userNotified = userNotified;
        this.createdByNm = createdByNm;
        this.createdOnDtm = createdOnDtm;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUserNotified() {
        return userNotified;
    }

    public void setUserNotified(String userNotified) {
        this.userNotified = userNotified;
    }

    public Date getFirstReminder() {
        return firstReminder;
    }

    public void setFirstReminder(Date firstReminder) {
        this.firstReminder = firstReminder;
    }

    public Date getSecondReminder() {
        return secondReminder;
    }

    public void setSecondReminder(Date secondReminder) {
        this.secondReminder = secondReminder;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public Project getProjectId() {
        return projectId;
    }

    public void setProjectId(Project projectId) {
        this.projectId = projectId;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof EmailReminder)) {
            return false;
        }
        EmailReminder other = (EmailReminder) object;
        return !((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id)));
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.pacl.ejb.entity.EmailReminder[ id=" + id + " ]";
    }

    public CodesProjectType getProjectTypeId() {
        return projectTypeId;
    }

    public void setProjectTypeId(CodesProjectType projectTypeId) {
        this.projectTypeId = projectTypeId;
    }
    
}
