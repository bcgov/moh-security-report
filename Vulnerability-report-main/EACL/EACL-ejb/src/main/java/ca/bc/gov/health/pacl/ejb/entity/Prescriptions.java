/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.ejb.entity;

import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Version;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import jakarta.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;

/**
 *
 * @author Dan.Stepanov
 */
@Entity
@EntityListeners({AuditListener.class})

@Table(name = "PRESCRIPTIONS")
@SequenceGenerator(name="PrescriptionsSeq", sequenceName="PRESCRIPTIONS_SEQ", allocationSize=1, initialValue=1)

@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "Prescriptions.findAll", query = "SELECT p FROM Prescriptions p"),
    @NamedQuery(name = "Prescriptions.findById", query = "SELECT p FROM Prescriptions p WHERE p.id = :id"),
    @NamedQuery(name = "Prescriptions.findByPrescriptionDate", query = "SELECT p FROM Prescriptions p WHERE p.prescriptionDate = :prescriptionDate"),
    @NamedQuery(name = "Prescriptions.findByBrandName", query = "SELECT p FROM Prescriptions p WHERE p.brandName = :brandName"),
    @NamedQuery(name = "Prescriptions.findByGenericName", query = "SELECT p FROM Prescriptions p WHERE p.genericName = :genericName"),
    @NamedQuery(name = "Prescriptions.findByPractitionerId", query = "SELECT p FROM Prescriptions p WHERE p.practitionerId = :practitionerId"),
    @NamedQuery(name = "Prescriptions.findByPractitionerFirstNm", query = "SELECT p FROM Prescriptions p WHERE p.practitionerFirstNm = :practitionerFirstNm"),
    @NamedQuery(name = "Prescriptions.findByPractitionerLastNm", query = "SELECT p FROM Prescriptions p WHERE p.practitionerLastNm = :practitionerLastNm"),
    @NamedQuery(name = "Prescriptions.findByQuantity", query = "SELECT p FROM Prescriptions p WHERE p.quantity = :quantity"),
    @NamedQuery(name = "Prescriptions.findByDrugStrength", query = "SELECT p FROM Prescriptions p WHERE p.drugStrength = :drugStrength"),
    @NamedQuery(name = "Prescriptions.findByDinPin", query = "SELECT p FROM Prescriptions p WHERE p.dinPin = :dinPin"),
    @NamedQuery(name = "Prescriptions.findByCreatedByNm", query = "SELECT p FROM Prescriptions p WHERE p.createdByNm = :createdByNm"),
    @NamedQuery(name = "Prescriptions.findByCreatedOnDtm", query = "SELECT p FROM Prescriptions p WHERE p.createdOnDtm = :createdOnDtm"),
    @NamedQuery(name = "Prescriptions.findByLastModifiedByNm", query = "SELECT p FROM Prescriptions p WHERE p.lastModifiedByNm = :lastModifiedByNm"),
    @NamedQuery(name = "Prescriptions.findByLastModifiedOnDtm", query = "SELECT p FROM Prescriptions p WHERE p.lastModifiedOnDtm = :lastModifiedOnDtm")})
public class Prescriptions implements Serializable {
    private static final long serialVersionUID = 1L;
    @Id
@GeneratedValue(strategy=GenerationType.SEQUENCE,generator="PrescriptionsSeq")
    
    @Basic(optional = false)
    @NotNull
    @Column(name = "ID")
    private Long id;
    @Basic(optional = false)
    @NotNull
    @Column(name = "PRESCRIPTION_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    private Date prescriptionDate;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 240)
    @Column(name = "BRAND_NAME")
    private String brandName;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 240)
    @Column(name = "GENERIC_NAME")
    private String genericName;
    @Size(max = 480)
    @Column(name = "PRACTITIONER_ID")
    private String practitionerId;
    @Size(max = 240)
    @Column(name = "PRACTITIONER_FIRST_NM")
    private String practitionerFirstNm;
    @Size(max = 240)
    @Column(name = "PRACTITIONER_LAST_NM")
    private String practitionerLastNm;
    @Basic(optional = false)
    @NotNull
    @Column(name = "QUANTITY")
    private BigDecimal quantity;
    @Size(max = 10)
    @Column(name = "DRUG_STRENGTH")
    private String drugStrength;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 240)
    @Column(name = "DIN_PIN")
    private String dinPin;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Basic(optional = false)
    @NotNull
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Size(max = 100)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
    @Version
    private Long statelessTransactionNbr;
    @JoinColumn(name = "LETTER_ID", referencedColumnName = "ID")
    @ManyToOne(optional = false)
    private Letter letterId;
    @JoinColumn(name = "STATUS", referencedColumnName = "ID")
    @ManyToOne(optional = true)
    private CodesLetterStatus statusId;

    public Prescriptions() {
    }

    public Prescriptions(Long id) {
        this.id = id;
    }

    public Prescriptions(Long id, Date prescriptionDate, String brandName, String genericName, BigDecimal quantity, String drugStrength, String dinPin, String createdByNm, Date createdOnDtm) {
        this.id = id;
        this.prescriptionDate = prescriptionDate;
        this.brandName = brandName;
        this.genericName = genericName;
        this.quantity = quantity;
        this.drugStrength = drugStrength;
        this.dinPin = dinPin;
        this.createdByNm = createdByNm;
        this.createdOnDtm = createdOnDtm;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Date getPrescriptionDate() {
        return prescriptionDate;
    }

    public void setPrescriptionDate(Date prescriptionDate) {
        this.prescriptionDate = prescriptionDate;
    }

    public String getBrandName() {
        return brandName;
    }

    public void setBrandName(String brandName) {
        this.brandName = brandName;
    }

    public String getGenericName() {
        return genericName;
    }

    public void setGenericName(String genericName) {
        this.genericName = genericName;
    }

    public String getPractitionerId() {
        return practitionerId;
    }

    public void setPractitionerId(String practitionerId) {
        this.practitionerId = practitionerId;
    }

    public String getPractitionerFirstNm() {
        return practitionerFirstNm;
    }

    public void setPractitionerFirstNm(String practitionerFirstNm) {
        this.practitionerFirstNm = practitionerFirstNm;
    }

    public String getPractitionerLastNm() {
        return practitionerLastNm;
    }

    public void setPractitionerLastNm(String practitionerLastNm) {
        this.practitionerLastNm = practitionerLastNm;
    }
    
    public String getPractitionerName() {
        return String.format("%s %s", practitionerFirstNm, practitionerLastNm);
    }

    public BigDecimal getQuantity() {
        return quantity;
    }

    public void setQuantity(BigDecimal quantity) {
        this.quantity = quantity;
    }

    public String getDrugStrength() {
        return drugStrength;
    }

    public void setDrugStrength(String drugStrength) {
        this.drugStrength = drugStrength;
    }

    public String getDinPin() {
        return dinPin;
    }

    public void setDinPin(String dinPin) {
        this.dinPin = dinPin;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public Letter getLetterId() {
        return letterId;
    }

    public void setLetterId(Letter letterId) {
        this.letterId = letterId;
    }
    
    public CodesLetterStatus getStatusId() {
        return statusId;
    }

    public void setStatusId(CodesLetterStatus statusId) {
        this.statusId = statusId;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Prescriptions)) {
            return false;
        }
        Prescriptions other = (Prescriptions) object;
        return !((this.id == null && other.id != null) || (this.id != null && !this.id.equals(other.id)));
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.pacl.ejb.entity.Prescription[ id=" + id + " ]";
    }
    
}