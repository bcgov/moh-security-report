/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pacl.ejb.session;

import ca.bc.gov.health.pacl.ejb.entity.LetterMspDetail;
import ca.bc.gov.health.pacl.ejb.entity.PracSvaProject;
import ca.bc.gov.health.pacl.ejb.entity.Project;
import static ca.bc.gov.health.pacl.ejb.session.ProjectFacade.logger;
import jakarta.ejb.EJBException;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;

/**
 *
 * @author Dan.Stepanov
 */
@Stateless
public class LetterMspDetailFacade extends AbstractFacade<LetterMspDetail> implements LetterMspDetailFacadeLocal {

    @PersistenceContext(unitName = "PACLPU")
    private EntityManager em;
    
    public LetterMspDetailFacade() {
        super(LetterMspDetail.class);
    }

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }
    
    @Override
    public List<LetterMspDetail> findByProjectId(Project project)
    {
        Query q = em.createNamedQuery("LetterMspDetail.findByProjectId");
        q.setParameter("projectId", project);
         return q.getResultList();
    }
    
    @Override
    public List<LetterMspDetail> findBySvaCodePracCode(String pracCode, String svaCode, int projectId)
    {
        Query q = em.createNamedQuery("LetterMspDetail.findBySvaCodePracCode");
        q.setParameter("pracBllgNum", pracCode);
        q.setParameter("svaProjectCode", svaCode);
        q.setParameter("id", projectId);
         return q.getResultList();
    }

    /**
     * Finds patient letters by PHN.
     * @param phn Long - PHN identifier for the patient letter records
     *
     * @return List<LetterMspDetail>
     */
    @Override
    public List<LetterMspDetail> findPatientLettersByPhn(Long phn) {

        Query q = em.createNamedQuery("LetterMspDetail.findByPhn");
        q.setParameter("phn", phn);

        return q.getResultList();
    }
    
    /**
     * Finds patient letters by CaseCode.
     * @param caseCode String
     *
     * @return List<LetterMspDetail>
     */
    @Override
    public List<LetterMspDetail> findLettersByCaseCode(String caseCode) {

        Query q = em.createNamedQuery("LetterMspDetail.findByCaseCode");
        q.setParameter("caseCode", caseCode.trim().toUpperCase());

        return q.getResultList();
    }

    /**
     * Finds patient letters by SVA project id.
     * @param pracSvaProjectId PracSvaProject - practitioner SVA project id identifier.
     *
     * @return List<LetterMspDetail>
     */
    @Override
    public List<LetterMspDetail> findPatientLettersBySvaProjectId(PracSvaProject pracSvaProjectId) {

        Query q = em.createNamedQuery("LetterMspDetail.findByPracSvaProjectId");
        q.setParameter("pracSvaProjectId", pracSvaProjectId);

        return q.getResultList();
    }
    
    /**
     * Find lettersMsp by project ID and order them by recipient
     * @param providerId
     * @return 
     */
    @Override
    public List<LetterMspDetail> orderByPracNamePatientLastName (Long projectId) {
        Query query = em.createNativeQuery("select * from LETTER_MSP_DETAIL l, PRAC_SVA_PROJECT sva"
                + " where l.PROJECT_ID =?1"
                + " and l.PRAC_SVA_PROJECT_ID = sva.ID"
                + " order by sva.PRAC_1ST_GVN_NM asc, l.RECIPIENT_LAST_NAME asc",
                LetterMspDetail.class);
        query.setParameter(1, projectId);
        return query.getResultList();
    }
    
    /**
     * Verifies if letter exists in the database for
     * the selected input letter barcodes.
     *
     * @param inputLetterBarcodes List<String> - barcode Ids input from the screen
     * @return boolean
     */
    @Override
    public boolean verifyLetterByBarcode(List<String> inputLetterBarcodes) {
        boolean barCodeExist = true;

        for (String letterBarCode : inputLetterBarcodes) {
            List<LetterMspDetail> letterBarcodes = new ArrayList<>();
            Query query = em.createNativeQuery("select * from LETTER_MSP_DETAIL lt"
                + " where lt.BARCODE =?1", LetterMspDetail.class);
            query.setParameter(1, letterBarCode);
            try {
                letterBarcodes = query.getResultList();
            } catch (EJBException e) {
                for (Throwable t = e.getCause(); t != null; t = t.getCause()) {
                    if (t.getClass().getName().equals("java.sql.SQLException")) {
                        logger.log(Level.INFO, "Cannot find the record in the system.", e);
                        throw e;
                    }
                }
            }
            if (letterBarcodes != null && letterBarcodes.isEmpty()) {
                barCodeExist = false;
            }
        }

        return barCodeExist;
    }
    
    /**
     * Retrieves letter objects for the selected input letter barcodes.
     *
     * @param inputLetterBarcodes String - barcode Ids from the screen
     * @return List<Letter>
     */
    @Override
    public List<LetterMspDetail> findLettersByBarcodes(String inputLetterBarcodes) {

        String[] letterBarCodes = inputLetterBarcodes.trim().split(",");
        List<String> letterCodesList = new ArrayList<>();
        for (String letterBarCode : letterBarCodes) {
            letterCodesList.add(letterBarCode.trim());
        }
        // build the letter barcodes
        String delimiter = ", ";
        String apos = "'";

        Iterator<? extends String> iter = letterCodesList.iterator();
        StringBuilder letterCodeString = new StringBuilder();
        letterCodeString.append(apos).append(iter.next()).append(apos);
        while (iter.hasNext()) {
            letterCodeString.append(delimiter).append(apos).append(iter.next()).append(apos);
        }

        Query query = em.createNativeQuery("select * from LETTER_MSP_DETAIL l"
                + " where l.BARCODE IN (" + letterCodeString.toString() + ")",
                LetterMspDetail.class);

        return query.getResultList();
    }
    
     /*
     * The same as edit, but returns the modified object
     */
    @Override
    public LetterMspDetail editWithReturn(LetterMspDetail letter) {
        return getEntityManager().merge(letter);
    }
}
