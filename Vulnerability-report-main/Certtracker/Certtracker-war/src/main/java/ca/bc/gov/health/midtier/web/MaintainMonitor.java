package ca.bc.gov.health.midtier.web;

import ca.bc.gov.health.midtier.ejb.entity.*;
import ca.bc.gov.health.midtier.ejb.session.*;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.context.Flash;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.servlet.http.HttpServletResponse;
import java.io.Serializable;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.file.UploadedFile;

@Named("MaintainMonitor")
@ViewScoped
public class MaintainMonitor implements Serializable {

  @EJB private MonitorFacadeLocal monitorFacade;

  private Monitor monitor;

  @Inject private Flash flash;

  public MaintainMonitor() {}

  @PostConstruct
  public void init() {
    monitor = new Monitor();
    if (flash.get("selectedMonitorKey") != null) {
      monitor = monitorFacade.find(flash.get("selectedMonitorKey"));
    }
    if (monitor.getAuthorityId() == null) {
      monitor.setAuthorityId(new SigningAuthority());
    }
    if (monitor.getApplicationId() == null) {
      monitor.setApplicationId(new Application());
    }
  }

  public String select() {
    flash.keep("selectedMonitorKey");
    return "MaintainMonitor.xhtml";
  }

  public String add() {
    nullify();
    monitorFacade.create(monitor);
    flash.put("selectedMonitorKey", monitor.getMonitorId());
    FacesContext.getCurrentInstance()
        .addMessage(
            "m1", new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));

    FacesContext.getCurrentInstance()
        .addMessage(
            "m2",
            new FacesMessage(
                FacesMessage.SEVERITY_WARN,
                "Please make sure to add distribution",
                "Please make sure to add distribution"));
    return "MaintainMonitor.xhtml";
  }

  public String update() {
    nullify();
    monitorFacade.edit(monitor);
    FacesContext.getCurrentInstance()
        .addMessage(
            null,
            new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
    return null;
  }

  public String delete() {
    nullify();
    monitorFacade.remove(monitor);
    return clear();
  }

  public String clear() {
    monitor = new Monitor();
    if (monitor.getAuthorityId() == null) {
      monitor.setAuthorityId(new SigningAuthority());
    }
    if (monitor.getApplicationId() == null) {
      monitor.setApplicationId(new Application());
    }
    return "MonitorSearch.xhtml";
  }

  public String create() {
    monitor = new Monitor();
    if (monitor.getAuthorityId() == null) {
      monitor.setAuthorityId(new SigningAuthority());
    }
    if (monitor.getApplicationId() == null) {
      monitor.setApplicationId(new Application());
    }
    return "MaintainMonitor.xhtml";
  }

  private void nullify() {
    if (monitor.getAuthorityId() != null && monitor.getAuthorityId().getAuthorityId() == null) {
      monitor.setAuthorityId(null);
    }
    /*if (monitor.getEmailId()!=null && monitor.getEmailId().getEmailId()==null){
    	monitor.setEmailId(null);
    }*/
    if (monitor.getApplicationId() != null
        && monitor.getApplicationId().getApplicationId() == null) {
      monitor.setApplicationId(null);
    }
  }

  public void uploadCertificateTxt(FileUploadEvent event) throws Exception {
    UploadedFile item = event.getFile();
    monitor.setCertificateTxt(item.getContent());
  }

  public String viewCertificateTxt() {
    FacesContext fc = FacesContext.getCurrentInstance();
    HttpServletResponse response = (HttpServletResponse) fc.getExternalContext().getResponse();
    try {
      byte[] data = (byte[]) monitor.getCertificateTxt();
      response.setHeader("Content-Disposition", "attachment; filename=CertificateTxt.txt");
      response.setContentLength(data.length);
      response.getOutputStream().write(data);
      response.getOutputStream().flush();
      response.getOutputStream().close();
    } catch (Exception e) {
      e.printStackTrace();
    }
    fc.responseComplete();
    return null;
  }

  public void uploadRequestTxt(FileUploadEvent event) throws Exception {
    UploadedFile item = event.getFile();
    monitor.setRequestTxt(item.getContent());
  }

  public String viewRequestTxt() {
    FacesContext fc = FacesContext.getCurrentInstance();
    HttpServletResponse response = (HttpServletResponse) fc.getExternalContext().getResponse();
    try {
      byte[] data = (byte[]) monitor.getCertificateTxt();
      response.setHeader("Content-Disposition", "attachment; filename=RequestTxt.txt");
      response.setContentLength(data.length);
      response.getOutputStream().write(data);
      response.getOutputStream().flush();
      response.getOutputStream().close();
    } catch (Exception e) {
      e.printStackTrace();
    }
    fc.responseComplete();
    return null;
  }

  public Monitor getMonitor() {
    return monitor;
  }

  public Monitor findMonitor(Long id) {

    return monitorFacade.find(id);
  }

  public void setMonitor(Monitor monitor) {
    this.monitor = monitor;
  }

  public Flash getFlash() {
    return flash;
  }

  public void setFlash(Flash flash) {
    this.flash = flash;
  }
}
