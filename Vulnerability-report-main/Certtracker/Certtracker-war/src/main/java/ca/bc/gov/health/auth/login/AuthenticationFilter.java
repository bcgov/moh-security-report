package ca.bc.gov.health.auth.login;

import jakarta.inject.Inject;
import jakarta.servlet.Filter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.FilterConfig;
import jakarta.servlet.ServletException;
import jakarta.servlet.ServletRequest;
import jakarta.servlet.ServletResponse;
import jakarta.servlet.annotation.WebFilter;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import java.io.IOException;

/** @author Troy.McGinnis */
@WebFilter
public class AuthenticationFilter implements Filter {

  private FilterConfig filterConfig = null;

  // URL to send a user to if they need to login
  private String loginUrl = "";

  @Inject private Login login;

  /**
   * Initializes this filter when the container starts up
   *
   * @param fc
   * @throws ServletException
   */
  @Override
  public void init(FilterConfig fc) throws ServletException {
    // Initialize any resources
    filterConfig = fc;
    loginUrl = filterConfig.getInitParameter("loginUrl");
  }

  /**
   * Checks if a user is logged in
   *
   * @param req
   * @param resp
   * @param chain
   * @throws IOException
   * @throws ServletException
   */
  @Override
  public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain)
      throws IOException, ServletException {
    HttpServletRequest request = (HttpServletRequest) req;
    HttpServletResponse response = (HttpServletResponse) resp;

    String redirectUrl = loginUrl;
    String requestUrl = request.getRequestURI();

    Boolean accepted = false;

    //
    if (redirectUrl.equals(requestUrl)
        || requestUrl.endsWith(".js.xhtml")
        || requestUrl.endsWith(".css.xhtml")
        || requestUrl.endsWith(".png.xhtml")) {
      accepted = true;
    }

    // Check if user is logged in
    if ((login == null || !login.isLoggedIn()) && !accepted) {
      // No object stored in session, send to login page
      response.sendRedirect(redirectUrl);
    } else {
      // Carry on processing the request
      chain.doFilter(req, resp);
    }
  }

  /** Clean up any resources */
  @Override
  public void destroy() {
    this.filterConfig = null;
  }
}
