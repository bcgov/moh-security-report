package ca.bc.gov.health.midtier.web;

import ca.bc.gov.health.midtier.ejb.entity.*;
import ca.bc.gov.health.midtier.ejb.session.*;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.el.ELContext;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.context.Flash;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.List;

@Named("MaintainDistribution")
@ViewScoped
public class MaintainDistribution implements Serializable {

  @EJB private DistributionFacadeLocal distributionFacade;

  private Distribution distribution;

  @Inject private Flash flash;

  private static boolean fromMonitor;

  public MaintainDistribution() {}

  @PostConstruct
  public void init() {
    distribution = new Distribution();
    if (flash.get("selectedDistributionKey") != null) {
      distribution = distributionFacade.find(flash.get("selectedDistributionKey"));
    }

    if (distribution.getTeamId() == null) {
      distribution.setTeamId(new Team());
    }

    if (distribution.getMonitorId() == null) {
      distribution.setMonitorId(new Monitor());
    }
    if (distribution.getContactId() == null) {
      distribution.setContactId(new Contact());
    }
    if (distribution.getPrimaryContactYn() == null) {
      distribution.setPrimaryContactYn("N");
    }
  }

  public String select() {
    flash.keep("selectedKey");
    return "MaintainDistribution.xhtml";
  }

  public String setDistributionId() {
    flash.keep("selectedDistributionKey");
    System.out.println(distribution.getDistributionId());
    return null;
  }

  public String add() {
    nullify();
    distributionFacade.create(distribution);
    FacesContext.getCurrentInstance()
        .addMessage(
            null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
    return null;
  }

  public String addFromMonitor() {
    nullify();
    setMonitorIdFromMonitorBean();
    distributionFacade.create(distribution);
    updateMonitor();
    FacesContext.getCurrentInstance()
        .addMessage(
            null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
    init(); // re-initialize
    return null;
  }

  public void updateMonitor() {
    Monitor currentMonitor = (Monitor) ((MaintainMonitor) getBean("MaintainMonitor")).getMonitor();
    // Add new distribution to the list
    List<Distribution> currentList = (List<Distribution>) currentMonitor.getDistributionList();
    currentList.add(distributionFacade.find(distribution.getDistributionId()));
    // Set the distribution list in the monitor
    currentMonitor.setDistributionList(currentList);
  }

  public void distributionListSetup() {
    init();
    setMonitorIdFromMonitorBean();
  }

  public void setMonitorIdFromMonitorBean() {
    Monitor monitor = (Monitor) ((MaintainMonitor) getBean("MaintainMonitor")).getMonitor();
    this.distribution.setMonitorId(monitor);
  }

  public Object getBean(String name) {
    ELContext elContext = FacesContext.getCurrentInstance().getELContext();
    FacesContext fc = FacesContext.getCurrentInstance();
    return fc.getApplication().getELResolver().getValue(elContext, null, name);
  }

  public String update() {
    nullify();
    distributionFacade.edit(distribution);
    FacesContext.getCurrentInstance()
        .addMessage(
            null,
            new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
    return null;
  }

  public String delete() {
    nullify();
    distributionFacade.remove(distribution);
    return clear();
  }

  public String clear() {
    distribution = new Distribution();
    if (distribution.getTeamId() == null) {
      distribution.setTeamId(new Team());
    }
    if (distribution.getMonitorId() == null) {
      distribution.setMonitorId(new Monitor());
    }
    if (distribution.getContactId() == null) {
      distribution.setContactId(new Contact());
    }
    return "DistributionSearch.xhtml";
  }

  public String create() {
    distribution = new Distribution();
    if (distribution.getTeamId() == null) {
      distribution.setTeamId(new Team());
    }
    if (distribution.getMonitorId() == null) {
      distribution.setMonitorId(new Monitor());
    }
    if (distribution.getContactId() == null) {
      distribution.setContactId(new Contact());
    }
    return "MaintainDistribution.xhtml";
  }

  public String createFromMonitor() {
    distribution = new Distribution();
    if (distribution.getTeamId() == null) {
      distribution.setTeamId(new Team());
    }
    if (distribution.getMonitorId() == null) {
      distribution.setMonitorId(new Monitor());
    }

    if (distribution.getContactId() == null) {
      distribution.setContactId(new Contact());
    }
    return "MaintainDistribution.xhtml";
  }

  private void nullify() {
    if (distribution.getTeamId() != null && distribution.getTeamId().getTeamId() == null) {
      distribution.setTeamId(null);
    }
    if (distribution.getMonitorId() != null && distribution.getMonitorId().getMonitorId() == null) {
      distribution.setMonitorId(null);
    }
    if (distribution.getContactId() != null && distribution.getContactId().getContactId() == null) {
      distribution.setContactId(null);
    }
  }

  public Distribution getDistribution() {
    return distribution;
  }

  public void setDistribution(Distribution distribution) {
    this.distribution = distribution;
  }

  public Flash getFlash() {
    return flash;
  }

  public void setFlash(Flash flash) {
    this.flash = flash;
  }
}
