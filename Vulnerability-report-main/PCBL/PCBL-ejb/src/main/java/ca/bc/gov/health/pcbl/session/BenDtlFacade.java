/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package ca.bc.gov.health.pcbl.session;

import ca.bc.gov.health.pcbl.entity.BenDtl;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

/**
 *
 * @author greg.perkins
 */
@Stateless
public class BenDtlFacade implements BenDtlFacadeLocal {
    public static final int DIN_PIN_SIZE = 8;
    @PersistenceContext(unitName="PCBL-ejbPU")
    private EntityManager em;

    public void create(BenDtl benDtl) {
        em.persist(benDtl);
    }

    public void edit(BenDtl benDtl) {
        em.merge(benDtl);
    }

    public void remove(BenDtl benDtl) {
        em.remove(em.merge(benDtl));
    }

    public BenDtl find(Object id) {
        return em.find(ca.bc.gov.health.pcbl.entity.BenDtl.class, id);
    }

    public List<BenDtl> findAll() {
        return em.createQuery("select object(o) from BenDtl as o").getResultList();
    }
    
    /**
     * Finds a list of Drug Benefits using the provided search criteria.
     * @param drugName String
     * @param dinPinNpn String
     * @param planCode String
     * @param ahfsClassCode String
     * @param atcClassCode String
     * @param drugManufacturerCode String
     * @return List<BenDtl>
     */
    public List<BenDtl> search(String drugName,String dinPinNpn,String planCode,
            String ahfsClassCode,String atcClassCode,String drugManufacturerCode){
        if (dinPinNpn!=null && !"".equals(dinPinNpn)){
            while(dinPinNpn.length()<DIN_PIN_SIZE){
                dinPinNpn = "0"+dinPinNpn;
            }
        }
        List clauses = new ArrayList();
        List params = new ArrayList();
        int c = 1;
        if (hasAValue(drugName)){
            clauses.add("(UPPER(db.DRUG_BRAND_NM) LIKE UPPER(?"+(c++)+
                    ") OR UPPER(db.GEN_DRUG) LIKE UPPER(?"+(c++)+"))");
            params.add("%"+drugName+"%");
            params.add("%"+drugName+"%");
        }
        if (hasAValue(dinPinNpn)){
            clauses.add("db.din_Pin = ?"+(c++));
            params.add(dinPinNpn);
        }
        if (hasAValue(planCode)){
            clauses.add("db.pcare_Plan_Cd = ?"+(c++));
            params.add(planCode);
        }
        if (hasAValue(ahfsClassCode)){
            clauses.add("(db.ahfs_1_Cd = ?"+(c++)+
                    " OR db.ahfs_2_Cd = ?"+(c++)+
                    " OR db.ahfs_3_Cd = ?"+(c++)+")");
            params.add(ahfsClassCode);                    
            params.add(ahfsClassCode); 
            params.add(ahfsClassCode); 
        }
        if (hasAValue(atcClassCode)){
            clauses.add("(db.atc_1_Cd = ?"+(c++)+
                    " OR db.atc_2_Cd = ?"+(c++)+
                    " OR db.atc_3_Cd = ?"+(c++)+
                    " OR db.atc_4_Cd = ?"+(c++)+
                    " OR db.atc_5_Cd = ?"+(c++)+" )");
            params.add(atcClassCode);                    
            params.add(atcClassCode);
            params.add(atcClassCode);
            params.add(atcClassCode);
            params.add(atcClassCode);
        }
        if (hasAValue(drugManufacturerCode)){
            clauses.add("db.drug_Mfr_Cd = ?"+(c++));
            params.add(drugManufacturerCode);                    
        }
        StringBuffer buff = new StringBuffer();
        buff.append("SELECT rownum ID, A.* FROM (select db.din_pin, db.gen_drug, db.drug_brand_nm,");
        buff.append("db.drug_mfr_nm, db.ltd_use_flg, db.max_price, db.GEN_DSG_FORM, db.GEN_DRUG_STRGTH, db.MAX_DAILY_QTY,db.MAX_PRD_QTY,db.MAX_PRD_QTY_DAYS,db.MAX_ANNUAL_QTY,db.BGTS_CAT_MAX_ANNUAL_QTY, ");
        buff.append("max(nvl(h3.pay_rdp_flg,'No')) pay_rdp_flg,");
        buff.append("max(db.max_days_sply) max_days_sply,");
        //line below determines 'Maximum PharmaCare Covers' - coalesce behaviour confirmed by Tijana Oct 28, 2013 - Ian Scott
        buff.append("max(coalesce(h3.amt_pcare_pays_per_unit,db.amt_pcare_pays_per_unit)) amt_pcare_pays_per_unit,");
        buff.append("max(coalesce(h3.amt_pcare_pays_unit,db.amt_pcare_pays_unit)) amt_pcare_pays_unit");
        buff.append(" FROM pcbl_Ben_Dtl db, ");
        buff.append(" (select h2.din_pin, h2.pay_rdp_flg, h2.amt_pcare_pays_per_unit,");
        buff.append("  h2.amt_pcare_pays_unit ");
        buff.append("  from PCBL_BEN_DTL h2");
        buff.append("  where pay_rdp_flg='Yes') h3");
        buff.append(" WHERE ");
        buff.append(" db.din_pin=h3.din_pin(+) ");
        for (int i=0; i<clauses.size(); i++){
            buff.append(" AND "+clauses.get(i));
        }
        buff.append(" group by db.din_pin, db.gen_drug, db.drug_brand_nm, db.drug_mfr_nm,");
        buff.append(" db.ltd_use_flg, db.max_price, db.GEN_DSG_FORM, db.GEN_DRUG_STRGTH, db.MAX_DAILY_QTY,db.MAX_PRD_QTY,db.MAX_PRD_QTY_DAYS,db.MAX_ANNUAL_QTY,db.BGTS_CAT_MAX_ANNUAL_QTY ");
        buff.append(" ORDER BY GEN_DRUG) A ");
        Query q = em.createNativeQuery(buff.toString(),BenDtl.class);
        for (int i=0; i<params.size(); i++){
            q.setParameter(i+1, params.get(i));
        }           
        List<BenDtl> results = q.getResultList();               
        Set dins = new HashSet();
        for (Iterator<BenDtl> it = results.iterator(); it.hasNext();) {
            BenDtl benDtl = it.next();
            if (dins.contains(benDtl.getDinPin())){
                it.remove();
            }else{
                dins.add(benDtl.getDinPin());
            }
        }        
        return results;
    }
    
    /**
     * Finds a list of drug benefits for a single DIN 
     * @param din String
     * @return List<BenDtl>
     */
    public List<BenDtl> findByDin(String din){
        Query q = em.createQuery("select object(o) from BenDtl as o where o.dinPin = ?1");
        q.setParameter(1, din);
        return q.getResultList();
    }

    /**
     * Finds all drug benefits with the special authority flag
     * @return List<BenDtl>
     */
    public List<BenDtl> findBySA() {
        Query q = em.createNativeQuery("select id, din_pin, gen_drug from pcbl_Ben_Dtl "+
                "where ltd_use_flg = 'Yes'",BenDtl.class);
        List<BenDtl> results = q.getResultList();
        Set dins = new HashSet();
        for (Iterator it = results.iterator(); it.hasNext();) {
            BenDtl drug = (BenDtl)it.next();
            if (dins.contains(drug.getDinPin())){
                it.remove();
            }else{
                dins.add(drug.getDinPin());
            }
        }
        return results;
    }

    /**
     * Determines if a String is empty or not
     * @param String str
     * @return boolean
     */
    private boolean hasAValue(String str) {
        return str!=null&&!"".equals(str);
    }    
}
