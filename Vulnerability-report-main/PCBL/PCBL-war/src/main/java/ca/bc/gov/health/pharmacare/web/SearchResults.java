/*
 * SearchResults.java
 *
 * Created on Dec 4, 2009, 3:20:28 PM
 */
package ca.bc.gov.health.pharmacare.web;


import jakarta.enterprise.context.SessionScoped;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;



/**
 * Backing Bean for the Search Results screen
 *
 * @author greg.perkins
 */
@SessionScoped
@Named("SearchResults")
public class SearchResults implements Serializable {
     private static Log logger = LogFactory.getLog(SearchResults.class);
    @Inject
    private Constants constants;

    /**
     * List of search results to display
     */
    private List results;
    /**
     * Value of Page user is currently on - updated via javascript, a hidden field, a p:ajaxstatus and a p:remoteCommand
     * Highly dependent on field names
     */
    private int page;
        /**
     * Value of 'top' row on a  page the  user is currently on - derived with help from page
     */
     private int firstRowToDisplay;
    /**
     * Default Constructor
     */
    public SearchResults() {}

    /* Getters and Setters */
    
    public List getResults() {
        return results;
    }

    public void setResults(List results) {
        //When this is set remove the previous settings
        this.page = 1;
        this.firstRowToDisplay = 0;
        this.results = results;
    }

    public int getSize() {
        return results == null ? 0 : results.size();
    }

    public boolean getShowPagination() {
        return results != null && results.size() > constants.getMaxResultsPerPage();
    }

    public int getPage() {
        return page;
    }

    public void setPage(int page) {
        this.page = page;
    } 
    public int getFirstRowToDisplay() {
        return firstRowToDisplay;
    }

    public void setFirstRowToDisplay(int firstRowToDisplay) {
        this.firstRowToDisplay = firstRowToDisplay;
    } 
    
     
    /**
     * Retreives the page value, updated by JS of the page the user is currently on
     * Highly dependent on form/field names
     * see page variable(above) for more info
     */
    public void pageChange(){
        try{
            FacesContext context = FacesContext.getCurrentInstance();
            Map<String,String> params = context.getExternalContext().getRequestParameterMap();
            String page = params.get("form1:yyy");
            if(page !=null && !page.isEmpty()){
                int thePage = 0;
                try{
                    thePage = Integer.valueOf(page);
                }catch(Exception e){
                    logger.error("Conversion to Int failed causing pageChange to fail"+e);
                    return;
                }
                setPage(thePage);
                int initialRow = calculatePageStartRow(thePage);
                setFirstRowToDisplay(initialRow);
            }
        }catch(Exception e){
             logger.error("Setting Page and row failed "+e);
        }
    }
    
    /**
     * 
     * @param page - the int for the current page
     * @return the row number of the top row. e.g page 1 top row = 0. row 2 top row = 10. assuming 10 results per page
     */
    private int calculatePageStartRow(int page){
                int offset = (new ca.bc.gov.health.pharmacare.web.Constants()).getMaxResultsPerPage();
                int answer = 0;
                if(page == 0) page = 1;
                answer = (page*offset)-offset;
                return answer;
    }

}

