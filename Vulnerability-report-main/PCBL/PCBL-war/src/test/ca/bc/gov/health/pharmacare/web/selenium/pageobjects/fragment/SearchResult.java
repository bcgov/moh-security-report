/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pharmacare.web.selenium.pageobjects.fragment;

import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.LoadableComponent;
import selenium.util.ActionBot;
import static org.junit.Assert.*;
import selenium.util.Constants;

/**
 *
 * @author adebiyi.kuseju
 */
public class SearchResult extends LoadableComponent<SearchResult> {

    public static final String SEARCH_RESULT_TABLE_ID = "form1:results";
    public static final String XPATH_FOR_SHOW_SUMMARY_BUTTON = "//input[@value='Show Summary']";
    public static final String XPATH_FOR_NEW_SEARCH_BUTTON = "//input[@value='New Search']";
    public static final String ID_FOR_BOTTOM_PAGINATOR_DIV = "form1:results_paginatorbottom";
    public static final String CSS_SELECTOR_FOR_BOTTOM_PAGINATOR_BUTTONS = "a.ui-paginator-page";
    public static final String DIN_LINK_PREFIX = "form1:results:";
    public static final String DIN_LINK_SUFFIX = ":productLink";
    private final WebDriver driver;
    private final ActionBot actionBot;

    public SearchResult(WebDriver driver) {

        this.driver = driver;
        actionBot = new ActionBot(driver);

        PageFactory.initElements(driver, this);

    }

    @Override
    protected void load() {
    }

    @Override
    protected void isLoaded() throws Error {

        try {
            driver.findElement(By.id(SEARCH_RESULT_TABLE_ID));
            assert true;
        } catch (NoSuchElementException e) {
            load();

        }
    }

    public void newSearch() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_NEW_SEARCH_BUTTON)));
    }

    public void assertSearchResultAvailable() {
        try {
            driver.findElement(By.id(SEARCH_RESULT_TABLE_ID));
            assert true;
        } catch (NoSuchElementException nse) {
            fail("Search results expected");
        }
    }
    
    public void assertSummarySearchResult() {
        try {
            driver.findElement(By.id(SEARCH_RESULT_TABLE_ID));
            driver.findElement(By.xpath(XPATH_FOR_NEW_SEARCH_BUTTON));
            assert true;
        } catch (NoSuchElementException nse) {
            fail("Summary Search results expected");
        }
        
         try {
            driver.findElement(By.xpath(XPATH_FOR_SHOW_SUMMARY_BUTTON));
            fail("Summary Search results page should not have show summary button");
        } catch (NoSuchElementException nse) {
            assert true;
        }
    }
    
    public void assertSearchResultGenericNameStartsWith(String prefix) {
        
        WebElement recipientsTable = driver.findElement(By.id(SEARCH_RESULT_TABLE_ID));

        List<WebElement> dataScrollerPages = recipientsTable.findElement(By.id(ID_FOR_BOTTOM_PAGINATOR_DIV)).findElements(By.cssSelector(CSS_SELECTOR_FOR_BOTTOM_PAGINATOR_BUTTONS));
        List<WebElement> elems;
        int total = 0;
        int page = 0;


        for (page = 1; page <= dataScrollerPages.size(); page++) {

            recipientsTable = driver.findElement(By.id(SEARCH_RESULT_TABLE_ID));

            elems = recipientsTable.findElement(By.tagName("tbody")).findElements(By.tagName("tr"));
            total += elems.size();

            actionBot.waitForLoading(DIN_LINK_PREFIX + (total - 1) + DIN_LINK_SUFFIX, Constants.MEDIUM_TIMEOUT);

            for (int i = 0; i < elems.size(); i++) {               
              assertTrue(String.format("Generic Name for row %s on page %s does not start with %s", i + 1, page, prefix), elems.get(i).findElements(By.tagName("td")).get(1).getText().toUpperCase().contains(prefix.toUpperCase()));              
            }

            actionBot.click(recipientsTable.findElement(By.id(ID_FOR_BOTTOM_PAGINATOR_DIV)).findElements(By.cssSelector(CSS_SELECTOR_FOR_BOTTOM_PAGINATOR_BUTTONS)).get(page - 1)); // go to next page
            actionBot.waitForLoading(SEARCH_RESULT_TABLE_ID, Constants.MEDIUM_TIMEOUT);

        }
        
    }

    public void assertResultPagination() {

        WebElement recipientsTable = driver.findElement(By.id(SEARCH_RESULT_TABLE_ID));

        List<WebElement> dataScrollerPages = recipientsTable.findElement(By.id(ID_FOR_BOTTOM_PAGINATOR_DIV)).findElements(By.cssSelector(CSS_SELECTOR_FOR_BOTTOM_PAGINATOR_BUTTONS));
        List<WebElement> elems;
        int total = 0;
        int page = 0;
        String firstSinOnPrevPage = null;
        String lastSinOnPrevPage = null;

        try {
            // First element, which is page one is not a link, but a span element
            // the links returned will actually start form page 2 which is 1 based on index
            for (page = 1; page <= dataScrollerPages.size(); page++) {

                recipientsTable = driver.findElement(By.id(SEARCH_RESULT_TABLE_ID));

                elems = recipientsTable.findElement(By.tagName("tbody")).findElements(By.tagName("tr"));
                total += elems.size();

                actionBot.waitForLoading(DIN_LINK_PREFIX + (total - 1) + DIN_LINK_SUFFIX, Constants.MEDIUM_TIMEOUT);

                if (page == 1) {
                    firstSinOnPrevPage = recipientsTable.findElement(By.id(DIN_LINK_PREFIX + (total - elems.size()) + DIN_LINK_SUFFIX)).getText();
                    lastSinOnPrevPage = recipientsTable.findElement(By.id(DIN_LINK_PREFIX + (total - 1) + DIN_LINK_SUFFIX)).getText();
                } else {

                    assertFalse(firstSinOnPrevPage.equals(recipientsTable.findElement(By.id(DIN_LINK_PREFIX + (total - elems.size()) + DIN_LINK_SUFFIX)).getText()));
                    assertFalse(lastSinOnPrevPage.equals(recipientsTable.findElement(By.id(DIN_LINK_PREFIX + (total - 1) + DIN_LINK_SUFFIX)).getText()));

                    firstSinOnPrevPage = recipientsTable.findElement(By.id(DIN_LINK_PREFIX + (total - elems.size()) + DIN_LINK_SUFFIX)).getText();
                    lastSinOnPrevPage = recipientsTable.findElement(By.id(DIN_LINK_PREFIX + (total - 1) + DIN_LINK_SUFFIX)).getText();
                }


                actionBot.click(recipientsTable.findElement(By.id(ID_FOR_BOTTOM_PAGINATOR_DIV)).findElements(By.cssSelector(CSS_SELECTOR_FOR_BOTTOM_PAGINATOR_BUTTONS)).get(page - 1)); // go to next page using index posistion in list

                actionBot.waitForLoading(SEARCH_RESULT_TABLE_ID, Constants.MEDIUM_TIMEOUT);

            }
        } catch (NoSuchElementException e) {
            fail(String.format("Pagination for search result appears to be broken. Duplicate records found on pages %s and %s", page, page + 1));
        }
    }

    public void assertDINValuesHyperlinked() {

        WebElement recipientsTable = driver.findElement(By.id(SEARCH_RESULT_TABLE_ID));

        List<WebElement> dataScrollerPages = recipientsTable.findElement(By.id(ID_FOR_BOTTOM_PAGINATOR_DIV)).findElements(By.cssSelector(CSS_SELECTOR_FOR_BOTTOM_PAGINATOR_BUTTONS));
        List<WebElement> elems;
        int total = 0;
        int i = 0;
        int page = 0;

        try {

            for (page = 1; page < dataScrollerPages.size(); page++) {
                recipientsTable = driver.findElement(By.id(SEARCH_RESULT_TABLE_ID));

                elems = recipientsTable.findElement(By.tagName("tbody")).findElements(By.tagName("tr"));
                total += elems.size();;
                
                actionBot.waitForLoading(DIN_LINK_PREFIX + (total - 1) + DIN_LINK_SUFFIX, Constants.MEDIUM_TIMEOUT);
                
                for (i = total - elems.size(); i < total; i++) {
                    recipientsTable.findElement(By.id(DIN_LINK_PREFIX + i + DIN_LINK_SUFFIX));
                    assert true;
                }

                actionBot.click(recipientsTable.findElement(By.id(ID_FOR_BOTTOM_PAGINATOR_DIV)).findElements(By.cssSelector(CSS_SELECTOR_FOR_BOTTOM_PAGINATOR_BUTTONS)).get(page - 1)); // go to next page

                actionBot.waitForLoading(SEARCH_RESULT_TABLE_ID, Constants.MEDIUM_TIMEOUT);

            }
        } catch (NoSuchElementException e) {
            dataScrollerPages = recipientsTable.findElement(By.id(ID_FOR_BOTTOM_PAGINATOR_DIV)).findElements(By.cssSelector(CSS_SELECTOR_FOR_BOTTOM_PAGINATOR_BUTTONS));
            fail(String.format("DIN Value '%s' on page %s, Row '%s' of the search result is not a link", dataScrollerPages.get(page).getText(), page + 1, i + 1));
        }
    }

    public void assertAllSearchResultUnique() {

        WebElement recipientsTable = driver.findElement(By.id(SEARCH_RESULT_TABLE_ID));

        List<WebElement> dataScrollerPages = recipientsTable.findElement(By.id(ID_FOR_BOTTOM_PAGINATOR_DIV)).findElements(By.cssSelector(CSS_SELECTOR_FOR_BOTTOM_PAGINATOR_BUTTONS));
        List<WebElement> elems;
        int i = 0;
        int total = 0;
        int page = 0;
        String prevSin = null;

        try {

            for (page = 1; page <= dataScrollerPages.size(); page++) {

                recipientsTable = driver.findElement(By.id(SEARCH_RESULT_TABLE_ID));

                elems = recipientsTable.findElement(By.tagName("tbody")).findElements(By.tagName("tr"));
                total += elems.size();

                actionBot.waitForLoading(DIN_LINK_PREFIX + (total - 1) + DIN_LINK_SUFFIX, Constants.MEDIUM_TIMEOUT);

                for (i = total - elems.size(); i < total; i++) {


                    if (i == 0) {
                        prevSin = recipientsTable.findElement(By.id(DIN_LINK_PREFIX + i + DIN_LINK_SUFFIX)).getText();
                        continue;
                    }

                    assertFalse(prevSin.equals(recipientsTable.findElement(By.id(DIN_LINK_PREFIX + i + DIN_LINK_SUFFIX)).getText()));

                    prevSin = recipientsTable.findElement(By.id(DIN_LINK_PREFIX + i + DIN_LINK_SUFFIX)).getText();
                }

                actionBot.click(recipientsTable.findElement(By.id(ID_FOR_BOTTOM_PAGINATOR_DIV)).findElements(By.cssSelector(CSS_SELECTOR_FOR_BOTTOM_PAGINATOR_BUTTONS)).get(page - 1)); // go to next page

                actionBot.waitForLoading(SEARCH_RESULT_TABLE_ID, Constants.MEDIUM_TIMEOUT);

            }
        } catch (NoSuchElementException e) {
            dataScrollerPages = recipientsTable.findElement(By.id(ID_FOR_BOTTOM_PAGINATOR_DIV)).findElements(By.cssSelector(CSS_SELECTOR_FOR_BOTTOM_PAGINATOR_BUTTONS));
            fail(String.format("DIN Value '%s' on page %s, Row '%s' of the search result is repeated. All SIN values must be unique", dataScrollerPages.get(page).getText(), page + 1, i + 1));
        }
    }

    public void assertSpecialAuthorityHyperlinkedIfYes() {

        WebElement recipientsTable = driver.findElement(By.id(SEARCH_RESULT_TABLE_ID));

        List<WebElement> dataScrollerPages = recipientsTable.findElement(By.id(ID_FOR_BOTTOM_PAGINATOR_DIV)).findElements(By.cssSelector(CSS_SELECTOR_FOR_BOTTOM_PAGINATOR_BUTTONS));
        List<WebElement> elems;
        int total = 0;
        int page = 0;


        for (page = 1; page <= dataScrollerPages.size(); page++) {

            recipientsTable = driver.findElement(By.id(SEARCH_RESULT_TABLE_ID));

            elems = recipientsTable.findElement(By.tagName("tbody")).findElements(By.tagName("tr"));
            total += elems.size();

            actionBot.waitForLoading(DIN_LINK_PREFIX + (total - 1) + DIN_LINK_SUFFIX, Constants.MEDIUM_TIMEOUT);

            for (int i = 0; i < elems.size(); i++) {

                try {
                    assertEquals("Yes", elems.get(i).findElement(By.cssSelector("td:last-child")).findElement(By.tagName("a")).getText());

                } catch (NoSuchElementException e) {
                    continue;
                }

            }

            actionBot.click(recipientsTable.findElement(By.id(ID_FOR_BOTTOM_PAGINATOR_DIV)).findElements(By.cssSelector(CSS_SELECTOR_FOR_BOTTOM_PAGINATOR_BUTTONS)).get(page - 1)); // go to next page
            actionBot.waitForLoading(SEARCH_RESULT_TABLE_ID, Constants.MEDIUM_TIMEOUT);

        }

    }

    public void viewDetailsForFirstResultItem() {
        WebElement recipientsTable = driver.findElement(By.id(SEARCH_RESULT_TABLE_ID));
        actionBot.click(recipientsTable.findElement(By.id(DIN_LINK_PREFIX + 0 + DIN_LINK_SUFFIX)));

    }

    public void assertSortableColumns() {

//        sortableColumnHelper("DIN/PIN/NPN");
//        sortableColumnHelper("Generic Name");
//        sortableColumnHelper("Brand Name, Strength & Dosage Form");
//        sortableColumnHelper("Manufacturer");
//        sortableColumnHelper("Load DateMaximum PharmaCare Covers");
    }

    private void sortableColumnHelper(String headerText) {

        try {
           // WebElement recipientsTable = driver.findElement(By.id(SEARCH_RESULT_TABLE_ID));
            driver.findElement(By.xpath(String.format("//span[text() = '%s']", headerText)));
            assert true;
        } catch (NoSuchElementException e) {
            fail(String.format("'%s' column should be sortable", headerText));
        }
    }
}
