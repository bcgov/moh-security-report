/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pharmacare.web.selenium.pageobjects;

import ca.bc.gov.health.pharmacare.web.selenium.pageobjects.fragment.LeftMenu;
import ca.bc.gov.health.pharmacare.web.selenium.pageobjects.fragment.SearchResult;
import java.util.Map;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.LoadableComponent;
import selenium.pageobject.LoginPage;
import selenium.util.ActionBot;
import selenium.util.Constants;
import static org.junit.Assert.*;
import org.openqa.selenium.support.ui.Select;

/**
 *
 * @author adebiyi.kuseju
 */
public class SearchPage extends LoadableComponent<SearchPage> {

    public static final String ALL_INPUT_FIELD_CSS = "form#form1 table tr input[type='text']";
    public static final String ALL_SELECT_FIELD_CSS = "form#form1 table tr select";
    public static final String SUMMARY_CHECKBOX_CSS = "form#form1 table tr input[type='checkbox']";
    
    public static final int INDEX_FOR_GENERIC_NAME_FIELD = 0;
    public static final int INDEX_FOR_DIN_NUMBER_FIELD = 1;
    
    public static final int INDEX_FOR_PHARMACARE_PLAN_SELECT = 0;
    public static final int INDEX_FOR_AHFS_THERAPEUTIC_CLASSIFICATION_SELECT = 1;
    public static final int INDEX_FOR_ATC_THERAPEUTIC_CLASSIFICATION_SELECT = 2;
    public static final int INDEX_FOR_MANUFACTURER_SELECT = 3;
    
    public static final String SEARCH_BUTTON_ID = "form1:searchButton";
    public static final String RESET_BUTTON_ID = "form1:resetButton";
    
    public static final String GENERIC_NAME = "generic";
    public static final String DIN = "din";
    public static final String PHARMACARE_PLAN = "pharmacare_plan";
    public static final String AHFS_THERAPEUTIC_CLASSIFICATION = "ahfs_therapeutic_classification";
    public static final String ATC_THERAPEUTIC_CLASSIFICATION = "atc_therapeutic_classification";
    public static final String MANUFACTURER = "manufacturer";
    public static final String SUMMARY_CHECKBOX = "summary";
    
    private final WebDriver driver;
    private String[] handles;
    private final ActionBot actionBot;
    private final String browser;
    private final LoadableComponent<?> parent;
    private final LeftMenu leftMenu;
    private final SearchResult searchResult;

    public SearchPage(LoadableComponent<?> parent, LeftMenu leftMenu, WebDriver driver, String browser) {

        this.driver = driver;
        this.browser = browser;
        this.parent = parent;
        actionBot = new ActionBot(driver);

        this.leftMenu = leftMenu;
        searchResult = new SearchResult(this.driver);

        PageFactory.initElements(driver, this);

    }

    @Override
    protected void load() {
        parent.get();

        handles = driver.getWindowHandles().toArray(new String[0]);
        driver.switchTo().window(handles[handles.length - 1]);

        leftMenu.setHandle(handles[handles.length - 1]);

        leftMenu.navigateToSearchForm();

        actionBot.waitForLoading(RESET_BUTTON_ID, Constants.MEDIUM_TIMEOUT);



    }

    @Override
    protected void isLoaded() throws Error {

        try {
            driver.findElement(By.id(SEARCH_BUTTON_ID));
            assert true;
        } catch (NoSuchElementException e) {
            load();

        }
    }
    
    public void fillFields(Map<String, String> parameters) {
        String temp;
        if (parameters != null) {

            temp = parameters.get(GENERIC_NAME);
            if (temp != null) {
                actionBot.type(driver.findElements(By.cssSelector(ALL_INPUT_FIELD_CSS)).get(INDEX_FOR_GENERIC_NAME_FIELD), temp);
            }

            temp = parameters.get(DIN);
            if (temp != null) {
                actionBot.type(driver.findElements(By.cssSelector(ALL_INPUT_FIELD_CSS)).get(INDEX_FOR_DIN_NUMBER_FIELD), temp);
            }

            temp = parameters.get(PHARMACARE_PLAN);
            if (temp != null) {
                actionBot.selectByVisibleText(new Select(driver.findElements(By.cssSelector(ALL_SELECT_FIELD_CSS)).get(INDEX_FOR_PHARMACARE_PLAN_SELECT)), temp);
            }

            temp = parameters.get(AHFS_THERAPEUTIC_CLASSIFICATION);
            if (temp != null) {
                actionBot.selectByVisibleText(new Select(driver.findElements(By.cssSelector(ALL_SELECT_FIELD_CSS)).get(INDEX_FOR_AHFS_THERAPEUTIC_CLASSIFICATION_SELECT)), temp);
            }

            temp = parameters.get(ATC_THERAPEUTIC_CLASSIFICATION);
            if (temp != null) {
                actionBot.selectByVisibleText(new Select(driver.findElements(By.cssSelector(ALL_SELECT_FIELD_CSS)).get(INDEX_FOR_ATC_THERAPEUTIC_CLASSIFICATION_SELECT)), temp);
            }

            temp = parameters.get(MANUFACTURER);
            if (temp != null) {
                actionBot.selectByVisibleText(new Select(driver.findElements(By.cssSelector(ALL_SELECT_FIELD_CSS)).get(INDEX_FOR_MANUFACTURER_SELECT)), temp);
            }

            temp = parameters.get(SUMMARY_CHECKBOX);
            if (temp != null) {
                actionBot.check(By.cssSelector(SUMMARY_CHECKBOX_CSS));
            }
        }
    }

    public void search(Map<String, String> parameters) {

        if (parameters != null) {
            fillFields(parameters);
            actionBot.submit(By.id(SEARCH_BUTTON_ID));

        }

    }

    public void viewDetailsForFirstResultItem() {
        searchResult.viewDetailsForFirstResultItem();
    }

    public void resetSearchFormFromResultPage() {
        searchResult.newSearch();
    }

    public void clearFields() {
        actionBot.click(By.id(RESET_BUTTON_ID));
    }

    public void navigateToHomePageFromWarningPopup() {
        actionBot.click(By.id("modalHomePageButton"));
    }

    public void backToSearchPageFromWarningPopup() {
        actionBot.click(By.id("modalReturnToSearchButton"));
    }

    public void assertNoSearchParameters() {

        try {
            driver.findElement(By.id("msg_shade"));
            driver.findElement(By.id("msg_container"));
            WebElement elem = driver.findElement(By.id("msg_container")).findElement(By.xpath("//span[text() = 'Please enter one or more selections before clicking Search.']"));

            assertEquals("Please enter one or more selections before clicking Search.", elem.getText());
        } catch (NoSuchElementException nse) {
            assert false : "Error message: 'Please enter one or more selections before clicking Search.' is expected";
        }
    }
    
    public void assertWarningPopupRemoved() {
       assertFalse(driver.findElement(By.id("msg")).isDisplayed());               
    }

    public void assertNormalResultSearchResponse() {
        searchResult.assertSearchResultAvailable();
        searchResult.assertSortableColumns();
        searchResult.assertDINValuesHyperlinked();
    }
    
    public void assertSearchResultGenericNameStartsWith(String prefix) {
        searchResult.assertSearchResultGenericNameStartsWith(prefix);
    }
    
    public void assertSpecialAuthorityHyperlinkedIfYes() {
        searchResult.assertSpecialAuthorityHyperlinkedIfYes();
    }
    
    public void assertSummarySearchResultSearchResponse() {
        searchResult.assertSummarySearchResult();
    }

    public void assertSearchResultAvailable() {
        searchResult.assertSearchResultAvailable();
    }

    public void assertNormalResultSearchPagination() {
        searchResult.assertResultPagination();
    }

    public void assertNormalResultSearchUnique() {
        searchResult.assertAllSearchResultUnique();
    }

    public void assertAllFieldsCleared() {


        assertEquals("", driver.findElements(By.cssSelector(ALL_INPUT_FIELD_CSS)).get(INDEX_FOR_GENERIC_NAME_FIELD).getText());
        assertEquals("", driver.findElements(By.cssSelector(ALL_INPUT_FIELD_CSS)).get(INDEX_FOR_DIN_NUMBER_FIELD).getText());

        Select temp = new Select(driver.findElements(By.cssSelector(ALL_SELECT_FIELD_CSS)).get(INDEX_FOR_PHARMACARE_PLAN_SELECT));
        assertEquals(temp.getOptions().get(0).getText(), temp.getFirstSelectedOption().getText());

        temp = new Select(driver.findElements(By.cssSelector(ALL_SELECT_FIELD_CSS)).get(INDEX_FOR_AHFS_THERAPEUTIC_CLASSIFICATION_SELECT));
        assertEquals(temp.getOptions().get(0).getText(), temp.getFirstSelectedOption().getText());

        temp = new Select(driver.findElements(By.cssSelector(ALL_SELECT_FIELD_CSS)).get(INDEX_FOR_ATC_THERAPEUTIC_CLASSIFICATION_SELECT));
        assertEquals(temp.getOptions().get(0).getText(), temp.getFirstSelectedOption().getText());

        temp = new Select(driver.findElements(By.cssSelector(ALL_SELECT_FIELD_CSS)).get(INDEX_FOR_MANUFACTURER_SELECT));
        assertEquals(temp.getOptions().get(0).getText(), temp.getFirstSelectedOption().getText());

        assertFalse(driver.findElement(By.cssSelector(SUMMARY_CHECKBOX_CSS)).isSelected());

    }
}
