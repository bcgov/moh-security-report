/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pharmacare.web.selenium.functional;


import ca.bc.gov.health.pharmacare.web.selenium.pageobjects.BenefitsLookupHomePage;
import ca.bc.gov.health.pharmacare.web.selenium.pageobjects.SearchPage;
import ca.bc.gov.health.pharmacare.web.selenium.pageobjects.fragment.LeftMenu;
import ca.bc.gov.health.pharmacare.web.selenium.pageobjects.fragment.SearchResult;
import java.util.HashMap;
import java.util.Map;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;
import selenium.util.ActionBot;
import selenium.util.Constants;
import selenium.util.WebDriverFactory;

/**
 *
 * @author adebiyi.kuseju
 */
public class SearchPageTest {

    private static DesiredCapabilities desiredCapabilities;
    private static WebDriver driver;
    private static SearchPage searchPage;
    private static ActionBot actionBot;

    public SearchPageTest() {
    }

    @BeforeClass
    public static void setUpClass() throws Exception {
        desiredCapabilities = DesiredCapabilities.internetExplorer();
        desiredCapabilities.setCapability(CapabilityType.ACCEPT_SSL_CERTS, true);

        driver = WebDriverFactory.getInstance(WebDriverFactory.DRIVER_TYPE.SERVER, desiredCapabilities);
        
        actionBot = new ActionBot(driver);

        LeftMenu leftMenu = new LeftMenu(driver, desiredCapabilities.getBrowserName());
        BenefitsLookupHomePage benefitsLookupHomePage = new BenefitsLookupHomePage(leftMenu, driver, desiredCapabilities.getBrowserName());       
        searchPage = new SearchPage(benefitsLookupHomePage, leftMenu, driver, desiredCapabilities.getBrowserName()).get();


    }

    @AfterClass
    public static void tearDownClass() {
        driver.quit();
    }

    @Before
    public void setUp() {
        searchPage.clearFields();
        actionBot.waitForLoadingUsingCssSelection(SearchPage.SUMMARY_CHECKBOX_CSS, Constants.MEDIUM_TIMEOUT);
        
    }

    @Test
    public void testSearchWithGenericName() {

        Map<String, String> parameters = new HashMap<>();
        parameters.put(SearchPage.GENERIC_NAME, "AMITRIPTYLINE HCL");

        searchPage.search(parameters);
        actionBot.waitForLoading(SearchResult.SEARCH_RESULT_TABLE_ID, Constants.MEDIUM_TIMEOUT);
        
        searchPage.assertNormalResultSearchResponse();
        searchPage.resetSearchFormFromResultPage();
        
        actionBot.waitForLoadingUsingCssSelection(SearchPage.SUMMARY_CHECKBOX_CSS, Constants.MEDIUM_TIMEOUT);
        
    }
    
    
    @Test
    public void testSearchWithPartialGenericName() {

        final String partialGenericname = "AMITR";
        
        Map<String, String> parameters = new HashMap<>();
        parameters.put(SearchPage.GENERIC_NAME, partialGenericname);

        searchPage.search(parameters);
        actionBot.waitForLoading(SearchResult.SEARCH_RESULT_TABLE_ID, Constants.MEDIUM_TIMEOUT);
        
        searchPage.assertSearchResultGenericNameStartsWith(partialGenericname);
        searchPage.resetSearchFormFromResultPage();
        
        actionBot.waitForLoadingUsingCssSelection(SearchPage.SUMMARY_CHECKBOX_CSS, Constants.MEDIUM_TIMEOUT);
        
    }
    
    @Test
    public void testSearchWithDINNumber() {

        Map<String, String> parameters = new HashMap<>();
        parameters.put(SearchPage.DIN, "00016349");

        searchPage.search(parameters);
        actionBot.waitForLoading(SearchResult.SEARCH_RESULT_TABLE_ID, Constants.MEDIUM_TIMEOUT);
        
        searchPage.assertNormalResultSearchResponse();
        searchPage.resetSearchFormFromResultPage();
        
        actionBot.waitForLoadingUsingCssSelection(SearchPage.SUMMARY_CHECKBOX_CSS, Constants.MEDIUM_TIMEOUT);
        
    }
    
    @Test
    public void testSearchWithAHFSClassification() {

        Map<String, String> parameters = new HashMap<>();
        parameters.put(SearchPage.AHFS_THERAPEUTIC_CLASSIFICATION, "Adrenals");
        searchPage.search(parameters);
        actionBot.waitForLoading(SearchResult.SEARCH_RESULT_TABLE_ID, Constants.MEDIUM_TIMEOUT);
        
        searchPage.assertNormalResultSearchResponse();
        searchPage.resetSearchFormFromResultPage();
        
        actionBot.waitForLoadingUsingCssSelection(SearchPage.SUMMARY_CHECKBOX_CSS, Constants.MEDIUM_TIMEOUT);
        
    }
    
    @Test
    public void testSearchWithATCClassification() {

        Map<String, String> parameters = new HashMap<>();
        parameters.put(SearchPage.ATC_THERAPEUTIC_CLASSIFICATION, "Abatacept");

        searchPage.search(parameters);
        actionBot.waitForLoading(SearchResult.SEARCH_RESULT_TABLE_ID, Constants.MEDIUM_TIMEOUT);
        
        searchPage.assertNormalResultSearchResponse();
        searchPage.resetSearchFormFromResultPage();
        
        actionBot.waitForLoadingUsingCssSelection(SearchPage.SUMMARY_CHECKBOX_CSS, Constants.MEDIUM_TIMEOUT);
        
    }
    
    
    @Test
    public void testSearchWithSummary() {

        Map<String, String> parameters = new HashMap<>();
        parameters.put(SearchPage.MANUFACTURER, "1560678 ONTARI");
        parameters.put(SearchPage.SUMMARY_CHECKBOX, "true");

        searchPage.search(parameters);
        actionBot.waitForLoading(SearchResult.SEARCH_RESULT_TABLE_ID, Constants.MEDIUM_TIMEOUT);
        
        searchPage.assertSummarySearchResultSearchResponse();
        searchPage.resetSearchFormFromResultPage();
        
        actionBot.waitForLoadingUsingCssSelection(SearchPage.SUMMARY_CHECKBOX_CSS, Constants.MEDIUM_TIMEOUT);
        
    }
    
    
    @Test
    public void testSearchWithManufacturer() {

        Map<String, String> parameters = new HashMap<>();
        parameters.put(SearchPage.MANUFACTURER, "1560678 ONTARI");

        searchPage.search(parameters);
        actionBot.waitForLoading(SearchResult.SEARCH_RESULT_TABLE_ID, Constants.MEDIUM_TIMEOUT);
        
        searchPage.assertNormalResultSearchResponse();
        searchPage.resetSearchFormFromResultPage();
        
        actionBot.waitForLoadingUsingCssSelection(SearchPage.SUMMARY_CHECKBOX_CSS, Constants.MEDIUM_TIMEOUT);
        
    }
    

    @Test
    public void testSearchWithoutParameters() {

        Map<String, String> parameters = new HashMap<>();

        searchPage.search(parameters);
        searchPage.assertNoSearchParameters();
    }

    
    @Test
    public void testClearForFields() {

        Map<String, String> parameters = new HashMap<>();
        parameters.put(SearchPage.GENERIC_NAME, "Duncan");    
        parameters.put(SearchPage.DIN, "00016349");
        parameters.put(SearchPage.PHARMACARE_PLAN, "Non-Benefit");
        parameters.put(SearchPage.AHFS_THERAPEUTIC_CLASSIFICATION, "Adrenals");
        parameters.put(SearchPage.ATC_THERAPEUTIC_CLASSIFICATION, "Acebutolol");
        parameters.put(SearchPage.MANUFACTURER, "1560678 ONTARI");
        
        searchPage.fillFields(parameters);

        searchPage.clearFields();
        actionBot.waitForLoadingUsingCssSelection(SearchPage.SUMMARY_CHECKBOX_CSS, Constants.MEDIUM_TIMEOUT);
        
        searchPage.assertAllFieldsCleared();
    }
    
    @Test
    public void testRemovalForWarningPopup() {

        Map<String, String> parameters = new HashMap<>();
        
        searchPage.search(parameters);       
        actionBot.waitForLoadingUsingCssSelection(SearchPage.SUMMARY_CHECKBOX_CSS, Constants.MEDIUM_TIMEOUT);
        searchPage.backToSearchPageFromWarningPopup();
        
        searchPage.assertWarningPopupRemoved();
    }
    
    
    @Test
    public void testResultPagination() {

        Map<String, String> parameters = new HashMap<>();
        parameters.put(SearchPage.GENERIC_NAME, "AMITRIPTYLINE HCL");

        searchPage.search(parameters);
        actionBot.waitForLoading(SearchResult.SEARCH_RESULT_TABLE_ID, Constants.MEDIUM_TIMEOUT);
        
        searchPage.assertNormalResultSearchPagination();
        searchPage.resetSearchFormFromResultPage();
        
        actionBot.waitForLoadingUsingCssSelection(SearchPage.SUMMARY_CHECKBOX_CSS, Constants.MEDIUM_TIMEOUT);
    }
    
    @Test
    public void testUniqueSearchResult() {

        Map<String, String> parameters = new HashMap<>();
        parameters.put(SearchPage.GENERIC_NAME, "AMITRIPTYLINE HCL");

        searchPage.search(parameters);
        actionBot.waitForLoading(SearchResult.SEARCH_RESULT_TABLE_ID, Constants.MEDIUM_TIMEOUT);
        
        searchPage.assertNormalResultSearchUnique();
        searchPage.resetSearchFormFromResultPage();
        
         actionBot.waitForLoadingUsingCssSelection(SearchPage.SUMMARY_CHECKBOX_CSS, Constants.MEDIUM_TIMEOUT);
    }
    
    @Test
    public void testSpecialAuthorityHyperlink() {

        Map<String, String> parameters = new HashMap<>();
        parameters.put(SearchPage.AHFS_THERAPEUTIC_CLASSIFICATION, "Adrenals");
        searchPage.search(parameters);
        actionBot.waitForLoading(SearchResult.SEARCH_RESULT_TABLE_ID, Constants.MEDIUM_TIMEOUT);
        
        searchPage.assertSpecialAuthorityHyperlinkedIfYes();
        searchPage.resetSearchFormFromResultPage();
        
        actionBot.waitForLoadingUsingCssSelection(SearchPage.SUMMARY_CHECKBOX_CSS, Constants.MEDIUM_TIMEOUT);
        
    }
}