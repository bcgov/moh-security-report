/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.pharmacare.web.selenium.pageobjects;


import ca.bc.gov.health.pharmacare.web.selenium.pageobjects.fragment.LeftMenu;
import ca.bc.gov.health.pharmacare.web.selenium.pageobjects.fragment.SearchResult;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.LoadableComponent;
import selenium.util.ActionBot;
import static org.junit.Assert.*;
import selenium.util.Constants;

/**
 *
 * @author adebiyi.kuseju
 */
public class DetailsPage extends LoadableComponent<DetailsPage> {
    
    public static final String XPATH_FOR_NEW_SEARCH_BUTTON = "//input[@value='New Search' and @type='submit']";
    public static final String XPATH_FOR_BACT_TO_SEARCH_RESULT_LINK = "//a[text() ='Back to Search Results']";
    
    public static final String ID_FOR_FIRST_ITEM_ON_SEARCH_RESULT = SearchResult.DIN_LINK_PREFIX + 0 + SearchResult.DIN_LINK_SUFFIX;
    public static final String ID_FOR_DETAILS_TABLE = "form1:results";
        

    private final WebDriver driver;
    private final ActionBot actionBot;
    private final String browser;
    private final LoadableComponent<?> parent;
    
    
    private LeftMenu leftMenu;

    public DetailsPage(LoadableComponent<?> parent, LeftMenu leftMenu, WebDriver driver, String browser) {
       
        this.driver = driver;
        this.browser = browser;
        this.parent = parent;
        this.leftMenu = leftMenu;
        actionBot = new ActionBot(driver);

        PageFactory.initElements(driver, this);

    }

    @Override
    protected void load() {
        parent.get();
        
        Map<String, String> parameters = new HashMap<>();
        parameters.put(SearchPage.AHFS_THERAPEUTIC_CLASSIFICATION, "Adrenals");

        ((SearchPage) parent).search(parameters);
        actionBot.waitForLoading(SearchResult.SEARCH_RESULT_TABLE_ID, Constants.MEDIUM_TIMEOUT);
        actionBot.click(driver.findElement(By.id(SearchResult.SEARCH_RESULT_TABLE_ID)).findElement(By.id(ID_FOR_FIRST_ITEM_ON_SEARCH_RESULT)));
    }

    @Override
    protected void isLoaded() throws Error {

        try {
            driver.findElement(By.id(ID_FOR_DETAILS_TABLE));
            assert true;
        } catch (NoSuchElementException e) {
            load();

        }
    }
    
    public void navigateBackToSearchResultUsingLink() {
        actionBot.click(driver.findElement(By.xpath(XPATH_FOR_BACT_TO_SEARCH_RESULT_LINK))); 
    }
    
    public void navigateToSearchFormUsingButton() {
        actionBot.submit(driver.findElement(By.xpath(XPATH_FOR_NEW_SEARCH_BUTTON))); 
    }  

    
    public void assertPharmacarePlanHyperlinked() {

        WebElement recipientsTable = driver.findElement(By.id(ID_FOR_DETAILS_TABLE));
        List<WebElement> elems;
        int i = 0;

        try{
                elems = recipientsTable.findElement(By.tagName("tbody")).findElements(By.tagName("tr"));
                
                for (; i < elems.size(); i++) {
                    elems.get(i).findElements(By.tagName("td")).get(1).findElement(By.tagName("a"));
                   
                    assert true;
                }
            
        } catch (NoSuchElementException e) {

            fail(String.format("Pharmacare Plan on row '%s' is not a link", i + 1));
        }
    }
    
    
    public void assertMaxSupplyFillPerDayHyperlinked() {

        WebElement recipientsTable = driver.findElement(By.id(ID_FOR_DETAILS_TABLE));
        List<WebElement> elems;
        int i = 0;

        try{
                elems = recipientsTable.findElement(By.tagName("tbody")).findElements(By.tagName("tr"));
                
                for (; i < elems.size(); i++) {
                    elems.get(i).findElements(By.tagName("td")).get(5).findElement(By.tagName("a"));
                   
                    assert true;
                }
            
        } catch (NoSuchElementException e) {

            fail(String.format("'Max Day Supply Per Fill' on row '%s' is not a link", i + 1));
        }
    }
    
    public void assertNavigationBackToResultPage() {
        ((SearchPage) parent).assertSearchResultAvailable();
    }
    
    
    public void assertAllSearchFieldsCleared() {       
        ((SearchPage) parent).assertAllFieldsCleared();
    }

}
