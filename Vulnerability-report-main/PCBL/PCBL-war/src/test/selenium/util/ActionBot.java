/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package selenium.util;

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

/**
 *
 * @author adebiyi.kuseju
 */
public class ActionBot {

    private final WebDriver driver;

    public ActionBot(WebDriver driver) {
        this.driver = driver;
    }

    public void click(By locator) {
        click(driver.findElement(locator));
    }

    public void clickOpenNewTab(By locator) {

        Actions act = new Actions(driver);
        WebElement onElement = driver.findElement(locator);
        act.contextClick(onElement).sendKeys(Keys.ARROW_DOWN).sendKeys(Keys.ARROW_DOWN).sendKeys(Keys.RETURN).build().perform();
    }

    public void click(WebElement element) {
        element.click();
    }
    
    public void clickOpenNewTab(WebElement element) {
       
        Actions act = new Actions(driver);
        act.contextClick(element).sendKeys(Keys.ARROW_DOWN).sendKeys(Keys.ARROW_DOWN).sendKeys(Keys.RETURN).build().perform();
    }

    public void click(By locator, int offsetX, int offsetY) {
        Actions builder = new Actions(driver);
        WebElement tagElement = driver.findElement(locator);
        builder.moveToElement(tagElement, offsetX, offsetY).click().build().perform();
    }

    public void click(WebElement element, int offsetX, int offsetY) {
        Actions builder = new Actions(driver);
        builder.moveToElement(element, offsetX, offsetY).click().build().perform();
    }

    public void submit(By locator) {
        submit(driver.findElement(locator));
    }

    public void submit(WebElement element) {
        element.submit();
    }

    /**
     * Type something into an input field. WebDriver doesn't normally clear
     * these before typing, so this method does that first. It also sends a
     * return key to move the focus out of the element.
     */
    public void type(By locator, String text) {
        type(driver.findElement(locator), text);
    }

    public void type(WebElement element, String text) {
        element.clear();
        element.sendKeys(text);
    }

    public void toggle(By locator, Boolean selected) {
        toggle(driver.findElement(locator), selected);
    }

    public void toggle(WebElement element, Boolean selected) {

        if (selected) {
            element.click();
        }
    }
    
    public void check(By locator) {
        check(driver.findElement(locator));
    }

    public void check(WebElement element) {

        if (!element.isSelected()) {
            element.click();
        }
    }
    
    public void uncheck(By locator) {
        uncheck(driver.findElement(locator));
    }

    public void uncheck(WebElement element) {

        if (element.isSelected()) {
            element.click();
        }
    }

    public void hover(By locator) {
        Actions builder = new Actions(driver);
        WebElement tagElement = driver.findElement(locator);
        builder.moveToElement(tagElement).build().perform();
    }

    public void hover(By locator, int offsetX, int offsetY) {
        Actions builder = new Actions(driver);
        WebElement tagElement = driver.findElement(locator);
        builder.moveToElement(tagElement, offsetX, offsetY).build().perform();
    }

    public void hover(WebElement element) {
        Actions builder = new Actions(driver);
        builder.moveToElement(element).build().perform();
    }

    public void hover(WebElement element, int offsetX, int offsetY) {
        Actions builder = new Actions(driver);
        builder.moveToElement(element, offsetX, offsetY).build().perform();
    }
    
    public void selectByValue(Select select, String value) {
        select.selectByValue(value);
    }
    
    
    public void selectByVisibleText(Select select, String visibleTex) {
        select.selectByVisibleText(visibleTex);
    }
    
    public void selectByPosition(Select select, int index) {
        select.selectByIndex(index);
    }

    public WebElement waitForLoading(final String idForconditionElement, final int timeout) {
        WebElement myDynamicElement = (new WebDriverWait(driver, timeout)).until(new ExpectedCondition<WebElement>() {
            @Override
            public WebElement apply(WebDriver d) {
                return d.findElement(By.id(idForconditionElement));
            }
        });

        return myDynamicElement;
    }
    
    public WebElement waitForLoadingUsingCssSelection(final String cssSelectorForconditionElement, final int timeout) {
        WebElement myDynamicElement = (new WebDriverWait(driver, timeout)).until(new ExpectedCondition<WebElement>() {
            @Override
            public WebElement apply(WebDriver d) {
                return d.findElement(By.cssSelector(cssSelectorForconditionElement));
            }
        });

        return myDynamicElement;
    }
    
    public WebElement waitForLoadingUsingName(final String nameForConditionElement, final int timeout) {
        WebElement myDynamicElement = (new WebDriverWait(driver, timeout)).until(new ExpectedCondition<WebElement>() {
            @Override
            public WebElement apply(WebDriver d) {
                return d.findElement(By.name(nameForConditionElement));
            }
        });

        return myDynamicElement;
    }

    public void waitForLoadingUsingXpath(final String xpath, final int timeout) {
        WebElement myDynamicElement = (new WebDriverWait(driver, timeout)).until(new ExpectedCondition<WebElement>() {
            @Override
            public WebElement apply(WebDriver d) {
                return d.findElement(By.xpath(xpath));
            }
        });


    }
}
