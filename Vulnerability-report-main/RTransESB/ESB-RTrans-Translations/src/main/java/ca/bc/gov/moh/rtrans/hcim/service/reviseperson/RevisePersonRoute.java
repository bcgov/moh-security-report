package ca.bc.gov.moh.rtrans.hcim.service.reviseperson;

import ca.bc.gov.moh.rtrans.entity.transaction.RevisePerson;
import ca.bc.gov.moh.rtrans.entity.transaction.RevisePersonResponse;
import ca.bc.gov.moh.rtrans.ha.service.LookupSslParamsForOrg;
import ca.bc.gov.moh.rtrans.service.audit.RTransAuditProcessorConfig;
import ca.bc.gov.moh.rtrans.service.v2.RTransRouteBuilder;
import ca.bc.gov.moh.rtrans.service.v2.ValidGetDemoResponsePredicate;
import ca.bc.gov.moh.rtrans.service.v2.custommodel.message.R07Response;
import ca.bc.gov.moh.rtrans.service.v2.custommodel.message.R07ResponseInvalid;
import java.util.Map;
import org.apache.camel.ExchangePattern;
import org.apache.camel.converter.jaxb.JaxbDataFormat;
import org.apache.camel.spi.DataFormat;
import org.hl7.v3.HCIMINPersonRevised;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

/**
 *
 * @author David Sharpe (david.a.sharpe@cgi.com)
 */
@Component
public class RevisePersonRoute extends RTransRouteBuilder {

    private static final String HCIM_RP_ENDPOINT_URI = "hcimRevisePersonEndPointURI";
    
    private String hcimRevisePersonEndPointURI;
    
    private final ValidGetDemoResponsePredicate validGetDemoResponsePredicate = new ValidGetDemoResponsePredicate();
    
    @Value("#{certificateMapping}")
    private Map<String, String> certificateMapping;

    @Override
    public void configure() throws Exception {
        super.configure();

        hcimRevisePersonEndPointURI = appProperties.getProperty(HCIM_RP_ENDPOINT_URI);
        
        DataFormat jaxb = new JaxbDataFormat("org.hl7.v3");
        
        String esbHCIMRevisePersonEndpoint = "spring-ws:" + hcimRevisePersonEndPointURI + "?soapAction=urn:hl7-org:v3/PRPA_IN101204"
            + "&messageFilter=#healthAuthorityMessageFilter";

        from("direct:revisePerson")
                .routeId("direct:revisePerson")
                .process(new RTransAuditProcessorConfig(START, INFO))
                .to(ExchangePattern.InOnly, jmsUri)
                .choice()
                    .when(validGetDemoResponsePredicate)
                        .convertBodyTo(RevisePerson.class)
                        .process(new LookupSslParamsForOrg(certificateMapping)).id(NODE_LOOKUP_SSL_PARAMS_FOR_ORG)
                        .convertBodyTo(HCIMINPersonRevised.class)
                        .marshal(jaxb)
                        .process(new RTransAuditProcessorConfig(HCIM_IN, INFO))
                        .to(ExchangePattern.InOnly, jmsUri)
                        .process(FILEDROP_HCIM_IN)
                        .toD(esbHCIMRevisePersonEndpoint + "&sslContextParameters=#${exchangeProperty.sslId}").id(NODE_HCIM_REVISE_PERSON_ENDPOINT)
                        .process(new RTransAuditProcessorConfig(HCIM_OUT, INFO))
                        .to(ExchangePattern.InOnly, jmsUri)
                        .process(FILEDROP_HCIM_OUT)
                        .unmarshal(jaxb)
                        .convertBodyTo(RevisePersonResponse.class)
                        .process(new RTransAuditProcessorConfig(PROCESS_RESPONSE, INFO))
                        .to(ExchangePattern.InOnly, jmsUri)
                        .convertBodyTo(R07Response.class)
                    .otherwise()
                        .convertBodyTo(R07ResponseInvalid.class);
    }
    
    // Node IDs allow tests to replace these nodes with test doubles.
    public static final String NODE_LOOKUP_SSL_PARAMS_FOR_ORG = "LookupSslParamsForOrg_RevisePersonRoute_Node";
    public static final String NODE_HCIM_REVISE_PERSON_ENDPOINT = "HCIMRevisePersonEndpoint_Node";
}
