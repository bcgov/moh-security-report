package ca.bc.gov.moh.rtrans.hcim.service.findcandidates;

import ca.bc.gov.moh.rtrans.entity.transaction.FindCandidatesResponse;
import ca.bc.gov.moh.rtrans.service.v2.custommodel.message.R09Response;
import ca.bc.gov.moh.rtrans.ha.service.LookupSslParamsForOrg;
import ca.bc.gov.moh.rtrans.service.audit.RTransAuditProcessorConfig;
import ca.bc.gov.moh.rtrans.service.v2.RTransRouteBuilder;
import java.util.Map;
import org.apache.camel.ExchangePattern;
import org.apache.camel.converter.jaxb.JaxbDataFormat;
import org.apache.camel.spi.DataFormat;
import org.hl7.v3.HCIMINFindCandidates;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

/**
 * Route for handling FindCandidate v2 requests.
 * @author Kuan Fan
 */
@Component
public class FindCandidatesRoute extends RTransRouteBuilder {

    private static final String HCIM_FC_TIMEOUT = "hcimFindCandidatesTimeout";
    private static final String HCIM_FC_ENDPOINT_URI = "hcimFindCandidatesEndPointURI";
    
    private int hcimFindCandidatesTimeout;
    private String hcimFindCandidatesEndPointURI;
    
    @Value("#{certificateMapping}")
    private Map<String, String> certificateMapping;
    
    @Override
    public void configure() throws Exception {
        super.configure();
        
        hcimFindCandidatesTimeout = Integer.parseInt(appProperties.getProperty(HCIM_FC_TIMEOUT));
        hcimFindCandidatesEndPointURI = appProperties.getProperty(HCIM_FC_ENDPOINT_URI);
        
        DataFormat jaxb = new JaxbDataFormat("org.hl7.v3");
        
        String esbHCIMFindCandidatesEndpoint = "spring-ws:" + hcimFindCandidatesEndPointURI + "?soapAction=urn:hl7-org:v3/QUPA_IN101103"
                + "&messageFilter=#healthAuthorityMessageFilter"
                + "&timeout=" + hcimFindCandidatesTimeout;
        
        from("direct:findCandidates")
                .routeId("direct:findCandidates")
                .process(new RTransAuditProcessorConfig(START, INFO))
                .to(ExchangePattern.InOnly, jmsUri)
                .process(new LookupSslParamsForOrg(certificateMapping)).id(NODE_LOOKUP_SSL_PARAMS_FOR_ORG)
                .convertBodyTo(HCIMINFindCandidates.class)
                .marshal(jaxb)
                .process(FILEDROP_ESB_IN)
                .process(new RTransAuditProcessorConfig(ESB_IN, INFO))
                .to(ExchangePattern.InOnly, jmsUri)
                .toD(esbHCIMFindCandidatesEndpoint + "&sslContextParameters=#${exchangeProperty.sslId}").id(NODE_HCIM_FIND_CANDIDATES_ENDPOINT)
                .process(new RTransAuditProcessorConfig(ESB_OUT, INFO))
                .to(ExchangePattern.InOnly, jmsUri)
                .process(FILEDROP_ESB_OUT)
                .unmarshal(jaxb)
                .convertBodyTo(FindCandidatesResponse.class)
                .process(new RTransAuditProcessorConfig(PROCESS_RESPONSE, INFO))
                .to(ExchangePattern.InOnly, jmsUri)
                .convertBodyTo(R09Response.class);
    }
    
    // Node IDs allow tests to replace these nodes with test doubles.
    public static final String NODE_LOOKUP_SSL_PARAMS_FOR_ORG = "LookupSslParamsForOrg_FindCandidatesRoute_Node";
    public static final String NODE_HCIM_FIND_CANDIDATES_ENDPOINT = "HCIMFindCandidatesEndpoint_Node";

}
