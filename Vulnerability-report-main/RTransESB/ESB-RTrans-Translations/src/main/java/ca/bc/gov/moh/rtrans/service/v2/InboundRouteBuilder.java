package ca.bc.gov.moh.rtrans.service.v2;

import ca.bc.gov.moh.rtrans.entity.transaction.FindCandidates;
import ca.bc.gov.moh.rtrans.entity.transaction.GetDemographics;
import ca.bc.gov.moh.rtrans.service.audit.RTransAuditProcessorConfig;
import static ca.bc.gov.moh.rtrans.service.v2.RTransRouteBuilder.INFO;
import static ca.bc.gov.moh.rtrans.service.v2.RTransRouteBuilder.RECEIVE;
import ca.bc.gov.moh.rtrans.service.v2.custommodel.message.R03Response;
import ca.bc.gov.moh.rtrans.service.v2.exception.UnhandledHl7v2MessageException;
import io.netty.buffer.ByteBuf;
import org.apache.camel.ExchangePattern;
import org.springframework.stereotype.Component;

@Component
public class InboundRouteBuilder extends RTransRouteBuilder {

    private static final String MINA_LISTENER_URI = "minaListenerURI";
    public static final String JMS_CORRELATION_ID = "JMSCorrelationID";
    
    String minaListenerURI;
    
    private final FindCandidatesPredicate findCandidatesPredicate = new FindCandidatesPredicate();
    private final GetDemographicsPredicate getDemographicsPredicate = new GetDemographicsPredicate();
    private final UpdateAddressPredicate updateAddressPredicate = new UpdateAddressPredicate();
    
    
    @Override
    public void configure() throws Exception {
        super.configure();
        
        minaListenerURI = appProperties.getProperty(MINA_LISTENER_URI);
        
        from("netty4:tcp://" + minaListenerURI + "?sync=true&allowDefaultCodec=false")                              
                .routeId("netty4:tcp")
                .to("bean:hnSecureStripLeadingBytes")
                .to("bean:hl7v2Parser")
                .choice()
                    .when(findCandidatesPredicate)
                        .process(new RTransAuditProcessorConfig(RECEIVE, INFO))
                        .to(ExchangePattern.InOnly, jmsUri)
                        .process(FILEDROP_RECEIVE)
                        .convertBodyTo(FindCandidates.class)
                        .to("direct:findCandidates")
                    .when(getDemographicsPredicate)
                        .process(new RTransAuditProcessorConfig(RECEIVE, INFO))
                        .to(ExchangePattern.InOnly, jmsUri)
                        .process(FILEDROP_RECEIVE)
                        .convertBodyTo(GetDemographics.class)
                        .to("direct:getDemographics")
                        .convertBodyTo(R03Response.class)
                    .when(updateAddressPredicate)
                        .process(new RTransAuditProcessorConfig(RECEIVE, INFO))
                        .to(ExchangePattern.InOnly, jmsUri)
                        .process(FILEDROP_RECEIVE)
                        .convertBodyTo(GetDemographics.class)                       
                        .to("direct:getDemographics")
                        .to("direct:revisePerson")
                    .otherwise()
                        .throwException(new UnhandledHl7v2MessageException("HL7 formatting error or type not handled"))
                .end()
                .to("bean:hnSecureAddLeadingBytes")
                .process(new RTransAuditProcessorConfig(COMPLETE, INFO))
                .to(ExchangePattern.InOnly, jmsUri)
                .process(FILEDROP_RESPOND)
                .convertBodyTo(ByteBuf.class);
                
        from("direct:errorResponse")
                .routeId("direct:errorResponse")
                .to("bean:exceptionHandler")
                .to("bean:hnSecureAddLeadingBytes")
                .process(new RTransAuditProcessorConfig(ERROR, ERROR))
                .to(ExchangePattern.InOnly, jmsUri)
                .process(FILEDROP_ERROR)
                .convertBodyTo(ByteBuf.class);
        
        from(jmsUri)
                .routeId("jms:rtransQueue")
                .transacted()
                .process(AUDIT_PROCESSOR);
    }

}
