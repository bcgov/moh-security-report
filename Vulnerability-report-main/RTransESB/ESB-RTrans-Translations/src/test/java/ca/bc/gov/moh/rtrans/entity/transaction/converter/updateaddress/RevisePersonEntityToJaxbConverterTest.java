/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.rtrans.entity.transaction.converter.updateaddress;

import ca.bc.gov.moh.esb.util.SimpleSerializer;
import ca.bc.gov.moh.rtrans.entity.AddressAttribute;
import ca.bc.gov.moh.rtrans.entity.AddressTypes;
import ca.bc.gov.moh.rtrans.entity.Author;
import ca.bc.gov.moh.rtrans.entity.DateAttribute;
import ca.bc.gov.moh.rtrans.entity.GenderAttribute;
import ca.bc.gov.moh.rtrans.entity.GenderValues;
import ca.bc.gov.moh.rtrans.entity.IdentifierAttribute;
import ca.bc.gov.moh.rtrans.entity.IdentifierTypes;
import ca.bc.gov.moh.rtrans.entity.Person;
import ca.bc.gov.moh.rtrans.entity.PersonNameAttribute;
import ca.bc.gov.moh.rtrans.entity.User;
import ca.bc.gov.moh.rtrans.entity.transaction.RevisePerson;
import ca.bc.gov.moh.rtrans.entity.transaction.converter.DataTypeConverter;
import ca.bc.gov.moh.rtrans.entity.transaction.converter.parent.EntityToJaxbTypeConverter;
import ca.bc.gov.moh.rtrans.entity.transaction.converter.reviseperson.RevisePersonEntityToJaxbTypeConverter;
import java.util.Date;
import javax.xml.bind.JAXBElement;
import org.hl7.v3.AdxpCity;
import org.hl7.v3.AdxpCountry;
import org.hl7.v3.AdxpPostalCode;
import org.hl7.v3.AdxpState;
import org.hl7.v3.AdxpStreetAddressLine;
import org.hl7.v3.EnFamily;
import org.hl7.v3.EnGiven;
import org.hl7.v3.HCIMINPersonRevised;
import static org.junit.Assert.assertEquals;
import org.junit.Before;
import org.junit.Test;

/**
 *
 * @author trevor.schiavone
 */
public class RevisePersonEntityToJaxbConverterTest extends EntityToJaxbTypeConverter {
    
    RevisePerson rpEntity;
    HCIMINPersonRevised revisePersonV3;
    Author author;
    User user;
    
    @Before
    public void setup() throws InstantiationException, IllegalAccessException {
        author = new Author();
        user = new User();
        rpEntity = new RevisePerson();
        
        Date creationTime = DataTypeConverter.convertStringToDate("19990601112620");
        Date eventTime = DataTypeConverter.convertStringToDate("20170601112620");
        
        rpEntity.setMessageId("19980915000031");
        rpEntity.setEventTime(eventTime);
        rpEntity.setCreationTime(creationTime);
        rpEntity.setAuthor(author);
        rpEntity.getAuthor().setUser(user);
        rpEntity.getAuthor().getUser().setUserId("Train96");
        rpEntity.getSender().setSystemName("ADT1");
        rpEntity.getSender().setOrganization("BC01000109");
        rpEntity.getReceiver().get(0).setSystemName("RAIUPDT-PR-ADDR");
        rpEntity.getReceiver().get(0).setOrganization("BC0003000");

        
        Person person = rpEntity.getPerson();
        IdentifierAttribute id = new IdentifierAttribute();
        Date birthDate = DataTypeConverter.convertStringToDate("19721016");
        id.setValue("9879727821");
        id.setSource("MOH_CRS");
        id.setType(IdentifierTypes.BCPHN);
        person.getIdentifier().add(id);
        person.getName().add(new PersonNameAttribute());
        person.getName().get(0).setFirstName("JILLIAN");
        person.getName().get(0).setMiddleName("DAWN");
        person.getName().get(0).setLastName("COOK-ADAMS");
        person.setBirthDate(new DateAttribute(birthDate));
        person.setGender(new GenderAttribute(GenderValues.Female));
        
        person.getAddress().add(new AddressAttribute());
        person.getAddress().get(0).getStreetAddressLines().add("1 DALE DR");
        person.getAddress().get(0).getStreetAddressLines().add("2 DALE DR");
        person.getAddress().get(0).getStreetAddressLines().add("3 DALE DR");
        person.getAddress().get(0).setCity("MAPLE RIDGE");
        person.getAddress().get(0).setProvince("BC");
        person.getAddress().get(0).setPostalCode("V2X8V6");
        person.getAddress().get(0).setCountry("CA");
        person.getAddress().get(0).setType(AddressTypes.Mail);
        
        revisePersonV3 = RevisePersonEntityToJaxbTypeConverter.convert(rpEntity);
    }
    
    @Test
    public void testRPEntityToV3() {

        //Root level (everything outside of Contol Act Process)
        assertEquals("19980915000031", revisePersonV3.getId().getExtension());
        assertEquals("RAIUPDT-PR-ADDR", revisePersonV3.getReceiver().getDevice().getId().getExtension());
        assertEquals("BC0003000", revisePersonV3.getReceiver().getDevice().getAsAgent().getValue()
                .getRepresentedOrganization().getValue().getId().getExtension());
        assertEquals("ADT1", revisePersonV3.getSender().getDevice().getId().getExtension());
        assertEquals("BC01000109", revisePersonV3.getSender().getDevice().getAsAgent().getValue()
                .getRepresentedOrganization().getValue().getId().getExtension());
        assertEquals("19990601112620", revisePersonV3.getCreationTime().getValue());
        
        //Control act process
        assertEquals("20170601112620", revisePersonV3.getControlActProcess().getSubject().getRegistrationEvent().getSubject1()
                                                    .getIdentifiedPerson().getEffectiveDate().getValue());
        assertEquals("Train96", revisePersonV3.getControlActProcess().getDataEnterer().getAssignedPerson()
                .getId().getExtension());
        
        //Control act process -> subject
        assertEquals("9879727821", revisePersonV3.getControlActProcess().getSubject().getRegistrationEvent().getSubject1()
                                                    .getIdentifiedPerson().getId().getExtension());
        assertEquals("PST", revisePersonV3.getControlActProcess().getSubject().getRegistrationEvent().getSubject1()
                                                    .getIdentifiedPerson().getAddr().get(0).getUse().get(0));
        
        //The values to address are just added into a list of JAXBElements
        //see EntityToJaxbTypeConverter.java to see the order each field is added
        //If the order in which fields are added in EntityToJaxbTypeConverter changes
        //then the index of .getContent().get(index) of these nexts tests will have change to reflect the new order      
        JAXBElement add1 = (JAXBElement) revisePersonV3.getControlActProcess().getSubject().getRegistrationEvent().getSubject1()
                .getIdentifiedPerson().getAddr().get(0).getContent().get(0);
        JAXBElement add2 = (JAXBElement) revisePersonV3.getControlActProcess().getSubject().getRegistrationEvent().getSubject1()
                .getIdentifiedPerson().getAddr().get(0).getContent().get(1);
        JAXBElement add3 = (JAXBElement) revisePersonV3.getControlActProcess().getSubject().getRegistrationEvent().getSubject1()
                .getIdentifiedPerson().getAddr().get(0).getContent().get(2);
        JAXBElement city = (JAXBElement) revisePersonV3.getControlActProcess().getSubject().getRegistrationEvent().getSubject1()
                .getIdentifiedPerson().getAddr().get(0).getContent().get(3);
        JAXBElement prov = (JAXBElement) revisePersonV3.getControlActProcess().getSubject().getRegistrationEvent().getSubject1()
                .getIdentifiedPerson().getAddr().get(0).getContent().get(4);
        JAXBElement country = (JAXBElement) revisePersonV3.getControlActProcess().getSubject().getRegistrationEvent().getSubject1()
                .getIdentifiedPerson().getAddr().get(0).getContent().get(5);
        JAXBElement postal = (JAXBElement) revisePersonV3.getControlActProcess().getSubject().getRegistrationEvent().getSubject1()
                .getIdentifiedPerson().getAddr().get(0).getContent().get(6);
         
        assertEquals("1 DALE DR",  ((AdxpStreetAddressLine) add1.getValue()).getText());
        assertEquals("2 DALE DR", ((AdxpStreetAddressLine) add2.getValue()).getText());
        assertEquals("3 DALE DR", ((AdxpStreetAddressLine) add3.getValue()).getText());
        assertEquals("MAPLE RIDGE", ((AdxpCity) city.getValue()).getText());
        assertEquals("BC", ((AdxpState) prov.getValue()).getText());
        assertEquals("CA", ((AdxpCountry) country.getValue()).getText());
        assertEquals("V2X8V6", ((AdxpPostalCode) postal.getValue()).getText());
        
        
        assertEquals("9879727821", revisePersonV3.getControlActProcess().getSubject().getRegistrationEvent().getSubject1()
                                                    .getIdentifiedPerson().getIdentifiedPerson().getId().getExtension());
        
        //As with the address the name attributes are currently added to a list of JAXBElements
        //This test assumes the order Family, First, Middle, Preffered 
        JAXBElement lastName = (JAXBElement) revisePersonV3.getControlActProcess().getSubject().getRegistrationEvent().getSubject1()
                                                    .getIdentifiedPerson().getIdentifiedPerson().getName().get(0).getContent().get(0);
        JAXBElement firstName = (JAXBElement) revisePersonV3.getControlActProcess().getSubject().getRegistrationEvent().getSubject1()
                                                    .getIdentifiedPerson().getIdentifiedPerson().getName().get(0).getContent().get(1);
        JAXBElement midName = (JAXBElement) revisePersonV3.getControlActProcess().getSubject().getRegistrationEvent().getSubject1()
                                                    .getIdentifiedPerson().getIdentifiedPerson().getName().get(0).getContent().get(2);
        assertEquals("COOK-ADAMS", ((EnFamily) lastName.getValue()).getText());
        assertEquals("JILLIAN", ((EnGiven) firstName.getValue()).getText());
        assertEquals("DAWN",((EnGiven) midName.getValue()).getText());
        
        assertEquals("F", revisePersonV3.getControlActProcess().getSubject().getRegistrationEvent().getSubject1()
                                                    .getIdentifiedPerson().getIdentifiedPerson().getAdministrativeGenderCode().getCode());
        assertEquals("19721016", revisePersonV3.getControlActProcess().getSubject().getRegistrationEvent().getSubject1()
                                                    .getIdentifiedPerson().getIdentifiedPerson().getBirthTime().getValue());
    
    }
    
    @Test
    public void testRPEntitytoV3MisssingDataBehaviour() throws InstantiationException, IllegalAccessException {
        author = new Author();
        user = new User();
        rpEntity = new RevisePerson();
        
        Date creationTime = DataTypeConverter.convertStringToDate("19990601112620");
        Date eventTime = DataTypeConverter.convertStringToDate("20170601112620");
        
        rpEntity.setMessageId("19980915000031");
        rpEntity.setEventTime(eventTime);
        rpEntity.setCreationTime(creationTime);
        rpEntity.setAuthor(author);
        rpEntity.getAuthor().setUser(user);
        rpEntity.getAuthor().getUser().setUserId("Train96");
        rpEntity.getSender().setSystemName("ADT1");
        rpEntity.getSender().setOrganization("BC01000109");
        rpEntity.getReceiver().get(0).setSystemName("RAIUPDT-PR-ADDR");
        rpEntity.getReceiver().get(0).setOrganization("BC0003000");

        
        Person person = rpEntity.getPerson();
        IdentifierAttribute id = new IdentifierAttribute();
        Date birthDate = DataTypeConverter.convertStringToDate("19721016");
        id.setValue("9879727821");
        id.setSource("MOH_CRS");
        id.setType(IdentifierTypes.BCPHN);
        person.getIdentifier().add(id);
        person.setBirthDate(new DateAttribute(birthDate));
        person.setGender(new GenderAttribute(GenderValues.Female));
        person.getName().add(new PersonNameAttribute());
        person.getName().get(0).setFirstName("JILLIAN");
        person.getName().get(0).setMiddleName("DAWN");
        person.getName().get(0).setLastName("COOK-ADAMS");
        
        revisePersonV3 = RevisePersonEntityToJaxbTypeConverter.convert(rpEntity);
        
        assertEquals(true, person.getAddress().isEmpty());
        
    }

}
