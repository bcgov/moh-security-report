/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.rtrans.entity.transaction.converter.updateaddress;

import ca.bc.gov.moh.rtrans.entity.AddressAttribute;
import ca.bc.gov.moh.rtrans.entity.AddressTypes;
import ca.bc.gov.moh.rtrans.entity.GenderValues;
import ca.bc.gov.moh.rtrans.entity.Person;
import ca.bc.gov.moh.rtrans.entity.transaction.GetDemographicsResponse;
import ca.bc.gov.moh.rtrans.entity.transaction.RevisePerson;
import ca.bc.gov.moh.rtrans.entity.transaction.converter.DataTypeConverter;
import ca.bc.gov.moh.rtrans.entity.transaction.converter.getdemographics.GetDemoUtils;
import ca.bc.gov.moh.rtrans.entity.transaction.converter.getdemographics.GetDemographicsJaxbToEntityTypeConverter;
import ca.bc.gov.moh.rtrans.entity.transaction.converter.reviseperson.GetDemographicsResponseEntityToRevisePersonEntityConverter;
import ca.bc.gov.moh.rtrans.service.v2.V2ServiceConstants;
import java.text.ParseException;
import java.util.Date;
import javax.xml.bind.JAXBException;
import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.impl.DefaultExchange;
import org.apache.camel.Message;
import org.hl7.v3.HCIMINGetDemographicsResponse;
import static org.junit.Assert.*;
import org.junit.Test;

/**
 *
 * @author trevor.schiavone
 */
public class GDResponseEntityToRPResponseEntityConverterTest  {
    
    @Test
    public void testGDEntityToRPEntity() throws ParseException, JAXBException, Exception {
            
        //Set up a GetDemo Entity
        HCIMINGetDemographicsResponse getDemoResponseV3 =  GetDemoUtils.createValidV3GetDemoResponse(); 
        GetDemographicsResponse getDemoResponseEntity = GetDemographicsJaxbToEntityTypeConverter.convert(getDemoResponseV3);
        
        //Setup an exchange for the ZIA segments   
        String ZIA = "ZIA||||||||||||||||20308 DALE DR^^^^^^^^^^^^^^^^^^^MAPLE RIDGE^BC^V2X8V6^CAN^M|||||||N";
        CamelContext ctx = new DefaultCamelContext();
        Exchange exchange = new DefaultExchange(ctx);
        Message message = exchange.getIn();
        
        message.setHeader(V2ServiceConstants.ziaSegmentZAD, "20308 DALE DR^^^^^^^^^^^^^^^^^^^MAPLE RIDGE^BC^V2X8V6^CAN^M");      
        message.setHeader(V2ServiceConstants.strMessageIDProperty, "19980915000031");
        message.setHeader(V2ServiceConstants.messageCreationTime, "19990601112620");  
        message.setHeader(V2ServiceConstants.eventDateTime, "20170601112620");
        message.setHeader(V2ServiceConstants.messageSecurity, "Train96");
        message.setHeader(V2ServiceConstants.senderApplication, "ADT1");
        message.setHeader(V2ServiceConstants.senderFacility, "BC01000109");
        message.setHeader(V2ServiceConstants.receiverApplication, "RAIUPDT-PR-ADDR");
        message.setHeader(V2ServiceConstants.receiverFacility, "BC0003000");
        // for testing PHN inject on R07 for merged persons
        message.setHeader(V2ServiceConstants.pidSegmentPHN, "9876543210");
             
        RevisePerson rpEntity = GetDemographicsResponseEntityToRevisePersonEntityConverter.convertGDResponse(getDemoResponseEntity, exchange);
        
        assertEquals(rpEntity.getMessageId(), "19980915000031");
        Date creationTime = DataTypeConverter.convertStringToDate("19990601112620");
        Date eventTime = DataTypeConverter.convertStringToDate("20170601112620");
        assertEquals(rpEntity.getEventTime(), eventTime);
        assertEquals(rpEntity.getCreationTime(), creationTime);
        assertEquals(rpEntity.getAuthor().getUser().getUserId(), "Train96");
        assertEquals(rpEntity.getSender().getSystemName(), "ADT1");
        assertEquals(rpEntity.getSender().getOrganization(), "BC01000109");
        assertEquals(rpEntity.getReceiver().get(0).getSystemName(), "RAIUPDT-PR-ADDR");
        assertEquals(rpEntity.getReceiver().get(0).getOrganization(), "BC0003000");
        
        Person person = rpEntity.getPerson();
        assertEquals("9876543210", person.getPHN());
        assertEquals("MOH_CRS", person.getIdentifier().get(0).getSource());
        assertEquals("JEAN-RENE-BAPTISTE", person.getName().get(0).getFirstName());
        assertEquals("DAWN-SHAWN-BROWNE", person.getName().get(0).getMiddleName());
        assertEquals("ANGELICA-MONTANA", person.getName().get(0).getTitle());
        assertEquals("PNEUMONOULTRAMICROSCOPICSILICOVOLCANOCONIOSIS", person.getName().get(0).getLastName());
        Date birthDate = DataTypeConverter.convertStringToDate("19721016");
        assertEquals(birthDate, person.getBirthDate().getValue());
        assertEquals(GenderValues.Female, person.getGender().getValue());
   
        
        
        
        AddressAttribute address = person.getAddress().get(0);
        assertEquals(address.getStreetAddressLines().get(0), "20308 DALE DR");
        assertEquals(address.getCity(), "MAPLE RIDGE");
        assertEquals(address.getProvince(), "BC");
        assertEquals(address.getPostalCode(), "V2X8V6");
        assertEquals(address.getCountry(), "CA");
        assertEquals(address.getType(), AddressTypes.Mail);

}

    
    
    @Test
    public void testGDEntityToRPEntityMissingValueBehaviour() throws ParseException, JAXBException, Exception {
            
        //Set up a GetDemo Entity
        HCIMINGetDemographicsResponse getDemoResponseV3 =  GetDemoUtils.createValidV3GetDemoResponse(); 
        GetDemographicsResponse getDemoResponseEntity = GetDemographicsJaxbToEntityTypeConverter.convert(getDemoResponseV3);
        
        //Setup an exchange for the ZIA segments   
//        String ZIA = "ZIA||||||||||||||||20308 DALE DR^^^^^^^^^^^^^^^^^^^MAPLE RIDGE^BC^V2X8V6^CAN^M|||||||N";
        CamelContext ctx = new DefaultCamelContext();
        Exchange exchange = new DefaultExchange(ctx);
        Message message = exchange.getIn();
        
//        message.setHeader(V2ServiceConstants.ziaSegmentZAD, "20308 DALE DR^^^^^^^^^^^^^^^^^^^MAPLE RIDGE^BC^V2X8V6^CAN^M");      
        message.setHeader(V2ServiceConstants.strMessageIDProperty, "19980915000031");
        message.setHeader(V2ServiceConstants.messageCreationTime, "19990601112620");  
        message.setHeader(V2ServiceConstants.eventDateTime, "20170601112620");
        message.setHeader(V2ServiceConstants.messageSecurity, "Train96");
        message.setHeader(V2ServiceConstants.senderApplication, "ADT1");
        message.setHeader(V2ServiceConstants.senderFacility, "BC01000109");
        message.setHeader(V2ServiceConstants.receiverApplication, "RAIUPDT-PR-ADDR");
        message.setHeader(V2ServiceConstants.receiverFacility, "BC0003000");
             
        RevisePerson rpEntity = GetDemographicsResponseEntityToRevisePersonEntityConverter.convertGDResponse(getDemoResponseEntity, exchange);        
        Person person = rpEntity.getPerson(); 
        assertTrue(person.getAddress().isEmpty());

}
    
}
