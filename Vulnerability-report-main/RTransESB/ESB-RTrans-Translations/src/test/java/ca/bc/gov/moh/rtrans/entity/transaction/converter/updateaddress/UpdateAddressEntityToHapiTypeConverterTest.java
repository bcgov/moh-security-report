/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.rtrans.entity.transaction.converter.updateaddress;

import ca.bc.gov.moh.rtrans.entity.transaction.GetDemographicsResponse;
import ca.bc.gov.moh.rtrans.entity.transaction.RevisePersonResponse;
import ca.bc.gov.moh.rtrans.entity.transaction.converter.getdemographics.GetDemoUtils;
import ca.bc.gov.moh.rtrans.entity.transaction.converter.getdemographics.GetDemographicsJaxbToEntityTypeConverter;
import ca.bc.gov.moh.rtrans.entity.transaction.converter.reviseperson.RevisePersonJaxbToEntityTypeConverter;
import ca.bc.gov.moh.rtrans.service.v2.V2ServiceConstants;
import ca.bc.gov.moh.rtrans.service.v2.custommodel.message.R07Response;
import ca.bc.gov.moh.rtrans.service.v2.custommodel.message.R07ResponseInvalid;
import ca.bc.gov.moh.rtrans.service.v2.custommodel.message.ZIA;
import ca.uhn.hl7v2.HL7Exception;
import ca.uhn.hl7v2.model.v24.segment.ERR;
import ca.uhn.hl7v2.model.v24.segment.MSA;
import ca.uhn.hl7v2.model.v24.segment.MSH;
import java.io.IOException;
import javax.xml.bind.JAXBException;
import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.impl.DefaultCamelContext;
import org.apache.camel.impl.DefaultExchange;
import org.hl7.v3.HCIMINGetDemographicsResponse;
import org.hl7.v3.HCIMINPersonRevisedResult;
import static org.junit.Assert.assertEquals;
import org.junit.Before;
import org.junit.Test;

/**
 *
 * @author trevor.schiavone
 */
public class UpdateAddressEntityToHapiTypeConverterTest extends UpdateAddressEntityToHapiTypeConverter {
    
    HCIMINPersonRevisedResult v3ResponseRP;
    HCIMINGetDemographicsResponse v3ResponseGD;
    RevisePersonResponse revisePersonResponse;
    //when it doesn't make it through the getDemo filter a getDemo entity is used
    //to create the response
    GetDemographicsResponse getDemoResponse; 
    CamelContext ctx;
    Exchange exchange;
    
    @Before
    public void setup() {
        ctx = new DefaultCamelContext();
        exchange = new DefaultExchange(ctx);
        
        exchange.getIn().setHeader(V2ServiceConstants.ziaSegmentZAD, "20308 DALE DR^^^^^^^^^^^^^^^^^^^MAPLE RIDGE^BC^V2X8V6^CAN^M");      
        exchange.getIn().setHeader(V2ServiceConstants.strMessageIDProperty, "19980915000031");
        exchange.getIn().setHeader(V2ServiceConstants.messageCreationTime, "19990601112620");  
        exchange.getIn().setHeader(V2ServiceConstants.messageSecurity, "Train96");
        exchange.getIn().setHeader(V2ServiceConstants.messageProcessId, "D");
        exchange.getIn().setHeader(V2ServiceConstants.senderApplication, "ADT1");
        exchange.getIn().setHeader(V2ServiceConstants.senderFacility, "BC01000109");
        exchange.getIn().setHeader(V2ServiceConstants.receiverApplication, "RAIUPDT-PR-ADDR");
        exchange.getIn().setHeader(V2ServiceConstants.receiverFacility, "BC0003000");
        exchange.getIn().setHeader(V2ServiceConstants.VERSION_ID, "unitTestUAMsh12");
    }
    
    @Test
    public void testEntityToR07ValidPHN() throws HL7Exception, IOException, JAXBException {
        
    v3ResponseRP = UpdateAddressUtils.createSuccessfulV3RevisePersonResponse();
    revisePersonResponse = RevisePersonJaxbToEntityTypeConverter.convert(v3ResponseRP);
        
    R07Response r07Response = convert(revisePersonResponse, exchange);
    
    MSH msh = r07Response.getMSH();
    MSA msa = r07Response.getMSA();
    ERR err = r07Response.getERR();
    ZIA zia = r07Response.getZIA();
       
    assertEquals("RAIUPDT-PR-ADDR", msh.getMsh3_SendingApplication().encode());
    assertEquals("BC0003000", msh.getMsh4_SendingFacility().encode());
    assertEquals("ADT1", msh.getMsh5_ReceivingApplication().encode());
    assertEquals("BC01000109", msh.getMsh6_ReceivingFacility().encode());
    assertEquals("20170817140210", msh.getMsh7_DateTimeOfMessage().encode());
    assertEquals("Train96", msh.getMsh8_Security().encode());
    assertEquals("R07", msh.getMsh9_MessageType().encode());
    assertEquals("20060206100749", msh.getMsh10_MessageControlID().encode());
    assertEquals("D", msh.getMsh11_ProcessingID().encode());
    assertEquals("unitTestUAMsh12", msh.getMsh12_VersionID().encode());
    
    assertEquals("AA", msa.getMsa1_AcknowledgementCode().encode());
    assertEquals("19980915000031", msa.getMsa2_MessageControlID().encode());
    assertEquals("HJMB001ISUCCESSFULLY COMPLETED", msa.getMsa3_TextMessage().encode());

    assertEquals("HJMB001I", err.getErrorCodeAndLocation(0)
            .getEld4_CodeIdentifyingError()
            .getCe1_Identifier()
            .encode());
    assertEquals("SUCCESSFULLY COMPLETED", err.getErrorCodeAndLocation(0)
            .getEld4_CodeIdentifyingError()
            .getCe2_Text()
            .encode());
    
    assertEquals("20308 DALE DR", zia.getZIA16_ExtendedAddress().getZAD1_AddressLine1().encode());
    assertEquals("MAPLE RIDGE", zia.getZIA16_ExtendedAddress().getZAD20_City().encode());
    assertEquals("BC", zia.getZIA16_ExtendedAddress().getZAD21_Province().encode());
    assertEquals("V2X8V6", zia.getZIA16_ExtendedAddress().getZAD22_PostalCode().encode());
    assertEquals("CAN", zia.getZIA16_ExtendedAddress().getZAD23_Country().encode());
    assertEquals("M", zia.getZIA16_ExtendedAddress().getZAD24_AddressType().encode());
    assertEquals("U", zia.getZIA16_ExtendedAddress().getZAD28_ValidAddressIndicator().encode());
    assertEquals("20170817", zia.getZIA16_ExtendedAddress().getZAD29_ValidationDate().encode());
    assertEquals("N", zia.getZIA16_ExtendedAddress().getZAD35_AddressValidationBestGuessIndicator().encode());
        
    }
    
    @Test
    public void testEntityToR07NoGetDemoResults() throws HL7Exception, IOException, JAXBException {
        
    v3ResponseGD = GetDemoUtils.createValidV3NoResultsGetDemoResponse();
    getDemoResponse = GetDemographicsJaxbToEntityTypeConverter.convert(v3ResponseGD);
        
    R07ResponseInvalid r07Response = convert(getDemoResponse, exchange);
    
    MSH msh = r07Response.getMSH();
    MSA msa = r07Response.getMSA();
    ERR err = r07Response.getERR();
    ZIA zia = r07Response.getZIA();
       
    assertEquals("RAIUPDT-PR-ADDR", msh.getMsh3_SendingApplication().encode());
    assertEquals("BC0003000", msh.getMsh4_SendingFacility().encode());
    assertEquals("ADT1", msh.getMsh5_ReceivingApplication().encode());
    assertEquals("BC01000109", msh.getMsh6_ReceivingFacility().encode());
    assertEquals("20170817181525", msh.getMsh7_DateTimeOfMessage().encode());
    assertEquals("R07", msh.getMsh9_MessageType().encode());
    assertEquals("5f4dc5f6-e802-4117-bbf7-6a2972adc9c4", msh.getMsh10_MessageControlID().encode());
    assertEquals("unitTestUAMsh12", msh.getMsh12_VersionID().encode());
    
    assertEquals("AE", msa.getMsa1_AcknowledgementCode().encode());
    assertEquals("19980915000031", msa.getMsa2_MessageControlID().encode());
    assertEquals("HNHR512ECLIENT DOES NOT EXIST ON REGISTRY", msa.getMsa3_TextMessage().encode());

    assertEquals("HNHR512E", err.getErrorCodeAndLocation(0)
            .getEld4_CodeIdentifyingError()
            .getCe1_Identifier()
            .encode());
    assertEquals("CLIENT DOES NOT EXIST ON REGISTRY", err.getErrorCodeAndLocation(0)
            .getEld4_CodeIdentifyingError()
            .getCe2_Text()
            .encode());
    
    assertEquals("20308 DALE DR", zia.getZIA16_ExtendedAddress().getZAD1_AddressLine1().encode());
    assertEquals("MAPLE RIDGE", zia.getZIA16_ExtendedAddress().getZAD20_City().encode());
    assertEquals("BC", zia.getZIA16_ExtendedAddress().getZAD21_Province().encode());
    assertEquals("V2X8V6", zia.getZIA16_ExtendedAddress().getZAD22_PostalCode().encode());
    assertEquals("CAN", zia.getZIA16_ExtendedAddress().getZAD23_Country().encode());
    assertEquals("M", zia.getZIA16_ExtendedAddress().getZAD24_AddressType().encode());
    assertEquals("U", zia.getZIA16_ExtendedAddress().getZAD28_ValidAddressIndicator().encode());
    assertEquals("20170817", zia.getZIA16_ExtendedAddress().getZAD29_ValidationDate().encode());
    assertEquals("N", zia.getZIA16_ExtendedAddress().getZAD35_AddressValidationBestGuessIndicator().encode());
        
    }
    
}
