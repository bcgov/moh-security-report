/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.util;

import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author jonathan.wiebe
 */
public class ReflectionUtilsTest {

    public ReflectionUtilsTest() {
    }

    /**
     * Test of methodInvoke method, of class ReflectionUtils.
     */
    @Test
    public void testMethodInvoke() {
        boolean bool = (boolean) ReflectionUtils.methodInvoke(new Boolean(true), "booleanValue");
        assertTrue(bool);
        bool = (boolean) ReflectionUtils.methodInvoke(new Boolean(false), "booleanValue");
        assertTrue(!bool);
        assertTrue(ReflectionUtils.methodInvoke(new Boolean(false), "2booleanValue") == null);

        // now in the map, so test again
        assertTrue(ReflectionUtils.methodInvoke(new Boolean(false), "2booleanValue") == null);
        bool = (boolean) ReflectionUtils.methodInvoke(new Boolean(false), "booleanValue");
        assertTrue(!bool);
    }

    /**
     * Test of hasMethod method, of class ReflectionUtils.
     */
    @Test
    public void testHasMethod() {
        assertTrue(ReflectionUtils.hasMethod(new Boolean(true), "booleanValue")==ReflectionUtils.MethodType.method);
        assertTrue(ReflectionUtils.hasMethod(new Boolean(true), "2booleanValue")==ReflectionUtils.MethodType.none);
    }

    @Test
    public void testNull_hasMethod() {
        assertTrue(ReflectionUtils.hasMethod(null, "booleanValue")==ReflectionUtils.MethodType.none);
    }

    @Test
    public void testNull_methodInvoke() {
        assertNull(ReflectionUtils.methodInvoke(null, "booleanValue"));
    }
    
    @Test
    public void testDeclaredMethod() {
        assertTrue(ReflectionUtils.hasMethod(new A(), "Hello")==ReflectionUtils.MethodType.method);
        assertTrue(ReflectionUtils.hasMethod(new A(), "PrivateHello")==ReflectionUtils.MethodType.declaredMethod);
        assertTrue(ReflectionUtils.hasMethod(new A(), "GoodBye")==ReflectionUtils.MethodType.none);
        assertTrue(ReflectionUtils.hasMethod(new B(), "Hello")==ReflectionUtils.MethodType.method);
        assertTrue(ReflectionUtils.hasMethod(new B(), "PrivateHello")==ReflectionUtils.MethodType.none);
        assertTrue(ReflectionUtils.hasMethod(new B(), "GoodBye")==ReflectionUtils.MethodType.method);
        assertTrue(ReflectionUtils.hasMethod(new B(), "PrivateGoodBye")==ReflectionUtils.MethodType.declaredMethod);
        assertTrue(ReflectionUtils.hasMethod(new B(), "ProtectedGoodBye")==ReflectionUtils.MethodType.declaredMethod);
        assertTrue((Boolean)ReflectionUtils.methodInvoke(new B(), "Hello"));
        assertTrue((Boolean)ReflectionUtils.methodInvoke(new B(), "GoodBye"));
        assertTrue(ReflectionUtils.methodInvoke(new A(), "PrivateHello")==null);
        assertTrue((Boolean)ReflectionUtils.methodInvoke(new A(), "PrivateHello", true));
        assertTrue(ReflectionUtils.methodInvoke(new B(), "PrivateGoodBye")==null);
        assertTrue((Boolean)ReflectionUtils.methodInvoke(new B(), "ProtectedGoodBye"));
        assertTrue(ReflectionUtils.methodInvoke(new B(), "PrivateHello")==null);
        assertTrue(ReflectionUtils.methodInvoke(new B(), "PrivateHello", true)==null);
    }
    
    class A {
        public Boolean Hello() {return true;};
        private Boolean PrivateHello() {return true;};
    }
    class B extends A {
        public Boolean GoodBye() {return true;}
        private Boolean PrivateGoodBye() {return true;}
        protected Boolean ProtectedGoodBye() {return true;};
    }
}
