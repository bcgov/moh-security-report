package ca.bc.gov.health.plr.rule.provider.search;

import ca.bc.gov.health.plr.dto.provider.search.SearchProviderRequest;
import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import java.util.ArrayList;
import java.util.List;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Grant.Hodgins
 */
public class ValidateSearchAttributesTest {

    private static final ValidateSearchAttributes validateSearchAttributes = new ValidateSearchAttributes();

    /**
     * Test of validateMandatoryCriteria method, of class
     * ValidateSearchAttributes.
     */
    @Test
    public void testValidateMandatoryCriteria_valid() {
        Long providerRoleTypeId = 10L;
        String firstName = "First";
        String lastName = "Last";        
        BusinessRuleResult result = validateSearchAttributes.validateMandatoryCriteria(providerRequest(providerRoleTypeId, firstName, lastName));
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
    }

    @Test
    public void testValidateMandatoryCriteria_allNull() {
        Long providerRoleTypeId = null;
        String firstName = null;
        String lastName = null;
        BusinessRuleResult result = validateSearchAttributes.validateMandatoryCriteria(providerRequest(providerRoleTypeId, firstName, lastName));
        assertNotNull(result);
        assertTrue(!result.getMessages().isEmpty());
    }

    @Test
    public void testValidateMandatoryCriteria_roleTypeNull() {
        Long providerRoleTypeId = null;
        String firstName = "First";
        String lastName = "Last";
        BusinessRuleResult result = validateSearchAttributes.validateMandatoryCriteria(providerRequest(providerRoleTypeId, firstName, lastName));
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
    }

    @Test
    public void testValidateMandatoryCriteria_roleFirstNull() {
        Long providerRoleTypeId = 10L;
        String firstName = null;
        String lastName = "Last";
        BusinessRuleResult result = validateSearchAttributes.validateMandatoryCriteria(providerRequest(providerRoleTypeId, firstName, lastName));
        assertNotNull(result);
        assertTrue(!result.getMessages().isEmpty());
    }

    @Test
    public void testValidateMandatoryCriteria_roleLastNull() {
        Long providerRoleTypeId = 10L;
        String firstName = "First";
        String lastName = null;
        BusinessRuleResult result = validateSearchAttributes.validateMandatoryCriteria(providerRequest(providerRoleTypeId, firstName, lastName));
        assertNotNull(result);
        assertTrue(!result.getMessages().isEmpty());
    }
    
    @Test
    public void testValidateMandatoryCriteria_firstLastNameNull() {
        BusinessRuleResult result = validateSearchAttributes.validateMandatoryCriteria(providerRequest(null, null, null, "Victroia", null, null));
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
        List<Long> expertiseList = new ArrayList<>(); 
        expertiseList.add(1524l); //Adolescent Medicine
        providerRequest(null, null, null, null, expertiseList, null);
        result = validateSearchAttributes.validateMandatoryCriteria(providerRequest(null, null, null, null, expertiseList, null));
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
        List<Long> languageList = new ArrayList<>(); 
        languageList.add(5649l); //Spanish
        result = validateSearchAttributes.validateMandatoryCriteria(providerRequest(null, null, null, null, null, languageList));
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
    }    
    
    private SearchProviderRequest providerRequest(Long providerRoleTypeId, String firstName, String lastName){
        SearchProviderRequest request = new SearchProviderRequest();
        request.setProviderRoleTypeId(providerRoleTypeId);
        request.setFirstName(firstName);
        request.setLastName(lastName);
        return request;
    }

    private SearchProviderRequest providerRequest(Long providerRoleTypeId, String firstName, String lastName, String city, List<Long> expertiseList, List<Long> languageList){
        SearchProviderRequest request = new SearchProviderRequest();
        request.setProviderRoleTypeId(providerRoleTypeId);
        request.setFirstName(firstName);
        request.setLastName(lastName);
        request.setCity(city);
        request.setExpertiseList(expertiseList);
        request.setLanguageList(languageList);
        return request;
    }    

    /**
     * Test of validatePractitionerWildcardUsage method, of class ValidateSearchAttributes.
     */
    @Test
    public void testValidateWildcardUsage_noWilds() {
        String firstName = "Bob";
        String lastName = "Jones";
        String city = "Victoria";
        BusinessRuleResult result = validateSearchAttributes.validatePractitionerWildcardUsage(firstName, lastName, city);
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
    }

    @Test
    public void testValidateWildcardUsage_twoWilds() {
        String firstName = "B*";
        String lastName = "J*";
        String city = "Victoria";
        BusinessRuleResult result = validateSearchAttributes.validatePractitionerWildcardUsage(firstName, lastName, city);
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
    }

    @Test
    public void testValidateWildcardUsage_threeWilds() {
        String firstName = "B*";
        String lastName = "J*";
        String city = "V*";
        BusinessRuleResult result = validateSearchAttributes.validatePractitionerWildcardUsage(firstName, lastName, city);
        assertNotNull(result);
        assertTrue(!result.getMessages().isEmpty());
    }

    @Test
    public void testValidateWildcardUsage_wildFirst() {
        String firstName = "B*";
        String lastName = "Jones";
        String city = "Victoria";
        BusinessRuleResult result = validateSearchAttributes.validatePractitionerWildcardUsage(firstName, lastName, city);
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
    }

    @Test
    public void testValidateWildcardUsage_wildLast() {
        String firstName = "Bob";
        String lastName = "J*";
        String city = "Victoria";
        BusinessRuleResult result = validateSearchAttributes.validatePractitionerWildcardUsage(firstName, lastName, city);
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
    }
    
    @Test
    public void testValidateWildcardUsage_WildcardLastOrg() {
        String firstName = "Sam";
        String lastName = "Sm*t*so*a*";
        String city = "Victoria";

        BusinessRuleResult result = validateSearchAttributes.validateOrganizationWildcardUsage(firstName, lastName, city);
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
    }

    @Test
    public void testValidateWildcardUsage_wildCity() {
        String firstName = "Bob";
        String lastName = "Jones";
        String city = "V*";
        BusinessRuleResult result = validateSearchAttributes.validatePractitionerWildcardUsage(firstName, lastName, city);
        assertNotNull(result);
        assertTrue(!result.getMessages().isEmpty());
    }

    @Test
    public void testValidateWildcardUsage_preceedingWildcardFirst() {
        String firstName = "*Bob";
        String lastName = "Jones";
        String city = "Victoria";

        BusinessRuleResult result = validateSearchAttributes.validatePractitionerWildcardUsage(firstName, lastName, city);
        assertNotNull(result);
        assertTrue(!result.getMessages().isEmpty());
    }

    @Test
    public void testValidateWildcardUsage_preceedingWildcardLast() {
        String firstName = "Bob";
        String lastName = "*Jones";
        String city = "Victoria";

        BusinessRuleResult result = validateSearchAttributes.validatePractitionerWildcardUsage(firstName, lastName, city);
        assertNotNull(result);
        assertTrue(!result.getMessages().isEmpty());
    }

    @Test
    public void testValidateWildcardUsage_preceedingWildcardBoth() {
        String firstName = "*B";
        String lastName = "*J";
        String city = null;

        BusinessRuleResult result = validateSearchAttributes.validatePractitionerWildcardUsage(firstName, lastName, city);
        assertNotNull(result);
        assertTrue(!result.getMessages().isEmpty());
    }
    
    @Test
    public void testValidateWildcardUsage_tooManyWildcardsFirst() {
        String firstName = "B*n*";
        String lastName = "Jones";
        String city = "Victoria";

        BusinessRuleResult result = validateSearchAttributes.validatePractitionerWildcardUsage(firstName, lastName, city);
        assertNotNull(result);
        assertTrue(!result.getMessages().isEmpty());
    }

    @Test
    public void testValidateWildcardUsage_tooManyWildcardsLast() {
        String firstName = "Bob";
        String lastName = "*J*n*";
        String city = "Victoria";

        BusinessRuleResult result = validateSearchAttributes.validatePractitionerWildcardUsage(firstName, lastName, city);
        assertNotNull(result);
        assertTrue(!result.getMessages().isEmpty());
    }

    @Test
    public void testValidateWildcardUsage_notTrailingWildcardFirst() {
        String firstName = "B*b";
        String lastName = "Jones";
        String city = "Victoria";

        BusinessRuleResult result = validateSearchAttributes.validatePractitionerWildcardUsage(firstName, lastName, city);
        assertNotNull(result);
        assertTrue(!result.getMessages().isEmpty());
    }

    @Test
    public void testValidateWildcardUsage_notTrailingWildcardLast() {
        String firstName = "Bob";
        String lastName = "Jo*es";
        String city = "Victoria";

        BusinessRuleResult result = validateSearchAttributes.validatePractitionerWildcardUsage(firstName, lastName, city);
        assertNotNull(result);
        assertTrue(!result.getMessages().isEmpty());
    }
    
    @Test
    public void testValidateWildcardUsage_notTrailingWildcardOrg() {
        String orgName = "Sam";
        String orgLongName = "Sm*t*so*a";
        String city = "Victoria";

        BusinessRuleResult result = validateSearchAttributes.validateOrganizationWildcardUsage(orgName, orgLongName, city);
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
    }
    
    @Test
    public void testValidateWildcardUsage_FirstWildcardOrgNameOnly() {
        String orgName = "*abb";
        String city = "Vernon";

        BusinessRuleResult result = validateSearchAttributes.validateOrganizationWildcardUsage(orgName, "", city);
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
    }

    @Test
    public void testValidateWildcardUsage_FirstWildcardOrgName_LongName() {
        String orgName = "*abbo";
        String orgLongName = "*Hosp";
        String city = "Vernon";

        BusinessRuleResult result = validateSearchAttributes.validateOrganizationWildcardUsage(orgName, orgLongName, city);
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
    }
    
    @Test
    public void testValidateWildcardUsage_MultipleWildcardsOrgName_LongName() {
        String orgName = "abb*ot***r d";
        String orgLongName = "Ho**l a***e";
        String city = "Vernon";

        BusinessRuleResult result = validateSearchAttributes.validateOrganizationWildcardUsage(orgName, orgLongName, city);
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
    }
    
    @Test
    public void testValidateWildcardUsage_TrailingWildcardsOrgName_LongName() {
        String orgName = "abb*r d**";
        String orgLongName = "Ho*p  e*";
        String city = "Vernon";

        BusinessRuleResult result = validateSearchAttributes.validateOrganizationWildcardUsage(orgName, orgLongName, city);
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
    }
    
    @Test
    public void testValidateWildcardUsage_OnlyWildcardsOrgName_LongName() {
        String orgName = "**";
        String orgLongName = "***";
        String city = "Vernon";

        BusinessRuleResult result = validateSearchAttributes.validateOrganizationWildcardUsage(orgName, orgLongName, city);
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
    }
    
    @Test
    public void testValidateWildcardUsage_SpecialCharWildcardsOrgName_LongName() {
        String orgName = "abb*r' d_**";
        String orgLongName = "Ho*p$ f% e*";
        String city = "Vernon";

        BusinessRuleResult result = validateSearchAttributes.validateOrganizationWildcardUsage(orgName, orgLongName, city);
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
    }
    
    @Test
    public void testValidateWildcardUsage_SpecialCharAllWildcardsOrgName_LongName() {
        String orgName = "*abb*r' d_***b& ";
        String orgLongName = "*Ho&***$$pM f%*** e*";
        String city = "Vernon";

        BusinessRuleResult result = validateSearchAttributes.validateOrganizationWildcardUsage(orgName, orgLongName, city);
        assertNotNull(result);
        assertTrue(result.getMessages().isEmpty());
    }
}
