/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.dto.provider.InformationRouteDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.PrsInformationRoutes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.provider.ProviderTestDataBuilder;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.entityManagerProxy;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.ArrayList;
import java.util.List;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;

/**
 *
 * @author ian.scott
 */
public class MaintainInformationRouteServiceTest extends IntegrationSetup {

    private static final long PAUTH_ID = 3206;
    

    @Before
    public void tearDown() {
        List<Exception> exceptions = new ArrayList<>();

        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        for (PrsInformationRoutes route : provider.getPrsInformationRoutesList()) {
            try {
                entityManagerProxy.remove(route);
            } catch (Exception e) {
                e.printStackTrace();
                exceptions.add(e);
            }
        }
        for (GrsAddresses address : provider.getGrsAddressesList()) {
            try {
                entityManagerProxy.remove(address);
            } catch (Exception e) {
                e.printStackTrace();
                exceptions.add(e);
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    /**
     * Test of save method.
     * @throws ca.bc.gov.health.plr.service.provider.DuplicateRecordException
     */
    @Test
    public void testAddInformationRoute() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {
        AddressDto address = ProviderTestDataBuilder.getAddress();
        address.setPauthId(PAUTH_ID);
        address = maintainAddressService.save(address);
        
        InformationRouteDto newEntity = ProviderTestDataBuilder.getInformationRoute();
        newEntity.setPauthId(PAUTH_ID);
        newEntity.setMechanismTypeCode(CodeTableCodes.GrsCtMechanisms.COURIER__TEST_CODE.getValue());
        newEntity.setAddressDto(address);

        int originalCount = maintainInformationRouteService.getInformationRoutes(newEntity).size();

        maintainInformationRouteService.save(newEntity);
        int newCount = maintainInformationRouteService.getInformationRoutes(newEntity).size();

        assertEquals(originalCount + 1, newCount);
    }
    
    /**
     * Test to make sure one location can't be referenced by two information routes with same documentType.
     * @throws DuplicateRecordException
     * @throws EntityValidationException
     * @throws BusinessRuleException 
     */
    @Test
    public void testAddDuplicateInformationRoute() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {
        AddressDto address = ProviderTestDataBuilder.getAddress();
        address.setPauthId(PAUTH_ID);
        address = maintainAddressService.save(address);
        
        InformationRouteDto newEntity = ProviderTestDataBuilder.getInformationRoute();
        newEntity.setPauthId(PAUTH_ID);
        newEntity.setMechanismTypeCode(CodeTableCodes.GrsCtMechanisms.COURIER__TEST_CODE.getValue());
        newEntity.setAddressDto(address);

        int originalCount = maintainInformationRouteService.getInformationRoutes(newEntity).size();

        maintainInformationRouteService.save(newEntity);
        int newCount = maintainInformationRouteService.getInformationRoutes(newEntity).size();

        assertEquals(originalCount + 1, newCount);
        
        InformationRouteDto secondEntity = ProviderTestDataBuilder.getInformationRoute();
        secondEntity.setPauthId(PAUTH_ID);
        secondEntity.setMechanismTypeCode(CodeTableCodes.GrsCtMechanisms.COURIER__TEST_CODE.getValue());
        secondEntity.setAddressDto(address);
        boolean caughtDuplicateRecordException = false;
        try {
            maintainInformationRouteService.save(secondEntity);
        } catch (DuplicateRecordException dre) {
            caughtDuplicateRecordException= true;
            BusinessRuleKeys key = BusinessRuleKeys.ERROR_DUPLICATE_DATA_BLOCK;
            String messageDao = BusinessRuleMessageDao.getMessageResource(key).replace("\n", "").replace("\r", "").trim() + " communication preference";
            String messageExp = dre.getMessage().replace("\n", "").replace("\r", "").trim();
            assertEquals(messageDao, messageExp);
        }
        assertTrue(caughtDuplicateRecordException);

    }    
}
