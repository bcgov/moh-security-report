/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.registry.user;

import ca.bc.gov.health.plr.dto.reguser.AccessProfileDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAccessProfiles;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.provider.ProviderTestDataBuilder;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.entityManagerProxy;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.ArrayList;
import java.util.List;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author sumesh.kariyil
 */
public class MaintainAccessProfileServiceTest extends IntegrationSetup{
    
    private static Long idToRemove;

    @Before
    public void init() {
        idToRemove = null;
    }

    @After
    public void cleanup() {
        if (idToRemove != null) {
            entityManagerProxy.remove(entityManagerProxy.find(GrsAccessProfiles.class, idToRemove));
        }
    }

    /**
     * Test of test save access profile method, of class
     * MaintainAccessProfile .
     * @throws ca.bc.gov.health.plr.rule.BusinessRuleException
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Test
    public void testAddAccessProfile() throws BusinessRuleException, EntityValidationException {
        AccessProfileDto newAccess = ProviderTestDataBuilder.getAccessProfileDto();
        
        GrsRegistryUsers grsRegistryUsers = entityManagerProxy.find(GrsRegistryUsers.class, newAccess.getRuRuId());
        List<GrsAccessProfiles> accessProfiles = grsRegistryUsers.getGrsAccessProfilesList();

        List<Long> originalIds = new ArrayList<>();
        for (GrsAccessProfiles accessProfile : accessProfiles) {
            originalIds.add(accessProfile.getAcp1Id());
        }
        AccessProfileDto result = null;
        try {
            result = maintainAccessProfileService.save(newAccess);
        } catch (DuplicateRecordException dre) {
            assertTrue(dre.getMessage().equals(""));
        }
        assertNotNull(result);
        List<AccessProfileDto> allForRegUser = maintainAccessProfileService.refreshAllAccessProfiles(newAccess);
        assertEquals(allForRegUser.size(), grsRegistryUsers.getGrsAccessProfilesList().size() + 1);

        for (AccessProfileDto accessProfileDto : allForRegUser) {
            if (!originalIds.contains(accessProfileDto.getId())) {
                entityManagerProxy.remove(entityManagerProxy.find(GrsAccessProfiles.class, accessProfileDto.getId()));
            }
        }

    }

    /**
     * Test to ensure adding a duplicate record throws an exception
     * @throws DuplicateRecordException
     * @throws BusinessRuleException 
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException 
     */
    @Test
    public void testAddDuplicate() throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        AccessProfileDto newAccess = ProviderTestDataBuilder.getAccessProfileDto();
        AccessProfileDto result;
        result = maintainAccessProfileService.save(newAccess);
        idToRemove = result.getId();

        newAccess = ProviderTestDataBuilder.getAccessProfileDto();
        boolean exceptionThrown = false;
        try {
            maintainAccessProfileService.save(newAccess);
        } catch (DuplicateRecordException dre) {
            exceptionThrown = true;
        }
        assertTrue(exceptionThrown);
    }

    
}
