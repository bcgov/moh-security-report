/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.util;

import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtAddressValidTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCommunPurposeTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.ejb.entity.PrsCtTelecomNumberTypes;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.eq;
import org.mockito.Mockito;

/**
 *
 * @author jonathan.wiebe
 */
public class CodeDaoMocks {

    public static final long CHG_CODE_ID = 15L;
    public static final long CEASE_CODE_ID = 16L;
    public static final long CORR_CODE_ID = 17L;
    public static final long COUNTRY_CODE_ID_US = 18l;
    public static final long COUNTRY_CODE_ID_CA = 19l;
    public static final long BOOLEAN_TYPES_YES_ID = 20l;
    public static final long BOOLEAN_TYPES_NO_ID = 21l;
    public static final long EMERGENCY_CONTACT_CODE_ID = 22L;
    public static final long ADDRESS_VALIDATION_STATUS_VALID_ID = 23l;
    public static final long ADDRESS_VALIDATION_STATUS_INVALID_ID = 24l;
    public static final long ADDRESS_VALIDATION_STATUS_UNKNOWN_ID = 25l;
    
    public static final long GARBAGE_CODE = 999999999l;
    
    public static final String COUNTRY_CODE_NAME_CA = "CA";
    public static final String COUNTRY_CODE_NAME_US = "US";
    public static final String STATE_CODE_NAME_AZ = "AZ";
    public static final String PROV_CODE_NAME_ON = "ON";
    public static final String PROV_CODE_NAME_BC = "BC";
    public static final String CITY_NAME_VICTORIA = "Victoria";
    public static final String CHG_CODE_NAME = "CHG";
    public static final String CEASE_CODE_NAME = "CEASE";
    public static final String CORR_CODE_NAME = "CORR";
    
    public static final String EMERGENCY_CONTACT_CODE_NAME = "EC";
    public static final String NOT_EMERGENCY_CONTACT_CODE_NAME = "DC";
    public static final String TELECOM_PHONE_CD = "T";
    public static final String TELECOM_MOBILE_CD = "MB";
    public static final String TELECOM_FAX_CD = "FAX";
    public static final long TELECOM_PHONE_CD_ID = 1161;
    public static final long TELECOM_FAX_CD_ID = 2412;
    public static final String TELECOM_PHONE_MOBILE_CD = "T,MB";

    public static final String ADDRESS_VALIDATION_STATUS_VALID_CD = "V";
    public static final String ADDRESS_VALIDATION_STATUS_INVALID_CD = "I";
    public static final String ADDRESS_VALIDATION_STATUS_UNKNOWN_CD = "U";

    static public void setupCodesDaoMocks(CodesDao codesDao) {
        lookups(codesDao);
        codeExists(codesDao);
    }

    private static void codeExists(CodesDao codesDao) {
        Mockito.doReturn(false).when(codesDao).codeExists(eq(PrsCtCountries.class), anyLong());
        Mockito.doReturn(true).when(codesDao).codeExists(eq(PrsCtCountries.class), eq(COUNTRY_CODE_ID_US));
        Mockito.doReturn(true).when(codesDao).codeExists(eq(PrsCtCountries.class), eq(COUNTRY_CODE_ID_CA));
        Mockito.doReturn(true).when(codesDao).codeExists(eq(PrsCtTelecomNumberTypes.class), eq(TELECOM_PHONE_CD));
        Mockito.doReturn(true).when(codesDao).codeExists(eq(PrsCtTelecomNumberTypes.class), eq(TELECOM_MOBILE_CD));
        Mockito.doReturn(true).when(codesDao).codeExists(eq(PrsCtTelecomNumberTypes.class), eq(TELECOM_FAX_CD));
        Mockito.doReturn(true).when(codesDao).codeExists(eq(PrsCtCommunPurposeTypes.class), eq(EMERGENCY_CONTACT_CODE_NAME));
        Mockito.doReturn(true).when(codesDao).codeExists(eq(PrsCtCommunPurposeTypes.class), eq(NOT_EMERGENCY_CONTACT_CODE_NAME));
        Mockito.doReturn(true).when(codesDao).codeExists(eq(PrsCtCommunPurposeTypes.class), eq(NOT_EMERGENCY_CONTACT_CODE_NAME));
    }

    static private void lookups(CodesDao codesDao) {
        Mockito.doReturn(null).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), anyLong());
        Mockito.doReturn(null).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), anyString());
        Mockito.doReturn(changeEndReason()).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), eq(CHG_CODE_ID));
        Mockito.doReturn(ceaseEndReason()).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), eq(CEASE_CODE_ID));
        Mockito.doReturn(corrEndReason()).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), eq(CORR_CODE_ID));
        Mockito.doReturn(changeEndReason()).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), eq(CHG_CODE_NAME));
        Mockito.doReturn(ceaseEndReason()).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), eq(CEASE_CODE_NAME));
        Mockito.doReturn(corrEndReason()).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), eq(CORR_CODE_NAME));
        Mockito.doReturn(ceaseEndReason()).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), eq(CodeTableCodes.GrsCtEndReasonTypes.CEASE));
        Mockito.doReturn(changeEndReason()).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), eq(CodeTableCodes.GrsCtEndReasonTypes.CHANGE));
        Mockito.doReturn(corrEndReason()).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), eq(CodeTableCodes.GrsCtEndReasonTypes.CORRECT));
        Mockito.doReturn(new PrsCtCountries() {
            {
                setCtlId(COUNTRY_CODE_ID_US);
                setCtlNameCode(COUNTRY_CODE_NAME_US);
            }
        }).when(codesDao).lookup(eq(PrsCtCountries.class), eq(COUNTRY_CODE_ID_US));
        Mockito.doReturn(new PrsCtCountries() {
            {
                setCtlId(COUNTRY_CODE_ID_CA);
                setCtlNameCode(COUNTRY_CODE_NAME_CA);
            }
        }).when(codesDao).lookup(eq(PrsCtCountries.class), eq(COUNTRY_CODE_ID_CA));
        Mockito.doReturn(new PrsCtTelecomNumberTypes() {
            {
                setCtlNameCode(TELECOM_PHONE_CD);
            }
        }).when(codesDao).lookup(eq(PrsCtTelecomNumberTypes.class), eq(TELECOM_PHONE_CD));
        Mockito.doReturn(new PrsCtTelecomNumberTypes() {
            {
                setCtlNameCode(TELECOM_MOBILE_CD);
            }
        }).when(codesDao).lookup(eq(PrsCtTelecomNumberTypes.class), eq(TELECOM_MOBILE_CD));
        Mockito.doReturn(new PrsCtTelecomNumberTypes() {
            {
                setCtlNameCode(TELECOM_FAX_CD);
            }
        }).when(codesDao).lookup(eq(PrsCtTelecomNumberTypes.class), eq(TELECOM_FAX_CD));
        Mockito.doReturn(new PrsCtCommunPurposeTypes() {
            {
                setCtlNameCode(EMERGENCY_CONTACT_CODE_NAME);
                setTelecomNbrType(TELECOM_PHONE_MOBILE_CD);
            }
        }).when(codesDao).lookup(eq(PrsCtCommunPurposeTypes.class), eq(EMERGENCY_CONTACT_CODE_NAME));
        Mockito.doReturn(new PrsCtCommunPurposeTypes() {
            {
                setCtlNameCode(NOT_EMERGENCY_CONTACT_CODE_NAME);
                setTelecomNbrType(null);
            }
        }).when(codesDao).lookup(eq(PrsCtCommunPurposeTypes.class), eq(NOT_EMERGENCY_CONTACT_CODE_NAME));
        Mockito.doReturn(new PrsCtCommunPurposeTypes() {
            {
                setCtlId(EMERGENCY_CONTACT_CODE_ID);
                setCtlNameCode(EMERGENCY_CONTACT_CODE_NAME);
            }
        }).when(codesDao).lookup(eq(PrsCtCommunPurposeTypes.class), eq(EMERGENCY_CONTACT_CODE_NAME));
        Mockito.doReturn(communicPurposeTypeEmergency()).when(codesDao).lookup(eq(PrsCtCommunPurposeTypes.class), eq(EMERGENCY_CONTACT_CODE_NAME));


        Mockito.doReturn(new PrsCtAddressValidTypes() {
            {
                setCtlId(ADDRESS_VALIDATION_STATUS_VALID_ID);
                setCtlNameCode(ADDRESS_VALIDATION_STATUS_VALID_CD);
            }
        }).when(codesDao).lookup(eq(PrsCtAddressValidTypes.class), eq(ADDRESS_VALIDATION_STATUS_VALID_CD));
        Mockito.doReturn(new PrsCtAddressValidTypes() {
            {
                setCtlId(ADDRESS_VALIDATION_STATUS_INVALID_ID);
                setCtlNameCode(ADDRESS_VALIDATION_STATUS_INVALID_CD);
            }
        }).when(codesDao).lookup(eq(PrsCtAddressValidTypes.class), eq(ADDRESS_VALIDATION_STATUS_INVALID_CD));
        
        Mockito.doReturn(new PrsCtAddressValidTypes() {
            {
                setCtlId(ADDRESS_VALIDATION_STATUS_UNKNOWN_ID);
                setCtlNameCode(ADDRESS_VALIDATION_STATUS_UNKNOWN_CD);
            }
        }).when(codesDao).lookup(eq(PrsCtAddressValidTypes.class), eq(ADDRESS_VALIDATION_STATUS_UNKNOWN_CD));

    }

    static private GrsCtEndReasonTypes ceaseEndReason() {
        return new GrsCtEndReasonTypes() {
            {
                setCtlId(CEASE_CODE_ID);
                setCtlNameCode(CEASE_CODE_NAME);
            }
        };
    }

    static private GrsCtEndReasonTypes corrEndReason() {
        return new GrsCtEndReasonTypes() {
            {
                setCtlId(CORR_CODE_ID);
                setCtlNameCode(CORR_CODE_NAME);
            }
        };
    }

    static private GrsCtEndReasonTypes changeEndReason() {
        return new GrsCtEndReasonTypes() {
            {
                setCtlId(CHG_CODE_ID);
                setCtlNameCode(CHG_CODE_NAME);
            }
        };
    }
        

    static public GrsCtBooleanTypes getYESGrsCtBooleanType() {
        return new GrsCtBooleanTypes() {
            {
                setCtlId(BOOLEAN_TYPES_YES_ID);
                setCtlNameCode(CodeTableCodes.GrsCtBooleanTypes.YES.getValue());
            }
        };
    }
    
    static public GrsCtBooleanTypes getNOGrsCtBooleanType() {
        return new GrsCtBooleanTypes() {
            {
                setCtlId(BOOLEAN_TYPES_NO_ID);
                setCtlNameCode(CodeTableCodes.GrsCtBooleanTypes.NO.getValue());
            }
        };
    }
    
    static private PrsCtCommunPurposeTypes communicPurposeTypeEmergency() {
        return new PrsCtCommunPurposeTypes() {
            {
                setCtlId(EMERGENCY_CONTACT_CODE_ID);
                setCtlNameCode(EMERGENCY_CONTACT_CODE_NAME);
                setTelecomNbrType(TELECOM_PHONE_MOBILE_CD);
            }
        };
    }
}

