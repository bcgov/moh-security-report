/*
* To change this license header, choose License Headers in Project Properties.
* To change this template file, choose Tools | Templates
* and open the template in the editor.
*/
package ca.bc.gov.health.plr.service.remote;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.QueryParameters;
import ca.bc.gov.health.plr.dto.esb.QueryRequest;
import ca.bc.gov.health.plr.dto.esb.QueryResponse;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.search.SearchProviderRequest;
import ca.bc.gov.health.plr.dto.provider.search.SearchProviderResult;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvExpertiseTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.service.distribution.JsonSerializer;
import ca.bc.gov.health.plr.service.distribution.Serializer;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

/**
*
* @author jonathan.wiebe
*/
public class SearchProviderEsbServiceTest extends IntegrationSetup {

    public SearchProviderEsbServiceTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    @Rule
    public ExpectedException thrown = ExpectedException.none();

    /**
     * Test of query method, null query
     */
    @Test
    public void testQuery_null() throws Exception {

        try {
            QueryResponse response = searchProviderEsbService.query(null);
            assertTrue(false);
        } catch (javax.ejb.EJBException e) {
            assertTrue(true);
        }
    }

    /**
     * Test for insufficient error (when PLR can't tell if it is an id or
     * criteria search)
     */
    @Test
    public void testQuery_Criteria_insufficientMessage() throws Exception {
        QueryRequest request = new QueryRequest();
        QueryParameters params = new QueryParameters();
        request.setQueryParameters(params);
        params.setHistoryFlag(true);
        request.setRegistryUserOrgId("plr-reg-admin");
        QueryResponse response = searchProviderEsbService.query(request);

        assertTrue(response.getAcknowledgments().size() > 0);
        assertTrue(queryInsufficient(response.getAcknowledgments()));
    }

    @Test
    public void testQuery_City() {
        QueryRequest request = deSerialize(CITY);
        QueryResponse response = searchProviderEsbService.query(request);
        commonAsserts(request, response);
        assertTrue(querySuccessful(response.getAcknowledgments()));
    }

    @Test
    public void testQuery_Gender() {
        QueryRequest request = deSerialize(GENDER_F);
        QueryResponse response = searchProviderEsbService.query(request);
        commonAsserts(request, response);
        assertTrue(queryInsufficient(response.getAcknowledgments()));
    }

    @Test
    public void testQuery_GenderInvalid() {
        QueryRequest request = deSerialize(GENDER_INVALID);
        QueryResponse response = searchProviderEsbService.query(request);
        // can't test invalid gender as this condition is impossible from web, false
        commonAsserts(request, response, false);
        assertTrue(response.getAcknowledgments().get(0).getMsgText().matches(".*invalid.*"));
    }

    @Test
    public void testQuery_RoleTypeInvalid() {
        QueryRequest request = deSerialize(ROLETYPE_INVALID);
        QueryResponse response = searchProviderEsbService.query(request);
        commonAsserts(request, response);
        assertTrue(response.getAcknowledgments().get(0).getMsgText().matches(".*Invalid.*"));
    }

    @Test
    public void testQuery_Expertise() {
        QueryRequest request = deSerialize(EXPERTISE);
        QueryResponse response = searchProviderEsbService.query(request);
        // Must translate CTL_NAME_CODE to CTL_ID manually because we are calling the service directly.
        // 1279 is "ERN12".
        request.getQueryParameters().getQualifications().set(0, "ERN12");
        // 1287 is "ERN11".
        request.getQueryParameters().getQualifications().set(1, "ERN11");
        commonAsserts(request, response);
        assertTrue(querySuccessful(response.getAcknowledgments()));
    }

    @Test
    public void testQuery_Name() {
        QueryRequest request = deSerialize(NAME);
        QueryResponse response = searchProviderEsbService.query(request);
        commonAsserts(request, response);
        assertTrue(querySuccessful(response.getAcknowledgments()));
    }

    @Test
    public void testQuery_Language() {
        QueryRequest request = deSerialize(LANGUAGE);
        QueryResponse response = searchProviderEsbService.query(request);
        // Must translate CTL_NAME_CODE to CTL_ID manually because we are calling the service directly.
        // 1434 is "OP".
        request.getQueryParameters().getQualifications().set(0, "A01");
        commonAsserts(request, response);
        assertTrue(querySuccessful(response.getAcknowledgments()));
    }

    @Test
    public void testQuery_Empty() {
        QueryRequest request = deSerialize(EMPTY);
        QueryResponse response = searchProviderEsbService.query(request);
        commonAsserts(request, response);
        assertTrue(queryInsufficient(response.getAcknowledgments()));
    }

    @Test
    public void testQuery_RoleType() {
        QueryRequest request = deSerialize(ROLETYPE);
        QueryResponse response = searchProviderEsbService.query(request);
        commonAsserts(request, response);
        assertTrue(queryInsufficient(response.getAcknowledgments()));
    }

    @Test
    public void testQuery_NameFirstOnly() {
        QueryRequest request = deSerialize(NAME_FIRST_ONLY);
        QueryResponse response = searchProviderEsbService.query(request);
        commonAsserts(request, response);
        assertTrue(queryInsufficient(response.getAcknowledgments()));
    }
    private static final String INSUFFICIENT = "Insufficient.*";

    @Test
    public void testQuery_NameWildCardFails() {
        QueryRequest request = deSerialize(NAME_WILDCARD_FAILS);
        QueryResponse response = searchProviderEsbService.query(request);
        commonAsserts(request, response);
        assertTrue(response.getAcknowledgments().size() == 2);
        assertTrue(response.getAcknowledgments().get(0).getMsgText().matches(".*wildcard.*"));
        assertTrue(response.getAcknowledgments().get(1).getMsgText().matches(".*wildcard.*"));
    }

    private SearchProviderRequest practitionerSearch(Long providerTypeId, String firstName, String lastName, String city, String gender, List<Long> eList, List<Long> lList, boolean historyFlag) {
        SearchProviderRequest providerRequest = new SearchProviderRequest();
        providerRequest.setProviderRoleTypeId(providerTypeId);
        providerRequest.setCity(city);
        providerRequest.setFirstName(firstName);
        providerRequest.setLastName(lastName);
        providerRequest.setHistoryFlag(historyFlag);
        providerRequest.setGender(gender);
        providerRequest.setExpertiseList(eList);
        providerRequest.setLanguageList(lList);
        return providerRequest;
    }

    @Test
    public void testQuery_CityWildCardFails() {
        QueryRequest request = deSerialize(CITY_WILDCARD_FAILS);
        QueryResponse response = searchProviderEsbService.query(request);
        commonAsserts(request, response);
        assertTrue(response.getAcknowledgments().get(0).getMsgText().matches(".*wildcard.*"));
    }

    private void commonAsserts(QueryRequest request, QueryResponse response) {
        commonAsserts(request, response, true);
    }

    private void commonAsserts(QueryRequest request, QueryResponse response, boolean testWeb) {
        assertTrue(response != null);
        assertTrue(response.getAcknowledgments() != null);
        assertFalse(response.getAcknowledgments().isEmpty());

        if (testWeb) {
        // now the hard check
            // check that the web serach results match the message search results
            String roleTypeCode = request.getQueryParameters().getProviderRoleTypeCode();
            Long roleTypeID = null;
            if (roleTypeCode != null && !roleTypeCode.isEmpty()) {
                PrsCtProviderRoleTypes ct = codesDao.lookup(PrsCtProviderRoleTypes.class, roleTypeCode);
                if (ct != null) {
                    roleTypeID = ct.getCtlId();
                }
            }
            List<Long> qualLongList = new ArrayList<Long>();
            if(!request.getQueryParameters().getQualifications().isEmpty()) {
                for(String qualification : request.getQueryParameters().getQualifications()) {
                    PrsCtProvExpertiseTypes qualCode = codesDao.lookup(PrsCtProvExpertiseTypes.class, qualification);
                    qualLongList.add(qualCode.getCtlId());
                }
            }
            SearchProviderRequest webRequest = this.practitionerSearch(roleTypeID, request.getQueryParameters().getFirstName(), request.getQueryParameters().getLastName(), request.getQueryParameters().getCity(), request.getQueryParameters().getGender(), qualLongList, new ArrayList<Long>(), true);
            SearchProviderResult webResult = searchProviderService.searchForPractitioner(webRequest);
            assertNotNull(response);
            assertNotNull(webResult);
            assertNotNull(response.getProviderDetails());
            assertNotNull(webResult.getSearchResults());
            assertNotNull(response.getAcknowledgments());
            assertNotNull(webResult.getMessages());
            assertTrue(webResult.getSearchResults().size() == response.getProviderDetails().size());
            for(ProviderDto dtoWeb : webResult.getSearchResults()) {
                boolean foundMatch = false;
                for(ProviderDetails dtoMsg : response.getProviderDetails()) {
                    // match the providers ...
                    if(dtoWeb.getPauthId().equals(dtoMsg.getPauthId())) {
                        foundMatch = true;
                    }
                }
                assertTrue(foundMatch);
            }
        }
    }

    private boolean querySuccessful(Collection<Acknowledgment> acks) {
        Iterator it = acks.iterator();
        while (it.hasNext()) {
            if (((Acknowledgment) it.next()).getMsgText().equals(QUERY_SUCCESSFUL)) {
                return true;
            }
        }
        return false;
    }

    private boolean queryInsufficient(Collection<Acknowledgment> acks) {
        assertTrue(!querySuccessful(acks));
        Iterator it = acks.iterator();
        while (it.hasNext()) {
            if (((Acknowledgment) it.next()).getMsgText().matches(INSUFFICIENT)) {
                return true;
            }
        }
        return false;
    }
    private static final String QUERY_SUCCESSFUL = "Query successful";

    private QueryRequest deSerialize(String JSON) {
        Serializer<QueryRequest> s = new JsonSerializer<>();
        QueryRequest qr = null;
        qr = s.deserialize(JSON, QueryRequest.class);
        return qr;
    }

    String ROLETYPE = "{\n"
            + "             \"queryParameters\": {\n"
            + "                            \"historyFlag\": true,\n"
            + "                            \"providerRoleTypeCode\" : \"RN\",\n"
            + "                            \"firstName\" : \"\",\n"
            + "                            \"lastName\" : \"\",\n"
            + "                            \"city\" : \"\",\n"
            + "                            \"qualifications\" : [],\n"
            + "                            \"gender\" : \"\"\n"
            + "             },\n"
            + "             \"registryUserOrgId\": \"jwiebe\",\n"
            + "             \"isTransactionSuccess\": false,\n"
            + "\n"
            + "        \"uniqueMessageId\": \"879werhigsdfh\",\n"
            + "        \"sourceServer\": \"source server\",\n"
            + "        \"messageCreationTime\": \"2015-12-10T00:00:00\",\n"
            + "        \"messageInteractionId\": \"hello interaction\",\n"
            + "        \"version\": \"hello version\",\n"
            + "        \"sourceUserId\" : \"shouldntmatter\",\n"
            + "        \"responsiblePersonUserId\" : \"smatter\"\n"
            + "\n"
            + "\n"
            + "\n"
            + "}";

    String ROLETYPE_INVALID = "{\n"
            + "             \"queryParameters\": {\n"
            + "                            \"historyFlag\": true,\n"
            + "                            \"providerRoleTypeCode\" : \"RsN\",\n"
            + "                            \"firstName\" : \"\",\n"
            + "                            \"lastName\" : \"\",\n"
            + "                            \"city\" : \"\",\n"
            + "                            \"qualifications\" : [],\n"
            + "                            \"gender\" : \"\"\n"
            + "             },\n"
            + "             \"registryUserOrgId\": \"jwiebe\",\n"
            + "             \"isTransactionSuccess\": false,\n"
            + "\n"
            + "        \"uniqueMessageId\": \"879werhigsdfh\",\n"
            + "        \"sourceServer\": \"source server\",\n"
            + "        \"messageCreationTime\": \"2015-12-10T00:00:00\",\n"
            + "        \"messageInteractionId\": \"hello interaction\",\n"
            + "        \"version\": \"hello version\",\n"
            + "        \"sourceUserId\" : \"shouldntmatter\",\n"
            + "        \"responsiblePersonUserId\" : \"smatter\"\n"
            + "\n"
            + "\n"
            + "\n"
            + "}";

    String NAME = "{\n"
            + "             \"queryParameters\": {\n"
            + "                            \"historyFlag\": true,\n"
            + "                            \"providerRoleTypeCode\" : \"\",\n"
            + "                            \"firstName\" : \"F*\",\n"
            + "                            \"lastName\" : \"L*\",\n"
            + "                            \"city\" : \"\",\n"
            + "                            \"qualifications\" : [],\n"
            + "                            \"gender\" : \"\"\n"
            + "             },\n"
            + "             \"registryUserOrgId\": \"jwiebe\",\n"
            + "             \"isTransactionSuccess\": false,\n"
            + "\n"
            + "        \"uniqueMessageId\": \"879werhigsdfh\",\n"
            + "        \"sourceServer\": \"source server\",\n"
            + "        \"messageCreationTime\": \"2015-12-10T00:00:00\",\n"
            + "        \"messageInteractionId\": \"hello interaction\",\n"
            + "        \"version\": \"hello version\",\n"
            + "        \"sourceUserId\" : \"shouldntmatter\",\n"
            + "        \"responsiblePersonUserId\" : \"smatter\"\n"
            + "\n"
            + "\n"
            + "\n"
            + "}";

    String NAME_WILDCARD_FAILS = "{\n"
            + "             \"queryParameters\": {\n"
            + "                            \"historyFlag\": true,\n"
            + "                            \"providerRoleTypeCode\" : \"\",\n"
            + "                            \"firstName\" : \"F**\",\n"
            + "                            \"lastName\" : \"*L\",\n"
            + "                            \"city\" : \"\",\n"
            + "                            \"qualifications\" : [],\n"
            + "                            \"gender\" : \"\"\n"
            + "             },\n"
            + "             \"registryUserOrgId\": \"jwiebe\",\n"
            + "             \"isTransactionSuccess\": false,\n"
            + "\n"
            + "        \"uniqueMessageId\": \"879werhigsdfh\",\n"
            + "        \"sourceServer\": \"source server\",\n"
            + "        \"messageCreationTime\": \"2015-12-10T00:00:00\",\n"
            + "        \"messageInteractionId\": \"hello interaction\",\n"
           + "        \"version\": \"hello version\",\n"
            + "        \"sourceUserId\" : \"shouldntmatter\",\n"
            + "        \"responsiblePersonUserId\" : \"smatter\"\n"
            + "\n"
            + "\n"
            + "\n"
            + "}";

    String NAME_FIRST_ONLY = "{\n"
            + "             \"queryParameters\": {\n"
            + "                            \"historyFlag\": true,\n"
            + "                            \"providerRoleTypeCode\" : \"\",\n"
            + "                            \"firstName\" : \"F*\",\n"
            + "                            \"lastName\" : \"\",\n"
            + "                            \"city\" : \"\",\n"
            + "                            \"qualifications\" : [],\n"
            + "                            \"gender\" : \"\"\n"
            + "             },\n"
            + "             \"registryUserOrgId\": \"jwiebe\",\n"
            + "             \"isTransactionSuccess\": false,\n"
            + "\n"
            + "        \"uniqueMessageId\": \"879werhigsdfh\",\n"
            + "        \"sourceServer\": \"source server\",\n"
            + "        \"messageCreationTime\": \"2015-12-10T00:00:00\",\n"
            + "        \"messageInteractionId\": \"hello interaction\",\n"
            + "        \"version\": \"hello version\",\n"
            + "        \"sourceUserId\" : \"shouldntmatter\",\n"
            + "        \"responsiblePersonUserId\" : \"smatter\"\n"
            + "\n"
            + "\n"
            + "\n"
            + "}";

    String LANGUAGE = "{\n"
            + "             \"queryParameters\": {\n"
            + "                            \"historyFlag\": true,\n"
            + "                            \"providerRoleTypeCode\" : \"\",\n"
            + "                            \"firstName\" : \"\",\n"
            + "                            \"lastName\" : \"\",\n"
            + "                            \"city\" : \"\",\n"
            + "                            \"qualifications\" : [\"A01\"],\n"
            + "                            \"gender\" : \"\"\n"
            + "             },\n"
            + "             \"registryUserOrgId\": \"jwiebe\",\n"
            + "             \"isTransactionSuccess\": false,\n"
            + "\n"
            + "        \"uniqueMessageId\": \"879werhigsdfh\",\n"
            + "        \"sourceServer\": \"source server\",\n"
            + "        \"messageCreationTime\": \"2015-12-10T00:00:00\",\n"
            + "        \"messageInteractionId\": \"hello interaction\",\n"
            + "        \"version\": \"hello version\",\n"
            + "        \"sourceUserId\" : \"shouldntmatter\",\n"
            + "        \"responsiblePersonUserId\" : \"smatter\"\n"
            + "\n"
            + "\n"
            + "\n"
            + "}";

    String CITY = "{\n"
            + "             \"queryParameters\": {\n"
            + "                            \"historyFlag\": true,\n"
            + "                            \"providerRoleTypeCode\" : \"\",\n"
            + "                            \"firstName\" : \"\",\n"
            + "                            \"lastName\" : \"\",\n"
            + "                            \"city\" : \"Delta\",\n"
            + "                            \"qualifications\" : [],\n"
            + "                            \"gender\" : \"\"\n"
            + "             },\n"
            + "             \"registryUserOrgId\": \"jwiebe\",\n"
            + "             \"isTransactionSuccess\": false,\n"
            + "\n"
            + "        \"uniqueMessageId\": \"879werhigsdfh\",\n"
            + "        \"sourceServer\": \"source server\",\n"
            + "        \"messageCreationTime\": \"2015-12-10T00:00:00\",\n"
            + "        \"messageInteractionId\": \"hello interaction\",\n"
            + "        \"version\": \"hello version\",\n"
            + "        \"sourceUserId\" : \"shouldntmatter\",\n"
            + "        \"responsiblePersonUserId\" : \"smatter\"\n"
            + "\n"
            + "\n"
            + "\n"
            + "}";

    String CITY_WILDCARD_FAILS = "{\n"
            + "             \"queryParameters\": {\n"
            + "                            \"historyFlag\": true,\n"
            + "                            \"providerRoleTypeCode\" : \"\",\n"
            + "                            \"firstName\" : \"\",\n"
            + "                            \"lastName\" : \"\",\n"
            + "                            \"city\" : \"De*lta\",\n"
            + "                            \"qualifications\" : [],\n"
            + "                            \"gender\" : \"\"\n"
            + "             },\n"
            + "             \"registryUserOrgId\": \"jwiebe\",\n"
            + "             \"isTransactionSuccess\": false,\n"
            + "\n"
            + "        \"uniqueMessageId\": \"879werhigsdfh\",\n"
            + "        \"sourceServer\": \"source server\",\n"
            + "        \"messageCreationTime\": \"2015-12-10T00:00:00\",\n"
            + "        \"messageInteractionId\": \"hello interaction\",\n"
            + "        \"version\": \"hello version\",\n"
            + "        \"sourceUserId\" : \"shouldntmatter\",\n"
            + "        \"responsiblePersonUserId\" : \"smatter\"\n"
            + "\n"
            + "\n"
            + "\n"
            + "}";

    String GENDER_F = "{\n"
            + "             \"queryParameters\": {\n"
            + "                            \"historyFlag\": true,\n"
            + "                            \"providerRoleTypeCode\" : \"\",\n"
            + "                            \"firstName\" : \"\",\n"
            + "                            \"lastName\" : \"\",\n"
            + "                            \"city\" : \"\",\n"
            + "                            \"qualifications\" : [],\n"
            + "                            \"gender\" : \"F\"\n"
            + "             },\n"
            + "             \"registryUserOrgId\": \"jwiebe\",\n"
            + "             \"isTransactionSuccess\": false,\n"
            + "\n"
            + "        \"uniqueMessageId\": \"879werhigsdfh\",\n"
            + "        \"sourceServer\": \"source server\",\n"
            + "        \"messageCreationTime\": \"2015-12-10T00:00:00\",\n"
            + "        \"messageInteractionId\": \"hello interaction\",\n"
            + "        \"version\": \"hello version\",\n"
            + "        \"sourceUserId\" : \"shouldntmatter\",\n"
            + "        \"responsiblePersonUserId\" : \"smatter\"\n"
            + "\n"
            + "\n"
            + "\n"
            + "}";

    String GENDER_INVALID = "{\n"
            + "             \"queryParameters\": {\n"
            + "                            \"historyFlag\": true,\n"
            + "                            \"providerRoleTypeCode\" : \"\",\n"
            + "                            \"firstName\" : \"\",\n"
            + "                            \"lastName\" : \"\",\n"
            + "                            \"city\" : \"Delta\",\n"
            + "                            \"qualifications\" : [],\n"
            + "                            \"gender\" : \"y\"\n"
            + "             },\n"
            + "             \"registryUserOrgId\": \"jwiebe\",\n"
            + "             \"isTransactionSuccess\": false,\n"
            + "\n"
            + "        \"uniqueMessageId\": \"879werhigsdfh\",\n"
            + "        \"sourceServer\": \"source server\",\n"
            + "        \"messageCreationTime\": \"2015-12-10T00:00:00\",\n"
            + "        \"messageInteractionId\": \"hello interaction\",\n"
            + "        \"version\": \"hello version\",\n"
            + "        \"sourceUserId\" : \"shouldntmatter\",\n"
            + "        \"responsiblePersonUserId\" : \"smatter\"\n"
            + "\n"
            + "\n"
            + "\n"
            + "}";

    String EMPTY = "{\n"
            + "             \"queryParameters\": {\n"
            + "                            \"historyFlag\": true,\n"
            + "                            \"providerRoleTypeCode\" : \"\",\n"
            + "                            \"firstName\" : \"\",\n"
            + "                            \"lastName\" : \"\",\n"
            + "                            \"city\" : \"\",\n"
            + "                            \"qualifications\" : [],\n"
            + "                            \"gender\" : \"\"\n"
            + "             },\n"
            + "             \"registryUserOrgId\": \"jwiebe\",\n"
            + "             \"isTransactionSuccess\": false,\n"
            + "\n"
            + "        \"uniqueMessageId\": \"879werhigsdfh\",\n"
            + "        \"sourceServer\": \"source server\",\n"
            + "        \"messageCreationTime\": \"2015-12-10T00:00:00\",\n"
            + "        \"messageInteractionId\": \"hello interaction\",\n"
            + "        \"version\": \"hello version\",\n"
            + "        \"sourceUserId\" : \"shouldntmatter\",\n"
            + "        \"responsiblePersonUserId\" : \"smatter\"\n"
            + "\n"
            + "\n"
            + "\n"
            + "}";

    String EXPERTISE = "{\n"
            + "             \"queryParameters\": {\n"
            + "                            \"historyFlag\": true,\n"
            + "                            \"providerRoleTypeCode\" : \"\",\n"
            + "                            \"firstName\" : \"\",\n"
            + "                            \"lastName\" : \"\",\n"
            + "                            \"city\" : \"\",\n"
            + "                            \"qualifications\" : [\"ERN12\", \"ERN11\"],\n"
            + "                            \"gender\" : \"\"\n"
            + "             },\n"
            + "             \"registryUserOrgId\": \"jwiebe\",\n"
            + "             \"isTransactionSuccess\": false,\n"
            + "\n"
            + "        \"uniqueMessageId\": \"879werhigsdfh\",\n"
            + "        \"sourceServer\": \"source server\",\n"
            + "        \"messageCreationTime\": \"2015-12-10T00:00:00\",\n"
            + "        \"messageInteractionId\": \"hello interaction\",\n"
            + "        \"version\": \"hello version\",\n"
            + "        \"sourceUserId\" : \"shouldntmatter\",\n"
            + "        \"responsiblePersonUserId\" : \"smatter\"\n"
            + "\n"
            + "\n"
            + "\n"
            + "}";
}