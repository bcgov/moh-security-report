/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.provider.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.ejb.entity.GrsIdentifiers;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.provider.ProviderTestDataBuilder;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainProviderIdentifierService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import org.junit.Assert;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import org.junit.Ignore;
import org.junit.Test;

/**
 *
 * @author ian.scott
 */
public class MaintainProviderIdentifierServiceTest extends IntegrationSetup {

    private static final String SIZE_CONSTRAINT_MESSAGE = "{javax.validation.constraints.Size.message}";
    private static final String PATTERN_ALPHA_ENGLISH_AND_NUMERIC = "{error.identifierfield.invalidcharacters}";
    private long pauthID = 2222l;
    private Long activeNo = 3157L;
    private Long activeYes = 3156L;
    private String providerChid = "11111";
    private long identifierType = 123l;
    private long dataOwnerCode = 78l;
    private String userCHID = "654l";

    /**
     * Test of valid check on Identifier
     */
    @Test
    public void testIdentifierValid_null() {
        Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        CollegeIdentifierDto newAddr = ProviderTestDataBuilder.getIdentifier();
        newAddr.setIdentifier(null);

        Set<ConstraintViolation<CollegeIdentifierDto>> violations = validator.validate(newAddr);
        Assert.assertEquals(1, violations.size());
    }

    /**
     * Test of valid check on Identifier
     */
    @Test @Ignore //space is not valid any more
    public void testIdentifierValid_space() {
        Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        ArrayList<String> expectedFailures = new ArrayList();
        expectedFailures.add(PATTERN_ALPHA_ENGLISH_AND_NUMERIC);

        CollegeIdentifierDto newAddr = ProviderTestDataBuilder.getIdentifier();
        newAddr.setIdentifier(" ");

        Set<ConstraintViolation<CollegeIdentifierDto>> violations = validator.validate(newAddr);
        Assert.assertEquals(expectedFailures.size(), violations.size());
        for (ConstraintViolation a : violations) {
            assertTrue(expectedFailures.contains(a.getMessageTemplate()));
        }
    }

    /**
     * Test of valid check on Identifier
     */
    @Test @Ignore //space is not valid any more
    public void testIdentifierValid_spaceSpace() {
        Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        ArrayList<String> expectedFailures = new ArrayList();
        expectedFailures.add(PATTERN_ALPHA_ENGLISH_AND_NUMERIC);

        CollegeIdentifierDto newAddr = ProviderTestDataBuilder.getIdentifier();
        newAddr.setIdentifier("  ");

        Set<ConstraintViolation<CollegeIdentifierDto>> violations = validator.validate(newAddr);
        Assert.assertEquals(expectedFailures.size(), violations.size());
        for (ConstraintViolation a : violations) {
            assertTrue(expectedFailures.contains(a.getMessageTemplate()));
        }
    }

    /**
     * Test of valid check on Identifier
     */
    @Test
    public void testIdentifierValid_alphaSpecial_SpecialAtEnd() {
        Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        ArrayList<String> expectedFailures = new ArrayList();
        expectedFailures.add(PATTERN_ALPHA_ENGLISH_AND_NUMERIC);

        CollegeIdentifierDto newAddr = ProviderTestDataBuilder.getIdentifier();
        newAddr.setIdentifier("a#");

        Set<ConstraintViolation<CollegeIdentifierDto>> violations = validator.validate(newAddr);
        Assert.assertEquals(expectedFailures.size(), violations.size());
        for (ConstraintViolation a : violations) {
            assertTrue(expectedFailures.contains(a.getMessageTemplate()));
        }
    }

    /**
     * Test of valid check on Identifier
     */
    @Test
    public void testIdentifierValid_numericSpecial_SpecialAtStart() {
        Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        ArrayList<String> expectedFailures = new ArrayList();
        expectedFailures.add(PATTERN_ALPHA_ENGLISH_AND_NUMERIC);

        CollegeIdentifierDto newAddr = ProviderTestDataBuilder.getIdentifier();
        newAddr.setIdentifier("@1");

        Set<ConstraintViolation<CollegeIdentifierDto>> violations = validator.validate(newAddr);
        Assert.assertEquals(expectedFailures.size(), violations.size());
        for (ConstraintViolation a : violations) {
            assertTrue(expectedFailures.contains(a.getMessageTemplate()));
        }
    }

    /**
     * Test of valid check on Identifier
     */
    @Test
    public void testIdentifierValid_onlyAlphaLower() {
        Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        ArrayList<String> expectedFailures = new ArrayList();

        CollegeIdentifierDto newAddr = ProviderTestDataBuilder.getIdentifier();
        newAddr.setIdentifier("a");

        Set<ConstraintViolation<CollegeIdentifierDto>> violations = validator.validate(newAddr);
        Assert.assertEquals(expectedFailures.size(), violations.size());
    }

    /**
     * Test of valid check on Identifier
     */
    @Test
    public void testIdentifierValid_onlyAlphaCaptial() {
        Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        ArrayList<String> expectedFailures = new ArrayList();

        CollegeIdentifierDto newAddr = ProviderTestDataBuilder.getIdentifier();
        newAddr.setIdentifier("A");

        Set<ConstraintViolation<CollegeIdentifierDto>> violations = validator.validate(newAddr);
        Assert.assertEquals(expectedFailures.size(), violations.size());
    }

    /**
     * Test of valid check on Identifier
     */
    @Test
    public void testIdentifierValid_onlyAlphaMixCase() {
        Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        ArrayList<String> expectedFailures = new ArrayList();

        CollegeIdentifierDto newAddr = ProviderTestDataBuilder.getIdentifier();
        newAddr.setIdentifier("aA");

        Set<ConstraintViolation<CollegeIdentifierDto>> violations = validator.validate(newAddr);
        Assert.assertEquals(expectedFailures.size(), violations.size());
    }

    /**
     * Test of valid check on Identifier
     */
    @Test
    public void testIdentifierValid_onlyNum() {
        Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        ArrayList<String> expectedFailures = new ArrayList();

        CollegeIdentifierDto newAddr = ProviderTestDataBuilder.getIdentifier();
        newAddr.setIdentifier("1");

        Set<ConstraintViolation<CollegeIdentifierDto>> violations = validator.validate(newAddr);
        Assert.assertEquals(expectedFailures.size(), violations.size());
    }

    /**
     * Test of valid check on Identifier
     */
    @Test
    public void testIdentifierValid_AlphaNum() {
        Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        ArrayList<String> expectedFailures = new ArrayList();

        CollegeIdentifierDto newAddr = ProviderTestDataBuilder.getIdentifier();
        newAddr.setIdentifier("a1");

        Set<ConstraintViolation<CollegeIdentifierDto>> violations = validator.validate(newAddr);
        Assert.assertEquals(expectedFailures.size(), violations.size());
    }

    /**
     * Test of valid check on Identifier
     */
    @Test
    public void testIdentifierValid_NumAlpha() {
        Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        ArrayList<String> expectedFailures = new ArrayList();

        CollegeIdentifierDto newAddr = ProviderTestDataBuilder.getIdentifier();
        newAddr.setIdentifier("1a");

        Set<ConstraintViolation<CollegeIdentifierDto>> violations = validator.validate(newAddr);
        Assert.assertEquals(expectedFailures.size(), violations.size());
    }

    /**
     * Test of valid check on Identifier
     */
    @Test
    public void testIdentifierValid_spaceThenValidCharacter() {
        Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        ArrayList<String> expectedFailures = new ArrayList();

        CollegeIdentifierDto newAddr = ProviderTestDataBuilder.getIdentifier();
        //the set method has a strip built into it
        newAddr.setIdentifier(" 1");

        Set<ConstraintViolation<CollegeIdentifierDto>> violations = validator.validate(newAddr);
        Assert.assertEquals(expectedFailures.size(), violations.size());

    }

    /**
     * Test of valid check on Identifier
     */
    @Test
    public void testIdentifierValid_ValidCharacterThenSpace() {
        Validator validator = Validation.buildDefaultValidatorFactory().getValidator();
        ArrayList<String> expectedFailures = new ArrayList();

        CollegeIdentifierDto newAddr = ProviderTestDataBuilder.getIdentifier();
        //the set method has a strip built into it
        newAddr.setIdentifier("a ");

        Set<ConstraintViolation<CollegeIdentifierDto>> violations = validator.validate(newAddr);
        Assert.assertEquals(expectedFailures.size(), violations.size());

    }

    /**
     * Test of adding a new identifer
     */
    @Test
    public void testAddIdentifier() throws EntityValidationException, BusinessRuleException {
        CollegeIdentifierDto newIdent = ProviderTestDataBuilder.getIdentifier();
        newIdent.setPauthId(12l);

        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, newIdent.getPauthId());
        List<GrsIdentifiers> originalIdents = provider.getGrsIdentifiersList();


        List<Long> originalIds = new ArrayList<>();
        for (GrsIdentifiers originalIdent : originalIdents) {
            originalIds.add(originalIdent.getPidId());
        }
        CollegeIdentifierDto result = null;
        try {
            result = maintainProviderIdentifierService.save(newIdent);
            assertNotNull(result);
        } catch (DuplicateRecordException dre) {
            assertTrue(dre.getMessage().equals(""));
        }
        assertNotNull(result);
        List<CollegeIdentifierDto> allForProvider = maintainProviderIdentifierService.refreshIdentifiers(newIdent);
        org.junit.Assert.assertEquals(allForProvider.size(), provider.getGrsIdentifiersList().size() + 1);

        for (CollegeIdentifierDto ident : allForProvider) {
            if (!originalIds.contains(ident.getId())) {
                entityManagerProxy.remove(entityManagerProxy.find(GrsIdentifiers.class, ident.getId()));
            }
        }
    }

    /**
     * Test that the duplicate record exception is thrown as expected
     */
    @Test
    public void testDuplicateException() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {
        CollegeIdentifierDto newEntity = ProviderTestDataBuilder.getIdentifier();
        newEntity.setPauthId(12l);
        CollegeIdentifierDto result = maintainProviderIdentifierService.save(newEntity);
        boolean exceptionThrown = false;
        try {
            //Should fail as a duplicate
            maintainProviderIdentifierService.save(newEntity);
        } catch (DuplicateRecordException dre) {
            exceptionThrown = true;
        } finally {
            entityManagerProxy.remove(entityManagerProxy.find(GrsIdentifiers.class, result.getId()));
        }
        assertTrue(exceptionThrown);
    }
}
