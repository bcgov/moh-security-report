/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.registry.user;

import ca.bc.gov.health.plr.dto.PartyDto;
import ca.bc.gov.health.plr.dto.provider.OrgNameDto;
import ca.bc.gov.health.plr.dto.reguser.RegistryUserDetails;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtRegUserType;
import ca.bc.gov.health.plr.ejb.entity.GrsPersonNames;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.PrsCtNameTypes;
import ca.bc.gov.health.plr.util.SpoofedUserHelper;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.codesDao;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.registryUserService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.util.DateUtils;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.naming.NamingException;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.greaterThan;
import static org.hamcrest.Matchers.is;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Before;

/**
 *
 * @author adebiyi.kuseju
 */
public class RegistryUserServiceTest extends IntegrationSetup {

    public RegistryUserServiceTest() throws NamingException {

    }

    GrsRegistryUsers user = new GrsRegistryUsers(3l);

    @Before
    public void setup() {
        SpoofedUserHelper.currentUser = "plr-reg-admin";
    }

    /**
     * Test of search method, of class RegistryUserService.
     */
    @Test
    public void testSearch_RegistrationDate() {
        RegistryUserSearchParam searchParam = new RegistryUserSearchParam();
        searchParam.setEarliestRegDate(DateUtils.getDate(1965, 1, 1));
        List result = registryUserService.search(searchParam);
        assertFalse(result.isEmpty());

    }

    @Test
    public void testSearch_UserType() {
        RegistryUserSearchParam searchParam = new RegistryUserSearchParam();
        searchParam.setRegistryUserType(codesDao.lookup(GrsCtRegUserType.class, "PSRC").getCtlId());

        List result = registryUserService.search(searchParam);
        assertFalse(result.isEmpty());

    }

    @Test
    public void testSearch_UserType_RegistrationDate() {
        RegistryUserSearchParam searchParam = new RegistryUserSearchParam();
        searchParam.setRegistryUserType(codesDao.lookup(GrsCtRegUserType.class, "PSRC").getCtlId());
        searchParam.setEarliestRegDate(DateUtils.getDate(1965, 1, 1));

        List result = registryUserService.search(searchParam);
        assertFalse(result.isEmpty());

    }

    @Test
    public void testSearchByregistryUserType_searchLogged() {
        long searchLogSize = getSearchLogCount();
        RegistryUserSearchParam param = new RegistryUserSearchParam();
        param.setRegistryUserType(1252l);
        registryUserService.search(param);
        assertEquals(searchLogSize + 1, getSearchLogCount());
    }

    @Test
    public void testSearchByregistryRegistrationDate_searchLogged() {
        long searchLogSize = getSearchLogCount();
        RegistryUserSearchParam param = new RegistryUserSearchParam();
        param.setEarliestRegDate(new Date());
        registryUserService.search(param);
        assertEquals(searchLogSize + 1, getSearchLogCount());
    }

    @Test
    public void testSearch_NoParameters() {
        RegistryUserSearchParam searchParam = new RegistryUserSearchParam();

        List result = registryUserService.search(searchParam);
        assertFalse(result.isEmpty());

    }

    @Test
    public void testSearchByRuId_validInput_withResult() {
        Long ruId = 1L;
        RegistryUserDetails result = registryUserService.searchByRuId(ruId);
        assertNotNull(result);
    }

    @Test
    public void testSearchByRuId_invalidInput_noResult() {
        Long rudId = 99985859985547525L;
        RegistryUserDetails result = registryUserService.searchByRuId(rudId);
        assertNull(result);
    }

    @Test
    public void testSearchByRuId_nullInput_noResult() {
        Long ruId = null;
        RegistryUserDetails result = null;
        try {
            result = registryUserService.searchByRuId(ruId);
        } catch (RuntimeException e) {
            //assertTrue(e.getCausedByException() instanceof NullPointerException);
        }
        assertNull(result);
    }

    @Test
    public void testUniqueNamevalidator() {
        OrgNameDto nameDto = buildOrg();
        try {
            regUserUniqueNameValidator.validate(nameDto);
        } catch (EntityValidationException ex) {
            assertTrue(!ex.getErrorMessages().isEmpty());
        }
    }

    @Test
    public void testUniqueOrgChidvalidator() {
        PartyDto partyDto = buildParty();
        try {
            regUserUniqueOrgChidValidator.validate(partyDto);
        } catch (EntityValidationException ex) {
            assertTrue(!ex.getErrorMessages().isEmpty());
        }

    }

    private long getSearchLogCount() {
        return (long) entityManagerProxy.query("select count(e) from GrsDataAccessEvents e").get(0);
    }

    private OrgNameDto buildOrg() {
        OrgNameDto nameDto = new OrgNameDto();
        nameDto.setName("Registered Nurses Association");
        nameDto.setTypeId(codesDao.lookup(PrsCtNameTypes.class, CodeTableCodes.PrsCtNameTypes.CURRENT_KNOWN_NAME).getCtlId());
        return nameDto;
    }

    private PartyDto buildParty() {
        PartyDto partyDto = new PartyDto();
        partyDto.setRegUserId("00002881");
        return partyDto;
    }

    @Test
    public void testSetActiveAttributesForAdd() {
        GrsRegistryUsers regUser = new GrsRegistryUsers();
        regUser.setGrsAddressesList(new ArrayList<GrsAddresses>() {
            {
                add(new GrsAddresses());
                add(new GrsAddresses());
            }
        });
        regUser.setGrsPersonNamesList(new ArrayList<GrsPersonNames>() {
            {
                add(new GrsPersonNames());
                add(new GrsPersonNames());
            }
        });
        regUser = registryUserService.setActiveAttributesForAdd(regUser);
        assertThat(regUser.getActiveFlag().getCtlNameCode(), is(equalTo(CodeTableCodes.GrsCtBooleanTypes.YES.getValue())));
        assertThat(regUser.getGrsAddressesList().size(), is(equalTo(2)));
        assertThat(regUser.getGrsAddressesList().get(0).getActiveFlag().getCtlNameCode(),  is(equalTo(CodeTableCodes.GrsCtBooleanTypes.YES.getValue())));
        assertThat(regUser.getGrsAddressesList().get(1).getActiveFlag().getCtlNameCode(),  is(equalTo(CodeTableCodes.GrsCtBooleanTypes.YES.getValue())));
        assertThat(regUser.getGrsPersonNamesList().size(), is(equalTo(2)));
        assertThat(regUser.getGrsPersonNamesList().get(0).getActiveFlag().getCtlNameCode(),  is(equalTo(CodeTableCodes.GrsCtBooleanTypes.YES.getValue())));
        assertThat(regUser.getGrsPersonNamesList().get(1).getActiveFlag().getCtlNameCode(),  is(equalTo(CodeTableCodes.GrsCtBooleanTypes.YES.getValue())));

    }
}
