/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.provider.security;

import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.dto.provider.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.ConditionsDto;
import ca.bc.gov.health.plr.dto.provider.ConfidentialityIndicatorDto;
import ca.bc.gov.health.plr.dto.provider.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.DisciplinaryActionDto;
import ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.NoteDto;
import ca.bc.gov.health.plr.dto.provider.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.ProviderRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.RegistryUserRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.StatusDto;
import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsOrgNames;
import ca.bc.gov.health.plr.ejb.entity.GrsPersonNames;
import ca.bc.gov.health.plr.ejb.entity.GrsTelephones;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsDisciplinaryActions;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.PrsStatuses;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import static ca.bc.gov.health.plr.rule.provider.DataColumnToDtoField.*;
import java.util.ArrayList;
import static org.junit.Assert.*;
import org.junit.Test;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.codesDao;
import ca.bc.gov.health.plr.util.SpoofedUserHelper;
import java.util.List;
import javax.naming.NamingException;
import org.junit.AfterClass;
import org.junit.BeforeClass;
/**
 *
 * @author sumesh.kariyil
 */
public class AccessRestrictionServiceTest extends IntegrationSetup{
    
    private static PrsCtProviderRoleTypes ha;
    private static PrsCtProviderRoleTypes dentist;

    @BeforeClass
    public static void setUpClass() throws NamingException {
      //  addRegUserToThread(349l);
        SpoofedUserHelper.currentUser = "plr-restricted";
        ha = codesDao.lookup(PrsCtProviderRoleTypes.class, "HA");
        dentist = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
    }
    @AfterClass
    public static void tearDown(){
     //    addRegUserToThread(289l);
         SpoofedUserHelper.currentUser = "plr-reg-admin";
    }

    
    public AccessRestrictionServiceTest() {
    }
    
    @Test
    public void testReadAccessForSearchResult() {
        PrsProviders prsProviders = mock(PrsProviders.class);
        when(prsProviders.getHptCode()).thenReturn(ha);
        ProviderDto details = new ProviderDto();
        List<AddressDto> addresses = new ArrayList<>();
        List<OrgNameDto> orgNames = new ArrayList<>();
        List<PersonNameDto> indNames = new ArrayList<>();
        details.setConditions(new ArrayList<ConditionsDto>());
        details.setConfidentialities(new ArrayList<ConfidentialityIndicatorDto>());
        details.setCredentials(new ArrayList<CredentialsDto>());
        details.setDemographicDetails(new ArrayList<DemographicDetailsDto>());
        details.setDisciplinaryActions(new ArrayList<DisciplinaryActionDto>());
        details.setElectronicAddresses(new ArrayList<ElectronicAddressDto>());
        details.setExpertise(new ArrayList<ExpertiseDto>());
        details.setIdentifiers(new ArrayList<CollegeIdentifierDto>());
        details.setIndNames(new ArrayList<PersonNameDto>());
        details.setInformationRoutes(new ArrayList<InformationRouteDto>());
        details.setProviderRelationships(new ArrayList<ProviderRelationshipDto>());
        details.setRegistryUserRelationships(new ArrayList<RegistryUserRelationshipDto>());
        details.setWorkLocationList(new ArrayList<WorkLocationDto>());
        details.setStatuses(new ArrayList<StatusDto>());
        details.setTelecommunication(new ArrayList<TelecommunicationDto>());
        details.setNotes(new ArrayList<NoteDto>());

        details.setAddresses(addresses);
        details.setOrgNames(orgNames);
        details.setIndNames(indNames);

        addresses.add(new AddressDto());
        addresses.get(0).setDataOwnerCode("ACOP");
        addresses.add(new AddressDto());
        addresses.get(1).setDataOwnerCode("MOH");

        orgNames.add(new OrgNameDto());
        orgNames.get(0).setDataOwnerCode("ACOP");
        orgNames.add(new OrgNameDto());
        orgNames.get(1).setDataOwnerCode("MOH");

        indNames.add(new PersonNameDto());
        indNames.get(0).setDataOwnerCode("ACOP");
        indNames.add(new PersonNameDto());
        indNames.get(1).setDataOwnerCode("MOH");

        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.populateReadRestrictions(details, prsProviders.getHptCode());
        assertTrue(details.getUnReadableRecords().contains("addresses"));
        assertTrue(details.getUnReadableRecords().contains("orgNames"));
        assertTrue(details.getUnReadableRecords().contains("indNames"));
    }
    
    @Test
    public void testReadAccessWorkLocationForSearchResult(){
        PrsProviders prsProviders = mock(PrsProviders.class);
        when(prsProviders.getHptCode()).thenReturn(ha);
        ProviderDto details = new ProviderDto();
        List<WorkLocationDto> workLocationDtos = new ArrayList<>();
        details.setWorkLocationList(workLocationDtos);
        WorkLocationDto locationDto = new WorkLocationDto();
        workLocationDtos.add(locationDto);
        locationDto.setDataOwnerCode("MOH");
        List<AddressDto> addresses = new ArrayList<>();
        List<TelecommunicationDto> telephones = new ArrayList<>();
        List<ElectronicAddressDto> eAddresses = new ArrayList<>();
        List<WorkLocationDetailsDto> wlDetails = new ArrayList<>();
        details.setAddresses(new ArrayList<AddressDto>());
        details.setOrgNames(new ArrayList<OrgNameDto>());
        details.setIndNames(new ArrayList<PersonNameDto>());
        details.setConditions(new ArrayList<ConditionsDto>());
        details.setConfidentialities(new ArrayList<ConfidentialityIndicatorDto>());
        details.setCredentials(new ArrayList<CredentialsDto>());
        details.setDemographicDetails(new ArrayList<DemographicDetailsDto>());
        details.setDisciplinaryActions(new ArrayList<DisciplinaryActionDto>());
        details.setElectronicAddresses(new ArrayList<ElectronicAddressDto>());
        details.setExpertise(new ArrayList<ExpertiseDto>());
        details.setIdentifiers(new ArrayList<CollegeIdentifierDto>());
        details.setIndNames(new ArrayList<PersonNameDto>());
        details.setInformationRoutes(new ArrayList<InformationRouteDto>());
        details.setProviderRelationships(new ArrayList<ProviderRelationshipDto>());
        details.setRegistryUserRelationships(new ArrayList<RegistryUserRelationshipDto>());
        details.setStatuses(new ArrayList<StatusDto>());
        details.setTelecommunication(new ArrayList<TelecommunicationDto>());
        details.setNotes(new ArrayList<NoteDto>());

        locationDto.setAddresses(addresses);
        locationDto.setTelecommunications(telephones);
        locationDto.setElectronicAddresses(eAddresses);
        locationDto.setWorkLocationDetails(wlDetails);
        locationDto.setInformationRoutes(new ArrayList<InformationRouteDto>());
        
        addresses.add(new AddressDto());
        addresses.get(0).setDataOwnerCode("ACOP");
        addresses.add(new AddressDto());
        addresses.get(1).setDataOwnerCode("MOH");
        
        
        telephones.add(new TelecommunicationDto());
        telephones.get(0).setDataOwnerCode("ACOP");
        telephones.add(new TelecommunicationDto());
        telephones.get(1).setDataOwnerCode("MOH");
        
        
        eAddresses.add(new ElectronicAddressDto());
        eAddresses.get(0).setDataOwnerCode("ACOP");
        eAddresses.add(new ElectronicAddressDto());
        eAddresses.get(1).setDataOwnerCode("MOH");
        
        wlDetails.add(new WorkLocationDetailsDto());
        wlDetails.get(0).setDataOwnerCode("ACOP");
        wlDetails.add(new WorkLocationDetailsDto());
        wlDetails.get(1).setDataOwnerCode("MOH");
        
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.populateReadRestrictions(details, prsProviders.getHptCode());
        assertTrue(details.getWorkLocationList().get(0).getUnReadableRecords().contains("addresses"));
//        assertTrue(details.getWorkLocationList().get(0).getUnReadableRecords().contains("workLocationDetails"));
        assertTrue(details.getWorkLocationList().get(0).getUnReadableRecords().contains("telecommunications"));
        assertTrue(details.getWorkLocationList().get(0).getUnReadableRecords().contains("electronicAddresses"));
    }
    
    @Test
    public void testReadAccessForAddress_ShouldReturnAllRecords(){
        List<AddressDto> addresses = new ArrayList<>();
        addresses.add(new AddressDto());
        addresses.get(0).setDataOwnerCode("ACOP");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(addresses, dentist, GrsAddresses.class);
        assertTrue(addresses.size() == 1);        
    }
    
    @Test
    public void testReadAccessForAddress_ShouldReturnOnlyOneRecord(){
        List<AddressDto> addresses = new ArrayList<>();
        addresses.add(new AddressDto());
        addresses.get(0).setDataOwnerCode("ACOP");
        addresses.add(new AddressDto());
        addresses.get(1).setDataOwnerCode("MOH");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(addresses, dentist, GrsAddresses.class);
        assertTrue(addresses.size() == 1);        
    }
    
    @Test
    public void testReadAccessForAddress_ShouldReturnNoRecords(){
        List<AddressDto> addresses = new ArrayList<>();
        addresses.add(new AddressDto());
        addresses.get(0).setDataOwnerCode("TEST");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(addresses, dentist, GrsAddresses.class);
        assertTrue(addresses.isEmpty());        
    }
    
    @Test
    public void testReadAccessForOrgNames_ShouldReturnAllRecords(){
        List<OrgNameDto> orgNames = new ArrayList<>();
        orgNames.add(new OrgNameDto());
        orgNames.get(0).setDataOwnerCode("ACOP");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(orgNames, dentist, GrsOrgNames.class);
        assertTrue(orgNames.size() == 1);        
    }
    
    @Test
    public void testReadAccessForOrgNames_ShouldReturnOnlyOneRecord(){
        List<OrgNameDto> orgNames = new ArrayList<>();
        orgNames.add(new OrgNameDto());
        orgNames.get(0).setDataOwnerCode("ACOP");
        orgNames.add(new OrgNameDto());
        orgNames.get(1).setDataOwnerCode("MOH");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(orgNames, dentist, GrsOrgNames.class);
        assertTrue(orgNames.size() == 1);        
    }
    
    @Test
    public void testReadAccessForOrgNames_ShouldReturnNoRecords(){
        List<OrgNameDto> orgNames = new ArrayList<>();
        orgNames.add(new OrgNameDto());
        orgNames.get(0).setDataOwnerCode("TEST");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(orgNames, dentist, GrsOrgNames.class);
        assertTrue(orgNames.isEmpty());        
    }
    
    @Test
    public void testReadAccessForPersonaNames_ShouldReturnAllRecords(){
        List<PersonNameDto> indNames = new ArrayList<>();
        indNames.add(new PersonNameDto());
        indNames.get(0).setDataOwnerCode("ACOP");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(indNames, dentist, GrsPersonNames.class);
        assertTrue(indNames.size() == 1);        
    }
    
    @Test
    public void testReadAccessForPersonNames_ShouldReturnOnlyOneRecord(){
        List<PersonNameDto> indNames = new ArrayList<>();
        indNames.add(new PersonNameDto());
        indNames.get(0).setDataOwnerCode("ACOP");
        indNames.add(new PersonNameDto());
        indNames.get(1).setDataOwnerCode("MOH");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(indNames, dentist, GrsPersonNames.class);
        assertTrue(indNames.size() == 1);        
    }
    
    @Test
    public void testReadAccessForPersonNames_ShouldReturnNoRecords(){
        List<PersonNameDto> indNames = new ArrayList<>();
        indNames.add(new PersonNameDto());
        indNames.get(0).setDataOwnerCode("TEST");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(indNames, dentist, GrsPersonNames.class);
        assertTrue(indNames.isEmpty());        
    }
    
    @Test
    public void testReadAccessForTelephones_ShouldReturnAllRecords(){
        List<TelecommunicationDto> telephones = new ArrayList<>();
        telephones.add(new TelecommunicationDto());
        telephones.get(0).setDataOwnerCode("ACOP");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(telephones, dentist, GrsTelephones.class);
        assertTrue(telephones.size() == 1);        
    }
    
    @Test
    public void testReadAccessForTelephones_ShouldReturnOnlyOneRecord(){
        List<TelecommunicationDto> telephones = new ArrayList<>();
        telephones.add(new TelecommunicationDto());
        telephones.get(0).setDataOwnerCode("ACOP");
        telephones.add(new TelecommunicationDto());
        telephones.get(1).setDataOwnerCode("MOH");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(telephones, dentist, GrsTelephones.class);
        assertTrue(telephones.size() == 1);        
    }
    
    @Test
    public void testReadAccessForTelephones_ShouldReturnNoRecords(){
        List<TelecommunicationDto> telephones = new ArrayList<>();
        telephones.add(new TelecommunicationDto());
        telephones.get(0).setDataOwnerCode("TEST");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(telephones, dentist, PrsStatuses.class);
        assertTrue(telephones.isEmpty());        
    }
    
    @Test
    public void testReadAccessForStatuses_ShouldReturnAllRecords(){
        List<StatusDto> statuses = new ArrayList<>();
        statuses.add(new StatusDto());
        statuses.get(0).setDataOwnerCode("MOH");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(statuses, ha, PrsStatuses.class);
        assertTrue(statuses.size() == 1);        
    }
    
    @Test
    public void testReadAccessForStatuses_ShouldReturnOnlyOneRecord(){
        List<StatusDto> statuses = new ArrayList<>();
        statuses.add(new StatusDto());
        statuses.get(0).setDataOwnerCode("ACOP");
        statuses.add(new StatusDto());
        statuses.get(1).setDataOwnerCode("MOH");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(statuses, ha, PrsStatuses.class);
        assertTrue(statuses.size() == 1);        
    }
    
    @Test
    public void testReadAccessForStatuses_RecordTypeShouldReturnNoRecord(){
        List<StatusDto> statuses = new ArrayList<>();
        statuses.add(new StatusDto());
        statuses.get(0).setDataOwnerCode("HA3");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(statuses, dentist, PrsStatuses.class);
        assertTrue(statuses.isEmpty());        
    }
    
    
    
    @Test
    public void testReadAccessForStatuses_ShouldReturnNoRecords(){
        List<StatusDto> statuses = new ArrayList<>();
        statuses.add(new StatusDto());
        statuses.get(0).setDataOwnerCode("TEST");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(statuses, dentist, PrsStatuses.class);
        assertTrue(statuses.isEmpty());        
    }
    
    @Test
    public void testReadAccessForDisciplinaryActions_ShouldReturnAllRecords(){
        List<DisciplinaryActionDto> actions = new ArrayList<>();
        actions.add(new DisciplinaryActionDto());
        actions.get(0).setDataOwnerCode("ACOP");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(actions, dentist, PrsDisciplinaryActions.class);
        assertTrue(actions.size() == 1);        
    }
    
    @Test
    public void testReadAccessForDisciplinaryActions_ShouldReturnOnlyOneRecord(){
        List<DisciplinaryActionDto> actions = new ArrayList<>();
        actions.add(new DisciplinaryActionDto());
        actions.get(0).setDataOwnerCode("ACOP");
        actions.add(new DisciplinaryActionDto());
        actions.get(1).setDataOwnerCode("MOH");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(actions, dentist, PrsDisciplinaryActions.class);
        assertTrue(actions.size() == 1);        
    }
    
    @Test
    public void testReadAccessForDisciplinaryActions_ShouldReturnNoRecords(){
        List<DisciplinaryActionDto> actions = new ArrayList<>();
        actions.add(new DisciplinaryActionDto());
        actions.get(0).setDataOwnerCode("TEST");
        //Reg User 349 has got read access to ACOP-DEN and MOH-HA
        accessRestrictionService.applyReadRestriction(actions, dentist, PrsDisciplinaryActions.class);
        assertTrue(actions.isEmpty());        
    }
    
    @Test
    public void testAllReadPermissionsforDemographic(){
        ProviderDto details = new ProviderDto();
        details.setDemographicDetails(new ArrayList<DemographicDetailsDto>());
        details.getDemographicDetails().add(new DemographicDetailsDto());
        details.getDemographicDetails().get(0).setDataOwnerCode("MOH");
        PrsProviders prsProviders = mock(PrsProviders.class);
        when(prsProviders.getHptCode()).thenReturn(ha);
        accessRestrictionService.populateColumnRestrictions( details, prsProviders.getHptCode(), false);
        assertTrue(details.getDemographicDetails().get(0).getAccessRestrictionData().getUnreadables().isEmpty());
        assertTrue(details.getDemographicDetails().get(0).getAccessRestrictionData().getUnwritables().isEmpty());
    }
    
    @Test
    public void testAllReadFalsePermissionsforDemographic(){
        ProviderDto details = new ProviderDto();
        details.setDemographicDetails(new ArrayList<DemographicDetailsDto>());
        details.getDemographicDetails().add(new DemographicDetailsDto());
        details.getDemographicDetails().get(0).setDataOwnerCode("ACOP");
        PrsProviders prsProviders = mock(PrsProviders.class);
        when(prsProviders.getHptCode()).thenReturn(dentist);
        accessRestrictionService.populateColumnRestrictions( details, prsProviders.getHptCode(), false);
        assertTrue(details.getDemographicDetails().get(0).getAccessRestrictionData().getUnreadables().contains(DATE_OF_DEATH_DATE.getFieldName()));
    }
    
    @Test
    public void testAllReadPermissionsforStatuses(){
        ProviderDto details = new ProviderDto();
        details.setStatuses(new ArrayList<StatusDto>());
        details.getStatuses().add(new StatusDto());
        details.getStatuses().get(0).setDataOwnerCode("MOH");
        PrsProviders prsProviders = mock(PrsProviders.class);
        when(prsProviders.getHptCode()).thenReturn(ha);
        accessRestrictionService.populateColumnRestrictions( details, prsProviders.getHptCode(), false);
        assertTrue(details.getStatuses().get(0).getAccessRestrictionData().getUnreadables().isEmpty());
        assertTrue(details.getStatuses().get(0).getAccessRestrictionData().getUnwritables().isEmpty());
    }
    
    @Test
    public void testAllReadFalsePermissionsforStatus(){
        ProviderDto details = new ProviderDto();
        details.setStatuses(new ArrayList<StatusDto>());
        details.getStatuses().add(new StatusDto());
        details.getStatuses().get(0).setDataOwnerCode("ACOP");
        PrsProviders prsProviders = mock(PrsProviders.class);
        when(prsProviders.getHptCode()).thenReturn(dentist);
        accessRestrictionService.populateColumnRestrictions( details, prsProviders.getHptCode(), false);
        assertTrue(details.getStatuses().get(0).getAccessRestrictionData().getUnreadables().contains(STATUS_TYPE_CODE.getFieldName()));
    }
    
}
