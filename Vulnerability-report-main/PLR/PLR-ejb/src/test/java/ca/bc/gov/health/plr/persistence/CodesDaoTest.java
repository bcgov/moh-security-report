package ca.bc.gov.health.plr.persistence;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCommunPurposeTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtIdentifierTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtJurisdictions;
import ca.bc.gov.health.plr.ejb.entity.PrsCtNameTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvCredentialTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvExpertiseTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusClassCodes;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.codesDao;
import java.util.ArrayList;
import java.util.List;
import javax.ejb.EJBException;
import org.hamcrest.Matchers;
import static org.junit.Assert.*;
import org.junit.Ignore;
import org.junit.Test;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class CodesDaoTest extends IntegrationSetup {

    @Test
    public void testLookup_N() {
        String ctlNameCode = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.NO).getCtlNameCode();
        assertEquals("N", ctlNameCode);
    }

    @Test
    public void testLookup_Y() {
        String ctlNameCode = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES).getCtlNameCode();
        assertEquals("Y", ctlNameCode);
    }

    @Test
    public void testLookup_CURR() {
        String ctlNameCode = codesDao.lookup(PrsCtNameTypes.class, CodeTableCodes.PrsCtNameTypes.CURRENT_KNOWN_NAME).getCtlNameCode();
        assertEquals("CURR", ctlNameCode);
    }

    @Test
    public void testLookup_CRED() {
        String ctlNameCode = codesDao.lookup(PrsCtNameTypes.class, CodeTableCodes.PrsCtNameTypes.CREDENTIAL_NAME).getCtlNameCode();
        assertEquals("CRED", ctlNameCode);
    }

    @Test
    @Ignore  // Test needs to be fixed to reflect fropping support for * in user permission
    public void testFindAllowedUsedIdentifierTypeCodes_userHasAllPermissions_comparedToSomePermissions() {
        // Reg user 1 is RU_TYPE_CODE RA, party 1. Permissions on *, HA.
        GrsRegistryUsers regUser = new GrsRegistryUsers(1l);
        List<PrsCtIdentifierTypes> allResults = codesDao.getIdentifierTypesForSearch(regUser);

        // Reg user 2 is RU_TYPE_CODE PRSC, party 2. Permissions on MD and DEN.
        regUser = new GrsRegistryUsers(2l);
        List<PrsCtIdentifierTypes> someResults = codesDao.getIdentifierTypesForSearch(regUser);

        assertThat(allResults.size(), Matchers.greaterThan(someResults.size()));
    }

    @Test
    public void testLookup_Jurisdiction() {
        PrsCtJurisdictions jurisdiction = codesDao.lookup(PrsCtJurisdictions.class, "BC");
        assertNotNull(jurisdiction);
        assertEquals("British Columbia", jurisdiction.getCtlDescTxt());

        jurisdiction = codesDao.lookup(PrsCtJurisdictions.class, "AB");
        assertNotNull(jurisdiction);
        assertEquals("Alberta", jurisdiction.getCtlDescTxt());
    }

    @Test(expected = EJBException.class)
    public void testLookup_Exception() {
        codesDao.lookup(PrsCtJurisdictions.class, "BB");
    }

    @Test
    public void testGetApplicableExpertiseTypes_PHARM() {
        // 2751 is PHARM on WEB9D.
        Long providerRoleTypeId = 2751l;
        List<PrsCtProvExpertiseTypes> expertiseTypes = codesDao.getApplicableExpertiseTypes(providerRoleTypeId);
        assertFalse(expertiseTypes.isEmpty());
        for (PrsCtProvExpertiseTypes prsCtProvExpertiseTypes : expertiseTypes) {
            String actualRoleType = prsCtProvExpertiseTypes.getProvRoleType();
            String expectedRoleType = "PHARM";
            String errorMessage = String.format("PROV_ROLE_TYPE='%s' does not contain '%s'", actualRoleType, expectedRoleType);
            if (actualRoleType != null && actualRoleType.compareToIgnoreCase(Consts.LANG) != 0) {
                assertTrue(errorMessage, actualRoleType.contains(expectedRoleType));
            }
        }
    }

    @Test
    public void testGetApplicableExpertiseTypes_HA_empty() {
        // 5490 is HA on WEB9D.
        Long providerRoleTypeId = 5490l;
        List<PrsCtProvExpertiseTypes> expertiseTypes = codesDao.getApplicableExpertiseTypes(providerRoleTypeId);
        List<PrsCtProvExpertiseTypes> expertiseTypeListExcludeLanguage = new ArrayList<>();
        for (PrsCtProvExpertiseTypes provExpertiseType : expertiseTypes) {
            if (provExpertiseType.getProvRoleType() != null && provExpertiseType.getProvRoleType().compareToIgnoreCase(Consts.LANG) != 0) {
                expertiseTypeListExcludeLanguage.add(provExpertiseType);
            }
        }
        assertTrue(expertiseTypeListExcludeLanguage.isEmpty());
    }

    @Test
    public void testGetApplicableIdentifiers() {
        // 4248 is PCP on WEB9D.
        Long providerRoleTypeId = 4248l;
        List<PrsCtIdentifierTypes> identifierTypes = codesDao.getApplicableIdentifierTypes(providerRoleTypeId);
        assertFalse(identifierTypes.isEmpty());
        for (PrsCtIdentifierTypes identifierType : identifierTypes) {
            String actualRoleType = identifierType.getProvRoleType();
            String expectedRoleType = "PCP";
            String errorMessage = String.format("PROV_ROLE_TYPE='%s' does not contain '%s'", actualRoleType, expectedRoleType);
            if (actualRoleType != null) {
                assertTrue(errorMessage, actualRoleType.contains(expectedRoleType));
            }
        }
    }

    @Test
    public void testGetApplicableCredentials() {
        // 3241 is DEN on WEB9D.
        Long providerRoleTypeId = 3241l;
        List<PrsCtProvCredentialTypes> credentialTypes = codesDao.getApplicableCredentials(providerRoleTypeId);
        assertFalse(credentialTypes.isEmpty());
        for (PrsCtProvCredentialTypes type : credentialTypes) {
            String actualRoleType = type.getProvRoleType();
            String expectedRoleType = "DEN";
            String errorMessage = String.format("PROV_ROLE_TYPE='%s' does not contain '%s'", actualRoleType, expectedRoleType);
            if (actualRoleType != null) {
                assertTrue(errorMessage, actualRoleType.contains(expectedRoleType));
            }
        }
    }

    @Test
    public void testGetAllowedAllAddProviderRoleTypes_readOnly() {
        // Registry user 5 has read permissions on MDs; they have no other permissions.
        List<PrsCtProviderRoleTypes> allowedAddProviderTypes = codesDao.getProviderRoleTypeForAdd(new GrsRegistryUsers(5l));
        assertThat(allowedAddProviderTypes, Matchers.empty());
    }

    @Test
    public void testGetAllowedIdentifierTypes_apg1_allTypes() {
        // Reg user 6 is in APG 1, which has almost all permissions. Applies to DEN, MD, and RN.
        GrsRegistryUsers regUser = new GrsRegistryUsers(6l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        List<PrsCtIdentifierTypes> identiferTypes = codesDao.getIdentifierTypesForAdd(regUser, hptCode);
        assertEquals(37, identiferTypes.size());
    }

    @Test
    public void testGetAllowedIdentifierTypes_apg7_someTypes() {
        // Reg user 8 is in APG 7, which is restricted to certain record types. Applies to DEN.
        GrsRegistryUsers regUser = new GrsRegistryUsers(8l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        List<PrsCtIdentifierTypes> identiferTypes = codesDao.getIdentifierTypesForAdd(regUser, hptCode);
        assertEquals(2, identiferTypes.size());
        PrsCtIdentifierTypes cregId = codesDao.lookup(PrsCtIdentifierTypes.class, "ACPID");
        PrsCtIdentifierTypes denId = codesDao.lookup(PrsCtIdentifierTypes.class, "DENID");
        assertTrue(identiferTypes.contains(cregId));
        assertTrue(identiferTypes.contains(denId));
    }

    @Test
    public void testGetAllowedIdentifierTypes_apg2_noTypes() {
        // Reg user 4 is in APG 2, which has read permissions only. Applies to MD.
        GrsRegistryUsers regUser = new GrsRegistryUsers(4l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        List<PrsCtIdentifierTypes> identiferTypes = codesDao.getIdentifierTypesForAdd(regUser, hptCode);
        assertTrue(identiferTypes.isEmpty());
    }

    @Test
    public void testGetAllowedStatusClasses_apg1_allTypes() {
        // Reg user 6 is in APG 1, which has almost all permissions. Applies to DEN, MD, and RN.
        GrsRegistryUsers regUser = new GrsRegistryUsers(6l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        List<PrsCtStatusClassCodes> identiferTypes = codesDao.getStatusClassesForAdd(regUser, hptCode);
        assertEquals(2, identiferTypes.size());
        PrsCtStatusClassCodes ae = codesDao.lookup(PrsCtStatusClassCodes.class, CodeTableCodes.PrsCtStatusClassCodes.ASSIGNED_ENTITY);
        PrsCtStatusClassCodes lic = codesDao.lookup(PrsCtStatusClassCodes.class, CodeTableCodes.PrsCtStatusClassCodes.LICENSURE);
        assertTrue(identiferTypes.contains(ae));
        assertTrue(identiferTypes.contains(lic));
    }

    @Test
    public void testGetAllowedStatusClasses_apg7_someTypes() {
        // Reg user 8 is in APG 7, which is restricted to certain record types. Applies to DEN.
        GrsRegistryUsers regUser = new GrsRegistryUsers(8l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        List<PrsCtStatusClassCodes> identiferTypes = codesDao.getStatusClassesForAdd(regUser, hptCode);
        assertEquals(1, identiferTypes.size());
        PrsCtStatusClassCodes ae = codesDao.lookup(PrsCtStatusClassCodes.class, CodeTableCodes.PrsCtStatusClassCodes.ASSIGNED_ENTITY);
        assertTrue(identiferTypes.contains(ae));
    }

    @Test
    public void testGetAllowedStatusClasses_apg2_noTypes() {
        // Reg user 4 is in APG 2, which has read permissions only. Applies to MD.
        GrsRegistryUsers regUser = new GrsRegistryUsers(4l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        List<PrsCtStatusClassCodes> identiferTypes = codesDao.getStatusClassesForAdd(regUser, hptCode);
        assertTrue(identiferTypes.isEmpty());
    }

    /**
     * Test of testGetAllowedAddressCommunicationPurposeTypes_apg1_allTypes method fails assertEquals 
     * and currently local unit test database has additional records for Facility Contact 'FC'.
     * @throws java.lang.AssertionError: expected:<7> but was:<8>
     */
    @Test
    @Ignore
    public void testGetAllowedAddressCommunicationPurposeTypes_apg1_allTypes() {
        // Reg user 6 is in APG 1, which has almost all permissions. Applies to DEN, MD, and RN.
        GrsRegistryUsers regUser = new GrsRegistryUsers(6l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        List<PrsCtCommunPurposeTypes> communicationPurposeTypes = codesDao.getAddressPurposeTypesForAdd(regUser, hptCode);
        assertEquals(7, communicationPurposeTypes.size()); //size to be changed to '8' after Facility implementation
    }

    @Test
    public void testGetAllowedAddressCommunicationPurposeTypes_apg7_someTypes() {
        // Reg user 8 is in APG 7, which is restricted to certain record types. Applies to DEN.
        GrsRegistryUsers regUser = new GrsRegistryUsers(8l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        List<PrsCtCommunPurposeTypes> communicationPurposeTypes = codesDao.getAddressPurposeTypesForAdd(regUser, hptCode);
        assertEquals(2, communicationPurposeTypes.size());
        PrsCtCommunPurposeTypes bc = codesDao.lookup(PrsCtCommunPurposeTypes.class, CodeTableCodes.PrsCtCommunPurposeTypes.BUSINESS_CONTACT);
        PrsCtCommunPurposeTypes cc = codesDao.lookup(PrsCtCommunPurposeTypes.class, CodeTableCodes.PrsCtCommunPurposeTypes.COLLEGE_CONTACT);
        assertTrue(communicationPurposeTypes.contains(bc));
        assertTrue(communicationPurposeTypes.contains(cc));
    }

    @Test
    public void testGetAllowedAddressCommunicationPurposeTypes_apg2_noTypes() {
        // Reg user 4 is in APG 2, which has read permissions only. Applies to MD.
        GrsRegistryUsers regUser = new GrsRegistryUsers(4l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "MD");
        List<PrsCtCommunPurposeTypes> communicationPurposeTypes = codesDao.getAddressPurposeTypesForAdd(regUser, hptCode);
        assertTrue(communicationPurposeTypes.isEmpty());
    }

    @Test
    public void testGetAllowedCredentialTypes_apg1_allTypes() {
        // Reg user 6 is in APG 1, which has almost all permissions. Applies to DEN, MD, and RN.
        GrsRegistryUsers regUser = new GrsRegistryUsers(6l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        List<PrsCtProvCredentialTypes> credentialTypes = codesDao.getCredentialTypesForAdd(regUser, hptCode);
        assertEquals(28, credentialTypes.size());
    }

    @Test
    public void testGetAllowedCredentialTypes_apg7_someTypes() {
        // Reg user 8 is in APG 7, which is restricted to certain record types. Applies to DEN.
        GrsRegistryUsers regUser = new GrsRegistryUsers(8l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        List<PrsCtProvCredentialTypes> credentialTypes = codesDao.getCredentialTypesForAdd(regUser, hptCode);
        assertEquals(2, credentialTypes.size());
        PrsCtProvCredentialTypes bds = codesDao.lookup(PrsCtProvCredentialTypes.class, "BDS");
        PrsCtProvCredentialTypes dmd = codesDao.lookup(PrsCtProvCredentialTypes.class, "DMD");
        assertTrue(credentialTypes.contains(bds));
        assertTrue(credentialTypes.contains(dmd));
    }

    @Test
    public void testGetAllowedCredentialTypes_apg2_noTypes() {
        // Reg user 4 is in APG 2, which has read permissions only. Applies to MD.
        GrsRegistryUsers regUser = new GrsRegistryUsers(4l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "MD");
        List<PrsCtProvCredentialTypes> credentialTypes = codesDao.getCredentialTypesForAdd(regUser, hptCode);
        assertTrue(credentialTypes.isEmpty());
    }

    @Test
    public void testGetAllowedExpertiseTypes_apg1_allTypes() {
        // Reg user 6 is in APG 1, which has almost all permissions. Applies to DEN, MD, and RN.
        GrsRegistryUsers regUser = new GrsRegistryUsers(6l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        List<PrsCtProviderRoleTypes> provRoleTypes = codesDao.getExpertiseTypesForAdd(regUser, hptCode);
        assertEquals(39, provRoleTypes.size()); // added new OOP roles
    }

    @Test
    public void testGetAllowedExpertiseTypes_apg7_someTypes() {
        // Reg user 8 is in APG 7, which is restricted to certain record types. Applies to DEN.
        GrsRegistryUsers regUser = new GrsRegistryUsers(8l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        List<PrsCtProviderRoleTypes> provRoleTypes = codesDao.getExpertiseTypesForAdd(regUser, hptCode);
        assertEquals(2, provRoleTypes.size());
        PrsCtProviderRoleTypes md = codesDao.lookup(PrsCtProviderRoleTypes.class, "MD");
        PrsCtProviderRoleTypes den = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        assertTrue(provRoleTypes.contains(md));
        assertTrue(provRoleTypes.contains(den));
    }

    @Test
    public void testGetAllowedExpertiseTypes_apg2_noTypes() {
        // Reg user 4 is in APG 2, which has read permissions only. Applies to MD.
        GrsRegistryUsers regUser = new GrsRegistryUsers(4l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "MD");
        List<PrsCtProviderRoleTypes> provRoleTypes = codesDao.getExpertiseTypesForAdd(regUser, hptCode);
        assertTrue(provRoleTypes.isEmpty());
    }

    /**
     * Test of testGetAllowedTelephoneTypes_apg1_allTypes method fails assertEquals
     * and currently local unit test database has additional records for Facility Contact 'FC'.
     * @throws java.lang.AssertionError: expected:<7> but was:<8>
     */
    @Test
    @Ignore
    public void testGetAllowedTelephoneTypes_apg1_allTypes() {
        // Reg user 6 is in APG 1, which has almost all permissions. Applies to DEN, MD, and RN.
        GrsRegistryUsers regUser = new GrsRegistryUsers(6l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        List<PrsCtCommunPurposeTypes> telephoneTypes = codesDao.getTelephoneTypesForAdd(regUser, hptCode);
        assertEquals(7, telephoneTypes.size()); //size to be changed to '8' after Facility implementation
    }

    @Test
    public void testGetAllowedTelephoneTypes_apg7_someTypes() {
        // Reg user 8 is in APG 7, which is restricted to certain record types. Applies to DEN.
        GrsRegistryUsers regUser = new GrsRegistryUsers(8l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        List<PrsCtCommunPurposeTypes> telephoneTypes = codesDao.getTelephoneTypesForAdd(regUser, hptCode);
        assertEquals(2, telephoneTypes.size());
        PrsCtCommunPurposeTypes bc = codesDao.lookup(PrsCtCommunPurposeTypes.class, CodeTableCodes.PrsCtCommunPurposeTypes.BUSINESS_CONTACT);
        PrsCtCommunPurposeTypes cc = codesDao.lookup(PrsCtCommunPurposeTypes.class, CodeTableCodes.PrsCtCommunPurposeTypes.COLLEGE_CONTACT);
        assertTrue(telephoneTypes.contains(bc));
        assertTrue(telephoneTypes.contains(cc));
    }

    @Test
    public void testGetAllowedTelephoneTypes_apg2_noTypes() {
        // Reg user 4 is in APG 2, which has read permissions only. Applies to MD.
        GrsRegistryUsers regUser = new GrsRegistryUsers(4l);
        PrsCtProviderRoleTypes hptCode = codesDao.lookup(PrsCtProviderRoleTypes.class, "MD");
        List<PrsCtCommunPurposeTypes> telephoneTypes = codesDao.getTelephoneTypesForAdd(regUser, hptCode);
        assertTrue(telephoneTypes.isEmpty());
    }

    @Test
    public void testDoesCountryPossessProvState_Yes() {
        assertTrue(codesDao.doesCountryPossessProvState(Consts.DEFAULT_COUNTRY_CODE));
    }

    @Test
    public void testDoesCountryPossessProvState_No() {
        assertFalse(codesDao.doesCountryPossessProvState("QQQ"));
    }

    @Test
    public void testisValidProvStateCode_Yes() {
        assertTrue(codesDao.isValidProvStateCode(Consts.DEFAULT_COUNTRY_CODE, "BC"));
    }

    @Test
    public void testisValidProvStateCode_No() {
        assertFalse(codesDao.isValidProvStateCode(Consts.DEFAULT_COUNTRY_CODE, "QQQ"));
    }

    @Test
    public void testGetAllLanguageExpertiseTypes() {
        List<PrsCtProvExpertiseTypes> providerExpertiseTypesList = codesDao.getAllLanguageExpertiseTypes();
        assertNotNull(providerExpertiseTypesList);
        boolean foundFrench = false;
        for (PrsCtProvExpertiseTypes providerExpertiseTypes : providerExpertiseTypesList) {
            if (providerExpertiseTypes.getCtlDescTxt() != null
                    && providerExpertiseTypes.getCtlDescTxt().trim().compareToIgnoreCase("French") == 0
                    && providerExpertiseTypes.getProvRoleType() != null
                    && providerExpertiseTypes.getProvRoleType().trim().compareToIgnoreCase("LANG") == 0) {
                foundFrench = true;
                break;
            }
        }
        assertTrue(foundFrench);
    }

	@Test
	public void testGetAllowedAllAddProviderRoleTypes() {
        List<PrsCtProviderRoleTypes> allowedAddProviderTypes = codesDao.getProviderRoleTypeForAdd(new GrsRegistryUsers(1l));
        assertTrue(allowedAddProviderTypes.size() > 0l);
    }

    @Test
    public void testGetAllowedAllAddProviderRoleTypesOOP() {
        List<PrsCtProviderRoleTypes> allowedAddProviderTypes = codesDao.getProviderRoleTypeForAddOOP(new GrsRegistryUsers(90l));
        assertTrue(allowedAddProviderTypes.size() > 0l);
        for (PrsCtProviderRoleTypes types : allowedAddProviderTypes) {
            assertTrue(types.getCtlNameCode().matches(".*OOP.*"));
            assertTrue(types.getPartyType().matches(".*IND.*"));
        }
    }

    @Test
    public void testGetAllowedAllAddProviderRoleTypesORG() {
        List<PrsCtProviderRoleTypes> allowedAddProviderTypes = codesDao.getProviderRoleTypeForAddORG(new GrsRegistryUsers(90l));
        assertTrue(allowedAddProviderTypes.size() > 0l);
        for (PrsCtProviderRoleTypes types : allowedAddProviderTypes) {
            assertTrue(types.getPartyType().matches(".*ORG.*"));
        }
    }
    
    @Test
    public void testGetAllowedAllSearchProviderRoleTypesORG() {
        List<PrsCtProviderRoleTypes> allowedAddProviderTypes = codesDao.getProviderRoleTypeForSearchORG(new GrsRegistryUsers(90l));
        assertTrue(allowedAddProviderTypes.size() > 0l);
        for (PrsCtProviderRoleTypes types : allowedAddProviderTypes) {
            assertTrue(types.getPartyType().matches(".*ORG.*"));
        }
    }
    
    @Test
    public void testGetAllowedAllSearchProviderRoleTypesORG_NoAllowedORG() {
        // Registry user 5 has read permissions on MDs; they have no other permissions.
        List<PrsCtProviderRoleTypes> allowedAddProviderTypes = codesDao.getProviderRoleTypeForSearchORG(new GrsRegistryUsers(5l));
        assertThat(allowedAddProviderTypes, Matchers.empty());
    }

}
