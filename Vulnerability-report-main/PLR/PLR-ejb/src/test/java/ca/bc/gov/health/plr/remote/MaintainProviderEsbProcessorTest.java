package ca.bc.gov.health.plr.remote;

import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.dto.provider.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.ConditionsDto;
import ca.bc.gov.health.plr.dto.provider.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.DisciplinaryActionDto;
import ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.StatusDto;
import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.service.ErrorMessage;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import ca.bc.gov.health.plr.service.remote.MaintainProviderEsbProcessor;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.util.MessageCodeHelper;
import java.util.Date;
import java.util.List;
import org.hamcrest.CoreMatchers;
import static org.hamcrest.CoreMatchers.equalTo;
import org.hamcrest.Matchers;
import static org.junit.Assert.*;
import org.junit.Test;

/**
 * PLR-755, REQ-00320
 *
 * @author sumesh.kariyil
 */
@SuppressWarnings("UseInjectionInsteadOfInstantion")
public class MaintainProviderEsbProcessorTest extends IntegrationSetup {

    @Test
    public void testValidateAndConvertIdentifier_InvalidIdentifier() {
        ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto dto = new ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto();
        dto.setEffectiveStartDate(new Date());
        dto.setTypeCode("DENID");
        dto.setIdentifier("@#$%^&*()_)()()*(*&&*^&%^");

        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto, CollegeIdentifierDto> processor
                = new MaintainProviderEsbProcessor<>();
        CollegeIdentifierDto collegeIdentifierDto = new CollegeIdentifierDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, collegeIdentifierDto);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        boolean invalidCharError = false;
        for (ErrorMessage message : errorMessages) {
            if (message.getErrorMessage().contains("Identifiers can contain only")) {
                invalidCharError = true;
            }
        }
        assertTrue(invalidCharError);
    }

    @Test
    public void testValidateAndConvertIdentifier_InvalidIdentifierTypeCode() {
        ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto dto = new ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto();
        dto.setEffectiveStartDate(new Date());
        dto.setIdentifier("TEST");
        dto.setTypeCode("ABCD");
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto, CollegeIdentifierDto> processor
                = new MaintainProviderEsbProcessor<>();
        CollegeIdentifierDto collegeIdentifierDto = new CollegeIdentifierDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, collegeIdentifierDto);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        boolean invalidError = false;
        for (ErrorMessage message : errorMessages) {
            if (message.getErrorMessage().contains("Identifier Type")) {
                invalidError = true;
            }
        }
        assertTrue(invalidError);
    }

    @Test
    public void testNonAcceptableCharacter_Address_ShouldReject() {
        ca.bc.gov.health.plr.dto.provider.esb.AddressDto dto = MaintainProviderEsbTestBuilder.getAddress();
        dto.setAddressLineOne("@TEST");
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.AddressDto, AddressDto> processor
                = new MaintainProviderEsbProcessor<>();
        AddressDto converted = new AddressDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNull(errorMessages);
        boolean invalidCharError = false;
        if (errorMessages != null) {
            for (ErrorMessage message : errorMessages) {
                if (message.getErrorMessage().contains("Addresses can contain only spaces")) {
                    invalidCharError = true;
                }
            }
        }
        assertFalse(invalidCharError);
    }

    @Test //PLRP3-6 We don't reject the names containing invalid char, we strip them automatically
    public void testNonAcceptableCharacter_Name_ShouldReject() {
        ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto dto = MaintainProviderEsbTestBuilder.getPersonNameDto();
        dto.setFirstName("S@*8");
        dto.setLastName("S999*");
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto, PersonNameDto> processor
                = new MaintainProviderEsbProcessor<>();
        PersonNameDto converted = new PersonNameDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNull(errorMessages);
        assertEquals("S", converted.getFirstName());
        assertEquals("S", converted.getLastName());
    }

    @Test
    public void testNonAcceptableCharacter_Telecom_ShouldReject() {

        ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto dto = MaintainProviderEsbTestBuilder.getTelecomDto();
        dto.setAreaCode("123$4");
        dto.setExtension("345*");
        dto.setNumber("88887777]");
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto, TelecommunicationDto> processor
                = new MaintainProviderEsbProcessor<>();
        TelecommunicationDto converted = new TelecommunicationDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNull(errorMessages);
//        assertTrue(!errorMessages.isEmpty());
        int invalidTeleCount = 0;
        if (errorMessages != null) {
            for (ErrorMessage message : errorMessages) {
                if (message.getErrorMessage().contains("Telecommunication fields can contain only")) {
                    ++invalidTeleCount;
                }
            }
        }
        assertThat(0, equalTo(invalidTeleCount));
    }

    @Test
    public void testNoEffectiveStartDate_Address_ShouldReject() {
        ca.bc.gov.health.plr.dto.provider.esb.AddressDto dto = MaintainProviderEsbTestBuilder.getAddress();
        dto.setEffectiveStartDate(null);
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.AddressDto, AddressDto> processor
                = new MaintainProviderEsbProcessor<>();
        AddressDto converted = new AddressDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        boolean invalidDateError = false;
        String[] expectedMessage = MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MANDATORY_PART1));
        for (ErrorMessage message : errorMessages) {
            if (message.getErrorCode().equals(expectedMessage[0]) && message.getErrorMessage().startsWith(expectedMessage[1])) {
                invalidDateError = true;
            }
        }
        assertTrue(invalidDateError);
    }

    @Test
    public void testNoEffectiveStartDate_Telecom_ShouldReject() {
        ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto dto = MaintainProviderEsbTestBuilder.getTelecomDto();
        dto.setEffectiveStartDate(null);
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto, TelecommunicationDto> processor
                = new MaintainProviderEsbProcessor<>();
        TelecommunicationDto converted = new TelecommunicationDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        boolean invalidDateError = false;
        String[] expectedMessage = MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MANDATORY_PART1));
        for (ErrorMessage message : errorMessages) {
            if (message.getErrorCode().equals(expectedMessage[0]) && message.getErrorMessage().startsWith(expectedMessage[1])) {
                invalidDateError = true;
            }
        }
        assertTrue(invalidDateError);
    }

    @Test //REQ-00850
    public void testCredential_RegNumberMaxLimit() {
        ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto dto = MaintainProviderEsbTestBuilder.getCredentialDto();
        // String of length 241
        dto.setRegistrationNumber("12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901");
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto, CredentialsDto> processor
                = new MaintainProviderEsbProcessor<>();
        CredentialsDto converted = new CredentialsDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        assertThat(errorMessages.size(), equalTo(1));
    }

    @Test //REQ-00851
    public void testCredential_InstitutionMaxLimit() {
        ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto dto = MaintainProviderEsbTestBuilder.getCredentialDto();
        // String of length 241
        dto.setGrantingInstitution("12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901");
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto, CredentialsDto> processor
                = new MaintainProviderEsbProcessor<>();
        CredentialsDto converted = new CredentialsDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        assertThat(errorMessages.size(), equalTo(1));
    }

    @Test //REQ-00773
    public void testCredential_DesignationMaxLimit() {
        ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto dto = MaintainProviderEsbTestBuilder.getCredentialDto();
        // String of length 241
        dto.setDesignation("12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901");
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto, CredentialsDto> processor
                = new MaintainProviderEsbProcessor<>();
        CredentialsDto converted = new CredentialsDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        assertThat(errorMessages.size(), equalTo(1));
    }

    @Test //REQ-00773
    public void testCredential_InvalidCredentialType() {
        ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto dto = MaintainProviderEsbTestBuilder.getCredentialDto();
        // String of length 241
        dto.setTypeCode("ABCD");
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto, CredentialsDto> processor
                = new MaintainProviderEsbProcessor<>();
        CredentialsDto converted = new CredentialsDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        assertThat(errorMessages.size(), equalTo(1));
        assertThat(errorMessages.iterator().next().getErrorMessage(), CoreMatchers.containsString("Credential Type"));
    }

    @Test //REQ-00686
    public void testPersonName_NameMaxLength() {
        ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto dto = MaintainProviderEsbTestBuilder.getPersonNameDto();
        // String of length 51
        dto.setFirstName("ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJA");
        dto.setLastName("ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJA");

        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto, PersonNameDto> processor
                = new MaintainProviderEsbProcessor<>();
        PersonNameDto converted = new PersonNameDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        assertThat(errorMessages.size(), equalTo(2));
    }

    @Test //REQ-00686
    public void testPersonName_NullNames() {
        ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto dto = MaintainProviderEsbTestBuilder.getPersonNameDto();

        dto.setFirstName(null);
        dto.setLastName(null);

        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto, PersonNameDto> processor
                = new MaintainProviderEsbProcessor<>();
        PersonNameDto converted = new PersonNameDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        assertThat(errorMessages.size(), equalTo(2));
    }

    @Test //REQ-00686
    public void testPersonName_InvalidType() {
        ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto dto = MaintainProviderEsbTestBuilder.getPersonNameDto();

        dto.setTypeCode("ABCD");

        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto, PersonNameDto> processor
                = new MaintainProviderEsbProcessor<>();
        PersonNameDto converted = new PersonNameDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        assertThat(errorMessages.size(), equalTo(1));
        assertThat(errorMessages.iterator().next().getErrorMessage(), Matchers.containsString("Name Type"));
    }

    @Test //REQ-00686 //PLRP3-41 Removed the CamelCase check as we now transform automatically the first letter in uppercase
    public void testPersonName_CamelCaseNames() {
        ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto dto = MaintainProviderEsbTestBuilder.getPersonNameDto();

        dto.setFirstName("a");
        dto.setLastName("b");

        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto, PersonNameDto> processor
                = new MaintainProviderEsbProcessor<>();
        PersonNameDto converted = new PersonNameDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNull(errorMessages);
        assertEquals("A", converted.getFirstName()); //We force uppercase for the first name
        assertEquals("b", converted.getLastName()); //We accept lower case for the lastName
    }

    @Test //REQ-00612
    public void testPersonName_NonMandatoryFieldMaxLength() {
        ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto dto = MaintainProviderEsbTestBuilder.getPersonNameDto();
        dto.setSecondName("ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJA");//51
        dto.setThirdName("ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJA");//51
        dto.setSuffix("ABCDEFGHIJA");//11
        dto.setPrefix("ABCDEFGHIJA");//11

        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto, PersonNameDto> processor
                = new MaintainProviderEsbProcessor<>();
        PersonNameDto converted = new PersonNameDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        assertThat(errorMessages.size(), equalTo(4));
    }

    /**
     * PLRP3-59 Revised Name requirement for first character must be a letter
     * only.
     *
     */
    @Test
    public void testPersonName_FirstCharacterLetterNames() {
        ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto dto = MaintainProviderEsbTestBuilder.getPersonNameDto();

        dto.setFirstName("-first");
        dto.setLastName("'surname");
        dto.setSecondName("'sec");
        dto.setThirdName(".é third");

        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto, PersonNameDto> processor
                = new MaintainProviderEsbProcessor<>();
        PersonNameDto converted = new PersonNameDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        assertThat(errorMessages.size(), equalTo(4));
    }

    @Test //REQ-00537
    public void testAddress_Line1Mandatory() {
        ca.bc.gov.health.plr.dto.provider.esb.AddressDto dto = MaintainProviderEsbTestBuilder.getAddress();
        dto.setAddressLineOne(null);
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.AddressDto, AddressDto> processor
                = new MaintainProviderEsbProcessor<>();
        AddressDto converted = new AddressDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        assertThat(errorMessages.size(), equalTo(1));
        boolean invalidCharError = false;

        String[] expectedMessage = MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MANDATORY_PART1));
        for (ErrorMessage message : errorMessages) {
            if (message.getErrorCode().equals(expectedMessage[0]) && message.getErrorMessage().startsWith(expectedMessage[1])) {
                invalidCharError = true;
            }
        }
        assertTrue(invalidCharError);
    }

    @Test //REQ-00537/REQ-00535 updated for max length of 100 characters
    public void testAddress_Line1MaxLength() {
        ca.bc.gov.health.plr.dto.provider.esb.AddressDto dto = MaintainProviderEsbTestBuilder.getAddress();
        dto.setAddressLineOne("ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJA");//101 chars
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.AddressDto, AddressDto> processor
                = new MaintainProviderEsbProcessor<>();
        AddressDto converted = new AddressDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        assertThat(errorMessages.size(), equalTo(1));
    }

    @Test //REQ-00533
    public void testElectronicAddress_AddressMandatory() {
        ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto dto = MaintainProviderEsbTestBuilder.getElectronicAddressDto();
        dto.setAddress(null);
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto, ElectronicAddressDto> processor
                = new MaintainProviderEsbProcessor<>();
        ElectronicAddressDto converted = new ElectronicAddressDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        assertThat(errorMessages.size(), equalTo(1));
        boolean invalidCharError = false;
        String[] expectedMessage = MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MANDATORY_PART1));
        for (ErrorMessage message : errorMessages) {
            if (message.getErrorCode().equals(expectedMessage[0]) && message.getErrorMessage().startsWith(expectedMessage[1])) {
                invalidCharError = true;
            }
        }
        assertTrue(invalidCharError);
    }

    @Test //REQ-00533
    public void testElectronicAddress_MaxLength() {
        ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto dto = MaintainProviderEsbTestBuilder.getElectronicAddressDto();
        //501 chars
        dto.setAddress("abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghija@gmail.com");
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto, ElectronicAddressDto> processor
                = new MaintainProviderEsbProcessor<>();
        ElectronicAddressDto converted = new ElectronicAddressDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        assertThat(errorMessages.size(), equalTo(1));
    }

    @Test //REQ-00726, REQ-00727, REQ-00728
    public void testStatus_InvalidCodes() {
        ca.bc.gov.health.plr.dto.provider.esb.StatusDto dto = MaintainProviderEsbTestBuilder.getStatusDto();
        dto.setClassCode("TEST");
        dto.setTypeCode("TEST");
        dto.setReasonCode("TEST");
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.StatusDto, StatusDto> processor
                = new MaintainProviderEsbProcessor<>();
        StatusDto converted = new StatusDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        assertThat(errorMessages.size(), equalTo(3));
    }

    @Test //REQ-00752, 753, 
    public void testCondition_Restrictions() {
        ca.bc.gov.health.plr.dto.provider.esb.ConditionsDto dto = MaintainProviderEsbTestBuilder.getConditionsDto();
        dto.setIdentifier("1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901");
        dto.setTypeCode("ABCD");
        dto.setRestrictionExplanationText("ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJA");
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.ConditionsDto, ConditionsDto> processor
                = new MaintainProviderEsbProcessor<>();
        ConditionsDto converted = new ConditionsDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        assertThat(errorMessages.size(), equalTo(3));
    }

    @Test //REQ-00917
    public void testDisciplinaryAction_Restrictions() {
        ca.bc.gov.health.plr.dto.provider.esb.DisciplinaryActionDto dto = MaintainProviderEsbTestBuilder.getDisciplinaryActionDto();
        dto.setDescription(null);
        MaintainProviderEsbProcessor<ca.bc.gov.health.plr.dto.provider.esb.DisciplinaryActionDto, DisciplinaryActionDto> processor
                = new MaintainProviderEsbProcessor<>();
        DisciplinaryActionDto converted = new DisciplinaryActionDto();
        List<ErrorMessage> errorMessages = null;
        try {
            processor.convertAndValidate(dto, converted);
        } catch (EntityValidationException ex) {
            errorMessages = ex.getErrorMessages();
        }
        assertNotNull(errorMessages);
        assertThat(errorMessages.size(), equalTo(1));
    }
}
