/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.validators;

import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.rule.provider.ProviderTestDataBuilder;
import java.lang.reflect.Field;
import java.util.Calendar;
import javax.persistence.EntityManager;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;
import org.junit.Test;
import org.mockito.ArgumentMatcher;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.argThat;
import org.mockito.Mockito;
import static org.mockito.Mockito.mock;

/**
 *
 * @author jonathan.wiebe
 */
public class EntityChangeDetectorTest {
    
    public EntityChangeDetectorTest() {
    }
    
    @Test
    public void testCheckForChanges_AddressNoChnage() throws Exception {
        AddressDto addressDto = ProviderTestDataBuilder.getAddress();
        addressDto.setId(12l);
        addressDto.setEndReasonCode("CHG");
        EntityChangeDetector entityChangeDetector = new EntityChangeDetector();
        
        Field field = EntityChangeDetector.class.getDeclaredField("em");
        field.setAccessible(true);
        EntityManager emMock = mock(EntityManager.class);
        field.set(entityChangeDetector, emMock);
        
        GrsAddresses grsAddresses = copyAddressDtoToEntity(addressDto);
        grsAddresses.setEndReasonCode(createEndReasonCodeType());
        Mockito.doReturn(grsAddresses).when(emMock).find(argThat(matchesAnyClass()), is(anyLong()));
        
        // no change
        entityChangeDetector.checkForChanges(addressDto, grsAddresses);
        assertThat(addressDto.isNoChangeOnUpdate(), is(equalTo(true)));
        
    }

    private ArgumentMatcher<Class> matchesAnyClass() {
        return new ArgumentMatcher<Class>() {
            @Override
            public boolean matches(Object argument) {
                if (argument instanceof Class) {
                    return true;
                }
                return false;
            }
        };
    }

    @Test
    public void testCheckForChanges_AddressChangeLineOne() throws Exception {
        AddressDto addressDto = ProviderTestDataBuilder.getAddress();
        addressDto.setId(12l);
        addressDto.setEndReasonCode("CHG");
        EntityChangeDetector entityChangeDetector = new EntityChangeDetector();
        
        Field field = EntityChangeDetector.class.getDeclaredField("em");
        field.setAccessible(true);
        EntityManager emMock = mock(EntityManager.class);
        field.set(entityChangeDetector, emMock);
        
        GrsAddresses grsAddresses = copyAddressDtoToEntity(addressDto);
        grsAddresses.setEndReasonCode(createEndReasonCodeType());
        
        GrsAddresses grsAddressesChanged = copyAddressDtoToEntity(addressDto);
        grsAddressesChanged.setAddressLine1Txt("foo bar");
        grsAddressesChanged.setEndReasonCode(createEndReasonCodeType());
        
        Mockito.doReturn(grsAddressesChanged).when(emMock).find(argThat(matchesAnyClass()), is(anyLong()));
        
        // change of address line one
        entityChangeDetector.checkForChanges(addressDto, grsAddresses);
        assertThat(addressDto.isNoChangeOnUpdate(), is(equalTo(false)));
    }

    private GrsAddresses copyAddressDtoToEntity(AddressDto addressDto) {
        GrsAddresses grsAddresses = new GrsAddresses();
        grsAddresses.setAddrId(addressDto.getId());
        grsAddresses.setAddressLine1Txt(addressDto.getAddressLineOne());
        grsAddresses.setAddressLine2Txt(addressDto.getAddressLineTwo());
        grsAddresses.setAddressLine3Txt(addressDto.getAddressLineThree());
        grsAddresses.setCityTxt(addressDto.getCity());
        grsAddresses.setCountryCode(createnewCountryType());
        grsAddresses.setProvinceOrStateTxt(addressDto.getProvinceOrStateTxt());
        grsAddresses.setPostalCodeOrZipTxt(addressDto.getProvinceOrStateTxt());
        grsAddresses.setEffectiveStartDate(addressDto.getEffectiveStartDate());
        grsAddresses.setEffectiveEndDate(addressDto.getEffectiveEndDate());
        return grsAddresses;
    }

    private PrsCtCountries createnewCountryType() {
        return new PrsCtCountries() {
            {
                this.setCtlNameCode("CA");
                this.setCtlDescTxt("Canada");
                this.setCtlId(12l);
                this.setCreatedDts(Calendar.getInstance().getTime());
            }
        };
    }
    
    private GrsCtEndReasonTypes createEndReasonCodeType() {
        return new GrsCtEndReasonTypes() {
            {
                this.setCtlNameCode("CHG");
                this.setCtlDescTxt("Change");
                this.setCtlId(12l);
                this.setCreatedDts(Calendar.getInstance().getTime());
            }
        };
    }
    
}
