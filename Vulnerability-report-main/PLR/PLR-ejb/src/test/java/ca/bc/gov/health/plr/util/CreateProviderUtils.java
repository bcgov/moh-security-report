/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.util;

import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto;
import ca.bc.gov.health.plr.dto.provider.esb.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.JurisdictionNameCodeDto;
import ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtDataOwnerCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import ca.bc.gov.health.plr.service.provider.CeasingRuleHelperTest;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.codesDao;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

/**
 *
 * @author jonathan.wiebe
 */
public class CreateProviderUtils {
    
    private static PrsCtDataOwnerCodes OWNER_CODE;
    private static PrsCtProviderRoleTypes PROVIDER_ROLE_TYPE;
    public static final String PROVIDER_IDENTIFIER_TYPE_CODE = "CPSID";
    static List<PrsProviders> providerEntityList = new ArrayList();
    public static Date EFF_START_DATE = new Date();

    {
    }
    
    public static void updateProviderRemovalList(PrsProviders provider) {
        providerEntityList.remove(provider);
        providerEntityList.add(provider);
    }
    public static List<PrsProviders> getProviderEntityList() {
        return providerEntityList;
    }

    public static void setProviderEntityList(List<PrsProviders> providerEntityList) {
        CreateProviderUtils.providerEntityList = providerEntityList;
    }


    public static StatusDto getStatusDto() {
        StatusDto dto = new StatusDto();
        dto.setClassCode("LIC");
        dto.setTypeCode("ACTIVE");
        dto.setReasonCode("ASSOC");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }

    public static PersonNameDto getPersonNameDto() {
        PersonNameDto nameDto = new PersonNameDto();
        nameDto.setFirstName("TEST");
        nameDto.setLastName("LAST");
        nameDto.setTypeCode("CURR");
        nameDto.setEffectiveStartDate(EFF_START_DATE);
        return nameDto;
    }

    public static AddressDto getAddress() {
        AddressDto address = new AddressDto();
        address.setCity("Narnia");
        address.setAddressLineOne("The Yellow Brick Road");
        address.setEffectiveStartDate(EFF_START_DATE);
        address.setEffectiveEndDate(null);
        address.setProvinceOrStateTxt("BC");
        address.setCommunicationPurposeCode("BC");
        address.setTypeCode("M");
        address.setCountryCode("CA");
        return address;
    }
    
    public static ElectronicAddressDto getElecAddress() {
        ElectronicAddressDto elecAddress = new ElectronicAddressDto();
        elecAddress.setEffectiveStartDate(EFF_START_DATE);
        elecAddress.setEffectiveEndDate(null);
        elecAddress.setCommunicationPurposeCode("BC");
        elecAddress.setTypeCode("M");
        return elecAddress;
    }

    public static DemographicDetailsDto getDemographicDto() {
        DemographicDetailsDto dto = new DemographicDetailsDto();
        dto.setBirthCountryCode("CA");
        dto.setBirthProvState("BC");
        dto.setBirthDate(new Date());
        dto.setGenderCode("M");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }

    static void addIdentifierCreateRandomCollegeID(MaintainProviderRequest request) {
        CollegeIdentifierDto collegeDto = new CollegeIdentifierDto();
        collegeDto.setIdentifier(UUID.randomUUID().toString().replace('-', 'a'));
        collegeDto.setTypeCode(PROVIDER_IDENTIFIER_TYPE_CODE);
        addIdentifier(collegeDto, request);
    }
    static void addIdentifier(CollegeIdentifierDto collegeDto, MaintainProviderRequest request) {
        request.getProviderDetails().setIdentifiers(new ArrayList<CollegeIdentifierDto>());
        request.getProviderDetails().getIdentifiers().add(collegeDto);
    }

    public static void removeProviders() {
        for (PrsProviders prov : providerEntityList) {
            IntegrationSetup.entityManagerProxy.remove(prov);
        }
    }

    public static MaintainProviderRequest createRequest() {
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setRegistryUserOrgId("plr-reg-admin");
        request.setProviderDetails(new ProviderDetails());
        AddressDto address = getAddress();
        request.getProviderDetails().getAddresses().add(address);
        addIdentifierCreateRandomCollegeID(request);
        setCommonRequestFields(request);
        request.getProviderDetails().getDemographicDetails().add(getDemographicDto());
        request.getProviderDetails().getStatuses().add(getStatusDto());
        request.getProviderDetails().getIndNames().add(getPersonNameDto());
        return request;
    }
    
    public static MaintainProviderRequest createRequestEAddrChange(ElectronicAddressDto eAddrDto, CollegeIdentifierDto idDto) {
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setRegistryUserOrgId("plr-reg-admin");
        request.setProviderDetails(new ProviderDetails());
        addIdentifier(idDto, request);
        setCommonRequestFields(request);
        request.getProviderDetails().setElectronicAddresses(new ArrayList<ElectronicAddressDto>());
        request.getProviderDetails().getElectronicAddresses().add(eAddrDto);
        return request;
    }
    
    public static MaintainProviderRequest createRequestTelecomChange(TelecommunicationDto telecomDto, CollegeIdentifierDto idDto) {
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setRegistryUserOrgId("plr-reg-admin");
        request.setProviderDetails(new ProviderDetails());
        addIdentifier(idDto, request);
        setCommonRequestFields(request);
        request.getProviderDetails().setAddresses(new ArrayList<AddressDto>());
        request.getProviderDetails().getTelecommunication().add(telecomDto);
        return request;
    }
    public static MaintainProviderRequest createRequestAddressChange(AddressDto addrDto, CollegeIdentifierDto idDto) {
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setRegistryUserOrgId("plr-reg-admin");
        request.setProviderDetails(new ProviderDetails());
        addIdentifier(idDto, request);
        setCommonRequestFields(request);
        request.getProviderDetails().setAddresses(new ArrayList<AddressDto>());
        request.getProviderDetails().getAddresses().add(addrDto);
        return request;
    }
    public static MaintainProviderRequest createRequestWorkLocationChange(WorkLocationDto wlDto, CollegeIdentifierDto idDto) {
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setRegistryUserOrgId("plr-reg-admin");
        request.setProviderDetails(new ProviderDetails());
        addIdentifier(idDto, request);
        setCommonRequestFields(request);
        request.getProviderDetails().setWorkLocationList(new ArrayList<WorkLocationDto>());
        request.getProviderDetails().getWorkLocationList().add(wlDto);
        return request;
    }
    public static MaintainProviderRequest createRequestWorkLocationCease(WorkLocationDto wlDto, CollegeIdentifierDto idDto) {
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setRegistryUserOrgId("plr-reg-admin");
        request.setProviderDetails(new ProviderDetails());
        addIdentifier(idDto, request);
        setCommonRequestFields(request);
        request.getProviderDetails().setWorkLocationList(new ArrayList<WorkLocationDto>());
        request.getProviderDetails().getWorkLocationList().add(wlDto);
        return request;
    }
    
    public static MaintainProviderRequest createRequestIRChange(InformationRouteDto irDto, CollegeIdentifierDto idDto) {
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setRegistryUserOrgId("plr-reg-admin");
        request.setProviderDetails(new ProviderDetails());
        addIdentifier(idDto, request);
        setCommonRequestFields(request);
        request.getProviderDetails().setInformationRoutes(new ArrayList<InformationRouteDto>());
        request.getProviderDetails().getInformationRoutes().add(irDto);
        return request;
    }

    private static void setCommonRequestFields(MaintainProviderRequest request) {
        PROVIDER_ROLE_TYPE = codesDao.lookup(PrsCtProviderRoleTypes.class, "MD");
        request.getProviderDetails().getIdentifiers().get(0).setEffectiveStartDate(new Date());
        request.getProviderDetails().setProviderType("IND");
        request.getProviderDetails().setType(PROVIDER_ROLE_TYPE.getCtlNameCode());
        request.getProviderDetails().setJurisdiction(new JurisdictionNameCodeDto());
        request.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");
    }
    
   
}
