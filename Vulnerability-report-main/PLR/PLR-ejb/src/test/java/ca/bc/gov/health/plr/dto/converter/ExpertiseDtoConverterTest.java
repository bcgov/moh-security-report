/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.dto.converter;

import ca.bc.gov.health.plr.dto.converter.ExpertiseDtoConverter;
import ca.bc.gov.health.plr.dto.provider.ExpertiseDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtDataOwnerCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvExpertiseTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviderExpertises;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.session.PrsProvidersFacade;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import java.lang.reflect.Field;
import java.util.Date;
import javax.persistence.EntityManager;
import org.junit.Test;
import org.junit.Before;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.when;
import static org.junit.Assert.*;
import static org.mockito.Matchers.eq;
import org.mockito.Mockito;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *
 * @author adebiyi.kuseju
 */
public class ExpertiseDtoConverterTest {

    private ExpertiseDtoConverter dtoConverter;
    private PrsProvidersFacade prsProvidersFacade;
    private CodesDao codesDao;
    private EntityManager em;

    @Before
    public void setup() throws Exception {
        dtoConverter = new ExpertiseDtoConverter();
        
        em  = mock(EntityManager.class);
        
        prsProvidersFacade = mock(PrsProvidersFacade.class);
        codesDao = mock(CodesDao.class);
        DtoConverter conv = new DtoConverter();
        conv.codesDao = codesDao;
        
        PrsProviders pauth = mock(PrsProviders.class);
        when(prsProvidersFacade.find(any(Class.class))).thenReturn(pauth);
        

        GrsCtBooleanTypes yes = mock(GrsCtBooleanTypes.class);
        GrsCtBooleanTypes no = mock(GrsCtBooleanTypes.class);
        when(yes.getCtlNameCode()).thenReturn("Yes");
        when(no.getCtlNameCode()).thenReturn("No");

        when(codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES)).thenReturn(yes);
        when(codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.NO)).thenReturn(no);

        populateInstanceMember("prsProvidersFacade", prsProvidersFacade);
        populateInstanceMember("codesDao", codesDao);
        populateInstanceMember("em", em);
        populateInstanceMember("dtoConverter", conv);
    }

    /**
     * Test of toEntity method, of class ExpertiseDtoConverter.
     */
    @Test
    public void testToEntity_NotActive() throws Exception {

        ExpertiseDto dto = new ExpertiseDto();
        dto.setActive(false);

        PrsProviderExpertises result = dtoConverter.toEntity(dto);
        assertTrue(result.getActiveFlag().getCtlNameCode().equals("No"));
    }

    /**
     * Test of toEntity method, of class ExpertiseDtoConverter.
     */
    @Test
    public void testToEntity_Active() throws Exception {

        ExpertiseDto dto = new ExpertiseDto();
        dto.setActive(true);

        PrsProviderExpertises result = dtoConverter.toEntity(dto);
        assertTrue(result.getActiveFlag().getCtlNameCode().equals("Yes"));
    }
    
    /**
     * Test of toEntity method, of class ExpertiseDtoConverter.
     */
    @Test
    public void testToEntity_CreatedDate() throws Exception {

        Date expected = new Date();
        ExpertiseDto dto = new ExpertiseDto();
        dto.setCreatedDate(expected);

        PrsProviderExpertises result = dtoConverter.toEntity(dto);
        assertEquals(expected, result.getCreatedDts());
    }
    
    
    /**
     * Test of toEntity method, of class ExpertiseDtoConverter.
     */
    @Test
    public void testToEntity_DataOwnerCode() throws Exception {

        String dataOwnerCode = "MOH";
        ExpertiseDto dto = new ExpertiseDto();
        dto.setDataOwnerCode(dataOwnerCode);
        
        PrsCtDataOwnerCodes dataOwnerCodeEntity =  mock(PrsCtDataOwnerCodes.class);
        when(dataOwnerCodeEntity.getCtlNameCode()).thenReturn(dataOwnerCode);
        
        when(codesDao.lookup(PrsCtDataOwnerCodes.class, dataOwnerCode)).thenReturn(dataOwnerCodeEntity);

        PrsProviderExpertises result = dtoConverter.toEntity(dto);
        assertEquals(dataOwnerCode, result.getDataOwnerCode().getCtlNameCode());
    }
    
   
     /**
     * Test of toEntity method, of class ExpertiseDtoConverter.
     */
    @Test
    public void testToEntity_EffectiveStartDate() throws Exception {

        Date expected = new Date();
        ExpertiseDto dto = new ExpertiseDto();
        dto.setEffectiveStartDate(expected);

        PrsProviderExpertises result = dtoConverter.toEntity(dto);
        assertEquals(expected, result.getEffectiveStartDate());
    }
    
    /**
     * Test of toEntity method, of class ExpertiseDtoConverter.
     */
    @Test
    public void testToEntity_EffectiveEndDate() throws Exception {

        Date expected = new Date();
        ExpertiseDto dto = new ExpertiseDto();
        dto.setEffectiveEndDate(expected);

        PrsProviderExpertises result = dtoConverter.toEntity(dto);
        assertEquals(expected, result.getEffectiveEndDate());
    }
    
    
     
    /**
     * Test of toEntity method, of class ExpertiseDtoConverter.
     */
    @Test
    public void testToEntity_EndReasonCodeSet() throws Exception {

        String endReasonCode = "CHANGED";
        ExpertiseDto dto = new ExpertiseDto();
        dto.setEndReasonCode(endReasonCode);
        
        GrsCtEndReasonTypes endReasonTypes =  mock(GrsCtEndReasonTypes.class);
        when(endReasonTypes.getCtlNameCode()).thenReturn(endReasonCode);
        
        when(codesDao.lookup(GrsCtEndReasonTypes.class, endReasonCode)).thenReturn(endReasonTypes);

        PrsProviderExpertises result = dtoConverter.toEntity(dto);
        assertEquals(endReasonCode, result.getEndReasonCode().getCtlNameCode());
    }
    
    
    /**
     * Test of toEntity method, of class ExpertiseDtoConverter.
     */
    @Test
    public void testToEntity_EndReasonCodeNotSet() throws Exception {

        Long id = Long.MAX_VALUE;
        ExpertiseDto dto = new ExpertiseDto();
        dto.setEndReasonCodeId(id);
        
        GrsCtEndReasonTypes endReasonTypes =  mock(GrsCtEndReasonTypes.class);
        when(endReasonTypes.getCtlId()).thenReturn(id);
        
        when(codesDao.lookup(GrsCtEndReasonTypes.class, id)).thenReturn(endReasonTypes);

        PrsProviderExpertises result = dtoConverter.toEntity(dto);
        assertEquals(id, result.getEndReasonCode().getCtlId());
    }
    
    /**
     * Test of toEntity method, of class ExpertiseDtoConverter.
     */
    @Test
    public void testToEntity_GenerationNum() throws Exception {

        Long generationNum = Long.MAX_VALUE;
        ExpertiseDto dto = new ExpertiseDto();
        dto.setGenerationNum(generationNum);

        PrsProviderExpertises result = dtoConverter.toEntity(dto);
        assertEquals(generationNum.longValue(), result.getGenerationNum());
    }
    
    
     /**
     * Test of toEntity method, of class ExpertiseDtoConverter.
     */
    @Test
    public void testToEntity_InvalidatedDate() throws Exception {

        Date expected = new Date();
        ExpertiseDto dto = new ExpertiseDto();
        dto.setInvalidatedDate(expected);

        PrsProviderExpertises result = dtoConverter.toEntity(dto);
        assertEquals(expected, result.getInvalidatedDts());
    }
    
    
    /**
     * Test of toEntity method, of class ExpertiseDtoConverter.
     */
    @Test
    public void testToEntity_PauthId() throws Exception {

        Long pauthId = Long.MAX_VALUE;
        ExpertiseDto dto = new ExpertiseDto();
        dto.setPauthId(pauthId);

        PrsProviders pauthIdEntity = mock(PrsProviders.class);
        when(pauthIdEntity.getPauthId()).thenReturn(pauthId);
        
        when(prsProvidersFacade.find(dto.getPauthId())).thenReturn(pauthIdEntity);
        
        PrsProviderExpertises result = dtoConverter.toEntity(dto);
        assertEquals(pauthId, result.getPauthPauthId().getPauthId());
    }
    
    
    /**
     * Test of toEntity method, of class ExpertiseDtoConverter.
     */
    @Test
    public void testToEntity_TypeId() throws Exception {

        Long expertiseTypeId = Long.MAX_VALUE;
        ExpertiseDto dto = new ExpertiseDto();
        dto.setTypeId(expertiseTypeId);

        PrsCtProvExpertiseTypes expertiseTypeIdEntity = mock(PrsCtProvExpertiseTypes.class);
        when(expertiseTypeIdEntity.getCtlId()).thenReturn(expertiseTypeId);
        
        when(codesDao.lookup(PrsCtProvExpertiseTypes.class, dto.getTypeId())).thenReturn(expertiseTypeIdEntity);
        
        PrsProviderExpertises result = dtoConverter.toEntity(dto);
        assertEquals(expertiseTypeId, result.getProviderExpertiseTypeCode().getCtlId());
    }
    
    
    /**
     * Test of toEntity method, of class ExpertiseDtoConverter.
     */
    @Test
    public void testToEntity_RoleTypeCode_Set() throws Exception {

        String roleTypeCode = "TT";
        ExpertiseDto dto = new ExpertiseDto();
        dto.setRoleTypeCode(roleTypeCode);

        PrsCtProviderRoleTypes roleTypeCodeEntity = mock(PrsCtProviderRoleTypes.class);
        when(roleTypeCodeEntity.getCtlNameCode()).thenReturn(roleTypeCode);
        
        when(codesDao.lookup(PrsCtProviderRoleTypes.class, dto.getRoleTypeCode())).thenReturn(roleTypeCodeEntity);
        
        PrsProviderExpertises result = dtoConverter.toEntity(dto);
        assertEquals(roleTypeCode, result.getProvExpertiseRoleTypeCode().getCtlNameCode());
    }
    
    
    /**
     * Test of toEntity method, of class ExpertiseDtoConverter.
     */
    @Test
    public void testToEntity_RoleTypeCode_NotSet() throws Exception {

        String roleTypeCode = "TT";
        ExpertiseDto dto = new ExpertiseDto();


        PrsCtProviderRoleTypes roleTypeCodeEntity = mock(PrsCtProviderRoleTypes.class);
        when(roleTypeCodeEntity.getCtlNameCode()).thenReturn(roleTypeCode);
        
        PrsProviders pauthIdEntity = mock(PrsProviders.class);
        when(pauthIdEntity.getHptCode()).thenReturn(roleTypeCodeEntity);
        
        when(prsProvidersFacade.find(dto.getPauthId())).thenReturn(pauthIdEntity);
        
        PrsProviderExpertises result = dtoConverter.toEntity(dto);
        assertEquals(roleTypeCode, result.getProvExpertiseRoleTypeCode().getCtlNameCode());
    }
    
    
    /**
     * Test of toEntity method, of class ExpertiseDtoConverter.
     */
    @Test
    public void testToEntity_Id() throws Exception {

        Long id = Long.MAX_VALUE;
        ExpertiseDto dto = new ExpertiseDto();
        dto.setId(id);
        
        PrsProviderExpertises result = dtoConverter.toEntity(dto);
        assertEquals(id, result.getAs1Id());
    }

    private void populateInstanceMember(String fieldName, Object value) throws Exception {

        Field field = ExpertiseDtoConverter.class.getDeclaredField(fieldName);
        field.setAccessible(true);

        if (value instanceof PrsProvidersFacade) {
            field.set(dtoConverter, (PrsProvidersFacade) value);

        } else if (value instanceof CodesDao) {
            field.set(dtoConverter, (CodesDao) value);

        } else if (value instanceof EntityManager) {
            field.set(dtoConverter, (EntityManager) value );
            
        } else if (value instanceof DtoConverter) {
            
            field.set(dtoConverter, (DtoConverter) value);
        }


    }
    
    @Test
    public void testToEntity_expertiseTypeId() {
        Long expertiseTypeId = 5L;
        PrsCtProvExpertiseTypes mockExpertiseCode = mock(PrsCtProvExpertiseTypes.class);
        when(mockExpertiseCode.getCtlId()).thenReturn(expertiseTypeId);
        
        ExpertiseDto dto = new ExpertiseDto();
        dto.setTypeId(mockExpertiseCode.getCtlId());
        when(codesDao.lookup(PrsCtProvExpertiseTypes.class, dto.getTypeId())).thenReturn(mockExpertiseCode);
        PrsProviderExpertises result = dtoConverter.toEntity(dto);

        assertEquals(mockExpertiseCode, result.getProviderExpertiseTypeCode());
    }

    @Test
    public void testToEntity_sourceCode_empty() {
        ExpertiseDto dto = new ExpertiseDto();
        String someSource = "";

        dto.setSourcesCode(someSource);
        PrsProviderExpertises result = dtoConverter.toEntity(dto);

        assertEquals(someSource, result.getOriginalSourceProviderCode());
    }

    @Test
    public void testToEntity_sourceCode_null() {
        ExpertiseDto dto = new ExpertiseDto();
        String someSource = null;

        dto.setSourcesCode(someSource);
        PrsProviderExpertises result = dtoConverter.toEntity(dto);

        assertEquals(someSource, result.getOriginalSourceProviderCode());
    }

    
    @Test
    public void testToEntity_effectiveStartDate_expertise() {
        ExpertiseDto dto = new ExpertiseDto();

        Date someDate = new Date();

        dto.setEffectiveStartDate(someDate);
        PrsProviderExpertises result = dtoConverter.toEntity(dto);

        assertEquals(someDate, result.getEffectiveStartDate());
    }

    @Test
    public void testToEntity_effectiveEndDate_expertise() {
        ExpertiseDto dto = new ExpertiseDto();

        Date someDate = new Date();

        dto.setEffectiveEndDate(someDate);
        PrsProviderExpertises result = dtoConverter.toEntity(dto);

        assertEquals(someDate, result.getEffectiveEndDate());
    }

}