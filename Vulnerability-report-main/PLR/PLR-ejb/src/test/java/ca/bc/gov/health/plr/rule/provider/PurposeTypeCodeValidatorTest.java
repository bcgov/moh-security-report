/*
 * *********************************************************************************************************************
 *  Copyright (c) 2018, Ministry of Health, BC.                                                                        *
 *                                                                                                                     *
 *  All rights reserved.                                                                                               *
 *    This information contained herein may not be used in whole                                                       *
 *    or in part without the express written consent of the                                                            *
 *    Government of British Columbia, Canada.                                                                          *
 *                                                                                                                     *
 *  Revision Control Information                                                                                       *
 *  File:                $Id::                                                                                       $ *
 *  Date of Last Commit: $Date::                                                                                     $ *
 *  Revision Number:     $Rev::                                                                                      $ *
 *  Last Commit by:      $Author::                                                                                   $ *
 *                                                                                                                     *
 * *********************************************************************************************************************
 */
package ca.bc.gov.health.plr.rule.provider;

import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.util.CodeDaoMocks;
import javax.validation.ConstraintValidatorContext;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * Validator test for the Location DTO.
 *
 * @author CGI Information Management Consultants Inc.
 */
public class PurposeTypeCodeValidatorTest {

    @Test
    public void testIsValid() {

        PurposeTypeCodeValidator ptcv = new PurposeTypeCodeValidator();
        CodesDao codesDao = mock(CodesDao.class);

        CodeDaoMocks.setupCodesDaoMocks(codesDao);

        ptcv.codesDao = codesDao;

        assertTrue(ptcv.isValid(new TelecommunicationDto() {
            {
                setCommunicationPurposeCode(CodeDaoMocks.NOT_EMERGENCY_CONTACT_CODE_NAME);
                setWlWlId(new Long(1));
            }
        }, makeConstraintValidatorContext()));

        assertFalse(ptcv.isValid(new AddressDto() {
            {
                setCommunicationPurposeCode(CodeDaoMocks.EMERGENCY_CONTACT_CODE_NAME);
            }
        }, makeConstraintValidatorContext()));

        assertTrue(ptcv.isValid(new AddressDto() {
            {
                setCommunicationPurposeCode(CodeDaoMocks.NOT_EMERGENCY_CONTACT_CODE_NAME);
            }
        }, makeConstraintValidatorContext()));

        assertFalse(ptcv.isValid(new ElectronicAddressDto() {
            {
                setCommunicationPurposeCode(CodeDaoMocks.EMERGENCY_CONTACT_CODE_NAME);
            }
        }, makeConstraintValidatorContext()));

        assertTrue(ptcv.isValid(new ElectronicAddressDto() {
            {
                setCommunicationPurposeCode(CodeDaoMocks.NOT_EMERGENCY_CONTACT_CODE_NAME);
            }
        }, makeConstraintValidatorContext()));

        assertFalse(ptcv.isValid(new TelecommunicationDto() {
            {
                setCommunicationPurposeCode(CodeDaoMocks.EMERGENCY_CONTACT_CODE_NAME);
                setWlWlId(new Long(2));
            }
        }, makeConstraintValidatorContext()));

        assertFalse(ptcv.isValid(new TelecommunicationDto() {
            {
                setCommunicationPurposeCode("notvalid");
                setWlWlId(new Long(3));
            }
        }, makeConstraintValidatorContext()));

    }

    private ConstraintValidatorContext makeConstraintValidatorContext() {
        ConstraintValidatorContext context = mock(ConstraintValidatorContext.class);
        ConstraintValidatorContext.ConstraintViolationBuilder mocBuilder = mock(ConstraintValidatorContext.ConstraintViolationBuilder.class);
        when(mocBuilder.addNode(anyString())).thenReturn(mock(ConstraintValidatorContext.ConstraintViolationBuilder.NodeBuilderDefinedContext.class));
        when(context.buildConstraintViolationWithTemplate(anyString())).thenReturn(mocBuilder);
        return context;
    }

}
