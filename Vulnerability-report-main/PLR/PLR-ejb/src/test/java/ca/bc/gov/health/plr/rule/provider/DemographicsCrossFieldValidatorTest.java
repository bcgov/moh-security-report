package ca.bc.gov.health.plr.rule.provider;

import ca.bc.gov.health.plr.dto.provider.DemographicDetailsDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvState;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.service.provider.AddressSupportService;
import ca.bc.gov.health.plr.util.CodeDaoMocks;
import javax.validation.ConstraintValidatorContext;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import org.junit.Test;
import static org.mockito.Matchers.anyString;
import org.mockito.Mockito;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *
 * @author jonathan.wiebe
 */
public class DemographicsCrossFieldValidatorTest {

    @Test
    public void testIsValid() {
        DemographicsCrossFieldValidator dcfv = new DemographicsCrossFieldValidator();
        CodesDao codesDao = mock(CodesDao.class);
        AddressSupportService addressSupportService = mock(AddressSupportService.class);

        CodeDaoMocks.setupCodesDaoMocks(codesDao);
        makeAddressSupportMocks(addressSupportService);

        dcfv.codesDao = codesDao;
        dcfv.addressSupportService = addressSupportService;

        // CA and ON true
        assertTrue(dcfv.isValid(new DemographicDetailsDto() {
            {
                this.setBirthCountryCode(CodeDaoMocks.COUNTRY_CODE_NAME_CA);
                this.setBirthCountryCodeId(CodeDaoMocks.COUNTRY_CODE_ID_CA);
                this.setBirthProvState(CodeDaoMocks.PROV_CODE_NAME_ON);
            }
        }, makeConstraintValidatorContext()));

        // US and AZ true
        assertTrue(dcfv.isValid(new DemographicDetailsDto() {
            {
                this.setBirthCountryCode(CodeDaoMocks.COUNTRY_CODE_NAME_US);
                this.setBirthCountryCodeId(CodeDaoMocks.COUNTRY_CODE_ID_US);
                this.setBirthProvState(CodeDaoMocks.STATE_CODE_NAME_AZ);
            }
        }, makeConstraintValidatorContext()));

        // US and ON false
        assertFalse(dcfv.isValid(new DemographicDetailsDto() {
            {
                this.setBirthCountryCode(CodeDaoMocks.COUNTRY_CODE_NAME_US);
                this.setBirthCountryCodeId(CodeDaoMocks.COUNTRY_CODE_ID_US);
                this.setBirthProvState(CodeDaoMocks.PROV_CODE_NAME_ON);
            }
        }, makeConstraintValidatorContext()));

        // when not US or CA any prov text is disallowed
        assertFalse(dcfv.isValid(new DemographicDetailsDto() {
            {
                this.setBirthCountryCode("AF");
                this.setBirthCountryCodeId(CodeDaoMocks.GARBAGE_CODE);
                this.setBirthProvState("googls");
            }
        }, makeConstraintValidatorContext()));

        assertTrue(dcfv.isValid(new DemographicDetailsDto() {
            {
                this.setBirthCountryCode("AF");
                this.setBirthCountryCodeId(CodeDaoMocks.GARBAGE_CODE);
                this.setBirthProvState("");
            }
        }, makeConstraintValidatorContext()));

        assertTrue(dcfv.isValid(new DemographicDetailsDto() {
            {
                this.setBirthCountryCode("AF");
                this.setBirthCountryCodeId(17l);
                this.setBirthProvState(null);
            }
        }, makeConstraintValidatorContext()));

        assertTrue(dcfv.isValid(new DemographicDetailsDto() {
            {
                this.setBirthCountryCode("AF");
                this.setBirthCountryCodeId(null);
                this.setBirthProvState(null);
            }
        }, makeConstraintValidatorContext()));

        // when not US or CA any prov text is disallowed
        assertFalse(dcfv.isValid(new DemographicDetailsDto() {
            {
                this.setBirthCountryCode(null);
                this.setBirthCountryCodeId(null);
                this.setBirthProvState("frutiy");
            }
        }, makeConstraintValidatorContext()));

        // let other validators deal with missing demographics if necessary, don't assume it's invalid
        assertTrue(dcfv.isValid(null, makeConstraintValidatorContext()));

    }

    /**
     * create the mocks
     *
     * @param codesDao
     * @param addressSupportService
     */
    public void makeAddressSupportMocks(AddressSupportService addressSupportService) {
        Mockito.doReturn(null).when(addressSupportService).getProvinceDetailsByCountry(anyString(), anyString());
        Mockito.doReturn(new PrsCtProvState()).when(addressSupportService).getProvinceDetailsByCountry(CodeDaoMocks.COUNTRY_CODE_NAME_CA, CodeDaoMocks.PROV_CODE_NAME_ON);
        Mockito.doReturn(new PrsCtProvState()).when(addressSupportService).getProvinceDetailsByCountry(CodeDaoMocks.COUNTRY_CODE_NAME_US, CodeDaoMocks.STATE_CODE_NAME_AZ);
        Mockito.doReturn(null).when(addressSupportService).getProvinceDetailsByCountry(CodeDaoMocks.COUNTRY_CODE_NAME_CA, "TR");
        Mockito.doReturn(null).when(addressSupportService).getProvinceDetailsByCountry(CodeDaoMocks.COUNTRY_CODE_NAME_US, "TR");
    }

    private ConstraintValidatorContext makeConstraintValidatorContext() {
        ConstraintValidatorContext context = mock(ConstraintValidatorContext.class);
        ConstraintValidatorContext.ConstraintViolationBuilder mocBuilder = mock(ConstraintValidatorContext.ConstraintViolationBuilder.class);
        when(mocBuilder.addNode(anyString())).thenReturn(mock(ConstraintValidatorContext.ConstraintViolationBuilder.NodeBuilderDefinedContext.class));
        when(context.buildConstraintViolationWithTemplate(anyString())).thenReturn(mocBuilder);
        return context;
    }

}
