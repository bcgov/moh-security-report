/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.remote;

import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import java.util.ArrayList;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author jonathan.wiebe
 */
public class MaintainProviderEsbProcessorTest {

    public MaintainProviderEsbProcessorTest() {
    }

    /**
     * Test null, should not return acknowledgment
     * @throws Exception 
     */
    @Test
    public void testValidateAddressLineFour_nullAddressLine4() throws Exception {
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setProviderDetails(new ProviderDetails());
        MaintainProviderResponse response = new MaintainProviderResponse();
        MaintainProviderEsbProcessor proc = new MaintainProviderEsbProcessor();
        
        // test null
        request.getProviderDetails().setAddresses(new ArrayList() {
            {
                this.add(new AddressDto(){{ setAddressLineFour(null);}});
            }
        });

        proc.validateAddressLineFour(request, response);
        assertTrue(response.getAcknowledgments().size() == 0);
    }

    /**
     * Test empty, should not return acknowledgment
     * @throws Exception 
     */
    @Test
    public void testValidateAddressLineFour_emptyAddressLine4() throws Exception {
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setProviderDetails(new ProviderDetails());
        MaintainProviderResponse response = new MaintainProviderResponse();
        MaintainProviderEsbProcessor proc = new MaintainProviderEsbProcessor();
        
        // test null
        request.getProviderDetails().setAddresses(new ArrayList() {
            {
                this.add(new AddressDto(){{ setAddressLineFour(""); setAddressLineFour("");}});
            }
        });

        proc.validateAddressLineFour(request, response);
        assertTrue(response.getAcknowledgments().size() == 0);
    }
    
    /**
     * Test strings, should return acknowledgment
     * @throws Exception 
     */
    @Test
    public void testValidateAddressLineFour_stringAddressLine4() throws Exception {
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setProviderDetails(new ProviderDetails());
        MaintainProviderResponse response = new MaintainProviderResponse();
        MaintainProviderEsbProcessor proc = new MaintainProviderEsbProcessor();
        
        // test null
        request.getProviderDetails().setAddresses(new ArrayList() {
            {
                this.add(new AddressDto(){{ setAddressLineFour("String"); }});
                this.add(new AddressDto(){{ setAddressLineFour("String"); }});
            }
        });

        proc.validateAddressLineFour(request, response);
        assertTrue(response.getAcknowledgments().size() == 2);
    }
    
    /**
     * Test null, sting and empty, should return acknowledgment
     * @throws Exception 
     */
    @Test
    public void testValidateAddressLineFour_comboAddressLine4() throws Exception {
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setProviderDetails(new ProviderDetails());
        MaintainProviderResponse response = new MaintainProviderResponse();
        MaintainProviderEsbProcessor proc = new MaintainProviderEsbProcessor();
        
        // test null
        request.getProviderDetails().setAddresses(new ArrayList() {
            {
                this.add(new AddressDto(){{ setAddressLineFour("String"); }});
                this.add(new AddressDto(){{ setAddressLineFour(""); }});
                this.add(new AddressDto(){{ setAddressLineFour(null); }});
            }
        });

        proc.validateAddressLineFour(request, response);
        assertTrue(response.getAcknowledgments().size() == 1);
    }
}
