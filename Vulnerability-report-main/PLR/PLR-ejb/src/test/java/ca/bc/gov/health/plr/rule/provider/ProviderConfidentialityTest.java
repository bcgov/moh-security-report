package ca.bc.gov.health.plr.rule.provider;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.ProviderType;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import ca.bc.gov.health.plr.util.PlrRoleHelper;
import ca.bc.gov.health.plr.util.SpoofedUserHelper;
import org.junit.After;
import static org.junit.Assert.*;
import org.junit.Test;

/**
 *
 * @author Grant.Hodgins
 */
public class ProviderConfidentialityTest extends  IntegrationSetup{

    @After
    public void setAdminUser(){
        SpoofedUserHelper.currentUser = "plr-reg-admin";
    }
    /**
     * Test of applyConfidentiality method, of class ProviderConfidentiality.
     */
    @Test
    public void testApplyConfidentiality_publicDetails() {
        SpoofedUserHelper.currentUser = "plr-restricted";
        ProviderDto details = ProviderTestDataBuilder.getPublicProviderDetails();
        ProviderDto result = providerConfidentiality.applyConfidentiality(details);
        assertNotNull(result);
        assertTrue(!result.getAddresses().isEmpty());
        assertTrue(!result.getConditions().isEmpty());
        assertTrue(result.getConfidentialityIndicators().isEmpty());
        assertTrue(!result.getCredentials().isEmpty());
        assertTrue(!result.getDemographicDetails().isEmpty());
        assertTrue(!result.getDisciplinaryActions().isEmpty());
        assertTrue(!result.getElectronicAddresses().isEmpty());
        assertTrue(!result.getExpertise().isEmpty());
        assertTrue(!result.getIdentifiers().isEmpty());
        assertTrue(!result.getInformationRoutes().isEmpty());
        assertTrue(!result.getIndNames().isEmpty());
        assertTrue(!result.getNotes().isEmpty());
        assertTrue(!result.getProviderRelationships().isEmpty());
        assertTrue(!result.getRegistryIdentifiers().isEmpty());
        assertTrue(!result.getRegistryUserRelationships().isEmpty());
        assertTrue(!result.getStatuses().isEmpty());
        assertTrue(!result.getTelecommunication().isEmpty());
        assertTrue(!result.getWorkLocationList().isEmpty());
        assertEquals(10L, (long) result.getPauthId());
    }

    @Test
    public void testApplyConfidentiality_confidentialDetails_Individual() {
        SpoofedUserHelper.currentUser = "plr-restricted";
        ProviderDto details = ProviderTestDataBuilder.getConfidentialProviderDetails();
        ProviderDto result = providerConfidentiality.applyConfidentiality(details);
        assertNotNull(result);
        assertTrue(result.getAddresses().isEmpty());        
        assertTrue(result.getConditions().isEmpty());
        assertTrue(result.getCredentials().isEmpty());
        assertTrue(result.getDemographicDetails().isEmpty());
        assertTrue(result.getDisciplinaryActions().isEmpty());
        assertTrue(result.getElectronicAddresses().isEmpty());
        assertTrue(result.getExpertise().isEmpty());
        assertFalse(result.getIdentifiers().isEmpty());
        assertTrue(result.getInformationRoutes().isEmpty());
        assertFalse(result.getIndNames().isEmpty());
        assertTrue(result.getIndNames().get(0).isDisplayActive());
        assertTrue(result.getIndNames().get(0).getLastName().equals(Consts.CONFIDENTIAL));
        assertTrue(result.getNotes().isEmpty());
        assertTrue(result.getProviderRelationships().isEmpty());
        assertTrue(result.getRegistryUserRelationships().isEmpty());
        assertTrue(result.getStatuses().isEmpty());
        assertTrue(result.getTelecommunication().isEmpty());
        assertTrue(result.getWorkLocationList().isEmpty());
        assertEquals(10L, (long) result.getPauthId());
    }
    @Test
    public void testApplyConfidentiality_confidentialDetails_Organization() {
        SpoofedUserHelper.currentUser = "plr-restricted";
        ProviderDto details = ProviderTestDataBuilder.getConfidentialProviderDetails();
        details.getIndNames().clear();
        details.getOrgNames().clear();
        details.getOrgNames().add(ProviderTestDataBuilder.getOrgName());
        details.setProviderType(ProviderType.ORGANIZATION);
        
        ProviderDto result = providerConfidentiality.applyConfidentiality(details);
        assertNotNull(result);
        assertTrue(result.getAddresses().isEmpty());        
        assertTrue(result.getConditions().isEmpty());
        assertTrue(result.getCredentials().isEmpty());
        assertTrue(result.getDemographicDetails().isEmpty());
        assertTrue(result.getDisciplinaryActions().isEmpty());
        assertTrue(result.getElectronicAddresses().isEmpty());
        assertTrue(result.getExpertise().isEmpty());
        assertFalse(result.getIdentifiers().isEmpty());
        assertTrue(result.getInformationRoutes().isEmpty());
        assertFalse(result.getOrgNames().isEmpty());
        assertTrue(result.getOrgNames().get(0).isDisplayActive());
        assertTrue(result.getOrgNames().get(0).getName().equals(Consts.CONFIDENTIAL));
        assertTrue(result.getNotes().isEmpty());
        assertTrue(result.getProviderRelationships().isEmpty());
        assertTrue(result.getRegistryUserRelationships().isEmpty());
        assertTrue(result.getStatuses().isEmpty());
        assertTrue(result.getTelecommunication().isEmpty());
        assertTrue(result.getWorkLocationList().isEmpty());
        assertEquals(10L, (long) result.getPauthId());
    }
}
