package ca.bc.gov.health.plr.rule.provider;

import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import java.util.Collections;
import java.util.HashSet;
import java.util.Set;
import javax.naming.NamingException;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import org.hamcrest.CoreMatchers;
import org.junit.Assert;
import static org.junit.Assert.assertEquals;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 *
 * @author ian.scott
 */
public class AddressCrossFieldValidatorTest extends IntegrationSetup {

    private static Validator validator;
    private AddressDto addr;
    private Set<String> expected;

    @BeforeClass
    public static void setup() throws NamingException, Exception {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        validator = factory.getValidator();
    }

    @Before
    public void before() throws Exception {
        if (expected == null) {
            expected = new HashSet<>();
        } else {
            expected.clear();
        }
        addr = ProviderTestDataBuilder.getAddress();

    }

    @Test
    public void addressPostal_postalBlankCanada() {

        addr.setCity("toda");
        addr.setCountryCode("CA");
        addr.setPostalCode(null);
        processValidation(expected);
    }

    @Test
    public void addressPostal_postalBlankNotCanada() {
        addr.setCity("toda");
        addr.setCountryCode("SD");
        addr.setPostalCode(null);
        processValidation(expected);
    }

    @Test
    public void addressPostal_postalEmptyNotCanada() {
        addr.setCity("toda");
        addr.setCountryCode("SD");
        addr.setPostalCode("");
        processValidation(expected);
    }

    @Test
    public void addressPostal_Postal_NoSpaceUpperCase_Canada() {

        addr.setCity("toda");
        addr.setPostalCode("V8V8V8");
        processValidation(expected);
    }

    @Test
    public void addressPostal_Postal_SpaceUpperCase_Canada() {

        addr.setCity("toda");
        addr.setPostalCode("V8V 8V8");
        processValidation(expected);
    }

    @Test
    public void addressPostal_Postal_SpaceLowerCase_Canada() {
        addr.setCity("toda");
        addr.setPostalCode("v8v 8v8");

        expected.add(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ADDRESSPOSTALFIELD_PATTERNMATCH));
        processValidation(expected);
    }

    @Test
    public void addressPostal_Postal_NoSpaceLowerCase_Canada() {

        addr.setCity("toda");
        addr.setPostalCode("v8v8v8");

        expected.add(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ADDRESSPOSTALFIELD_PATTERNMATCH));
        processValidation(expected);

    }

    @Test
    public void addressPostal_Postal_NoSpaceMixCase_Canada() {

        addr.setCity("toda");
        addr.setPostalCode("v8V8v8");

        expected.add(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ADDRESSPOSTALFIELD_PATTERNMATCH));
        processValidation(expected);

    }

    @Test
    public void addressPostal_NoSpaceUpperCaseMissingNumber_Canada() {
        addr.setCity("toda");
        addr.setPostalCode("V8V8V");
        expected.add(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ADDRESSPOSTALFIELD_PATTERNMATCH));
        processValidation(expected);
    }

    @Test
    public void addressPostal_NoSpaceUpperCaseExtraNumber_Canada() {
        addr.setCity("toda");
        addr.setPostalCode("V8V8V88");
        expected.add(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ADDRESSPOSTALFIELD_PATTERNMATCH));
        processValidation(expected);
    }

    @Test
    public void addressPostal_SpaceUpperCaseExtraNumber_Canada() {
        addr.setCity("toda");
        addr.setPostalCode("V8V 8V88");
        expected.add(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ADDRESSPOSTALFIELD_PATTERNMATCH));
        processValidation(expected);
    }
    
    @Test
    public void addressPostalCode_tooLong() {
        addr.setCity("toda");
        addr.setPostalCode("V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8V8");
        expected.add(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ADDRESSPOSTALFIELD_PATTERNMATCH));
        processValidation(expected);
    }
    
    @Test
    public void addressZip_valid() {
        addr.setCountryCode("US");
        addr.setCountryId(2179l);
        addr.setPostalCode("90210");
        addr.setProvinceOrStateTxt("AL");
        processValidation(expected);
    }
    
    @Test
    public void addressZip_tooLong() {
        addr.setCountryCode("US");
        addr.setCountryId(2179l);
        addr.setProvinceOrStateTxt("AL");
        // Field length max is 25.
        addr.setPostalCode(new String(new char[26]).replace('\0', '1'));
        expected.add(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ZIP_TOOLONG));
        processValidation(expected);
    }
    
    @Test
    public void addressProvince_valid() {
        addr.setCountryCode("US");
        addr.setCountryId(2179l);
        addr.setProvinceOrStateTxt("AL");
        processValidation(expected);
    }
    
     @Test
    public void addressProvince_InValid() {
        addr.setCountryCode("CA");
        addr.setCountryId(1239l);
        addr.setProvinceOrStateTxt("XX");
        expected.add(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ADDRESSPROVSTATEFIELD_INVALID));
        processValidation(expected);
    }
    
    @Test
    public void addressProvince_Valid() {
        addr.setCountryCode("UG");
        addr.setCountryId(2235l);
        addr.setProvinceOrStateTxt("XX");
        processValidation(expected);
    }
    
    @Test
    public void testProvinceValidation_countryCA_provinceMandatory() throws Exception {
        AddressDto address = ProviderTestDataBuilder.getAddress();
        address.setProvinceOrStateTxt(null);
        Set<ConstraintViolation<AddressDto>> violations = validator.validate(address);
        assertEquals(1, violations.size());
        String violationMessage = violations.iterator().next().getMessage();
        Assert.assertThat(violationMessage, CoreMatchers.containsString("The following fields must be supplied: 'Address Province'"));
    }
    
    @Test
    public void testProvinceValidation_countryBZ_provinceOptional() throws Exception {
        AddressDto address = ProviderTestDataBuilder.getAddress();
        address.setCountryId(null);
        address.setCountryCode("BZ");
        address.setProvinceOrStateTxt(null);
        Set<ConstraintViolation<AddressDto>> violations = validator.validate(address);
        assertEquals(Collections.EMPTY_SET, violations);
    }

    private void processValidation(Set<String> allExpected) {
        Set<ConstraintViolation<AddressDto>> constraintViolations = validator.validate(addr);
        Set<String> actualMessages = new HashSet<>();
        for (ConstraintViolation<?> constraintViolation : constraintViolations) {
            actualMessages.add(constraintViolation.getMessage());
        }
        assertEquals(allExpected, actualMessages);
    }
}
