/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.dto.provider;

import ca.bc.gov.health.plr.dto.reguser.AccessProfileDto;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.BeforeClass;

/**
 *
 * @author jonathan.wiebe
 */
public class ProviderDtoTest  {

    public ProviderDtoTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    @Test
    public void removeCorrectionsIfNotRegAdminTest() {
        PersonNameDto name = new PersonNameDto();
        name.setEffectiveStartDate(Calendar.getInstance().getTime());
        name.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CORRECT.getValue());
        name.setFirstName("First");
        name.setLastName("Last");
        name.setTypeCode(CodeTableCodes.PrsCtNameTypes.CREDENTIAL_NAME.getValue());
        
        // test removing a CORR
        ProviderDto dto = new ProviderDto();
        ArrayList<PersonNameDto> list = new ArrayList();
        list.add(name);
        dto.setIndNames(list);
        dto.removeCorrectionsIfNotRegAdmin(false);
        assert(dto.getIndNames().size() == 0);
        
        // test leaving a CHG
        name.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CHANGE.getValue());
        list.clear();
        list.add(name);
        dto.setIndNames(list);
        dto.removeCorrectionsIfNotRegAdmin(false);
        assert(dto.getIndNames().size() == 1);

        // test leaving a CEASE
        name.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CEASE.getValue());
        list.clear();
        list.add(name);
        dto.setIndNames(list);
        dto.removeCorrectionsIfNotRegAdmin(false);
        assert(dto.getIndNames().size() == 1);

        // test leaving a CORR as reg adimn
        name.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CORRECT.getValue());
        list.clear();
        list.add(name);
        dto.setIndNames(list);
        dto.removeCorrectionsIfNotRegAdmin(true);
        assert(dto.getIndNames().size() == 1);

        // test leaving a CEASE as reg admin
        name.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CEASE.getValue());
        list.clear();
        list.add(name);
        dto.setIndNames(list);
        dto.removeCorrectionsIfNotRegAdmin(false);
        assert(dto.getIndNames().size() == 1);

        
    }
    
    @Test
    public void removeEffectiveStartDateBeforeDistAfterDateTest() throws ParseException{
        DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");

        Long ruId = 100l;
        String providerRoleType = "RN";
        String rnaDataOwnerCode = "RNA";
        String mohDataOwnerCode = "MOH";
        AccessProfileDto apd1 = new AccessProfileDto();
        apd1.setRuRuId(ruId);
        apd1.setProviderType(providerRoleType);
        apd1.setDataOwnerCode(rnaDataOwnerCode);
        apd1.setDistributeAfter(null);
        AccessProfileDto apd2 = new AccessProfileDto();
        apd2.setRuRuId(ruId);
        apd2.setProviderType(providerRoleType);
        apd2.setDataOwnerCode(rnaDataOwnerCode);
        apd2.setDistributeAfter(formatter.parse("2017-06-18"));
        AccessProfileDto apd3 = new AccessProfileDto();
        apd3.setRuRuId(ruId);
        apd3.setProviderType(providerRoleType);
        apd3.setDataOwnerCode(rnaDataOwnerCode);
        apd3.setDistributeAfter(formatter.parse("2017-06-01"));
        
        AccessProfileDto apd4 = new AccessProfileDto();
        apd4.setRuRuId(ruId);
        apd4.setProviderType(providerRoleType);
        apd4.setDataOwnerCode(mohDataOwnerCode);
        apd4.setDistributeAfter(formatter.parse("2017-06-03"));
        AccessProfileDto apd5 = new AccessProfileDto();
        apd5.setRuRuId(ruId);
        apd5.setProviderType(providerRoleType);
        apd5.setDataOwnerCode(mohDataOwnerCode);
        apd5.setDistributeAfter(formatter.parse("2017-06-11"));
        
        List<AccessProfileDto> accessProfileDtoList = new ArrayList<>();
        accessProfileDtoList.add(apd1);
        accessProfileDtoList.add(apd2);
        accessProfileDtoList.add(apd3);
        accessProfileDtoList.add(apd4);
        accessProfileDtoList.add(apd5);
        
        AddressDto addrDto1 = new AddressDto();
        addrDto1.setAddressLineOne("11 main street");
        addrDto1.setDataOwnerCode(rnaDataOwnerCode);
        addrDto1.setEffectiveStartDate(formatter.parse("2017-10-10"));
        AddressDto addrDto2 = new AddressDto();
        addrDto2.setAddressLineOne("22 main street");
        addrDto2.setDataOwnerCode(rnaDataOwnerCode);
        addrDto2.setEffectiveStartDate(formatter.parse("2017-06-18"));
        List<AddressDto> addrDtoList = new ArrayList<>();
        addrDtoList.add(addrDto1);
        addrDtoList.add(addrDto2);
        
        ProviderDto providerDto = new ProviderDto();
        providerDto.setAddresses(addrDtoList);
        providerDto.removeEffectiveStartDateBeforeDistAfterDate(accessProfileDtoList);
        assertEquals(providerDto.getAddresses().size(), 1);
        assertEquals(providerDto.getAddresses().get(0).getAddressLineOne(), "11 main street");
        
    }    
    
}
