/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.validators;

import ca.bc.gov.health.login.UserPrincipal;
import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.converter.DtoConverter;
import ca.bc.gov.health.plr.dto.converter.OrgNameDtoConverter;
import ca.bc.gov.health.plr.dto.converter.PersonNameDtoConverter;
import ca.bc.gov.health.plr.dto.converter.ProviderIdentifierDtoConverter;
import ca.bc.gov.health.plr.dto.provider.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.PersonNameDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsIdentifiers;
import ca.bc.gov.health.plr.ejb.entity.GrsOrgNames;
import ca.bc.gov.health.plr.ejb.entity.GrsPersonNames;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.PrsCtIdentifierTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.producer.type.RmiUser;
import ca.bc.gov.health.plr.producer.type.User;
import ca.bc.gov.health.plr.rule.provider.ProviderTestDataBuilder;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.enterprise.inject.Instance;
import junit.framework.Assert;
import static org.junit.Assert.fail;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * Test validation scenarios for LastActiveValidator validator
 *
 * @author Adebiyi.Kuseju
 */
public class LastActiveValidatorTest {

    public enum RecordType {

        GRS_IDENTIFIERS, GRS_ORG_NAMES, GRS_PERSON_NAMES
    }

    public enum DataStatus {

        ONE_ACTIVE, MANY_ACTIVE, NON_ACTIVE
    }

    private static LastActiveValidator<GrsIdentifiers> validatorForGrsIdentifier = new LastActiveValidator<>();
    private static LastActiveValidator<GrsOrgNames> validatorForGrsOrgName = new LastActiveValidator<>();
    private static LastActiveValidator<GrsPersonNames> validatorForGrsPersonName = new LastActiveValidator<>();
    private static ProviderIdentifierDtoConverter collegeIdDtoConverter = new ProviderIdentifierDtoConverter();
    private static OrgNameDtoConverter orgNameDtoConverter = new OrgNameDtoConverter();
    private static PersonNameDtoConverter personNameDtoConverter = new PersonNameDtoConverter();

    private static PrsProviders provider = new PrsProviders(Long.MAX_VALUE);
    private static GrsCtBooleanTypes active = new GrsCtBooleanTypes();
    private static GrsCtBooleanTypes inactive = new GrsCtBooleanTypes();
    private static GrsCtEndReasonTypes ceased = new GrsCtEndReasonTypes();
    private static GrsCtEndReasonTypes changed = new GrsCtEndReasonTypes();
    private static PrsCtIdentifierTypes idType = new PrsCtIdentifierTypes();
    private static Instance instance;
    private static Set<String> roles = new HashSet<>();

    @BeforeClass
    public static void initSetup() throws Exception {

        active.setCtlNameCode(CodeTableCodes.GrsCtBooleanTypes.YES.getValue());
        inactive.setCtlNameCode(CodeTableCodes.GrsCtBooleanTypes.NO.getValue());
        ceased.setCtlNameCode(CodeTableCodes.GrsCtEndReasonTypes.CEASE.getValue());
        changed.setCtlNameCode(CodeTableCodes.GrsCtEndReasonTypes.CHANGE.getValue());
        idType.setCtlNameCode("ACPID");

        // Set up mocks
        EntityManager em = mock(EntityManager.class);
        when(em.find(PrsProviders.class, Long.MAX_VALUE)).thenReturn(provider);
        setPrivateMember("em", em, collegeIdDtoConverter);
        setPrivateMember("em", em, orgNameDtoConverter);
        setPrivateMember("em", em, personNameDtoConverter);
        
        CodesDao codesDao = mock(CodesDao.class);
        when(codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES)).thenReturn(active);
        when(codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.NO)).thenReturn(inactive);
        when(codesDao.lookup(PrsCtIdentifierTypes.class, "ACPID")).thenReturn(idType);
        setPrivateMember("codesDao", codesDao, collegeIdDtoConverter);
        setPrivateMember("codesDao", codesDao, orgNameDtoConverter);
        setPrivateMember("codesDao", codesDao, personNameDtoConverter);

        DtoConverter dtoConverterHelper = new DtoConverter();
        setPrivateMember("dtoConverter", dtoConverterHelper, collegeIdDtoConverter);
        setPrivateMember("dtoConverter", dtoConverterHelper, orgNameDtoConverter);
        setPrivateMember("dtoConverter", dtoConverterHelper, personNameDtoConverter);
        setPrivateMember("codesDao", codesDao, dtoConverterHelper);

        // Set up logged in user
        UserPrincipal userPrincipal = mock(UserPrincipal.class);
        when(userPrincipal.getRoles()).thenReturn(roles);

        User rmiUser = mock(RmiUser.class);
        when(rmiUser.getUserPrincipal()).thenReturn(userPrincipal);

        instance = mock(Instance.class);
        when(instance.get()).thenReturn(rmiUser);
        setPrivateMember("user", instance, validatorForGrsIdentifier);
        setPrivateMember("user", instance, validatorForGrsOrgName);
        setPrivateMember("user", instance, validatorForGrsPersonName);

    }

    @Before
    public void setup() {
        roles.clear();
    }

    public LastActiveValidatorTest() {

    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_RegAdminRole_SingleActiveRecord_GrsIdentifier() throws Exception {
        roles.add(Consts.REG_AMDIN_ROLE);

        PrsProviders provider = getData(RecordType.GRS_IDENTIFIERS, DataStatus.ONE_ACTIVE);
        provider.getGrsIdentifiersList().get(0).setEndReasonCode(ceased);
        try {
            validatorForGrsIdentifier.validate(provider.getGrsIdentifiersList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a  REG_ADMIN user CEASES an identifier record");
        }

    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test(expected = EntityValidationException.class)
    public void testValidate_OtherRoles_SingleActiveRecord_GrsIdentifier() throws Exception {
        roles.add(Consts.PRIMARY_SOURCE_ROLE);
        roles.add(Consts.SECONDARY_SOURCE_ROLE);
        roles.add(Consts.CONSUMER_ROLE);

        PrsProviders provider = getData(RecordType.GRS_IDENTIFIERS, DataStatus.ONE_ACTIVE);
        provider.getGrsIdentifiersList().get(0).setEndReasonCode(ceased);

        validatorForGrsIdentifier.validate(provider.getGrsIdentifiersList().get(0));

    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_RegAdminRole_MultipleActiveRecords_GrsIdentifier() throws Exception {
        roles.add(Consts.REG_AMDIN_ROLE);

        PrsProviders provider = getData(RecordType.GRS_IDENTIFIERS, DataStatus.MANY_ACTIVE);
        provider.getGrsIdentifiersList().get(0).setEndReasonCode(ceased);
        try {
            validatorForGrsIdentifier.validate(provider.getGrsIdentifiersList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a  REG_ADMIN user CEASES an identifier record");
        }

    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_OtherRoles_MultipleActiveRecords_GrsIdentifier() throws Exception {
        roles.add(Consts.PRIMARY_SOURCE_ROLE);
        roles.add(Consts.SECONDARY_SOURCE_ROLE);
        roles.add(Consts.CONSUMER_ROLE);

        PrsProviders provider = getData(RecordType.GRS_IDENTIFIERS, DataStatus.MANY_ACTIVE);
        provider.getGrsIdentifiersList().get(0).setEndReasonCode(ceased);

        try {
            validatorForGrsIdentifier.validate(provider.getGrsIdentifiersList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a non REG_ADMIN user CEASES an identifier record with at least two active");
        }
    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_RegAdminRole_NoActiveRecord_GrsIdentifier() throws Exception {
        roles.add(Consts.REG_AMDIN_ROLE);

        PrsProviders provider = getData(RecordType.GRS_IDENTIFIERS, DataStatus.NON_ACTIVE);
        provider.getGrsIdentifiersList().get(0).setEndReasonCode(ceased);
        try {
            validatorForGrsIdentifier.validate(provider.getGrsIdentifiersList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a REG_ADMIN user CEASES an identifier record with at no existing active record");
        }

    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_OtherRoles_NoActiveRecord_GrsIdentifier() throws Exception {
        roles.add(Consts.PRIMARY_SOURCE_ROLE);
        roles.add(Consts.SECONDARY_SOURCE_ROLE);
        roles.add(Consts.CONSUMER_ROLE);

        PrsProviders provider = getData(RecordType.GRS_IDENTIFIERS, DataStatus.NON_ACTIVE);
        provider.getGrsIdentifiersList().get(0).setEndReasonCode(ceased);

        try {
            validatorForGrsIdentifier.validate(provider.getGrsIdentifiersList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a non REG_ADMIN user CEASES an identifier record with at no existing active record");
        }
    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_RegAdminRole_NotCeased_GrsIdentifier() throws Exception {
        roles.add(Consts.REG_AMDIN_ROLE);

        PrsProviders provider = getData(RecordType.GRS_IDENTIFIERS, DataStatus.NON_ACTIVE);
        try {
            validatorForGrsIdentifier.validate(provider.getGrsIdentifiersList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a REG_ADMIN user CEASES an identifier record with at no existing active record");
        }

    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_OtherRoles_NotCeased_GrsIdentifier() throws Exception {
        roles.add(Consts.PRIMARY_SOURCE_ROLE);
        roles.add(Consts.SECONDARY_SOURCE_ROLE);
        roles.add(Consts.CONSUMER_ROLE);

        PrsProviders provider = getData(RecordType.GRS_IDENTIFIERS, DataStatus.NON_ACTIVE);

        try {
            validatorForGrsIdentifier.validate(provider.getGrsIdentifiersList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a non REG_ADMIN user CEASES an identifier record with at no existing active record");
        }
    }
    
    
    //============================================= Grs Org Names Tests =======================================
    
    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_RegAdminRole_SingleActiveRecord_GrsOrgName() throws Exception {
        roles.add(Consts.REG_AMDIN_ROLE);

        PrsProviders provider = getData(RecordType.GRS_ORG_NAMES, DataStatus.ONE_ACTIVE);
        provider.getGrsOrgNamesList().get(0).setEndReasonCode(ceased);
        try {
            validatorForGrsOrgName.validate(provider.getGrsOrgNamesList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a  REG_ADMIN user CEASES an OrgName record");
        }

    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test(expected = EntityValidationException.class)
    public void testValidate_OtherRoles_SingleActiveRecord_GrsOrgName() throws Exception {
        roles.add(Consts.PRIMARY_SOURCE_ROLE);
        roles.add(Consts.SECONDARY_SOURCE_ROLE);
        roles.add(Consts.CONSUMER_ROLE);

        PrsProviders provider = getData(RecordType.GRS_ORG_NAMES, DataStatus.ONE_ACTIVE);
        provider.getGrsOrgNamesList().get(0).setEndReasonCode(ceased);

        validatorForGrsOrgName.validate(provider.getGrsOrgNamesList().get(0));

    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_RegAdminRole_MultipleActiveRecords_GrsOrgName() throws Exception {
        roles.add(Consts.REG_AMDIN_ROLE);

        PrsProviders provider = getData(RecordType.GRS_ORG_NAMES, DataStatus.MANY_ACTIVE);
        provider.getGrsOrgNamesList().get(0).setEndReasonCode(ceased);
        try {
            validatorForGrsOrgName.validate(provider.getGrsOrgNamesList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a  REG_ADMIN user CEASES an OrgName record");
        }

    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_OtherRoles_MultipleActiveRecords_GrsOrgName() throws Exception {
        roles.add(Consts.PRIMARY_SOURCE_ROLE);
        roles.add(Consts.SECONDARY_SOURCE_ROLE);
        roles.add(Consts.CONSUMER_ROLE);

        PrsProviders provider = getData(RecordType.GRS_ORG_NAMES, DataStatus.MANY_ACTIVE);
        provider.getGrsOrgNamesList().get(0).setEndReasonCode(ceased);

        try {
            validatorForGrsOrgName.validate(provider.getGrsOrgNamesList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a non REG_ADMIN user CEASES an OrgName record with at least two active");
        }
    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_RegAdminRole_NoActiveRecord_GrsOrgName() throws Exception {
        roles.add(Consts.REG_AMDIN_ROLE);

        PrsProviders provider = getData(RecordType.GRS_ORG_NAMES, DataStatus.NON_ACTIVE);
        provider.getGrsOrgNamesList().get(0).setEndReasonCode(ceased);
        try {
            validatorForGrsOrgName.validate(provider.getGrsOrgNamesList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a REG_ADMIN user CEASES an OrgName record with at no existing active record");
        }

    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_OtherRoles_NoActiveRecord_GrsOrgName() throws Exception {
        roles.add(Consts.PRIMARY_SOURCE_ROLE);
        roles.add(Consts.SECONDARY_SOURCE_ROLE);
        roles.add(Consts.CONSUMER_ROLE);

        PrsProviders provider = getData(RecordType.GRS_ORG_NAMES, DataStatus.NON_ACTIVE);
        provider.getGrsOrgNamesList().get(0).setEndReasonCode(ceased);

        try {
            validatorForGrsOrgName.validate(provider.getGrsOrgNamesList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a non REG_ADMIN user CEASES an OrgName record with at no existing active record");
        }
    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_RegAdminRole_NotCeased_GrsOrgName() throws Exception {
        roles.add(Consts.REG_AMDIN_ROLE);

        PrsProviders provider = getData(RecordType.GRS_ORG_NAMES, DataStatus.NON_ACTIVE);
        try {
            validatorForGrsOrgName.validate(provider.getGrsOrgNamesList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a REG_ADMIN user CEASES an OrgName record with at no existing active record");
        }

    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_OtherRoles_NotCeased_GrsOrgName() throws Exception {
        roles.add(Consts.PRIMARY_SOURCE_ROLE);
        roles.add(Consts.SECONDARY_SOURCE_ROLE);
        roles.add(Consts.CONSUMER_ROLE);

        PrsProviders provider = getData(RecordType.GRS_ORG_NAMES, DataStatus.NON_ACTIVE);

        try {
            validatorForGrsOrgName.validate(provider.getGrsOrgNamesList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a non REG_ADMIN user CEASES an OrgName record with at no existing active record");
        }
    }
    
    
    //================================== Grs Person Names test ==================================

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_RegAdminRole_SingleActiveRecord_GrsPersonName() throws Exception {
        roles.add(Consts.REG_AMDIN_ROLE);

        PrsProviders provider = getData(RecordType.GRS_PERSON_NAMES, DataStatus.ONE_ACTIVE);
        provider.getGrsPersonNamesList().get(0).setEndReasonCode(ceased);
        try {
            validatorForGrsPersonName.validate(provider.getGrsPersonNamesList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a  REG_ADMIN user CEASES an PersonName record");
        }

    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test(expected = EntityValidationException.class)
    public void testValidate_OtherRoles_SingleActiveRecord_GrsPersonName() throws Exception {
        roles.add(Consts.PRIMARY_SOURCE_ROLE);
        roles.add(Consts.SECONDARY_SOURCE_ROLE);
        roles.add(Consts.CONSUMER_ROLE);

        PrsProviders provider = getData(RecordType.GRS_PERSON_NAMES, DataStatus.ONE_ACTIVE);
        provider.getGrsPersonNamesList().get(0).setEndReasonCode(ceased);

        validatorForGrsPersonName.validate(provider.getGrsPersonNamesList().get(0));

    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_RegAdminRole_MultipleActiveRecords_GrsPersonName() throws Exception {
        roles.add(Consts.REG_AMDIN_ROLE);

        PrsProviders provider = getData(RecordType.GRS_PERSON_NAMES, DataStatus.MANY_ACTIVE);
        provider.getGrsPersonNamesList().get(0).setEndReasonCode(ceased);
        try {
            validatorForGrsPersonName.validate(provider.getGrsPersonNamesList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a  REG_ADMIN user CEASES an PersonName record");
        }

    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_OtherRoles_MultipleActiveRecords_GrsPersonName() throws Exception {
        roles.add(Consts.PRIMARY_SOURCE_ROLE);
        roles.add(Consts.SECONDARY_SOURCE_ROLE);
        roles.add(Consts.CONSUMER_ROLE);

        PrsProviders provider = getData(RecordType.GRS_PERSON_NAMES, DataStatus.MANY_ACTIVE);
        provider.getGrsPersonNamesList().get(0).setEndReasonCode(ceased);

        try {
            validatorForGrsPersonName.validate(provider.getGrsPersonNamesList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a non REG_ADMIN user CEASES an PersonName record with at least two active");
        }
    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_RegAdminRole_NoActiveRecord_GrsPersonName() throws Exception {
        roles.add(Consts.REG_AMDIN_ROLE);

        PrsProviders provider = getData(RecordType.GRS_PERSON_NAMES, DataStatus.NON_ACTIVE);
        provider.getGrsPersonNamesList().get(0).setEndReasonCode(ceased);
        try {
            validatorForGrsPersonName.validate(provider.getGrsPersonNamesList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a REG_ADMIN user CEASES an PersonName record with at no existing active record");
        }

    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_OtherRoles_NoActiveRecord_GrsPersonName() throws Exception {
        roles.add(Consts.PRIMARY_SOURCE_ROLE);
        roles.add(Consts.SECONDARY_SOURCE_ROLE);
        roles.add(Consts.CONSUMER_ROLE);

        PrsProviders provider = getData(RecordType.GRS_PERSON_NAMES, DataStatus.NON_ACTIVE);
        provider.getGrsPersonNamesList().get(0).setEndReasonCode(ceased);

        try {
            validatorForGrsPersonName.validate(provider.getGrsPersonNamesList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a non REG_ADMIN user CEASES an PersonName record with at no existing active record");
        }
    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_RegAdminRole_NotCeased_GrsPersonName() throws Exception {
        roles.add(Consts.REG_AMDIN_ROLE);

        PrsProviders provider = getData(RecordType.GRS_PERSON_NAMES, DataStatus.NON_ACTIVE);
        try {
            validatorForGrsPersonName.validate(provider.getGrsPersonNamesList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a REG_ADMIN user CEASES an PersonName record with at no existing active record");
        }

    }

    /**
     * Test of validate method, of class LastActiveIdentifierValidator.
     */
    @Test
    public void testValidate_OtherRoles_NotCeased_GrsPersonName() throws Exception {
        roles.add(Consts.PRIMARY_SOURCE_ROLE);
        roles.add(Consts.SECONDARY_SOURCE_ROLE);
        roles.add(Consts.CONSUMER_ROLE);

        PrsProviders provider = getData(RecordType.GRS_PERSON_NAMES, DataStatus.NON_ACTIVE);

        try {
            validatorForGrsPersonName.validate(provider.getGrsPersonNamesList().get(0));
        } catch (EntityValidationException e) {
            fail("EntityValidationException should not be thrown when a non REG_ADMIN user CEASES an PersonName record with at no existing active record");
        }
    }
    
    // Mock data
    private PrsProviders getData(RecordType recordType, DataStatus dataStatus) {

        if (RecordType.GRS_IDENTIFIERS.equals(recordType)) {
            List<GrsIdentifiers> grsIdentifiers = new ArrayList<>();
            provider.setGrsIdentifiersList(grsIdentifiers);

            CollegeIdentifierDto collegeIdentifierDto = null;
            GrsIdentifiers grsId = null;

            if (DataStatus.ONE_ACTIVE.equals(dataStatus)) {
            // Create one active record

                collegeIdentifierDto = ProviderTestDataBuilder.getIdentifier();
                collegeIdentifierDto.setPauthId(Long.MAX_VALUE);
                collegeIdentifierDto.setActive(true);
                grsId = collegeIdDtoConverter.toEntity(collegeIdentifierDto);
                grsId.setPauthPauthId(provider);
                grsIdentifiers.add(grsId);

            } else if (DataStatus.MANY_ACTIVE.equals(dataStatus)) {
                // Create more than one active records
                collegeIdentifierDto = ProviderTestDataBuilder.getIdentifier();
                collegeIdentifierDto.setPauthId(Long.MAX_VALUE);
                collegeIdentifierDto.setActive(true);
                grsId = collegeIdDtoConverter.toEntity(collegeIdentifierDto);
                grsId.setPauthPauthId(provider);
                grsIdentifiers.add(grsId);

                collegeIdentifierDto = ProviderTestDataBuilder.getIdentifier();
                collegeIdentifierDto.setPauthId(Long.MAX_VALUE);
                collegeIdentifierDto.setActive(true);
                grsId = collegeIdDtoConverter.toEntity(collegeIdentifierDto);
                grsId.setPauthPauthId(provider);
                grsIdentifiers.add(grsId);

            }

            // Always add not active
            collegeIdentifierDto = ProviderTestDataBuilder.getIdentifier();
            collegeIdentifierDto.setPauthId(Long.MAX_VALUE);
            collegeIdentifierDto.setActive(false);
            grsId = collegeIdDtoConverter.toEntity(collegeIdentifierDto);
            grsId.setPauthPauthId(provider);
            grsIdentifiers.add(grsId);

            collegeIdentifierDto = ProviderTestDataBuilder.getIdentifier();
            collegeIdentifierDto.setPauthId(Long.MAX_VALUE);
            collegeIdentifierDto.setActive(false);
            grsId = collegeIdDtoConverter.toEntity(collegeIdentifierDto);
            grsId.setPauthPauthId(provider);
            grsIdentifiers.add(grsId);

        } else if (RecordType.GRS_ORG_NAMES.equals(recordType)) {
            List<GrsOrgNames> grsOrgNames = new ArrayList<>();
            provider.setGrsOrgNamesList(grsOrgNames);

            OrgNameDto orgNameDto = null;
            GrsOrgNames grsOrgName = null;

            if (DataStatus.ONE_ACTIVE.equals(dataStatus)) {
            // Create one active record

                orgNameDto = ProviderTestDataBuilder.getOrgName();
                orgNameDto.setPauthId(Long.MAX_VALUE);
                orgNameDto.setActive(true);
                grsOrgName = orgNameDtoConverter.toEntity(orgNameDto);
                grsOrgName.setPauthPauthId(provider);
                grsOrgNames.add(grsOrgName);

            } else if (DataStatus.MANY_ACTIVE.equals(dataStatus)) {
                // Create more than one active records
                orgNameDto = ProviderTestDataBuilder.getOrgName();
                orgNameDto.setPauthId(Long.MAX_VALUE);
                orgNameDto.setActive(true);
                grsOrgName = orgNameDtoConverter.toEntity(orgNameDto);
                grsOrgName.setPauthPauthId(provider);
                grsOrgNames.add(grsOrgName);

                orgNameDto = ProviderTestDataBuilder.getOrgName();
                orgNameDto.setPauthId(Long.MAX_VALUE);
                orgNameDto.setActive(true);
                grsOrgName = orgNameDtoConverter.toEntity(orgNameDto);
                grsOrgName.setPauthPauthId(provider);
                grsOrgNames.add(grsOrgName);

            }

            // Always add not active
            orgNameDto = ProviderTestDataBuilder.getOrgName();
            orgNameDto.setPauthId(Long.MAX_VALUE);
            orgNameDto.setActive(false);
            grsOrgName = orgNameDtoConverter.toEntity(orgNameDto);
            grsOrgName.setPauthPauthId(provider);
            grsOrgNames.add(grsOrgName);

            orgNameDto = ProviderTestDataBuilder.getOrgName();
            orgNameDto.setPauthId(Long.MAX_VALUE);
            orgNameDto.setActive(false);
            grsOrgName = orgNameDtoConverter.toEntity(orgNameDto);
            grsOrgName.setPauthPauthId(provider);
            grsOrgNames.add(grsOrgName);

        } else if (RecordType.GRS_PERSON_NAMES.equals(recordType)) {
            List<GrsPersonNames> grsPersonNames = new ArrayList<>();
            provider.setGrsPersonNamesList(grsPersonNames);

            PersonNameDto personNameDto = null;
            GrsPersonNames grsOrgName = null;

            if (DataStatus.ONE_ACTIVE.equals(dataStatus)) {
            // Create one active record

                personNameDto = ProviderTestDataBuilder.getPersonName();
                personNameDto.setPauthId(Long.MAX_VALUE);
                personNameDto.setActive(true);
                grsOrgName = personNameDtoConverter.toEntity(personNameDto);
                grsOrgName.setPauthPauthId(provider);
                grsPersonNames.add(grsOrgName);

            } else if (DataStatus.MANY_ACTIVE.equals(dataStatus)) {
                // Create more than one active records
                personNameDto = ProviderTestDataBuilder.getPersonName();
                personNameDto.setPauthId(Long.MAX_VALUE);
                personNameDto.setActive(true);
                grsOrgName = personNameDtoConverter.toEntity(personNameDto);
                grsOrgName.setPauthPauthId(provider);
                grsPersonNames.add(grsOrgName);

                personNameDto = ProviderTestDataBuilder.getPersonName();
                personNameDto.setPauthId(Long.MAX_VALUE);
                personNameDto.setActive(true);
                grsOrgName = personNameDtoConverter.toEntity(personNameDto);
                grsOrgName.setPauthPauthId(provider);
                grsPersonNames.add(grsOrgName);

            }

            // Always add not active
            personNameDto = ProviderTestDataBuilder.getPersonName();
            personNameDto.setPauthId(Long.MAX_VALUE);
            personNameDto.setActive(false);
            grsOrgName = personNameDtoConverter.toEntity(personNameDto);
            grsOrgName.setPauthPauthId(provider);
            grsPersonNames.add(grsOrgName);

            personNameDto = ProviderTestDataBuilder.getPersonName();
            personNameDto.setPauthId(Long.MAX_VALUE);
            personNameDto.setActive(false);
            grsOrgName = personNameDtoConverter.toEntity(personNameDto);
            grsOrgName.setPauthPauthId(provider);
            grsPersonNames.add(grsOrgName);

        }
        
        return provider;
    }
    
    
    
    @Test 
    public void testValidate_CeaseRegUserName() throws Exception {
        GrsOrgNames regUserName = mock (GrsOrgNames.class);
        GrsRegistryUsers regUser = mock(GrsRegistryUsers.class);
        when(regUser.getRuId()).thenReturn(1L);
        when(regUserName.getEndReasonCode()).thenReturn(ceased);
        when(regUserName.getRuRuId()).thenReturn(regUser);
        boolean error = false;
        try {
            validatorForGrsOrgName.validate(regUserName);
        } catch (EntityValidationException e) {
            error = true;            
        }
        Assert.assertTrue(error);
    }
    
    @Test 
    public void testValidate_ChangeRegUserName() throws Exception {
        GrsOrgNames regUserName = mock (GrsOrgNames.class);
        GrsRegistryUsers regUser = mock(GrsRegistryUsers.class);
        when(regUser.getRuId()).thenReturn(1L);
        when(regUserName.getEndReasonCode()).thenReturn(changed);
        when(regUserName.getRuRuId()).thenReturn(regUser);
        boolean error = false;
        try {
            validatorForGrsOrgName.validate(regUserName);
        } catch (EntityValidationException e) {
            error = true;            
        }
        Assert.assertFalse(error);
    }
    

    private static void setPrivateMember(String member, Object value, Object reflected) throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        Field field = reflected.getClass().getDeclaredField(member);
        field.setAccessible(true);
        field.set(reflected, value);
    }

}
