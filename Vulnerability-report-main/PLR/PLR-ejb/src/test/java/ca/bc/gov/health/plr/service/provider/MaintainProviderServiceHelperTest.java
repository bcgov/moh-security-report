/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.provider.AbstractProviderDetail;
import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.LocationDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDto;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.beanutils.BeanUtils;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 *
 * @author jonathan.wiebe
 */
public class MaintainProviderServiceHelperTest {

    public MaintainProviderServiceHelperTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    @Test
    public void testValidateLocationCeasePreSave_WL2WL() throws Exception{
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        ProviderDto pDto = initProviderDto();
        InformationRouteDto ir = new InformationRouteDto();
        ir.setAddressDto(new AddressDto() {
            {
                setDataOwnerCode("MOO");
                setCommunicationPurposeCode("PURPOSE");
                setTypeCode("TYPE");
                setWlWlId(23l);
            }
        }
        );
        ir.setWorkLocationDataOwnerCode("GOO");
        ir.setWorkLocationIdentifier(34l);
        pDto.getWorkLocationList().get(0).getInformationRoutes().add(ir);
        pDto.getWorkLocationList().get(0).setDataOwnerCode("GOO");
        pDto.getWorkLocationList().get(0).setIdentifier(34l);
        pDto.getWorkLocationList().get(0).setId(23l);
        try {
            helper.validateLocationCeasePreSave(ir.getAddressDto(), pDto);
        } catch (EntityValidationException ex) {
            assertTrue(true);
        }
        try {
            helper.validateLocationCeasePreSave(new AddressDto() {
                {
                    setDataOwnerCode("MOO");
                    setCommunicationPurposeCode("PURPOSE");
                    setTypeCode("TYPE");
                    setWlWlId(233l);
                }
            }, pDto);
        } catch (EntityValidationException ex) {
            assertTrue(false);
        }
    }

    @Test
    public void testValidateLocationCeasePreSave_Provider2Provider() throws Exception {
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        ProviderDto pDto = initProviderDto();
        InformationRouteDto ir = new InformationRouteDto();
        ir.setAddressDto(new AddressDto() {
            {
                setDataOwnerCode("MOO");
                setCommunicationPurposeCode("PURPOSE");
                setTypeCode("TYPE");
            }
        }
        );
        pDto.getInformationRoutes().add(ir);

        try {
            helper.validateLocationCeasePreSave(ir.getAddressDto(), pDto);
        } catch (EntityValidationException ex) {
            assertTrue(true);
        }
        try {
            helper.validateLocationCeasePreSave(new AddressDto() {
                {
                    setDataOwnerCode("MOO");
                    setCommunicationPurposeCode("PURPOSEFOO");
                    setTypeCode("TYPE");
                }
            }, pDto);
        } catch (EntityValidationException ex) {
            assertTrue(false);
        }
    }

    @Test
    public void testsetEndReasonToCease_AllWorkLocationChildren_NullTest() throws Exception {
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        ProviderDto pDto = initProviderDto();
        pDto.getWorkLocationList().get(0).setIdentifier(new Long(22l));
        WorkLocationDto wlDto = new WorkLocationDto();
        wlDto.setIdentifier(new Long(22l));

        List<AbstractProviderDetail> apdList = helper.setEndReasonToCease_AllWorkLocationChildren(pDto, wlDto);

        // apdList shoud be empty ..
        assertTrue(apdList.isEmpty());
    }

    @Test
    public void testsetEndReasonToCease_AllWorkLocationChildrent() throws Exception {
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        ProviderDto pDto = initProviderDto();
        pDto.getWorkLocationList().get(0).setIdentifier(new Long(22l));
        WorkLocationDto randomWLDto = new WorkLocationDto();
        randomWLDto.setIdentifier(23l);
        pDto.getWorkLocationList().add(randomWLDto);
        randomWLDto.setTelecommunications(new ArrayList<TelecommunicationDto>());
        randomWLDto.getTelecommunications().add(new TelecommunicationDto());

        WorkLocationDto wlDto = new WorkLocationDto();
        wlDto.setIdentifier(new Long(22l));

        WorkLocationDto anotherWLDto = pDto.getWorkLocationList().get(0);
        anotherWLDto.getTelecommunications().add(new TelecommunicationDto());
        anotherWLDto.getAddresses().add(new AddressDto());
        anotherWLDto.getElectronicAddresses().add(new ElectronicAddressDto());
        anotherWLDto.getInformationRoutes().add(new InformationRouteDto());

        List<AbstractProviderDetail> apdList = helper.setEndReasonToCease_AllWorkLocationChildren(pDto, wlDto);
        assertTrue(anotherWLDto.getTelecommunications().get(0).getEndReasonCode().equals(CodeTableCodes.GrsCtEndReasonTypes.CEASE.getValue()));
        assertTrue(anotherWLDto.getAddresses().get(0).getEndReasonCode().equals(CodeTableCodes.GrsCtEndReasonTypes.CEASE.getValue()));
        assertTrue(anotherWLDto.getElectronicAddresses().get(0).getEndReasonCode().equals(CodeTableCodes.GrsCtEndReasonTypes.CEASE.getValue()));
        assertTrue(anotherWLDto.getInformationRoutes().get(0).getEndReasonCode().equals(CodeTableCodes.GrsCtEndReasonTypes.CEASE.getValue()));

        assertTrue(randomWLDto.getTelecommunications().get(0).getEndReasonCode() == null);

    }

    @Test
    public void testCollectLocations_nullTest() throws Exception {
        Method method = MaintainProviderServiceHelper.class.getDeclaredMethod("collectLocations", List.class, ProviderDto.class);
        method.setAccessible(true);
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        ProviderDto pDto = new ProviderDto();
        List<LocationDto> list = new ArrayList<LocationDto>();
        method.invoke(helper, list, pDto);
        assertTrue(list.isEmpty());

        list.clear();
        method.invoke(helper, list, null);
        assertTrue(list.isEmpty());

    }

    @Test
    public void testCollectLocations() throws Exception {
        Method method = MaintainProviderServiceHelper.class.getDeclaredMethod("collectLocations", List.class, ProviderDto.class);
        method.setAccessible(true);
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        ProviderDto pDto = initProviderDto();

        List<LocationDto> list = new ArrayList<LocationDto>();
        pDto.getAddresses().add(new AddressDto());
        list.clear();
        method.invoke(helper, list, pDto);
        assertTrue(list.size() == 1);

        pDto.getElectronicAddresses().add(new ElectronicAddressDto());
        list.clear();
        method.invoke(helper, list, pDto);
        assertTrue(list.size() == 2);

        pDto.getWorkLocationList().get(0).getTelecommunications().add(new TelecommunicationDto());
        list.clear();
        method.invoke(helper, list, pDto);
        assertTrue(list.size() == 3);

        pDto.getWorkLocationList().get(0).getElectronicAddresses().add(new ElectronicAddressDto());
        list.clear();
        method.invoke(helper, list, pDto);
        assertTrue(list.size() == 4);

        // IR is not a Location so count stays 4
        pDto.getWorkLocationList().get(0).getInformationRoutes().add(new InformationRouteDto());
        list.clear();
        method.invoke(helper, list, pDto);
        assertTrue(list.size() == 4);
    }

    @Test
    public void testCompareIRAndLocation_ProvIRmatchesProvLocation() throws Exception {
        Method method = MaintainProviderServiceHelper.class.getDeclaredMethod("compareIRAndLocation", LocationDto.class, InformationRouteDto.class, ProviderDto.class, boolean.class);
        method.setAccessible(true);
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        ProviderDto pDto = initProviderDto();
        InformationRouteDto ir = new InformationRouteDto();
        TelecommunicationDto tele = new TelecommunicationDto();
        ElectronicAddressDto eaddr = new ElectronicAddressDto();
        AddressDto addr = new AddressDto();
        tele.setDataOwnerCode("FOO");
        tele.setTypeCode("MOO");
        tele.setCommunicationPurposeCode("TOO");
        addr.setDataOwnerCode("FOO");
        addr.setTypeCode("MOO");
        addr.setCommunicationPurposeCode("TOO");
        eaddr.setDataOwnerCode("FOO");
        eaddr.setTypeCode("MOO");
        eaddr.setCommunicationPurposeCode("TOO");
        ir.setTelecommunicationDto(tele);
        ir.setAddressDto(addr);

        // find the matching telecom
        LocationDto loc = (LocationDto) method.invoke(helper, tele, ir, pDto, false);
        assertTrue(loc != null);

        // find the matching address
        loc = (LocationDto) method.invoke(helper, addr, ir, pDto, false);
        assertTrue(loc != null);

        // does not find the matching Eaddress
        loc = (LocationDto) method.invoke(helper, eaddr, ir, pDto, false);
        assertTrue(loc == null);
    }

    @Test
    public void testCompareIRAndLocation_ProvIRmatchesWLLocation() throws Exception {
        Method method = MaintainProviderServiceHelper.class.getDeclaredMethod("compareIRAndLocation", LocationDto.class, InformationRouteDto.class, ProviderDto.class, boolean.class);
        method.setAccessible(true);
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        ProviderDto pDto = initProviderDto();
        InformationRouteDto ir = new InformationRouteDto();
        TelecommunicationDto tele = new TelecommunicationDto();
        ElectronicAddressDto eaddr = new ElectronicAddressDto();
        AddressDto addr = new AddressDto();
        tele.setDataOwnerCode("FOO");
        tele.setTypeCode("MOO");
        tele.setCommunicationPurposeCode("TOO");
        addr.setDataOwnerCode("FOO");
        addr.setTypeCode("MOO");
        addr.setCommunicationPurposeCode("TOO");
        eaddr.setDataOwnerCode("FOO");
        eaddr.setTypeCode("MOO");
        eaddr.setCommunicationPurposeCode("TOO");
        ir.setTelecommunicationDto(tele);
        ir.setAddressDto(addr);
        ir.setWorkLocationIdentifier(1l);
        ir.setWorkLocationDataOwnerCode("FOO");
        tele.setWlWlId(1l);
        addr.setWlWlId(1l);
        pDto.getWorkLocationList().get(0).setIdentifier(1l);
        pDto.getWorkLocationList().get(0).setId(1l);
        pDto.getWorkLocationList().get(0).setDataOwnerCode("FOO");
        pDto.getWorkLocationList().get(0).getAddresses().add(addr);
        pDto.getWorkLocationList().get(0).getTelecommunications().add(tele);

        // find the matching telecom
        LocationDto loc = (LocationDto) method.invoke(helper, tele, ir, pDto, true);
        assertTrue(loc != null);

        // find the matching address
        loc = (LocationDto) method.invoke(helper, addr, ir, pDto, true);
        assertTrue(loc != null);

        // does not find the matching Eaddress
        loc = (LocationDto) method.invoke(helper, eaddr, ir, pDto, true);
        assertTrue(loc == null);
    }

    @Test
    public void testCompareIRAndLocation_WLIRmatchesWLLocation() throws Exception {
        Method method = MaintainProviderServiceHelper.class.getDeclaredMethod("compareIRAndLocation", LocationDto.class, InformationRouteDto.class, ProviderDto.class, boolean.class);
        method.setAccessible(true);
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        ProviderDto pDto = initProviderDto();
        InformationRouteDto ir = new InformationRouteDto();
        TelecommunicationDto tele = new TelecommunicationDto();
        ElectronicAddressDto eaddr = new ElectronicAddressDto();
        AddressDto addr = new AddressDto();
        tele.setDataOwnerCode("FOO");
        tele.setTypeCode("MOO");
        tele.setCommunicationPurposeCode("TOO");
        addr.setDataOwnerCode("FOO");
        addr.setTypeCode("MOO");
        addr.setCommunicationPurposeCode("TOO");
        eaddr.setDataOwnerCode("FOO");
        eaddr.setTypeCode("MOO");
        eaddr.setCommunicationPurposeCode("TOO");
        ir.setTelecommunicationDto(tele);
        ir.setAddressDto(addr);
        ir.setWorkLocationIdentifier(1l);
        ir.setWorkLocationDataOwnerCode("FOO");
        pDto.getWorkLocationList().get(0).getInformationRoutes().add(ir);
        tele.setWlWlId(1l);
        addr.setWlWlId(1l);
        pDto.getWorkLocationList().get(0).setIdentifier(1l);
        pDto.getWorkLocationList().get(0).setId(1l);
        pDto.getWorkLocationList().get(0).setDataOwnerCode("FOO");
        pDto.getWorkLocationList().get(0).getAddresses().add(addr);
        pDto.getWorkLocationList().get(0).getTelecommunications().add(tele);

        // find the matching telecom
        LocationDto loc = (LocationDto) method.invoke(helper, tele, ir, pDto, true);
        assertTrue(loc != null);

        // find the matching address
        loc = (LocationDto) method.invoke(helper, addr, ir, pDto, true);
        assertTrue(loc != null);

        // does not find the matching Eaddress
        loc = (LocationDto) method.invoke(helper, eaddr, ir, pDto, true);
        assertTrue(loc == null);
    }

    @Test
    public void testCompareIRAndLocation_WLIRmatchesProvLocation() throws Exception {
        Method method = MaintainProviderServiceHelper.class.getDeclaredMethod("compareIRAndLocation", LocationDto.class, InformationRouteDto.class, ProviderDto.class, boolean.class);
        method.setAccessible(true);
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        ProviderDto pDto = initProviderDto();
        InformationRouteDto ir = new InformationRouteDto();
        TelecommunicationDto tele = new TelecommunicationDto();
        ElectronicAddressDto eaddr = new ElectronicAddressDto();
        AddressDto addr = new AddressDto();
        tele.setDataOwnerCode("FOO");
        tele.setTypeCode("MOO");
        tele.setCommunicationPurposeCode("TOO");
        addr.setDataOwnerCode("FOO");
        addr.setTypeCode("MOO");
        addr.setCommunicationPurposeCode("TOO");
        eaddr.setDataOwnerCode("FOO");
        eaddr.setTypeCode("MOO");
        eaddr.setCommunicationPurposeCode("TOO");
        ir.setTelecommunicationDto(tele);
        ir.setAddressDto(addr);
        pDto.getWorkLocationList().get(0).getInformationRoutes().add(ir);

        // find the matching telecom
        LocationDto loc = (LocationDto) method.invoke(helper, tele, ir, pDto, true);
        assertTrue(loc != null);

        // find the matching address
        loc = (LocationDto) method.invoke(helper, addr, ir, pDto, true);
        assertTrue(loc != null);

        // does not find the matching Eaddress
        loc = (LocationDto) method.invoke(helper, eaddr, ir, pDto, true);
        assertTrue(loc == null);
    }

    @Test
    public void testCompareIRAndLocation_ProvIRNotmatchesProvLocation() throws Exception {
        Method method = MaintainProviderServiceHelper.class.getDeclaredMethod("compareIRAndLocation", LocationDto.class, InformationRouteDto.class, ProviderDto.class, boolean.class);
        method.setAccessible(true);
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        ProviderDto pDto = initProviderDto();
        InformationRouteDto ir = new InformationRouteDto();
        TelecommunicationDto tele = new TelecommunicationDto();
        ElectronicAddressDto eaddr = new ElectronicAddressDto();
        AddressDto addr = new AddressDto();
        tele.setDataOwnerCode("FOO1");
        tele.setTypeCode("MOO");
        tele.setCommunicationPurposeCode("TOO");
        addr.setDataOwnerCode("FOO");
        addr.setTypeCode("MOO2");
        addr.setCommunicationPurposeCode("TOO");
        eaddr.setDataOwnerCode("FOO");
        eaddr.setTypeCode("MOO");
        eaddr.setCommunicationPurposeCode("TOO3");

        AddressDto addr2 = (AddressDto) BeanUtils.cloneBean(addr);
        ElectronicAddressDto eaddr2 = (ElectronicAddressDto) BeanUtils.cloneBean(eaddr);
        TelecommunicationDto tele2 = (TelecommunicationDto) BeanUtils.cloneBean(tele);
        tele2.setDataOwnerCode("WRONG");
        addr2.setTypeCode("WRONG");
        eaddr2.setCommunicationPurposeCode("WRONG");

        ir.setTelecommunicationDto(tele2);
        ir.setAddressDto(addr2);
        ir.setElectronicAddressDto(eaddr2);

        // find the matching telecom
        LocationDto loc = (LocationDto) method.invoke(helper, tele, ir, pDto, false);
        assertTrue(loc == null);

        // find the matching address
        loc = (LocationDto) method.invoke(helper, addr, ir, pDto, false);
        assertTrue(loc == null);

        // does not find the matching Eaddress
        loc = (LocationDto) method.invoke(helper, eaddr, ir, pDto, false);
        assertTrue(loc == null);
    }

    @Test
    public void testCompareIRAndLocation_ProvIRNotmatchesWLLocation() throws Exception {
        Method method = MaintainProviderServiceHelper.class.getDeclaredMethod("compareIRAndLocation", LocationDto.class, InformationRouteDto.class, ProviderDto.class, boolean.class);
        method.setAccessible(true);
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        ProviderDto pDto = initProviderDto();
        InformationRouteDto ir = new InformationRouteDto();
        TelecommunicationDto tele = new TelecommunicationDto();
        ElectronicAddressDto eaddr = new ElectronicAddressDto();
        AddressDto addr = new AddressDto();
        tele.setDataOwnerCode("FOO");
        tele.setTypeCode("MOO");
        tele.setCommunicationPurposeCode("TOO");
        addr.setDataOwnerCode("FOO");
        addr.setTypeCode("MOO");
        addr.setCommunicationPurposeCode("TOO");
        eaddr.setDataOwnerCode("FOO");
        eaddr.setTypeCode("MOO");
        eaddr.setCommunicationPurposeCode("TOO");

        AddressDto addr2 = (AddressDto) BeanUtils.cloneBean(addr);
        ElectronicAddressDto eaddr2 = (ElectronicAddressDto) BeanUtils.cloneBean(eaddr);
        TelecommunicationDto tele2 = (TelecommunicationDto) BeanUtils.cloneBean(tele);
        tele2.setDataOwnerCode("WRONG");
        addr2.setTypeCode("WRONG");
        eaddr2.setCommunicationPurposeCode("WRONG");

        ir.setTelecommunicationDto(tele2);
        ir.setAddressDto(addr2);
        ir.setElectronicAddressDto(eaddr2);

        ir.setWorkLocationIdentifier(1l);
        ir.setWorkLocationDataOwnerCode("FOO");
        tele.setWlWlId(1l);
        addr.setWlWlId(1l);
        pDto.getWorkLocationList().get(0).setIdentifier(1l);
        pDto.getWorkLocationList().get(0).setId(1l);
        pDto.getWorkLocationList().get(0).setDataOwnerCode("FOO");
        pDto.getWorkLocationList().get(0).getAddresses().add(addr);
        pDto.getWorkLocationList().get(0).getTelecommunications().add(tele);

        // find the matching telecom
        LocationDto loc = (LocationDto) method.invoke(helper, tele, ir, pDto, true);
        assertTrue(loc == null);

        // find the matching address
        loc = (LocationDto) method.invoke(helper, addr, ir, pDto, true);
        assertTrue(loc == null);

        // does not find the matching Eaddress
        loc = (LocationDto) method.invoke(helper, eaddr, ir, pDto, true);
        assertTrue(loc == null);
    }

    @Test
    public void testCompareIRAndLocation_WLIRNotmatchesWLLocation() throws Exception {
        Method method = MaintainProviderServiceHelper.class.getDeclaredMethod("compareIRAndLocation", LocationDto.class, InformationRouteDto.class, ProviderDto.class, boolean.class);
        method.setAccessible(true);
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        ProviderDto pDto = initProviderDto();
        InformationRouteDto ir = new InformationRouteDto();
        TelecommunicationDto tele = new TelecommunicationDto();
        ElectronicAddressDto eaddr = new ElectronicAddressDto();
        AddressDto addr = new AddressDto();
        tele.setDataOwnerCode("FOO");
        tele.setTypeCode("MOO");
        tele.setCommunicationPurposeCode("TOO");
        addr.setDataOwnerCode("FOO");
        addr.setTypeCode("MOO");
        addr.setCommunicationPurposeCode("TOO");
        eaddr.setDataOwnerCode("FOO");
        eaddr.setTypeCode("MOO");
        eaddr.setCommunicationPurposeCode("TOO");

        AddressDto addr2 = (AddressDto) BeanUtils.cloneBean(addr);
        ElectronicAddressDto eaddr2 = (ElectronicAddressDto) BeanUtils.cloneBean(eaddr);
        TelecommunicationDto tele2 = (TelecommunicationDto) BeanUtils.cloneBean(tele);
        tele2.setDataOwnerCode("WRONG");
        addr2.setTypeCode("WRONG");
        eaddr2.setCommunicationPurposeCode("WRONG");

        ir.setTelecommunicationDto(tele2);
        ir.setAddressDto(addr2);
        ir.setElectronicAddressDto(eaddr2);

        ir.setWorkLocationIdentifier(1l);
        ir.setWorkLocationDataOwnerCode("FOO");
        pDto.getWorkLocationList().get(0).getInformationRoutes().add(ir);
        tele.setWlWlId(1l);
        addr.setWlWlId(1l);
        pDto.getWorkLocationList().get(0).setIdentifier(1l);
        pDto.getWorkLocationList().get(0).setId(1l);
        pDto.getWorkLocationList().get(0).setDataOwnerCode("FOO");
        pDto.getWorkLocationList().get(0).getAddresses().add(addr);
        pDto.getWorkLocationList().get(0).getTelecommunications().add(tele);

        // find the matching telecom
        LocationDto loc = (LocationDto) method.invoke(helper, tele, ir, pDto, true);
        assertTrue(loc == null);

        // find the matching address
        loc = (LocationDto) method.invoke(helper, addr, ir, pDto, true);
        assertTrue(loc == null);

        // does not find the matching Eaddress
        loc = (LocationDto) method.invoke(helper, eaddr, ir, pDto, true);
        assertTrue(loc == null);
    }

    @Test
    public void testCompareIRAndLocation_WLIRNotmatchesProvLocation() throws Exception {
        Method method = MaintainProviderServiceHelper.class.getDeclaredMethod("compareIRAndLocation", LocationDto.class, InformationRouteDto.class, ProviderDto.class, boolean.class);
        method.setAccessible(true);
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        ProviderDto pDto = initProviderDto();
        InformationRouteDto ir = new InformationRouteDto();
        TelecommunicationDto tele = new TelecommunicationDto();
        ElectronicAddressDto eaddr = new ElectronicAddressDto();
        AddressDto addr = new AddressDto();
        tele.setDataOwnerCode("FOO");
        tele.setTypeCode("MOO");
        tele.setCommunicationPurposeCode("TOO");
        addr.setDataOwnerCode("FOO");
        addr.setTypeCode("MOO");
        addr.setCommunicationPurposeCode("TOO");
        eaddr.setDataOwnerCode("FOO");
        eaddr.setTypeCode("MOO");
        eaddr.setCommunicationPurposeCode("TOO");

        AddressDto addr2 = (AddressDto) BeanUtils.cloneBean(addr);
        ElectronicAddressDto eaddr2 = (ElectronicAddressDto) BeanUtils.cloneBean(eaddr);
        TelecommunicationDto tele2 = (TelecommunicationDto) BeanUtils.cloneBean(tele);
        tele2.setDataOwnerCode("WRONG");
        addr2.setTypeCode("WRONG");
        eaddr2.setCommunicationPurposeCode("WRONG");

        ir.setTelecommunicationDto(tele2);
        ir.setAddressDto(addr2);
        ir.setElectronicAddressDto(eaddr2);

        pDto.getWorkLocationList().get(0).getInformationRoutes().add(ir);

        // find the matching telecom
        LocationDto loc = (LocationDto) method.invoke(helper, tele, ir, pDto, true);
        assertTrue(loc == null);

        // find the matching address
        loc = (LocationDto) method.invoke(helper, addr, ir, pDto, true);
        assertTrue(loc == null);

        // does not find the matching Eaddress
        loc = (LocationDto) method.invoke(helper, eaddr, ir, pDto, true);
        assertTrue(loc == null);
    }

    @Test
    public void testMatchPurposeCodes() throws Exception {
        Method method = MaintainProviderServiceHelper.class.getDeclaredMethod("matchPurposeCodes", LocationDto.class, InformationRouteDto.class);
        method.setAccessible(true);
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        InformationRouteDto ir = new InformationRouteDto();
        ir.setCommunicationPurposeCode("FOO");
        TelecommunicationDto tele = new TelecommunicationDto();
        tele.setCommunicationPurposeCode("FOO");

        boolean match = (Boolean) method.invoke(helper, tele, ir);
        assertTrue(match);

        AddressDto addr = new AddressDto();
        addr.setCommunicationPurposeCode("FOO");
        match = (Boolean) method.invoke(helper, addr, ir);
        assertTrue(match);

        ElectronicAddressDto eaddr = new ElectronicAddressDto();
        eaddr.setCommunicationPurposeCode("FOO");
        match = (Boolean) method.invoke(helper, eaddr, ir);
        assertTrue(match);

        ir.setCommunicationPurposeCode(null);
        match = (Boolean) method.invoke(helper, eaddr, ir);
        assertTrue(!match);

        ir.setAddressDto(addr);
        ir.setElectronicAddressDto(eaddr);
        ir.setTelecommunicationDto(tele);
        match = (Boolean) method.invoke(helper, eaddr, ir);
        assertTrue(match);
        match = (Boolean) method.invoke(helper, addr, ir);
        assertTrue(match);
        match = (Boolean) method.invoke(helper, tele, ir);
        assertTrue(match);
    }

    @Test
    public void testMatchTypeCodes() throws Exception {
        Method method = MaintainProviderServiceHelper.class.getDeclaredMethod("matchTypeCodes", LocationDto.class, InformationRouteDto.class);
        method.setAccessible(true);
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        InformationRouteDto ir = new InformationRouteDto();
        ir.setTypeCode("FOO");
        TelecommunicationDto tele = new TelecommunicationDto();
        tele.setTypeCode("FOO");

        boolean match = (Boolean) method.invoke(helper, tele, ir);
        assertTrue(match);

        AddressDto addr = new AddressDto();
        addr.setTypeCode("FOO");
        match = (Boolean) method.invoke(helper, addr, ir);
        assertTrue(match);

        ElectronicAddressDto eaddr = new ElectronicAddressDto();
        eaddr.setTypeCode("FOO");
        match = (Boolean) method.invoke(helper, eaddr, ir);
        assertTrue(match);

        ir.setTypeCode(null);
        match = (Boolean) method.invoke(helper, eaddr, ir);
        assertTrue(!match);

        ir.setAddressDto(addr);
        ir.setElectronicAddressDto(eaddr);
        ir.setTelecommunicationDto(tele);
        match = (Boolean) method.invoke(helper, eaddr, ir);
        assertTrue(match);
        match = (Boolean) method.invoke(helper, addr, ir);
        assertTrue(match);
        match = (Boolean) method.invoke(helper, tele, ir);
        assertTrue(match);
    }

    @Test
    public void testMatchDataOwnerCodes() throws Exception {
        Method method = MaintainProviderServiceHelper.class.getDeclaredMethod("matchDataOwnerCodes", LocationDto.class, InformationRouteDto.class);
        method.setAccessible(true);
        MaintainProviderServiceHelper helper = new MaintainProviderServiceHelper();

        InformationRouteDto ir = new InformationRouteDto();
        ir.setCommunicationDataOwnerCode("FOO");
        TelecommunicationDto tele = new TelecommunicationDto();
        tele.setDataOwnerCode("FOO");

        boolean match = (Boolean) method.invoke(helper, tele, ir);
        assertTrue(match);

        AddressDto addr = new AddressDto();
        addr.setDataOwnerCode("FOO");
        match = (Boolean) method.invoke(helper, addr, ir);
        assertTrue(match);

        ElectronicAddressDto eaddr = new ElectronicAddressDto();
        eaddr.setDataOwnerCode("FOO");
        match = (Boolean) method.invoke(helper, eaddr, ir);
        assertTrue(match);

        ir.setCommunicationDataOwnerCode(null);
        match = (Boolean) method.invoke(helper, eaddr, ir);
        assertTrue(!match);

        ir.setAddressDto(addr);
        ir.setElectronicAddressDto(eaddr);
        ir.setTelecommunicationDto(tele);
        match = (Boolean) method.invoke(helper, eaddr, ir);
        assertTrue(match);
        match = (Boolean) method.invoke(helper, addr, ir);
        assertTrue(match);
        match = (Boolean) method.invoke(helper, tele, ir);
        assertTrue(match);
    }

    private ProviderDto initProviderDto() {
        ProviderDto pDto = new ProviderDto();
        pDto.setAddresses(new ArrayList<AddressDto>());
        pDto.setElectronicAddresses(new ArrayList<ElectronicAddressDto>());
        pDto.setTelecommunication(new ArrayList<TelecommunicationDto>());
        pDto.setInformationRoutes(new ArrayList<InformationRouteDto>());
        pDto.setWorkLocationList(new ArrayList<WorkLocationDto>());
        pDto.getWorkLocationList().add(new WorkLocationDto());
        pDto.getWorkLocationList().get(0).setAddresses(new ArrayList<AddressDto>());
        pDto.getWorkLocationList().get(0).setElectronicAddresses(new ArrayList<ElectronicAddressDto>());
        pDto.getWorkLocationList().get(0).setTelecommunications(new ArrayList<TelecommunicationDto>());
        pDto.getWorkLocationList().get(0).setInformationRoutes(new ArrayList<InformationRouteDto>());
        return pDto;
    }

}
