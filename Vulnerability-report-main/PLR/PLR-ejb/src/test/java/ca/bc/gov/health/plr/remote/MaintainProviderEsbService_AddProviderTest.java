package ca.bc.gov.health.plr.remote;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DisciplinaryActionDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.esb.JurisdictionNameCodeDto;
import ca.bc.gov.health.plr.dto.provider.esb.NoteDto;
import ca.bc.gov.health.plr.dto.provider.esb.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto;
import ca.bc.gov.health.plr.ejb.entity.GrsIdentifiers;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocations;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import static ca.bc.gov.health.plr.remote.MaintainProviderEsbTestBuilder.*;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import ca.bc.gov.health.plr.util.AckHelper;
import ca.bc.gov.health.plr.util.AddressValidationControl;
import ca.bc.gov.health.plr.util.AuditControl;
import ca.bc.gov.health.plr.util.DistributionControl;
import ca.bc.gov.health.plr.util.MessageCodeHelper;
import ca.bc.gov.health.plr.util.SpoofedUserHelper;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import static org.hamcrest.CoreMatchers.*;
import org.hamcrest.collection.IsCollectionWithSize;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;

/**
 * test class to test add provider scenario in messaging
 *
 * @author sumesh.kariyil
 */
public class MaintainProviderEsbService_AddProviderTest extends IntegrationSetup {

    private static final Logger logger = Logger.getLogger(MaintainProviderEsbService_AddProviderTest.class.getName());

    @BeforeClass
    public static void setUp() {
        SpoofedUserHelper.currentUser = "plr-reg-admin";
        AddressValidationControl.turnOffAddressValidation();
        DistributionControl.turnOffDistributions();
        AuditControl.turnOffAudit();
    }

    @AfterClass
    public static void tearDown() {
        AddressValidationControl.restoreAddressValidation();
        DistributionControl.restoreDistributions();
        AuditControl.restoreAudit();
    }

    @Before
    public void setUpUser() {
        SpoofedUserHelper.currentUser = "plr-reg-admin";
    }

    @After
    public void deleteProvider() {
        List<PrsProviders> providerses = findProviders();
        if (!providerses.isEmpty()) {
            for (PrsProviders provider : providerses) {
                entityManagerProxy.remove(provider);
            }
        }
    }

    @Test
    public void addProvider_withMinimumData() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().setProviderType("IND");
        logger.info("Calling maintainProvider from addProvider_withMinimumData");
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));
        logger.info("After Calling maintainProvider from addProvider_withMinimumData");
        List<PrsProviders> providers = findProviders();
        logger.log(Level.INFO, "Find providers--- >{0}", (providers != null ? providers.size() : 0));
        PrsProviders prov = providers.iterator().next();
        assertTrue(prov.getGrsIdentifiersList().size() == 3);
        int rightIDs = 0;
        for (GrsIdentifiers id : prov.getGrsIdentifiersList()) {
            if (id.getProviderChid().matches(".*CPN.*")) {
                rightIDs++;
            }
            if (id.getProviderChid().matches(".*IPC.*")) {
                rightIDs++;
            }
            if (id.getProviderChid().matches(".*TESTINGIDENTIFIERVALUE.*")) {
                rightIDs++;
            }
        }
        assertTrue(rightIDs == 3);
        assertThat(prov.getGrsPersonNamesList().size(), equalTo(1));
    }

    @Test
    public void addProvider_withMinimumDataBadOrgName() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().setProviderType("IND");
        req.getProviderDetails().getOrgNames().add(getOrgNameDto_randomName());
        logger.info("Calling maintainProvider from addProvider_withMinimumData");
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), is(not(equalTo(successCode))));
    }

    @Test
    public void addProvider_withInvalidProviderRoleType() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().setProviderType("IND");
        req.getProviderDetails().setType("ABCD");
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment) it.next();
        assertThat(acknowledgment.getMsgText(), startsWith(MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_CODE_INVALID))[1]));
    }

    @Test
    public void addProvider_withNulProviderRoleType() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().setProviderType("IND");
        req.getProviderDetails().setType(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment) it.next();
        assertThat(acknowledgment.getMsgText(), startsWith(MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MANDATORY_PART1))[1]));
    }

    @Test
    public void addProvider_withPhone() {
        MaintainProviderRequest req = createRequest();
        TelecommunicationDto dto = getTelecomDto();
        req.getProviderDetails().getTelecommunication().add(dto);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));
        assertThat(findProviders().iterator().next().getGrsTelephonesList().size(), equalTo(1));
    }

    @Test
    public void addProvider_withFaxAndPhone() {
        MaintainProviderRequest req = createRequest();
        TelecommunicationDto tele = getTelecomDto();
        TelecommunicationDto fax = getTelecomDto();
        fax.setTypeCode("FAX");
        req.getProviderDetails().getTelecommunication().add(tele);
        req.getProviderDetails().getTelecommunication().add(fax);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));
        assertThat(findProviders().iterator().next().getGrsTelephonesList().size(), equalTo(2));
    }

    @Test
    public void addProvider_withEAddress() {
        MaintainProviderRequest req = createRequest();
        ElectronicAddressDto email = getElectronicAddressDto();
        req.getProviderDetails().getElectronicAddresses().add(email);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));
        assertThat(findProviders().iterator().next().getGrsElectronicAddressesList().size(), equalTo(1));
    }

    @Test
    public void addProvider_withCrdential() {
        MaintainProviderRequest req = createRequest();
        CredentialsDto dto = getCredentialDto();
        req.getProviderDetails().getCredentials().add(dto);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));
        assertThat(findProviders().iterator().next().getPrsProviderCredentialsList().size(), equalTo(1));
    }

    @Test //REQ-00940
    public void addProvider_Crdential_multiplicty() {
        MaintainProviderRequest req = createRequest();
        CredentialsDto dto = getCredentialDto();
        req.getProviderDetails().getCredentials().add(dto);
        req.getProviderDetails().getCredentials().add(getCredentialDto());

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment) it.next();
        assertFalse(acknowledgment.getMsgText().equals(successMsg));
    }

    @Test
    public void addProvider_withNotApplicableCredential() {
        MaintainProviderRequest req = createRequest();
        CredentialsDto dto = getCredentialDto();
        dto.setTypeCode("BN");//BN is not applicable for role type DEN
        req.getProviderDetails().getCredentials().add(dto);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment) it.next();
        assertThat(acknowledgment.getMsgText(), containsString("Invalid Credential Type"));
    }

    @Test
    public void addProvider_withNotApplicableIdentifierType() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().getIdentifiers().iterator().next().setTypeCode("RMID");//DEN doesn't have access to RMID

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment) it.next();
        assertThat(acknowledgment.getMsgText(), containsString("Invalid Identifier Type"));
    }

    @Test
    public void addProvider_withExpertise() {
        MaintainProviderRequest req = createRequest();
        ExpertiseDto dto = getExpertiseDto();
        req.getProviderDetails().getExpertise().add(dto);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));
        assertThat(findProviders().iterator().next().getPrsProviderExpertisesList().size(), equalTo(1));
    }

    @Test //REQ-00940
    public void addProvider_Expertise_multiplicty() {
        MaintainProviderRequest req = createRequest();
        ExpertiseDto dto = getExpertiseDto();
        dto.setSourcesCode("ABCD");
        req.getProviderDetails().getExpertise().add(dto);
        req.getProviderDetails().getExpertise().add(getExpertiseDto());

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment) it.next();
        assertFalse(acknowledgment.getMsgText().equals(successMsg));

    }

    @Test
    public void addProvider_withNotApplicableExpertise() {
        MaintainProviderRequest req = createRequest();
        ExpertiseDto dto = getExpertiseDto();
        dto.setTypeCode("AMD2");
        req.getProviderDetails().getExpertise().add(dto);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment) it.next();
        assertFalse(acknowledgment.getMsgText().equals(successMsg));
    }

    @Test
    public void addProvider_Individual() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().setProviderType("IND");

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));
        assertThat(findProviders().iterator().next().getGrsPersonNamesList().size(), equalTo(1));
    }

    @Test // REQ-00961
    public void addProvider_invalidProviderType() {
        MaintainProviderRequest req = createRequest();
        // valid types are IND and ORG.
        req.getProviderDetails().setProviderType("BACON");

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        List<Acknowledgment> acknowledgments = new ArrayList<>(response.getAcknowledgments());
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment) it.next();
        assertThat(acknowledgment.getMsgText(), containsString("Entry Error: Invalid data"));
        assertFalse(findProviders().iterator().hasNext());
    }

    @Test
    public void addProvider_withWorkLocation() {
        MaintainProviderRequest req = createRequest();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100l);
        dto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
        req.getProviderDetails().getWorkLocationList().add(dto);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));
        assertThat(findProviders().iterator().next().getPrsWorkLocationsList().size(), equalTo(1));
    }

    @Test
    public void addProvider_withWorkLocationAddresses() {
        MaintainProviderRequest req = createRequest();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100l);
        dto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
        dto.getAddresses().add(getAddress());
        req.getProviderDetails().getWorkLocationList().add(dto);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(4));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));
        List<PrsWorkLocations> wls = findProviders().iterator().next().getPrsWorkLocationsList();
        assertThat(wls.size(), equalTo(1));
        assertThat(wls.iterator().next().getGrsAddressesList().size(), equalTo(1));
    }

    @Test
    public void addProvider_withInformationRoutes() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().getTelecommunication().add(getTelecomDto());
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        String dataOwnerCode = response.getProviderDetails().getTelecommunication().get(0).getDataOwnerCode();

        req.getProviderDetails().getInformationRoutes().add(getInformationRouteDtoFax());
        req.getProviderDetails().getInformationRoutes().get(0).getTelecommunicationDto().setDataOwnerCode(dataOwnerCode);
        req.getProviderDetails().getElectronicAddresses().clear();
        req.getProviderDetails().getTelecommunication().clear();
        req.getProviderDetails().getStatuses().clear();
        req.getProviderDetails().getDemographicDetails().clear();
        req.getProviderDetails().getIndNames().clear();
        req.getProviderDetails().getAddresses().clear();
        response = maintainProviderEsbService.maintainProvider(req);

        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));
        List<PrsProviders> providers = findProviders();
        assertThat(providers.iterator().next().getGrsTelephonesList().size(), equalTo(1));
        assertThat(providers.iterator().next().getPrsInformationRoutesList().size(), equalTo(1));
    }

    @Test
    public void addProvider_withInformationRoutes_InvalidMechanismType() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().getTelecommunication().add(getTelecomDto());
        InformationRouteDto informationRouteDto = getInformationRouteDtoFax();
        informationRouteDto.setMechanismTypeCode("TEST");
        req.getProviderDetails().getInformationRoutes().add(informationRouteDto);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test
    public void addProvider_withInformationRoutes_NullMechanismType() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().getTelecommunication().add(getTelecomDto());
        InformationRouteDto informationRouteDto = getInformationRouteDtoFax();
        informationRouteDto.setMechanismTypeCode(null);
        req.getProviderDetails().getInformationRoutes().add(informationRouteDto);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test
    public void testAddProvider_populateChid() {
        MaintainProviderRequest req = createRequest();
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));
        PrsProviders provider = findProviders().iterator().next();
        assertNotNull(provider.getUserChid());
        assertNotNull(provider.getGrsIdentifiersList().iterator().next().getUserChid());
    }

    @Test
    public void testAddProvider_notApplicableStatusReasonCode() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().getStatuses().iterator().next().setReasonCode("DEC");
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment) it.next();
        assertThat(acknowledgment.getMsgText(), containsString("Invalid Status Reason Code"));
    }

    @Test
    public void testAddProvider_nullStatusCodes() {
        MaintainProviderRequest req = createRequest();
        StatusDto dto = req.getProviderDetails().getStatuses().iterator().next();
        dto.setReasonCode(null);
        dto.setClassCode(null);
        dto.setTypeCode(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
    }

    @Test //REQ-00683    
    public void testAddProvider_DeathDateBeforeBirth() throws ParseException {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().setProviderType("IND");
        DemographicDetailsDto dto = req.getProviderDetails().getDemographicDetails().iterator().next();
        dto.setBirthDate(new SimpleDateFormat("dd-MM-yyyy").parse("01-12-2015"));
        dto.setDeathDate(new SimpleDateFormat("dd-MM-yyyy").parse("01-12-2010"));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);

        String expectedMessage = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_DEATH_BEFORE_BIRTH);
        assertNotNull(response.getAcknowledgments());
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment) it.next();
        assertTrue(expectedMessage.matches(".*" + acknowledgment.getMsgText() + ".*"));
    }

    @Test //REQ-00683    
    public void testUpdateDemographics_CeaseLastActive() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().setProviderType("IND");
        DemographicDetailsDto dto = req.getProviderDetails().getDemographicDetails().iterator().next();
        // Add
        maintainProviderEsbService.maintainProvider(req);
        dto.setEndReasonCode("CEASE");
        req.getProviderDetails().getAddresses().clear();
        req.getProviderDetails().getStatuses().clear();
        req.getProviderDetails().getIndNames().clear();
        // Update
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        String expectedMessage = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_LAST_ACTIVE_DEMOGRAPHICS);
        assertNotNull(response.getAcknowledgments());
        assertEquals(2, response.getAcknowledgments().size());
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment) it.next();
        assertTrue(expectedMessage.matches(".*" + acknowledgment.getMsgText() + ".*"));
    }

    @Test //REQ-00533
    public void testElectronicAddress_InvalidAddress() {
        MaintainProviderRequest req = createRequest();
        ElectronicAddressDto dto = getElectronicAddressDto();
        dto.setAddress("dddd@ddd@dd.com");
        req.getProviderDetails().getElectronicAddresses().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);

        String expectedMessage = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_EMAILFIELD_INVALID_CHARACTERS);
        assertNotNull(response.getAcknowledgments());
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment) it.next();
        assertThat(acknowledgment.getMsgText(), equalTo(MessageCodeHelper.splitCodeAndMessage(expectedMessage)[1]));
    }

    @Test //REQ-00703
    public void testAddProvider_NoProviderType() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().setProviderType(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);

        assertNotNull(response.getAcknowledgments());
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment) it.next();
        assertThat(acknowledgment.getMsgText(), containsString("Provider Type"));
    }

    @Test //REQ-00916
    public void testElectronicAddress_Multiplicty() {
        MaintainProviderRequest req = createRequest();
        ElectronicAddressDto dto = getElectronicAddressDto();
        req.getProviderDetails().getElectronicAddresses().add(dto);
        req.getProviderDetails().getElectronicAddresses().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);

        assertNotNull(response.getAcknowledgments());
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test //REQ-00916
    public void testAddress_Multiplicty() {
        MaintainProviderRequest req = createRequest();
        AddressDto dto = getAddress();
        req.getProviderDetails().getAddresses().clear();
        req.getProviderDetails().getAddresses().add(dto);
        req.getProviderDetails().getAddresses().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);

        assertNotNull(response.getAcknowledgments());
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test //REQ-00916
    public void testTelecomAddress_Multiplicty() {
        MaintainProviderRequest req = createRequest();
        TelecommunicationDto dto = getTelecomDto();
        req.getProviderDetails().getTelecommunication().clear();
        req.getProviderDetails().getTelecommunication().add(dto);
        req.getProviderDetails().getTelecommunication().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);

        assertNotNull(response.getAcknowledgments());
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test
    public void testAddProviderRelationShip() {
        MaintainProviderRequest req = createRequest();
        ProviderRelationshipDto dto = getProviderRelationshipDto();
        req.getProviderDetails().getProviderRelationships().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));
        assertThat(findProviders().iterator().next().getPrsProviderRelationshipsList1(), IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testAddProviderRelationShip_Multiplicity() {
        MaintainProviderRequest req = createRequest();
        ProviderRelationshipDto dto = getProviderRelationshipDto();
        req.getProviderDetails().getProviderRelationships().add(dto);
        req.getProviderDetails().getProviderRelationships().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test
    public void testAddProviderRelationShip_NullIdentifierType() {
        MaintainProviderRequest req = createRequest();
        ProviderRelationshipDto dto = getProviderRelationshipDto();
        dto.setIdentifierTypeCode(null);
        req.getProviderDetails().getProviderRelationships().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test
    public void testAddProviderRelationShip_InvalidTypes() {
        MaintainProviderRequest req = createRequest();
        ProviderRelationshipDto dto = getProviderRelationshipDto();
        dto.setRelationshipTypeCode("ABCD");
        dto.setTargetRelationshipTypeCode("ABCD");
        req.getProviderDetails().getProviderRelationships().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
    }

    @Test
    public void testAddProviderRelationShip_InvalidProvider() {
        MaintainProviderRequest req = createRequest();
        ProviderRelationshipDto dto = getProviderRelationshipDto();
        dto.setIdentifier("&&&&&&&&&&&&&**(*(**(**((**(");
        req.getProviderDetails().getProviderRelationships().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test
    public void testAddProviderRelationShip_InvalidProvider_Length() {
        MaintainProviderRequest req = createRequest();
        ProviderRelationshipDto dto = getProviderRelationshipDto();
        dto.setIdentifier("123456789012345678901234567890123456789012345678901");
        req.getProviderDetails().getProviderRelationships().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test //REQ-00940
    public void addProvider_withWorkLocation_Multiplicity() {
        MaintainProviderRequest req = createRequest();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100l);
        dto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
        req.getProviderDetails().getWorkLocationList().add(dto);
        WorkLocationDto dto2 = getWorkLocationDto();
        dto2.setIdentifier(100l);
        dto2.getWorkLocationDetails().add(getWorkLocationDetailsDto());
        req.getProviderDetails().getWorkLocationList().add(dto2);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test //REQ-00940
    public void addProvider_WorkLocation_CheckWorkLocationlID() {
        MaintainProviderRequest req = createRequest();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(null);
        dto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
        req.getProviderDetails().getWorkLocationList().add(dto);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));
        PrsProviders provider = findProviders().get(0);
        List<PrsWorkLocations> wls = provider.getPrsWorkLocationsList();
        assertThat(wls.iterator().next().getWorkLocationChid(), equalTo(1L));

    }

    @Test
    public void addProvider_withStatus_Multiplicity() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().getStatuses().add(getStatusDto());
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test
    public void addProvider_withInformationRoutes_InvalidCodes() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().getTelecommunication().add(getTelecomDto());
        InformationRouteDto dto = getInformationRouteDtoFax();
        dto.setMechanismTypeCode("ABCD");
        dto.setDocumentTypeCode("ABCD");
        req.getProviderDetails().getInformationRoutes().add(dto);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(3));
    }

    @Test
    public void addProvider_withInformationRoutes_multiplicity() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().getTelecommunication().add(getTelecomDto());
        InformationRouteDto dto = getInformationRouteDtoFax();
        InformationRouteDto dto2 = getInformationRouteDtoFax();
        req.getProviderDetails().getInformationRoutes().add(dto);
        req.getProviderDetails().getInformationRoutes().add(dto2);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test
    public void addProvider_withOrgName_multiplicity() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().setProviderType("IND");
        req.getProviderDetails().getIndNames().add(getPersonNameDto());
        req.getProviderDetails().getIndNames().add(getPersonNameDto());

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test
    public void addProvider_withIndName_multiplicity() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().getIndNames().add(getPersonNameDto());

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test
    public void maintainProvider_OrgName_Null() {
        MaintainProviderRequest req = createRequest();
        req.getProviderDetails().setProviderType("IND");
        OrgNameDto dto = getOrgNameDto();
        dto.setName(null);
        dto.setLongName(null);
        req.getProviderDetails().getOrgNames().add(dto);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment) it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test
    public void addProvider_addNote_CheckID() {

        MaintainProviderRequest request = createRequest();
        NoteDto dto = getNoteDto();
        dto.setIdentifier(null);
        request.getProviderDetails().getNotes().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));

        List<PrsProviders> providers = findProviders();
        PrsProviders prov = providers.iterator().next();
        assertThat(prov.getPrsNotesList().size(), equalTo(1));
        assertThat(prov.getPrsNotesList().iterator().next().getNoteChid(), notNullValue());
    }

    @Test
    public void maintainProvider_addNote_CheckID() {
        MaintainProviderRequest request = createRequest();
        NoteDto dto = getNoteDto();
        dto.setIdentifier(null);
        request.getProviderDetails().getNotes().add(dto);
        maintainProviderEsbService.maintainProvider(request);//add
        request.getProviderDetails().getAddresses().clear();
        request.getProviderDetails().getDemographicDetails().clear();
        request.getProviderDetails().getStatuses().clear();
        request.getProviderDetails().getIndNames().clear();
        maintainProviderEsbService.maintainProvider(request);//maintain
        List<PrsProviders> providers = findProviders();
        PrsProviders prov = providers.iterator().next();
        assertThat(prov.getPrsNotesList().size(), equalTo(2));
    }

    @Test
    @Ignore
    public void maintainProvider_addDisciplinaryAction_CheckID() {
        MaintainProviderRequest request = createRequest();
        DisciplinaryActionDto dto = getDisciplinaryActionDto();
        dto.setIdentifier(null);
        request.getProviderDetails().getDisciplinaryActions().add(dto);
        maintainProviderEsbService.maintainProvider(request);//add
        request.getProviderDetails().getAddresses().clear();
        request.getProviderDetails().getDemographicDetails().clear();
        request.getProviderDetails().getStatuses().clear();
        request.getProviderDetails().getIndNames().clear();
        maintainProviderEsbService.maintainProvider(request);//maintain
        List<PrsProviders> providers = findProviders();
        PrsProviders prov = providers.iterator().next();
        assertThat(prov.getPrsDisciplinaryActionsList().size(), equalTo(2));
    }

    private MaintainProviderRequest createRequest() {
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setRegistryUserOrgId("plr-reg-admin");
        request.setProviderDetails(new ProviderDetails());
        AddressDto address = getAddress();
        request.getProviderDetails().getAddresses().add(address);
        addIdentifier(request);
        request.getProviderDetails().getIdentifiers().get(0).setEffectiveStartDate(new Date());
        request.getProviderDetails().getIdentifiers().get(0).setIdentifier("TESTINGIDENTIFIERVALUE");
        request.getProviderDetails().setProviderType("IND");
        request.getProviderDetails().setType("DEN");
        request.getProviderDetails().setJurisdiction(new JurisdictionNameCodeDto());
        request.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");
        request.getProviderDetails().getDemographicDetails().add(getDemographicDto());
        request.getProviderDetails().getStatuses().add(getStatusDto());
        request.getProviderDetails().getIndNames().add(getPersonNameDto());
        return request;
    }

    private List<PrsProviders> findProviders() {
        MaintainProviderRequest req = createRequest();
        String query = "SELECT g.pauthPauthId FROM GrsIdentifiers g WHERE g.providerChid = '"
                + req.getProviderDetails().getIdentifiers().get(0).getIdentifier() + "' ";
        List<PrsProviders> providerses = entityManagerProxy.query(query);
        return providerses;
    }

}
