/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.provider.ConfidentialityIndicatorDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsConfidentialityIndicators;
import ca.bc.gov.health.plr.ejb.entity.PrsCtDataOwnerCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.provider.ProviderTestDataBuilder;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.entityManagerProxy;
import ca.bc.gov.health.plr.service.provider.security.AuthorizationService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import org.junit.After;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import static org.junit.Assume.assumeTrue;
import org.junit.Ignore;
import org.junit.Test;

/**
 * Test class for the maintain confidentiality service
 *
 * @author greg.perkins
 */
public class MaintainConfidentialityServiceTest extends IntegrationSetup {

    private static final long PAUTH_ID = 272; //12l;

    @After
    public void tearDown() {
        List<Exception> exceptions = new ArrayList<>();

        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        for (PrsConfidentialityIndicators indicators : provider.getPrsConfidentialityIndicatorsList()) {
            try {
                entityManagerProxy.remove(indicators);
            } catch (Exception e) {
                e.printStackTrace();
                exceptions.add(e);
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    @Test
    @Ignore
    public void testSaveConfidentialityIndicator() throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        ConfidentialityIndicatorDto newConf = ProviderTestDataBuilder.getConfidentialityIndicator();
        newConf.setPauthId(PAUTH_ID);
        maintainConfidentialityService.save(newConf);
        List<ConfidentialityIndicatorDto> cList = maintainConfidentialityService.refreshConfidentialityIndicators(PAUTH_ID);

        assertNotNull(cList);
    }

    @Test(expected = DuplicateRecordException.class)
    public void testSaveConfidentialityIndicator_duplicate() throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        ConfidentialityIndicatorDto newConf = ProviderTestDataBuilder.getConfidentialityIndicator();
        newConf.setPauthId(PAUTH_ID);

        maintainConfidentialityService.save(newConf);
        newConf = ProviderTestDataBuilder.getConfidentialityIndicator();
        newConf.setPauthId(PAUTH_ID);
        try {
            maintainConfidentialityService.save(newConf);
        } catch (DuplicateRecordException e) {
            assertTrue(e.getMessage().contains(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_DUPLICATE_DATA_BLOCK)));
            throw e;
        }
    }

    @Test(expected = BusinessRuleException.class)
    @Ignore
    public void testUpdateConf_endReasonCodeChange_fails() throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        ConfidentialityIndicatorDto confInd = ProviderTestDataBuilder.getConfidentialityIndicator();
        confInd.setPauthId(PAUTH_ID);
        GrsCtEndReasonTypes code = codesDao.lookup(GrsCtEndReasonTypes.class, CodeTableCodes.GrsCtEndReasonTypes.CHANGE);
        confInd.setEndReasonCodeId(code.getCtlId());

        maintainConfidentialityService.save(confInd);
    }

    @Test
    @Ignore
    public void testUpdateConf_endReasonCodeCeased_success() throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        ConfidentialityIndicatorDto confInd = ProviderTestDataBuilder.getConfidentialityIndicator();
        confInd.setPauthId(PAUTH_ID);
        GrsCtEndReasonTypes code = codesDao.lookup(GrsCtEndReasonTypes.class, CodeTableCodes.GrsCtEndReasonTypes.CEASE);
        confInd.setEndReasonCodeId(code.getCtlId());

        maintainConfidentialityService.save(confInd);
    }

    @Test
    @Ignore
    public void testUpdateConf_endReasonCodeCeased_genNumIncremented() throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        ConfidentialityIndicatorDto confInd = ProviderTestDataBuilder.getConfidentialityIndicator();
        confInd.setPauthId(PAUTH_ID);

        maintainConfidentialityService.save(confInd);
        List<ConfidentialityIndicatorDto> result = maintainConfidentialityService.refreshConfidentialityIndicators(PAUTH_ID);
        confInd = result.get(0);

        GrsCtEndReasonTypes code = codesDao.lookup(GrsCtEndReasonTypes.class, CodeTableCodes.GrsCtEndReasonTypes.CEASE);
        confInd.setEndReasonCodeId(code.getCtlId());
        maintainConfidentialityService.save(confInd);
        result = maintainConfidentialityService.refreshConfidentialityIndicators(PAUTH_ID);
        Set<Long> genNums = new HashSet<>();
        for (ConfidentialityIndicatorDto conf : result) {
            genNums.add(conf.getGenerationNum());
        }

        assertEquals(2, result.size());
        assertTrue(genNums.contains(1l));
        assertTrue(genNums.contains(2l));
    }

    @Test
    public void testIsPermitted() throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        ConfidentialityIndicatorDto confInd = ProviderTestDataBuilder.getConfidentialityIndicator();
        confInd.setPauthId(PAUTH_ID);

        assertTrue(maintainConfidentialityService.isPermitted(confInd, AuthorizationService.AccessType.WRITE) || maintainConfidentialityService.isPermitted(confInd, AuthorizationService.AccessType.READ));

    }
    

}
