/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.dps;

import ca.bc.gov.health.plr.ejb.entity.GrsAccessProfileGroups;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.codesDao;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.dpsUniqueValidator;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.entityManagerProxy;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.List;
import java.util.Random;
import static org.junit.Assert.assertFalse;
import org.junit.Test;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *
 * @author sumesh.kariyil
 */
public class DpsUniqueValidatorTest extends IntegrationSetup{
    /**
     * Test of search method, of class Dps Service.
     *
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Test(expected = EntityValidationException.class)
    public void testNonUniqueDpsName() throws EntityValidationException {
        GrsCtBooleanTypes active = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES);
        List<GrsAccessProfileGroups> groups = entityManagerProxy.query("SELECT g FROM GrsAccessProfileGroups g where g.activeFlag.ctlId = "+active.getCtlId());
        GrsAccessProfileGroups newEntity = mock(GrsAccessProfileGroups.class);
        when(newEntity.getAccessProfileGroupChid()).thenReturn(groups.get(0).getAccessProfileGroupChid());

        dpsUniqueValidator.validate(newEntity);

    }

    /**
     * Test of search method, of class Dps Service.
     *
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Test
    public void testUniqueDpsName() throws EntityValidationException {
        GrsCtBooleanTypes active = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES);
        List<GrsAccessProfileGroups> groups = entityManagerProxy.query("SELECT g FROM GrsAccessProfileGroups g where g.activeFlag.ctlId = "+active.getCtlId());
        GrsAccessProfileGroups newEntity = mock(GrsAccessProfileGroups.class);
        when(newEntity.getAccessProfileGroupChid()).thenReturn(groups.get(0).getAccessProfileGroupChid()+new Random().nextInt(5));
        boolean exception = false;
        try {
            dpsUniqueValidator.validate(newEntity);
        } catch (EntityValidationException ex) {
            exception = true;
        }
        assertFalse(exception);
    }
}
