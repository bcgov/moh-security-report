/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.remote;

import ca.bc.gov.health.plr.dto.esb.BatchRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ConditionsDto;
import ca.bc.gov.health.plr.dto.provider.esb.ConfidentialityIndicatorDto;
import ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DisciplinaryActionDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.esb.NoteDto;
import ca.bc.gov.health.plr.dto.provider.esb.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.RegistryIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.RegistryUserRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsElectronicAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsOrgNames;
import ca.bc.gov.health.plr.ejb.entity.GrsPersonNames;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryIdentifiers;
import ca.bc.gov.health.plr.ejb.entity.GrsTelephones;
import ca.bc.gov.health.plr.ejb.entity.PrsConditions;
import ca.bc.gov.health.plr.ejb.entity.PrsConfidentialityIndicators;
import ca.bc.gov.health.plr.ejb.entity.PrsDemographicDetails;
import ca.bc.gov.health.plr.ejb.entity.PrsDisciplinaryActions;
import ca.bc.gov.health.plr.ejb.entity.PrsInformationRoutes;
import ca.bc.gov.health.plr.ejb.entity.PrsNotes;
import ca.bc.gov.health.plr.ejb.entity.PrsProvRuRelns;
import ca.bc.gov.health.plr.ejb.entity.PrsProviderCredentials;
import ca.bc.gov.health.plr.ejb.entity.PrsProviderExpertises;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocationDetails;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocations;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.entityManagerProxy;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import org.apache.commons.lang3.RandomStringUtils;

/**
 *
 * @author sumesh.kariyil
 */
public class MaintainProviderEsbTestBuilder extends IntegrationSetup {

    static MaintainProviderRequest mainRequest;
    static BatchRequest batchRequest;
    static String successCode = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.TX_SUCCESS_CODE);
    static String changedBlockCode = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.TX_SUCCESS_CHANGEDBLOCKS_CODE);
    static String successMsg = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.TX_SUCCESS_MESSAGE);
    static String changeNoChange = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.NO_CHANGE_ON_UPDATE);
    static String failedMsg = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_GENERAL_TRANSACTION_FAILED);
    static String notBlankPart1 = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MANDATORY_PART1);
    static String notBlankPart2 = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MANDATORY_PART2);
    static Date EFF_START_DATE = new Date();

    static long PAUTH_ID = 9547L;

    static void clearEntities() {
        clearAddresses();
        clearRegistryIdentifiers();
        clearPersonNames();
        clearOrgNames();
        clearTelecoms();
        clearEAddresses();
        clearConditions();
        clearExpertise();
        clearCredentials();
        clearDisciplinaryActions();
        clearConfidentialities();
        clearRegUserRelationShips();
        clearNotes();
        clearInformationRoutes();
        clearWorkLocations();
        clearDemographics();
    }

    void clearChildren() {
        mainRequest.getProviderDetails().getRegistryIdentifiers().clear();
        mainRequest.getProviderDetails().getAddresses().clear();
        mainRequest.getProviderDetails().getIndNames().clear();
        mainRequest.getProviderDetails().getOrgNames().clear();
        mainRequest.getProviderDetails().getTelecommunication().clear();
        mainRequest.getProviderDetails().getDemographicDetails().clear();
        mainRequest.getProviderDetails().getElectronicAddresses().clear();
        mainRequest.getProviderDetails().getStatuses().clear();
        mainRequest.getProviderDetails().getConditions().clear();
        mainRequest.getProviderDetails().getExpertise().clear();
        mainRequest.getProviderDetails().getCredentials().clear();
        mainRequest.getProviderDetails().getDisciplinaryActions().clear();
        mainRequest.getProviderDetails().getConfidentialityIndicators().clear();
        mainRequest.getProviderDetails().getProviderRelationships().clear();
        mainRequest.getProviderDetails().getRegistryUserRelationships().clear();
        mainRequest.getProviderDetails().getNotes().clear();
        mainRequest.getProviderDetails().getInformationRoutes().clear();
        mainRequest.getProviderDetails().getWorkLocationList().clear();
    }

    static void clearAddresses() {
        List<Exception> exceptions = new ArrayList<>();

        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        if (provider != null && provider.getGrsAddressesList() != null) {
            for (GrsAddresses address : provider.getGrsAddressesList()) {
                try {
                    entityManagerProxy.remove(address);
                } catch (Exception e) {
                    e.printStackTrace();
                    exceptions.add(e);
                }
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static void clearRegistryIdentifiers() {
        List<Exception> exceptions = new ArrayList<>();
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        if (provider != null && provider.getGrsRegistryIdentifiersList() != null) {
            for (GrsRegistryIdentifiers identifier : provider.getGrsRegistryIdentifiersList()) {
                try {
                    entityManagerProxy.remove(identifier);
                } catch (Exception e) {
                    e.printStackTrace();
                    exceptions.add(e);
                }
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static void clearPersonNames() {
        List<Exception> exceptions = new ArrayList<>();
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        if (provider != null && provider.getGrsPersonNamesList() != null) {
            for (GrsPersonNames name : provider.getGrsPersonNamesList()) {
                try {
                    entityManagerProxy.remove(name);
                } catch (Exception e) {
                    e.printStackTrace();
                    exceptions.add(e);
                }
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static void clearOrgNames() {
        List<Exception> exceptions = new ArrayList<>();
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        if (provider != null && provider.getGrsOrgNamesList() != null) {
            for (GrsOrgNames name : provider.getGrsOrgNamesList()) {
                try {
                    entityManagerProxy.remove(name);
                } catch (Exception e) {
                    e.printStackTrace();
                    exceptions.add(e);
                }
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static void clearTelecoms() {
        List<Exception> exceptions = new ArrayList<>();
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        if (provider != null && provider.getGrsTelephonesList() != null) {
            for (GrsTelephones tele : provider.getGrsTelephonesList()) {
                try {
                    entityManagerProxy.remove(tele);
                } catch (Exception e) {
                    e.printStackTrace();
                    exceptions.add(e);
                }
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static void clearEAddresses() {
        List<Exception> exceptions = new ArrayList<>();
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        if (provider != null && provider.getGrsElectronicAddressesList() != null) {
            for (GrsElectronicAddresses eAddr : provider.getGrsElectronicAddressesList()) {
                try {
                    entityManagerProxy.remove(eAddr);
                } catch (Exception e) {
                    e.printStackTrace();
                    exceptions.add(e);
                }
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static void clearConditions() {
        List<Exception> exceptions = new ArrayList<>();
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        if (provider != null && provider.getPrsConditionsList() != null) {
            for (PrsConditions entity : provider.getPrsConditionsList()) {
                try {
                    entityManagerProxy.remove(entity);
                } catch (Exception e) {
                    e.printStackTrace();
                    exceptions.add(e);
                }
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static void clearExpertise() {
        List<Exception> exceptions = new ArrayList<>();
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        if (provider != null && provider.getPrsProviderExpertisesList() != null) {
            for (PrsProviderExpertises entity : provider.getPrsProviderExpertisesList()) {
                try {
                    entityManagerProxy.remove(entity);
                } catch (Exception e) {
                    e.printStackTrace();
                    exceptions.add(e);
                }
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static void clearCredentials() {
        List<Exception> exceptions = new ArrayList<>();
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        if (provider != null && provider.getPrsProviderCredentialsList() != null) {
            for (PrsProviderCredentials entity : provider.getPrsProviderCredentialsList()) {
                try {
                    entityManagerProxy.remove(entity);
                } catch (Exception e) {
                    e.printStackTrace();
                    exceptions.add(e);
                }
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static void clearDisciplinaryActions() {
        List<Exception> exceptions = new ArrayList<>();
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        if (provider != null && provider.getPrsDisciplinaryActionsList() != null) {
            for (PrsDisciplinaryActions entity : provider.getPrsDisciplinaryActionsList()) {
                try {
                    entityManagerProxy.remove(entity);
                } catch (Exception e) {
                    e.printStackTrace();
                    exceptions.add(e);
                }
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static void clearConfidentialities() {
        List<Exception> exceptions = new ArrayList<>();
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        if (provider != null && provider.getPrsConfidentialityIndicatorsList() != null) {
            for (PrsConfidentialityIndicators entity : provider.getPrsConfidentialityIndicatorsList()) {
                try {
                    entityManagerProxy.remove(entity);
                } catch (Exception e) {
                    e.printStackTrace();
                    exceptions.add(e);
                }
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static void clearRegUserRelationShips() {
        List<Exception> exceptions = new ArrayList<>();
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        if (provider != null && provider.getPrsProvRuRelnsList() != null) {
            for (PrsProvRuRelns entity : provider.getPrsProvRuRelnsList()) {
                try {
                    entityManagerProxy.remove(entity);
                } catch (Exception e) {
                    e.printStackTrace();
                    exceptions.add(e);
                }
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static void clearNotes() {
        List<Exception> exceptions = new ArrayList<>();
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        if (provider != null && provider.getPrsNotesList() != null) {
            for (PrsNotes entity : provider.getPrsNotesList()) {
                try {
                    entityManagerProxy.remove(entity);
                } catch (Exception e) {
                    e.printStackTrace();
                    exceptions.add(e);
                }
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static void clearInformationRoutes() {
        List<Exception> exceptions = new ArrayList<>();
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        if (provider != null && provider.getPrsInformationRoutesList() != null) {
            for (PrsInformationRoutes entity : provider.getPrsInformationRoutesList()) {
                try {
                    entityManagerProxy.remove(entity);
                } catch (Exception e) {
                    e.printStackTrace();
                    exceptions.add(e);
                }
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static void clearDemographics() {
        List<Exception> exceptions = new ArrayList<>();
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        if (provider != null && provider.getPrsDemographicDetailsList() != null) {
            for (PrsDemographicDetails entity : provider.getPrsDemographicDetailsList()) {
                try {
                    entityManagerProxy.remove(entity);
                } catch (Exception e) {
                    e.printStackTrace();
                    exceptions.add(e);
                }
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static void clearWorkLocations() {
        List<Exception> exceptions = new ArrayList<>();
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        if (provider != null && provider.getPrsWorkLocationsList() != null) {
            for (PrsWorkLocations entity : provider.getPrsWorkLocationsList()) {
                try {
                    if (entity.getPrsWorkLocationDetailsList() != null) {
                        for (PrsWorkLocationDetails details : entity.getPrsWorkLocationDetailsList()) {
                            entityManagerProxy.remove(details);
                        }
                    }
                    if (entity.getGrsAddressesList() != null) {
                        for (GrsAddresses details : entity.getGrsAddressesList()) {
                            entityManagerProxy.remove(details);
                        }
                    }
                    if (entity.getGrsElectronicAddressesList() != null) {
                        for (GrsElectronicAddresses details : entity.getGrsElectronicAddressesList()) {
                            entityManagerProxy.remove(details);
                        }
                    }
                    if (entity.getGrsTelephonesList() != null) {
                        for (GrsTelephones details : entity.getGrsTelephonesList()) {
                            entityManagerProxy.remove(details);
                        }
                    }
                    if (entity.getPrsInformationRoutesList() != null)  {
                        for (PrsInformationRoutes details : entity.getPrsInformationRoutesList()) {
                            entityManagerProxy.remove(details);
                        }
                    }
                    entityManagerProxy.remove(entity);
                } catch (Exception e) {
                    e.printStackTrace();
                    exceptions.add(e);
                }
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static String IDENTIFIER = "DEMOGRAPHICTEST";
    static String ID_TYPE_CODE = "DENID";

    static void addIdentifier(MaintainProviderRequest request) {
        request.getProviderDetails().setIdentifiers(new ArrayList<CollegeIdentifierDto>());
        CollegeIdentifierDto collegeDto = new CollegeIdentifierDto();
        collegeDto.setIdentifier(IDENTIFIER);
        collegeDto.setTypeCode(ID_TYPE_CODE);
        request.getProviderDetails().getIdentifiers().add(collegeDto);
    }

    static void addIdentifier_random(MaintainProviderRequest request) {
        request.getProviderDetails().setIdentifiers(new ArrayList<CollegeIdentifierDto>());
        CollegeIdentifierDto collegeDto = new CollegeIdentifierDto();
        collegeDto.setIdentifier(UUID.randomUUID().toString().replace('-', '7').substring(0, 14));
        collegeDto.setTypeCode(ID_TYPE_CODE);
        request.getProviderDetails().getIdentifiers().add(collegeDto);
    }

    static AddressDto getAddress() {
        AddressDto address = new AddressDto();
        address.setCity("Narnia");
        address.setAddressLineOne("The Yellow Brick Road");
        address.setEffectiveStartDate(EFF_START_DATE);
        address.setEffectiveEndDate(null);
        address.setProvinceOrStateTxt("BC");
        address.setCommunicationPurposeCode("BC");
        address.setTypeCode("M");
        address.setCountryCode("CA");

        return address;
    }

    static ca.bc.gov.health.plr.dto.provider.AddressDto getRefreshAddressDto() {
        ca.bc.gov.health.plr.dto.provider.AddressDto address = new ca.bc.gov.health.plr.dto.provider.AddressDto();
        address.setPauthId(PAUTH_ID);
        return address;
    }

    static ca.bc.gov.health.plr.dto.provider.OrgNameDto getRefreshOrgDto() {
        ca.bc.gov.health.plr.dto.provider.OrgNameDto name = new ca.bc.gov.health.plr.dto.provider.OrgNameDto();
        name.setPauthId(PAUTH_ID);
        return name;
    }

    static ca.bc.gov.health.plr.dto.provider.TelecommunicationDto getRefreshTeleDto() {
        ca.bc.gov.health.plr.dto.provider.TelecommunicationDto tele = new ca.bc.gov.health.plr.dto.provider.TelecommunicationDto();
        tele.setPauthId(PAUTH_ID);
        return tele;
    }

    static ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto getRefreshEAddressDto() {
        ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto dto = new ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto();
        dto.setPauthId(PAUTH_ID);
        return dto;
    }

    static ca.bc.gov.health.plr.dto.provider.ConditionsDto getRefreshConditionsDto() {
        ca.bc.gov.health.plr.dto.provider.ConditionsDto dto = new ca.bc.gov.health.plr.dto.provider.ConditionsDto();
        dto.setPauthId(PAUTH_ID);
        return dto;
    }

    static ca.bc.gov.health.plr.dto.provider.DisciplinaryActionDto getRefreshDiscplinaryActionDto() {
        ca.bc.gov.health.plr.dto.provider.DisciplinaryActionDto dto = new ca.bc.gov.health.plr.dto.provider.DisciplinaryActionDto();
        dto.setPauthId(PAUTH_ID);
        return dto;
    }

    static ca.bc.gov.health.plr.dto.provider.InformationRouteDto getRefreshInfoRouteDto() {
        ca.bc.gov.health.plr.dto.provider.InformationRouteDto dto = new ca.bc.gov.health.plr.dto.provider.InformationRouteDto();
        dto.setPauthId(PAUTH_ID);
        return dto;
    }

    static ca.bc.gov.health.plr.dto.provider.ProviderDto getRefreshProviderDto() {
        ca.bc.gov.health.plr.dto.provider.ProviderDto dto = new ca.bc.gov.health.plr.dto.provider.ProviderDto();
        dto.setPauthId(PAUTH_ID);
        return dto;
    }

    static RegistryIdentifierDto getRegistryIdentifier() {
        RegistryIdentifierDto identifierDto = new RegistryIdentifierDto();
        identifierDto.setIdentifier("TEST");
        identifierDto.setRawIdentifier("TEST");
        identifierDto.setTypeCode("CPN");
        identifierDto.setEffectiveStartDate(EFF_START_DATE);
        return identifierDto;
    }

    static PersonNameDto getPersonNameDto() {
        PersonNameDto nameDto = new PersonNameDto();
        nameDto.setFirstName("TEST");
        nameDto.setLastName("LAST");
        nameDto.setTypeCode("CURR");
        nameDto.setEffectiveStartDate(EFF_START_DATE);
        return nameDto;
    }

    static OrgNameDto getOrgNameDto() {
        OrgNameDto nameDto = new OrgNameDto();
        nameDto.setLongName("TEST");
        nameDto.setName("LAST");
        nameDto.setTypeCode("CURR");
        nameDto.setEffectiveStartDate(EFF_START_DATE);
        return nameDto;
    }

    static OrgNameDto getOrgNameDto_randomName() {
        OrgNameDto nameDto = new OrgNameDto();
        nameDto.setLongName("TEST");
        String name = UUID.randomUUID().toString().replace('-', 'p').replace('0', 'l').replace('1', 'm').replace('2', 'w').replace('3', 'n').replace('4', 'z').replace('5', 'x').replace('6', 'y').replace('7', 'u').replace('8', 'o').replace('9', 'z').substring(0, 19);
        nameDto.setName(name);
        nameDto.setTypeCode("CURR");
        nameDto.setEffectiveStartDate(EFF_START_DATE);
        return nameDto;
    }

    static TelecommunicationDto getTelecomDto() {
        TelecommunicationDto teleDto = new TelecommunicationDto();
        teleDto.setAreaCode("123");
        teleDto.setCommunicationPurposeCode("HC");
        teleDto.setNumber("1112223333");
        teleDto.setTypeCode("T");
        teleDto.setEffectiveStartDate(EFF_START_DATE);
        return teleDto;
    }

    static TelecommunicationDto getTelecomDtoFax() {
        TelecommunicationDto teleDto = new TelecommunicationDto();
        teleDto.setAreaCode("123");
        teleDto.setCommunicationPurposeCode("HC");
        teleDto.setNumber("1112223333");
        teleDto.setTypeCode("FAX");
        teleDto.setEffectiveStartDate(EFF_START_DATE);
        return teleDto;
    }

    static DemographicDetailsDto getDemographicDto() {
        DemographicDetailsDto dto = new DemographicDetailsDto();
        dto.setBirthCountryCode("CA");
        dto.setBirthProvState("BC");
        dto.setBirthDate(new Date());
        dto.setGenderCode("M");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }

    static ElectronicAddressDto getElectronicAddressDto() {
        ElectronicAddressDto dto = new ElectronicAddressDto();
        dto.setAddress("abcd@def.com");
        dto.setCommunicationPurposeCode("BC");
        dto.setEffectiveStartDate(EFF_START_DATE);
        dto.setTypeCode("E");
        return dto;
    }

    static StatusDto getStatusDto() {
        StatusDto dto = new StatusDto();
        dto.setClassCode("LIC");
        dto.setTypeCode("ACTIVE");
        dto.setReasonCode("ASSOC");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }

    static ConditionsDto getConditionsDto() {
        ConditionsDto dto = new ConditionsDto();
        dto.setIdentifier("12345");
        dto.setTypeCode("LOC");
        dto.setRestrictionExplanationText("12345 - TEST - 12345");
        dto.setRestrictionFlag(false);
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }

    static ExpertiseDto getExpertiseDto() {
        ExpertiseDto dto = new ExpertiseDto();
        dto.setRoleTypeCode("PHARM");
        dto.setTypeCode("DPH");
        dto.setEffectiveStartDate(EFF_START_DATE);
        dto.setSourcesCode("12345");
        return dto;
    }

    static CredentialsDto getCredentialDto() {
        CredentialsDto dto = new CredentialsDto();
        dto.setDesignation("TEST");
        dto.setInstitutionCountryCode("CA");
        dto.setInstitutionProvStateCode("BC");
        dto.setRegistrationNumber("TEST");
        dto.setTypeCode("BD");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }

    static DisciplinaryActionDto getDisciplinaryActionDto() {
        DisciplinaryActionDto dto = new DisciplinaryActionDto();
        dto.setDescription("TEST");
        dto.setIdentifier("12345");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }

    static ConfidentialityIndicatorDto getConfidentialityIndicatorDto() {
        ConfidentialityIndicatorDto dto = new ConfidentialityIndicatorDto();
        dto.setConfidential(false);
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }

    static ProviderRelationshipDto getProviderRelationshipDto() {
        ProviderRelationshipDto dto = new ProviderRelationshipDto();
        dto.setIdentifier("ABCDEF");
        dto.setIdentifierTypeCode("RNID");
        dto.setRelationshipTypeCode("LOC");
        dto.setTargetRelationshipTypeCode(null);
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }

    static RegistryUserRelationshipDto getRegUserRelationshipDto() {
        RegistryUserRelationshipDto dto = new RegistryUserRelationshipDto();
        dto.setRegUserTypeCode("RA");
        dto.setRegistryUserChid("00002855");
        dto.setTypeCode("EE");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }

    static NoteDto getNoteDto() {
        NoteDto dto = new NoteDto();
        dto.setNoteText("TEST");
        dto.setIdentifier("12345");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }

    static InformationRouteDto getInformationRouteDtoFile() {
        InformationRouteDto dto = new InformationRouteDto();
        dto.setDocumentTypeCode("ECG");
        dto.setMechanismTypeCode("FILE");
        dto.setElectronicAddressDto(getElectronicAddressDto());
        dto.getElectronicAddressDto().setDataOwnerCode("MOH");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }

    static InformationRouteDto getInformationRouteDtoFax() {
        InformationRouteDto dto = new InformationRouteDto();
        dto.setDocumentTypeCode("ECG");
        dto.setMechanismTypeCode("FAX");
        dto.setTelecommunicationDto(getTelecomDto());
        dto.getTelecommunicationDto().setDataOwnerCode("HA1");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }

    static InformationRouteDto getInformationRouteDtoCourier() {
        InformationRouteDto dto = new InformationRouteDto();
        dto.setDocumentTypeCode("ECG");
        dto.setMechanismTypeCode("COURIER");
        dto.setAddressDto(getAddress());
        dto.getAddressDto().setDataOwnerCode("MOH");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }

    static WorkLocationDto getWorkLocationDto() {
        WorkLocationDto dto = new WorkLocationDto();
        return dto;
    }

    static WorkLocationDetailsDto getWorkLocationDetailsDto() {
        WorkLocationDetailsDto dto = new WorkLocationDetailsDto();
        dto.setName("TEST");
        dto.setAdditionalAddresseeInfo("TEST");
        dto.setTypeCode("HID");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }

    static String getRandom() {
        return RandomStringUtils.randomAlphabetic(10).toUpperCase();
    }

}