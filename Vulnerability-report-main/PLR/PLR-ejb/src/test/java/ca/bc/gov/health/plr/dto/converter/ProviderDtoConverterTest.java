package ca.bc.gov.health.plr.dto.converter;

import ca.bc.gov.health.plr.dto.AddProviderDto;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.ejb.entity.PrsCtGenderCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvCredentialTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvState;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtTelecomNumberTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsDemographicDetails;
import ca.bc.gov.health.plr.ejb.entity.PrsProviderCredentials;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.service.validators.UserChidGenerator;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.persistence.EntityManager;
import static org.junit.Assert.assertEquals;
import org.junit.Before;
import org.junit.Test;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.eq;
import org.mockito.Mockito;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class ProviderDtoConverterTest {

    private ProviderDtoConverter converter;
    private AddProviderDto instance;
    private EntityManager mockEm;
    private CodesDao mockCodesDao;

    @Before
    public void setUp() {
        converter = new ProviderDtoConverter();
        mockEm = mock(EntityManager.class);
        converter.em = mockEm;

        mockCodesDao = mock(CodesDao.class);
        converter.codesDao = mockCodesDao;
        
        UserChidGenerator userChidGenerator = mock(UserChidGenerator.class);
        when(userChidGenerator.find()).thenReturn("test@test");
        converter.chidGenerator = userChidGenerator;

        instance = new AddProviderDto();
        instance.setPartyType(CodeTableCodes.GrsCtPartyType.IND);

    }

    @Test
    public void testToEntity_providerTypeId() {
        PrsCtProviderRoleTypes mockExpectedRoleType = mock(PrsCtProviderRoleTypes.class);
        Long providerTypeId = 817l;
        when(mockCodesDao.lookup(PrsCtProviderRoleTypes.class, providerTypeId)).thenReturn(mockExpectedRoleType);

        instance.setProviderTypeId(providerTypeId);
        PrsProviders result = converter.toEntity(instance);

        assertEquals(mockExpectedRoleType, result.getHptCode());
    }

    

    

    @Test
    public void testToEntity_dob() {
        Date dob = new GregorianCalendar(1900, 1, 22).getTime();
        instance.getDemographicDetails().setBirthDate(dob);
        PrsDemographicDetails result = converter.mapPrsDemographicDetails(instance.getDemographicDetails(), mock(PrsProviders.class));

        assertEquals(dob, result.getDateOfBirthDate());
    }

    @Test
    public void testToEntity_genderCodeId() {
        Long someGenderId = 21l;
        PrsCtGenderCodes someGenderCode = mock(PrsCtGenderCodes.class);
        when(mockCodesDao.lookup(PrsCtGenderCodes.class, someGenderId)).thenReturn(someGenderCode);

        instance.getDemographicDetails().setGenderId(someGenderId);
        PrsDemographicDetails result = converter.mapPrsDemographicDetails(instance.getDemographicDetails(), mock(PrsProviders.class));

        assertEquals(someGenderCode, result.getGenderCode());
    }
    
    

    /**
     * Test that
     */
    @Test
    public void testToEntity_effectiveStartDate_demographics() {
        Long someGenderId = 21l;
        PrsCtGenderCodes someGenderCode = mock(PrsCtGenderCodes.class);
        when(mockEm.find(PrsCtGenderCodes.class, someGenderId)).thenReturn(someGenderCode);

        Date date = new Date();
        instance.getDemographicDetails().setEffectiveStartDate(date);

        PrsDemographicDetails result = converter.mapPrsDemographicDetails(instance.getDemographicDetails(), mock(PrsProviders.class));

        assertEquals(date, result.getEffectiveStartDate());
    }

    
    @Test
    public void testToEntity_credentialTypeId() {
        PrsCtProvCredentialTypes mockCredTypeCode = configureCredentialTypeIdMock();

        PrsProviderCredentials result = converter.mapPrsProviderCredentials(instance.getCredential(), mock(PrsProviders.class));

        assertEquals(mockCredTypeCode, result.getProviderCredentialTypeCode());
    }

    private PrsCtProvCredentialTypes configureCredentialTypeIdMock() {
        PrsCtProvCredentialTypes mockCredTypeCode = mock(PrsCtProvCredentialTypes.class);
        when(mockCodesDao.lookup(eq(PrsCtProvCredentialTypes.class), Mockito.anyLong())).thenReturn(mockCredTypeCode);
        instance.getCredential().setTypeId(68l);
        return mockCredTypeCode;
    }

    @Test
    public void testToEntity_designation() {
        configureCredentialTypeIdMock();

        String designation = "someDesignation";
        instance.getCredential().setDesignation(designation);
        PrsProviderCredentials result = converter.mapPrsProviderCredentials(instance.getCredential(), mock(PrsProviders.class));

        assertEquals(designation, result.getCredentialDesignationTxt());
    }

    @Test
    public void testToEntity_registrationNumber() {
        configureCredentialTypeIdMock();

        String regNumber = "someRegNumber";

        instance.getCredential().setRegistrationNumber(regNumber);
        PrsProviderCredentials result = converter.mapPrsProviderCredentials(instance.getCredential(), mock(PrsProviders.class));

        assertEquals(regNumber, result.getRegistrationNumberTxt());
    }

    @Test
    public void testToEntity_institution() {
        configureCredentialTypeIdMock();

        String institution = "institution";

        instance.getCredential().setGrantingInstitution(institution);
        PrsProviderCredentials result = converter.mapPrsProviderCredentials(instance.getCredential(), mock(PrsProviders.class));

        assertEquals(institution, result.getCredentialGrantingInstTxt());
    }

    @Test
    public void testToEntity_cityCredential() {
        configureCredentialTypeIdMock();

        String cityCred = "someRegNumber";
        instance.getCredential().setInstitutionCity(cityCred);
        PrsProviderCredentials result = converter.mapPrsProviderCredentials(instance.getCredential(), mock(PrsProviders.class));

        assertEquals(cityCred, result.getInstitutionCityTxt());
    }

    @Test
    public void testToEntity_countryCredentialId() {
        configureCredentialTypeIdMock();

        Long countryId = 5l;
        PrsCtCountries country = mock(PrsCtCountries.class);
        when(mockCodesDao.lookup(PrsCtCountries.class, countryId)).thenReturn(country);

        instance.getCredential().setInstitutionCountryId(countryId);
        PrsProviderCredentials result = converter.mapPrsProviderCredentials(instance.getCredential(), mock(PrsProviders.class));

        assertEquals(country, result.getInstitutionCountryCode());
    }

    @Test
    public void testToEntity_provinceCredentialId() {
        configureCredentialTypeIdMock();

        Long provinceId = 5l;
        PrsCtProvState province = mock(PrsCtProvState.class);
        when(mockCodesDao.lookup(PrsCtProvState.class, provinceId)).thenReturn(province);

        instance.getCredential().setInstitutionProvStateId(provinceId);
        PrsProviderCredentials result = converter.mapPrsProviderCredentials(instance.getCredential(), mock(PrsProviders.class));

        assertEquals(province, result.getInstitutionProvinceCode());
    }

    @Test
    public void testToEntity_equivalencyFlag() {
        configureCredentialTypeIdMock();

        GrsCtBooleanTypes someBoolCode = new GrsCtBooleanTypes();

        when(mockCodesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES)).thenReturn(someBoolCode);

        instance.getCredential().setEquivalencyFlag(true);
        PrsProviderCredentials result = converter.mapPrsProviderCredentials(instance.getCredential(), mock(PrsProviders.class));

        assertEquals(someBoolCode, result.getEquivalencyFlag());
    }

    @Test
    public void testToEntity_effectiveStartDate_cred() {
        configureCredentialTypeIdMock();

        Date someDate = new Date();

        instance.getCredential().setEffectiveStartDate(someDate);
        PrsProviderCredentials result = converter.mapPrsProviderCredentials(instance.getCredential(), mock(PrsProviders.class));

        assertEquals(someDate, result.getEffectiveStartDate());
    }

 
    /**
     * Configure the `mockEm` instance so that it returns a
     * PrsCtTelecomNumberTypes code when a query that looks like
     * <code>em.createQuery("SELECT s FROM PrsCtTelecomNumberTypes s WHERE s.ctlNameCode = :code", PrsCtTelecomNumberTypes.class);</code>
     * is executed.
     *
     * @return the PrsCtTelecomNumberTypes that will be returned by `mockEm`.
     */
    private PrsCtTelecomNumberTypes configureTelephoneMock() {
        PrsCtTelecomNumberTypes prsCtTelecomeNumberType = new PrsCtTelecomNumberTypes();
        when(mockCodesDao.lookup(eq(PrsCtTelecomNumberTypes.class), any(CodeTableCodes.PrsCtTelecomNumberTypes.class))).thenReturn(prsCtTelecomeNumberType);
        return prsCtTelecomeNumberType;
    }
}
