/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.dto.provider.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.StatusDto;
import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtRegIdentifierTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryIdentifiers;
import ca.bc.gov.health.plr.ejb.entity.PlrConfigurationProperties;
import ca.bc.gov.health.plr.ejb.entity.PrsCtAddressTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCommunPurposeTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.ejb.entity.PrsCtElectronicAddrTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtGenderCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtIdentifierTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvCredentialTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvExpertiseTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvState;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusClassCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusReasonCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.codesDao;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.entityManagerProxy;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.util.AddressValidationControl;
import ca.bc.gov.health.plr.util.AuditControl;
import ca.bc.gov.health.plr.util.DistributionControl;
import ca.bc.gov.health.plr.util.ProviderCleanUpHelper;
import ca.bc.gov.health.plr.util.SpoofedUserHelper;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;
import javax.naming.NamingException;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertNotSame;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 *
 * @author jonathan.wiebe
 */
public class AddProviderLinkageTest extends IntegrationSetup {

    private static PrsCtIdentifierTypes identifierType;
    private static PrsCtProviderRoleTypes nurse;
    private static PrsCtProviderRoleTypes nurseRNP;
    private static PrsCtStatusClassCodes assignedEntity;
    private static PrsCtStatusCodes statusCode;
    private static PrsCtStatusReasonCodes statusReasonCode;
    private static final Date date = new Date();
    private static PrsCtCommunPurposeTypes addressPurpose;
    private static PrsCtAddressTypes addressType;
    private static PrsCtElectronicAddrTypes eAddressType;
    private static PrsCtCountries countryAddress;
    private static PrsCtProvCredentialTypes bachelorDegree;
    private static PrsCtProvExpertiseTypes acupuncture;
    private static PrsCtProvExpertiseTypes generalMedicine;
    private static PrsCtGenderCodes genderCode;
    private static PrsCtProvState provinceCredential;
    private static GrsCtRegIdentifierTypes cpnType;
    private static GrsCtRegIdentifierTypes ipcType;
    private static PrsCtProviderRoleTypes dentist;
    private static PrsCtStatusClassCodes licensure;
    private static PrsCtIdentifierTypes dentistId;
    private static PrsCtGenderCodes gender;
    private static String distProcessState = "false";
    private static String distSendState = "false";

    // every provider that has a last name Kush will be deleted
    private static String LASTNAME_KUSH = "Kush";
    private static String LASTNAME_KUSH2 = "KushA";
    private static String LASTNAME_KUSH3 = "KushB";
    private static String SHORTNAME_ORG = "somerandomshort name";

    private static void deleteAllProvidersUsedInThisTestClass() {
        
        //clear out distributions
        DistributionControl.deleteAll();
        
        ProviderCleanUpHelper.deleteProvidersWithLastName(LASTNAME_KUSH);
        ProviderCleanUpHelper.deleteProvidersWithLastName(LASTNAME_KUSH2);
        ProviderCleanUpHelper.deleteProvidersWithLastName(LASTNAME_KUSH3);
        ProviderCleanUpHelper.deleteProvidersWithShortName(SHORTNAME_ORG);
        ProviderCleanUpHelper.deteleProvidersWithIDValue(ID_VALUE);
    }

    @BeforeClass
    public static void setUpClass() throws NamingException {

        AddressValidationControl.turnOffAddressValidation();
        AuditControl.turnOffAudit();
        DistributionControl.turnOffDistributions();
        deleteAllProvidersUsedInThisTestClass();

        identifierType = codesDao.lookup(PrsCtIdentifierTypes.class, "RNID");
        nurse = codesDao.lookup(PrsCtProviderRoleTypes.class, "RN");
        nurseRNP = codesDao.lookup(PrsCtProviderRoleTypes.class, "RNP");
        assignedEntity = codesDao.lookup(PrsCtStatusClassCodes.class, CodeTableCodes.PrsCtStatusClassCodes.ASSIGNED_ENTITY);
        statusCode = codesDao.lookup(PrsCtStatusCodes.class, CodeTableCodes.PrsCtStatusCodes.ACTIVE);
        statusReasonCode = codesDao.lookup(PrsCtStatusReasonCodes.class, CodeTableCodes.PrsCtStatusReasonCodes.GOOD_STANDING);
        addressPurpose = codesDao.lookup(PrsCtCommunPurposeTypes.class, CodeTableCodes.PrsCtCommunPurposeTypes.BUSINESS_CONTACT);
        addressType = codesDao.lookup(PrsCtAddressTypes.class, CodeTableCodes.PrsCtAddressTypes.MAILING_ADDRESS);
        eAddressType = codesDao.lookup(PrsCtElectronicAddrTypes.class, CodeTableCodes.PrsCtElectronicAddrTypes.FTP);
        countryAddress = codesDao.lookup(PrsCtCountries.class, "AF");
        bachelorDegree = codesDao.lookup(PrsCtProvCredentialTypes.class, "BD");
        acupuncture = codesDao.lookup(PrsCtProvExpertiseTypes.class, "AMD1");
        generalMedicine = codesDao.lookup(PrsCtProvExpertiseTypes.class, "ERN1");
        genderCode = codesDao.lookup(PrsCtGenderCodes.class, "F");
        provinceCredential = codesDao.lookup(PrsCtProvState.class, "ABE");

        cpnType = codesDao.lookup(GrsCtRegIdentifierTypes.class, CodeTableCodes.GrsCtRegIdentifierTypes.COMMON_PROVIDER_NUMBER);
        ipcType = codesDao.lookup(GrsCtRegIdentifierTypes.class, CodeTableCodes.GrsCtRegIdentifierTypes.INTERNAL_PROVIDER_ID);

        dentist = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        licensure = codesDao.lookup(PrsCtStatusClassCodes.class, CodeTableCodes.PrsCtStatusClassCodes.LICENSURE);
        dentistId = codesDao.lookup(PrsCtIdentifierTypes.class, "DENID");

        gender = codesDao.lookup(PrsCtGenderCodes.class, "F");
    }

    @AfterClass
    public static void tearDownClass() {
        AddressValidationControl.restoreAddressValidation();
        AuditControl.restoreAudit();
        DistributionControl.restoreDistributions();
    }

    @Before
    public void setUpRegUser() {
        SpoofedUserHelper.currentUser = "plr-reg-admin";
    }

    @Before
    public void cleanUpTestDataBefore() {
        deleteAllProvidersUsedInThisTestClass();
    }

    @After
    public void cleanUpTestDataAfter() {
        deleteAllProvidersUsedInThisTestClass();
    }

    @Test
    public void testLinkage_Linked() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {

        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_NotLinked_AddressTypesDontMatch_ButCitiesDoMatch() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {

        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        providerDto.getAddresses().get(0).setCommunicationPurposeCode("HC");
        setup2ndAddressVancouver(providerDto, c);
        providerDto.getAddresses().get(1).setCommunicationPurposeCode("MC");

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertNotEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_TwoLink_ThirdDoesNotLink() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {

        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);
        providerDto.getIdentifiers().get(0).setIdentifier(UUID.randomUUID().toString().replaceAll("-", "a"));

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);
        providerDto.getIdentifiers().get(0).setIdentifier(UUID.randomUUID().toString().replaceAll("-", "a"));

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        // 2nd matches fine
        assertEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
        
        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "MD"), codesDao.lookup(PrsCtIdentifierTypes.class, "CPSID"), assignedEntity);
        providerDto.getIdentifiers().get(0).setIdentifier(UUID.randomUUID().toString().replaceAll("-", "a"));

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider3 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider3CpnRegId = getCPNRegIdentifier(provider3.getGrsRegistryIdentifiersList());

        // 3rd provider should not link
        assertNotEquals(provider1CpnRegId.getProviderChid(), provider3CpnRegId.getProviderChid());

    }

    @Test
    public void testLinkage_NOTLinked_TooManyMatches_Address() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {

        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "MD"), codesDao.lookup(PrsCtIdentifierTypes.class, "CPSID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider3 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider3CpnRegId = getCPNRegIdentifier(provider3.getGrsRegistryIdentifiersList());

        // the 3rd provider matches the first two, that is too many
        // so 1 and 2 should match, but not 1 and 3 and not 2 and 3
        assertEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
        assertNotEquals(provider1CpnRegId.getProviderChid(), provider3CpnRegId.getProviderChid());
        assertNotEquals(provider2CpnRegId.getProviderChid(), provider3CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_1_Linked_ExistingHasTwoNames_NewHasOneName_OneNameMatches() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        providerDto.getAddresses().remove(1);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        providerDto.getIndNames().remove(1);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        providerDto.getAddresses().remove(1);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_2_Linked_ExistingHasTwoNames_NewHasTwoNames_OneNameMatches() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        providerDto.getAddresses().remove(1);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRName(providerDto, c, "somerandomname");
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        providerDto.getAddresses().remove(1);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_3_Linked_ExistingHasTwoNames_NewHasTwoNames_AllNamesMatch() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        providerDto.getAddresses().remove(1);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        providerDto.getAddresses().remove(1);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_4_NOTLinked_ExistingHasTwoNames_NewHasTwoNames_NoNamesMatch() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        providerDto.getAddresses().remove(1);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDName(providerDto, c, "squid");
        setupCURRName(providerDto, c, "fire");
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        providerDto.getAddresses().remove(1);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertNotEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_5_NOTLinked_ExistingHasTwoNames_NewHasOneNames_NoNamesMatch() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        providerDto.getAddresses().remove(1);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDName(providerDto, c, "squid");
        providerDto.getIndNames().remove(1);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        providerDto.getAddresses().remove(1);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertNotEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_6_Linked_ExistingHasTwoAddresses_NewHasOneAddress_OneAddressMatches() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        providerDto.getAddresses().remove(1);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_7_Linked_ExistingHasTwoAddresses_NewHasOneAddress_OneAddressMatches() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddress(providerDto, c, "Some city");

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_8_Linked_ExistingHasTwoAddresses_NewHasTwoAddresses_OneAddressMatches() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddress(providerDto, c, "Some city");
        setup2ndAddressVancouver(providerDto, c);
        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_9_Linked_ExistingHasOneAddresses_NewHasTwoAddresses_OneAddressMatches() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        providerDto.getAddresses().remove(1);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);
        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_10_NOTLinked_ExistingHasTwoAddresses_NewHasTwoAddress_NoAddressesMatch() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddress(providerDto, c, "squidlyfoobar");

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddress(providerDto, c, "foobar");
        setup2ndAddress(providerDto, c, "squid");
        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertNotEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_11_NOTLinked_ExistingHasOneAddress_NewHasTwoAddress_NoAddressesMatch() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        providerDto.getAddresses().remove(1);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddress(providerDto, c, "foobar");
        setup2ndAddress(providerDto, c, "squid");
        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertNotEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_12_NOTLinked_ExistingHasTwoAddress_NewHasOneAddress_NoAddressesMatch() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddress(providerDto, c, "squid");

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddress(providerDto, c, "foobar");
        providerDto.getAddresses().remove(1);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertNotEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_NOTLinked_NameDifferentType() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {

        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDName(providerDto, c, "Test2");
        setupCURRName(providerDto, c, "Test");
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertNotSame(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_NOTLinked_AddressDifferentType() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVancouver(providerDto, c);
        setup2ndAddressVictoria(providerDto, c);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertNotSame(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());

    }

    @Test
    public void testLinkage_NOTLinked_GenderDifferent() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderUnknown(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        providerDto = buildMinimiumProviderDto(codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN"), codesDao.lookup(PrsCtIdentifierTypes.class, "DENID"), assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertNotSame(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_LinkedRNandRNP() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        //names can be different and still link
        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        providerDto = buildMinimiumProviderDto(nurseRNP, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }
    
    @Test
    public void testLinkage_LinkedRNandRNP_ThirdNotLinked() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        providerDto = buildMinimiumProviderDto(nurseRNP, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        // first 2 should link
        assertEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
        
        providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        //names can be different and still link
        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider3 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        GrsRegistryIdentifiers provider3CpnRegId = getCPNRegIdentifier(provider3.getGrsRegistryIdentifiersList());

        // 3rd should not link
        assertNotEquals(provider1CpnRegId.getProviderChid(), provider3CpnRegId.getProviderChid());
 
    }

    @Test
    public void testLinkage_LinkedRNandRNP_IDDifferent_NOLink() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        providerDto.getIdentifiers().get(0).setIdentifier("something different");

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        providerDto = buildMinimiumProviderDto(nurseRNP, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertNotSame(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_LinkedRNandRNP_NamesDontMatchShouldStillLink() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        providerDto = buildMinimiumProviderDto(nurseRNP, identifierType, assignedEntity);

        setupCREDName(providerDto, c, "Testbadssf");
        setupCURRName(providerDto, c, "Testasdf2");
        setupGenderFemale(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    @Test
    public void testLinkage_LinkedRNandRNP_NothingMatchesShouldStillLink() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 12);
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);

        setupCREDNameTest(providerDto, c);
        setupCURRNameTest2(providerDto, c);
        setupGenderFemale(providerDto, c);
        setup1stAddressVancouver(providerDto, c);
        setup2ndAddressVictoria(providerDto, c);

        PrsProviders provider1 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        providerDto = buildMinimiumProviderDto(nurseRNP, identifierType, assignedEntity);

        setupCREDName(providerDto, c, "Testbadssf");
        setupCURRName(providerDto, c, "Testasdf2");
        setupGenderUnknown(providerDto, c);
        setup1stAddressVictoria(providerDto, c);
        setup2ndAddressVancouver(providerDto, c);

        PrsProviders provider2 = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);

        GrsRegistryIdentifiers provider1CpnRegId = getCPNRegIdentifier(provider1.getGrsRegistryIdentifiersList());
        GrsRegistryIdentifiers provider2CpnRegId = getCPNRegIdentifier(provider2.getGrsRegistryIdentifiersList());

        assertEquals(provider1CpnRegId.getProviderChid(), provider2CpnRegId.getProviderChid());
    }

    private void setupGenderUnknown(ProviderDto providerDto, Calendar c) {
        providerDto.getDemographicDetails().get(0).setGenderCode("U");
        providerDto.getDemographicDetails().get(0).setEffectiveStartDate(date);
        providerDto.getDemographicDetails().get(0).setEffectiveEndDate(c.getTime());
    }

    private void setupGenderFemale(ProviderDto providerDto, Calendar c) {
        providerDto.getDemographicDetails().get(0).setGenderCode("F");
        providerDto.getDemographicDetails().get(0).setEffectiveStartDate(date);
        providerDto.getDemographicDetails().get(0).setEffectiveEndDate(c.getTime());
    }

    private void setup1stAddressVictoria(ProviderDto providerDto, Calendar c) {
        providerDto.getAddresses().get(0).setCity("Victoria");
        providerDto.getAddresses().get(0).setProvinceOrStateTxt("BC");
        providerDto.getAddresses().get(0).setCountryCode("CA");
        providerDto.getAddresses().get(0).setTypeCode(addressType.getCtlNameCode());
        providerDto.getAddresses().get(0).setCommunicationPurposeCode("BC");
        providerDto.getAddresses().get(0).setEffectiveStartDate(date);
        providerDto.getAddresses().get(0).setAddressLineOne("some address");
        providerDto.getAddresses().get(0).setEffectiveEndDate(c.getTime());
    }

    private void setup2ndAddressVancouver(ProviderDto providerDto, Calendar c) {
        providerDto.getAddresses().get(1).setCity("Vancouver");
        providerDto.getAddresses().get(1).setProvinceOrStateTxt("BC");
        providerDto.getAddresses().get(1).setCountryCode("CA");
        providerDto.getAddresses().get(1).setTypeCode(addressType.getCtlNameCode());
        providerDto.getAddresses().get(1).setCommunicationPurposeCode("CC");
        providerDto.getAddresses().get(1).setEffectiveStartDate(date);
        providerDto.getAddresses().get(1).setAddressLineOne("some address");
        providerDto.getAddresses().get(1).setEffectiveEndDate(c.getTime());
    }

    private GrsRegistryIdentifiers getCPNRegIdentifier(List<GrsRegistryIdentifiers> grsRegistryIdentifiersList) {

        Iterator<GrsRegistryIdentifiers> itr = grsRegistryIdentifiersList.iterator();
        GrsRegistryIdentifiers cpnRegId = null;

        GrsRegistryIdentifiers temp;
        while (itr.hasNext()) {
            temp = itr.next();

            if (temp.getIdentifierTypeCode().equals(cpnType)) {
                cpnRegId = temp;
            }
        }

        return cpnRegId;
    }

    private void setupCREDName(ProviderDto providerDto, Calendar c, String firstName) {
        providerDto.getIndNames().get(0).setFirstName(firstName);
        providerDto.getIndNames().get(0).setLastName(LASTNAME_KUSH2);
        providerDto.getIndNames().get(0).setTypeCode("CRED");
        providerDto.getIndNames().get(0).setEffectiveStartDate(date);
        providerDto.getIndNames().get(0).setEffectiveEndDate(c.getTime());
    }

    private void setupCURRName(ProviderDto providerDto, Calendar c, String firstName) {
        providerDto.getIndNames().get(1).setFirstName(firstName);
        providerDto.getIndNames().get(1).setLastName(LASTNAME_KUSH);
        providerDto.getIndNames().get(1).setTypeCode("CURR");
        providerDto.getIndNames().get(1).setEffectiveStartDate(date);
        providerDto.getIndNames().get(1).setEffectiveEndDate(c.getTime());
    }

    private void setupCURRNameTest2(ProviderDto providerDto, Calendar c) {
        providerDto.getIndNames().get(1).setFirstName("Test2");
        providerDto.getIndNames().get(1).setLastName(LASTNAME_KUSH2);
        providerDto.getIndNames().get(1).setTypeCode("CURR");
        providerDto.getIndNames().get(1).setEffectiveStartDate(date);
        providerDto.getIndNames().get(1).setEffectiveEndDate(c.getTime());
    }

    private void setupCREDNameTest(ProviderDto providerDto, Calendar c) {
        providerDto.getIndNames().get(0).setFirstName("Test");
        providerDto.getIndNames().get(0).setLastName(LASTNAME_KUSH);
        providerDto.getIndNames().get(0).setTypeCode("CRED");
        providerDto.getIndNames().get(0).setEffectiveStartDate(date);
        providerDto.getIndNames().get(0).setEffectiveEndDate(c.getTime());
    }

    private static ProviderDto buildMinimiumProviderDto(PrsCtProviderRoleTypes prType, PrsCtIdentifierTypes idType, PrsCtStatusClassCodes classCode) {
        ProviderDto providerDto = createTestDto();
        Calendar c = Calendar.getInstance();
        c.add(Calendar.MONTH, 25);
        providerDto.setJurisdictionType(CodeTableCodes.PrsCtJurisdictions.BRITISH_COLUMBIA);
        providerDto.setPartyType(CodeTableCodes.GrsCtPartyType.IND);
        providerDto.setTypeId(prType.getCtlId());
        providerDto.getIdentifiers().get(0).setTypeId(idType.getCtlId());
        providerDto.getIdentifiers().get(0).setIdentifier(ID_VALUE);
        providerDto.getIdentifiers().get(0).setEffectiveStartDate(date);
        providerDto.getIdentifiers().get(0).setEffectiveEndDate(c.getTime());
        providerDto.getDemographicDetails().get(0).setBirthDate(date);
        providerDto.getDemographicDetails().get(0).setEffectiveStartDate(date);
        providerDto.getDemographicDetails().get(0).setEffectiveEndDate(c.getTime());
        providerDto.getStatuses().get(0).setClassCodeId(classCode.getCtlId());
        providerDto.getStatuses().get(0).setTypeId(statusCode.getCtlId());
        providerDto.getStatuses().get(0).setReasonCodeId(statusReasonCode.getCtlId());
        providerDto.getStatuses().get(0).setEffectiveStartDate(date);
        providerDto.getStatuses().get(0).setEffectiveEndDate(c.getTime());
        providerDto.getIndNames().get(0).setFirstName("David");
        providerDto.getIndNames().get(0).setLastName(LASTNAME_KUSH3);
        providerDto.getIndNames().get(0).setEffectiveStartDate(date);
        providerDto.getIndNames().get(0).setEffectiveEndDate(c.getTime());
        providerDto.getAddresses().get(0).setEffectiveStartDate(date);
        providerDto.getAddresses().get(0).setEffectiveEndDate(c.getTime());
        providerDto.getAddresses().get(0).setCountryCode("CA");
        providerDto.getAddresses().get(0).setProvinceOrStateTxt("BC");
        providerDto.getDemographicDetails().get(0).setGenderId(gender.getCtlId());
        providerDto.getAddresses().get(0).setTypeCode(addressType.getCtlNameCode());
        providerDto.getAddresses().get(0).setCommunicationPurposeCode("BC");

        return providerDto;
    }
    private static final String ID_VALUE = "randomID234kd0";

    private static ProviderDto buildMinimiumOrganizationProvider() {
        ProviderDto providerDto = new ProviderDto(true);

        providerDto.setJurisdictionType(CodeTableCodes.PrsCtJurisdictions.BRITISH_COLUMBIA);
        providerDto.setPartyType(CodeTableCodes.GrsCtPartyType.ORG);
        providerDto.setTypeId(nurse.getCtlId());
        providerDto.getIdentifiers().get(0).setTypeId(identifierType.getCtlId());
        providerDto.getIdentifiers().get(0).setIdentifier("david1");
        providerDto.getIdentifiers().get(0).setEffectiveStartDate(date);
        providerDto.getStatuses().get(0).setClassCodeId(assignedEntity.getCtlId());
        providerDto.getStatuses().get(0).setTypeId(statusCode.getCtlId());
        providerDto.getStatuses().get(0).setReasonCodeId(statusReasonCode.getCtlId());
        providerDto.getStatuses().get(0).setEffectiveStartDate(date);
        providerDto.getOrgNames().get(0).setName("short name");
        providerDto.getOrgNames().get(0).setEffectiveStartDate(date);
        providerDto.getAddresses().get(0).setEffectiveStartDate(date);
        providerDto.getAddresses().get(0).setTypeCode(addressType.getCtlNameCode());
        providerDto.getAddresses().get(0).setCommunicationPurposeCode("BC");
        providerDto.getAddresses().get(0).setCity("Victoria");
        providerDto.getDemographicDetails().get(0).setGenderId(gender.getCtlId());
        providerDto.getDemographicDetails().get(0).setBirthDate(date);
        return providerDto;
    }

    private void setup2ndAddressVictoria(ProviderDto providerDto, Calendar c) {
        providerDto.getAddresses().get(1).setCity("Victoria");
        providerDto.getAddresses().get(1).setProvinceOrStateTxt("BC");
        providerDto.getAddresses().get(1).setCountryCode("CA");
        providerDto.getAddresses().get(1).setTypeCode(addressType.getCtlNameCode());
        providerDto.getAddresses().get(1).setCommunicationPurposeCode("CC");
        providerDto.getAddresses().get(1).setEffectiveStartDate(date);
        providerDto.getAddresses().get(1).setAddressLineOne("some address");
        providerDto.getAddresses().get(1).setEffectiveEndDate(c.getTime());
    }

    private void setup2ndAddress(ProviderDto providerDto, Calendar c, String s) {
        providerDto.getAddresses().get(1).setCity(s);
        providerDto.getAddresses().get(1).setProvinceOrStateTxt("BC");
        providerDto.getAddresses().get(1).setCountryCode("CA");
        providerDto.getAddresses().get(1).setTypeCode(addressType.getCtlNameCode());
        providerDto.getAddresses().get(1).setCommunicationPurposeCode("CC");
        providerDto.getAddresses().get(1).setEffectiveStartDate(date);
        providerDto.getAddresses().get(1).setAddressLineOne("some address");
        providerDto.getAddresses().get(1).setEffectiveEndDate(c.getTime());
    }

    private void setup1stAddressVancouver(ProviderDto providerDto, Calendar c) {
        providerDto.getAddresses().get(0).setCity("Vancouver");
        providerDto.getAddresses().get(0).setProvinceOrStateTxt("BC");
        providerDto.getAddresses().get(0).setCountryCode("CA");
        providerDto.getAddresses().get(0).setTypeCode(addressType.getCtlNameCode());
        providerDto.getAddresses().get(0).setCommunicationPurposeCode("BC");
        providerDto.getAddresses().get(0).setEffectiveStartDate(date);
        providerDto.getAddresses().get(0).setAddressLineOne("some address");
        providerDto.getAddresses().get(0).setEffectiveEndDate(c.getTime());
    }

    private void setup1stAddress(ProviderDto providerDto, Calendar c, String s) {
        providerDto.getAddresses().get(0).setProvinceOrStateTxt("BC");
        providerDto.getAddresses().get(0).setCountryCode("CA");
        providerDto.getAddresses().get(0).setCity(s);
        providerDto.getAddresses().get(0).setTypeCode(addressType.getCtlNameCode());
        providerDto.getAddresses().get(0).setCommunicationPurposeCode("BC");
        providerDto.getAddresses().get(0).setEffectiveStartDate(date);
        providerDto.getAddresses().get(0).setAddressLineOne("some address");
        providerDto.getAddresses().get(0).setEffectiveEndDate(c.getTime());
    }

    public static ProviderDto createTestDto() {

        ProviderDto dto = new ProviderDto();
        dto.getDemographicDetails().add(new DemographicDetailsDto());
        dto.getIdentifiers().add(new CollegeIdentifierDto());

        dto.getStatuses().add(new StatusDto());

        // cred and current
        dto.getIndNames().add(new PersonNameDto());
        dto.getIndNames().add(new PersonNameDto());
        dto.getOrgNames().add(new OrgNameDto());

        // two types of addresses
        dto.getAddresses().add(new AddressDto());
        dto.getAddresses().add(new AddressDto());
        dto.getElectronicAddresses().add(new ElectronicAddressDto());

        // For Phone
        dto.getTelecommunication().add(new TelecommunicationDto());
        //For Fax
        dto.getTelecommunication().add(new TelecommunicationDto());

        return dto;
    }

}
