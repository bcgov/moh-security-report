/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.remote;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.BatchRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.provider.esb.JurisdictionNameCodeDto;
import ca.bc.gov.health.plr.dto.provider.esb.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import static ca.bc.gov.health.plr.remote.MaintainProviderEsbTestBuilder.addIdentifier;
import static ca.bc.gov.health.plr.remote.MaintainProviderEsbTestBuilder.clearOrgNames;
import ca.bc.gov.health.plr.util.DateUtils;
import ca.bc.gov.health.plr.util.MessageCodeHelper;
import ca.bc.gov.health.plr.util.SpoofedUserHelper;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import static org.hamcrest.CoreMatchers.equalTo;
import org.hamcrest.collection.IsCollectionWithSize;
import static org.junit.Assert.assertThat;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 *
 * @author jonathan.wiebe
 */
public class MaintainProviderEsbService_Orgs_Test extends MaintainProviderEsbTestBuilder {

    @BeforeClass
    public static void setUp() {
        SpoofedUserHelper.currentUser = null;
        mainRequest = new MaintainProviderRequest();
        mainRequest.setRegistryUserOrgId("plr-reg-admin");
        mainRequest.setProviderDetails(new ProviderDetails());
        mainRequest.getProviderDetails().setProviderType("ORG");
        mainRequest.getProviderDetails().setType("DEN");
        mainRequest.getProviderDetails().setJurisdiction(new JurisdictionNameCodeDto());
        mainRequest.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");
        addIdentifier(mainRequest);
        batchRequest = new BatchRequest();
        Collection<MaintainProviderRequest> requests = new HashSet<>();
        requests.add(mainRequest);
        batchRequest.setMaintainProviderRequests(requests);
        batchRequest.setUniqueMessageId(new BigInteger(130, new SecureRandom()).toString(32));
        batchRequest.setSourceRegistryUserId("0005555");
        Calendar CURR_DATE = Calendar.getInstance();
        DateUtils.truncateTime(CURR_DATE);
        EFF_START_DATE = CURR_DATE.getTime();
    }

    @Before
    public void setUpMethods() {
        mainRequest.setRegistryUserOrgId("plr-reg-admin");
        mainRequest.getProviderDetails().setType("ORG");
        mainRequest.getProviderDetails().setProviderType("ORG");
        if (!mainRequest.getProviderDetails().getIdentifiers().isEmpty()) {
            mainRequest.getProviderDetails().getIdentifiers().get(0).setEndReasonCode(null);
        }
        clearEntities();
        
        PAUTH_ID=3499l;
        IDENTIFIER = "corwyJKLNTUZ";
        ID_TYPE_CODE = "ORGID";
 
    }

    @Test //REQ-00962
    public void testCeaseLastActiveOrgName() throws ParseException {
        testAddOrgName();
        clearChildren();
        addIdentifier(mainRequest);
        mainRequest.setRegistryUserOrgId("plr-restricted");
        OrgNameDto dto = getOrgNameDto();
        dto.setEndReasonCode("CEASE");
        mainRequest.getProviderDetails().getOrgNames().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        boolean lastActiveError = false;
        for (Acknowledgment ack : acknowledgments) {
            if (BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_LAST_ACTIVE_ORG_NAME_CEASED_PERMISSION).contains(ack.getMsgText())) {
                lastActiveError = true;
            }
        }
        assertTrue(lastActiveError);
    }

    @Test
    public void testAddOrgName() {
        clearChildren();
        clearOrgNames();
        OrgNameDto nameDto = getOrgNameDto();
        mainRequest.getProviderDetails().getOrgNames().add(nameDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.OrgNameDto> list = maintainOrgNameService.getNames(getRefreshOrgDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testAddOrgName_RejectDataBlock() {
        testAddOrgName();
        clearChildren();
        OrgNameDto nameDto = getOrgNameDto();
        mainRequest.getProviderDetails().getOrgNames().add(nameDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.OrgNameDto> list = maintainOrgNameService.getNames(getRefreshOrgDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testCeaseOrgName() {
        testCorrectOrgName();
        clearChildren();
        OrgNameDto nameDto = getOrgNameDto();
        nameDto.setEndReasonCode("CEASE");
        mainRequest.getProviderDetails().getOrgNames().add(nameDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.OrgNameDto> list = maintainOrgNameService.getNames(getRefreshOrgDto());
        assertThat(list, IsCollectionWithSize.hasSize(5));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testChangeOrgName() {

        testAddOrgName();
        clearChildren();

        OrgNameDto nameDto = getOrgNameDto();
        nameDto.setEndReasonCode("CHG");
        nameDto.setLongName(getRandom());
        mainRequest.getProviderDetails().getOrgNames().add(nameDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.OrgNameDto> list = maintainOrgNameService.getNames(getRefreshOrgDto());
        assertThat(list, IsCollectionWithSize.hasSize(3));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testCorrectOrgName() {
        testChangeOrgName();
        clearChildren();
        OrgNameDto nameDto = getOrgNameDto();
        nameDto.setEndReasonCode("CORR");
        nameDto.setName(getRandom());
        mainRequest.getProviderDetails().getOrgNames().add(nameDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.OrgNameDto> list = maintainOrgNameService.getNames(getRefreshOrgDto());
        assertThat(list, IsCollectionWithSize.hasSize(4));
    }

}
