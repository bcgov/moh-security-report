package ca.bc.gov.health.plr.rule.provider;

import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class AcceptableAnyFieldValidatorTest {

    @Test
    public void test_validIdentifier() {
        MockDto mockAnyField = new MockDto();
        String someField = " &',-./3:@A[\\]^_`a)(";
        mockAnyField.someField = someField;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockDto>> violations = validator.validate(mockAnyField);
        assertEquals(0, violations.size());
    }


    @Test
    public void test_invalidIdentifier() {
        MockDto mockAnyField = new MockDto();
        String someField = "Exclamation point is not valid!";
        mockAnyField.someField = someField;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockDto>> violations = validator.validate(mockAnyField);
        assertEquals(1, violations.size());
        assertEquals(someField, violations.iterator().next().getInvalidValue());
    }

    private static class MockDto {
        @AcceptableAnyField( message = "{error.anyfield.invalidcharacters.part1of2} 'Some Field' {error.anyfield.invalidcharacters.part2of2}")
        String someField;
    }

}
