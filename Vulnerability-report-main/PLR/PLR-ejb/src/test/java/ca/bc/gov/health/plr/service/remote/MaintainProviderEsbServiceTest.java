/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.remote;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import org.junit.Test;
import static org.junit.Assert.*;
import org.mockito.Mockito;
import static org.mockito.Mockito.mock;

/**
 *
 * @author jonathan.wiebe
 */
public class MaintainProviderEsbServiceTest {

    public MaintainProviderEsbServiceTest() {
    }

    @Test
    public void testpopulateGeneralErrorInResponse_empty() throws Exception {
        MaintainProviderEsbService service = new MaintainProviderEsbService();
        Method m = service.getClass().getDeclaredMethod("populateGeneralErrorInResponse", MaintainProviderResponse.class);
        m.setAccessible(true);
        MaintainProviderResponse response = new MaintainProviderResponse();
        m.invoke(service, response);
        assertTrue(response.getAcknowledgments().size() == 1);
    }

    @Test
    public void testpopulateGeneralErrorInResponse_Notempty() throws Exception {

        MaintainProviderEsbService service = new MaintainProviderEsbService();
        Method m = service.getClass().getDeclaredMethod("populateGeneralErrorInResponse", MaintainProviderResponse.class);
        m.setAccessible(true);
        MaintainProviderResponse response = new MaintainProviderResponse();
        Collection<Acknowledgment> collectionAcks = response.getAcknowledgments();
        Acknowledgment ack = new Acknowledgment();
        ack.setMsgCode(CODE);
        ack.setMsgText(TEXT);
        collectionAcks.add(ack);

        m.invoke(service, response);
        assertTrue(response.getAcknowledgments().size() == 2);
        Iterator<Acknowledgment> it = response.getAcknowledgments().iterator();
        assertTrue("Transaction has failed.".equals(it.next().getMsgText()));
        assertTrue(TEXT.equals(it.next().getMsgText()));
    }

    @Test
    public void test_ContainsOnlyChangeNoChange() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        MaintainProviderEsbService service = new MaintainProviderEsbService() {
            @Override
            protected String getChangeNoChangeCode() {
                return CODE;
            }
        ;
        };
   
        Collection<Acknowledgment> collectionAcks = new ArrayList<>();
        {
            Acknowledgment ack = new Acknowledgment();
            ack.setMsgCode(CODE);
            ack.setMsgText(TEXT);
            collectionAcks.add(ack);
        }

        // simply case true
        assertTrue(service.containsOnlyChangeNoChange(collectionAcks));

        // add not true case
        {
            Acknowledgment ack = new Acknowledgment();
            ack.setMsgCode(CODE + CODE);
            ack.setMsgText(TEXT);
            collectionAcks.add(ack);
        }
        assertFalse(service.containsOnlyChangeNoChange(collectionAcks));
    }

    private static final String TEXT = "TEXT";
    private static final String CODE = "CODE";
}
