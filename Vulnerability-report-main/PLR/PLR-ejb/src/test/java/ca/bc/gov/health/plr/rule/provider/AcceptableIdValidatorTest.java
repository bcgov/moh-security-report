/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.rule.provider;

import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import static org.junit.Assert.assertEquals;
import org.junit.Test;

/**
 *
 * @author sumesh.kariyil
 */
public class AcceptableIdValidatorTest {

    @Test(expected = RuntimeException.class)
    public void test_inValidPattern() {
        MockNoPatternDto id = new MockNoPatternDto();
        id.someField = "ABCD1234";
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockNoPatternDto>> violations = validator.validate(id);
    }

    @Test
    public void test_invalidId() {
        MockDto id = new MockDto();
        String id1 = "A b c d";
        id.someField = id1;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockDto>> violations = validator.validate(id);
        assertEquals(1, violations.size());
        assertEquals(id1, violations.iterator().next().getInvalidValue());
    }
    
    @Test
    public void test_validAccentId() {
        MockDto id = new MockDto();
        String id1 = "ÁÉÍÓÚÝÀÈÌÒÚÂÊÔÛÄËÏÖÜÇ";
        id.someField = id1;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockDto>> violations = validator.validate(id);
        assertEquals(0, violations.size());
    }
    
    @Test
    public void test_validId() {
        MockDto id = new MockDto();
        String id1 = "ABCD123..4";
        id.someField = id1;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockDto>> violations = validator.validate(id);
        assertEquals(0, violations.size());
    }

    private static class MockDto {

        @AcceptableId(pattern = "[a-zA-Z0-9\\.]+")
        String someField;
    }

    private static class MockNoPatternDto {

        @AcceptableId
        String someField;
    }
}
