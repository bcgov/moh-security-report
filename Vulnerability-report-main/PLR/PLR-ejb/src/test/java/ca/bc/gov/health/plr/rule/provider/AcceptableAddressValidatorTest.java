package ca.bc.gov.health.plr.rule.provider;

import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class AcceptableAddressValidatorTest {

    @Test
    public void test_validAddressLine1() {
        MockDto address = new MockDto();
        String address1 = "55 / 999 Bag End #():,Hobbit-hole Th'& Shire.";
        address.someField = address1;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockDto>> violations = validator.validate(address);
        assertEquals(0, violations.size());
    }

    @Test
    public void test_invalidAddressLine1() {
        MockDto address = new MockDto();
        String address1 = "Exclamation point is not valid!";
        address.someField = address1;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockDto>> violations = validator.validate(address);
        assertEquals(0, violations.size());
    }

    @Test
    public void test_Ampersand() {
        MockDto address = new MockDto();
        String address1 = "Ampersand is OK&";
        address.someField = address1;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockDto>> violations = validator.validate(address);
        assertEquals(0, violations.size());
    }

    private static class MockDto {
        @AcceptableAddress
        String someField;
    }

}
