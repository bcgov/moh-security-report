/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.remote;

import ca.bc.gov.health.plr.dto.converter.ConditionDtoConverter;
import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.JurisdictionNameCodeDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodeTableCodes.GrsCtPartyType;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.service.remote.ProviderMessageValidator;
import java.lang.reflect.Field;
import java.util.ArrayList;
import org.junit.Assert;
import org.junit.Test;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *
 * @author sumesh.kariyil
 */
public class ProviderMessageValidatorTest {

    @Test
    public void testEmptyRequestForMinimumData() {
        MaintainProviderRequest request = new MaintainProviderRequest();
        MaintainProviderResponse response = new MaintainProviderResponse();
        request.setProviderDetails(new ProviderDetails());
        ProviderMessageValidator providerMessageValidator = new ProviderMessageValidator();
        providerMessageValidator.validateMinimumData(request, response);
        Assert.assertTrue(!response.getAcknowledgments().isEmpty());
    }

    @Test
    public void testEmptyRequestForAdd_Ind() throws Exception {

        CodesDao codesDao = mock(CodesDao.class);
        ProviderMessageValidator providerMessageValidator = new ProviderMessageValidator();
        populateInstanceMember("codesDao", codesDao, providerMessageValidator);
        PrsCtProviderRoleTypes prsCtProviderRoleTypes = new PrsCtProviderRoleTypes();
        when(codesDao.lookup(GrsCtPartyType.class, CodeTableCodes.GrsCtPartyType.IND)).thenReturn(CodeTableCodes.GrsCtPartyType.IND);
        when(codesDao.lookup(GrsCtPartyType.class, CodeTableCodes.GrsCtPartyType.ORG)).thenReturn(CodeTableCodes.GrsCtPartyType.ORG);
        when(codesDao.lookup(PrsCtProviderRoleTypes.class, "MD")).thenReturn(prsCtProviderRoleTypes);

        MaintainProviderRequest request = new MaintainProviderRequest();
        MaintainProviderResponse response = new MaintainProviderResponse();
        request.setProviderDetails(new ProviderDetails());
        request.getProviderDetails().setProviderType("IND");
        request.getProviderDetails().setType("MD");
        request.getProviderDetails().setJurisdiction(new JurisdictionNameCodeDto() {
            {
                setJurisdicationNameCode("BC");
            }
        });
        request.getProviderDetails().setIdentifiers(new ArrayList() {
            {
                add(new CollegeIdentifierDto() {
                    {
                        setTypeCode("CPSID");
                    }
                });
            }
        });

        providerMessageValidator.validateMinimumData(request, response);
        Assert.assertTrue(response.getAcknowledgments().isEmpty());
        if (response.getAcknowledgments().isEmpty()) {
            providerMessageValidator.validateAdd(request, response);
        }
        Assert.assertTrue(!response.getAcknowledgments().isEmpty());
        
        // yes demographics for IND
        boolean foundDemo = false;
        for(Acknowledgment ack: response.getAcknowledgments()) {
            if(ack.getMsgText().matches(".*Demo.*")) {
                foundDemo = true;
            }
        }
        Assert.assertFalse(!foundDemo);
    }

    @Test
    public void testEmptyRequestForAdd_Org() throws Exception {

        CodesDao codesDao = mock(CodesDao.class);
        ProviderMessageValidator providerMessageValidator = new ProviderMessageValidator();
        populateInstanceMember("codesDao", codesDao, providerMessageValidator);
        PrsCtProviderRoleTypes prsCtProviderRoleTypes = new PrsCtProviderRoleTypes();
        when(codesDao.lookup(GrsCtPartyType.class, CodeTableCodes.GrsCtPartyType.IND)).thenReturn(CodeTableCodes.GrsCtPartyType.IND);
        when(codesDao.lookup(GrsCtPartyType.class, CodeTableCodes.GrsCtPartyType.ORG)).thenReturn(CodeTableCodes.GrsCtPartyType.ORG);
        when(codesDao.lookup(PrsCtProviderRoleTypes.class, "MD")).thenReturn(prsCtProviderRoleTypes);

        MaintainProviderRequest request = new MaintainProviderRequest();
        MaintainProviderResponse response = new MaintainProviderResponse();
        request.setProviderDetails(new ProviderDetails());
        request.getProviderDetails().setProviderType("ORG");
        request.getProviderDetails().setType("MD");
        request.getProviderDetails().setJurisdiction(new JurisdictionNameCodeDto() {
            {
                setJurisdicationNameCode("BC");
            }
        });
        request.getProviderDetails().setIdentifiers(new ArrayList() {
            {
                add(new CollegeIdentifierDto() {
                    {
                        setTypeCode("CPSID");
                    }
                });
            }
        });

        providerMessageValidator.validateMinimumData(request, response);
        Assert.assertTrue(response.getAcknowledgments().isEmpty());
        if (response.getAcknowledgments().isEmpty()) {
            providerMessageValidator.validateAdd(request, response);
        }
        Assert.assertTrue(!response.getAcknowledgments().isEmpty());
        
        // no demographics for ORG
        boolean foundDemo = false;
        for(Acknowledgment ack: response.getAcknowledgments()) {
            if(ack.getMsgText().matches(".*Demo.*")) {
                foundDemo = true;
            }
        }
        Assert.assertFalse(foundDemo);
    }
    private void populateInstanceMember(String fieldName, Object value, Object target) throws Exception {

        Field field = ProviderMessageValidator.class.getDeclaredField(fieldName);
        field.setAccessible(true);

        if (value instanceof CodesDao) {
            field.set(target, (CodesDao) value);
        }
    }
}
