/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service;

import ca.bc.gov.health.plr.dto.AddressSuggestion;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.PrsCtAddressValidTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.persistence.ConfigurationDao;
import ca.bc.gov.health.plr.service.provider.AddressSupportService;
import ca.bc.gov.health.plr.service.provider.MaintainAddressService;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.Address;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.ArrayOfResult;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.ArrayOfResultData;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.ArrayOfString;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.Response;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.Result;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.ResultData;
import ca.bc.gov.health.plr.util.CodeDaoMocks;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import static org.mockito.Matchers.anyObject;
import static org.mockito.Matchers.isA;
import org.mockito.Mockito;
import static org.mockito.Mockito.doReturn;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.spy;
import static org.mockito.Mockito.when;

/**
 *
 * @author tim.osse
 */
public class AddressDoctorServiceTest {

    private AddressDoctorService addressDoctorService;

    @Before
    public void setUp() {
    }

    @Test
    public void testSuggestedAddressesNoResults() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorService addSrv = new AddressDoctorService() {
            @Override
            protected List<AddressSuggestion> autoComplete(String criteria, String countryInput) {
                // override the auto complete to return empty list
                return new ArrayList<AddressSuggestion>();
            }
        };
        AddressSupportService mockSupport = setupAddressSupportMock(addSrv);

        assertTrue(addSrv.suggestAddresses("foo").isEmpty());
    }

    @Test
    public void testSuggestedAddressesNullResults() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorService addSrv = new AddressDoctorService() {
            @Override
            protected List<AddressSuggestion> autoComplete(String criteria, String countryInput) throws AddressDoctorUnavailableException {
                // override to throw the exception
                throw new AddressDoctorUnavailableException();
            }
        };
        AddressSupportService mockSupport = setupAddressSupportMock(addSrv);

        assertTrue(addSrv.suggestAddresses("foo") == null);
    }

    /**
     * check that we get out what we put in
     */
    @Test
    public void testAutocomplete_ValidSuggestion() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorService addSrv = new AddressDoctorService();
        AddressDoctorService addSrvSpy = spy(addSrv);
        AddressSupportService mockSupport = setupAddressSupportMock(addSrvSpy);
        AddressDoctorConnectionService mockConnSrv = setupAddressConnectionServiceMock(addSrvSpy);
        ConfigurationDao mockDao = setupConfigDaoMock(addSrvSpy, AddressDoctorService.BATCH, 4);
        List<AddressSuggestion> suggestions = null;
        Response response = setupAddressDoctorResults(AddressDoctorService.Q3_ADDRESS_DOCTOR_PROCESS_STATUS, "5");
        try {
            when(mockConnSrv.callAddressDoctor(anyObject(), anyObject())).thenReturn(response);
            doReturn(true).when(addSrvSpy).isValidAddress(isA(GrsAddresses.class));
            suggestions = addSrvSpy.suggestAddresses("foo");
        } catch (AddressDoctorUnavailableException ex) {
            assertTrue(false);
        }
        assertNotNull(suggestions);
        assertTrue(suggestions.size() == 1);
        assertNotNull(suggestions.get(0).getCity());
        assertTrue(suggestions.get(0).getCity().equals(response.getResults().getResult().get(0).getResultDataSet().getResultData().get(0).getAddress().getLocality().getString().get(0)));
        assertNotNull(suggestions.get(0).getPostalCode());
        assertTrue(suggestions.get(0).getPostalCode().equals(response.getResults().getResult().get(0).getResultDataSet().getResultData().get(0).getAddress().getPostalCode().getString().get(0)));
        assertNotNull(suggestions.get(0).getAddressLine1());
        assertTrue(suggestions.get(0).getAddressLine1().equals(response.getResults().getResult().get(0).getResultDataSet().getResultData().get(0).getAddress().getDeliveryAddressLines().getString().get(0)));
        assertNotNull(suggestions.get(0).getCountry());
        assertTrue(suggestions.get(0).getCountry().equals(response.getResults().getResult().get(0).getResultDataSet().getResultData().get(0).getAddress().getCountry().getString().get(0)));
    }

    /**
     * check that we get out what we put in
     */
    @Test
    public void testAutocomplete_InValidSuggestion() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorService addSrv = new AddressDoctorService();
        AddressDoctorService addSrvSpy = spy(addSrv);
        AddressSupportService mockSupport = setupAddressSupportMock(addSrvSpy);
        AddressDoctorConnectionService mockConnSrv = setupAddressConnectionServiceMock(addSrvSpy);
        ConfigurationDao mockDao = setupConfigDaoMock(addSrvSpy, AddressDoctorService.BATCH, 4);
        List<AddressSuggestion> suggestions = null;
        Response response = setupAddressDoctorResults(AddressDoctorService.Q3_ADDRESS_DOCTOR_PROCESS_STATUS, "5");
        try {
            when(mockConnSrv.callAddressDoctor(anyObject(), anyObject())).thenReturn(response);
            doReturn(false).when(addSrvSpy).isValidAddress(isA(GrsAddresses.class));
            suggestions = addSrvSpy.suggestAddresses("foo");
        } catch (AddressDoctorUnavailableException ex) {
            assertTrue(false);
        }
        assertNotNull(suggestions);
        assertTrue(suggestions.size() == 0);
    }

    /**
     * If address doctor classes throw the unavailable exception then the
     * suggestion list should be null indicating unavailable
     */
    @Test
    public void testAutocomplete_Exception() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorService addSrv = new AddressDoctorService();
        AddressSupportService mockSupport = setupAddressSupportMock(addSrv);
        AddressDoctorConnectionService mockConnSrv = setupAddressConnectionServiceMock(addSrv);
        List<AddressSuggestion> suggestions = null;
        Response response = setupAddressDoctorResults(AddressDoctorService.Q3_ADDRESS_DOCTOR_PROCESS_STATUS, "1");
        try {
            when(mockConnSrv.callAddressDoctor(anyObject(), anyObject())).thenThrow(new AddressDoctorUnavailableException());
            suggestions = addSrv.suggestAddresses("foo");
        } catch (AddressDoctorUnavailableException ex) {
            assertTrue(false);
        }
        assertTrue(suggestions == null);
    }

    /**
     * If address doctor doesn't response with Q# process status then suggestion
     * list is empty
     */
    @Test
    public void testAutocomplete_Not_Q3() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorService addSrv = new AddressDoctorService();
        AddressSupportService mockSupport = setupAddressSupportMock(addSrv);
        AddressDoctorConnectionService mockConnSrv = setupAddressConnectionServiceMock(addSrv);
        ConfigurationDao mockDao = setupConfigDaoMock(addSrv, AddressDoctorService.BATCH, 4);
        List<AddressSuggestion> suggestions = null;
        Response response = setupAddressDoctorResults("Garbage", "1");
        try {
            when(mockConnSrv.callAddressDoctor(anyObject(), anyObject())).thenReturn(response);
            suggestions = addSrv.suggestAddresses("foo");
        } catch (AddressDoctorUnavailableException ex) {
            assertTrue(false);
        }
        assertTrue(suggestions.isEmpty());
    }

    /**
     * if address doctor classes end up with null results, assume unavailable
     * and suggestion list is null
     */
    @Test
    public void testAutocomplete_NullResults() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorService addSrv = new AddressDoctorService();
        AddressSupportService mockSupport = setupAddressSupportMock(addSrv);
        AddressDoctorConnectionService mockConnSrv = setupAddressConnectionServiceMock(addSrv);
        List<AddressSuggestion> suggestions = null;

        try {
            when(mockConnSrv.callAddressDoctor(anyObject(), anyObject())).thenReturn(null);
            addSrv.suggestAddresses("foo");
        } catch (AddressDoctorUnavailableException ex) {
            assertTrue(false);
        }
        assertTrue(suggestions == null);
    }

    @Test
    public void testisValidAddress() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorService addSrv = new AddressDoctorService();
        AddressSupportService mockSupport = setupAddressSupportMock(addSrv);
        AddressDoctorConnectionService mockConnSrv = setupAddressConnectionServiceMock(addSrv);
        ConfigurationDao mockDao = setupConfigDaoMock(addSrv, AddressDoctorService.BATCH, 4);
        Response response = setupAddressDoctorResults(AddressDoctorService.V5_ADDRESS_DOCTOR_PROCESS_STATUS, "5");
        AddressDto address = setupAddress();
        boolean isValid = false;
        try {
            when(mockConnSrv.callAddressDoctor(anyObject(), anyObject())).thenReturn(response);
            isValid = addSrv.isValidAddress(address);
        } catch (AddressDoctorUnavailableException ex) {
            assertTrue(false);
        }
        assertTrue(isValid);
    }

    @Test
    public void testisValidAddress_NotValid_I() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorService addSrv = new AddressDoctorService();
        AddressSupportService mockSupport = setupAddressSupportMock(addSrv);
        AddressDoctorConnectionService mockConnSrv = setupAddressConnectionServiceMock(addSrv);
        ConfigurationDao mockDao = setupConfigDaoMock(addSrv, AddressDoctorService.BATCH, 4);
        Response response = setupAddressDoctorResults(AddressDoctorService.I4_ADDRESS_DOCTOR_PROCESS_STATUS, "0");
        AddressDto address = setupAddress();
        boolean isValid = false;
        try {
            when(mockConnSrv.callAddressDoctor(anyObject(), anyObject())).thenReturn(response);
            isValid = addSrv.isValidAddress(address);
        } catch (AddressDoctorUnavailableException ex) {
            assertTrue(false);
        }
        assertFalse(isValid);
    }

    @Test
    public void testisValidAddress_Exception() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorService addSrv = new AddressDoctorService();
        AddressSupportService mockSupport = setupAddressSupportMock(addSrv);
        AddressDoctorConnectionService mockConnSrv = setupAddressConnectionServiceMock(addSrv);
        ConfigurationDao mockDao = setupConfigDaoMock(addSrv, AddressDoctorService.BATCH, 4);
        Response response = setupAddressDoctorResults(AddressDoctorService.I4_ADDRESS_DOCTOR_PROCESS_STATUS, "0");
        AddressDto address = setupAddress();
        boolean isValid = false;
        try {
            when(mockConnSrv.callAddressDoctor(anyObject(), anyObject())).thenThrow(new AddressDoctorUnavailableException());
            isValid = addSrv.isValidAddress(address);
            assertFalse(true);
        } catch (AddressDoctorUnavailableException ex) {
            assertTrue(true);
        }
    }
   
    PrsCtAddressValidTypes N = new PrsCtAddressValidTypes() {
        {
            this.setCtlNameCode("N");
        }
    };

    PrsCtAddressValidTypes V = new PrsCtAddressValidTypes() {
        {
            this.setCtlNameCode("V");
        }
    };
    PrsCtAddressValidTypes U = new PrsCtAddressValidTypes() {
        {
            this.setCtlNameCode("U");
        }
    };
    PrsCtAddressValidTypes I = new PrsCtAddressValidTypes() {
        {
            this.setCtlNameCode("I");
        }
    };

    @Test
    public void testisAddressValidWithCorrection_InvalidResponse() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorService addSrv = new AddressDoctorService();
        AddressSupportService mockSupport = setupAddressSupportMock(addSrv);
        AddressDoctorConnectionService mockConnSrv = setupAddressConnectionServiceMock(addSrv);
        CodesDao codesDao = mock(CodesDao.class);
        Field codesDaoField;
        codesDaoField = AddressDoctorService.class.getDeclaredField("codesDao");
        codesDaoField.setAccessible(true);
        codesDaoField.set(addSrv, codesDao);
        when(codesDao.lookup(PrsCtAddressValidTypes.class, "V")).thenReturn(V);
        when(codesDao.lookup(PrsCtAddressValidTypes.class, "I")).thenReturn(I);
        when(codesDao.lookup(PrsCtAddressValidTypes.class, "U")).thenReturn(U);
        when(codesDao.lookup(PrsCtAddressValidTypes.class, "N")).thenReturn(N);

        ConfigurationDao mockDao = setupConfigDaoMock(addSrv, AddressDoctorService.BATCH, 4);
        Response response = setupAddressDoctorResults(AddressDoctorService.I4_ADDRESS_DOCTOR_PROCESS_STATUS, "0");
        ca.bc.gov.health.plr.dto.provider.AddressDto address = setupAddressESB();
        GrsAddresses correction = new GrsAddresses();
        Boolean isValid = false;
        try {
            when(mockConnSrv.callAddressDoctor(anyObject(), anyObject())).thenReturn(response);
            isValid = addSrv.isAddressValidWithCorrection(address, correction);
            assertFalse(isValid);
        } catch (AddressDoctorUnavailableException ex) {
            assertTrue(false);
        }
    }

    @Test
    public void testisAddressValidWithCorrection_Correction_C4_4() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorService addSrv = new AddressDoctorService();
        AddressSupportService mockSupport = setupAddressSupportMock(addSrv);
        AddressDoctorConnectionService mockConnSrv = setupAddressConnectionServiceMock(addSrv);
        ConfigurationDao mockDao = setupConfigDaoMock(addSrv, AddressDoctorService.BATCH, 4);
        Response response = setupAddressDoctorResults(AddressDoctorService.C4_ADDRESS_DOCTOR_PROCESS_STATUS, "4");
        ca.bc.gov.health.plr.dto.provider.AddressDto address = setupAddressESB();
        GrsAddresses correction = new GrsAddresses();
        Boolean isValid = false;

        CodesDao codesDaoMock = mock(CodesDao.class);
        CodeDaoMocks.setupCodesDaoMocks(codesDaoMock);
        Field codesDaoField = AddressDoctorService.class.getDeclaredField("codesDao");
        codesDaoField.setAccessible(true);
        codesDaoField.set(addSrv, codesDaoMock);

        try {
            when(mockConnSrv.callAddressDoctor(anyObject(), anyObject())).thenReturn(response);
            isValid = addSrv.isAddressValidWithCorrection(address, correction);
            assertTrue(isValid);
            assertNotNull(correction);
            assertNotNull(correction.getAddressLine1Txt());
            assertNotNull(response);
            assertTrue(response.getResults().getResult().get(0).getResultDataSet().getResultData().get(0).getAddress().getDeliveryAddressLines().getString().get(0).equals(correction.getAddressLine1Txt()));
        } catch (AddressDoctorUnavailableException ex) {
            assertTrue(false);
        }
    }

    @Test
    public void testisAddressValidWithCorrection_Correction_C3_4() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorService addSrv = new AddressDoctorService();
        AddressSupportService mockSupport = setupAddressSupportMock(addSrv);
        AddressDoctorConnectionService mockConnSrv = setupAddressConnectionServiceMock(addSrv);
        ConfigurationDao mockDao = setupConfigDaoMock(addSrv, AddressDoctorService.BATCH, 4);
        Response response = setupAddressDoctorResults(AddressDoctorService.C3_ADDRESS_DOCTOR_PROCESS_STATUS, "4");
        ca.bc.gov.health.plr.dto.provider.AddressDto address = setupAddressESB();
        GrsAddresses correction = new GrsAddresses();
        Boolean isValid = false;

        CodesDao codesDaoMock = mock(CodesDao.class);
        CodeDaoMocks.setupCodesDaoMocks(codesDaoMock);
        Field codesDaoField = AddressDoctorService.class.getDeclaredField("codesDao");
        codesDaoField.setAccessible(true);
        codesDaoField.set(addSrv, codesDaoMock);

        try {
            when(mockConnSrv.callAddressDoctor(anyObject(), anyObject())).thenReturn(response);
            isValid = addSrv.isAddressValidWithCorrection(address, correction);
            assertTrue(isValid);
            assertNotNull(correction);
            assertNotNull(correction.getAddressLine1Txt());
            assertNotNull(response);
            assertTrue(response.getResults().getResult().get(0).getResultDataSet().getResultData().get(0).getAddress().getDeliveryAddressLines().getString().get(0).equals(correction.getAddressLine1Txt()));
        } catch (AddressDoctorUnavailableException ex) {
            assertTrue(false);
        }
    }

    @Test
    public void testisAddressValidWithCorrection_ValidResponse() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorService addSrv = new AddressDoctorService();
        AddressSupportService mockSupport = setupAddressSupportMock(addSrv);
        AddressDoctorConnectionService mockConnSrv = setupAddressConnectionServiceMock(addSrv);
        ConfigurationDao mockDao = setupConfigDaoMock(addSrv, AddressDoctorService.BATCH, 4);
        Response response = setupAddressDoctorResults(AddressDoctorService.V5_ADDRESS_DOCTOR_PROCESS_STATUS, "5");
        ca.bc.gov.health.plr.dto.provider.AddressDto address = setupAddressESB();

        CodesDao codesDaoMock = mock(CodesDao.class);
        CodeDaoMocks.setupCodesDaoMocks(codesDaoMock);
        Field codesDaoField = AddressDoctorService.class.getDeclaredField("codesDao");
        codesDaoField.setAccessible(true);
        codesDaoField.set(addSrv, codesDaoMock);

        GrsAddresses correction = new GrsAddresses();
        Boolean isValid = false;
        try {
            when(mockConnSrv.callAddressDoctor(anyObject(), anyObject())).thenReturn(response);
            isValid = addSrv.isAddressValidWithCorrection(address, correction);
            assertTrue(isValid);
        } catch (AddressDoctorUnavailableException ex) {
            assertTrue(false);
        }
    }

    @Test
    public void testisAddressValidWithCorrection_Exception() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorService addSrv = new AddressDoctorService();
        AddressSupportService mockSupport = setupAddressSupportMock(addSrv);
        AddressDoctorConnectionService mockConnSrv = setupAddressConnectionServiceMock(addSrv);
        ConfigurationDao mockDao = setupConfigDaoMock(addSrv, AddressDoctorService.BATCH, 4);
        Response response = setupAddressDoctorResults(AddressDoctorService.V5_ADDRESS_DOCTOR_PROCESS_STATUS, "5");
        ca.bc.gov.health.plr.dto.provider.AddressDto address = setupAddressESB();

        CodesDao codesDaoMock = mock(CodesDao.class);
        CodeDaoMocks.setupCodesDaoMocks(codesDaoMock);
        Field codesDaoField = AddressDoctorService.class.getDeclaredField("codesDao");
        codesDaoField.setAccessible(true);
        codesDaoField.set(addSrv, codesDaoMock);

        GrsAddresses correction = new GrsAddresses();
        Boolean isValid = false;
        try {
            when(mockConnSrv.callAddressDoctor(anyObject(), anyObject())).thenThrow(new AddressDoctorUnavailableException());
            isValid = addSrv.isAddressValidWithCorrection(address, correction);
            assertTrue(false);
        } catch (AddressDoctorUnavailableException ex) {
            assertTrue(true);
        }
    }

    private AddressDto setupAddress() {
        AddressDto address = new AddressDto();
        address.setAddressLineOne("Nonsense");
        address.setCity("who cares");
        address.setCountry("CANADA");
        address.setPostalCode("someP");
        address.setProvinceOrStateTxt("yeah yeah");
        return address;
    }

    private ca.bc.gov.health.plr.dto.provider.AddressDto setupAddressESB() {
        ca.bc.gov.health.plr.dto.provider.AddressDto address = new ca.bc.gov.health.plr.dto.provider.AddressDto();
        address.setAddressLineOne("Nonsense");
        address.setCity("who cares");
        address.setCountry("CANADA");
        address.setPostalCode("someP");
        address.setProvinceOrStateTxt("yeah yeah");
        return address;
    }

    private ConfigurationDao setupConfigDaoMock(AddressDoctorService addressDocService, String processingMode, int mailAbility) throws NoSuchFieldException, IllegalAccessException, IllegalArgumentException, SecurityException {
        ConfigurationDao mockDao = mock(ConfigurationDao.class);
        when(mockDao.getADFastCompleteProcessStatus()).thenReturn(new ArrayList<String>() {{this.add("Q3"); }});
        when(mockDao.getADDownEmailNotificationBody()).thenReturn("foo");
        when(mockDao.getADDownEmailNotificationSubject()).thenReturn("foo");
        when(mockDao.getADEmailNotificationBCCRecipients()).thenReturn(new ArrayList<String>());
        when(mockDao.getADEmailNotificationCCRecipients()).thenReturn(new ArrayList<String>());
        when(mockDao.getADEmailNotificationFrom()).thenReturn("foo");
        when(mockDao.getADEmailNotificationRecipients()).thenReturn(new ArrayList<String>());
        when(mockDao.getADUpEmailNotificationBody()).thenReturn("foo");
        when(mockDao.getADUpEmailNotificationSubject()).thenReturn("foo");
        when(mockDao.getADMailabilityScore()).thenReturn(mailAbility);
        when(mockDao.getADValidationProcessMode()).thenReturn(processingMode);
        when(mockDao.getAddressValidationOnOffSwitch()).thenReturn("true");
        when(mockDao.getADProcessStatus()).thenReturn(new ArrayList<String>() {
            {
                add(AddressDoctorService.V4_ADDRESS_DOCTOR_PROCESS_STATUS);
                add(AddressDoctorService.V5_ADDRESS_DOCTOR_PROCESS_STATUS);
            }
        });
        when(mockDao.getADWarnProcessStatus()).thenReturn(new ArrayList<String>() {
            {
                add(AddressDoctorService.C4_ADDRESS_DOCTOR_PROCESS_STATUS);
                add(AddressDoctorService.C3_ADDRESS_DOCTOR_PROCESS_STATUS);
            }
        });
        Field daoField = AddressDoctorService.class.getDeclaredField("configurationDao");
        daoField.setAccessible(true);
        daoField.set(addressDocService, mockDao);
        return mockDao;
    }

    private Response setupAddressDoctorResults(String processStatus, String mailability) {
        Response response = new Response();
        response.setResults(new ArrayOfResult());
        Result result = new Result();
        response.getResults().getResult().add(result);
        ResultData resultData = new ResultData();
        result.setResultDataSet(new ArrayOfResultData());
        result.getResultDataSet().getResultData().add(resultData);
        Address addr = new Address();
        resultData.setAddress(addr);
        result.setProcessStatus(processStatus);
        resultData.setMailabilityScore(mailability);

        addr.setLocality(new ArrayOfString() {
            {
                getString().add("VICTORIA");
            }
        });
        addr.setProvince(new ArrayOfString() {
            {
                getString().add("BC");
            }
        });
        addr.setPostalCode(new ArrayOfString() {
            {
                getString().add("V8C 6Y7");
            }
        });
        addr.setCountry(new ArrayOfString() {
            {
                getString().add("CANADA");
            }
        });
        addr.setDeliveryAddressLines(new ArrayOfString() {
            {
                getString().add("996 Dunford Ave");
            }
        });
        addr.setDeliveryService(new ArrayOfString() {
            {
                getString().add("996 Dunford Ave");
            }
        });
        return response;
    }

    private AddressDoctorConnectionService setupAddressConnectionServiceMock(AddressDoctorService service) throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorConnectionService mockConnSrv = mock(AddressDoctorConnectionService.class);
        Field connSrvField = AddressDoctorService.class.getDeclaredField("addressDoctorConnectionService");
        connSrvField.setAccessible(true);
        connSrvField.set(service, mockConnSrv);

        return mockConnSrv;
    }

    private AddressSupportService setupAddressSupportMock(AddressDoctorService service) throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressSupportService mockSupport = mock(AddressSupportService.class);
        Field supportField = AddressDoctorService.class.getDeclaredField("addressSupportService");
        supportField.setAccessible(true);
        supportField.set(service, mockSupport);
        when(mockSupport.getDefaultCountry()).thenReturn(new PrsCtCountries() {
            {
                this.setCtlDescTxt("CANADA");
            }
        });
        return mockSupport;
    }

    @Test
    public void testConvertDtoToGrsAddress() {
        AddressDto addressDto = new AddressDto();
        addressDto.setAddressLineOne("1175 Douglas St");
        addressDto.setAddressLineTwo("");
        addressDto.setCity("Victoria");
        addressDto.setProvinceOrStateTxt("BC");
        addressDto.setPostalCode("V8W 2E1");

        GrsAddresses grsAddresses = new AddressDoctorService().convertDtoToGrsAddress(addressDto);

        assertEquals(addressDto.getAddressLineOne(), grsAddresses.getAddressLine1Txt());
        assertNull(grsAddresses.getAddressLine2Txt());
        assertEquals(addressDto.getCity(), grsAddresses.getCityTxt());
        assertEquals(addressDto.getProvinceOrStateTxt(), grsAddresses.getProvinceOrStateTxt());
        assertEquals(addressDto.getPostalCode(), grsAddresses.getPostalCodeOrZipTxt());
    }

    @Test
    public void testConvertAddressToGrsAddress() throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        Address address = new Address();

        ArrayOfString addressLine = new ArrayOfString();
        addressLine.getString().add("1175 Douglas St");
        address.setDeliveryService(addressLine);
        addressLine.getString().add("");
        address.setDeliveryAddressLines(addressLine);

        ArrayOfString locality = new ArrayOfString();
        locality.getString().add("Victoria");
        address.setLocality(locality);

        ArrayOfString province = new ArrayOfString();
        province.getString().add("BC");
        address.setProvince(province);

        ArrayOfString postalCode = new ArrayOfString();
        postalCode.getString().add("V8W 2E1");
        address.setPostalCode(postalCode);

        AddressDoctorService addSrv = new AddressDoctorService();
        AddressSupportService mockSupport = setupAddressSupportMock(addSrv);

        GrsAddresses grsAddresses = addSrv.convertAddressToGrsAddress(address);

        assertEquals(address.getDeliveryService().getString().get(0), grsAddresses.getAddressLine1Txt());
        assertEquals(address.getDeliveryAddressLines().getString().get(0), grsAddresses.getAddressLine1Txt());
        assertEquals(address.getLocality().getString().get(0), grsAddresses.getCityTxt());
        assertEquals(address.getProvince().getString().get(0), grsAddresses.getProvinceOrStateTxt());
        assertEquals(address.getPostalCode().getString().get(0), grsAddresses.getPostalCodeOrZipTxt());

    }

}
