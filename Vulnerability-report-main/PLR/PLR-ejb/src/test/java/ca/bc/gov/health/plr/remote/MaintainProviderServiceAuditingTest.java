package ca.bc.gov.health.plr.remote;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.JurisdictionNameCodeDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.ejb.entity.GrsChangedRecords;
import ca.bc.gov.health.plr.ejb.entity.GrsIdentifiers;
import ca.bc.gov.health.plr.ejb.entity.PlrConfigurationProperties;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.PrsStatuses;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.entityManagerProxy;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainProviderEsbService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.plrConfigurationResourceLoader;
import ca.bc.gov.health.plr.util.SpoofedUserHelper;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.Context;
import javax.naming.NamingException;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

public class MaintainProviderServiceAuditingTest extends MaintainProviderEsbTestBuilder {

    private static final Logger logger = Logger.getLogger(MaintainProviderServiceAuditingTest.class.getName());
    private static final int WAIT_TIME = 60000;
    private static Map<String, Object> appResource;
    private static final int MAX_ITERATION_FOR_TIMING_SENSITIVE_TESTS = 3;
    static String auditState = "false";
    
    @BeforeClass
    public static void setUp() throws NamingException, InterruptedException {
        Context initContext = container.getContext();

        auditState = plrConfigurationResourceLoader.getValue(Consts.ENABLE_AUDITING);
        PlrConfigurationProperties  audit = entityManagerProxy.find(PlrConfigurationProperties.class, "enable_auditing");
        audit.setValue("true");
        entityManagerProxy.merge(audit);
        entityManagerProxy.flush();
        

        logger.log(Level.INFO, String.format("Waiting for %sms to ensure auditing is fully enabled", WAIT_TIME));
        Thread.sleep(WAIT_TIME); // Sleep for WAIT_TIME to ensure we have reloaded configuration to enable auditing processing
        removeAuditingInfo();
    }

    @AfterClass
    public static void tearDownClass() throws NamingException {
        setupJNDIResources();
        PlrConfigurationProperties  audit = entityManagerProxy.find(PlrConfigurationProperties.class, "enable_auditing");
        audit.setValue(auditState);
        entityManagerProxy.merge(audit);
        entityManagerProxy.flush();

    }

    @After
    public void clean() throws InterruptedException {
        removeAuditingInfo();
    }

    private static void removeDataBlocks(PrsProviders prov) {
        clearEntities();
        clearIdentifiers(prov);
        clearStatuses(prov);
    }

    private static void removeProvider(PrsProviders prov) throws InterruptedException {
        removeDataBlocks(prov);
        entityManagerProxy.remove(prov);

    }

    @Before
    public void setUpMethods() {
        SpoofedUserHelper.currentUser = "plr-reg-admin";
        createRequest(String.valueOf(System.currentTimeMillis()));

    }

    private void createRequest(String id) {
        mainRequest = new MaintainProviderRequest();
        mainRequest.setRegistryUserOrgId("plr-reg-admin");
        mainRequest.setProviderDetails(new ProviderDetails());
        mainRequest.getProviderDetails().setProviderType("IND");
        mainRequest.getProviderDetails().setType("DEN");
        mainRequest.getProviderDetails().setJurisdiction(new JurisdictionNameCodeDto());
        mainRequest.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");
        addIdentifier(id);
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testAddProviderAudit() throws InterruptedException {

        PrsProviders prov = createProviderCommon();
        PAUTH_ID = prov.getPauthId();

        List<GrsChangedRecords> changedRecords = null;

        // We try to check for updates at most three times waiting for LOCAL_WAIT_TIME on each ocassion
        // to allow asynchronous processing of change event consumer to complete
        for (int i = 0; i < MAX_ITERATION_FOR_TIMING_SENSITIVE_TESTS; i++) {
            Thread.sleep(WAIT_TIME);
            changedRecords = entityManagerProxy.namedQuery("GrsChangedRecords.findAll");

            if (!changedRecords.isEmpty()) {
                break;
            }
        }

        assertTrue(changedRecords.size() == 1);
        assertTrue(changedRecords.get(0).getPauthChangedPauthId().equals(PAUTH_ID));
        assertTrue(changedRecords.get(0).getCreateUpdateCode().equals(Consts.CREATE_PROVIDER));

        removeProvider(prov);

    }

    @Test
    public void testMaintainProviderAudit() throws InterruptedException {

        String id = String.valueOf(System.currentTimeMillis());
        createRequest(id);
        PrsProviders prov = createProviderCommon();
        PAUTH_ID = prov.getPauthId();
        clearEntities();
        clearStatuses(prov);

        //Wait to ensure auditing has been processed
        Thread.sleep(WAIT_TIME);

        removeAuditingInfo();
        createRequest(id);
        mainRequest.getProviderDetails().setPauthId(PAUTH_ID);
        prov = createProviderCommon();

        List<GrsChangedRecords> changedRecords = null;
                        
        // We try to check for updates at most three times waiting for LOCAL_WAIT_TIME on each ocassion
        // to allow asynchronous processing of change event consumer to complete
        for (int i = 0; i < MAX_ITERATION_FOR_TIMING_SENSITIVE_TESTS; i++) {
            Thread.sleep(WAIT_TIME);
            changedRecords = entityManagerProxy.namedQuery("GrsChangedRecords.findAll");

            if (!changedRecords.isEmpty()) {
                break;
            }
        }
        
        assertTrue(changedRecords.size() == 1);
        assertTrue(changedRecords.get(0).getPauthChangedPauthId().equals(PAUTH_ID));
        assertTrue(changedRecords.get(0).getCreateUpdateCode().equals(Consts.UPDATE_PROVIDER));

        removeProvider(prov);

    }

    private static PrsProviders createProviderCommon() {

        mainRequest.getProviderDetails().getAddresses().add(getAddress());
        mainRequest.getProviderDetails().getIndNames().add(getPersonNameDto());
        mainRequest.getProviderDetails().getDemographicDetails().add(getDemographicDto());
        mainRequest.getProviderDetails().getElectronicAddresses().add(getElectronicAddressDto());
        mainRequest.getProviderDetails().getConditions().add(getConditionsDto());
        mainRequest.getProviderDetails().getExpertise().add(getExpertiseDto());
        mainRequest.getProviderDetails().getCredentials().add(getCredentialDto());
        mainRequest.getProviderDetails().getDisciplinaryActions().add(getDisciplinaryActionDto());
        mainRequest.getProviderDetails().getConfidentialityIndicators().add(getConfidentialityIndicatorDto());
        mainRequest.getProviderDetails().getRegistryUserRelationships().add(getRegUserRelationshipDto());
        mainRequest.getProviderDetails().getNotes().add(getNoteDto());
        mainRequest.getProviderDetails().getStatuses().add(getStatusDto());

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        return entityManagerProxy.find(PrsProviders.class, response.getProviderDetails().getPauthId());

    }

    static void addIdentifier(String id) {
        mainRequest.getProviderDetails().setIdentifiers(new ArrayList<CollegeIdentifierDto>());
        CollegeIdentifierDto collegeDto = new CollegeIdentifierDto();
        collegeDto.setIdentifier(id);
        collegeDto.setTypeCode("DENID");
        collegeDto.setEffectiveStartDate(new Date());
        mainRequest.getProviderDetails().getIdentifiers().add(collegeDto);
    }

    static void clearIdentifiers(PrsProviders provider) {
        List<Exception> exceptions = new ArrayList<>();
        for (GrsIdentifiers grsId : provider.getGrsIdentifiersList()) {
            try {
                entityManagerProxy.remove(grsId);
            } catch (Exception e) {
                e.printStackTrace();
                exceptions.add(e);
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    static void clearStatuses(PrsProviders provider) {
        List<Exception> exceptions = new ArrayList<>();

        for (PrsStatuses status : provider.getPrsStatusesList()) {
            try {
                entityManagerProxy.remove(status);
            } catch (Exception e) {
                e.printStackTrace();
                exceptions.add(e);
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    private static void removeAuditingInfo() {
        // delete all trasnactions first before deleteing the changed records to avoid
        // referential integrity violation
        entityManagerProxy.executeUpdateQuery("Delete FROM GrsTransactions");
        entityManagerProxy.executeUpdateQuery("Delete FROM GrsChangedRecords");
    }

}
