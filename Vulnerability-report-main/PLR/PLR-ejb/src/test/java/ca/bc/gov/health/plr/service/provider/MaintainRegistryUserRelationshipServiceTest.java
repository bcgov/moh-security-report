package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.provider.RegistryUserRelationshipDto;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.PrsProvRuRelns;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.BusinessRuleMessage;
import ca.bc.gov.health.plr.rule.provider.ProviderTestDataBuilder;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.util.MessageCodeHelper;
import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Before;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class MaintainRegistryUserRelationshipServiceTest extends IntegrationSetup {

    private static final long PAUTH_ID = 3206l;

    @Before
    public void setup() {
        List<Exception> exceptions = new ArrayList<>();

        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        for (PrsProvRuRelns relationship : provider.getPrsProvRuRelnsList()) {
            try {
                entityManagerProxy.remove(relationship);
            } catch (Exception e) {
                e.printStackTrace();
                exceptions.add(e);
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    @Test
    public void testSave() throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        RegistryUserRelationshipDto relationship = ProviderTestDataBuilder.getRegistryUserRelationship();
        relationship.setPauthId(PAUTH_ID);

        // 00002855 is a valid reg user ID on WEB9D.
        relationship.setRegistryUserChid("00002885");
        // 818 is GRS_CT_REG_USER_TYPE CONS on WEB9D.
        relationship.setRegUserTypeId(818l);

        int originalSize = maintainRegistryUserRelationshipService.getRelationships(PAUTH_ID).size();
        maintainRegistryUserRelationshipService.save(relationship);
        int newSize = maintainRegistryUserRelationshipService.getRelationships(PAUTH_ID).size();

        assertEquals(originalSize + 1, newSize);
    }
    
    @Test
    public void testGetMatching() {
        RegistryUserRelationshipDto dto = new RegistryUserRelationshipDto();
         // 00002855 is a valid reg user ID on WEB9D.
        dto.setRegistryUserChid("00002885");
        // 818 is GRS_CT_REG_USER_TYPE CONS on WEB9D.
        dto.setRegUserTypeId(818l);
        List<GrsRegistryUsers> users = maintainRegistryUserRelationshipService.getMatchingRegistryUsers(dto);
        assertEquals(1, users.size());
    }

    /**
     * If the given reg user ID does not exist, throw an exception.
     *
     * @throws ca.bc.gov.health.plr.service.provider.DuplicateRecordException
     * @throws ca.bc.gov.health.plr.rule.BusinessRuleException
     */
    @Test(expected = BusinessRuleException.class)
    public void testSave_nonExistentId() throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        RegistryUserRelationshipDto relationship = ProviderTestDataBuilder.getRegistryUserRelationship();
        relationship.setPauthId(PAUTH_ID);

        relationship.setRegistryUserChid("non existent id");

        try {
            maintainRegistryUserRelationshipService.save(relationship);
        } catch (BusinessRuleException ex) {
            boolean expectedErrorFound = false;
            List<BusinessRuleMessage> messages = ex.getResults().get(0).getMessages();
            for (BusinessRuleMessage businessRuleMessage : messages) {
                if (businessRuleMessage.getMessage().equals(MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_NONUNIQUE_REG_USER_IDENTIFIER))[1])) {
                    expectedErrorFound = true;
                }
            }
            assertTrue(expectedErrorFound);
            throw ex;
        }
    }

    /**
     * If the given reg user ID and reg user type do not identify a registry
     * user, throw an exception.
     *
     * @throws DuplicateRecordException
     * @throws BusinessRuleException
     */
    @Test(expected = BusinessRuleException.class)
    public void testSave_wrongRegUserType() throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        RegistryUserRelationshipDto relationship = ProviderTestDataBuilder.getRegistryUserRelationship();
        relationship.setPauthId(PAUTH_ID);

        // 00002855 is a valid reg user ID on WEB9D.
        relationship.setRegistryUserChid("00002855");
        // 1252 is GRS_CT_REG_USER_TYPE PSRC on WEB9D.
        relationship.setRegUserTypeId(818l);

        /*
         00002855 is a valid ID, and PSRC is a valid reg user type, but taken
         together they do not identify an existing registry user.
         */
        try {
            maintainRegistryUserRelationshipService.save(relationship);
        } catch (BusinessRuleException ex) {
            boolean expectedErrorFound = false;
            List<BusinessRuleMessage> messages = ex.getResults().get(0).getMessages();
            for (BusinessRuleMessage businessRuleMessage : messages) {
                if (businessRuleMessage.getMessage().equals(MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_NONUNIQUE_REG_USER_IDENTIFIER))[1])) {
                    expectedErrorFound = true;
                }
            }
            assertTrue(expectedErrorFound);
            throw ex;
        }
    }

}
