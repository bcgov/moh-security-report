/*
 * *********************************************************************************************************************
 *  Copyright (c) 2018, Ministry of Health, BC.                                                                        *
 *                                                                                                                     *
 *  All rights reserved.                                                                                               *
 *    This information contained herein may not be used in whole                                                       *
 *    or in part without the express written consent of the                                                            *
 *    Government of British Columbia, Canada.                                                                          *
 *                                                                                                                     *
 *  Revision Control Information                                                                                       *
 *  File:                $Id::                                                                                       $ *
 *  Date of Last Commit: $Date::                                                                                     $ *
 *  Revision Number:     $Rev::                                                                                      $ *
 *  Last Commit by:      $Author::                                                                                   $ *
 *                                                                                                                     *
 * *********************************************************************************************************************
 */
package ca.bc.gov.health.plr.rule.provider;

import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.assertEquals;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 * Validator for testing the new requirements/rules re valid/acceptable
 * characters for organization name/description in OrgNameDto.
 *
 * @author CGI Information Management Consultants Inc.
 */
public class AcceptableOrganizationNameValidatorTest {

    public AcceptableOrganizationNameValidatorTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    /**
     * Test for valid/accepted characters of an organization name.
     */
    @Test
    public void testValidAllowedCharsOrgName() {
        MockOrgNameDto orgName = new MockOrgNameDto();
        String orgShortName = "17 / 88 Dental Clinic Tests \\ (05):Smith-Sand & Th+' ";
        orgName.someOrgField = orgShortName;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockOrgNameDto>> violations = validator.validate(orgName);
        assertEquals(0, violations.size());
    }

    /**
     * Test for invalid sample characters '*' of an organization name.
     */
    @Test
    public void testInvalidSampleCharsOrgName() {
        MockOrgNameDto orgName = new MockOrgNameDto();
        String orgShortName = "(8) - sample * clinic ";
        orgName.someOrgField = orgShortName;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockOrgNameDto>> violations = validator.validate(orgName);
        assertEquals(1, violations.size());
    }

    /**
     * Test for invalid sample characters '%' of an organization name.
     */
    @Test
    public void testInvalidSampleCharsOrgName1() {
        MockOrgNameDto orgName = new MockOrgNameDto();
        String orgShortName = "sample  % bone clinic ";
        orgName.someOrgField = orgShortName;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockOrgNameDto>> violations = validator.validate(orgName);
        assertEquals(1, violations.size());
    }

    /**
     * Test for invalid sample of additional characters '#' of an organization
     * name.
     */
    @Test
    public void testInvalidSampleCharsOrgShortName() {
        MockOrgNameDto orgName = new MockOrgNameDto();
        String orgShortName = "(95) sample # clinic -";
        orgName.someOrgField = orgShortName;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockOrgNameDto>> violations = validator.validate(orgName);
        assertEquals(1, violations.size());
    }

    /**
     * Test for invalid sample of additional characters '~' of an organization
     * name.
     */
    @Test
    public void testInvalidSampleCharsOrgShortName1() {
        MockOrgNameDto orgName = new MockOrgNameDto();
        String orgShortName = "(95) sample ~ eye clinic + ";
        orgName.someOrgField = orgShortName;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockOrgNameDto>> violations = validator.validate(orgName);
        assertEquals(1, violations.size());
    }

    /**
     * Test for invalid sample characters '@' of an organization description.
     */
    @Test
    public void testInvalidSampleCharsOrgDescription() {
        MockOrgNameDto orgDesc = new MockOrgNameDto();
        String orgDescription = " another @sample dental ";
        orgDesc.someOrgField = orgDescription;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockOrgNameDto>> violations = validator.validate(orgDesc);
        assertEquals(1, violations.size());
    }

    /**
     * Test for invalid sample characters '!' of an organization description.
     */
    @Test
    public void testInvalidSampleCharsOrgDescription1() {
        MockOrgNameDto orgDesc = new MockOrgNameDto();
        String orgDescription = " another3 sample ! dental ";
        orgDesc.someOrgField = orgDescription;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockOrgNameDto>> violations = validator.validate(orgDesc);
        assertEquals(1, violations.size());
    }

    /**
     * Test for invalid sample characters '=' of an organization description.
     */
    @Test
    public void testInvalidSampleCharsOrgLongName() {
        MockOrgNameDto orgDesc = new MockOrgNameDto();
        String orgDescription = " another5 = long sample  dental ";
        orgDesc.someOrgField = orgDescription;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockOrgNameDto>> violations = validator.validate(orgDesc);
        assertEquals(1, violations.size());
    }

    /**
     * Test for invalid sample characters '?' of an organization description.
     */
    @Test
    public void testInvalidSampleCharsOrgLongName1() {
        MockOrgNameDto orgDesc = new MockOrgNameDto();
        String orgDescription = " another  quest mark for long sample ? dental ";
        orgDesc.someOrgField = orgDescription;

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockOrgNameDto>> violations = validator.validate(orgDesc);
        assertEquals(1, violations.size());
    }

    private static class MockOrgNameDto {

        @AcceptableOrganizationName
        private String someOrgField;
    }

}
