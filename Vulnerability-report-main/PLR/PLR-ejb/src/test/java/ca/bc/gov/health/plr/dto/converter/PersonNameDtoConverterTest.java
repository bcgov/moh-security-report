package ca.bc.gov.health.plr.dto.converter;

import ca.bc.gov.health.plr.dto.provider.PersonNameDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsPersonNames;
import ca.bc.gov.health.plr.ejb.entity.PrsCtGenderCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtNameTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.personNameConverter;
import java.lang.reflect.Field;
import java.util.Calendar;
import java.util.Date;
import javax.persistence.EntityManager;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *
 * @author ian.scott
 */
public class PersonNameDtoConverterTest  {

    EntityManager emMock;
    CodesDao codesDaoMock;
    PersonNameDtoConverter personNamesDtoConverter;
    PrsCtNameTypes prsCtNameTypes;
    
    public PersonNameDtoConverterTest() {
    }

    @Before
    public void setUp() throws IllegalArgumentException, IllegalAccessException, NoSuchFieldException {
        emMock = mock(EntityManager.class);
        codesDaoMock = mock(CodesDao.class);
        personNamesDtoConverter = new PersonNameDtoConverter();
        
        Field field = personNamesDtoConverter.getClass().getDeclaredField("em");
        field.setAccessible(true);
        field.set(personNamesDtoConverter, emMock);
        
        field = personNamesDtoConverter.getClass().getDeclaredField("codesDao");
        field.setAccessible(true);
        field.set(personNamesDtoConverter, codesDaoMock);
        
        personNamesDtoConverter.dtoConverter = new DtoConverter();
        
        field = personNamesDtoConverter.dtoConverter.getClass().getDeclaredField("codesDao");
        field.setAccessible(true);
        field.set(personNamesDtoConverter.dtoConverter, codesDaoMock);
        
        when(emMock.find(PrsProviders.class, Long.MAX_VALUE)).thenReturn(new PrsProviders(){{ setPauthId(Long.MAX_VALUE); }} );
        
        GrsCtBooleanTypes grsCtBooleanTypesYes = mock(GrsCtBooleanTypes.class);
        GrsCtBooleanTypes grsCtBooleanTypesNo = mock(GrsCtBooleanTypes.class);
        when(grsCtBooleanTypesNo.getCtlNameCode()).thenReturn(CodeTableCodes.GrsCtBooleanTypes.NO.getValue());
        when(grsCtBooleanTypesYes.getCtlNameCode()).thenReturn(CodeTableCodes.GrsCtBooleanTypes.YES.getValue());
        when(codesDaoMock.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES)).thenReturn(grsCtBooleanTypesYes);
        when(codesDaoMock.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.NO)).thenReturn(grsCtBooleanTypesNo);

        prsCtNameTypes = mock(PrsCtNameTypes.class);
        when(prsCtNameTypes.getCtlNameCode()).thenReturn(CodeTableCodes.PrsCtNameTypes.CREDENTIAL_NAME.getValue());
        when(prsCtNameTypes.getCtlDescTxt()).thenReturn(CodeTableCodes.PrsCtNameTypes.CREDENTIAL_NAME.name());
        when(prsCtNameTypes.getCtlId()).thenReturn(Long.MAX_VALUE);
        when(codesDaoMock.lookup(PrsCtNameTypes.class, CodeTableCodes.PrsCtNameTypes.CREDENTIAL_NAME)).thenReturn(prsCtNameTypes);
        when(codesDaoMock.lookup(PrsCtNameTypes.class, Long.MAX_VALUE)).thenReturn(prsCtNameTypes);
    }

    @After
    public void tearDown() {
    }

    /**
     * Test of toEntity method
     */
    @Test
    public void testToEntity_NameType() throws Exception {
        PersonNameDto dto = populateDTO();
        dto.setTypeCode(prsCtNameTypes.getCtlNameCode());
        dto.setTypeId(Long.MAX_VALUE);
        
        GrsPersonNames result = personNamesDtoConverter.toEntity(dto);
        assertEquals(result.getNameTypeCode().getCtlNameCode(), CodeTableCodes.PrsCtNameTypes.CREDENTIAL_NAME.getValue());
        assertEquals(result.getNameTypeCode().getCtlDescTxt(), CodeTableCodes.PrsCtNameTypes.CREDENTIAL_NAME.name());
        assertNull(result.getPauthPauthId());
    }
    /**
     * Test of toEntity method
     */
    @Test
    public void testToEntity_Pauth() throws Exception {
        PersonNameDto dto = populateDTO();
        dto.setPauthId(Long.MAX_VALUE);
        
        GrsPersonNames result = personNamesDtoConverter.toEntity(dto);
        assertTrue(result.getPauthPauthId().getPauthId()==Long.MAX_VALUE);
    }
    
    @Test
    public void testToEntity_defaultEffectiveEndDate() throws Exception {
        PersonNameDto dto = populateDTO();

        GrsPersonNames result = personNamesDtoConverter.toEntity(dto);
        assertEquals(result.getEffectiveEndDate(), DatabaseConstants.SYSTEM_HIGH_DATE.toDate());        
    }
    
    @Test
    public void testToEntity_effectiveEndDate() throws Exception {
        PersonNameDto dto = populateDTO();

        Date currDate= new Date();
        dto.setEffectiveEndDate(currDate);

         GrsPersonNames result = personNamesDtoConverter.toEntity(dto);
        assertNotSame(result.getEffectiveEndDate(), DatabaseConstants.SYSTEM_HIGH_DATE.toDate());        
        assertEquals(result.getEffectiveEndDate(), currDate);        
        
        dto.setEffectiveEndDate(null);
        result = personNamesDtoConverter.toEntity(dto);
        Calendar cal = Calendar.getInstance();
        cal.set(9999, 11, 30, 0, 0, 0);
        cal.set(Calendar.MILLISECOND, 0);
        assertEquals(result.getEffectiveEndDate().getTime(), cal.getTime().getTime());
    }
    
    @Test
    public void testToEntity_namePrefix() {
        String somePrefix = "Laird";
        PersonNameDto dto = populateDTO();
        dto.setPrefix(somePrefix);
        GrsPersonNames result = personNamesDtoConverter.toEntity(dto);

        assertEquals(somePrefix, result.getPrsnPrefixTxt());
    }

    @Test
    public void testToEntity_firstName() {
        String someFirstName = "Laird";
        PersonNameDto dto = populateDTO();
        dto.setFirstName(someFirstName);
        GrsPersonNames result = personNamesDtoConverter.toEntity(dto);

        assertEquals(someFirstName, result.getPrsnFirstGivenNameTxt());
    }

    @Test
    public void testToEntity_secondName() {
        String someSecondName = "Laird";
        PersonNameDto dto = populateDTO();
        dto.setSecondName(someSecondName);
        GrsPersonNames result = personNamesDtoConverter.toEntity(dto);

        assertEquals(someSecondName, result.getPrsnSecondGivenNameTxt());
    }

    @Test
    public void testToEntity_thirdName() {
        String someThirdName = "Laird";
        PersonNameDto dto = populateDTO();
        dto.setThirdName(someThirdName);
        GrsPersonNames result = personNamesDtoConverter.toEntity(dto);

        assertEquals(someThirdName, result.getPrsnThirdGivenNameTxt());
    }

    @Test
    public void testToEntity_surname() {
        String someSurname = "Laird";
        PersonNameDto dto = populateDTO();
        dto.setLastName(someSurname);
        GrsPersonNames result = personNamesDtoConverter.toEntity(dto);

        assertEquals(someSurname, result.getPrsnSurnameTxt());
    }
    
    
    @Test
    public void testToEntity_effectiveStartDate_person() {
        Date date = new Date();
        PersonNameDto dto = populateDTO();
        dto.setEffectiveStartDate(date);
        dto.setPrefix("pre");        

        GrsPersonNames result = personNamesDtoConverter.toEntity(dto);

        assertEquals(date, result.getEffectiveStartDate());
    }

    private PersonNameDto populateDTO() {
        PersonNameDto dto = new PersonNameDto();

        return dto;
    }
}
