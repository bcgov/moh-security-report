package ca.bc.gov.health.plr.rule.provider;

import java.util.regex.Pattern;
import javax.validation.ConstraintValidatorContext;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class AcceptableCharacterValidatorTest {

    private ConstraintValidatorContext mockContext;
    
    @Before
    public void setUp() {
        mockContext = mock(ConstraintValidatorContext.class);
    }

    @Test(expected = NullPointerException.class)
    public void testNullPattern() {
        AcceptableCharacterValidator acceptableCharacterValidator = new AcceptableCharacterValidator(null);
    }

    @Test
    public void testValid() {
        Pattern pattern = Pattern.compile("[^a-z]");
        AcceptableCharacterValidator characterValidator = new AcceptableCharacterValidator(pattern);
        assertTrue(characterValidator.valildate("somevalid", mockContext));
    }

    @Test
    public void testInvalid() {
        Pattern pattern = Pattern.compile("[^a-z]");
        AcceptableCharacterValidator characterValidator = new AcceptableCharacterValidator(pattern);
        assertFalse(characterValidator.valildate("some invalid", mockContext));
    }

    @Test
    public void testInvalidBrackets() {
        Pattern pattern = Pattern.compile("[^a-z\\(\\)]");
        AcceptableCharacterValidator characterValidator = new AcceptableCharacterValidator(pattern);
        assertTrue(characterValidator.valildate("some()invalid", mockContext));
    }

    @Test
    public void testInvalidBrackets_fail() {
        Pattern pattern = Pattern.compile("[^a-z\\)]");
        AcceptableCharacterValidator characterValidator = new AcceptableCharacterValidator(pattern);
        assertFalse(characterValidator.valildate("some()invalid", mockContext));
    }

    @Test
    public void test_validFirstNameWithAccents_noConstraintViolations() {
        Pattern pattern = Pattern.compile("[^ a-zA-z]");
        String firstName = "Tĥïŝ ĩš â fůňķŷ Šťŕĭńġ";
        AcceptableCharacterValidator characterValidator = new AcceptableCharacterValidator(pattern);
        assertTrue(characterValidator.valildate(firstName, mockContext));
    }

}
