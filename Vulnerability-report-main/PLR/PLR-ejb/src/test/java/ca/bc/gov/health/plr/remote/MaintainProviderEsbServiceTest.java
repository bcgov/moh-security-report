package ca.bc.gov.health.plr.remote;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.BatchRequest;
import ca.bc.gov.health.plr.dto.esb.BatchResponse;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.provider.esb.*;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import static ca.bc.gov.health.plr.remote.MaintainProviderEsbTestBuilder.getInformationRouteDtoFile;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainProviderEsbService;
import ca.bc.gov.health.plr.util.AckHelper;
import ca.bc.gov.health.plr.util.AddressValidationControl;
import ca.bc.gov.health.plr.util.AuditControl;
import ca.bc.gov.health.plr.util.DateUtils;
import ca.bc.gov.health.plr.util.DistributionControl;
import ca.bc.gov.health.plr.util.MessageCodeHelper;
import ca.bc.gov.health.plr.util.SpoofedUserHelper;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import static org.hamcrest.CoreMatchers.containsString;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.not;
import static org.hamcrest.CoreMatchers.notNullValue;
import org.hamcrest.Matchers;
import static org.hamcrest.Matchers.greaterThan;
import static org.hamcrest.Matchers.is;
import org.hamcrest.collection.IsCollectionWithSize;
import org.junit.AfterClass;
import org.junit.Assert;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class MaintainProviderEsbServiceTest extends MaintainProviderEsbTestBuilder {

    @BeforeClass
    public static void setUp() {
        AddressValidationControl.turnOffAddressValidation();
        DistributionControl.turnOffDistributions();
        AuditControl.turnOffAudit();
        SpoofedUserHelper.currentUser = null;
        mainRequest = new MaintainProviderRequest();
        mainRequest.setRegistryUserOrgId("plr-reg-admin");
        mainRequest.setProviderDetails(new ProviderDetails());
        mainRequest.getProviderDetails().setProviderType("ORG");
        mainRequest.getProviderDetails().setType("DEN");
        mainRequest.getProviderDetails().setJurisdiction(new JurisdictionNameCodeDto());
        mainRequest.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");
        addIdentifier(mainRequest);
        batchRequest = new BatchRequest();
        Collection<MaintainProviderRequest> requests = new HashSet<>();
        requests.add(mainRequest);
        batchRequest.setMaintainProviderRequests(requests);
        batchRequest.setUniqueMessageId(new BigInteger(130, new SecureRandom()).toString(32));
        batchRequest.setSourceRegistryUserId("0005555");
        Calendar CURR_DATE = Calendar.getInstance();
        DateUtils.truncateTime(CURR_DATE);
        EFF_START_DATE = CURR_DATE.getTime();
    }

    @AfterClass
    public static void tearDown() {
        AddressValidationControl.restoreAddressValidation();;
        DistributionControl.restoreDistributions();
        AuditControl.restoreAudit();
    }
    
    @Before
    public void setUpMethods() {
        mainRequest.setRegistryUserOrgId("plr-reg-admin");
        mainRequest.getProviderDetails().setType("DEN");
        mainRequest.getProviderDetails().setProviderType("IND");
        if (!mainRequest.getProviderDetails().getIdentifiers().isEmpty()) {
            mainRequest.getProviderDetails().getIdentifiers().get(0).setEndReasonCode(null);
        }
        clearEntities();
    }

    @Test
    public void smokeTestSecurity() {
        SpoofedUserHelper.currentUser = null;
        mainRequest.setRegistryUserOrgId("fake user");
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acks = response.getAcknowledgments();
        assertThat(acks, Matchers.hasSize(2));
        Iterator it = acks.iterator();
        Acknowledgment acknowledgment = (Acknowledgment)it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment)it.next();
        String msgText = acknowledgment.getMsgText();
        assertThat(msgText, containsString("authentication token is invalid"));
    }

    @Test
    public void smokeTestMaintainProvider() {
        assertNotNull(maintainProviderEsbService.maintainProvider(mainRequest));
    }

    @Test
    public void testMessageTypeEchoed() {
        String messageType = "yabadabadoo";
        mainRequest.setMessageType(messageType);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        assertNotNull(response);
        assertThat(response.getMessageType(), equalTo(messageType));
    }

    @Test
    public void smokeTestMaintainProviders() {
        BatchResponse batchResponse = maintainProviderEsbService.maintainProviders(batchRequest);
        assertNotNull(batchResponse);
        assertNotNull(batchResponse.getMaintainProviderResponses());
        assertThat(batchResponse.getMaintainProviderResponses().size(), Matchers.is(equalTo(batchRequest.getMaintainProviderRequests().size())));
    }

    /**
     * Test that the maintainProviderEsbService returns the updated Provider.
     * For now it just returns an arbitrary Provider; implementation will be
     * completed in future sprints.
     */
    @Test
    public void testUpdateProvider() {
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);

        assertThat("Output ProviderDetails should not be same object as input ProviderDetails.",
                response.getProviderDetails(), not(equalTo(mainRequest.getProviderDetails())));
    }

    /**
     * Test that the Acknowledgment object is present in the response. Business
     * requirements for this object have not been specified yet, so we are just
     * fulfilling the interface contract with this stub behavior.
     */
    @Test
    public void testAcknowledgement() {
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        assertThat(response.getAcknowledgments(), notNullValue());
    }

    /**
     * Test that an invalid request returns an error acknowledgment and the
     * request is not processed.
     */
    @Test
    public void smokeTestAddAddress_missingCity() {
        clearChildren();
        clearAddresses();
        AddressDto address = getAddress();
        address.setCity(null);
        mainRequest.getProviderDetails().getAddresses().add(address);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);

        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment)it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment)it.next();
        assertThat(acknowledgment.getMsgText(), Matchers.containsString("City"));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.AddressDto> activeAddresses = maintainAddressService.refreshAddresses(getRefreshAddressDto());
        assertThat(activeAddresses, IsCollectionWithSize.hasSize(0));
    }

    /**
     * Test that an invalid request returns an error acknowledgment and the
     * request is not processed.
     */
    @Test
    public void maintainProvider_InvalidProviderRoleType() {
        clearChildren();
        clearAddresses();
        AddressDto address = getAddress();
        mainRequest.getProviderDetails().getAddresses().add(address);
        mainRequest.getProviderDetails().setType("ABCD");
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);

        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        acknowledgments.iterator().next();
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        Assert.assertFalse(acknowledgment.getMsgText().equals(successMsg));

    }

    /**
     * Test that when the request contains some valid and invalid records, no
     * records are added and all error acknowledgments are returned.
     */
    @Test
    public void smokeTestAddress_oneGood_oneBad_rollback() {
        clearChildren();
        clearAddresses();
        AddressDto address1 = getAddress();
        address1.setCity(null);
        mainRequest.getProviderDetails().getAddresses().add(address1);
        AddressDto address2 = getAddress();
        // "P", Physical location
        address2.setTypeId(2839L);
        mainRequest.getProviderDetails().getAddresses().add(address2);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);

        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment)it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.AddressDto> activeAddresses = maintainAddressService.refreshAddresses(getRefreshAddressDto());
        assertThat(activeAddresses, IsCollectionWithSize.hasSize(0));
    }

    /**
     * Test that when the batch request contains two requests where one is valid
     * and one is invalid, the valid request is processed and the invalid
     * request is not.
     */
    @Test
    public void smokeTestMaintainProviders_transactions() {
        MaintainProviderRequest request1 = new MaintainProviderRequest();
        request1.setRegistryUserOrgId("plr-reg-admin");
        request1.setProviderDetails(new ProviderDetails());
        AddressDto address = getAddress();
        request1.getProviderDetails().getAddresses().add(address);
        addIdentifier(request1);
        request1.getProviderDetails().setProviderType("IND");
        request1.getProviderDetails().setType("DEN");
        request1.getProviderDetails().setJurisdiction(new JurisdictionNameCodeDto());
        request1.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");

        MaintainProviderRequest request2 = new MaintainProviderRequest();
        request2.setRegistryUserOrgId("plr-reg-admin");
        request2.setProviderDetails(new ProviderDetails());
        AddressDto address2 = getAddress();
        address2.setCity(null);
        request2.getProviderDetails().getAddresses().add(address);
        request2.getProviderDetails().setProviderType("IND");
        request2.getProviderDetails().setType("DEN");
        request2.getProviderDetails().setJurisdiction(new JurisdictionNameCodeDto());
        request2.getProviderDetails().getJurisdiction().setJurisdicationNameCode("ON");

        batchRequest = new BatchRequest();
        Collection<MaintainProviderRequest> requests = new HashSet<>();
        requests.add(request1);
        requests.add(request2);
        batchRequest.setMaintainProviderRequests(requests);

        BatchResponse batchResponse = maintainProviderEsbService.maintainProviders(batchRequest);

        Collection<MaintainProviderResponse> responses = batchResponse.getMaintainProviderResponses();
        assertThat(responses, IsCollectionWithSize.hasSize(2));

        boolean foundValid = false;
        boolean foundInvalid = false;
        for (MaintainProviderResponse response : responses) {
            Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
            Acknowledgment acknowledgment = acknowledgments.iterator().next();
            foundValid = foundValid || acknowledgment.getMsgCode().equals(successCode);
            foundInvalid = foundInvalid || !acknowledgment.getMsgText().equals(successMsg);
        }
        assertTrue("Responses should contain one successful acknowledgement.", foundValid);
        assertTrue("Responses should contain one error acknowledgement.", foundInvalid);

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.AddressDto> activeAddresses = maintainAddressService.refreshAddresses(getRefreshAddressDto());
        assertThat("One address should have been persisted.", activeAddresses, IsCollectionWithSize.hasSize(1));
        clearAddresses();
    }

    String testAddAddress_DataOwnerCode=null;
    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testAddAddress() {
        String uniqueMessageId = "some unique ID";
        mainRequest.setUniqueMessageId(uniqueMessageId);
        clearChildren();
        AddressDto address = getAddress();
        mainRequest.getProviderDetails().getAddresses().add(address);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckTypeCode(acknowledgments, "AA"));
        assertThat(response.getAcknowledgments().iterator().next().getTargetMessageExtension(), equalTo(uniqueMessageId));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.AddressDto> activeAddresses = maintainAddressService.refreshAddresses(getRefreshAddressDto());
        assertThat(activeAddresses, IsCollectionWithSize.hasSize(1));
        testAddAddress_DataOwnerCode = activeAddresses.get(0).getDataOwnerCode();
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testAddAddress_RejectDataBlock() {
        testAddAddress();
        clearChildren();
        AddressDto address = getAddress();
        mainRequest.getProviderDetails().getAddresses().add(address);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Object[] acks = acknowledgments.toArray();
        assertTrue(failedMsg.matches(".*"+((Acknowledgment)acks[0]).getMsgText()+".*"));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.AddressDto> activeAddresses = maintainAddressService.refreshAddresses(getRefreshAddressDto());
        assertThat(activeAddresses, IsCollectionWithSize.hasSize(1));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void smokeTestChangeAddress() {
        testAddAddress();
        clearChildren();
        AddressDto address = getAddress();
        address.setEndReasonCode("CHG");
        address.setAddressLineTwo(getRandom());
        mainRequest.getProviderDetails().getAddresses().add(address);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertTrue(acknowledgments.size() >= 2);
        assertTrue(checkAcknowledgements(acknowledgments, successCode));
        assertTrue(checkAcknowledgements(acknowledgments, changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.AddressDto> activeAddresses = maintainAddressService.refreshAddresses(getRefreshAddressDto());
        assertThat(activeAddresses, IsCollectionWithSize.hasSize(3));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void smokeTestCorrectAddress() {
        smokeTestChangeAddress();
        clearChildren();
        AddressDto address = getAddress();
        address.setEndReasonCode("CORR");
        address.setAddressLineTwo(getRandom());
        mainRequest.getProviderDetails().getAddresses().add(address);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertTrue(acknowledgments.size() >= 2);
        assertTrue(checkAcknowledgements(acknowledgments, successCode));
        assertTrue(checkAcknowledgements(acknowledgments, changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.AddressDto> activeAddresses = maintainAddressService.refreshAddresses(getRefreshAddressDto());
        assertThat(activeAddresses, IsCollectionWithSize.hasSize(4));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void smokeTestCeaseAddress() {
        smokeTestCorrectAddress();
        clearChildren();

        AddressDto address = getAddress();
        address.setEndReasonCode("CEASE");
        mainRequest.getProviderDetails().getAddresses().add(address);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertTrue(acknowledgments.size() >= 2);
        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.AddressDto> activeAddresses = maintainAddressService.refreshAddresses(getRefreshAddressDto());
        assertThat(activeAddresses, IsCollectionWithSize.hasSize(4));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void smokeTestAddRegistryIdentifier() {
        clearChildren();
        RegistryIdentifierDto identifierDto = getRegistryIdentifier();
        mainRequest.getProviderDetails().getRegistryIdentifiers().add(identifierDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.RegistryIdentifierDto> list = maintainRegistryIdentifierService.getIdentifiers(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void smokeTestAddRegistryIdentifier_RejectDataBlock() {
        smokeTestAddRegistryIdentifier();
        clearChildren();
        RegistryIdentifierDto identifierDto = getRegistryIdentifier();
        mainRequest.getProviderDetails().getRegistryIdentifiers().add(identifierDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.RegistryIdentifierDto> list = maintainRegistryIdentifierService.getIdentifiers(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void smokeTestChangeRegistryIdentifier() {
        smokeTestAddRegistryIdentifier();
        clearChildren();

        RegistryIdentifierDto identifierDto = getRegistryIdentifier();
        identifierDto.setEndReasonCode("CHG");
        identifierDto.setEffectiveStartDate(Calendar.getInstance().getTime());

        mainRequest.getProviderDetails().getRegistryIdentifiers().add(identifierDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.RegistryIdentifierDto> list = maintainRegistryIdentifierService.getIdentifiers(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(3));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void smokeTestCorrectRegistryIdentifier() {
        smokeTestChangeRegistryIdentifier();
        clearChildren();

        RegistryIdentifierDto identifierDto = getRegistryIdentifier();
        identifierDto.setEndReasonCode("CORR");
        identifierDto.setEffectiveStartDate(Calendar.getInstance().getTime());
        mainRequest.getProviderDetails().getRegistryIdentifiers().add(identifierDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.RegistryIdentifierDto> list = maintainRegistryIdentifierService.getIdentifiers(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(4));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void smokeTestCeaseRegistryIdentifier() {
        smokeTestCorrectRegistryIdentifier();
        clearChildren();

        RegistryIdentifierDto identifierDto = getRegistryIdentifier();
        identifierDto.setEndReasonCode("CEASE");
        identifierDto.setEffectiveStartDate(Calendar.getInstance().getTime());
        mainRequest.getProviderDetails().getRegistryIdentifiers().add(identifierDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.RegistryIdentifierDto> list = maintainRegistryIdentifierService.getIdentifiers(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(5));
    }

    @Test
    public void testAddPersonName() {
        clearChildren();
        PersonNameDto nameDto = getPersonNameDto();
        mainRequest.getProviderDetails().getIndNames().add(nameDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.PersonNameDto> list = maintainPersonNameService.getNames(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testUpdatePersonName_WithDifferentType_Should_Add() {
        testAddPersonName();
        clearChildren();
        PersonNameDto nameDto = getPersonNameDto();
        nameDto.setTypeCode("CRED");
        nameDto.setEndReasonCode("CHG");
        mainRequest.getProviderDetails().getIndNames().add(nameDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.PersonNameDto> list = maintainPersonNameService.getNames(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(2));
    }

    @Test
    public void testAddPersonName_RejectDatablock() {
        testAddPersonName();
        clearChildren();
        PersonNameDto nameDto = getPersonNameDto();
        mainRequest.getProviderDetails().getIndNames().add(nameDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.PersonNameDto> list = maintainPersonNameService.getNames(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testChangePersonName() {
        testAddPersonName();
        clearChildren();

        PersonNameDto nameDto = getPersonNameDto();
        nameDto.setEndReasonCode("CHG");
        nameDto.setFirstName(getRandom());
        mainRequest.getProviderDetails().getIndNames().add(nameDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.PersonNameDto> list = maintainPersonNameService.getNames(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(3));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testCorrectPersonName() {
        testChangePersonName();
        clearChildren();

        PersonNameDto nameDto = getPersonNameDto();
        nameDto.setEndReasonCode("CORR");
        nameDto.setFirstName(getRandom());
        mainRequest.getProviderDetails().getIndNames().add(nameDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.PersonNameDto> list = maintainPersonNameService.getNames(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(4));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testCeasePersonName() {
        testCorrectPersonName();
        clearChildren();

        PersonNameDto nameDto = getPersonNameDto();
        nameDto.setEndReasonCode("CEASE");
        mainRequest.getProviderDetails().getIndNames().add(nameDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.PersonNameDto> list = maintainPersonNameService.getNames(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(5));
    }


    String testAddTeleCom_OwnerCode = null;
    
    @Test
    public void testAddTeleCom() {
        clearChildren();
        TelecommunicationDto teleDto = getTelecomDto();
        mainRequest.getProviderDetails().getTelecommunication().add(teleDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.TelecommunicationDto> list = maintainTelephoneService.refreshTelecommunications(getRefreshTeleDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
        
        testAddTeleCom_OwnerCode = list.get(0).getDataOwnerCode();
    }

    @Test
    public void testUpdateTeleCom_WithDifferentType_Should_Add() {
        testAddTeleCom();
        clearChildren();
        TelecommunicationDto teleDto = getTelecomDto();
        teleDto.setCommunicationPurposeCode("BC");
        teleDto.setEndReasonCode("CHG");
        mainRequest.getProviderDetails().getTelecommunication().add(teleDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.TelecommunicationDto> list = maintainTelephoneService.refreshTelecommunications(getRefreshTeleDto());
        assertThat(list, IsCollectionWithSize.hasSize(2));
    }

    @Test
    public void testAddTeleCom_RejectDataBlock() {
        testAddTeleCom();
        clearChildren();
        TelecommunicationDto teleDto = getTelecomDto();
        mainRequest.getProviderDetails().getTelecommunication().add(teleDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.TelecommunicationDto> list = maintainTelephoneService.refreshTelecommunications(getRefreshTeleDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testChangeTeleCom() {
        testAddTeleCom();
        clearChildren();
        TelecommunicationDto teleDto = getTelecomDto();
        teleDto.setEndReasonCode("CHG");
        teleDto.setAreaCode("ABC");
        mainRequest.getProviderDetails().getTelecommunication().add(teleDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.TelecommunicationDto> list = maintainTelephoneService.refreshTelecommunications(getRefreshTeleDto());
        assertThat(list, IsCollectionWithSize.hasSize(3));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testCorrectTeleCom() {
        testChangeTeleCom();
        clearChildren();
        TelecommunicationDto teleDto = getTelecomDto();
        teleDto.setEndReasonCode("CORR");
        teleDto.setAreaCode("5555");
        mainRequest.getProviderDetails().getTelecommunication().add(teleDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.TelecommunicationDto> list = maintainTelephoneService.refreshTelecommunications(getRefreshTeleDto());
        assertThat(list, IsCollectionWithSize.hasSize(4));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testCeaseTeleCom() {
        testCorrectTeleCom();
        clearChildren();
        TelecommunicationDto teleDto = getTelecomDto();
        teleDto.setEndReasonCode("CEASE");
        mainRequest.getProviderDetails().getTelecommunication().add(teleDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.TelecommunicationDto> list = maintainTelephoneService.refreshTelecommunications(getRefreshTeleDto());
        assertThat(list, IsCollectionWithSize.hasSize(5));
    }

    @Test
    public void testAddDemographicWithNoEndReasonCode() {
        addDemographics();
        clearChildren();
        DemographicDetailsDto dto = getDemographicDto();
        mainRequest.getProviderDetails().getDemographicDetails().add(dto);
        mainRequest.getProviderDetails().setProviderType("IND");
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertEquals(2, acknowledgments.size());
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    private void addDemographics() {
        clearChildren();
        DemographicDetailsDto dto = getDemographicDto();
        mainRequest.getProviderDetails().getDemographicDetails().add(dto);
        addIdentifier(mainRequest);
        maintainProviderEsbService.maintainProvider(mainRequest);
    }

    @Test
    public void testAddDemographicWithEndReasonCode() {
        addDemographics();
        clearChildren();
        DemographicDetailsDto dto = getDemographicDto();
        dto.setEndReasonCode("CHG");
        mainRequest.getProviderDetails().getDemographicDetails().add(dto);
        mainRequest.getProviderDetails().setProviderType("IND");
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertEquals(2, acknowledgments.size());
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));
    }

    @Test //REQ-00683    
    public void testAddDemographics_DeathDateBeforeBirth() throws ParseException {
        clearChildren();
        DemographicDetailsDto dto = getDemographicDto();
        dto.setEndReasonCode("CHG");
        dto.setBirthDate(new SimpleDateFormat("dd-MM-yyyy").parse("01-12-2015"));
        dto.setDeathDate(new SimpleDateFormat("dd-MM-yyyy").parse("01-12-2010"));
        mainRequest.getProviderDetails().getDemographicDetails().add(dto);
        mainRequest.getProviderDetails().setProviderType("IND");
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);

        String expectedMessage = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_DEATH_BEFORE_BIRTH);
        assertNotNull(response.getAcknowledgments());
        assertEquals(2, response.getAcknowledgments().size());
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment)it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment)it.next();
        assertTrue(expectedMessage.matches(".*" + acknowledgment.getMsgText() + ".*"));
    }

    @Test
    public void testAddEAddress_Invalid() {
        clearChildren();
        ElectronicAddressDto dto = getElectronicAddressDto();
        dto.setAddress("aaaaa");
        mainRequest.getProviderDetails().getElectronicAddresses().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto> list = maintainElectronicAddressService.refreshAllEAddresses(getRefreshEAddressDto());
        assertThat(list, IsCollectionWithSize.hasSize(0));
    }

    String testAddEAddress_DataOwnerCode=null;
    @Test
    public void testAddEAddress() {
        clearChildren();
        ElectronicAddressDto dto = getElectronicAddressDto();
        mainRequest.getProviderDetails().getElectronicAddresses().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto> list = maintainElectronicAddressService.refreshAllEAddresses(getRefreshEAddressDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
        testAddEAddress_DataOwnerCode = list.get(0).getDataOwnerCode();
    }

    @Test
    public void testAddEAddress_rejectDataBlock() {
        testAddEAddress();
        clearChildren();
        ElectronicAddressDto dto = getElectronicAddressDto();
        mainRequest.getProviderDetails().getElectronicAddresses().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto> list = maintainElectronicAddressService.refreshAllEAddresses(getRefreshEAddressDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testChangeEAddress() {
        testAddEAddress();
        clearChildren();
        ElectronicAddressDto dto = getElectronicAddressDto();
        dto.setEndReasonCode("CHG");
        dto.setAddress("aaa@gg.com");
        mainRequest.getProviderDetails().getElectronicAddresses().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto> list = maintainElectronicAddressService.refreshAllEAddresses(getRefreshEAddressDto());
        assertThat(list, IsCollectionWithSize.hasSize(3));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testCorrectEAddress() {
        testChangeEAddress();
        clearChildren();
        ElectronicAddressDto dto = getElectronicAddressDto();
        dto.setEndReasonCode("CORR");
        dto.setAddress("abcd@lll.com");
        mainRequest.getProviderDetails().getElectronicAddresses().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto> list = maintainElectronicAddressService.refreshAllEAddresses(getRefreshEAddressDto());
        assertThat(list, IsCollectionWithSize.hasSize(4));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testCeaseEAddress() {
        testCorrectEAddress();
        clearChildren();
        ElectronicAddressDto dto = getElectronicAddressDto();
        dto.setEndReasonCode("CEASE");
        mainRequest.getProviderDetails().getElectronicAddresses().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto> list = maintainElectronicAddressService.refreshAllEAddresses(getRefreshEAddressDto());
        assertThat(list, IsCollectionWithSize.hasSize(5));
    }

    @Test
    public void testUpdateStatusWithNoEndReasonCode() {
        clearChildren();
        StatusDto dto = getStatusDto();
        mainRequest.getProviderDetails().getStatuses().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test
    public void testUpdateTelecom_withEmptyStringEndReasonCode() {
        testAddTeleCom();
        clearChildren();
        TelecommunicationDto dto = getTelecomDto();
        dto.setEndReasonCode("");
        mainRequest.getProviderDetails().getTelecommunication().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test
    public void testUpdateStatusWithNotApplicableReasonCode() {
        clearChildren();
        StatusDto dto = getStatusDto();
        dto.setEndReasonCode("CHG");
        dto.setReasonCode("DEC");
        mainRequest.getProviderDetails().getStatuses().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment)it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment)it.next();
        assertThat(acknowledgment.getMsgText(), containsString("Invalid Status Reason Code"));
    }

    @Test
    @Ignore
    public void testUpdateStatusWithEndReasonCode() {
        clearChildren();
        StatusDto dto = getStatusDto();
        dto.setEndReasonCode("CHG");
        mainRequest.getProviderDetails().getStatuses().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

    }

    @Test
    public void testAddCondition() {
        clearChildren();
        ConditionsDto dto = getConditionsDto();
        mainRequest.getProviderDetails().getConditions().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ConditionsDto> list = maintainConditionService.refreshConditions(getRefreshConditionsDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testAddCondition_rejectDataBlock() {
        testAddCondition();
        clearChildren();
        ConditionsDto dto = getConditionsDto();
        mainRequest.getProviderDetails().getConditions().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ConditionsDto> list = maintainConditionService.refreshConditions(getRefreshConditionsDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testChangeCondition() {
        testAddCondition();
        clearChildren();
        ConditionsDto dto = getConditionsDto();
        dto.setEndReasonCode("CHG");
        dto.setEffectiveStartDate(Calendar.getInstance().getTime());
        mainRequest.getProviderDetails().getConditions().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ConditionsDto> list = maintainConditionService.refreshConditions(getRefreshConditionsDto());
        assertThat(list, IsCollectionWithSize.hasSize(3));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testCorrectCondition() {
        testChangeCondition();
        clearChildren();
        ConditionsDto dto = getConditionsDto();
        dto.setEndReasonCode("CORR");
        dto.setEffectiveStartDate(Calendar.getInstance().getTime());

        mainRequest.getProviderDetails().getConditions().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ConditionsDto> list = maintainConditionService.refreshConditions(getRefreshConditionsDto());
        assertThat(list, IsCollectionWithSize.hasSize(4));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testCeaseCondition() {
        testCorrectCondition();
        clearChildren();
        ConditionsDto dto = getConditionsDto();
        dto.setEndReasonCode("CEASE");
        dto.setEffectiveStartDate(Calendar.getInstance().getTime());

        mainRequest.getProviderDetails().getConditions().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ConditionsDto> list = maintainConditionService.refreshConditions(getRefreshConditionsDto());
        assertThat(list, IsCollectionWithSize.hasSize(5));
    }

    @Test
    public void testAddExpertise() {
        clearChildren();
        ExpertiseDto dto = getExpertiseDto();
        mainRequest.getProviderDetails().getExpertise().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ExpertiseDto> list = maintainExpertiseService.getExpetises(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testAddExpertise_rejectDataBlock() {
        testAddExpertise();
        clearChildren();
        ExpertiseDto dto = getExpertiseDto();
        mainRequest.getProviderDetails().getExpertise().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ExpertiseDto> list = maintainExpertiseService.getExpetises(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testChangeExpertise() {
        testAddExpertise();
        clearChildren();
        ExpertiseDto dto = getExpertiseDto();
        dto.setEndReasonCode("CHG");
        dto.setEffectiveStartDate(Calendar.getInstance().getTime());

        mainRequest.getProviderDetails().getExpertise().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ExpertiseDto> list = maintainExpertiseService.getExpetises(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(3));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testCorrectExpertise() {
        testChangeExpertise();
        clearChildren();
        ExpertiseDto dto = getExpertiseDto();
        dto.setEndReasonCode("CORR");
        dto.setEffectiveStartDate(Calendar.getInstance().getTime());

        mainRequest.getProviderDetails().getExpertise().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ExpertiseDto> list = maintainExpertiseService.getExpetises(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(4));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testCeaseExpertise() {
        testCorrectExpertise();
        clearChildren();
        ExpertiseDto dto = getExpertiseDto();
        dto.setEndReasonCode("CEASE");
        dto.setEffectiveStartDate(Calendar.getInstance().getTime());

        mainRequest.getProviderDetails().getExpertise().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ExpertiseDto> list = maintainExpertiseService.getExpetises(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(5));
    }

    @Test
    public void testAddCredential() {
        clearChildren();
        CredentialsDto dto = getCredentialDto();
        mainRequest.getProviderDetails().getCredentials().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.CredentialsDto> list = maintainCredentialsService.refreshCredentials(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testAddCredential_NotApplicableCredential() {
        clearChildren();
        CredentialsDto dto = getCredentialDto();
        dto.setTypeCode("BN");//BN is not applicable for role type DEN
        mainRequest.getProviderDetails().getCredentials().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment)it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment)it.next();
        assertThat(acknowledgment.getMsgText(), containsString("Invalid Credential Type"));

    }

    @Test
    public void addIdentifier_withNotApplicableIdentifierType() {
        clearChildren();
        addIdentifier(mainRequest);
        CollegeIdentifierDto collegeDto = new CollegeIdentifierDto();
        collegeDto.setIdentifier("TEST");
        collegeDto.setTypeCode("RMID");
        collegeDto.setEffectiveStartDate(new Date());
        mainRequest.getProviderDetails().getIdentifiers().add(collegeDto);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Iterator it = response.getAcknowledgments().iterator();
        Acknowledgment acknowledgment = (Acknowledgment)it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment)it.next();
        assertThat(acknowledgment.getMsgText(), containsString("Invalid Identifier Type"));
    }

    @Test
    public void updateIdentifier_withNullIdentifier() {
        clearChildren();
        addIdentifier(mainRequest);
        CollegeIdentifierDto collegeDto = mainRequest.getProviderDetails().getIdentifiers().get(0);
        collegeDto.setIdentifier(null);
        collegeDto.setEffectiveStartDate(new Date());

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Acknowledgment acknowledgment = response.getAcknowledgments().iterator().next();
        assertFalse(acknowledgment.getMsgText().equals(successMsg));
    }

    @Test
    public void testAddCredential_rejectDataBlock() {
        testAddCredential();
        clearChildren();
        CredentialsDto dto = getCredentialDto();
        mainRequest.getProviderDetails().getCredentials().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = response.getAcknowledgments().iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.CredentialsDto> list = maintainCredentialsService.refreshCredentials(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testChangeCredential() {
        testAddCredential();
        clearChildren();
        CredentialsDto dto = getCredentialDto();
        dto.setEndReasonCode("CHG");
        dto.setDesignation(getRandom());
        mainRequest.getProviderDetails().getCredentials().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.CredentialsDto> list = maintainCredentialsService.refreshCredentials(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(3));
    }

    @Test
    public void testChangeNoChange() {
        testAddCredential();
        clearChildren();
        CredentialsDto dto = getCredentialDto();
        dto.setEndReasonCode("CHG");
        mainRequest.getProviderDetails().getCredentials().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments, IsCollectionWithSize.hasSize(2));
        Iterator it = acknowledgments.iterator();
        Acknowledgment acknowledgment = (Acknowledgment)it.next();
        acknowledgment = (Acknowledgment)it.next();
        assertThat(acknowledgment.getMsgText(), equalTo("No change has been found to update. Credential"));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testCorrectCredential() {
        testChangeCredential();
        clearChildren();
        CredentialsDto dto = getCredentialDto();
        dto.setEndReasonCode("CORR");
        dto.setDesignation(getRandom());
        mainRequest.getProviderDetails().getCredentials().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.CredentialsDto> list = maintainCredentialsService.refreshCredentials(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(4));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testCeaseCredential() {
        testCorrectCredential();
        clearChildren();
        CredentialsDto dto = getCredentialDto();
        dto.setEndReasonCode("CEASE");
        mainRequest.getProviderDetails().getCredentials().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.CredentialsDto> list = maintainCredentialsService.refreshCredentials(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(5));
    }

    @Test
    public void testAddDisciplinaryAction() {
        clearChildren();
        DisciplinaryActionDto dto = getDisciplinaryActionDto();
        mainRequest.getProviderDetails().getDisciplinaryActions().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));
        assertThat(response.getProviderDetails().getDisciplinaryActions().size(), equalTo(1));
        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.DisciplinaryActionDto> list = maintainDisciplinaryActionService.refreshDisciplinaryActions(getRefreshDiscplinaryActionDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testAddDisciplinaryAction_rejectDataBlock() {
        testAddDisciplinaryAction();
        clearChildren();
        DisciplinaryActionDto dto = getDisciplinaryActionDto();
        mainRequest.getProviderDetails().getDisciplinaryActions().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.DisciplinaryActionDto> list = maintainDisciplinaryActionService.refreshDisciplinaryActions(getRefreshDiscplinaryActionDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testAddConfidentiality() {
        clearChildren();
        ConfidentialityIndicatorDto dto = getConfidentialityIndicatorDto();
        mainRequest.getProviderDetails().getConfidentialityIndicators().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));
        assertThat(response.getProviderDetails().getConfidentialityIndicators().size(), equalTo(1));
        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ConfidentialityIndicatorDto> list = maintainConfidentialityService.refreshConfidentialityIndicators(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testUpdateConfidentiality_Change_ShouldFail() {
        testAddConfidentiality();
        clearChildren();
        ConfidentialityIndicatorDto dto = getConfidentialityIndicatorDto();
        dto.setEndReasonCode("CHG");
        mainRequest.getProviderDetails().getConfidentialityIndicators().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        Acknowledgment acknowledgment = (Acknowledgment)iter.next();
        acknowledgment = (Acknowledgment)iter.next();
        assertTrue(acknowledgment.getMsgText().matches(MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_CONFIDENTIALITY_END_REASON))[1]));

    }

    @Test
    public void testAddConfidentiality_NoAccess() {
        clearChildren();
        mainRequest.setRegistryUserOrgId("plr-restricted");
        ConfidentialityIndicatorDto dto = getConfidentialityIndicatorDto();
        mainRequest.getProviderDetails().getConfidentialityIndicators().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test
    public void testAddConfidentiality_Multiple_RejectDataBlock() {
        testAddConfidentiality();
        clearChildren();
        ConfidentialityIndicatorDto dto = getConfidentialityIndicatorDto();
        mainRequest.getProviderDetails().getConfidentialityIndicators().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.ConfidentialityIndicatorDto> list = maintainConfidentialityService.refreshConfidentialityIndicators(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testUpdateProviderRelationShipWithNoEndReasonCode() {
        clearChildren();
        ProviderRelationshipDto dto = getProviderRelationshipDto();
        mainRequest.getProviderDetails().getProviderRelationships().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
    }

    @Test
    public void testUpdateProviderRelationShipWithEndReasonCode() {
        Logger.getLogger(MaintainProviderEsbServiceTest.class.getName()).log(Level.INFO, "testUpdateProviderRelationShipWithEndReasonCode");
        clearChildren();
        ProviderRelationshipDto dto = getProviderRelationshipDto();
        dto.setEndReasonCode("CHG");
        mainRequest.getProviderDetails().getProviderRelationships().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), is(greaterThan(0)));
        List<Acknowledgment> list = new ArrayList<>(acknowledgments);
        for (Acknowledgment ack : list) {
            Logger.getLogger(MaintainProviderEsbServiceTest.class.getName()).log(Level.INFO, String.format("ack: '%s'", ack));
        }
        Acknowledgment ack = list.get(0);
        // "MTN 0000" is the "The provider transaction was processed" message.
        assertEquals("PRS.PRP.MTN.UNK.0.0.0000", ack.getMsgCode());
        ack = list.get(1);
        // "UNK 7048" is the "No change has been found to update" message.
        // "CRE 0003" is the "Registry-generated Identifiers were created" message.
        if (!ack.getMsgCode().equals("GRS.SYS.UNK.UNK.1.1.7048") && !ack.getMsgCode().equals("PRS.PRV.OID.CRE.0.0.0003")) {
            fail(String.format("Expected one of 'GRS.SYS.UNK.UNK.1.1.7048' or 'PRS.PRV.OID.CRE.0.0.0003' but was '%s'", ack.toString()));
        }
    }

    @Test
    public void testAddRegUserRelation() {
        clearChildren();
        RegistryUserRelationshipDto dto = getRegUserRelationshipDto();
        mainRequest.getProviderDetails().getRegistryUserRelationships().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.RegistryUserRelationshipDto> list = maintainRegistryUserRelationshipService.getRelationships(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testAddRegUserRelation_RejectDataBlock() {
        testAddRegUserRelation();
        clearChildren();
        RegistryUserRelationshipDto dto = getRegUserRelationshipDto();
        mainRequest.getProviderDetails().getRegistryUserRelationships().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.RegistryUserRelationshipDto> list = maintainRegistryUserRelationshipService.getRelationships(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    /**
     * Test that an valid request returns an success acknowledgment and the
     * request is processed.
     */
    @Test
    public void testChangeRegUserRelation() {
        testAddRegUserRelation();
        clearChildren();

        RegistryUserRelationshipDto dto = getRegUserRelationshipDto();
        dto.setEndReasonCode("CHG");
        dto.setEffectiveStartDate(Calendar.getInstance().getTime());

        mainRequest.getProviderDetails().getRegistryUserRelationships().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.RegistryUserRelationshipDto> list = maintainRegistryUserRelationshipService.getRelationships(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(3));
    }

    @Test
    public void testAddNote() {
        clearChildren();
        NoteDto dto = getNoteDto();
        mainRequest.getProviderDetails().getNotes().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));
        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.NoteDto> list = maintainNoteService.getNotes(PAUTH_ID);
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testAddNoteWithEmptyNoteText() {
        clearChildren();
        NoteDto dto = getNoteDto();
        dto.setNoteText("");
        mainRequest.getProviderDetails().getNotes().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        Acknowledgment firstAcknowledgment = iter.next();
        assertThat(firstAcknowledgment.getMsgCode()+": "+firstAcknowledgment.getMsgText(), equalTo(failedMsg));
        Acknowledgment secondAcknowledgment = iter.next();
        assertThat(secondAcknowledgment.getMsgCode()+": "+secondAcknowledgment.getMsgText(), equalTo(notBlankPart1+"Note Text"+notBlankPart2));

    }

    @Test
    public void testAddNoteWithBlankNoteText() {
        clearChildren();
        NoteDto dto = getNoteDto();
        dto.setNoteText("   ");
        mainRequest.getProviderDetails().getNotes().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        Acknowledgment firstAcknowledgment = iter.next();
        assertThat(firstAcknowledgment.getMsgCode()+": "+firstAcknowledgment.getMsgText(), equalTo(failedMsg));
        Acknowledgment secondAcknowledgment = iter.next();
        assertThat(secondAcknowledgment.getMsgCode()+": "+secondAcknowledgment.getMsgText(), equalTo(notBlankPart1+"Note Text"+notBlankPart2));

    }
    

    @Test
    public void testAddInformationRouteFile() {
        testAddEAddress();
        clearChildren();
        InformationRouteDto dto = getInformationRouteDtoFile();
        dto.getElectronicAddressDto().setDataOwnerCode(testAddEAddress_DataOwnerCode);
        mainRequest.getProviderDetails().getInformationRoutes().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.InformationRouteDto> list = maintainInformationRouteService.getInformationRoutes(getRefreshInfoRouteDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testAddInformationRouteFile_RejectDataBlock() {
        testAddInformationRouteFile();
        clearChildren();
        InformationRouteDto dto = getInformationRouteDtoFile();
        dto.getElectronicAddressDto().setDataOwnerCode(testAddEAddress_DataOwnerCode);
        mainRequest.getProviderDetails().getInformationRoutes().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.InformationRouteDto> list = maintainInformationRouteService.getInformationRoutes(getRefreshInfoRouteDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    @Ignore
    public void testAddInformationRouteFax() {
        testAddTeleCom();
        clearChildren();
        InformationRouteDto dto = getInformationRouteDtoFax();
        dto.getElectronicAddressDto().setDataOwnerCode(testAddTeleCom_OwnerCode);
        mainRequest.getProviderDetails().getInformationRoutes().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.InformationRouteDto> list = maintainInformationRouteService.getInformationRoutes(getRefreshInfoRouteDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    @Ignore
    public void testChangeInformationRouteFax_No_End_ReasonCode() {
        testAddInformationRouteFax();
        clearChildren();
        InformationRouteDto dto = getInformationRouteDtoFax();
        dto.getElectronicAddressDto().setDataOwnerCode(testAddTeleCom_OwnerCode);
        mainRequest.getProviderDetails().getInformationRoutes().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.InformationRouteDto> list = maintainInformationRouteService.getInformationRoutes(getRefreshInfoRouteDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    @Ignore
    public void testChangeInformationRouteFax_Valid_End_ReasonCode() {
        testAddInformationRouteFax();
        clearChildren();
        InformationRouteDto dto = getInformationRouteDtoFax();
        dto.getElectronicAddressDto().setDataOwnerCode(testAddTeleCom_OwnerCode);
        dto.setEndReasonCode("CHG");
        dto.setEffectiveStartDate(Calendar.getInstance().getTime());
        mainRequest.getProviderDetails().getInformationRoutes().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.InformationRouteDto> list = maintainInformationRouteService.getInformationRoutes(getRefreshInfoRouteDto());
        assertThat(list, IsCollectionWithSize.hasSize(3));
    }

    @Test
    public void testAddInformationRouteCourier() {
        testAddAddress();
        clearChildren();
        InformationRouteDto dto = getInformationRouteDtoCourier();
        dto.getAddressDto().setDataOwnerCode(testAddAddress_DataOwnerCode);
        mainRequest.getProviderDetails().getInformationRoutes().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertTrue(acknowledgments.size() >= 2);
        assertTrue(checkAcknowledgements(acknowledgments, successCode));
        assertTrue(checkAcknowledgements(acknowledgments, changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.InformationRouteDto> list = maintainInformationRouteService.getInformationRoutes(getRefreshInfoRouteDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testAddInformationRouteCourier_No_Address_Exists() {
        clearChildren();
        InformationRouteDto dto = getInformationRouteDtoCourier();
        mainRequest.getProviderDetails().getInformationRoutes().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.InformationRouteDto> list = maintainInformationRouteService.getInformationRoutes(getRefreshInfoRouteDto());
        assertThat(list, IsCollectionWithSize.hasSize(0));
    }

    @Test
    public void testAddInformationRouteFile_No_EAddress_Exists() {
        clearChildren();
        InformationRouteDto dto = getInformationRouteDtoFile();
        mainRequest.getProviderDetails().getInformationRoutes().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.InformationRouteDto> list = maintainInformationRouteService.getInformationRoutes(getRefreshInfoRouteDto());
        assertThat(list, IsCollectionWithSize.hasSize(0));
    }

    @Test
    public void testAddInformationRouteFax_No_Telecom_Exists() {
        clearChildren();
        InformationRouteDto dto = getInformationRouteDtoFax();
        mainRequest.getProviderDetails().getInformationRoutes().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.InformationRouteDto> list = maintainInformationRouteService.getInformationRoutes(getRefreshInfoRouteDto());
        assertThat(list, IsCollectionWithSize.hasSize(0));
    }

    @Test
    public void testAddworkLocation_With_no_details() {
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDto> list = maintainWorkLocationService.getWorkLocations(getRefreshProviderDto());
        assertThat(list, IsCollectionWithSize.hasSize(0));
    }

    @Test
    public void testAddWorkLocation() {
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100L);
        dto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDto> list = maintainWorkLocationService.getWorkLocations(getRefreshProviderDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testUpdateWorkLocation_no_End_reason_code() {
        testAddWorkLocation();
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100L);
        dto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDto> list = maintainWorkLocationService.getWorkLocations(getRefreshProviderDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testUpdateWorkLocation_Valid_End_reason_code() {
        testAddWorkLocation();
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100L);
        dto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
        dto.getWorkLocationDetails().get(0).setEndReasonCode("CHG");
        dto.getWorkLocationDetails().get(0).setEffectiveStartDate(Calendar.getInstance().getTime());
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDto> list = maintainWorkLocationService.getWorkLocations(getRefreshProviderDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto> detailsList = list.iterator().next().getWorkLocationDetails();
        assertThat(detailsList, IsCollectionWithSize.hasSize(3));

    }

    @Test
    public void testAddAddress_WorkLocation() {
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100L);
        dto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
        dto.getAddresses().add(getAddress());
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDto> list = maintainWorkLocationService.getWorkLocations(getRefreshProviderDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto> detailsList = list.iterator().next().getWorkLocationDetails();
        assertThat(detailsList, IsCollectionWithSize.hasSize(1));
        List<ca.bc.gov.health.plr.dto.provider.AddressDto> addressList = list.iterator().next().getAddresses();
        assertThat(addressList, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testUpdateAddress_WorkLocation_No_End_Reason_Code() {
        testAddAddress_WorkLocation();
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100L);
        AddressDto address = getAddress();
        dto.getAddresses().add(address);
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDto> list = maintainWorkLocationService.getWorkLocations(getRefreshProviderDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));

        List<ca.bc.gov.health.plr.dto.provider.AddressDto> addressList = list.iterator().next().getAddresses();
        assertThat(addressList, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testUpdateAddress_WorkLocation() {
        testAddAddress_WorkLocation();
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100L);
        AddressDto address = getAddress();
        address.setEndReasonCode("CHG");
        address.setAddressLineTwo(getRandom());
        dto.getAddresses().add(address);
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertTrue(acknowledgments.size() >= 2);
        assertTrue(checkAcknowledgements(acknowledgments, successCode));
        assertTrue(checkAcknowledgements(acknowledgments, changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDto> list = maintainWorkLocationService.getWorkLocations(getRefreshProviderDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));

        List<ca.bc.gov.health.plr.dto.provider.AddressDto> addressList = list.iterator().next().getAddresses();
        assertThat(addressList, IsCollectionWithSize.hasSize(3));
    }

    private boolean checkAcknowledgements(Collection<Acknowledgment> acks, String code) {
        Iterator<Acknowledgment> it = acks.iterator();
        while(it.hasNext()) {
            Acknowledgment ack = (Acknowledgment)it.next();
            if(ack.getMsgCode().equals(code)) {
                return true;
            }
        }
        return false;
    }
    
    @Test
    public void testAddTelecomAddress_WorkLocation() {
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100L);
        dto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
        dto.getTelecommunications().add(getTelecomDto());
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDto> list = maintainWorkLocationService.getWorkLocations(getRefreshProviderDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto> detailsList = list.iterator().next().getWorkLocationDetails();
        assertThat(detailsList, IsCollectionWithSize.hasSize(1));
        List<ca.bc.gov.health.plr.dto.provider.TelecommunicationDto> addressList = list.iterator().next().getTelecommunications();
        assertThat(addressList, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testUpdateTelecomAddress_WorkLocation_No_End_Reason_Code() {
        testAddTelecomAddress_WorkLocation();
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100L);
        TelecommunicationDto address = getTelecomDto();
        dto.getTelecommunications().add(address);
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDto> list = maintainWorkLocationService.getWorkLocations(getRefreshProviderDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));

        List<ca.bc.gov.health.plr.dto.provider.TelecommunicationDto> addressList = list.iterator().next().getTelecommunications();
        assertThat(addressList, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testUpdateTelecomAddress_WorkLocation() {
        testAddTelecomAddress_WorkLocation();
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100L);
        TelecommunicationDto address = getTelecomDto();
        address.setEndReasonCode("CHG");
        address.setAreaCode("9999");
        dto.getTelecommunications().add(address);
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDto> list = maintainWorkLocationService.getWorkLocations(getRefreshProviderDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));

        List<ca.bc.gov.health.plr.dto.provider.TelecommunicationDto> addressList = list.iterator().next().getTelecommunications();
        assertThat(addressList, IsCollectionWithSize.hasSize(3));
    }

    String testAddEAddress_WorkLocation_DataOwnerCode = null;
    @Test
    public void testAddEAddress_WorkLocation() {
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100L);
        dto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
        dto.getElectronicAddresses().add(getElectronicAddressDto());
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDto> list = maintainWorkLocationService.getWorkLocations(getRefreshProviderDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto> detailsList = list.iterator().next().getWorkLocationDetails();
        assertThat(detailsList, IsCollectionWithSize.hasSize(1));
        List<ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto> addressList = list.iterator().next().getElectronicAddresses();
        assertThat(addressList, IsCollectionWithSize.hasSize(1));
        testAddEAddress_WorkLocation_DataOwnerCode = list.get(0).getDataOwnerCode();

    }

    @Test
    public void testUpdateEAddress_WorkLocation_No_End_Reason_Code() {
        testAddEAddress_WorkLocation();
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100L);
        ElectronicAddressDto address = getElectronicAddressDto();
        dto.getElectronicAddresses().add(address);
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Acknowledgment acknowledgment = acknowledgments.iterator().next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDto> list = maintainWorkLocationService.getWorkLocations(getRefreshProviderDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));

        List<ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto> addressList = list.iterator().next().getElectronicAddresses();
        assertThat(addressList, IsCollectionWithSize.hasSize(1));
    }

    @Test
    public void testUpdateEAddress_WorkLocation() {
        testAddEAddress_WorkLocation();
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100L);
        ElectronicAddressDto address = getElectronicAddressDto();
        address.setEndReasonCode("CHG");
        address.setAddress("uuu@ff.com");
        dto.getElectronicAddresses().add(address);
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDto> list = maintainWorkLocationService.getWorkLocations(getRefreshProviderDto());
        assertThat(list, IsCollectionWithSize.hasSize(1));

        List<ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto> addressList = list.iterator().next().getElectronicAddresses();
        assertThat(addressList, IsCollectionWithSize.hasSize(3));
    }

    @Test
    public void testAddInformationRouteFile_WorkLocation() {
        testAddEAddress_WorkLocation();
        clearChildren();
        InformationRouteDto dto = getInformationRouteDtoFile();
        dto.getElectronicAddressDto().setDataOwnerCode(testAddEAddress_WorkLocation_DataOwnerCode);
        WorkLocationDto wrkLocDto = getWorkLocationDto();
        wrkLocDto.setIdentifier(100L);
        wrkLocDto.getInformationRoutes().add(dto);
        dto.setWorkLocationDataOwnerCode(testAddEAddress_WorkLocation_DataOwnerCode);
        dto.setWorkLocationIdentifier(100L);
        mainRequest.getProviderDetails().getWorkLocationList().add(wrkLocDto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> iter = acknowledgments.iterator();
        assertThat(iter.next().getMsgCode(), equalTo(successCode));
        assertThat(iter.next().getMsgCode(), equalTo(changedBlockCode));
    }

    @Test
    public void testUpdateAddress_NullEffectiveEndDate() throws ParseException {
        testAddAddress();
        clearChildren();
        AddressDto address = getAddress();
        address.setEffectiveEndDate(null);
        address.setEndReasonCode("CHG");
        address.setAddressLineTwo(getRandom());
        mainRequest.getProviderDetails().getAddresses().add(address);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertTrue(acknowledgments.size() >= 3);
        assertTrue(checkAcknowledgements(acknowledgments, successCode));
        assertTrue(checkAcknowledgements(acknowledgments, changedBlockCode));
    }

    @Test
    public void testUpdateAddress_CheckUserChid() throws ParseException {
        testAddAddress();
        clearChildren();
        AddressDto address = getAddress();
        address.setEndReasonCode("CHG");
        address.setAddressLineTwo(getRandom());
        mainRequest.getProviderDetails().getAddresses().add(address);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertTrue(acknowledgments.size() >= 2);
        assertTrue(checkAcknowledgements(acknowledgments, successCode));
        assertTrue(checkAcknowledgements(acknowledgments, changedBlockCode));
    }

    @Test
    public void testUpdateAddress_WithDifferentType_Should_Add() throws ParseException {
        testAddAddress();
        clearChildren();
        AddressDto address = getAddress();
        address.setEndReasonCode("CHG");
        address.setCommunicationPurposeCode("MC");
        mainRequest.getProviderDetails().getAddresses().add(address);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertTrue(acknowledgments.size() >= 2);
        assertTrue(checkAcknowledgements(acknowledgments, successCode));
        assertTrue(checkAcknowledgements(acknowledgments, changedBlockCode));
    }

    @Test
    public void testAddAddress_InvalidProviderType() throws ParseException {
        clearChildren();
        AddressDto address = getAddress();
        mainRequest.getProviderDetails().getAddresses().add(address);
        mainRequest.getProviderDetails().setProviderType("ABCD");
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator it = acknowledgments.iterator();
        Acknowledgment acknowledgment = (Acknowledgment)it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = (Acknowledgment)it.next();
        assertThat(acknowledgment.getMsgText(), containsString("Party Type"));
    }

    @Test //REQ-00963
    public void testCeaseLastActiveIdentifier() throws ParseException {
        clearChildren();
        addIdentifier(mainRequest);
        mainRequest.setRegistryUserOrgId("plr-restricted");
        CollegeIdentifierDto dto = mainRequest.getProviderDetails().getIdentifiers().get(0);
        dto.setEndReasonCode("CEASE");
        dto.setEffectiveStartDate(new Date());
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        boolean lastActiveError = false;
        for (Acknowledgment ack : acknowledgments) {
            if (BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_LAST_ACTIVE_IDENTIFIER_CEASED_PERMISSION).contains(ack.getMsgText())) {
                lastActiveError = true;
            }
        }
        assertTrue(lastActiveError);
    }

    @Test //REQ-00962
    public void testCeaseLastActiveName() throws ParseException {
        testAddPersonName();
        clearChildren();
        addIdentifier(mainRequest);
        mainRequest.setRegistryUserOrgId("plr-restricted");
        PersonNameDto dto = getPersonNameDto();
        dto.setEndReasonCode("CEASE");
        mainRequest.getProviderDetails().getIndNames().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        boolean lastActiveError = false;
        for (Acknowledgment ack : acknowledgments) {
            if (BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_LAST_ACTIVE_PERSON_NAME_CEASED_PERMISSION).contains(ack.getMsgText())) {
                lastActiveError = true;
            }
        }
        assertTrue(lastActiveError);
    }

    /*
     Test the metadata of response message is populated
     */
    @Test
    public void testResponseMetadatPopulated() {
        clearChildren();
        NoteDto note = getNoteDto();
        mainRequest.getProviderDetails().getNotes().add(note);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);

        assertNotNull(response.getTargetEnvironment());
        assertNotNull(response.getTargetOrganizationChid());
        assertNotNull(response.getSourceOrganizationChid());
        assertNotNull(response.getSourceNetworkAddressChid());
        assertNotNull(response.getTargetNetworkAddressChid());

        assertNull(response.getSourceFacilityId());
        assertNull(response.getTargetFacilityId());
        assertNull(response.getSourceServer());
        assertNull(response.getTargetServer());
    }

    @Test
    public void testInvalidUser_Null() {

        clearChildren();
        NoteDto note = getNoteDto();
        mainRequest.getProviderDetails().getNotes().add(note);
        mainRequest.setRegistryUserOrgId(null);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);

        assertThat(response.getAcknowledgments(), notNullValue());

        boolean authenticationErrorMsg = false;
        for (Acknowledgment ack : response.getAcknowledgments()) {

            if (ack.getMsgText().contains("Your authentication token is invalid")) {
                authenticationErrorMsg = true;
                break;
            }
        }

        assertTrue(authenticationErrorMsg);

    }

    @Test
    public void testInvalidUser() {
        clearChildren();
        NoteDto note = getNoteDto();
        mainRequest.getProviderDetails().getNotes().add(note);
        mainRequest.setRegistryUserOrgId(null);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);

        assertThat(response.getAcknowledgments(), notNullValue());

        boolean authenticationErrorMsg = false;
        for (Acknowledgment ack : response.getAcknowledgments()) {

            if (ack.getMsgText().contains("Your authentication token is invalid")) {
                authenticationErrorMsg = true;
                break;
            }
        }

        assertTrue(authenticationErrorMsg);

    }

}