package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.alltests.AllTestsIntegration;
import ca.bc.gov.health.plr.service.remote.BatchTransactionStatusServiceRemote;
import ca.bc.gov.health.plr.service.remote.MaintainProviderServiceRemote;
import ca.bc.gov.health.plr.service.remote.SearchProviderServiceRemote;
import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.converter.AccessProfileDtoConverter;
import ca.bc.gov.health.plr.dto.converter.AddressDtoConverter;
import ca.bc.gov.health.plr.dto.converter.ConditionDtoConverter;
import ca.bc.gov.health.plr.dto.converter.DisciplinaryActionDtoConverter;
import ca.bc.gov.health.plr.dto.converter.DistributionDtoConverter;
import ca.bc.gov.health.plr.dto.converter.ElectronicAddressDtoConverter;
import ca.bc.gov.health.plr.dto.converter.ExpertiseDtoConverter;
import ca.bc.gov.health.plr.dto.converter.InformationRouteDtoConverter;
import ca.bc.gov.health.plr.dto.converter.NoteDtoConverter;
import ca.bc.gov.health.plr.dto.converter.PersonNameDtoConverter;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.dto.converter.ProviderIdentifierDtoConverter;
import ca.bc.gov.health.plr.dto.converter.RegistryUserDtoConverter;
import ca.bc.gov.health.plr.dto.converter.StatusDtoConverter;
import ca.bc.gov.health.plr.dto.converter.TelephoneDtoConverter;
import ca.bc.gov.health.plr.dto.converter.WorkLocationDetailsDtoConverter;
import ca.bc.gov.health.plr.dto.converter.WorkLocationDtoConverter;
import ca.bc.gov.health.plr.dto.dps.DataElementPermissionDtoConverter;
import ca.bc.gov.health.plr.dto.reguser.RegistryUserDetailsConverter;
import ca.bc.gov.health.plr.ejb.session.GenerationNumService;
import ca.bc.gov.health.plr.ejb.session.GrsCtBooleanTypesFacade;
import ca.bc.gov.health.plr.ejb.session.GrsCtEndReasonTypesFacade;
import ca.bc.gov.health.plr.ejb.session.GrsCtMechanismsFacade;
import ca.bc.gov.health.plr.ejb.session.GrsPartiesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtCommunPurposeTypesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtDataOwnerCodesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtElectronicAddrTypesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtNameTypesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtProvExpertiseTypesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtProviderRoleTypesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtStatusCodesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtTelecomNumberTypesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtWorkLocationPurpsFacade;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import ca.bc.gov.health.plr.persistence.ConfigurationDao;
import ca.bc.gov.health.plr.persistence.ProviderDao;
import ca.bc.gov.health.plr.persistence.TestConstants;
import ca.bc.gov.health.plr.rule.provider.AccessRestrictionService;
import ca.bc.gov.health.plr.rule.provider.ProviderConfidentiality;
import ca.bc.gov.health.plr.rule.provider.ValidateEmailAddress;
import ca.bc.gov.health.plr.rule.provider.ValidateGender;
import ca.bc.gov.health.plr.rule.provider.search.ValidateSearchProviderTypePermission;
import ca.bc.gov.health.plr.service.GrsChangedRecordsFacade;
import ca.bc.gov.health.plr.service.PLRConfigurationResourceLoader;
import ca.bc.gov.health.plr.service.audit.ProviderChangeEventConsumer;
import ca.bc.gov.health.plr.service.distribution.DistributionEventConsumer;
import ca.bc.gov.health.plr.service.distribution.ProcessDistributionService;
import ca.bc.gov.health.plr.service.distribution.UpdateDistributionStatusService_HelperSynchronized;
import ca.bc.gov.health.plr.service.dps.DpsService;
import ca.bc.gov.health.plr.service.provider.security.AuthorizationService;
import ca.bc.gov.health.plr.service.registry.user.MaintainAccessProfileService;
import ca.bc.gov.health.plr.service.registry.user.MaintainDistributionService;
import ca.bc.gov.health.plr.service.registry.user.MaintainPartyService;
import ca.bc.gov.health.plr.service.registry.user.RegistryUserService;
import ca.bc.gov.health.plr.service.remote.BatchTransactionStatusServiceLocal;
import ca.bc.gov.health.plr.service.remote.MaintainEsbInformationRoutesService;
import ca.bc.gov.health.plr.service.remote.PLRDistributionServiceRemote;
import ca.bc.gov.health.plr.service.remote.ProviderMessageValidator;
import ca.bc.gov.health.plr.service.validators.DpsUniqueValidator;
import ca.bc.gov.health.plr.service.validators.EffectiveDatesValidator;
import ca.bc.gov.health.plr.service.validators.RegUserUniqueNameValidator;
import ca.bc.gov.health.plr.service.validators.RegUserUniqueOrgChidValidator;
import ca.bc.gov.health.plr.service.validators.UserChidGenerator;
import ca.bc.gov.health.plr.util.AddressDoctorBackgroundProcessorHelper;
import ca.bc.gov.health.plr.util.SpoofedUserHelper;
import ca.bc.gov.health.plr.util.TestConfig;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.embeddable.EJBContainer;
import javax.naming.NamingException;
import org.junit.AfterClass;
import org.junit.BeforeClass;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class IntegrationSetup {

    private static final String CLASSNAME = IntegrationSetup.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    private static final Properties props = TestConfig.getTestConfig();
    private static final String JNDI_PREFIX = props.getProperty(TestConstants.JNDI_PREFIX);

    private static final String ENTITY_MANAGER_PROXY = JNDI_PREFIX + "EntityManagerProxy";
    //SERVICES
     
    //private static final String ADDRESS_DOCTOR_CONNECTION_SERVICE = JNDI_PREFIX + "AddressDoctorConnectionService";
    private static final String ADDRESS_DOCTOR_BACKGROUND_PROCESSOR_HELPER = JNDI_PREFIX + "AddressDoctorBackgroundProcessorHelper";
    private static final String SEARCH_PROVIDER_SERVICE = JNDI_PREFIX + "SearchProviderService";
    private static final String MAINATAIN_PROVIDER_SERVICE = JNDI_PREFIX + "MaintainProviderService";
    private static final String MAINATAIN_PROVIDER_SERVICE_HELPER = JNDI_PREFIX + "MaintainProviderServiceHelper";
    private static final String ADDRESS_SUPPORT_SERVICE = JNDI_PREFIX + "AddressSupportService";
    private static final String PROVIDER_HELPER_SERVICE = JNDI_PREFIX + "ProviderHelperService";
    private static final String MAINTAIN_STATUS_SERVICE = JNDI_PREFIX + "MaintainStatusService";
    private static final String MAINTAIN_NOTE_SERVICE = JNDI_PREFIX + "MaintainNoteService";
    private static final String MAINTAIN_DEMOGRPHIC_DETAILS_SERVICE = JNDI_PREFIX + "MaintainDemographicDetailsService";
    private static final String MAINTAIN_REGID_SERVICE = JNDI_PREFIX + "MaintainRegistryIdentifierService";
    private static final String MAINTAIN_ELEC_ADDR_SERVICE = JNDI_PREFIX + "MaintainElectronicAddressService";
    private static final String MAINTAIN_WORK_LOCATION_AND_DETAILS_SERVICE = JNDI_PREFIX + "MaintainWorkLocationService";
    private static final String MAINTAIN_CONFIDENTIALITY_SERVICE = JNDI_PREFIX + "MaintainConfidentialityService";
    private static final String MAINTAIN_PROVIDER_RELATIONSHIP_SERVICE = JNDI_PREFIX + "MaintainProviderRelationshipService";
    private static final String MAINTAIN_TELEPHONE_SERVICE = JNDI_PREFIX + "MaintainTelephoneService";
    private static final String MAINTAIN_PROVIDER_IDENTIFIER_SERVICE = JNDI_PREFIX + "MaintainProviderIdentifierService";
    private static final String MAINTAIN_PERSON_NAME_SERVICE = JNDI_PREFIX + "MaintainPersonNameService";
    private static final String MAINTAIN_ORG_NAME_SERVICE = JNDI_PREFIX + "MaintainOrgNameService";
    private static final String MAINTAIN_INFORMATION_ROUTE_SERVICE = JNDI_PREFIX + "MaintainInformationRouteService";
    private static final String MAINTAIN_DISCIPLINARY_ACTION_SERVICE = JNDI_PREFIX + "MaintainDisciplinaryActionService";
    private static final String MAINTAIN_CONDITION_SERVICE = JNDI_PREFIX + "MaintainConditionService";
    private static final String MAINTAIN_ADDRESS_SERVICE = JNDI_PREFIX + "MaintainAddressService";
    private static final String MAINTAIN_CREDENTIALS_SERVICE = JNDI_PREFIX + "MaintainCredentialsService";
    private static final String MAINTAIN_EXPERTISE_SERVICE = JNDI_PREFIX + "MaintainExpertiseService";
    private static final String END_REASON_TYPE_FACADE = JNDI_PREFIX + "GrsCtEndReasonTypesFacade";
    private static final String MAINTAIN_REG_USER_REALTIONSHIP_SERVICE = JNDI_PREFIX + "MaintainRegistryUserRelationshipService";
    private static final String BOOLEAN_TYPE_FACADE = JNDI_PREFIX + "GrsCtBooleanTypesFacade";
    private static final String GRS_MECHANISM_FACADE = JNDI_PREFIX + "GrsCtMechanismsFacade";
    private static final String COMMUNICATION_PURPOSE_TYPE_FACADE = JNDI_PREFIX + "PrsCtCommunPurposeTypesFacade";
    private static final String PRS_NAME_TYPE_FACADE = JNDI_PREFIX + "PrsCtNameTypesFacade";
    private static final String PROVIDER_EXPERTISE_TYPE_FACADE = JNDI_PREFIX + "PrsCtProvExpertiseTypesFacade";
    private static final String REGISTRY_USER_SERVICE = JNDI_PREFIX + "RegistryUserService";
    private static final String GENERATION_NUM_SERVICE = JNDI_PREFIX + "GenerationNumService";
    private static final String JOURNAL_SERVICE = JNDI_PREFIX + "JournalService";
    private static final String ACCESS_PROFILE_SERVICE = JNDI_PREFIX + "MaintainAccessProfileService";
    private static final String MAINTAIN_DISTRIBUTION_SERVICE = JNDI_PREFIX + "MaintainDistributionService";
    private static final String PARTY_SERVICE = JNDI_PREFIX + "MaintainPartyService";
    private static final String DPS_SERVICE = JNDI_PREFIX + "DpsService";
    private static final String DISTRIBUTION_SERVICE = JNDI_PREFIX + "ProcessDistributionService";
    protected static final String AUTHENTICATED_USER = JNDI_PREFIX + "User";
    private static final String PROVIDER_CHANGE_EVENT_CONSUMER = JNDI_PREFIX + "ProviderChangeEventConsumer";
    private static final String DISTRIBUTION_EVENT_CONSUMER = JNDI_PREFIX + "DistributionEventConsumer";
    private static final String PLR_CONFIGURATION_LOADER = JNDI_PREFIX + "PLRConfigurationResourceLoader";

    private static final String PROVIDER_ROLE_TYPE_FACADE = JNDI_PREFIX + "PrsCtProviderRoleTypesFacade";
    private static final String PROVIDER_DATA_OWNER_FACADE = JNDI_PREFIX + "PrsCtDataOwnerCodesFacade";
    private static final String PROVIDER_ELECTRONIC_ADDR_TYPE_FACADE = JNDI_PREFIX + "PrsCtElectronicAddrTypesFacade";
    private static final String PROVIDER_WORK_LOCATION_PURPS_TYPE_FACADE = JNDI_PREFIX + "PrsCtWorkLocationPurpsFacade";
    private static final String PROVIDER_TELECOM_NUMBER_TYPE_FACADE = JNDI_PREFIX + "PrsCtTelecomNumberTypesFacade";
    private static final String PROVIDER_STATUS_CODES_TYPE_FACADE = JNDI_PREFIX + "PrsCtStatusCodesFacade";
    private static final String CHANGED_RECORDS_FACADE = JNDI_PREFIX + "GrsChangedRecordsFacade";
    private static final String UPDATE_DISTRIBUTION_STATUS_SERVICE = JNDI_PREFIX + "UpdateDistributionStatusService!ca.bc.gov.health.plr.service.remote.PLRDistributionServiceRemote";
    private static final String UPDATE_DISTRIBUTION_STATUS_HELPER = JNDI_PREFIX + "UpdateDistributionStatusService_HelperSynchronized";

    //END OF SERVICES
    private static final String CODES_DAO_SERVICE = JNDI_PREFIX + "CodesDao";
    private static final String PROVIDER_DAO_SERVICE = JNDI_PREFIX + "ProviderDao";
    private static final String VALIDATE_EMAIL_NAME = JNDI_PREFIX + "ValidateEmailAddress";
    private static final String AUTHORIZATION_SERVICE = JNDI_PREFIX + "AuthorizationService";
    private static final String VALIDATE_SEARCH_PROVIDER_TYPE_PERMISSIONS = JNDI_PREFIX + "ValidateSearchProviderTypePermission";
    private static final String VALIDATE_GENDER = JNDI_PREFIX + "ValidateGender";
    //DTO CONVERTERS
    private static final String ELECTRONIC_ADDRESS_DTO_CONVERTER = JNDI_PREFIX + "ElectronicAddressDtoConverter";
    private static final String WORK_LOCATION_DTO_CONVERTER = JNDI_PREFIX + "WorkLocationDtoConverter";
    private static final String WORK_LOCATION_DETAILS_DTO_CONVERTER = JNDI_PREFIX + "WorkLocationDetailsDtoConverter";
    private static final String TELEPHONE_DTO_CONVERTER = JNDI_PREFIX + "TelephoneDtoConverter";
    private static final String IDENTIFIER_DTO_CONVERTER = JNDI_PREFIX + "ProviderIdentifierDtoConverter";
    private static final String PERSON_NAME_DTO_CONVERTER = JNDI_PREFIX + "PersonNameDtoConverter";
    private static final String INFORMATION_ROUTE_DTO_CONVERTER = JNDI_PREFIX + "InformationRouteDtoConverter";
    private static final String DISCIPLINARY_ACTION_DTO_CONVERTER = JNDI_PREFIX + "DisciplinaryActionDtoConverter";
    private static final String CONDITION_DTO_CONVERTER = JNDI_PREFIX + "ConditionDtoConverter";
    private static final String ADDRESS_DTO_CONVERTER = JNDI_PREFIX + "AddressDtoConverter";
    private static final String EXPERTISE_DTO_CONVERTER = JNDI_PREFIX + "ExpertiseDtoConverter";
    private static final String NOTE_DTO_CONVERTER = JNDI_PREFIX + "NoteDtoConverter";
    private static final String CONFIGURATION_DAO = JNDI_PREFIX + "ConfigurationDao";
    private static final String REGISTRY_USER_DTO_CONVERTER = JNDI_PREFIX + "RegistryUserDtoConverter";
    private static final String ACCESS_PROFILE_DTO_CONVERTER = JNDI_PREFIX + "AccessProfileDtoConverter";
    private static final String DISTRIBUTION_DTO_CONVERTER = JNDI_PREFIX + "DistributionDtoConverter";
    private static final String PROVIDER_DTO_CONVERTER = JNDI_PREFIX + "ProviderDtoConverter";
    private static final String REGISTRY_USER_DETAILS_CONVERTER = JNDI_PREFIX + "RegistryUserDetailsConverter";
    private static final String REG_USER_UNIQUE_NAME_VALIDATOR = JNDI_PREFIX + "RegUserUniqueNameValidator";
    private static final String REG_USER_UNIQUE_CHID_VALIDATOR = JNDI_PREFIX + "RegUserUniqueOrgChidValidator";
    private static final String EFFECTIVE_DATES_VALIDATOR = JNDI_PREFIX + "EffectiveDatesValidator";
    private static final String PROVIDER_AUTH_SERVICE = JNDI_PREFIX + "ProviderAuthorizationService";
    private static final String ACCESS_RESTRICTION_SERVICE = JNDI_PREFIX + "AccessRestrictionService";
    private static final String MAINTAIN_PROVIDER_SERVICE_REMOTE = JNDI_PREFIX + "MaintainProviderEsbService!ca.bc.gov.health.plr.service.remote.MaintainProviderServiceRemote";
    private static final String DPS_UNIQUE_VALIDATOR = JNDI_PREFIX + "DpsUniqueValidator";
    private static final String DPS_CONVERTER = JNDI_PREFIX + "DataElementPermissionDtoConverter";
    private static final String USER_CHID_GENERATOR = JNDI_PREFIX + "UserChidGenerator";
    private static final String MAINTAIN_ESB_INFO_ROUTES = JNDI_PREFIX + "MaintainEsbInformationRoutesService";
    private static final String STATUS_DTO_CONVERTER = JNDI_PREFIX + "StatusDtoConverter";
    private static final String PROVIDER_MESSAGE_VALIDATOR = JNDI_PREFIX + "ProviderMessageValidator";
    private static final String SEARCH_PROVIDER_SERVICE_REMOTE = JNDI_PREFIX + "SearchProviderEsbService!ca.bc.gov.health.plr.service.remote.SearchProviderServiceRemote";
    private static final String GRS_PARTIES_FACADE = JNDI_PREFIX + "GrsPartiesFacade";
    private static final String PROVIDER_CONFIDENTIALITY = JNDI_PREFIX + "ProviderConfidentiality";
    private static final String BATCH_TX_STATUS_SERVICE_LOCAL = JNDI_PREFIX + "BatchTransactionStatusService!ca.bc.gov.health.plr.service.remote.BatchTransactionStatusServiceLocal";
    private static final String BATCH_TX_STATUS_SERVICE_REMOTE = JNDI_PREFIX + "BatchTransactionStatusService!ca.bc.gov.health.plr.service.remote.BatchTransactionStatusServiceRemote";
    //END OF DTO CONVERTERS
    //public static AddressDoctorConnectionService addressDoctorConnectionService;
    public static EJBContainer container;
    public static EntityManagerProxy entityManagerProxy;
    public static SearchProviderService searchProviderService;
    public static AddressSupportService addressSupportService;
    public static MaintainProviderService maintainProviderService;
    public static MaintainProviderServiceHelper maintainProviderServiceHelper;
    public static ProviderHelperService providerHelperService;
    public static MaintainStatusService maintainStatusService;
    public static MaintainNoteService maintainNoteService;
    public static MaintainDemographicDetailsService maintainDemographicDetailsService;
    public static MaintainRegistryIdentifierService maintainRegistryIdentifierService;
    public static MaintainElectronicAddressService maintainElectronicAddressService;
    public static MaintainWorkLocationService maintainWorkLocationService;
    public static MaintainConfidentialityService maintainConfidentialityService;
    public static MaintainProviderRelationshipService maintainProviderRelationshipService;
    public static MaintainTelephoneService maintainTelephoneService;
    public static MaintainProviderIdentifierService maintainProviderIdentifierService;
    public static MaintainPersonNameService maintainPersonNameService;
    public static MaintainOrgNameService maintainOrgNameService;
    public static MaintainInformationRouteService maintainInformationRouteService;
    public static MaintainDisciplinaryActionService maintainDisciplinaryActionService;
    public static MaintainConditionService maintainConditionService;
    public static MaintainAddressService maintainAddressService;
    public static MaintainCredentialsService maintainCredentialsService;
    public static MaintainExpertiseService maintainExpertiseService;
    public static GrsCtEndReasonTypesFacade endReasonTypeFacade;
    public static GrsCtBooleanTypesFacade grsCtBooleanTypesFacade;
    public static GrsCtMechanismsFacade grsCtMechanismsFacade;
    public static PrsCtCommunPurposeTypesFacade prsCtCommunPurposeTypesFacade;
    public static PrsCtNameTypesFacade prsCtNameTypesFacade;
    public static PrsCtProvExpertiseTypesFacade prsCtProvExpertiseTypesFacade;
    public static PrsCtProviderRoleTypesFacade prsCtProviderRoleTypesFacade;
    public static PrsCtDataOwnerCodesFacade prsCtDataOwnerCodesFacade;
    public static PrsCtElectronicAddrTypesFacade prsCtElectronicAddrTypesFacade;
    public static PrsCtWorkLocationPurpsFacade prsCtWorkLocationPurpsFacade;
    public static PrsCtTelecomNumberTypesFacade prsCtTelecomNumberTypesFacade;
    public static PrsCtStatusCodesFacade prsCtStatusCodesFacade;
    public static CodesDao codesDao;
    public static ProviderDao providerDao;
    public static ValidateEmailAddress validateEmailAddress;
    public static AuthorizationService authorizationService;
    public static ValidateSearchProviderTypePermission validateSearchProviderTypePermission;
    public static ValidateGender validateGender;
    public static ElectronicAddressDtoConverter eAddressConverter;
    public static WorkLocationDtoConverter workLocationConverter;
    public static WorkLocationDetailsDtoConverter workLocationDetailsConverter;
    public static TelephoneDtoConverter telephoneConverter;
    public static ProviderIdentifierDtoConverter providerIdentifierConverter;
    public static PersonNameDtoConverter personNameConverter;
    public static InformationRouteDtoConverter informationRouteConverter;
    public static DisciplinaryActionDtoConverter disciplinaryActionConverter;
    public static ConditionDtoConverter conditionConverter;
    public static AddressDtoConverter addressConverter;
    public static ExpertiseDtoConverter expertiseConverter;
    public static NoteDtoConverter noteDtoConverter;
    public static ConfigurationDao configurationDao;
    public static MaintainRegistryUserRelationshipService maintainRegistryUserRelationshipService;
    public static RegistryUserService registryUserService;
    public static RegistryUserDtoConverter registryUserDtoConverter;
    public static GenerationNumService generationNumService;
    public static MaintainAccessProfileService maintainAccessProfileService;
    public static MaintainDistributionService maintainDistributionService;
    public static AccessProfileDtoConverter accessProfileDtoConverter;
    public static DistributionDtoConverter distributionDtoConverter;
    public static ProviderDtoConverter providerDtoConverter;
    public static RegistryUserDetailsConverter registryUserDetailsConverter;
    public static RegUserUniqueNameValidator regUserUniqueNameValidator;
    public static RegUserUniqueOrgChidValidator regUserUniqueOrgChidValidator;
    public static MaintainPartyService maintainPartyService;
    public static EffectiveDatesValidator effectiveDatesValidator;
    public static ProviderAuthorizationService providerAuthorizationService;
    public static DpsService dpsService;
    public static AccessRestrictionService accessRestrictionService;
    public static DpsUniqueValidator dpsUniqueValidator;
    public static DataElementPermissionDtoConverter dataPermissionsConverter;
    public static UserChidGenerator chidGenerator;
    public static MaintainProviderServiceRemote maintainProviderEsbService;
    public static MaintainEsbInformationRoutesService maintainEsbInformationRoutesService;
    public static ProcessDistributionService distributionService;
    public static StatusDtoConverter statusDtoConverter;
    public static ProviderMessageValidator providerMessageValidator;
    public static SearchProviderServiceRemote searchProviderEsbService;
    public static GrsPartiesFacade grsPartiesFacade;
    public static ProviderConfidentiality providerConfidentiality;
    public static BatchTransactionStatusServiceLocal batchTransactionStatusServiceLocal;
    public static BatchTransactionStatusServiceRemote batchTransactionStatusServiceRemote;
    public static GrsChangedRecordsFacade grsChangedRecordsFacade;
    public static ProviderChangeEventConsumer providerChangeEventConsumer;
    public static DistributionEventConsumer distributionEventConsumer;
    public static PLRConfigurationResourceLoader plrConfigurationResourceLoader;
    public static PLRDistributionServiceRemote updateDistributionStatusService;
    public static UpdateDistributionStatusService_HelperSynchronized updateDistributionStatusService_HelperSynchronized;
    public static AddressDoctorBackgroundProcessorHelper addressDoctorBackgroundProcessorHelper;

    //GF configs 
    private static final String GF_EJB_EMBEDDED_PROPERTY_START = "org.glassfish.ejb.embedded.";

    private static final String GF_INSTALLATION_ROOT = GF_EJB_EMBEDDED_PROPERTY_START + "glassfish.installation.root";
    private static final String GF_INSTANCE_ROOT = GF_EJB_EMBEDDED_PROPERTY_START + "glassfish.instance.root";
    private static final String GF_DOMAIN_FILE = GF_EJB_EMBEDDED_PROPERTY_START + "glassfish.configuration.file";
    private static final String[] KNOWN_PACKAGES
            = {"org.glassfish.", "com.sun.enterprise.", "org.eclipse.", "org.jboss.weld."};
    private static final String IMPLICIT_CDI_ENABLED_PROP = "implicitCdiEnabled";

    @BeforeClass
    public static void parentSetUpClass() throws NamingException {
        Consts.JNDILOOKUP_CODESDAO = CODES_DAO_SERVICE;
        Consts.JNDILOOKUP_ADDRESS_SUPPORT = ADDRESS_SUPPORT_SERVICE;
        
        if (AllTestsIntegration.container != null) {
            container = AllTestsIntegration.container;
        } else {
            Map<Object, Object> properties = new HashMap<>();
            properties.put(EJBContainer.APP_NAME, DatabaseConstants.PERSISTENCE_CONTEXT_UNIT_NAME);
            properties.put(EJBContainer.MODULES, new File[]{
                new File(props.getProperty(TestConstants.PLR_EJB_CODE_BASE)),
                new File(props.getProperty(TestConstants.PLR_EJB_TEST_CODE_BASE))});
//            properties.put(GF_INSTANCE_ROOT, "C:/Servers/payara-5.193/payara5/glassfish/domains/domain1"); //${com.sun.aas.instanceRoot}
//            properties.put(GF_INSTALLATION_ROOT, "C:/Servers/payara-5.193/payara5/glassfish"); //${com.sun.aas.installRoot}

            properties.put(GF_INSTANCE_ROOT, "C:\\apps\\4-Tools\\payara-IntegrTest_5.2020.4\\payara5\\glassfish\\domains\\domain1"); //${com.sun.aas.instanceRoot}
            properties.put(GF_INSTALLATION_ROOT, "C:\\apps\\4-Tools\\payara-IntegrTest_5.2020.4\\payara5\\glassfish"); //${com.sun.aas.installRoot}
            
            LOG.log(Level.INFO, "IntegrationSetup looking up EJB payara container...");
            container = javax.ejb.embeddable.EJBContainer.createEJBContainer(properties);
            

        }
        setupJNDIResources();

        // proxy wrapper for entity manager since we can't direct access this from outside of the managed bean context.
        entityManagerProxy = (EntityManagerProxy) container.getContext().lookup(ENTITY_MANAGER_PROXY);

        // These are stateless services, so we initialize them only once.
        //addressDoctorConnectionService = (AddressDoctorConnectionService) container.getContext().lookup(ADDRESS_DOCTOR_CONNECTION_SERVICE);
        searchProviderService = (SearchProviderService) container.getContext().lookup(SEARCH_PROVIDER_SERVICE);
        maintainProviderService = (MaintainProviderService) container.getContext().lookup(MAINATAIN_PROVIDER_SERVICE);
        maintainProviderServiceHelper = (MaintainProviderServiceHelper) container.getContext().lookup(MAINATAIN_PROVIDER_SERVICE_HELPER);
        addressSupportService = (AddressSupportService) container.getContext().lookup(ADDRESS_SUPPORT_SERVICE);
        providerHelperService = (ProviderHelperService) container.getContext().lookup(PROVIDER_HELPER_SERVICE);
        maintainStatusService = (MaintainStatusService) container.getContext().lookup(MAINTAIN_STATUS_SERVICE);
        maintainNoteService = (MaintainNoteService) container.getContext().lookup(MAINTAIN_NOTE_SERVICE);
        maintainDemographicDetailsService = (MaintainDemographicDetailsService) container.getContext().lookup(MAINTAIN_DEMOGRPHIC_DETAILS_SERVICE);
        maintainRegistryIdentifierService = (MaintainRegistryIdentifierService) container.getContext().lookup(MAINTAIN_REGID_SERVICE);
        maintainElectronicAddressService = (MaintainElectronicAddressService) container.getContext().lookup(MAINTAIN_ELEC_ADDR_SERVICE);
        maintainWorkLocationService = (MaintainWorkLocationService) container.getContext().lookup(MAINTAIN_WORK_LOCATION_AND_DETAILS_SERVICE);
        maintainConfidentialityService = (MaintainConfidentialityService) container.getContext().lookup(MAINTAIN_CONFIDENTIALITY_SERVICE);
        maintainProviderRelationshipService = (MaintainProviderRelationshipService) container.getContext().lookup(MAINTAIN_PROVIDER_RELATIONSHIP_SERVICE);
        maintainTelephoneService = (MaintainTelephoneService) container.getContext().lookup(MAINTAIN_TELEPHONE_SERVICE);
        maintainProviderIdentifierService = (MaintainProviderIdentifierService) container.getContext().lookup(MAINTAIN_PROVIDER_IDENTIFIER_SERVICE);
        maintainPersonNameService = (MaintainPersonNameService) container.getContext().lookup(MAINTAIN_PERSON_NAME_SERVICE);
        maintainOrgNameService = (MaintainOrgNameService) container.getContext().lookup(MAINTAIN_ORG_NAME_SERVICE);
        maintainInformationRouteService = (MaintainInformationRouteService) container.getContext().lookup(MAINTAIN_INFORMATION_ROUTE_SERVICE);
        maintainDisciplinaryActionService = (MaintainDisciplinaryActionService) container.getContext().lookup(MAINTAIN_DISCIPLINARY_ACTION_SERVICE);
        maintainConditionService = (MaintainConditionService) container.getContext().lookup(MAINTAIN_CONDITION_SERVICE);
        maintainAddressService = (MaintainAddressService) container.getContext().lookup(MAINTAIN_ADDRESS_SERVICE);
        maintainCredentialsService = (MaintainCredentialsService) container.getContext().lookup(MAINTAIN_CREDENTIALS_SERVICE);
        maintainExpertiseService = (MaintainExpertiseService) container.getContext().lookup(MAINTAIN_EXPERTISE_SERVICE);
        endReasonTypeFacade = (GrsCtEndReasonTypesFacade) container.getContext().lookup(END_REASON_TYPE_FACADE);
        providerChangeEventConsumer = (ProviderChangeEventConsumer) container.getContext().lookup(PROVIDER_CHANGE_EVENT_CONSUMER);
        distributionEventConsumer = (DistributionEventConsumer) container.getContext().lookup(DISTRIBUTION_EVENT_CONSUMER);
        updateDistributionStatusService = (PLRDistributionServiceRemote) container.getContext().lookup(UPDATE_DISTRIBUTION_STATUS_SERVICE);
        updateDistributionStatusService_HelperSynchronized = (UpdateDistributionStatusService_HelperSynchronized) container.getContext().lookup(UPDATE_DISTRIBUTION_STATUS_HELPER);
        addressDoctorBackgroundProcessorHelper = (AddressDoctorBackgroundProcessorHelper) container.getContext().lookup(ADDRESS_DOCTOR_BACKGROUND_PROCESSOR_HELPER);

        plrConfigurationResourceLoader = (PLRConfigurationResourceLoader) container.getContext().lookup(PLR_CONFIGURATION_LOADER);

        grsCtBooleanTypesFacade = (GrsCtBooleanTypesFacade) container.getContext().lookup(BOOLEAN_TYPE_FACADE);
        grsCtMechanismsFacade = (GrsCtMechanismsFacade) container.getContext().lookup(GRS_MECHANISM_FACADE);
        prsCtCommunPurposeTypesFacade = (PrsCtCommunPurposeTypesFacade) container.getContext().lookup(COMMUNICATION_PURPOSE_TYPE_FACADE);
        prsCtNameTypesFacade = (PrsCtNameTypesFacade) container.getContext().lookup(PRS_NAME_TYPE_FACADE);
        prsCtProvExpertiseTypesFacade = (PrsCtProvExpertiseTypesFacade) container.getContext().lookup(PROVIDER_EXPERTISE_TYPE_FACADE);
        prsCtProviderRoleTypesFacade = (PrsCtProviderRoleTypesFacade) container.getContext().lookup(PROVIDER_ROLE_TYPE_FACADE);
        prsCtDataOwnerCodesFacade = (PrsCtDataOwnerCodesFacade) container.getContext().lookup(PROVIDER_DATA_OWNER_FACADE);
        prsCtElectronicAddrTypesFacade = (PrsCtElectronicAddrTypesFacade) container.getContext().lookup(PROVIDER_ELECTRONIC_ADDR_TYPE_FACADE);
        prsCtWorkLocationPurpsFacade = (PrsCtWorkLocationPurpsFacade) container.getContext().lookup(PROVIDER_WORK_LOCATION_PURPS_TYPE_FACADE);
        prsCtTelecomNumberTypesFacade = (PrsCtTelecomNumberTypesFacade) container.getContext().lookup(PROVIDER_TELECOM_NUMBER_TYPE_FACADE);
        prsCtStatusCodesFacade = (PrsCtStatusCodesFacade) container.getContext().lookup(PROVIDER_STATUS_CODES_TYPE_FACADE);

        codesDao = (CodesDao) container.getContext().lookup(CODES_DAO_SERVICE);
        providerDao = (ProviderDao) container.getContext().lookup(PROVIDER_DAO_SERVICE);
        validateEmailAddress = (ValidateEmailAddress) container.getContext().lookup(VALIDATE_EMAIL_NAME);
        authorizationService = (AuthorizationService) container.getContext().lookup(AUTHORIZATION_SERVICE);
        eAddressConverter = (ElectronicAddressDtoConverter) container.getContext().lookup(ELECTRONIC_ADDRESS_DTO_CONVERTER);
        workLocationConverter = (WorkLocationDtoConverter) container.getContext().lookup(WORK_LOCATION_DTO_CONVERTER);
        workLocationDetailsConverter = (WorkLocationDetailsDtoConverter) container.getContext().lookup(WORK_LOCATION_DETAILS_DTO_CONVERTER);
        telephoneConverter = (TelephoneDtoConverter) container.getContext().lookup(TELEPHONE_DTO_CONVERTER);
        providerIdentifierConverter = (ProviderIdentifierDtoConverter) container.getContext().lookup(IDENTIFIER_DTO_CONVERTER);
        personNameConverter = (PersonNameDtoConverter) container.getContext().lookup(PERSON_NAME_DTO_CONVERTER);
        informationRouteConverter = (InformationRouteDtoConverter) container.getContext().lookup(INFORMATION_ROUTE_DTO_CONVERTER);
        disciplinaryActionConverter = (DisciplinaryActionDtoConverter) container.getContext().lookup(DISCIPLINARY_ACTION_DTO_CONVERTER);
        conditionConverter = (ConditionDtoConverter) container.getContext().lookup(CONDITION_DTO_CONVERTER);
        addressConverter = (AddressDtoConverter) container.getContext().lookup(ADDRESS_DTO_CONVERTER);
        expertiseConverter = (ExpertiseDtoConverter) container.getContext().lookup(EXPERTISE_DTO_CONVERTER);
        validateSearchProviderTypePermission = (ValidateSearchProviderTypePermission) container.getContext().lookup(VALIDATE_SEARCH_PROVIDER_TYPE_PERMISSIONS);
        validateGender = (ValidateGender) container.getContext().lookup(VALIDATE_GENDER);
        configurationDao = (ConfigurationDao) container.getContext().lookup(CONFIGURATION_DAO);
        maintainRegistryUserRelationshipService = (MaintainRegistryUserRelationshipService) container.getContext().lookup(MAINTAIN_REG_USER_REALTIONSHIP_SERVICE);
        registryUserService = (RegistryUserService) container.getContext().lookup(REGISTRY_USER_SERVICE);
        registryUserDtoConverter = (RegistryUserDtoConverter) container.getContext().lookup(REGISTRY_USER_DTO_CONVERTER);
        generationNumService = (GenerationNumService) container.getContext().lookup(GENERATION_NUM_SERVICE);
        maintainAccessProfileService = (MaintainAccessProfileService) container.getContext().lookup(ACCESS_PROFILE_SERVICE);
        maintainDistributionService = (MaintainDistributionService) container.getContext().lookup(MAINTAIN_DISTRIBUTION_SERVICE);
        noteDtoConverter = (NoteDtoConverter) container.getContext().lookup(NOTE_DTO_CONVERTER);

        accessProfileDtoConverter = (AccessProfileDtoConverter) container.getContext().lookup(ACCESS_PROFILE_DTO_CONVERTER);
        distributionDtoConverter = (DistributionDtoConverter) container.getContext().lookup(DISTRIBUTION_DTO_CONVERTER);
        providerDtoConverter = (ProviderDtoConverter) container.getContext().lookup(PROVIDER_DTO_CONVERTER);
        registryUserDetailsConverter = (RegistryUserDetailsConverter) container.getContext().lookup(REGISTRY_USER_DETAILS_CONVERTER);

        regUserUniqueNameValidator = (RegUserUniqueNameValidator) container.getContext().lookup(REG_USER_UNIQUE_NAME_VALIDATOR);
        regUserUniqueOrgChidValidator = (RegUserUniqueOrgChidValidator) container.getContext().lookup(REG_USER_UNIQUE_CHID_VALIDATOR);
        effectiveDatesValidator = (EffectiveDatesValidator) container.getContext().lookup(EFFECTIVE_DATES_VALIDATOR);

        maintainPartyService = (MaintainPartyService) container.getContext().lookup(PARTY_SERVICE);

        providerAuthorizationService = (ProviderAuthorizationService) container.getContext().lookup(PROVIDER_AUTH_SERVICE);
        dpsService = (DpsService) container.getContext().lookup(DPS_SERVICE);
        accessRestrictionService = (AccessRestrictionService) container.getContext().lookup(ACCESS_RESTRICTION_SERVICE);
        dpsUniqueValidator = (DpsUniqueValidator) container.getContext().lookup(DPS_UNIQUE_VALIDATOR);
        dataPermissionsConverter = (DataElementPermissionDtoConverter) container.getContext().lookup(DPS_CONVERTER);
        chidGenerator = (UserChidGenerator) container.getContext().lookup(USER_CHID_GENERATOR);

        maintainProviderEsbService = (MaintainProviderServiceRemote) container.getContext().lookup(MAINTAIN_PROVIDER_SERVICE_REMOTE);
        maintainEsbInformationRoutesService = (MaintainEsbInformationRoutesService) container.getContext().lookup(MAINTAIN_ESB_INFO_ROUTES);
        distributionService = (ProcessDistributionService) container.getContext().lookup(DISTRIBUTION_SERVICE);

        statusDtoConverter = (StatusDtoConverter) container.getContext().lookup(STATUS_DTO_CONVERTER);
        providerMessageValidator = (ProviderMessageValidator) container.getContext().lookup(PROVIDER_MESSAGE_VALIDATOR);
        searchProviderEsbService = (SearchProviderServiceRemote) container.getContext().lookup(SEARCH_PROVIDER_SERVICE_REMOTE);
        grsPartiesFacade = (GrsPartiesFacade) container.getContext().lookup(GRS_PARTIES_FACADE);

        providerConfidentiality = (ProviderConfidentiality) container.getContext().lookup(PROVIDER_CONFIDENTIALITY);

        batchTransactionStatusServiceLocal = (BatchTransactionStatusServiceLocal) container.getContext().lookup(BATCH_TX_STATUS_SERVICE_LOCAL);
        batchTransactionStatusServiceRemote = (BatchTransactionStatusServiceRemote) container.getContext().lookup(BATCH_TX_STATUS_SERVICE_REMOTE);
        grsChangedRecordsFacade = (GrsChangedRecordsFacade) container.getContext().lookup(CHANGED_RECORDS_FACADE);
        SpoofedUserHelper.currentUser = PLRREGADMIN;
    }
    public static final String PLRREGADMIN = "plr-reg-admin";

    @AfterClass
    public static void parentTearDownClass() {
        if (AllTestsIntegration.container == null) {
            if (container != null) {
                container.close();
            }
        }
    }

    protected static void setupJNDIResources() throws NamingException {
//        Context initContext = container.getContext();
//
//        Map<String, Object> appResource = new HashMap<>();
//        appResource.put("sso_ldap_oid_user_role", "plruserrole");
//        appResource.put("sso_ldap_guid_key", "plruserguid");
//        appResource.put("organization_id_key", "orgid");
//        appResource.put("auth_request_path", "/AccessDenied.html");
////        appResource.put(Consts.PROCESS_DISTRIBUTION, "false");
////        appResource.put(Consts.SEND_DISTRIBUTION, "false");
//        appResource.put(Consts.DISTRIBUTION_SCHEDULE, "*/10 * *");
//        appResource.put(Consts.DISTRIBUTION_RETENTION_DURATION, 90);
////        appResource.put(Consts.ENABLE_AUDITING, "false");
//        appResource.put(Consts.TARGET_ENVIRONMENT, "TEST-SUITE");
//        appResource.put(Consts.ESB_DISTRIBUTION_SERVICE_BASE_URI, "http://ossory.hlth.gov.bc.ca:8080/");
//        appResource.put(Consts.ESB_BATCH_SERVICE_BASE_URI, "http://ossory.hlth.gov.bc.ca:8080/");
//        appResource.put(Consts.MESSAGING_VERSION, "0.1.TEST");
//        appResource.put(Consts.MESSAGING_RELEASE, "CI-BUILD-1.0");
//        initContext.rebind(Consts.APP_JNDI_RESOURCE, appResource);
//
//        Map<String, Object> appSSOProps = new HashMap<>();
//        appSSOProps.put("sso_ldap_oid_user_role", "plruserrole");
//        appSSOProps.put("sso_ldap_guid_key", "plruserguid");
//        appSSOProps.put("organization_id_key", "orgid");
//        initContext.rebind(Consts.APP_JNDI_RESOURCE_SSO, appSSOProps);
//
//        Hashtable ldapResources = new Hashtable();
//        ldapResources.put("java.naming.factory.initial", "com.sun.jndi.ldap.LdapCtxFactory");
//        ldapResources.put("java.naming.security.credentials", "17Mail29");
//        ldapResources.put("java.naming.security.authentication", "simple");
//        ldapResources.put("java.naming.provider.url", "ldap://sneaker.moh.hnet.bc.ca");
//        ldapResources.put("java.naming.security.principal", "uid=admin,o=hnet,st=bc,c=ca");
//        initContext.rebind(Consts.LDAP_JNDI_RESOURCE, ldapResources);

    }
}
