/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.util;

import ca.bc.gov.health.plr.dto.provider.LocationDto;
import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import java.lang.reflect.Field;
import java.util.ArrayList;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;
import static org.powermock.api.support.membermodification.MemberMatcher.field;

/**
 *
 * @author Jonathan.Wiebe
 */
public class CheckEndReasonCodeTest {
    
    public CheckEndReasonCodeTest() {
    }

    @Test
    public void testIsCeased() throws Exception {
        CodesDao codesDaoMock = mock(CodesDao.class);
        CodeDaoMocks.setupCodesDaoMocks(codesDaoMock);
        CheckEndReasonCode isCeased = new CheckEndReasonCode();
        Field field = CheckEndReasonCode.class.getDeclaredField("codesDao");
        field.setAccessible(true);
        field.set(isCeased, codesDaoMock);
        
        AddressDto dto  = new AddressDto();
        dto.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CEASE.getValue());
        assertTrue(isCeased.isCeased(dto));
        
        dto.setEndReasonCode(null);
        assertFalse(isCeased.isCeased(dto));
        
        dto.setEndReasonCodeId(CodeDaoMocks.CEASE_CODE_ID);
        assertTrue(isCeased.isCeased(dto));

        dto.setEndReasonCodeId(CodeDaoMocks.CHG_CODE_ID);
        assertFalse(isCeased.isCeased(dto));

        dto.setEndReasonCodeId(CodeDaoMocks.CEASE_CODE_ID+100l);
        assertFalse(isCeased.isCeased(dto));
        
        assertFalse(isCeased.isCeased(new ArrayList<LocationDto>()));
        assertFalse(isCeased.isCeased(new WorkLocationDto()));
    }
    @Test
    public void testIsChg() throws Exception {
        CodesDao codesDaoMock = mock(CodesDao.class);
        CodeDaoMocks.setupCodesDaoMocks(codesDaoMock);
        CheckEndReasonCode isChanged = new CheckEndReasonCode();
        Field field = CheckEndReasonCode.class.getDeclaredField("codesDao");
        field.setAccessible(true);
        field.set(isChanged, codesDaoMock);
        
        AddressDto dto  = new AddressDto();
        dto.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CHANGE.getValue());
        assertTrue(isChanged.isChange(dto));
        
        dto.setEndReasonCode(null);
        assertFalse(isChanged.isChange(dto));
        
        dto.setEndReasonCodeId(CodeDaoMocks.CHG_CODE_ID);
        assertTrue(isChanged.isChange(dto));

        dto.setEndReasonCodeId(CodeDaoMocks.CEASE_CODE_ID);
        assertFalse(isChanged.isChange(dto));

        dto.setEndReasonCodeId(CodeDaoMocks.CHG_CODE_ID+100l);
        assertFalse(isChanged.isChange(dto));
        
        assertFalse(isChanged.isChange(new ArrayList<LocationDto>()));
        assertFalse(isChanged.isChange(new WorkLocationDto()));
    }
    
    @Test
    public void testIsCorr() throws Exception {
        CodesDao codesDaoMock = mock(CodesDao.class);
        CodeDaoMocks.setupCodesDaoMocks(codesDaoMock);
        CheckEndReasonCode isCorrected = new CheckEndReasonCode();
        Field field = CheckEndReasonCode.class.getDeclaredField("codesDao");
        field.setAccessible(true);
        field.set(isCorrected, codesDaoMock);
        
        TelecommunicationDto dto  = new TelecommunicationDto();
        dto.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CORRECT.getValue());
        assertTrue(isCorrected.isCorrected(dto));
        
        dto.setEndReasonCode(null);
        assertFalse(isCorrected.isCorrected(dto));
        
        dto.setEndReasonCodeId(CodeDaoMocks.CORR_CODE_ID);
        assertTrue(isCorrected.isCorrected(dto));

        dto.setEndReasonCodeId(CodeDaoMocks.CEASE_CODE_ID);
        assertFalse(isCorrected.isCorrected(dto));

        dto.setEndReasonCodeId(CodeDaoMocks.CORR_CODE_ID+100l);
        assertFalse(isCorrected.isCorrected(dto));
        
        assertFalse(isCorrected.isCorrected(new ArrayList<LocationDto>()));
        assertFalse(isCorrected.isCorrected(new WorkLocationDto()));
    }
}
