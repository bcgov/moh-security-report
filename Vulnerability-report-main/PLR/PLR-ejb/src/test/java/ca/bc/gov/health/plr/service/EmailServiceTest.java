/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service;

import ca.bc.gov.health.plr.service.EmailService.TransportWrapper;
import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Address;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.internet.MimeMessage;
import javax.naming.NamingException;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *
 * @author adebiyi.kuseju
 */
public class EmailServiceTest {

    static JNDIResourceLoader appResourceMock;
    static EmailService instance = new EmailService();

    public EmailServiceTest() {
    }

    @BeforeClass
    public static void setUpClass() throws NamingException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        appResourceMock = mock(JNDIResourceLoader.class);
        when(appResourceMock.appResource()).thenReturn(new HashMap<String, String>());

        Field field = instance.getClass().getDeclaredField("prod");
        field.setAccessible(true);
        field.set(instance, appResourceMock);
        
        instance.transportWrapper = new TransportWrapper() {
            @Override
            public void send(MimeMessage message) throws MessagingException {
                for (Address m : message.getAllRecipients()) {
                    if (!m.toString().matches(".+@.+")) {
                        throw new MessagingException();
                    }
                }
                Logger.getLogger("TransportWrapperMock").log(Level.INFO, "mock send");
            }
        };
    }
    
    /**
     * Test of sendMail method, of class EmailService.
     * @throws java.lang.Exception
     */
    @Test
    public void testSendMail_happy_path() throws Exception {

        String senderAddress = "tt@test.com";
        List<String> mainRecipients = new ArrayList<>();
        mainRecipients.add("ASSM-Java.vic@cgi.com");
        mainRecipients.add("ASSM-Java.vic@cgi.com");
        List<String> ccRecipients = new ArrayList<>();
        ccRecipients.add("ASSM-Java.vic@cgi.com");
        ccRecipients.add("ASSM-Java.vic@cgi.com");
        List<String> bccRecipients = new ArrayList<>();
        bccRecipients.add("ASSM-Java.vic@cgi.com");
        bccRecipients.add("ASSM-Java.vic@cgi.com");
        String subject = "Testing email subject - Please ignore";
        String bodyText = "Testing email body - Please ignore";

        List<String> attachmentFilePaths = new ArrayList<>();
        File file = getTempFile();
        file.deleteOnExit();
        attachmentFilePaths.add(file.getAbsolutePath());
        file = getTempFile();
        file.deleteOnExit();
        attachmentFilePaths.add(file.getAbsolutePath());

        try {
            instance.sendMail(senderAddress, mainRecipients, ccRecipients, bccRecipients, subject, bodyText, attachmentFilePaths);
        } catch (MessagingException se) {

            if (!(se.getCause() instanceof SocketException)) {
                fail("No exception expected");
            }
        }

    }

    /**
     * Test of sendMail method, of class EmailService.
     * @throws java.lang.Exception
     */
    @Test(expected = MessagingException.class)
    public void testSendMail_no_primary_recipient() throws Exception {

        String senderAddress = "tt@test.com";
        List<String> mainRecipients = new ArrayList<>();
        List<String> ccRecipients = null;
        List<String> bccRecipients = null;
        String subject = "Testing email subject";
        String bodyText = "Testing email body";
        List<String> attachmentFilePaths = null;

        instance.sendMail(senderAddress, mainRecipients, ccRecipients, bccRecipients, subject, bodyText, attachmentFilePaths);

    }

    /**
     * Test of sendMail method, of class EmailService.
     * @throws java.lang.Exception
     */
    @Test
    public void testSendMail_no_primary_recipient_message() throws Exception {

        String senderAddress = "tt@test.com";
        List<String> mainRecipients = new ArrayList<>();
        List<String> ccRecipients = null;
        List<String> bccRecipients = null;
        String subject = "Testing email subject";
        String bodyText = "Testing email body";
        List<String> attachmentFilePaths = null;

        try {
            instance.sendMail(senderAddress, mainRecipients, ccRecipients, bccRecipients, subject, bodyText, attachmentFilePaths);
        } catch (MessagingException e) {
            assertEquals("Email notification requires at least one primary recipient", e.getMessage());
        }

    }

    /**
     * Test of sendMail method, of class EmailService.
     * @throws java.lang.Exception
     */
    @Test(expected = MessagingException.class)
    public void testSendMail_invalid_primary_recipient() throws Exception {

        String senderAddress = "tt@test.com";
        List<String> mainRecipients = new ArrayList<>();
        mainRecipients.add("cgi.com");
        List<String> ccRecipients = null;
        List<String> bccRecipients = null;
        String subject = "Testing email subject";
        String bodyText = "Testing email body";
        List<String> attachmentFilePaths = null;

        instance.sendMail(senderAddress, mainRecipients, ccRecipients, bccRecipients, subject, bodyText, attachmentFilePaths);

    }

    /**
     * Test of sendMail method, of class EmailService.
     * @throws java.lang.Exception
     */
    @Test(expected = MessagingException.class)
    public void testSendMail_invalid_cc_recipient() throws Exception {

        String senderAddress = "tt@test.com";
        List<String> mainRecipients = new ArrayList<>();
        mainRecipients.add("adebiyi.kuseju@cgi.com");
        List<String> ccRecipients = new ArrayList<>();
        ccRecipients.add("cgi.com");
        List<String> bccRecipients = null;
        String subject = "Testing email subject";
        String bodyText = "Testing email body";
        List<String> attachmentFilePaths = null;

        instance.sendMail(senderAddress, mainRecipients, ccRecipients, bccRecipients, subject, bodyText, attachmentFilePaths);

    }

    /**
     * Test of sendMail method, of class EmailService.
     * @throws java.lang.Exception
     */
    @Test(expected = MessagingException.class)
    public void testSendMail_invalid_bcc_recipient() throws Exception {

        String senderAddress = "tt@test.com";
        List<String> mainRecipients = new ArrayList<>();
        mainRecipients.add("adebiyi.kuseju@cgi.com");
        List<String> ccRecipients = new ArrayList<>();
        ccRecipients.add("adebiyi.kuseju@cgi.com");
        List<String> bccRecipients = new ArrayList<>();
        bccRecipients.add("cgi.com");
        String subject = "Testing email subject";
        String bodyText = "Testing email body";
        List<String> attachmentFilePaths = null;

        instance.sendMail(senderAddress, mainRecipients, ccRecipients, bccRecipients, subject, bodyText, attachmentFilePaths);

    }

    /**
     * Test of sendMail method, of class EmailService.
     * @throws java.lang.Exception
     */
    @Ignore
    @Test(expected = MessagingException.class)
    public void testSendMail_invalid_attachment_path() throws Exception {

        String senderAddress = "tt@test.com";
        List<String> mainRecipients = new ArrayList<>();
        mainRecipients.add("ASSM-Java.vic@cgi.com");
        mainRecipients.add("ASSM-Java.vic@cgi.com");
        List<String> ccRecipients = new ArrayList<>();
        ccRecipients.add("ASSM-Java.vic@cgi.com");
        ccRecipients.add("ASSM-Java.vic@cgi.com");
        List<String> bccRecipients = new ArrayList<>();
        bccRecipients.add("ASSM-Java.vic@cgi.com");
        bccRecipients.add("ASSM-Java.vic@cgi.com");
        String subject = "Testing email subject - Please ignore";
        String bodyText = "Testing email body - Please ignore";

        List<String> attachmentFilePaths = new ArrayList<>();

        File file = getTempFile();
        file.deleteOnExit();
        attachmentFilePaths.add(file.getAbsolutePath());

        instance.sendMail(senderAddress, mainRecipients, ccRecipients, bccRecipients, subject, bodyText, attachmentFilePaths);

    }

    private File getTempFile() throws IOException {
        return  File.createTempFile("PLR_Test", ".txt");
    }
}
