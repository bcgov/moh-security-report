/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.registry.user;

import ca.bc.gov.health.plr.dto.reguser.PartyDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsParties;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.entityManagerProxy;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import static org.hamcrest.Matchers.is;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author sumesh.kariyil
 */
public class MaintainPartyServiceTest extends IntegrationSetup {

    private static String originalregUserId;
    

    @Before
    public void init() {
        originalregUserId = null;
    }

    @After
    public void cleanup() {
     
    }

    
    @Test
    public void testAddParty() throws BusinessRuleException, EntityValidationException {
        String regUserId = "NEWREGUSER";
        GrsRegistryUsers regUser = entityManagerProxy.find(GrsRegistryUsers.class, 251l);
        List<PartyDto> parties = registryUserDetailsConverter.getPartyDetails(regUser);
        PartyDto activeDto = registryUserDetailsConverter.getActiveParty(parties);
        originalregUserId = activeDto.getRegUserId();
        activeDto.setRegUserId(regUserId);
        activeDto.setActive(true);
        activeDto.getPartyDetailsDto().setEndReasonCodeId(codesDao.lookup(GrsCtEndReasonTypes.class, CodeTableCodes.GrsCtEndReasonTypes.CHANGE).getCtlId());
        try {
            maintainPartyService.save(activeDto);
        } catch (DuplicateRecordException dre) {
            assertTrue(dre.getMessage().equals(""));
        }
        GrsParties grsParty = entityManagerProxy.find(GrsParties.class, 211l);        
        assertEquals(grsParty.getRegistryUserOrgChid(), regUserId);
    }
    
    @Test 
    public void testAddDuplicateParty() throws BusinessRuleException, EntityValidationException {
        String regUserId = "NEWREGUSER";
        GrsRegistryUsers regUser = entityManagerProxy.find(GrsRegistryUsers.class, 249l);
        List<PartyDto> parties = registryUserDetailsConverter.getPartyDetails(regUser);
        PartyDto activeDto = registryUserDetailsConverter.getActiveParty(parties);
        activeDto.setRegUserId(regUserId);
        activeDto.setActive(true);
        activeDto.getPartyDetailsDto().setEndReasonCodeId(codesDao.lookup(GrsCtEndReasonTypes.class, CodeTableCodes.GrsCtEndReasonTypes.CHANGE).getCtlId());
        boolean exception=false;
        try {
            maintainPartyService.save(activeDto);
        } catch (DuplicateRecordException | EntityValidationException dre) {
            exception=true;
        } finally {
            activeDto.setRegUserId(originalregUserId);
            try {
                maintainPartyService.save(activeDto);
            } catch (DuplicateRecordException ex) {
                Logger.getLogger(MaintainPartyServiceTest.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        assertTrue(exception);
    }

    @Test
    public void testGetParty() {
        PartyDto dto = new PartyDto();
        dto.setRuRuId(1L);
        List<PartyDto> list = maintainPartyService.getParties(dto);
        assertThat(list.size(), org.hamcrest.Matchers.greaterThan(0));
    }
}
