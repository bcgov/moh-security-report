package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.provider.DemographicDetailsDto;
import ca.bc.gov.health.plr.ejb.entity.PrsDemographicDetails;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.BusinessRuleResultUtils;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.persistence.ProviderDao;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import ca.bc.gov.health.plr.rule.provider.ProviderTestDataBuilder;
import ca.bc.gov.health.plr.rule.provider.ValidateGender;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.util.CodeDaoMocks;
import ca.bc.gov.health.plr.util.ProviderDaoMocks;
import ca.bc.gov.health.plr.util.ValidateGenderMocks;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Date;
import java.util.List;
import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import org.junit.After;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;
import static org.mockito.Mockito.mock;

/**
 * Simple JUnit test for maintain demographic details service.
 *
 * @author Grant.Hodgins
 * @author greg.perkins
 */
public class MaintainDemographicDetailsServiceTest extends IntegrationSetup {

    private static Long idToRemove;

    public MaintainDemographicDetailsServiceTest() {
    }

    @Before
    public void init() {
        idToRemove = null;
    }

    @After
    public void cleanup() {
        if (idToRemove != null) {
            entityManagerProxy.remove(entityManagerProxy.find(PrsDemographicDetails.class, idToRemove));
        }
    }

    /**
     * Test of save method, of class MaintainDemographicDetailsService.
     */
    @Test
    public void testMaintainDemographicDetails_save() throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        DemographicDetailsDto newDemographicDetails = ProviderTestDataBuilder.getDemographicDetails();
        newDemographicDetails.setPauthId(3313l);
        DemographicDetailsDto result = maintainDemographicDetailsService.save(newDemographicDetails);
        idToRemove = result.getId();

        assertNotNull(result);
        assertTrue(result.getId() > 0);
    }

    @Test
    public void testAddDuplicate() throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        DemographicDetailsDto newDemographicDetails = ProviderTestDataBuilder.getDemographicDetails();
        newDemographicDetails.setPauthId(3313l);
        DemographicDetailsDto result;
        result = maintainDemographicDetailsService.save(newDemographicDetails);
        idToRemove = result.getId();

        newDemographicDetails = ProviderTestDataBuilder.getDemographicDetails();
        newDemographicDetails.setPauthId(3313l);
        boolean exceptionThrown = false;
        try {
            maintainDemographicDetailsService.save(newDemographicDetails);
        } catch (DuplicateRecordException dre) {
            exceptionThrown = true;
        }
        assertTrue(exceptionThrown);
    }

    @Test
    public void testAddInvalidCountry() throws DuplicateRecordException {
        DemographicDetailsDto newDemographicDetails = ProviderTestDataBuilder.getDemographicDetails();
        newDemographicDetails.setPauthId(12l);
        newDemographicDetails.setBirthCountryCodeId(-1l);

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<DemographicDetailsDto>> violations = validator.validate(newDemographicDetails);
        assertTrue(violations.size() > 0);
    }

    @Test
    public void testAddInvalidProvince() throws DuplicateRecordException {
        DemographicDetailsDto newDemographicDetails = ProviderTestDataBuilder.getDemographicDetails();
        newDemographicDetails.setPauthId(12l);
        newDemographicDetails.setBirthProvStateCodeId(-1l);

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<DemographicDetailsDto>> violations = validator.validate(newDemographicDetails);
        assertTrue(violations.size() > 0);
    }

    @Test
    public void testAddInvalidGender() throws DuplicateRecordException {
        DemographicDetailsDto newDemographicDetails = ProviderTestDataBuilder.getDemographicDetails();
        newDemographicDetails.setPauthId(12l);
        newDemographicDetails.setGenderId(-1l);

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<DemographicDetailsDto>> violations = validator.validate(newDemographicDetails);
        assertTrue(violations.size() > 0);
    }

    @Test
    public void testInvalidDeathDate() throws DuplicateRecordException, EntityValidationException {
        DemographicDetailsDto newDemographicDetails = ProviderTestDataBuilder.getDemographicDetails();
        newDemographicDetails.setPauthId(12l);
        Date birthDate = new Date();
        Date deathDate = new Date();
        deathDate.setYear(deathDate.getYear() - 1);
        newDemographicDetails.setBirthDate(birthDate);
        newDemographicDetails.setDeathDate(deathDate);
        DemographicDetailsDto result;
        boolean exceptionThrown = false;
        try {
            result = maintainDemographicDetailsService.save(newDemographicDetails);
            idToRemove = result.getId();
        } catch (BusinessRuleException ex) {
            exceptionThrown = true;
        }
        assertTrue(exceptionThrown);
    }

    @Test
    public void testcheckBusinessRules() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        //MaintainDemographicDetailsService demoService = new MaintainDemographicDetailsService();
        MaintainDemographicDetailsService demoService = maintainDemographicDetailsService;
        DemographicDetailsDto dto = new DemographicDetailsDto();

        CodesDao codesDao = mock(CodesDao.class);
        demoService.codesDao = codesDao;
        CodeDaoMocks.setupCodesDaoMocks(codesDao);
        
        ProviderDao providerDao = mock(ProviderDao.class);
        demoService.providerDao = providerDao;
        ProviderDaoMocks.setProviderDaoMocksDefault(providerDao);

        
        ValidateGender genderValidator = mock(ValidateGender.class);
        demoService.genderValidator = genderValidator;
        ValidateGenderMocks.setupValidateGenderMocks(genderValidator);
        
        Method method = MaintainDemographicDetailsService.class.getDeclaredMethod("checkBusinessRules", DemographicDetailsDto.class);
        method.setAccessible(true);
        
        // should return null if dto is empty
        Object obj = null;

        try {
            obj = method.invoke(demoService, dto);
        } catch(Exception ex) {
            if((ex.getCause() instanceof BusinessRuleException)) {
                //since genderId is null, BusinessRuleException is thrown
                List<BusinessRuleResult> brrList = ((BusinessRuleException)ex.getCause()).getResults();
                BusinessRuleResult brr = brrList.get(1); //the gender validation result is located as the second component
                assertTrue(!brr.isValid());
                assertEquals(brr.getMessages().get(0).getMessageCode()+": " + brr.getMessages().get(0).getMessage(), BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MANDATORY_PART1) + "Gender" +  BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MANDATORY_PART2));
            } else {
                assertTrue(false);
            }
        }

        // with only a prov/state, should fail with invalid exception
        dto.setBirthProvState("AZ");
        dto.setGenderId(2332l); //set the genderId to avoid checking gender
        try {
            obj =  method.invoke(demoService, dto);
        } catch (Exception ex) {
            if((ex.getCause() instanceof BusinessRuleException)) {
                assertFalse(BusinessRuleResultUtils.isAllValid(((BusinessRuleException)ex.getCause()).getResults()));
            } else {
                assertTrue(false);
            }
        }
        
        // with only a prov/state, should fail with invalid exception
        dto.setBirthProvState(null);
        dto.setBirthProvStateCodeId(new Long(3l));
        dto.setGenderId(2332l); //set the genderId to avoid checking gender
        try {
            obj =  method.invoke(demoService, dto);
        } catch (Exception ex) {
            if((ex.getCause() instanceof BusinessRuleException)) {
                assertFalse(BusinessRuleResultUtils.isAllValid(((BusinessRuleException)ex.getCause()).getResults()));
            } else {
                assertTrue(false);
            }
        }
        // with only a prov/state, should fail with invalid exception
        dto.setBirthProvState("");
        dto.setBirthProvStateCodeId(new Long(3l));
        dto.setGenderId(2332l); //set the genderId to avoid checking gender
        try {
            obj =  method.invoke(demoService, dto);
        } catch (Exception ex) {
            if((ex.getCause() instanceof BusinessRuleException)) {
                assertFalse(BusinessRuleResultUtils.isAllValid(((BusinessRuleException)ex.getCause()).getResults()));
            } else {
                assertTrue(false);
            }
        }
        
        // if dto chg, just return null provider
        dto = new DemographicDetailsDto();
        dto.setEndReasonCode(CodeDaoMocks.CHG_CODE_NAME);
        dto.setGenderId(2332l); //set the genderId to avoid checking gender
        obj =  method.invoke(demoService, dto);
        assertNull(obj);

        // if dto corr, just return null provider
        dto.setEndReasonCode(CodeDaoMocks.CORR_CODE_NAME);
        obj =  method.invoke(demoService, dto);
        assertNull(obj);
        
        // reset code
        dto.setEndReasonCode(null);
        
        // if dto chg id, just return null provider
        dto.setEndReasonCodeId(CodeDaoMocks.CHG_CODE_ID);
        obj =  method.invoke(demoService, dto);
        assertNull(obj);

        // if dto corr id, just return null provider
        dto.setEndReasonCodeId(CodeDaoMocks.CORR_CODE_ID);
        obj =  method.invoke(demoService, dto);
        assertNull(obj);
        
        // now try ceased, should fail if no active demographic details
        dto.setEndReasonCodeId(CodeDaoMocks.CEASE_CODE_ID);
        dto.setPauthId(ProviderDaoMocks.FAKE_PAUTH_ID_0_DEMOGRAPHICS_DETAILS_ACTIVE);
        try {
            obj =  method.invoke(demoService, dto);
        } catch (Exception ex) {
            if(!(ex.getCause() instanceof BusinessRuleException)) {
                assertFalse(true);
            }
        }
        
        // now try ceased, should fail if one active demographic details
        dto.setEndReasonCodeId(CodeDaoMocks.CEASE_CODE_ID);
        dto.setPauthId(ProviderDaoMocks.FAKE_PAUTH_ID_1_DEMOGRAPHICS_DETAILS_ACTIVE);
        try {
            obj =  method.invoke(demoService, dto);
        } catch (Exception ex) {
            if(!(ex.getCause() instanceof BusinessRuleException)) {
                assertFalse(true);
            }
        }

        // now try ceased, should pass if two active demographic details
        dto.setEndReasonCodeId(CodeDaoMocks.CEASE_CODE_ID);
        dto.setPauthId(ProviderDaoMocks.FAKE_PAUTH_ID_2_DEMOGRAPHICS_DETAILS_ACTIVE);
        obj =  method.invoke(demoService, dto);
        assertNotNull(obj);

        // now try ceased, should fail if two not active demographic details
        dto.setEndReasonCodeId(CodeDaoMocks.CEASE_CODE_ID);
        dto.setPauthId(ProviderDaoMocks.FAKE_PAUTH_ID_2_DEMOGRAPHICS_DETAILS_NOT_ACTIVE);
        try {
            obj =  method.invoke(demoService, dto);
        } catch (Exception ex) {
            if(!(ex.getCause() instanceof BusinessRuleException)) {
                assertFalse(true);
            }
        }
    }

    
    /**
    @Test
    public void testMaintainDemographicDetails_save() throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        DemographicDetailsDto newDemographicDetails = ProviderTestDataBuilder.getDemographicDetails();
        newDemographicDetails.setPauthId(3313l);
        DemographicDetailsDto result = maintainDemographicDetailsService.save(newDemographicDetails);
        idToRemove = result.getId();

        assertNotNull(result);
        assertTrue(result.getId() > 0);
    }
    
    **/
}
