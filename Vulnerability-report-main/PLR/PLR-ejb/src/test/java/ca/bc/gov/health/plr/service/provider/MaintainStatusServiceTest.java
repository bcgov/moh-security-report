package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.provider.StatusDto;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.PrsStatuses;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.provider.ProviderTestDataBuilder;
import ca.bc.gov.health.plr.service.PlrUserRoleService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.ArrayList;
import java.util.List;

import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Before;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 * 
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class MaintainStatusServiceTest extends IntegrationSetup {

    private static final long PAUTH_ID = 3206l;

    @Before
    public void setup() {
        List<Exception> exceptions = new ArrayList<>();

        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        for (PrsStatuses status : provider.getPrsStatusesList()) {
            try {
                entityManagerProxy.remove(status);
            } catch (Exception e) {
                e.printStackTrace();
                exceptions.add(e);
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    @Test
    public void testAddStatus() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {
        StatusDto status = ProviderTestDataBuilder.getStatus();
        status.setPauthId(PAUTH_ID);
        
        int originalSize = maintainStatusService.getStatuses(PAUTH_ID).size();
        
        maintainStatusService.save(status);
        
        int newSize = maintainStatusService.getStatuses(PAUTH_ID).size();
        
        assertEquals(originalSize + 1, newSize);
    }
    
    @Test
    public void testSaveForPrimarySource() throws DuplicateRecordException {
        PlrUserRoleService mockUserRoleService = mock(PlrUserRoleService.class);
        when(mockUserRoleService.isPrimarySource()).thenReturn(true);
        StatusDto dto = new StatusDto();
        dto.setEndReasonCode("CEASE");
        maintainStatusService.setUserRoleService(mockUserRoleService);
        try{
            maintainStatusService.save(dto);
        } catch(EntityValidationException eve) {
            assertEquals(eve.getMessage(), "PRS.SYS.ADR.UNK.1.0.7045: Primary source is not allowed to cease status.");
        }

    }

}
