package ca.bc.gov.health.plr.dto.provider;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.DtoCommon;
import ca.bc.gov.health.plr.dto.DtoMetaData;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 * Test the ProviderDetails class.
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 * @author Adebiyi Kuseju
 */
public class ProviderDetailsTest {

    @Test
    public void test_validFirstNameWithAccents_removeAccents() {
        PersonNameDto personName = new PersonNameDto();
        String firstName = "Tĥïŝ ĩš â fůňķŷ Šťŕĭńġ";
        personName.setFirstName(firstName);
        assertEquals("This is a funky String", personName.getFirstName());
    }

    /*
     * Test copyAndRemoveIncorrectData without any filtering i.e. vanilla copy
     */
    @Test
    public void copyAndRemoveIncorrectData_No_Filter() throws Exception {
        ProviderDto providerDetails = new ProviderDto();

        populate(providerDetails);
//        providerDetails.setPauthId(Long.MIN_VALUE);
//        providerDetails.setTypeId(Long.MIN_VALUE);
//        providerDetails.setType("Test");
//        providerDetails.setConfidential(true);
//        providerDetails.setProviderType(ProviderType.ORGANIZATION);
//        providerDetails.setJurisdiction(new JurisdictionNameCodeDto());
//
//        providerDetails.setRegistryIdentifiers(getItemList(RegistryIdentifierDto.class));
//        providerDetails.setIdentifiers(getItemList(CollegeIdentifierDto.class));
//        providerDetails.setIndNames(getItemList(PersonNameDto.class));
//        providerDetails.setOrgNames(getItemList(OrgNameDto.class));
//        providerDetails.setDemographicDetails(getItemList(DemographicDetailsDto.class));
//        providerDetails.setAddresses(getItemList(AddressDto.class));
//        providerDetails.setTelecommunication(getItemList(TelecommunicationDto.class));
//        providerDetails.setElectronicAddresses(getItemList(ElectronicAddressDto.class));
//        providerDetails.setWorkLocationList(getItemList(WorkLocationDto.class));
//        providerDetails.setStatuses(getItemList(StatusDto.class));
//        providerDetails.setConditions(getItemList(ConditionsDto.class));
//        providerDetails.setExpertise(getItemList(ExpertiseDto.class));
//        providerDetails.setCredentials(getItemList(CredentialsDto.class));
//        providerDetails.setInformationRoutes(getItemList(InformationRouteDto.class));
//        providerDetails.setDisciplinaryActions(getItemList(DisciplinaryActionDto.class));
//        providerDetails.setConfidentialities(getItemList(ConfidentialityIndicatorDto.class));
//        providerDetails.setProviderRelationships(getItemList(ProviderRelationshipDto.class));
//        providerDetails.setRegistryUserRelationships(getItemList(RegistryUserRelationshipDto.class));
//        providerDetails.setNotes(getItemList(NoteDto.class));

        ProviderDto providerDetailsCopy = providerDetails.copyAndRemoveNonUpdateableData(false);

        assertTrue(providerDetails.getPauthId().equals(providerDetailsCopy.getPauthId()));
        assertTrue(providerDetails.getTypeId().equals(providerDetailsCopy.getTypeId()));
        assertTrue(providerDetails.getType().equals(providerDetailsCopy.getType()));
        assertTrue(providerDetails.getProviderType().equals(providerDetailsCopy.getProviderType()));
        assertTrue(providerDetails.getJurisdiction().equals(providerDetailsCopy.getJurisdiction()));
        assertEqual(providerDetails.getRegistryIdentifiers(), providerDetailsCopy.getRegistryIdentifiers());
        assertEqual(providerDetails.getIdentifiers(), providerDetailsCopy.getIdentifiers());
        assertEqual(providerDetails.getIndNames(), providerDetailsCopy.getIndNames());
        assertEqual(providerDetails.getOrgNames(), providerDetailsCopy.getOrgNames());
        assertEqual(providerDetails.getAddresses(), providerDetailsCopy.getAddresses());
        assertEqual(providerDetails.getTelecommunication(), providerDetailsCopy.getTelecommunication());
        assertEqual(providerDetails.getElectronicAddresses(), providerDetailsCopy.getElectronicAddresses());
        assertEqual(providerDetails.getWorkLocationList(), providerDetailsCopy.getWorkLocationList());
        assertEqual(providerDetails.getStatuses(), providerDetailsCopy.getStatuses());
        assertEqual(providerDetails.getConditions(), providerDetailsCopy.getConditions());
        assertEqual(providerDetails.getExpertise(), providerDetailsCopy.getExpertise());
        assertEqual(providerDetails.getCredentials(), providerDetailsCopy.getCredentials());
        assertEqual(providerDetails.getInformationRoutes(), providerDetailsCopy.getInformationRoutes());
        assertEqual(providerDetails.getDisciplinaryActions(), providerDetailsCopy.getDisciplinaryActions());
        assertEqual(providerDetails.getConfidentialityIndicators(), providerDetailsCopy.getConfidentialityIndicators());
        assertEqual(providerDetails.getProviderRelationships(), providerDetailsCopy.getProviderRelationships());
        assertEqual(providerDetails.getRegistryUserRelationships(), providerDetailsCopy.getRegistryUserRelationships());
        assertEqual(providerDetails.getNotes(), providerDetailsCopy.getNotes());

    }

    /*
     * Test copyAndRemoveIncorrectData with filtering
     */
    @Test
    public void copyAndRemoveIncorrectData_Filtered() {
        ProviderDto providerDetails = new ProviderDto();

        List<RegistryIdentifierDto> regIds = new ArrayList<>();
        RegistryIdentifierDto temp = new RegistryIdentifierDto();
        temp.setId(Long.MIN_VALUE);
        regIds.add(temp);

        temp = new RegistryIdentifierDto();
        temp.setId(Long.MAX_VALUE);
        temp.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CHANGE.getValue());
        regIds.add(temp);

        temp = new RegistryIdentifierDto();
        temp.setId(1L);
        temp.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CEASE.getValue());
        regIds.add(temp);

        temp = new RegistryIdentifierDto();
        temp.setId(2L);
        temp.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.UNKNOWN.getValue());
        regIds.add(temp);

        temp = new RegistryIdentifierDto();
        temp.setId(3L);
        temp.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CORRECT.getValue());
        regIds.add(temp);

        temp = new RegistryIdentifierDto();
        temp.setId(4L);
        temp.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CHANGE.getValue());
        regIds.add(temp);

        providerDetails.setRegistryIdentifiers(regIds);
        ProviderDto providerDetailsCopy = providerDetails.copyAndRemoveNonUpdateableData(false);

        assertFalse(providerDetails.getRegistryIdentifiers().size() == providerDetailsCopy.getRegistryIdentifiers().size());
        assertTrue(providerDetailsCopy.getRegistryIdentifiers().size() == 0);
    }

    /*
     * Test copyAndRemoveIncorrectData with filtering putting oredeing into consideration
     */
    @Test
    public void copyAndRemoveIncorrectData_Filtered_Ordered() {
        ProviderDto providerDetails = new ProviderDto();

        List<RegistryIdentifierDto> regIds = new ArrayList<>();
        RegistryIdentifierDto temp = new RegistryIdentifierDto();
        temp.setId(Long.MIN_VALUE);
        regIds.add(temp);

        temp = new RegistryIdentifierDto();
        temp.setId(Long.MAX_VALUE);
        temp.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CHANGE.getValue());
        regIds.add(temp);

        temp = new RegistryIdentifierDto();
        temp.setId(1L);
        temp.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CEASE.getValue());
        regIds.add(temp);

        temp = new RegistryIdentifierDto();
        temp.setId(2L);
        temp.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.UNKNOWN.getValue());
        regIds.add(temp);

        temp = new RegistryIdentifierDto();
        temp.setId(3L);
        temp.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CORRECT.getValue());
        regIds.add(temp);

        temp = new RegistryIdentifierDto();
        temp.setId(4L);
        temp.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CHANGE.getValue());
        regIds.add(temp);

        providerDetails.setRegistryIdentifiers(regIds);
        ProviderDto providerDetailsCopy = providerDetails.copyAndRemoveNonUpdateableData(false);

        for (int i = 0; i < providerDetailsCopy.getRegistryIdentifiers().size(); i++) {
            assertTrue(providerDetails.getRegistryIdentifiers().get(i).equals(providerDetailsCopy.getRegistryIdentifiers().get(i)));
        }

    }

    /*
     * Test toEsbVersion
     */
    @Test
    public void toEsbVersion() throws Exception {
        ProviderDto providerDetails = new ProviderDto();
        populate(providerDetails);
        
        ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails esbProviderDetails = providerDetails.toEsbVersion();
        
        assertEquals(esbProviderDetails.getPauthId(), providerDetails.getPauthId());
        assertEquals(esbProviderDetails.getTypeId(), providerDetails.getTypeId());
        assertEquals(esbProviderDetails.getType(), providerDetails.getType());
        assertEquals(esbProviderDetails.isConfidential(), providerDetails.isConfidential());
       
        assertTrue(isEsbVersion(esbProviderDetails.getJurisdiction(), providerDetails.getJurisdiction()));
        
        assertTrue(isEsbVersion(esbProviderDetails.getRegistryIdentifiers(), providerDetails.getRegistryIdentifiers()));
        assertTrue(isEsbVersion(esbProviderDetails.getIdentifiers(), providerDetails.getIdentifiers()));
        assertTrue(isEsbVersion(esbProviderDetails.getIndNames(), providerDetails.getIndNames()));
        assertTrue(isEsbVersion(esbProviderDetails.getOrgNames(), providerDetails.getOrgNames()));
        assertTrue(isEsbVersion(esbProviderDetails.getDemographicDetails(), providerDetails.getDemographicDetails()));
        assertTrue(isEsbVersion(esbProviderDetails.getAddresses(), providerDetails.getAddresses()));
        assertTrue(isEsbVersion(esbProviderDetails.getTelecommunication(), providerDetails.getTelecommunication()));
        assertTrue(isEsbVersion(esbProviderDetails.getElectronicAddresses(), providerDetails.getElectronicAddresses()));
        assertTrue(isEsbVersion(esbProviderDetails.getWorkLocationList(), providerDetails.getWorkLocationList()));                
        assertTrue(isEsbVersion(esbProviderDetails.getStatuses(), providerDetails.getStatuses()));
        assertTrue(isEsbVersion(esbProviderDetails.getConditions(), providerDetails.getConditions()));
        assertTrue(isEsbVersion(esbProviderDetails.getExpertise(), providerDetails.getExpertise()));
        assertTrue(isEsbVersion(esbProviderDetails.getCredentials(), providerDetails.getCredentials()));
        assertTrue(isEsbVersion(esbProviderDetails.getInformationRoutes(), providerDetails.getInformationRoutes()));
        assertTrue(isEsbVersion(esbProviderDetails.getDisciplinaryActions(), providerDetails.getDisciplinaryActions()));
        assertTrue(isEsbVersion(esbProviderDetails.getConfidentialityIndicators(), providerDetails.getConfidentialityIndicators()));
        assertTrue(isEsbVersion(esbProviderDetails.getProviderRelationships(), providerDetails.getProviderRelationships()));
        assertTrue(isEsbVersion(esbProviderDetails.getRegistryUserRelationships(), providerDetails.getRegistryUserRelationships()));
        assertTrue(isEsbVersion(esbProviderDetails.getNotes(), providerDetails.getNotes()));       
        

    }
    
    @Test
    public void pickAndAddToCurrentOrHistoryViewTest() throws Exception {
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

        RegistryIdentifierDto rid = new RegistryIdentifierDto();
        rid.setActive(true);
        rid.setEffectiveEndDate(sdf.parse("2050-01-10"));
        rid.setEndReasonCode(null);
        List<RegistryIdentifierDto> existingRidList = new ArrayList<>();
        existingRidList.add(rid);
        List<RegistryIdentifierDto> newRidList = new ArrayList<>();
        DtoCommon.pickAndAddToCurrentOrHistoryView(Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_CURRENT_VIEW, existingRidList, newRidList);
        assertEquals(newRidList.size(), 1);

        rid = new RegistryIdentifierDto();
        rid.setActive(true);
        rid.setEffectiveEndDate(sdf.parse("2000-01-10"));
        rid.setEndReasonCode("CHG");
        existingRidList = new ArrayList<>();
        existingRidList.add(rid);
        newRidList = new ArrayList<>();
        DtoCommon.pickAndAddToCurrentOrHistoryView(Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_HISTORY_VIEW, existingRidList, newRidList);
        assertEquals(newRidList.size(), 1);
        
        rid = new RegistryIdentifierDto();
        rid.setActive(false);
        existingRidList = new ArrayList<>();
        existingRidList.add(rid);
        newRidList = new ArrayList<>();
        DtoCommon.pickAndAddToCurrentOrHistoryView(Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_CURRENT_VIEW, existingRidList, newRidList);
        assertEquals(newRidList.size(), 0);
        newRidList = new ArrayList<>();
        DtoCommon.pickAndAddToCurrentOrHistoryView(Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_HISTORY_VIEW, existingRidList, newRidList);
        assertEquals(newRidList.size(), 0);
        
        
        rid = new RegistryIdentifierDto();
        rid.setActive(true);
        rid.setEffectiveEndDate(null);
        existingRidList = new ArrayList<>();
        existingRidList.add(rid);
        newRidList = new ArrayList<>();
        DtoCommon.pickAndAddToCurrentOrHistoryView(Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_CURRENT_VIEW, existingRidList, newRidList);
        assertEquals(newRidList.size(), 1);
        newRidList = new ArrayList<>();
        rid = new RegistryIdentifierDto();
        rid.setActive(true);
        rid.setEndReasonCode("CHG");
        rid.setEffectiveEndDate(sdf.parse("2000-01-10"));
        existingRidList.add(rid);
        DtoCommon.pickAndAddToCurrentOrHistoryView(Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_HISTORY_VIEW, existingRidList, newRidList);
        assertEquals(newRidList.size(), 2);
        
    }
    
    @Test
    public void copyForCurrentOrHistoryViews() throws Exception {
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        ProviderDto original = new ProviderDto();
        
        RegistryIdentifierDto rid = new RegistryIdentifierDto();
        rid.setActive(true);
        rid.setEffectiveEndDate(sdf.parse("2050-01-10"));
        rid.setEndReasonCode(null);
        List<RegistryIdentifierDto> existingRidList = new ArrayList<>();
        existingRidList.add(rid);
        original.setRegistryIdentifiers(existingRidList);
        
        ProviderDto newProvider = original.copyForCurrentOrHistoryViews(Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_CURRENT_VIEW);
        List<RegistryIdentifierDto> newRidList = newProvider.getRegistryIdentifiers();
        assertEquals(newRidList.size(), 1);

        rid = new RegistryIdentifierDto();
        rid.setActive(true);
        rid.setEffectiveEndDate(sdf.parse("2000-01-10"));
        rid.setEndReasonCode("CHG");
        existingRidList = new ArrayList<>();
        existingRidList.add(rid);
        original.setRegistryIdentifiers(existingRidList);
        
        newProvider = original.copyForCurrentOrHistoryViews(Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_HISTORY_VIEW);
        newRidList = newProvider.getRegistryIdentifiers();
        assertEquals(newRidList.size(), 1);
        
        AddressDto addrDto = new AddressDto();
        addrDto.setActive(true);
        addrDto.setEffectiveEndDate(sdf.parse("2050-01-10"));
        addrDto.setEndReasonCode(null);
        List<AddressDto> existingAddrList = new ArrayList<>();
        existingAddrList.add(addrDto);
        WorkLocationDto wld = new WorkLocationDto();
        wld.setActive(true);
        wld.setAddresses(existingAddrList);
        List<WorkLocationDto> wldList = new ArrayList<>();
        wldList.add(wld);
        original = new ProviderDto();
        original.setWorkLocationList(wldList);
        newProvider = original.copyForCurrentOrHistoryViews(Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_CURRENT_VIEW);
        List<WorkLocationDto> newWldList = newProvider.getWorkLocationList();
        assertEquals(newWldList.get(0).getAddresses().size(), 1);

    }

        
    private void populate(ProviderDto providerDetails) throws Exception {
        providerDetails.setPauthId(Long.MIN_VALUE);
        providerDetails.setTypeId(Long.MIN_VALUE);
        providerDetails.setType("Test");
        providerDetails.setConfidential(true);
        providerDetails.setProviderType(ProviderType.ORGANIZATION);
        providerDetails.setJurisdiction(new JurisdictionNameCodeDto());

        providerDetails.setRegistryIdentifiers(getItemList(RegistryIdentifierDto.class));
        providerDetails.setIdentifiers(getItemList(CollegeIdentifierDto.class));
        providerDetails.setIndNames(getItemList(PersonNameDto.class));
        providerDetails.setOrgNames(getItemList(OrgNameDto.class));
        providerDetails.setDemographicDetails(getItemList(DemographicDetailsDto.class));
        providerDetails.setAddresses(getItemList(AddressDto.class));
        providerDetails.setTelecommunication(getItemList(TelecommunicationDto.class));
        providerDetails.setElectronicAddresses(getItemList(ElectronicAddressDto.class));
        providerDetails.setWorkLocationList(getWlItemList());
        providerDetails.setStatuses(getItemList(StatusDto.class));
        providerDetails.setConditions(getItemList(ConditionsDto.class));
        providerDetails.setExpertise(getItemList(ExpertiseDto.class));
        providerDetails.setCredentials(getItemList(CredentialsDto.class));
        providerDetails.setInformationRoutes(getItemList(InformationRouteDto.class));
        providerDetails.setDisciplinaryActions(getItemList(DisciplinaryActionDto.class));
        providerDetails.setConfidentialities(getItemList(ConfidentialityIndicatorDto.class));
        providerDetails.setProviderRelationships(getItemList(ProviderRelationshipDto.class));
        providerDetails.setRegistryUserRelationships(getItemList(RegistryUserRelationshipDto.class));
        providerDetails.setNotes(getItemList(NoteDto.class));
    }

    private List getItemList(Class<? extends DtoMetaData> clazz) throws Exception {
        List items = new ArrayList();
        DtoMetaData item = clazz.newInstance();

        item.setId(Long.MIN_VALUE);
        item.setUpdatable(true);
        items.add(item);

        return items;
    }
    
    private List getWlItemList() throws Exception {
        List items = new ArrayList();
        WorkLocationDto item = new WorkLocationDto();

        item.setId(Long.MIN_VALUE);
        item.setDisplayActive(true);
        items.add(item);

        return items;
    }

    private void assertEqual(List first, List second) {

        if (first != null && second != null) {
            assertTrue(first.size() == second.size());

            for (int i = 0; i < first.size(); i++) {
                assertTrue(first.get(i).equals(second.get(i)));
            }

        } else {
            assertTrue(first == null && second == null);
        }

    }
    
    private boolean isEsbVersion(List esbVersion, List original) {
        return isEsbVersion(esbVersion.get(0), original.get(0));
    }
    
    private boolean isEsbVersion(Object esbVersion, Object original) {
        int startNdxForSimpleName = original.getClass().getName().lastIndexOf(".") + 1;
        return esbVersion.getClass().getName().contains("esb") && esbVersion.getClass().getName().endsWith(original.getClass().getName().substring(startNdxForSimpleName));
    }
}
