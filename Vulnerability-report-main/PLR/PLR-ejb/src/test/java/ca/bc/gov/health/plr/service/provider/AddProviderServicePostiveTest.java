package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.provider.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsCtRegIdentifierTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsIdentifiers;
import ca.bc.gov.health.plr.ejb.entity.GrsPersonNames;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryIdentifiers;
import ca.bc.gov.health.plr.ejb.entity.GrsTelephones;
import ca.bc.gov.health.plr.ejb.entity.PrsCtAddressTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCommunPurposeTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.ejb.entity.PrsCtElectronicAddrTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtGenderCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtIdentifierTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvCredentialTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvExpertiseTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvState;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusClassCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusReasonCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsDemographicDetails;
import ca.bc.gov.health.plr.ejb.entity.PrsProviderCredentials;
import ca.bc.gov.health.plr.ejb.entity.PrsProviderExpertises;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.PrsStatuses;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainProviderService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.codesDao;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.entityManagerProxy;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.util.SpoofedUserHelper;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.NamingException;
import org.joda.time.LocalDate;
import org.junit.AfterClass;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNotSame;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.fail;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;

/**
 *
 * @author sumesh.kariyil
 */
public class AddProviderServicePostiveTest extends IntegrationSetup {

    private static final List<PrsProviders> providersToDelete = new ArrayList<>();
    private static PrsCtIdentifierTypes identifierType;
    private static PrsCtIdentifierTypes orgIdentifierType;
    private static PrsCtProviderRoleTypes nurse;
    private static PrsCtProviderRoleTypes orgRole;
    private static PrsCtStatusClassCodes assignedEntity;
    private static PrsCtStatusCodes statusCode;
    private static PrsCtStatusReasonCodes statusReasonCode;
    private static final Date date = new Date();
    private static PrsCtCommunPurposeTypes addressPurpose;
    private static PrsCtAddressTypes addressType;
    private static PrsCtElectronicAddrTypes eAddressType;
    private static PrsCtCountries countryAddress;
    private static PrsCtProvCredentialTypes bachelorDegree;
    private static PrsCtProvExpertiseTypes acupuncture;
    private static PrsCtProvExpertiseTypes generalMedicine;
    private static PrsCtGenderCodes genderCode;
    private static PrsCtProvState provinceCredential;
    private static GrsCtRegIdentifierTypes cpnType;
    private static GrsCtRegIdentifierTypes ipcType;
    private static PrsCtProviderRoleTypes dentist;
    private static PrsCtStatusClassCodes licensure;
    private static PrsCtIdentifierTypes dentistId;
    private static PrsCtGenderCodes gender;

    @BeforeClass
    public static void setUpClass() throws NamingException {

        identifierType = codesDao.lookup(PrsCtIdentifierTypes.class, "RNID");
        orgIdentifierType = codesDao.lookup(PrsCtIdentifierTypes.class, "ORGID");
        nurse = codesDao.lookup(PrsCtProviderRoleTypes.class, "RN");
        orgRole = codesDao.lookup(PrsCtProviderRoleTypes.class, "ORG");        
        assignedEntity = codesDao.lookup(PrsCtStatusClassCodes.class, CodeTableCodes.PrsCtStatusClassCodes.ASSIGNED_ENTITY);
        statusCode = codesDao.lookup(PrsCtStatusCodes.class, CodeTableCodes.PrsCtStatusCodes.ACTIVE);
        statusReasonCode = codesDao.lookup(PrsCtStatusReasonCodes.class, CodeTableCodes.PrsCtStatusReasonCodes.GOOD_STANDING);
        addressPurpose = codesDao.lookup(PrsCtCommunPurposeTypes.class, CodeTableCodes.PrsCtCommunPurposeTypes.BUSINESS_CONTACT);
        addressType = codesDao.lookup(PrsCtAddressTypes.class, CodeTableCodes.PrsCtAddressTypes.MAILING_ADDRESS);
        eAddressType = codesDao.lookup(PrsCtElectronicAddrTypes.class, CodeTableCodes.PrsCtElectronicAddrTypes.FTP);
        countryAddress = codesDao.lookup(PrsCtCountries.class, "AF");
        bachelorDegree = codesDao.lookup(PrsCtProvCredentialTypes.class, "BD");
        acupuncture = codesDao.lookup(PrsCtProvExpertiseTypes.class, "AMD1");
        generalMedicine = codesDao.lookup(PrsCtProvExpertiseTypes.class, "ERN1");
        genderCode = codesDao.lookup(PrsCtGenderCodes.class, "F");
        provinceCredential = codesDao.lookup(PrsCtProvState.class, "ABE");

        cpnType = codesDao.lookup(GrsCtRegIdentifierTypes.class, CodeTableCodes.GrsCtRegIdentifierTypes.COMMON_PROVIDER_NUMBER);
        ipcType = codesDao.lookup(GrsCtRegIdentifierTypes.class, CodeTableCodes.GrsCtRegIdentifierTypes.INTERNAL_PROVIDER_ID);

        dentist = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        licensure = codesDao.lookup(PrsCtStatusClassCodes.class, CodeTableCodes.PrsCtStatusClassCodes.LICENSURE);
        dentistId = codesDao.lookup(PrsCtIdentifierTypes.class, "DENID");

        gender = codesDao.lookup(PrsCtGenderCodes.class, "F");
    }

    @AfterClass
    public static void tearDownClass() {
        ArrayList<Exception> exceptions = new ArrayList<>();
        providersToDelete.removeAll(Collections.singleton(null));
        for (PrsProviders prsProviders : providersToDelete) {
            try {
                entityManagerProxy.remove(prsProviders);
            } catch (Exception e) {
                e.printStackTrace();
                exceptions.add(e);
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    @Before
    public void setUpRegUser() {
        SpoofedUserHelper.currentUser = "plr-reg-admin";
    }

    @Test
    public void testSave_mandatoryAttributes() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);
        PrsProviders provider = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        providersToDelete.add(provider);

        GrsPersonNames personName = provider.getGrsPersonNamesList().get(0);
        GrsIdentifiers identifier = provider.getGrsIdentifiersList().get(0);
        for (GrsIdentifiers ids : provider.getGrsIdentifiersList()) {
            if (!ids.getIdentifierTypeCode().getCtlNameCode().equals(CodeTableCodes.PrsCtIdentifierTypeCodes.CPN.getValue())
                    && !ids.getIdentifierTypeCode().getCtlNameCode().equals(CodeTableCodes.PrsCtIdentifierTypeCodes.IPC.getValue())) {
                // assign to non CPN/IPC identifier for asserts below
                identifier = ids;
            }
        }
        PrsStatuses status = provider.getPrsStatusesList().get(0);
        assertEquals(nurse, provider.getHptCode());
        assertEquals(identifierType, identifier.getIdentifierTypeCode());
        assertEquals("david1", identifier.getProviderChid());
        assertEquals(stripMillis(date), stripMillis(identifier.getEffectiveStartDate()));
        assertEquals(assignedEntity, status.getStatusClassCode());
        assertEquals(statusCode, status.getStatusTypeCode());
        assertEquals(statusReasonCode, status.getStatusReasonCode());
        assertEquals(stripMillis(date), (status.getEffectiveStartDate()));
        assertEquals("David", personName.getPrsnFirstGivenNameTxt());
        assertEquals("Sharpe", personName.getPrsnSurnameTxt());
        assertEquals(gender, provider.getPrsDemographicDetailsList().get(0).getGenderCode());
    }

    /**
     * Test that AddProviderService persists a provider when every possibly
     * attribute is provided.
     *
     * @throws ca.bc.gov.health.plr.rule.BusinessRuleException
     */
    @Test
    public void testSave_allAttributes() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {

        String addressCity = "addressCity";
        String addressLine1 = "addressLine1";
        String addressLine2 = "addressLine2";
        String provinceTxt = "British Columbia (BC)";
        String cityCredential = "cityCredential";
        String designation = "designation";
        String emailAddress = "emailAddress@email.com";
        String extNum = "extNum34";
        String faxAreaCode = "faxAreaCode222";
        String faxNumber = "faxNumber3456666";
        String firstName = "FirstName";
        String someId = "someId";
        String institution = "someInstitution";
        String namePrefix = "namePrefix";
        String phoneAreaCode = "phoneAreaCode223";
        String phoneNumber = "phoneNumber5678888";
        String postalCode = "postalCode";
        String regNumber = "regNumber";
        String secondName = "SecondName";
        String sourceCode = "sourceCode";
        String surname = "surname";
        String thirdname = "Thirdname";

        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);
        providerDto.setTypeId(nurse.getCtlId());
        providerDto.getAddresses().get(0).setCity(addressCity);
        providerDto.getAddresses().get(0).setAddressLineOne(addressLine1);
        providerDto.getAddresses().get(0).setAddressLineTwo(addressLine2);
        providerDto.getAddresses().get(0).setCommunicationPurposeId(addressPurpose.getCtlId());
        providerDto.getAddresses().get(0).setTypeId(addressType.getCtlId());
        providerDto.getAddresses().get(0).setCountryId(countryAddress.getCtlId());
        providerDto.getAddresses().get(0).setPostalCode(postalCode);
        providerDto.getAddresses().get(0).setProvinceOrStateTxt(provinceTxt);
        providerDto.getAddresses().get(0).setEffectiveStartDate(date);

        providerDto.getCredentials().add(new CredentialsDto());
        providerDto.getCredentials().get(0).setInstitutionCity(cityCredential);
        providerDto.getCredentials().get(0).setTypeId(bachelorDegree.getCtlId());
        providerDto.getCredentials().get(0).setDesignation(designation);
        providerDto.getCredentials().get(0).setEffectiveStartDate(date);
        providerDto.getCredentials().get(0).setEquivalencyFlag(true);
        providerDto.getCredentials().get(0).setGrantingInstitution(institution);
        providerDto.getCredentials().get(0).setInstitutionProvStateId(provinceCredential.getCtlId());
        providerDto.getCredentials().get(0).setRegistrationNumber(regNumber);
        providerDto.getDemographicDetails().get(0).setBirthDate(date);
        providerDto.getDemographicDetails().get(0).setGenderId(genderCode.getCtlId());

        providerDto.getExpertise().add(new ExpertiseDto());
        providerDto.getExpertise().get(0).setEffectiveEndDate(date);
        providerDto.getExpertise().get(0).setEffectiveStartDate(date);
        providerDto.getExpertise().get(0).setTypeId(generalMedicine.getCtlId());//General Surgery
        providerDto.getExpertise().get(0).setSourcesCode(sourceCode);

        providerDto.getStatuses().get(0).setEffectiveEndDate(date);
        providerDto.getStatuses().get(0).setEffectiveStartDate(date);
        providerDto.getStatuses().get(0).setClassCodeId(assignedEntity.getCtlId());
        providerDto.getStatuses().get(0).setTypeId(statusCode.getCtlId());
        providerDto.getStatuses().get(0).setReasonCodeId(statusReasonCode.getCtlId());
        providerDto.getElectronicAddresses().get(0).setAddress(emailAddress);
        providerDto.getElectronicAddresses().get(0).setEffectiveStartDate(date);
        providerDto.getIdentifiers().get(0).setEffectiveStartDate(date);
        providerDto.getIdentifiers().get(0).setIdentifier(someId);
        providerDto.getIdentifiers().get(0).setTypeId(identifierType.getCtlId());
        providerDto.getIndNames().get(0).setPrefix(namePrefix);
        providerDto.getIndNames().get(0).setFirstName(firstName);
        providerDto.getIndNames().get(0).setSecondName(secondName);
        providerDto.getIndNames().get(0).setLastName(surname);
        providerDto.getIndNames().get(0).setThirdName(thirdname);
        providerDto.getIndNames().get(0).setEffectiveStartDate(date);
        providerDto.getFax().setTypeCode(CodeTableCodes.PrsCtTelecomNumberTypes.FAX.getValue());
        providerDto.getFax().setAreaCode(faxAreaCode);
        providerDto.getFax().setNumber(faxNumber);
        providerDto.getFax().setEffectiveStartDate(date);
        providerDto.getPhone().setTypeCode(CodeTableCodes.PrsCtTelecomNumberTypes.TELEPHONE.getValue());
        providerDto.getPhone().setExtension(extNum);
        providerDto.getPhone().setAreaCode(phoneAreaCode);
        providerDto.getPhone().setNumber(phoneNumber);
        providerDto.getPhone().setEffectiveStartDate(date);

        PrsProviders provider = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        providersToDelete.add(provider);

        GrsAddresses address = provider.getGrsAddressesList().get(0);
        PrsProviderCredentials credential = provider.getPrsProviderCredentialsList().get(0);
        PrsProviderExpertises expertise = provider.getPrsProviderExpertisesList().get(0);
        PrsStatuses status = provider.getPrsStatusesList().get(0);
        GrsIdentifiers identifier = provider.getGrsIdentifiersList().get(0);
        GrsPersonNames name = provider.getGrsPersonNamesList().get(0);
        PrsDemographicDetails demographics = provider.getPrsDemographicDetailsList().get(0);

        // check that the ipc and cpn provider identifiers were created
        assertEquals(provider.getGrsIdentifiersList().size(), 3);
        GrsIdentifiers cpnID = null;
        GrsIdentifiers ipcID = null;
        for (GrsIdentifiers ids : provider.getGrsIdentifiersList()) {
            if (ids.getIdentifierTypeCode().getCtlNameCode().equals(CodeTableCodes.PrsCtIdentifierTypeCodes.CPN.getValue())) {
                cpnID = ids;
            } else if (ids.getIdentifierTypeCode().getCtlNameCode().equals(CodeTableCodes.PrsCtIdentifierTypeCodes.IPC.getValue())) {
                ipcID = ids;
            } else {
                // assign to non CPN/IPC identifier for asserts below
                identifier = ids;
            }
        }
        assertNotNull(cpnID);
        assertNotNull(ipcID);

        // always owned by MOH
        assertTrue(cpnID.getDataOwnerCode().getCtlNameCode().equals(CodeTableCodes.PrsCtDataOwnerCodes.MOH.getValue()));
        assertTrue(ipcID.getDataOwnerCode().getCtlNameCode().equals(CodeTableCodes.PrsCtDataOwnerCodes.MOH.getValue()));

        // make sure the IPC and CPN numbers match
        boolean ipcMatch = false;
        boolean cpnMatch = false;
        for (GrsRegistryIdentifiers rids : provider.getGrsRegistryIdentifiersList()) {
            if (rids.getIdentifierTypeCode().getCtlNameCode().equals(CodeTableCodes.PrsCtIdentifierTypeCodes.CPN.getValue())) {
                if (cpnID != null && cpnID.getProviderChid().equals(rids.getProviderChid())) {
                    cpnMatch = true;
                }
            }
            if (rids.getIdentifierTypeCode().getCtlNameCode().equals(CodeTableCodes.PrsCtIdentifierTypeCodes.IPC.getValue())) {
                if (ipcID != null && ipcID.getProviderChid().equals(rids.getProviderChid())) {
                    ipcMatch = true;
                }
            }
        }
        assertTrue(cpnMatch);
        assertTrue(ipcMatch);

        assertEquals(addressCity, address.getCityTxt());
        assertEquals(addressLine1, address.getAddressLine1Txt());
        assertEquals(addressLine2, address.getAddressLine2Txt());
        assertEquals(addressPurpose, address.getCmnctnPrpsTypCd());
        assertEquals(addressType, address.getAddressTypeCode());
        assertEquals(cityCredential, credential.getInstitutionCityTxt());
        assertEquals(countryAddress, address.getCountryCode());
        assertEquals(bachelorDegree, credential.getProviderCredentialTypeCode());
        assertEquals(stripMillis(date), stripMillis(demographics.getDateOfBirthDate()));
        assertEquals(designation, credential.getCredentialDesignationTxt());
        assertEquals(stripMillis(date), stripMillis(expertise.getEffectiveEndDate()));
        assertEquals(stripMillis(date), stripMillis(status.getEffectiveEndDate()));
        assertEquals(stripMillis(date), stripMillis(credential.getEffectiveStartDate()));
        assertEquals(stripMillis(date), stripMillis(expertise.getEffectiveStartDate()));
        assertEquals(stripMillis(date), stripMillis(identifier.getEffectiveStartDate()));
        assertEquals(stripMillis(date), stripMillis(status.getEffectiveStartDate()));
        assertEquals(emailAddress, provider.getGrsElectronicAddressesList().get(0).getElectronicAddressTxt());
        assertEquals(true, credential.getEquivalencyFlag().getCtlNameCode().equals("Y"));
        assertEquals(generalMedicine, expertise.getProviderExpertiseTypeCode());
        assertEquals(firstName, name.getPrsnFirstGivenNameTxt());
        assertEquals(genderCode, demographics.getGenderCode());
        assertEquals(someId, identifier.getProviderChid());
        assertEquals(identifierType, identifier.getIdentifierTypeCode());
        assertEquals(institution, credential.getCredentialGrantingInstTxt());
        assertEquals(namePrefix, name.getPrsnPrefixTxt());
        assertEquals(postalCode, address.getPostalCodeOrZipTxt());
        assertEquals(nurse, provider.getHptCode());
        assertEquals(provinceCredential, credential.getInstitutionProvinceCode());
        assertEquals(regNumber, credential.getRegistrationNumberTxt());
        assertEquals(secondName, name.getPrsnSecondGivenNameTxt());
        assertEquals(assignedEntity, status.getStatusClassCode());
        assertEquals(statusCode, status.getStatusTypeCode());
        assertEquals(statusReasonCode, status.getStatusReasonCode());
        assertEquals(surname, name.getPrsnSurnameTxt());
        assertEquals(thirdname, name.getPrsnThirdGivenNameTxt());

        List<GrsTelephones> telephones = provider.getGrsTelephonesList();
        assertEquals(2, telephones.size());
        for (GrsTelephones telephone : telephones) {
            String numType = telephone.getTlcmnctnNmbrTypCd().getCtlNameCode();
            if (numType.equals(CodeTableCodes.PrsCtTelecomNumberTypes.TELEPHONE.getValue())) {
                assertEquals(phoneAreaCode.substring(13), telephone.getAreaCodeNum());
                assertEquals(phoneNumber.substring(11), telephone.getTelecommunicationNmbrNum());
                assertEquals(extNum.substring(6), telephone.getExtensionNum());
            } else if (numType.equals(CodeTableCodes.PrsCtTelecomNumberTypes.FAX.getValue())) {
                assertEquals(faxAreaCode.substring(11), telephone.getAreaCodeNum());
                assertEquals(faxNumber.substring(9), telephone.getTelecommunicationNmbrNum());
            } else {
                fail(String.format("Unexpected telephone code '%s'", numType));
            }
        }
    }

    /**
     * Test that AddProviderService sets the "hidden Provider entity fields" to
     * known values.
     *
     * The Add Provider Screens do not include fields for all Provider entity
     * properties, but some of these properties are mandatory, so
     * AddProviderService::save hard-codes the values of these properties to
     * required values.
     *
     */
    @Test
    public void testSave_mandatoryInternalAttributes() throws DuplicateRecordException {
        ProviderDto providerDto = buildMinimiumProviderDto(dentist, identifierType, assignedEntity);
        PrsProviders provider;
        try {
            provider = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
            providersToDelete.add(provider);
            GrsPersonNames personName = provider.getGrsPersonNamesList().get(0);
            assertEquals("CGI_TODO", provider.getInternalInternalChid());
            assertEquals(provider.getHptCode().getCategoryCode(), provider.getCategoryCode());
            assertEquals("N", personName.getPnamePreferredFlag().getCtlNameCode());
            assertEquals(CodeTableCodes.PrsCtNameTypes.CURRENT_KNOWN_NAME.getValue(), personName.getNameTypeCode().getCtlNameCode());
            assertEquals("IND", provider.getPartyTypeCode().getCtlNameCode());
            assertEquals(CodeTableCodes.PrsCtJurisdictions.BRITISH_COLUMBIA.getValue(), provider.getJurisdictionCode().getCtlNameCode());
        } catch (EntityValidationException | BusinessRuleException ex) {
            Logger.getLogger(AddProviderServiceNegativeTest.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /* This test sometimes fails because REQ-00681, "Provider To Provider Linkage 
     * Detection Rules", will change the CPN if it finds a linkage.
     */
    @Test
    @Ignore
    public void testSave_cpnAndIpc() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        ProviderDto providerDto = buildMinimiumProviderDto(dentist, identifierType, assignedEntity);
        PrsProviders provider = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        providersToDelete.add(provider);
        Long pauthId = provider.getPauthId();
        List<GrsRegistryIdentifiers> identifiers = provider.getGrsRegistryIdentifiersList();
        assertEquals(2, identifiers.size());
        for (GrsRegistryIdentifiers identifer : identifiers) {
            String providerChid = identifer.getProviderChid();

            if (identifer.getIdentifierTypeCode().equals(cpnType)) {
                assertEquals(String.format("CPN.%08d.BC.PRS", pauthId), providerChid);
            } else if (identifer.getIdentifierTypeCode().equals(ipcType)) {
                assertEquals(String.format("IPC.%08d.BC.PRS", pauthId), providerChid);
            } else {
                fail(String.format("Unrecognized identifier type: '%s'", identifer.getIdentifierTypeCode()));
            }
        }
    }

    /**
     * Test that if DOB is not provided, then the default DOB is the system low
     * date.
     *
     * @throws ca.bc.gov.health.plr.rule.BusinessRuleException
     */
    @Test
    public void testSave_defaultDob() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);
        PrsProviders provider = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        providersToDelete.add(provider);

        Date dob = provider.getPrsDemographicDetailsList().get(0).getDateOfBirthDate();

        assertNotSame(DatabaseConstants.SYSTEM_LOW_DATE, LocalDate.fromDateFields(dob));
    }

    @Test
    public void testSave_organization() throws BusinessRuleException, EntityValidationException, DuplicateRecordException {
 
        ProviderDto providerDto = buildMinimiumOrganizationProvider();
        providerDto.getOrgNames().get(0).setName("short name");
        PrsProviders provider = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        providersToDelete.add(provider);

        String partyType = provider.getPartyTypeCode().getCtlNameCode();
        assertEquals(CodeTableCodes.GrsCtPartyType.ORG.getValue(), partyType);

        String orgName = provider.getGrsOrgNamesList().get(0).getOrgnztnNameTxt();
        assertEquals("short name", orgName);

        String nameTypeCode = provider.getGrsOrgNamesList().get(0).getNameTypeCode().getCtlNameCode();
        assertEquals("CURR", nameTypeCode);

        ProviderDto providerDto2 = buildMinimiumOrganizationProvider();
        providerDto2.getOrgNames().get(0).setName("short name");
        try {
            maintainProviderService.addProvider_Save_MessageAndWeb(providerDto2);
        } catch (BusinessRuleException bre) {
            BusinessRuleKeys key = BusinessRuleKeys.ERROR_ADD_PROVIDER;
            String message = BusinessRuleMessageDao.getMessageResource(key);
            assertEquals(bre.getMessage().trim(), message.trim());
        }
    }

    /**
     * Returns a Provider DTO containing the minimum about of data required to
     * pass validation and persist the Provider.
     *
     * Provider is a REGISTERED_NURSE, identifier type
     * REGISTERED_NURSE_ID_NUMBER..
     *
     * @return a Provider DTO containing the minimum about of data required to
     * pass validation and persist the Provider.
     */
    private static ProviderDto buildMinimiumProviderDto(PrsCtProviderRoleTypes prType, PrsCtIdentifierTypes idType, PrsCtStatusClassCodes classCode) {
        ProviderDto providerDto = new ProviderDto(true);

        providerDto.setJurisdictionType(CodeTableCodes.PrsCtJurisdictions.BRITISH_COLUMBIA);
        providerDto.setPartyType(CodeTableCodes.GrsCtPartyType.IND);
        providerDto.setTypeId(prType.getCtlId());
        providerDto.getIdentifiers().get(0).setTypeId(idType.getCtlId());
        providerDto.getIdentifiers().get(0).setIdentifier("david1");
        providerDto.getIdentifiers().get(0).setEffectiveStartDate(date);
        providerDto.getDemographicDetails().get(0).setBirthDate(date);
        providerDto.getStatuses().get(0).setClassCodeId(classCode.getCtlId());
        providerDto.getStatuses().get(0).setTypeId(statusCode.getCtlId());
        providerDto.getStatuses().get(0).setReasonCodeId(statusReasonCode.getCtlId());
        providerDto.getStatuses().get(0).setEffectiveStartDate(date);
        providerDto.getIndNames().get(0).setFirstName("David");
        providerDto.getIndNames().get(0).setLastName("Sharpe");
        providerDto.getIndNames().get(0).setEffectiveStartDate(date);
        providerDto.getDemographicDetails().get(0).setGenderId(gender.getCtlId());
        providerDto.getAddresses().get(0).setEffectiveStartDate(date);
        providerDto.getAddresses().get(0).setTypeCode(addressType.getCtlNameCode());
        providerDto.getAddresses().get(0).setCommunicationPurposeCode("BC");
        providerDto.getAddresses().get(0).setCountryCode("CA");

        return providerDto;
    }

    private static ProviderDto buildMinimiumOrganizationProvider() {
        ProviderDto providerDto = new ProviderDto(true);

        providerDto.setJurisdictionType(CodeTableCodes.PrsCtJurisdictions.BRITISH_COLUMBIA);
        providerDto.setPartyType(CodeTableCodes.GrsCtPartyType.ORG);
        providerDto.setTypeId(orgRole.getCtlId());
        providerDto.getIdentifiers().get(0).setTypeId(orgIdentifierType.getCtlId());
        providerDto.getIdentifiers().get(0).setIdentifier("david1");
        providerDto.getIdentifiers().get(0).setEffectiveStartDate(date);
        providerDto.getStatuses().get(0).setClassCodeId(assignedEntity.getCtlId());
        providerDto.getStatuses().get(0).setTypeId(statusCode.getCtlId());
        providerDto.getStatuses().get(0).setReasonCodeId(statusReasonCode.getCtlId());
        providerDto.getStatuses().get(0).setEffectiveStartDate(date);
        providerDto.getOrgNames().get(0).setName("short name");
        providerDto.getOrgNames().get(0).setEffectiveStartDate(date);
        providerDto.getAddresses().get(0).setEffectiveStartDate(date);
        providerDto.getAddresses().get(0).setTypeCode(addressType.getCtlNameCode());
        providerDto.getAddresses().get(0).setCommunicationPurposeCode("BC");
        providerDto.getAddresses().get(0).setCity("Victoria");
        providerDto.getAddresses().get(0).setCountryCode("CA");
        providerDto.getDemographicDetails().get(0).setGenderId(gender.getCtlId());
        providerDto.getDemographicDetails().get(0).setBirthDate(date);
        return providerDto;
    }

    /**
     * Strips the milli seconds from the date
     *
     * @param date
     * @return
     */
    private Date stripMillis(Date date) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(date);
        cal.set(Calendar.MILLISECOND, 0);
        return cal.getTime();
    }

}
