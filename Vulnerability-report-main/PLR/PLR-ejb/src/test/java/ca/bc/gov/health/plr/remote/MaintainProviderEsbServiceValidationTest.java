/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.remote;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.BatchRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.JurisdictionNameCodeDto;
import ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.RegistryUserRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import static ca.bc.gov.health.plr.remote.MaintainProviderEsbTestBuilder.getAddress;
import ca.bc.gov.health.plr.util.MessageCodeHelper;
import ca.bc.gov.health.plr.util.SpoofedUserHelper;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;
import static org.hamcrest.CoreMatchers.equalTo;
import org.hamcrest.Matchers;
import org.hamcrest.collection.IsCollectionWithSize;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static ca.bc.gov.health.plr.remote.MaintainProviderEsbTestBuilder.mainRequest;
import ca.bc.gov.health.plr.util.AckHelper;

/**
 *
 * @author sumesh.kariyil
 */
public class MaintainProviderEsbServiceValidationTest extends MaintainProviderEsbTestBuilder{
    
    @BeforeClass
    public static void setUp() {
        SpoofedUserHelper.currentUser = null;
        mainRequest = new MaintainProviderRequest();
        mainRequest.setRegistryUserOrgId("plr-reg-admin");
        mainRequest.setProviderDetails(new ProviderDetails());
        mainRequest.getProviderDetails().setProviderType("IND");
        mainRequest.getProviderDetails().setType("DEN");
        mainRequest.getProviderDetails().setJurisdiction(new JurisdictionNameCodeDto());
        mainRequest.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");
        addIdentifier(mainRequest);
        batchRequest = new BatchRequest();
        Collection<MaintainProviderRequest> requests = new HashSet<>();
        requests.add(mainRequest);
        batchRequest.setMaintainProviderRequests(requests);
        clearEntities();
    }

    @Before
    public void setUpMethods() {
        mainRequest.setRegistryUserOrgId("plr-reg-admin");
    }
    
    // PLR-706, REQ-00923
    @Test
    public void testIgnoreEndReasonCodeOnAddAddress(){
        clearChildren();
        AddressDto address = getAddress();
        address.setEndReasonCode("CHG");
        mainRequest.getProviderDetails().getAddresses().add(address);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));       
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));

        SpoofedUserHelper.currentUser = "plr-reg-admin";
        List<ca.bc.gov.health.plr.dto.provider.AddressDto> activeAddresses = maintainAddressService.refreshAddresses(getRefreshAddressDto());
        assertThat(activeAddresses, IsCollectionWithSize.hasSize(1));
        assertNull(activeAddresses.iterator().next().getEndReasonCode());
    }
    
    @Test
    public void testIgnoreEndReasonCodeOnAddWorkLocation(){
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100l);
        WorkLocationDetailsDto detailsDto = getWorkLocationDetailsDto();
        detailsDto.setAdditionalAddresseeInfo("TESTETSTST");
        detailsDto.setEndReasonCode("CHG");
        dto.getWorkLocationDetails().add(detailsDto);
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));       
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, successCode));
        assertTrue(AckHelper.lookForAckMsgCode(acknowledgments, changedBlockCode));

    }

    
    @Test
    public void testAddProviderNoProviderType(){
        MaintainProviderRequest request = createRequest();
        request.getProviderDetails().setProviderType(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> it = acknowledgments.iterator();
        Acknowledgment acknowledgment = it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = it.next();
        assertThat(acknowledgment.getMsgText(), Matchers.notNullValue());
    }
    @Test
    public void testAddProviderNoProviderRoleType(){
        MaintainProviderRequest request = createRequest();
        request.getProviderDetails().setType(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> it = acknowledgments.iterator();
        Acknowledgment acknowledgment = it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = it.next();
        assertThat(acknowledgment.getMsgText(), Matchers.notNullValue());

    }
    @Test
    public void testAddProviderNoJurisdiction(){
        MaintainProviderRequest request = createRequest();
        request.getProviderDetails().setJurisdiction(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> it = acknowledgments.iterator();
        Acknowledgment acknowledgment = it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = it.next();
        assertThat(acknowledgment.getMsgText(), Matchers.notNullValue());
    }
    
    @Test
    public void testAddProviderNoIdentifiers(){
        MaintainProviderRequest request = createRequest();
        request.getProviderDetails().getIdentifiers().clear();
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> it = acknowledgments.iterator();
        Acknowledgment acknowledgment = it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = it.next();
        assertThat(acknowledgment.getMsgText(), Matchers.notNullValue());
    }
    
    @Test
    public void testAddProviderNoIdentifierValue(){
        MaintainProviderRequest request = createRequest();
        request.getProviderDetails().getIdentifiers().get(0).setIdentifier(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> it = acknowledgments.iterator();
        Acknowledgment acknowledgment = it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = it.next();
        assertThat(acknowledgment.getMsgText(), Matchers.notNullValue());
    }
    
    @Test
    public void testAddProviderNoIdentifierType(){
        MaintainProviderRequest request = createRequest();
        request.getProviderDetails().getIdentifiers().get(0).setTypeCode(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> it = acknowledgments.iterator();
        Acknowledgment acknowledgment = it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = it.next();
        assertThat(acknowledgment.getMsgText(), Matchers.notNullValue());
    }
    
    @Test
    public void testAddProviderNoIdentifierEffectiveDate(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().getIdentifiers().get(0).setEffectiveStartDate(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Effective.*");
    }
    
    @Test
    public void testAddProviderPassMinimumValidation_FailsAddMessageValidation(){
        MaintainProviderRequest request = createRequest();
        MaintainProviderResponse response = new MaintainProviderResponse();                
        request.getProviderDetails().getIdentifiers().get(0).setEffectiveStartDate(null);
        providerMessageValidator.validateMinimumData(request, response);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(0));
        providerMessageValidator.validateAdd(request, response);
        acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(1));
        assertThat(acknowledgments.iterator().next().getMsgText(), Matchers.notNullValue());
    }
    
    @Test
    public void testAddProvider_NoName(){
        MaintainProviderRequest request = createRequest_ForAdd();
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Name.*");
    }
    
    @Test
    public void testAddProvider_NoNameType(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().getIndNames().clear();
        PersonNameDto personNameDto = getPersonNameDto();
        personNameDto.setTypeCode(null);
        request.getProviderDetails().getIndNames().add(personNameDto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Name.*");
    }
    
    @Test
    public void testAddProvider_NoOrgName(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().getIndNames().clear();
        PersonNameDto personNameDto = getPersonNameDto();
        personNameDto.setFirstName(null);
        personNameDto.setLastName(null);
        request.getProviderDetails().getIndNames().add(personNameDto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Name.*");
    }
    
    @Test
    public void testAddProvider_NoPersonNameType(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().getIndNames().clear();
        request.getProviderDetails().setProviderType("IND");
        PersonNameDto dto = getPersonNameDto();
        dto.setTypeCode(null);
        request.getProviderDetails().getIndNames().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Name.*");
    }
    
    @Test
    public void testAddProvider_NoPersonSurName(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().getIndNames().clear();
        request.getProviderDetails().setProviderType("IND");
        PersonNameDto dto = getPersonNameDto();
        dto.setLastName(null);
        request.getProviderDetails().getIndNames().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Surname.*");
    }
    
    @Test
    public void testAddProvider_NoPersonFirstName(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().getIndNames().clear();
        request.getProviderDetails().setProviderType("IND");
        PersonNameDto dto = getPersonNameDto();
        dto.setFirstName(null);
        request.getProviderDetails().getIndNames().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*First.*");
    }
    
    @Test
    public void testAddProvider_NoBirthDate(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().setProviderType("IND");
        DemographicDetailsDto dto = getDemographicDto();
        dto.setBirthDate(null);
        request.getProviderDetails().getDemographicDetails().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Birth.*");
    }
    
    @Test
    public void testAddProvider_NoGenderCode(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().setProviderType("IND");
        DemographicDetailsDto dto = getDemographicDto();
        dto.setGenderCode(null);
        request.getProviderDetails().getDemographicDetails().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> it = acknowledgments.iterator();
        Acknowledgment acknowledgment = it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = it.next();
        assertTrue(acknowledgment.getMsgText().matches(".*" + "Gender" + ".*"));
    }
    
    @Test
    public void testAddProvider_InvalidGenderCode(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().setProviderType("IND");
        DemographicDetailsDto dto = getDemographicDto();
        dto.setGenderCode("MF");
        request.getProviderDetails().getDemographicDetails().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Gender.*");
    }
    
    @Test
    public void testAddProvider_NoStatusClass(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().setProviderType("IND");
        request.getProviderDetails().getStatuses().get(0).setClassCode(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        regExpMatch(acknowledgments, ".*Entry error.*Class.*");
    }
    
    @Test
    public void testAddProvider_NoStatusCode(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().setProviderType("IND");
        request.getProviderDetails().getStatuses().get(0).setTypeCode(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        regExpMatch(acknowledgments, ".*Status.*");
    }
    @Test
    public void testAddProvider_NoStatusReasonCode(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().setProviderType("IND");
        request.getProviderDetails().getStatuses().get(0).setReasonCode(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        regExpMatch(acknowledgments, ".*Reason.*");
    }
    @Test
    public void testAddProvider_NoAddressType(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().setProviderType("IND");
        request.getProviderDetails().getAddresses().get(0).setTypeCode(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        regExpMatch(acknowledgments, ".*Address.*");
    }
    @Test
    public void testAddProvider_NoAddressPurposeType(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().setProviderType("IND");
        request.getProviderDetails().getAddresses().get(0).setCommunicationPurposeCode(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Communication Purpose.*");
    }
    @Test
    public void testAddProvider_NoAddressLine1(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().setProviderType("IND");
        request.getProviderDetails().getAddresses().get(0).setAddressLineOne(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Line.*");
    }
    @Test
    public void testAddProvider_NoAddressCountry(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().setProviderType("IND");
        request.getProviderDetails().getAddresses().get(0).setCountryCode(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> it = acknowledgments.iterator();
        Acknowledgment acknowledgment = it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = it.next();
        assertThat(acknowledgment.getMsgText(), Matchers.notNullValue());
    }
    
    @Test
    public void testAddProvider_NoAddressProvince(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().setProviderType("IND");
        request.getProviderDetails().getAddresses().get(0).setProvinceOrStateTxt(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Prov.*");
    }
    
    @Test
    public void testAddProvider_InvalidJurisdiction(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().getJurisdiction().setJurisdicationNameCode("ABCD");
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Juris.*");
    }
    
    @Test
    public void testAddProvider_InvalidCountry(){
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().getAddresses().get(0).setCountryCode("ABCD");
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Count.*");
    }
    
    @Test
    public void testAddProvider_InvalidCity(){
        MaintainProviderRequest request = createRequest();
        request.getProviderDetails().getAddresses().get(0).setCity("ABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDEABCDE");
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*City.*");
    }
    
    @Test
    public void testAddProvider_CityNull(){
        MaintainProviderRequest request = createRequest();
        request.getProviderDetails().getAddresses().get(0).setCity(null);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*City.*");
    }
    
    @Test
    public void testAddProvider_invalidAddressCharacters() {
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().setProviderType("IND");

        // Set values with illegal characters
        request.getProviderDetails().getAddresses().get(0).setAddressLineTwo("**some&#address 2");
        request.getProviderDetails().getAddresses().get(0).setAddressLineOne("**This - Addréss&*(Has. A sign    (.*)");
        request.getProviderDetails().getAddresses().get(0).setAddressLineThree("**some&#address 3");
        // Can't set Address line 4 because it's unsupported.
        request.getProviderDetails().getAddresses().get(0).setCity("bad @  character");

        // Send the message.
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);

        // Assert expected Acknowledgements/warnings.
        this.regExpMatch(response.getAcknowledgments(), "The provider transaction was processed.");
        this.regExpMatch(response.getAcknowledgments(), ".*Invalid characters were deleted from Address Line 1.*");
        this.regExpMatch(response.getAcknowledgments(), ".*Invalid characters were deleted from Address Line 2.*");
        this.regExpMatch(response.getAcknowledgments(), ".*Invalid characters were deleted from Address Line 3.*");
        this.regExpMatch(response.getAcknowledgments(), ".*Invalid characters were deleted from City.*");

        // Assert illegal characters were deleted and replaced with one space.
        AddressDto address = response.getProviderDetails().getAddresses().get(0);
        assertEquals("This - Address& Has. A sign .", address.getAddressLineOne());
        assertEquals("some& address 2", address.getAddressLineTwo());
        assertEquals("some& address 3", address.getAddressLineThree());
        assertEquals("bad character", address.getCity());
    }
    
    @Test
    public void testAddProvider_invalidNameCharacters() {
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().setProviderType("IND");

        // Set values with illegal characters
        //PLRP3-41: Making sure we modify First Second and Third Names so they always start with a capital letter
        request.getProviderDetails().getIndNames().get(0).setFirstName("  first 9 thing");
        request.getProviderDetails().getIndNames().get(0).setSecondName("second$Thing *(");
        request.getProviderDetails().getIndNames().get(0).setThirdName(" thirdthing\"");
        request.getProviderDetails().getIndNames().get(0).setLastName("last|Name\t");
        request.getProviderDetails().getIndNames().get(0).setPrefix("Preee\tfix");
        request.getProviderDetails().getIndNames().get(0).setSuffix("Suf   fix!");

        // Send the message.
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);

        // Assert expected Acknowledgements/warnings.
        this.regExpMatch(response.getAcknowledgments(), "The provider transaction was processed.");
        this.regExpMatch(response.getAcknowledgments(), ".*Invalid characters were deleted from First Name.*");
        this.regExpMatch(response.getAcknowledgments(), ".*Invalid characters were deleted from Second Name.*");
        this.regExpMatch(response.getAcknowledgments(), ".*Invalid characters were deleted from Third Name.*");
        this.regExpMatch(response.getAcknowledgments(), ".*Invalid characters were deleted from Last Name.*");
        this.regExpMatch(response.getAcknowledgments(), ".*Invalid characters were deleted from Prefix.*");
        this.regExpMatch(response.getAcknowledgments(), ".*Invalid characters were deleted from Suffix.*");

        // Assert illegal characters were deleted and replaced with one space.
        PersonNameDto actualName = response.getProviderDetails().getIndNames().get(0);
        assertEquals("First thing", actualName.getFirstName());
        assertEquals("Second Thing", actualName.getSecondName());
        assertEquals("Thirdthing", actualName.getThirdName());
        assertEquals("last Name", actualName.getLastName());
        assertEquals("Preee fix", actualName.getPrefix());
        assertEquals("Suf fix", actualName.getSuffix());
        
    }
    
    @Test
    public void testAddProvider_invalidTelecommunicationCharacters() {
        MaintainProviderRequest request = createRequest_ForAdd();
        request.getProviderDetails().getTelecommunication().add(getTelecomDto());
        request.getProviderDetails().setProviderType("IND");

        // Set values with illegal characters
        request.getProviderDetails().getTelecommunication().get(0).setAreaCode("5 5! 5");
        request.getProviderDetails().getTelecommunication().get(0).setNumber("\t &*^&17    8!!   ");
        request.getProviderDetails().getTelecommunication().get(0).setExtension("abc123ezas");
        
        // Send the message.
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);

        // Assert expected Acknowledgements/warnings.
        this.regExpMatch(response.getAcknowledgments(), "The provider transaction was processed.");
        this.regExpMatch(response.getAcknowledgments(), ".*Invalid characters were deleted from Area Code.*");
        this.regExpMatch(response.getAcknowledgments(), ".*Invalid characters were deleted from Telecommunication Number.*");
        this.regExpMatch(response.getAcknowledgments(), ".*Invalid characters were deleted from Telecommunication Extension.*");

        // Assert illegal characters were deleted and replaced with one space.
        TelecommunicationDto td = response.getProviderDetails().getTelecommunication().get(0);
        assertEquals("5 5 5", td.getAreaCode());
        assertEquals("17 8", td.getNumber());
        assertEquals("123", td.getExtension());   
    }

    @Test //REQ-00924
    public void testAddProvider_CeasedEndReasonCode(){
        MaintainProviderRequest request = createRequest();
        request.getProviderDetails().getAddresses().get(0).setEndReasonCode("UNK");
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*End Reason.*");
    }
    
    @Test //REQ-00786, REQ-00712
    public void testMaintainProvider_InvalidElectronicAddressCodes(){
        MaintainProviderRequest request = createRequest();
        ElectronicAddressDto dto = getElectronicAddressDto();
        dto.setCommunicationPurposeCode("ABCD");
        dto.setTypeCode("ABCD");        
        request.getProviderDetails().getElectronicAddresses().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Elec.*");
    }
    @Test //REQ-535
    public void testMaintainProvider_InvalidElectronicAddress(){
        MaintainProviderRequest request = createRequest();
        ElectronicAddressDto dto = getElectronicAddressDto();
        dto.setAddress("sdfsdfsdf.sdfsdf.com");
        request.getProviderDetails().getElectronicAddresses().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        String msgToMatch = MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_EMAILFIELD_INVALID_CHARACTERS))[1];
        matchAcknowledgment(acknowledgments, msgToMatch);
    }

    /**
     * Finds an ack that matches the string
     * @param acknowledgments incoming acknowledgments
     * @param msgToMatch string to match
     */
    private void matchAcknowledgment(Collection<Acknowledgment> acknowledgments, String msgToMatch) {
        boolean match = false;
        for(Acknowledgment ack : acknowledgments) {
            if(ack.getMsgText().equals(msgToMatch)) {
                match = true;
            }
        }
        assertTrue(match);
    }
    
    @Test //REQ-00844, 845, 684
    public void testMaintainProvider_InvalidDemographicCodes(){
        MaintainProviderRequest request = createRequest_ForAdd();
        DemographicDetailsDto dto = request.getProviderDetails().getDemographicDetails().get(0);
        dto.setBirthCountryCode("ABCD");
        dto.setBirthProvState("ABCD");
        dto.setGenderCode("MF");        
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Gender.*");
        this.regExpMatch(acknowledgments, ".*Count.*");
        this.regExpMatch(acknowledgments, ".*Prov.*");
    }
    
    @Test //REQ-00853, 930
    public void testMaintainProvider_InvalidExpertiseCodes(){
        MaintainProviderRequest request = createRequest_ForAdd();
        ExpertiseDto dto = getExpertiseDto();
        dto.setTypeCode("ABCD");
        dto.setSourcesCode("ABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJABCDEFGHIJa");//51chars
        request.getProviderDetails().getExpertise().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Expertise.*");
    }
    
    @Test //REQ-00853
    public void testMaintainProvider_NullExpertiseCode(){
        MaintainProviderRequest request = createRequest();
        ExpertiseDto dto = getExpertiseDto();
        dto.setTypeCode(null);
        request.getProviderDetails().getExpertise().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Expertise.*");
    }
    
    @Test //REQ-00750
    public void testMaintainProvider_ValidateTelecomNumber(){
        MaintainProviderRequest request = createRequest_ForAdd();
        TelecommunicationDto dto = getTelecomDto();
        dto.setNumber("1234567890123456789012345678901");//31
        dto.setAreaCode("1234512345123451");//16
        dto.setExtension("1234512345123451");//16
        request.getProviderDetails().getTelecommunication().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        
        regExpMatch(acknowledgments, ".*Entry Error.*Phone Number.*");
        regExpMatch(acknowledgments, ".*Entry Error.*Area Code.*");
        regExpMatch(acknowledgments, ".*Entry Error.*Extension.*");
        
        
    }

    /**
     * Reg Exp match
     * @param acknowledgments list of acks
     * @param stringToMatch string to match
     */
    private void regExpMatch(Collection<Acknowledgment> acknowledgments, String stringToMatch) {
        boolean match = false;
        for(Acknowledgment ack : acknowledgments) {
            if(ack.getMsgText().matches(stringToMatch)) {
                match = true;
            }
        }
        assertTrue(String.format("Expected to find '%s', but found '%s'.", stringToMatch, acknowledgments), match);
    }
    
    @Test //REQ-00712, 749
    public void testMaintainProvider_ValidateTelecomCodes(){
        MaintainProviderRequest request = createRequest();
        TelecommunicationDto dto = getTelecomDto();
        dto.setTypeCode("ABCD");
        dto.setCommunicationPurposeCode("ABCD");
        request.getProviderDetails().getTelecommunication().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Tele.*");
    }
    
    @Test //REQ-00712, 749
    public void testMaintainProvider_ValidateTelecomCode_Null(){
        MaintainProviderRequest request = createRequest();
        TelecommunicationDto dto = getTelecomDto();
        dto.setTypeCode(null);
        dto.setCommunicationPurposeCode(null);
        request.getProviderDetails().getTelecommunication().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Tele.*");
    }
    @Test //REQ-804, 803, 802
    public void testMaintainProvider_ValidateAddress(){
        MaintainProviderRequest request = createRequest();
        AddressDto dto = request.getProviderDetails().getAddresses().get(0);
        dto.setPostalCode("123456");
        dto.setCountryCode("CA");
        dto.setTypeCode("ABCD");
        dto.setCommunicationPurposeCode("ABCD");
        dto.setAddressLineOne("abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghija");//101 chars REQ-00535 updated
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Communication Purpose.*");
        this.regExpMatch(acknowledgments, ".*Address Type.*");
        this.regExpMatch(acknowledgments, ".*Address Line 1.*");
    }
    
    @Test
    public void maintainProvider_ValidateWorkLocationPurpose(){
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(100l);
        WorkLocationDetailsDto detailsDto = getWorkLocationDetailsDto();
        detailsDto.setTypeCode(null);
        dto.getWorkLocationDetails().add(detailsDto);
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> it = acknowledgments.iterator();
        Acknowledgment acknowledgment = it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = it.next();
        assertThat(acknowledgment.getMsgText(), Matchers.notNullValue());

    }
    
    @Test
    public void maintainProvider_ValidateWorkLocationID() {
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(1111111111111111L);//16 chars
        WorkLocationDetailsDto detailsDto = getWorkLocationDetailsDto();
        dto.getWorkLocationDetails().add(detailsDto);
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> it = acknowledgments.iterator();
        Acknowledgment acknowledgment = it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = it.next();
        assertThat(acknowledgment.getMsgText(), Matchers.notNullValue());
    }

    @Test
    public void maintainProvider_ValidateWorkLocationDetails() {
        clearChildren();
        WorkLocationDto dto = getWorkLocationDto();
        dto.setIdentifier(null);
        WorkLocationDetailsDto detailsDto = getWorkLocationDetailsDto();
        detailsDto.setName(null);
        detailsDto.setAdditionalAddresseeInfo("abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghija");//241
        dto.getWorkLocationDetails().add(detailsDto);
        mainRequest.getProviderDetails().getWorkLocationList().add(dto);
        addIdentifier(mainRequest);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(mainRequest);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(3));
    }
    
    @Test
    public void maintainProvider_ProviderToRegUser_Validation() {
        MaintainProviderRequest request = createRequest();
        RegistryUserRelationshipDto dto = getRegUserRelationshipDto();
        dto.setRegUserTypeCode("ABCD");
        dto.setTypeCode("ABCD");
        request.getProviderDetails().getRegistryUserRelationships().add(dto);
        
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Registry.*");
    }
    
    @Test
    public void maintainProvider_ProviderToRegUser_ValidationForNull() {
        MaintainProviderRequest request = createRequest();
        RegistryUserRelationshipDto dto = getRegUserRelationshipDto();
        dto.setRegUserTypeCode(null);
        request.getProviderDetails().getRegistryUserRelationships().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Registry.*");
    }
    
    @Test
    public void maintainProvider_ProviderToRegUser_ValidationForNullType() {
        MaintainProviderRequest request = createRequest();
        RegistryUserRelationshipDto dto = getRegUserRelationshipDto();
        dto.setTypeCode(null);
        request.getProviderDetails().getRegistryUserRelationships().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Registry.*");
    }
    
    @Test
    public void maintainProvider_ProviderToRegUser_ValidationForRegUserChid() {
        MaintainProviderRequest request = createRequest();
        RegistryUserRelationshipDto dto = getRegUserRelationshipDto();
        dto.setRegistryUserChid("&^&^&*&^%&^%^^&^^%^&");
        request.getProviderDetails().getRegistryUserRelationships().add(dto);
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Registry User ID.*");
    }
    
    @Test
    public void maintainProvider_CollegeIdentifier_Validation() {
        MaintainProviderRequest request = createRequest();
        CollegeIdentifierDto dto = request.getProviderDetails().getIdentifiers().get(0);
        dto.setIdentifier("ABCD*EFGHIJ");
        dto.setTypeCode("ABCD");        
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        assertThat(acknowledgments.size(), equalTo(2));
        Iterator<Acknowledgment> it = acknowledgments.iterator();
        Acknowledgment acknowledgment = it.next();
        assertTrue(acknowledgment.getMsgText().equals(MessageCodeHelper.splitCodeAndMessage(failedMsg)[1]));
        acknowledgment = it.next();
        assertThat(acknowledgment.getMsgText(), Matchers.notNullValue());
    }
    
    @Test
    public void maintainProvider_ValidateCredential() {
        MaintainProviderRequest req = createRequest();
        CredentialsDto dto = new CredentialsDto();
        dto.setYearIssued("123456789012345678901234567890123456789012345678901");//51 chars REQ-852
        dto.setTypeCode("ABCD");//REQ-773
        //241 chars REQ-773, 850, 851
        dto.setDesignation("abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghija");
        dto.setRegistrationNumber("abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghija");
        dto.setGrantingInstitution("abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghija");
        dto.setInstitutionCity("abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghija");
        dto.setInstitutionCountryCode("ABCD");
        dto.setInstitutionProvStateCode("ABCD");
        dto.setEffectiveStartDate(new Date());
        req.getProviderDetails().getCredentials().add(dto);

        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(req);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        this.regExpMatch(acknowledgments, ".*Designation.*");
        this.regExpMatch(acknowledgments, ".*Regis.*");
        this.regExpMatch(acknowledgments, ".*City.*");
        this.regExpMatch(acknowledgments, ".*Count.*");
        this.regExpMatch(acknowledgments, ".*Prov.*");
    }
    
    
    private MaintainProviderRequest createRequest_ForAdd(){
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setRegistryUserOrgId("plr-reg-admin");
        request.setProviderDetails(new ProviderDetails());
        AddressDto address = getAddress();
        request.getProviderDetails().getAddresses().add(address);
        addIdentifier(request);
        request.getProviderDetails().getIdentifiers().get(0).setEffectiveStartDate(new Date());
        request.getProviderDetails().getIdentifiers().get(0).setIdentifier(UUID.randomUUID().toString().replace('-', '7').substring(0,14));
        request.getProviderDetails().setProviderType("IND");
        request.getProviderDetails().setType("DEN");
        request.getProviderDetails().setJurisdiction(new JurisdictionNameCodeDto());
        request.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");
        request.getProviderDetails().getDemographicDetails().add(getDemographicDto());
        request.getProviderDetails().getStatuses().add(getStatusDto());
        request.getProviderDetails().getIndNames().add(getPersonNameDto());
        return request;
    }
    
    private MaintainProviderRequest createRequest(){
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setRegistryUserOrgId("plr-reg-admin");
        request.setProviderDetails(new ProviderDetails());
        AddressDto address = getAddress();
        request.getProviderDetails().getAddresses().add(address);
        addIdentifier(request);
        request.getProviderDetails().getIdentifiers().get(0).setEffectiveStartDate(new Date());
        request.getProviderDetails().getIdentifiers().get(0).setIdentifier("TESTINGIDENTIFIERVALUE2");
        request.getProviderDetails().setProviderType("IND");
        request.getProviderDetails().setType("DEN");
        request.getProviderDetails().setJurisdiction(new JurisdictionNameCodeDto());
        request.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");
        request.getProviderDetails().getDemographicDetails().add(getDemographicDto());
        request.getProviderDetails().getStatuses().add(getStatusDto());
        request.getProviderDetails().getIndNames().add(getPersonNameDto());
        return request;
    }
    
}
