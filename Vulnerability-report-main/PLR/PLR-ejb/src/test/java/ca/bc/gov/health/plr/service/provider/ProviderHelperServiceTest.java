package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.provider.AbstractProviderDetail;
import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDto;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocations;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.EntityManager;
import org.junit.Test;
import static org.junit.Assert.*;
import org.mockito.ArgumentMatcher;
import static org.mockito.Matchers.argThat;
import static org.mockito.Matchers.eq;
import org.mockito.Mockito;
import static org.mockito.Mockito.mock;

/**
 *
 * @author jonathan.wiebe
 */
public class ProviderHelperServiceTest {

    public ProviderHelperServiceTest() {
    }

    @Test
    public void testGetAllListsAsList_NoLists() throws Exception {
        ProviderDto dto = new ProviderDto();
        ProviderHelperService providerHelperService = new ProviderHelperService();

        List<AbstractProviderDetail> list = providerHelperService.getAllListsAsList(dto);

        assertEquals(list.size(), 0);
    }

    @Test
    public void testGetAllListsAsList_OneList() throws Exception {
        ProviderDto dto = new ProviderDto();
        ProviderHelperService providerHelperService = new ProviderHelperService();
        dto.setAddresses(new ArrayList<AddressDto>() {
            {
                add(new AddressDto());
            }
        });
        List<AbstractProviderDetail> list = providerHelperService.getAllListsAsList(dto);

        assertEquals(list.size(), 1);
    }

    @Test
    public void testGetAllListsAsList_WL() throws Exception {
        ProviderDto dto = new ProviderDto();
        ProviderHelperService providerHelperService = new ProviderHelperService();
        dto.setWorkLocationList(new ArrayList<WorkLocationDto>() {
            {
                add(new WorkLocationDto());
                add(new WorkLocationDto());
            }
        });
        dto.setAddresses(new ArrayList<AddressDto>() {
            {
                add(new AddressDto());
            }
        });
        List<AbstractProviderDetail> list = providerHelperService.getAllListsAsList(dto);

        assertEquals(list.size(), 3);
    }

    /**
     * Test the find provider method.
     */
    @Test
    public void testfindProvider_byWL() {
        ProviderHelperService providerHelperService = new ProviderHelperService();
        EntityManager emMock = mock(EntityManager.class);
        providerHelperService.em = emMock;

        mockEM_Find_PrsProviders(emMock);
        mockEM_Find_PrsWorkLocations(emMock);

        // find the provider by worklocation id
        PrsProviders provider = providerHelperService.findProvider(new AddressDto() {
            {
                this.setWlWlId(WORKL_ID);
            }
        });
        assertEquals(provider.getPauthId(), new Long(PAUTH_ID));

        // don't find the provider by worklocation id
        provider = providerHelperService.findProvider(new AddressDto() {
            {
                this.setWlWlId(35l);
            }
        });
        assertNull(provider);

        // find the provider by worklocation id when list of objects has 'broken ones'
        provider = providerHelperService.findProvider(new ArrayList<Object>() {
            {
                add(new StatusDto());
                add(new WorkLocationDetailsDto());
                add(new AddressDto() {
                    {
                        this.setWlWlId(WORKL_ID);
                    }
                });
            }
        });
        assertEquals(provider.getPauthId(), new Long(PAUTH_ID));
    }
    
    /**
     * Test the find provider method.
     */
    @Test
    public void testfindProvider_byProvider() {
        ProviderHelperService providerHelperService = new ProviderHelperService();
        EntityManager emMock = mock(EntityManager.class);
        providerHelperService.em = emMock;

        mockEM_Find_PrsProviders(emMock);
        mockEM_Find_PrsWorkLocations(emMock);

        // find the provider
        PrsProviders provider = providerHelperService.findProvider(new AddressDto() {
            {
                this.setPauthId(PAUTH_ID);
            }
        });
        assertEquals(provider.getPauthId(), new Long(PAUTH_ID));

        // don't find the provider
        provider = providerHelperService.findProvider(new AddressDto() {
            {
                this.setPauthId(11l);
            }
        });
        assertNull(provider);

    }

    /**
     * Mocks the EntityManager Find method for PrsWorkLocations
     * @param emMock 
     */
    private void mockEM_Find_PrsWorkLocations(EntityManager emMock) {
        Mockito.doReturn(new PrsWorkLocations() {
            {
                this.setWlId(WORKL_ID);
                this.setPauthPauthId(createPrsProviders());
            }
        }).when(emMock).find(argThat(new ArgumentMatcher<Class>() {
            @Override
            public boolean matches(Object argument) {
                if (argument instanceof Class) {
                    Class clazz = (Class) argument;
                    if (clazz.getSimpleName().matches("PrsWorkLocations")) {
                        return true;
                    }
                }
                return false;
            }
        }), eq(WORKL_ID));
    }

    /**
     * Mocks the EntityManager Find method for PrsProviders
     * @param emMock 
     */
    private void mockEM_Find_PrsProviders(EntityManager emMock) {
        Mockito.doReturn(createPrsProviders()).when(emMock).find(argThat(new ArgumentMatcher<Class>() {
            @Override
            public boolean matches(Object argument) {
                if (argument instanceof Class) {
                    Class clazz = (Class) argument;
                    if (clazz.getSimpleName().matches("PrsProviders")) {
                        return true;
                    }
                }
                return false;
            }
        }), eq(PAUTH_ID));
    }
    private static final long WORKL_ID = 234l;
    private static final long PAUTH_ID = 101l;

    /**
     * Creates a provider with the specified ID
     * @return PrsProviders
     */
    private PrsProviders createPrsProviders() {
        return new PrsProviders() {
            {
                this.setPauthId(PAUTH_ID);
            }
        };
    }
}
