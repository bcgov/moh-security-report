/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.dto.dps;

import ca.bc.gov.health.plr.ejb.entity.GrsCtDataObjects;
import ca.bc.gov.health.plr.ejb.entity.GrsDataElementPermissions;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.codesDao;
import java.util.ArrayList;
import java.util.List;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;

/**
 *
 * @author sumesh.kariyil
 */
public class DataPermissionsConverterTest extends IntegrationSetup {

    /**
     * Test of testPopulateDataObjectPermissions method fails assertEquals 
     * and currently local unit test database has additional records for Facility Contact 'FC'.
     * @throws java.lang.AssertionError: expected:<8> but was:<9>
     */
    @Test
    @Ignore
    public void testPopulateDataObjectPermissions() {
        GrsCtDataObjects address = codesDao.lookup(GrsCtDataObjects.class, CodeTableCodes.GrsCtDataObjects.GRS_ADDRESS);
        List<DataElementPermissionDto> deps = dataPermissionsConverter.populateDataObjectPermissions(1L, address.getCtlId(), new ArrayList<GrsDataElementPermissions>());
        Assert.assertNotNull(deps);
        Assert.assertEquals(8, deps.size()); //size to be changed to '9' after Facility implementation
    }

    @Test(expected = RuntimeException.class)
    public void testConstructRecordTypes_Invalid() {
        List<String> recordTypes = dataPermissionsConverter.constructRecordTypes(null);
        Assert.assertTrue(recordTypes == null);
    }

    /**
     * Test of testConstructRecordTypes_ElectronicAddress method fails assertEquals
     * and currently local unit test database has additional records for Facility Contact 'FC'.
     * @throws java.lang.AssertionError: expected:<8> but was:<9>
     */
    @Test
    @Ignore
    public void testConstructRecordTypes_ElectronicAddress() {
        List<String> recordTypes = dataPermissionsConverter.constructRecordTypes(CodeTableCodes.GrsCtDataObjects.GRS_ELECTRONIC_ADDRESS.name());
        Assert.assertNotNull(recordTypes);
        Assert.assertEquals(8, recordTypes.size()); //size to be changed to '9' after Facility implementation
    }

    @Test
    public void testConstructRecordTypes_Identifier() {
        List<String> recordTypes = dataPermissionsConverter.constructRecordTypes(CodeTableCodes.GrsCtDataObjects.GRS_IDENTIFIER.name());
        Assert.assertNotNull(recordTypes);
        Assert.assertEquals(38, recordTypes.size());
    }

    @Test
    public void testConstructRecordTypes_OrgNames() {
        List<String> recordTypes = dataPermissionsConverter.constructRecordTypes(CodeTableCodes.GrsCtDataObjects.GRS_ORGANIZATION_NAME.name());
        Assert.assertNotNull(recordTypes);
        Assert.assertEquals(3, recordTypes.size());
    }

    @Test
    public void testConstructRecordTypes_PersonNames() {
        List<String> recordTypes = dataPermissionsConverter.constructRecordTypes(CodeTableCodes.GrsCtDataObjects.GRS_PERSONAL_NAME.name());
        Assert.assertNotNull(recordTypes);
        Assert.assertEquals(3, recordTypes.size());
    }

    @Test
    public void testConstructRecordTypes_WorkLocationAddress() {
        List<String> wlRecordTypes = dataPermissionsConverter.constructRecordTypes(CodeTableCodes.GrsCtDataObjects.PRS_WORK_LOCATION_ADDRESS.name());
        List<String> recordTypes = dataPermissionsConverter.constructRecordTypes(CodeTableCodes.GrsCtDataObjects.GRS_ADDRESS.name());
        Assert.assertNotNull(recordTypes);
        Assert.assertNotNull(wlRecordTypes);
        Assert.assertEquals(wlRecordTypes, recordTypes);

    }

    @Test(expected = RuntimeException.class)
    public void testToEntity_Invalid() {
        GrsDataElementPermissions dep = dataPermissionsConverter.toEntity(null);
        Assert.assertTrue(dep == null);
    }

    @Test
    public void testToEntity_Valid() {
        DataElementPermissionDto dto = new DataElementPermissionDto();
        dto.setReadFlag(false);
        dto.setUpdateFlag(true);
        dto.setApgId(1l);
        dto.setDe1Code(codesDao.lookup(GrsCtDataObjects.class, CodeTableCodes.GrsCtDataObjects.GRS_ADDRESS).getCtlId());
        GrsDataElementPermissions dep = dataPermissionsConverter.toEntity(dto);
        Assert.assertNotNull(dep);
        Assert.assertEquals("N", dep.getReadFlag());
        Assert.assertEquals("Y", dep.getUpdateFlag());
    }
}
