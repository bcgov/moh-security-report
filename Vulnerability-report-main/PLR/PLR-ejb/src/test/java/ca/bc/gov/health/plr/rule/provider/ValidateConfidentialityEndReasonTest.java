/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.rule.provider;

import ca.bc.gov.health.plr.dto.provider.ConfidentialityIndicatorDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.rule.BusinessRuleMessage;
import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import static com.sun.tools.xjc.reader.Ring.add;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Before;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.eq;
import org.mockito.Mockito;
import static org.mockito.Mockito.mock;

/**
 *
 * @author jonathan.wiebe
 */
public class ValidateConfidentialityEndReasonTest {
    CodesDao codesDao = null;
    private static final long CEASE_ID = 34l;
    private static final long NOT_CEASE_ID = 35l;

    @Before
    public void setup() {
        
    }
    public ValidateConfidentialityEndReasonTest() {
    }

    /**
     * Happy path, ceased ERC.
     * @throws Exception 
     */
    @Test
    public void testValidate_cease() throws Exception {
        ValidateConfidentialityEndReason val = new ValidateConfidentialityEndReason();
        codesDao = mock(CodesDao.class);
        Mockito.doReturn(new GrsCtEndReasonTypes() {
            {
                this.setCtlId(CEASE_ID);
            }
        }).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), anyLong());
        Mockito.doReturn(new GrsCtEndReasonTypes() {
            {
                this.setCtlId(CEASE_ID);
            }
        }).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), anyString());

        Mockito.doReturn(new GrsCtEndReasonTypes() {
            {
                this.setCtlId(CEASE_ID);
            }
        }).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), eq(CodeTableCodes.GrsCtEndReasonTypes.CEASE));
        
        Field field = ValidateConfidentialityEndReason.class.getDeclaredField("codesDao");
        field.setAccessible(true);
        field.set(val, codesDao);
        
        BusinessRuleResult brr =  val.validate(new ConfidentialityIndicatorDto() {{ setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CEASE.getValue()); }} );
        assertTrue(brr.getMessages().size() == 0);
        assertTrue(brr.isValid());
        
        brr =  val.validate(new ConfidentialityIndicatorDto() {{ setEndReasonCodeId(CEASE_ID); }} );
        assertTrue(brr.getMessages().size() == 0);
        assertTrue(brr.isValid());
    }

    /**
     * Not happy path, change ERC.
     * @throws Exception 
     */
    @Test
    public void testValidate_change() throws Exception {
        ValidateConfidentialityEndReason val = new ValidateConfidentialityEndReason();
        codesDao = mock(CodesDao.class);
        Mockito.doReturn(new GrsCtEndReasonTypes() {
            {
                this.setCtlId(NOT_CEASE_ID);
            }
        }).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), anyLong());
        Mockito.doReturn(new GrsCtEndReasonTypes() {
            {
                this.setCtlId(NOT_CEASE_ID);
            }
        }).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), anyString());

        Mockito.doReturn(new GrsCtEndReasonTypes() {
            {
                this.setCtlId(CEASE_ID);
            }
        }).when(codesDao).lookup(eq(GrsCtEndReasonTypes.class), eq(CodeTableCodes.GrsCtEndReasonTypes.CEASE));
        
        Field field = ValidateConfidentialityEndReason.class.getDeclaredField("codesDao");
        field.setAccessible(true);
        field.set(val, codesDao);
        
        BusinessRuleResult brr =  val.validate(new ConfidentialityIndicatorDto() {{ setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CEASE.getValue()); }} );
        assertTrue(brr.getMessages().size() == 1);
        assertTrue(!brr.isValid());
        
        brr =  val.validate(new ConfidentialityIndicatorDto() {{ setEndReasonCodeId(CEASE_ID); }} );
        assertTrue(brr.getMessages().size() == 1);
        assertTrue(!brr.isValid());
    }
}
