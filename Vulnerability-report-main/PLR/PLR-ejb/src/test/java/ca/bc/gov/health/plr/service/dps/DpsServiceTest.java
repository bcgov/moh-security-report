/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.dps;

import ca.bc.gov.health.plr.dto.dps.AccessProfileGroupDescDto;
import ca.bc.gov.health.plr.dto.dps.AccessProfileGroupDto;
import ca.bc.gov.health.plr.dto.dps.AccessProfileGroupDtoConverter;
import ca.bc.gov.health.plr.dto.dps.DataElementPermissionDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAccessProfileGroups;
import ca.bc.gov.health.plr.ejb.entity.GrsCtDataObjects;
import ca.bc.gov.health.plr.ejb.entity.GrsDataElementPermissions;
import ca.bc.gov.health.plr.ejb.entity.PrsCtJurisdictions;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.Date;
import java.util.List;
import static org.junit.Assert.*;
import org.junit.Ignore;
import org.junit.Test;

/**
 *
 * @author sumesh.kariyil
 */
public class DpsServiceTest extends IntegrationSetup {

    public DpsServiceTest() {
    }

    /**
     * Test of search method, of class Dps Service.
     */
    @Test
    public void testSearchAllDps() {
        List<AccessProfileGroupDto> result = dpsService.findAllDps();
        assertNotNull(result);
    }
    
    /**
     * Test of search method, of class Dps Service.
     */
    @Test
    public void testSearchDpsMatchWithFindAll() {
        List<AccessProfileGroupDto> result = dpsService.findAllDps();
        assertNotNull(result);
        List<GrsAccessProfileGroups> groups = dpsService.findAll();
        assertNotNull(groups);
        assertEquals(result.size(), groups.size());
    }
    
    /**
     * Test of search method, of class Dps Service.
     */
    @Test
    public void testSearchDpsConverter() {
        List<AccessProfileGroupDto> result = dpsService.findAllDps();
        assertNotNull(result);
        List<GrsAccessProfileGroups> groups = dpsService.findAll();
        assertNotNull(groups);
        List<AccessProfileGroupDto> result2 =  AccessProfileGroupDtoConverter.toDtos(groups);                
        assertEquals(result.get(0).getGroupChid(), result2.get(0).getGroupChid());
    }
    
    /**
     * Test of search method, of class Dps Service.
     */
    @Test
    public void testSuggestRegUserChid() {
        List<String> suggestedNames = dpsService.suggestRegUserChid("0");
        assertNotNull(suggestedNames);
        for(String name : suggestedNames){
            assertTrue(name.startsWith("0"));
        }
    }
    
    /**
     * Test of search method, of class Dps Service.
     */
    @Test
    public void testSuggestRegUserChid_Invalid() {
        List<String> suggestedNames = dpsService.suggestRegUserChid("*");
        assertEquals(suggestedNames.size(), 0);        
    }
    
    /**
     * Test of search method, of class Dps Service.
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Test
    public void testSaveDps_ValidInput() throws EntityValidationException {
        AccessProfileGroupDto dto = new AccessProfileGroupDto();
        dto.setGroupChid("TEST");
        PrsCtJurisdictions bc = codesDao.lookup(PrsCtJurisdictions.class, "BC");
        dto.setJurisdictionCodeId(bc.getCtlId());
        dto.setRuRuId(1l);
        dto.setActive(true);
        dto.setActiveGroupDesc(new AccessProfileGroupDescDto());
        dto.getActiveGroupDesc().setDescription("TEST DESCRIPTION");
        dto.getActiveGroupDesc().setEffectiveStartDate(new Date());
        dto.getActiveGroupDesc().setActive(true);
        dto = dpsService.saveDps(dto, null);
        assertNotNull(dto);
        assertNotNull(dto.getId());
        assertNotNull(dto.getActiveGroupDesc().getId());
        assertEquals(dto.getId(), dto.getActiveGroupDesc().getApgApgId());
        entityManagerProxy.remove(entityManagerProxy.find(GrsAccessProfileGroups.class, dto.getId()));
        
    }
    
    /**
     * Test of search method, of class Dps Service.
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Test(expected = EntityValidationException.class)
    public void testSaveDps_InValidRegUser() throws EntityValidationException {
        AccessProfileGroupDto dto = new AccessProfileGroupDto();
        dto.setGroupChid("TEST");
        PrsCtJurisdictions bc = codesDao.lookup(PrsCtJurisdictions.class, "BC");
        dto.setJurisdictionCodeId(bc.getCtlId());
        dto.setRegUserChid("");
        dto.setActive(true);
        dto.setActiveGroupDesc(new AccessProfileGroupDescDto());
        dto.getActiveGroupDesc().setDescription("TEST DESCRIPTION");
        dto.getActiveGroupDesc().setEffectiveStartDate(new Date());
        dto.getActiveGroupDesc().setActive(true);
        dpsService.saveDps(dto, null);
        
    }
    
    /**
     * Test of search method, of class Dps Service.
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Test(expected = EntityValidationException.class)
    public void testSaveDps_NoActiveGroup() throws EntityValidationException {
        AccessProfileGroupDto dto = new AccessProfileGroupDto();
        dto.setGroupChid("TEST");
        PrsCtJurisdictions bc = codesDao.lookup(PrsCtJurisdictions.class, "BC");
        dto.setJurisdictionCodeId(bc.getCtlId());
        dto.setRegUserChid("");
        dto.setActive(true);
        dto.setActiveGroupDesc(new AccessProfileGroupDescDto());
        dto.getActiveGroupDesc().setDescription("TEST DESCRIPTION");
        dto.getActiveGroupDesc().setEffectiveStartDate(new Date());
        dto  = dpsService.saveDps(dto, null);
        assertNotNull(dto.getId());
        assertNull(dto.getActiveGroupDesc());
        
    }
    
    /**
     * Test of testFindPermissions method fails assertEquals
     * and currently local unit test database has additional records for Facility Contact 'FC'.
     * @throws java.lang.AssertionError: expected:<9> but was:<8>
     */
    @Test
    @Ignore
    public void testFindPermissions(){
        GrsCtDataObjects address = codesDao.lookup(GrsCtDataObjects.class, CodeTableCodes.GrsCtDataObjects.GRS_ADDRESS);
        List<DataElementPermissionDto> permissions = dpsService.findPermissions(1l, address.getCtlId());
        assertNotNull(permissions);
        assertTrue(permissions.size() > 0);
        assertEquals(permissions.size(), 8); //size to be changed to '9' after Facility implementation
    }
    
    /**
     * Test of search method, of class Dps Service.
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Test
    public void testSaveDps_Clone() throws EntityValidationException {
        GrsAccessProfileGroups accessProfile = entityManagerProxy.find(GrsAccessProfileGroups.class, 1L);
        AccessProfileGroupDto dto = new AccessProfileGroupDto();
        dto.setGroupChid("TEST");
        PrsCtJurisdictions bc = codesDao.lookup(PrsCtJurisdictions.class, "BC");
        dto.setJurisdictionCodeId(bc.getCtlId());
        dto.setRuRuId(1l);
        dto.setActive(true);
        dto.setActiveGroupDesc(new AccessProfileGroupDescDto());
        dto.getActiveGroupDesc().setDescription("TEST DESCRIPTION");
        dto.getActiveGroupDesc().setEffectiveStartDate(new Date());
        dto.getActiveGroupDesc().setActive(true);
        dto = dpsService.saveDps(dto, 1l);
        assertNotNull(dto);
        assertNotNull(dto.getId());
        assertNotNull(dto.getActiveGroupDesc().getId());
        assertEquals(dto.getId(), dto.getActiveGroupDesc().getApgApgId());
        GrsAccessProfileGroups newEntity = entityManagerProxy.find(GrsAccessProfileGroups.class, dto.getId());
        assertEquals(accessProfile.getGrsDataElementPermissionsList().size(), newEntity.getGrsDataElementPermissionsList().size());
        for(GrsDataElementPermissions perm : newEntity.getGrsDataElementPermissionsList()){
            entityManagerProxy.remove(perm);
        }
        entityManagerProxy.remove(newEntity);        
    }
    
    /**
     * 
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Test
    public void testSaveDps_UserChid() throws EntityValidationException {
        AccessProfileGroupDto dto = new AccessProfileGroupDto();
        dto.setGroupChid("TEST");
        PrsCtJurisdictions bc = codesDao.lookup(PrsCtJurisdictions.class, "BC");
        dto.setJurisdictionCodeId(bc.getCtlId());
        dto.setRuRuId(1l);
        dto.setActive(true);
        dto.setActiveGroupDesc(new AccessProfileGroupDescDto());
        dto.getActiveGroupDesc().setDescription("TEST DESCRIPTION");
        dto.getActiveGroupDesc().setEffectiveStartDate(new Date());
        dto.getActiveGroupDesc().setActive(true);
        try {
            dto = dpsService.saveDps(dto, null);
            assertNotNull(dto);
            assertNotNull(dto.getId());
            assertEquals(dto.getUserChid(), "plr-reg-admin@00002855");
        } finally {
            GrsAccessProfileGroups newEntity = entityManagerProxy.find(GrsAccessProfileGroups.class, dto.getId());
            entityManagerProxy.remove(newEntity);
        }

    }

    
}