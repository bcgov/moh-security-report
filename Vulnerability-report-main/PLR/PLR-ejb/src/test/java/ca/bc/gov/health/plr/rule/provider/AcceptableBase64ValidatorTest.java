package ca.bc.gov.health.plr.rule.provider;

import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class AcceptableBase64ValidatorTest {

    @Test
    public void test_validBase64() {
        MockBase64Dto mockBase64 = new MockBase64Dto();
        mockBase64.someField = "+/3aA";

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockBase64Dto>> violations = validator.validate(mockBase64);
        assertEquals(0, violations.size());
    }

    @Test
    public void test_invalidBase64() {
        MockBase64Dto mockBase64 = new MockBase64Dto();
        mockBase64.someField = "TWFu!";

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockBase64Dto>> violations = validator.validate(mockBase64);
        assertEquals(1, violations.size());
        assertEquals(mockBase64.someField, violations.iterator().next().getInvalidValue());
    }

    /**
     * At the time of this writing, 31Dec14, the Base64 validator is not used yet, so create a mock to test the
     * annotation.
     */
    private static class MockBase64Dto {
        @AcceptableBase64
        String someField;
    }

}
