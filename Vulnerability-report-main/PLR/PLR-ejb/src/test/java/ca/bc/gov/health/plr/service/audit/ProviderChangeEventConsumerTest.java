/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.audit;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.dto.esb.BatchRequest;
import ca.bc.gov.health.plr.dto.esb.BatchResponse;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.provider.AbstractProviderDetail;
import ca.bc.gov.health.plr.dto.provider.ConditionsDto;
import ca.bc.gov.health.plr.dto.provider.ConfidentialityIndicatorDto;
import ca.bc.gov.health.plr.dto.provider.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.DisciplinaryActionDto;
import ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.NoteDto;
import ca.bc.gov.health.plr.dto.provider.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.ProviderRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.RegistryIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.RegistryUserRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.ejb.entity.GrsChangedRecords;
import ca.bc.gov.health.plr.ejb.entity.GrsParties;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.GrsTransactions;
import ca.bc.gov.health.plr.ejb.entity.PlrConfigurationProperties;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.events.ChangeEvent;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.provider.ProviderTestDataBuilder;
import static ca.bc.gov.health.plr.rule.provider.ProviderTestDataBuilder.TEST__USER__CHID_JUNIT;
import ca.bc.gov.health.plr.service.PLRConfigurationResourceLoader;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.container;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.entityManagerProxy;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainProviderEsbService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.providerDao;
import ca.bc.gov.health.plr.service.provider.MatchHistory;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.util.RecordAndRestoreConfig;
import ca.bc.gov.health.plr.util.SpoofedUserHelper;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.Context;
import javax.naming.NamingException;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;

/**
 *
 * @author jonathan.wiebe
 */
public class ProviderChangeEventConsumerTest extends IntegrationSetup {
    
    private static final Logger logger = Logger.getLogger(ProviderChangeEventConsumerTest.class.getName());
    private static final int WAIT_TIME = 60000;
    private static Map<String, Object> appResource;
    
    static Date EFF_START_DATE = new Date();
    public static final String PLRREGADMIN = IntegrationSetup.PLRREGADMIN;
    public static final String USER_CHID = PLRREGADMIN + "@00002855";
    
    @BeforeClass
    public static void setUpClass() throws NamingException, InterruptedException {
        RecordAndRestoreConfig.record(WAIT_TIME, plrConfigurationResourceLoader, "true", "false", "false", "false");
  }
    
    @AfterClass
    public static void tearDownClass() throws NamingException, InterruptedException {
        RecordAndRestoreConfig.restore(WAIT_TIME);
     }
    
    @BeforeClass
    public static void setUp() {
        SpoofedUserHelper.currentUser = PLRREGADMIN;
    }
    
    public ProviderChangeEventConsumerTest() {
    }
    
    @Before
    public void setUpUser() {
        SpoofedUserHelper.currentUser = PLRREGADMIN;
    }
    
    @After
    public void tearDown() {
    }

    /**
     * Pretend we are adding a new address.
     *
     * @throws Exception
     */
    @Test
    public void test_Address_New() throws Exception {
        
        ProviderDto dto = ProviderTestDataBuilder.initFullProvider();
        dto.getAddresses().get(0).setPauthId(10l);
        dto.getAddresses().get(0).setGenerationNum(1l);
        dto.getAddresses().get(0).setDataOwnerCode("CPS");
        
        GrsRegistryUsers regUser = new GrsRegistryUsers();
        regUser.setRuId(1l);
        GrsParties parties = new GrsParties();
        regUser.setPartyPartyId(parties);
        parties.setRegistryUserOrgChid("00002855");
        regUser.setUserChid("test@00002855");
        Object[] obj = {dto.getAddresses().get(0)};
        
        ChangeEvent changeEvent = new ChangeEvent(obj, dto.getAddresses().get(0), regUser);
        
        Future<GrsChangedRecords> f = providerChangeEventConsumer.processEvent(changeEvent);
        
        while (!f.isDone()) {
            Thread.sleep(3000);
        }
        
        GrsChangedRecords changedRec = f.get();
        assertTrue(TEST__USER__CHID_JUNIT.equals(changedRec.getUserChid()));
        assertTrue(changedRec.getGrsTransactionsList().size() == 1);
        GrsTransactions trans = changedRec.getGrsTransactionsList().get(0);
        assertTrue(trans.getDataOwnerCode().getCtlNameCode().matches("CPS"));
        assertTrue(trans.getEffectiveStartDate().getTime() == dto.getAddresses().get(0).getEffectiveStartDate().getTime());
        assertTrue(trans.getRdeChangedData().matches(".*addressLineOne\":\"4412 Tanger.*"));
        assertTrue(trans.getTtCode().getCtlId() == 2806);
        assertTrue(trans.getRdePriorData() == null);
        
        entityManagerProxy.remove(changedRec);
    }

    /**
     * Test that unique string for user chid is used in changed records
     *
     * @throws Exception
     */
    @Test    
    public void test_UserChid_Population_Address() throws Exception {
        
        ProviderDto dto = ProviderTestDataBuilder.initFullProvider();
        dto.getAddresses().get(0).setPauthId(10l);
        dto.getAddresses().get(0).setGenerationNum(1l);
        dto.getAddresses().get(0).setDataOwnerCode("CPS");
        dto.getAddresses().get(0).setUserChid("Stars@Ice");
        
        GrsRegistryUsers regUser = new GrsRegistryUsers();
        regUser.setRuId(1l);
        GrsParties parties = new GrsParties();
        regUser.setPartyPartyId(parties);
        parties.setRegistryUserOrgChid("00002855");
        regUser.setUserChid("test@00002855");
        Object[] obj = {dto.getAddresses().get(0)};
        
        ChangeEvent changeEvent = new ChangeEvent(obj, dto.getAddresses().get(0), regUser);
        
        Future<GrsChangedRecords> f = providerChangeEventConsumer.processEvent(changeEvent);
        
        while (!f.isDone()) {
            Thread.sleep(3000);
        }
        
        GrsChangedRecords changedRec = f.get();
        assertTrue("Stars@Ice".equals(changedRec.getUserChid()));
        
        entityManagerProxy.remove(changedRec);
    }
    
    
    /**
     * Takes an object and creates a list of abstract provider details
     * @param obj object
     * @param list list of abstract provider details
     */
    private void createAPDList(Object obj, List<AbstractProviderDetail> list) {
        if (obj instanceof AbstractProviderDetail) {
            list.add((AbstractProviderDetail) obj);
        } else if (obj instanceof List) {
            for (Object item : (List) obj) {
                createAPDList(item, list);
            }
        } else if (obj instanceof ProviderDto || obj instanceof WorkLocationDto) {
            Field[] fields = obj instanceof ProviderDto ? ProviderDto.class.getDeclaredFields() : WorkLocationDto.class.getDeclaredFields();
            for (Field f : fields) {
                boolean isAccessible = f.isAccessible();
                try {
                    f.setAccessible(true);
                    Object item = f.get(obj instanceof ProviderDto ? (ProviderDto) obj : (WorkLocationDto) obj);
                    if (item != null && List.class.isAssignableFrom(item.getClass())) {
                        createAPDList(item, list);
                    }
                } catch (IllegalArgumentException ex) {
                    Logger.getLogger(ProviderChangeEventConsumerTest.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(ProviderChangeEventConsumerTest.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    f.setAccessible(isAccessible);
                }
            }
        }
    }

    /**
     * Test that unique string for user chid is used in changed records
     *
     * @throws Exception
     */
    @Test
    public void test_UserChid_Population_Provider_Address() throws Exception {
        
        ProviderDto dto = ProviderTestDataBuilder.initFullProvider();
        
        // set all the user chids to null
        List<AbstractProviderDetail> APDList = new ArrayList<AbstractProviderDetail>();
        createAPDList(dto, APDList);
        for (AbstractProviderDetail item : APDList) {
            item.setUserChid(null);
        }
        
        // add back one user chid, to address
        dto.getAddresses().get(0).setPauthId(10l);
        dto.getAddresses().get(0).setGenerationNum(1l);
        dto.getAddresses().get(0).setDataOwnerCode("CPS");
        dto.getAddresses().get(0).setUserChid("Stars@Ice");
        
        GrsRegistryUsers regUser = new GrsRegistryUsers();
        regUser.setRuId(1l);
        GrsParties parties = new GrsParties();
        regUser.setPartyPartyId(parties);
        parties.setRegistryUserOrgChid("00002855");
        regUser.setUserChid("test@00002855");
        Object[] obj = {APDList};
        
        ChangeEvent changeEvent = new ChangeEvent(obj, APDList, regUser);
        
        Future<GrsChangedRecords> f = providerChangeEventConsumer.processEvent(changeEvent);
        
        while (!f.isDone()) {
            Thread.sleep(3000);
        }
        
        GrsChangedRecords changedRec = f.get();
        assertTrue("Stars@Ice".equals(changedRec.getUserChid()));
        
        entityManagerProxy.remove(changedRec);
    }

    /**
     * Test that unique string for user chid is used in changed records
     *
     * @throws Exception
     */
    @Test
    public void test_UserChid_Population_Provider_WL_IR() throws Exception {
        
        ProviderDto dto = ProviderTestDataBuilder.initFullProvider();
        WorkLocationDto wlDto = dto.getWorkLocationList().get(0);
        wlDto.setInformationRoutes(new ArrayList<InformationRouteDto>() {
            {
                add(ProviderTestDataBuilder.getInformationRoute());
            }
        });
        
        
        // set all the user chids to null
        List<AbstractProviderDetail> APDList = new ArrayList<AbstractProviderDetail>();
        createAPDList(dto, APDList);
        for (AbstractProviderDetail item : APDList) {
            item.setUserChid(null);
        }
        
        // add back one user chid, in the IR
        wlDto.getInformationRoutes().get(0).setPauthId(10l);
        wlDto.getInformationRoutes().get(0).setGenerationNum(1l);
        wlDto.getInformationRoutes().get(0).setDataOwnerCode("CPS");
        wlDto.getInformationRoutes().get(0).setUserChid("IR@Ice");
        
        GrsRegistryUsers regUser = new GrsRegistryUsers();
        regUser.setRuId(1l);
        GrsParties parties = new GrsParties();
        regUser.setPartyPartyId(parties);
        parties.setRegistryUserOrgChid("00002855");
        regUser.setUserChid("test@00002855");
        Object[] obj = {APDList};
        
        ChangeEvent changeEvent = new ChangeEvent(obj, APDList, regUser);
        
        Future<GrsChangedRecords> f = providerChangeEventConsumer.processEvent(changeEvent);
        
        while (!f.isDone()) {
            Thread.sleep(3000);
        }
        
        GrsChangedRecords changedRec = f.get();
        assertTrue("IR@Ice".equals(changedRec.getUserChid()));
        
        entityManagerProxy.remove(changedRec);
    }

    /**
     * Set user chid to null and make user unknown is used
     *
     * @throws Exception
     */
    @Test
    public void test_UserChid_Population_Unknown() throws Exception {
        
        ProviderDto dto = ProviderTestDataBuilder.initFullProvider();
        dto.getAddresses().get(0).setPauthId(10l);
        dto.getAddresses().get(0).setGenerationNum(1l);
        dto.getAddresses().get(0).setDataOwnerCode("CPS");
        dto.getAddresses().get(0).setUserChid(null);
        
        GrsRegistryUsers regUser = new GrsRegistryUsers();
        regUser.setRuId(1l);
        GrsParties parties = new GrsParties();
        regUser.setPartyPartyId(parties);
        parties.setRegistryUserOrgChid("00002855");
        regUser.setUserChid("test@00002855");
        Object[] obj = {dto.getAddresses().get(0)};
        
        ChangeEvent changeEvent = new ChangeEvent(obj, dto.getAddresses().get(0), regUser);
        
        Future<GrsChangedRecords> f = providerChangeEventConsumer.processEvent(changeEvent);
        
        while (!f.isDone()) {
            Thread.sleep(3000);
        }
        
        GrsChangedRecords changedRec = f.get();
        assertTrue(ProviderChangeEventConsumer.UNKNOWN_USER_CHID.equals(changedRec.getUserChid()));
        
        entityManagerProxy.remove(changedRec);
    }

    /**
     * Test that no the user CHID is 'copied' from the DTO to the changed
     * records table
     *
     * @throws Exception
     */
    @Test
    public void test_Address_Existing() throws Exception {
        
        ProviderDto dto = ProviderTestDataBuilder.initFullProvider();
        dto.getAddresses().get(0).setPauthId(10l);
        dto.getAddresses().get(0).setGenerationNum(3l); // gen 5 is the ERC null
        dto.getAddresses().get(0).setDataOwnerCode("CPS");
        dto.getAddresses().get(0).setCommunicationPurposeCode("HC");
        
        GrsRegistryUsers regUser = new GrsRegistryUsers();
        regUser.setRuId(1l);
        GrsParties parties = new GrsParties();
        regUser.setPartyPartyId(parties);
        parties.setRegistryUserOrgChid("00002855");
        regUser.setUserChid("test@00002855");
        Object[] obj = {dto.getAddresses().get(0)};
        
        ChangeEvent changeEvent = new ChangeEvent(obj, dto.getAddresses().get(0), regUser);
        
        Future<GrsChangedRecords> f = providerChangeEventConsumer.processEvent(changeEvent);
        
        while (!f.isDone()) {
            Thread.sleep(3000);
        }
        
        GrsChangedRecords changedRec = f.get();
        assertTrue(changedRec.getGrsTransactionsList().size() == 1);
        assertTrue(TEST__USER__CHID_JUNIT.equals(changedRec.getUserChid()));
        GrsTransactions trans = changedRec.getGrsTransactionsList().get(0);
        assertTrue(trans.getDataOwnerCode().getCtlNameCode().matches("CPS"));
        assertTrue(trans.getEffectiveStartDate().getTime() == dto.getAddresses().get(0).getEffectiveStartDate().getTime());
        assertTrue(trans.getRdeChangedData().matches(".*addressLineOne\":\"1125 Paci.*"));
        assertTrue(trans.getRdePriorData().matches(".*addressLineOne\":\"1135 Pacific Dr.*"));
        assertTrue(trans.getRdePriorData().matches(".*generationNum\":2.*"));
        assertTrue(trans.getTtCode().getCtlId() == 2806);
    }

    /**
     * Add a provider.
     *
     * @throws InterruptedException
     * @throws ExecutionException
     * @throws EntityValidationException
     * @throws DuplicateRecordException
     * @throws BusinessRuleException
     */
    @Test
    public void test_auditMaintainProviderService() throws InterruptedException, ExecutionException, EntityValidationException, DuplicateRecordException, BusinessRuleException {
        MaintainProviderRequest request = createRequest();
        
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);

        // wait for changed records to fire
        Thread.sleep(30000);
        
        if (response != null) {
            List<PrsProviders> providerEntityList = providerDao.searchByIdentifer(request.getProviderDetails().getIdentifiers().get(0).getTypeCode(), request.getProviderDetails().getIdentifiers().get(0).getIdentifier(), MatchHistory.NO);
            PrsProviders providerEntity = providerEntityList.get(0);
            
            List<GrsChangedRecords> grsChangedRecordsList = entityManagerProxy.namedQuery("GrsChangedRecords.findAllByPauth", providerEntity.getPauthId());
            GrsChangedRecords grsChangedRecords = grsChangedRecordsList.get(0);
            assertTrue(USER_CHID.equals(grsChangedRecords.getUserChid()));
            
            List<GrsTransactions> grsTransactionsList = grsChangedRecords.getGrsTransactionsList();
            entityManagerProxy.remove(providerEntityList.get(0));

            // status, address, demo, name, id
            assertTrue(grsTransactionsList.size() == 7);
            StringBuilder objectNames = new StringBuilder();
            StringBuilder tTypes = new StringBuilder();
            for (GrsTransactions tr : grsTransactionsList) {
                objectNames.append(tr.getObjectTypeCode().getCtlNameCode());
                tTypes.append(tr.getTtCode().getCtlNameCode());
            }
            assertTrue(objectNames.toString().matches(".*PRS_STATUS.*"));
            assertTrue(objectNames.toString().matches(".*GRS_ADDRESS.*"));
            assertTrue(objectNames.toString().matches(".*PRS_DEMOGRAPHIC_DETAIL.*"));
            assertTrue(objectNames.toString().matches(".*GRS_PERSONAL_NAME.*"));
            assertTrue(objectNames.toString().matches(".*GRS_IDENTIFIER.*"));
            assertTrue(tTypes.toString().matches(".*CSTAT.*"));
            assertTrue(tTypes.toString().matches(".*CADDR.*"));
            assertTrue(tTypes.toString().matches(".*CDEMOG.*"));
            assertTrue(tTypes.toString().matches(".*CPNAME.*"));
            assertTrue(tTypes.toString().matches(".*CID.*"));
            
            entityManagerProxy.remove(grsChangedRecordsList.get(0));
        }
    }
    /**
     * Add a batch provider.
     *
     * @throws InterruptedException
     * @throws ExecutionException
     * @throws EntityValidationException
     * @throws DuplicateRecordException
     * @throws BusinessRuleException
     */
    @Test
    public void test_auditBatchMaintainProviderService() throws InterruptedException, ExecutionException, EntityValidationException, DuplicateRecordException, BusinessRuleException {
        MaintainProviderRequest request = createRequest();
        BatchRequest batchRequest = new BatchRequest();
        batchRequest.setMaintainProviderRequests(new ArrayList<MaintainProviderRequest>());
        batchRequest.getMaintainProviderRequests().add(request);
        batchRequest.setMessageCreationTime(Calendar.getInstance().getTime());
        batchRequest.setRegistryUserOrgId(PLRREGADMIN);
        
        BatchResponse response = maintainProviderEsbService.maintainProviders(batchRequest);

        // wait for changed records to fire
        Thread.sleep(30000);
        
        if (response != null) {
            List<PrsProviders> providerEntityList = providerDao.searchByIdentifer(request.getProviderDetails().getIdentifiers().get(0).getTypeCode(), request.getProviderDetails().getIdentifiers().get(0).getIdentifier(), MatchHistory.NO);
            PrsProviders providerEntity = providerEntityList.get(0);
            
            List<GrsChangedRecords> grsChangedRecordsList = entityManagerProxy.namedQuery("GrsChangedRecords.findAllByPauth", providerEntity.getPauthId());
            GrsChangedRecords grsChangedRecords = grsChangedRecordsList.get(0);
            assertTrue(USER_CHID.equals(grsChangedRecords.getUserChid()));
            
            List<GrsTransactions> grsTransactionsList = grsChangedRecords.getGrsTransactionsList();
            entityManagerProxy.remove(providerEntityList.get(0));

            // status, address, demo, name, id
            assertTrue(grsTransactionsList.size() == 7);
            StringBuilder objectNames = new StringBuilder();
            StringBuilder tTypes = new StringBuilder();
            for (GrsTransactions tr : grsTransactionsList) {
                objectNames.append(tr.getObjectTypeCode().getCtlNameCode());
                tTypes.append(tr.getTtCode().getCtlNameCode());
            }
            assertTrue(objectNames.toString().matches(".*PRS_STATUS.*"));
            assertTrue(objectNames.toString().matches(".*GRS_ADDRESS.*"));
            assertTrue(objectNames.toString().matches(".*PRS_DEMOGRAPHIC_DETAIL.*"));
            assertTrue(objectNames.toString().matches(".*GRS_PERSONAL_NAME.*"));
            assertTrue(objectNames.toString().matches(".*GRS_IDENTIFIER.*"));
            assertTrue(tTypes.toString().matches(".*CSTAT.*"));
            assertTrue(tTypes.toString().matches(".*CADDR.*"));
            assertTrue(tTypes.toString().matches(".*CDEMOG.*"));
            assertTrue(tTypes.toString().matches(".*CPNAME.*"));
            assertTrue(tTypes.toString().matches(".*CID.*"));
            
            entityManagerProxy.remove(grsChangedRecordsList.get(0));
        }
    }

    /**
     * Add provider with work location.
     *
     * @throws InterruptedException
     * @throws ExecutionException
     * @throws EntityValidationException
     * @throws DuplicateRecordException
     * @throws BusinessRuleException
     */
    @Test
    public void test_auditMaintainProviderService_WithWorkLocation() throws InterruptedException, ExecutionException, EntityValidationException, DuplicateRecordException, BusinessRuleException {
        MaintainProviderRequest request = createRequest();
        
        ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto workLocationDto = getWorkLocationDto();
        workLocationDto.setIdentifier(null);
        workLocationDto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
        request.getProviderDetails().getWorkLocationList().add(workLocationDto);
        workLocationDto.getAddresses().add(getAddress());
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        String dataOnwerCode = response.getProviderDetails().getWorkLocationList().get(0).getAddresses().get(0).getDataOwnerCode();

        //add the ir as need the address added first
        workLocationDto.getInformationRoutes().add(getInformationRoute_File());
        workLocationDto.getInformationRoutes().get(0).getAddressDto().setDataOwnerCode(dataOnwerCode);
        
        workLocationDto.setWorkLocationDetails(new ArrayList<ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDetailsDto>());
        workLocationDto.getAddresses().clear();
        request.getProviderDetails().getStatuses().clear();
        request.getProviderDetails().getAddresses().clear();
        request.getProviderDetails().getDemographicDetails().clear();
        request.getProviderDetails().getIndNames().clear();
        workLocationDto.setIdentifier(response.getProviderDetails().getWorkLocationList().get(0).getIdentifier());
        response = maintainProviderEsbService.maintainProvider(request);

        // wait for changed records to fire
        Thread.sleep(30000);
        
        if (response != null) {
            List<PrsProviders> providerEntityList = providerDao.searchByIdentifer(request.getProviderDetails().getIdentifiers().get(0).getTypeCode(), request.getProviderDetails().getIdentifiers().get(0).getIdentifier(), MatchHistory.NO);
            PrsProviders providerEntity = providerEntityList.get(0);
            
            List<GrsChangedRecords> grsChangedRecordsList = entityManagerProxy.namedQuery("GrsChangedRecords.findAllByPauth", providerEntity.getPauthId());
            GrsChangedRecords grsChangedRecords1 = grsChangedRecordsList.get(1);
            assertTrue(USER_CHID.equals(grsChangedRecords1.getUserChid()));
            List<GrsTransactions> grsTransactionsList1 = grsChangedRecords1.getGrsTransactionsList();
            GrsChangedRecords grsChangedRecords2 = grsChangedRecordsList.get(0);
            assertTrue(USER_CHID.equals(grsChangedRecords2.getUserChid()));
            List<GrsTransactions> grsTransactionsList2 = grsChangedRecords2.getGrsTransactionsList();
            entityManagerProxy.remove(providerEntityList.get(0));

            // status, address, demo, name, id
            commonAsserts(grsTransactionsList1, 9);
            
            checkForIR(grsTransactionsList2, 1);
            
            entityManagerProxy.remove(grsChangedRecordsList.get(0));
        }
    }

    /**
     * Change a provider address.
     *
     * @throws InterruptedException
     * @throws ExecutionException
     * @throws EntityValidationException
     * @throws DuplicateRecordException
     * @throws BusinessRuleException
     */
    @Test
    public void test_changeProviderAddress() throws InterruptedException, ExecutionException, EntityValidationException, DuplicateRecordException, BusinessRuleException {
        MaintainProviderRequest request = createRequest();
        
        ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto workLocationDto = getWorkLocationDto();
        workLocationDto.setIdentifier(null);
        workLocationDto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
        request.getProviderDetails().getWorkLocationList().add(workLocationDto);
        workLocationDto.getAddresses().add(getAddress());
        
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);

        // wait for changed records to fire
        Thread.sleep(30000);
        
        ProviderDtoConverter converter = new ProviderDtoConverter();
        
        if (response != null) {
            List<PrsProviders> providerEntityList = providerDao.searchByIdentifer(request.getProviderDetails().getIdentifiers().get(0).getTypeCode(), request.getProviderDetails().getIdentifiers().get(0).getIdentifier(), MatchHistory.NO);
            PrsProviders providerEntity = providerEntityList.get(0);
            ProviderDto pdto = converter.toProviderDetails(providerEntity, true);
            
            pdto.getAddresses().get(0).setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CHANGE.getValue());
            pdto.getAddresses().get(0).setAddressLineThree("line four change");
            
            MaintainProviderRequest nextRequest = new MaintainProviderRequest();
            try {
                nextRequest.setProviderDetails(pdto.toEsbVersion());
            } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException ex) {
                assertTrue(false);
            }
            nextRequest.setRegistryUserOrgId(PLRREGADMIN);
            nextRequest.getProviderDetails().getConditions().clear();
            nextRequest.getProviderDetails().getConfidentialityIndicators().clear();
            nextRequest.getProviderDetails().getCredentials().clear();
            nextRequest.getProviderDetails().getDemographicDetails().clear();
            nextRequest.getProviderDetails().getDisciplinaryActions().clear();
            nextRequest.getProviderDetails().getElectronicAddresses().clear();
            nextRequest.getProviderDetails().getExpertise().clear();
            nextRequest.getProviderDetails().getIndNames().clear();
            nextRequest.getProviderDetails().getInformationRoutes().clear();
            nextRequest.getProviderDetails().getNotes().clear();
            nextRequest.getProviderDetails().getOrgNames().clear();
            nextRequest.getProviderDetails().getProviderRelationships().clear();
            nextRequest.getProviderDetails().getRegistryIdentifiers().clear();
            nextRequest.getProviderDetails().getRegistryUserRelationships().clear();
            nextRequest.getProviderDetails().getStatuses().clear();
            nextRequest.getProviderDetails().getTelecommunication().clear();
            nextRequest.getProviderDetails().getWorkLocationList().clear();
            nextRequest.getProviderDetails().setJurisdiction(new ca.bc.gov.health.plr.dto.provider.esb.JurisdictionNameCodeDto());
            nextRequest.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");
            
            response = maintainProviderEsbService.maintainProvider(nextRequest);

            // wait for changed records to fire
            Thread.sleep(30000);
            
            List<GrsChangedRecords> grsChangedRecordsList = entityManagerProxy.namedQuery("GrsChangedRecords.findAllByPauth", providerEntity.getPauthId());
            GrsChangedRecords grsChangedRecords = grsChangedRecordsList.get(0);
            List<GrsTransactions> grsTransactionsList = grsChangedRecords.getGrsTransactionsList();
            
            assertTrue(grsTransactionsList.size() == 1);
            assertTrue(grsTransactionsList.get(0).getObjectTypeCode().getCtlNameCode().matches(CodeTableCodes.GrsCtDataObjects.GRS_ADDRESS.getValue()));
            assertTrue(grsTransactionsList.get(0).getTtCode().getCtlNameCode().matches(CodeTableCodes.GrsCtTransactionTypes.UPDATE_ADDRESS.getValue()));
            assertTrue(grsTransactionsList.get(0).getRdeChangedData().matches(".*line four change.*"));
            assertTrue(grsTransactionsList.get(0).getRdeChangedData().matches(".*generationNum\":3.*"));
            assertTrue(grsTransactionsList.get(0).getRdePriorData().matches(".*generationNum\":1.*"));
            assertTrue(grsTransactionsList.get(0).getRdePriorData().matches(".*endReasonCode\":\"CHG.*"));
            
            providerEntityList = providerDao.searchByIdentifer(request.getProviderDetails().getIdentifiers().get(0).getTypeCode(), request.getProviderDetails().getIdentifiers().get(0).getIdentifier(), MatchHistory.NO);
            entityManagerProxy.remove(providerEntityList.get(0));
            entityManagerProxy.remove(grsChangedRecordsList.get(0));
        }
    }

    /**
     * Cease a provider address.
     *
     * @throws InterruptedException
     * @throws ExecutionException
     * @throws EntityValidationException
     * @throws DuplicateRecordException
     * @throws BusinessRuleException
     */
    @Test
    public void test_ceaseProviderAddress() throws InterruptedException, ExecutionException, EntityValidationException, DuplicateRecordException, BusinessRuleException {
        MaintainProviderRequest request = createRequest();
        ca.bc.gov.health.plr.dto.provider.esb.AddressDto address = getAddress();
        request.getProviderDetails().getAddresses().add(address);
        address.setCommunicationPurposeCode("DC");
        
        ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto workLocationDto = getWorkLocationDto();
        workLocationDto.setIdentifier(null);
        workLocationDto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
        request.getProviderDetails().getWorkLocationList().add(workLocationDto);
        workLocationDto.getAddresses().add(getAddress());
        
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);

        // wait for changed records to fire
        Thread.sleep(30000);
        
        ProviderDtoConverter converter = new ProviderDtoConverter();
        
        if (response != null) {
            List<PrsProviders> providerEntityList = providerDao.searchByIdentifer(request.getProviderDetails().getIdentifiers().get(0).getTypeCode(), request.getProviderDetails().getIdentifiers().get(0).getIdentifier(), MatchHistory.NO);
            PrsProviders providerEntity = providerEntityList.get(0);
            ProviderDto pdto = converter.toProviderDetails(providerEntity, true);
            
            pdto.getAddresses().remove(1);
            pdto.getAddresses().get(0).setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CEASE.getValue());
            pdto.getAddresses().get(0).setAddressLineThree("line four change");
            
            MaintainProviderRequest nextRequest = new MaintainProviderRequest();
            try {
                nextRequest.setProviderDetails(pdto.toEsbVersion());
            } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException ex) {
                assertTrue(false);
            }
            nextRequest.setRegistryUserOrgId(PLRREGADMIN);
            nextRequest.getProviderDetails().getConditions().clear();
            nextRequest.getProviderDetails().getConfidentialityIndicators().clear();
            nextRequest.getProviderDetails().getCredentials().clear();
            nextRequest.getProviderDetails().getDemographicDetails().clear();
            nextRequest.getProviderDetails().getDisciplinaryActions().clear();
            nextRequest.getProviderDetails().getElectronicAddresses().clear();
            nextRequest.getProviderDetails().getExpertise().clear();
            nextRequest.getProviderDetails().getIndNames().clear();
            nextRequest.getProviderDetails().getInformationRoutes().clear();
            nextRequest.getProviderDetails().getNotes().clear();
            nextRequest.getProviderDetails().getOrgNames().clear();
            nextRequest.getProviderDetails().getProviderRelationships().clear();
            nextRequest.getProviderDetails().getRegistryIdentifiers().clear();
            nextRequest.getProviderDetails().getRegistryUserRelationships().clear();
            nextRequest.getProviderDetails().getStatuses().clear();
            nextRequest.getProviderDetails().getTelecommunication().clear();
            nextRequest.getProviderDetails().getWorkLocationList().clear();
            nextRequest.getProviderDetails().setJurisdiction(new ca.bc.gov.health.plr.dto.provider.esb.JurisdictionNameCodeDto());
            nextRequest.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");
            
            response = maintainProviderEsbService.maintainProvider(nextRequest);

            // wait for changed records to fire
            Thread.sleep(30000);
            
            List<GrsChangedRecords> grsChangedRecordsList = entityManagerProxy.namedQuery("GrsChangedRecords.findAllByPauth", providerEntity.getPauthId());
            GrsChangedRecords grsChangedRecords = grsChangedRecordsList.get(0);
            List<GrsTransactions> grsTransactionsList = grsChangedRecords.getGrsTransactionsList();
            
            assertTrue(grsTransactionsList.size() == 1);
            assertTrue(grsTransactionsList.get(0).getObjectTypeCode().getCtlNameCode().matches(CodeTableCodes.GrsCtDataObjects.GRS_ADDRESS.getValue()));
            assertTrue(grsTransactionsList.get(0).getTtCode().getCtlNameCode().matches(CodeTableCodes.GrsCtTransactionTypes.UPDATE_ADDRESS.getValue()));
            assertTrue(grsTransactionsList.get(0).getRdeChangedData().matches(".*generationNum\":2.*"));
            assertTrue(grsTransactionsList.get(0).getRdePriorData().matches(".*generationNum\":1.*"));
            assertTrue(grsTransactionsList.get(0).getRdeChangedData().matches(".*endReasonCode\":\"CEASE.*"));
            assertTrue(grsTransactionsList.get(0).getRdePriorData().matches(".*endReasonCode\":\"CEASE.*"));
            
            providerEntityList = providerDao.searchByIdentifer(request.getProviderDetails().getIdentifiers().get(0).getTypeCode(), request.getProviderDetails().getIdentifiers().get(0).getIdentifier(), MatchHistory.NO);
            entityManagerProxy.remove(providerEntityList.get(0));
            entityManagerProxy.remove(grsChangedRecordsList.get(0));
        }
    }

    /**
     * Add a provider, then update the WL and address.
     *
     * @throws InterruptedException
     * @throws ExecutionException
     * @throws EntityValidationException
     * @throws DuplicateRecordException
     * @throws BusinessRuleException
     */
    @Test
    public void test_changeProviderWLAddressAndDetails() throws InterruptedException, ExecutionException, EntityValidationException, DuplicateRecordException, BusinessRuleException {
        MaintainProviderRequest request = createRequest();
        
        ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto workLocationDto = getWorkLocationDto();
        workLocationDto.setIdentifier(null);
        workLocationDto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
        request.getProviderDetails().getWorkLocationList().add(workLocationDto);
        workLocationDto.getAddresses().add(getAddress());
        
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);

        // wait for changed records to fire
        Thread.sleep(30000);
        
        ProviderDtoConverter converter = new ProviderDtoConverter();
        
        if (response != null) {
            List<PrsProviders> providerEntityList = providerDao.searchByIdentifer(request.getProviderDetails().getIdentifiers().get(0).getTypeCode(), request.getProviderDetails().getIdentifiers().get(0).getIdentifier(), MatchHistory.NO);
            PrsProviders providerEntity = providerEntityList.get(0);
            ProviderDto pdto = converter.toProviderDetails(providerEntity, true);
            pdto.setWorkLocationList(converter.buildWorkLocations(providerEntity.getPrsWorkLocationsList()));
            
            pdto.getWorkLocationList().get(0).getAddresses().get(0).setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CHANGE.getValue());
            pdto.getWorkLocationList().get(0).getAddresses().get(0).setAddressLineThree("line WL four change");
            pdto.getWorkLocationList().get(0).getWorkLocationDetails().get(0).setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CHANGE.getValue());
            pdto.getWorkLocationList().get(0).getWorkLocationDetails().get(0).setAdditionalAddresseeInfo("new  adddd infofos");
            
            MaintainProviderRequest nextRequest = new MaintainProviderRequest();
            try {
                nextRequest.setProviderDetails(pdto.toEsbVersion());
            } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException ex) {
                assertTrue(false);
            }
            
            nextRequest.setRegistryUserOrgId(PLRREGADMIN);
            nextRequest.getProviderDetails().getConditions().clear();
            nextRequest.getProviderDetails().getConfidentialityIndicators().clear();
            nextRequest.getProviderDetails().getCredentials().clear();
            nextRequest.getProviderDetails().getDemographicDetails().clear();
            nextRequest.getProviderDetails().getDisciplinaryActions().clear();
            nextRequest.getProviderDetails().getElectronicAddresses().clear();
            nextRequest.getProviderDetails().getExpertise().clear();
            nextRequest.getProviderDetails().getIndNames().clear();
            nextRequest.getProviderDetails().getInformationRoutes().clear();
            nextRequest.getProviderDetails().getNotes().clear();
            nextRequest.getProviderDetails().getOrgNames().clear();
            nextRequest.getProviderDetails().getProviderRelationships().clear();
            nextRequest.getProviderDetails().getRegistryIdentifiers().clear();
            nextRequest.getProviderDetails().getRegistryUserRelationships().clear();
            nextRequest.getProviderDetails().getStatuses().clear();
            nextRequest.getProviderDetails().getTelecommunication().clear();
            nextRequest.getProviderDetails().getAddresses().clear();
            nextRequest.getProviderDetails().setJurisdiction(new ca.bc.gov.health.plr.dto.provider.esb.JurisdictionNameCodeDto());
            nextRequest.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");
            
            response = maintainProviderEsbService.maintainProvider(nextRequest);

            // wait for changed records to fire
            Thread.sleep(30000);
            
            List<GrsChangedRecords> grsChangedRecordsList = entityManagerProxy.namedQuery("GrsChangedRecords.findAllByPauth", providerEntity.getPauthId());
            GrsChangedRecords grsChangedRecords = grsChangedRecordsList.get(0);
            assertTrue(USER_CHID.equals(grsChangedRecords.getUserChid()));
            
            List<GrsTransactions> grsTransactionsList = grsChangedRecords.getGrsTransactionsList();
            
            assertEquals(2, grsTransactionsList.size());
            StringBuilder objectNames = new StringBuilder();
            StringBuilder tTypes = new StringBuilder();
            StringBuilder changedJson = new StringBuilder();
            for (GrsTransactions tr : grsTransactionsList) {
                objectNames.append(tr.getObjectTypeCode().getCtlNameCode());
                tTypes.append(tr.getTtCode().getCtlNameCode());
                changedJson.append(tr.getRdeChangedData());
            }
            assertTrue(objectNames.toString().matches(".*GRS_ADDRESS.*"));
            assertTrue(objectNames.toString().matches(".*PRS_WORK_LOCATION_DETAIL.*"));
            assertTrue(tTypes.toString().matches(".*UWLA.*"));
            assertTrue(tTypes.toString().matches(".*UWLD.*"));
            assertTrue(changedJson.toString().matches(".*line WL four change.*"));
            
            providerEntityList = providerDao.searchByIdentifer(request.getProviderDetails().getIdentifiers().get(0).getTypeCode(), request.getProviderDetails().getIdentifiers().get(0).getIdentifier(), MatchHistory.NO);
            entityManagerProxy.remove(providerEntityList.get(0));
            entityManagerProxy.remove(grsChangedRecordsList.get(0));
        }
        
    }

    /**
     * Submits a number of maintain transactions all at once (or close to it).
     * This test just 'blitzes' the system, but it does leave room for auditing
     * to finish. If this test is failing at times the system is probably just
     * too busy to audit within the time limits.
     *
     * @throws InterruptedException
     * @throws ExecutionException
     * @throws EntityValidationException
     * @throws DuplicateRecordException
     * @throws BusinessRuleException
     */
    @Test
    public void test_heavyLoad_AllAtOnce() throws InterruptedException, ExecutionException, EntityValidationException, DuplicateRecordException, BusinessRuleException {
        ArrayList<InnerThread> threadList = new ArrayList();
        int i = 0;
        for (; i < 30; i++) {
            InnerThread tmp = new InnerThread(i, 45000);  // it seems in my Vm this is taking longer
            threadList.add(tmp);
            tmp.start();
            System.out.println("Started " + i);
        }
        
        for (InnerThread t : threadList) {
            t.join();
            IntegrationSetup.entityManagerProxy.remove(t.providerEntityList.get(0));
            IntegrationSetup.entityManagerProxy.remove(t.grsChangedRecordsList.get(0));
        }
    }
    
    long sumAuditTime = 0;
    long num = 0;
    long sumMaintainTIme = 0;
    long countM = 0;
    long countA = 0;
    long whenToStart = 9;
    
    synchronized void addSum(long a) {
        countM++;
        // only start counting after X iterations, the first bunch are super slow
        if (countM > whenToStart) {
            sumAuditTime += a;
            num++;
        }
    }
    
    void addMaintain(long time) {
        countA++;
        // only start counting after X iterations, the first bunch are super slow
        if (countA > whenToStart) {
            sumMaintainTIme += time;
        }
    }

    /**
     * Submits a number of maintain transactions, one after the other with a gap
     * between each. And measures the time to audit each. If the time,on
     * average, is too much, more than the gap.
     *
     * @throws InterruptedException
     * @throws ExecutionException
     * @throws EntityValidationException
     * @throws DuplicateRecordException
     * @throws BusinessRuleException
     */
    @Test
    public void test_heavyLoad_AllAtOnce_AuditAvgTime() throws InterruptedException, ExecutionException, EntityValidationException, DuplicateRecordException, BusinessRuleException {
        sumAuditTime = 0;
        num = 0;
        int numIterations = 40;
        
        ArrayList<InnerThreadDifferrential> threadList = new ArrayList();
        int i = 0;
        for (; i < numIterations; i++) {
            InnerThreadDifferrential tmp = new InnerThreadDifferrential(i);
            threadList.add(tmp);
            long startMaintain = System.currentTimeMillis();
            tmp.go();    // do the add provider, non threaded
            addMaintain(System.currentTimeMillis() - startMaintain);
            tmp.start(); // start looking for audit information, threaded
        }
        
        for (InnerThreadDifferrential t : threadList) {
            t.join();
            IntegrationSetup.entityManagerProxy.remove(t.providerEntityList.get(0));
            IntegrationSetup.entityManagerProxy.remove(t.grsChangedRecordsList.get(0));
        }
        
        assertTrue(sumMaintainTIme > sumAuditTime);
    }

    /**
     * Tests a batch like scenario; a number of maintain transactions in a
     * sequential order.
     */
    @Test
    public void test_heavyLoad_Sequential() {
        ArrayList<InnerThread> threadList = new ArrayList();
        for (int i = 0; i < 30; i++) {
            InnerThread tmp = new InnerThread(i, 1);
            threadList.add(tmp);
            tmp.run_noSleep();
        }
        
        for (InnerThread t : threadList) {
            List<PrsProviders> providerEntityList = IntegrationSetup.providerDao.searchByIdentifer(t.response.getProviderDetails().getIdentifiers().get(0).getTypeCode(), t.response.getProviderDetails().getIdentifiers().get(0).getIdentifier(), MatchHistory.NO);
            PrsProviders providerEntity = providerEntityList.get(0);
            List<GrsChangedRecords> grsChangedRecordsList = IntegrationSetup.entityManagerProxy.namedQuery("GrsChangedRecords.findAllByPauth", providerEntity.getPauthId());
            t.grsChangedRecordsList = grsChangedRecordsList;
            t.providerEntityList = providerEntityList;
            List<GrsTransactions> grsTransactionsList = grsChangedRecordsList.get(0).getGrsTransactionsList();
            commonAsserts(grsTransactionsList, 9);
            
            IntegrationSetup.entityManagerProxy.remove(t.providerEntityList.get(0));
            IntegrationSetup.entityManagerProxy.remove(t.grsChangedRecordsList.get(0));
        }
        
    }

    /**
     * Some common asserts used in this file.
     *
     * @param grsTransactionsList List of transactions
     * @param numTransactions Numnber of expected transactions
     */
    private void commonAsserts(List<GrsTransactions> grsTransactionsList, int numTransactions) {
        assertTrue(grsTransactionsList.size() == numTransactions);
        StringBuilder objectNames = new StringBuilder();
        StringBuilder tTypes = new StringBuilder();
        for (GrsTransactions tr : grsTransactionsList) {
            objectNames.append(tr.getObjectTypeCode().getCtlNameCode());
            tTypes.append(tr.getTtCode().getCtlNameCode());
        }
        assertTrue(objectNames.toString().matches(".*PRS_STATUS.*"));
        assertTrue(objectNames.toString().matches(".*GRS_ADDRESS.*GRS_ADDRESS.*"));
        assertTrue(objectNames.toString().matches(".*PRS_DEMOGRAPHIC_DETAIL.*"));
        assertTrue(objectNames.toString().matches(".*GRS_PERSONAL_NAME.*"));
        assertTrue(objectNames.toString().matches(".*GRS_IDENTIFIER.*"));
        assertTrue(objectNames.toString().matches(".*PRS_WORK_LOCATION_DETAIL.*"));
        assertTrue(tTypes.toString().matches(".*CSTAT.*"));
        assertTrue(tTypes.toString().matches(".*CADDR.*"));
        assertTrue(tTypes.toString().matches(".*CWLA.*"));
        assertTrue(tTypes.toString().matches(".*CDEMOG.*"));
        assertTrue(tTypes.toString().matches(".*CPNAME.*"));
        assertTrue(tTypes.toString().matches(".*CID.*"));
        assertTrue(tTypes.toString().matches(".*CWLD.*"));
    }

    /**
     * Find the IR transaction
     *
     * @param grsTransactionsList List of transactions
     * @param numTransactions Numnber of expected transactions
     */
    private void checkForIR(List<GrsTransactions> grsTransactionsList, int numTransactions) {
        assertTrue(grsTransactionsList.size() == numTransactions);
        StringBuilder objectNames = new StringBuilder();
        StringBuilder tTypes = new StringBuilder();
        for (GrsTransactions tr : grsTransactionsList) {
            objectNames.append(tr.getObjectTypeCode().getCtlNameCode());
            tTypes.append(tr.getTtCode().getCtlNameCode());
        }
        assertTrue(objectNames.toString().matches(".*PRS_INFORMATION_ROUTE.*"));
        assertTrue(tTypes.toString().matches(".*CWLIRT.*"));
    }
    
    private MaintainProviderRequest createRequest() {
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setRegistryUserOrgId(PLRREGADMIN);
        request.setProviderDetails(new ProviderDetails());
        ca.bc.gov.health.plr.dto.provider.esb.AddressDto address = getAddress();
        request.getProviderDetails().getAddresses().add(address);
        addIdentifier(request);
        request.getProviderDetails().getIdentifiers().get(0).setEffectiveStartDate(new Date());
        request.getProviderDetails().setProviderType("IND");
        request.getProviderDetails().setType("RN");
        request.getProviderDetails().setJurisdiction(new ca.bc.gov.health.plr.dto.provider.esb.JurisdictionNameCodeDto());
        request.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");
        request.getProviderDetails().getDemographicDetails().add(getDemographicDto());
        request.getProviderDetails().getStatuses().add(getStatusDto());
        request.getProviderDetails().getIndNames().add(getPersonNameDto());
        return request;
    }
    
    class InnerThread extends Thread {
        
        public int jobNum = 0;
        public List<PrsProviders> providerEntityList = null;
        public List<GrsChangedRecords> grsChangedRecordsList = null;
        public MaintainProviderResponse response;
        public int waitTime = 30000;
        
        InnerThread(int i, int waitTimeZ) {
            jobNum = i;
            waitTime = waitTimeZ;
        }
        
        public void run() {
            MaintainProviderRequest request = createRequest();
            ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto workLocationDto = getWorkLocationDto();
            workLocationDto.setIdentifier(null);
            workLocationDto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
            request.getProviderDetails().getWorkLocationList().add(workLocationDto);
            workLocationDto.getAddresses().add(getAddress());
            response = IntegrationSetup.maintainProviderEsbService.maintainProvider(request);
            try {
                Thread.sleep(waitTime);
            } catch (InterruptedException ex) {
                Logger.getLogger(ProviderChangeEventConsumerTest.class.getName()).log(Level.SEVERE, null, ex);
            }
            if (response != null) {
                providerEntityList = IntegrationSetup.providerDao.searchByIdentifer(request.getProviderDetails().getIdentifiers().get(0).getTypeCode(), request.getProviderDetails().getIdentifiers().get(0).getIdentifier(), MatchHistory.NO);
                PrsProviders providerEntity = providerEntityList.get(0);
                grsChangedRecordsList = IntegrationSetup.entityManagerProxy.namedQuery("GrsChangedRecords.findAllByPauth", providerEntity.getPauthId());
                GrsChangedRecords grsChangedRecords = grsChangedRecordsList.get(0);
                List<GrsTransactions> grsTransactionsList = grsChangedRecords.getGrsTransactionsList();
                commonAsserts(grsTransactionsList, 7);
                System.out.println("Found audit " + jobNum);
            }
            
        }
        
        public void run_noSleep() {
            MaintainProviderRequest request = createRequest();
            ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto workLocationDto = getWorkLocationDto();
            workLocationDto.setIdentifier(null);
            workLocationDto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
            request.getProviderDetails().getWorkLocationList().add(workLocationDto);
            workLocationDto.getAddresses().add(getAddress());
            response = IntegrationSetup.maintainProviderEsbService.maintainProvider(request);
        }
    }
    
    class InnerThreadDifferrential extends Thread {
        
        public int jobNum = 0;
        public List<PrsProviders> providerEntityList = null;
        public List<GrsChangedRecords> grsChangedRecordsList = null;
        public MaintainProviderResponse response;
        public MaintainProviderRequest request;
        
        InnerThreadDifferrential(int i) {
            jobNum = i;
        }
        
        public void go() {
            request = createRequest();
            ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto workLocationDto = getWorkLocationDto();
            workLocationDto.setIdentifier(null);
            workLocationDto.getWorkLocationDetails().add(getWorkLocationDetailsDto());
            request.getProviderDetails().getWorkLocationList().add(workLocationDto);
            workLocationDto.getAddresses().add(getAddress());
            response = IntegrationSetup.maintainProviderEsbService.maintainProvider(request);
        }
        
        public void run() {
            long start = System.currentTimeMillis();
            if (response != null) {
                boolean foundAudit = false;
                long maxTries = 1200;
                long count = 0;
                while (!foundAudit && count <= maxTries) {
                    count++;
                    providerEntityList = IntegrationSetup.providerDao.searchByIdentifer(request.getProviderDetails().getIdentifiers().get(0).getTypeCode(), request.getProviderDetails().getIdentifiers().get(0).getIdentifier(), MatchHistory.NO);
                    PrsProviders providerEntity = providerEntityList.get(0);
                    grsChangedRecordsList = IntegrationSetup.entityManagerProxy.namedQuery("GrsChangedRecords.findAllByPauth", providerEntity.getPauthId());
                    if (grsChangedRecordsList != null && !grsChangedRecordsList.isEmpty()) {
                        foundAudit = true;
                        addSum(System.currentTimeMillis() - start);
                        List<GrsTransactions> grsTransactionsList = grsChangedRecordsList.get(0).getGrsTransactionsList();
                        commonAsserts(grsTransactionsList, 7);
                        break;
                    }
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(ProviderChangeEventConsumerTest.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                if (count >= maxTries) {
                    // i.e. fail the test
                    addSum(9999999l);
                }
            }
            
        }
        
    }
    
    static ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto getWorkLocationDto() {
        ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto dto = new ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto();
        return dto;
    }
    
    static ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDetailsDto getWorkLocationDetailsDto() {
        ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDetailsDto dto = new ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDetailsDto();
        dto.setName("TEST");
        dto.setAdditionalAddresseeInfo("TEST");
        dto.setTypeCode("HID");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }
    
    static void addIdentifier(MaintainProviderRequest request) {
        request.getProviderDetails().setIdentifiers(new ArrayList<ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto>());
        ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto collegeDto = new ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto();
        collegeDto.setIdentifier(UUID.randomUUID().toString().replace('-', 'a'));
        collegeDto.setTypeCode("RNID");
        request.getProviderDetails().getIdentifiers().add(collegeDto);
    }
    
    static ca.bc.gov.health.plr.dto.provider.esb.AddressDto getAddress() {
        ca.bc.gov.health.plr.dto.provider.esb.AddressDto address = new ca.bc.gov.health.plr.dto.provider.esb.AddressDto();
        address.setCity("Narnia");
        address.setAddressLineOne("The Yellow Brick Road");
        address.setEffectiveStartDate(EFF_START_DATE);
        address.setEffectiveEndDate(null);
        address.setProvinceOrStateTxt("BC");
        address.setCommunicationPurposeCode("BC");
        address.setTypeCode("M");
        address.setCountryCode("CA");
        address.setDataOwnerCode("MOH");
        return address;
    }
    
    static ca.bc.gov.health.plr.dto.provider.esb.InformationRouteDto getInformationRoute_File() {
        ca.bc.gov.health.plr.dto.provider.esb.InformationRouteDto ir = new ca.bc.gov.health.plr.dto.provider.esb.InformationRouteDto();
        ir.setAddressDto(getAddress());
        ir.setDocumentTypeCode("XRAY");
        ir.setMechanismType("COURIER");
        
        ir.setEffectiveStartDate(EFF_START_DATE);
        return ir;
    }
    
    static RegistryIdentifierDto getRegistryIdentifier() {
        RegistryIdentifierDto identifierDto = new RegistryIdentifierDto();
        identifierDto.setIdentifier("TEST");
        identifierDto.setRawIdentifier("TEST");
        identifierDto.setTypeCode("CPN");
        identifierDto.setEffectiveStartDate(EFF_START_DATE);
        return identifierDto;
    }
    
    static ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto getPersonNameDto() {
        ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto nameDto = new ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto();
        nameDto.setFirstName("TEST");
        nameDto.setLastName("LAST");
        nameDto.setTypeCode("CURR");
        nameDto.setEffectiveStartDate(EFF_START_DATE);
        return nameDto;
    }
    
    static OrgNameDto getOrgNameDto() {
        OrgNameDto nameDto = new OrgNameDto();
        nameDto.setLongName("TEST");
        nameDto.setName("LAST");
        nameDto.setTypeCode("CURR");
        nameDto.setEffectiveStartDate(EFF_START_DATE);
        return nameDto;
    }
    
    static TelecommunicationDto getTelecomDto() {
        TelecommunicationDto teleDto = new TelecommunicationDto();
        teleDto.setAreaCode("123");
        teleDto.setCommunicationPurposeCode("HC");
        teleDto.setNumber("1112223333");
        teleDto.setTypeCode("T");
        teleDto.setEffectiveStartDate(EFF_START_DATE);
        return teleDto;
    }
    
    static ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto getDemographicDto() {
        ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto dto = new ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto();
        dto.setBirthCountryCode("CA");
        dto.setBirthProvState("BC");
        dto.setBirthDate(new Date());
        dto.setGenderCode("M");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }
    
    static ElectronicAddressDto getElectronicAddressDto() {
        ElectronicAddressDto dto = new ElectronicAddressDto();
        dto.setAddress("abcd@def.com");
        dto.setCommunicationPurposeCode("BC");
        dto.setEffectiveStartDate(EFF_START_DATE);
        dto.setTypeCode("E");
        return dto;
    }
    
    static ca.bc.gov.health.plr.dto.provider.esb.StatusDto getStatusDto() {
        ca.bc.gov.health.plr.dto.provider.esb.StatusDto dto = new ca.bc.gov.health.plr.dto.provider.esb.StatusDto();
        dto.setClassCode("LIC");
        dto.setTypeCode("ACTIVE");
        dto.setReasonCode("ASSOC");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }
    
    static ConditionsDto getConditionsDto() {
        ConditionsDto dto = new ConditionsDto();
        dto.setIdentifier("12345");
        dto.setTypeCode("LOC");
        dto.setRestrictionExplanationText("12345 - TEST - 12345");
        dto.setRestrictionFlag(false);
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }
    
    static ExpertiseDto getExpertiseDto() {
        ExpertiseDto dto = new ExpertiseDto();
        dto.setRoleTypeCode("PHARM");
        dto.setTypeCode("DPH");
        dto.setEffectiveStartDate(EFF_START_DATE);
        dto.setSourcesCode("12345");
        return dto;
    }
    
    static CredentialsDto getCredentialDto() {
        CredentialsDto dto = new CredentialsDto();
        dto.setDesignation("TEST");
        dto.setInstitutionCountryCode("CA");
        dto.setInstitutionProvStateCode("BC");
        dto.setRegistrationNumber("TEST");
        dto.setTypeCode("BD");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }
    
    static DisciplinaryActionDto getDisciplinaryActionDto() {
        DisciplinaryActionDto dto = new DisciplinaryActionDto();
        dto.setDescription("TEST");
        dto.setIdentifier("12345");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }
    
    static ConfidentialityIndicatorDto getConfidentialityIndicatorDto() {
        ConfidentialityIndicatorDto dto = new ConfidentialityIndicatorDto();
        dto.setConfidential(false);
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }
    
    static ProviderRelationshipDto getProviderRelationshipDto() {
        ProviderRelationshipDto dto = new ProviderRelationshipDto();
        dto.setIdentifier("ABCDEF");
        dto.setIdentifierTypeCode("RNID");
        dto.setRelationshipTypeCode("LOC");
        dto.setTargetRelationshipTypeCode("LOC");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }
    
    static RegistryUserRelationshipDto getRegUserRelationshipDto() {
        RegistryUserRelationshipDto dto = new RegistryUserRelationshipDto();
        dto.setRegUserTypeCode("RA");
        dto.setRegistryUserChid("00002855");
        dto.setTypeCode("EE");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }
    
    static NoteDto getNoteDto() {
        NoteDto dto = new NoteDto();
        dto.setNoteText("TEST");
        dto.setIdentifier("12345");
        dto.setEffectiveStartDate(EFF_START_DATE);
        return dto;
    }
    
}
