package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.dto.provider.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.ConditionsDto;
import ca.bc.gov.health.plr.dto.provider.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.DisciplinaryActionDto;
import ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.NoteDto;
import ca.bc.gov.health.plr.dto.provider.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.ProviderRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.StatusDto;
import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtGenderCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtIdentifierTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusClassCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusReasonCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.provider.ProviderTestDataBuilder;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainProviderService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.codesDao;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.entityManagerProxy;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainAddressService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainConditionService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainDemographicDetailsService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainElectronicAddressService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainExpertiseService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainOrgNameService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainPersonNameService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainProviderIdentifierService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainProviderRelationshipService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainStatusService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainTelephoneService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainWorkLocationService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.util.DateUtils;
import ca.bc.gov.health.plr.util.SpoofedUserHelper;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import javax.naming.NamingException;
import org.junit.AfterClass;
import static org.junit.Assert.*;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 *
 * @author Sumesh Kariyil
 */
public class ProviderAuthorizationServiceTest extends IntegrationSetup {

    private static final List<PrsProviders> providersToDelete = new ArrayList<>();
    private static PrsCtIdentifierTypes identifierType;
    private static PrsCtProviderRoleTypes nurse;
    private static PrsCtStatusClassCodes assignedEntity;
    private static PrsCtStatusCodes statusCode;
    private static PrsCtStatusReasonCodes statusReasonCode;
    private static final Date date = new Date();
    private static PrsCtProviderRoleTypes dentist;
    private static PrsCtGenderCodes gender;
    private static PrsCtProviderRoleTypes ha;
    private static PrsCtProviderRoleTypes med;
    private static String ownerMismatchError;

    private static final Long PAUTH_ID = 27l;

    @BeforeClass
    public static void setUpClass() throws NamingException {

        identifierType = codesDao.lookup(PrsCtIdentifierTypes.class, "RNID");
        nurse = codesDao.lookup(PrsCtProviderRoleTypes.class, "RN");
        ha = codesDao.lookup(PrsCtProviderRoleTypes.class, "HA");
        med = codesDao.lookup(PrsCtProviderRoleTypes.class, "MD");
        assignedEntity = codesDao.lookup(PrsCtStatusClassCodes.class, CodeTableCodes.PrsCtStatusClassCodes.ASSIGNED_ENTITY);
        statusCode = codesDao.lookup(PrsCtStatusCodes.class, CodeTableCodes.PrsCtStatusCodes.ACTIVE);
        statusReasonCode = codesDao.lookup(PrsCtStatusReasonCodes.class, CodeTableCodes.PrsCtStatusReasonCodes.GOOD_STANDING);
        dentist = codesDao.lookup(PrsCtProviderRoleTypes.class, "DEN");
        gender = codesDao.lookup(PrsCtGenderCodes.class, "F");
        ownerMismatchError = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_OWNER_MISMATCH);
    //    addRegUserToThread(309l);
        SpoofedUserHelper.currentUser = "plr-restricted";
    }

    @AfterClass
    public static void tearDownClass() {
 //      addRegUserToThread(289l);
        SpoofedUserHelper.currentUser = "plr-reg-admin";
        ArrayList<Exception> exceptions = new ArrayList<>();
        providersToDelete.removeAll(Collections.singleton(null));
        for (PrsProviders prsProviders : providersToDelete) {
            try {
                entityManagerProxy.remove(prsProviders);
            } catch (Exception e) {
                e.printStackTrace();
                exceptions.add(e);
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    /**
     * Test that ProviderAuthorization throws error for users with no access
     * attributes are provided.
     *
     */
    @Test(expected = EntityValidationException.class)
    public void testSaveProviderNurseNoAccessShouldFail() throws EntityValidationException, DuplicateRecordException {
        ProviderDto providerDto = buildMinimiumProviderDto(nurse, identifierType, assignedEntity);
        try {
            maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        } catch (BusinessRuleException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        }
    }

    /**
     * Test that ProviderAuthorization throws error for users with no access
     * attributes are provided.
     *
     */
    @Test(expected = EntityValidationException.class)
    public void testSaveProviderDentistNoAccessShouldFail() throws EntityValidationException, DuplicateRecordException {
        ProviderDto providerDto = buildMinimiumProviderDto(dentist, identifierType, assignedEntity);
        try {
            maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        } catch (BusinessRuleException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        }
    }

    /**
     * Test that ProviderAuthorization throws error for users with no access
     * attributes are provided.
     *
     * @throws ca.bc.gov.health.plr.rule.BusinessRuleException
     */
    @Test(expected = EntityValidationException.class)
    public void testSaveProviderMedicalNoAccessShouldFail() throws EntityValidationException, DuplicateRecordException {
        ProviderDto providerDto = buildMinimiumProviderDto(med, identifierType, assignedEntity);
        try {
            maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
        } catch (BusinessRuleException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        }
    }

    

    @Test(expected = EntityValidationException.class)
    public void testSaveOrganizationNoAccessShouldFail() throws EntityValidationException, DuplicateRecordException {
        ProviderDto providerDto = buildMinimiumOrganizationProvider();
        try {
            PrsProviders provider = maintainProviderService.addProvider_Save_MessageAndWeb(providerDto);
            providersToDelete.add(provider);
        } catch (BusinessRuleException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        }
    }

   

    /**
     * Test of save address method .
     *
     * @throws ca.bc.gov.health.plr.rule.BusinessRuleException
     */
    @Test(expected = EntityValidationException.class)
    public void testAddAddressWithNoAccessShouldFail() throws EntityValidationException, BusinessRuleException {
        AddressDto newEntity = ProviderTestDataBuilder.getAddress();
        newEntity.setPauthId(PAUTH_ID);
        AddressDto result = null;
        try {
            result = maintainAddressService.save(newEntity);
        } catch (DuplicateRecordException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        } catch (BusinessRuleException bre) {
            throw bre;
        }

        assertNull(result);
    }

    /**
     * Test of save method .
     *
     * @throws ca.bc.gov.health.plr.rule.BusinessRuleException
     */
    @Test(expected = EntityValidationException.class)
    public void testAddConditionNoAccessShouldFail() throws EntityValidationException {
        ConditionsDto newEntity = ProviderTestDataBuilder.getConditions();
        newEntity.setPauthId(PAUTH_ID);
        ConditionsDto result = null;
        try {
            result = maintainConditionService.save(newEntity);
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        } catch (DuplicateRecordException ex) {
            assertTrue(ex.getMessage().equals(""));
        }

        assertNull(result);
    }

    /**
     * Test of save method, of class MaintainProviderCredentialsService.
     *
     * @throws ca.bc.gov.health.plr.rule.BusinessRuleException
     */
    @Test(expected = EntityValidationException.class)
    public void testSaveCredentialsNoAccessShouldFail() throws EntityValidationException {
        CredentialsDto newProviderCredentials = ProviderTestDataBuilder.getCredentials();
        newProviderCredentials.setPauthId(PAUTH_ID);
        CredentialsDto result = null;
        try {
            result = maintainCredentialsService.save(newProviderCredentials);
        } catch (DuplicateRecordException | BusinessRuleException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        }
        assertNull(result);
    }

    /**
     * Test of save method, of class MaintainDemographicDetailsService.
     *
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Test(expected = EntityValidationException.class)
    public void testSaveDemographicDetailsNoAccessShouldFail() throws EntityValidationException {
        DemographicDetailsDto newDemographicDetails = ProviderTestDataBuilder.getDemographicDetails();
        newDemographicDetails.setDataOwnerCode("SHARED");
        newDemographicDetails.setPauthId(PAUTH_ID);
        DemographicDetailsDto result = null;
        try {
            result = maintainDemographicDetailsService.save(newDemographicDetails);
        } catch (DuplicateRecordException | BusinessRuleException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        }
        assertNull(result);
    }

    /**
     * Test of save method .
     */
    @Test(expected = EntityValidationException.class)
    public void testAddDisciplinaryActionNoAccessShouldFail() throws EntityValidationException {

        DisciplinaryActionDto newEntity = ProviderTestDataBuilder.getDisciplinaryAction();
        newEntity.setPauthId(PAUTH_ID);
        DisciplinaryActionDto result = null;
        try {
            result = maintainDisciplinaryActionService.save(newEntity);
        } catch (DuplicateRecordException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        }
        assertNull(result);
    }

    /**
     * Test of saveProviderAddress method, of class
     * MaintainElectronicAddressService.
     *
     * @throws ca.bc.gov.health.plr.rule.BusinessRuleException
     */
    @Test(expected = EntityValidationException.class)
    public void testAddElectronicAddressNoAccessShouldFail() throws EntityValidationException {
        ElectronicAddressDto newAddr = ProviderTestDataBuilder.getElectronicAddress();
        newAddr.setPauthId(PAUTH_ID);

        ElectronicAddressDto result = null;
        try {
            result = maintainElectronicAddressService.save(newAddr);
        } catch (DuplicateRecordException | BusinessRuleException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        }
        assertNull(result);
    }

    @Test(expected = EntityValidationException.class)
    public void testAddExpertiseNoAccessShouldFail() throws EntityValidationException {
        ExpertiseDto newEntity = ProviderTestDataBuilder.getExpertise();
        newEntity.setRoleTypeCode("DEN");
        newEntity.setTypeId(1485L);
        newEntity.setPauthId(PAUTH_ID);

        try {
            maintainExpertiseService.save(newEntity);
        } catch (DuplicateRecordException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        }
    }

    @Test(expected = EntityValidationException.class)
    public void testAddNoteNoAccessShouldFail() throws EntityValidationException {
        NoteDto newNote = ProviderTestDataBuilder.getNote();
        newNote.setPauthId(PAUTH_ID);
        try {
            maintainNoteService.save(newNote);
        } catch (DuplicateRecordException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        }
    }

    /**
     * Test of save method.
     *
     * @throws ca.bc.gov.health.plr.rule.BusinessRuleException
     */
    @Test(expected = EntityValidationException.class)
    public void testAddOrgNameNoAccessShouldFail() throws EntityValidationException {
        OrgNameDto newEntity = ProviderTestDataBuilder.getOrgName();
        newEntity.setPauthId(PAUTH_ID);

        try {
            maintainOrgNameService.save(newEntity);
        } catch (DuplicateRecordException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        }
    }

    @Test(expected = EntityValidationException.class)
    public void testAddPersonNameNoAccessShouldFail() throws EntityValidationException {
        PersonNameDto newEntity = ProviderTestDataBuilder.getPersonName();
        newEntity.setPauthId(PAUTH_ID);
        try {
            maintainPersonNameService.save(newEntity);
        } catch (DuplicateRecordException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        }
    }

    @Test(expected = EntityValidationException.class)
    public void testAddIdentifierNoAccessShouldFail() throws EntityValidationException {
        CollegeIdentifierDto newIdent = ProviderTestDataBuilder.getIdentifier();
        newIdent.setPauthId(PAUTH_ID);

        CollegeIdentifierDto result = null;
        try {
            result = maintainProviderIdentifierService.save(newIdent);
            assertNotNull(result);
        } catch (DuplicateRecordException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        }
        assertNull(result);
    }

    @Test(expected = EntityValidationException.class)
    public void testAddProviderRelationshipNoAccessShouldFail() throws EntityValidationException {
        ProviderRelationshipDto newRelationship = ProviderTestDataBuilder.getProviderRelationship();
        newRelationship.setPauthId(PAUTH_ID);

        try {
            maintainProviderRelationshipService.save(newRelationship);
        } catch (DuplicateRecordException | BusinessRuleException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        }
    }

    @Test(expected = EntityValidationException.class)
    public void testAddStatusNoAccessShouldFail() throws EntityValidationException {
        StatusDto status = ProviderTestDataBuilder.getStatus();
        status.setPauthId(PAUTH_ID);
        try {
            maintainStatusService.save(status);
        } catch (DuplicateRecordException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        }
    }

    @Test(expected = EntityValidationException.class)
    public void testAddTelephoneNoAccessShouldFail() throws EntityValidationException, BusinessRuleException {
        TelecommunicationDto newEntity = ProviderTestDataBuilder.getTelecommunication();
        newEntity.setPauthId(PAUTH_ID);
        TelecommunicationDto result = null;
        try {
            result = maintainTelephoneService.save(newEntity);
        } catch (DuplicateRecordException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        } catch (BusinessRuleException bre) {
            throw bre;
        }
        assertNull(result);
    }

    @Test(expected = EntityValidationException.class)
    public void testAddWorkLocationNoAccessShouldFail() throws EntityValidationException {
        WorkLocationDto newWL = ProviderTestDataBuilder.getWorkLocation();
        newWL.setPauthId(PAUTH_ID);
        try {
            maintainWorkLocationService.saveNewWorkLocationAndDetail(newWL, ProviderTestDataBuilder.getWorkLocationDetails());
        } catch (DuplicateRecordException bre) {
            assertTrue(bre.getMessage().equals(""));
        } catch (EntityValidationException ex) {
            assertTrue(ex.getMessage().contains(ownerMismatchError));
            throw ex;
        }

    }

    /**
     * Returns a Provider DTO containing the minimum about of data required to
     * pass validation and persist the Provider.
     *
     * Provider is a REGISTERED_NURSE, identifier type
     * REGISTERED_NURSE_ID_NUMBER..
     *
     * @return a Provider DTO containing the minimum about of data required to
     * pass validation and persist the Provider.
     */
    private static ProviderDto buildMinimiumProviderDto(PrsCtProviderRoleTypes prType, PrsCtIdentifierTypes idType, PrsCtStatusClassCodes classCode) {
        ProviderDto providerDto = new ProviderDto(true);

        providerDto.setJurisdictionType(CodeTableCodes.PrsCtJurisdictions.BRITISH_COLUMBIA);
        providerDto.setPartyType(CodeTableCodes.GrsCtPartyType.IND);
        providerDto.setTypeId(prType.getCtlId());
        providerDto.getIdentifiers().get(0).setTypeId(idType.getCtlId());
        providerDto.getIdentifiers().get(0).setIdentifier("david1");
        providerDto.getIdentifiers().get(0).setEffectiveStartDate(date);
        providerDto.getDemographicDetails().get(0).setBirthDate(date);
        providerDto.getStatuses().get(0).setClassCodeId(classCode.getCtlId());
        providerDto.getStatuses().get(0).setTypeId(statusCode.getCtlId());
        providerDto.getStatuses().get(0).setReasonCodeId(statusReasonCode.getCtlId());
        providerDto.getStatuses().get(0).setEffectiveStartDate(date);
        providerDto.getIndNames().get(0).setFirstName("test");
        providerDto.getIndNames().get(0).setLastName("Sharpe");
        providerDto.getIndNames().get(0).setEffectiveStartDate(date);
        providerDto.getDemographicDetails().get(0).setGenderId(gender.getCtlId());

        Calendar cal = Calendar.getInstance();
        DateUtils.truncateTime(cal);

        providerDto.getDemographicDetails().get(0).setBirthDate(cal.getTime());
        return providerDto;
    }

    private static ProviderDto buildMinimiumOrganizationProvider() {
        ProviderDto providerDto = new ProviderDto(true);

        providerDto.setJurisdictionType(CodeTableCodes.PrsCtJurisdictions.BRITISH_COLUMBIA);
        providerDto.setPartyType(CodeTableCodes.GrsCtPartyType.ORG);
        providerDto.setTypeId(nurse.getCtlId());
        providerDto.getIdentifiers().get(0).setTypeId(identifierType.getCtlId());
        providerDto.getIdentifiers().get(0).setIdentifier("david1");
        providerDto.getIdentifiers().get(0).setEffectiveStartDate(date);
        providerDto.getStatuses().get(0).setClassCodeId(assignedEntity.getCtlId());
        providerDto.getStatuses().get(0).setTypeId(statusCode.getCtlId());
        providerDto.getStatuses().get(0).setReasonCodeId(statusReasonCode.getCtlId());
        providerDto.getStatuses().get(0).setEffectiveStartDate(date);
        providerDto.getOrgNames().get(0).setName("short name");
        providerDto.getOrgNames().get(0).setEffectiveStartDate(date);
        return providerDto;
    }

}
