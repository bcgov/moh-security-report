/*
 * *********************************************************************************************************************
 *  Copyright (c) 2018, Ministry of Health, BC.                                                                        *
 *                                                                                                                     *
 *  All rights reserved.                                                                                               *
 *    This information contained herein may not be used in whole                                                       *
 *    or in part without the express written consent of the                                                            *
 *    Government of British Columbia, Canada.                                                                          *
 *                                                                                                                     *
 *  Revision Control Information                                                                                       *
 *  File:                $Id::                                                                                       $ *
 *  Date of Last Commit: $Date::                                                                                     $ *
 *  Revision Number:     $Rev::                                                                                      $ *
 *  Last Commit by:      $Author::                                                                                   $ *
 *                                                                                                                     *
 * *********************************************************************************************************************
 */
package ca.bc.gov.health.plr.rule.provider;

import ca.bc.gov.health.plr.dto.provider.AddressDto;
import static ca.bc.gov.health.plr.util.CodeDaoMocks.CITY_NAME_VICTORIA;
import static ca.bc.gov.health.plr.util.CodeDaoMocks.COUNTRY_CODE_NAME_CA;
import static ca.bc.gov.health.plr.util.CodeDaoMocks.NOT_EMERGENCY_CONTACT_CODE_NAME;
import static ca.bc.gov.health.plr.util.CodeDaoMocks.PROV_CODE_NAME_BC;
import java.util.Date;
import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import javax.validation.constraints.Size;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.assertEquals;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 *
 * Validator for testing the valid size for each address line one/two/three/four
 * in address DTO.
 *
 * @author CGI Information Management Consultants Inc.
 */
public class AddressSizeValidatorTest {
    
    public AddressSizeValidatorTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    /**
     * Test for valid size of address line one with max. value of 100
     * characters.
     */
    @Test
    public void testValidSizeAddressLineOne() {
        MockDto addressLine1Txt = new MockDto();
        String addressLine1 = "11 RD ADDRESS ADDRESSLINE1TXT ADDRESS ADDRESSLINE1TXT ADDRESS ADDRESSLINE1TXT 11 RD ADDRESS ADDRESS1";

        AddressDto dto = populateAddressDto();
        dto.setAddressLineOne(addressLine1);
        addressLine1Txt.addressLineOne = dto.getAddressLineOne();

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockDto>> violations = validator.validate(addressLine1Txt);
        assertEquals(0, violations.size());
    }

    /**
     * Test for invalid size of address line one with value of more than 100
     * characters.
     */
    @Test
    public void testInvalidSizeAddressLineOne() {
        MockDto addressLine1Txt = new MockDto();
        String addressLine1 = "11 RD ADDRESS ADDRESSLINE1TXT ADDRESS ADDRESSLINE1TXT ADDRESS ADDRESSLINE1TXT 11 RD ADDRESS ADDRESS10";

        AddressDto dto = populateAddressDto();
        dto.setAddressLineOne(addressLine1);
        addressLine1Txt.addressLineOne = dto.getAddressLineOne();

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockDto>> violations = validator.validate(addressLine1Txt);
        assertEquals(1, violations.size());
    }

    /**
     * Test for valid size of address line two with max. value of 100
     * characters.
     */
    @Test
    public void testValidSizeAddressLineTwo() {
        MockDto addressLine2Txt = new MockDto();
        String addressLine2 = "22 RD ADDRESS ADDRESSLINE2TXT ADDRESS ADDRESSLINE2TXT ADDRESS ADDRESSLINE2TXT 22 RD ADDRESS ADDRESS2";

        AddressDto dto = populateAddressDto();
        dto.setAddressLineTwo(addressLine2);
        addressLine2Txt.addressLineTwo = dto.getAddressLineTwo();

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockDto>> violations = validator.validate(addressLine2Txt);
        assertEquals(0, violations.size());
    }

    /**
     * Test for invalid size of address line two with value of more than 100
     * characters.
     */
    @Test
    public void testInvalidSizeAddressLineTwo() {
        MockDto addressLine2Txt = new MockDto();
        String addressLine2 = "22 RD ADDRESS ADDRESSLINE2TXT ADDRESS ADDRESSLINE2TXT ADDRESS ADDRESSLINE2TXT 22 RD ADDRESS ADDRESS20";

        AddressDto dto = populateAddressDto();
        dto.setAddressLineTwo(addressLine2);
        addressLine2Txt.addressLineTwo = dto.getAddressLineTwo();

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockDto>> violations = validator.validate(addressLine2Txt);
        assertEquals(1, violations.size());
    }

    /**
     * Test for valid size of address line three with max. value of 100
     * characters.
     */
    @Test
    public void testValidSizeAddressLineThree() {
        MockDto addressLine3Txt = new MockDto();
        String addressLine3 = "33 RD ADDRESS ADDRESSLINE3TXT ADDRESS ADDRESSLINE3TXT ADDRESS ADDRESSLINE3TXT 33 RD ADDRESS ADDRESS3";

        AddressDto dto = populateAddressDto();
        dto.setAddressLineThree(addressLine3);
        addressLine3Txt.addressLineThree = dto.getAddressLineThree();

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockDto>> violations = validator.validate(addressLine3Txt);
        assertEquals(0, violations.size());
    }

    @Test
    public void testInvalidSizeAddressLineThree() {
        MockDto addressLine3Txt = new MockDto();
        String addressLine3 = "33 RD ADDRESS ADDRESSLINE3TXT ADDRESS ADDRESSLINE3TXT ADDRESS ADDRESSLINE3TXT 33 RD ADDRESS ADDRESS30";

        AddressDto dto = populateAddressDto();
        dto.setAddressLineThree(addressLine3);
        addressLine3Txt.addressLineThree = dto.getAddressLineThree();

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockDto>> violations = validator.validate(addressLine3Txt);
        assertEquals(1, violations.size());
    }

    /**
     * Test for valid size of address line four with max. value of 100
     * characters.
     */
    @Test
    public void testValidSizeAddressLineFour() {
        MockDto addressLine4Txt = new MockDto();
        String addressLine4 = "44 RD ADDRESS ADDRESSLINE4TXT ADDRESS ADDRESSLINE4TXT ADDRESS ADDRESSLINE4TXT 44 RD ADDRESS ADDRESS4";

        AddressDto dto = populateAddressDto();
        dto.setAddressLineFour(addressLine4);
        addressLine4Txt.addressLineFour = dto.getAddressLineFour();

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockDto>> violations = validator.validate(addressLine4Txt);
        assertEquals(0, violations.size());
    }

    @Test
    public void testInvalidSizeAddressLineFour() {
        MockDto addressLine4Txt = new MockDto();
        String addressLine4 = "44 RD ADDRESS ADDRESSLINE4TXT ADDRESS ADDRESSLINE4TXT ADDRESS ADDRESSLINE4TXT 44 RD ADDRESS ADDRESS40";

        AddressDto dto = populateAddressDto();
        dto.setAddressLineFour(addressLine4);
        addressLine4Txt.addressLineFour = dto.getAddressLineFour();

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<MockDto>> violations = validator.validate(addressLine4Txt);
        assertEquals(1, violations.size());
    }

    private static class MockDto {

        @Size(max = 100, message = "{constraints.size.message.part1of2} 'Address Line 1' {constraints.size.message.part2of2}")
        String addressLineOne;
        @Size(max = 100, message = "{constraints.size.message.part1of2} 'Address Line 2' {constraints.size.message.part2of2}")
        String addressLineTwo;
        @Size(max = 100, message = "{constraints.size.message.part1of2} 'Address Line 3' {constraints.size.message.part2of2}")
        String addressLineThree;
        @Size(max = 100)
        String addressLineFour;
    }

    private AddressDto populateAddressDto() {

        AddressDto dto = new AddressDto();

        dto.setTypeId(2839l); // P Physical location
        dto.setCity(CITY_NAME_VICTORIA);
        dto.setProvinceOrStateTxt(PROV_CODE_NAME_BC);
        dto.setCountryCode(COUNTRY_CODE_NAME_CA);
        dto.setEffectiveStartDate(new Date());
        dto.setCommunicationPurposeCode(NOT_EMERGENCY_CONTACT_CODE_NAME);

        return dto;
    }

}
