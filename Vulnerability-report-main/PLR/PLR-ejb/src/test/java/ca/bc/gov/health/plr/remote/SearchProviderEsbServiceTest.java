package ca.bc.gov.health.plr.remote;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.QueryParameters;
import ca.bc.gov.health.plr.dto.esb.QueryRequest;
import ca.bc.gov.health.plr.dto.esb.QueryResponse;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.ProviderType;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.search.SearchProviderRequest;
import ca.bc.gov.health.plr.dto.provider.search.SearchProviderResult;
import ca.bc.gov.health.plr.ejb.entity.GrsIdentifiers;
import ca.bc.gov.health.plr.ejb.entity.PrsProviderExpertises;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.validateSearchProviderTypePermission;
import ca.bc.gov.health.plr.service.remote.SearchProviderEsbService;
import ca.bc.gov.health.plr.util.MessageCodeHelper;
import java.util.Iterator;
import java.util.List;
import static org.hamcrest.Matchers.*;
import static org.junit.Assert.*;
import org.junit.Test;

/**
 *
 * @author sumesh.kariyil
 */
public class SearchProviderEsbServiceTest extends IntegrationSetup {

    private static final String REG_USER = "plr-reg-admin";

    @Test
    public void testEmptySearchRequest_ShouldReturnNoRecords() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        request.setQueryParameters(new QueryParameters());
        QueryResponse response = searchProviderEsbService.query(request);
        assertThat(response.getAcknowledgments(), notNullValue());
        assertThat(response.getAcknowledgments().iterator().next().getMsgText(), notNullValue());
    }

    @Test
    public void testSearch_InvalidCodes() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        parameter.setProviderRoleTypeCode("ABCD");
        parameter.setIdentifierTypeCode("ABCD");
        request.setQueryParameters(parameter);
        QueryResponse response = searchProviderEsbService.query(request);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
    }

    @Test
    public void testSearchOrganizationRequest_ShouldReturnNoRecords() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        parameter.setProviderRoleTypeCode("DEN");
        parameter.setFirstName("F*");
        request.setQueryParameters(parameter);
        QueryResponse response = searchProviderEsbService.query(request);
        assertThat(response.getAcknowledgments(), notNullValue());
        assertThat(response.getAcknowledgments().iterator().next().getMsgText(), notNullValue());
    }

    @Test
    public void testSearchPrecedence_ShouldReturnCollegeIdentifierSearhResult() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        PrsProviders provider = findProvider("RN", "RNA");
        if (provider != null) {
            QueryParameters parameter = new QueryParameters();
            parameter.setCity(null);
            parameter.setHistoryFlag(true);
            GrsIdentifiers rnID = null;
            for(GrsIdentifiers id : provider.getGrsIdentifiersList()) {
                if(!id.getProviderChid().matches("IPC") && !id.getProviderChid().matches("CPN")) {
                    rnID = id;
                }
            }
            assertNotNull(rnID);
            parameter.setIdentifier(rnID.getProviderChid());
            parameter.setIdentifierTypeCode("RNID");
            //parameter.setLastName("L*");
            request.setQueryParameters(parameter);

            QueryResponse response = searchProviderEsbService.query(request);
            assertThat(response.getAcknowledgments().size(), equalTo(1));
            SearchProviderResult providerResult = searchProviderService.searchByIdentifier(SearchProviderRequest(parameter));
            assertThat(response.getProviderDetails().size(), equalTo(excludeOrgCount(providerResult.getSearchResults())));
        }

    }

    @Test
    public void testSearchbyCriteria() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        parameter.setProviderRoleTypeCode("RN");
        parameter.setFirstName("G*");
        parameter.setCity(null);
        parameter.setHistoryFlag(true);
        parameter.setIdentifier(null);
        parameter.setIdentifierTypeCode(null);
        parameter.setLastName("G*");
        request.setQueryParameters(parameter);
        QueryResponse response = searchProviderEsbService.query(request);
        assertThat(response.getAcknowledgments().size(), equalTo(1));
        SearchProviderResult providerResult = searchProviderService.searchForPractitioner(SearchProviderRequest(parameter));
        assertThat(response.getProviderDetails().size(), equalTo(providerResult.getSearchResults().size()));
    }

    @Test
    public void testSearchbyCriteria_NoHistory() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        parameter.setProviderRoleTypeCode("RN");
        parameter.setFirstName("G*");
        parameter.setCity(null);
        parameter.setHistoryFlag(false);
        parameter.setIdentifier(null);
        parameter.setIdentifierTypeCode(null);
        parameter.setLastName("G*");
        request.setQueryParameters(parameter);
        QueryResponse response = searchProviderEsbService.query(request);
        assertThat(response.getAcknowledgments().size(), equalTo(1));
        SearchProviderResult providerResult = searchProviderService.searchForPractitioner(SearchProviderRequest(parameter));
        assertThat(response.getProviderDetails().size(), equalTo(providerResult.getSearchResults().size()));
    }

    @Test //PLR-727
    public void testSearchbyCriteria_NoResults() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        parameter.setProviderRoleTypeCode("RN");
        parameter.setFirstName("VVCGDHJSJDHTEEI");
        parameter.setCity(null);
        parameter.setHistoryFlag(true);
        parameter.setLastName("VVCGDHJSJDHTEEIoooiiooioioi");
        request.setQueryParameters(parameter);
        QueryResponse response = searchProviderEsbService.query(request);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        assertThat(response.getAcknowledgments().iterator().next().getMsgText(), containsString("No provider records found"));
    }

    @Test //REQ-00764, REQ-00925
    public void testSearchbyCriteria_HistoryFlag() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        parameter.setProviderRoleTypeCode("RN");
        parameter.setFirstName("G*");
        parameter.setCity(null);
        parameter.setHistoryFlag(false);
        parameter.setIdentifier(null);
        parameter.setIdentifierTypeCode(null);
        parameter.setLastName("G*");
        request.setQueryParameters(parameter);
        QueryResponse response = searchProviderEsbService.query(request);
        SearchProviderResult providerResult = searchProviderService.searchForPractitioner(SearchProviderRequest(parameter));
        assertThat(response.getProviderDetails().size(), equalTo(providerResult.getSearchResults().size()));
    }

    @Test
    public void testSearchbyCriteria_MaxResults() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        parameter.setProviderRoleTypeCode("RN");
        parameter.setFirstName("D*");
        parameter.setCity(null);
        parameter.setHistoryFlag(true);
        parameter.setIdentifier(null);
        parameter.setIdentifierTypeCode(null);
        parameter.setLastName("S*");
        request.setQueryParameters(parameter);
        QueryResponse response = searchProviderEsbService.query(request);
        assertThat(response.getAcknowledgments().size(), equalTo(2));
        assertThat(response.getProviderDetails().size(), equalTo(configurationDao.getMaxSearchResults()));
        assertThat(response.getAcknowledgments().iterator().next().getMsgText(), containsString("Maximum search results"));

    }

    @Test
    public void testSearchbyProviderId_ValidateMandatoryParams() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        parameter.setIdentifier(null);
        parameter.setIdentifierTypeCode("DENID");
        request.setQueryParameters(parameter);
        QueryResponse response = searchProviderEsbService.query(request);
        assertThat(response.getAcknowledgments().size(), equalTo(1));
        assertThat(response.getAcknowledgments().iterator().next().getMsgText(), containsString("Identifier ID"));
    }

    @Test
    public void testSearchbyCriteria_ValidateMandatoryParams() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        parameter.setProviderRoleTypeCode("DEN");
        request.setQueryParameters(parameter);
        QueryResponse response = searchProviderEsbService.query(request);
        assertThat(response.getAcknowledgments().size(), equalTo(1));
        assertThat(response.getAcknowledgments().get(0).getMsgText(), containsString("Insufficient parameters"));
    }

    @Test //REQ-00513
    public void testSearchbyCriteria_ValidateWildCardParams() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        parameter.setProviderRoleTypeCode("DEN");
        parameter.setFirstName("*");
        parameter.setLastName("*abc*");
        parameter.setCity("Vic*");
        request.setQueryParameters(parameter);
        QueryResponse response = searchProviderEsbService.query(request);
        assertThat(response.getAcknowledgments().size(), equalTo(3));
        boolean wildCardCity = false;
        boolean wildCardPreceded = false;
        boolean wildCardOnlyOne = false;
        for (Acknowledgment acknowledgment : response.getAcknowledgments()) {
            if (acknowledgment.getMsgText().contains("Only the First Name and Last Name")) {
                wildCardCity = true;
            } else if (acknowledgment.getMsgText().contains("The wildcard (*) must be preceded")) {
                wildCardPreceded = true;
            } else if (acknowledgment.getMsgText().contains("Only one wildcard")) {
                wildCardOnlyOne = true;
            }
        }
        assertTrue(wildCardCity);
        assertTrue(wildCardPreceded);
        assertTrue(wildCardOnlyOne);
    }

    @Test //REQ-00781, 785
    public void testSearchbyCriteria_Confidentiality() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        //PAUTH_ID 8 is confidential individual provider
        PrsProviders provider = findConfidentialityRecord();
        if (provider != null) {
            parameter.setProviderRoleTypeCode(provider.getHptCode().getCtlNameCode());
            parameter.setFirstName(provider.getGrsPersonNamesList().get(0).getPrsnFirstGivenNameTxt());
            parameter.setHistoryFlag(true);
            parameter.setLastName(provider.getGrsPersonNamesList().get(0).getPrsnSurnameTxt());
            request.setQueryParameters(parameter);
            QueryResponse response = searchProviderEsbService.query(request);
            assertThat(response.getAcknowledgments().iterator().next().getMsgText(), equalTo(MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.WARNING_SEARCH_CONFIDENTIAL_FOUND))[1]));
        }
    }

    @Test //REQ-00781 - For college id search confidential records will be returned
    public void testSearchByCollegeId_Confidentiality() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId("plr-restricted");
        QueryParameters parameter = new QueryParameters();
        //PAUTH_ID 8 is confidential individual provider
        PrsProviders provider = findConfidentialityRecord();
        if (provider != null) {
            parameter.setIdentifier(provider.getGrsIdentifiersList().get(0).getProviderChid());
            parameter.setIdentifierTypeCode(provider.getGrsIdentifiersList().get(0).getIdentifierTypeCode().getCtlNameCode());
            parameter.setHistoryFlag(true);
            request.setQueryParameters(parameter);
            QueryResponse response = searchProviderEsbService.query(request);
            for (ProviderDetails prov : response.getProviderDetails()) {
                if (prov.isConfidential()) {
                    assertThat(prov.getIndNames().get(0).getLastName(), equalTo("Confidential"));
                }
            }
        }

    }

    @Test //REQ-00177 - Case Insensitive Attribute Searches
    public void testSearchByCriteria_CaseInSensitive() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        parameter.setProviderRoleTypeCode("RN");
        parameter.setFirstName("G*");
        parameter.setHistoryFlag(true);
        parameter.setLastName("G*");
        request.setQueryParameters(parameter);
        QueryResponse response1 = searchProviderEsbService.query(request);
        parameter.setFirstName("g*");
        parameter.setLastName("g*");
        QueryResponse response2 = searchProviderEsbService.query(request);
        assertThat(response1.getProviderDetails().size(), equalTo(response2.getProviderDetails().size()));

    }

    @Test //REQ-00585 - Message Queries - retrieve the full model
    public void testSearchByCriteria_ReturnAllDetails() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        request.setUniqueMessageId("Message ID");
        QueryParameters parameter = new QueryParameters();
        parameter.setProviderRoleTypeCode("RN");
        parameter.setFirstName("G*");
        parameter.setHistoryFlag(true);
        parameter.setLastName("G*");
        request.setQueryParameters(parameter);
        QueryResponse response = searchProviderEsbService.query(request);

        assertTrue(!response.getProviderDetails().isEmpty());
        Iterator<ProviderDetails> detailsIter = response.getProviderDetails().iterator();
        while (detailsIter.hasNext()) {
            ProviderDetails details = detailsIter.next();
            assertTrue(!details.getIndNames().isEmpty());
            assertTrue(!details.getIdentifiers().isEmpty());
            assertTrue(!details.getRegistryIdentifiers().isEmpty());
            assertTrue(!details.getStatuses().isEmpty());
        }
    }

    @Test
    public void testSearchByCollegeID_ReturnAllDetails() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        PrsProviders provider = findConfidentialityRecord();
        if (provider != null) {
            parameter.setIdentifier(provider.getGrsIdentifiersList().get(0).getProviderChid());
            parameter.setIdentifierTypeCode(provider.getGrsIdentifiersList().get(0).getIdentifierTypeCode().getCtlNameCode());
            parameter.setHistoryFlag(true);
            request.setQueryParameters(parameter);
            QueryResponse response = searchProviderEsbService.query(request);

            assertTrue(!response.getProviderDetails().isEmpty());
            Iterator<ProviderDetails> detailsIter = response.getProviderDetails().iterator();
            while (detailsIter.hasNext()) {
                ProviderDetails details = detailsIter.next();
                assertTrue(!details.getIdentifiers().isEmpty());
            }
        }
    }

    @Test
    public void testSearch_Successful_transaction() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        PrsProviders provider = findConfidentialityRecord();
        if (provider != null) {
            parameter.setIdentifier(provider.getGrsIdentifiersList().get(0).getProviderChid());
            parameter.setIdentifierTypeCode(provider.getGrsIdentifiersList().get(0).getIdentifierTypeCode().getCtlNameCode());
            parameter.setHistoryFlag(true);
            request.setQueryParameters(parameter);
            QueryResponse response = searchProviderEsbService.query(request);

            assertTrue(!response.getProviderDetails().isEmpty());
            assertTrue(response.isIsTransactionSuccess());
        }
    }

    @Test
    public void testSearch_Failed_transaction() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        PrsProviders provider = findConfidentialityRecord();
        if (provider != null) {
            parameter.setIdentifier("456&*pppp");
            parameter.setIdentifierTypeCode(provider.getGrsIdentifiersList().get(0).getIdentifierTypeCode().getCtlNameCode());
            parameter.setHistoryFlag(true);
            request.setQueryParameters(parameter);
            QueryResponse response = searchProviderEsbService.query(request);

            assertTrue(!response.getAcknowledgments().isEmpty());
            assertFalse(response.isIsTransactionSuccess());
        }
    }

    @Test
    public void testSearch_Success_Status_CD() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        PrsProviders provider = findConfidentialityRecord();
        if (provider != null) {
            parameter.setIdentifier(provider.getGrsIdentifiersList().get(0).getProviderChid());
            parameter.setIdentifierTypeCode(provider.getGrsIdentifiersList().get(0).getIdentifierTypeCode().getCtlNameCode());
            parameter.setHistoryFlag(true);
            request.setQueryParameters(parameter);
            QueryResponse response = searchProviderEsbService.query(request);

            assertTrue(!response.getProviderDetails().isEmpty());
            assertTrue(response.getStatusCode().equals(SearchProviderEsbService.STATUS_CD_SUCCESS));
        }
    }

    @Test
    public void testSearch_Failed_Status_CD() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        PrsProviders provider = findConfidentialityRecord();
        if (provider != null) {
            parameter.setIdentifier("456&*pppp");
            parameter.setIdentifierTypeCode(provider.getGrsIdentifiersList().get(0).getIdentifierTypeCode().getCtlNameCode());
            parameter.setHistoryFlag(true);
            request.setQueryParameters(parameter);
            QueryResponse response = searchProviderEsbService.query(request);

            assertTrue(!response.getAcknowledgments().isEmpty());
            assertTrue(response.getStatusCode().equals(SearchProviderEsbService.STATUS_CD_FAILURE));
        }
    }

    @Test
    public void testSearch_Response_Code_with_Records() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        QueryParameters parameter = new QueryParameters();
        PrsProviders provider = findConfidentialityRecord();
        if (provider != null) {
            parameter.setIdentifier(provider.getGrsIdentifiersList().get(0).getProviderChid());
            parameter.setIdentifierTypeCode(provider.getGrsIdentifiersList().get(0).getIdentifierTypeCode().getCtlNameCode());
            parameter.setHistoryFlag(true);
            request.setQueryParameters(parameter);
            QueryResponse response = searchProviderEsbService.query(request);

            assertTrue(!response.getProviderDetails().isEmpty());
            assertTrue(response.getResponseCode().equals(SearchProviderEsbService.RESPONSE_CD_DELIVERED_RESPONSE));
        }
    }

    @Test
    public void testSearch_Response_Code_without_Records() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(REG_USER);
        request.setQueryParameters(new QueryParameters());
        QueryResponse response = searchProviderEsbService.query(request);
        assertThat(response.getAcknowledgments(), notNullValue());
        assertThat(response.getAcknowledgments().iterator().next().getMsgText(), notNullValue());
        assertTrue(response.getResponseCode().equals(SearchProviderEsbService.RESPONSE_CD_DELIVERED_RESPONSE));
    }

    @Test
    public void testSearchByCollegeID_CheckDPS() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId("plr-restricted");
        QueryParameters parameter = new QueryParameters();
        PrsProviders provider = findProvider("DEN", "ACOP");
        if (provider != null) {
            parameter.setIdentifier(provider.getGrsIdentifiersList().get(0).getProviderChid());
            parameter.setIdentifierTypeCode(provider.getGrsIdentifiersList().get(0).getIdentifierTypeCode().getCtlNameCode());
            parameter.setHistoryFlag(true);
            request.setQueryParameters(parameter);
            QueryResponse response = searchProviderEsbService.query(request);

            assertTrue(!response.getProviderDetails().isEmpty());
            Iterator<ProviderDetails> detailsIter = response.getProviderDetails().iterator();
            while (detailsIter.hasNext()) {
                ProviderDetails details = detailsIter.next();
                assertTrue(!details.getIdentifiers().isEmpty());
                assertTrue(details.getRegistryIdentifiers().isEmpty());
                for (CollegeIdentifierDto dto : details.getIdentifiers()) {
                    assertTrue(dto.getDataOwnerCode().equals("ACOP"));
                }
            }
        }
    }

    @Test
    public void testSearchByCriteria_CheckDPS() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId("plr-restricted");
        QueryParameters parameter = new QueryParameters();
        PrsProviders provider = findProvider("DEN", "ACOP");
        if (provider != null) {
            parameter.setProviderRoleTypeCode(provider.getHptCode().getCtlNameCode());
            parameter.setFirstName(provider.getGrsPersonNamesList().get(0).getPrsnFirstGivenNameTxt());
            parameter.setHistoryFlag(true);
            parameter.setLastName(provider.getGrsPersonNamesList().get(0).getPrsnSurnameTxt());
            request.setQueryParameters(parameter);
            QueryResponse response = searchProviderEsbService.query(request);

            assertTrue(!response.getProviderDetails().isEmpty());
            Iterator<ProviderDetails> detailsIter = response.getProviderDetails().iterator();
            while (detailsIter.hasNext()) {
                ProviderDetails details = detailsIter.next();
                assertTrue(!details.getIdentifiers().isEmpty());
                assertTrue(details.getRegistryIdentifiers().isEmpty());
                for (CollegeIdentifierDto dto : details.getIdentifiers()) {
                    assertTrue(dto.getDataOwnerCode().equals("ACOP"));
                }
            }
        }
    }

    /*
     Test the metadata of response message is populated
     */
    @Test
    public void testResponseMetadataPopulated() {
        PrsProviders provider = findConfidentialityRecord();

        if (provider != null) {
            QueryParameters parameter = new QueryParameters();
            parameter.setIdentifier(provider.getGrsIdentifiersList().get(0).getProviderChid());
            parameter.setIdentifierTypeCode(provider.getGrsIdentifiersList().get(0).getIdentifierTypeCode().getCtlNameCode());
            parameter.setHistoryFlag(true);

            QueryRequest request = new QueryRequest();
            request.setQueryParameters(parameter);
            request.setRegistryUserOrgId(REG_USER);
            String inputTargetMsgExtension = "inputTargetMsgId";
            request.setUniqueMessageId(inputTargetMsgExtension);

            QueryResponse response = searchProviderEsbService.query(request);

            assertNotNull(response.getTargetEnvironment());
            assertNotNull(response.getTargetOrganizationChid());
            assertNotNull(response.getSourceOrganizationChid());
            assertNotNull(response.getSourceNetworkAddressChid());
            assertNotNull(response.getTargetNetworkAddressChid());

            assertNull(response.getSourceFacilityId());
            assertNull(response.getTargetFacilityId());
            assertNull(response.getSourceServer());
            assertNull(response.getTargetServer());

            assertThat(response.getAcknowledgments(), hasSize(1));
            Acknowledgment ack = response.getAcknowledgments().get(0);
            assertEquals(request.getUniqueMessageId(), ack.getTargetMessageExtension());
            assertEquals("AA", ack.getTypeCode());
        } else {
            fail("Please fix test, 'provider' cannot be null for a valid test");
        }
    }

    @Test
    public void testInvalidUser_Null() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId(null);
        request.setQueryParameters(new QueryParameters());
        QueryResponse response = searchProviderEsbService.query(request);
        assertThat(response.getAcknowledgments(), notNullValue());

        boolean authenticationErrorMsg = false;
        for (Acknowledgment ack : response.getAcknowledgments()) {

            if (ack.getMsgText().contains("Your authentication token is invalid")) {
                authenticationErrorMsg = true;
                break;
            }
        }
        
        assertTrue(authenticationErrorMsg);

    }
    
    @Test
    public void testInvalidUser() {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId("Mickey mouse");
        request.setQueryParameters(new QueryParameters());
        QueryResponse response = searchProviderEsbService.query(request);
        assertThat(response.getAcknowledgments(), notNullValue());

        boolean authenticationErrorMsg = false;
        for (Acknowledgment ack : response.getAcknowledgments()) {

            if (ack.getMsgText().contains("Your authentication token is invalid")) {
                authenticationErrorMsg = true;
                break;
            }
        }
        
        assertTrue(authenticationErrorMsg);

    }

    /**
     * Test search by identifier. PLR-1685.
     * @throws Exception 
     */
    @Test
    public void testSearchByIdentifier() throws Exception {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId("plr-restricted");
        QueryParameters parameter = new QueryParameters();
        PrsProviders provider = findProvider("DEN", "ACOP");
        if (provider != null) {
            //only set identifier value, not set type
            parameter.setIdentifier(provider.getGrsIdentifiersList().get(0).getProviderChid());
            parameter.setHistoryFlag(true);
            request.setQueryParameters(parameter);
            QueryResponse response = searchProviderEsbService.query(request);

            assertTrue(response.getProviderDetails().isEmpty());
            assertThat(response.getAcknowledgments(), notNullValue());
            assertEquals(response.getAcknowledgments().iterator().next().getMsgCode().trim(), "GRS.SYS.UNK.UNK.1.0.5000");
            assertEquals(response.getAcknowledgments().iterator().next().getMsgText().trim(), "Entry error. Some mandatory data is missing in your transaction. The following fields must be supplied: 'Identifier Type'. Your transaction has not been processed. Correct and resubmit.");
        }
    }    

    /**
     * Test search by individual name. PLR-1685.
     * @throws Exception 
     */
    @Test
    public void testSearchByName() throws Exception {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId("plr-restricted");
        QueryParameters parameter = new QueryParameters();
        PrsProviders provider = findProvider("DEN", "ACOP");
        if (provider != null) {
            String firstName = provider.getGrsPersonNamesList().get(0).getPrsnFirstGivenNameTxt();
            String lastName = provider.getGrsPersonNamesList().get(0).getPrsnSurnameTxt();
            parameter.setFirstName(firstName);
            parameter.setLastName(lastName);
            parameter.setHistoryFlag(true);
            
            request.setQueryParameters(parameter);
            QueryResponse response = searchProviderEsbService.query(request);

            assertTrue(!response.getProviderDetails().isEmpty());
            Iterator<ProviderDetails> detailsIter = response.getProviderDetails().iterator();
            while (detailsIter.hasNext()) {
                ProviderDetails details = detailsIter.next();
                assertEquals(details.getIndNames().get(0).getFirstName(), firstName);
                assertEquals(details.getIndNames().get(0).getLastName(), lastName);
            }
        }
    }    
    
    /**
     * Test search by Location/Expertise/Language. PLR-1685.
     * @throws Exception 
     */
    @Test
    public void testSearchByLocationExpertiseLanguage() throws Exception {
        QueryRequest request = new QueryRequest();
        request.setRegistryUserOrgId("plr-restricted");
        QueryParameters parameter = new QueryParameters();
        PrsProviders provider = findProvider("DEN", "ACOP");
        if (provider != null) {
            String city = provider.getGrsAddressesList().get(0).getCityTxt();
            String firstName = provider.getGrsPersonNamesList().get(0).getPrsnFirstGivenNameTxt();
            parameter.setCity(city);
            parameter.setFirstName(firstName);
            parameter.setHistoryFlag(true);
            request.setQueryParameters(parameter);
            QueryResponse response = searchProviderEsbService.query(request);

            assertTrue(!response.getProviderDetails().isEmpty());
            Iterator<ProviderDetails> detailsIter = response.getProviderDetails().iterator();
            while (detailsIter.hasNext()) {
                ProviderDetails details = detailsIter.next();
                assertEquals(details.getIndNames().get(0).getFirstName(), firstName);
                assertEquals(details.getAddresses().get(0).getCity(), city);
            }
        }
    }        
    
    private SearchProviderRequest SearchProviderRequest(QueryParameters parameter) {
        SearchProviderRequest providerRequest = new SearchProviderRequest();
        providerRequest.setCity(parameter.getCity());
        providerRequest.setFirstName(parameter.getFirstName());
        providerRequest.setHistoryFlag(parameter.isHistoryFlag());
        providerRequest.setIdentifier(parameter.getIdentifier());
        providerRequest.setIdentifierTypeCode(parameter.getIdentifierTypeCode());
        providerRequest.setLastName(parameter.getLastName());
        providerRequest.setProviderRoleTypeCode(parameter.getProviderRoleTypeCode());
        return providerRequest;
    }

    private int excludeOrgCount(List<ProviderDto> dtos) {
        int count = 0;
        for (ProviderDto providerDto : dtos) {
            if (providerDto.getProviderType() != ProviderType.ORGANIZATION) {
                ++count;
            }
        }
        return count;
    }

    private PrsProviders findConfidentialityRecord() {
        List<PrsProviders> providers = entityManagerProxy.query("select c.pauthPauthId from PrsConfidentialityIndicators c "
                + "where c.confidentialFlag='Y' and c.activeFlag.ctlNameCode='Y' and c.endReasonCode is null and c.pauthPauthId.partyTypeCode.ctlNameCode='IND' order by c.pauthPauthId.pauthId desc");
        for (PrsProviders provider : providers) {
            BusinessRuleResult brr = validateSearchProviderTypePermission.validate(provider.getHptCode().getCtlNameCode());
            if (provider.getPartyTypeCode().getCtlNameCode().equals(CodeTableCodes.GrsCtPartyType.IND.getValue())
                    && brr.isValid()) {
                return provider;
            }
        }
        return null;
    }

    private PrsProviders findProvider(String hptCode, String dataOwnerCode) {
        List<PrsProviders> providers = entityManagerProxy.query("select s.pauthPauthId from PrsStatuses s "
                + "where s.pauthPauthId.hptCode.ctlNameCode='" + hptCode + "' and s.dataOwnerCode.ctlNameCode='" + dataOwnerCode + "'  "
                + "and s.pauthPauthId.partyTypeCode.ctlNameCode='IND' order by s.pauthPauthId.pauthId asc");
        for (PrsProviders provider : providers) {
            BusinessRuleResult brr = validateSearchProviderTypePermission.validate(provider.getHptCode().getCtlNameCode());
            if (provider.getPartyTypeCode().getCtlNameCode().equals(CodeTableCodes.GrsCtPartyType.IND.getValue())
                    && brr.isValid()) {
                return provider;
            }
        }
        return null;
    }
}
