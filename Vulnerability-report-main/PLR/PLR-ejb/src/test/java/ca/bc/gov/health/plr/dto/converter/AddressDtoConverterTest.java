package ca.bc.gov.health.plr.dto.converter;

import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.PrsCtAddressTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCommunPurposeTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import java.util.Calendar;
import java.util.Date;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 *
 * @author ian.scott
 */
public class AddressDtoConverterTest extends IntegrationSetup {

    public AddressDtoConverterTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    /**
     * Test of toEntity method
     */
    @Test
    public void testToEntity_AddressType() throws Exception {
        AddressDto dto = populateDTO();

        GrsAddresses result = addressConverter.toEntity(dto);
        assertEquals(result.getAddressTypeCode().getCtlNameCode(), "P");
        assertEquals(result.getAddressTypeCode().getCtlDescTxt(), "Physical location");
        Calendar cal = Calendar.getInstance();
        cal.set(9999, 11,30,0,0,0);
        cal.set(Calendar.MILLISECOND, 0);
        assertEquals(result.getEffectiveEndDate().getTime(), cal.getTime().getTime());
    }
    
    @Test
    public void testToEntity_defaultEffectiveEndDate() throws Exception {
        AddressDto dto = populateDTO();

        GrsAddresses result = addressConverter.toEntity(dto);
        assertEquals(result.getEffectiveEndDate(), DatabaseConstants.SYSTEM_HIGH_DATE.toDate());        
    }
    
    @Test
    public void testToEntity_effectiveEndDate() throws Exception {
        AddressDto dto = populateDTO();
        Date currDate= new Date();
        dto.setEffectiveEndDate(currDate);

        GrsAddresses result = addressConverter.toEntity(dto);
        assertNotSame(result.getEffectiveEndDate(), DatabaseConstants.SYSTEM_HIGH_DATE.toDate());        
        assertEquals(result.getEffectiveEndDate(), currDate);        
    }
    
    @Test
    public void testToEntity_addressPurposeId() {
        AddressDto dto = populateDTO();
        PrsCtCommunPurposeTypes addressPurposeCode = codesDao.lookup(PrsCtCommunPurposeTypes.class, CodeTableCodes.PrsCtCommunPurposeTypes.BUSINESS_CONTACT);
        dto.setCommunicationPurposeId(addressPurposeCode.getCtlId());
        GrsAddresses result = addressConverter.toEntity(dto);

        assertEquals(addressPurposeCode, result.getCmnctnPrpsTypCd());
    }

    @Test
    public void testToEntity_addressTypeId() {
        AddressDto dto = populateDTO();
        PrsCtAddressTypes addressTypeCode = codesDao.lookup(PrsCtAddressTypes.class, CodeTableCodes.PrsCtAddressTypes.MAILING_ADDRESS);

        dto.setTypeId(addressTypeCode.getCtlId());
        GrsAddresses result = addressConverter.toEntity(dto);

        assertEquals(addressTypeCode, result.getAddressTypeCode());
    }

    @Test
    public void testToEntity_addressLine1() {
        AddressDto dto = populateDTO();
        String addressLine1 = "someAddress1";

        dto.setAddressLineOne(addressLine1);
        GrsAddresses result = addressConverter.toEntity(dto);

        assertEquals(addressLine1, result.getAddressLine1Txt());
    }

    @Test
    public void testToEntity_addressLine2() {
        AddressDto dto = populateDTO();
        String addressLine2 = "someAddress2";

        dto.setAddressLineTwo(addressLine2);
        GrsAddresses result = addressConverter.toEntity(dto);

        assertEquals(addressLine2, result.getAddressLine2Txt());
    }

    @Test
    public void testToEntity_addressCity() {
        AddressDto dto = populateDTO();
        String city = "someCity";

        dto.setCity(city);
        GrsAddresses result = addressConverter.toEntity(dto);

        assertEquals(city, result.getCityTxt());
    }

    @Test
    public void testToEntity_postalCode() {
        AddressDto dto = populateDTO();
        String postalCode = "somePostalCode";

        dto.setPostalCode(postalCode);
        GrsAddresses result = addressConverter.toEntity(dto);

        assertEquals(postalCode, result.getPostalCodeOrZipTxt());
    }

    @Test
    public void testToEntity_countryId_address() {
        AddressDto dto = populateDTO();
        PrsCtCountries country = codesDao.lookup(PrsCtCountries.class, CodeTableCodes.PrsCtCountries.CANADA);

        dto.setCountryId(country.getCtlId());
        GrsAddresses result = addressConverter.toEntity(dto);

        assertEquals(country, result.getCountryCode());
    }

    @Test
    public void testToEntity_provinceId_address() {
        AddressDto dto = populateDTO();

        dto.setProvinceOrStateTxt("someProvince");
        GrsAddresses result = addressConverter.toEntity(dto);

        assertEquals("someProvince", result.getProvinceOrStateTxt());
    }
    
    private AddressDto populateDTO() {
        AddressDto dto = new AddressDto();

        dto.setPauthId(67l);
        dto.setTypeId(2839l); // P Physical location

        return dto;
    }
}
