/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.util;

import java.util.Calendar;
import java.util.Date;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author adebiyi.kuseju
 */
public class DateUtilsTest {
    
    public DateUtilsTest() {
    }
    
    /**
     * Test of isPast method, of class DateUtils.
     */
    @Test
    public void testIsPast_pastDate() {
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -1);
        assertTrue(DateUtils.isPast(cal.getTime()));
    }
    
    /**
     * Test of isPast method, of class DateUtils.
     */
    @Test
    public void testIsPast_todaysDate_EarlierTime() {
       
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.MILLISECOND, -1);
        assertFalse(DateUtils.isPast(cal.getTime()));
    }
    
     /**
     * Test of isPast method, of class DateUtils.
     */
    @Test
    public void testIsPast_futureDate() {
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, 1);
        assertFalse(DateUtils.isPast(cal.getTime()));
    }

    /**
     * Test of isPresent method, of class DateUtils.
     */
    @Test
    public void testIsPresent_todaysDate() {
        assertTrue(DateUtils.isPresent(new Date()));
    }
    
    /**
     * Test of isPresent method, of class DateUtils.
     */
    @Test
    public void testIsPresent_todaysDate_EarlierTime() {
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.MILLISECOND, -1);
        assertTrue(DateUtils.isPresent(cal.getTime()));
    }
    
    
    /**
     * Test of isPresent method, of class DateUtils.
     */
    @Test
    public void testIsPresent_PastDate() {
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -1);
        assertFalse(DateUtils.isPresent(cal.getTime()));
    }
    
    /**
     * Test of isPresent method, of class DateUtils.
     */
    @Test
    public void testIsPresent_futureDate() {
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, 1);
        assertFalse(DateUtils.isPresent(cal.getTime()));
    }
    
    /**
     * Test of isBefore method, of class DateUtils.
     */
    @Test
    public void testIsBefore_pastDate_positive() {
        Calendar calFirst = Calendar.getInstance();
        calFirst.add(Calendar.DATE, -4);
        
        
        Calendar calSecond = Calendar.getInstance();
        calSecond.add(Calendar.DATE, -1);
        
        assertTrue(DateUtils.isBefore(calFirst.getTime(), calSecond.getTime()));
    }
    
    /**
     * Test of isBefore method, of class DateUtils.
     */
    @Test
    public void testIsBefore_pastDate_negative() {
        Calendar calFirst = Calendar.getInstance();
        calFirst.add(Calendar.DATE, -1);
        
        
        Calendar calSecond = Calendar.getInstance();
        calSecond.add(Calendar.DATE, -4);
        
        assertFalse(DateUtils.isBefore(calFirst.getTime(), calSecond.getTime()));
    }
    
    /**
     * Test of isBefore method, of class DateUtils.
     */
    @Test
    public void testIsBefore_futureDate_positive() {
        Calendar calFirst = Calendar.getInstance();
        calFirst.add(Calendar.DATE, 1);
        
        
        Calendar calSecond = Calendar.getInstance();
        calSecond.add(Calendar.DATE, 5);
        
        assertTrue(DateUtils.isBefore(calFirst.getTime(), calSecond.getTime()));
    }
    
    /**
     * Test of isBefore method, of class DateUtils.
     */
    @Test
    public void testIsBefore_futureDate_pnegative() {
        Calendar calFirst = Calendar.getInstance();
        calFirst.add(Calendar.DATE, 5);
        
        
        Calendar calSecond = Calendar.getInstance();
        calSecond.add(Calendar.DATE, 1);
        
        assertFalse(DateUtils.isBefore(calFirst.getTime(), calSecond.getTime()));
    }

    /**
     * Test of isFuture method, of class DateUtils.
     */
    @Test
    public void testIsFuture() {
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, 1);
        assertTrue(DateUtils.isFuture(cal.getTime()));
    }
    
    /**
     * Test of isFuture method, of class DateUtils.
     */
    @Test
    public void testIsFuture_presentDate() {
        assertFalse(DateUtils.isFuture(new Date()));
    }
    
    /**
     * Test of isFuture method, of class DateUtils.
     */
    @Test
    public void testIsFuture_pastDate() {
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DATE, -1);
        assertFalse(DateUtils.isFuture(cal.getTime()));
    }

    /**
     * Test of isCurrentDateWithinRange method, of class DateUtils.
     */
    @Test
    public void testIsCurrentDateWithinRange() {
        Calendar cal1 = Calendar.getInstance();
        cal1.add(Calendar.DATE, -1);
        
        Calendar cal2 = Calendar.getInstance();
        cal2.add(Calendar.DATE, 1);

        assertTrue(DateUtils.isCurrentDateWithinRange(cal1.getTime(), cal2.getTime()));
    }
    
    /**
     * Test of isCurrentDateWithinRange method, of class DateUtils.
     */
    @Test
    public void testIsCurrentDateWithinRange_invalid() {
        Calendar cal1 = Calendar.getInstance();
        cal1.add(Calendar.DATE, -5);
        
        Calendar cal2 = Calendar.getInstance();
        cal2.add(Calendar.DATE, -1);

        assertFalse(DateUtils.isCurrentDateWithinRange(cal1.getTime(), cal2.getTime()));
    }
    
    @Test
    public void testGetDate() {
        assertNotNull(DateUtils.getDate(2010, 12, 31));
    }
}