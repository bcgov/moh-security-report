package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.provider.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.ejb.entity.PrsProviderCredentials;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.provider.ProviderTestDataBuilder;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.Date;
import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import org.junit.After;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;

/**
 * Simple JUnit test for maintain credentials service.
 *
 * @author greg.perkins
 */
public class MaintainCredentialsServiceTest extends IntegrationSetup {

    private static Long idToRemove;

    public MaintainCredentialsServiceTest() {
    }

    @Before
    public void init() {
        idToRemove = null;
    }
    
    @After
    public void cleanup() {
        if (idToRemove!=null){
            entityManagerProxy.remove(entityManagerProxy.find(PrsProviderCredentials.class, idToRemove));
        }
    }

    /**
     * Test of save method, of class MaintainProviderCredentialsService.
     * @throws ca.bc.gov.health.plr.service.provider.DuplicateRecordException
     * @throws ca.bc.gov.health.plr.rule.BusinessRuleException
     */
    @Test
    public void testMaintainProviderCredentials_save() throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        CredentialsDto newProviderCredentials = ProviderTestDataBuilder.getCredentials();
        newProviderCredentials.setPauthId(3313l);
        CredentialsDto result = maintainCredentialsService.save(newProviderCredentials);
        idToRemove = result.getId();

        assertNotNull(result);
        assertTrue(result.getId() > 0);
    }
    
    @Test
    public void testAddDuplicate() throws DuplicateRecordException, BusinessRuleException, EntityValidationException{
        CredentialsDto newProviderCredentials = ProviderTestDataBuilder.getCredentials();
        newProviderCredentials.setPauthId(3313l);
        CredentialsDto result;
        result = maintainCredentialsService.save(newProviderCredentials);
        idToRemove = result.getId();
        
        newProviderCredentials = ProviderTestDataBuilder.getCredentials();
        newProviderCredentials.setPauthId(3313l);
        boolean exceptionThrown = false;
        try{
            maintainCredentialsService.save(newProviderCredentials);
        }catch(DuplicateRecordException dre){
            exceptionThrown = true;
        }
        assertTrue(exceptionThrown);
    }
   
    @Test
    public void testAddInvalidCountry() throws DuplicateRecordException{
        CredentialsDto newProviderCredentials = ProviderTestDataBuilder.getCredentials();
        newProviderCredentials.setPauthId(12l);
        newProviderCredentials.setInstitutionCountryId(-1l);
        
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<CredentialsDto>> violations = validator.validate(newProviderCredentials);
        assertTrue(violations.size()>0);
    }
    
    @Test
    public void testAddInvalidProvince() throws DuplicateRecordException{
        CredentialsDto newProviderCredentials = ProviderTestDataBuilder.getCredentials();
        newProviderCredentials.setPauthId(12l);
        newProviderCredentials.setInstitutionProvStateId(-1l);
        
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<CredentialsDto>> violations = validator.validate(newProviderCredentials);
        assertTrue(violations.size()>0);
    }   
    
    @Test
    public void testAddInvalidCredentialType() throws DuplicateRecordException{
        CredentialsDto newProviderCredentials = ProviderTestDataBuilder.getCredentials();
        newProviderCredentials.setPauthId(12l);
        newProviderCredentials.setTypeId(-1l);
        
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<CredentialsDto>> violations = validator.validate(newProviderCredentials);
        assertTrue(violations.size()>0);
    }    
        

}
