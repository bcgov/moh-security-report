/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service;

import java.lang.reflect.Field;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;
import org.mockito.Mockito;
import static org.mockito.Mockito.when;

/**
 *
 * @author jonathan.wiebe
 */
public class AddressDoctorConnectionServiceTest {
    
    public AddressDoctorConnectionServiceTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    @Test
    public void testUnavailableResponse() throws NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorConnectionService connSrv = new AddressDoctorConnectionService();
        
        AddressDoctorConnection mockConn = addConnectionToConnectionService(connSrv);
        
        AddressDoctorMonitorService mockMonitor = Mockito.mock(AddressDoctorMonitorService.class);
        when(mockMonitor.isAvailable()).thenReturn(false);
        Field monitor = AddressDoctorConnectionService.class.getDeclaredField("adMonitorService");
        monitor.setAccessible(true);
        monitor.set(connSrv, mockMonitor);
        
        boolean gotException = false;
        try {
            connSrv.callAddressDoctor(null, null);
        } catch (AddressDoctorUnavailableException ex) {
            gotException = true;
        }
        assertTrue(gotException);

        gotException = false;
        try {
            connSrv.callAddressDoctor(null, null, true);
        } catch (AddressDoctorUnavailableException ex) {
            gotException = true;
        }
        assertTrue(gotException);
        
        gotException = false;
        try {
            connSrv.callAddressDoctor(null, null, false);
        } catch (AddressDoctorUnavailableException ex) {
            gotException = true;
        }
        assertTrue(gotException);
    }
    
    private AddressDoctorConnection addConnectionToConnectionService(AddressDoctorConnectionService connSrv) throws IllegalAccessException, NoSuchFieldException, IllegalArgumentException, SecurityException {
        // add AD connection mock to connection service
        AddressDoctorConnection mockConn = Mockito.mock(AddressDoctorConnection.class);
        when(mockConn.getConnection(Mockito.anyBoolean())).thenReturn(null);
        Field connection = AddressDoctorConnectionService.class.getDeclaredField("addressDoctorConnection");
        connection.setAccessible(true);
        connection.set(connSrv, mockConn);
        return mockConn;
    }
}
