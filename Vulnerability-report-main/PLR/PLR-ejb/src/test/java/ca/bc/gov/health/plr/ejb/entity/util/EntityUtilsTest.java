package ca.bc.gov.health.plr.ejb.entity.util;

import ca.bc.gov.health.plr.dto.provider.CollegeIdentifierDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import java.util.Date;
import org.joda.time.LocalDate;
import static org.junit.Assert.*;
import org.junit.Test;

/**
 *
 * @author Grant.Hodgins
 */
public class EntityUtilsTest extends IntegrationSetup {

    /**
     * Test of booleanValue method, of class EntityUtils.
     */
    @Test
    public void toGrsCtBooleanType_Yes() {
        ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes result = EntityUtils.toGrsCtBooleanType(true, codesDao);
        String ctlNameCode = result.getCtlNameCode();
        assertNotNull(ctlNameCode);
        assertTrue(ctlNameCode.equals("Y"));
    }

    /**
     * Test of booleanValue method, of class EntityUtils.
     */
    @Test
    public void toGrsCtBooleanType_No() {
        ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes result = EntityUtils.toGrsCtBooleanType(false, codesDao);
        String ctlNameCode = result.getCtlNameCode();
        assertNotNull(ctlNameCode);
        assertTrue(ctlNameCode.equals("N"));
    }

    /**
     * Test of booleanValue method, of class EntityUtils.
     */
    @Test
    public void toGrsCtBooleanType_DtoBoolFlagNotExplicitlySet_DefaultFalse() {
        //can use any
        CollegeIdentifierDto newIdent = new CollegeIdentifierDto();
        assertNotNull(newIdent.isActive());
        assertFalse(newIdent.isActive());
        ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes result = EntityUtils.toGrsCtBooleanType(newIdent.isActive(), codesDao);
        String ctlNameCode = result.getCtlNameCode();
        assertNotNull(ctlNameCode);
        assertTrue(ctlNameCode.equals("N"));
    }

    /**
     * Test of booleanValue method, of class EntityUtils.
     */
    @Test
    public void testBooleanValue_emptyFlag() {
        GrsCtBooleanTypes activeFlag = new GrsCtBooleanTypes();
        activeFlag.setCtlNameCode("");
        boolean result = EntityUtils.booleanValue(activeFlag);
        assertFalse(result);
    }
    
    @Test
    public void testBooleanValue_garbageYesFlag() {
        GrsCtBooleanTypes activeFlag = new GrsCtBooleanTypes();
        activeFlag.setCtlNameCode("YES");
        boolean result = EntityUtils.booleanValue(activeFlag);
        assertFalse(result);
    }
    
    @Test
    public void testBooleanValue_nullFlag() {
        GrsCtBooleanTypes activeFlag = new GrsCtBooleanTypes();
        activeFlag.setCtlNameCode(null);
        boolean result = EntityUtils.booleanValue(activeFlag);
        assertFalse(result);
    }
    
    @Test
    public void testBooleanValue_yesFlag() {
        GrsCtBooleanTypes activeFlag = new GrsCtBooleanTypes();
        activeFlag.setCtlNameCode("Y");
        boolean result = EntityUtils.booleanValue(activeFlag);
        assertTrue(result);
    }
    
    @Test
    public void testBooleanValue_noFlag() {
        GrsCtBooleanTypes activeFlag = new GrsCtBooleanTypes();
        activeFlag.setCtlNameCode("N");
        boolean result = EntityUtils.booleanValue(activeFlag);
        assertFalse(result);
    }

    /**
     * Test of isSystemHighDate method, of class EntityUtils.
     */
    @Test
    public void testIsSystemHighDate_nullDate() {
        Date date = null;
        boolean result = EntityUtils.isSystemHighDate(date);
        assertFalse(result);
    }

    @Test
    public void testIsSystemHighDate_nowDate() {
        Date date = new Date();
        boolean result = EntityUtils.isSystemHighDate(date);
        assertFalse(result);
    }

    @Test
    public void testIsSystemHighDate_garbageDate() {
        LocalDate date = new LocalDate(1942, 1, 2);
        boolean result = EntityUtils.isSystemHighDate(date.toDateTimeAtStartOfDay().toDate());
        assertFalse(result);
    }

    @Test
    public void testIsSystemHighDate_systemLowDate() {
        boolean result = EntityUtils.isSystemHighDate(DatabaseConstants.SYSTEM_LOW_DATE.toDate());
        assertFalse(result);
    }

    @Test
    public void testIsSystemHighDate_systemHighDate() {
        boolean result = EntityUtils.isSystemHighDate(DatabaseConstants.SYSTEM_HIGH_DATE.toDate());
        assertTrue(result);
    }

    /**
     * Test of isActive method, of class EntityUtils.
     */
    @Test
    public void testIsActive_nulls() {
        boolean activeFlag = false;
        String endReasonCode = null;
        Date invalidatedDate = null;
        Date effectiveStartDate = null;
        Date effectiveEndDate = null;
        boolean result = EntityUtils.isActive(activeFlag, endReasonCode, invalidatedDate, effectiveStartDate, effectiveEndDate);
        assertFalse(result);
    }

    @Test
    public void testIsActive_nulls_withGoodFlag() {
        boolean activeFlag = true;
        String endReasonCode = null;
        Date invalidatedDate = null;
        Date effectiveStartDate = null;
        Date effectiveEndDate = null;
        boolean result = EntityUtils.isActive(activeFlag, endReasonCode, invalidatedDate, effectiveStartDate, effectiveEndDate);
        assertTrue(result);
    }

    @Test
    public void testIsActive_activeConditions() {
        boolean activeFlag = true;
        String endReasonCode = null;
        Date invalidatedDate = null;
        LocalDate effectiveStartDate = new LocalDate(2000, 1, 1);
        LocalDate effectiveEndDate = new LocalDate(3000, 1, 1);
        boolean result = EntityUtils.isActive(activeFlag, endReasonCode, invalidatedDate, effectiveStartDate.toDate(), effectiveEndDate.toDate());
        assertTrue(result);
    }

    @Test
    public void testIsActive_activeConditions_failInactiveFlag() {
        boolean activeFlag = false;
        String endReasonCode = null;
        Date invalidatedDate = null;
        LocalDate effectiveStartDate = new LocalDate(2000, 1, 1);
        LocalDate effectiveEndDate = new LocalDate(3000, 1, 1);
        boolean result = EntityUtils.isActive(activeFlag, endReasonCode, invalidatedDate, effectiveStartDate.toDate(), effectiveEndDate.toDate());
        assertFalse(result);
    }

    @Test
    public void testIsActive__activeConditions_failEndReason() {
        boolean activeFlag = true;
        String endReasonCode = "NOTNULL";
        Date invalidatedDate = null;
        LocalDate effectiveStartDate = new LocalDate(2000, 1, 1);
        LocalDate effectiveEndDate = new LocalDate(3000, 1, 1);
        boolean result = EntityUtils.isActive(activeFlag, endReasonCode, invalidatedDate, effectiveStartDate.toDate(), effectiveEndDate.toDate());
        assertFalse(result);
    }

    @Test
    public void testIsActive_activeConditions_failInvalidatedDate() {
        boolean activeFlag = true;
        String endReasonCode = null;
        Date invalidatedDate = new Date();
        LocalDate effectiveStartDate = new LocalDate(2000, 1, 1);
        LocalDate effectiveEndDate = new LocalDate(3000, 1, 1);
        boolean result = EntityUtils.isActive(activeFlag, endReasonCode, invalidatedDate, effectiveStartDate.toDate(), effectiveEndDate.toDate());
        assertFalse(result);
    }

    @Test
    public void testIsActive_activeConditions_failStartDate() {
        boolean activeFlag = true;
        String endReasonCode = null;
        Date invalidatedDate = null;
        LocalDate effectiveStartDate = new LocalDate(2050, 1, 1);
        LocalDate effectiveEndDate = new LocalDate(3000, 1, 1);
        boolean result = EntityUtils.isActive(activeFlag, endReasonCode, invalidatedDate, effectiveStartDate.toDate(), effectiveEndDate.toDate());
        assertFalse(result);
    }

    @Test
    public void testIsActive_activeConditions_failEndDate() {
        boolean activeFlag = true;
        String endReasonCode = null;
        Date invalidatedDate = null;
        LocalDate effectiveStartDate = new LocalDate(2000, 1, 1);
        LocalDate effectiveEndDate = new LocalDate(2001, 1, 1);
        boolean result = EntityUtils.isActive(activeFlag, endReasonCode, invalidatedDate, effectiveStartDate.toDate(), effectiveEndDate.toDate());
        assertFalse(result);
    }

    /**
     * Test of isCurrentlyEffective method, of class EntityUtils.
     */
    @Test
    public void testIsCurrentlyEffective_effective() {
        LocalDate effectiveStartDate = new LocalDate(1900, 1, 1);
        LocalDate effectiveEndDate = new LocalDate(3000, 1, 1);
        boolean result = EntityUtils.isCurrentlyEffective(effectiveStartDate.toDate(), effectiveEndDate.toDate());
        assertTrue(result);
    }

    @Test
    public void testIsCurrentlyEffective_nulls() {
        Date effectiveStartDate = null;
        Date effectiveEndDate = null;
        boolean result = EntityUtils.isCurrentlyEffective(effectiveStartDate, effectiveEndDate);
        assertFalse(result);
    }

    @Test
    public void testIsCurrentlyEffective_failStartDate() {
        LocalDate effectiveStartDate = new LocalDate(2050, 1, 1);
        LocalDate effectiveEndDate = new LocalDate(3000, 1, 1);
        boolean result = EntityUtils.isCurrentlyEffective(effectiveStartDate.toDate(), effectiveEndDate.toDate());
        assertFalse(result);
    }

    @Test
    public void testIsCurrentlyEffective_failEndDate() {
        LocalDate effectiveStartDate = new LocalDate(2000, 1, 1);
        LocalDate effectiveEndDate = new LocalDate(2001, 1, 1);
        boolean result = EntityUtils.isCurrentlyEffective(effectiveStartDate.toDate(), effectiveEndDate.toDate());
        assertFalse(result);
    }

    /**
     * Test that if the start date is TODAY 00:00:00:00, it considered
     * effective.
     *
     * For example, if today is December 18th, 2014, confirm that effective
     * start date 18DEC14 00:00:00:00 (HH:MM:SS:mm) is considered effective.
     */
    @Test
    public void testIsCurrentlyEffective_startDateStartOfDay_isEffective() {
        LocalDate effectiveStartDate = new LocalDate();
        LocalDate effectiveEndDate = new LocalDate(DatabaseConstants.SYSTEM_HIGH_DATE);
        boolean result = EntityUtils.isCurrentlyEffective(effectiveStartDate.toDateTimeAtStartOfDay().toDate(), effectiveEndDate.toDate());
        assertTrue(result);
    }

    @Test
    public void testisActiveForResponseOrDistribution_true() {
        boolean activeFlag = true;
        String endReasonCode = null;
        Date invalidatedDate = null;
        LocalDate effectiveStartDate = new LocalDate(2000, 1, 1);
        LocalDate effectiveEndDate = new LocalDate(3000, 1, 1);
        boolean result = EntityUtils.isActiveForResponseOrDistribution(activeFlag, endReasonCode, invalidatedDate, effectiveStartDate.toDate(), effectiveEndDate.toDate());
        assertTrue(result);
    }

    @Test
    public void testisActiveForResponseOrDistribution_falseNotActive() {
        boolean activeFlag = false;
        String endReasonCode = null;
        Date invalidatedDate = null;
        LocalDate effectiveStartDate = new LocalDate(2000, 1, 1);
        LocalDate effectiveEndDate = new LocalDate(3000, 1, 1);
        boolean result = EntityUtils.isActiveForResponseOrDistribution(activeFlag, endReasonCode, invalidatedDate, effectiveStartDate.toDate(), effectiveEndDate.toDate());
        assertFalse(result);
    }

    @Test
    public void testisActiveForResponseOrDistribution_falseEndReasonCode() {
        boolean activeFlag = true;
        String endReasonCode = "CHG";
        Date invalidatedDate = null;
        LocalDate effectiveStartDate = new LocalDate(2000, 1, 1);
        LocalDate effectiveEndDate = new LocalDate(3000, 1, 1);
        boolean result = EntityUtils.isActiveForResponseOrDistribution(activeFlag, endReasonCode, invalidatedDate, effectiveStartDate.toDate(), effectiveEndDate.toDate());
        assertFalse(result);
    }

    @Test
    public void testisActiveForResponseOrDistribution_falseInvalidatedDate() {
        boolean activeFlag = true;
        String endReasonCode = null;
        Date invalidatedDate = new LocalDate(2000,1,1).toDate();
        LocalDate effectiveStartDate = new LocalDate(2000, 1, 1);
        LocalDate effectiveEndDate = new LocalDate(3000, 1, 1);
        boolean result = EntityUtils.isActiveForResponseOrDistribution(activeFlag, endReasonCode, invalidatedDate, effectiveStartDate.toDate(), effectiveEndDate.toDate());
        assertFalse(result);
    }

    @Test
    public void testisActiveForResponseOrDistribution_trueEffectiveRange() {
        boolean activeFlag = true;
        String endReasonCode = null;
        Date invalidatedDate = null;
        LocalDate effectiveStartDate = new LocalDate(2000, 1, 1);
        LocalDate effectiveEndDate = new LocalDate(2001, 1, 1);
        boolean result = EntityUtils.isActiveForResponseOrDistribution(activeFlag, endReasonCode, invalidatedDate, effectiveStartDate.toDate(), effectiveEndDate.toDate());
        assertTrue(result);
    }

}
