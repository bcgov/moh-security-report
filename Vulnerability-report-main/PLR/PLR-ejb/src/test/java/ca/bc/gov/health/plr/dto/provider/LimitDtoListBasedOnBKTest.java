/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.dto.provider;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Test;
import org.junit.Before;
import org.junit.BeforeClass;
import static org.junit.Assert.*;

/**
 *
 * @author jonathan.wiebe
 */
public class LimitDtoListBasedOnBKTest {
    
    public SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

    public LimitDtoListBasedOnBKTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    @Test
    public void testLimitDtoListBasedOnTypeAndDataOwnerBK() throws Exception {

        List<AbstractProviderDetail> dtoList = new ArrayList<>();
        RegistryIdentifierDto dto = new RegistryIdentifierDto();
        dto.setTypeCode("typeA");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("AAA");
        dtoList.add(dto);
        dto = new RegistryIdentifierDto();
        dto.setTypeCode("typeA");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("BBB");
        dtoList.add(dto);
        dto = new RegistryIdentifierDto();
        dto.setTypeCode("typeA");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("CCC");
        dtoList.add(dto);
        
        List<AbstractProviderDetail> rtList = AbstractProviderDetail.limitDtoListBasedOnTypeAndDataOwnerBK(null, 2);
        assertNull(rtList);
        
        rtList = AbstractProviderDetail.limitDtoListBasedOnTypeAndDataOwnerBK(dtoList, 2);
        assertEquals(rtList.size(), 2);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");

        dto = new RegistryIdentifierDto();
        dto.setTypeCode("typeB");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("DDD");
        dtoList.add(dto);
        
        rtList = AbstractProviderDetail.limitDtoListBasedOnTypeAndDataOwnerBK(dtoList, 2);
        assertEquals(rtList.size(), 3);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");
        assertEquals(rtList.get(2).getEndReasonCode(), "DDD");

        dto = new RegistryIdentifierDto();
        dto.setTypeCode("typeB");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("EEE");
        dtoList.add(dto);

        dto = new RegistryIdentifierDto();
        dto.setTypeCode("typeB");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("FFF");
        dtoList.add(dto);

        rtList = AbstractProviderDetail.limitDtoListBasedOnTypeAndDataOwnerBK(dtoList, 2);
        assertEquals(rtList.size(), 4);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");
        assertEquals(rtList.get(2).getEndReasonCode(), "DDD");
        assertEquals(rtList.get(3).getEndReasonCode(), "EEE");
        
    }

    @Test
    public void testNoteDtoLimitDtoListBasedOnBK() throws Exception {
        
        List<NoteDto> dtoList = new ArrayList<>();
        NoteDto dto = new NoteDto();
        dto.setIdentifier("identifierA");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("AAA");
        dtoList.add(dto);
        dto = new NoteDto();
        dto.setIdentifier("identifierA");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("BBB");
        dtoList.add(dto);
        dto = new NoteDto();
        dto.setIdentifier("identifierA");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("CCC");
        dtoList.add(dto);
        
        List<NoteDto> rtList = NoteDto.limitDtoListBasedOnBK(null, 2);
        assertNull(rtList);
        
        rtList = NoteDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 2);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");

        dto = new NoteDto();
        dto.setIdentifier("identifierB");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("DDD");
        dtoList.add(dto);
        
        rtList = NoteDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 3);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");
        assertEquals(rtList.get(2).getEndReasonCode(), "DDD");

        dto = new NoteDto();
        dto.setIdentifier("identifierB");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("EEE");
        dtoList.add(dto);

        dto = new NoteDto();
        dto.setIdentifier("identifierB");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("FFF");
        dtoList.add(dto);

        rtList = NoteDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 4);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");
        assertEquals(rtList.get(2).getEndReasonCode(), "DDD");
        assertEquals(rtList.get(3).getEndReasonCode(), "EEE");        
        
    }
    
    @Test
    public void testDisciplinaryActionDtoLimitDtoListBasedOnBK() throws Exception {
        
        List<DisciplinaryActionDto> dtoList = new ArrayList<>();
        DisciplinaryActionDto dto = new DisciplinaryActionDto();
        dto.setIdentifier("identifierA");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("AAA");
        dtoList.add(dto);
        dto = new DisciplinaryActionDto();
        dto.setIdentifier("identifierA");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("BBB");
        dtoList.add(dto);
        dto = new DisciplinaryActionDto();
        dto.setIdentifier("identifierA");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("CCC");
        dtoList.add(dto);
        
        List<DisciplinaryActionDto> rtList = DisciplinaryActionDto.limitDtoListBasedOnBK(null, 2);
        assertNull(rtList);
        
        rtList = DisciplinaryActionDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 2);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");

        dto = new DisciplinaryActionDto();
        dto.setIdentifier("identifierB");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("DDD");
        dtoList.add(dto);
        
        rtList = DisciplinaryActionDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 3);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");
        assertEquals(rtList.get(2).getEndReasonCode(), "DDD");

        dto = new DisciplinaryActionDto();
        dto.setIdentifier("identifierB");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("EEE");
        dtoList.add(dto);

        dto = new DisciplinaryActionDto();
        dto.setIdentifier("identifierB");
        dto.setDataOwnerCode("MOH");
        dto.setEndReasonCode("FFF");
        dtoList.add(dto);

        rtList = DisciplinaryActionDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 4);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");
        assertEquals(rtList.get(2).getEndReasonCode(), "DDD");
        assertEquals(rtList.get(3).getEndReasonCode(), "EEE");        
        
    }
    
    @Test
    public void testInformationRouteDtoLimitDtoListBasedOnBK() throws Exception {
        
        AddressDto addDto = new AddressDto();
        addDto.setTypeCode("addA");

        List<InformationRouteDto> dtoList = new ArrayList<>();
        InformationRouteDto dto = new InformationRouteDto();
        dto.setDocumentTypeCode("docA");
        dto.setAddressDto(addDto);
        dto.setCommunicationPurpose("AAA");
        dto.setDataOwnerCode("AAA");
        dto.setWorkLocationDataOwnerCode(null);
        dto.setWorkLocationIdentifier(Long.parseLong("123"));
        dto.setEndReasonCode("AAA");
        dtoList.add(dto);

        dto = new InformationRouteDto();
        dto.setDocumentTypeCode("docA");
        dto.setAddressDto(addDto);
        dto.setCommunicationPurpose("AAA");
        dto.setDataOwnerCode("AAA");
        dto.setWorkLocationDataOwnerCode(null);
        dto.setWorkLocationIdentifier(Long.parseLong("123"));
        dto.setEndReasonCode("BBB");
        dtoList.add(dto);
        
        dto = new InformationRouteDto();
        dto.setDocumentTypeCode("docA");
        dto.setAddressDto(addDto);
        dto.setCommunicationPurpose("AAA");
        dto.setDataOwnerCode("AAA");
        dto.setWorkLocationDataOwnerCode(null);
        dto.setWorkLocationIdentifier(Long.parseLong("123"));
        dto.setEndReasonCode("CCC");
        dtoList.add(dto);
        
        List<InformationRouteDto> rtList = InformationRouteDto.limitDtoListBasedOnBK(null, 2);
        assertNull(rtList);
        
        rtList = InformationRouteDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 2);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");

        dto = new InformationRouteDto();
        dto.setDocumentTypeCode("docB");
        dto.setAddressDto(addDto);
        dto.setCommunicationPurpose("AAA");
        dto.setDataOwnerCode("AAA");
        dto.setWorkLocationDataOwnerCode(null);
        dto.setWorkLocationIdentifier(Long.parseLong("123"));
        dto.setEndReasonCode("DDD");
        dtoList.add(dto);
        
        rtList = InformationRouteDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 3);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");
        assertEquals(rtList.get(2).getEndReasonCode(), "DDD");

        dto = new InformationRouteDto();
        dto.setDocumentTypeCode("docB");
        dto.setAddressDto(addDto);
        dto.setCommunicationPurpose("AAA");
        dto.setDataOwnerCode("AAA");
        dto.setWorkLocationDataOwnerCode(null);
        dto.setWorkLocationIdentifier(Long.parseLong("123"));
        dto.setEndReasonCode("EEE");
        dtoList.add(dto);

        dto = new InformationRouteDto();
        dto.setDocumentTypeCode("docB");
        dto.setAddressDto(addDto);
        dto.setCommunicationPurpose("AAA");
        dto.setDataOwnerCode("AAA");
        dto.setWorkLocationDataOwnerCode(null);
        dto.setWorkLocationIdentifier(Long.parseLong("123"));
        dto.setEndReasonCode("FFF");
        dtoList.add(dto);

        rtList = InformationRouteDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 4);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");
        assertEquals(rtList.get(2).getEndReasonCode(), "DDD");
        assertEquals(rtList.get(3).getEndReasonCode(), "EEE");        
        
    }
    
    @Test
    public void testLocationDtoLimitDtoListBasedOnBK() throws Exception {

        List<AddressDto> dtoList = new ArrayList<>();
        AddressDto dto = new AddressDto();
        dto.setTypeCode("typeA");
        dto.setDataOwnerCode("MOH");
        dto.setCommunicationPurposeCode("Courier");
        dto.setEndReasonCode("AAA");
        dtoList.add(dto);
        dto = new AddressDto();
        dto.setTypeCode("typeA");
        dto.setDataOwnerCode("MOH");
        dto.setCommunicationPurposeCode("Courier");
        dto.setEndReasonCode("BBB");
        dtoList.add(dto);
        dto = new AddressDto();
        dto.setTypeCode("typeA");
        dto.setDataOwnerCode("MOH");
        dto.setCommunicationPurposeCode("Courier");
        dto.setEndReasonCode("CCC");
        dtoList.add(dto);
        
        List<AddressDto> rtList = LocationDto.limitDtoListBasedOnBK(null, 2);
        assertNull(rtList);
        
        rtList = LocationDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 2);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");

        dto = new AddressDto();
        dto.setTypeCode("typeB");
        dto.setDataOwnerCode("MOH");
        dto.setCommunicationPurposeCode("Courier");
        dto.setEndReasonCode("DDD");
        dtoList.add(dto);
        
        rtList = LocationDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 3);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");
        assertEquals(rtList.get(2).getEndReasonCode(), "DDD");

        dto = new AddressDto();
        dto.setTypeCode("typeB");
        dto.setDataOwnerCode("MOH");
        dto.setCommunicationPurposeCode("Courier");
        dto.setEndReasonCode("EEE");
        dtoList.add(dto);

        dto = new AddressDto();
        dto.setTypeCode("typeB");
        dto.setDataOwnerCode("MOH");
        dto.setCommunicationPurposeCode("Courier");
        dto.setEndReasonCode("FFF");
        dtoList.add(dto);

        rtList = LocationDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 4);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");
        assertEquals(rtList.get(2).getEndReasonCode(), "DDD");
        assertEquals(rtList.get(3).getEndReasonCode(), "EEE");
        
    }
    
    @Test
    public void testProviderRelationshipDtoListBasedOnBK() throws Exception {

        List<ProviderRelationshipDto> dtoList = new ArrayList<>();
        ProviderRelationshipDto dto = new ProviderRelationshipDto();
        dto.setTypeCode("typeA");
        dto.setDataOwnerCode("MOH");
        dto.setTargetRelationshipTypeCode("Employer");
        dto.setIdentifier("idA");
        dto.setEndReasonCode("AAA");
        dtoList.add(dto);
        dto = new ProviderRelationshipDto();
        dto.setTypeCode("typeA");
        dto.setDataOwnerCode("MOH");
        dto.setTargetRelationshipTypeCode("Employer");
        dto.setIdentifier("idA");
        dto.setEndReasonCode("BBB");
        dtoList.add(dto);
        dto = new ProviderRelationshipDto();
        dto.setTypeCode("typeA");
        dto.setDataOwnerCode("MOH");
        dto.setTargetRelationshipTypeCode("Employer");
        dto.setIdentifier("idA");
        dto.setEndReasonCode("CCC");
        dtoList.add(dto);
        
        List<ProviderRelationshipDto> rtList = ProviderRelationshipDto.limitDtoListBasedOnBK(null, 2);
        assertNull(rtList);
        
        rtList = ProviderRelationshipDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 2);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");

        dto = new ProviderRelationshipDto();
        dto.setTypeCode("typeB");
        dto.setDataOwnerCode("MOH");
        dto.setTargetRelationshipTypeCode("Employer");
        dto.setIdentifier("idA");
        dto.setEndReasonCode("DDD");
        dtoList.add(dto);
        
        rtList = ProviderRelationshipDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 3);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");
        assertEquals(rtList.get(2).getEndReasonCode(), "DDD");

        dto = new ProviderRelationshipDto();
        dto.setTypeCode("typeB");
        dto.setDataOwnerCode("MOH");
        dto.setTargetRelationshipTypeCode("Employer");
        dto.setIdentifier("idA");
        dto.setEndReasonCode("EEE");
        dtoList.add(dto);

        dto = new ProviderRelationshipDto();
        dto.setTypeCode("typeB");
        dto.setDataOwnerCode("MOH");
        dto.setTargetRelationshipTypeCode("Employer");
        dto.setIdentifier("idA");
        dto.setEndReasonCode("FFF");
        dtoList.add(dto);

        rtList = ProviderRelationshipDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 4);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");
        assertEquals(rtList.get(2).getEndReasonCode(), "DDD");
        assertEquals(rtList.get(3).getEndReasonCode(), "EEE");
        
    }
    
    @Test
    public void testRegistryUserRelationshipDtoListBasedOnBK() throws Exception {

        List<RegistryUserRelationshipDto> dtoList = new ArrayList<>();
        RegistryUserRelationshipDto dto = new RegistryUserRelationshipDto();
        dto.setTypeCode("typeA");
        dto.setDataOwnerCode("MOH");
        dto.setRegistryUserChid("chidA");
        dto.setEndReasonCode("AAA");
        dtoList.add(dto);
        dto = new RegistryUserRelationshipDto();
        dto.setTypeCode("typeA");
        dto.setDataOwnerCode("MOH");
        dto.setRegistryUserChid("chidA");
        dto.setEndReasonCode("BBB");
        dtoList.add(dto);
        dto = new RegistryUserRelationshipDto();
        dto.setTypeCode("typeA");
        dto.setDataOwnerCode("MOH");
        dto.setRegistryUserChid("chidA");
        dto.setEndReasonCode("CCC");
        dtoList.add(dto);
        
        List<RegistryUserRelationshipDto> rtList = RegistryUserRelationshipDto.limitDtoListBasedOnBK(null, 2);
        assertNull(rtList);
        
        rtList = RegistryUserRelationshipDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 2);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");

        dto = new RegistryUserRelationshipDto();
        dto.setTypeCode("typeB");
        dto.setDataOwnerCode("MOH");
        dto.setRegistryUserChid("chidA");
        dto.setEndReasonCode("DDD");
        dtoList.add(dto);
        
        rtList = RegistryUserRelationshipDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 3);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");
        assertEquals(rtList.get(2).getEndReasonCode(), "DDD");

        dto = new RegistryUserRelationshipDto();
        dto.setTypeCode("typeB");
        dto.setDataOwnerCode("MOH");
        dto.setRegistryUserChid("chidA");
        dto.setEndReasonCode("EEE");
        dtoList.add(dto);

        dto = new RegistryUserRelationshipDto();
        dto.setTypeCode("typeB");
        dto.setDataOwnerCode("MOH");
        dto.setRegistryUserChid("chidA");
        dto.setEndReasonCode("FFF");
        dtoList.add(dto);

        rtList = RegistryUserRelationshipDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 4);
        assertEquals(rtList.get(0).getEndReasonCode(), "AAA");
        assertEquals(rtList.get(1).getEndReasonCode(), "BBB");
        assertEquals(rtList.get(2).getEndReasonCode(), "DDD");
        assertEquals(rtList.get(3).getEndReasonCode(), "EEE");
        
    }
    
    @Test
    public void testWorkLocationDtoListBasedOnBK() throws Exception {

        List<WorkLocationDto> dtoList = new ArrayList<>();
        WorkLocationDto dto = new WorkLocationDto();
        dto.setIdentifier(Long.parseLong("111"));
        dto.setDataOwnerCode("MOH");
        dto.setOwnerNameTxt("AAA");
        dtoList.add(dto);
        dto = new WorkLocationDto();
        dto.setIdentifier(Long.parseLong("111"));
        dto.setDataOwnerCode("MOH");
        dto.setOwnerNameTxt("BBB");
        dtoList.add(dto);
        dto = new WorkLocationDto();
        dto.setIdentifier(Long.parseLong("111"));
        dto.setDataOwnerCode("MOH");
        dto.setOwnerNameTxt("CCC");
        dtoList.add(dto);
        
        List<WorkLocationDto> rtList = WorkLocationDto.limitDtoListBasedOnBK(null, 2);
        assertNull(rtList);
        
        rtList = WorkLocationDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 2);
        assertEquals(rtList.get(0).getOwnerNameTxt(), "AAA");
        assertEquals(rtList.get(1).getOwnerNameTxt(), "BBB");

        dto = new WorkLocationDto();
        dto.setIdentifier(Long.parseLong("111"));
        dto.setDataOwnerCode("NHA");
        dto.setOwnerNameTxt("DDD");
        dtoList.add(dto);
        
        rtList = WorkLocationDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 3);
        assertEquals(rtList.get(0).getOwnerNameTxt(), "AAA");
        assertEquals(rtList.get(1).getOwnerNameTxt(), "BBB");
        assertEquals(rtList.get(2).getOwnerNameTxt(), "DDD");

        dto = new WorkLocationDto();
        dto.setIdentifier(Long.parseLong("111"));
        dto.setDataOwnerCode("NHA");
        dto.setOwnerNameTxt("EEE");
        dtoList.add(dto);

        dto = new WorkLocationDto();
        dto.setIdentifier(Long.parseLong("111"));
        dto.setDataOwnerCode("NHA");
        dto.setOwnerNameTxt("FFF");
        dtoList.add(dto);

        rtList = WorkLocationDto.limitDtoListBasedOnBK(dtoList, 2);
        assertEquals(rtList.size(), 4);
        assertEquals(rtList.get(0).getOwnerNameTxt(), "AAA");
        assertEquals(rtList.get(1).getOwnerNameTxt(), "BBB");
        assertEquals(rtList.get(2).getOwnerNameTxt(), "DDD");
        assertEquals(rtList.get(3).getOwnerNameTxt(), "EEE");
        
    }

}
