package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsElectronicAddresses;
import ca.bc.gov.health.plr.ejb.entity.PrsInformationRoutes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.provider.ProviderTestDataBuilder;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.codesDao;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.entityManagerProxy;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainElectronicAddressService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainInformationRouteService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import org.junit.After;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import org.junit.Test;

/**
 * Test class for the maintain electronic address service
 *
 * @author greg.perkins
 */
public class MaintainElectronicAddressServiceTest extends IntegrationSetup {
    
    private static final long PAUTH_ID = 3313l;

    @After
    public void tearDown() {
        List<Exception> exceptions = new ArrayList<>();

        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        for (PrsInformationRoutes route : provider.getPrsInformationRoutesList()) {
            try {
                entityManagerProxy.remove(route);
            } catch (Exception e) {
                e.printStackTrace();
                exceptions.add(e);
            }
        }
        for (GrsElectronicAddresses eAddress : provider.getGrsElectronicAddressesList()) {
            try {
                entityManagerProxy.remove(eAddress);
            } catch (Exception e) {
                e.printStackTrace();
                exceptions.add(e);
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }


    @Test
    public void testAddElectronicAddress() throws BusinessRuleException, EntityValidationException {
        ElectronicAddressDto newAddr = ProviderTestDataBuilder.getElectronicAddress();
        newAddr.setPauthId(PAUTH_ID);

        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, newAddr.getPauthId());
        List<GrsElectronicAddresses> originalAddresses = provider.getGrsElectronicAddressesList();

        List<Long> originalIds = new ArrayList<>();
        for (GrsElectronicAddresses originalAddresse : originalAddresses) {
            originalIds.add(originalAddresse.getEaddrId());
        }
        ElectronicAddressDto result = null;
        try {
            result = maintainElectronicAddressService.save(newAddr);
        } catch (DuplicateRecordException dre) {
            assertEquals("", dre.getMessage());
        }
        assertNotNull(result);
        List<ElectronicAddressDto> allForProvider = maintainElectronicAddressService.refreshAllEAddresses(newAddr);
        assertEquals(allForProvider.size(), provider.getGrsElectronicAddressesList().size() + 1);

        for (ElectronicAddressDto address : allForProvider) {
            if (!originalIds.contains(address.getId())) {
                entityManagerProxy.remove(entityManagerProxy.find(GrsElectronicAddresses.class, address.getId()));
            }
        }

    }
    
    @Test
    public void testCeaseProviderElectronicAddress() throws BusinessRuleException, DuplicateRecordException, EntityValidationException {
        
        ElectronicAddressDto eleAddrDto = ProviderTestDataBuilder.getElectronicAddress();
        eleAddrDto.setPauthId(PAUTH_ID);
        ElectronicAddressDto savedEleAddrDto= maintainElectronicAddressService.save(eleAddrDto);

        InformationRouteDto newInfoRoute = ProviderTestDataBuilder.getInformationRoute();
        newInfoRoute.setPauthId(PAUTH_ID);
        newInfoRoute.setDocumentTypeCode(CodeTableCodes.GrsCtDocumentTypes.EGG.getValue());
        newInfoRoute.setMechanismTypeCode(CodeTableCodes.GrsCtMechanisms.FILE_TRANSFER__TEST_CODE.getValue());
        newInfoRoute.setElectronicAddressDto(savedEleAddrDto);
        InformationRouteDto savedInfoRouteDto = maintainInformationRouteService.save(newInfoRoute);
        
        GrsCtEndReasonTypes ceaseEndReasonTypes = codesDao.lookup(GrsCtEndReasonTypes.class, CodeTableCodes.GrsCtEndReasonTypes.CEASE);
        savedEleAddrDto.setEndReasonCodeId(ceaseEndReasonTypes.getCtlId());
        boolean caughtBusinessRuleException = false;
        ProviderDto providerDto = providerDtoConverter.toProviderDetails(entityManagerProxy.find(PrsProviders.class, PAUTH_ID), false);
        try {
            ElectronicAddressDto ceasedEleAddrDto = (ElectronicAddressDto)maintainProviderServiceHelper.processLocation(savedEleAddrDto, providerDto, maintainElectronicAddressService);
//                    maintainElectronicAddressService.save(savedEleAddrDto);
        } catch(EntityValidationException bre) {
            caughtBusinessRuleException = true;
            assertTrue(bre.getMessage().matches(".*PRS.SYS.ELE.UNK.1.0.7039.*"));
        }
        assertTrue(caughtBusinessRuleException);
        
    }
    
    /**
     * Test to ensure adding a duplicate record throws an exception
     * @throws DuplicateRecordException
     * @throws BusinessRuleException 
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException 
     */
    @Test
    public void testAddDuplicate() throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        ElectronicAddressDto newAddr = ProviderTestDataBuilder.getElectronicAddress();
        newAddr.setPauthId(PAUTH_ID);
        maintainElectronicAddressService.save(newAddr);

        newAddr = ProviderTestDataBuilder.getElectronicAddress();
        newAddr.setPauthId(PAUTH_ID);
        boolean exceptionThrown = false;
        try {
            maintainElectronicAddressService.save(newAddr);
        } catch (DuplicateRecordException dre) {
            exceptionThrown = true;
        }
        assertTrue(exceptionThrown);
    }

    /**
     * Test to validate only valid communication purpose codes can be used
     * @throws DuplicateRecordException 
     */
    @Test
    public void testInvalidCommunicationPurpose() throws DuplicateRecordException {
        ElectronicAddressDto newAddr = ProviderTestDataBuilder.getElectronicAddress();
        newAddr.setPauthId(12l);
        newAddr.setCommunicationPurposeId(-1l);

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<ElectronicAddressDto>> violations = validator.validate(newAddr);
        assertTrue(violations.size()==1);
    }
    
    /**
     * Test to ensure only valid types are used
     * @throws DuplicateRecordException 
     */
    @Test
    public void testInvalidType() throws DuplicateRecordException {
        ElectronicAddressDto newAddr = ProviderTestDataBuilder.getElectronicAddress();
        newAddr.setPauthId(12l);
        newAddr.setTypeId(-1l);

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<ElectronicAddressDto>> violations = validator.validate(newAddr);
        assertTrue(violations.size()==1);
    }  
    
    /**
     * Test to ensure email is checked when appropriate
     * @throws DuplicateRecordException 
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException 
     */
    @Test
    public void testInvalidEmail() throws DuplicateRecordException, EntityValidationException {
        ElectronicAddressDto newAddr = ProviderTestDataBuilder.getElectronicAddress();
        newAddr.setPauthId(12l);
        newAddr.setTypeId(2049l);
        newAddr.setAddress("not an email");
        boolean exceptionThrown = false;
        try {
            maintainElectronicAddressService.save(newAddr);
        } catch (BusinessRuleException bre) {
            exceptionThrown = true;
        }
        assertTrue(exceptionThrown);
    }     
    
    /**
     * Test to ensure max length is checked
     * @throws DuplicateRecordException 
     */
    @Test
    public void testInvalidAddressSize() throws DuplicateRecordException {
        ElectronicAddressDto newAddr = ProviderTestDataBuilder.getElectronicAddress();
        newAddr.setPauthId(12l);
        String fiveHundredAndOne = new String(new char[501]).replace('\0', 'a');
        newAddr.setAddress(fiveHundredAndOne);

        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<ElectronicAddressDto>> violations = validator.validate(newAddr);
        assertTrue(violations.size()==1);
        
        String fiveHundred =  new String(new char[500]).replace('\0', 'a');
        newAddr.setAddress(fiveHundred);

        violations = validator.validate(newAddr);
        assertTrue(violations.isEmpty());        
        
    }     
}
