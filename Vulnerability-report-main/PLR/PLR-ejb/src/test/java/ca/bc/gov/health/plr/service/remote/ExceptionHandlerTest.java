/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.remote;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.EsbResponse;
import ca.bc.gov.health.plr.dto.esb.QueryResponse;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.BusinessRuleMessage;
import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import ca.bc.gov.health.plr.util.MessageCodeHelper;
import java.lang.reflect.Method;
import java.util.ArrayList;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;
import org.mockito.Mockito;
import static org.mockito.Mockito.spy;

/**
 *
 * @author adebiyi.kuseju
 */
public class ExceptionHandlerTest {
    
    public ExceptionHandlerTest() {
    }

    /**
     * Test of createAcknowledgement method, of class ExceptionHandler.
     */
    @Test
    public void testCreateAcknowledgement_String() {
        
        String errorMessage = "GRS.SYS.UNK.UNK.1.0.5003: Error message";
        
        Acknowledgment result = ExceptionHandler.createAcknowledgement(errorMessage);
        assertEquals("GRS.SYS.UNK.UNK.1.0.5003", result.getMsgCode());
        assertEquals("Error message", result.getMsgText());
    }

    /**
     * Test of createAcknowledgement method, of class ExceptionHandler.
     */
    @Test
    public void testCreateAcknowledgement_String_error_code_no_match() {
        
        String errorMessage = "code.1.2: Error message";
        
        Acknowledgment result = ExceptionHandler.createAcknowledgement(errorMessage);
        assertTrue(result.getMsgCode().equals("code.1.2"));
        assertEquals("code.1.2: Error message", result.getMsgText());
    }

    /**
     * Test of createAcknowledgement method, of class ExceptionHandler.
     */
    @Test
    public void testCreateAcknowledgement_String_no_code() {
        
        String errorMessage = "Error message";
        
        Acknowledgment result = ExceptionHandler.createAcknowledgement(errorMessage);
        assertTrue(result.getMsgCode().equals(MessageCodeHelper.NO_ERROR_CODE));
        assertEquals("Error message", result.getMsgText());
    }

    /**
     * Test of splitCodeAndMessage method, of class ExceptionHandler.
     */
    @Test
    public void testSplitCodeAndMessage() {
        
        String errorMessage = "GRS.SYS.UNK.UNK.1.0.5003: Error message";
        String[] expResult = {"GRS.SYS.UNK.UNK.1.0.5003", "Error message"};
        String[] result = MessageCodeHelper.splitCodeAndMessage(errorMessage);
        assertArrayEquals(expResult, result);
        
    }

    /**
     * Test of splitCodeAndMessage method, of class ExceptionHandler.
     */
    @Test
    public void testSplitCodeAndMessage_error_code_no_match() {
        
        String errorMessage = "code.1.2: Error message";
        String[] result = MessageCodeHelper.splitCodeAndMessage(errorMessage);
        assertTrue(result[0].equals("code.1.2"));
        assertTrue(result[1].equals("code.1.2: Error message"));
    }

    /**
     * Test of splitCodeAndMessage method, of class ExceptionHandler.
     */
    @Test
    public void testSplitCodeAndMessage_no_code() {
        
        String errorMessage = "Error message";
        String[] expResult = {null, "Error message"};
        String[] result = MessageCodeHelper.splitCodeAndMessage(errorMessage);
        assertTrue(result[0].equals(MessageCodeHelper.NO_ERROR_CODE));
        assertTrue(result[1].equals("Error message"));
    }
    
    @Test
    public void testBusinessRuleException_withList() {
        BusinessRuleException brExp = makeBRR_AllValid();
        
        QueryResponse qResponse = new QueryResponse();
        ExceptionHandler.handleException(qResponse, brExp);
        
        // with no invalid rules, not acknowledgements
        assertTrue(qResponse.getAcknowledgments().isEmpty());
        
        qResponse.getAcknowledgments().clear();
        brExp = makeBRR_OneInValid();
        ExceptionHandler.handleException(qResponse, brExp);

        // with one invalid rules, one acknowledgements
        assertTrue(qResponse.getAcknowledgments().size() == 1);
        assertTrue(qResponse.getAcknowledgments().get(0).getMsgCode().equals("code1"));
        assertTrue(qResponse.getAcknowledgments().get(0).getMsgText().equals("message1"));

        qResponse.getAcknowledgments().clear();
        brExp = makeBRR_OneInValid2();
        ExceptionHandler.handleException(qResponse, brExp);

        // with one invalid rules, one acknowledgements
        assertTrue(qResponse.getAcknowledgments().size() == 1);
        assertTrue(qResponse.getAcknowledgments().get(0).getMsgCode().equals("code2"));
        assertTrue(qResponse.getAcknowledgments().get(0).getMsgText().equals("message2"));

    }

    private BusinessRuleException makeBRR_AllValid() {
        BusinessRuleException brExp = new BusinessRuleException(new ArrayList<BusinessRuleResult>() {
            {
                add(new BusinessRuleResult() {
                    {
                        getMessages().add(new BusinessRuleMessage("code1","message1",BusinessRuleMessage.Severity.ERROR));
                    }
                });
                add(new BusinessRuleResult() {
                    {
                        getMessages().add(new BusinessRuleMessage("code2","message2",BusinessRuleMessage.Severity.ERROR));
                    }
                });
            }
        });
        return brExp;
    }
    
    private BusinessRuleException makeBRR_OneInValid() {
        BusinessRuleException brExp = new BusinessRuleException(new ArrayList<BusinessRuleResult>() {
            {
                add(new BusinessRuleResult(false,null) {
                    {
                        getMessages().add(new BusinessRuleMessage("code1","message1",BusinessRuleMessage.Severity.ERROR));
                    }
                });
                add(new BusinessRuleResult() {
                    {
                        getMessages().add(new BusinessRuleMessage("code2","message2",BusinessRuleMessage.Severity.ERROR));
                    }
                });
            }
        });
        return brExp;
    }
    
    private BusinessRuleException makeBRR_OneInValid2() {
        BusinessRuleException brExp = new BusinessRuleException(new ArrayList<BusinessRuleResult>() {
            {
                add(new BusinessRuleResult(true,null) {
                    {
                        getMessages().add(new BusinessRuleMessage("code1","message1",BusinessRuleMessage.Severity.ERROR));
                    }
                });
                add(new BusinessRuleResult(false,null) {
                    {
                        getMessages().add(new BusinessRuleMessage("code2","message2",BusinessRuleMessage.Severity.ERROR));
                    }
                });
            }
        });
        return brExp;
    }
    
}
