/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.provider.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsElectronicAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsTelephones;
import ca.bc.gov.health.plr.ejb.entity.PrsInformationRoutes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocations;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.provider.ProviderTestDataBuilder;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.codesDao;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.entityManagerProxy;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainAddressService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainInformationRouteService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainProviderServiceHelper;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainTelephoneService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.providerDtoConverter;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.ArrayList;
import java.util.List;
import org.junit.After;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import org.junit.Test;

/**
 *
 * @author ian.scott
 */
public class MaintainTelephoneServiceTest extends IntegrationSetup {

    private static final long PAUTH_ID = 3313l;

    @After
    public void tearDown() {
        List<Exception> exceptions = new ArrayList<>();

        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        for (PrsInformationRoutes route : provider.getPrsInformationRoutesList()) {
            try {
                entityManagerProxy.remove(route);
            } catch (Exception e) {
                e.printStackTrace();
                exceptions.add(e);
            }
        }
        for (GrsTelephones telecomm : provider.getGrsTelephonesList()) {
            try {
                entityManagerProxy.remove(telecomm);
            } catch (Exception e) {
                e.printStackTrace();
                exceptions.add(e);
            }
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }

    /**
     * Test of save method .
     */
    @Test
    public void testAddTelephoneWithPauth() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {

        TelecommunicationDto newEntity = ProviderTestDataBuilder.getTelecommunication();
        newEntity.setPauthId(276l);

        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, newEntity.getPauthId());
        List<GrsTelephones> originalEntityList = provider.getGrsTelephonesList();
        int originalEntityListSize = originalEntityList.size();
        List<Long> originalIds = new ArrayList<>();
        for (GrsTelephones originalEntity : originalEntityList) {
            originalIds.add(originalEntity.getPhonId());
        }

        TelecommunicationDto result = maintainTelephoneService.save(newEntity);

        assertNotNull(result);

        provider = entityManagerProxy.find(PrsProviders.class, newEntity.getPauthId());
        assertEquals(originalEntityListSize + 1, provider.getGrsTelephonesList().size());

        entityManagerProxy.remove(entityManagerProxy.find(GrsTelephones.class, result.getId()));
    }

    /**
     * Test of save method .
     */
    @Test
    public void testAddTelephoneWithWL() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {

        TelecommunicationDto newEntity = ProviderTestDataBuilder.getTelecommunication();
        newEntity.setWlWlId(67l);
        newEntity.setPauthId(276l);

        PrsWorkLocations provider = entityManagerProxy.find(PrsWorkLocations.class, newEntity.getWlWlId());
        List<GrsTelephones> originalEntityList = provider.getGrsTelephonesList();
        int originalEntityListSize = originalEntityList.size();

        TelecommunicationDto result = maintainTelephoneService.save(newEntity);

        assertNotNull(result);

        provider = entityManagerProxy.find(PrsWorkLocations.class, newEntity.getWlWlId());
        assertEquals(originalEntityListSize + 1, provider.getGrsTelephonesList().size());

        entityManagerProxy.remove(entityManagerProxy.find(GrsTelephones.class, result.getId()));
    }

    /**
     * Test that the duplicate record exception is thrown as expected
     */
    @Test
    public void testDuplicateException() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {
        TelecommunicationDto newEntity = ProviderTestDataBuilder.getTelecommunication();
        newEntity.setPauthId(276l);
        TelecommunicationDto result = maintainTelephoneService.save(newEntity);
        boolean exceptionThrown = false;
        try {
            //Should fail as a duplicate
            maintainTelephoneService.save(newEntity);
        } catch (DuplicateRecordException dre) {
            exceptionThrown = true;
        } finally {
            entityManagerProxy.remove(entityManagerProxy.find(GrsTelephones.class, result.getId()));
        }
        assertTrue(exceptionThrown);
    }

    /**
     * Test that the duplicate record exception is thrown as expected
     */
    @Test
    public void testDuplicateForRegUserException() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {
        TelecommunicationDto newEntity = ProviderTestDataBuilder.getTelecommunication();
        newEntity.setRuRuId(6l);
        newEntity.setPauthId(276l);
        TelecommunicationDto result = maintainTelephoneService.save(newEntity);
        boolean exceptionThrown = false;
        try {
            //Should fail as a duplicate
            maintainTelephoneService.save(newEntity);
        } catch (DuplicateRecordException dre) {
            exceptionThrown = true;
        } finally {
            entityManagerProxy.remove(entityManagerProxy.find(GrsTelephones.class, result.getId()));
        }
        assertTrue(exceptionThrown);
    }

    @Test
    public void testCeaseProviderTelecomm() throws BusinessRuleException, DuplicateRecordException, EntityValidationException {

        //create new telecomm
        TelecommunicationDto teleDto = ProviderTestDataBuilder.getTelecommunication();
        teleDto.setPauthId(PAUTH_ID);
        TelecommunicationDto savedTeleDto = maintainTelephoneService.save(teleDto);

        //create new information route to use the above telecomm
        InformationRouteDto newInfoRoute = ProviderTestDataBuilder.getInformationRoute();
        newInfoRoute.setPauthId(PAUTH_ID);
        newInfoRoute.setDocumentTypeCode(CodeTableCodes.GrsCtDocumentTypes.EGG.getValue());
        newInfoRoute.setMechanismTypeCode(CodeTableCodes.GrsCtMechanisms.FACSIMILE.getValue());
        newInfoRoute.setTelecommunicationDto(savedTeleDto);
        InformationRouteDto savedInfoRouteDto = maintainInformationRouteService.save(newInfoRoute);

        //cease the stored telecomm
        GrsCtEndReasonTypes ceaseEndReasonTypes = codesDao.lookup(GrsCtEndReasonTypes.class, CodeTableCodes.GrsCtEndReasonTypes.CEASE);
        savedTeleDto.setEndReasonCodeId(ceaseEndReasonTypes.getCtlId());
        boolean caughtBusinessRuleException = false;
        try {
            ProviderDto providerDto = providerDtoConverter.toProviderDetails(entityManagerProxy.find(PrsProviders.class, PAUTH_ID), false);
            maintainProviderServiceHelper.processLocation(savedTeleDto, providerDto, maintainTelephoneService);
        } catch (EntityValidationException bre) {
            caughtBusinessRuleException = true;
            assertTrue(bre.getMessage().matches(".*PRS.SYS.ELE.UNK.1.0.7039.*"));
        }
        assertTrue(caughtBusinessRuleException);

    }

}
