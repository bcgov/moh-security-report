/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service;

import ca.bc.gov.health.plr.persistence.ConfigurationDao;
import java.lang.reflect.Field;
import java.util.ArrayList;
import javax.ejb.embeddable.EJBContainer;
import javax.mail.MessagingException;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Matchers.anyList;
import static org.mockito.Matchers.anyString;
import org.mockito.Mockito;
import static org.mockito.Mockito.doNothing;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *
 * @author jonathan.wiebe
 */
public class AddressDoctorMonitorServiceTest {

    public AddressDoctorMonitorServiceTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    /**
     * Test of setAvailable method, of class AddressDoctorMonitorService.
     */
    @Test
    public void testSetAvailable() throws Exception {
        AddressDoctorMonitorService monitor = new AddressDoctorMonitorService();

        setupEmailServiceMock(monitor);
        setupConfigDaoMock(monitor);
        setupADConnectionMock(monitor);

        monitor.setAvailable(true);
        assertTrue(monitor.isAvailable());

        monitor.setAvailable(false);
        assertTrue(!monitor.isAvailable());

        monitor.setAvailable(true);
        assertTrue(monitor.isAvailable());
    }

    private AddressDoctorConnection setupADConnectionMock(AddressDoctorMonitorService monitor) throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {
        AddressDoctorConnection mockConn = mock(AddressDoctorConnection.class);
        Field connField = AddressDoctorMonitorService.class.getDeclaredField("addressDoctorConnection");
        connField.setAccessible(true);
        connField.set(monitor, mockConn);
        return mockConn;
    }

    private ConfigurationDao setupConfigDaoMock(AddressDoctorMonitorService monitor) throws NoSuchFieldException, IllegalAccessException, IllegalArgumentException, SecurityException {
        ConfigurationDao mockDao = mock(ConfigurationDao.class);
        when(mockDao.getADDownEmailNotificationBody()).thenReturn("foo");
        when(mockDao.getADDownEmailNotificationSubject()).thenReturn("foo");
        when(mockDao.getADEmailNotificationBCCRecipients()).thenReturn(new ArrayList<String>());
        when(mockDao.getADEmailNotificationCCRecipients()).thenReturn(new ArrayList<String>());
        when(mockDao.getADEmailNotificationFrom()).thenReturn("foo");
        when(mockDao.getADEmailNotificationRecipients()).thenReturn(new ArrayList<String>());
        when(mockDao.getADUpEmailNotificationBody()).thenReturn("foo");
        when(mockDao.getADUpEmailNotificationSubject()).thenReturn("foo");
        Field daoField = AddressDoctorMonitorService.class.getDeclaredField("configurationDao");
        daoField.setAccessible(true);
        daoField.set(monitor, mockDao);
        return mockDao;
    }

    private EmailService setupEmailServiceMock(AddressDoctorMonitorService monitor) throws SecurityException, IllegalArgumentException, MessagingException, IllegalAccessException, NoSuchFieldException {
        EmailService mockEmail = mock(EmailService.class);
        doNothing().when(mockEmail).sendMail(anyString(), anyList(), anyList(), anyList(), anyString(), anyString(), anyList());
        Field emailServiceField = AddressDoctorMonitorService.class.getDeclaredField("emailService");
        emailServiceField.setAccessible(true);
        emailServiceField.set(monitor, mockEmail);
        return mockEmail;
    }

    @Test
    public void testMonitor() throws Exception {
        AddressDoctorMonitorService monitor = new AddressDoctorMonitorService();
        
        AddressDoctorConnection mockConn = setupADConnectionMock(monitor);
        this.setupConfigDaoMock(monitor);
        this.setupEmailServiceMock(monitor);
        
        // first AD is availble according to monitor
        // and not available according to connection
        // after check should still be available
        when(mockConn.testAddressDoctorAvailability()).thenReturn(Boolean.FALSE);
        monitor.setAvailable(true);
        assertTrue(monitor.isAvailable());        
        monitor.monitorADServiceOutage();
        assertTrue(monitor.isAvailable());        
        
        // first AD is not availble according to monitor
        // and not available according to connection
        // after check should not be available        
        when(mockConn.testAddressDoctorAvailability()).thenReturn(Boolean.FALSE);
        monitor.setAvailable(false);
        assertTrue(!monitor.isAvailable());        
        monitor.monitorADServiceOutage();
        assertTrue(!monitor.isAvailable());        
        
        // first AD is not availble according to monitor
        // and is available according to connection
        // after check should become available
        when(mockConn.testAddressDoctorAvailability()).thenReturn(Boolean.TRUE);
        monitor.setAvailable(false);
        assertTrue(!monitor.isAvailable());        
        monitor.monitorADServiceOutage();
        assertTrue(monitor.isAvailable());        
        
    }
}
