package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtMechanisms;
import ca.bc.gov.health.plr.ejb.entity.GrsElectronicAddresses;
import ca.bc.gov.health.plr.ejb.entity.PrsInformationRoutes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocationDetails;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocations;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.provider.ProviderTestDataBuilder;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.entityManagerProxy;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainElectronicAddressService;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainWorkLocationService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class MaintainWorkLocationServiceTest extends IntegrationSetup {

    private static final long PAUTH_ID = 3206l;

    @Before
    public void tearDown() {
        List<Exception> exceptions = new ArrayList<>();

        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        try {
            for(PrsInformationRoutes infoRoute : provider.getPrsInformationRoutesList()) {
                entityManagerProxy.remove(infoRoute);
            }
            for (PrsWorkLocations workLocation : provider.getPrsWorkLocationsList()) {
                for(PrsInformationRoutes infoRoute : workLocation.getPrsInformationRoutesList()) {
                    entityManagerProxy.remove(infoRoute);
                }
                for(GrsElectronicAddresses eleAddr : workLocation.getGrsElectronicAddressesList()) {
                    entityManagerProxy.remove(eleAddr);
                }
                entityManagerProxy.remove(workLocation);
            }
        } catch (Exception e) {
                e.printStackTrace();
                exceptions.add(e);
        }
        if (!exceptions.isEmpty()) {
            throw new IllegalStateException("Exceptions occurred while deleting entities. Check log for details.");
        }
    }
    
   @Test
    public void testUpdateWorkLocation() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {
        
        WorkLocationDto newWL = ProviderTestDataBuilder.getWorkLocation();
        newWL.setPauthId(PAUTH_ID);

        maintainWorkLocationService.saveNewWorkLocationAndDetail(newWL, ProviderTestDataBuilder.getWorkLocationDetails());
        Long wlId = maintainWorkLocationService.getWorkLocations(getWlProviderDto()).get(0).getId();
        
        int originalSize = maintainWorkLocationService.getWorkLocationsDetails(wlId).size();
        
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        PrsWorkLocationDetails details = provider.getPrsWorkLocationsList().get(0).getPrsWorkLocationDetailsList().get(0);
        WorkLocationDetailsDto detailsDto = providerDtoConverter.buildWorkLocationDetail(details);
        detailsDto.setName("Some new name");
        detailsDto.setEndReasonCode(CodeTableCodes.GrsCtEndReasonTypes.CHANGE.getValue());
        maintainWorkLocationService.updateWorkLocationDetail(detailsDto);
        
        int newSize = maintainWorkLocationService.getWorkLocationsDetails(wlId).size();
        
        // End Reason Code CHANGE inserts two new records.
        assertEquals(newSize, originalSize + 2);
    }
    
    @Test
    public void testAddWorkLocation() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {

        WorkLocationDto newWL = ProviderTestDataBuilder.getWorkLocation();
        newWL.setPauthId(PAUTH_ID);

        int originalSize = maintainWorkLocationService.getWorkLocations(getWlProviderDto()).size();

        maintainWorkLocationService.saveNewWorkLocationAndDetail(newWL, ProviderTestDataBuilder.getWorkLocationDetails());
        
        int newSize = maintainWorkLocationService.getWorkLocations(getWlProviderDto()).size();
        
        assertEquals(newSize, originalSize + 1);
    }
    
    @Test(expected = DuplicateRecordException.class)
    public void testAddWorkLocation_NonUniqueWlChid_ShouldReject() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {

        WorkLocationDto newWL = ProviderTestDataBuilder.getWorkLocation();
        newWL.setIdentifier(10000001l);
        newWL.setPauthId(PAUTH_ID);

        maintainWorkLocationService.saveNewWorkLocationAndDetail(newWL, ProviderTestDataBuilder.getWorkLocationDetails());
        maintainWorkLocationService.saveNewWorkLocationAndDetail(newWL, ProviderTestDataBuilder.getWorkLocationDetails());
        
    }
    
 
    
    @Test
    public void testWorkLocationChid() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {
        WorkLocationDto newWL = ProviderTestDataBuilder.getWorkLocation();
        newWL.setPauthId(PAUTH_ID);
        
        Long expectedChid = 1234567890l;
        newWL.setIdentifier(expectedChid);

        maintainWorkLocationService.saveNewWorkLocationAndDetail(newWL, ProviderTestDataBuilder.getWorkLocationDetails());
        Long actualChid = maintainWorkLocationService.getWorkLocations(getWlProviderDto()).get(0).getIdentifier();
        assertEquals(expectedChid, actualChid);
    }
    
    @Test
    public void testWorkLocationNull_generated() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {
        WorkLocationDto newWL = ProviderTestDataBuilder.getWorkLocation();
        newWL.setPauthId(PAUTH_ID);
        
        Long expectedChid = null;
        newWL.setIdentifier(expectedChid);

        maintainWorkLocationService.saveNewWorkLocationAndDetail(newWL, ProviderTestDataBuilder.getWorkLocationDetails());
        Long actualChid = maintainWorkLocationService.getWorkLocations(getWlProviderDto()).get(0).getIdentifier();
        assertEquals(1l, (long) actualChid);
    }
    
    @Test(expected = DuplicateRecordException.class)
    public void testWorkLocation_chidDuplicate_reject() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {
        WorkLocationDto newWL = ProviderTestDataBuilder.getWorkLocation();
        newWL.setPauthId(PAUTH_ID);
        
        // A duplicate work location has the same Provider ID, Work Location CHID, and Data Owner Code.
        Long expectedChid = 1234567890l;
        newWL.setIdentifier(expectedChid);
        newWL.setDataOwnerCode("MOH");

        maintainWorkLocationService.saveNewWorkLocationAndDetail(newWL, ProviderTestDataBuilder.getWorkLocationDetails());
        maintainWorkLocationService.saveNewWorkLocationAndDetail(newWL, ProviderTestDataBuilder.getWorkLocationDetails());
    }
    
    @Test
    public void testCeaseWorkBareLocation() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {
        
        //create a new work location for the provider
        WorkLocationDto newWL = ProviderTestDataBuilder.getWorkLocation();
        newWL.setPauthId(PAUTH_ID);
        maintainWorkLocationService.saveNewWorkLocationAndDetail(newWL, ProviderTestDataBuilder.getWorkLocationDetails());
        
        //find providerDto
        ProviderDto newProviderDto = searchProviderService.searchByProviderId(PAUTH_ID);
        
        //find Privider Entity
        PrsProviders newProvider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        
        //find Provider Work Location Details entity
        PrsWorkLocationDetails details = newProvider.getPrsWorkLocationsList().get(0).getPrsWorkLocationDetailsList().get(0);
        
        //build WorkLocationDetailsDto from PrsWorkLocationDetails entity
        WorkLocationDetailsDto detailsDto = providerDtoConverter.buildWorkLocationDetail(details);
        
        //set the end reason code to be CEASE
        GrsCtEndReasonTypes ceaseEndReasonTypes = codesDao.lookup(GrsCtEndReasonTypes.class, CodeTableCodes.GrsCtEndReasonTypes.CEASE);
        detailsDto.setEndReasonCodeId(ceaseEndReasonTypes.getCtlId());
        
        //updat the Work Location Detail
        maintainWorkLocationService.updateWorkLocationDetail(newProviderDto, detailsDto);
        
        //retrieve the cease work location again to verify if the endReason code is CEASED
        PrsProviders updatedProvider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        PrsWorkLocationDetails updatedDetails = updatedProvider.getPrsWorkLocationsList().get(0).getPrsWorkLocationDetailsList().get(0);
        WorkLocationDetailsDto updatedDetailsDto = providerDtoConverter.buildWorkLocationDetail(updatedDetails);
        GrsCtEndReasonTypes ceaseEndReasonType = codesDao.lookup(GrsCtEndReasonTypes.class, CodeTableCodes.GrsCtEndReasonTypes.CEASE);
        assertEquals(updatedDetailsDto.getEndReasonCodeId().longValue(), ceaseEndReasonType.getCtlId().longValue());
        
    }    
    
    @Test
    public void testCeaseWorkLocationHavingEleAddr()  {
        
        //create a new work location for the provider
        WorkLocationDto tmpWl = ProviderTestDataBuilder.getWorkLocation();
        tmpWl.setPauthId(PAUTH_ID);
        WorkLocationDto workLocationDto = null;
        try {
            workLocationDto = maintainWorkLocationService.saveNewWorkLocationAndDetail(tmpWl, ProviderTestDataBuilder.getWorkLocationDetails());
        } catch (DuplicateRecordException | EntityValidationException ex) {
            assertTrue(false);
        }
        
        //find providerDto
        ProviderDto providerDto = searchProviderService.searchByProviderId(PAUTH_ID);
        //find Privider Entity
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        
        //find Provider Work Location Details entity
        PrsWorkLocationDetails wlDetails = provider.getPrsWorkLocationsList().get(0).getPrsWorkLocationDetailsList().get(0);
        //build WorkLocationDetailsDto from PrsWorkLocationDetails entity
        WorkLocationDetailsDto wlDtailsDto = providerDtoConverter.buildWorkLocationDetail(wlDetails);

        //create a electronic address for testing
        ElectronicAddressDto tmpEleAddrDto = ProviderTestDataBuilder.getElectronicAddress();
        tmpEleAddrDto.setWlWlId(workLocationDto.getId());
        ElectronicAddressDto eleAddrDto = null;
        try {
            eleAddrDto = maintainElectronicAddressService.save(tmpEleAddrDto);
        } catch (DuplicateRecordException | BusinessRuleException | EntityValidationException ex) {
            assertTrue(false);
        }

        //create an information route to reference to the above electrnic address
        InformationRouteDto newInfoRoute = new InformationRouteDto();
        newInfoRoute.setPauthId(PAUTH_ID);
        newInfoRoute.setActive(true);
        newInfoRoute.setCreatedDate(new Date());
        newInfoRoute.setDataOwnerCode("MOH");
        newInfoRoute.setEffectiveEndDate(DatabaseConstants.SYSTEM_HIGH_DATE.toDate());
        newInfoRoute.setEffectiveStartDate(DatabaseConstants.SYSTEM_LOW_DATE.toDate());
        newInfoRoute.setEndReasonCode(null);
        newInfoRoute.setGenerationNum(1L);
        newInfoRoute.setInvalidatedDate(null);
        newInfoRoute.setType("Test Type");
        newInfoRoute.setTypeCode("Test Type Code");
        newInfoRoute.setUserChid("Test User Chiid");
        newInfoRoute.setCommunicationPurposeId(1465l);// MC ministry contact
        //GrsCtDocumentTypes documentTypes = codesDao.lookup(GrsCtDocumentTypes.class, CodeTableCodes.GrsCtDocumentTypes.EGG);
        newInfoRoute.setDocumentTypeId(551l);
        newInfoRoute.setDocumentTypeCode(CodeTableCodes.GrsCtDocumentTypes.EGG.getValue());
        GrsCtMechanisms mechanism = codesDao.lookup(GrsCtMechanisms.class, CodeTableCodes.GrsCtMechanisms.FILE_TRANSFER__TEST_CODE);
        newInfoRoute.setMechanismTypeId(mechanism.getCtlId());
        newInfoRoute.setMechanismTypeCode(mechanism.getCtlNameCode());
        newInfoRoute.setWorkLocationIdentifier(workLocationDto.getIdentifier());
        newInfoRoute.setElectronicAddressDto(eleAddrDto);
        try {
            maintainInformationRouteService.save(newInfoRoute);
        } catch (DuplicateRecordException | EntityValidationException ex) {
            assertTrue(false);
        }
        
        //re-read provider as the work locations' electronic address added
        providerDto = searchProviderService.searchByProviderId(PAUTH_ID);

        //set the end reason code to be CEASED
        GrsCtEndReasonTypes ceaseEndReasonTypes = codesDao.lookup(GrsCtEndReasonTypes.class, CodeTableCodes.GrsCtEndReasonTypes.CEASE);
        wlDtailsDto.setEndReasonCodeId(ceaseEndReasonTypes.getCtlId());
        
        //updat the Work Location Detail
        boolean caughtBusinessRuleException = false;
        try {
        //maintainWorkLocationService.updateWorkLocationDetail(providerDto, wlDtailsDto);
        WorkLocationDetailsDto wlDLDto = maintainProviderService.updateWorkLocationDetail(providerDto, wlDtailsDto);
        } catch(BusinessRuleException bre) {
            caughtBusinessRuleException = true;
        } catch (DuplicateRecordException | EntityValidationException ex) {
            caughtBusinessRuleException = true;
        }
        assertTrue(caughtBusinessRuleException);
        
    }    

    @Test
    public void testDuplicationInformationRouteRefWorkLocationLocation() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {
        
        //create a new work location for the provider
        WorkLocationDto tmpWl = ProviderTestDataBuilder.getWorkLocation();
        tmpWl.setPauthId(PAUTH_ID);
        WorkLocationDto workLocationDto = maintainWorkLocationService.saveNewWorkLocationAndDetail(tmpWl, ProviderTestDataBuilder.getWorkLocationDetails());
        
        //find providerDto
        ProviderDto providerDto = searchProviderService.searchByProviderId(PAUTH_ID);
        //find Privider Entity
        PrsProviders provider = entityManagerProxy.find(PrsProviders.class, PAUTH_ID);
        
        //find Provider Work Location Details entity
        PrsWorkLocationDetails wlDetails = provider.getPrsWorkLocationsList().get(0).getPrsWorkLocationDetailsList().get(0);
        //build WorkLocationDetailsDto from PrsWorkLocationDetails entity
        WorkLocationDetailsDto wlDtailsDto = providerDtoConverter.buildWorkLocationDetail(wlDetails);

        //create a electronic address for testing
        ElectronicAddressDto tmpEleAddrDto = ProviderTestDataBuilder.getElectronicAddress();
        tmpEleAddrDto.setWlWlId(workLocationDto.getId());
        ElectronicAddressDto eleAddrDto = maintainElectronicAddressService.save(tmpEleAddrDto);

        //create an information route to reference to the above electrnic address
        InformationRouteDto newInfoRoute = new InformationRouteDto();
        newInfoRoute.setPauthId(PAUTH_ID);
        newInfoRoute.setActive(true);
        newInfoRoute.setCreatedDate(new Date());
        newInfoRoute.setDataOwnerCode("MOH");
        newInfoRoute.setEffectiveEndDate(DatabaseConstants.SYSTEM_HIGH_DATE.toDate());
        newInfoRoute.setEffectiveStartDate(DatabaseConstants.SYSTEM_LOW_DATE.toDate());
        newInfoRoute.setEndReasonCode(null);
        newInfoRoute.setGenerationNum(1L);
        newInfoRoute.setInvalidatedDate(null);
        newInfoRoute.setType("Test Type");
        newInfoRoute.setTypeCode("Test Type Code");
        newInfoRoute.setUserChid("Test User Chiid");
        newInfoRoute.setCommunicationPurposeId(1465l);// MC ministry contact
        //GrsCtDocumentTypes documentTypes = codesDao.lookup(GrsCtDocumentTypes.class, CodeTableCodes.GrsCtDocumentTypes.EGG);
        newInfoRoute.setDocumentTypeId(551l);
        newInfoRoute.setDocumentTypeCode(CodeTableCodes.GrsCtDocumentTypes.EGG.getValue());
        GrsCtMechanisms mechanism = codesDao.lookup(GrsCtMechanisms.class, CodeTableCodes.GrsCtMechanisms.FILE_TRANSFER__TEST_CODE);
        newInfoRoute.setMechanismTypeId(mechanism.getCtlId());
        newInfoRoute.setMechanismTypeCode(mechanism.getCtlNameCode());
        newInfoRoute.setWorkLocationIdentifier(workLocationDto.getIdentifier());
        newInfoRoute.setElectronicAddressDto(eleAddrDto);
        maintainInformationRouteService.save(newInfoRoute);
        
        //create an information route to reference to the above electrnic address
        InformationRouteDto secondInfoRoute = new InformationRouteDto();
        secondInfoRoute.setPauthId(PAUTH_ID);
        secondInfoRoute.setActive(true);
        secondInfoRoute.setCreatedDate(new Date());
        secondInfoRoute.setDataOwnerCode("MOH");
        secondInfoRoute.setEffectiveEndDate(DatabaseConstants.SYSTEM_HIGH_DATE.toDate());
        secondInfoRoute.setEffectiveStartDate(DatabaseConstants.SYSTEM_LOW_DATE.toDate());
        secondInfoRoute.setEndReasonCode(null);
        secondInfoRoute.setGenerationNum(1L);
        secondInfoRoute.setInvalidatedDate(null);
        secondInfoRoute.setType("Test Type");
        secondInfoRoute.setTypeCode("Test Type Code");
        secondInfoRoute.setUserChid("Test User Chiid");
        secondInfoRoute.setCommunicationPurposeId(1465l);// MC ministry contact
        //GrsCtDocumentTypes documentTypes = codesDao.lookup(GrsCtDocumentTypes.class, CodeTableCodes.GrsCtDocumentTypes.EGG);
        secondInfoRoute.setDocumentTypeId(551l);
        secondInfoRoute.setDocumentTypeCode(CodeTableCodes.GrsCtDocumentTypes.EGG.getValue());
        GrsCtMechanisms mechanism2 = codesDao.lookup(GrsCtMechanisms.class, CodeTableCodes.GrsCtMechanisms.FILE_TRANSFER__TEST_CODE);
        secondInfoRoute.setMechanismTypeId(mechanism2.getCtlId());
        secondInfoRoute.setMechanismTypeCode(mechanism2.getCtlNameCode());
        secondInfoRoute.setWorkLocationIdentifier(workLocationDto.getIdentifier());
        secondInfoRoute.setElectronicAddressDto(eleAddrDto);
        //updat the Work Location Detail
        boolean caughtDuplicateRecordException = false;
        try {        
            maintainInformationRouteService.save(secondInfoRoute);
        } catch(DuplicateRecordException dre) {
            caughtDuplicateRecordException= true;
            BusinessRuleKeys key = BusinessRuleKeys.ERROR_DUPLICATE_DATA_BLOCK;
            String messageDao = BusinessRuleMessageDao.getMessageResource(key).replace("\n", "").replace("\r", "").trim() + " communication preference";
            String messageExp = dre.getMessage().replace("\n", "").replace("\r", "").trim();
            assertEquals(messageDao, messageExp);
        }
        assertTrue(caughtDuplicateRecordException);
        
    }    
    
    private ProviderDto getWlProviderDto(){
        ProviderDto dto = new ProviderDto();
        dto.setPauthId(PAUTH_ID);
        return dto;
    }
}
