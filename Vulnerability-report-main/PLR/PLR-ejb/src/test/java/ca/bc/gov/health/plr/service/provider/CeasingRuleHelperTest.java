/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.esb.AbstractProviderDetail;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDetailsDto;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocations;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainProviderEsbService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.util.CreateProviderUtils;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.After;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;

/**
 *
 * @author jonathan.wiebe
 */
public class CeasingRuleHelperTest extends IntegrationSetup {

    public CeasingRuleHelperTest() {
    }

    @BeforeClass
    public static void beforeClassFirst() {
    }

    MaintainProviderRequest request = null;

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
        CreateProviderUtils.removeProviders();
    }

    private Long FIRST_WL_ID = new Long(1l);
    private Long SECOND_WL_ID = new Long(2l);
    private Long THIRD_WL_ID = new Long(3l);

    private PrsProviders createProvider() {
        request = CreateProviderUtils.createRequest();
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        PrsProviders provider = providerDao.searchByIdentifer(request.getProviderDetails().getIdentifiers().get(0).getTypeCode(), request.getProviderDetails().getIdentifiers().get(0).getIdentifier(), MatchHistory.NO).get(0);
        CreateProviderUtils.getProviderEntityList().add(provider);
        return provider;
    }


    @Test
    public void test_AddingProvIR_ProvLocation() throws DuplicateRecordException, EntityValidationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        PrsProviders providerEntity = createProvider();

        // add eaddr to provider
        ElectronicAddressDto eAddrDto = makeElectronicAddressDto(PURPOSE_CODE_CC);
        request = CreateProviderUtils.createRequestEAddrChange(eAddrDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsElectronicAddressesList().size() == 1);

        // add ir to provider same purpose as eaddr
        InformationRouteDto irDto = makeInformationRouteDto(eAddrDto, PURPOSE_CODE_CC, null, null, response.getProviderDetails().getElectronicAddresses().get(0).getDataOwnerCode());
        request = CreateProviderUtils.createRequestIRChange(irDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsInformationRoutesList().size() == 1);

        // cease eaddr, fail as ir is still using it
        eAddrDto.setEndReasonCode(CEASE_CODE);
        request = CreateProviderUtils.createRequestEAddrChange(eAddrDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsElectronicAddressesList().size() == 1);

    }
    @Test
    public void test_AddingProvIRx2_ProvLocation_FailDuplicateIR() throws DuplicateRecordException, EntityValidationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        PrsProviders providerEntity = createProvider();

        // add eaddr to provider
        ElectronicAddressDto eAddrDto = makeElectronicAddressDto(PURPOSE_CODE_CC);
        request = CreateProviderUtils.createRequestEAddrChange(eAddrDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsElectronicAddressesList().size() == 1);

        // add ir to provider same purpose as eaddr
        InformationRouteDto irDto = makeInformationRouteDto(eAddrDto, PURPOSE_CODE_CC, null, null, response.getProviderDetails().getElectronicAddresses().get(0).getDataOwnerCode());
        request = CreateProviderUtils.createRequestIRChange(irDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsInformationRoutesList().size() == 1);

        // add ir to provider same purpose as eaddr - FAIL as duplicate record
        irDto = makeInformationRouteDto(eAddrDto, PURPOSE_CODE_CC, null, null, response.getProviderDetails().getElectronicAddresses().get(0).getDataOwnerCode());
        request = CreateProviderUtils.createRequestIRChange(irDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsInformationRoutesList().size() == 1);
    }

    @Test
    public void test_AddingProvIR_ProvLocation_DifferentOwnerCodes() throws DuplicateRecordException, EntityValidationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        PrsProviders providerEntity = createProvider();

        // add eaddr to provider
        ElectronicAddressDto eAddrDto = makeElectronicAddressDto(PURPOSE_CODE_CC);
        request = CreateProviderUtils.createRequestEAddrChange(eAddrDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsElectronicAddressesList().size() == 1);

        String differentOwner = providerEntity.getGrsElectronicAddressesList().get(0).getDataOwnerCode().getCtlNameCode().equals("RNA") ? "CPS" : "RNA";
        // add ir to provider same purpose as eaddr, different owner
        InformationRouteDto irDto = makeInformationRouteDto(eAddrDto, PURPOSE_CODE_CC, null, null, differentOwner);
        request = CreateProviderUtils.createRequestIRChange(irDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsInformationRoutesList().size() == 0);

        // eaddr ceased as owner code is different
        eAddrDto.setEndReasonCode(CEASE_CODE);
        request = CreateProviderUtils.createRequestEAddrChange(eAddrDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsElectronicAddressesList().size() == 2);

    }

    @Test
    public void test_AddingProvIR_ProvLocation_DifferenTypeCodes() throws DuplicateRecordException, EntityValidationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        PrsProviders providerEntity = createProvider();

        // add eaddr to provider
        ElectronicAddressDto eAddrDto = makeElectronicAddressDto(PURPOSE_CODE_CC);
        request = CreateProviderUtils.createRequestEAddrChange(eAddrDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsElectronicAddressesList().size() == 1);

        // add ir to provider same purpose as eaddr, different type
        InformationRouteDto irDto = makeInformationRouteDto(eAddrDto, PURPOSE_CODE_CC, null, null, MOH, "H");
        request = CreateProviderUtils.createRequestIRChange(irDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsInformationRoutesList().size() == 0);

        // eaddr ceased as type is different
        eAddrDto.setEndReasonCode(CEASE_CODE);
        request = CreateProviderUtils.createRequestEAddrChange(eAddrDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsElectronicAddressesList().size() == 2);

    }

    private static final String CEASE_CODE = "CEASE";
    private static final String CHANGE_CODE = "CHG";

    @Test
    public void test_AddingProvIR_ProvLocation_Exception() throws DuplicateRecordException, EntityValidationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        PrsProviders providerEntity = createProvider();

        // add eaddr to provider
        ElectronicAddressDto eAddrDto = makeElectronicAddressDto(PURPOSE_CODE_CC);
        request = CreateProviderUtils.createRequestEAddrChange(eAddrDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsElectronicAddressesList().size() == 1);

        // just to confuse things adding a address in the mix, same purpose
        AddressDto addrDto = makeAddressDto(PURPOSE_CODE_CC);
        request = CreateProviderUtils.createRequestAddressChange(addrDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsAddressesList().size() == 2);

        // add ir to provider, different purpose than eaddr, fails
        InformationRouteDto irDto = makeInformationRouteDto(eAddrDto, PURPOSE_CODE_OC, null, null, response.getProviderDetails().getElectronicAddresses().get(0).getDataOwnerCode());
        request = CreateProviderUtils.createRequestIRChange(irDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsInformationRoutesList().size() == 0);

        // cease eaddr OK as no ir was added that matches
        eAddrDto.setEndReasonCode(CEASE_CODE);
        request = CreateProviderUtils.createRequestEAddrChange(eAddrDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsElectronicAddressesList().size() == 2);

    }

    @Test
    public void test_AddingWLIR_ProvLocation() throws DuplicateRecordException, EntityValidationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        PrsProviders providerEntity = createProvider();

        // add addr to provider
        AddressDto addrDto = makeAddressDto(PURPOSE_CODE_CC);
        request = CreateProviderUtils.createRequestAddressChange(addrDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsAddressesList().size() == 2);

        // add ir to wl, ir matches addr
        WorkLocationDto wlDto = makeWorkLocationDto(FIRST_WL_ID);
        InformationRouteDto irDto = makeInformationRouteDto(addrDto, PURPOSE_CODE_CC, null, null, response.getProviderDetails().getAddresses().get(0).getDataOwnerCode());
        List<InformationRouteDto> irList = new ArrayList<InformationRouteDto>();
        wlDto.setInformationRoutes(irList);
        irList.add(irDto);
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getPrsInformationRoutesList().size() == 1);

        // cease fails (note there already is an address so size is 2 if ceased succeeded size would be 3)
        addrDto.setEndReasonCode(CEASE_CODE);
        request = CreateProviderUtils.createRequestAddressChange(addrDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsAddressesList().size() == 2);

    }
    @Test
    public void test_AddingWLIR_ProvLocation_UnqiueRuleVilotated() throws DuplicateRecordException, EntityValidationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        PrsProviders providerEntity = createProvider();

        // add addr to provider
        AddressDto addrDto = makeAddressDto(PURPOSE_CODE_CC);
        request = CreateProviderUtils.createRequestAddressChange(addrDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsAddressesList().size() == 2);

        // add ir to wl, ir matches addr
        WorkLocationDto wlDto = makeWorkLocationDto(FIRST_WL_ID);
        InformationRouteDto irDto = makeInformationRouteDto(addrDto, PURPOSE_CODE_CC, null, null, response.getProviderDetails().getAddresses().get(0).getDataOwnerCode());
        List<InformationRouteDto> irList = new ArrayList<InformationRouteDto>();
        wlDto.setInformationRoutes(irList);
        irList.add(irDto);
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getPrsInformationRoutesList().size() == 1);

        // add ir to wl, ir matches addr, adding fails as IR already there (unqiue rules)
        wlDto = makeWorkLocationDto(FIRST_WL_ID);
        irDto = makeInformationRouteDto(addrDto, PURPOSE_CODE_CC, null, null, response.getProviderDetails().getAddresses().get(0).getDataOwnerCode());
        irList = new ArrayList<InformationRouteDto>();
        wlDto.setInformationRoutes(irList);
        wlDto.getWorkLocationDetails().clear();
        irList.add(irDto);
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getPrsInformationRoutesList().size() == 1);
        
    }

    @Test
    public void test_AddingWLIR_ProvLocation_Exception() throws DuplicateRecordException, EntityValidationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        PrsProviders providerEntity = createProvider();

        // add telecom to provider
        TelecommunicationDto telecomDto = makeTelecomDto(PURPOSE_CODE_CC);
        request = CreateProviderUtils.createRequestTelecomChange(telecomDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsTelephonesList().size() == 1);

        // add ir to wl, different purpose, fails to create wl
        WorkLocationDto wlDto = makeWorkLocationDto(SECOND_WL_ID);
        InformationRouteDto irDto = makeInformationRouteDto(telecomDto, PURPOSE_CODE_OC, null, null, response.getProviderDetails().getTelecommunication().get(0).getDataOwnerCode());
        List<InformationRouteDto> irList = new ArrayList<InformationRouteDto>();
        wlDto.setInformationRoutes(irList);
        irList.add(irDto);
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsInformationRoutesList().size() == 0);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 0);
        assertTrue(providerEntity.getGrsTelephonesList().size() == 1);

        // since no wl or ir was created can cease the telecom
        telecomDto.setEndReasonCode(CEASE_CODE);
        request = CreateProviderUtils.createRequestTelecomChange(telecomDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsTelephonesList().size() == 2);
    }

    @Test
    public void test_AddingWLIR_WLLocation() throws DuplicateRecordException, EntityValidationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        PrsProviders providerEntity = createProvider();

        // add wl with addr
        WorkLocationDto wlDto = makeWorkLocationDto(FIRST_WL_ID);
        AddressDto addrDto = makeAddressDto(PURPOSE_CODE_CC);
        List<AddressDto> addrList = new ArrayList<>();
        addrList.add(addrDto);
        wlDto.setAddresses(addrList);
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsAddressesList().size() == 1);

        // add wl with ir
        WorkLocationDto wlDto2 = makeWorkLocationDto(SECOND_WL_ID);
        InformationRouteDto irDto = makeInformationRouteDto(addrDto, PURPOSE_CODE_CC, response.getProviderDetails().getWorkLocationList().get(0).getDataOwnerCode(), FIRST_WL_ID, response.getProviderDetails().getWorkLocationList().get(0).getAddresses().get(0).getDataOwnerCode());
        List<InformationRouteDto> irList = new ArrayList<InformationRouteDto>();
        wlDto2.setInformationRoutes(irList);
        irList.add(irDto);
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto2, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 2);
        boolean foundWLForIR = false;
        for (PrsWorkLocations grsWL : providerEntity.getPrsWorkLocationsList()) {
            if (grsWL.getWorkLocationChid().equals(SECOND_WL_ID)) {
                assertTrue(grsWL.getPrsInformationRoutesList().size() == 1);
                foundWLForIR = true;
            }
        }
        assertTrue(foundWLForIR);

        // cease addr in wl fails as ir is still there
        wlDto.getAddresses().get(0).setEndReasonCode(CEASE_CODE);
        wlDto.getWorkLocationDetails().clear();
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 2);
        foundWLForIR = false;
        for (PrsWorkLocations grsWL : providerEntity.getPrsWorkLocationsList()) {
            if (grsWL.getWorkLocationChid().equals(FIRST_WL_ID)) {
                assertTrue(grsWL.getGrsAddressesList().size() == 1);
                foundWLForIR = true;
            }
        }
        assertTrue(foundWLForIR);
        
        /**
         * Cease work location ... then try other wl ...
         */
    }

    @Test
    public void test_AddingWLIR_WLLocation_Exception() throws DuplicateRecordException, EntityValidationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        PrsProviders providerEntity = createProvider();

        // add wl with addr
        WorkLocationDto wlDto = makeWorkLocationDto(FIRST_WL_ID);
        AddressDto addrDto = makeAddressDto(PURPOSE_CODE_CC);
        List<AddressDto> addrList = new ArrayList<>();
        addrList.add(addrDto);
        wlDto.setAddresses(addrList);
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsAddressesList().size() == 1);

        // add wl with ir, but fails as no matcing location, purpose different
        WorkLocationDto wlDto2 = makeWorkLocationDto(SECOND_WL_ID);
        InformationRouteDto irDto = makeInformationRouteDto(addrDto, PURPOSE_CODE_OC, MOH, this.FIRST_WL_ID, response.getProviderDetails().getWorkLocationList().get(0).getAddresses().get(0).getDataOwnerCode());
        List<InformationRouteDto> irList = new ArrayList<InformationRouteDto>();
        wlDto2.setInformationRoutes(irList);
        irList.add(irDto);
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto2, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);

        // cease addr ok as no ir was ever created
        wlDto.getAddresses().get(0).setEndReasonCode(CEASE_CODE);
        wlDto.getWorkLocationDetails().clear();
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        boolean foundWLForIR = false;
        for (PrsWorkLocations grsWL : providerEntity.getPrsWorkLocationsList()) {
            if (grsWL.getWorkLocationChid().equals(FIRST_WL_ID)) {
                assertTrue(grsWL.getGrsAddressesList().size() == 2);
                foundWLForIR = true;
            }
        }
        assertTrue(foundWLForIR);

    }

    @Test
    public void test_AddingProvIR_WLLocation() throws DuplicateRecordException, EntityValidationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        PrsProviders providerEntity = createProvider();

        // add wl with address
        WorkLocationDto wlDto = makeWorkLocationDto(FIRST_WL_ID);
        AddressDto addrDto = makeAddressDto(PURPOSE_CODE_CC);
        List<AddressDto> addrList = new ArrayList<>();
        addrList.add(addrDto);
        wlDto.setAddresses(addrList);
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsAddressesList().size() == 1);

        // add ir
        InformationRouteDto irDto = makeInformationRouteDto(addrDto, PURPOSE_CODE_CC, response.getProviderDetails().getWorkLocationList().get(0).getDataOwnerCode(), this.FIRST_WL_ID, response.getProviderDetails().getWorkLocationList().get(0).getAddresses().get(0).getDataOwnerCode());
        request = CreateProviderUtils.createRequestIRChange(irDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsInformationRoutesList().size() == 1);

        // cease addr fails as the ir matches
        wlDto.getAddresses().get(0).setEndReasonCode(CEASE_CODE);
        wlDto.getWorkLocationDetails().clear();
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        boolean foundWLForIR = false;
        for (PrsWorkLocations grsWL : providerEntity.getPrsWorkLocationsList()) {
            if (grsWL.getWorkLocationChid().equals(FIRST_WL_ID)) {
                assertTrue(grsWL.getGrsAddressesList().size() == 1);
                foundWLForIR = true;
            }
        }
        assertTrue(foundWLForIR);
    }

    @Test
    public void test_AddingProvIR_WLLocation_Exception() throws DuplicateRecordException, EntityValidationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        PrsProviders providerEntity = createProvider();

        // add wl with address
        WorkLocationDto wlDto = makeWorkLocationDto(FIRST_WL_ID);
        AddressDto addrDto = makeAddressDto(PURPOSE_CODE_CC);
        List<AddressDto> addrList = new ArrayList<>();
        addrList.add(addrDto);
        wlDto.setAddresses(addrList);
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsAddressesList().size() == 1);

        // add ir but fails as purpose is different
        InformationRouteDto irDto = makeInformationRouteDto(addrDto, PURPOSE_CODE_OC, MOH, FIRST_WL_ID, response.getProviderDetails().getWorkLocationList().get(0).getAddresses().get(0).getDataOwnerCode());
        request = CreateProviderUtils.createRequestIRChange(irDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsInformationRoutesList().size() == 0);

        // cease address works, there is no ir
        wlDto.getAddresses().get(0).setEndReasonCode(CEASE_CODE);
        wlDto.getWorkLocationDetails().clear();
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        boolean foundWLForIR = false;
        for (PrsWorkLocations grsWL : providerEntity.getPrsWorkLocationsList()) {
            if (grsWL.getWorkLocationChid().equals(FIRST_WL_ID)) {
                assertTrue(grsWL.getGrsAddressesList().size() == 2);
                foundWLForIR = true;
            }
        }
        assertTrue(foundWLForIR);
    }

    @Test
    public void test_AddingProvIR_WLLocation_CeaseIR_NextCeaseLocation() throws DuplicateRecordException, EntityValidationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        PrsProviders providerEntity = createProvider();

        // add wl with address
        WorkLocationDto wlDto = makeWorkLocationDto(FIRST_WL_ID);
        AddressDto addrDto = makeAddressDto(PURPOSE_CODE_CC);
        List<AddressDto> addrList = new ArrayList<>();
        addrList.add(addrDto);
        wlDto.setAddresses(addrList);
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsAddressesList().size() == 1);

        // add ir
        InformationRouteDto irDto = makeInformationRouteDto(addrDto, PURPOSE_CODE_CC, response.getProviderDetails().getWorkLocationList().get(0).getDataOwnerCode(), FIRST_WL_ID, response.getProviderDetails().getWorkLocationList().get(0).getAddresses().get(0).getDataOwnerCode());
        request = CreateProviderUtils.createRequestIRChange(irDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsInformationRoutesList().size() == 1);

        // cease IR, works
        irDto.setEndReasonCode(CEASE_CODE);
        request = CreateProviderUtils.createRequestIRChange(irDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsInformationRoutesList().size() == 2);

        // cease address, works
        wlDto.getAddresses().get(0).setEndReasonCode(CEASE_CODE);
        wlDto.getWorkLocationDetails().clear();
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        boolean foundWLForIR = false;
        for (PrsWorkLocations grsWL : providerEntity.getPrsWorkLocationsList()) {
            if (grsWL.getWorkLocationChid().equals(FIRST_WL_ID)) {
                assertTrue(grsWL.getGrsAddressesList().size() == 2);
                foundWLForIR = true;
            }
        }
        assertTrue(foundWLForIR);
    }

    @Test
    public void test_AddingProvIR_WLLocation_CeaseWL_NextCeaseLocation() throws DuplicateRecordException, EntityValidationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        PrsProviders providerEntity = createProvider();

        // add wl with address
        WorkLocationDto wlDto = makeWorkLocationDto(FIRST_WL_ID);
        AddressDto addrDto = makeAddressDto(PURPOSE_CODE_CC);
        List<AddressDto> addrList = new ArrayList<>();
        addrList.add(addrDto);
        wlDto.setAddresses(addrList);
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsAddressesList().size() == 1);

        // add ir
        InformationRouteDto irDto = makeInformationRouteDto(addrDto, PURPOSE_CODE_CC, response.getProviderDetails().getWorkLocationList().get(0).getDataOwnerCode(), FIRST_WL_ID, response.getProviderDetails().getWorkLocationList().get(0).getAddresses().get(0).getDataOwnerCode());
        request = CreateProviderUtils.createRequestIRChange(irDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsInformationRoutesList().size() == 1);

        // cease wl should fail as ir exists (attached to addr)
        wlDto.getWorkLocationDetails().get(0).setEndReasonCode(CEASE_CODE);
        wlDto.setAddresses(new ArrayList<AddressDto>());
        request = CreateProviderUtils.createRequestWorkLocationCease(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsInformationRoutesList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getPrsWorkLocationDetailsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsAddressesList().size() == 1);

        // change IR start date
        irDto.setEndReasonCode(CHANGE_CODE);
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, -3);
        irDto.setEffectiveStartDate(cal.getTime());
        request = CreateProviderUtils.createRequestIRChange(irDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsInformationRoutesList().size() == 3);

        // cease IR
        irDto.setEndReasonCode(CEASE_CODE);
        request = CreateProviderUtils.createRequestIRChange(irDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsInformationRoutesList().size() == 4);

        // now cease WL amd address
        wlDto.getWorkLocationDetails().get(0).setEndReasonCode(CEASE_CODE);
        wlDto.setAddresses(new ArrayList<AddressDto>());
        request = CreateProviderUtils.createRequestWorkLocationCease(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getPrsWorkLocationDetailsList().size() == 2);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsAddressesList().size() == 2);
    }

    @Test
    public void test_AddingWLIR_ProvLocation_CeaseIR_NextCeaseLocation() throws DuplicateRecordException, EntityValidationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        PrsProviders providerEntity = createProvider();

        // add telecom
        TelecommunicationDto telecomDto = makeTelecomDto(PURPOSE_CODE_CC);
        request = CreateProviderUtils.createRequestTelecomChange(telecomDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsTelephonesList().size() == 1);

        // add wl with ir
        WorkLocationDto wlDto = makeWorkLocationDto(SECOND_WL_ID);
        InformationRouteDto irDto = makeInformationRouteDto(telecomDto, PURPOSE_CODE_CC, null, null,response.getProviderDetails().getTelecommunication().get(0).getDataOwnerCode());
        List<InformationRouteDto> irList = new ArrayList<InformationRouteDto>();
        wlDto.setInformationRoutes(irList);
        irList.add(irDto);
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getPrsInformationRoutesList().size() == 1);
        assertTrue(providerEntity.getGrsTelephonesList().size() == 1);

        // cease WL and this should cease ir
        wlDto.getWorkLocationDetails().get(0).setEndReasonCode(CEASE_CODE);
        wlDto.setInformationRoutes(new ArrayList<InformationRouteDto>());
        request = CreateProviderUtils.createRequestWorkLocationCease(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsInformationRoutesList().size() == 0);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getPrsWorkLocationDetailsList().size() == 2);
        assertTrue(providerEntity.getGrsTelephonesList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getPrsInformationRoutesList().size() == 2);

        // cease telecom as ir is gone with wl
        telecomDto.setEndReasonCode(CEASE_CODE);
        request = CreateProviderUtils.createRequestTelecomChange(telecomDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsTelephonesList().size() == 2);
    }

    @Test
    public void testCascadingWLDelete() {
        PrsProviders providerEntity = createProvider();

        // add telecom to provider so I can make ir later in wl
        TelecommunicationDto telecomDto = makeTelecomDto(PURPOSE_CODE_CC);
        request = CreateProviderUtils.createRequestTelecomChange(telecomDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getGrsTelephonesList().size() == 1);

        // create wl with ir, addr, telecom and eaddr
        WorkLocationDto wlDto = makeWorkLocationDto(SECOND_WL_ID);

        // add ir
        InformationRouteDto irDto = makeInformationRouteDto(telecomDto, PURPOSE_CODE_CC, null, null,response.getProviderDetails().getTelecommunication().get(0).getDataOwnerCode());
        List<InformationRouteDto> irList = new ArrayList<InformationRouteDto>();
        wlDto.setInformationRoutes(irList);
        irList.add(irDto);

        // add telcom
        TelecommunicationDto teleDto = makeTelecomDto(PURPOSE_CODE_CC);
        List<TelecommunicationDto> teleList = new ArrayList<>();
        teleList.add(teleDto);
        wlDto.setTelecommunications(teleList);

        // add eaddress
        ElectronicAddressDto eAddrDto = makeElectronicAddressDto(PURPOSE_CODE_CC);
        List<ElectronicAddressDto> eAddrList = new ArrayList<>();
        eAddrList.add(eAddrDto);
        wlDto.setElectronicAddresses(eAddrList);

        // add addr
        AddressDto addrDto = makeAddressDto(PURPOSE_CODE_CC);
        List<AddressDto> addrList = new ArrayList<>();
        addrList.add(addrDto);
        wlDto.setAddresses(addrList);

        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getPrsInformationRoutesList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsAddressesList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsElectronicAddressesList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsTelephonesList().size() == 1);

        // cease wl and make sure all is ceased
        wlDto.getWorkLocationDetails().get(0).setEndReasonCode(CEASE_CODE);
        wlDto.setInformationRoutes(new ArrayList<InformationRouteDto>());
        wlDto.setAddresses(new ArrayList<AddressDto>());
        wlDto.setTelecommunications(new ArrayList<TelecommunicationDto>());
        wlDto.setElectronicAddresses(new ArrayList<ElectronicAddressDto>());
        request = CreateProviderUtils.createRequestWorkLocationCease(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getPrsWorkLocationDetailsList().size() == 2);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getPrsInformationRoutesList().size() == 2);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsAddressesList().size() == 2);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsElectronicAddressesList().size() == 2);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsTelephonesList().size() == 2);

    }

    @Test
    public void testCascadingWLDelete_WithLocInWL() {
        PrsProviders providerEntity = createProvider();

        // create wl with telecom
        WorkLocationDto wlDto = makeWorkLocationDto(SECOND_WL_ID);
        TelecommunicationDto teleDto = makeTelecomDto(PURPOSE_CODE_CC);
        List<TelecommunicationDto> teleList = new ArrayList<>();
        teleList.add(teleDto);
        wlDto.setTelecommunications(teleList);
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsTelephonesList().size() == 1);

        // add ir addr and eaddr to wl
        InformationRouteDto irDto = makeInformationRouteDto(teleDto, PURPOSE_CODE_CC, response.getProviderDetails().getWorkLocationList().get(0).getDataOwnerCode(), SECOND_WL_ID,response.getProviderDetails().getWorkLocationList().get(0).getTelecommunications().get(0).getDataOwnerCode());
        List<InformationRouteDto> irList = new ArrayList<InformationRouteDto>();
        wlDto.setInformationRoutes(irList);
        irList.add(irDto);
        ElectronicAddressDto eAddrDto = makeElectronicAddressDto(PURPOSE_CODE_CC);
        List<ElectronicAddressDto> eAddrList = new ArrayList<>();
        eAddrList.add(eAddrDto);
        wlDto.setElectronicAddresses(eAddrList);
        AddressDto addrDto = makeAddressDto(PURPOSE_CODE_CC);
        List<AddressDto> addrList = new ArrayList<>();
        addrList.add(addrDto);
        wlDto.setAddresses(addrList);
        request = CreateProviderUtils.createRequestWorkLocationChange(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        List<WorkLocationDetailsDto> wlDetails = wlDto.getWorkLocationDetails();
        request.getProviderDetails().getWorkLocationList().get(0).setWorkLocationDetails(new ArrayList<WorkLocationDetailsDto>());
        request.getProviderDetails().getWorkLocationList().get(0).setTelecommunications(new ArrayList<TelecommunicationDto>());
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getPrsInformationRoutesList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsAddressesList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsElectronicAddressesList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsTelephonesList().size() == 1);

        // cease wl and make sure all is ceased
        wlDto.setWorkLocationDetails(wlDetails);
        wlDto.getWorkLocationDetails().get(0).setEndReasonCode(CEASE_CODE);
        wlDto.setInformationRoutes(new ArrayList<InformationRouteDto>());
        wlDto.setAddresses(new ArrayList<AddressDto>());
        wlDto.setTelecommunications(new ArrayList<TelecommunicationDto>());
        wlDto.setElectronicAddresses(new ArrayList<ElectronicAddressDto>());
        request = CreateProviderUtils.createRequestWorkLocationCease(wlDto, request.getProviderDetails().getIdentifiers().get(0));
        response = maintainProviderEsbService.maintainProvider(request);
        providerEntity = refreshProviderFromDB(providerEntity);
        assertTrue(providerEntity.getPrsWorkLocationsList().size() == 1);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getPrsWorkLocationDetailsList().size() == 2);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getPrsInformationRoutesList().size() == 2);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsAddressesList().size() == 2);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsElectronicAddressesList().size() == 2);
        assertTrue(providerEntity.getPrsWorkLocationsList().get(0).getGrsTelephonesList().size() == 2);

    }

    private static final String MOH = "MOH";

    private PrsProviders refreshProviderFromDB(PrsProviders providerEntity) {
        providerEntity = getProvider(providerEntity.getGrsIdentifiersList().get(0).getIdentifierTypeCode().getCtlNameCode(), providerEntity.getGrsIdentifiersList().get(0).getProviderChid()).get(0);
        CreateProviderUtils.updateProviderRemovalList(providerEntity);
        return providerEntity;
    }

    private WorkLocationDto makeWorkLocationDto(Long id) {
        WorkLocationDto result = new WorkLocationDto();
        result.setUserChid("Test User Chid_JUNIT");
        result.setIdentifier(id);
        WorkLocationDetailsDto wldDto = new WorkLocationDetailsDto();
        wldDto.setEffectiveStartDate(DatabaseConstants.SYSTEM_LOW_DATE.toDate());
        wldDto.setTypeCode("PHARM");
        wldDto.setUserChid("Test User Chiid");
        wldDto.setAdditionalAddresseeInfo("Additional Addressee Info");
        wldDto.setDefaultFlag(true);
        wldDto.setName("Name");
        List<WorkLocationDetailsDto> list = new ArrayList<WorkLocationDetailsDto>();
        list.add(wldDto);
        result.setWorkLocationDetails(list);
        return result;
    }

//    private InformationRouteDto makeInformationRouteDto(Object locDto, String purposeCode, String wlOwner, Long wlIdentifier) {
//        return makeInformationRouteDto(locDto, purposeCode, wlOwner, wlIdentifier, MOH);
//    }

    private InformationRouteDto makeInformationRouteDto(Object locDto, String purposeCode, String wlOwner, Long wlIdentifier, String locOwner) {
        try {
            return makeInformationRouteDto(locDto, purposeCode, wlOwner, wlIdentifier, locOwner, (String) locDto.getClass().getMethod("getTypeCode").invoke(locDto));
        } catch (IllegalAccessException | IllegalArgumentException | InvocationTargetException | NoSuchMethodException | SecurityException ex) {
            Logger.getLogger(CeasingRuleHelperTest.class.getName()).log(Level.SEVERE, null, ex);
        }
        assertFalse(true);
        return null;
    }

    private InformationRouteDto makeInformationRouteDto(Object locDto, String purposeCode, String wlOwner, Long wlIdentifier, String locOwner, String typeCode) {
        InformationRouteDto irDto = new InformationRouteDto();
        irDto.setEffectiveStartDate(CreateProviderUtils.EFF_START_DATE);
        irDto.setDocumentTypeCode("ALL");
        irDto.setAddressDto(new AddressDto());
        irDto.setTelecommunicationDto(new TelecommunicationDto());
        irDto.setElectronicAddressDto(new ElectronicAddressDto());
        irDto.setDataOwnerCode(MOH);
        if (locDto instanceof AddressDto) {
            irDto.getAddressDto().setDataOwnerCode(locOwner);
            irDto.getAddressDto().setCommunicationPurposeCode(purposeCode);
            irDto.getAddressDto().setTypeCode(typeCode);
            irDto.setMechanismTypeCode(COURIER);
        } else if (locDto instanceof ElectronicAddressDto) {
            irDto.getElectronicAddressDto().setDataOwnerCode(locOwner);
            irDto.getElectronicAddressDto().setCommunicationPurposeCode(purposeCode);
            irDto.getElectronicAddressDto().setTypeCode(typeCode);
            irDto.setMechanismTypeCode(FILE);
        } else if (locDto instanceof TelecommunicationDto) {
            irDto.getTelecommunicationDto().setDataOwnerCode(locOwner);
            irDto.getTelecommunicationDto().setCommunicationPurposeCode(purposeCode);
            irDto.getTelecommunicationDto().setTypeCode(typeCode);
            irDto.setMechanismTypeCode(FAX);
        }

        irDto.setWorkLocationDataOwnerCode(wlOwner);
        irDto.setWorkLocationIdentifier(wlIdentifier);
        return irDto;
    }

    private static String COURIER = "COURIER";
    private static String FAX = "FAX";
    private static String FILE = "FILE";

    private ElectronicAddressDto makeElectronicAddressDto(String purposeCode) {
        ElectronicAddressDto eAddrDto = new ElectronicAddressDto();
        eAddrDto.setCommunicationPurposeCode(purposeCode);
        eAddrDto.setTypeCode("E");
        eAddrDto.setAddress("jw@jw.com");
        eAddrDto.setEffectiveStartDate(CreateProviderUtils.EFF_START_DATE);
        return eAddrDto;
    }

    private AddressDto makeAddressDto(String purposeCode) {
        AddressDto addrDto = new AddressDto();
        addrDto.setCommunicationPurposeCode(purposeCode);
        addrDto.setTypeCode("P");
        addrDto.setAddressLineOne("j1wjw.com");
        addrDto.setAddressLineTwo("j2wjw.com");
        addrDto.setCountryCode("CA");
        addrDto.setProvinceOrStateTxt("ON");
        addrDto.setCity("Ottawa");
        addrDto.setEffectiveStartDate(CreateProviderUtils.EFF_START_DATE);
        return addrDto;
    }

    private TelecommunicationDto makeTelecomDto(String purposeCode) {
        TelecommunicationDto telecomDto = new TelecommunicationDto();
        telecomDto.setCommunicationPurposeCode(purposeCode);
        telecomDto.setTypeCode("FAX");
        telecomDto.setAreaCode("250");
        telecomDto.setNumber("2502502502");
        telecomDto.setEffectiveStartDate(CreateProviderUtils.EFF_START_DATE);
        return telecomDto;
    }

    private static final String PURPOSE_CODE_CC = "CC";
    private static final String PURPOSE_CODE_OC = "OC";

    public List<PrsProviders> getProvider(CollegeIdentifierDto dto) {
        return getProvider(dto.getTypeCode(), dto.getIdentifier());
    }

    public List<PrsProviders> getProvider(String typeCode, String identifier) {
        return providerDao.searchByIdentifer(typeCode, identifier, MatchHistory.NO);
    }

}