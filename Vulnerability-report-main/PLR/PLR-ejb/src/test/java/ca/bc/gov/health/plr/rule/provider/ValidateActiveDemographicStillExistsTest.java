/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.rule.provider;

import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsDemographicDetails;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import java.util.ArrayList;
import java.util.List;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
/**
 *
 * @author adebiyi.kuseju
 */
public class ValidateActiveDemographicStillExistsTest {
    
    private static String code;
    private static String message;
    
    public ValidateActiveDemographicStillExistsTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
         code = BusinessRuleKeys.ERROR_LAST_ACTIVE_DEMOGRAPHICS.getKey();
         message = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_LAST_ACTIVE_DEMOGRAPHICS);
    }

    /**
     * Test of validate method, of class ValidateActiveDemographicStillExists.
     */
    @Test
    public void testValidate_invalid() {
        List<PrsDemographicDetails> items = getDemographicsList(false);

        ValidateActiveDemographicStillExists instance = new ValidateActiveDemographicStillExists();

        BusinessRuleResult result = instance.validate(items, code, message);
        assertFalse(result.isValid());

    }
    
    /**
     * Test of validate method, of class ValidateActiveDemographicStillExists.
     */
    @Test
    public void testValidate_valid() {
        List<PrsDemographicDetails> items = getDemographicsList(true);

        ValidateActiveDemographicStillExists instance = new ValidateActiveDemographicStillExists();

        BusinessRuleResult result = instance.validate(items, code, message);
        assertTrue(result.isValid());

    }
    
    
    private List<PrsDemographicDetails> getDemographicsList(boolean valid) {
        List<PrsDemographicDetails> data = new ArrayList<>();
        PrsDemographicDetails temp;
        
        GrsCtBooleanTypes yesType = mock(GrsCtBooleanTypes.class);
        when(yesType.getCtlNameCode()).thenReturn(CodeTableCodes.GrsCtBooleanTypes.YES.getValue());
        
        GrsCtBooleanTypes noType = mock(GrsCtBooleanTypes.class);
        when(noType.getCtlNameCode()).thenReturn(CodeTableCodes.GrsCtBooleanTypes.NO.getValue());
        
        GrsCtEndReasonTypes endTypes = mock(GrsCtEndReasonTypes.class);
        
        if (valid) {
            temp = mock(PrsDemographicDetails.class);
            when(temp.getActiveFlag()).thenReturn(yesType);
            data.add(temp);
            
            temp = mock(PrsDemographicDetails.class);
            when(temp.getActiveFlag()).thenReturn(yesType);
            data.add(temp);
            
            temp = mock(PrsDemographicDetails.class);
            when(temp.getActiveFlag()).thenReturn(noType);
            when(temp.getEndReasonCode()).thenReturn(endTypes);
            data.add(temp);
            
        } else {
            temp = mock(PrsDemographicDetails.class);
            when(temp.getActiveFlag()).thenReturn(yesType);
            data.add(temp);
            
            temp = mock(PrsDemographicDetails.class);
            when(temp.getActiveFlag()).thenReturn(noType);
            data.add(temp);
            
            temp = mock(PrsDemographicDetails.class);
            when(temp.getActiveFlag()).thenReturn(noType);
            when(temp.getEndReasonCode()).thenReturn(endTypes);
            data.add(temp);
        }
        
        return data;
    }
}