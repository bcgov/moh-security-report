package ca.bc.gov.health.plr.service.provider.security;

import ca.bc.gov.health.plr.dto.DtoAccessRestrictionData;
import ca.bc.gov.health.plr.ejb.entity.GrsAccessProfiles;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.PrsCtDataOwnerCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsPermissionsMap;
import ca.bc.gov.health.plr.service.distribution.JsonSerializer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import org.junit.Assert;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *
 * @author adebiyi.kuseju
 */
public class AuthorizationServiceTest {
    
    private AuthorizationService authorizationService;
    private Query query = mock(Query.class);
    private static final String ALL = "ALL";
    private static final String ANY = "ANY";
    
    public AuthorizationServiceTest() {
    }
    
    @Before
    public void setUp() throws Exception {
        authorizationService = new AuthorizationService();
        authorizationService.self = new AuthorizationService();
        authorizationService.serializer = new JsonSerializer<>();
        authorizationService.self.serializer = new JsonSerializer<>();
        EntityManager em  = mock(EntityManager.class);
        query = mock(Query.class);
        
        when(em.createNativeQuery(AuthorizationService.QUERY)).thenReturn(query);
        
        authorizationService.em = em;
        authorizationService.self.em = em;
    }
    
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_ReadAccess() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, "TEST_RECORD_TYPE=TP", ALL, providerType_ctlNameCode, dataOwnerCode, "Y", "N"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, null, providerType, dataOwnerCode, AuthorizationService.AccessType.READ);
        assertTrue(result);
    
    }
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_WriteAccess() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, "TEST_RECORD_TYPE=TP", ALL, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, null, providerType, dataOwnerCode, AuthorizationService.AccessType.WRITE);
        assertTrue(result);
    
    }

    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_NoReadAccess() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, "TEST_RECORD_TYPE=TP", ALL, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, null, providerType, dataOwnerCode, AuthorizationService.AccessType.READ);
        assertFalse(result);
    
    }
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_NoWriteAccess() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, "TEST_RECORD_TYPE=TP", ALL, providerType_ctlNameCode, dataOwnerCode, "Y", "N"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, null, providerType, dataOwnerCode, AuthorizationService.AccessType.WRITE);
        assertFalse(result);
    
    }
    
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_AnyNoReadAccess() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, null, providerType, dataOwnerCode, AuthorizationService.AccessType.READ);
        assertFalse(result);
    
    }
    
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_AnyNoWriteAccess() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwnerCode, "Y", "N"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, null, providerType, dataOwnerCode, AuthorizationService.AccessType.WRITE);
        assertFalse(result);
    
    }

    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_AnyReadAccess() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwnerCode, "Y", "N"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, null, providerType, dataOwnerCode, AuthorizationService.AccessType.READ);
        assertTrue(result);
    
    }
    
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_AnyWriteAccess() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, null, providerType, dataOwnerCode, AuthorizationService.AccessType.WRITE);
        assertTrue(result);
    
    }
    
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_AllWriteAccess_Column() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, null, providerType, dataOwnerCode, AuthorizationService.AccessType.WRITE);
        assertTrue(result);
    
    }
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_ReadAccess_NamedColumn() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String columnName = "FOO";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, dataOwnerCode, "Y", "N"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, columnName, providerType, dataOwnerCode, AuthorizationService.AccessType.READ);
        assertTrue(result);
    
    }
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_NoReadAccess_NamedColumn() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String columnName = "FOO";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, columnName, providerType, dataOwnerCode, AuthorizationService.AccessType.READ);
        assertFalse(result);
    
    }
    
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_ReadAccess_NamedColumn_All_Supercedes() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String columnName = "FOO";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[3][1];
        objectData[0] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        objectData[1] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwnerCode, "Y", "Y"};
        objectData[2] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, dataOwnerCode, "N", "N"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, columnName, providerType, dataOwnerCode, AuthorizationService.AccessType.READ);
        assertFalse(result);
        
        result = authorizationService.isAllowed(registryUserId, tableName, recordType, columnName, providerType, dataOwnerCode, AuthorizationService.AccessType.WRITE);
        assertFalse(result);
    
    }
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_ReadAccess_Different_OwnerCode() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String columnName = "FOO";
        String recordType = "TP";        
        String dataOwnerCode1 = "SHARED";
        String dataOwnerCode2 = "MULTIPLE";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[3][1];
        objectData[0] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, dataOwnerCode1, "N", "Y"};
        objectData[1] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwnerCode1, "N", "N"};
        objectData[2] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, "MULTIPLE", "Y", "N"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, columnName, providerType, dataOwnerCode2, AuthorizationService.AccessType.READ);
        assertTrue(result);
    
    }
    
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_WriteAccess_Different_OwnerCode() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String columnName = "FOO";
        String recordType = "TP";        
        String dataOwnerCode1 = "SHARED";
        String dataOwnerCode2 = "MULTIPLE";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[3][1];
        objectData[0] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, dataOwnerCode1, "N", "Y"};
        objectData[1] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwnerCode1, "N", "N"};
        objectData[2] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, "MULTIPLE", "N", "Y"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, columnName, providerType, dataOwnerCode2, AuthorizationService.AccessType.WRITE);
        assertTrue(result);
    
    }
    
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testNotAllowed_ReadAccess_Different_OwnerCode() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String columnName = "FOO";
        String recordType = "TP";        
        String dataOwnerCode1 = "SHARED";
        String dataOwnerCode2 = "MULTIPLE";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[3][1];
        objectData[0] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, dataOwnerCode1, "N", "Y"};
        objectData[1] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwnerCode1, "Y", "N"};
        objectData[2] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, "MULTIPLE", "N", "Y"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, columnName, providerType, dataOwnerCode2, AuthorizationService.AccessType.READ);
        assertFalse(result);
    
    }
    
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testNotAllowed_WriteAccess_Different_OwnerCode() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String columnName = "FOO";
        String recordType = "TP";        
        String dataOwnerCode1 = "SHARED";
        String dataOwnerCode2 = "MULTIPLE";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[3][1];
        objectData[0] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, dataOwnerCode1, "N", "Y"};
        objectData[1] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwnerCode1, "N", "Y"};
        objectData[2] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, "MULTIPLE", "Y", "N"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, columnName, providerType, dataOwnerCode2, AuthorizationService.AccessType.WRITE);
        assertFalse(result);
    
    }
    
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_NoReadAccess_NamedColumn_All_Supercedes() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String columnName = "FOO";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[2][1];
        objectData[0] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, dataOwnerCode, "Y", "Y"};
        objectData[1] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, columnName, providerType, dataOwnerCode, AuthorizationService.AccessType.READ);
        assertTrue(result);
    
    }
    
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_WriteAccess_NamedColumn() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String columnName = "FOO";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, columnName, providerType, dataOwnerCode, AuthorizationService.AccessType.WRITE);
        assertTrue(result);
    
    }
    
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_NoWriteAccess_NamedColumn() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String columnName = "FOO";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, dataOwnerCode, "Y", "N"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, columnName, providerType, dataOwnerCode, AuthorizationService.AccessType.WRITE);
        assertFalse(result);
    
    }
    
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_WriteAccess_NamedColumn_All_Supercedes() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String columnName = "FOO";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[2][1];
        objectData[0] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwnerCode, "Y", "Y"};
        objectData[1] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, dataOwnerCode, "Y", "N"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, columnName, providerType, dataOwnerCode, AuthorizationService.AccessType.READ);
        assertTrue(result);
        
        result = authorizationService.isAllowed(registryUserId, tableName, recordType, columnName, providerType, dataOwnerCode, AuthorizationService.AccessType.WRITE);
        assertFalse(result);
    
    }
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_Multiple_Any_And_All() throws Exception {
        
        String providerType_ctlNameCode = "HA";
        String tableName = "GRA_ADDRESS";      
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[3][1];
        objectData[0] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, "HA1", "N", "Y"};
        objectData[1] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, "HA2", "Y", "N"};
        objectData[2] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, "HA3", "N", "Y"};

        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, null, null, providerType, "HA1", AuthorizationService.AccessType.READ);
        assertFalse(result);
        
        result = authorizationService.isAllowed(registryUserId, tableName, null, null, providerType, "HA1", AuthorizationService.AccessType.WRITE);
        assertTrue(result);
        
        result = authorizationService.isAllowed(registryUserId, tableName, null, null, providerType, "HA2", AuthorizationService.AccessType.READ);
        assertTrue(result);
        
        result = authorizationService.isAllowed(registryUserId, tableName, null, null, providerType, "HA2", AuthorizationService.AccessType.WRITE);
        assertFalse(result);
        
        result = authorizationService.isAllowed(registryUserId, tableName, null, null, providerType, "HA3", AuthorizationService.AccessType.READ);
        assertFalse(result);
        
        result = authorizationService.isAllowed(registryUserId, tableName, null, null, providerType, "HA3", AuthorizationService.AccessType.WRITE);
        assertTrue(result);
    
    }
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_Multiple_Any_Mixed_Columns1() throws Exception {
        
        String providerType_ctlNameCode = "HA";
        String tableName = "GRA_ADDRESS";      
        String dataOwner = "MOH"; 
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[10][1];
        objectData[0] = new Object[] {tableName, ANY, "VALID_CPC_FLAG", providerType_ctlNameCode, dataOwner,"N","N"};
        objectData[1] = new Object[] {tableName, "CMNCTN_PRPS_TYP_CD=BC", "CITY_TXT", providerType_ctlNameCode, dataOwner,"N","N"};
        objectData[2] = new Object[] {tableName, "CMNCTN_PRPS_TYP_CD=CC", ALL, providerType_ctlNameCode, dataOwner,"N","N"};
        objectData[3] = new Object[] {tableName, ANY, "CITY_TXT", providerType_ctlNameCode, dataOwner,"N","N"};
        objectData[4] = new Object[] {tableName, ANY, "ADDRESS_LINE1_TXT", providerType_ctlNameCode, dataOwner,"N","N"};
        objectData[5] = new Object[] {tableName, ANY, "COUNTRY_CODE", providerType_ctlNameCode, dataOwner,"N","N"};
        objectData[6] = new Object[] {tableName, ANY, "POSTAL_CODE_OR_ZIP_TXT", providerType_ctlNameCode, dataOwner,"N","N"};
        objectData[7] = new Object[] {tableName, ANY, "ADDRESS_LINE3_TXT", providerType_ctlNameCode, dataOwner,"N","N"};
        objectData[8] = new Object[] {tableName, ANY, "PROVINCE_OR_STATE_TXT", providerType_ctlNameCode, dataOwner,"N","N"};
        objectData[9] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwner,"Y","Y"};


        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, null, "VALID_CPC_FLAG", providerType, dataOwner, AuthorizationService.AccessType.READ);
        assertFalse(result);
        
        result = authorizationService.isAllowed(registryUserId, tableName, null, "VALID_CPC_FLAG", providerType, dataOwner, AuthorizationService.AccessType.WRITE);
        assertFalse(result);
        
        result = authorizationService.isAllowed(registryUserId, tableName, null, null, providerType, dataOwner, AuthorizationService.AccessType.READ);
        assertTrue(result);
        
        result = authorizationService.isAllowed(registryUserId, tableName, null, null, providerType, dataOwner, AuthorizationService.AccessType.WRITE);
        assertTrue(result);
              
    
    }
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_Multiple_Any_Mixed_Columns2() throws Exception {
    String providerType_ctlNameCode = "DEN";
        String tableName = "PRS_DEMOGRAPHIC_DETAILS";      
        String dataOwner = "ACOP"; 
        
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[6][1];
        objectData[0] = new Object[] {tableName, ANY, "DATE_OF_BIRTH_DATE", providerType_ctlNameCode, dataOwner,"N","N"};
        objectData[1] = new Object[] {tableName, ANY, "DATE_OF_DEATH_DATE", providerType_ctlNameCode, dataOwner,"Y","N"};
        objectData[2] = new Object[] {tableName, ANY, "PROV_OR_STATE_OF_BIRTH_TXT", providerType_ctlNameCode, dataOwner,"N","N"};
        objectData[3] = new Object[] {tableName, ANY, "COUNTRY_OF_BIRTH_CODE", providerType_ctlNameCode, dataOwner,"N","N"};
        objectData[4] = new Object[] {tableName, ANY, "GENDER_CODE", providerType_ctlNameCode, dataOwner,"N","N"};
        objectData[5] = new Object[] {tableName, ANY, ALL, "HA", "MOH","Y","Y"};
        
                
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, null, "DATE_OF_DEATH_DATE", providerType, dataOwner, AuthorizationService.AccessType.READ);

    }
    
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_NoWriteAccess_NamedColumn_All_Supercedes() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String columnName = "FOO";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[2][1];
        objectData[0] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwnerCode, "Y", "N"};
        objectData[1] = new Object[] {tableName, ANY, columnName, providerType_ctlNameCode, dataOwnerCode, "Y", "Y"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, columnName, providerType, dataOwnerCode, AuthorizationService.AccessType.WRITE);
        assertTrue(result);
    
    }
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_AnyReadAccess_ContradictoryEntry() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[2][1];
        objectData[0] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        objectData[1] = new Object[] {tableName, "TEST_RECORD_TYPE=TP", ALL, providerType_ctlNameCode, dataOwnerCode, "Y", "N"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, null, providerType, dataOwnerCode, AuthorizationService.AccessType.READ);
        assertTrue(result);
    
    }
    
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_AnyNoWriteAccess_ContradictoryEntry1() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[2][1];
        objectData[0] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwnerCode, "Y", "N"};
        objectData[1] = new Object[] {tableName, "TEST_RECORD_TYPE=TP", ALL, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, null, providerType, dataOwnerCode, AuthorizationService.AccessType.WRITE);
        assertTrue(result);
    
    }
    
    
    /**
     * Test of isAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsAllowed_AnyNoWriteAccess_ContradictoryEntry2() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[2][1];
        objectData[0] = new Object[] {tableName, ANY, ALL, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        objectData[1] = new Object[] {tableName, "TEST_RECORD_TYPE=TP", ALL, providerType_ctlNameCode, dataOwnerCode, "Y", "N"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isAllowed(registryUserId, tableName, recordType, null, providerType, dataOwnerCode, AuthorizationService.AccessType.WRITE);
        assertFalse(result);
    
    }
    
    /**
     * Test of isProviderAdditionAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsProviderAdditionAllowed_No() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String tableName = "GRA_ADDRESS";
        String recordType = "TEST_RECORD_TYPE=TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, recordType, ALL, providerType_ctlNameCode, dataOwnerCode, "Y", "N"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isProviderAdditionAllowed(registryUserId);
        assertFalse(result);
    
    }
    
     /**
     * Test of isProviderAdditionAllowed method, of class AuthorizationService.
     */
    @Test
    public void testIsProviderAdditionAllowed_Yes() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String recordType = "TP";        
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
                
        Object[][] objectData = new Object[5][1];
        objectData[0] = new Object[] {"GRS_ADDRESS", recordType, ALL, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        objectData[1] = new Object[] {"PRS_DEMOGRAPHIC_DETAIL", recordType, ALL, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        objectData[2] = new Object[] {"GRS_IDENTIFIER", recordType, ALL, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        objectData[3] = new Object[] {"PRS_STATUS", recordType, ALL, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        objectData[4] = new Object[] {"GRS_PERSONAL_NAME", recordType, ALL, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.isProviderAdditionAllowed(registryUserId);
        assertTrue(result);
    
    }
    
    /**
     * Test of hasPermissionToAddProviderOfRoleType method, of class AuthorizationService.
     */
    @Test
    public void testHasPermissionToAddProviderOfRoleType_No() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String recordType = "TP";  
        String tableName = "GRS_ADDRESS";
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
                
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, recordType, ALL, providerType_ctlNameCode, dataOwnerCode, "N", "N"};        
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.hasPermissionToAddProviderOfRoleType(registryUserId, providerType);
        assertFalse(result);
    
    }
    
    
     /**
     * Test of hasPermissionToAddProviderOfRoleType method, of class AuthorizationService.
     */
    @Test
    public void testHasPermissionToAddProviderOfRoleType_Yes() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String recordType = "TP";  
        String tableName = "GRS_ADDRESS";
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
                
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, recordType, ALL, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};        
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.hasPermissionToAddProviderOfRoleType(registryUserId, providerType);
        assertTrue(result);
    
    }
    
    
    /**
     * Test of hasPermissionToAddProviderOfRoleType method, of class AuthorizationService.
     */
    @Test
    public void testHasPermissionToAddProviderOfRoleType_Any_No() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String recordType = ANY;  
        String tableName = "GRS_ADDRESS";
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
                
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, recordType, ALL, providerType_ctlNameCode, dataOwnerCode, "N", "N"};        
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.hasPermissionToAddProviderOfRoleType(registryUserId, providerType);
        assertFalse(result);
    
    }
    
    
     /**
     * Test of hasPermissionToAddProviderOfRoleType method, of class AuthorizationService.
     */
    @Test
    public void testHasPermissionToAddProviderOfRoleType_Any_Yes() throws Exception {
        
        String providerType_ctlNameCode = "MD";
        String recordType = ANY;  
        String tableName = "GRS_ADDRESS";
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
                
        Object[][] objectData = new Object[1][1];
        objectData[0] = new Object[] {tableName, recordType, ALL, providerType_ctlNameCode, dataOwnerCode, "N", "Y"};        
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        boolean result = authorizationService.hasPermissionToAddProviderOfRoleType(registryUserId, providerType);
        assertTrue(result);
    
    }
    
    
     /**
     * Test of getAllowedProviderTypes method, of class AuthorizationService.
     */
    @Test
    public void testGetAllowedProviderTypes_Yes() throws Exception {
        
        String recordType = ANY;  
        String tableName = "GRS_ADDRESS";
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);       
                
        Object[][] objectData = new Object[3][1];
        objectData[0] = new Object[] {tableName, recordType, ALL, "MD", dataOwnerCode, "N", "Y"};  
        objectData[1] = new Object[] {tableName, recordType, ALL, "RAN", dataOwnerCode, "Y", "N"};
        objectData[2] = new Object[] {tableName, recordType, ALL, "RN", dataOwnerCode, "N", "Y"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);
        
        Set<String> expected = new HashSet<>();
        expected.add("MD");
        expected.add("RAN");
        expected.add("RN");

        Set<String> result = authorizationService.getAllowedProviderTypes(registryUserId);
        assertEquals(expected, result);
    
    }
    
     /**
     * Test of getAllowedProviderTypes method, of class AuthorizationService.
     */
    @Test
    public void testGetAllowedProviderTypes_No() throws Exception {
        
        String recordType = ANY;  
        String tableName = "GRS_ADDRESS";
        String dataOwnerCode = "SHARED";
                
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        when(registryUserId.getRuId()).thenReturn(1l);       
                
        Object[][] objectData = new Object[3][1];
        objectData[0] = new Object[] {tableName, recordType, ALL, "MD", dataOwnerCode, "N", "N"};  
        objectData[1] = new Object[] {tableName, recordType, ALL, "RAN", dataOwnerCode, "N", "N"};
        objectData[2] = new Object[] {tableName, recordType, ALL, "RN", dataOwnerCode, "N", "N"};
        
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);
        
        Set<String> result = authorizationService.getAllowedProviderTypes(registryUserId);
        assertTrue(result.isEmpty());
    
    }
    
    
    
    @Test
    public void testRestrictedColumnsforDemographics(){
        String providerType_ctlNameCode = "DEN";
        String tableName = "PRS_DEMOGRAPHIC_DETAIL";
        
        PrsCtDataOwnerCodes dataOwnerACOP = new PrsCtDataOwnerCodes();
        dataOwnerACOP.setCtlNameCode("ACOP");
        
        PrsCtDataOwnerCodes dataOwnerMOH = new PrsCtDataOwnerCodes();
        dataOwnerMOH.setCtlNameCode("MOH");
        
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        List<GrsAccessProfiles> grsAccessProfileses = new ArrayList<>();
        GrsAccessProfiles accessProfile = mock(GrsAccessProfiles.class);
        when(accessProfile.getDataOwnerCode()).thenReturn(dataOwnerACOP);
        grsAccessProfileses.add(accessProfile);
        GrsAccessProfiles accessProfile2 = mock(GrsAccessProfiles.class);
        when(accessProfile2.getDataOwnerCode()).thenReturn(dataOwnerMOH);
        grsAccessProfileses.add(accessProfile2);
        
        when(registryUserId.getGrsAccessProfilesList()).thenReturn(grsAccessProfileses);
        when(registryUserId.getRuId()).thenReturn(349l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[3][1];
        objectData[0] = new Object[] {tableName, ANY, "DATE_OF_BIRTH_DATE", providerType_ctlNameCode, dataOwnerACOP.getCtlNameCode(),"N","Y"};
        objectData[1] = new Object[] {tableName, ANY, "DATE_OF_DEATH_DATE", providerType_ctlNameCode, dataOwnerACOP.getCtlNameCode(),"Y","N"};
        objectData[2] = new Object[] {tableName, ANY, ALL, "HA", "MOH","Y","Y"};
        
                
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        DtoAccessRestrictionData result = authorizationService.getColumnRestrictions(registryUserId, tableName, null, providerType, "ACOP");
        Assert.assertNotNull(result.getUnwritables());
        Assert.assertEquals("DATE_OF_DEATH_DATE", result.getUnwritables().get(0));
        Assert.assertNotNull(result.getUnreadables());
        Assert.assertEquals("DATE_OF_BIRTH_DATE", result.getUnreadables().get(0));
    }
    
    @Test
    public void testAllAccessForColumns() {
        String providerType_ctlNameCode = "DEN";
        String tableName = "PRS_DEMOGRAPHIC_DETAIL";
        
        PrsCtDataOwnerCodes dataOwnerACOP = new PrsCtDataOwnerCodes();
        dataOwnerACOP.setCtlNameCode("ACOP");
        
        PrsCtDataOwnerCodes dataOwnerMOH = new PrsCtDataOwnerCodes();
        dataOwnerMOH.setCtlNameCode("MOH");
        
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        List<GrsAccessProfiles> grsAccessProfileses = new ArrayList<>();
        GrsAccessProfiles accessProfile = mock(GrsAccessProfiles.class);
        when(accessProfile.getDataOwnerCode()).thenReturn(dataOwnerACOP);
        grsAccessProfileses.add(accessProfile);
        GrsAccessProfiles accessProfile2 = mock(GrsAccessProfiles.class);
        when(accessProfile2.getDataOwnerCode()).thenReturn(dataOwnerMOH);
        grsAccessProfileses.add(accessProfile2);

        when(registryUserId.getGrsAccessProfilesList()).thenReturn(grsAccessProfileses);
        when(registryUserId.getRuId()).thenReturn(349l);

        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn("HA");

        Object[][] objectData = new Object[3][1];
        objectData[0] = new Object[]{tableName, ANY, "DATE_OF_BIRTH_DATE", providerType_ctlNameCode, dataOwnerACOP, "Y", "N"};
        objectData[1] = new Object[]{tableName, ANY, "DATE_OF_DEATH_DATE", providerType_ctlNameCode, dataOwnerACOP, "N", "Y"};
        objectData[2] = new Object[]{tableName, ANY, ALL, "HA", "MOH", "Y", "Y"};

        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        DtoAccessRestrictionData result = authorizationService.getColumnRestrictions(registryUserId, tableName, null, providerType, "MOH");

    }
    
    
    @Test
    public void testRestrictedColumnsforStatuses(){
        String providerType_ctlNameCode = "DEN";
        String tableName = "PRS_STATUS";
        PrsCtDataOwnerCodes dataOwner_ACOP = new PrsCtDataOwnerCodes();
        dataOwner_ACOP.setCtlNameCode("ACOP");
        PrsCtDataOwnerCodes dataOwner_MOH = new PrsCtDataOwnerCodes();
        dataOwner_MOH.setCtlNameCode("MOH");
        
        GrsRegistryUsers registryUserId = mock(GrsRegistryUsers.class);
        List<GrsAccessProfiles> grsAccessProfileses = new ArrayList<>();
        GrsAccessProfiles accessProfile = mock(GrsAccessProfiles.class);
        when(accessProfile.getDataOwnerCode()).thenReturn(dataOwner_ACOP);
        grsAccessProfileses.add(accessProfile);
        GrsAccessProfiles accessProfile2 = mock(GrsAccessProfiles.class);
        when(accessProfile2.getDataOwnerCode()).thenReturn(dataOwner_MOH);
        grsAccessProfileses.add(accessProfile2);
        
        when(registryUserId.getGrsAccessProfilesList()).thenReturn(grsAccessProfileses);
        when(registryUserId.getRuId()).thenReturn(349l);
        
        PrsCtProviderRoleTypes providerType = mock(PrsCtProviderRoleTypes.class);
        when(providerType.getCtlNameCode()).thenReturn(providerType_ctlNameCode);
        
        Object[][] objectData = new Object[3][1];
        objectData[0] = new Object[] {tableName, ANY, "STATUS_REASON_CODE", providerType_ctlNameCode, dataOwner_ACOP.getCtlNameCode(),"Y","N"};
        objectData[1] = new Object[] {tableName, ANY, "STATUS_TYPE_CODE", providerType_ctlNameCode, dataOwner_ACOP.getCtlNameCode(),"N","Y"};
        objectData[2] = new Object[] {tableName, ANY, ALL, "HA", "MOH","Y","Y"};
        
                
        List<Object[]> data = Arrays.asList(objectData);
        when(query.setParameter(1, registryUserId.getRuId())).thenReturn(query);
        when(query.getResultList()).thenReturn(data);

        DtoAccessRestrictionData result = authorizationService.getColumnRestrictions(registryUserId, tableName, null, providerType, "ACOP");
        Assert.assertNotNull(result.getUnreadables());
        Assert.assertEquals("STATUS_TYPE_CODE", result.getUnreadables().get(0));
        Assert.assertNotNull(result.getUnwritables());
        Assert.assertEquals("STATUS_REASON_CODE", result.getUnwritables().get(0));

    }
    
}