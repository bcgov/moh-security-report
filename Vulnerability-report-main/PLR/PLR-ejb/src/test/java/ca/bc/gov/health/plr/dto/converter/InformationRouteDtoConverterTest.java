package ca.bc.gov.health.plr.dto.converter;

import ca.bc.gov.health.plr.dto.converter.InformationRouteDtoConverter;
import ca.bc.gov.health.plr.dto.provider.InformationRouteDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtDocumentTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtMechanisms;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCommunPurposeTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtDataOwnerCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsInformationRoutes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviderExpertises;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocations;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import java.util.Calendar;
import java.util.Date;
import javax.persistence.EntityManager;
import static org.junit.Assert.assertEquals;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *
 * @author ian.scott
 */
public class InformationRouteDtoConverterTest {
    
    private InformationRouteDtoConverter converter;
    private InformationRouteDto instance;
    private EntityManager mockEm;
    private CodesDao mockCodesDao;

    public InformationRouteDtoConverterTest() {
    }

   @Before
    public void setUp() {
        converter = new InformationRouteDtoConverter();
        mockEm = mock(EntityManager.class);
        converter.em = mockEm;

        mockCodesDao = mock(CodesDao.class);
        converter.codesDao = mockCodesDao;

        converter.dtoConverter =  new DtoConverter();
        converter.dtoConverter.codesDao = mockCodesDao;
        
        instance = new InformationRouteDto();
        
        // This is needed to avoid nullpointer exception when testing conversion for some fields
        instance.setCommunicationPurposeId(Long.MIN_VALUE);
        instance.setMechanismTypeCode("");
        
        PrsCtCommunPurposeTypes prsCtCommunPurposeTypes = mock(PrsCtCommunPurposeTypes.class);
        GrsCtBooleanTypes grsCtBooleanTypesYes = mock(GrsCtBooleanTypes.class);
        GrsCtBooleanTypes grsCtBooleanTypesNo = mock(GrsCtBooleanTypes.class);
        
        when(grsCtBooleanTypesNo.getCtlNameCode()).thenReturn(CodeTableCodes.GrsCtBooleanTypes.NO.getValue());
        when(grsCtBooleanTypesYes.getCtlNameCode()).thenReturn(CodeTableCodes.GrsCtBooleanTypes.YES.getValue());
        when(prsCtCommunPurposeTypes.getCtlNameCode()).thenReturn(CodeTableCodes.PrsCtCommunPurposeTypes.BUSINESS_CONTACT.getValue());
        when(mockCodesDao.lookup(PrsCtCommunPurposeTypes.class, instance.getCommunicationPurposeCode())).thenReturn(prsCtCommunPurposeTypes);
        when(mockCodesDao.lookup(PrsCtCommunPurposeTypes.class, CodeTableCodes.PrsCtCommunPurposeTypes.BUSINESS_CONTACT)).thenReturn(prsCtCommunPurposeTypes);
        when(mockCodesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES)).thenReturn(grsCtBooleanTypesYes);
        when(mockCodesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.NO)).thenReturn(grsCtBooleanTypesNo);
    }
    
    @Test
    public void testToEntity_Id() {
        instance.setId(Long.MIN_VALUE);
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(instance.getId(), result.getIrtId());
    }
    
    @Test
    public void testToEntity_PauthPauthId() {
        Long pauthId = Long.MIN_VALUE;
        
        instance.setPauthId(pauthId);
        PrsProviders prsProvider = mock(PrsProviders.class);
        
        when(prsProvider.getPauthId()).thenReturn(pauthId);
        when(converter.em.find(PrsProviders.class, instance.getPauthId())).thenReturn(prsProvider);
        
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(instance.getPauthId(), result.getPauthPauthId().getPauthId());
    }
    
    
    @Test
    public void testToEntity_RuRuId() {
        Long ruRuId = Long.MIN_VALUE;
        
        instance.setRuRuId(ruRuId);
        GrsRegistryUsers grsResgitryUser = mock(GrsRegistryUsers.class);
        
        when(grsResgitryUser.getRuId()).thenReturn(ruRuId);
        when(converter.em.find(GrsRegistryUsers.class, instance.getRuRuId())).thenReturn(grsResgitryUser);
        
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(instance.getRuRuId(), result.getRuRuId().getRuId());
    }
    
    
    
    @Test
    public void testToEntity_WlWLId() {
        Long wlWLId = Long.MIN_VALUE;
        
        instance.setWlWlId(wlWLId);
        PrsWorkLocations prsWorkLocation = mock(PrsWorkLocations.class);
        
        when(prsWorkLocation.getWlId()).thenReturn(wlWLId);
        when(converter.em.find(PrsWorkLocations.class, instance.getWlWlId())).thenReturn(prsWorkLocation);
        
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(instance.getWlWlId(), result.getWlWlId().getWlId());
    }
    
    
    
    @Test
    public void testToEntity_ActiveYesFlag() {
        Long ctlId = Long.MIN_VALUE;
        
        instance.setActive(true);
        GrsCtBooleanTypes booleanType = mock(GrsCtBooleanTypes.class);
        
        when(booleanType.getCtlId()).thenReturn(ctlId);
        when(mockCodesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES)).thenReturn(booleanType);
        
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(booleanType.getCtlId(), result.getActiveFlag().getCtlId());
    }
    
    
    @Test
    public void testToEntity_ActiveNoFlag() {
        Long ctlId = Long.MIN_VALUE;
        
        instance.setActive(false);
        GrsCtBooleanTypes booleanType = mock(GrsCtBooleanTypes.class);
        
        when(booleanType.getCtlId()).thenReturn(ctlId);
        when(mockCodesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.NO)).thenReturn(booleanType);
        
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(booleanType.getCtlId(), result.getActiveFlag().getCtlId());
    }
    
    @Test
    public void testToEntity_EndReasonCode() {
        Long ctlId = Long.MIN_VALUE;
        String endReasonCode = "DUMB";
        
        instance.setEndReasonCode(endReasonCode);
        GrsCtEndReasonTypes booleanType = mock(GrsCtEndReasonTypes.class);
        
        when(booleanType.getCtlId()).thenReturn(ctlId);
        when(mockCodesDao.lookup(GrsCtEndReasonTypes.class, endReasonCode)).thenReturn(booleanType);
        
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(booleanType.getCtlId(), result.getEndReasonCode().getCtlId());
    }
            
    @Test
    public void testToEntity_EndReasonCodeId() {
        Long ctlId = Long.MIN_VALUE;
        
        instance.setEndReasonCodeId(ctlId);
        GrsCtEndReasonTypes booleanType = mock(GrsCtEndReasonTypes.class);
                
        when(booleanType.getCtlId()).thenReturn(ctlId);
        when(mockCodesDao.lookup(GrsCtEndReasonTypes.class, ctlId)).thenReturn(booleanType);
        
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(booleanType.getCtlId(), result.getEndReasonCode().getCtlId());
    }
    
    @Test
    public void testToEntity_WorkLocationChid() {
        Long workLocationIdentifier = Long.MIN_VALUE;
        
        instance.setWorkLocationIdentifier(workLocationIdentifier);        
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(instance.getWorkLocationIdentifier(), result.getWorkLocationChid());
    }

    @Test
    public void testToEntity_DocumentTypeId() {
        Long ctlId = Long.MIN_VALUE;
        
        instance.setDocumentTypeId(ctlId);
        GrsCtDocumentTypes documentType = mock(GrsCtDocumentTypes.class);
        
        when(documentType.getCtlId()).thenReturn(ctlId);
        when(mockCodesDao.lookup(GrsCtDocumentTypes.class, ctlId)).thenReturn(documentType);
        
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(documentType.getCtlId(), result.getDocumentTypeCode().getCtlId());
    }
    
    @Test
    public void testToEntity_EffectiveStartDate() {
        final Date effectiveStartDate = new Date();
        
        instance.setEffectiveStartDate(effectiveStartDate);        
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(effectiveStartDate, result.getEffectiveStartDate());
    }
    
    
    @Test
    public void testToEntity_EffectiveEndDate() {
        final Date effectiveEndDate = new Date();
        
        instance.setEffectiveEndDate(effectiveEndDate);        
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(effectiveEndDate, result.getEffectiveEndDate());
        
        instance.setEffectiveEndDate(null);
        result = converter.toEntity(instance);
        Calendar cal = Calendar.getInstance();
        cal.set(9999, 11, 30, 0, 0, 0);
        cal.set(Calendar.MILLISECOND, 0);
        assertEquals(result.getEffectiveEndDate().getTime(), cal.getTime().getTime());
        
        
    }
    
    
    @Test
    public void testToEntity_UserChid() {
        final String userChid = "DUMB";
        
        instance.setUserChid(userChid);        
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(userChid, result.getUserChid());
    }
    
    
    @Test
    public void testToEntity_CreatedDate() {
        final Date createdDate = new Date();
        
        instance.setCreatedDate(createdDate);        
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(createdDate, result.getCreatedDts());
    }
    
    
    @Test
    public void testToEntity_InvalidatedDate() {
        final Date invalidatedDate = new Date();
        
        instance.setInvalidatedDate(invalidatedDate);        
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(invalidatedDate, result.getInvalidatedDts());
    }
    
    @Test
    public void testToEntity_DataOwnerCode() {
        final Long ctlId = Long.MAX_VALUE;
        final String dataOwnerCode = "DUMB";
        
        instance.setDataOwnerCode(dataOwnerCode);
        PrsCtDataOwnerCodes dataOwnerCodeEntity = mock(PrsCtDataOwnerCodes.class);
        
        when(mockCodesDao.lookup(PrsCtDataOwnerCodes.class, dataOwnerCode)).thenReturn(dataOwnerCodeEntity);
        when(dataOwnerCodeEntity.getCtlId()).thenReturn(ctlId);        
        
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(ctlId, result.getDataOwnerCode().getCtlId());
    }
    
    
    @Test
    public void testToEntity_Default_GenerationNum() {
       
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(DatabaseConstants.DEFAULT_GENERATION_NUM.longValue(), result.getGenerationNum());
    }
    
    @Test
    public void testToEntity_GenerationNum() {
        final Long generationNum = Long.MAX_VALUE;
        
        instance.setGenerationNum(generationNum);        
        PrsInformationRoutes result = converter.toEntity(instance);
        assertEquals(generationNum.longValue(), result.getGenerationNum());
    }
}
