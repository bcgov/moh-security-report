/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.dto.converter;

import ca.bc.gov.health.plr.dto.converter.RegistryUserDto;
import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsElectronicAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsOrgNames;
import ca.bc.gov.health.plr.ejb.entity.GrsPersonNames;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.GrsTelephones;
import ca.bc.gov.health.plr.ejb.entity.util.EntityUtils;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.entityManagerProxy;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.registryUserDtoConverter;
import java.lang.reflect.InvocationTargetException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.beanutils.PropertyUtils;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.BeforeClass;

/**
 *
 * @author adebiyi.kuseju
 */
public class RegistryUserDtoConverterTest extends IntegrationSetup {

    private static List<GrsRegistryUsers> users;
    
    private static final String USER_CHID = "plr-reg-admin@00002855";

    public RegistryUserDtoConverterTest() {
    }

    @BeforeClass
    public static void SetUpClass() {
        users = entityManagerProxy.namedQuery("GrsRegistryUsers.findAll");
        //yesFlag = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES);
    }

    /**
     * Test of toDTO method, of class RegistryUserDtoConverter.
     */
    @Test
    public void testToDTO_multiple() {
        List<RegistryUserDto> result = registryUserDtoConverter.toDTO(users);
        assertTrue(result.size() == users.size());
    }

    /**
     * Test of toDTO method, of class RegistryUserDtoConverter.
     */
    @Test
    public void testToDTO_single() {
        GrsRegistryUsers regUser = users.get(0);
        RegistryUserDto result = registryUserDtoConverter.toDTO(regUser);

        assertEquals(regUser.getRuId(), result.getId());
        assertEquals(regUser.getRuTypeCode().getCtlNameCode(), result.getRegUserType());
        assertEquals(regUser.getRuTypeCode().getCtlId(), result.getRegUserTypeId());

        confirmSizeEqual(regUser.getGrsPersonNamesList(), result.getPersonNameDtoList());
        confirmSizeEqual(regUser.getGrsOrgNamesList(), result.getOrgNameDtoList());
        confirmSizeEqual(regUser.getGrsAddressesList(), result.getAddressDtoList());
        confirmSizeEqual(regUser.getGrsElectronicAddressesList(), result.getElectronicAddressDtoList());
        confirmSizeEqual(regUser.getGrsTelephonesList(), result.getTelecomDtoList());

        GrsPersonNames personName = (GrsPersonNames) getActive(regUser.getGrsPersonNamesList());
        if (personName != null) {
            assertEquals(personName.getNmId(), result.getActivePersonNameDto().getId());
        }
        
        GrsOrgNames orgName = (GrsOrgNames) getActive(regUser.getGrsOrgNamesList());
        if (orgName != null) {
            assertEquals(orgName.getNmId(), result.getActiveOrgNameDto().getId());
        }
        
        GrsAddresses addy = (GrsAddresses) getActive(regUser.getGrsAddressesList());
        if (addy != null) {
            assertEquals(addy.getAddrId(), result.getActiveAddressDto().getId());
        }
        
        GrsElectronicAddresses eAddy = (GrsElectronicAddresses) getActive(regUser.getGrsElectronicAddressesList());
        if (eAddy != null) {
            assertEquals(eAddy.getEaddrId(), result.getActiveElectronicAddressDto().getId());
        }
        
        GrsTelephones tel = (GrsTelephones) getActive(regUser.getGrsTelephonesList());
        if (tel != null) {
            assertEquals(tel.getPhonId(), result.getActiveTelecomDto().getId());
        }

    }

    /**
     * Test of toEntity method, of class RegistryUserDtoConverter.
     */
    @Test
    public void testToEntity() {
        GrsRegistryUsers regUser = users.get(0);
        RegistryUserDto dto = registryUserDtoConverter.toDTO(regUser);
        GrsRegistryUsers result = registryUserDtoConverter.toEntity(dto);

        assertEquals(regUser.getRuId(), result.getRuId());
        assertEquals(regUser.getRuTypeCode(), result.getRuTypeCode());

        confirmSizeEqual(regUser.getGrsPersonNamesList(), result.getGrsPersonNamesList());
        confirmSizeEqual(regUser.getGrsOrgNamesList(), result.getGrsOrgNamesList());
        confirmSizeEqual(regUser.getGrsAddressesList(), result.getGrsAddressesList());
        confirmSizeEqual(regUser.getGrsElectronicAddressesList(), result.getGrsElectronicAddressesList());
        confirmSizeEqual(regUser.getGrsTelephonesList(), result.getGrsTelephonesList());

    }
    
    /**
     * Test of toEntity method, of class RegistryUserDtoConverter.
     */
    @Test
    public void testToEntity_NewEntity() {
        GrsRegistryUsers regUser = users.get(0);
        RegistryUserDto dto = registryUserDtoConverter.toDTO(regUser);
        
        // Set id to null to mimic 
        dto.setId(null);
        GrsRegistryUsers result = registryUserDtoConverter.toEntity(dto);

        assertNull(result.getRuId());
        assertEquals(regUser.getRuTypeCode(), result.getRuTypeCode());
        assertEquals(regUser.getActiveFlag(), result.getActiveFlag());
        assertEquals(regUser.getPartyPartyId(), result.getPartyPartyId());
        assertEquals(regUser.getEffectiveStartDate(), result.getEffectiveStartDate());
        assertEquals(regUser.getEffectiveEndDate(), result.getEffectiveEndDate());
        assertEquals(regUser.getInvalidatedDts(), result.getInvalidatedDts());
        assertEquals(regUser.getCreatedDts(), result.getCreatedDts());
//        assertEquals(regUser.getUserChid(), result.getUserChid());
        assertEquals(regUser.getEndReasonCode(), result.getEndReasonCode());
        assertEquals(USER_CHID, result.getUserChid());

        confirmSizeEqual(regUser.getGrsPersonNamesList(), result.getGrsPersonNamesList());
        if(result.getGrsPersonNamesList() != null && !result.getGrsPersonNamesList().isEmpty()){
            assertEquals(result.getGrsPersonNamesList().iterator().next().getUserChid(), USER_CHID);
        }
        
        confirmSizeEqual(regUser.getGrsOrgNamesList(), result.getGrsOrgNamesList());
        if(result.getGrsOrgNamesList() != null && !result.getGrsOrgNamesList().isEmpty()){
            assertEquals(result.getGrsOrgNamesList().iterator().next().getUserChid(), USER_CHID);
        }
        confirmSizeEqual(regUser.getGrsAddressesList(), result.getGrsAddressesList());
        if(result.getGrsAddressesList() != null && !result.getGrsAddressesList().isEmpty()){
            assertEquals(result.getGrsAddressesList().iterator().next().getUserChid(), USER_CHID);
        }
        
        confirmSizeEqual(regUser.getGrsElectronicAddressesList(), result.getGrsElectronicAddressesList());
        if(result.getGrsElectronicAddressesList() != null && !result.getGrsElectronicAddressesList().isEmpty()){
            assertEquals(result.getGrsElectronicAddressesList().iterator().next().getUserChid(), USER_CHID);
        }
        confirmSizeEqual(regUser.getGrsTelephonesList(), result.getGrsTelephonesList());
        if(result.getGrsTelephonesList() != null && !result.getGrsTelephonesList().isEmpty()){
            assertEquals(result.getGrsTelephonesList().iterator().next().getUserChid(), USER_CHID);
        }

    }

    private void confirmSizeEqual(List<?> left, List<?> right) {

        if (left != null && right != null) {
            assertTrue(left.size() == right.size());
        }

    }

    private Object getActive(List<?> list) {
        Object temp = null;
        try {
            if (list != null) {
                for (Object item : list) {
                    if (EntityUtils.isActive((GrsCtBooleanTypes) PropertyUtils.getProperty(item, "activeFlag"))) {
                        temp = item;
                        break;
                    }
                }
            }
        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException ex) {
            Logger.getLogger(AuditListener.class.getName()).log(Level.WARNING, ex.getMessage());
        }
        return temp;
    }
}