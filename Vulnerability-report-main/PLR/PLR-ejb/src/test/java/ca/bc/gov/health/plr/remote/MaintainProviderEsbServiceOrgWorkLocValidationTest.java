/*
 * *********************************************************************************************************************
 *  Copyright (c) 2018, Ministry of Health, BC.                                                                        *
 *                                                                                                                     *
 *  All rights reserved.                                                                                               *
 *    This information contained herein may not be used in whole                                                       *
 *    or in part without the express written consent of the                                                            *
 *    Government of British Columbia, Canada.                                                                          *
 *                                                                                                                     *
 *  Revision Control Information                                                                                       *
 *  File:                $Id::                                                                                       $ *
 *  Date of Last Commit: $Date::                                                                                     $ *
 *  Revision Number:     $Rev::                                                                                      $ *
 *  Last Commit by:      $Author::                                                                                   $ *
 *                                                                                                                     *
 * *********************************************************************************************************************
 */
package ca.bc.gov.health.plr.remote;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.BatchRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.JurisdictionNameCodeDto;
import ca.bc.gov.health.plr.dto.provider.esb.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto;
import static ca.bc.gov.health.plr.remote.MaintainProviderEsbTestBuilder.getAddress;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.maintainProviderEsbService;
import ca.bc.gov.health.plr.util.SpoofedUserHelper;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.UUID;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
public class MaintainProviderEsbServiceOrgWorkLocValidationTest extends MaintainProviderEsbTestBuilder {

    static final String IDENTIFIER_ORG_EC = "ORGEC";
    static final String ORG_ID_TYPE_CODE = "ORGID";
    
    @BeforeClass
    public static void setUp() {
        SpoofedUserHelper.currentUser = null;
        mainRequest = new MaintainProviderRequest();
        mainRequest.setRegistryUserOrgId("plr-reg-admin");
        mainRequest.setProviderDetails(new ProviderDetails());
        mainRequest.getProviderDetails().setProviderType("IND");
        mainRequest.getProviderDetails().setType("DEN");
        mainRequest.getProviderDetails().setJurisdiction(new JurisdictionNameCodeDto());
        mainRequest.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");
        addIdentifier(mainRequest);
        batchRequest = new BatchRequest();
        Collection<MaintainProviderRequest> requests = new HashSet<>();
        requests.add(mainRequest);
        batchRequest.setMaintainProviderRequests(requests);
        clearEntities();
    }

    @Before
    public void setUpMethods() {
        mainRequest.setRegistryUserOrgId("plr-reg-admin");
    }

    @Test
    public void testAddProvider_Org_Telecom_EmergencyContact() {
        MaintainProviderRequest request = createRequest_ForAdd_Provider();
        request.getProviderDetails().setProviderType("ORG");
        
        OrgNameDto orgNameDto = request.getProviderDetails().getOrgNames().get(0);
        orgNameDto.setLongName("TESTORGEMERGCONTACT");
        orgNameDto.setName("ORGEC");
        orgNameDto.setTypeCode("CRED");
        orgNameDto.setEffectiveStartDate(EFF_START_DATE);

        // Set telecom values with communicationPurposeCode = 'EC' emergency contact
        request.getProviderDetails().getTelecommunication().get(0).setCommunicationPurposeCode("EC");

        // Send the message.
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);

        // Assert expected Acknowledgements/warnings.
        this.regExpMatch(response.getAcknowledgments(), ".*7077.*");
    }
    
    @Test
    public void testAddProvider_Org_Address_EmergencyContact() {
        MaintainProviderRequest request = createRequest_ForAdd_Provider();
        request.getProviderDetails().setProviderType("ORG");
        
        OrgNameDto orgNameDto = request.getProviderDetails().getOrgNames().get(0);
        orgNameDto.setLongName("TESTORGADDRESSEMERGCONTACT");
        orgNameDto.setName("ONEORG01");
        orgNameDto.setTypeCode("CRED");
        orgNameDto.setEffectiveStartDate(EFF_START_DATE);

        // Set Telecom values with communicationPurposeCode = 'DC' non emergency contact
        // and Address values with communicationPurposeCode = 'EC'
        request.getProviderDetails().getTelecommunication().get(0).setCommunicationPurposeCode("DC");
        request.getProviderDetails().getAddresses().get(0).setCommunicationPurposeCode("EC");
        
        // Send the message.
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);

        // Assert expected Acknowledgements/warnings.
        this.regExpMatch(response.getAcknowledgments(), ".*7077.*");
    }
    
    @Test
    public void testAddProvider_WorkLoc_Telecom_Emergency(){
        MaintainProviderRequest request = createRequest_ForIndiv_Provider();
        
        List<TelecommunicationDto> telecommunications = new ArrayList<>();
        ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto wlTelecomDto = request.getProviderDetails().getTelecommunication().get(0);
        wlTelecomDto.setCommunicationPurposeCode("EC");
        wlTelecomDto.setAreaCode("255");
        wlTelecomDto.setNumber("4447777");
        wlTelecomDto.setTypeCode("T");
        wlTelecomDto.setEffectiveStartDate(EFF_START_DATE);

        telecommunications.add(wlTelecomDto);
        
        request.getProviderDetails().getWorkLocationList().get(0).setTelecommunications(telecommunications);
        
        // Send the message.
        MaintainProviderResponse response = maintainProviderEsbService.maintainProvider(request);
        
        // Assert expected Acknowledgements/warnings.
        this.regExpMatch(response.getAcknowledgments(), ".*Transaction has failed.*");
        this.regExpMatch(response.getAcknowledgments(), ".*The Communication Purpose Type of Emergency Contact is not allowed for Work Location.*");
    }

    private MaintainProviderRequest createRequest_ForAdd_Provider() {
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setRegistryUserOrgId("plr-reg-admin");
        request.setProviderDetails(new ProviderDetails());
        ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto telecomDto = getTelecomDto();
        request.getProviderDetails().getTelecommunication().add(telecomDto);
        AddressDto address = getAddress();
        request.getProviderDetails().getAddresses().add(address);
        addIdentifierOrgEmergency(request);
        request.getProviderDetails().getIdentifiers().get(0).setEffectiveStartDate(new Date());
        request.getProviderDetails().getIdentifiers().get(0).setIdentifier(UUID.randomUUID().toString().replace('-', '7').substring(0, 14));
        request.getProviderDetails().setProviderType("ORG");
        request.getProviderDetails().setType("ORG");
        request.getProviderDetails().setJurisdiction(new JurisdictionNameCodeDto());
        request.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");
        request.getProviderDetails().getDemographicDetails().add(getDemographicDto());
        request.getProviderDetails().getStatuses().add(getStatusDto());
        request.getProviderDetails().getOrgNames().add(getOrgNameDto());
        
        return request;
    }
    
    private MaintainProviderRequest createRequest_ForIndiv_Provider(){
        MaintainProviderRequest request = new MaintainProviderRequest();
        request.setRegistryUserOrgId("plr-reg-admin");
        request.setProviderDetails(new ProviderDetails());
        ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto telecomDto = getTelecomDto();
        request.getProviderDetails().getTelecommunication().add(telecomDto);
        AddressDto address = getAddress();
        request.getProviderDetails().getAddresses().add(address);
        addIdentifier(request);
        request.getProviderDetails().getIdentifiers().get(0).setEffectiveStartDate(new Date());
        request.getProviderDetails().getIdentifiers().get(0).setIdentifier("TESTWORKLOCTELECOMEC1");
        request.getProviderDetails().setProviderType("IND");
        request.getProviderDetails().setType("DEN");
        request.getProviderDetails().setJurisdiction(new JurisdictionNameCodeDto());
        request.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");
        request.getProviderDetails().getDemographicDetails().add(getDemographicDto());
        request.getProviderDetails().getStatuses().add(getStatusDto());
        request.getProviderDetails().getIndNames().add(getPersonNameDto());
        request.getProviderDetails().getWorkLocationList().add(getIndivWorkLocationDto());
        
        return request;
    }
    
    static WorkLocationDto getIndivWorkLocationDto() {
        WorkLocationDto dto = new WorkLocationDto();

        List<WorkLocationDetailsDto> wlDetails = new ArrayList<>();
        WorkLocationDetailsDto wlDetailsDto = new WorkLocationDetailsDto();
        wlDetailsDto.setName("TESTWLDETAIL");
        wlDetailsDto.setAdditionalAddresseeInfo("TESTWLDETAIL");
        wlDetailsDto.setTypeCode("HID");
        wlDetailsDto.setEffectiveStartDate(EFF_START_DATE);
        wlDetails.add(wlDetailsDto);
        
        dto.setWorkLocationDetails(wlDetails);
        
        return dto;
    }

    /**
     * Reg Exp match
     *
     * @param acknowledgments list of acks
     * @param stringToMatch string to match
     */
    private void regExpMatch(Collection<Acknowledgment> acknowledgments, String stringToMatch) {
        boolean match = false;
        for (Acknowledgment ack : acknowledgments) {
            if (ack.getMsgText().matches(stringToMatch)) {
                match = true;
            }
            if (ack.getMsgCode().matches(stringToMatch)) {
                match = true;
            }
        }
        assertTrue(String.format("Expected to find '%s', but found '%s'.", stringToMatch, acknowledgments), match);
    }


    
    static void addIdentifierOrgEmergency(MaintainProviderRequest request) {        
        request.getProviderDetails().setIdentifiers(new ArrayList<CollegeIdentifierDto>());
        CollegeIdentifierDto collegeDto = new CollegeIdentifierDto();
        collegeDto.setIdentifier(IDENTIFIER_ORG_EC);
        collegeDto.setTypeCode(ORG_ID_TYPE_CODE);
        request.getProviderDetails().getIdentifiers().add(collegeDto);        
    }
    
}
