/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.util;

import ca.bc.gov.health.plr.ejb.entity.PrsDemographicDetails;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.ProviderDao;
import java.util.ArrayList;
import static org.mockito.Matchers.anyLong;
import static org.mockito.Matchers.eq;
import org.mockito.Mockito;

/**
 *
 * @author jonathan.wiebe
 */
public class ProviderDaoMocks {

    public static Long FAKE_PAUTH_ID_2_DEMOGRAPHICS_DETAILS_ACTIVE = 99999998l;
    public static Long FAKE_PAUTH_ID_1_DEMOGRAPHICS_DETAILS_ACTIVE = 99999997l;
    public static Long FAKE_PAUTH_ID_0_DEMOGRAPHICS_DETAILS_ACTIVE = 99999996l;
    public static Long FAKE_PAUTH_ID_2_DEMOGRAPHICS_DETAILS_NOT_ACTIVE = 99999995l;

    static public void setProviderDaoMocksDefault(ProviderDao providerDao) {
        // returns a defualt provider, empty
        Mockito.doReturn(new PrsProviders() {
            {
            }
        }).when(providerDao).searchByProviderId(anyLong());

        // setup the demographics lists for these providers
        setup_Zero_One_Two_DemographicDetailsLists(providerDao);
    }

    private static void setup_Zero_One_Two_DemographicDetailsLists(ProviderDao providerDao) {
        Mockito.doReturn(new PrsProviders() {
            {
                setPrsDemographicDetailsList(new ArrayList<PrsDemographicDetails>() {
                    {
                        addActiveDemographicsDetail(this);
                        addActiveDemographicsDetail(this);
                    }

                });
            }
        }).when(providerDao).searchByProviderId(eq(FAKE_PAUTH_ID_2_DEMOGRAPHICS_DETAILS_ACTIVE));
        Mockito.doReturn(new PrsProviders() {
            {
                setPrsDemographicDetailsList(new ArrayList<PrsDemographicDetails>() {
                    {
                        addActiveDemographicsDetail(this);
                    }
                });
            }
        }).when(providerDao).searchByProviderId(eq(FAKE_PAUTH_ID_1_DEMOGRAPHICS_DETAILS_ACTIVE));
        Mockito.doReturn(new PrsProviders() {
            {
                setPrsDemographicDetailsList(new ArrayList<PrsDemographicDetails>() {
                    {
                    }
                });
            }
        }).when(providerDao).searchByProviderId(eq(FAKE_PAUTH_ID_0_DEMOGRAPHICS_DETAILS_ACTIVE));
        Mockito.doReturn(new PrsProviders() {
            {
                setPrsDemographicDetailsList(new ArrayList<PrsDemographicDetails>() {
                    {
                        addNotActiveDemographicsDetail(this);
                        addNotActiveDemographicsDetail(this);
                    }
                });
            }
        }).when(providerDao).searchByProviderId(eq(FAKE_PAUTH_ID_2_DEMOGRAPHICS_DETAILS_NOT_ACTIVE));
    }

    static public void setProviderDaoMocksOneActive(ProviderDao providerDao) {
        // returns a defualt provbider
        Mockito.doReturn(new PrsProviders() {
            {
            }
        }).when(providerDao).searchByProviderId(anyLong());
    }

    private static void addActiveDemographicsDetail(ArrayList<PrsDemographicDetails> list) {
        list.add(new PrsDemographicDetails() {
            {
                setActiveFlag(CodeDaoMocks.getYESGrsCtBooleanType());
            }
        });
    }
    private static void addNotActiveDemographicsDetail(ArrayList<PrsDemographicDetails> list) {
        list.add(new PrsDemographicDetails() {
            {
                setActiveFlag(CodeDaoMocks.getNOGrsCtBooleanType());
            }
        });
    }
}
