/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.provider.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.ProviderType;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.List;
import static org.junit.Assert.assertTrue;
import org.junit.Test;

/**
 *
 * @author sumesh.kariyil
 */
public class ProviderDtoNameComparatorTest {
    /**
     * Test of compareTo method, of class PersonNameDto.
     */
    @Test
    public void testCompare_Individuals_ForSingleName() {
        List<ProviderDto> searchResults = new ArrayList<>();
        ProviderDto providerDto1 = new ProviderDto();
        providerDto1.setPauthId(1L);
        ProviderDto providerDto2 = new ProviderDto();
        providerDto2.setPauthId(2L);
        List<PersonNameDto> names = new ArrayList<>();        
        names.add(buildPerson("A", "A"));
        providerDto1.setProviderType(ProviderType.PRACTITIONER);
        providerDto1.setIndNames(names);
        
        names = new ArrayList<>();        
        names.add(buildPerson("Z", "Z"));
        providerDto2.setProviderType(ProviderType.PRACTITIONER);
        providerDto2.setIndNames(names);
        searchResults.add(providerDto1);
        searchResults.add(providerDto2);
        
        Collections.sort(searchResults, new ProviderDtoNameComparator());
        assertTrue(searchResults.get(0).getPauthId().equals(1L));
    }
    
    @Test
    public void testCompare_Individuals_ForMultipleNames() {
        List<ProviderDto> searchResults = new ArrayList<>();
        ProviderDto providerDto1 = new ProviderDto();
        providerDto1.setPauthId(1L);
        ProviderDto providerDto2 = new ProviderDto();
        providerDto2.setPauthId(2L);
        List<PersonNameDto> names = new ArrayList<>();
        names.add(buildPerson("D", "D"));
        names.add(buildPerson("C", "C"));
        providerDto1.setProviderType(ProviderType.PRACTITIONER);
        providerDto1.setIndNames(names);
        
        names = new ArrayList<>();        
        names.add(buildPerson("B", "B"));
        providerDto2.setProviderType(ProviderType.PRACTITIONER);
        providerDto2.setIndNames(names);
        searchResults.add(providerDto1);
        searchResults.add(providerDto2);
        
        Collections.sort(searchResults, new ProviderDtoNameComparator());
        assertTrue(searchResults.get(0).getPauthId().equals(2L));
    }
    
    @Test
    public void testCompare_MixedOrgAndIndividual() {
        List<ProviderDto> searchResults = new ArrayList<>();
        ProviderDto providerDto1 = new ProviderDto();
        providerDto1.setPauthId(1L);
        ProviderDto providerDto2 = new ProviderDto();
        providerDto2.setPauthId(2L);
        List<PersonNameDto> names = new ArrayList<>();
        names.add(buildPerson("D", "D"));
        names.add(buildPerson("C", "C"));
        providerDto1.setProviderType(ProviderType.PRACTITIONER);
        providerDto1.setIndNames(names);
        
        List<OrgNameDto> orgNames = new ArrayList<>();        
        orgNames.add(buildOrg("B", "B"));
        providerDto2.setProviderType(ProviderType.ORGANIZATION);
        providerDto2.setOrgNames(orgNames);
        searchResults.add(providerDto1);
        searchResults.add(providerDto2);
        
        Collections.sort(searchResults, new ProviderDtoNameComparator());
        assertTrue(searchResults.get(0).getPauthId().equals(2L));
    }
    
    @Test
    public void testCompare_MixedOrgAndIndividual_WithNoLongName() {
        List<ProviderDto> searchResults = new ArrayList<>();
        ProviderDto providerDto1 = new ProviderDto();
        providerDto1.setPauthId(1L);
        ProviderDto providerDto2 = new ProviderDto();
        providerDto2.setPauthId(2L);
        List<PersonNameDto> names = new ArrayList<>();
        names.add(buildPerson("A", "A"));
        providerDto1.setProviderType(ProviderType.PRACTITIONER);
        providerDto1.setIndNames(names);
        
        List<OrgNameDto> orgNames = new ArrayList<>();        
        orgNames.add(buildOrg(null, "A"));
        providerDto2.setProviderType(ProviderType.ORGANIZATION);
        providerDto2.setOrgNames(orgNames);
        searchResults.add(providerDto1);
        searchResults.add(providerDto2);
        
        Collections.sort(searchResults, new ProviderDtoNameComparator());
        assertTrue(searchResults.get(0).getPauthId().equals(2L));
    }
    
    private PersonNameDto buildPerson(String firstName, String lastName){
        PersonNameDto o = new PersonNameDto();
        o.setDisplayActive(true);
        o.setCreatedDate(Calendar.getInstance().getTime());
        o.setFirstName(firstName);
        o.setLastName(lastName);
        return o;
    }
    
    private OrgNameDto buildOrg(String longName, String name){
        OrgNameDto o = new OrgNameDto();
        o.setDisplayActive(true);
        o.setCreatedDate(Calendar.getInstance().getTime());
        o.setName(name);
        o.setLongName(longName);
        return o;
    }
}
