package ca.bc.gov.health.plr.dto.converter;

import ca.bc.gov.health.plr.dto.provider.ConditionsDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsConditions;
import ca.bc.gov.health.plr.ejb.entity.PrsCtConditionTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.session.PrsProvidersFacade;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import java.lang.reflect.Field;
import java.util.Calendar;
import javax.persistence.EntityManager;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.assertEquals;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *
 * @author ian.scott
 */
public class ConditionDtoConverterTest {

    ConditionDtoConverter conditionDtoConverter;
    private CodesDao codesDao;
    private EntityManager em;

    public ConditionDtoConverterTest() {
    }

    @Before
    public void setUp() throws Exception {
        conditionDtoConverter = new ConditionDtoConverter();

        em = mock(EntityManager.class);

        codesDao = mock(CodesDao.class);
        DtoConverter conv = new DtoConverter();
        conv.codesDao = codesDao;

        GrsCtBooleanTypes yes = mock(GrsCtBooleanTypes.class);
        GrsCtBooleanTypes no = mock(GrsCtBooleanTypes.class);
        when(yes.getCtlNameCode()).thenReturn("Yes");
        when(no.getCtlNameCode()).thenReturn("No");

        PrsCtConditionTypes mockConditionType = mock(PrsCtConditionTypes.class);
        when(mockConditionType.getCtlId()).thenReturn(Long.MAX_VALUE);
        when(mockConditionType.getCtlNameCode()).thenReturn("EDUD");
        when(mockConditionType.getCtlDescTxt()).thenReturn("Education");
        
        when(codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES)).thenReturn(yes);
        when(codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.NO)).thenReturn(no);
        when(codesDao.lookup(PrsCtConditionTypes.class, Long.MAX_VALUE)).thenReturn(mockConditionType);
        
        populateInstanceMember("codesDao", codesDao);
        populateInstanceMember("em", em);
        populateInstanceMember("dtoConverter", conv);

    }

    @After
    public void tearDown() {
    }

    private void populateInstanceMember(String fieldName, Object value) throws Exception {

        Field field = ConditionDtoConverter.class.getDeclaredField(fieldName);
        field.setAccessible(true);

        if (value instanceof CodesDao) {
            field.set(conditionDtoConverter, (CodesDao) value);

        } else if (value instanceof EntityManager) {
            field.set(conditionDtoConverter, (EntityManager) value);

        } else if (value instanceof DtoConverter) {

            field.set(conditionDtoConverter, (DtoConverter) value);
        }
    }

    /**
     * Test of toEntity method
     */
    @Test
    public void testToEntity_ConditionType() throws Exception {
        ConditionsDto dto = populateDTO();

        PrsConditions result = conditionDtoConverter.toEntity(dto);
        assertEquals(result.getConditionTypeCode().getCtlNameCode(), "EDUD");
        assertEquals(result.getConditionTypeCode().getCtlDescTxt(), "Education");
        Calendar cal = Calendar.getInstance();
        cal.set(9999, 11, 30, 0, 0, 0);
        cal.set(Calendar.MILLISECOND, 0);
        assertEquals(result.getEffectiveEndDate().getTime(), cal.getTime().getTime());
    }

    private ConditionsDto populateDTO() {
        ConditionsDto dto = new ConditionsDto();
        dto.setTypeId(Long.MAX_VALUE);
        return dto;
    }
}
