package ca.bc.gov.health.plr.rule.provider;

import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import ca.bc.gov.health.plr.service.provider.IntegrationSetup;
import ca.bc.gov.health.plr.util.MessageCodeHelper;
import org.junit.Test;
import static org.junit.Assert.*;
import org.junit.Ignore;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class ValidateEmailAddressTest extends IntegrationSetup {

    @Test
    public void testValidate_invalid() {
        BusinessRuleResult result = validateEmailAddress.validate("someaddress");
        assertFalse(result.isValid());
        assertEquals(1, result.getMessages().size());
        assertEquals(MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_EMAILFIELD_INVALID_CHARACTERS))[1], result.getMessages().get(0).getMessage());
    }

    @Test
    public void testValidate_valid() {
        BusinessRuleResult result = validateEmailAddress.validate("cgi@cgi.com");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }

    @Test
    public void testValidate_stripAccents_valid() {
        BusinessRuleResult result = validateEmailAddress.validate("ÁÉÍÓÚÝÀÈÌÒÚÂÊÔÛÄËÏÖÜÇ@cgi.com");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }

    @Test
    public void testValidate_validFormat_01() {
        BusinessRuleResult result = validateEmailAddress.validate("Doc_01@something.test.bc");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }

    @Test
    public void testValidate_validFormat_02() {
        BusinessRuleResult result = validateEmailAddress.validate("Nurse_02@facility_test.clinic");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }

    @Test
    public void testValidate_validFormat_03() {
        BusinessRuleResult result = validateEmailAddress.validate("Dentist_03@greener_tree.wall");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }

    @Test
    public void testValidate_validFormat_04() {
        BusinessRuleResult result = validateEmailAddress.validate("sam_02@dentist.test");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }

    @Test
    public void testValidate_validFormat_05() {
        BusinessRuleResult result = validateEmailAddress.validate("05-nurse@somewhere.bc");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }

    @Test
    public void testValidate_validFormat_06() {
        BusinessRuleResult result = validateEmailAddress.validate("dentist.abc@somewhere.ont.ca");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }

    @Test
    public void testValidate_validFormat_07() {
        BusinessRuleResult result = validateEmailAddress.validate("optometrist.foo+label@somewhere.ca");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }

    @Test
    public void testValidate_validFormat_08() {
        BusinessRuleResult result = validateEmailAddress.validate("medic@192.168.1.10");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }

    @Test
    public void testValidate_validFormat_09() {
        BusinessRuleResult result = validateEmailAddress.validate("medic+label@192.168.1.10");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }

    // underscores are not in the regex so this test should fail
    @Test
    @Ignore
    public void testValidate_validFormat_10() {
        BusinessRuleResult result = validateEmailAddress.validate("dental.fast@myserver_yyyy.mydomain_ddd.mysubdomain");
        assertFalse(result.isValid());
    }

    @Test
    public void testValidate_validFormat_11() {
        BusinessRuleResult result = validateEmailAddress.validate("MEDIC.SEC@somewhere.com");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }
    
    @Test
    public void testValidate_validFormat_12() {
        BusinessRuleResult result = validateEmailAddress.validate("dentistname@surname.dental");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }
    
    @Test
    public void testValidate_validFormat_13() {
        BusinessRuleResult result = validateEmailAddress.validate("dentist@horizondental.clinic");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }
    
    @Test
    public void testValidate_validFormat_14() {
        BusinessRuleResult result = validateEmailAddress.validate("Dentist.name@mail.mcgill.ca");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }
    
    @Test
    public void testValidate_validFormat_15() {
        BusinessRuleResult result = validateEmailAddress.validate("dentistname@landmark.dental");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }
    
    @Test
    public void testValidate_validFormat_16() {
        BusinessRuleResult result = validateEmailAddress.validate("dentistname@gmail.com.dmd");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }
    
    @Test
    public void testValidate_validFormat_17() {
        BusinessRuleResult result = validateEmailAddress.validate("s&noglow@telus.net");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }
    
    @Test
    public void testValidate_validFormat_18() {
        BusinessRuleResult result = validateEmailAddress.validate("$@somewhere.bc.org");
        assertTrue(result.isValid());
        assertEquals(0, result.getMessages().size());
    }
    
    @Test
    public void testValidate_invalidFormat_07() {
        BusinessRuleResult result = validateEmailAddress.validate("dentistname@gmail.com.dmd;Dentist.name@mail.mcgill.ca");
        assertFalse(result.isValid());
        assertEquals(1, result.getMessages().size());
        assertEquals(MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_EMAILFIELD_INVALID_CHARACTERS))[1], result.getMessages().get(0).getMessage());
    }

    @Test
    public void testValidate_invalidFormat_01() {
        BusinessRuleResult result = validateEmailAddress.validate("@someserver");
        assertFalse(result.isValid());
        assertEquals(1, result.getMessages().size());
        assertEquals(MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_EMAILFIELD_INVALID_CHARACTERS))[1], result.getMessages().get(0).getMessage());
    }

    @Test
    public void testValidate_invalidFormat_02() {
        BusinessRuleResult result = validateEmailAddress.validate("@someserver.ca");
        assertFalse(result.isValid());
        assertEquals(1, result.getMessages().size());
        assertEquals(MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_EMAILFIELD_INVALID_CHARACTERS))[1], result.getMessages().get(0).getMessage());
    }

    @Test
    public void testValidate_invalidFormat_03() {
        BusinessRuleResult result = validateEmailAddress.validate("dentist@.");
        assertFalse(result.isValid());
        assertEquals(1, result.getMessages().size());
        assertEquals(MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_EMAILFIELD_INVALID_CHARACTERS))[1], result.getMessages().get(0).getMessage());
    }
    
    @Test
    public void testValidate_invalidFormat_05() {
        BusinessRuleResult result = validateEmailAddress.validate("xray-2@@somewhere.bc.ca");
        assertFalse(result.isValid());
        assertEquals(1, result.getMessages().size());
        assertEquals(MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_EMAILFIELD_INVALID_CHARACTERS))[1], result.getMessages().get(0).getMessage());
    }
    
    @Test
    public void testValidate_invalidFormat_06() {
        BusinessRuleResult result = validateEmailAddress.validate("test_7@");
        assertFalse(result.isValid());
        assertEquals(1, result.getMessages().size());
        assertEquals(MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_EMAILFIELD_INVALID_CHARACTERS))[1], result.getMessages().get(0).getMessage());
    }
}
