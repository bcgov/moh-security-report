/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.util;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.ejb.entity.GrsDistribEvent;
import ca.bc.gov.health.plr.ejb.entity.PlrConfigurationProperties;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.entityManagerProxy;
import static ca.bc.gov.health.plr.service.provider.IntegrationSetup.plrConfigurationResourceLoader;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author jonathan.wiebe
 */
public class DistributionControl {

    static String distProcessState = "false";
    static String distSendState = "false";

    public static void turnOffDistributions() {
        distProcessState = plrConfigurationResourceLoader.getValue(Consts.PROCESS_DISTRIBUTION);
        PlrConfigurationProperties processDist = entityManagerProxy.find(PlrConfigurationProperties.class, Consts.PROCESS_DISTRIBUTION);
        processDist.setValue("false");
        entityManagerProxy.merge(processDist);
        entityManagerProxy.flush();

        distSendState = plrConfigurationResourceLoader.getValue(Consts.SEND_DISTRIBUTION);
        PlrConfigurationProperties sendDist = entityManagerProxy.find(PlrConfigurationProperties.class, Consts.SEND_DISTRIBUTION);
        sendDist.setValue("false");
        entityManagerProxy.merge(sendDist);
        entityManagerProxy.flush();

        waitABit();
    }

    public static void turnOnDistributions() {
        distProcessState = plrConfigurationResourceLoader.getValue(Consts.PROCESS_DISTRIBUTION);
        PlrConfigurationProperties processDist = entityManagerProxy.find(PlrConfigurationProperties.class, Consts.PROCESS_DISTRIBUTION);
        processDist.setValue("true");
        entityManagerProxy.merge(processDist);
        entityManagerProxy.flush();

        distSendState = plrConfigurationResourceLoader.getValue(Consts.SEND_DISTRIBUTION);
        PlrConfigurationProperties sendDist = entityManagerProxy.find(PlrConfigurationProperties.class, Consts.SEND_DISTRIBUTION);
        sendDist.setValue("true");
        entityManagerProxy.merge(sendDist);
        entityManagerProxy.flush();

        waitABit();
    }

    public static void waitABit() {
        try {
            // let the change happen
            Thread.sleep(10000l);
        } catch (InterruptedException ex) {
            Logger.getLogger(DistributionControl.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void restoreDistributions() {
        String distProcessCurrent = plrConfigurationResourceLoader.getValue(Consts.PROCESS_DISTRIBUTION);
        String distSendCurrent = plrConfigurationResourceLoader.getValue(Consts.SEND_DISTRIBUTION);

        Boolean isChanged = false;
        
        if (distProcessCurrent != null && !distProcessCurrent.equals(distProcessState)) {
            PlrConfigurationProperties processDist = entityManagerProxy.find(PlrConfigurationProperties.class, Consts.PROCESS_DISTRIBUTION);
            processDist.setValue(distProcessState);
            entityManagerProxy.merge(processDist);
            entityManagerProxy.flush();
            isChanged = true;
        }

        if (distSendCurrent != null && !distSendCurrent.equals(distSendState)) {
            PlrConfigurationProperties sendDist = entityManagerProxy.find(PlrConfigurationProperties.class, Consts.SEND_DISTRIBUTION);
            sendDist.setValue(distSendState);
            entityManagerProxy.merge(sendDist);
            entityManagerProxy.flush();
            isChanged = true;
        }

        if(isChanged) {
            waitABit();
        } 
    }
    
    public static void deleteAll() {
        List<GrsDistribEvent> events = entityManagerProxy.namedQuery("GrsDistribEvent.findAll");
        for(GrsDistribEvent event : events) {
            entityManagerProxy.remove(event);
        }
    }
}
