/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.remote;

import ca.bc.gov.health.plr.dto.DtoMetaData;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDto;
import ca.bc.gov.health.plr.dto.provider.esb.JurisdictionNameCodeDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.junit.After;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;

/**
 *
 * @author jonathan.wiebe
 */
public class MaintainProviderEsbServiceDelegateTest {

    public MaintainProviderEsbServiceDelegateTest() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    @Test
    public void checkRoleAndPatyTypeTest() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        MaintainProviderEsbServiceDelegate esbDelegate = new MaintainProviderEsbServiceDelegate();
        Method checkRoleAndPatyTypeMethod = MaintainProviderEsbServiceDelegate.class.getDeclaredMethod("checkRoleTypeAndPartyType", PrsCtProviderRoleTypes.class, MaintainProviderRequest.class, MaintainProviderResponse.class);
        checkRoleAndPatyTypeMethod.setAccessible(true);

        PrsCtProviderRoleTypes hptCode = new PrsCtProviderRoleTypes();
        MaintainProviderRequest request = new MaintainProviderRequest();
        MaintainProviderResponse response = new MaintainProviderResponse();
//            if(!hptCode.getPartyType().matches(".*" + request.getProviderDetails().getProviderType() + ".*")) {
//            String[] msgCode = MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MESSAGE_PARTYANDROLE));
//            Acknowledgment ack = new Acknowledgment(msgCode[0],msgCode[1]);
//            response.addAcknowledgment(ack);

        // matching role and party
        hptCode.setPartyType(CodeTableCodes.GrsCtPartyType.IND.getValue());
        request.setProviderDetails(new ProviderDetails());
        request.getProviderDetails().setProviderType("IND");
        checkRoleAndPatyTypeMethod.invoke(esbDelegate, hptCode, request, response);
        assertTrue(response.getAcknowledgments().size() == 0);

        // matching role and party
        hptCode.setPartyType(CodeTableCodes.GrsCtPartyType.ORG.getValue());
        request.setProviderDetails(new ProviderDetails());
        request.getProviderDetails().setProviderType("ORG");
        checkRoleAndPatyTypeMethod.invoke(esbDelegate, hptCode, request, response);
        assertTrue(response.getAcknowledgments().size() == 0);

        // mismatching role and party
        hptCode.setPartyType(CodeTableCodes.GrsCtPartyType.IND.getValue());
        request.setProviderDetails(new ProviderDetails());
        request.getProviderDetails().setProviderType("ORG");
        checkRoleAndPatyTypeMethod.invoke(esbDelegate, hptCode, request, response);
        assertTrue(response.getAcknowledgments().size() == 1);
        response.getAcknowledgments().clear();

        // mismatching role and party
        hptCode.setPartyType(CodeTableCodes.GrsCtPartyType.ORG.getValue());
        request.setProviderDetails(new ProviderDetails());
        request.getProviderDetails().setProviderType("OOP-MD");
        checkRoleAndPatyTypeMethod.invoke(esbDelegate, hptCode, request, response);
        assertTrue(response.getAcknowledgments().size() == 1);
    }

    @Test
    public void testgetChangedBlocks_emptyList() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        MaintainProviderEsbServiceDelegate esbDelegate = new MaintainProviderEsbServiceDelegate();
        Method getChangedBlocksMethod = MaintainProviderEsbServiceDelegate.class.getDeclaredMethod("getChangedBlocks", List.class, boolean.class);
        getChangedBlocksMethod.setAccessible(true);

        Set<String> setString = (Set<String>) getChangedBlocksMethod.invoke(esbDelegate, new ArrayList() {
            {
                add(new ArrayList());
            }
        }, true);
        assertTrue(setString.size() == 0);
    }

    @Test
    public void testgetChangedBlocks_addDtoMetaData() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        MaintainProviderEsbServiceDelegate esbDelegate = new MaintainProviderEsbServiceDelegate();
        Method getChangedBlocksMethod = MaintainProviderEsbServiceDelegate.class.getDeclaredMethod("getChangedBlocks", List.class, boolean.class);
        getChangedBlocksMethod.setAccessible(true);

        Set<String> setString = (Set<String>) getChangedBlocksMethod.invoke(esbDelegate, new ArrayList() {
            {
                add(new ArrayList() {
                    {
                        add(new DtoMetaData() {
                            {
                                setNoChangeOnUpdate(false);
                            }

                            @Override
                            public String getBlockName() {
                                return TEST_BLOCK;
                            }
                        });
                    }
                });
            }
        }, true);
        assertTrue(setString.size() == 1);
        Iterator<String> it = setString.iterator();
        assertTrue(TEST_BLOCK.equals(it.next()));
    }

    @Test
    public void testgetChangedBlocks_NotaddDtoMetaData() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        MaintainProviderEsbServiceDelegate esbDelegate = new MaintainProviderEsbServiceDelegate();
        Method getChangedBlocksMethod = MaintainProviderEsbServiceDelegate.class.getDeclaredMethod("getChangedBlocks", List.class, boolean.class);
        getChangedBlocksMethod.setAccessible(true);

        Set<String> setString = (Set<String>) getChangedBlocksMethod.invoke(esbDelegate, new ArrayList() {
            {
                add(new ArrayList() {
                    {
                        add(new DtoMetaData() {
                            {
                                setNoChangeOnUpdate(true);
                            }

                            @Override
                            public String getBlockName() {
                                return TEST_BLOCK;
                            }
                        });
                    }
                });
            }
        }, true);
        assertTrue(setString.size() == 0);
    }

    @Test
    public void testgetChangedBlocks_addWorkLocationDto() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        MaintainProviderEsbServiceDelegate esbDelegate = new MaintainProviderEsbServiceDelegate();
        Method getChangedBlocksMethod = MaintainProviderEsbServiceDelegate.class.getDeclaredMethod("getChangedBlocks", List.class, boolean.class);
        getChangedBlocksMethod.setAccessible(true);

        Set<String> setString = (Set<String>) getChangedBlocksMethod.invoke(esbDelegate, new ArrayList() {
            {
                add(new ArrayList() {
                    {
                        add(new WorkLocationDto() {
                            {
                                setAddresses(new ArrayList<AddressDto>() {
                                    {
                                        add(new AddressDto() {
                                            {
                                                setNoChangeOnUpdate(true);
                                            }
                                        });
                                    }
                                });
                                setElectronicAddresses(new ArrayList<ElectronicAddressDto>());
                                setWorkLocationDetails(new ArrayList<WorkLocationDetailsDto>());
                                setInformationRoutes(new ArrayList<InformationRouteDto>());
                                setTelecommunications(new ArrayList<TelecommunicationDto>());
                            }
                        });
                    }
                });
            }
        }, true);
        assertTrue(setString.size() == 2);
        Iterator<String> it = setString.iterator();
        String one = it.next();
        String two = it.next();
        assertTrue("Work Location".equals(one) || "Work Location Details".equals(one));
        assertTrue("Work Location".equals(two) || "Work Location Details".equals(two));
        assertTrue(!one.equals(two));
    }

    @Test
    public void testgetChangedBlocks_addWorkLocationDto_addAddress() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        MaintainProviderEsbServiceDelegate esbDelegate = new MaintainProviderEsbServiceDelegate();
        Method getChangedBlocksMethod = MaintainProviderEsbServiceDelegate.class.getDeclaredMethod("getChangedBlocks", List.class, boolean.class);
        getChangedBlocksMethod.setAccessible(true);

        Set<String> setString = (Set<String>) getChangedBlocksMethod.invoke(esbDelegate, new ArrayList() {
            {
                add(new ArrayList() {
                    {
                        add(new WorkLocationDto() {
                            {
                                setAddresses(new ArrayList<AddressDto>() {
                                    {
                                        add(new AddressDto() {
                                            {
                                                setNoChangeOnUpdate(false);
                                            }
                                        });
                                    }
                                });
                                setElectronicAddresses(new ArrayList<ElectronicAddressDto>());
                                setWorkLocationDetails(new ArrayList<WorkLocationDetailsDto>());
                                setInformationRoutes(new ArrayList<InformationRouteDto>());
                                setTelecommunications(new ArrayList<TelecommunicationDto>());
                            }
                        });
                    }
                });
            }
        }, true);
        assertTrue(setString.size() == 3);
        Iterator<String> it = setString.iterator();
        String one = it.next();
        String two = it.next();
        String three = it.next();
        assertTrue("Work Location".equals(one) || "Work Location Details".equals(one) || "Address".equals(one));
        assertTrue("Work Location".equals(two) || "Work Location Details".equals(two) || "Address".equals(two));
        assertTrue("Work Location".equals(three) || "Work Location Details".equals(three) || "Address".equals(three));
        assertTrue(!one.equals(two));
        assertTrue(!one.equals(three));
        assertTrue(!two.equals(three));

    }

    @Test
    public void testgetChangedBlocks_addWorkLocationDto_addAddress_addIR_addEAddr_addTelecom() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        MaintainProviderEsbServiceDelegate esbDelegate = new MaintainProviderEsbServiceDelegate();
        Method getChangedBlocksMethod = MaintainProviderEsbServiceDelegate.class.getDeclaredMethod("getChangedBlocks", List.class, boolean.class);
        getChangedBlocksMethod.setAccessible(true);

        Set<String> setString = (Set<String>) getChangedBlocksMethod.invoke(esbDelegate, new ArrayList() {
            {
                add(new ArrayList() {
                    {
                        add(new WorkLocationDto() {
                            {
                                setAddresses(new ArrayList<AddressDto>() {
                                    {
                                        add(new AddressDto() {
                                            {
                                                setNoChangeOnUpdate(false);
                                            }
                                        });
                                    }
                                });
                                setElectronicAddresses(new ArrayList<ElectronicAddressDto>() {
                                    {
                                        add(new ElectronicAddressDto() {
                                            {
                                                setNoChangeOnUpdate(false);
                                            }
                                        });
                                    }
                                });
                                setWorkLocationDetails(new ArrayList<WorkLocationDetailsDto>() {
                                    {
                                        add(new WorkLocationDetailsDto() {
                                            {
                                                setNoChangeOnUpdate(false);
                                            }
                                        });
                                    }
                                });
                                setInformationRoutes(new ArrayList<InformationRouteDto>() {
                                    {
                                        add(new InformationRouteDto() {
                                            {
                                                setNoChangeOnUpdate(false);
                                            }
                                        });
                                    }
                                });
                                setTelecommunications(new ArrayList<TelecommunicationDto>() {
                                    {
                                        add(new TelecommunicationDto() {
                                            {
                                                setNoChangeOnUpdate(true);
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        }, true);
        assertTrue(setString.size() == 5);
    }

    @Test
    public void testgetChangedBlocks_updateProvider_addWorkLocationDto_addAddress_addIR_addEAddr_addTelecom() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        MaintainProviderEsbServiceDelegate esbDelegate = new MaintainProviderEsbServiceDelegate();
        Method getChangedBlocksMethod = MaintainProviderEsbServiceDelegate.class.getDeclaredMethod("getChangedBlocks", List.class, boolean.class);
        getChangedBlocksMethod.setAccessible(true);

        Set<String> setString = (Set<String>) getChangedBlocksMethod.invoke(esbDelegate, new ArrayList() {
            {
                add(new ArrayList() {
                    {
                        add(new WorkLocationDto() {
                            {
                                setAddresses(new ArrayList<AddressDto>() {
                                    {
                                        add(new AddressDto() {
                                            {
                                                setNoChangeOnUpdate(false);
                                            }
                                        });
                                    }
                                });
                                setElectronicAddresses(new ArrayList<ElectronicAddressDto>() {
                                    {
                                        add(new ElectronicAddressDto() {
                                            {
                                                setNoChangeOnUpdate(false);
                                            }
                                        });
                                    }
                                });
                                setWorkLocationDetails(new ArrayList<WorkLocationDetailsDto>() {
                                    {
                                        add(new WorkLocationDetailsDto() {
                                            {
                                                setNoChangeOnUpdate(false);
                                            }
                                        });
                                    }
                                });
                                setInformationRoutes(new ArrayList<InformationRouteDto>() {
                                    {
                                        add(new InformationRouteDto() {
                                            {
                                                setNoChangeOnUpdate(false);
                                            }
                                        });
                                    }
                                });
                                setTelecommunications(new ArrayList<TelecommunicationDto>() {
                                    {
                                        add(new TelecommunicationDto() {
                                            {
                                                setNoChangeOnUpdate(false);
                                            }
                                        });
                                    }
                                });
                            }
                        });
                    }
                });
            }
        }, false);
        assertTrue(setString.size() == 6);
    }

    @Test
    public void testgetChangedBlocks_updateWorkLocationDto() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        MaintainProviderEsbServiceDelegate esbDelegate = new MaintainProviderEsbServiceDelegate();
        Method getChangedBlocksMethod = MaintainProviderEsbServiceDelegate.class.getDeclaredMethod("getChangedBlocks", List.class, boolean.class);
        getChangedBlocksMethod.setAccessible(true);

        Set<String> setString = (Set<String>) getChangedBlocksMethod.invoke(esbDelegate, new ArrayList() {
            {
                add(new ArrayList() {
                    {
                        add(new WorkLocationDto() {
                            {
                                setAddresses(new ArrayList<AddressDto>() {
                                    {
                                        add(new AddressDto() {
                                            {
                                                setNoChangeOnUpdate(true);
                                            }
                                        });
                                    }
                                });
                                setElectronicAddresses(new ArrayList<ElectronicAddressDto>());
                                setWorkLocationDetails(new ArrayList<WorkLocationDetailsDto>());
                                setInformationRoutes(new ArrayList<InformationRouteDto>());
                                setTelecommunications(new ArrayList<TelecommunicationDto>());
                            }
                        });
                    }
                });
            }
        }, false);
        assertTrue(setString.size() == 1);
        Iterator<String> it = setString.iterator();
        String one = it.next();
        assertTrue("Work Location".equals(one));
    }

    @Test
    public void checkDemographic_Details_ProviderType_Test() throws NoSuchMethodException, IllegalAccessException, IllegalArgumentException, InvocationTargetException {
        MaintainProviderEsbServiceDelegate esbDelegate = new MaintainProviderEsbServiceDelegate();
        Method addRecordsToProviderDtoMethod = MaintainProviderEsbServiceDelegate.class.getDeclaredMethod("addRecordsToProviderDto", List.class, ProviderDto.class);
        addRecordsToProviderDtoMethod.setAccessible(true);

        MaintainProviderRequest request = new MaintainProviderRequest();

        request.setProviderDetails(new ProviderDetails());
        request.getProviderDetails().setProviderType("ORG");
        request.getProviderDetails().setJurisdiction(new JurisdictionNameCodeDto());
        request.getProviderDetails().getJurisdiction().setJurisdicationNameCode("BC");

        ProviderDto providerDto = new ProviderDto();
        providerDto.setPartyType(CodeTableCodes.GrsCtPartyType.valueOf(request.getProviderDetails().getProviderType()));

        ArrayList listDtos = new ArrayList();
        listDtos.add(new ArrayList() {
            {
                add(new ca.bc.gov.health.plr.dto.provider.DemographicDetailsDto() {

                    @Override
                    public String getBlockName() {
                        return TEST_DEMO_BLOCK;
                    }
                });
            }
        });

        addRecordsToProviderDtoMethod.invoke(esbDelegate, listDtos, providerDto);

        assertTrue(providerDto.getDemographicDetails().isEmpty());

    }

    private static final String TEST_BLOCK = "TestBlock";
    private static final String TEST_DEMO_BLOCK = "TestDemoBlock";
}
