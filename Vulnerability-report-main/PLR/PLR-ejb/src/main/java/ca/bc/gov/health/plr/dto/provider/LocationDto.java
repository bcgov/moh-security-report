
package ca.bc.gov.health.plr.dto.provider;

import ca.bc.gov.health.plr.dto.MessageDataBlockDto;
import ca.bc.gov.health.plr.dto.businesskey.LocationBK;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCommunPurposeTypes;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeId;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeName;
import ca.bc.gov.health.plr.rule.provider.PurposeTypeCodeConstraints;
import ca.bc.gov.health.plr.util.PropertyUtils;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@PurposeTypeCodeConstraints
public abstract class LocationDto extends AbstractProviderDetail implements MessageDataBlockDto {

    @AcceptableCodeId(clazz = PrsCtCommunPurposeTypes.class, code = "Communication Purpose Type")
    Long communicationPurposeId;
    @AcceptableCodeName(clazz = PrsCtCommunPurposeTypes.class, code = "Communication Purpose Type")
    String communicationPurposeCode;
    String communicationPurpose;
    Long wlWlId;

    @Override
    public abstract Long getTypeId();
    @Override
    public abstract void setTypeId(Long typeId);
    @Override
    public abstract String getTypeCode();
    @Override
    public abstract void setTypeCode(String typeCode);
    @Override
    public abstract String[] getMessageDataBlockFields();

    /**
     * Limit the size of the input list according to the value of maxBusinessObjectShown
     * @param <T> the dto extends LocationDto. T is limited to subclasses of LocationDto
     * @param inList a list of instances of T
     * @param maxBusinessObjectShown the max number of Location objects can be displayed on each data block according to the business key
     * @return 
     */
    public static <T extends LocationDto> List<T> limitDtoListBasedOnBK(List<T> inList, int maxBusinessObjectShown) {
        if(inList==null) {
            return null;
        } else if(inList.size()<=maxBusinessObjectShown) {
            return inList; 
        }
        
        //find all business key objects
        List<LocationBK> bKeyList = new ArrayList<>();
        for(T t : inList) {
            LocationBK bk = new LocationBK(t.getTypeCode(), t.getDataOwnerCode(), t.getCommunicationPurposeCode());
            if(!bKeyList.contains(bk)) {
                bKeyList.add(bk);
            }
        }
        
        //go through each business key object and find all matching dtos
        List<T> allList = new ArrayList<>();
        for(LocationBK bk : bKeyList) {
            List<T> tmpList = new ArrayList<>();
            for(T t : inList) {
                LocationBK bkFromDto = new LocationBK(t.getTypeCode(), t.getDataOwnerCode(), t.getCommunicationPurposeCode());
                if(bk.equals(bkFromDto)) {
                    tmpList.add(t);
                }
            }
            //only keep first maxBusinessObjectShown dtos
            if(tmpList.size()>maxBusinessObjectShown) {
                tmpList = tmpList.subList(0, maxBusinessObjectShown);
            }
            if(!tmpList.isEmpty()) {
                allList.addAll(tmpList);
            }
        }
        
        return allList;
        
    }    
    
    public Long getCommunicationPurposeId() {
        return communicationPurposeId;
    }

    public void setCommunicationPurposeId(Long communicationPurposeId) {
        this.communicationPurposeId = communicationPurposeId;
    }

    public String getCommunicationPurposeCode() {
        return communicationPurposeCode;
    }

    public void setCommunicationPurposeCode(String communicationPurposeCode) {
        this.communicationPurposeCode = communicationPurposeCode;
    }

    public String getCommunicationPurpose() {
        return communicationPurpose;
    }

    public void setCommunicationPurpose(String communicationPurpose) {
        this.communicationPurpose = communicationPurpose;
    }

    public Long getWlWlId() {
        return wlWlId;
    }

    public void setWlWlId(Long wlWlId) {
        this.wlWlId = wlWlId;
    }

    public int compareCommunicationPurposeCode(String targetCommunicationPurposeCode) {
        return PropertyUtils.compareString(this.communicationPurpose, targetCommunicationPurposeCode);
    }
    
}
