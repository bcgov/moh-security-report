/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.remote;

import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsElectronicAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsTelephones;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocationDetails;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocations;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.rule.BusinessRuleMessage;
import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.util.MessageCodeHelper;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import org.apache.commons.lang3.StringUtils;

/**
 * Service to maintain work location and its children for ESB messages.
 *
 * @author sumesh.kariyil
 */
@Stateless
public class MaintainEsbWorkLocationService {

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;

    static final String invalidCodeError = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_CODE_INVALID);

    @EJB
    private MaintainProviderEsbProcessor<WorkLocationDto, ca.bc.gov.health.plr.dto.provider.WorkLocationDto> workLocationProcessor;

    @EJB
    private MaintainProviderEsbProcessor<WorkLocationDetailsDto, ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto> workLocationDetailsProcessor;

    @Inject
    private MaintainProviderEsbProcessor<AddressDto, ca.bc.gov.health.plr.dto.provider.AddressDto> addressProcessor;

    @Inject
    private MaintainProviderEsbProcessor<TelecommunicationDto, ca.bc.gov.health.plr.dto.provider.TelecommunicationDto> teleComProcessor;

    @Inject
    private MaintainProviderEsbProcessor<ElectronicAddressDto, ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto> electronicProcessor;

    @Inject
    private MaintainEsbInformationRoutesService informationRouteProcessor;

    @Inject
    private ProviderDtoConverter providerDtoConverter;

    /**
     * Process the work location and its children for the provider
     *
     * @param request
     * @param response
     * @param providerDto
     * @return
     */
    public List<ca.bc.gov.health.plr.dto.provider.WorkLocationDto> process(MaintainProviderRequest request, MaintainProviderResponse response, ProviderDto providerDto) {
        List<ca.bc.gov.health.plr.dto.provider.WorkLocationDto> list = new ArrayList<>();
        ca.bc.gov.health.plr.dto.provider.WorkLocationDto dto;
        ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto detailsDto;
        List<String> telecomEmergencyCds = new ArrayList<>();

        for (WorkLocationDto workLocationDto : request.getProviderDetails().getWorkLocationList()) {
            try {

                //If Work location CHID is null, assume it's an ADD
                //If Work location CHID is present, and data exists in DB then it's update
                //If Work location CHID is present and data doesnt exist in DB then it's create
                PrsWorkLocations workLocation = findWorkLocation(workLocationDto, providerDto);

                if (workLocation != null) {
                    //its maintain message, process work location details
                    dto = providerDtoConverter.buildWorkLocation(workLocation);
                    detailsDto = processWorkLocationDetails(workLocationDto, workLocation);

                    // Is there a worklocation detail to update
                    if (detailsDto != null) {
                        for (int i = 0; i < dto.getWorkLocationDetails().size(); i++) {
                            if (dto.getWorkLocationDetails().get(i).getWlWlId().equals(detailsDto.getWlWlId())) {
                                dto.getWorkLocationDetails().set(i, detailsDto);
                            }
                        }
                    } else {
                        //there is no work location details to update, set to empty array in the work location dto
                        //if this is not done, there will be acknowledgements set to response, in turn will cause transaction roll back.
                        dto.setWorkLocationDetails(new ArrayList<ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto>());
                    }
                } else {
                    List<WorkLocationDetailsDto> workLocDetails = workLocationDto.getWorkLocationDetails();
                    if (workLocDetails.isEmpty()) {
                        throw new EntityValidationException(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_NO_WORK_LOCATION_DETAILS));
                    } else if (workLocDetails.size() > 1) {
                        throw new EntityValidationException(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MULTIPLE_WORK_LOCATION_DETAILS));
                    } else if (StringUtils.isEmpty(workLocDetails.get(0).getTypeCode())) {
                        BusinessRuleKeys wlTypeCodeMissingKey = BusinessRuleKeys.ERROR_MANDATORY_PART1;
                        String wlTypeCodeMissingErrorArray[] = MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(wlTypeCodeMissingKey));
                        wlTypeCodeMissingErrorArray[1] = wlTypeCodeMissingErrorArray[1] + "Work Location Type" + BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MANDATORY_PART2);
                        BusinessRuleMessage wlTypeCodeMissingBRM = new BusinessRuleMessage(wlTypeCodeMissingErrorArray[0], wlTypeCodeMissingErrorArray[1], BusinessRuleMessage.Severity.ERROR);
                        BusinessRuleResult wlTypeCodeMissingBRR = new BusinessRuleResult(false, Arrays.asList(wlTypeCodeMissingBRM));
                        throw new BusinessRuleException(wlTypeCodeMissingBRR);
                    }
                    workLocationDto.setPauthId(providerDto.getPauthId());
                    dto = workLocationProcessor.convertAndValidate(workLocationDto, new ca.bc.gov.health.plr.dto.provider.WorkLocationDto());
                    // convertAndValidate makes a shallow copy of the List<WorkLocationDetails>, so replace it with a new list to avoid leaked references (PLR-1416).
                    dto.setWorkLocationDetails(new ArrayList<ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto>());
                    detailsDto = workLocationDetailsProcessor.convertAndValidate(workLocDetails.get(0), new ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto());
                    dto.getWorkLocationDetails().add(detailsDto);
                    if (dto.getId() != null) {
                        workLocation = em.find(PrsWorkLocations.class, dto.getId());
                    }
                }
                //Process common children irrespective of add or update                
                dto.setAddresses(processWlAddress(workLocationDto, response, workLocation, providerDto));
                dto.setTelecommunications(processWlTelecoms(workLocationDto, response, workLocation, providerDto));
                // validate Emergency Contact code in ca.bc.gov.health.plr.dto.provider.TelecommunicationDto  
                if (dto.getTelecommunications() != null
                        && !dto.getTelecommunications().isEmpty()) {
                    for (ca.bc.gov.health.plr.dto.provider.TelecommunicationDto telecomDto : dto.getTelecommunications()) {
                        if (telecomDto.getCommunicationPurposeCode().equalsIgnoreCase(CodeTableCodes.PrsCtCommunPurposeTypes.EMERGENCY_CONTACT.getValue())) {
                            telecomEmergencyCds.add(telecomDto.getCommunicationPurposeCode());
                        }
                    }
                }
                dto.setElectronicAddresses(processEAddresses(workLocationDto, response, workLocation, providerDto));
                //Process information routes for the work location                
                dto.setInformationRoutes(informationRouteProcessor.process(workLocationDto, response, workLocation));
                list.add(dto);

            } catch (Exception ex) {
                ExceptionHandler.handleException(response, ex);
            }
        }
        if (!telecomEmergencyCds.isEmpty()) {
            try {
                errorWorkLocTelecomECNotAllowed(response);                
            } catch (Exception e) {
                ExceptionHandler.handleException(response, e);
            }

        }
        telecomEmergencyCds.clear();

        return list;
    }

    /**
     * Process Work location details
     *
     * @param workLocationDto
     * @param workLocation
     * @throws EntityValidationException
     * @throws DuplicateRecordException
     */
    private ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto processWorkLocationDetails(WorkLocationDto workLocationDto, PrsWorkLocations workLocation) throws EntityValidationException, DuplicateRecordException {
        ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto dto = null;

        if (!workLocationDto.getWorkLocationDetails().isEmpty()) {
            // There should be only one work location details, else throw error
            if (workLocationDto.getWorkLocationDetails().size() > 1) {
                throw new EntityValidationException(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MULTIPLE_WORK_LOCATION_DETAILS));
            }
            WorkLocationDetailsDto detailsDto = workLocationDto.getWorkLocationDetails().get(0);
            //Check if the request is trying to update work location details
            if (!StringUtils.isBlank(detailsDto.getEndReasonCode())) {//Update only if end reason code is there
                // For a work location, there can be only one active work location details, get the latest one
                TypedQuery<PrsWorkLocationDetails> workLocDetailQry = em.createQuery("select w from PrsWorkLocationDetails w where w.wlWlId.wlId = :wlId order by w.generationNum DESC ", PrsWorkLocationDetails.class);
                workLocDetailQry.setParameter("wlId", workLocation.getWlId());
                PrsWorkLocationDetails lastWorkLocDetails = workLocDetailQry.setMaxResults(1).getResultList().get(0);
                detailsDto.setId(lastWorkLocDetails.getWldId());
                detailsDto.setWlWlId(workLocation.getWlId());
                dto = workLocationDetailsProcessor.convertAndValidate(detailsDto, new ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto());
                //    maintainWorkLocationService.updateWorkLocationDetail(dto);
            } else {
                String messageResource = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_DUPLICATE_DATA_BLOCK);
                throw new DuplicateRecordException(messageResource + "work location details");
            }
        }

        return dto;
    }

    /**
     * Method to find the work location using the parameters provider id and
     * work location chid
     *
     * Also fills in the work location details, only keeps the updateable one.
     *
     * @param workLocationDto
     * @return
     */
    private PrsWorkLocations findWorkLocation(WorkLocationDto workLocationDto, ProviderDto providerDto) {
        if (workLocationDto.getIdentifier() != null) {
            TypedQuery<PrsWorkLocations> wrkLocQry = em.createQuery("select w from PrsWorkLocations w where w.workLocationChid = :workLocId and w.pauthPauthId.pauthId = :pauthId", PrsWorkLocations.class);
            wrkLocQry.setParameter("pauthId", providerDto.getPauthId());
            wrkLocQry.setParameter("workLocId", workLocationDto.getIdentifier());
            List<PrsWorkLocations> workLocations = wrkLocQry.getResultList();
            if (workLocations.size() == 1) {
                // if there are more than 1 we need to remove the not updateable ones
                if (workLocations.get(0).getPrsWorkLocationDetailsList().size() > 1) {

                    // At this time the work location details for this work locaiton include history, i.e.
                    // all ceased and changed, etc records.  We just need to keep the update-able one.  And
                    // there can only be one.
                    for (PrsWorkLocationDetails details : workLocations.get(0).getPrsWorkLocationDetailsList()) {
                        if (details.getEndReasonCode() == null) {
                            final PrsWorkLocationDetails detailsToKeep = details;

                            // keep and toss all else
                            workLocations.get(0).setPrsWorkLocationDetailsList(new ArrayList<PrsWorkLocationDetails>() {
                                {
                                    add(detailsToKeep);
                                }
                            });
                            break;
                        }
                    }
                }
                return workLocations.get(0);
            }
        }
        return null;
    }

    /**
     * Process work location address
     *
     * @param workLocationDto
     * @param response
     * @param workLocation
     */
    private List<ca.bc.gov.health.plr.dto.provider.AddressDto> processWlAddress(WorkLocationDto workLocationDto, MaintainProviderResponse response, PrsWorkLocations workLocation, ProviderDto providerDto) {

        addressProcessor.validateAddressLineFour(workLocationDto.getAddresses(), response);
        return addressProcessor.convertAndValidateWorkLocationChildren(workLocationDto.getAddresses(),
                ca.bc.gov.health.plr.dto.provider.AddressDto.class,
                GrsAddresses.class, workLocation, providerDto, "addrId", response);
    }

    /**
     * Process work location telecom address
     *
     * @param workLocationDto
     * @param response
     * @param workLocation
     */
    private List<ca.bc.gov.health.plr.dto.provider.TelecommunicationDto> processWlTelecoms(WorkLocationDto workLocationDto, MaintainProviderResponse response, PrsWorkLocations workLocation, ProviderDto providerDto) {
        return teleComProcessor.convertAndValidateWorkLocationChildren(workLocationDto.getTelecommunications(),
                ca.bc.gov.health.plr.dto.provider.TelecommunicationDto.class, GrsTelephones.class, workLocation, providerDto,
                "phonId", response);
    }

    /**
     * Process work location electronic addresses.
     *
     * @param workLocationDto
     * @param response
     * @param workLocation
     */
    private List<ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto> processEAddresses(WorkLocationDto workLocationDto, MaintainProviderResponse response, PrsWorkLocations workLocation, ProviderDto providerDto) {
        return electronicProcessor.convertAndValidateWorkLocationChildren(workLocationDto.getElectronicAddresses(),
                ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto.class, GrsElectronicAddresses.class, workLocation, providerDto,
                "eaddrId", response);
    }

    /**
     * Validation method for work location TelecommunicationDto and to display
     * the corresponding error messages.
     *
     * @param response MaintainProviderResponse
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    public void errorWorkLocTelecomECNotAllowed(MaintainProviderResponse response) throws EntityValidationException {
        String message = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_WORK_LOCATION_COMM_PURPOSE_TYPE_NOT_ALLOWED);
        String[] codeAndMessage = MessageCodeHelper.splitCodeAndMessage(message);
        response.addAcknowledgment(new Acknowledgment(codeAndMessage[0], codeAndMessage[1]));
    }

}
