package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.dto.converter.ProviderRelationshipDtoConverter;
import ca.bc.gov.health.plr.dto.provider.ProviderRelationshipDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtRelationshipTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviderRelationships;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import ca.bc.gov.health.plr.rule.provider.AccessRestrictionService;
import ca.bc.gov.health.plr.rule.provider.ValidateIdentifierUniquelyIdentifies;
import ca.bc.gov.health.plr.service.EntityValidatorService;
import ca.bc.gov.health.plr.service.validators.ConfidentialityValidator;
import ca.bc.gov.health.plr.service.validators.EntityChangeDetector;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 * Service class for persisting Provider Relationship records.
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@Stateless
@LocalBean
public class MaintainProviderRelationshipService implements MaintainService<ProviderRelationshipDto>{

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;
    @EJB
    private JournalService<PrsProviderRelationships> journalService;
    @EJB
    private ProviderRelationshipDtoConverter dtoConverter;
    @EJB
    private ValidateIdentifierUniquelyIdentifies validateIdentifierUniquelyIdentifies;

    @EJB
    private EntityValidatorService<PrsProviderRelationships> validatorService;

    @EJB
    private ConfidentialityValidator<PrsProviderRelationships> confidentialityValidator;
    
    @EJB
    private CodesDao codesDao;

    @EJB
    private AccessRestrictionService accessRestrictionService;
    
    @EJB
    private ProviderDtoConverter providerDtoConverter;
    
    @EJB
    private EntityChangeDetector<ProviderRelationshipDto, PrsProviderRelationships> entityChangeDetector;

    /**
     * Adds or Updates a Provider to Provider relationship.
     *
     * @param dto a Provider to Provider Relationship DTO.
     * @return 
     * @throws ca.bc.gov.health.plr.service.provider.DuplicateRecordException
     * @throws ca.bc.gov.health.plr.rule.BusinessRuleException
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Override
    public ProviderRelationshipDto save(ProviderRelationshipDto dto) throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        
        checkIdentifier(dto.getIdentifierTypeId(),dto.getIdentifierTypeCode(), dto.getIdentifier());
        
        PrsProviderRelationships entity = dtoConverter.toEntity(dto);
        entityChangeDetector.checkForChanges(dto, entity);
        if (dto.isNoChangeOnUpdate()) {
            return dto;
        }
        
        validatorService.validate(entity, confidentialityValidator);
        
        resolveTargetRelationshipType(entity);
        
        entity = journalService.journal(entity);

        return providerDtoConverter.buildProviderRelationship(entity);
    }
    
   
    /**
     * Get all Provider to Provider relationships associated with the specified Provider.
     * @param pauthId specifies a Provider via primary key.
     * @return all Provider to Provider relationships associated with the specified Provider.
     */
    public List<ProviderRelationshipDto> getRelationships(long pauthId) {
        PrsProviders prsProvider = em.find(PrsProviders.class, pauthId);
        List<PrsProviderRelationships> relationships = prsProvider.getPrsProviderRelationshipsList1();
        List<ProviderRelationshipDto> dtos = providerDtoConverter.buildProviderRelationships(relationships);
        accessRestrictionService.applyReadRestriction(dtos, prsProvider.getHptCode(), PrsProviderRelationships.class);
        return dtos;
    }

    /**
     * Throws a BusinessRuleException if the specified identifier does not 
     * uniquely identify a Provider.
     *
     * @param identifierTypeId specifies a valid identifier type.
     * @param identifier a provider identifier to search for.
     */
    private void checkIdentifier(Long identifierTypeId, String identifierTypeCode, String identifier) throws BusinessRuleException {
        BusinessRuleResult brr = validateIdentifierUniquelyIdentifies.validateUniquelyIdentifies(identifierTypeId,identifierTypeCode, identifier);
        if (!brr.isValid()) {
            throw new BusinessRuleException(brr);
        }
    }

    /**
     * Set the given Relationship's Target Relationship Type to the "reverse" of
     * the Relationship's Type. (The "reverse" type is specified in a database 
     * attribute.) If the Target Relationship Type already has a value, do not
     * change it.
     * 
     * @param relationship the Relationship to set the Target Relationship Type of.
     */
    private void resolveTargetRelationshipType(PrsProviderRelationships relationship) {
        if (relationship.getTargetProvRelnTypeCode() == null) {
            PrsCtRelationshipTypes relationshipTypeCode = relationship.getProvRelationshipTypeCode();
            if (relationshipTypeCode != null) {
                String typeName = relationshipTypeCode.getReverseRelationship();
                PrsCtRelationshipTypes reverseType = codesDao.lookup(PrsCtRelationshipTypes.class, typeName);
                relationship.setTargetProvRelnTypeCode(reverseType);
            }
        }
    }
    
}
