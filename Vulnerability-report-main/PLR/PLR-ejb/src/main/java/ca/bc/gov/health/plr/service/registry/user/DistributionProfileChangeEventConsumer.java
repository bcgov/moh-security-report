package ca.bc.gov.health.plr.service.registry.user;

import ca.bc.gov.health.plr.dto.reguser.DistributionDto;
import ca.bc.gov.health.plr.ejb.entity.GrsDistribEventItem;
import ca.bc.gov.health.plr.ejb.entity.GrsDistributionProfiles;
import ca.bc.gov.health.plr.events.ChangeEvent;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.Asynchronous;
import javax.ejb.Stateless;
import javax.enterprise.event.Observes;
import javax.enterprise.event.TransactionPhase;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 * Change event consumer associated with DistributionProfile changes
 *
 * @author adebiyi.kuseju
 */
@Stateless
public class DistributionProfileChangeEventConsumer {

    private static final Logger logger = Logger.getLogger(DistributionProfileChangeEventConsumer.class.getName());

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;

    /**
     * Processes change event
     *
     * @param changeEvent
     */
    @Asynchronous
    public void processEvent(@Observes(during = TransactionPhase.AFTER_COMPLETION) ChangeEvent changeEvent) {

        Object[] arguments = changeEvent.getArguments();
        Object changedItem = changeEvent.getChangedItem();

        // Kick into action if this change affects distribution profile
        // and we are only modifying an existing profile and not creating
        // a new one
        if (changedItem instanceof DistributionDto && !((DistributionDto) arguments[0]).isNew()) {

            GrsDistributionProfiles old = em.find(GrsDistributionProfiles.class, ((DistributionDto) arguments[0]).getId());
            GrsDistributionProfiles current = em.find(GrsDistributionProfiles.class, ((DistributionDto) changedItem).getId());            
            List<GrsDistribEventItem> toUpdate = em.createQuery("SELECT D FROM GrsDistribEventItem D WHERE D.cpdId = :oldProfile AND D.status != :completed ")
                    .setParameter("oldProfile", old)
                    .setParameter("completed", GrsDistribEventItem.Status.COMPLETED).getResultList();

            if (!toUpdate.isEmpty()) {

                // We need to update all the GrsDistribEventItem items associated with the 
                // old state of this profile to the new one so that changes in "Hold Flag"
                // can be detected and applied automatically
                for (GrsDistribEventItem item : toUpdate) {
                    item.setCpdId(current);
                    current.getGrsDistribEventItemList().add(item);
                }

                em.merge(current);
            }

        }

    }

}
