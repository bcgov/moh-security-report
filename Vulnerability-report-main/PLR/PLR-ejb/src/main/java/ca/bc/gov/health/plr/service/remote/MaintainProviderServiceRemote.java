package ca.bc.gov.health.plr.service.remote;

import ca.bc.gov.health.plr.dto.esb.BatchRequest;
import ca.bc.gov.health.plr.dto.esb.BatchResponse;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import java.util.concurrent.Future;
import javax.ejb.Remote;

/**
 * Maintain Provider remote service. Send calls to PLR to maintain Providers.
 *
 * Methods in this interface will now throw business exceptions. Validation and
 * security errors will be indicated in the response metadata.
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@Remote
public interface MaintainProviderServiceRemote {

    /**
     * Add or update a Provider.
     *
     * Preconditions:
     * <ul>
     * <li><code>request</code> cannot be null.</li>
     * <li><code>request</code> must contain a ProviderDetails.</li>
     * <li><code>request</code> must have a non-empty registryUserOrgId.</li>
     * </ul>
     *
     * @param request request object containing a Provider and request metadata.
     * @return a response containing the updated Provider and response metadata.
     */
    public MaintainProviderResponse maintainProvider(MaintainProviderRequest request);

    /**
     * Add or update multiple Providers.
     *
     * Will call
     * {@link #maintainProvider(ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest)}
     * for each MaintainProviderRequest (additional documented preconditions
     * apply).
     *
     * Preconditions:
     * <ul>
     * <li><code>batchRequest</code> cannot be null.</li>
     * <li><code>batchRequest</code> must contain a non-empty collection of
     * MaintainProviderRequest.
     * </ul>
     *
     * @param batchRequest request object containing Providers and request
     * metadata.
     * @return a response containing the updated Providers and response
     * metadata.
     */
    public BatchResponse maintainProviders(BatchRequest batchRequest);
    
    /**
     * Calls {@link #maintainProviders(ca.bc.gov.health.plr.dto.esb.BatchRequest)}
     * asynchronously.
     */
    public void asyncMaintainProviders(BatchRequest batchRequest);
}
