package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.converter.ExpertiseDtoConverter;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.dto.provider.ExpertiseDto;
import ca.bc.gov.health.plr.ejb.entity.PrsProviderExpertises;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.rule.provider.AccessRestrictionService;
import ca.bc.gov.health.plr.service.EntityValidatorService;
import ca.bc.gov.health.plr.service.validators.ApplicableExpertiseCodeValidator;
import ca.bc.gov.health.plr.service.validators.ConfidentialityValidator;
import ca.bc.gov.health.plr.service.validators.EntityChangeDetector;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 * Add or update an expertise for a provider.
 *
 * @author Adebiyi.Kuseju
 */
@Stateless
@LocalBean
public class MaintainExpertiseService implements MaintainService<ExpertiseDto>{

    @PersistenceContext(unitName = "PLR-ejbPU")
    protected EntityManager em;

    @EJB
    protected CodesDao codesDao;
    @EJB
    private ExpertiseDtoConverter expertiseDtoConverter;
    @EJB
    private JournalService<PrsProviderExpertises> journalService;
    
    @EJB
    private EntityValidatorService<PrsProviderExpertises> validatorService;

    @EJB
    private ConfidentialityValidator<PrsProviderExpertises> confidentialityValidator;
    
    @EJB
    private AccessRestrictionService accessRestrictionService;
    
    @EJB
    private ProviderDtoConverter providerDtoConverter;
    
    @EJB
    private ApplicableExpertiseCodeValidator expertiseCodeValidator;
    
    @EJB
    private EntityChangeDetector<ExpertiseDto, PrsProviderExpertises> entityChangeDetector;

    
    /**
     * Query a fresh complete list of Expertises related to a specific
     * provider.
     *
     * @param pauthId
     * @return a list of fresh note transfer objects
     */
    public List<ExpertiseDto> getExpetises(long pauthId) {
        PrsProviders provider = em.find(PrsProviders.class, pauthId);
        List<PrsProviderExpertises> expertises = provider.getPrsProviderExpertisesList();
        List<ExpertiseDto> dtos = providerDtoConverter.buildExpertiseList(expertises);
        accessRestrictionService.applyReadRestriction(dtos, provider.getHptCode(), PrsProviderExpertises.class);
        return dtos;
    }

    /**
     * Persists a DTO to the database
     *
     * @param toSave dto to save
     * @throws ca.bc.gov.health.plr.service.provider.DuplicateRecordException
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Override
    public ExpertiseDto save(ExpertiseDto toSave) throws DuplicateRecordException, EntityValidationException {
        PrsProviderExpertises newRecord = expertiseDtoConverter.toEntity(toSave);
        entityChangeDetector.checkForChanges(toSave, newRecord);
        if (toSave.isNoChangeOnUpdate()) {
            return toSave;
        }
        validatorService.validate(newRecord, confidentialityValidator, expertiseCodeValidator);
        newRecord = journalService.journal(newRecord);

        return providerDtoConverter.buildExpertise(newRecord);
    }
    
}
