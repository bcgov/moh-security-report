package ca.bc.gov.health.plr.dto.dps;

import ca.bc.gov.health.plr.ejb.entity.CodeTableInterface;
import ca.bc.gov.health.plr.ejb.entity.GrsAccessProfileGroups;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtDataObjects;
import ca.bc.gov.health.plr.ejb.entity.GrsDataElementPermissions;
import ca.bc.gov.health.plr.ejb.entity.RecordTypeEntity;
import ca.bc.gov.health.plr.ejb.entity.util.EntityUtils;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import ca.bc.gov.health.plr.service.provider.TableToDataObjectMap;
import static ca.bc.gov.health.plr.service.provider.security.AuthorizationService.*;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.JoinColumn;
import javax.persistence.PersistenceContext;
import org.apache.commons.lang3.Validate;

/**
 *
 * @author sumesh.kariyil
 */
@Stateless
public class DataElementPermissionDtoConverter {
    
    private static final String RECORD_TYPE_FORMAT = "%s=%s";
    
    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;
    
    @EJB
    private CodesDao codesDao;
    
    private static GrsCtBooleanTypes active;
    private static GrsCtBooleanTypes inActive;
    
    @PostConstruct
    public void init() {
        active = EntityUtils.toGrsCtBooleanType(true, codesDao);
        inActive = EntityUtils.toGrsCtBooleanType(false, codesDao);
    }
    
    /**
     * Populates the DPS details
     * @param apgId
     * @param de1Code
     * @param deps
     * @return 
     */
    public List<DataElementPermissionDto> populateDataObjectPermissions(Long apgId, Long de1Code, List<GrsDataElementPermissions> deps) {
        List<DataElementPermissionDto> dataElementPermissions = new ArrayList<>();
        GrsCtDataObjects dataObject = codesDao.lookup(GrsCtDataObjects.class, de1Code);
        //Find all record types for the data object
        List<String> recordTypeMappings = constructRecordTypes(dataObject.getCtlNameCode());
        DataElementPermissionDto dto;
        // For each record type map the details with data in data element permissions
        for (String recordTypeMapping : recordTypeMappings) {
            dto = new DataElementPermissionDto();
            dataElementPermissions.add(dto);
            dto.setDeclCode(recordTypeMapping);
            dto.setApgId(apgId);
            dto.setDeCode(ALL);
            dto.setDe1Code(dataObject.getCtlId());
            dto.setDataObjectName(dataObject.getCtlNameCode());
            dto.setActive(true);
            mapDataElementForExistingData(dto, recordTypeMapping, deps);
        }
        return dataElementPermissions;
    }
    
    /**
     *  It returns the list of string, all possible combinations of the record type for the data object
     * @param dataObjectName
     * @return 
     */
    @SuppressWarnings("unchecked")
    public List<String> constructRecordTypes(String dataObjectName){
        Validate.notNull(dataObjectName);
        List<String> recordTypeMappings = new ArrayList<>();
        //default first value is always ANY
        recordTypeMappings.add(ANY);
        Class<? extends RecordTypeEntity> entity = TableToDataObjectMap.getEntityFromDataObjectName(dataObjectName);
        if(entity == null){
            return recordTypeMappings;
        }
        RecordTypeEntity recordType;
        try {
            recordType = entity.newInstance();
            //Get the record type fields from the entity
            String[] recordTypeFields = recordType.getRecordTypeFields();
            for(String fieldName : recordTypeFields){
                Field field = entity.getDeclaredField(fieldName);
                // Get the Code table Join column annotation
                JoinColumn joinColumn = field.getAnnotation(JoinColumn.class);
                String columnName = joinColumn.name();
                // Get the type of Code table 
                Class<CodeTableInterface> recordTypeClass  = (Class<CodeTableInterface>) field.getType();
                // Get the list of all code table values, iterate and construct the record type in a format <Column name>=<value>
                List<? extends CodeTableInterface> list =  em.createNamedQuery(recordTypeClass.getSimpleName()+".findAll", recordTypeClass).getResultList();
                for(CodeTableInterface cti : list){
                    if(makeBoolean(cti.getActiveFlag()) && 
                            (cti.getEndReasonCode() == null || !cti.getEndReasonCode().equals(CodeTableCodes.GrsCtEndReasonTypes.CEASE.getValue()))){
                        recordTypeMappings.add(String.format(RECORD_TYPE_FORMAT, columnName,cti.getCtlNameCode()));
                    }
                }
            }
        } catch (InstantiationException | IllegalAccessException | NoSuchFieldException | SecurityException ex) {
            throw new IllegalStateException("Program error. Error occured while constructing the record types.");
        }
        return recordTypeMappings;
    }
    
    /**
     * Find the existing record in data element permissions table for the record type and map the details
     * @param dto
     * @param recordTypeMapping
     * @param deps
     */
    private void mapDataElementForExistingData(DataElementPermissionDto dto, String recordTypeMapping, List<GrsDataElementPermissions> deps) {
        for (GrsDataElementPermissions elementPermission : deps) {
            if (EntityUtils.booleanValue(elementPermission.getActiveFlag())
                    && elementPermission.getDeclCode().equals(recordTypeMapping)) {
                if(! elementPermission.getDeCode().equals(ALL)){//bypass column level restriction
                    continue;
                }
                dto.setAccessCharCode(elementPermission.getAccessCharacteristicCode());
                dto.setActive(EntityUtils.booleanValue(elementPermission.getActiveFlag()));
                dto.setCorrectFlag(elementPermission.getCorrectFlag());
                dto.setCreatedDate(elementPermission.getCreatedDts());
                dto.setDistributeFlag(elementPermission.getDistributeFlag());
                dto.setEffectiveEndDate(elementPermission.getEffectiveEndDate());
                dto.setEffectiveStartDate(elementPermission.getEffectiveStartDate());
                dto.setEndReasonCode(elementPermission.getEndReasonCode());
                dto.setGenerationNum(elementPermission.getGenerationNum());
                dto.setId(elementPermission.getCdepId());
                dto.setInvalidatedDate(elementPermission.getInvalidatedDts());
                dto.setReadFlag(makeBoolean(elementPermission.getReadFlag()));
                dto.setUpdateFlag(makeBoolean(elementPermission.getUpdateFlag()));
                dto.setUpdateOwnFlag(elementPermission.getUpdateOwnFlag());
                dto.setUserChid(elementPermission.getUserChid());
                dto.setViewHistoryFlag(elementPermission.getViewHistoryFlag());
                dto.setDeCode(elementPermission.getDeCode());
                break;
            }
        }
    }
    
    /**
     * Converts the data element permission dto to entity
     * @param dto
     * @return 
     */
    public GrsDataElementPermissions toEntity(DataElementPermissionDto dto) {
        Validate.notNull(dto);
        GrsDataElementPermissions permission = new GrsDataElementPermissions();
        Date today = new Date();
        permission.setAccessCharacteristicCode(dto.getAccessCharCode());
        GrsCtBooleanTypes activeFlag;
        if (dto.isActive()) {
            activeFlag = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES);
        } else {
            activeFlag = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.NO);
        }
        permission.setActiveFlag(activeFlag);
        permission.setApgApgId(em.find(GrsAccessProfileGroups.class, dto.getApgId()));
        permission.setCdepId(dto.getId());
        permission.setCorrectFlag(dto.getCorrectFlag());
        permission.setCreatedDts(dto.getCreatedDate() == null ? today : dto.getCreatedDate());
        permission.setDe1Code(codesDao.lookup(GrsCtDataObjects.class, dto.getDe1Code()));
        permission.setDeCode(dto.getDeCode());
        permission.setDeclCode(dto.getDeclCode());
        permission.setDistributeFlag(dto.getDistributeFlag());
        permission.setEffectiveEndDate(dto.getEffectiveEndDate() == null ? DatabaseConstants.SYSTEM_HIGH_DATE.toDate() : dto.getEffectiveEndDate());
        permission.setEffectiveStartDate(dto.getEffectiveStartDate() == null ? today : dto.getEffectiveStartDate());
        permission.setEndReasonCode(dto.getEndReasonCode());
        permission.setGenerationNum(dto.getGenerationNum()==null?1:dto.getGenerationNum());
        permission.setInvalidatedDts(dto.getInvalidatedDate() == null ? DatabaseConstants.SYSTEM_HIGH_DATE.toDate() : dto.getInvalidatedDate());
        permission.setReadFlag(makeString(dto.isReadFlag()));
        permission.setUpdateFlag(makeString(dto.isUpdateFlag()));
        permission.setUpdateOwnFlag(dto.getUpdateOwnFlag());
        permission.setUserChid(dto.getUserChid());
        permission.setViewCorrectionsFlag(dto.getCorrectFlag());
        permission.setViewHistoryFlag(dto.getViewHistoryFlag());

        return permission;
    }
    
    private boolean makeBoolean(String yesNo){        
        return yesNo == null ? false : (CodeTableCodes.GrsCtBooleanTypes.YES.getValue().equals(yesNo));
    }
    
    private String makeString(boolean yesNo){        
        return yesNo ? active.getCtlNameCode() : inActive.getCtlNameCode();
    }
    
}
