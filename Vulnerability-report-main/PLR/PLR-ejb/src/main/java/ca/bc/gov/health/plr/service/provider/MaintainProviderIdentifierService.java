/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.dto.converter.ProviderIdentifierDtoConverter;
import ca.bc.gov.health.plr.dto.provider.CollegeIdentifierDto;
import ca.bc.gov.health.plr.ejb.entity.GrsIdentifiers;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.rule.provider.AccessRestrictionService;
import ca.bc.gov.health.plr.service.EntityValidatorService;
import ca.bc.gov.health.plr.service.validators.ApplicableProviderIdentifierValidator;
import ca.bc.gov.health.plr.service.validators.ConfidentialityValidator;
import ca.bc.gov.health.plr.service.validators.EntityChangeDetector;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.service.validators.LastActiveValidator;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author ian.scott
 */
@Stateless
@LocalBean
public class MaintainProviderIdentifierService {

    @PersistenceContext(unitName = "PLR-ejbPU")
    protected EntityManager em;
    @EJB
    protected CodesDao codesDao;
    @EJB
    private ProviderIdentifierDtoConverter providerIdentifierDtoConverter;
    @EJB
    private JournalService<GrsIdentifiers> journalService;

    @EJB
    private EntityValidatorService<GrsIdentifiers> validatorService;

    @EJB
    private ConfidentialityValidator<GrsIdentifiers> confidentialityValidator;
     
    @EJB
    private LastActiveValidator<GrsIdentifiers> lastActiveIdentifierValidator;   
    
    @EJB
    private ApplicableProviderIdentifierValidator identifierValidator;
    
    @EJB
    private AccessRestrictionService accessRestrictionService;
    
    @EJB
    private ProviderDtoConverter providerDtoConverter;
    
    @EJB
    private EntityChangeDetector<CollegeIdentifierDto, GrsIdentifiers> entityChangeDetector;

    /**
     * Bulids a dto from a record in the database based on primary key (ID)
     *
     * @param toRefresh - a dto with an ID
     * @return - dto built from database record or null
     */
    public CollegeIdentifierDto refresh(CollegeIdentifierDto toRefresh) {
        GrsIdentifiers found = em.find(GrsIdentifiers.class, toRefresh.getId());
        CollegeIdentifierDto toSendBack = providerDtoConverter.buildIdentifier(found);
        return toSendBack;
    }

    public CollegeIdentifierDto save(CollegeIdentifierDto ident) throws DuplicateRecordException, EntityValidationException {
        GrsIdentifiers newRecord = providerIdentifierDtoConverter.toEntity(ident);
        entityChangeDetector.checkForChanges(ident, newRecord);
	if(ident.isNoChangeOnUpdate()){
            return ident;
	}
        validatorService.validate(newRecord, lastActiveIdentifierValidator, confidentialityValidator, identifierValidator);
        newRecord = journalService.journal(newRecord);

        return providerDtoConverter.buildIdentifier(newRecord);

    }
    
    /**
     * Query a fresh complete list of Identifiers related to a specific
     * provider.
     *
     * @param ident
     * @return a list of fresh transfer objects
     */
    public List<CollegeIdentifierDto> refreshIdentifiers(CollegeIdentifierDto ident) {
        List<GrsIdentifiers> foundIdent = null;
        List<CollegeIdentifierDto> dtos = null;
        
        if (ident.getPauthId() != null) {
            PrsProviders provider = em.find(PrsProviders.class, ident.getPauthId());
            foundIdent = provider.getGrsIdentifiersList();
            dtos = providerDtoConverter.buildIdentifiers(foundIdent);
            accessRestrictionService.applyReadRestriction(dtos, provider.getHptCode(), GrsIdentifiers.class);
        }
        return dtos;
    }
}
