/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service;

import ca.bc.gov.health.plr.persistence.ConfigurationDao;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.Schedule;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.inject.Inject;
import javax.mail.MessagingException;

/**
 *
 * @author tim.osse
 */
@Singleton
@Startup
public class AddressDoctorMonitorService {

    @Inject
    private AddressDoctorConnection addressDoctorConnection;

    private static final String CLASSNAME = AddressDoctorMonitorService.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    @Inject
    private ConfigurationDao configurationDao;

    @Inject
    private JNDIResourceLoader prod;

    @Inject
    private EmailService emailService;

    protected boolean available = true;

    /**
     * Sends email when address doctor goes down or comes back
     * @param subject email subject
     * @param bodyText email body
     */
    private void sendNoticeEmail(String subject, String bodyText) {

        String senderAddress = configurationDao.getADEmailNotificationFrom();
        List<String> mainRecipients = configurationDao.getADEmailNotificationRecipients();
        List<String> ccRecipients = configurationDao.getADEmailNotificationCCRecipients();
        List<String> bccRecipients = configurationDao.getADEmailNotificationBCCRecipients();
        List<String> attachmentFilePaths = new ArrayList<>();

        try {
            emailService.sendMail(senderAddress, mainRecipients, ccRecipients, bccRecipients, subject, bodyText, attachmentFilePaths);
        } catch (MessagingException se) {
            LOG.log(Level.SEVERE, "Failed to send Address Doctor Email:", se);
            if (!(se.getCause() instanceof SocketException)) {
                LOG.log(Level.SEVERE, "Failed to send Address Doctor Email, Socket Exception:", se);
            }
        }
    }

    @Schedule(hour = "*", minute = "*", second = "5", info = "Check the address doctor service for availability")
    void monitorADServiceOutage() {

        // synchronize the check so the availability doesn't change while checking
        synchronized (this) {
            if (!isAvailable()) {
                LOG.log(Level.INFO, "Address Doctor Monitor Service: Checking status ....");
                setAvailable(addressDoctorConnection.testAddressDoctorAvailability());
            }
        }
    }

    /**
     * @return the available
     */
    public synchronized boolean isAvailable() {
        return available;
    }

    /**
     * Sets the availability and sends emails
     * @param available 
     */
    public synchronized void setAvailable(boolean available) {
        if (this.available == true && !available) {
            // this is an outage, send the emails
            LOG.log(Level.INFO, "Address Doctor Monitor Service UN Available");
            
            // set the soap object to null indicating, unavailable
            addressDoctorConnection.setSoapService(null);
            
            String subject = configurationDao.getADDownEmailNotificationSubject();
            String bodyText = configurationDao.getADDownEmailNotificationBody();
            sendNoticeEmail(subject, bodyText);
        } else if (this.available == false && available) {
            // outage is over, send the emails
            LOG.log(Level.INFO, "Address Doctor MonitorService available");
            String subject = configurationDao.getADUpEmailNotificationSubject();
            String bodyText = configurationDao.getADUpEmailNotificationBody();
            sendNoticeEmail(subject, bodyText);
        } else {
            LOG.log(Level.INFO, "Address Doctor Monitor Service no change " + available);
        }
        this.available = available;
    }

}
