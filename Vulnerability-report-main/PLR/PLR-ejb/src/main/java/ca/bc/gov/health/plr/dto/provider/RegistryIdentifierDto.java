package ca.bc.gov.health.plr.dto.provider;

import ca.bc.gov.health.plr.dto.MessageDataBlockDto;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsCtRegIdentifierTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryIdentifiers;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeName;
import ca.bc.gov.health.plr.rule.provider.AcceptableId;
import java.lang.reflect.Method;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.validation.constraints.NotNull;
import org.apache.commons.lang3.StringUtils;
import javax.validation.constraints.NotBlank;
import org.joda.time.DateTime;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class RegistryIdentifierDto extends AbstractProviderDetail implements MessageDataBlockDto, Comparable<RegistryIdentifierDto>{

    @NotBlank(message = "{error.notblank.part1of2}Identifier{error.notblank.part2of2}")
    @AcceptableId(pattern = ProviderDetailsUtil.regIDPattern, message = "{error.identifierfield.invalidcharacters}")
    private String identifier;
    @AcceptableId(pattern = ProviderDetailsUtil.regIDPattern, message = "{error.identifierfield.invalidcharacters}")
    private String rawIdentifier;
    
    @AcceptableCodeName(clazz = GrsCtRegIdentifierTypes.class, code = "Registry Identifier Type")
    private String typeCode;
    @NotNull(message = "{error.notblank.part1of2} Registry Identifier Effective Start Date {error.notblank.part2of2}")
    private Date effectiveStartDate;
    private Date effectiveEndDate;
    private Long typeId;
    /**
     * @return the identifier
     */
    public String getIdentifier() {
        return identifier;
    }

    /**
     * @param identifier the identifier to set
     */
    public void setIdentifier(String identifier) {
        identifier = StringUtils.stripAccents(identifier);
        identifier = StringUtils.strip(identifier);
        this.identifier = identifier;
    }

    /**
     * @return the rawIdentifier
     */
    public String getRawIdentifier() {
        return rawIdentifier;
    }

    /**
     * @param rawIdentifier the rawIdentifier to set
     */
    public void setRawIdentifier(String rawIdentifier) {
        this.rawIdentifier = rawIdentifier;
    }

    @Override
    public String[] getMessageDataBlockFields() {
        return new String[]{"typeCode"};
    }
    
    @Override
    public ca.bc.gov.health.plr.dto.provider.esb.AbstractProviderDetail toEsbVersion() {  
        ca.bc.gov.health.plr.dto.provider.esb.RegistryIdentifierDto esbVersion = new ca.bc.gov.health.plr.dto.provider.esb.RegistryIdentifierDto();
        
        esbVersion.setPauthId(getPauthId());
        esbVersion.setDataOwnerName(getDataOwnerName());
        esbVersion.setDataOwnerCode(getDataOwnerCode());
        esbVersion.setTypeId(getTypeId());
        esbVersion.setType(getType());
        esbVersion.setTypeCode(getTypeCode());
        esbVersion.setIdentifier(identifier);
        esbVersion.setRawIdentifier(rawIdentifier);
        
        return esbVersion;

    }

    @Override
    public String getTypeCode() {
        return typeCode;
    }

    @Override
    public void setTypeCode(String typeCode) {
        this.typeCode = typeCode;
    }
    @Override
    public String getBlockName() {
        return "Registry Identifier";
    }

    @Override
    public int compareTo(RegistryIdentifierDto o) {
        final int BEFORE = -1;
        final int EQUAL = 0;
        final int AFTER = 1;
        
        //compare active
        if (this.isDisplayActive() && !o.isDisplayActive()) {
            return BEFORE;
        }
        if (!this.isDisplayActive() && o.isDisplayActive()) {
            return AFTER;
        }

        //date compare
        DateTime thisDate = new DateTime(this.getCreatedDate());
        DateTime thatDate = new DateTime(o.getCreatedDate());
        if (thisDate.isAfter(thatDate)) {
            return BEFORE;
        }
        return EQUAL;
    }

    /**
     * @return the effectiveStartDate
     */
    @Override
    public Date getEffectiveStartDate() {
        return effectiveStartDate;
    }

    /**
     * @param effectiveStartDate the effectiveStartDate to set
     */
    @Override
    public void setEffectiveStartDate(Date effectiveStartDate) {
        this.effectiveStartDate = effectiveStartDate;
    }

    @Override
    public Date getEffectiveEndDate() {
        return effectiveEndDate;
    }

    @Override
    public void setEffectiveEndDate(Date effectiveEndDate) {
        this.effectiveEndDate = effectiveEndDate;
    }

    public Long getTypeId() {
        return typeId;
    }

    public void setTypeId(Long typeId) {
        this.typeId = typeId;
    }

    @Override
    public void addToProviderDto(ProviderDto providerDto) {
        providerDto.getRegistryIdentifiers().add(this);
    }
    
        @Override
    public Class getEntityClass() {
        return GrsRegistryIdentifiers.class;
    }
    
    @Override
    public Method getDtoConverterMethod() {
        Method method = null;
        try {
            method = ProviderDtoConverter.class.getMethod("buildRegistryIdentifier", GrsRegistryIdentifiers.class);
        } catch (NoSuchMethodException | SecurityException ex) {
            Logger.getLogger(AddressDto.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // return null is OK
        return method;
    }
    
}
