/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.interceptors;

import ca.bc.gov.health.login.UserPrincipal;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.producer.type.Authenticated;
import ca.bc.gov.health.plr.producer.type.User;
import ca.bc.gov.hlth.auth.util.AuthorizationManager;
import ca.bc.gov.hlth.auth.util.AuthorizationManagerFactory;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.enterprise.inject.Instance;
import javax.inject.Inject;
import javax.interceptor.AroundInvoke;
import javax.interceptor.InvocationContext;

/**
 * A service interceptor that determines if the user trying to invoke a service
 * is authorized to access a service and invoke the method in question
 *
 * @author Adebiyi.Kuseju
 */
public class AccessInterceptor {

    private static final Logger logger = Logger.getLogger(AccessInterceptor.class.getName());

    @Inject
    @Authenticated
    private Instance<User> user;

    @AroundInvoke
    public Object isAllowed(InvocationContext ivc) throws Exception {

        // Obtain an instance of AuthorizationManager
        AuthorizationManager authorizationManager = AuthorizationManagerFactory.getInstance();

        String className = ivc.getTarget().getClass().getName();
        String methodName = ivc.getMethod().getName();
        UserPrincipal up = user.get().getUserPrincipal();

        if (up != null) {
            // If authorization succeeds, complete method call; otherwise throw AccessViolationException 
            // For details of how attemptAuthorization method works, consult the source file for the ASSMAuth-common library
            if (authorizationManager.attemptAuthorization(className, Arrays.asList(up.getRoles().toArray()))) {
                return ivc.proceed();
            } else {
                String msg = String.format(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ACCESS_VIOLATION));
                logger.log(Level.WARNING, className);
                throw new AccessViolationException(msg);
            }

        } else {
            String msg = String.format(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ACCESS_VIOLATION_NO_AUTHENTICATION), methodName, className);
            logger.log(Level.SEVERE, className);
            throw new AccessViolationException(msg);
        }

    }
}
