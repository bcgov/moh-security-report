/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.dto.converter.RegistryUserRelationshipDtoConverter;
import ca.bc.gov.health.plr.dto.provider.RegistryUserRelationshipDto;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.PrsProvRuRelns;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import ca.bc.gov.health.plr.rule.provider.AccessRestrictionService;
import ca.bc.gov.health.plr.rule.provider.ValidateRegisitryUserIdUniquelyIdentifies;
import ca.bc.gov.health.plr.service.EntityValidatorService;
import ca.bc.gov.health.plr.service.validators.ConfidentialityValidator;
import ca.bc.gov.health.plr.service.validators.EntityChangeDetector;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

/**
 * Service class for adding and updating Registry User Relationship records.
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@Stateless
@LocalBean
public class MaintainRegistryUserRelationshipService implements MaintainService<RegistryUserRelationshipDto> {

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;
    @EJB
    private JournalService<PrsProvRuRelns> journalService;
    @EJB
    private RegistryUserRelationshipDtoConverter converter;
    @EJB
    private ValidateRegisitryUserIdUniquelyIdentifies userIdUniquelyIdentifies;

    @EJB
    private EntityValidatorService<PrsProvRuRelns> validatorService;

    @EJB
    private ConfidentialityValidator<PrsProvRuRelns> confidentialityValidator;

    @EJB
    private AccessRestrictionService accessRestrictionService;

    @EJB
    protected CodesDao codesDao;

    @EJB
    private ProviderDtoConverter providerDtoConverter;

    @EJB
    private EntityChangeDetector<RegistryUserRelationshipDto, PrsProvRuRelns> entityChangeDetector;

    /**
     * Adds or updates a Provider to Registry User relationship.
     *
     * @param dto the DTO representing the entity to be added or updated.
     * @return
     * @throws ca.bc.gov.health.plr.service.provider.DuplicateRecordException
     * @throws ca.bc.gov.health.plr.rule.BusinessRuleException
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Override
    public RegistryUserRelationshipDto save(RegistryUserRelationshipDto dto) throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        checkIdentifier(dto);

        PrsProvRuRelns newRecord = converter.toEntity(dto);
        entityChangeDetector.checkForChanges(dto, newRecord);
        if (dto.isNoChangeOnUpdate()) {
            return dto;
        }
        validatorService.validate(newRecord, confidentialityValidator);
        journalService.journal(newRecord);

        // for auditing we need more information in the dto
        dto.setRegUserTypeCode(newRecord.getRuRelationshipTypeCode().getCtlNameCode());
        dto.setRegUserRelnId(newRecord.getRuRuRelnWithId().getRuId());
        dto.setGenerationNum(newRecord.getGenerationNum());
        dto.setDataOwnerCode(newRecord.getDataOwnerCode().getCtlNameCode());
        if (newRecord.getEndReasonCode() != null) {
            dto.setEndReasonCode(newRecord.getEndReasonCode().getCtlNameCode());
        }
        dto.setTypeCode(newRecord.getRuRelationshipTypeCode().getCtlNameCode());

        return dto;
    }

    /**
     * Get all Provider to Registry User relationships associated with the
     * specified Provider.
     *
     * @param pauthId specifies a Provider via valid primary key.
     * @return all Provider to Registry User relationships associated with the
     * specified Provider.
     */
    public List<RegistryUserRelationshipDto> getRelationships(Long pauthId) {
        PrsProviders provider = em.find(PrsProviders.class, pauthId);
        List<RegistryUserRelationshipDto> dtos = providerDtoConverter.buildProviderRURelationships(provider.getPrsProvRuRelnsList());
        accessRestrictionService.applyReadRestriction(dtos, provider.getHptCode(), PrsProvRuRelns.class);
        return dtos;
    }

    /**
     * Return Registry Users associated with the given Relationship.
     *
     * @param dto a Registry User Relationship.
     * @return Registry Users associated with the given Relationship.
     */
    public List<GrsRegistryUsers> getMatchingRegistryUsers(RegistryUserRelationshipDto dto) {
        TypedQuery<GrsRegistryUsers> query;
        if (dto.getRegUserTypeId() != null) {
            query = em.createQuery("select r from GrsRegistryUsers r where r.ruTypeCode.ctlId = :regTypeId and r.partyPartyId.registryUserOrgChid = :orgChid", GrsRegistryUsers.class);
            query.setParameter("regTypeId", dto.getRegUserTypeId());
        } else {
            query = em.createQuery("select r from GrsRegistryUsers r where r.ruTypeCode.ctlNameCode = :regTypeCode and r.partyPartyId.registryUserOrgChid = :orgChid", GrsRegistryUsers.class);
            query.setParameter("regTypeCode", dto.getRegUserTypeCode());
        }
        query.setParameter("orgChid", dto.getRegistryUserChid());
        List<GrsRegistryUsers> users = query.getResultList();
        return users;
    }

    /**
     * Validates that the given Registry User ID uniquely identifies a single
     * Registry User.
     *
     * Throws a BusinessRuleException if validations fails.
     *
     * @param registryUserChid a valid Registry User ID.
     * @throws BusinessRuleException if validation fails.
     */
    private void checkIdentifier(RegistryUserRelationshipDto dto) throws BusinessRuleException {
        BusinessRuleResult brr = userIdUniquelyIdentifies.validateUniquelyIdentifies(dto);
        if (!brr.isValid()) {
            throw new BusinessRuleException(brr);
        }
    }

}
