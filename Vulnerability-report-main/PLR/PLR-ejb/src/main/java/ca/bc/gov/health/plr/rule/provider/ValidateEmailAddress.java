package ca.bc.gov.health.plr.rule.provider;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.ConfigurationDao;
import ca.bc.gov.health.plr.rule.BusinessRule;
import ca.bc.gov.health.plr.rule.BusinessRuleMessage;
import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import javax.ejb.DependsOn;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import org.apache.commons.lang3.StringUtils;

/**
 * Checks if a field has a valid e-mail address format. Removed the
 * EmailValidator from apache and added custom regex in database.
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@DependsOn("ConfigurationDao")
@Stateless
@LocalBean
public class ValidateEmailAddress implements BusinessRule {

    private static final String CLASSNAME = ValidateEmailAddress.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    @EJB
    private ConfigurationDao configurationDao;

    private Pattern pattern;
    private Matcher matcher;

    /**
     * Initializes Configuration DAO.
     *
     */
    protected void initConfigurationDao() {
        try {
            if (configurationDao == null) {
                Context c = new InitialContext();
                configurationDao = (ConfigurationDao) c.lookup(Consts.JNDILOOKUP_CONFIGURATON_DAO);
            }
        } catch (NamingException ne) {
            throw new RuntimeException(ne);
        }
    }

    /**
     * Checks if a field has a valid e-mail address.
     *
     * Validates the email input field, strips accents from accented characters
     * before validation and it returns the result of business rule processing.
     *
     * @param address
     * @return BusinessRuleResult result of business rule processing
     */
    public BusinessRuleResult validate(final String address) {
        initConfigurationDao();
        if (isEmailValidFormat(address)) {
            return new BusinessRuleResult();
        } else {
            BusinessRuleKeys key = BusinessRuleKeys.ERROR_EMAILFIELD_INVALID_CHARACTERS;
            String message = BusinessRuleMessageDao.getMessageResource(key);
            BusinessRuleMessage businessRuleMessage = new BusinessRuleMessage(message, BusinessRuleMessage.Severity.ERROR);
            return new BusinessRuleResult(false, Arrays.asList(businessRuleMessage));
        }
    }

    /**
     * This method matches the regular expression for the e-mail and the given
     * input email and returns true if they match and false otherwise.
     *
     * This method strips accents from accented characters before validation, so
     * Ë becomes E. This is done because PLR implements requirement "REQ-00276
     * Mapping Non-accepted Characters", so although ÏÖÜÇ@cgi.com is not a valid
     * email address, it will become IOUC@cgi.com before it is persisted to the
     * database.
     *
     * @param emailAddress input field
     * @return boolean true if passes validations; false otherwise
     */
    public boolean isEmailValidFormat(String emailAddress) {

        try {
            pattern = Pattern.compile(getEmailFormatRegex(), Pattern.CASE_INSENSITIVE);
        } catch (PatternSyntaxException pse) {
            LOG.log(Level.SEVERE, "ValidateEmailAddress pattern syntanx exception is: {0}.", new Object[]{pse.getMessage()});
        }
        matcher = pattern.matcher(StringUtils.stripAccents(emailAddress));

        LOG.log(Level.INFO, "ValidateEmailAddress isEmailValidFormat matcher.matches is: {0}.", new Object[]{matcher.matches()});

        return matcher.matches();
    }

    /**
     * This method retrieves the regular expression value from Configuration
     * DAO.
     *
     * @return String regex value from the database
     */
    private String getEmailFormatRegex() {
        String emailFormatRegex = configurationDao.getEmailFormatRegex();
        LOG.log(Level.INFO, "ValidateEmailAddress getEmailFormatRegex is: {0}.", new Object[]{emailFormatRegex});
        return emailFormatRegex;
    }

}
