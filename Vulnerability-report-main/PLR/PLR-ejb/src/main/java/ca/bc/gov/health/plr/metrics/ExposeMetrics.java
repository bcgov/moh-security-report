package ca.bc.gov.health.plr.metrics;

import ca.bc.gov.health.plr.service.distribution.ProcessDistributionService;
import ca.bc.gov.health.plr.service.distribution.RestClient;
import ca.bc.gov.health.plr.service.distribution.SendDistributionService;
import java.io.IOException;
import java.io.Serializable;
import java.net.MalformedURLException;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import javax.ejb.EJB;
import javax.ejb.ScheduleExpression;
import javax.ejb.Stateless;
import javax.ejb.Timer;
import javax.inject.Inject;
import javax.naming.NamingException;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author david.sharpe
 */
@Stateless
public class ExposeMetrics implements ExposeMetricsRemote {
    
    @EJB
    private SendDistributionService sendDistributionService;
    
    @EJB
    private ProcessDistributionService processDistributionService;
    
    @Inject
    private RestClient restClient;
    
    @PersistenceContext
    private EntityManager em;
    
    @Override
    public boolean databaseHealthcheck() {
        em.createNativeQuery("SELECT 1 FROM DUAL").getResultList();
        return true;
    }

    @Override
    public Collection<TimerWrapper> getSendDistributionServiceTimers() {
        Collection<Timer> timers = sendDistributionService.getTimers();
        Collection<TimerWrapper> handles = new HashSet<>();
        for (Timer timer : timers) {
            handles.add(new TimerWrapper(timer));
        }
        
        return handles;
    }
    
    @Override
    public boolean esbConnection() throws NamingException, MalformedURLException, IOException {
        String esbHealthResponse = restClient.getEsbHealth();
        if (!esbHealthResponse.equals("ok")) {
            throw new IllegalStateException("ESB returned '" + esbHealthResponse + "'");
        }
        return true;
    }
    
    @Override
     public boolean sendDistributionsEnabled() {
         return sendDistributionService.isSendEnabled();
    }
     
    @Override
     public boolean processDistributionsEnabled() {
         return processDistributionService.isDistributionEnabled();
    }

    /**
     * The Java Timer class is not Serializable, but Remote interfaces require
     * return values to be Serializable.
     */
    public static class TimerWrapper implements Serializable {

        public final Serializable info;
        public final Date nextTimeout;
        public final ScheduleExpression schedule;
        public final long timeRemaining;
        public final boolean calendarTimer;
        public final boolean persistent;

        public TimerWrapper(Timer timer) {
            this.info = timer.getInfo();
            this.nextTimeout = timer.getNextTimeout();
            this.schedule = timer.getSchedule();
            this.timeRemaining = timer.getTimeRemaining();
            this.calendarTimer = timer.isCalendarTimer();
            this.persistent = timer.isPersistent();
        }
    }
    
}
