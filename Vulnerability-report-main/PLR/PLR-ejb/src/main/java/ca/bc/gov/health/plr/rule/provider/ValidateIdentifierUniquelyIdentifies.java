package ca.bc.gov.health.plr.rule.provider;

import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.ProviderDao;
import ca.bc.gov.health.plr.rule.BusinessRule;
import ca.bc.gov.health.plr.rule.BusinessRuleMessage;
import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import ca.bc.gov.health.plr.service.provider.MatchHistory;
import java.util.Arrays;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;

/**
 * Validates the the given identifier uniquely identifies a single Provider.
 *
 * REQ-00855 Validate Related Provider ID
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@Stateless
@LocalBean
public class ValidateIdentifierUniquelyIdentifies implements BusinessRule {

    @EJB
    private ProviderDao providerDao;

    private BusinessRuleMessage businessRuleMessage;

    @PostConstruct
    public void postConstruct() {
        BusinessRuleKeys key = BusinessRuleKeys.ERROR_NONUNIQUE_IDENTIFIER;
        String message = BusinessRuleMessageDao.getMessageResource(key);
        businessRuleMessage = new BusinessRuleMessage(message, BusinessRuleMessage.Severity.ERROR);
    }

    /**
     * Validates the the given identifier uniquely identifies a single Provider.
     *
     * REQ-00855 Validate Related Provider ID
     *
     * @param identifierTypeId specifies a valid identifier type.
     * @param identifier a provider identifier to search for.
     * @return the result of the validation.
     */
    public BusinessRuleResult validateUniquelyIdentifies(Long identifierTypeId, String identifierTypeCode, String identifier) {
        List<PrsProviders> searchByIdentifer;
        if(identifierTypeId != null){
            searchByIdentifer = providerDao.searchByIdentifer(identifierTypeId, identifier, MatchHistory.NO);
        } else {
            searchByIdentifer = providerDao.searchByIdentifer(identifierTypeCode, identifier, MatchHistory.NO);
        }
        
        if (searchByIdentifer.size() != 1) {

            return new BusinessRuleResult(false, Arrays.asList(businessRuleMessage));
        }
        return new BusinessRuleResult();
    }

}
