/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service;

import ca.bc.gov.health.plr.service.provider.AddressSupportService;
import ca.bc.gov.health.plr.dto.AddressSuggestion;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.Address;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.ArrayOfAddress;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.ArrayOfString;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.Parameters;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.Response;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.Result;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.ResultData;
import ca.bc.gov.health.plr.constants.ProcessMode;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtAddressValidTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.persistence.ConfigurationDao;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.inject.Inject;

import javax.ejb.Stateless;
import org.apache.commons.lang3.StringEscapeUtils;

/**
 *
 * @author joshua.burton
 */
@Stateless
public class AddressDoctorService {

    private static final String CLASSNAME = AddressDoctorService.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    @Inject
    private AddressSupportService addressSupportService;

    @Inject
    private CodesDao codesDao;

    @Inject
    private ConfigurationDao configurationDao;

    @Inject
    private AddressDoctorConnectionService addressDoctorConnectionService;

    @Inject
    private JNDIResourceLoader jndiResourceLoader;

    /**
     * Suggests a list of addresses based on keyed user input.
     *
     * @param criteria the user input
     * @return a list of addresses based on keyed user input; or null if there
     * are no results.
     */
    public List<AddressSuggestion> suggestAddresses(String criteria) {
        String country = addressSupportService.getDefaultCountry().getCtlDescTxt();
        List<AddressSuggestion> addressSuggestions = null;
        try {
            addressSuggestions = autoComplete(criteria, country);
        } catch (AddressDoctorUnavailableException ex) {
            // address doctor is unavailable if the list is null
            return null;
        }
        // Results successfully retrieved
        return addressSuggestions;
    }

    /**
     * Queries the address validation service for results based on a given input
     * string. Results are processed into a list of AddressSuggestion objects,
     * which is passed to the caller.
     *
     * @param criteria a string holding the user's auto complete input
     * @param countryInput the currently selected country
     * @return a list of AddressSuggestion objects returned by the address
     * validation service; an empty list if there are no results; or null if the
     * address validation service is not available.
     */
    protected List<AddressSuggestion> autoComplete(String criteria, String countryInput) throws AddressDoctorUnavailableException {

        // Parameters
        Parameters parameters = new Parameters();
        parameters.setProcessMode(ProcessMode.FASTCOMPLETION.name());

        // ArrayOfAddress object to store input addresses.
        ArrayOfAddress inputAddresses = new ArrayOfAddress();

        // Create Address object
        Address address = new Address();

        // Add country
        ArrayOfString country = new ArrayOfString();
        country.getString().add(countryInput);
        address.setCountry(country);

        // Add single line input to the AddressComplete field
        address.setAddressComplete(criteria);

        // Add Address to ArrayOfAddress object
        inputAddresses.getAddress().add(address);

        // Send to the AddressValidationService service and receive the response
        Response response = null;

        // If there are results, add them to a list of address suggestions
        List<AddressSuggestion> addressSuggestions = new ArrayList();

        response = addressDoctorConnectionService.callAddressDoctor(parameters, inputAddresses);

        // just in case check for nulls
        if (response != null && response.getResults() != null && response.getResults().getResult() != null) {

            // Parse the response into a list of results
            List<Result> results = response.getResults().getResult();

            if (results != null
                    && !results.isEmpty()
                    && results.get(0).getResultDataSet() != null
                    && configurationDao.getADFastCompleteProcessStatus().contains(results.get(0).getProcessStatus())) {

                // Process each available address result
                for (ResultData resultData : results.get(0).getResultDataSet().getResultData()) {

                    Address addressResult = resultData.getAddress();
                    AddressSuggestion addressSuggestion = new AddressSuggestion();
                    System.out.println("This many lines : " + addressResult.getDeliveryAddressLines().getString().size());

                    // Process address lines
                    switch (addressResult.getDeliveryAddressLines().getString().size()) {
                        case 4:
                            addressSuggestion.setAddressLine4(addressResult.getDeliveryAddressLines().getString().get(3));
                        case 3:
                            addressSuggestion.setAddressLine3(addressResult.getDeliveryAddressLines().getString().get(2));
                        case 2:
                            addressSuggestion.setAddressLine2(addressResult.getDeliveryAddressLines().getString().get(1));
                        case 1:
                            addressSuggestion.setAddressLine1(addressResult.getDeliveryAddressLines().getString().get(0));
                        default:
                            break;
                    }
                    // Process other address fields
                    addressSuggestion.setCity(addressResult.getLocality().getString().get(0));
                    addressSuggestion.setProvince(addressResult.getProvince().getString().get(0));
                    addressSuggestion.setPostalCode(addressResult.getPostalCode().getString().get(0));
                    addressSuggestion.setCountry(addressResult.getCountry().getString().get(0));

                    boolean valid = false;
                    try {
                        LOG.warning(addressResult.getDeliveryAddressLines().getString().get(0));
                        valid = isValidAddress(convertAddressToGrsAddress(addressResult));
                    } catch (AddressDoctorUnavailableException ex) {
                        Logger.getLogger(AddressDoctorService.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    if (valid) {
                        //Only return valiated addresses to the user
                        addressSuggestions.add(addressSuggestion);
                    }
                }
            }
        } else {
            LOG.warning("Address Doctor web service call returned NULL");
        }
        // Send processed address suggestions
        return addressSuggestions;
    }

    public static final String Q3_ADDRESS_DOCTOR_PROCESS_STATUS = "Q3";
    public static final String C3_ADDRESS_DOCTOR_PROCESS_STATUS = "C3";
    public static final String C4_ADDRESS_DOCTOR_PROCESS_STATUS = "C4";
    public static final String V4_ADDRESS_DOCTOR_PROCESS_STATUS = "V4";
    public static final String V5_ADDRESS_DOCTOR_PROCESS_STATUS = "V5";
    public static final String I5_ADDRESS_DOCTOR_PROCESS_STATUS = "I5";
    public static final String I4_ADDRESS_DOCTOR_PROCESS_STATUS = "I4";

    public Boolean isValidAddress(AddressDto addressDto) throws AddressDoctorUnavailableException {
        return this.isValidAddress(convertDtoToGrsAddress(addressDto));
    }

    public Boolean isValidAddress(ca.bc.gov.health.plr.dto.provider.AddressDto addressDto) throws AddressDoctorUnavailableException {
        return this.isValidAddress(convertDtoToGrsAddress(addressDto));
    }

    public Boolean isValidAddress(GrsAddresses criteria) throws AddressDoctorUnavailableException {
        Boolean retValue = isAddressValidWithCorrection(criteria, null);
        if (retValue == null) {
            throw new AddressDoctorUnavailableException();
        }
        return retValue;
    }

    public Boolean isAddressValidWithCorrection(ca.bc.gov.health.plr.dto.provider.AddressDto addressDto, GrsAddresses grsAddressesResult) throws AddressDoctorUnavailableException {
        GrsAddresses criteria = convertDtoToGrsAddress(addressDto);
        return isAddressValidWithCorrection(criteria, grsAddressesResult);
    }

    public boolean isValidAddress(GrsAddresses criteria, GrsAddresses grsAddressesResult) throws AddressDoctorUnavailableException {
        return isAddressValidWithCorrection(criteria, grsAddressesResult).booleanValue();
    }

    public Boolean isAddressValidWithCorrection(GrsAddresses criteria, GrsAddresses grsAddressesResult) throws AddressDoctorUnavailableException {
        boolean valid = false;
        boolean returnCorrection = false;
        if (grsAddressesResult != null) {
            LOG.log(Level.INFO, "isAddressValidWithCorrection::ADDR_RESULT_NOT_NULL");
            returnCorrection = true;
        }
        if (criteria.getCountryCode() != null) {
            if (!criteria.getCountryCode().getCtlNameCode().equals(CodeTableCodes.PrsCtCountries.CANADA.getValue())) {
                LOG.log(Level.INFO, "isAddressValidWithCorrection::ADDR_COUNTRY_MISSING");
                if (returnCorrection) {
                    grsAddressesResult.setValidationStatus(codesDao.lookup(PrsCtAddressValidTypes.class, CodeTableCodes.PrsCtAddressValidationCodes.NA.getValue()));
                }
                return false;
            }
        }

        String countryInput = addressSupportService.getDefaultCountry().getCtlDescTxt();

        // Parameters
        Parameters parameters = populateProcessingMode();

        // setup input addresses
        ArrayOfAddress inputAddresses = setupInputAddresses(countryInput, criteria);

        // Send to the AddressValidationService service and receive the response
        Response response = null;

        if (configurationDao.getAddressValidationOnOffSwitch().equals("true")) {
            response = addressDoctorConnectionService.callAddressDoctor(parameters, inputAddresses);
        } else {
            LOG.info("Validating addresses is turned off.");
            if (returnCorrection) {
                grsAddressesResult.setValidationStatus(codesDao.lookup(PrsCtAddressValidTypes.class, CodeTableCodes.PrsCtAddressValidationCodes.UNKNOWN.getValue()));
            }
            // pretened AD is unavailable by throwing exception thus setting status to Unknown
            throw new AddressDoctorUnavailableException();
        }

        // Parse the response into a list of results
        List<Result> results = response.getResults().getResult();

        //Testing to be removed
        ResultData resultDataa = results.get(0).getResultDataSet().getResultData().get(0);
        Address addressResult = resultDataa.getAddress();

        LOG.log(Level.INFO, "ProcessStatusToMatch:" + configurationDao.getADWarnProcessStatus());
        LOG.log(Level.INFO, "ProcessStatusReturned:" + results.get(0).getProcessStatus());
        LOG.log(Level.INFO, "MailabilityScoreToMatch:" + configurationDao.getADMailabilityScore());
        LOG.log(Level.INFO, "MailabilityScoreReturned:" + results.get(0).getResultDataSet().getResultData().get(0).getMailabilityScore());

        // If there are results, evaluate business rules.
        if (results != null
                && !results.isEmpty()
                && results.get(0).getResultDataSet() != null) {
            if (configurationDao.getADWarnProcessStatus().contains(results.get(0).getProcessStatus())) {//C4, C3
                //grsAddressesResult.setProcessStatusWarnLevel('true');
                ResultData resultData = results.get(0).getResultDataSet().getResultData().get(0);

                // If using suggestions, there are no corrections required, but if mailability is high enough return valid=true
                // so the address shows up in suggestion list
                if (Integer.parseInt(resultData.getMailabilityScore()) >= configurationDao.getADMailabilityScore()) {    //>=4
                    if (returnCorrection) {
                        convertAddressToGrsAddress(addressResult, grsAddressesResult);
                        grsAddressesResult.setProcessStatusWarnLevel(false);
                        grsAddressesResult.setValidationStatus(codesDao.lookup(PrsCtAddressValidTypes.class, CodeTableCodes.PrsCtAddressValidationCodes.VALID.getValue()));
                    }
                    valid = true;
                    LOG.log(Level.INFO, "ADDR_VALID:YES");
                } else {
                    LOG.log(Level.INFO, "ADDR_INVALID:NO1");
                    if (returnCorrection) {
                        convertAddressToGrsAddress(addressResult, grsAddressesResult);
                        grsAddressesResult.setProcessStatusWarnLevel(true);
                        grsAddressesResult.setValidationStatus(codesDao.lookup(PrsCtAddressValidTypes.class, CodeTableCodes.PrsCtAddressValidationCodes.INVALID.getValue()));
                    }
                    valid = false;
                }
            } else if (configurationDao.getADProcessStatus().contains(results.get(0).getProcessStatus())) {//V5, V4
                //grsAddressesResult.setProcessStatusWarnLevel('true');
                ResultData resultData = results.get(0).getResultDataSet().getResultData().get(0);

                if (Integer.parseInt(resultData.getMailabilityScore()) >= configurationDao.getADMailabilityScore()) {    //>=4
                    if (returnCorrection) {
                        convertAddressToGrsAddress(addressResult, grsAddressesResult);
                        grsAddressesResult.setProcessStatusWarnLevel(false);
                        grsAddressesResult.setValidationStatus(codesDao.lookup(PrsCtAddressValidTypes.class, CodeTableCodes.PrsCtAddressValidationCodes.VALID.getValue()));
                    }
                    valid = true;
                    LOG.log(Level.INFO, "ADDR_VALID:YES");
                } else {
                    LOG.log(Level.INFO, "ADDR_INVALID:NO2");
                    if (returnCorrection) {
                        convertAddressToGrsAddress(addressResult, grsAddressesResult);
                        grsAddressesResult.setProcessStatusWarnLevel(false);
                        grsAddressesResult.setValidationStatus(codesDao.lookup(PrsCtAddressValidTypes.class, CodeTableCodes.PrsCtAddressValidationCodes.INVALID.getValue()));
                    }
                    valid = false;
                }
            } else {
                if (returnCorrection) {
                    grsAddressesResult.setProcessStatusWarnLevel(false);
                    grsAddressesResult.setValidationStatus(codesDao.lookup(PrsCtAddressValidTypes.class, CodeTableCodes.PrsCtAddressValidationCodes.INVALID.getValue()));
                }
            }
        }
        return valid;
    }

    /**
     * Setup the input addresses array
     *
     * @param countryInput country
     * @param criteria address
     * @return
     */
    private ArrayOfAddress setupInputAddresses(String countryInput, GrsAddresses criteria) {
        // ArrayOfAddress object to store input addresses.
        ArrayOfAddress inputAddresses = new ArrayOfAddress();
        // Create Address object
        Address address = new Address();
        // Add country
        ArrayOfString country = new ArrayOfString();
        country.getString().add(countryInput);
        address.setCountry(country);
        ArrayOfString addressLine = new ArrayOfString();
        addressLine.getString().add(StringEscapeUtils.escapeXml10(criteria.getAddressLine1Txt()));
        addressLine.getString().add(StringEscapeUtils.escapeXml10(criteria.getAddressLine2Txt()));
        addressLine.getString().add(StringEscapeUtils.escapeXml10(criteria.getAddressLine3Txt()));
        addressLine.getString().add(StringEscapeUtils.escapeXml10(criteria.getAddressLine4Txt()));
        address.setDeliveryAddressLines(addressLine);
        ArrayOfString locality = new ArrayOfString();
        locality.getString().add(criteria.getCityTxt());
        address.setLocality(locality);
        ArrayOfString province = new ArrayOfString();
        province.getString().add(criteria.getProvinceOrStateTxt());
        address.setProvince(province);
        // Check postal code for spaces
        addressSupportService.fixPostalCodeSpacing(criteria, address);
        // Add Address to ArrayOfAddress object
        inputAddresses.getAddress().add(address);
        return inputAddresses;
    }

    /**
     * Only Batch and Certified mode are valid for validating addresses
     *
     * @return parameters with processing mode set
     */
    private Parameters populateProcessingMode() {
        // Parameters
        Parameters parameters = new Parameters();
        if (configurationDao.getADValidationProcessMode().equalsIgnoreCase(FASTCOMPLETION)) {
            // Fast complete is not a valid option for validating addresses
            LOG.warning("Address Doctor FASTCOMPLETION mode is only for address suggestions.  Switching to BATCH.");
            parameters.setProcessMode(ProcessMode.CERTIFIED.name());
        } else if (configurationDao.getADValidationProcessMode().equalsIgnoreCase(CERTIFIED)) {
            parameters.setProcessMode(ProcessMode.CERTIFIED.name());
        } else if (configurationDao.getADValidationProcessMode().equalsIgnoreCase(BATCH)) {
            parameters.setProcessMode(ProcessMode.BATCH.name());
        } else {
            // default is batch
            LOG.warning("Address Doctor processing mode not recognized or not found.  Switching to BATCH.");
            parameters.setProcessMode(ProcessMode.CERTIFIED.name());
        }
        return parameters;
    }
    public static final String BATCH = "BATCH";
    public static final String CERTIFIED = "CERTIFIED";
    public static final String FASTCOMPLETION = "FASTCOMPLETION";

    public GrsAddresses convertDtoToGrsAddress(AddressDto addressDto) {
        GrsAddresses grsAddress = new GrsAddresses();
        grsAddress.setAddressLine1Txt(addressDto.getAddressLineOne());
        if (addressDto.getAddressLineTwo() != null && !addressDto.getAddressLineTwo().isEmpty()) {
            grsAddress.setAddressLine2Txt(addressDto.getAddressLineTwo());
        } else if (addressDto.getAddressLineThree() != null && !addressDto.getAddressLineThree().isEmpty()) {
            grsAddress.setAddressLine3Txt(addressDto.getAddressLineThree());
        } else if (addressDto.getAddressLineFour() != null && !addressDto.getAddressLineFour().isEmpty()) {
            grsAddress.setAddressLine4Txt(addressDto.getAddressLineFour());
        }
        if (addressDto.getCity() != null && !addressDto.getCity().isEmpty()) {
            grsAddress.setCityTxt(addressDto.getCity());
        }
        if (addressDto.getProvinceOrStateTxt() != null && !addressDto.getProvinceOrStateTxt().isEmpty()) {
            grsAddress.setProvinceOrStateTxt(addressDto.getProvinceOrStateTxt());
        }
        if (addressDto.getPostalCode() != null && !addressDto.getPostalCode().isEmpty()) {
            grsAddress.setPostalCodeOrZipTxt(addressDto.getPostalCode());
        }
        return grsAddress;
    }

    private GrsAddresses convertDtoToGrsAddress(ca.bc.gov.health.plr.dto.provider.AddressDto addressDto) {

        GrsAddresses grsAddress = new GrsAddresses();
        grsAddress.setAddressLine1Txt(addressDto.getAddressLineOne());
        if (addressDto.getAddressLineTwo() != null && !addressDto.getAddressLineTwo().isEmpty()) {
            grsAddress.setAddressLine2Txt(addressDto.getAddressLineTwo());
        }
        if (addressDto.getAddressLineThree() != null && !addressDto.getAddressLineThree().isEmpty()) {
            grsAddress.setAddressLine3Txt(addressDto.getAddressLineThree());
        }
        if (addressDto.getCity() != null && !addressDto.getCity().isEmpty()) {
            grsAddress.setCityTxt(addressDto.getCity());
        }
        if (addressDto.getProvinceOrStateTxt() != null && !addressDto.getProvinceOrStateTxt().isEmpty()) {
            grsAddress.setProvinceOrStateTxt(addressDto.getProvinceOrStateTxt());
        }
        if (addressDto.getPostalCode() != null && !addressDto.getPostalCode().isEmpty()) {
            grsAddress.setPostalCodeOrZipTxt(addressDto.getPostalCode());
        }
        if (addressDto.getCountryId() != null) {
            grsAddress.setCountryCode(codesDao.lookup(PrsCtCountries.class, addressDto.getCountryId()));
        }
        addressDto.setCountry(addressSupportService.getDefaultCountry().getCtlDescTxt());

        return grsAddress;
    }

    public GrsAddresses convertAddressToGrsAddress(Address address, GrsAddresses grsAddress) {
        if (address.getBuilding() != null && address.getBuilding().getString() != null && address.getBuilding().getString().size() == 1 && address.getDeliveryAddressLines().getString().size() > 1) {
            // when there is a building name the building name will be on line 1 and street no. and name on line 2
            grsAddress.setAddressLine1Txt(address.getDeliveryAddressLines().getString().get(0));
            grsAddress.setAddressLine2Txt(address.getDeliveryAddressLines().getString().get(1));
        } else {
            grsAddress.setAddressLine1Txt(address.getDeliveryAddressLines().getString().get(0));
            grsAddress.setAddressLine2Txt("");
        }

        grsAddress.setCityTxt(address.getLocality().getString().get(0));
        grsAddress.setProvinceOrStateTxt(address.getProvince().getString().get(0));
        grsAddress.setPostalCodeOrZipTxt(address.getPostalCode().getString().get(0));
        grsAddress.setCountryId(addressSupportService.getDefaultCountry());

        return grsAddress;
    }

    public GrsAddresses convertAddressToGrsAddress(Address address) {
        GrsAddresses grsAddress = new GrsAddresses();
        if (address.getDeliveryService() != null && !address.getDeliveryService().getString().isEmpty() && address.getDeliveryService().getString() != null) {
            grsAddress.setAddressLine1Txt(address.getDeliveryService().getString().get(0));
            grsAddress.setAddressLine2Txt(address.getDeliveryAddressLines().getString().get(0));
        } else {
            grsAddress.setAddressLine1Txt(address.getDeliveryAddressLines().getString().get(0));
            grsAddress.setAddressLine2Txt("");
        }

        grsAddress.setCityTxt(address.getLocality().getString().get(0));
        grsAddress.setProvinceOrStateTxt(address.getProvince().getString().get(0));
        grsAddress.setPostalCodeOrZipTxt(address.getPostalCode().getString().get(0));
        grsAddress.setCountryId(addressSupportService.getDefaultCountry());

        return grsAddress;
    }
}
