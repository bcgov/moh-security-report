/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.remote;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.provider.ProviderDetailsUtil;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodeTableCodes.GrsCtPartyType;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.util.MessageCodeHelper;
import ca.bc.gov.health.plr.service.AddressDoctorService;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import javax.ejb.Stateless;
import javax.inject.Inject;
import org.apache.commons.lang3.StringUtils;

/**
 * Validates minimum details required for adding a provider
 *
 * Validate if the request contains at least 1 identifier, status, name,
 * demographic details, and address
 *
 * @author sumesh.kariyil
 */
@Stateless
public class ProviderMessageValidator {

    @Inject
    private CodesDao codesDao;
    

    /**
     * Validates the minimum data for Add message
     *
     * @param request
     * @param response
     */
    public void validateAdd(MaintainProviderRequest request, MaintainProviderResponse response) {
        List<String> errorFields = new ArrayList<>();
        for (CollegeIdentifierDto collegeIdentifierDto : request.getProviderDetails().getIdentifiers()) {
            //Cannot provide constraint validation as this is not mandatory for update message
            if (collegeIdentifierDto.getEffectiveStartDate() == null) {
                errorFields.add("Identifier Effective Start Date");
            }
        }
        GrsCtPartyType partyType = GrsCtPartyType.valueOf(request.getProviderDetails().getProviderType());
        if (request.getProviderDetails().getOrgNames().isEmpty() && request.getProviderDetails().getIndNames().isEmpty()) {
            errorFields.add("Name");
        } else {
            if (partyType == GrsCtPartyType.ORG) {
                for (OrgNameDto orgNameDto : request.getProviderDetails().getOrgNames()) {
                    if (StringUtils.isEmpty(orgNameDto.getTypeCode())) {
                        errorFields.add("Name Type");
                    }
                }

            } else if (partyType == GrsCtPartyType.IND) {
                for (PersonNameDto personNameDto : request.getProviderDetails().getIndNames()) {
                    if (StringUtils.isEmpty(personNameDto.getTypeCode())) {
                        errorFields.add("Name Type");
                    }
                }
            }
        }

        if (partyType != GrsCtPartyType.ORG) {
            if (request.getProviderDetails().getDemographicDetails().isEmpty()) {
                errorFields.add("Demographics");
            } else {
                for (DemographicDetailsDto dto : request.getProviderDetails().getDemographicDetails()) {
                    if (StringUtils.isEmpty(dto.getGenderCode())) {
                        errorFields.add("Demographics Gender Code");
                    }
                }
            }
        }

        if (request.getProviderDetails().getStatuses().isEmpty()) {
            errorFields.add("Status");
        } else {
            for (StatusDto dto : request.getProviderDetails().getStatuses()) {
                if (StringUtils.isEmpty(dto.getClassCode())) {
                    errorFields.add("Status Class Code");
                }
                if (StringUtils.isEmpty(dto.getTypeCode())) {
                    errorFields.add("Status Code");
                }
                if (StringUtils.isEmpty(dto.getReasonCode())) {
                    errorFields.add("Status Reason Code");
                }
            }
        }

        if (request.getProviderDetails().getAddresses().isEmpty()) {
            errorFields.add("Address");
        } else {
            for (AddressDto dto : request.getProviderDetails().getAddresses()) {
                if (StringUtils.isEmpty(dto.getTypeCode())) {
                    errorFields.add("Address Type");
                }
                if (StringUtils.isEmpty(dto.getCountryCode())) {
                    errorFields.add("Address Country");
                }

                if (StringUtils.isEmpty(dto.getCommunicationPurposeCode())) {
                    errorFields.add("Address Communication Purpose");
                }
            }
        }
        addAcknowledgement(errorFields, response);
    }

    /**
     * Validates the minimum data for update and add message
     *
     * @param request
     * @param response
     */
    public void validateMinimumData(MaintainProviderRequest request, MaintainProviderResponse response) {
        List<String> errorFields = new ArrayList<>();
        String providerType = request.getProviderDetails().getProviderType();
        if (StringUtils.isEmpty(providerType)) {
            errorFields.add("Provider Type");
        } else if (!providerType.equals(GrsCtPartyType.IND.getValue())
                && !providerType.equals(GrsCtPartyType.ORG.getValue())) {
            addCodeErrorAcknowledgement("Party Type", response);
        }

        if (StringUtils.isEmpty(request.getProviderDetails().getType())) {
            errorFields.add("Provider Role Type");
        } else if (codesDao.lookup(PrsCtProviderRoleTypes.class, request.getProviderDetails().getType()) == null) {
            addCodeErrorAcknowledgement("Provider Role Type", response);
        }
        if (request.getProviderDetails().getJurisdiction() == null || StringUtils.isEmpty(request.getProviderDetails().getJurisdiction().getJurisdicationNameCode())) {
            errorFields.add("Jurisdiction");
        }
        if (request.getProviderDetails().getIdentifiers() == null || request.getProviderDetails().getIdentifiers().isEmpty()) {
            errorFields.add("Provider Identifier");
        } else {
            for (CollegeIdentifierDto collegeIdentifierDto : request.getProviderDetails().getIdentifiers()) {
                if (StringUtils.isEmpty(collegeIdentifierDto.getTypeCode())) {
                    errorFields.add("Provider Identifier Type");
                }
            }
        }
        addAcknowledgement(errorFields, response);
    }

    /**
     * Can't have both org and ind name in a incoming message
     *
     * @param provider the provider
     * @param response the response
     */
    public void validateMessageNames(MaintainProviderRequest request, MaintainProviderResponse response, Boolean add) {

        // there can't be IND and ORG names
        if (request.getProviderDetails().getIndNames().size() > 0 && request.getProviderDetails().getOrgNames().size() > 0) {
            String[] splitMessage = MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MESSAGE_NAME_BOTHNOTALLOWED));
            response.addAcknowledgment(new Acknowledgment(splitMessage[0], splitMessage[1]));
        }

        // if IND must have IND name
        if (add && request.getProviderDetails().getProviderType().equals(GrsCtPartyType.IND.getValue()) && request.getProviderDetails().getIndNames().isEmpty()) {
            String[] splitMessage = MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MESSAGE_NAME_MANDATORYIND));
            response.addAcknowledgment(new Acknowledgment(splitMessage[0], splitMessage[1]));
        }
        if (!add && request.getProviderDetails().getProviderType().equals(GrsCtPartyType.IND.getValue()) && !request.getProviderDetails().getOrgNames().isEmpty()) {
            String[] splitMessage = MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MESSAGE_NAME_MANDATORYIND));
            response.addAcknowledgment(new Acknowledgment(splitMessage[0], splitMessage[1]));
        }
        // if ORG must have ORG name
        if (add && request.getProviderDetails().getProviderType().equals(GrsCtPartyType.ORG.getValue()) && request.getProviderDetails().getOrgNames().isEmpty()) {
            String[] splitMessage = MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MESSAGE_NAME_MANDATORYORG));
            response.addAcknowledgment(new Acknowledgment(splitMessage[0], splitMessage[1]));
        }
        if (!add && request.getProviderDetails().getProviderType().equals(GrsCtPartyType.ORG.getValue()) && !request.getProviderDetails().getIndNames().isEmpty()) {
            String[] splitMessage = MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MESSAGE_NAME_MANDATORYORG));
            response.addAcknowledgment(new Acknowledgment(splitMessage[0], splitMessage[1]));
        }
    }

    public void validateCollegeIdentifier(CollegeIdentifierDto dto, MaintainProviderResponse response) {
        if (StringUtils.isEmpty(dto.getIdentifier())) {
            addAcknowledgement("Provider Identifier", response);
        } else if (!Pattern.compile(ProviderDetailsUtil.provIDPattern).matcher(StringUtils.stripAccents(dto.getIdentifier())).matches()) {
            addPatternAcknowledgement("Provider Identifier", response);
        }
        if (StringUtils.isEmpty(dto.getTypeCode())) {
            addAcknowledgement("Identifier Type", response);
        }
    }

    /**
     * Checks basic null value validation for request object
     *
     * @param request
     * @param response
     */
    public void validateRequestForNullValues(MaintainProviderRequest request, MaintainProviderResponse response) {
        List<String> errorFields = new ArrayList<>();
        if (request == null) {
            errorFields.add("Maintain Provider Request");
        } else {
            if (request.getProviderDetails() == null) {
                errorFields.add("Provider Details");
            }
            if (StringUtils.isEmpty(request.getRegistryUserOrgId())) {
                errorFields.add("Registry User Org ID");
            }
        }
        addAcknowledgement(errorFields, response);
    }

    /**
     *
     * @param errorFields
     */
    private void addAcknowledgement(List<String> errorFields, MaintainProviderResponse response) {
        if (!errorFields.isEmpty()) {
            StringUtils.join(errorFields, ",");
            String[] splitMessage = MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MANDATORY_PART1));
            response.addAcknowledgment(new Acknowledgment(splitMessage[0], splitMessage[1]
                    + StringUtils.join(errorFields, ",")
                    + BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MANDATORY_PART2)));
        }
    }

    private void addAcknowledgement(String errorField, MaintainProviderResponse response) {
        String[] splitMessage = MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MANDATORY_PART1));
        response.addAcknowledgment(new Acknowledgment(splitMessage[0], splitMessage[1]
                + errorField
                + BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MANDATORY_PART2)));

    }

    private void addPatternAcknowledgement(String errorField, MaintainProviderResponse response) {
        String[] splitMessage = MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_SEARCH_IDENTIFIER_INVALID));
        response.addAcknowledgment(new Acknowledgment(splitMessage[0], splitMessage[1]
                + errorField));

    }

    private void addCodeErrorAcknowledgement(String errorField, MaintainProviderResponse response) {
        String[] splitMessage = MessageCodeHelper.splitCodeAndMessage(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_CODE_INVALID));
        response.addAcknowledgment(new Acknowledgment(splitMessage[0], splitMessage[1]
                + errorField));

    }

}
