package ca.bc.gov.health.plr.service.distribution;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonElement;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import java.lang.reflect.Type;
import java.util.Date;
import javax.ejb.Stateless;

/**
 *
 * @author adebiyi.kuseju
 * @param <T>
 */
@Stateless
public class JsonSerializer<T> implements Serializer<T> {

    @Override
    public String serialize(T entity) {
        GsonBuilder builder = new GsonBuilder();
        //Use a date format that Jackson can understand
        builder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        Gson gson = builder.create();
        return gson.toJson(entity);
    }

    @Override
    public T deserialize(String serialized, Class clazz) {
        GsonBuilder builder = new GsonBuilder();
        //Use a date format that Jackson can understand
        builder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        Gson gson = builder.create();
        return (T) gson.fromJson(serialized, clazz);
    }

    @Override
    public String serialize(T entity, Options option) {
        GsonBuilder builder = new GsonBuilder();
        //Use a date format that Jackson can understand
        builder.setDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        if (option.equals(Options.CONVERT_STRING_VALS_TO_UPPERCASE)) {
            builder.registerTypeAdapter(String.class, new StringUppercaseSerializer());
        }
        Gson gson = builder.create();
        return gson.toJson(entity);
    }

    private static class StringUppercaseSerializer implements com.google.gson.JsonSerializer<String> {

        @Override
        public JsonElement serialize(String src, Type typeOfSrc, JsonSerializationContext context) {
            return new JsonPrimitive(src.toUpperCase());
        }
    }
}
