package ca.bc.gov.health.plr.dto.provider;

import ca.bc.gov.health.plr.dto.DtoAccessRestrictionData;
import ca.bc.gov.health.plr.dto.MessageDataBlockDto;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.ejb.entity.PrsCtGenderCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvState;
import ca.bc.gov.health.plr.ejb.entity.PrsDemographicDetails;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeId;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeName;
import ca.bc.gov.health.plr.rule.provider.DemographicsCrossFieldConstraints;
import java.lang.reflect.Method;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.validation.constraints.NotNull;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@DemographicsCrossFieldConstraints
public class DemographicDetailsDto extends AbstractProviderDetail implements MessageDataBlockDto {

    @AcceptableCodeId(clazz = PrsCtGenderCodes.class, code = "Gender")
    Long genderId;
    String gender;
    @NotNull(message = "{error.notblank.part1of2}Gender{error.notblank.part2of2}")
    @AcceptableCodeName(clazz = PrsCtGenderCodes.class, code = "Gender")
    String genderCode;
    @NotNull(message = "{error.notblank.part1of2}Birth Date{error.notblank.part2of2}")
    Date birthDate;
    Date deathDate;
    String birthCountry;
    @AcceptableCodeName(clazz = PrsCtCountries.class, code = "Country")
    String birthCountryCode;
    @AcceptableCodeId(clazz = PrsCtCountries.class, code = "Country")
    Long birthCountryCodeId;
    String birthProvStateDesc;
    @AcceptableCodeName(clazz = PrsCtProvState.class, code = "Province / State")
    String birthProvState;
    @AcceptableCodeId(clazz = PrsCtProvState.class, code = "Province / State")
    Long birthProvStateCodeId;

    private DtoAccessRestrictionData accessRestrictionData;

    private String typeCode;
    @NotNull(message = "{error.notblank.part1of2} Demographic Detail Effective Start Date {error.notblank.part2of2}")
    private Date effectiveStartDate;
    private Date effectiveEndDate;
    private Long typeId;

    /**
     * @return the genderCode
     */
    public String getGenderCode() {
        return genderCode;
    }

    /**
     * @param genderCode the genderCode to set
     */
    public void setGenderCode(String genderCode) {
        this.genderCode = genderCode;
    }

    /**
     * @return the birthDate
     */
    public Date getBirthDate() {
        return birthDate;
    }

    /**
     * @param birthDate the birthDate to set
     */
    public void setBirthDate(Date birthDate) {
        this.birthDate = birthDate;
    }

    /**
     * @return the deathDate
     */
    public Date getDeathDate() {
        return deathDate;
    }

    /**
     * @param deathDate the deathDate to set
     */
    public void setDeathDate(Date deathDate) {
        this.deathDate = deathDate;
    }

    /**
     * @return the birthCountryCode
     */
    public String getBirthCountryCode() {
        return birthCountryCode;
    }

    /**
     * @param birthCountryCode the birthCountryCode to set
     */
    public void setBirthCountryCode(String birthCountryCode) {
        this.birthCountryCode = birthCountryCode;
    }

    /**
     * @return the birthProvState
     */
    public String getBirthProvState() {
        return birthProvState;
    }

    /**
     * @param birthProvState the birthProvState to set
     */
    public void setBirthProvState(String birthProvState) {
        this.birthProvState = birthProvState;
    }

    /**
     * @return the gender
     */
    public String getGender() {
        return gender;
    }

    /**
     * @param gender the gender to set
     */
    public void setGender(String gender) {
        this.gender = gender;
    }

    /**
     * @return the birthCountry
     */
    public String getBirthCountry() {
        return birthCountry;
    }

    /**
     * @param birthCountry the birthCountry to set
     */
    public void setBirthCountry(String birthCountry) {
        this.birthCountry = birthCountry;
    }

    /**
     * @return the genderId
     */
    public Long getGenderId() {
        return genderId;
    }

    /**
     * @param genderId the genderId to set
     */
    public void setGenderId(Long genderId) {
        this.genderId = genderId;
    }

    /**
     * @return the birthCountryCodeId
     */
    public Long getBirthCountryCodeId() {
        return birthCountryCodeId;
    }

    /**
     * @param birthCountryCodeId the birthCountryCodeId to set
     */
    public void setBirthCountryCodeId(Long birthCountryCodeId) {
        this.birthCountryCodeId = birthCountryCodeId;
    }

    /**
     * @return the birthProvStateCodeId
     */
    public Long getBirthProvStateCodeId() {
        return birthProvStateCodeId;
    }

    /**
     * @param birthProvStateCodeId the birthProvStateCodeId to set
     */
    public void setBirthProvStateCodeId(Long birthProvStateCodeId) {
        this.birthProvStateCodeId = birthProvStateCodeId;
    }

    public DtoAccessRestrictionData getAccessRestrictionData() {
        return accessRestrictionData;
    }

    public void setAccessRestrictionData(DtoAccessRestrictionData accessRestrictionData) {
        this.accessRestrictionData = accessRestrictionData;
    }

    @Override
    public String[] getMessageDataBlockFields() {
        return new String[]{};
    }

    @Override
    public ca.bc.gov.health.plr.dto.provider.esb.AbstractProviderDetail toEsbVersion() throws Exception {
        ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto esbVersion = new ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto();

        PropertyUtils.copyProperties(esbVersion, this);

        return esbVersion;

    }

    @Override
    public String getTypeCode() {
        return typeCode;
    }

    @Override
    public void setTypeCode(String typeCode) {
        this.typeCode = typeCode;
    }
    @Override
    public String getBlockName() {
        return "Demographic details";
    }

    /**
     * @return the effectiveStartDate
     */
    @Override
    public Date getEffectiveStartDate() {
        return effectiveStartDate;
    }

    /**
     * @param effectiveStartDate the effectiveStartDate to set
     */
    @Override
    public void setEffectiveStartDate(Date effectiveStartDate) {
        this.effectiveStartDate = effectiveStartDate;
    }

    @Override
    public Date getEffectiveEndDate() {
        return effectiveEndDate;
    }

    @Override
    public void setEffectiveEndDate(Date effectiveEndDate) {
        this.effectiveEndDate = effectiveEndDate;
    }

    public Long getTypeId() {
        return typeId;
    }

    public void setTypeId(Long typeId) {
        this.typeId = typeId;
    }

    public String getBirthProvStateDesc() {
        return birthProvStateDesc;
    }

    public void setBirthProvStateDesc(String birthProvStateDesc) {
        this.birthProvStateDesc = birthProvStateDesc;
    }

    public String getBirthProvStateForDemographicsDisplay() {
        if(StringUtils.isBlank(birthProvState)) {
            return "";
        } else {
            StringBuilder sb = new StringBuilder();
            sb.append(this.birthProvStateDesc)
                    .append(" (")
                    .append(this.birthProvState)
                    .append(")");
            return sb.toString();
        }

    }
    
    
    @Override
    public void addToProviderDto(ProviderDto providerDto) {
        providerDto.getDemographicDetails().add(this);
    }
    
    @Override
    public Class getEntityClass() {
        return PrsDemographicDetails.class;
    }
    
    @Override
    public Method getDtoConverterMethod() {
        Method method = null;
        try {
            method = ProviderDtoConverter.class.getMethod("buildDemographicDetail", PrsDemographicDetails.class);
        } catch (NoSuchMethodException | SecurityException ex) {
            Logger.getLogger(AddressDto.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // return null is OK
        return method;
    }

}
