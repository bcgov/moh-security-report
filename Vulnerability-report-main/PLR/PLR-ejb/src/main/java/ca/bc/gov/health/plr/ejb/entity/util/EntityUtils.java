/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.ejb.entity.util;

import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.util.DateUtils;
import java.util.Date;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.LocalDate;

/**
 * Common utilities for PLR JPA entities.
 *
 * @author Grant.Hodgins
 */
public class EntityUtils {

    /**
     * return GrsCtBooleanTypes representation of given boolean
     *
     * @param toConvert - the boolean value to represent as a GrsCtBooleanTypes
     * @param codesDao - the lookup service to retrive the GrsCtBooleanTypes
     * @return the GrsCtBooleanTypes
     */
    public static GrsCtBooleanTypes toGrsCtBooleanType(boolean toConvert, CodesDao codesDao) {
        GrsCtBooleanTypes forProfitFlag;
        if (toConvert) {
            forProfitFlag = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES);
        } else {
            forProfitFlag = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.NO);
        }
        return forProfitFlag;
    }

    /**
     * Return the boolean value, typically for a flag, from the PLR database.
     *
     * @param activeFlag the flag to evaluate
     * @return <code>true</code> if the value is
     * CodeTableCodes.GrsCtBooleanTypes.YES, <code>false</code> otherwise
     * (including a null flag).
     */
    public static boolean booleanValue(GrsCtBooleanTypes activeFlag) {
        return activeFlag != null
                && StringUtils.isNotBlank(activeFlag.getCtlNameCode())
                && CodeTableCodes.GrsCtBooleanTypes.YES.getValue().equals(activeFlag.getCtlNameCode());
    }

    /**
     * Determines whether the provided date is the system high date. For
     * comparison purposes, the time aspect of the date (hours, mins, secs) is
     * ignored.
     *
     * @param date the date to evaluate
     * @return <code>true</code> if the date is the system high date,
     * <code>false</code> otherwise.
     */
    static boolean isSystemHighDate(Date date) {
        return date != null && LocalDate.fromDateFields(date).equals(DatabaseConstants.SYSTEM_HIGH_DATE);
    }

    /**
     * Determines, for a typical entity, whether it is "active" by definition.
     * This is an implementation of REQ-00913.
     *
     * @param activeFlag the ACTIVE_FLAG (expecting a 'Y' or 'N')
     * @param endReasonCode the end reason code
     * @param invalidatedDate the date the record was invalidated (or null)
     * @param effectiveStartDate the effective from date
     * @param effectiveEndDate the effective to date
     * @return <code>true</code> if the provided criteria denotes an active
     * record, <code>false</code> otherwise
     */
    public static boolean isActive(boolean activeFlag, String endReasonCode, Date invalidatedDate, Date effectiveStartDate, Date effectiveEndDate) {
        return (isUpdatable(activeFlag, endReasonCode, invalidatedDate)
                && ((effectiveEndDate == null) || isCurrentlyEffective(effectiveStartDate, effectiveEndDate)));
    }

    /**
     * Same as isActive method, but we don't want to exclude future start dates,
     * so start from system low date to end date.
     *
     * @param activeFlag
     * @param endReasonCode
     * @param invalidatedDate
     * @param effectiveStartDate
     * @param effectiveEndDate
     * @return
     */
    public static boolean isActiveForResponseOrDistribution(boolean activeFlag, String endReasonCode, Date invalidatedDate, Date effectiveStartDate, Date effectiveEndDate) {
        return isUpdatable(activeFlag, endReasonCode, invalidatedDate);
    }

    /**
     * Checks if GrsCtBooleanTypes is active
     *
     * @param booleanType
     * @param codesDao
     * @return
     */
    public static boolean isActive(GrsCtBooleanTypes booleanType) {
        if (booleanType != null) {
            return booleanType.getCtlNameCode().equals(CodeTableCodes.GrsCtBooleanTypes.YES.getValue());
        } else {
            return false;
        }
    }

    /**
     * Determines, for a typical entity, whether it is "updatable" by
     * definition.
     *
     * @param activeFlag the ACTIVE_FLAG (expecting a 'Y' or 'N')
     * @param endReasonCode the end reason code
     * @param invalidatedDate the date the record was invalidated (or null)
     * @return <code>true</code> if the provided criteria denotes an active
     * record, <code>false</code> otherwise
     */
    public static boolean isUpdatable(boolean activeFlag, String endReasonCode, Date invalidatedDate) {
        return (activeFlag
                && endReasonCode == null
                && (invalidatedDate == null || isSystemHighDate(invalidatedDate)));
    }

    /**
     * Determines, for the provided date range, whether today falls in the
     * "active" range.
     *
     * @param effectiveStartDate the effective from date
     * @param effectiveEndDate the effective to date
     * @return <code>true</code> if the system date occurs between the effective
     * dates, <code>false</code> otherwise
     */
    static boolean isCurrentlyEffective(Date effectiveStartDate, Date effectiveEndDate) {
        return effectiveStartDate != null && DateUtils.isCurrentDateWithinRange(effectiveStartDate, effectiveEndDate == null ? DatabaseConstants.SYSTEM_HIGH_DATE.toDate() : effectiveEndDate);
    }
}
