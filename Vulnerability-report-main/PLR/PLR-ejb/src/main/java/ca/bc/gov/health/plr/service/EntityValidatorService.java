package ca.bc.gov.health.plr.service;

import ca.bc.gov.health.plr.ejb.entity.EntityCommon;
import ca.bc.gov.health.plr.service.validators.DataOwnerCodeValidator;
import ca.bc.gov.health.plr.service.validators.EffectiveDatesValidator;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.service.validators.EntityValidator;
import com.sun.istack.logging.Logger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;

/**
 * This validator aggregator class which does all the validation prior to saving
 *
 * @author sumesh.kariyil
 * @param <T> : Entity for validation
 */
@LocalBean
@Stateless
public class EntityValidatorService<T> {

    private static final Logger logger = Logger.getLogger(EntityValidatorService.class);

    @EJB
    private EffectiveDatesValidator effectiveDatesValidator;
    
    @EJB
    private DataOwnerCodeValidator<T> dataOwnerCodeValidator;
    
    public void validate(T entity, EntityValidator... entityValidators) throws EntityValidationException {
        List validators = new ArrayList(Arrays.asList(entityValidators));
        validators.add(dataOwnerCodeValidator);
        validate(entity, validators);
    }

    private void validate(T entity, List<EntityValidator<T>> validators) throws EntityValidationException {
        List<ErrorMessage> errorMessages = new ArrayList<>();
        for (EntityValidator<T> entityValidator : validators) {
            try {
                entityValidator.validate(entity);
            } catch (EntityValidationException ex) {
                logger.warning(ex.getMessage());
                errorMessages.add(new ErrorMessage(ex.getErrorCode(), ex.getMessage()));
            }
        }

        if (entity instanceof EntityCommon) {
            try {
                effectiveDatesValidator.validate((EntityCommon) entity);
            } catch (EntityValidationException ex) {
                errorMessages.add(new ErrorMessage(ex.getErrorCode(), ex.getMessage()));
            }
        }
        
        //If there is validation error throw all the error messages to client
        if (!errorMessages.isEmpty()) {
            throw new EntityValidationException(errorMessages);
        }
    }

}
