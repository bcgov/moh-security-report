package ca.bc.gov.health.plr.service.remote;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.EsbResponse;
import ca.bc.gov.health.plr.interceptors.AccessViolationException;
import ca.bc.gov.health.plr.persistence.BusinessRuleResultUtils;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.BusinessRuleMessage;
import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import ca.bc.gov.health.plr.service.ErrorMessage;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.service.validators.ExceptionCommon;
import ca.bc.gov.health.plr.util.MessageCodeHelper;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Matcher;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;

/**
 * utility class to handle the exception
 *
 * @author sumesh.kariyil
 */
public class ExceptionHandler {
    
    private static final Logger LOG = Logger.getLogger(ExceptionHandler.class.getName());

    public static void handleException(EsbResponse response, Exception ex) {
        LOG.log(Level.CONFIG, "Exception handled.", ex);
        if (ex instanceof EntityValidationException) {
            handleException(response, ((ExceptionCommon) ex).getErrorMessages());
        } else if (ex instanceof DuplicateRecordException) {
            handleException(response, ((ExceptionCommon) ex).getErrorMessages());
        } else if (ex instanceof BusinessRuleException) {
            handleExceptions(response, ((BusinessRuleException) ex).getResults());
        } else if (ex instanceof AccessViolationException) {
            response.addAcknowledgment(createAcknowledgement(ex.getMessage()));
        } else if (matchAccessViolationCause(ex)) {
            response.addAcknowledgment(createAcknowledgement(getAccessViolationCause(ex).getMessage()));
        } else {
            response.addAcknowledgment(createAcknowledgement(ExceptionUtils.getRootCause(ex).getMessage()));
        }
    }

    /**
     * Looks for access violations in the causes
     *
     * @param ex the parent exception
     * @return
     */
    private static boolean matchAccessViolationCause(Exception ex) {
        Throwable throwable = ex;
        while (throwable.getCause() != null) {
            if (throwable.getCause() instanceof ca.bc.gov.health.plr.interceptors.AccessViolationException) {
                return true;
            }
            throwable = throwable.getCause();
        }
        return false;
    }

    /**
     * Looks for access violations in the causes
     *
     * @param ex the parent exception
     * @return
     */
    private static Throwable getAccessViolationCause(Exception ex) {
        Throwable throwable = ex;
        while (throwable.getCause() != null) {
            if (throwable.getCause() instanceof ca.bc.gov.health.plr.interceptors.AccessViolationException) {
                return throwable.getCause();
            }
            throwable = throwable.getCause();
        }
        return null;
    }

    private static void handleException(EsbResponse response, List<ErrorMessage> errorMessages) {
        for (ErrorMessage errorMessage : errorMessages) {
            response.addAcknowledgment(createAcknowledgement(errorMessage));
        }
    }

    private static void handleExceptions(EsbResponse response, List<BusinessRuleResult> list) {
        if (!BusinessRuleResultUtils.isAllValid(list)) {
            for (BusinessRuleResult brr : list) {
                if (!brr.isValid()) {
                    for (BusinessRuleMessage businessRuleMessage : brr.getMessages()) {
                        response.addAcknowledgment(new Acknowledgment(businessRuleMessage.getMessageCode(), businessRuleMessage.getMessage()));
                    }
                }
            }
        }
    }

    private static Acknowledgment createAcknowledgement(ErrorMessage errorMessage) {
        Acknowledgment acknowledgment = new Acknowledgment();
        String errorCode = errorMessage.getErrorCode();
        String errorMsg = errorMessage.getErrorMessage();
        int colonIndex = errorMsg.indexOf(MessageCodeHelper.COLON);
        if (StringUtils.isEmpty(errorCode) && colonIndex > 0) {
            errorCode = errorMsg.substring(0, colonIndex);
            Matcher errorCodeMatcher = MessageCodeHelper.ERROR_CODE_PATTERN.matcher(errorCode);
            if (errorCodeMatcher.matches()) {
                errorMsg = errorMsg.substring(colonIndex + 1, errorMsg.length());
            } else {
                errorCode = errorMessage.getErrorCode();
            }
        }
        acknowledgment.setMsgCode(errorCode);
        acknowledgment.setMsgText(errorMsg);
        return acknowledgment;
    }

    public static Acknowledgment createAcknowledgement(String errorMessage) {
        Acknowledgment acknowledgment = new Acknowledgment();
        String[] codeAndMessage = MessageCodeHelper.splitCodeAndMessage(errorMessage);
        acknowledgment.setMsgCode(codeAndMessage[0]);
        acknowledgment.setMsgText(codeAndMessage[1]);
        return acknowledgment;
    }

}
