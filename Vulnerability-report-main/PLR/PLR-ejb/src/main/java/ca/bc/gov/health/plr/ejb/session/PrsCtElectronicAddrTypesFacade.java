/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ca.bc.gov.health.plr.ejb.session;

import ca.bc.gov.health.plr.ejb.entity.PrsCtElectronicAddrTypes;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import javax.annotation.PostConstruct;
import javax.ejb.Lock;
import javax.ejb.LockType;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author adebiyi.kuseju
 */
@Startup
@Singleton
@Lock(LockType.READ)
public class PrsCtElectronicAddrTypesFacade extends AbstractFacade<PrsCtElectronicAddrTypes> {
    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;
    
    private Map<String, PrsCtElectronicAddrTypes> codeNameMap = new ConcurrentHashMap<>();
    private Map<Long, PrsCtElectronicAddrTypes> idMap = new ConcurrentHashMap<>();

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public PrsCtElectronicAddrTypesFacade() {
        super(PrsCtElectronicAddrTypes.class);
    }
    
    @PostConstruct
    public void init() {
        List<PrsCtElectronicAddrTypes> list = super.findAll();

        for (PrsCtElectronicAddrTypes st : list) {
            codeNameMap.put(st.getCtlNameCode(), st);
            idMap.put(st.getCtlId(), st);
        }

    }

    @Lock(LockType.WRITE)
    public void reInit() {
        codeNameMap.clear();
        idMap.clear();
        init();
    }
    
    @Override
    public List<PrsCtElectronicAddrTypes> findAll() {
        List<PrsCtElectronicAddrTypes> values = new ArrayList<>();
        values.addAll(codeNameMap.values());
        
        return values;
    }

    public PrsCtElectronicAddrTypes findbyElectronicAddrType(CodeTableCodes.PrsCtElectronicAddrTypes prsCtElectronicAddrTypes) {
        return codeNameMap.get(prsCtElectronicAddrTypes.getValue());
    }
    
    public PrsCtElectronicAddrTypes findbyElectronicAddrType(String prsCtElectronicAddrTypes) {
        return codeNameMap.get(prsCtElectronicAddrTypes);
    }
    
    @Override
    public PrsCtElectronicAddrTypes find(Object id) {
        return idMap.get(id);
    }
}
