/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.ejb.session;

import ca.bc.gov.health.plr.ejb.entity.PrsCtProvExpertiseTypes;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import javax.annotation.PostConstruct;
import javax.ejb.Lock;
import javax.ejb.LockType;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import ca.bc.gov.health.plr.constants.Consts;
import java.util.TreeMap;
/**
 * Class is implemented as a singleton to avoid excessive database calls as only a few name types
 * are expected to be available
 * 
 * @author Adebiyi.Kuseju
 */
@Singleton
@Startup
@Lock(LockType.READ)
public class PrsCtProvExpertiseTypesFacade extends AbstractFacade<PrsCtProvExpertiseTypes> {

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;
    private final Map<String, PrsCtProvExpertiseTypes> codeNameMap = new TreeMap<>();
    private Map<Long, PrsCtProvExpertiseTypes> idMap = new ConcurrentHashMap<>();

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }
    
    public PrsCtProvExpertiseTypesFacade() {
        super(PrsCtProvExpertiseTypes.class);
    }
    
    @PostConstruct
    public void init() {           
        List<PrsCtProvExpertiseTypes> list = super.findAll();

        for (PrsCtProvExpertiseTypes st : list) {
            codeNameMap.put(st.getCtlNameCode(), st);
            idMap.put(st.getCtlId(), st);
        }
    }
    
   @Lock(LockType.WRITE)
    public void reInit() {
        codeNameMap.clear();
        idMap.clear();
        init();
    }
    
    public PrsCtProvExpertiseTypes findByProvExpertiseType(String expertiseType) {
        return codeNameMap.get(expertiseType);
    }

    @Override
    public PrsCtProvExpertiseTypes find(Object id) {
        return idMap.get(id);
    }

    public PrsCtProvExpertiseTypes findByExpertiseCode(String expertiseCode) {
        return codeNameMap.get(expertiseCode);
    }

    @Override
    public List<PrsCtProvExpertiseTypes> findAll() {
        List<PrsCtProvExpertiseTypes> entityList = new ArrayList<>();
        entityList.addAll(codeNameMap.values());
        return entityList;
    }

    public List<PrsCtProvExpertiseTypes> findAllLanguageExpertiseTypes() {
        List languageExpertiseList = new ArrayList();
        Iterator it = codeNameMap.entrySet().iterator();
        while(it.hasNext()) {
            Map.Entry pair = (Map.Entry)it.next();
            PrsCtProvExpertiseTypes pcpet = (PrsCtProvExpertiseTypes)pair.getValue();
            if(pcpet!=null && pcpet.getProvRoleType()!=null) {
                if(pcpet.getProvRoleType()!=null && pcpet.getProvRoleType().compareToIgnoreCase(Consts.LANG)==0) {
                    languageExpertiseList.add(pcpet);
                }
            }
        }
        
        return languageExpertiseList;
    }

}
