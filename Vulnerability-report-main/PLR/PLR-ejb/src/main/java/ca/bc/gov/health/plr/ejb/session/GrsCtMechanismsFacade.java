package ca.bc.gov.health.plr.ejb.session;

import ca.bc.gov.health.plr.ejb.entity.GrsCtMechanisms;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import javax.annotation.PostConstruct;
import javax.ejb.Lock;
import javax.ejb.LockType;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author ian.scott
 */
@Startup
@Singleton
@Lock(LockType.READ)
public class GrsCtMechanismsFacade extends AbstractFacade<GrsCtMechanisms> {

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;
    private final Map<String, GrsCtMechanisms> codeNameMap = new ConcurrentHashMap<>();
    private final Map<Long, GrsCtMechanisms> idMap = new ConcurrentHashMap<>();

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public GrsCtMechanismsFacade() {
        super(GrsCtMechanisms.class);
    }

    @PostConstruct
    public void init() {
        List<GrsCtMechanisms> list = super.findAll();

        for (GrsCtMechanisms st : list) {
            codeNameMap.put(st.getCtlNameCode(), st);
            idMap.put(st.getCtlId(), st);
        }

    }

    @Lock(LockType.WRITE)
    public void reInit() {
        codeNameMap.clear();
        idMap.clear();
        init();
    }

    public GrsCtMechanisms findbyMechanismType(CodeTableCodes.GrsCtMechanisms mechanismType) {
        return codeNameMap.get(mechanismType.getValue());
    }
    
    public GrsCtMechanisms findbyMechanismType(String mechanismType) {
        return codeNameMap.get(mechanismType);
    }
    
    @Override
    public GrsCtMechanisms find(Object id) {
        return idMap.get(id);
    }
    
    @Override
    public List<GrsCtMechanisms> findAll() {
        List<GrsCtMechanisms> entityList = new ArrayList<>();
        entityList.addAll(codeNameMap.values());
        return entityList;
    }
}
