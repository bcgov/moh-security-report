/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.validators;

import ca.bc.gov.health.plr.dto.DtoMetaData;
import ca.bc.gov.health.plr.ejb.entity.EditableBlock;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.util.PropertyUtils;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.apache.commons.lang3.ObjectUtils;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author sumesh.kariyil
 * @param <A>
 * @param <T>
 */
@LocalBean
@Stateless
public class EntityChangeDetector<A extends DtoMetaData, T extends EditableBlock> {

    @PersistenceContext(unitName = "PLR-ejbPU")
    protected EntityManager em;

    public void checkForChanges(A dto, T newRecord) {
        checkForChanges(dto, newRecord, null);
    }    
    
    public void checkForChanges(A dto, T newRecord, EditableBlock originalRecordIn) {
        if (dto.getId() != null) {
            GrsCtEndReasonTypes endReason = (GrsCtEndReasonTypes) PropertyUtils.invokeGetter(newRecord, "endReasonCode");
            if (endReason != null && !endReason.getCtlNameCode().equals(CodeTableCodes.GrsCtEndReasonTypes.CEASE.getValue())) {
                dto.setNoChangeOnUpdate(true);
                EditableBlock originalRecord = null;
                if (originalRecordIn != null) {
                    originalRecord = originalRecordIn;
                } else {
                    originalRecord = em.find(newRecord.getClass(), dto.getId());
                }
                for (String field : newRecord.editableFields()) {
                    Object originalRecordFieldValue = PropertyUtils.invokeGetter(originalRecord, field);
                    Object newFieldValue = PropertyUtils.invokeGetter(newRecord, field);
                    boolean isString = newFieldValue instanceof String || originalRecordFieldValue instanceof String;
                    // For String if the value is "" or null, should be treated as equal
                    if (isString && !StringUtils.equals(StringUtils.defaultString((String) originalRecordFieldValue), (String) newFieldValue)
                            || (!isString && ObjectUtils.notEqual(originalRecordFieldValue, newFieldValue))) {
                        dto.setNoChangeOnUpdate(false);
                        break;
                    }
                }
            }
        }
    }
}
