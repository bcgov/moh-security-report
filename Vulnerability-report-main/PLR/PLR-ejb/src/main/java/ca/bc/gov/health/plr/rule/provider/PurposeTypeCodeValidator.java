/*
 * *********************************************************************************************************************
 *  Copyright (c) 2018, Ministry of Health, BC.                                                                        *
 *                                                                                                                     *
 *  All rights reserved.                                                                                               *
 *    This information contained herein may not be used in whole                                                       *
 *    or in part without the express written consent of the                                                            *
 *    Government of British Columbia, Canada.                                                                          *
 *                                                                                                                     *
 *  Revision Control Information                                                                                       *
 *  File:                $Id::                                                                                       $ *
 *  Date of Last Commit: $Date::                                                                                     $ *
 *  Revision Number:     $Rev::                                                                                      $ *
 *  Last Commit by:      $Author::                                                                                   $ *
 *                                                                                                                     *
 * *********************************************************************************************************************
 */
package ca.bc.gov.health.plr.rule.provider;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.LocationDto;
import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCommunPurposeTypes;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import java.util.logging.Logger;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;
import org.apache.commons.lang3.StringUtils;

/**
 * Validator for the Location DTO which handles all constraints/rules for the
 * communication purpose type for 'Emergency Contact'.
 *
 * @author CGI Information Management Consultants Inc.
 */
public class PurposeTypeCodeValidator implements ConstraintValidator<PurposeTypeCodeConstraints, LocationDto> {

    private static final String CLASSNAME = PurposeTypeCodeValidator.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    CodesDao codesDao;
    private static final String COMMUNIC_PURPOSE_TYPE = "communicationPurposeCode";

    @Override
    public void initialize(PurposeTypeCodeConstraints constraintAnnotation) {
        try {
            codesDao = (CodesDao) InitialContext.doLookup(Consts.JNDILOOKUP_CODESDAO);
        } catch (NamingException ex) {
            throw new RuntimeException(ex);
        }
    }

    /**
     * Validation method for generic LocationDto shared across by
     * Telecom/Address/ElectronicAddress/WorkLocation Dtos
     *
     *
     * @param value the LocationDto that has communication purpose codes
     * @param context ConstraintValidatorContext
     *
     * @return boolean true if passes validations; false otherwise
     */
    @Override
    public boolean isValid(LocationDto value, ConstraintValidatorContext context) {
        if (value == null) {
            return true;
        }

        // check for work location bloc ids and if there is none create one with value = 0
        Long workLocationId = value.getWlWlId();
        if (workLocationId == null) {
            workLocationId = new Long(0);
        }

        if (value instanceof AddressDto || value instanceof ElectronicAddressDto
                || (value instanceof TelecommunicationDto && workLocationId.compareTo(new Long(0)) > 0)) {

            String purposeTypeCode = value.getCommunicationPurposeCode();

            if (!StringUtils.isEmpty(purposeTypeCode)
                    && codesDao.codeExists(PrsCtCommunPurposeTypes.class, purposeTypeCode)) {
                PrsCtCommunPurposeTypes foundCommunPurposeType = codesDao.lookup(PrsCtCommunPurposeTypes.class, purposeTypeCode);
                if (foundCommunPurposeType != null
                        && !StringUtils.isEmpty(foundCommunPurposeType.getCtlNameCode())) {
                    purposeTypeCode = foundCommunPurposeType.getCtlNameCode();
                }

            } else if (!StringUtils.isEmpty(purposeTypeCode)
                    && !codesDao.codeExists(PrsCtCommunPurposeTypes.class, purposeTypeCode)) {
                return false;
            } else if (StringUtils.isEmpty(purposeTypeCode)) {
                purposeTypeCode = "";
            }

            return validateCommPurposeTypeCodeAllowed(purposeTypeCode, workLocationId, context);
        }
        return true;
    }

    public void changeErrorMessage(BusinessRuleKeys key, String node, ConstraintValidatorContext cvc) {
        cvc.disableDefaultConstraintViolation();
        String message = BusinessRuleMessageDao.getMessageResource(key);
        cvc.buildConstraintViolationWithTemplate(message).addNode(node).addConstraintViolation();
    }

    static boolean isCommunicationTypeEmergencyContact(String communPurposeTypeCode) {
        return !StringUtils.isEmpty(communPurposeTypeCode)
                && (communPurposeTypeCode.equalsIgnoreCase(CodeTableCodes.PrsCtCommunPurposeTypes.EMERGENCY_CONTACT.getValue()));
    }

    private boolean validateCommPurposeTypeCodeAllowed(String communPurposeTypeCode, Long wlocId, ConstraintValidatorContext context) {
        if (StringUtils.isBlank(communPurposeTypeCode)) {
            return true;
        }
        if (isCommunicationTypeEmergencyContact(communPurposeTypeCode)
                || (isCommunicationTypeEmergencyContact(communPurposeTypeCode)
                && wlocId.compareTo(new Long(0)) > 0)) {
            changeErrorMessage(BusinessRuleKeys.ERROR_COMM_PURPOSE_TYPE_NOT_ALLOWED, COMMUNIC_PURPOSE_TYPE, context);
            return false;

        } else {
            return true;
        }
    }

}
