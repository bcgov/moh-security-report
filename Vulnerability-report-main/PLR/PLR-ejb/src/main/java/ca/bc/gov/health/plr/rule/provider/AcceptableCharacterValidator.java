package ca.bc.gov.health.plr.rule.provider;

import java.util.regex.Pattern;
import javax.validation.ConstraintValidatorContext;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.Validate;

/**
 * Validates String values against a given regex Pattern.
 *
 * Note that this validator permits diacritics even if the regex Pattern does not. (Characters with diacritical marks
 * will be replaced by unmarked characters later in the application.)
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public final class AcceptableCharacterValidator {

    private final Pattern illegalCharacters;

    /**
     * Initialize the Pattern and error message.
     *
     * The given Pattern will be used to find illegal characters. For example, the pattern "[^a-zA-z]" specifies that
     * characters in only the English alphabet are acceptable.
     *
     * @param illegalCharacters the pattern to validate values against.
     */
    public AcceptableCharacterValidator(Pattern illegalCharacters) {
        this.illegalCharacters = Validate.notNull(illegalCharacters, "pattern cannot be null");
    }

    /**
     * Validate the given value. If validation fails, add a constraint violation to the given context.
     *
     * @param value the value to validate against the Pattern. {@code null} is allowed and passes all validations.
     * @param context if validation fails, add a constraint violation to this context.
     * @return true if validation passes.
     */
    public boolean valildate(String value, ConstraintValidatorContext context) {
        if (value == null) {
            return true;
        }
        value = StringUtils.stripAccents(value);
        return !illegalCharacters.matcher(value).find();
    }

    /**
     * <ol>
     * <li>Strip accents (e.g. accent e becomes unaccented e),</li>
     * <li>replace remaining invalid characters with spaces (invalid according to the given Pattern),</li>
     * <li>collapse multiple whitespaces into a single space,</li>
     * <li>trim leading and trailing whitespace.</li>
     * </ol>
     */
    public static String handleInvalidCharacters(String value, Pattern invalidCharactersPattern) {
        if (value != null) {
            // Strip accents.
            value = StringUtils.stripAccents(value);
            // Replace invalid characters with spaces.
            value = invalidCharactersPattern.matcher(value).replaceAll(" ");
            // Replace multiple spaces with a single space.
            value = value.replaceAll("\\s+", " ");
            // Delete leading and trailing whitespace.
            value = StringUtils.strip(value);
        }
        return value;
    }

}
