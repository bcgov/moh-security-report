package ca.bc.gov.health.plr.interceptors;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.events.DistributionEvent;
import ca.bc.gov.health.plr.producer.type.Authenticated;
import ca.bc.gov.health.plr.producer.type.User;
import ca.bc.gov.health.plr.service.JNDIResourceLoader;
import ca.bc.gov.health.plr.service.PLRConfigurationResourceLoader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.enterprise.event.Event;
import javax.enterprise.inject.Instance;
import javax.inject.Inject;
import javax.interceptor.AroundInvoke;
import javax.interceptor.InvocationContext;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 * An interceptor for preparing arguments for and invoking distribution service
 *
 * @author adebiyi.kuseju
 */
public class DistributionInterceptor {

    private static final Logger logger = Logger.getLogger(DistributionInterceptor.class.getName());

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;

    @Inject
    private JNDIResourceLoader prod;

    @Inject
    private Event<DistributionEvent> distEventInitiator;

    @Inject
    @Authenticated
    private Instance<User> user;

    @Inject
    private PLRConfigurationResourceLoader plrConfigLoader;

    /**
     * An interceptor for creating the data required for completing a
     * distribution.
     *
     * @param ivc
     * @return
     * @throws Exception
     */
    @AroundInvoke
    public Object processDistribution(InvocationContext ivc) throws Exception {

        Object[] args = ivc.getParameters();

        // invoke service
        Object output = ivc.proceed();

        try {
            // Should distribution be processed? i.e. sent to the queue
            if (Boolean.parseBoolean(plrConfigLoader.getValue(Consts.PROCESS_DISTRIBUTION))) {

                logger.log(Level.INFO, "DistributionInterceptor processDistribution is: {0}.",
                        new Object[]{Boolean.parseBoolean(plrConfigLoader.getValue(Consts.PROCESS_DISTRIBUTION))});
                // fire distribution event to notify consumers
                distEventInitiator.fire(new DistributionEvent(args, output, user.get().getUserEntity()));
            }
        } catch (Exception ex) {
            logger.log(Level.SEVERE, null, ex);
        }

        return output;
    }

}
