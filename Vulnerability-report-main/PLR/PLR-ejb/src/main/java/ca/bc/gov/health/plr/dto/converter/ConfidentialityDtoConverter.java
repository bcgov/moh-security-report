package ca.bc.gov.health.plr.dto.converter;

import ca.bc.gov.health.plr.dto.provider.ConfidentialityIndicatorDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsConfidentialityIndicators;
import ca.bc.gov.health.plr.ejb.entity.PrsCtDataOwnerCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 * Converter class for switching between PrsConfidentialityIndicator objects and
 * ConfidentialityIndicator DTOs
 *
 * @author greg.perkins
 */
@Stateless
public class ConfidentialityDtoConverter {

    @PersistenceContext(unitName = "PLR-ejbPU")
    protected EntityManager em;

    @EJB
    private CodesDao codesDao;

    @EJB
    DtoConverter dtoConverter;

    /**
     * Converts a ConfidentialityIndicator into a PrsConfidentialityIndicators
     *
     * @param dto ConfidentialityIndicator to convert
     * @return Converted PrsConfidentialityIndicators
     */
    public PrsConfidentialityIndicators toEntity(ConfidentialityIndicatorDto dto) {
        PrsConfidentialityIndicators newConfidentiality = new PrsConfidentialityIndicators();

        newConfidentiality.setPauthPauthId(em.find(PrsProviders.class, dto.getPauthId()));
        if (dto.getId() != null) {
            newConfidentiality.setPconId(dto.getId());
        }
        newConfidentiality.setConfidentialFlag(dto.isConfidential() ? "Y" : "N");

        if (dto.getDataOwnerCode() != null) {
            newConfidentiality.setDataOwnerCode(codesDao.lookup(PrsCtDataOwnerCodes.class, dto.getDataOwnerCode()));
        }

        dtoConverter.copyCommonProperties(dto, newConfidentiality);

        return newConfidentiality;
    }

    private PrsCtDataOwnerCodes getHardCodedDataOwnerCode() {
        //hard code for now
        return em.find(PrsCtDataOwnerCodes.class, 5514l);
    }
}
