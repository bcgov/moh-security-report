package ca.bc.gov.health.plr.dto.provider;

import ca.bc.gov.health.plr.dto.MessageDataBlockDto;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.ejb.entity.GrsElectronicAddresses;
import ca.bc.gov.health.plr.ejb.entity.PrsCtElectronicAddrTypes;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeId;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeName;
import ca.bc.gov.health.plr.rule.provider.AcceptableElectronicAddress;
import java.lang.reflect.Method;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;


/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class ElectronicAddressDto extends LocationDto implements MessageDataBlockDto {

    @NotBlank(message = "{error.notblank.part1of2}Electronic Address{error.notblank.part2of2}")
    @Size(max = 500, message = "{constraints.size.message.part1of2} 'Electronic Address' {constraints.size.message.part2of2}")
    @AcceptableElectronicAddress
    String address;
    @AcceptableCodeId(clazz = PrsCtElectronicAddrTypes.class, code = "Electronic Address Type")
    private Long typeId;
    private Long ruRuID;

    @AcceptableCodeName(clazz = PrsCtElectronicAddrTypes.class, code = "Electronic Address Type")
    private String typeCode;

    private static final String[] RECORD_TYPES = new String[]{"communicationPurposeCode"};
    @NotNull(message = "{error.notblank.part1of2} Electronic Address Effective Start Date {error.notblank.part2of2}")
    private Date effectiveStartDate;
    private Date effectiveEndDate;

    @Override
    public String[] getRecordTypeFields() {
        return RECORD_TYPES;
    }

    /**
     * @return the address
     */
    public String getAddress() {
        return address;
    }

    /**
     * @param address the address to set
     */
    public void setAddress(String address) {
        address = StringUtils.stripAccents(address);
        address = StringUtils.strip(address);
        this.address = address;
    }

    @Override
    public Long getTypeId() {
        return typeId;
    }

    @Override
    public void setTypeId(Long typeId) {
        this.typeId = typeId;
    }

    public Long getRuRuID() {
        return ruRuID;
    }

    public void setRuRuID(Long ruRuID) {
        this.ruRuID = ruRuID;
    }

    @Override
    public ca.bc.gov.health.plr.dto.provider.esb.AbstractProviderDetail toEsbVersion() throws Exception {
        ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto esbVersion = new ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto();

        PropertyUtils.copyProperties(esbVersion, this);

        return esbVersion;

    }

    @Override
    public String[] getMessageDataBlockFields() {
        return new String[]{"communicationPurposeCode", "typeCode"};
    }

    @Override
    public String getTypeCode() {
        return typeCode;
    }

    @Override
    public void setTypeCode(String typeCode) {
        this.typeCode = typeCode;
    }

    @Override
    public String getBlockName() {
        return "Electronic Address";
    }

    /**
     * @return the effectiveStartDate
     */
    @Override
    public Date getEffectiveStartDate() {
        return effectiveStartDate;
    }

    /**
     * @param effectiveStartDate the effectiveStartDate to set
     */
    @Override
    public void setEffectiveStartDate(Date effectiveStartDate) {
        this.effectiveStartDate = effectiveStartDate;
    }

    @Override
    public Date getEffectiveEndDate() {
        return effectiveEndDate;
    }

    @Override
    public void setEffectiveEndDate(Date effectiveEndDate) {
        this.effectiveEndDate = effectiveEndDate;
    }

    @Override
    public void addToProviderDto(ProviderDto providerDto) {
        providerDto.getElectronicAddresses().add(this);
    }

    @Override
    public Class getEntityClass() {
        return GrsElectronicAddresses.class;
    }

    @Override
    public Method getDtoConverterMethod() {
        Method method = null;
        try {
            method = ProviderDtoConverter.class.getMethod("buildElectronicAddress", GrsElectronicAddresses.class);
        } catch (NoSuchMethodException | SecurityException ex) {
            Logger.getLogger(AddressDto.class.getName()).log(Level.SEVERE, null, ex);
        }

        // return null is OK
        return method;
    }

}
