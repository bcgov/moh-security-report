package ca.bc.gov.health.plr.dto.converter;

import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.PrsCtAddressTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCommunPurposeTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.ejb.entity.PrsCtDataOwnerCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvState;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocations;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import ca.bc.gov.health.plr.service.provider.AddressSupportService;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author ian.scott
 */
@Stateless
public class AddressDtoConverter {

    @PersistenceContext(unitName = "PLR-ejbPU")
    EntityManager em;

    @EJB
    CodesDao codesDao;

    @EJB
    DtoConverter dtoConverter;
    
    @Inject
    private AddressSupportService addressSupportService;

    /**
     * Assemble Entity from transfer object
     *
     * @param dto - the transfer object to convert
     * @return - the entity representation of the transfer object
     */
    public GrsAddresses toEntity(AddressDto dto) {
        GrsAddresses entity = new GrsAddresses();

        if (dto.getId() != null) {
            entity.setAddrId(dto.getId());
        }
        if (dto.getAddressLineOne() != null) {
            entity.setAddressLine1Txt(dto.getAddressLineOne());
        }
        if (dto.getAddressLineTwo() != null) {
            entity.setAddressLine2Txt(dto.getAddressLineTwo());
        }
        if (dto.getAddressLineThree() != null) {
            entity.setAddressLine3Txt(dto.getAddressLineThree());
        }
        if (dto.getAddressLineFour() != null) {
            entity.setAddressLine4Txt(dto.getAddressLineFour());
        }

        if (dto.getTypeId() != null) {
            PrsCtAddressTypes lookup = codesDao.lookup(PrsCtAddressTypes.class, dto.getTypeId());
            entity.setAddressTypeCode(lookup);
        } else if (dto.getTypeCode() != null) {
            entity.setAddressTypeCode(codesDao.lookup(PrsCtAddressTypes.class, dto.getTypeCode()));
        }
        if (dto.getCity() != null) {
            entity.setCityTxt(dto.getCity());
        }
        if (dto.getCommunicationPurposeId() != null) {
            entity.setCmnctnPrpsTypCd(codesDao.lookup(PrsCtCommunPurposeTypes.class, dto.getCommunicationPurposeId()));
        } else if (dto.getCommunicationPurposeCode() != null) {
            entity.setCmnctnPrpsTypCd(codesDao.lookup(PrsCtCommunPurposeTypes.class, dto.getCommunicationPurposeCode()));
        }
        if (dto.getCountryId() != null) {
            PrsCtCountries countryCode = codesDao.lookup(PrsCtCountries.class, dto.getCountryId());
            entity.setCountryCode(countryCode);
            entity.setCountryId(countryCode);
        } else if (dto.getCountryCode() != null) {
            PrsCtCountries countryCode = codesDao.lookup(PrsCtCountries.class, dto.getCountryCode());
            entity.setCountryCode(countryCode);
            entity.setCountryId(countryCode);
        }

        if (dto.getDataOwnerCode() != null) {
            PrsCtDataOwnerCodes dataOwnerCode = null;
            dataOwnerCode = codesDao.lookup(PrsCtDataOwnerCodes.class, dto.getDataOwnerCode());
            entity.setDataOwnerCode(dataOwnerCode);
        }

        if (dto.getPauthId() != null) {
            entity.setPauthPauthId(em.find(PrsProviders.class, dto.getPauthId()));
        }
        if (dto.getPostalCode() != null) {
            entity.setPostalCodeOrZipTxt(addressSupportService.fixPostalCodeSpacing(dto.getPostalCode()));
        }
        entity.setProvinceOrStateTxt(dto.getProvinceOrStateTxt());
        if (dto.getRuRuID() != null) {
            entity.setRuRuId(em.find(GrsRegistryUsers.class, dto.getRuRuID()));
        }
        if (dto.getUserChid() != null) {
            entity.setUserChid(dto.getUserChid());
        }

        if (dto.getWlWlId() != null) {
            entity.setWlWlId(em.find(PrsWorkLocations.class, dto.getWlWlId()));
        }

        dtoConverter.copyCommonProperties(dto, entity);

        return entity;
    }
}
