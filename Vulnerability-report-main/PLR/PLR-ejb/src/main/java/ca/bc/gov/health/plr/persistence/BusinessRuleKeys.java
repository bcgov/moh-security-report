package ca.bc.gov.health.plr.persistence;

/**
 * Generated class of message keys for the BUSINESS_RULE_MESSAGES table
 *
 * @author Code.Generator
 */
public enum BusinessRuleKeys {

    /**
     * Search results maximum exceeded. You may need to refine your search to
     * find what you're looking for.
     */
    /**
     * Search results maximum exceeded. You may need to refine your search to
     * find what you're looking for.
     */
    /**
     * Search results maximum exceeded. You may need to refine your search to
     * find what you're looking for.
     */
    /**
     * Search results maximum exceeded. You may need to refine your search to
     * find what you're looking for.
     */
    ERROR_SEARCH_MAXRESULTS("error.search.maxresults"),
    /**
     * Mandatory field values are missing: please provide Provider Type, First
     * Name, and Last Name.
     */
    ERROR_SEARCH_REQUIRED("error.search.required"),
    /**
     * Only the First Name and Last Name fields are allowed to use the wildcard
     * (*).
     */
    ERROR_SEARCH_WILDCARD_FIRSTLAST("error.search.wildcard.firstlast"),
    /**
     * Only one wildcard (*) is allowed in a field.
     */
    ERROR_SEARCH_WILDCARD_ONLYONE("error.search.wildcard.onlyone"),
    /**
     * The wildcard (*) must be preceded by at least one letter.
     */
    ERROR_SEARCH_WILDCARD_PRECEDED("error.search.wildcard.preceded"),
    /**
     * The wildcard (*) must trail all search characters.
     */
    ERROR_SEARCH_WILDCARD_TRAILING("error.search.wildcard.trailing"),
    /**
     * The search criteria matched confidential records that are not shown.
     * Please search by identifier to view confidential record details.
     */
    WARNING_SEARCH_CONFIDENTIAL_FOUND("warning.search.confidential.found"),
    /**
     * Insufficient parameters to execute a search.
     */
    ERROR_SEARCH_INSUFFICIENT_PARAMETERS("error.insufficient.paramters"),
    /**
     * Invalid email address format.
     */
    ERROR_EMAILFIELD_INVALID_CHARACTERS("error.emailfield.invalidcharacters"),
    /**
     * Address line 4 prohibited
     */
    ERROR_ADDRESS_LINE4("error.address.linefour"),
    /**
     * Codes must exist in code tables.
     */
    ERROR_CODE_INVALID("error.field.invalidcode"),
    /**
     * Provider records are filtered out of search results if users are not
     * allowed to view them.
     */
    INFO_PROVIDER_FILTERED_DPS("info.provider.filtered.dps"),
    /**
     * You do not have permission to view the specified Provider Type.
     */
    ERROR_SEARCH_PROVIDERTYPE_PERMISSION("error.search.providertype.permission"),
    /**
     * Cannot add duplicate data blocks
     */
    ERROR_DUPLICATE_DATA_BLOCK("error.duplicate.datablock"),
    /**
     * ID field is invalid
     */
    ERROR_SEARCH_IDENTIFIER_INVALID("error.identifierfield.invalidcharacters"),
    /**
     * Disallowed Identifier Type: '%S'.
     */
    ERROR_DISALLOWED_IDENTIFIER_TYPE("error.disallowed.identifier.type"),
    /**
     * Disallowed Status Class Code: '%S'.
     */
    ERROR_DISALLOWED_STATUS_CLASS_CODE("error.disallowed.status.class.code"),
    /**
     * Disallowed Address Communication Purpose Type: '%S'.
     */
    ERROR_DISALLOWED_ADDRESS_COMMUNICATION_PURPOSE_TYPE("error.disallowed.address.communication.purpose.type"),
    /**
     * Disallowed Address Communication Purpose Type: '%S'.
     */
    ERROR_DISALLOWED_EMAILADDRESS_COMMUNICATION_PURPOSE_TYPE("error.disallowed.eAddress.communication.purpose.type"),
    /**
     * Disallowed Credential Type: '%S'.
     */
    ERROR_DISALLOWED_CREDENTIAL_TYPE("error.disallowed.credential.type"),
    /**
     * Disallowed Expertise Type: '%S'.
     */
    ERROR_DISALLOWED_EXPERTISE_TYPE("error.disallowed.expertise.type"),
    /**
     * Date of death cannot be before birth
     */
    ERROR_DEATH_BEFORE_BIRTH("error.death.before.birth"),
    /**
     * Disallowed Telephone Communication Purpose Type: '%S'.
     */
    ERROR_DISALLOWED_TELEPHONE_COMMUNICATION_PURPOSE_TYPE("error.disallowed.telephone.communication.purpose.type"),
    /**
     * Confidentiality Indicators can only be ceased.
     */
    ERROR_CONFIDENTIALITY_END_REASON("error.confidentiality.end.reason"),
    /**
     * User does not have permission.
     */
    ERROR_UPDATE_PERMISSION_DENIED("error.update.permission.denied"),
    /**
     * Cannot modify Confidential record.
     */
    ERROR_MODIFY_CONFIDENTIAL("error.modify.confidential"),
    /**
     * Identifier does not uniquely identify a Provider. Cannot create
     * relationship.
     */
    ERROR_NONUNIQUE_IDENTIFIER("error.nonexistent.identifier"),
    /**
     * Identifier does not uniquely identify a Provider. Cannot create
     * relationship.
     */
    ERROR_NONUNIQUE_REG_USER_IDENTIFIER("error.nonexistent.reguser.identifier"),
    /**
     * Only the Name field is allowed to use the wildcard (*).
     */
    ERROR_SEARCH_WILDCARD_ORGCITY("error.search.wildcard.orgcity"),
    /**
     * error message to indicate that a canadian postal was not formatted
     * correctly
     */
    ERROR_ADDRESSPOSTALFIELD_PATTERNMATCH("error.address.postalfield.pattern"),
    /**
     * error message to indicate that the relationship between a Country and
     * associated Prov/State is not correct.
     */
    ERROR_ADDRESSPROVSTATEFIELD_INVALID("error.address.provstatefield.invalid"),
    /**
     * ZIP code is too long.
     */
    ERROR_ZIP_TOOLONG("error.address.zip.toolong"),
    /**
     * Last active demographics cannot be ceased.
     */
    ERROR_LAST_ACTIVE_DEMOGRAPHICS("error.last.active.demographics"),
    /**
     * Relationship between country and prov/state for demographics is wrong ..
     */
    ERROR_DEMOGRAPICHPROVSTATEFIELD_INVALID("error.demographics.provstatefield.invalid"),
    /**
     * Demographics Province/State is not allowed when Country is not CA or US.
     */
    ERROR_DEMOGRAPICHPROVSTATEFIELD_NOTALLOWED("error.demographics.provstatefield.notallowed"),
    /**
     * Gender in demographics is invalid.
     */
    ERROR_DEMOGRAPICHGENDERFIELD_INVALID("error.demographics.gender.invalid"),
    /**
     * Combination of reg user name, jurisdiction code and name type should be
     * unique
     */
    ERROR_REG_USER_UNIQUE("error.reguser.unique.reason"),
    /**
     * Registry User Org CHID should be unique - REQ-00800
     */
    ERROR_REG_USER_ORG_CHID_UNIQUE("error.reguser.orgchid.unique.reason"),
    /**
     * DistributionProfiles destination address should be a valid url
     */
    ERROR_DISTRIBUTION_ADDRESS("error.distribution.address"),
    /**
     * Owner Code should be same as existing record
     */
    ERROR_OWNER_MISMATCH("error.ownercode.mismatch"),
    /**
     * Last active record can only be ceased by the Registry Admin
     */
    ERROR_LAST_ACTIVE_IDENTIFIER_CEASED_PERMISSION("error.last.active.identifier.permission"),
    /**
     * Last active record can only be ceased by the Registry Admin
     */
    ERROR_LAST_ACTIVE_ORG_NAME_CEASED_PERMISSION("error.last.active.org.name.permission"),
    /**
     * Last active record can only be ceased by the Registry Admin
     */
    ERROR_DEFAULT_REGUSER_NAME_CEASED("error.last.active.reguser.name.permission"),
    /**
     * Last active record can only be ceased by the Registry Admin
     */
    ERROR_LAST_ACTIVE_PERSON_NAME_CEASED_PERMISSION("error.last.active.person.name.permission"),
    /**
     * Entered registry user party name is invalid
     */
    ERROR_INVALID_PARTY("error.invalid.party"),
    /**
     * Error message for non-unique DPS ID
     */
    ERROR_DPS_ID_UNIQUE("error.dps.unique"),
    /**
     * Error message for duplicate address, eAddress, telecom for provider
     */
    ERROR_DUPLICATE_ADDRESS_PROVIDER_DATA_BLOCK("error.duplicate.address.provider.datablock"),
    /**
     ** Error message for duplicate address, eAddress, telecom for registry
     * user
     */
    ERROR_DUPLICATE_ADDRESS_REGUSER_DATA_BLOCK("error.duplicate.address.reguser.datablock"),
    /**
     ** Error message invalid address
     */
    ERROR_ADDRESS_INVALID_CHARS("error.addressfield.invalidcharacters"),
    /**
     Invalid characters were deleted from %s.
     */
    WARNING_INVALID_CHARS_DELETED("warning.invalidcharactersdeleted"),
    /**
     * The addressDoctor service is down so validation status is not checked.
     */
    WARNING_ADDRESS_VALIDATION_UNKNOWN("warning.address.validation.status.unknown"),
    /**
     * Warning message when add/update an invalid address via addressDoctor service.
     */
    WARNING_ADD_ADDRESS_VALIDATION_INVALID("warning.add.address.validation.invalid"),
    /*
    * Warning message that address is invalid
    */
    WARNING_ADDRESS_INVALID("warning.address.invalid"),
    /**
     * Warning message when add/update a valid address via addressDoctor service.
     */
    WARNING_ADD_ADDRESS_VALIDATION_VALID("warning.add.address.validation.valid"),
    /**
     ** Error message for invalid name
     */
    ERROR_NAME_INVALID_CHARS("error.namefield.invalidcharacters"),
    /**
     ** Error message for invalid telecom
     */
    ERROR_NAME_TELECOM_CHARS("error.telecommunicationfield.invalidcharacters"),
    /**
     ** Error message for mandatory entry
     */
    ERROR_MANDATORY_PART1("error.notblank.part1of2"),
    ERROR_MANDATORY_PART2("error.notblank.part2of2"),
    /**
     * Error message for invalid credential
     */
    ERROR_INVALID_CREDENTIAL("error.invalid.credential"),
    /**
     * Error message for invalid Identifier Type
     */
    ERROR_INVALID_IDENTIFIER_TYPE("error.invalid.identifiertype"),
    /**
     * Error message for invalid Identifier Type
     */
    ERROR_INVALID_EXPERTISETYPE("error.invalid.expertise"),
    ERROR_INVALID_STATUS_REASON("error.invalid.statusreason"),
    /**
     * Message for search provider message when no providers are found
     */
    NO_SEARCH_RESULTS("message.search.noresults"),
    /**
     * Search success
     */
    SEARCH_SUCCESS("message.search.success"),
    /**
     * Code for ESB transaction success
     */
    TX_SUCCESS_CODE("transaction.succes.code"),
    /**
     * Message for ESB transaction success
     */
    TX_SUCCESS_MESSAGE("transaction.succes.message"),
    /**
     * Code for ESB transaction acknowledgment.
     */
    TX_ACK_TYPECODE("transaction.ack.typecode"),
    /**
     * Code for ESB transaction success
     */
    TX_SUCCESS_CHANGEDBLOCKS_CODE("transaction.changedblocks.code"),
    /**
     * Message for ESB transaction success
     */
    TX_SUCCESS_CHANGEDBLOCKS_MESSAGE("transaction.changedblocks.message"),
    /**
     * Email subject for batch transaction notification
     */
    TX_BATCH_EMAIL_SUBJECT("batch.notification.email.subject"),
    /**
     * Email content of the batch transaction notification
     */
    TX_BATCH_EMAIL_CONTENT("batch.notification.email.content"),
    /**
     * Message for no change on data block update
     */
    NO_CHANGE_ON_UPDATE("message.nochange.found"),
    /**
     * Message when end date > start date
     */
    EFFECTIVE_END_BEFORE_EFFECTIVE_START("error.effective.end.date.before.start.date"),
    NON_UNIQUE_IDENTIFIERS_CODE("error.nonunique.identifiers.code"),
    NON_UNIQUE_IDENTIFIERS_MESSAGE("error.nonunique.identifiers.message"),
    ERROR_INALID_MECHANISM_TYPE("error.invalid.mechanism"),
    ERROR_NONUNIQUE_TYPES_BLOCK("error.block.nonunique.types"),
    ERROR_MULTIPLE_ADDRESSES_INFOROUTES("error.multiple.addresses.inforoutes"),
    ERROR_NO_LOCATIONS_INFOROUTES("error.no.addresses.inforoutes"),
    ERROR_NO_WORK_LOCATION_DETAILS("error.no.worklocationdetails"),
    ERROR_MULTIPLE_WORK_LOCATION_DETAILS("error.multiple.worklocationdetails"),
    ERROR_SENDING_NOTIFICATION_CODE("error.sending.notification.code"),
    ERROR_SENDING_NOTIFICATION_MESSAGE("error.sending.notification.message"),
    SURVIVOR_RECORDS_FOUND("message.survivors.found"),
    ERROR_LOCATION_ASSOCIATED_WITH_INFOROUTE("error.cease.location.hasinformationroute"),
    ERROR_SEARCH_GENDER_INVALID("error.search.gender.invalid"),
    ERROR_SEARCH_EXPERTISE_INVALID("error.search.expertise.invalid"),
    ERROR_SEARCH_LANGUAGE_INVALID("error.search.language.invalid"),
    ERROR_SEARCH_QUALIFICATION("error.search.qualification.invalid"),
    ERROR_SEARCH_NOPERMISSION("error.search.nopermission"),
    /*
    Access violation messages
     */
    ERROR_ACCESS_VIOLATION("error.access.violation"),
    ERROR_ACCESS_VIOLATION_NO_AUTHENTICATION("error.access.violation.no.authentication"),
    ERROR_ACCESS_VIOLATION_NO_AUTHENTICATION_GENERIC("error.access.violation.no.authentication.generic"),
    /**
     * An Organizational Provider can only be in a single Provider Role Type and
     * a matching Organizational Provider was found
     */
    ERROR_ADD_PROVIDER("error.add.provider"),
    /**
     * Messages cannot have personal and org. name.
     */
    ERROR_MESSAGE_NAME_BOTHNOTALLOWED("error.message.name.bothnotallowed"),
    /**
     * IND and ORG names must line up for messages
     */
    ERROR_MESSAGE_NAME_MANDATORYIND("error.message.name.mandatoryIND"),
    ERROR_MESSAGE_NAME_MANDATORYORG("error.message.name.mandatoryORG"),
    /**
     * Ceasing rules
     */
    ERROR_CASE_ELECADDR_HASINFOROUTE("error.cease.electroniceaddress.hasinformationroute"),
    ERROR_CASE_TELECOMM_HASINFOROUTE("error.cease.telecommunication.hasinformationroute"),
    ERROR_CASE_ADDRESS_HASINFOROUTE("error.cease.address.hasinformationroute"),
    ERROR_CASE_WORKLOCATION_HASELEADDASSOCIATED("error.cease.worklocation.ceasingrule.eleaddrassociated"),
    ERROR_CASE_WORKLOCATION_HASADDRASSOCIATED("error.cease.worklocation.ceasingrule.addrassociated"),
    ERROR_CASE_WORKLOCATION_HASTELECOMMASSOCIATED("error.cease.worklocation.ceasingrule.telecommassociated"),
    ERROR_CASE_ADDRESS_INACTIVETOCEASE("error.cease.address.inactiveToCease"),
    ERROR_CASE_ADDRESS_LASTPROVIDERADDRESSTOCEASE("error.cease.address.lastProviderAddressToCease"),
    ERROR_CASE_ADDRESS_INVALID("error.cease.address.invalid"),
    ERROR_CASE_ADDRESS_UNKOWN("error.cease.address.validation.unknown"),
    ERROR_GENERAL_TRANSACTION_FAILED("error.general.transaction.failed"),
    ERROR_CEASE_STATUS_PRIMARYSOURCE_NOTALLOWED("error.cease.status.primarysource.notallowed"),
    ERROR_MESSAGE_PARTYANDROLE("error.message.partyandrole"),
    ERROR_MESSAGE_BATCH_VALIDATION_ALREADY_RUNNING("error.cease.address.batch.validation.running"),
    /**
     * Communication purpose type code not allowed for 'Emergency Contact' and
     * restrictions for Telecom number types when communication purpose is
     * 'Emergency Contact'.
     */
    ERROR_COMM_PURPOSE_TYPE_NOT_ALLOWED("error.message.commun.purposetype.notallowed"),
    ERROR_TELECOM_NBR_TYPE_NOT_ALLOWED("error.message.telecom.numbertype.notallowed"),
    ERROR_WORK_LOCATION_COMM_PURPOSE_TYPE_NOT_ALLOWED("error.message.worklocation.commun.purposetype.notallowed");
    ;

    private final String key;

    private BusinessRuleKeys(String key) {
        this.key = key;
    }

    public String getKey() {
        return key;
    }
}
