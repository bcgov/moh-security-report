/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.remote;

import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.beanutils.PropertyUtils;

/**
 * Converter which copies values from the ESB dto and sets in PLR dto
 * 
 * @author sumesh.kariyil
 * @param <A> - ESB Dto type
 * @param <R> - PLR dto type
 */
public class LocalDtoConverter<R, A> {
    private final Class<R> type;
    
    public LocalDtoConverter(){
        type = null;
    }

    public LocalDtoConverter(Class<R> type) {
         this.type = type;
    }
     
    public R convert(R r, A a) {        
        try {
            // Bean utils copy properties is bit unpredictable as it does only shallow copying.
            // A common error scenario is as below,
            // Class A have a <code> List<X> names;</code> and class B have <code>List<Y> names</code>.
            // Then the bean utils will copy all the names from A to names in B, even if the classes are different (X and Y), 
            // this is because generics will be stripped off during compilation and bean utils doesn't what objects are inside the list. 
            // There will be no error during conversion, but whenever the calling party tries to access the converted object's 'names', 
            // will throw a class cast exception.
            // To resolve this issue utmost care should be taken to set the 'names' after coonversion in above example.
            PropertyUtils.copyProperties(r, a);
        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException ex) {
            throw new IllegalStateException(ex);
        }
        return r;
    }
    
    /**
     * 
     * @param a
     * @return 
     */
    public List<R> convert(List<A> a) {
        List<R> output = new ArrayList<>();
        try {
            for(A input : a){
                R receivable = type.newInstance();
                PropertyUtils.copyProperties(receivable, input);
                output.add(receivable);
            }            
        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException | InstantiationException ex) {
            throw new IllegalStateException(ex);
        }
        return output;
    }
}
