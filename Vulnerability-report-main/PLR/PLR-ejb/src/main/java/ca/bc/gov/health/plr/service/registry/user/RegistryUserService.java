package ca.bc.gov.health.plr.service.registry.user;

import ca.bc.gov.health.plr.dto.PartyDto;
import ca.bc.gov.health.plr.dto.provider.OrgNameDto;
import ca.bc.gov.health.plr.dto.reguser.RegistryUserDetailsConverter;
import ca.bc.gov.health.plr.dto.reguser.RegistryUserDetails;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsElectronicAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsOrgNames;
import ca.bc.gov.health.plr.ejb.entity.GrsParties;
import ca.bc.gov.health.plr.ejb.entity.GrsPartyDetails;
import ca.bc.gov.health.plr.ejb.entity.GrsPersonNames;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.GrsTelephones;
import ca.bc.gov.health.plr.ejb.session.AbstractFacade;
import ca.bc.gov.health.plr.interceptors.AccessInterceptor;
import ca.bc.gov.health.plr.interceptors.TestUserInterceptor;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.producer.type.Authenticated;
import ca.bc.gov.health.plr.producer.type.User;
import ca.bc.gov.health.plr.rule.provider.search.SearchLogger;
import ca.bc.gov.health.plr.service.EntityValidatorService;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.JournalService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.service.validators.RegUserUniqueNameValidator;
import ca.bc.gov.health.plr.service.validators.RegUserUniqueOrgChidValidator;
import java.util.ArrayList;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.enterprise.inject.Instance;
import javax.inject.Inject;
import javax.interceptor.Interceptors;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TemporalType;
import javax.persistence.TypedQuery;
import org.apache.commons.lang3.Validate;

/**
 * A service for searching for registry users
 *
 * @author Adebiyi.Kuseju
 */
@Stateless
@Interceptors({TestUserInterceptor.class, AccessInterceptor.class})
public class RegistryUserService extends AbstractFacade<GrsRegistryUsers> {

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em; 
    
    @EJB
    private CodesDao codesDao;
    
    @EJB
    private JournalService<GrsRegistryUsers> journalService;
    
    @EJB
    private SearchLogger searchLogger;
    
    @EJB
    private EntityValidatorService<PartyDto> partiesValidator;
    
    @EJB
    private EntityValidatorService<OrgNameDto> orgNamesValidator;
    
    @EJB
    private RegUserUniqueNameValidator regUserUniqueNameValidator;
    
    @EJB
    private RegUserUniqueOrgChidValidator regUserUniqueOrgChidValidator;
    
    @EJB
    private RegistryUserDetailsConverter registryUserDetailsConverter;
    
    @Inject
    @Authenticated
    private Instance<User> user;
   

    
    public RegistryUserService() {
        super(GrsRegistryUsers.class);
    }
    
    /**
     * 
     * @param regUser
     * @return
     * @throws DuplicateRecordException
     * @throws EntityValidationException 
     */
    public GrsRegistryUsers save(GrsRegistryUsers regUser) throws DuplicateRecordException, EntityValidationException {        
        return journalService.journal(regUser);
    }
    
    /**
     * Validate the data against unique rules
     * 
     * @param partyDto
     * @throws EntityValidationException 
     */
    public void validatePartyDetails(PartyDto partyDto) throws EntityValidationException{
        partiesValidator.validate(partyDto, regUserUniqueOrgChidValidator);
    }
    
    /**
     * Validate the data against unique rules
     * 
     * @param orgNameDto
     * @throws EntityValidationException 
     */
    public void validateOrgDetails(OrgNameDto orgNameDto) throws EntityValidationException{
        orgNamesValidator.validate(orgNameDto, regUserUniqueNameValidator);
    }
    
    /**
     * Searches for registry users based on the given criteria
     * 
     * @param searchParam An instance of RegistryUserSearchParam that contains the
     *                    search criteria
     * @return the java.util.List<ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers> 
     */
    public List<GrsRegistryUsers> search(RegistryUserSearchParam searchParam) {

        List<GrsRegistryUsers> result = null;

        if (searchParam.getRegistryUserType() != null && searchParam.getEarliestRegDate() != null) {
            result = em.createNamedQuery("GrsRegistryUsers.findByTypeAndRegDate")
                    .setParameter("typeId", searchParam.getRegistryUserType())
                    .setParameter("regDate", searchParam.getEarliestRegDate(), TemporalType.DATE).getResultList();
        } else if (searchParam.getRegistryUserType() != null) {
            result = em.createNamedQuery("GrsRegistryUsers.findByType")
                    .setParameter("typeId", searchParam.getRegistryUserType()).getResultList();
        } else if (searchParam.getEarliestRegDate() != null) {
            result = em.createNamedQuery("GrsRegistryUsers.findByRegDate")
                    .setParameter("regDate", searchParam.getEarliestRegDate(), TemporalType.DATE).getResultList();
        } else {
            result = em.createNamedQuery("GrsRegistryUsers.findAll").getResultList();
        }
        //Log the transaction details to events table
        searchLogger.logSearchForRegistryUser(searchParam, result);
        return result != null ? result : new ArrayList<GrsRegistryUsers>();
    }
    
    /**
     * Find a Registry User that corresponds to a primary key value.
     *
     * @param ruId the primary key for Registry User
     * @return a matching registry user record or null if no match
     */
    public RegistryUserDetails searchByRuId(Long ruId) {
        Validate.notNull(ruId);
        String queryString = "select regUser from GrsRegistryUsers regUser where regUser.ruId = :ruId";
        TypedQuery<GrsRegistryUsers> query = em.createQuery(queryString, GrsRegistryUsers.class).setParameter("ruId", ruId);

        List<GrsRegistryUsers> queryResult = query.getResultList();
        if (!queryResult.isEmpty()) {
            GrsRegistryUsers grsRegistryUsers = query.getResultList().get(0);
            return registryUserDetailsConverter.toDto(grsRegistryUsers);
        } else {
            return null;
        }
    }
     
    @Override
    protected EntityManager getEntityManager() {
        return em;
    }
    
    /**
     * Sets the mandatory attributes for a new record.
     * @param regUser
     * @return
     */
    public GrsRegistryUsers setActiveAttributesForAdd(GrsRegistryUsers regUser)  {
        if(regUser.getRuId() != null){
            return regUser;
        }
        GrsCtBooleanTypes trueCode = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES);
        regUser.setActiveFlag(trueCode);
        
        List<GrsAddresses> grsAddressesList = regUser.getGrsAddressesList();
        if(grsAddressesList != null){
            for (GrsAddresses grsAddress : grsAddressesList) {
                grsAddress.setActiveFlag(trueCode);
            }
        }
        List<GrsElectronicAddresses> grsElectronicAddressesList = regUser.getGrsElectronicAddressesList();
        if(grsElectronicAddressesList != null){
            for (GrsElectronicAddresses electronicAddress : grsElectronicAddressesList) {
                electronicAddress.setActiveFlag(trueCode);
            }
        }
        

        List<GrsPersonNames> grsPersonNamesList = regUser.getGrsPersonNamesList();
        if(grsPersonNamesList != null){
            for (GrsPersonNames grsPersonName : grsPersonNamesList) {
                grsPersonName.setActiveFlag(trueCode);
            }
        }

        List<GrsOrgNames> grsOrgNamesList = regUser.getGrsOrgNamesList();
        if(grsOrgNamesList != null){
            for (GrsOrgNames grsOrgName : grsOrgNamesList) {
                grsOrgName.setActiveFlag(trueCode);
            }
        }

        List<GrsTelephones> grsTelephonesList = regUser.getGrsTelephonesList();
        if(grsTelephonesList != null){
            for (GrsTelephones grsTelephone : grsTelephonesList) {
                grsTelephone.setActiveFlag(trueCode);
            }
        }

        GrsParties grsParty = regUser.getPartyPartyId();
        if(grsParty != null){
            grsParty.setActiveFlag(trueCode);
            List<GrsPartyDetails> grsPartyDetailsList = grsParty.getGrsPartyDetailsList();
            if(grsPartyDetailsList != null){
                for (GrsPartyDetails grsPartyDetail : grsPartyDetailsList) {
                    grsPartyDetail.setActiveFlag(trueCode);
                }
            }
        }
        
        return regUser;
    }

}
