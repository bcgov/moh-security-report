/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.converter.DisciplinaryActionDtoConverter;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.dto.provider.DisciplinaryActionDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsDisciplinaryActions;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.rule.provider.AccessRestrictionService;
import ca.bc.gov.health.plr.service.EntityValidatorService;
import ca.bc.gov.health.plr.service.validators.ConfidentialityValidator;
import ca.bc.gov.health.plr.service.validators.EntityChangeDetector;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.math.BigDecimal;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 *
 * @author ian.scott
 */
@Stateless
@LocalBean
public class MaintainDisciplinaryActionService implements MaintainService<DisciplinaryActionDto>{

    @PersistenceContext(unitName = "PLR-ejbPU")
    protected EntityManager em;
    @EJB
    private DisciplinaryActionDtoConverter disciplinaryActionDtoConverter;
    @EJB
    private JournalService<PrsDisciplinaryActions> journalService;
    
    @EJB
    private EntityValidatorService<PrsDisciplinaryActions> validatorService;

    @EJB
    private ConfidentialityValidator<PrsDisciplinaryActions> confidentialityValidator;
    
    @EJB
    protected CodesDao codesDao;

    @EJB
    private AccessRestrictionService accessRestrictionService;
    
    @EJB
    private ProviderDtoConverter providerDtoConverter;
    
    @EJB
    private EntityChangeDetector<DisciplinaryActionDto, PrsDisciplinaryActions> entityChangeDetector;

    /**
     * Bulids a dto from a record in the database based on primary key (ID)
     *
     * @param toRefresh - a dto with an ID
     * @return - dto built from database record or null
     */
    public DisciplinaryActionDto refresh(DisciplinaryActionDto toRefresh) {
        PrsDisciplinaryActions found = em.find(PrsDisciplinaryActions.class, toRefresh.getId());
        DisciplinaryActionDto toSendBack = providerDtoConverter.buildDisciplinaryAction(found);
        return toSendBack;
    }

    /**
     * Query a fresh complete list of Conditions related to a specific provider.
     *
     * @param disp
     * @return a list of fresh note transfer objects
     */
    public List<DisciplinaryActionDto> refreshDisciplinaryActions(DisciplinaryActionDto disp) {
        List<PrsDisciplinaryActions> foundEntities = null;
        PrsCtProviderRoleTypes hptCode = null;
        if (disp.getPauthId() != null) {
            PrsProviders provider = em.find(PrsProviders.class, disp.getPauthId());
            hptCode = provider.getHptCode();
            foundEntities = provider.getPrsDisciplinaryActionsList();
        }
        List<DisciplinaryActionDto> dtos = providerDtoConverter.buildDisciplinaryActions(foundEntities);
        accessRestrictionService.applyReadRestriction(dtos, hptCode, PrsDisciplinaryActions.class);
        return dtos;
    }

    /**
     * Persists a DTO to the database
     *
     * @param toSave dto to save
     * @return dto with values refreshed from the database
     * @throws ca.bc.gov.health.plr.service.provider.DuplicateRecordException
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Override
    public DisciplinaryActionDto save(DisciplinaryActionDto toSave) throws DuplicateRecordException, EntityValidationException {
        if (toSave.getIdentifier() == null || toSave.getIdentifier().isEmpty()) {
            toSave.setIdentifier(getNextDisciplinaryActionId());
        }
        PrsDisciplinaryActions newRecord = disciplinaryActionDtoConverter.toEntity(toSave);
        entityChangeDetector.checkForChanges(toSave, newRecord);
        if (toSave.isNoChangeOnUpdate()) {
            return toSave;
        }
        validatorService.validate(newRecord, confidentialityValidator);
        newRecord = journalService.journal(newRecord);
        
        return providerDtoConverter.buildDisciplinaryAction(newRecord);
    }

    /**
     * Returns the next Disciplinary Action ID in sequence
     * @return String - Disciplinary ID in the form "DA.#.PRS"
     */
    public String getNextDisciplinaryActionId() {
        String queryStr = "select DISCIPLINARY_ACTION_SEQ.nextval from dual";
        Query query = em.createNativeQuery(queryStr);
        Long result = ((BigDecimal) query.getSingleResult()).longValue();
        return "DA."+result+".PRS";
    }
}
