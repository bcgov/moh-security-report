/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.util;

import ca.bc.gov.health.plr.constants.Consts;
import java.util.Calendar;
import java.util.Date;

/**
 *
 * @author adebiyi.kuseju
 */
public class DateUtils {
    
    /**
     * checks if the date passed in is before today's date ignoring time
     * 
     * @param date
     * @return boolean
     */
    public static boolean isPast(Date date) {
        
        Calendar newRecordCal = Calendar.getInstance();
        newRecordCal.setTime(date);
        truncateTime(newRecordCal);
        
        Calendar now = Calendar.getInstance();
        truncateTime(now);
        
        return newRecordCal.before(now);
    }
    
     /**
     * checks if the first date passed in is before second date ignoring time
     * 
     * @param date1
     * @param date2
     * @return boolean
     */
    public static boolean isBefore(Date date1, Date date2) {
        
        Calendar calDate1 = Calendar.getInstance();
        calDate1.setTime(date1);
        truncateTime(calDate1);
        
        Calendar calDate2 = Calendar.getInstance();
        calDate2.setTime(date2);
        truncateTime(calDate2);
        
        return calDate1.before(calDate2);
    }
    
    
    /**
     * checks if the date passed in is equals to today's date ignoring time
     * 
     * @param date
     * @return boolean
     */
    public static boolean isPresent(Date date) {
        
        Calendar newRecordCal = Calendar.getInstance();
        newRecordCal.setTime(date);
        truncateTime(newRecordCal);
        
        Calendar now = Calendar.getInstance();
        truncateTime(now);
                
        
        return newRecordCal.equals(now);
    }
    
    
    /**
     * checks if the date passed in is equals to today's date ignoring time
     * 
     * @param date
     * @return boolean
     */
    public static boolean isFuture(Date date) {

        Calendar newRecordCal = Calendar.getInstance();
        newRecordCal.setTime(date);
        truncateTime(newRecordCal);
        
        Calendar now = Calendar.getInstance();
        truncateTime(now);
                
        
        return newRecordCal.after(now);
    }
    
    /**
     * checks if current date is within startdate and endDate
     * 
     * @param startDate
     * @param endDate
     * @return boolean
     */
    public static boolean isCurrentDateWithinRange(Date startDate, Date endDate) {
        
        Calendar startDateCal = Calendar.getInstance();
        startDateCal.setTime(startDate);
        truncateTime(startDateCal);
        
        Calendar endDateCal = Calendar.getInstance();
        endDateCal.setTime(endDate);
        truncateTime(endDateCal);
                
        Calendar now = Calendar.getInstance();
        truncateTime(now);
        
        return now.compareTo(startDateCal) >= 0 && now.compareTo(endDateCal) <= 0;

    }
    
    /**
     * Truncates time part of a Calendar object
     * @param cal 
     */
    public static void truncateTime(Calendar cal) {
        
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);
    }
    
    /**
     * Creates a date instance
     * 
     * @param year
     * @param month
     * @param date
     * @return 
     */
    public static Date getDate(int year, int month, int date) {        
        Calendar cal = Calendar.getInstance();        
        cal.set(year, month, date);
        
        return cal.getTime();
    }
    
    /**
     * 
     * @param date
     * @return 
     */
    public static String formatNotificationDate(Date date) {
        String result = null;
        if (date != null) {
           result = Consts.TX_NOTIFICATION_DATE_FORMAT.format(date);
        }
        return result;
    }
    
    /**
     * Compare date in order to show date in descending order.
     * @param x
     * @param y
     * @return 
     */
    public static int compareDate(Date x, Date y) {
        if(x!=null) {
            if(y!=null) {
                if(org.apache.commons.lang3.time.DateUtils.isSameDay(x, y)) {
                    return 0;
                } else if(x.before(y)) {
                    return 1;
                } else {
                    return -1;
                }
            } else {
                return -1;
            }
        } else {
            if(y!=null) {
                return 1;
            } else {
                return 0;
            }
        }
    }
    
    public static int compareEffectiveStartAndCreatedDates(Date xEffectiveStartDate, Date yEffectiveStartDate, Date xCreatedDate, Date yCreatedDate) {
        int effectiveStartDateCompareResult = DateUtils.compareDate(xEffectiveStartDate, yEffectiveStartDate);
        if(effectiveStartDateCompareResult!=0){
            return effectiveStartDateCompareResult;
        } else {
            return DateUtils.compareDate(xCreatedDate, yCreatedDate);
        }
    }
    
}
