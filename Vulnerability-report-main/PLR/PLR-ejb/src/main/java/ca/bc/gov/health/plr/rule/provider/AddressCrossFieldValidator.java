package ca.bc.gov.health.plr.rule.provider;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.service.provider.AddressSupportService;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;
import org.apache.commons.lang3.StringUtils;

/**
 * Validator for the address DTO which handles all constraints/rules which
 * require talking to other members of the class
 *
 * @author ian.scott
 */
public class AddressCrossFieldValidator implements ConstraintValidator<AddressCrossFieldConstraints, AddressDto> {

    private CodesDao codesDao;
    private AddressSupportService addressSupportService;
    private static final String postalNodeName = "postalCode";
    private static final String provinceNodeName="provinceOrStateTxt";

    @Override
    public void initialize(AddressCrossFieldConstraints constraintAnnotation) {
        try {        
            codesDao = (CodesDao) InitialContext.doLookup(Consts.JNDILOOKUP_CODESDAO);
            addressSupportService = (AddressSupportService) InitialContext.doLookup(Consts.JNDILOOKUP_ADDRESS_SUPPORT);
        } catch (NamingException ex) {
            throw new RuntimeException(ex);
        }
    }

    @Override
    public boolean isValid(AddressDto value, ConstraintValidatorContext context) {
        if (value == null) {
            return true;
        }

        String countryCode = value.getCountryCode();
        if (value.getCountryId() != null && codesDao.codeExists(PrsCtCountries.class, value.getCountryId())) {
            PrsCtCountries foundCountry = codesDao.lookup(PrsCtCountries.class, value.getCountryId());
            countryCode = foundCountry.getCtlNameCode();
        }
        return validateProvinceText(value.getProvinceOrStateTxt(), countryCode, context) && 
                processPostalCode(value.getPostalCode(), countryCode, context);
    }

    public boolean processPostalCode(String postalCodeValue, String countryCode, ConstraintValidatorContext context) {
        if (postalCodeValue == null || postalCodeValue.isEmpty()) {
            return true;
        }
        if (countryCode != null && countryCode.equals(Consts.DEFAULT_COUNTRY_CODE)) {
            if (!Consts.POSTAL_CODE_REGEX_PATTERN.matcher(postalCodeValue).matches()) {
                changeErrorMessage(BusinessRuleKeys.ERROR_ADDRESSPOSTALFIELD_PATTERNMATCH, postalNodeName, context);
                return false;
            }
        } else if (postalCodeValue.length() > Consts.maxZipCode) {
            changeErrorMessage(BusinessRuleKeys.ERROR_ZIP_TOOLONG, postalNodeName, context);
            return false;
        }
        return true;
    }

    public void changeErrorMessage(BusinessRuleKeys key, String node, ConstraintValidatorContext cvc) {
        cvc.disableDefaultConstraintViolation();
        String message = BusinessRuleMessageDao.getMessageResource(key);
        cvc.buildConstraintViolationWithTemplate(message).addNode(node).addConstraintViolation();
    }

    private boolean validateProvinceText(String provinceOrStateTxt, String countryCode, ConstraintValidatorContext context) {
        if(StringUtils.isBlank(countryCode)){
            return true;
        }
        if (StringUtils.isEmpty(provinceOrStateTxt) && DemographicsCrossFieldValidator.isCanadaOrUnitedStates(countryCode)) {
            context.disableDefaultConstraintViolation();
            context.buildConstraintViolationWithTemplate("{error.notblank.part1of2}Address Province{error.notblank.part2of2}")
                    .addNode(provinceOrStateTxt).addConstraintViolation();
            return false;
        }
        if(DemographicsCrossFieldValidator.isCanadaOrUnitedStates(countryCode)){
            if(addressSupportService.getProvinceDetailsByCountry(countryCode, provinceOrStateTxt) != null){
                return true;
            } else {
                changeErrorMessage(BusinessRuleKeys.ERROR_ADDRESSPROVSTATEFIELD_INVALID, provinceNodeName, context);
                return false;
            }
        } else {
            return true;
        }        
    }
    
}
