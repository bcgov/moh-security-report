/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.provider.security;

import java.io.Serializable;
import java.util.Objects;

/**
 *
 * @author adebiyi.kuseju
 */
public class LeafPermission implements Serializable {

    private final String dataOwner;
    private final String providerType;
    private boolean readable;
    private boolean writable;

    LeafPermission(String providerType, String dataOwner, boolean readable, boolean writable) {
        this.dataOwner = dataOwner;
        this.providerType = providerType;
        this.readable = readable;
        this.writable = writable;
    }

    String getDataOwner() {
        return dataOwner;
    }

    String getProviderType() {
        return providerType;
    }

    public boolean isReadable() {
        return readable;
    }

    public boolean isWritable() {
        return writable;
    }

    String getKey() {
        return makeKey(providerType, dataOwner);
    }
    
    static String makeKey(String providerType, String dataOwner) {
        return dataOwner + providerType;
    }

    @Override
    public int hashCode() {
        int hash = 3;
        hash = 53 * hash + Objects.hashCode(this.dataOwner);
        hash = 53 * hash + Objects.hashCode(this.providerType);
        return hash;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        final LeafPermission other = (LeafPermission) obj;
        if (!Objects.equals(this.dataOwner, other.dataOwner)) {
            return false;
        }
        if (!Objects.equals(this.providerType, other.providerType)) {
            return false;
        }
        return true;
    }

    public boolean isMoreRestrictive(LeafPermission item) {

        boolean result = false;
        
        if (writable != item.writable) {

            // If they can write and I can't
            // then I am more restrictive
            if (item.writable) {
                result = true;
            }

        } else if (readable != item.readable) {

            // If they can read and I can't
            // then I am more restrictive
            if (item.readable) {
                result = true;
            }
        }

        return result;
    }

}
