
package ca.bc.gov.health.plr.dto.provider;

import ca.bc.gov.health.plr.dto.MessageDataBlockDto;
import ca.bc.gov.health.plr.dto.businesskey.DisciplinaryActionBK;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.ejb.entity.PrsDisciplinaryActions;
import ca.bc.gov.health.plr.rule.provider.AcceptableAnyField;
import ca.bc.gov.health.plr.util.DateUtils;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import javax.validation.constraints.NotBlank;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class DisciplinaryActionDto extends AbstractProviderDetail implements MessageDataBlockDto, Comparable<DisciplinaryActionDto> {
    @AcceptableAnyField( message = "{error.anyfield.invalidcharacters.part1of2} 'Disciplinary Action Identifier' {error.anyfield.invalidcharacters.part2of2}")
    @Size(max = 30, message = "{constraints.size.message.part1of2} 'Disciplinary Action Identifier' {constraints.size.message.part2of2}")
    String identifier;
    @NotBlank(message = "{error.notblank.part1of2}Disciplinary Action Text{error.notblank.part2of2}")
    @AcceptableAnyField( message = "{error.anyfield.invalidcharacters.part1of2} 'Disciplinary Action Description' {error.anyfield.invalidcharacters.part2of2}")
    @Size(max = 3000, message = "{constraints.size.message.part1of2} 'Disciplinary Action Description' {constraints.size.message.part2of2}")    
    String description;
    boolean displayFlag;
    Date archiveDate;
    private String typeCode;
    @NotNull(message = "{error.notblank.part1of2} Disciplinary Action Effective Start Date {error.notblank.part2of2}")
    private Date effectiveStartDate;
    private Date effectiveEndDate;
    private Long typeId;

    /**
     * @return the identifier
     */
    public String getIdentifier() {
        return identifier;
    }

    /**
     * @param identifier the identifier to set
     */
    public void setIdentifier(String identifier) {
        identifier = StringUtils.stripAccents(identifier);
        identifier = StringUtils.strip(identifier);
        this.identifier = identifier;
    }

    /**
     * @return the description
     */
    public String getDescription() {
        return description;
    }

    /**
     * @param description the description to set
     */
    public void setDescription(String description) {
        description = StringUtils.stripAccents(description);
        description = StringUtils.strip(description);
        this.description = description;
    }

    /**
     * @return the displayFlag
     */
    public boolean isDisplayFlag() {
        return displayFlag;
    }

    /**
     * @param displayFlag the displayFlag to set
     */
    public void setDisplayFlag(boolean displayFlag) {
        this.displayFlag = displayFlag;
    }

    /**
     * @return the archiveDate
     */
    public Date getArchiveDate() {
        return archiveDate;
    }

    /**
     * @param archiveDate the archiveDate to set
     */
    public void setArchiveDate(Date archiveDate) {
        this.archiveDate = archiveDate;
    }

    @Override
    public String[] getMessageDataBlockFields() {
        return new String[]{"identifier"};
    }
    
    @Override
    public ca.bc.gov.health.plr.dto.provider.esb.AbstractProviderDetail toEsbVersion() throws Exception {  
        ca.bc.gov.health.plr.dto.provider.esb.DisciplinaryActionDto esbVersion = new ca.bc.gov.health.plr.dto.provider.esb.DisciplinaryActionDto();        
        
        PropertyUtils.copyProperties(esbVersion, this);
        
        return esbVersion;

    }

    @Override
    public String getTypeCode() {
        return typeCode;
    }

    @Override
    public void setTypeCode(String typeCode) {
        this.typeCode = typeCode;
    }
    @Override
    public String getBlockName() {
        return "Disciplinary Action";
    }

    /**
     * @return the effectiveStartDate
     */
    @Override
    public Date getEffectiveStartDate() {
        return effectiveStartDate;
    }

    /**
     * @param effectiveStartDate the effectiveStartDate to set
     */
    @Override
    public void setEffectiveStartDate(Date effectiveStartDate) {
        this.effectiveStartDate = effectiveStartDate;
    }

    @Override
    public Date getEffectiveEndDate() {
        return effectiveEndDate;
    }

    @Override
    public void setEffectiveEndDate(Date effectiveEndDate) {
        this.effectiveEndDate = effectiveEndDate;
    }

    public Long getTypeId() {
        return typeId;
    }

    public void setTypeId(Long typeId) {
        this.typeId = typeId;
    }

    @Override
    public void addToProviderDto(ProviderDto providerDto) {
        providerDto.getDisciplinaryActions().add(this);
    }
    
    @Override
    public Class getEntityClass() {
        return PrsDisciplinaryActions.class;
    }
    
    @Override
    public Method getDtoConverterMethod() {
        Method method = null;
        try {
            method = ProviderDtoConverter.class.getMethod("buildDisciplinaryAction", PrsDisciplinaryActions.class);
        } catch (NoSuchMethodException | SecurityException ex) {
            Logger.getLogger(AddressDto.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // return null is OK
        return method;
    }
    
    @Override
    public int compareTo(DisciplinaryActionDto otherDto) {
        int keyCompareResult = ca.bc.gov.health.plr.util.PropertyUtils.compareString(this.getIdentifier(), otherDto.getIdentifier());
        if(keyCompareResult!=0) {
            return keyCompareResult;
        }
        keyCompareResult = super.compareDataOwnerCode(otherDto.getDataOwnerCode());
        if(keyCompareResult!=0) {
            return keyCompareResult;
        }
        keyCompareResult =  DateUtils.compareEffectiveStartAndCreatedDates(this.getEffectiveStartDate(), otherDto.getEffectiveStartDate(), this.getCreatedDate(), otherDto.getCreatedDate());
        if(keyCompareResult!=0) {
            return keyCompareResult;
        }
        return ca.bc.gov.health.plr.util.PropertyUtils.compareString(this.getEndReasonCode(), otherDto.getEndReasonCode());
    }    
    
   /**
    * Limit the size of input list of DisciplinaryActionDto to be less or equals to maxBusinessObjectShown
    * @param inList - the list of DisciplinaryActionDto
    * @param maxBusinessObjectShown int
    * @return the list of DisciplinaryActionDto, it's size is less or equals to maxBusinessObjectShown
    */
    public static List<DisciplinaryActionDto> limitDtoListBasedOnBK(List<DisciplinaryActionDto> inList, int maxBusinessObjectShown) {
        if(inList==null) {
            return null;
        } else if(inList.size()<=maxBusinessObjectShown) {
            return inList; 
        }        
        //find all business key objects
        List<DisciplinaryActionBK> bKeyList = new ArrayList<>();
        for(DisciplinaryActionDto t : inList) {
            DisciplinaryActionBK bk = new DisciplinaryActionBK(t.getIdentifier(), t.getDataOwnerCode());
            if(!bKeyList.contains(bk)) {
                bKeyList.add(bk);
            }
        }
        
        //go through each business key object and find all matching dtos
        List<DisciplinaryActionDto> allList = new ArrayList<>();
        for(DisciplinaryActionBK bk : bKeyList) {
            List<DisciplinaryActionDto> tmpList = new ArrayList<>();
            for(DisciplinaryActionDto t : inList) {
                DisciplinaryActionBK bkFromDto = new DisciplinaryActionBK(t.getIdentifier(), t.getDataOwnerCode());
                if(bk.equals(bkFromDto)) {
                    tmpList.add(t);
                }
            }
            //only keep first maxBusinessObjectShown dtos
            if(tmpList.size()>maxBusinessObjectShown) {
                tmpList = tmpList.subList(0, maxBusinessObjectShown);
            }
            if(!tmpList.isEmpty()) {
                allList.addAll(tmpList);
            }
        }
        
        return allList;
        
    }    
}
