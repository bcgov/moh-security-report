/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.converter.ConditionDtoConverter;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.dto.provider.ConditionsDto;
import ca.bc.gov.health.plr.ejb.entity.PrsConditions;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.rule.provider.AccessRestrictionService;
import ca.bc.gov.health.plr.service.EntityValidatorService;
import ca.bc.gov.health.plr.service.validators.ConfidentialityValidator;
import ca.bc.gov.health.plr.service.validators.EntityChangeDetector;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.math.BigDecimal;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 *
 * @author ian.scott
 */
@Stateless
@LocalBean
public class MaintainConditionService implements MaintainService<ConditionsDto>{

    @PersistenceContext(unitName = "PLR-ejbPU")
    protected EntityManager em;
    @EJB
    private ConditionDtoConverter conditionDtoConverter;
    @EJB
    private JournalService<PrsConditions> journalService;

    @EJB
    private EntityValidatorService<PrsConditions> validatorService;

    @EJB
    private ConfidentialityValidator<PrsConditions> confidentialityValidator;

    @EJB
    private AccessRestrictionService accessRestrictionService;
    
    @EJB
    private ProviderDtoConverter providerDtoConverter;
    
    @EJB
    private EntityChangeDetector<ConditionsDto, PrsConditions> entityChangeDetector;

    /**
     * Bulids a dto from a record in the database based on primary key (ID)
     *
     * @param toRefresh - a dto with an ID
     * @return - dto built from database record or null
     */
    public ConditionsDto refresh(ConditionsDto toRefresh) {
        PrsConditions found = em.find(PrsConditions.class, toRefresh.getId());
        ConditionsDto toSendBack = providerDtoConverter.buildCondition(found);
        return toSendBack;
    }

    /**
     * Query a fresh complete list of Conditions related to a specific provider.
     *
     * @param condition
     * @return a list of fresh note transfer objects
     */
    public List<ConditionsDto> refreshConditions(ConditionsDto condition) {
        List<PrsConditions> foundEntities = null;
        PrsCtProviderRoleTypes hptCode = null;
        if (condition.getPauthId() != null) {
            PrsProviders provider = em.find(PrsProviders.class, condition.getPauthId());
            hptCode = provider.getHptCode();
            foundEntities = provider.getPrsConditionsList();
        }
        List<ConditionsDto> dtos = providerDtoConverter.buildConditions(foundEntities);
        accessRestrictionService.applyReadRestriction(dtos, hptCode, PrsConditions.class);
        return dtos;
    }

    /**
     * Persists a DTO to the database
     *
     * @param toSave
     * @return dto with values refreshed from the database
     * @throws ca.bc.gov.health.plr.service.provider.DuplicateRecordException
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Override
    public ConditionsDto save(ConditionsDto toSave) throws DuplicateRecordException, EntityValidationException {
        if (toSave.getIdentifier() == null || "".equals(toSave.getIdentifier())) {
            toSave.setIdentifier(getNextConditionId());
        }
        PrsConditions newRecord = conditionDtoConverter.toEntity(toSave);       
        entityChangeDetector.checkForChanges(toSave, newRecord);
	if(toSave.isNoChangeOnUpdate()){
            return toSave;
	}
        validatorService.validate(newRecord, confidentialityValidator);
        newRecord = journalService.journal(newRecord);

        return providerDtoConverter.buildCondition(newRecord);
    }

    /**
     * Returns the next Condition ID in sequence
     *
     * @return String - Condition ID in the form "CDN.#.PRS"
     */
    public String getNextConditionId() {
        String queryStr = "select CONDITION_SEQ.nextval from dual";
        Query query = em.createNativeQuery(queryStr);
        Long result = ((BigDecimal) query.getSingleResult()).longValue();
        return "CDN." + result + ".PRS";
    }
}
