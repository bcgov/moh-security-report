package ca.bc.gov.health.plr.service.remote;

import ca.bc.gov.health.plr.dto.esb.BatchResponse;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.esb.BatchStatus;
import ca.bc.gov.health.plr.ejb.entity.PrsBatchTransactionStatus;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.ConfigurationDao;
import ca.bc.gov.health.plr.service.EmailService;
import ca.bc.gov.health.plr.service.distribution.Serializer;
import ca.bc.gov.health.plr.util.DateUtils;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.mail.MessagingException;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author sumesh.kariyil
 */
@Stateless
public class BatchTransactionStatusService implements BatchTransactionStatusServiceRemote, BatchTransactionStatusServiceLocal {

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;

    @Inject
    private EmailService emailService;   

    @Inject
    private ConfigurationDao configurationDao;
    
    @Inject
    private Serializer<BatchResponse> serializer;

    private static final String SUBJECT = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.TX_BATCH_EMAIL_SUBJECT);
    private static final String CONTENT = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.TX_BATCH_EMAIL_CONTENT);
    
    @Override
    public void logStatus(BatchStatus status, String txId, String source) {
        logStatus(status, txId, source, null);
    }

    @Override
    public void logStatus(BatchStatus status, String txId, String source, BatchResponse batchResponse) {
        Date submissionTime = new Date();
        NotificationStatus notificationSent = sendNotification(submissionTime, source, status, txId);
        
        PrsBatchTransactionStatus batchTransactionStatus = new PrsBatchTransactionStatus();
        batchTransactionStatus.setClient(source);
        batchTransactionStatus.setStatus(status.getValue());
        batchTransactionStatus.setTxId(txId);
        batchTransactionStatus.setNotificationStatus(notificationSent.toString());
        batchTransactionStatus.setSubmissionTime(submissionTime);
        if (batchResponse != null) {
            batchTransactionStatus.setResponse(serializer.serialize(batchResponse));
        }
        em.persist(batchTransactionStatus);
    }

    private NotificationStatus sendNotification(Date submissionTime, String source, BatchStatus status, String uniqueMessageId) {
        if (!shouldSendEmail(status)) {
            return NotificationStatus.NA;
        }
        try {
            String content = String.format(CONTENT, new Object[]{
                DateUtils.formatNotificationDate(submissionTime), source, status, uniqueMessageId});

            emailService.sendMail(configurationDao.getBatchTxEmailFromAddress(), configurationDao.getBatchTxNotificationEmailIds(),
                    null, null, SUBJECT, content, null);
            return NotificationStatus.Success;
        } catch (MessagingException ex) {
            Logger.getLogger(BatchTransactionStatusService.class.getName()).log(Level.SEVERE, null, ex);
            return NotificationStatus.Failed;
        }
    }

    private static boolean shouldSendEmail(BatchStatus status) {
        switch (status) {
            case PROCESSED:
            case FAILED:
            case FAILED_TO_PARSE:
            case FAILED_RESPONSE_DELIVERY:
            case ESB_UNREACHABLE:
                return true;
            default:
                return false;
        }
    }

    private static enum NotificationStatus {
        Success, Failed, NA;
    }

}
