package ca.bc.gov.health.plr.dto.provider;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.provider.comparator.PersonNameDtoLastFirstNameComparator;
import ca.bc.gov.health.plr.dto.DtoCommon;
import ca.bc.gov.health.plr.dto.reguser.AccessProfileDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodeTableCodes.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeId;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeName;
import ca.bc.gov.health.plr.service.distribution.AccessProfileDistributeAfterDateComparator;
import ca.bc.gov.health.plr.util.DateUtils;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import org.apache.commons.collections.CollectionUtils;

/**
 * Transfer object that encapsulates provider details.
 *
 * @author Grant.Hodgins
 */
public class ProviderDto {

    private CodeTableCodes.GrsCtPartyType partyType;
    private CodeTableCodes.PrsCtJurisdictions jurisdictionType;

    private Long pauthId;
    @AcceptableCodeId(clazz = PrsCtProviderRoleTypes.class, code = "Provider Role Type")
    private Long typeId;
    private String type;
    private boolean confidential;
    @AcceptableCodeName(clazz = PrsCtProviderRoleTypes.class, code = "Provider Role Type")
    private String providerRoleTypeCode;
    // ProviderType also known as Party Type: IND or ORG.
    private ProviderType providerType;
    private List<RegistryIdentifierDto> registryIdentifiers = new ArrayList<>();
    private List<CollegeIdentifierDto> identifiers = new ArrayList<>();
    private List<PersonNameDto> indNames = new ArrayList<>();
    private List<OrgNameDto> orgNames = new ArrayList<>();
    private List<DemographicDetailsDto> demographicDetails = new ArrayList<>();
    private List<AddressDto> addresses = new ArrayList<>();
    private List<TelecommunicationDto> telecommunication = new ArrayList<>();
    private List<ElectronicAddressDto> electronicAddresses = new ArrayList<>();
    private List<WorkLocationDto> workLocationList = new ArrayList<>();
    private List<StatusDto> statuses = new ArrayList<>();
    private List<ConditionsDto> conditions = new ArrayList<>();
    private List<ExpertiseDto> expertise = new ArrayList<>();
    private List<CredentialsDto> credentials = new ArrayList<>();
    private List<InformationRouteDto> informationRoutes = new ArrayList<>();
    private List<DisciplinaryActionDto> disciplinaryActions = new ArrayList<>();
    private List<ConfidentialityIndicatorDto> confidentialityIndicators = new ArrayList<>();
    private List<ProviderRelationshipDto> providerRelationships = new ArrayList<>();
    private List<RegistryUserRelationshipDto> registryUserRelationships = new ArrayList<>();
    private List<NoteDto> notes = new ArrayList<>();
    private JurisdictionNameCodeDto jurisdiction = new JurisdictionNameCodeDto();
    // Primary CHID - This is added since the registry identifiers will not be returned in search 
    private String primaryChid;

    public ProviderDto() {

    }

    public ProviderDto(boolean prepopulate) {
        if (prepopulate) {
            demographicDetails.add(new DemographicDetailsDto());
            identifiers.add(new CollegeIdentifierDto());
            //      expertise.add(new ExpertiseDto());
            statuses.add(new StatusDto());
            indNames.add(new PersonNameDto());
            orgNames.add(new OrgNameDto());
            addresses.add(new AddressDto());
            electronicAddresses.add(new ElectronicAddressDto());
         //   credentials.add(new CredentialsDto());

            // For Phone
            telecommunication.add(new TelecommunicationDto());
            //For Fax
            telecommunication.add(new TelecommunicationDto());
        }
    }

    // Contains the name of the list, which the user doesn't have access to view
    private List<String> unReadableRecords = new ArrayList<>();

    public CodeTableCodes.GrsCtPartyType getPartyType() {
        return partyType;
    }

    public void setPartyType(CodeTableCodes.GrsCtPartyType partyType) {
        this.partyType = partyType;
    }

    public void setJurisdictionType(CodeTableCodes.PrsCtJurisdictions jurisdiction) {

        // need to set the code .e.g 'BC' so that bean validation has something to validate
        this.jurisdiction.setJurisdicationNameCode(jurisdiction.getValue());
        this.jurisdictionType = jurisdiction;
    }

    public CodeTableCodes.PrsCtJurisdictions getJurisdictionType() {
        return jurisdictionType;
    }

    public JurisdictionNameCodeDto getJurisdiction() {
        return jurisdiction;
    }

    public void setJurisdiction(JurisdictionNameCodeDto jurisdiction) {
        this.jurisdiction = jurisdiction;
    }

    public Long getPauthId() {
        return pauthId;
    }

    public void setPauthId(Long pauthId) {
        this.pauthId = pauthId;
    }

    public List<CollegeIdentifierDto> getIdentifiers() {
        return identifiers;
    }

    public void setIdentifiers(List<CollegeIdentifierDto> identifiers) {
        this.identifiers = identifiers;
    }

    public List<PersonNameDto> getIndNames() {
        return indNames;
    }

    public void setIndNames(List<PersonNameDto> indNames) {
        this.indNames = indNames;
    }

    public List<AddressDto> getAddresses() {
        return addresses;
    }

    public void setAddresses(List<AddressDto> addresses) {
        this.addresses = addresses;
    }

    public List<StatusDto> getStatuses() {
        return statuses;
    }

    public void setStatuses(List<StatusDto> statuses) {
        this.statuses = statuses;
    }

    public boolean isConfidential() {
        return confidential;
    }

    public void setConfidential(boolean confidential) {
        this.confidential = confidential;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public List<RegistryIdentifierDto> getRegistryIdentifiers() {
        return registryIdentifiers;
    }

    public void setRegistryIdentifiers(List<RegistryIdentifierDto> registryIdentifiers) {
        this.registryIdentifiers = registryIdentifiers;
    }

    public List<DemographicDetailsDto> getDemographicDetails() {
        return demographicDetails;
    }

    public void setDemographicDetails(List<DemographicDetailsDto> demographicDetails) {
        this.demographicDetails = demographicDetails;
    }

    public List<TelecommunicationDto> getTelecommunication() {
        return telecommunication;
    }

    public void setTelecommunication(List<TelecommunicationDto> telecommunication) {
        this.telecommunication = telecommunication;
    }

    public List<ElectronicAddressDto> getElectronicAddresses() {
        return electronicAddresses;
    }

    public void setElectronicAddresses(List<ElectronicAddressDto> electronicAddresses) {
        this.electronicAddresses = electronicAddresses;
    }

    public List<ConditionsDto> getConditions() {
        return conditions;
    }

    public void setConditions(List<ConditionsDto> conditions) {
        this.conditions = conditions;
    }

    public List<ExpertiseDto> getExpertise() {
        return expertise;
    }

    public void setExpertise(List<ExpertiseDto> expertise) {
        this.expertise = expertise;
    }

    public List<CredentialsDto> getCredentials() {
        return credentials;
    }

    public void setCredentials(List<CredentialsDto> credentials) {
        this.credentials = credentials;
    }

    public List<InformationRouteDto> getInformationRoutes() {
        return informationRoutes;
    }

    public void setInformationRoutes(List<InformationRouteDto> informationRoutes) {
        this.informationRoutes = informationRoutes;
    }

    public List<DisciplinaryActionDto> getDisciplinaryActions() {
        return disciplinaryActions;
    }

    public void setDisciplinaryActions(List<DisciplinaryActionDto> disciplinaryActions) {
        this.disciplinaryActions = disciplinaryActions;
    }

    public List<ConfidentialityIndicatorDto> getConfidentialityIndicators() {
        return confidentialityIndicators;
    }

    public void setConfidentialities(List<ConfidentialityIndicatorDto> confidentialityIndicators) {
        this.confidentialityIndicators = confidentialityIndicators;
    }

    public List<ProviderRelationshipDto> getProviderRelationships() {
        return providerRelationships;
    }

    public void setProviderRelationships(List<ProviderRelationshipDto> providerRelationships) {
        this.providerRelationships = providerRelationships;
    }

    public List<RegistryUserRelationshipDto> getRegistryUserRelationships() {
        return registryUserRelationships;
    }

    public void setRegistryUserRelationships(List<RegistryUserRelationshipDto> registryUserRelationships) {
        this.registryUserRelationships = registryUserRelationships;
    }

    public List<NoteDto> getNotes() {
        return notes;
    }

    public void setNotes(List<NoteDto> notes) {
        this.notes = notes;
    }

    public List<WorkLocationDto> getWorkLocationList() {
        return workLocationList;
    }

    public void setWorkLocationList(List<WorkLocationDto> workLocationList) {
        this.workLocationList = workLocationList;
    }

    public List<OrgNameDto> getOrgNames() {
        return orgNames;
    }

    public void setOrgNames(List<OrgNameDto> orgNames) {
        this.orgNames = orgNames;
    }

    public Long getTypeId() {
        return typeId;
    }

    public void setTypeId(Long typeId) {
        this.typeId = typeId;
    }

    public ProviderType getProviderType() {
        return providerType;
    }

    public void setProviderType(ProviderType providerType) {
        this.providerType = providerType;
    }

    public TelecommunicationDto getPhone() {
        return telecommunication.get(0);
    }

    public TelecommunicationDto getFax() {
        return telecommunication.get(1);
    }

    public List<String> getUnReadableRecords() {
        return unReadableRecords;
    }

    public String getProviderRoleTypeCode() {
        return providerRoleTypeCode;
    }

    public void setProviderRoleTypeCode(String providerRoleTypeCode) {
        this.providerRoleTypeCode = providerRoleTypeCode;
    }

    /**
     * Contains the name of the list, which the user doesn't have access to view
     *
     * @param unReadableRecords
     */
    public void setUnReadableRecords(List<String> unReadableRecords) {
        this.unReadableRecords = unReadableRecords;
    }
    
    /**
     * Removes CORR records if not reg admin
     *
     * @param isRegAdmin are you reg admin
     */
    public void removeCorrectionsIfNotRegAdmin(boolean isRegAdmin) {
        removeCorrectionsIfNotRegAdmin(indNames, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(registryIdentifiers, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(identifiers, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(orgNames, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(demographicDetails, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(addresses, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(telecommunication, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(electronicAddresses, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(statuses, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(conditions, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(expertise, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(credentials, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(informationRoutes, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(disciplinaryActions, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(confidentialityIndicators, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(providerRelationships, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(registryUserRelationships, isRegAdmin);
        removeCorrectionsIfNotRegAdmin(notes, isRegAdmin);

        if (workLocationList != null) {
            Iterator<WorkLocationDto> wlIter = workLocationList.iterator();
            while (wlIter.hasNext()) {
                WorkLocationDto WlDto = wlIter.next();
                removeCorrectionsIfNotRegAdmin(WlDto.getWorkLocationDetails(), isRegAdmin);
                removeCorrectionsIfNotRegAdmin(WlDto.getAddresses(), isRegAdmin);
                removeCorrectionsIfNotRegAdmin(WlDto.getElectronicAddresses(), isRegAdmin);
                removeCorrectionsIfNotRegAdmin(WlDto.getInformationRoutes(), isRegAdmin);
                removeCorrectionsIfNotRegAdmin(WlDto.getTelecommunications(), isRegAdmin);
            }
        }
    }

    /**
     * Removes CORR records if not reg admin
     * @param dtoList list of records
     * @param isRegAdmin are you reg admin?
     */
    private void removeCorrectionsIfNotRegAdmin(List<? extends DtoCommon> dtoList, boolean isRegAdmin) {
        if (dtoList != null) {
            Iterator<? extends DtoCommon> listIter = dtoList.iterator();
            while (listIter.hasNext()) {
                DtoCommon dtoCommon = listIter.next();
                if (!isRegAdmin
                        && dtoCommon.getEndReasonCode() != null
                        && dtoCommon.getEndReasonCode().matches(GrsCtEndReasonTypes.CORRECT.getValue())) {
                    listIter.remove();
                }
            }
        }
    }
    
    /**
     * This method is used by distribution. When distribution process calls it, the various
     * dto list should only include one member which comes from GRS_DISTRIB_EVENT_ITEM table 
     * AFTER_CHANGE_MSG field. The main function of this method is to remove the dtos having 
     * effective start date fore distribute after date.
     * 
     * @param accessProfileDtoList the list of AccessProfileDto include distributAfter date
     */
    public void removeEffectiveStartDateBeforeDistAfterDate(List<AccessProfileDto> accessProfileDtoList) {
        this.removeEffectiveStartDateBeforeDistAfterDate(this.indNames, accessProfileDtoList);
        this.removeEffectiveStartDateBeforeDistAfterDate(this.orgNames, accessProfileDtoList);
        this.removeEffectiveStartDateBeforeDistAfterDate(this.demographicDetails, accessProfileDtoList);
        this.removeEffectiveStartDateBeforeDistAfterDate(this.addresses, accessProfileDtoList);
        this.removeEffectiveStartDateBeforeDistAfterDate(this.telecommunication, accessProfileDtoList);
        this.removeEffectiveStartDateBeforeDistAfterDate(this.electronicAddresses, accessProfileDtoList);
        if(workLocationList!=null) {
            for (Iterator<WorkLocationDto> it = workLocationList.iterator(); it.hasNext();) {
                WorkLocationDto workLocation = it.next();
                if (workLocation.getWorkLocationDetails() != null) {
                    for (WorkLocationDetailsDto details : workLocation.getWorkLocationDetails()) {
                        // https://jira.vic.cgi.com/browse/PLR-2135
                        details.setDataOwnerCode(workLocation.getDataOwnerCode());
                    }
                    this.removeEffectiveStartDateBeforeDistAfterDate(workLocation.getWorkLocationDetails(), accessProfileDtoList);
                }
                // If there are no Details, do not distribute the Work Location.
                if (CollectionUtils.isEmpty(workLocation.getWorkLocationDetails())) {
                    it.remove();
                    continue;
                }
                this.removeEffectiveStartDateBeforeDistAfterDate(workLocation.getAddresses(), accessProfileDtoList);
                this.removeEffectiveStartDateBeforeDistAfterDate(workLocation.getTelecommunications(), accessProfileDtoList);
                this.removeEffectiveStartDateBeforeDistAfterDate(workLocation.getInformationRoutes(), accessProfileDtoList);
                this.removeEffectiveStartDateBeforeDistAfterDate(workLocation.getElectronicAddresses(), accessProfileDtoList);
            }
        }
        this.removeEffectiveStartDateBeforeDistAfterDate(this.statuses, accessProfileDtoList);
        this.removeEffectiveStartDateBeforeDistAfterDate(this.conditions, accessProfileDtoList);
        this.removeEffectiveStartDateBeforeDistAfterDate(this.expertise, accessProfileDtoList);
        this.removeEffectiveStartDateBeforeDistAfterDate(this.credentials, accessProfileDtoList);
        this.removeEffectiveStartDateBeforeDistAfterDate(this.informationRoutes, accessProfileDtoList);
        this.removeEffectiveStartDateBeforeDistAfterDate(this.disciplinaryActions, accessProfileDtoList);
        this.removeEffectiveStartDateBeforeDistAfterDate(this.confidentialityIndicators, accessProfileDtoList);
        this.removeEffectiveStartDateBeforeDistAfterDate(this.providerRelationships, accessProfileDtoList);
        this.removeEffectiveStartDateBeforeDistAfterDate(this.registryUserRelationships, accessProfileDtoList);
        this.removeEffectiveStartDateBeforeDistAfterDate(this.notes, accessProfileDtoList);
    }
    
    /**
     * This method goes through the list of dtos and remove the ones having effective start date
     * before the distribute after date included in accessProfileDtoList.
     * @param dtoList the dto list
     * @param accessProfileDtoList the AccessProfileDto list includes the distribute after date
     */
    private void removeEffectiveStartDateBeforeDistAfterDate(List<? extends AbstractProviderDetail> dtoList, List<AccessProfileDto> accessProfileDtoList) {
        if (dtoList != null) {
            Iterator<? extends AbstractProviderDetail> listIter = dtoList.iterator();
            while (listIter.hasNext()) {
                AbstractProviderDetail apd = listIter.next();
                String dataOwnerCode = apd.getDataOwnerCode();
                if(accessProfileDtoList!=null) {
                    List<AccessProfileDto> foundAPDList = new ArrayList<>();
                    for(AccessProfileDto accessProfileDto : accessProfileDtoList) {
                        if(accessProfileDto.getDataOwnerCode().equalsIgnoreCase(dataOwnerCode) && accessProfileDto.getDistributeAfter()!=null) {
                            foundAPDList.add(accessProfileDto);
                        }
                    }
                    if(!foundAPDList.isEmpty()) {
                        Collections.sort(foundAPDList, new AccessProfileDistributeAfterDateComparator());
                        if (!apd.getEffectiveStartDate().after(foundAPDList.get(foundAPDList.size() - 1).getDistributeAfter())) {
                            listIter.remove();
                        }
                    }
                }
            }
        }        
    }

    /**
     * Creates a copy of this object
     *
     * @param audit - Audit enabled
     * @return a new instance of ProviderDetails
     */
    @SuppressWarnings("AccessingNonPublicFieldOfAnotherObject")
    public ProviderDto copyAndRemoveNonUpdateableData(boolean audit) {

        ProviderDto copy = new ProviderDto();
        copy.pauthId = pauthId;
        copy.typeId = typeId;
        copy.type = type;
        copy.confidential = confidential;
        copy.providerType = providerType;
        copy.providerRoleTypeCode = providerRoleTypeCode;
        copy.unReadableRecords = unReadableRecords;
        copy.primaryChid = primaryChid;

        if (registryIdentifiers != null) {
            copy.registryIdentifiers = new ArrayList<>();
            copy.registryIdentifiers.addAll(registryIdentifiers);
            removeDataHistory(copy.registryIdentifiers);
        }

        if (identifiers != null) {
            copy.identifiers = new ArrayList<>();
            copy.identifiers.addAll(identifiers);
            removeDataHistory(copy.identifiers);
        }

        copy.indNames.addAll(indNames);
        removeDataHistory(copy.indNames);

        copy.orgNames.addAll(orgNames);
        removeDataHistory(copy.orgNames);

        if (demographicDetails != null) {
            copy.demographicDetails = new ArrayList<>();
            copy.demographicDetails.addAll(demographicDetails);
            removeDataHistory(copy.demographicDetails);
        }

        if (addresses != null) {
            copy.addresses = new ArrayList<>();
            copy.addresses.addAll(addresses);
            removeDataHistory(copy.addresses);
        }

        if (telecommunication != null) {
            copy.telecommunication = new ArrayList<>();
            copy.telecommunication.addAll(telecommunication);
            removeDataHistory(copy.telecommunication);
        }

        if (electronicAddresses != null) {
            copy.electronicAddresses = new ArrayList<>();
            copy.electronicAddresses.addAll(electronicAddresses);
            removeDataHistory(copy.electronicAddresses);
        }

        if (workLocationList != null) {
            copy.workLocationList = workLocationList;
            Iterator<WorkLocationDto> wlIter = copy.workLocationList.iterator();
            while (wlIter.hasNext()) {
                WorkLocationDto copyWl = wlIter.next();
                if (!copyWl.isActive()) {
                    wlIter.remove();
                    continue;
                }
                if (copyWl.getWorkLocationDetails() != null) {
                    removeDataHistory(copyWl.getWorkLocationDetails());
                    if (copyWl.getWorkLocationDetails().isEmpty()) {
                        wlIter.remove();
                        continue;
                    }
                }
                if (copyWl.getAddresses() != null) {
                    removeDataHistory(copyWl.getAddresses());
                }
                if (copyWl.getElectronicAddresses() != null) {
                    removeDataHistory(copyWl.getElectronicAddresses());
                }
                if (copyWl.getInformationRoutes() != null) {
                    removeDataHistory(copyWl.getInformationRoutes());
                }
                if (copyWl.getTelecommunications() != null) {
                    removeDataHistory(copyWl.getTelecommunications());
                }
            }
        }

        if (statuses != null) {
            copy.statuses = new ArrayList<>();
            copy.statuses.addAll(statuses);
            removeDataHistory(copy.statuses);
        }

        if (conditions != null) {
            copy.conditions = new ArrayList<>();
            copy.conditions.addAll(conditions);
            removeDataHistory(copy.conditions);
        }

        if (expertise != null) {
            copy.expertise = new ArrayList<>();
            copy.expertise.addAll(expertise);
            removeDataHistory(copy.expertise);
        }

        if (credentials != null) {
            copy.credentials = new ArrayList<>();
            copy.credentials.addAll(credentials);
            removeDataHistory(copy.credentials);
        }

        if (informationRoutes != null) {
            copy.informationRoutes = new ArrayList<>();
            copy.informationRoutes.addAll(informationRoutes);
            removeDataHistory(copy.informationRoutes);
        }

        if (disciplinaryActions != null) {
            copy.disciplinaryActions = new ArrayList<>();
            copy.disciplinaryActions.addAll(disciplinaryActions);
            removeDataHistory(copy.disciplinaryActions);
        }

        if (confidentialityIndicators != null) {
            copy.confidentialityIndicators = new ArrayList<>();
            copy.confidentialityIndicators.addAll(confidentialityIndicators);
            removeDataHistory(copy.confidentialityIndicators);
        }

        if (providerRelationships != null) {
            copy.providerRelationships = new ArrayList<>();
            copy.providerRelationships.addAll(providerRelationships);
            removeDataHistory(copy.providerRelationships);
        }

        if (registryUserRelationships != null) {
            copy.registryUserRelationships = new ArrayList<>();
            copy.registryUserRelationships.addAll(registryUserRelationships);
            removeDataHistory(copy.registryUserRelationships);
        }

        if (notes != null) {
            copy.notes = new ArrayList<>();
            copy.notes.addAll(notes);
            removeDataHistory(copy.notes);
        }

        copy.jurisdiction = jurisdiction;

        return copy;
    }
    
    /**
     * Copy ProviderDto fields from audit view to current or history view.
     * @param viewMode String the value could be either Consts.PROVIDER_DETAILS_CURRENT_VIEW 
     * or Consts.PROVIDER_DETAILS_HISTORY_VIEW
     * @return ProviderDto 
     */
    @SuppressWarnings("AccessingNonPublicFieldOfAnotherObject")
    public ProviderDto copyForCurrentOrHistoryViews(Consts.PROVIDER_DETAILS_VIEW_MODE viewMode) {

        ProviderDto copy = new ProviderDto();
        copy.pauthId = pauthId;
        copy.typeId = typeId;
        copy.type = type;
        copy.confidential = confidential;
        copy.providerType = providerType;
        copy.providerRoleTypeCode = providerRoleTypeCode;
        copy.unReadableRecords = unReadableRecords;
        copy.primaryChid = primaryChid;

        if (registryIdentifiers != null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, registryIdentifiers, copy.registryIdentifiers);
        }

        if (identifiers != null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, identifiers, copy.identifiers);
        }

        if(indNames!=null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, indNames, copy.indNames);
        }
        
        if(orgNames!=null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, orgNames, copy.orgNames);
        }

        if (demographicDetails != null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, demographicDetails, copy.demographicDetails);
        }

        if (addresses != null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, addresses, copy.addresses);
        }

        if (telecommunication != null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, telecommunication, copy.telecommunication);
        }

        if (electronicAddresses != null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, electronicAddresses, copy.electronicAddresses);
        }

        if (workLocationList != null) {
            copy.workLocationList = new ArrayList<>();
            for(WorkLocationDto wld : workLocationList) {
                if(wld.isActive()) {
                    WorkLocationDto copiedWLDto = wld.copyForCurrentOrHistoryView(viewMode);
                    if(copiedWLDto.hasAnyWLDsWLsOrIRs()) {
                        copy.workLocationList.add(copiedWLDto);
                    }
                }
            }
        }

        if (statuses != null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, statuses, copy.statuses);
        }

        if (conditions != null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, conditions, copy.conditions);
        }

        if (expertise != null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, expertise, copy.expertise);
        }

        if (credentials != null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, credentials, copy.credentials);
        }

        if (informationRoutes != null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, informationRoutes, copy.informationRoutes);
        }

        if (disciplinaryActions != null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, disciplinaryActions, copy.disciplinaryActions);
        }

        if (confidentialityIndicators != null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, confidentialityIndicators, copy.confidentialityIndicators);
        }

        if (providerRelationships != null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, providerRelationships, copy.providerRelationships);
        }

        if (registryUserRelationships != null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, registryUserRelationships, copy.registryUserRelationships);
        }

        if (notes != null) {
            DtoCommon.pickAndAddToCurrentOrHistoryView(viewMode, notes, copy.notes);
        }

        copy.jurisdiction = jurisdiction;

        return copy;
    }    
    
    private void removeDataHistory(List<? extends DtoCommon> dtoList) {
        if (dtoList != null) {
            Iterator<? extends DtoCommon> listIter = dtoList.iterator();
            while (listIter.hasNext()) {
                if (!listIter.next().isUpdatable()) {
                    listIter.remove();
                }
            }
        }
    }
    
    /**
     * Converts an instance of this class to its esb counterpart
     *
     * @return
     * @throws IllegalAccessException
     * @throws IllegalArgumentException
     * @throws InvocationTargetException
     * @throws NoSuchMethodException
     */
    public ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails toEsbVersion() throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException {
        ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails esbProvdetails = new ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails();

        esbProvdetails.setPauthId(pauthId);
        esbProvdetails.setTypeId(typeId);
        esbProvdetails.setType(type);
        esbProvdetails.setConfidential(confidential);

        if (ProviderType.ORGANIZATION.equals(providerType)) {
            esbProvdetails.setProviderType(CodeTableCodes.GrsCtPartyType.ORG.getValue());
        } else if (ProviderType.PRACTITIONER.equals(providerType)) {
            esbProvdetails.setProviderType(CodeTableCodes.GrsCtPartyType.IND.getValue());
        }

        esbProvdetails.setRegistryIdentifiers(toEsbList(registryIdentifiers));
        esbProvdetails.setIdentifiers(toEsbList(identifiers));
        esbProvdetails.setIndNames(toEsbList(indNames));
        esbProvdetails.setOrgNames(toEsbList(orgNames));
        esbProvdetails.setDemographicDetails(toEsbList(demographicDetails));
        esbProvdetails.setAddresses(toEsbList(addresses));
        esbProvdetails.setTelecommunication(toEsbList(telecommunication));
        esbProvdetails.setElectronicAddresses(toEsbList(electronicAddresses));

        esbProvdetails.setWorkLocationList(toEsbList(workLocationList));
        esbProvdetails.setStatuses(toEsbList(statuses));
        esbProvdetails.setConditions(toEsbList(conditions));
        esbProvdetails.setExpertise(toEsbList(expertise));
        esbProvdetails.setCredentials(toEsbList(credentials));

        esbProvdetails.setInformationRoutes(toEsbList(informationRoutes));
        esbProvdetails.setDisciplinaryActions(toEsbList(disciplinaryActions));
        esbProvdetails.setConfidentialityIndicators(toEsbList(confidentialityIndicators));
        esbProvdetails.setProviderRelationships(toEsbList(providerRelationships));
        esbProvdetails.setRegistryUserRelationships(toEsbList(registryUserRelationships));
        esbProvdetails.setNotes(toEsbList(notes));

        if (jurisdiction != null) {
            esbProvdetails.setJurisdiction(jurisdiction.toEsbVersion());
        }

        return esbProvdetails;
    }

    /**
     * Create a list of List of matching Esb DTOs
     *
     * @param primaryDtoList Internally used DTO list to be converted to ESB DTO
     * list
     * @return
     * @throws IllegalAccessException
     * @throws IllegalArgumentException
     * @throws InvocationTargetException
     * @throws NoSuchMethodException
     */
    private List toEsbList(List primaryDtoList) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException, NoSuchMethodException {
        List converted = null;

        if (primaryDtoList != null) {
            converted = new ArrayList(primaryDtoList.size());

            if (!primaryDtoList.isEmpty()) {
                Method toEsbVersion = primaryDtoList.get(0).getClass().getDeclaredMethod("toEsbVersion");
                if (toEsbVersion==null){
                    throw new NoSuchMethodException("toEsbVersion");
                }
                for (Object i : primaryDtoList) {
                    converted.add(toEsbVersion.invoke(i));
                }
            }

        }

        return converted;
    }

    public String getPrimaryChid() {
        return primaryChid;
    }

    public void setPrimaryChid(String primaryChid) {
        this.primaryChid = primaryChid;
    }
    
    public WorkLocationDto getWorkLocationDtoByWLID(Long wlId) {
        WorkLocationDto wlDto = null;
        for(WorkLocationDto dto: getWorkLocationList()) {
            if(dto.getId().equals(wlId)) {
                wlDto = dto;
                break;
            }
        }
        return wlDto;
    }
    
    public void sortIndNamesAscending() {
        if(this.indNames!=null && this.indNames.size()>1) {
            Collections.sort(this.indNames, new PersonNameDtoLastFirstNameComparator());
        }
    }
    
   
    /**
     * Limit the list of dtos in each data block according to the value of maxBusinessObjectShown 
     * @param maxBusinessObjectShown the max number of business objects can be shown in each data block based on business keys
     */
    public void limitDtoListBasedOnBK(int maxBusinessObjectShown) {
        
        //business key of following dtos is TypeAndDataOwnerBK
        if (this.registryIdentifiers != null && this.registryIdentifiers.size()>maxBusinessObjectShown) {
            this.registryIdentifiers = AbstractProviderDetail.limitDtoListBasedOnTypeAndDataOwnerBK(this.registryIdentifiers, maxBusinessObjectShown);
        }
        if (this.identifiers != null && this.identifiers.size()>maxBusinessObjectShown) {
            this.identifiers = AbstractProviderDetail.limitDtoListBasedOnTypeAndDataOwnerBK(this.identifiers, maxBusinessObjectShown);
        }
        if (this.indNames != null && this.indNames.size()>maxBusinessObjectShown) {
            this.indNames = AbstractProviderDetail.limitDtoListBasedOnTypeAndDataOwnerBK(this.indNames, maxBusinessObjectShown);
        }
        if (this.orgNames != null && this.orgNames.size()>maxBusinessObjectShown) {
            this.orgNames = AbstractProviderDetail.limitDtoListBasedOnTypeAndDataOwnerBK(this.orgNames, maxBusinessObjectShown);
        }
        if (this.demographicDetails != null && this.demographicDetails.size()>maxBusinessObjectShown) {
            this.demographicDetails = AbstractProviderDetail.limitDtoListBasedOnTypeAndDataOwnerBK(this.demographicDetails, maxBusinessObjectShown);
        }
        if (this.statuses != null && this.statuses.size()>maxBusinessObjectShown) {
            this.statuses = AbstractProviderDetail.limitDtoListBasedOnTypeAndDataOwnerBK(this.statuses, maxBusinessObjectShown);
        }
        if (this.expertise != null && this.expertise.size()>maxBusinessObjectShown) {
            this.expertise = AbstractProviderDetail.limitDtoListBasedOnTypeAndDataOwnerBK(this.expertise, maxBusinessObjectShown);
        }
        if (this.credentials != null && this.credentials.size()>maxBusinessObjectShown) {
            this.credentials = AbstractProviderDetail.limitDtoListBasedOnTypeAndDataOwnerBK(this.credentials, maxBusinessObjectShown);
        }
        if (this.conditions != null && this.conditions.size()>maxBusinessObjectShown) {
            this.conditions = AbstractProviderDetail.limitDtoListBasedOnTypeAndDataOwnerBK(this.conditions, maxBusinessObjectShown);
        }

        //business key of following dtos is LocationBK
        if (this.addresses != null && this.addresses.size()>maxBusinessObjectShown) {
            this.addresses = LocationDto.limitDtoListBasedOnBK(this.addresses, maxBusinessObjectShown);
        }
        if (this.telecommunication != null && this.telecommunication.size()>maxBusinessObjectShown) {
            this.telecommunication = LocationDto.limitDtoListBasedOnBK(this.telecommunication, maxBusinessObjectShown);
        }
        if (this.electronicAddresses != null && this.electronicAddresses.size()>maxBusinessObjectShown) {
            this.electronicAddresses = LocationDto.limitDtoListBasedOnBK(this.electronicAddresses, maxBusinessObjectShown);
        }
        
        //business key of WorkLocationDto is WorkLocationBK
        if (this.workLocationList != null && this.workLocationList.size()>maxBusinessObjectShown) {
            this.workLocationList = WorkLocationDto.limitDtoListBasedOnBK(this.workLocationList, maxBusinessObjectShown);
            for( WorkLocationDto wld : this.workLocationList) {
                if(wld.getAddresses()!=null && wld.getAddresses().size()>maxBusinessObjectShown) {
                    wld.setAddresses(LocationDto.limitDtoListBasedOnBK(wld.getAddresses(), maxBusinessObjectShown));
                }
                if(wld.getTelecommunications()!=null && wld.getTelecommunications().size()>maxBusinessObjectShown) {
                    wld.setTelecommunications(LocationDto.limitDtoListBasedOnBK(wld.getTelecommunications(), maxBusinessObjectShown));
                }
                if(wld.getElectronicAddresses()!=null && wld.getElectronicAddresses().size()>maxBusinessObjectShown) {
                    wld.setElectronicAddresses(LocationDto.limitDtoListBasedOnBK(wld.getElectronicAddresses(), maxBusinessObjectShown));
                }
                if(wld.getInformationRoutes()!=null && wld.getInformationRoutes().size()>maxBusinessObjectShown) {
                    wld.setInformationRoutes(InformationRouteDto.limitDtoListBasedOnBK(wld.getInformationRoutes(), maxBusinessObjectShown));
                }
                if(wld.getWorkLocationDetails()!=null && wld.getWorkLocationDetails().size()>maxBusinessObjectShown) {
                    wld.setWorkLocationDetails(WorkLocationDetailsDto.limitDtoListBasedOnBK(wld.getWorkLocationDetails(), maxBusinessObjectShown));
                }
            }
        }

        //business key of NoteDto is NoteBK
        if (this.notes != null && this.notes.size()>maxBusinessObjectShown) {
            this.notes = NoteDto.limitDtoListBasedOnBK(this.notes, maxBusinessObjectShown);
        }
    
        //business key of DisciplinaryActionDto is DisciplinaryActionBK
        if (this.disciplinaryActions != null && this.disciplinaryActions.size()>maxBusinessObjectShown) {
            this.disciplinaryActions = DisciplinaryActionDto.limitDtoListBasedOnBK(this.disciplinaryActions, maxBusinessObjectShown);
        }
    
        //business key of RegistryUserRelationshipDto is RegistryUserRelationshipBK
        if (this.registryUserRelationships != null && this.registryUserRelationships.size()>maxBusinessObjectShown) {
            this.registryUserRelationships = RegistryUserRelationshipDto.limitDtoListBasedOnBK(this.registryUserRelationships, maxBusinessObjectShown);
        }
    
        //business key of ProviderRelationshipDto is ProviderRelationshipBK
        if (this.providerRelationships != null && this.providerRelationships.size()>maxBusinessObjectShown) {
            this.providerRelationships = ProviderRelationshipDto.limitDtoListBasedOnBK(this.providerRelationships, maxBusinessObjectShown);
        }
        
        //business key of InformationRouteDto is InformationRouteBK
        if (this.informationRoutes != null && this.informationRoutes.size()>maxBusinessObjectShown) {
            this.informationRoutes = InformationRouteDto.limitDtoListBasedOnBK(this.informationRoutes, maxBusinessObjectShown);
        }
        
        //confidential can be only one, so no need to tailor it.
    
    }
    
    public List<AddressDto> getAllActiveAddresses() {
        List<AddressDto> allItems = new ArrayList<>();
        if (addresses != null) {
            allItems.addAll(addresses);
        }
        if (workLocationList != null) {
            for (WorkLocationDto dto : workLocationList) {
                if (dto.getAddresses() != null) {
                    allItems.addAll(dto.getAddresses());
                }
            }
        }
        return getAllActiveItems(allItems);
    }
    
    public List<ElectronicAddressDto> getAllActiveElectronicAddresses() {
        List<ElectronicAddressDto> allItems = new ArrayList<>();
        if (electronicAddresses != null) {
            allItems.addAll(electronicAddresses);
        }
        if (workLocationList != null) {
            for (WorkLocationDto dto : workLocationList) {
                if (dto.getElectronicAddresses() != null) {
                    allItems.addAll(dto.getElectronicAddresses());
                }
            }
        }
        return getAllActiveItems(allItems);
    }
    
    public List<TelecommunicationDto> getAllActiveTelecommunications() {
        List<TelecommunicationDto> allItems = new ArrayList<>();
        if (telecommunication != null) {
            allItems.addAll(telecommunication);
        }
        if (workLocationList != null) {
            for (WorkLocationDto dto : workLocationList) {
                if (dto.getTelecommunications() != null) {
                    allItems.addAll(dto.getTelecommunications());
                }
            }
        }
        return getAllActiveItems(allItems);
    }
    
    private static <T extends DtoCommon> List<T> getAllActiveItems(List<T> items) {
        List<T> activeItems = new ArrayList<>();
        DtoCommon.pickAndAddToCurrentOrHistoryView(Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_CURRENT_VIEW, items, activeItems);
        return activeItems;
    }
    
    /**
     * PLR-2176 Filter out blocks with effective start date in future if distribution profile cannot handle future updates
     */
    public void removeEffectiveStartDateAfterToday() {
        this.removeEffectiveStartDateAfterToday(this.indNames);
        this.removeEffectiveStartDateAfterToday(this.orgNames);
        this.removeEffectiveStartDateAfterToday(this.demographicDetails);
        this.removeEffectiveStartDateAfterToday(this.addresses);
        this.removeEffectiveStartDateAfterToday(this.telecommunication);
        this.removeEffectiveStartDateAfterToday(this.electronicAddresses);
        if(workLocationList!=null) {
            for (Iterator<WorkLocationDto> it = workLocationList.iterator(); it.hasNext();) {
                WorkLocationDto workLocation = it.next();
                if (workLocation.getWorkLocationDetails() != null) {                    
                    this.removeEffectiveStartDateAfterToday(workLocation.getWorkLocationDetails());
                }
                // If there are no Details, do not distribute the Work Location.
                if (CollectionUtils.isEmpty(workLocation.getWorkLocationDetails())) {
                    it.remove();
                    continue;
                }
                this.removeEffectiveStartDateAfterToday(workLocation.getAddresses());
                this.removeEffectiveStartDateAfterToday(workLocation.getTelecommunications());
                this.removeEffectiveStartDateAfterToday(workLocation.getInformationRoutes());
                this.removeEffectiveStartDateAfterToday(workLocation.getElectronicAddresses());
            }
        }
        this.removeEffectiveStartDateAfterToday(this.statuses);
        this.removeEffectiveStartDateAfterToday(this.conditions);
        this.removeEffectiveStartDateAfterToday(this.expertise);
        this.removeEffectiveStartDateAfterToday(this.credentials);
        this.removeEffectiveStartDateAfterToday(this.informationRoutes);
        this.removeEffectiveStartDateAfterToday(this.disciplinaryActions);
        this.removeEffectiveStartDateAfterToday(this.confidentialityIndicators);
        this.removeEffectiveStartDateAfterToday(this.providerRelationships);
        this.removeEffectiveStartDateAfterToday(this.registryUserRelationships);
        this.removeEffectiveStartDateAfterToday(this.notes);
    }
    
    /**
     * PLR-2176 Filter out blocks with effective start date in future if distribution profile cannot handle future updates
     * 
     * @param dtoList the dto list
     */
    private void removeEffectiveStartDateAfterToday(List<? extends AbstractProviderDetail> dtoList) {
        if (dtoList != null) {
            Iterator<? extends AbstractProviderDetail> listIter = dtoList.iterator();
            while (listIter.hasNext()) {
                AbstractProviderDetail apd = listIter.next();                
                if (DateUtils.isFuture(apd.getEffectiveStartDate())) {
                    listIter.remove();
                }
            }
        }
    }

}
