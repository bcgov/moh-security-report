package ca.bc.gov.health.plr.dto.converter;

import ca.bc.gov.health.plr.dto.reguser.DistributionDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtDistribOnOperations;
import ca.bc.gov.health.plr.ejb.entity.GrsCtDistribOwnCodes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtDistribProfileTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtOptionCodes;
import ca.bc.gov.health.plr.ejb.entity.GrsDistributionProfiles;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import java.util.Date;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 * Converter class for switching between GrsDistributionProfiles objects and
 * DistributionDTOs
 *
 * @author sumesh.kariyil
 */
@Stateless
public class DistributionDtoConverter {

    @PersistenceContext(unitName = "PLR-ejbPU")
    protected EntityManager em;
    
    @EJB
    CodesDao codesDao;
    
    @EJB
    DtoConverter dtoConverter;

    /**
     * Converts a DistributionDto into a GrsDistributionProfiles
     *
     * @param dto DistributionDto to convert
     * @return Converted GrsDistributionProfiles
     */
    public GrsDistributionProfiles toEntity(DistributionDto dto) {
        GrsDistributionProfiles distProfile = new GrsDistributionProfiles();

        if (dto.getId() != null) {
            distProfile.setCdpId(dto.getId());
        }
        GrsCtBooleanTypes activeFlag;
        if (dto.isActive()) {
            activeFlag = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES);
        } else {
            activeFlag = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.NO);
        }
        distProfile.setActiveFlag(activeFlag);

        if (dto.getCreatedDate() != null) {
            distProfile.setCreatedDts(dto.getCreatedDate());
        }

        //distProfile.setFrequencyTxt();???
        //distProfile.setDistFileSpecTxt(null);???
        if (dto.getCreateCodeId() != null) {
            distProfile.setDistributeCreatesCode(codesDao.lookup(GrsCtDistribOnOperations.class, dto.getCreateCodeId()));
        }
        if (dto.getOwnCodeId() != null) {
            distProfile.setDistributeOwnCode(codesDao.lookup(GrsCtDistribOwnCodes.class, dto.getOwnCodeId()));
        }
        if (dto.getUpdateCodeId() != null) {
            distProfile.setDistributeUpdatesCode(codesDao.lookup(GrsCtDistribOnOperations.class, dto.getUpdateCodeId()));
        }
        if (dto.getName() != null) {
            distProfile.setDistributionProfileChid(dto.getName());
        }
        if (dto.getProfileTypeId() != null) {
            distProfile.setDptCode(codesDao.lookup(GrsCtDistribProfileTypes.class, dto.getProfileTypeId()));
        }
        if (dto.getProfileTypeId() != null) {
            distProfile.setDptCode(codesDao.lookup(GrsCtDistribProfileTypes.class, dto.getProfileTypeId()));
        }
        GrsCtBooleanTypes transFlag;
        if (dto.isHold()) {
            transFlag = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES);
        } else {
            transFlag = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.NO);
        }
        distProfile.setEditransmissionHoldFlag(transFlag);
        GrsCtBooleanTypes futureUpdates;
        if (dto.isFutureUpdates()) {
            futureUpdates = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES);
        } else {
            futureUpdates = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.NO);
        }
        distProfile.setFutureDatedUpdatesFlag(futureUpdates);

        distProfile.setRuRuId(em.find(GrsRegistryUsers.class, dto.getRuRuId()));
        GrsCtBooleanTypes upperCase;
        if (dto.isUpperCase()) {
            upperCase = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES);
        } else {
            upperCase = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.NO);
        }
        distProfile.setTextCaseCode(upperCase);
        GrsCtBooleanTypes hial;
        if (dto.isIsHial()) {
            hial = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES);
        } else {
            hial = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.NO);
        }
        distProfile.setHial(hial);
        distProfile.setTransmissionAddressTxt(dto.getDestAddress());

        if (dto.getEffectiveEndDate() != null) {
            distProfile.setEffectiveEndDate(dto.getEffectiveEndDate());
        } else {
            distProfile.setEffectiveEndDate(DatabaseConstants.SYSTEM_HIGH_DATE.toDate());
        }
        if (dto.getEffectiveStartDate() != null) {
            distProfile.setEffectiveStartDate(dto.getEffectiveStartDate());
        } else {
            distProfile.setEffectiveStartDate(new Date());
        }
        if (dto.getEndReasonCode() != null) {
            distProfile.setEndReasonCode(codesDao.lookup(GrsCtEndReasonTypes.class, dto.getEndReasonCode()));
        } else if (dto.getEndReasonCodeId() != null) {
            distProfile.setEndReasonCode(codesDao.lookup(GrsCtEndReasonTypes.class, dto.getEndReasonCodeId()));
        }

        if (dto.getGenerationNum() != null) {
            distProfile.setGenerationNum(dto.getGenerationNum());
        }
        distProfile.setInvalidatedDts(dto.getInvalidatedDate());
        if (dto.getOptionCodeId() != null) {
            distProfile.setOptionCode(codesDao.lookup(GrsCtOptionCodes.class, dto.getOptionCodeId()));
        }
        if (dto.getUserChid() != null) {
            distProfile.setUserChid(dto.getUserChid());
        }

        return distProfile;
    }
}
