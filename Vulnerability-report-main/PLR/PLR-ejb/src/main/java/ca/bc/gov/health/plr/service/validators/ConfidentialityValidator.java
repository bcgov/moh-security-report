/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.validators;

import ca.bc.gov.health.plr.assembler.ProviderUtil;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocations;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.util.PropertyUtils;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;

/**
 * Throws a JournalException if the Provider associated with the given
 * record is marked Confidential.
 * @author sumesh.kariyil
 * @param <T>  : the validating entity
 */
@LocalBean
@Stateless
public class ConfidentialityValidator<T> implements EntityValidator<T>{

    @Override
    public void validate(T newRecord) throws EntityValidationException {
        if (PropertyUtils.doesPropertyExist(newRecord, "pauthPauthId")) {
            PrsProviders provider = (PrsProviders) PropertyUtils.invokeGetter(newRecord, "pauthPauthId");
            if (provider == null) {
                PrsWorkLocations workLocations = (PrsWorkLocations) PropertyUtils.invokeGetter(newRecord, "wlWlId");
                provider = workLocations.getPauthPauthId();
            }            
            if (ProviderUtil.isConfidential(provider)) {
                String msg = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_MODIFY_CONFIDENTIAL);
                throw new EntityValidationException(msg);
            }
        }
    }
}
