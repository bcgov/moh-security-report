package ca.bc.gov.health.plr.rule.provider;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.persistence.CodesDao;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.validation.ConstraintValidatorContext;

/**
 *
 * @author jonathan.wiebe
 */
public abstract class AcceptableCodeValidator {

    private CodesDao codesDao;

    // Code entity to validate, comes in form annotation
    protected Class<?> clazz = null;
    // Code that is being validated, comes in form annotation
    protected String code = "Unknown";    

    public <T> boolean isValidTemplate(T value, ConstraintValidatorContext context) {
        if (value == null) {
            return true;
        }

        boolean isValid = true;

        CodesDao singleUseCodesDao = getCodesDao();

        if (value instanceof Long) {
            isValid = singleUseCodesDao.codeExists(clazz, (Long) value);
        } else if (value instanceof String) {
            String valueToProcess = (String) value;
            if (valueToProcess.isEmpty()) {
                // Null and empty should have been evaluated by the corresponding annotations.
                return true;
            }
            isValid = singleUseCodesDao.codeExists(clazz, (String) value);
        } else {
            throw new IllegalArgumentException(this.getClass() + " does not handle type " + value);
        }

        if (!isValid) {
            createErrorMessage(context);
        }

        return isValid;
    }

    /**
     * Create the error message to return
     *
     * @param context the error message container
     */
    private void createErrorMessage(ConstraintValidatorContext context) {
        context.disableDefaultConstraintViolation();
        String msg = context.getDefaultConstraintMessageTemplate() + " " + code;
        context.buildConstraintViolationWithTemplate(msg).addConstraintViolation();
    }

    CodesDao getCodesDao() {
        if (codesDao == null) {
            try {
                codesDao = (CodesDao) InitialContext.doLookup(Consts.JNDILOOKUP_CODESDAO);
            } catch (NamingException ex) {
                throw new IllegalStateException("Look-up for '" + Consts.JNDILOOKUP_CODESDAO + "' failed. Cannot continue.", ex);
            }
        }
        return codesDao;
    }
}
