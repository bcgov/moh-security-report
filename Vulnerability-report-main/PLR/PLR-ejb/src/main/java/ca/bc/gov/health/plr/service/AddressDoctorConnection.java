/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.constants.ProcessMode;
import ca.bc.gov.health.plr.persistence.ConfigurationDao;
import ca.bc.gov.health.plr.service.provider.AddressSupportService;
import ca.bc.gov.health.plr.soap.addressdoctor.AddressValidation;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.Address;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.ArrayOfAddress;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.ArrayOfString;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.Parameters;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.Response;
import java.net.URL;
import java.security.KeyStore;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;

/**
 *
 * @author jonathan.wiebe
 */
@ApplicationScoped
public class AddressDoctorConnection {

    private static final String CLASSNAME = AddressDoctorConnectionService.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    @Inject
    private AddressSupportService addressSupportService;

    @Inject
    private ConfigurationDao configurationDao;

    @Inject
    private JNDIResourceLoader prod;

    private AddressValidation soapService = null;

    /**
     * @return the soapService
     */
    private AddressValidation getSoapService() {
        return soapService;
    }

    /**
     * @param soapService the soapService to set
     */
    public void setSoapService(AddressValidation soapService) {
        this.soapService = soapService;
    }

    /**
     * Gets or alternatively resets the connection
     *
     * @param reset true if you want to force reset
     * @return connection class
     */
    public AddressValidation getConnection(boolean reset) {

        // if soapService is null we are either just starting or PLr has
        // set it to null to force another connection.  reset also forces
        // another connection
        if (soapService == null || reset == true) {
            soapService = null;
            try {

                // Start by loading params from JNDI
                String trustStoreLocation = prod.appResource().get(Consts.ESB_CLIENT_TRUSTSTORE);
                String trustStorePassword = prod.appResource().get(Consts.ESB_CLIENT_TRUSTSTORE_PASSWORD);
                String keyStoreLocation = prod.appResource().get(Consts.ESB_CLIENT_KEYSTORE);
                String keyStorePassword = prod.appResource().get(Consts.ESB_CLIENT_KEYSTORE_PASSWORD);
                String keyPassword = prod.appResource().get(Consts.ESB_CLIENT_KEY_PASSWORD);

                // Load Truststore
                KeyStore trustStore = KeyStore.getInstance("JKS");
                trustStore.load(getClass().getResourceAsStream(trustStoreLocation), trustStorePassword.toCharArray());
                TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance("PKIX", "SunJSSE");
                trustManagerFactory.init(trustStore);

                // Load Keystore
                KeyStore keyStore = KeyStore.getInstance("JKS");
                keyStore.load(getClass().getResourceAsStream(keyStoreLocation), keyStorePassword.toCharArray());
                KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance("SunX509", "SunJSSE");
                keyManagerFactory.init(keyStore, keyPassword.toCharArray());

                // Setup SSLContext
                SSLContext sslContext = SSLContext.getInstance("SSL");
                sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);
                HttpsURLConnection.setDefaultSSLSocketFactory(sslContext.getSocketFactory());

                // Create SOAP service
                soapService = new AddressValidation(new URL(prod.appResource().get(Consts.ESB_ADDRESS_VALIDATION_URI) + "?wsdl"));

                // And send a test message to make sure ... sometimes the above code worked but the connection
                // was still not being made
                // Parameters
                Parameters parameters = new Parameters();

                // ArrayOfAddress object to store input addresses.
                ArrayOfAddress inputAddresses = new ArrayOfAddress();

                setupTestMessage(parameters, inputAddresses);

                // Send to the AddressValidationService service and receive the response
                Response response = soapService.getAddressValidationSoap().process(null, null, parameters, inputAddresses, null);

            } catch (Exception ex) {
                LOG.log(Level.SEVERE, "init Failed to initialize address validation:", ex);
                soapService = null;
            }
        }
        return soapService;
    }

    /**
     * A test message is initialized
     *
     * @param parameters test msg params
     * @param inputAddresses test msg input addresses
     */
    private void setupTestMessage(Parameters parameters, ArrayOfAddress inputAddresses) {
        parameters.setProcessMode(ProcessMode.FASTCOMPLETION.name());

        // Create Address object
        Address address = new Address();

        // Add country
        String countryInput = addressSupportService.getDefaultCountry().getCtlDescTxt();
        ArrayOfString country = new ArrayOfString();
        country.getString().add(countryInput);
        address.setCountry(country);

        // Add single line input to the AddressComplete field
        address.setAddressComplete("test address");

        // Add Address to ArrayOfAddress object
        inputAddresses.getAddress().add(address);
    }

    /**
     * Calls the getConnection in test mode, doesn't force the reset
     *
     * @return true if connection is re-established
     */
    public Boolean testAddressDoctorAvailability() {
        try {
            if (getConnection(false) == null) {
                LOG.info("Testing address doctor availability failed.");
                return false;
            }
        } catch (Exception ex) {
            LOG.info("Testing address doctor availability failed.");
            return false;
        }
        LOG.info("Testing address doctor availability passed.");
        return true;
    }

}
