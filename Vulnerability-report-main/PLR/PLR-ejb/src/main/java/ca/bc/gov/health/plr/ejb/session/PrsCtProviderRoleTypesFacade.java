/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.ejb.session;

import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import javax.annotation.PostConstruct;
import javax.ejb.Lock;
import javax.ejb.LockType;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author adebiyi.kuseju
 */
@Startup
@Singleton
@Lock(LockType.READ)
public class PrsCtProviderRoleTypesFacade extends AbstractFacade<PrsCtProviderRoleTypes> {
    
    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;
    
    private Map<String, PrsCtProviderRoleTypes> codeNameMap = new ConcurrentHashMap<>();
    private Map<Long, PrsCtProviderRoleTypes> idMap = new ConcurrentHashMap<>();

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public PrsCtProviderRoleTypesFacade() {
        super(PrsCtProviderRoleTypes.class);
    }

    @PostConstruct
    public void init() {
        List<PrsCtProviderRoleTypes> list = super.findAll();

        for (PrsCtProviderRoleTypes st : list) {
            codeNameMap.put(st.getCtlNameCode(), st);
            idMap.put(st.getCtlId(), st);
        }

    }

    @Lock(LockType.WRITE)
    public void reInit() {
        codeNameMap.clear();
        idMap.clear();
        init();
    }
    
    @Override
    public List<PrsCtProviderRoleTypes> findAll() {
        List<PrsCtProviderRoleTypes> values = new ArrayList<>();
        values.addAll(codeNameMap.values());
        
        return values;
    }
    
    public PrsCtProviderRoleTypes findbyProviderRoleType(String prsCtProviderRoleType) {
        return codeNameMap.get(prsCtProviderRoleType);
    }
    
    @Override
    public PrsCtProviderRoleTypes find(Object id) {
        return idMap.get(id);
    }
   
}
