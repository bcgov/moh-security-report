/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.provider.security;

import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

/**
 *
 * @author adebiyi.kuseju
 */
public class UserContext implements Serializable {

    private static final long serialVersionUID = 100L;

    private boolean providerAdditionAllowed;
    private Set<String> writableProviderTypes = new HashSet<>();
    private Set<String> readableProviderTypes = new HashSet<>();

    /*
     * Holds the userToPermissionsMap for all logged in users.
     * Permission is mapped based on table name to a map of record type to a set of LeafPermission,
     * which contains the read and write flags for the data owner and the provider (HPT_COde) for the mapped
     * table name (data object)
     */
    private Map<String, Map<String, Map<String, Map<String, LeafPermission>>>> permissions = new ConcurrentHashMap<>();

    public boolean isProviderAdditionAllowed() {
        return providerAdditionAllowed;
    }

    public void setProviderAdditionAllowed(boolean providerAdditionAllowed) {
        this.providerAdditionAllowed = providerAdditionAllowed;
    }

    public Map<String, Map<String, Map<String, Map<String, LeafPermission>>>> getPermissions() {
        return permissions;
    }

    public void setPermissions(Map<String, Map<String, Map<String, Map<String, LeafPermission>>>> permissions) {
        this.permissions = permissions;
    }

    public void addProviderType(String providerType, ProviderTypeAccess providerTyper) {
        if (ProviderTypeAccess.WRITABLE.equals(providerTyper)) {
            writableProviderTypes.add(providerType);
        } else if (ProviderTypeAccess.READBLE.equals(providerTyper)) {
            readableProviderTypes.add(providerType);
        }
    }

    public Set<String> getWritableProviderTypes() {
        Set<String> copy = new HashSet<>();
        copy.addAll(writableProviderTypes);
        return copy;
    }

    public Set<String> getReadableProviderTypes() {
        Set<String> copy = new HashSet<>();
        copy.addAll(readableProviderTypes);
        return copy;
    }

    public Set<String> getAllowedProviderTypes() {
        Set<String> copy = new HashSet<>();
        copy.addAll(writableProviderTypes);
        copy.addAll(readableProviderTypes);
        return copy;
    }

    public boolean hasPermissionToAddProviderOfRoleType(PrsCtProviderRoleTypes providerType) {
        return writableProviderTypes.contains(providerType.getCtlNameCode());
    }

    public void setWritableProviderTypes(Set<String> writableProviderTypes) {
        this.writableProviderTypes = writableProviderTypes;
    }

    public void setReadableProviderTypes(Set<String> readableProviderTypes) {
        this.readableProviderTypes = readableProviderTypes;
    }
    
    public boolean hasPermissionToSearchProviderOfRoleType(PrsCtProviderRoleTypes providerType) {
        return readableProviderTypes.contains(providerType.getCtlNameCode());
    }

}
