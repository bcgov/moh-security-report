package ca.bc.gov.health.plr.service.registry.user;

import ca.bc.gov.health.plr.dto.converter.AccessProfileDtoConverter;
import ca.bc.gov.health.plr.service.provider.*;
import ca.bc.gov.health.plr.dto.reguser.AccessProfileDto;
import ca.bc.gov.health.plr.dto.reguser.RegistryUserDetailsConverter;
import ca.bc.gov.health.plr.ejb.entity.GrsAccessProfiles;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.service.provider.security.AuthorizationService;
import ca.bc.gov.health.plr.service.validators.EffectiveDatesValidator;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.apache.commons.lang3.Validate;

/**
 * Service class for persisting Distribution records
 *
 * @author sumesh.kariyil
 */
@Stateless
public class MaintainAccessProfileService {

    /**
     * Entity Manager for persistence
     */
    @PersistenceContext(unitName = "PLR-ejbPU")
    protected EntityManager em;

    @EJB
    private JournalService<GrsAccessProfiles> journalService;
    /**
     * Converter object for going between DTOs and Entities
     */
    @EJB
    private AccessProfileDtoConverter profileDtoConverter;
   
    @EJB
    private AuthorizationService authorizationService;
    
    @EJB
    private RegistryUserDetailsConverter registryUserDetailsConverter;

    @EJB
    private EffectiveDatesValidator effectiveDatesValidator;
    
    /**
     * Query a fresh complete list of distributions related to a specific
     * registry user.
     * 
     * @param accessProfileDto
     * @return a list of fresh note transfer objects
     */
    public List<AccessProfileDto> refreshAllAccessProfiles(AccessProfileDto accessProfileDto) {
        Validate.notNull(accessProfileDto.getRuRuId());        
        GrsRegistryUsers regUser = em.find(GrsRegistryUsers.class, accessProfileDto.getRuRuId());
        return registryUserDetailsConverter.getAccessProfiles(regUser);        
    }

    /**
     * Persists an GrsAccessProfiles to the database
     *
     * @param accessProfileDto accessProfileDto
     * @return AccessProfileDto with values refreshed from the database
     * @throws ca.bc.gov.health.plr.service.provider.DuplicateRecordException
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    public AccessProfileDto save(AccessProfileDto accessProfileDto) throws DuplicateRecordException, EntityValidationException {
        GrsAccessProfiles newRecord = profileDtoConverter.toEntity(accessProfileDto);        
        effectiveDatesValidator.validate(newRecord.getEffectiveStartDate(), newRecord.getEffectiveEndDate());
        newRecord = journalService.journal(newRecord);
        // Clear the permissions cache for the registry user
        authorizationService.removeUserState(newRecord.getRuRuId());
        
        return registryUserDetailsConverter.buildAccessProfile(newRecord);
    }

    /**
     * Bulids a dto from a record in the database based on primary key (ID)
     *
     * @param toRefresh - a dto with an ID
     * @return - dto built from database record or null
     */
    public AccessProfileDto refresh(AccessProfileDto toRefresh) {
        GrsAccessProfiles found = em.find(GrsAccessProfiles.class, toRefresh.getId());
        AccessProfileDto toSendBack = registryUserDetailsConverter.buildAccessProfile(found);
        return toSendBack;
    }

}
