/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.util;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.EsbMessage;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.ejb.entity.util.EntityUtils;
import ca.bc.gov.health.plr.persistence.ConfigurationDao;
import ca.bc.gov.health.plr.service.JNDIResourceLoader;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.DependsOn;
import javax.ejb.EJB;
import javax.ejb.Lock;
import javax.ejb.LockType;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.naming.NamingException;

/**
 *
 * @author adebiyi.kuseju
 */
@Singleton
@Startup
@DependsOn("JNDIResourceLoader")
@Lock(LockType.READ)
public class EsbMessageUtil {

    /**
     * Strips out any data blocks from this object which are inactive.
     *
     * @param item Object - some DTO instance
     */
    public void filterInactiveItems(Object item) {
        if (item != null) {
            Field[] fields = item.getClass().getDeclaredFields();
            for (Field field : fields) {
                if (List.class.isAssignableFrom(field.getType())) {
                    Object property = PropertyUtils.invokeGetter(item, field.getName());
                    filterInactiveItemsFromList((List) property);
                }
            }
        } else {
            Logger.getLogger(EsbMessageUtil.class.getName()).log(Level.INFO, "Null item ...");
        }
    }

    /**
     * Strips out any objects from this list which are inactive. Note: Original
     * list is modified.
     *
     * @param items List - some DTO instances
     */
    public void filterInactiveItemsFromList(List items) {
        List outList = new ArrayList();
        for (Object item : items) {
            if (!(item instanceof String)) {
                try {
                    boolean activeFlag = true;
                    String endReasonCode = null;
                    Date invalidatedDate = null;
                    Date effectiveStartDate = null;
                    Date effectiveEndDate = null;
                    try {
                        activeFlag = (Boolean) PropertyUtils.invokeGetter(item, "active");
                    } catch (Exception e) {
                        //Use default of true
                    }
                    try {
                        endReasonCode = (String) PropertyUtils.invokeGetter(item, "endReasonCode");
                    } catch (Exception e) {
                        //Use default of NULL
                    }
                    try {
                        invalidatedDate = (Date) PropertyUtils.invokeGetter(item, "invalidatedDate");
                    } catch (Exception e) {
                        //Use default of NULL
                    }
                    try {
                        effectiveStartDate = (Date) PropertyUtils.invokeGetter(item, "effectiveStartDate");
                    } catch (Exception e) {
                        //Use default of NULL
                    }
                    try {
                        effectiveEndDate = (Date) PropertyUtils.invokeGetter(item, "effectiveEndDate");
                    } catch (Exception e) {
                        //Use default of NULL
                    }
                    if (EntityUtils.isActiveForResponseOrDistribution(activeFlag, endReasonCode, invalidatedDate, effectiveStartDate, effectiveEndDate)) {
                        filterInactiveItems(item);
                        outList.add(item);
                    }
                } catch (Exception e) {
                    filterInactiveItems(item);
                    outList.add(item);
                }
            } else {
                outList.add(item);
            }
        }
        items.clear();
        items.addAll(outList);
    }

    @EJB
    private JNDIResourceLoader prod;

    @EJB
    private ConfigurationDao configurationDao;

    /**
     * Populates the metadata info for an EsbMessage instance
     *
     * @param esbMessage
     * @return
     */
    public EsbMessage populateMetadata(EsbMessage esbMessage) {
        try {

            esbMessage.setMessageCreationTime(new Date());
            esbMessage.setVersion(prod.appResource().get(Consts.TARGET_ENVIRONMENT));

            esbMessage.setTargetEnvironment(prod.appResource().get(Consts.TARGET_ENVIRONMENT));
            esbMessage.setTargetOrganizationChid(configurationDao.getTargetOrgChid());
            esbMessage.setSourceOrganizationChid(configurationDao.getSourceOrgChid());

            esbMessage.setSourceNetworkAddressChid(configurationDao.getSourceNetworkAddressChid());
            esbMessage.setTargetNetworkAddressChid(configurationDao.getTargetNetworkAddressChid());

            esbMessage.setRegistryUserOrgId(configurationDao.getRegAdminOrgChid());

        } catch (NamingException ex) {
            Logger.getLogger(EsbMessageUtil.class.getName()).log(Level.SEVERE, null, ex);
            throw new IllegalStateException(ex);
        }

        return esbMessage;
    }
    
    /**
     * Populate the meta data for distribution message.
     * @param esbMessage
     * @return 
     */
    public EsbMessage populateMetadataForDistribution(EsbMessage esbMessage) {
        this.populateMetadata(esbMessage);
        try {
            esbMessage.setSourceJurisdiction(prod.appResource().get(Consts.DISTRIBUTION_SOURCE_JURISDICTION));
            esbMessage.setSourceUserId(prod.appResource().get(Consts.DISTRIBUTION_SOURCE_USER_ID));
            esbMessage.setResponsiblePersonUserId(prod.appResource().get(Consts.DISTRIBUTION_RESPONSIBLE_PERSON_USER_ID));
            esbMessage.setTargetFacilityId(prod.appResource().get(Consts.DISTRIBUTION_TARGETFACILITY));
            esbMessage.setTargetServer(prod.appResource().get(Consts.DISTRIBUTION_TARGETSERVER));
            esbMessage.setSourceFacilityId(prod.appResource().get(Consts.DISTRIBUTION_SOURCEFACILITY));
            esbMessage.setSourceServer(prod.appResource().get(Consts.DISTRIBUTION_SOURCESERVER));
        } catch (NamingException ex) {
            Logger.getLogger(EsbMessageUtil.class.getName()).log(Level.SEVERE, null, ex);
            throw new IllegalStateException(ex);
        }
        return esbMessage;
    }

    public void copyHeaderInfo(EsbMessage in, EsbMessage out) {
        out.setTargetFacilityId(in.getSourceFacilityId());
        out.setSourceFacilityId(in.getTargetFacilityId());
        out.setSourceServer(in.getTargetServer());
        out.setTargetServer(in.getSourceServer());
    }

    public Acknowledgment populateAckMetadata(Acknowledgment ack, EsbMessage esbMessage) {
        ack.setTargetMessageExtension(esbMessage.getUniqueMessageId());
        return ack;
    }

    public void populateMetadataForAcks(Collection<Acknowledgment> acks, EsbMessage esbMessage) {

        for (Acknowledgment ack : acks) {
            populateAckMetadata(ack, esbMessage);
        }

    }
    
}
