package ca.bc.gov.health.plr.dto.dps;

import ca.bc.gov.health.plr.ejb.entity.GrsAccessProfGrpDescs;
import ca.bc.gov.health.plr.ejb.entity.GrsAccessProfileGroups;
import ca.bc.gov.health.plr.ejb.entity.util.EntityUtils;
import java.util.ArrayList;
import java.util.List;

/**
 *
 * @author sumesh.kariyil
 */
public class AccessProfileGroupDtoConverter {

    
    /**
     *
     * @param accessProfileGroups
     * @return
     */
    public static List<AccessProfileGroupDto> toDtos(List<GrsAccessProfileGroups> accessProfileGroups){
        List<AccessProfileGroupDto> groupDtos = new ArrayList<>();
        if(accessProfileGroups != null && !accessProfileGroups.isEmpty()){
            for(GrsAccessProfileGroups accessProfileGroup : accessProfileGroups){
                groupDtos.add(toDto(accessProfileGroup));
            }
        }
        return groupDtos;
    }
    
    /**
     *
     * @param accessProfileGroup
     * @return
     */
    public static AccessProfileGroupDto toDto(GrsAccessProfileGroups accessProfileGroup){
        AccessProfileGroupDto dto = new AccessProfileGroupDto();
        dto.setGroupChid(accessProfileGroup.getAccessProfileGroupChid());
        dto.setActive(EntityUtils.isActive(accessProfileGroup.getActiveFlag()));
        dto.setId(accessProfileGroup.getApgId());
        dto.setCreatedDate(accessProfileGroup.getCreatedDts());
        dto.setInvalidatedDate(accessProfileGroup.getInvalidatedDts());
        if(accessProfileGroup.getJurisdictionCode() != null){
            dto.setJurisdictionCodeId(accessProfileGroup.getJurisdictionCode().getCtlId());
            dto.setJurisdictionCode(accessProfileGroup.getJurisdictionCode().getCtlNameCode());
            dto.setJurisdictionDesc(accessProfileGroup.getJurisdictionCode().getCtlDescTxt());
        }
        dto.setRuRuId(accessProfileGroup.getRuRuId().getRuId());
        dto.setRegUserChid(accessProfileGroup.getRuRuId().getPartyPartyId().getRegistryUserOrgChid());
        dto.setUserChid(accessProfileGroup.getUserChid());
        dto.setDescs(convertToDescs(accessProfileGroup.getGrsAccessProfGrpDescsList()));
        dto.setActiveGroupDesc(setActiveGroupDesc(dto.getDescs()));
        return dto;
    }

    
    /**
     *
     * @param accessProfGrpDescs
     * @return
     */
    public static List<AccessProfileGroupDescDto> convertToDescs(List<GrsAccessProfGrpDescs> accessProfGrpDescs){
        List<AccessProfileGroupDescDto> descDtos = new ArrayList<>();
        if(accessProfGrpDescs != null && !accessProfGrpDescs.isEmpty()){
            for(GrsAccessProfGrpDescs grsAccessProfGrpDesc : accessProfGrpDescs){
                descDtos.add(toDto(grsAccessProfGrpDesc));
            }
        }
        return descDtos;
    }
    
    /**
     *
     * @param accessProfGrpDesc
     * @return
     */
    public static AccessProfileGroupDescDto toDto(GrsAccessProfGrpDescs accessProfGrpDesc){
        AccessProfileGroupDescDto descDto = new AccessProfileGroupDescDto();
        descDto.setActive(EntityUtils.isActive(accessProfGrpDesc.getActiveFlag()));
        String endReasonCode = accessProfGrpDesc.getEndReasonCode() == null ? null : accessProfGrpDesc.getEndReasonCode().getCtlNameCode();
        descDto.setEndReasonCode(endReasonCode);
        descDto.setInvalidatedDate(accessProfGrpDesc.getInvalidatedDts());
        descDto.setCreatedDate(accessProfGrpDesc.getCreatedDts());
        descDto.setGenerationNum(accessProfGrpDesc.getGenerationNum());
        descDto.setCreatedDate(accessProfGrpDesc.getCreatedDts());
        descDto.setEffectiveEndDate(accessProfGrpDesc.getEffectiveEndDate());
        descDto.setEffectiveStartDate(accessProfGrpDesc.getEffectiveStartDate());
        descDto.setId(accessProfGrpDesc.getApgdId());        
        descDto.setApgApgId(accessProfGrpDesc.getApgApgId().getApgId());
        descDto.setDescription(accessProfGrpDesc.getProfileDescriptionTxt());
        descDto.setUserChid(accessProfGrpDesc.getUserChid());
        descDto.setDisplayActive(EntityUtils.isActive(descDto.isActive(), endReasonCode, 
                descDto.getInvalidatedDate(), descDto.getEffectiveStartDate(), descDto.getEffectiveEndDate()));        
        descDto.setUpdatable(EntityUtils.isUpdatable(descDto.isActive(), endReasonCode, descDto.getInvalidatedDate()));        
        return descDto;
    }

    private static AccessProfileGroupDescDto setActiveGroupDesc(List<AccessProfileGroupDescDto> descs) {
        AccessProfileGroupDescDto activeDesc = null;
        if(descs != null && !descs.isEmpty()){
            for(AccessProfileGroupDescDto descDto : descs){
                if(descDto.isActive()){
                    activeDesc = descDto;
                    break;
                }
            }
        }
        return activeDesc;
    }
}
