/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.dto.converter;

import ca.bc.gov.health.plr.dto.provider.ProviderRelationshipDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtDataOwnerCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtRelationshipTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviderRelationships;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.persistence.ProviderDao;
import ca.bc.gov.health.plr.service.provider.MatchHistory;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 * Converter class for switching between PrsConfidentialityIndicator objects and
 * ConfidentialityIndicator DTOs
 *
 * @author greg.perkins
 */
@Stateless
public class ProviderRelationshipDtoConverter {

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;
    @EJB
    private CodesDao codesDao;
    @EJB
    private ProviderDao providerDao;
    @EJB
    DtoConverter dtoConverter;
    /**
     * Converts a ProviderRelationship into a PrsProviderRelationships.
     * 
     * The specified identifier must *uniquely* identify a Provider or else an
     * unchecked exception will be thrown, so validate the DTO *before* calling
     * the converter.
     *
     * @param dto ProviderRelationship to convert
     * @return converted PrsProviderRelationships
     */
    public PrsProviderRelationships toEntity(ProviderRelationshipDto dto) {
        PrsProviderRelationships entity = new PrsProviderRelationships();

        entity.setPauthPauthId(em.find(PrsProviders.class, dto.getPauthId()));
        if (dto.getId() != null) {
            entity.setReprId(dto.getId());
        }
        if (dto.getIdentifier() != null && (dto.getIdentifierTypeId() != null || dto.getIdentifierTypeCode() != null)) {
            List<PrsProviders> providers;
            if(dto.getIdentifierTypeId() != null){
                providers = providerDao.searchByIdentifer(dto.getIdentifierTypeId(), dto.getIdentifier(), MatchHistory.NO);
            } else {
                providers = providerDao.searchByIdentifer(dto.getIdentifierTypeCode(), dto.getIdentifier(), MatchHistory.NO);
            }
            if (providers.size() != 1) {
                // This is a precondition of using the DTO converter.
                throw new IllegalStateException("Identifier does not uniquely identify Provider. Cannot create Relationship entity.");
            }
            entity.setPauthPautinRelnWithId(providers.get(0));
        }
        if (dto.getRelationshipTypeId() != null) {
            entity.setProvRelationshipTypeCode(codesDao.lookup(PrsCtRelationshipTypes.class, dto.getRelationshipTypeId()));
        } else if (dto.getRelationshipTypeCode() != null) {
            entity.setProvRelationshipTypeCode(codesDao.lookup(PrsCtRelationshipTypes.class, dto.getRelationshipTypeCode()));
        }
        if (dto.getTargetRelationshipTypeId() != null) {
            entity.setTargetProvRelnTypeCode(codesDao.lookup(PrsCtRelationshipTypes.class, dto.getTargetRelationshipTypeId()));
        } else  if (dto.getTargetRelationshipTypeCode() != null) {
            entity.setTargetProvRelnTypeCode(codesDao.lookup(PrsCtRelationshipTypes.class, dto.getTargetRelationshipTypeCode()));
        }
        if (dto.getDataOwnerCode() != null) {
            PrsCtDataOwnerCodes dataOwnerCode = codesDao.lookup(PrsCtDataOwnerCodes.class, dto.getDataOwnerCode());
            entity.setDataOwnerCode(dataOwnerCode);
        }
        
        dtoConverter.copyCommonProperties(dto, entity);

        return entity;
    }

}
