package ca.bc.gov.health.plr.dto.converter;

import ca.bc.gov.health.plr.dto.provider.comparator.LocationDisplaySortingComparator;
import ca.bc.gov.health.plr.dto.provider.comparator.ProviderDetailDisplaySortingComparator;
import ca.bc.gov.health.plr.dto.provider.comparator.RegistryIdentifierDisplaySortingComparator;
import ca.bc.gov.health.plr.assembler.ProviderUtil;
import ca.bc.gov.health.plr.dto.AddProviderDto;
import ca.bc.gov.health.plr.dto.provider.*;
import ca.bc.gov.health.plr.dto.provider.comparator.StatusDisplaySortingComparator;
import ca.bc.gov.health.plr.ejb.entity.*;
import ca.bc.gov.health.plr.ejb.entity.util.EntityUtils;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import ca.bc.gov.health.plr.service.PlrUserRoleService;
import ca.bc.gov.health.plr.service.validators.UserChidGenerator;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import org.apache.commons.lang3.StringUtils;
import org.joda.time.LocalDate;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@Stateless
public class ProviderDtoConverter {

    private final static String UNKNOWN_DETAILS = "Unknown Details";
    private final static String INACTIVE_LOCATION = "Inactive Location";

    @PersistenceContext(unitName = "PLR-ejbPU")
    EntityManager em;

    @EJB
    CodesDao codesDao;

    @EJB
    UserChidGenerator chidGenerator;

    @Inject
    private PlrUserRoleService plrUserRoleService;

    /**
     * Assemble Entity from transfer object
     *
     * @param dto - the transfer object to convert
     * @return - the entity representation of the transfer object
     */
    public PrsProviders toEntity(AddProviderDto dto) {
        PrsProviders prsProviders = new PrsProviders();

        mapPartyType(dto.getPartyType(), prsProviders);
        if (dto.getJurisdiction() != null) {
            prsProviders.setJurisdictionCode(codesDao.lookup(PrsCtJurisdictions.class, dto.getJurisdiction()));
        } else if (dto.getJurisdictionNameCode() != null && dto.getJurisdictionNameCode().getJurisdicationNameCode() != null) {
            prsProviders.setJurisdictionCode(codesDao.lookup(PrsCtJurisdictions.class, dto.getJurisdictionNameCode().getJurisdicationNameCode()));
        }
        PrsCtProviderRoleTypes providerRoleType = null;
        if (dto.getProviderTypeId() != null) {
            providerRoleType = codesDao.lookup(PrsCtProviderRoleTypes.class, dto.getProviderTypeId());
        } else if (dto.getProviderRoleTypeCode() != null) {
            providerRoleType = codesDao.lookup(PrsCtProviderRoleTypes.class, dto.getProviderRoleTypeCode());
        }
        prsProviders.setHptCode(providerRoleType);
        prsProviders.setUserChid(chidGenerator.find());
        return prsProviders;
    }

    public PrsProviders toEntity(ProviderDto dto) {
        PrsProviders prsProviders;

        if (dto.getPauthId() != null) {
            prsProviders = em.find(PrsProviders.class, dto.getPauthId());
            return prsProviders;
        } else {
            prsProviders = new PrsProviders();
        }

        mapPartyType(dto.getPartyType(), prsProviders);
        if (dto.getJurisdiction() != null && dto.getJurisdiction().getJurisdicationNameCode() != null) {
            prsProviders.setJurisdictionCode(codesDao.lookup(PrsCtJurisdictions.class, dto.getJurisdiction().getJurisdicationNameCode()));
        }
        PrsCtProviderRoleTypes providerRoleType = null;
        if (dto.getTypeId() != null) {
            providerRoleType = codesDao.lookup(PrsCtProviderRoleTypes.class, dto.getTypeId());
        } else if (dto.getType() != null) {
            providerRoleType = codesDao.lookup(PrsCtProviderRoleTypes.class, dto.getType());
        }
        prsProviders.setHptCode(providerRoleType);
        prsProviders.setUserChid(chidGenerator.find());

        return prsProviders;
    }

    public ProviderDto toProviderDetails(PrsProviders provider, boolean searchResults) {
        ProviderDto result = new ProviderDto();

        result.setPauthId(provider.getPauthId());
        result.setTypeId(provider.getHptCode().getCtlId());
        result.setType(provider.getHptCode().getCtlNameCode());
        result.setProviderRoleTypeCode(provider.getHptCode().getCtlNameCode());

        result.setIdentifiers(buildIdentifiers(provider.getGrsIdentifiersList()));
        String partyTypeCode = provider.getPartyTypeCode().getCtlNameCode();
        if (CodeTableCodes.GrsCtPartyType.IND.getValue().equals(partyTypeCode)) {
            result.setProviderType(ProviderType.PRACTITIONER);
            result.setIndNames(buildPersonNames(provider.getGrsPersonNamesList()));
            result.setPartyType(CodeTableCodes.GrsCtPartyType.IND);
        } else if (CodeTableCodes.GrsCtPartyType.ORG.getValue().equals(partyTypeCode)) {
            result.setProviderType(ProviderType.ORGANIZATION);
            result.setOrgNames(buildOrgNames(provider.getGrsOrgNamesList()));
            result.setPartyType(CodeTableCodes.GrsCtPartyType.ORG);
        } else {
            throw new UnsupportedOperationException("Unrecognized Party Type: " + partyTypeCode);
        }
        result.setAddresses(buildAddresses(provider.getGrsAddressesList(), true));
        result.setStatuses(buildStatuses(provider.getPrsStatusesList()));

        if (ProviderUtil.isConfidential(provider)) {
            result.setConfidential(true);
        }
        List<RegistryIdentifierDto> regIdentifiers = buildRegistryIdentifiers(provider.getGrsRegistryIdentifiersList());
        if (!searchResults) {
            if (plrUserRoleService.isRegAdmin()) {//If the logged user is not reg admin, don't return registry identifiers
                result.setRegistryIdentifiers(regIdentifiers);
            }
            result.setDemographicDetails(buildDemographicDetails(provider.getPrsDemographicDetailsList()));
            result.setTelecommunication(buildTelephones(provider.getGrsTelephonesList(), true));
            result.setElectronicAddresses(buildElectronicAddresses(provider.getGrsElectronicAddressesList(), true));
            result.setWorkLocationList(buildWorkLocations(provider.getPrsWorkLocationsList()));
            result.setConditions(buildConditions(provider.getPrsConditionsList()));
            result.setExpertise(buildExpertiseList(provider.getPrsProviderExpertisesList()));
            result.setCredentials(buildCredentials(provider.getPrsProviderCredentialsList()));
            result.setInformationRoutes(buildInformationRoutes(provider.getPrsInformationRoutesList(), true));
            result.setDisciplinaryActions(buildDisciplinaryActions(provider.getPrsDisciplinaryActionsList()));
            result.setConfidentialities(buildConfidentialityIndicators(provider.getPrsConfidentialityIndicatorsList()));
            result.setProviderRelationships(buildProviderRelationships(provider.getPrsProviderRelationshipsList1()));
            result.setRegistryUserRelationships(buildProviderRURelationships(provider.getPrsProvRuRelnsList()));
            result.setNotes(buildNotes(provider.getPrsNotesList()));
        } else {//If the request is search then set the primary chid
            // need the confidentialities to properly determine if confidential
            result.setConfidentialities(buildConfidentialityIndicators(provider.getPrsConfidentialityIndicatorsList()));
            result.setPrimaryChid(findPrimaryChid(regIdentifiers));
        }

        return result;

    }

    private void mapPartyType(CodeTableCodes.GrsCtPartyType partyType, PrsProviders prsProviders) throws IllegalStateException {
        if (partyType.equals(CodeTableCodes.GrsCtPartyType.IND)) {
            GrsCtPartyType partyTypeCode = codesDao.lookup(GrsCtPartyType.class, CodeTableCodes.GrsCtPartyType.IND);
            prsProviders.setPartyTypeCode(partyTypeCode);
        } else if (partyType.equals(CodeTableCodes.GrsCtPartyType.ORG)) {
            GrsCtPartyType partyTypeCode = codesDao.lookup(GrsCtPartyType.class, CodeTableCodes.GrsCtPartyType.ORG);
            prsProviders.setPartyTypeCode(partyTypeCode);
        } else {
            throw new IllegalStateException("Unrecognized Party Type indicator: " + partyType);
        }
    }

    public PrsProviderCredentials mapPrsProviderCredentials(CredentialsDto credential, PrsProviders prsProviders) {
        PrsProviderCredentials result = null;

        // If Credential Type is not supplied, do not add a PrsProviderCredentials.
        if (credential != null && (credential.getTypeId() != null || credential.getTypeCode() != null)) {

            result = new PrsProviderCredentials();
            result.setPcredId(credential.getId());
            result.setPauthPauthId(prsProviders);

            PrsCtProvCredentialTypes credentialCode;
            if (credential.getTypeId() != null) {
                credentialCode = codesDao.lookup(PrsCtProvCredentialTypes.class, credential.getTypeId());
            } else {
                credentialCode = codesDao.lookup(PrsCtProvCredentialTypes.class, credential.getTypeCode());
            }
            result.setProviderCredentialTypeCode(credentialCode);

            if (credential.getDesignation() != null) {
                result.setCredentialDesignationTxt(credential.getDesignation());
            }
            if (credential.getRegistrationNumber() != null) {
                result.setRegistrationNumberTxt(credential.getRegistrationNumber());
            }
            if (credential.getGrantingInstitution() != null) {
                result.setCredentialGrantingInstTxt(credential.getGrantingInstitution());
            }
            if (credential.getInstitutionCity() != null) {
                result.setInstitutionCityTxt(credential.getInstitutionCity());
            }
            if (credential.getInstitutionCountryId() != null) {
                PrsCtCountries country = codesDao.lookup(PrsCtCountries.class, credential.getInstitutionCountryId());
                result.setInstitutionCountryCode(country);
            } else if (StringUtils.isNotEmpty(credential.getInstitutionCountryCode())) {//PLR-2157
                PrsCtCountries country = codesDao.lookup(PrsCtCountries.class, credential.getInstitutionCountryCode());
                result.setInstitutionCountryCode(country);
            }
            if (credential.getInstitutionProvStateId() != null) {
                PrsCtProvState province = codesDao.lookup(PrsCtProvState.class, credential.getInstitutionProvStateId());
                result.setInstitutionProvinceCode(province);
            } else if (StringUtils.isNotEmpty(credential.getInstitutionProvStateCode())) {//PLR-2157
                PrsCtProvState province = codesDao.lookup(PrsCtProvState.class, credential.getInstitutionProvStateCode());
                result.setInstitutionProvinceCode(province);
            }
            GrsCtBooleanTypes equivalencyFlagCode = EntityUtils.toGrsCtBooleanType(credential.isEquivalencyFlag(), codesDao);
            result.setEquivalencyFlag(equivalencyFlagCode);

            if (credential.getYearIssued() != null) {
                result.setYearCredentialIssuedTxt(credential.getYearIssued());
            }
            GrsCtBooleanTypes activeFlag = EntityUtils.toGrsCtBooleanType(credential.isActive(), codesDao);
            result.setActiveFlag(activeFlag);

            if (credential.getEffectiveStartDate() != null) {
                result.setEffectiveStartDate(credential.getEffectiveStartDate());
            } else {
                result.setEffectiveStartDate(new Date());
            }
            if (credential.getEffectiveEndDate() != null) {
                result.setEffectiveEndDate(credential.getEffectiveEndDate());
            } else {
                result.setEffectiveEndDate(DatabaseConstants.SYSTEM_HIGH_DATE.toDate());
            }
            if (credential.getEndReasonCodeId() != null) {
                result.setEndReasonCode(codesDao.lookup(GrsCtEndReasonTypes.class, credential.getEndReasonCodeId()));
            } else if (credential.getEndReasonCode() != null) {
                result.setEndReasonCode(codesDao.lookup(GrsCtEndReasonTypes.class, credential.getEndReasonCode()));
            }
            if (credential.getGenerationNum() != null) {
                result.setGenerationNum(credential.getGenerationNum());
            }
            credential.setUserChid(chidGenerator.find());

        }
        return result;
    }

    public PrsDemographicDetails mapPrsDemographicDetails(final DemographicDetailsDto demograhicDetails, PrsProviders prsProviders) {
        PrsDemographicDetails result = new PrsDemographicDetails();
        result.setDdId(demograhicDetails.getId());
        //Note: DOB and gender code are mandatory, and the clients of this class will set it.
        result.setPauthPauthId(prsProviders);

        if (demograhicDetails.getGenderId() != null) {
            PrsCtGenderCodes genderCode = codesDao.lookup(PrsCtGenderCodes.class, demograhicDetails.getGenderId());
            result.setGenderCode(genderCode);
        } else if (demograhicDetails.getGenderCode() != null) {
            result.setGenderCode(codesDao.lookup(PrsCtGenderCodes.class, demograhicDetails.getGenderCode()));
        }
        if (demograhicDetails.getBirthDate() != null) {
            result.setDateOfBirthDate(demograhicDetails.getBirthDate());
        }
        if (demograhicDetails.getDeathDate() != null) {
            result.setDateOfDeathDate(demograhicDetails.getDeathDate());
        }
        if (demograhicDetails.getBirthCountryCodeId() != null) {
            result.setCountryOfBirthCode(codesDao.lookup(PrsCtCountries.class, demograhicDetails.getBirthCountryCodeId()));
        } else if (StringUtils.isNoneBlank(demograhicDetails.getBirthCountryCode())) {
            result.setCountryOfBirthCode(codesDao.lookup(PrsCtCountries.class, demograhicDetails.getBirthCountryCode()));
        }
        if (demograhicDetails.getBirthProvStateCodeId() != null) {
            result.setProvOrStateOfBirthTxt(codesDao.lookup(PrsCtProvState.class, demograhicDetails.getBirthProvStateCodeId()));
        } else if (StringUtils.isNoneBlank(demograhicDetails.getBirthProvState())) {
            result.setProvOrStateOfBirthTxt(codesDao.lookup(PrsCtProvState.class, demograhicDetails.getBirthProvState()));
        }
        if (demograhicDetails.getEffectiveStartDate() != null) {
            result.setEffectiveStartDate(demograhicDetails.getEffectiveStartDate());
        } else {
            result.setEffectiveStartDate(new Date());
        }
        if (demograhicDetails.getEffectiveEndDate() != null) {
            result.setEffectiveEndDate(demograhicDetails.getEffectiveEndDate());
        } else {
            result.setEffectiveEndDate(DatabaseConstants.SYSTEM_HIGH_DATE.toDate());
        }
        if (demograhicDetails.getGenerationNum() != null) {
            result.setGenerationNum(demograhicDetails.getGenerationNum());
        } else {
            result.setGenerationNum(DatabaseConstants.DEFAULT_GENERATION_NUM);
        }
        if (demograhicDetails.getEndReasonCode() != null) {
            result.setEndReasonCode(codesDao.lookup(GrsCtEndReasonTypes.class, demograhicDetails.getEndReasonCode()));
        } else if (demograhicDetails.getEndReasonCodeId() != null) {
            result.setEndReasonCode(codesDao.lookup(GrsCtEndReasonTypes.class, demograhicDetails.getEndReasonCodeId()));
        }
        if (demograhicDetails.getDataOwnerCode() != null) {
            result.setDataOwnerCode(codesDao.lookup(PrsCtDataOwnerCodes.class, demograhicDetails.getDataOwnerCode()));
        }
        result.setUserChid(chidGenerator.find());

        return result;

    }

    /**
     * Our client wants the IPC and CPN copied from the registry identifier to
     * the provider identifiers.
     *
     * @param prsProviders
     * @param effectiveDate
     * @return
     */
    public List<GrsIdentifiers> buildIdentifierCPNIPC(PrsProviders prsProviders, LocalDate effectiveDate) {
        PrsCtIdentifierTypes ipcType = codesDao.lookup(PrsCtIdentifierTypes.class, CodeTableCodes.PrsCtIdentifierTypeCodes.IPC.getValue());
        PrsCtIdentifierTypes cpnType = codesDao.lookup(PrsCtIdentifierTypes.class, CodeTableCodes.PrsCtIdentifierTypeCodes.CPN.getValue());

        GrsIdentifiers ipcIdentifier = new GrsIdentifiers();
        GrsIdentifiers cpnIdentifier = new GrsIdentifiers();

        ipcIdentifier.setIdentifierTypeCode(ipcType);
        cpnIdentifier.setIdentifierTypeCode(cpnType);

        for (GrsRegistryIdentifiers regID : prsProviders.getGrsRegistryIdentifiersList()) {
            if (regID.getIdentifierTypeCode().getCtlNameCode().equals(CodeTableCodes.GrsCtRegIdentifierTypes.INTERNAL_PROVIDER_ID.getValue())) {
                ipcIdentifier.setProviderChid(regID.getProviderChid());
            } else if (regID.getIdentifierTypeCode().getCtlNameCode().equals(CodeTableCodes.GrsCtRegIdentifierTypes.COMMON_PROVIDER_NUMBER.getValue())) {
                cpnIdentifier.setProviderChid(regID.getProviderChid());
            } else {
                // do nothing
            }
        }

        ipcIdentifier.setPauthPauthId(prsProviders);
        ipcIdentifier.setActiveFlag(codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES));
        ipcIdentifier.setEffectiveStartDate(effectiveDate.toDate());
        ipcIdentifier.setUserChid(chidGenerator.find());
        ipcIdentifier.setDataOwnerCode(codesDao.lookup(PrsCtDataOwnerCodes.class, CodeTableCodes.PrsCtDataOwnerCodes.MOH.getValue()));

        cpnIdentifier.setPauthPauthId(prsProviders);
        cpnIdentifier.setActiveFlag(codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES));
        cpnIdentifier.setEffectiveStartDate(effectiveDate.toDate());
        cpnIdentifier.setUserChid(chidGenerator.find());
        cpnIdentifier.setDataOwnerCode(codesDao.lookup(PrsCtDataOwnerCodes.class, CodeTableCodes.PrsCtDataOwnerCodes.MOH.getValue()));

        List<GrsIdentifiers> idList = new ArrayList<>();
        idList.add(ipcIdentifier);
        idList.add(cpnIdentifier);
        return idList;
    }

    /**
     * Constructs a new registry identifier entity based on the provided
     * information.
     *
     * @param prsProviders the parent provider entity
     * @param effectiveDate the effective date
     * @param grsCtRegIdentifierTypes the registry identifier type
     * @return a freshly, populated identifier entity
     */
    public GrsRegistryIdentifiers buildRegistryIdentifier(PrsProviders prsProviders, LocalDate effectiveDate, CodeTableCodes.GrsCtRegIdentifierTypes grsCtRegIdentifierTypes) {
        GrsRegistryIdentifiers registryIdentifier = new GrsRegistryIdentifiers();
        String paddedIdentifier = prsProviders.getPauthId().toString();
        if (StringUtils.isNumeric(paddedIdentifier) && paddedIdentifier.length() < 8) {
            paddedIdentifier = StringUtils.leftPad(paddedIdentifier, 8, "0");
        }

        GrsCtRegIdentifierTypes regIdTypeCode = codesDao.lookup(GrsCtRegIdentifierTypes.class, grsCtRegIdentifierTypes);
        if (CodeTableCodes.GrsCtRegIdentifierTypes.COMMON_PROVIDER_NUMBER.getValue().equals(regIdTypeCode.getCtlNameCode())) {
            registryIdentifier.setProviderChid(String.format("CPN.%s.BC.PRS", paddedIdentifier));
        } else if (CodeTableCodes.GrsCtRegIdentifierTypes.INTERNAL_PROVIDER_ID.getValue().equals(regIdTypeCode.getCtlNameCode())) {
            registryIdentifier.setProviderChid(String.format("IPC.%s.BC.PRS", paddedIdentifier));
        }

        registryIdentifier.setPauthPauthId(prsProviders);
        registryIdentifier.setActiveFlag(codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES));
        registryIdentifier.setEffectiveStartDate(effectiveDate.toDate());
        registryIdentifier.setIdentifierTypeCode(regIdTypeCode);
        registryIdentifier.setUserChid(chidGenerator.find());
        return registryIdentifier;
    }

    /**
     * Populate a search result record with the simple list of identifiers
     *
     * @param regIds the list of registry identifiers to traverse
     * @return a list of registry identifier transfer objects
     */
    public List<RegistryIdentifierDto> buildRegistryIdentifiers(final List<GrsRegistryIdentifiers> regIds) {
        List<RegistryIdentifierDto> result = new ArrayList<>();
        for (GrsRegistryIdentifiers id : regIds) {
            result.add(buildRegistryIdentifier(id));
        }
        Collections.sort(result, new RegistryIdentifierDisplaySortingComparator());
        return result;

    }

    /**
     * Map a registry identifier from entity to transfer object.
     *
     * @param id the entity
     * @return the full populated data transfer object
     */
    public RegistryIdentifierDto buildRegistryIdentifier(GrsRegistryIdentifiers id) {
        RegistryIdentifierDto result = new RegistryIdentifierDto();
        if (id.getPauthPauthId() != null) {
            result.setPauthId(id.getPauthPauthId().getPauthId());
        }
        result.setId(id.getRidId());
        if (id.getActiveFlag() != null) {
            result.setActive(EntityUtils.booleanValue(id.getActiveFlag()));
        }

        result.setIdentifier(id.getProviderChid());
        result.setRawIdentifier(ProviderDetailsUtil.getRawIdentifier(id.getProviderChid()));
        if (id.getIdentifierTypeCode() != null) {
            result.setTypeId(id.getIdentifierTypeCode().getCtlId());
            result.setType(id.getIdentifierTypeCode().getCtlDescTxt());
            result.setTypeCode(id.getIdentifierTypeCode().getCtlNameCode());
        }
        result.setUserChid(id.getUserChid());
        result.setEffectiveStartDate(id.getEffectiveStartDate());
        result.setEffectiveEndDate(id.getEffectiveEndDate());
        if (id.getEndReasonCode() != null) {
            result.setEndReasonCode(id.getEndReasonCode().getCtlNameCode());
        }
        result.setGenerationNum(id.getGenerationNum());
        result.setCreatedDate(id.getCreatedDts());
        result.setInvalidatedDate(id.getInvalidatedDts());

        result.setDisplayActive(EntityUtils.isActive(result.isActive(), result.getEndReasonCode(), result.getInvalidatedDate(), result.getEffectiveStartDate(), result.getEffectiveEndDate()));
        result.setUpdatable(EntityUtils.isUpdatable(result.isActive(), result.getEndReasonCode(), result.getInvalidatedDate()));

        return result;
    }

    /**
     * Populate a search result record with the simple list of identifiers
     *
     * @param id the identifiers to populate
     * @return the fully populated identifier
     */
    public CollegeIdentifierDto buildIdentifier(final GrsIdentifiers id) {
        CollegeIdentifierDto idRecord = new CollegeIdentifierDto();
        if (id.getPauthPauthId() != null) {
            idRecord.setPauthId(id.getPauthPauthId().getPauthId());
        }
        idRecord.setId(id.getPidId());
        if (id.getActiveFlag() != null) {
            idRecord.setActive(EntityUtils.booleanValue(id.getActiveFlag()));
        }
        if (id.getIdentifierTypeCode() != null) {
            idRecord.setTypeId(id.getIdentifierTypeCode().getCtlId());
            idRecord.setType(id.getIdentifierTypeCode().getCtlDescTxt());
            idRecord.setTypeCode(id.getIdentifierTypeCode().getCtlNameCode());
        }
        idRecord.setIdentifier(id.getProviderChid());
        idRecord.setUserChid(id.getUserChid());
        idRecord.setEffectiveStartDate(id.getEffectiveStartDate());
        idRecord.setEffectiveEndDate(id.getEffectiveEndDate());
        if (id.getEndReasonCode() != null) {
            idRecord.setEndReasonCode(id.getEndReasonCode().getCtlNameCode());
            idRecord.setEndReasonCodeId(id.getEndReasonCode().getCtlId());
        }
        idRecord.setGenerationNum(id.getGenerationNum());
        if (id.getDataOwnerCode() != null) {
            idRecord.setDataOwnerCode(id.getDataOwnerCode().getCtlNameCode());
            idRecord.setDataOwnerName(id.getDataOwnerCode().getCtlNameCode());
        }
        idRecord.setCreatedDate(id.getCreatedDts());
        idRecord.setInvalidatedDate(id.getInvalidatedDts());

        idRecord.setDisplayActive(EntityUtils.isActive(idRecord.isActive(), idRecord.getEndReasonCode(), idRecord.getInvalidatedDate(), idRecord.getEffectiveStartDate(), idRecord.getEffectiveEndDate()));
        idRecord.setUpdatable(EntityUtils.isUpdatable(idRecord.isActive(), idRecord.getEndReasonCode(), idRecord.getInvalidatedDate()));

        return idRecord;
    }

    /**
     * Populate a search result record with the simple list of identifiers
     *
     * @param ids the list of identifiers to traverse
     * @return the fully populated list of identifiers
     */
    public List<CollegeIdentifierDto> buildIdentifiers(final List<GrsIdentifiers> ids) {
        List<CollegeIdentifierDto> result = new ArrayList<>();
        for (GrsIdentifiers id : ids) {
            result.add(buildIdentifier(id));
        }
        Collections.sort(result, new ProviderDetailDisplaySortingComparator());
        return result;

    }

    /**
     * Convert a list of PrsStatuses entities to transfer objects.
     *
     * @param statuses the status records to convert
     * @return a list of statuses transfer objects
     */
    public List<StatusDto> buildStatuses(final List<PrsStatuses> statuses) {
        List<StatusDto> result = new ArrayList<>();

        for (PrsStatuses status : statuses) {
            result.add(buildStatus(status));
        }
        Collections.sort(result, new StatusDisplaySortingComparator());
        return result;
    }

    /**
     * Map the provided entity to a data transfer object.
     *
     * @param status the entity
     * @return the populated transfer object.
     */
    public StatusDto buildStatus(PrsStatuses status) {
        StatusDto result = new StatusDto();
        if (status.getPauthPauthId() != null) {
            result.setPauthId(status.getPauthPauthId().getPauthId());
        }
        result.setId(status.getAs2Id());
        if (status.getActiveFlag() != null) {
            result.setActive(EntityUtils.booleanValue(status.getActiveFlag()));
        }
        result.setClassTxt(status.getStatusClassCode().getCtlDescTxt());
        result.setClassCode(status.getStatusClassCode().getCtlNameCode());
        result.setClassCodeId(status.getStatusClassCode().getCtlId());
        result.setReason(status.getStatusReasonCode().getCtlDescTxt());
        result.setReasonCode(status.getStatusReasonCode().getCtlNameCode());
        result.setReasonCodeId(status.getStatusReasonCode().getCtlId());
        result.setTypeId(status.getStatusTypeCode().getCtlId());
        result.setType(status.getStatusTypeCode().getCtlDescTxt());
        result.setTypeCode(status.getStatusTypeCode().getCtlNameCode());
        result.setUserChid(status.getUserChid());
        result.setEffectiveStartDate(status.getEffectiveStartDate());
        result.setEffectiveEndDate(status.getEffectiveEndDate());
        if (status.getEndReasonCode() != null) {
            result.setEndReasonCode(status.getEndReasonCode().getCtlNameCode());
        }
        result.setGenerationNum(status.getGenerationNum());
        if (status.getDataOwnerCode() != null) {
            result.setDataOwnerCode(status.getDataOwnerCode().getCtlNameCode());
        }
        result.setCreatedDate(status.getCreatedDts());
        result.setInvalidatedDate(status.getInvalidatedDts());

        result.setDisplayActive(EntityUtils.isActive(result.isActive(), result.getEndReasonCode(), result.getInvalidatedDate(), result.getEffectiveStartDate(), result.getEffectiveEndDate()));
        result.setUpdatable(EntityUtils.isUpdatable(result.isActive(), result.getEndReasonCode(), result.getInvalidatedDate()));

        return result;
    }

    /**
     * Populate a search result record with the simple list of person names
     *
     * @param name the source person name entity
     * @return the populated person name transfer object
     */
    public PersonNameDto buildPersonName(final GrsPersonNames name) {

        PersonNameDto personName = new PersonNameDto();
        if (name.getPauthPauthId() != null) {
            personName.setPauthId(name.getPauthPauthId().getPauthId());
        }
        personName.setId(name.getNmId());
        if (name.getActiveFlag() != null) {
            personName.setActive(EntityUtils.booleanValue(name.getActiveFlag()));
        }
        personName.setPrefix(name.getPrsnPrefixTxt());
        personName.setFirstName(name.getPrsnFirstGivenNameTxt());
        personName.setSecondName(name.getPrsnSecondGivenNameTxt());
        personName.setThirdName(name.getPrsnThirdGivenNameTxt());
        personName.setLastName(name.getPrsnSurnameTxt());
        personName.setSuffix(name.getPrsnSuffixTxt());
        personName.setFullName(name.getFullName());
        personName.setPreferred(EntityUtils.booleanValue(name.getPnamePreferredFlag()));
        if (name.getNameTypeCode() != null) {
            personName.setType(name.getNameTypeCode().getCtlDescTxt());
            personName.setTypeCode(name.getNameTypeCode().getCtlNameCode());
            personName.setTypeId(name.getNameTypeCode().getCtlId());
        }
        personName.setUserChid(name.getUserChid());
        personName.setEffectiveStartDate(name.getEffectiveStartDate());
        personName.setEffectiveEndDate(name.getEffectiveEndDate());
        if (name.getEndReasonCode() != null) {
            personName.setEndReasonCode(name.getEndReasonCode().getCtlNameCode());
        }
        personName.setGenerationNum(name.getGenerationNum());

        if (name.getDataOwnerCode() != null) {
            personName.setDataOwnerCode(name.getDataOwnerCode().getCtlNameCode());
            personName.setDataOwnerName(name.getDataOwnerCode().getCtlNameCode());
        }

        personName.setCreatedDate(name.getCreatedDts());
        personName.setInvalidatedDate(name.getInvalidatedDts());
        if (name.getRuRuId() != null) {
            personName.setRuRuID(name.getRuRuId().getRuId());
        }

        personName.setDisplayActive(EntityUtils.isActive(personName.isActive(), personName.getEndReasonCode(), personName.getInvalidatedDate(), personName.getEffectiveStartDate(), personName.getEffectiveEndDate()));
        personName.setUpdatable(EntityUtils.isUpdatable(personName.isActive(), personName.getEndReasonCode(), personName.getInvalidatedDate()));

        return personName;
    }

    /**
     * Populate a search result record with the simple list of person names
     *
     * @param names the list of names to traverse
     * @return a list of person name transfer objects
     */
    public List<PersonNameDto> buildPersonNames(final List<GrsPersonNames> names) {
        List<PersonNameDto> result = new ArrayList<>();

        for (GrsPersonNames name : names) {
            result.add(buildPersonName(name));
        }
        ProviderDetailDisplaySortingComparator pddsc = new ProviderDetailDisplaySortingComparator();
        Collections.sort(result, pddsc);
        return result;
    }

    /**
     * Map the provided entity to a data transfer object.
     *
     * @param entity the entity
     * @return the populated transfer object.
     */
    public OrgNameDto buildOrgName(GrsOrgNames entity) {
        OrgNameDto dto = new OrgNameDto();
        if (entity.getPauthPauthId() != null) {
            dto.setPauthId(entity.getPauthPauthId().getPauthId());
        }
        if (entity.getRuRuId() != null) {
            dto.setRuRuId(entity.getRuRuId().getRuId());
        }
        dto.setId(entity.getNmId());
        if (entity.getActiveFlag() != null) {
            dto.setActive(EntityUtils.booleanValue(entity.getActiveFlag()));
        }
        dto.setPreferred(EntityUtils.booleanValue(entity.getPnamePreferredFlag()));
        dto.setName(entity.getOrgnztnNameTxt());
        dto.setLongName(entity.getOrgnztnLongNameTxt());

        dto.setUserChid(entity.getUserChid());
        dto.setEffectiveStartDate(entity.getEffectiveStartDate());
        dto.setEffectiveEndDate(entity.getEffectiveEndDate());

        if (entity.getNameTypeCode() != null) {
            dto.setTypeId(entity.getNameTypeCode().getCtlId());
            dto.setType(entity.getNameTypeCode().getCtlDescTxt());
            dto.setTypeCode(entity.getNameTypeCode().getCtlNameCode());
        }

        if (entity.getEndReasonCode() != null) {
            dto.setEndReasonCode(entity.getEndReasonCode().getCtlNameCode());
        }
        dto.setGenerationNum(entity.getGenerationNum());
        if (entity.getDataOwnerCode() != null) {
            dto.setDataOwnerCode(entity.getDataOwnerCode().getCtlNameCode());
            dto.setDataOwnerName(entity.getDataOwnerCode().getCtlNameCode());
        }
        dto.setCreatedDate(entity.getCreatedDts());
        dto.setInvalidatedDate(entity.getInvalidatedDts());

        dto.setDisplayActive(EntityUtils.isActive(dto.isActive(), dto.getEndReasonCode(), dto.getInvalidatedDate(), dto.getEffectiveStartDate(), dto.getEffectiveEndDate()));
        dto.setUpdatable(EntityUtils.isUpdatable(dto.isActive(), dto.getEndReasonCode(), dto.getInvalidatedDate()));

        return dto;
    }

    /**
     * Map the provided entities to data transfer objects.
     *
     * @param grsOrgNamesList the entities
     * @return the populated transfer objects.
     */
    public List<OrgNameDto> buildOrgNames(List<GrsOrgNames> grsOrgNamesList) {
        List<OrgNameDto> result = new ArrayList<>();

        for (GrsOrgNames grsOrgName : grsOrgNamesList) {
            result.add(buildOrgName(grsOrgName));
        }
        Collections.sort(result, new ProviderDetailDisplaySortingComparator());
        return result;
    }

    /**
     * Map the provided entities to data transfer objects.
     *
     * @param prsDemographicDetails the entities
     * @return the populated transfer objects.
     */
    public List<DemographicDetailsDto> buildDemographicDetails(List<PrsDemographicDetails> prsDemographicDetails) {

        List<DemographicDetailsDto> result = new ArrayList<>();

        for (PrsDemographicDetails prsDemographicDetail : prsDemographicDetails) {
            result.add(buildDemographicDetail(prsDemographicDetail));
        }

        return result;
    }

    /**
     * Map the provided entity to a data transfer object.
     *
     * @param prsDemographicDetail the entity
     * @return the populated transfer object.
     */
    public DemographicDetailsDto buildDemographicDetail(PrsDemographicDetails prsDemographicDetail) {
        DemographicDetailsDto details = new DemographicDetailsDto();
        if (prsDemographicDetail.getPauthPauthId() != null) {
            details.setPauthId(prsDemographicDetail.getPauthPauthId().getPauthId());
        }
        details.setId(prsDemographicDetail.getDdId());
        if (prsDemographicDetail.getActiveFlag() != null) {
            details.setActive(EntityUtils.booleanValue(prsDemographicDetail.getActiveFlag()));
        }
        if (prsDemographicDetail.getGenderCode() != null) {
            details.setGender(prsDemographicDetail.getGenderCode().getCtlDescTxt());
            details.setGenderCode(prsDemographicDetail.getGenderCode().getCtlNameCode());
            details.setGenderId(prsDemographicDetail.getGenderCode().getCtlId());
        }
        if (prsDemographicDetail.getCountryOfBirthCode() != null) {
            details.setBirthCountry(prsDemographicDetail.getCountryOfBirthCode().getCtlDescTxt());
            details.setBirthCountryCode(prsDemographicDetail.getCountryOfBirthCode().getCtlNameCode());
            details.setBirthCountryCodeId(prsDemographicDetail.getCountryOfBirthCode().getCtlId());
        }
        if (prsDemographicDetail.getProvOrStateOfBirthTxt() != null) {
            details.setBirthProvStateDesc(prsDemographicDetail.getProvOrStateOfBirthTxt().getCtlDescTxt());
            details.setBirthProvState(prsDemographicDetail.getProvOrStateOfBirthTxt().getCtlNameCode());
            details.setBirthProvStateCodeId(prsDemographicDetail.getProvOrStateOfBirthTxt().getCtlId());
        }
        details.setBirthDate(prsDemographicDetail.getDateOfBirthDate());
        details.setDeathDate(prsDemographicDetail.getDateOfDeathDate());
        details.setUserChid(prsDemographicDetail.getUserChid());
        details.setEffectiveStartDate(prsDemographicDetail.getEffectiveStartDate());
        details.setEffectiveEndDate(prsDemographicDetail.getEffectiveEndDate());
        if (prsDemographicDetail.getEndReasonCode() != null) {
            details.setEndReasonCode(prsDemographicDetail.getEndReasonCode().getCtlNameCode());
        }
        details.setGenerationNum(prsDemographicDetail.getGenerationNum());
        details.setDataOwnerCode(prsDemographicDetail.getDataOwnerCode().getCtlNameCode());
        details.setCreatedDate(prsDemographicDetail.getCreatedDts());
        details.setInvalidatedDate(prsDemographicDetail.getInvalidatedDts());
        details.setDisplayActive(EntityUtils.isActive(details.isActive(), details.getEndReasonCode(), details.getInvalidatedDate(), details.getEffectiveStartDate(), details.getEffectiveEndDate()));
        details.setUpdatable(EntityUtils.isUpdatable(details.isActive(), details.getEndReasonCode(), details.getInvalidatedDate()));
        return details;
    }

    /**
     * Build a list of address transfer objects.
     *
     * @param address the list of addresses to traverse
     * @return the list of address transfer objects
     */
    public AddressDto buildAddress(final GrsAddresses address) {
        AddressDto addressRecord = new AddressDto();
        if (address.getPauthPauthId() != null) {
            addressRecord.setPauthId(address.getPauthPauthId().getPauthId());
        }
        addressRecord.setId(address.getAddrId());
        if (address.getActiveFlag() != null) {
            addressRecord.setActive(EntityUtils.booleanValue(address.getActiveFlag()));
        }
        addressRecord.setAddressLineOne(address.getAddressLine1Txt());
        addressRecord.setAddressLineTwo(address.getAddressLine2Txt());
        addressRecord.setAddressLineThree(address.getAddressLine3Txt());
        addressRecord.setAddressLineFour(address.getAddressLine4Txt());
        addressRecord.setCity(address.getCityTxt());
        addressRecord.setProvinceOrStateTxt(address.getProvinceOrStateTxt());

        if (address.getCountryCode() != null) {
            addressRecord.setCountry(address.getCountryCode().getCtlDescTxt());
            addressRecord.setCountryCode(address.getCountryCode().getCtlNameCode());
            addressRecord.setCountryId(address.getCountryCode().getCtlId());
        }
        if (address.getCmnctnPrpsTypCd() != null) {
            addressRecord.setCommunicationPurpose(address.getCmnctnPrpsTypCd().getCtlDescTxt());
            addressRecord.setCommunicationPurposeCode(address.getCmnctnPrpsTypCd().getCtlNameCode());
            addressRecord.setCommunicationPurposeId(address.getCmnctnPrpsTypCd().getCtlId());
        }
        if (address.getAddressTypeCode() != null) {
            addressRecord.setTypeId(address.getAddressTypeCode().getCtlId());
            addressRecord.setType(address.getAddressTypeCode().getCtlDescTxt());
            addressRecord.setTypeCode(address.getAddressTypeCode().getCtlNameCode());
        }

        addressRecord.setPostalCode(address.getPostalCodeOrZipTxt());

        addressRecord.setUserChid(address.getUserChid());
        addressRecord.setEffectiveStartDate(address.getEffectiveStartDate());
        addressRecord.setEffectiveEndDate(address.getEffectiveEndDate());
        if (address.getEndReasonCode() != null) {
            addressRecord.setEndReasonCode(address.getEndReasonCode().getCtlNameCode());
        }
        addressRecord.setGenerationNum(address.getGenerationNum());
        if (address.getDataOwnerCode() != null) {
            addressRecord.setDataOwnerCode(address.getDataOwnerCode().getCtlNameCode());
        }
        addressRecord.setCreatedDate(address.getCreatedDts());
        addressRecord.setInvalidatedDate(address.getInvalidatedDts());
        if (address.getRuRuId() != null) {
            addressRecord.setRuRuID(address.getRuRuId().getRuId());
        }

        if (address.getWlWlId() != null) {
            addressRecord.setWlWlId(address.getWlWlId().getWlId());
        }
        
        if (address.getValidationStatus() != null){
            addressRecord.setValidationStatus(address.getValidationStatus().getCtlNameCode());
            addressRecord.setValidationStatusDesc(address.getValidationStatus().getCtlDescTxt());
        }

        addressRecord.setFullAddress(address.getFullAddress());

        addressRecord.setDisplayActive(EntityUtils.isActive(addressRecord.isActive(), addressRecord.getEndReasonCode(), addressRecord.getInvalidatedDate(), addressRecord.getEffectiveStartDate(), addressRecord.getEffectiveEndDate()));
        addressRecord.setUpdatable(EntityUtils.isUpdatable(addressRecord.isActive(), addressRecord.getEndReasonCode(), addressRecord.getInvalidatedDate()));

        return addressRecord;
    }

    /**
     * Build a list of address transfer objects.
     *
     * @param addresses the list of addresses to traverse
     * @param ignoreWorkLocations whether to ignore assembly for a specific
     * address relating to a work location
     * @return the list of addresses
     */
    public List<AddressDto> buildAddresses(final List<GrsAddresses> addresses, boolean ignoreWorkLocations) {
        List<AddressDto> addressRecords = new ArrayList<>();

        for (GrsAddresses address : addresses) {
            if (address.getWlWlId() == null || (address.getWlWlId() != null && !ignoreWorkLocations)) {
                addressRecords.add(buildAddress(address));
            }
        }
        Collections.sort(addressRecords, new LocationDisplaySortingComparator());

        return addressRecords;
    }

    /**
     * Build a single ElectronicAddress transfer object
     *
     * @param electronicAddress the GrsElectronicAddresses to convert
     * @return the assembled ElectronicAddress
     */
    public ElectronicAddressDto buildElectronicAddress(GrsElectronicAddresses electronicAddress) {
        ElectronicAddressDto details = new ElectronicAddressDto();
        if (electronicAddress.getPauthPauthId() != null) {
            details.setPauthId(electronicAddress.getPauthPauthId().getPauthId());
        }
        details.setId(electronicAddress.getEaddrId());
        if (electronicAddress.getActiveFlag() != null) {
            details.setActive(EntityUtils.booleanValue(electronicAddress.getActiveFlag()));
        }
        details.setAddress(electronicAddress.getElectronicAddressTxt());

        if (electronicAddress.getCmnctnPrpsTypCd() != null) {
            details.setCommunicationPurposeId(electronicAddress.getCmnctnPrpsTypCd().getCtlId());
            details.setCommunicationPurpose(electronicAddress.getCmnctnPrpsTypCd().getCtlDescTxt());
            details.setCommunicationPurposeCode(electronicAddress.getCmnctnPrpsTypCd().getCtlNameCode());
        }
        if (electronicAddress.getElectronicAddressTypeCode() != null) {
            details.setTypeId(electronicAddress.getElectronicAddressTypeCode().getCtlId());
            details.setType(electronicAddress.getElectronicAddressTypeCode().getCtlDescTxt());
            details.setTypeCode(electronicAddress.getElectronicAddressTypeCode().getCtlNameCode());
        }
        details.setUserChid(electronicAddress.getUserChid());
        details.setEffectiveStartDate(electronicAddress.getEffectiveStartDate());
        details.setEffectiveEndDate(electronicAddress.getEffectiveEndDate());
        if (electronicAddress.getEndReasonCode() != null) {
            details.setEndReasonCodeId(electronicAddress.getEndReasonCode().getCtlId());
            details.setEndReasonCode(electronicAddress.getEndReasonCode().getCtlNameCode());
        }
        details.setGenerationNum(electronicAddress.getGenerationNum());
        if (electronicAddress.getDataOwnerCode() != null) {
            details.setDataOwnerCode(electronicAddress.getDataOwnerCode().getCtlNameCode());
        }
        details.setCreatedDate(electronicAddress.getCreatedDts());
        details.setInvalidatedDate(electronicAddress.getInvalidatedDts());
        if (electronicAddress.getWlWlId() != null) {
            details.setWlWlId(electronicAddress.getWlWlId().getWlId());
        }
        if (electronicAddress.getRuRuId() != null) {
            details.setRuRuID(electronicAddress.getRuRuId().getRuId());
        }
        details.setDisplayActive(EntityUtils.isActive(details.isActive(), details.getEndReasonCode(), details.getInvalidatedDate(), details.getEffectiveStartDate(), details.getEffectiveEndDate()));
        details.setUpdatable(EntityUtils.isUpdatable(details.isActive(), details.getEndReasonCode(), details.getInvalidatedDate()));
        return details;
    }

    /**
     * Build a list of electronic address transfer objects.
     *
     * @param grsElectronicAddresses the list of addresses to traverse
     * @param ignoreWorkLocations whether to ignore assembly for a specific
     * address relating to a work location
     * @return the list of addresses
     */
    public List<ElectronicAddressDto> buildElectronicAddresses(List<GrsElectronicAddresses> grsElectronicAddresses, boolean ignoreWorkLocations) {
        List<ElectronicAddressDto> result = new ArrayList<>();

        for (GrsElectronicAddresses electronicAddress : grsElectronicAddresses) {
            if (electronicAddress.getWlWlId() == null || (electronicAddress.getWlWlId() != null && !ignoreWorkLocations)) {
                result.add(buildElectronicAddress(electronicAddress));
            }
        }
        Collections.sort(result, new LocationDisplaySortingComparator());
        return result;
    }

    /**
     * Map the provided entity to a data transfer object.
     *
     * @param grsTelephone the entity
     * @return the populated transfer object.
     */
    public TelecommunicationDto buildTelephone(GrsTelephones grsTelephone) {
        TelecommunicationDto details = new TelecommunicationDto();
        if (grsTelephone.getPauthPauthId() != null) {
            details.setPauthId(grsTelephone.getPauthPauthId().getPauthId());
        }
        details.setId(grsTelephone.getPhonId());
        if (grsTelephone.getActiveFlag() != null) {
            details.setActive(EntityUtils.booleanValue(grsTelephone.getActiveFlag()));
        }

        details.setAreaCode(grsTelephone.getAreaCodeNum());
        details.setNumber(grsTelephone.getTelecommunicationNmbrNum());
        details.setExtension(grsTelephone.getExtensionNum());
        if (grsTelephone.getCmnctnPrpsTypCd() != null) {
            details.setCommunicationPurpose(grsTelephone.getCmnctnPrpsTypCd().getCtlDescTxt());
            details.setCommunicationPurposeCode(grsTelephone.getCmnctnPrpsTypCd().getCtlNameCode());
            details.setCommunicationPurposeId(grsTelephone.getCmnctnPrpsTypCd().getCtlId());
        }
        if (grsTelephone.getTlcmnctnNmbrTypCd() != null) {
            details.setTypeId(grsTelephone.getTlcmnctnNmbrTypCd().getCtlId());
            details.setType(grsTelephone.getTlcmnctnNmbrTypCd().getCtlDescTxt());
            details.setTypeCode(grsTelephone.getTlcmnctnNmbrTypCd().getCtlNameCode());
        }
        details.setUserChid(grsTelephone.getUserChid());
        details.setEffectiveStartDate(grsTelephone.getEffectiveStartDate());
        details.setEffectiveEndDate(grsTelephone.getEffectiveEndDate());
        if (grsTelephone.getEndReasonCode() != null) {
            details.setEndReasonCode(grsTelephone.getEndReasonCode().getCtlNameCode());
            details.setEndReasonCodeId(grsTelephone.getEndReasonCode().getCtlId());
        }
        details.setGenerationNum(grsTelephone.getGenerationNum());
        if (grsTelephone.getDataOwnerCode() != null) {
            details.setDataOwnerCode(grsTelephone.getDataOwnerCode().getCtlNameCode());
        }
        details.setCreatedDate(grsTelephone.getCreatedDts());
        details.setInvalidatedDate(grsTelephone.getInvalidatedDts());
        if (grsTelephone.getRuRuId() != null) {
            details.setRuRuId(grsTelephone.getRuRuId().getRuId());
        }
        if (grsTelephone.getWlWlId() != null) {
            details.setWlWlId(grsTelephone.getWlWlId().getWlId());
        }

        details.setDisplayActive(EntityUtils.isActive(details.isActive(), details.getEndReasonCode(), details.getInvalidatedDate(), details.getEffectiveStartDate(), details.getEffectiveEndDate()));
        details.setUpdatable(EntityUtils.isUpdatable(details.isActive(), details.getEndReasonCode(), details.getInvalidatedDate()));

        return details;
    }

    /**
     * Map the provided entity to a data transfer object.
     *
     * @param prsProvRuRelns
     * @return the populated transfer object.
     */
    public RegistryUserRelationshipDto buildRegistryUserRelationship(final PrsProvRuRelns prsProvRuRelns) {
        RegistryUserRelationshipDto details = new RegistryUserRelationshipDto();
        if (prsProvRuRelns.getPauthPauthId() != null) {
            details.setPauthId(prsProvRuRelns.getPauthPauthId().getPauthId());
        }
        details.setId(prsProvRuRelns.getRurelId());
        if (prsProvRuRelns.getActiveFlag() != null) {
            details.setActive(EntityUtils.booleanValue(prsProvRuRelns.getActiveFlag()));
        }
        details.setRegistryUserChid(prsProvRuRelns.getRuRuRelnWithId().getPartyPartyId().getRegistryUserOrgChid());

        if (prsProvRuRelns.getRuRelationshipTypeCode() != null) {
            details.setTypeId(prsProvRuRelns.getRuRelationshipTypeCode().getCtlId());
            details.setType(prsProvRuRelns.getRuRelationshipTypeCode().getCtlDescTxt());
            details.setTypeCode(prsProvRuRelns.getRuRelationshipTypeCode().getCtlNameCode());
        }
        details.setUserChid(prsProvRuRelns.getUserChid());
        details.setEffectiveStartDate(prsProvRuRelns.getEffectiveStartDate());
        details.setEffectiveEndDate(prsProvRuRelns.getEffectiveEndDate());
        if (prsProvRuRelns.getEndReasonCode() != null) {
            details.setEndReasonCode(prsProvRuRelns.getEndReasonCode().getCtlNameCode());
            details.setEndReasonCodeId(prsProvRuRelns.getEndReasonCode().getCtlId());
        }
        details.setGenerationNum(prsProvRuRelns.getGenerationNum());
        if (prsProvRuRelns.getDataOwnerCode() != null) {
            details.setDataOwnerCode(prsProvRuRelns.getDataOwnerCode().getCtlNameCode());
        }
        details.setCreatedDate(prsProvRuRelns.getCreatedDts());
        details.setInvalidatedDate(prsProvRuRelns.getInvalidatedDts());

        details.setDisplayActive(EntityUtils.isActive(details.isActive(), details.getEndReasonCode(), details.getInvalidatedDate(), details.getEffectiveStartDate(), details.getEffectiveEndDate()));
        details.setUpdatable(EntityUtils.isUpdatable(details.isActive(), details.getEndReasonCode(), details.getInvalidatedDate()));

        return details;
    }

    /**
     * Map the provided entities to data transfer objects.
     *
     * @param grsTelephones the entities
     * @param ignoreWorkLocations whether to ignore assembly for a specific
     * address relating to a work location
     * @return the populated transfer objects.
     */
    public List<TelecommunicationDto> buildTelephones(List<GrsTelephones> grsTelephones, boolean ignoreWorkLocations) {
        List<TelecommunicationDto> result = new ArrayList<>();

        for (GrsTelephones grsTelephone : grsTelephones) {
            if (grsTelephone.getWlWlId() == null || (grsTelephone.getWlWlId() != null && !ignoreWorkLocations)) {
                result.add(buildTelephone(grsTelephone));
            }
        }
        Collections.sort(result, new LocationDisplaySortingComparator());
        return result;
    }

    /**
     * Map the provided entity to a data transfer object.
     *
     * @param prsWorkLocationDetail the entity
     * @return the populated transfer object.
     */
    public WorkLocationDetailsDto buildWorkLocationDetail(PrsWorkLocationDetails prsWorkLocationDetail) {
        WorkLocationDetailsDto details = new WorkLocationDetailsDto();
        details.setId(prsWorkLocationDetail.getWldId());
        if (prsWorkLocationDetail.getWlWlId() != null) {
            details.setWlWlId(prsWorkLocationDetail.getWlWlId().getWlId());
        }
        details.setName(prsWorkLocationDetail.getWorkLocationNameTxt());
        details.setAdditionalAddresseeInfo(prsWorkLocationDetail.getAdditionalAddresseeInfoTxt());
        if (prsWorkLocationDetail.getDefaultFlag() != null) {
            details.setDefaultFlag(EntityUtils.booleanValue(prsWorkLocationDetail.getDefaultFlag()));
        }
        details.setEffectiveStartDate(prsWorkLocationDetail.getEffectiveStartDate());
        details.setEffectiveEndDate(prsWorkLocationDetail.getEffectiveEndDate());
        GrsCtEndReasonTypes grsCtEndReasonTypes = prsWorkLocationDetail.getEndReasonCode();
        if (prsWorkLocationDetail.getEndReasonCode() != null) {
            details.setEndReasonCode(grsCtEndReasonTypes.getCtlNameCode());
            details.setEndReasonCodeId(grsCtEndReasonTypes.getCtlId());
        }
        if (prsWorkLocationDetail.getWorkLocationTypeCode() != null) {
            details.setTypeId(prsWorkLocationDetail.getWorkLocationTypeCode().getCtlId());
            details.setType(prsWorkLocationDetail.getWorkLocationTypeCode().getCtlDescTxt());
            details.setTypeCode(prsWorkLocationDetail.getWorkLocationTypeCode().getCtlNameCode());
        }
        details.setUserChid(prsWorkLocationDetail.getUserChid());
        details.setCreatedDate(prsWorkLocationDetail.getCreatedDts());
        details.setInvalidatedDate(prsWorkLocationDetail.getInvalidatedDts());

        if (prsWorkLocationDetail.getActiveFlag() != null) {
            details.setActive(EntityUtils.booleanValue(prsWorkLocationDetail.getActiveFlag()));
        }

        details.setGenerationNum(prsWorkLocationDetail.getGenerationNum());

        details.setDisplayActive(EntityUtils.isActive(details.isActive(), details.getEndReasonCode(), details.getInvalidatedDate(), details.getEffectiveStartDate(), details.getEffectiveEndDate()));
        details.setUpdatable(EntityUtils.isUpdatable(details.isActive(), details.getEndReasonCode(), details.getInvalidatedDate()));

        return details;
    }

    /**
     * Map the provided entities to data transfer objects.
     *
     * @param prsWorkLocationsDetails the entities
     * @return the populated transfer objects.
     */
    public List<WorkLocationDetailsDto> buildWorkLocationDetails(List<PrsWorkLocationDetails> prsWorkLocationsDetails) {
        List<WorkLocationDetailsDto> result = new ArrayList<>();
        //for each worklocation, find active (assume only 1) details record.
        for (PrsWorkLocationDetails prsWorkLocationDetail : prsWorkLocationsDetails) {
            result.add(buildWorkLocationDetail(prsWorkLocationDetail));
        }
        Collections.sort(result);
        return result;
    }

    /**
     * Map the provided entity to a data transfer object.
     *
     * @param prsWorkLocation the entity
     * @return the populated transfer object.
     */
    public WorkLocationDto buildWorkLocation(PrsWorkLocations prsWorkLocation) {
        //prsWorkLocation.getPrsWorkLocationDetailsList()
        WorkLocationDto location = new WorkLocationDto();
        location.setId(prsWorkLocation.getWlId());
        if (prsWorkLocation.getPauthPauthId() != null) {
            location.setPauthId(prsWorkLocation.getPauthPauthId().getPauthId());
        }
        location.setIdentifier(prsWorkLocation.getWorkLocationChid());
        location.setUserChid(prsWorkLocation.getUserChid());
        location.setCreatedDate(prsWorkLocation.getCreatedDts());
        location.setInvalidatedDate(prsWorkLocation.getInvalidatedDts());

        if (prsWorkLocation.getActiveFlag() != null) {
            location.setActive(EntityUtils.booleanValue(prsWorkLocation.getActiveFlag()));
        }
        if (prsWorkLocation.getDataOwnerCode() != null) {
            location.setDataOwnerCode(prsWorkLocation.getDataOwnerCode().getCtlNameCode());
        }
        if (prsWorkLocation.getOperatorTypeId() != null) {
            location.setOperatorTypeId(prsWorkLocation.getOperatorTypeId().getCtlId());
        }
        if (prsWorkLocation.getOwnerTypeId() != null) {
            location.setOwnerTypeId(prsWorkLocation.getOwnerTypeId().getCtlId());
        }
        if (prsWorkLocation.getStatusId() != null) {
            location.setStatusId(prsWorkLocation.getStatusId().getCtlId());
        }
        location.setCampusOfCareTxt(prsWorkLocation.getCampusOfCareTxt());
        location.setOperatorNameTxt(prsWorkLocation.getOperatorNameTxt());
        location.setOwnerNameTxt(prsWorkLocation.getOwnerNameTxt());
        location.setContactNM(prsWorkLocation.getContactNm());
        if (prsWorkLocation.getIsForProfitYn() != null) {
            location.setForProfit(EntityUtils.booleanValue(prsWorkLocation.getIsForProfitYn()));
        }
        if (prsWorkLocation.getServiceDeliveryAreaCd() != null) {
            location.setServiceDeliveryAreaCd(prsWorkLocation.getServiceDeliveryAreaCd().getServiceDeliveryAreaCd());
        }
        if (prsWorkLocation.getLocalHealthAreaCd() != null) {
            location.setLocalHealthAreaCd(prsWorkLocation.getLocalHealthAreaCd().getLocalHealthAreaCd());
        }
        location.setNotes(prsWorkLocation.getNotes());
        location.setContactName(prsWorkLocation.getContactName());

        location.setDisplayActive(EntityUtils.isActive(location.isActive(), null, location.getInvalidatedDate(), null, null));

        // the active work location detail object will be populated with the parent work location
        // relationships to address, telecom, e-address, and destination info routes
        location.setAddresses(buildAddresses(prsWorkLocation.getGrsAddressesList(), false));
        location.setTelecommunications(buildTelephones(prsWorkLocation.getGrsTelephonesList(), false));
        location.setElectronicAddresses(buildElectronicAddresses(prsWorkLocation.getGrsElectronicAddressesList(), false));
        location.setInformationRoutes(buildInformationRoutes(prsWorkLocation.getPrsInformationRoutesList(), false));
        List<WorkLocationDetailsDto> allDetails = buildWorkLocationDetails(prsWorkLocation.getPrsWorkLocationDetailsList());
        location.setWorkLocationDetails(allDetails);
        return location;

    }

    /**
     * Determines the primary work location of the provider
     *
     * @param workLocations
     */
    public void buildPrimaryWorkLocation(List<WorkLocationDto> workLocations) {
        if (workLocations != null
                && !workLocations.isEmpty()) {
            for (WorkLocationDto location : workLocations) {
                List<WorkLocationDetailsDto> allDetails = location.getWorkLocationDetails();
                if (allDetails != null && !allDetails.isEmpty()) {
                    WorkLocationDetailsDto activeAndDefault = null;
                    WorkLocationDetailsDto onlyActive = null;
                    WorkLocationDetailsDto lastEntry = null;
                    for (WorkLocationDetailsDto aDetails : allDetails) {
                        if (aDetails.isDisplayActive() && aDetails.isDefaultFlag()) {
                            activeAndDefault = aDetails;
                            break;
                        } else if (aDetails.isDisplayActive()) {
                            //TODO take the first ? take the last one?  make array and then pick most appropriate off of what criteria
                            //right now takes the last one so it can search all for active and default
                            onlyActive = aDetails;
                        }
                        //keep track of the highest entry.  active will trump this so no worries.
                        if (lastEntry == null || lastEntry.getId() < aDetails.getId()) {
                            lastEntry = aDetails;
                        }
                    }

                    if (!location.isDisplayActive()) {
                        WorkLocationDetailsDto tempDetails = new WorkLocationDetailsDto();
                        if (lastEntry == null) {
                            tempDetails.setName(INACTIVE_LOCATION);
                        } else {
                            tempDetails.setName(lastEntry.getName());
                        }
                        location.setPrimaryWorkLocationDetails(tempDetails);
                    } else if (allDetails.isEmpty()) {
                        location.setDisplayActive(false);
                        WorkLocationDetailsDto tempDetails = new WorkLocationDetailsDto();
                        tempDetails.setName(UNKNOWN_DETAILS);
                        location.setPrimaryWorkLocationDetails(tempDetails);
                    } else if (activeAndDefault != null) {
                        location.setPrimaryWorkLocationDetails(activeAndDefault);
                    } else if (onlyActive != null) {
                        location.setPrimaryWorkLocationDetails(onlyActive);
                    } else {
                        location.setDisplayActive(false);
                        WorkLocationDetailsDto tempDetails = new WorkLocationDetailsDto();
                        if (lastEntry == null) {
                            tempDetails.setName(INACTIVE_LOCATION);
                        } else {
                            tempDetails.setName(lastEntry.getName());
                        }
                        location.setPrimaryWorkLocationDetails(tempDetails);
                    }
                }
            }
        }

    }

    /**
     * Map the provided entities to data transfer objects.
     *
     * @param prsWorkLocations the entities
     * @return the populated transfer objects.
     */
    public List<WorkLocationDto> buildWorkLocations(List<PrsWorkLocations> prsWorkLocations) {
        List<WorkLocationDto> result = new ArrayList<>();

        //for each worklocation, find active (assume only 1) details record.
        for (PrsWorkLocations prsWorkLocation : prsWorkLocations) {
            result.add(buildWorkLocation(prsWorkLocation));
        }
        Collections.sort(result);
        return result;
    }

    /**
     * Map the provided entity to a data transfer object.
     *
     * @param condition the entity
     * @return the populated transfer object.
     */
    public ConditionsDto buildCondition(PrsConditions condition) {
        ConditionsDto conditionRecord = new ConditionsDto();
        conditionRecord.setId(condition.getPresId());
        if (condition.getPauthPauthId() != null) {
            conditionRecord.setPauthId(condition.getPauthPauthId().getPauthId());
        }

        if (condition.getActiveFlag() != null) {
            conditionRecord.setActive(EntityUtils.booleanValue(condition.getActiveFlag()));
        }
        conditionRecord.setIdentifier(condition.getConditionChid());
        conditionRecord.setRestrictionFlag(EntityUtils.booleanValue(condition.getRestrictionFlag()));
        conditionRecord.setRestrictionExplanationText(condition.getRestrictionExplanationTxt());
        if (condition.getConditionTypeCode() != null) {
            conditionRecord.setTypeId(condition.getConditionTypeCode().getCtlId());
            conditionRecord.setType(condition.getConditionTypeCode().getCtlDescTxt());
            conditionRecord.setTypeCode(condition.getConditionTypeCode().getCtlNameCode());
        }
        conditionRecord.setUserChid(condition.getUserChid());
        conditionRecord.setEffectiveStartDate(condition.getEffectiveStartDate());
        conditionRecord.setEffectiveEndDate(condition.getEffectiveEndDate());
        if (condition.getEndReasonCode() != null) {
            conditionRecord.setEndReasonCode(condition.getEndReasonCode().getCtlNameCode());
            conditionRecord.setEndReasonCodeId(condition.getEndReasonCode().getCtlId());
        }
        conditionRecord.setGenerationNum(condition.getGenerationNum());
        conditionRecord.setDataOwnerCode(condition.getDataOwnerCode().getCtlNameCode());
        conditionRecord.setCreatedDate(condition.getCreatedDts());
        conditionRecord.setInvalidatedDate(condition.getInvalidatedDts());

        conditionRecord.setDisplayActive(EntityUtils.isActive(conditionRecord.isActive(), conditionRecord.getEndReasonCode(), conditionRecord.getInvalidatedDate(), conditionRecord.getEffectiveStartDate(), conditionRecord.getEffectiveEndDate()));
        conditionRecord.setUpdatable(EntityUtils.isUpdatable(conditionRecord.isActive(), conditionRecord.getEndReasonCode(), conditionRecord.getInvalidatedDate()));

        return conditionRecord;
    }

    /**
     * Map the provided entities to data transfer objects.
     *
     * @param conditions the entities
     * @return the populated transfer objects.
     */
    public List<ConditionsDto> buildConditions(final List<PrsConditions> conditions) {
        List<ConditionsDto> result = new ArrayList<>();

        for (PrsConditions condition : conditions) {
            result.add(buildCondition(condition));
        }
        Collections.sort(result, new ProviderDetailDisplaySortingComparator());
        return result;
    }

    /**
     * Map the provided entities to data transfer objects.
     *
     * @param expertiseList the entities
     * @return the populated transfer object.
     */
    public List<ExpertiseDto> buildExpertiseList(final List<PrsProviderExpertises> expertiseList) {
        List<ExpertiseDto> result = new ArrayList<>();

        for (PrsProviderExpertises expertise : expertiseList) {
            result.add(buildExpertise(expertise));
        }
        Collections.sort(result, new ProviderDetailDisplaySortingComparator());
        return result;
    }

    public ExpertiseDto buildExpertise(final PrsProviderExpertises expertise) {

        ExpertiseDto expertiseRecord = new ExpertiseDto();
        if (expertise.getPauthPauthId() != null) {
            expertiseRecord.setPauthId(expertise.getPauthPauthId().getPauthId());
        }
        expertiseRecord.setId(expertise.getAs1Id());
        if (expertise.getActiveFlag() != null) {
            expertiseRecord.setActive(EntityUtils.booleanValue(expertise.getActiveFlag()));
        }
        expertiseRecord.setSourcesCode(expertise.getOriginalSourceProviderCode());
        expertiseRecord.setRoleType(expertise.getProvExpertiseRoleTypeCode().getCtlDescTxt());
        expertiseRecord.setRoleTypeCode(expertise.getProvExpertiseRoleTypeCode().getCtlNameCode());
        expertiseRecord.setTypeId(expertise.getProviderExpertiseTypeCode().getCtlId());
        expertiseRecord.setType(expertise.getProviderExpertiseTypeCode().getCtlDescTxt());
        expertiseRecord.setTypeCode(expertise.getProviderExpertiseTypeCode().getCtlNameCode());
        expertiseRecord.setUserChid(expertise.getUserChid());
        expertiseRecord.setEffectiveStartDate(expertise.getEffectiveStartDate());
        expertiseRecord.setEffectiveEndDate(expertise.getEffectiveEndDate());
        if (expertise.getEndReasonCode() != null) {
            expertiseRecord.setEndReasonCode(expertise.getEndReasonCode().getCtlNameCode());
        }
        expertiseRecord.setGenerationNum(expertise.getGenerationNum());
        expertiseRecord.setDataOwnerCode(expertise.getDataOwnerCode().getCtlNameCode());
        expertiseRecord.setCreatedDate(expertise.getCreatedDts());
        expertiseRecord.setInvalidatedDate(expertise.getInvalidatedDts());

        expertiseRecord.setDisplayActive(EntityUtils.isActive(expertiseRecord.isActive(), expertiseRecord.getEndReasonCode(), expertiseRecord.getInvalidatedDate(), expertiseRecord.getEffectiveStartDate(), expertiseRecord.getEffectiveEndDate()));
        expertiseRecord.setUpdatable(EntityUtils.isUpdatable(expertiseRecord.isActive(), expertiseRecord.getEndReasonCode(), expertiseRecord.getInvalidatedDate()));

        return expertiseRecord;

    }

    /**
     * Map the provided entity to data transfer object.
     *
     * @param credential the entity
     * @return the populated transfer object.
     */
    public CredentialsDto buildCredential(PrsProviderCredentials credential) {
        CredentialsDto credentialRecord = new CredentialsDto();
        if (credential.getPauthPauthId() != null) {
            credentialRecord.setPauthId(credential.getPauthPauthId().getPauthId());
        }
        credentialRecord.setId(credential.getPcredId());
        if (credential.getActiveFlag() != null) {
            credentialRecord.setActive(EntityUtils.booleanValue(credential.getActiveFlag()));
        }
        credentialRecord.setDesignation(credential.getCredentialDesignationTxt());
        credentialRecord.setRegistrationNumber(credential.getRegistrationNumberTxt());
        credentialRecord.setGrantingInstitution(credential.getCredentialGrantingInstTxt());
        credentialRecord.setInstitutionCity(credential.getInstitutionCityTxt());
        if (credential.getInstitutionProvinceCode() != null) {
            credentialRecord.setInstitutionProvState(credential.getInstitutionProvinceCode().getCtlDescTxt());
            credentialRecord.setInstitutionProvStateCode(credential.getInstitutionProvinceCode().getCtlNameCode());
            credentialRecord.setInstitutionProvStateId(credential.getInstitutionProvinceCode().getCtlId());
        }
        if (credential.getInstitutionCountryCode() != null) {
            credentialRecord.setInstitutionCountry(credential.getInstitutionCountryCode().getCtlDescTxt());
            credentialRecord.setInstitutionCountryCode(credential.getInstitutionCountryCode().getCtlNameCode());
            credentialRecord.setInstitutionCountryId(credential.getInstitutionCountryCode().getCtlId());
        }
        if (credential.getEquivalencyFlag() != null) {
            credentialRecord.setEquivalencyFlag(EntityUtils.booleanValue(credential.getEquivalencyFlag()));
        }
        credentialRecord.setYearIssued(credential.getYearCredentialIssuedTxt());
        credentialRecord.setTypeId(credential.getProviderCredentialTypeCode().getCtlId());
        credentialRecord.setType(credential.getProviderCredentialTypeCode().getCtlDescTxt());
        credentialRecord.setTypeCode(credential.getProviderCredentialTypeCode().getCtlNameCode());
        credentialRecord.setDesignation(credential.getCredentialDesignationTxt());
        credentialRecord.setGrantingInstitution(credential.getCredentialGrantingInstTxt());
        credentialRecord.setUserChid(credential.getUserChid());
        credentialRecord.setEffectiveStartDate(credential.getEffectiveStartDate());
        credentialRecord.setEffectiveEndDate(credential.getEffectiveEndDate());
        if (credential.getEndReasonCode() != null) {
            credentialRecord.setEndReasonCode(credential.getEndReasonCode().getCtlNameCode());
        }
        credentialRecord.setGenerationNum(credential.getGenerationNum());
        credentialRecord.setDataOwnerCode(credential.getDataOwnerCode().getCtlNameCode());
        credentialRecord.setCreatedDate(credential.getCreatedDts());
        credentialRecord.setInvalidatedDate(credential.getInvalidatedDts());

        credentialRecord.setDisplayActive(EntityUtils.isActive(credentialRecord.isActive(), credentialRecord.getEndReasonCode(), credentialRecord.getInvalidatedDate(), credentialRecord.getEffectiveStartDate(), credentialRecord.getEffectiveEndDate()));
        credentialRecord.setUpdatable(EntityUtils.isUpdatable(credentialRecord.isActive(), credentialRecord.getEndReasonCode(), credentialRecord.getInvalidatedDate()));
        return credentialRecord;
    }

    /**
     * Map the provided entities to data transfer objects.
     *
     * @param credentials the entities
     * @return the populated transfer objects.
     */
    public List<CredentialsDto> buildCredentials(final List<PrsProviderCredentials> credentials) {
        List<CredentialsDto> result = new ArrayList<>();

        for (PrsProviderCredentials credential : credentials) {
            result.add(buildCredential(credential));
        }
        Collections.sort(result, new ProviderDetailDisplaySortingComparator());
        return result;
    }

    /**
     * Map the provided entities to data transfer objects.
     *
     * @param entity the entity
     * @return the populated transfer object.
     */
    public InformationRouteDto buildInformationRoute(PrsInformationRoutes entity) {
        InformationRouteDto dto = new InformationRouteDto();

        dto.setId(entity.getIrtId());

        if (entity.getPauthPauthId() != null) {
            dto.setPauthId(entity.getPauthPauthId().getPauthId());
        }
        if (entity.getWlWlId() != null) {
            dto.setWlWlId(entity.getWlWlId().getWlId());
        }
        if (entity.getRuRuId() != null) {
            dto.setRuRuId(entity.getRuRuId().getRuId());
        }
        if (entity.getActiveFlag() != null) {
            dto.setActive(EntityUtils.booleanValue(entity.getActiveFlag()));
        }
        dto.setWorkLocationIdentifier(entity.getWorkLocationChid());

        if (entity.getDocumentTypeCode() != null) {
            dto.setDocumentTypeId(entity.getDocumentTypeCode().getCtlId());
            dto.setDocumentType(entity.getDocumentTypeCode().getCtlDescTxt());
            dto.setDocumentTypeCode(entity.getDocumentTypeCode().getCtlNameCode());
        }
        if (entity.getCmnctnPrpsTypCd() != null) {
            dto.setCommunicationPurposeId(entity.getCmnctnPrpsTypCd().getCtlId());
            dto.setCommunicationPurpose(entity.getCmnctnPrpsTypCd().getCtlDescTxt());
            dto.setCommunicationPurposeCode(entity.getCmnctnPrpsTypCd().getCtlNameCode());
        }
        if (entity.getAddressTypeCode() != null) {
            dto.getAddressDto().setTypeId(entity.getAddressTypeCode().getCtlId());
            dto.getAddressDto().setType(entity.getAddressTypeCode().getCtlDescTxt());
            dto.getAddressDto().setTypeCode(entity.getAddressTypeCode().getCtlNameCode());
            GrsAddresses address = findInformationRouteAddress(entity, dto.getCommunicationPurposeId(), dto.getAddressDto(), GrsAddresses.class, "addressTypeCode");
            dto.getAddressDto().setId(address != null ? address.getAddrId() : null);
        }
        if (entity.getTlcmnctnNmbrTypCd() != null) {
            dto.getTelecommunicationDto().setTypeId(entity.getTlcmnctnNmbrTypCd().getCtlId());
            dto.getTelecommunicationDto().setType(entity.getTlcmnctnNmbrTypCd().getCtlDescTxt());
            dto.getTelecommunicationDto().setTypeCode(entity.getTlcmnctnNmbrTypCd().getCtlNameCode());
            GrsTelephones telephone = findInformationRouteAddress(entity, dto.getCommunicationPurposeId(), dto.getTelecommunicationDto(), GrsTelephones.class, "tlcmnctnNmbrTypCd");
            dto.getTelecommunicationDto().setId(telephone != null ? telephone.getPhonId() : null);
        }
        if (entity.getElectronicAddressTypeCode() != null) {
            dto.getElectronicAddressDto().setTypeId(entity.getElectronicAddressTypeCode().getCtlId());
            dto.getElectronicAddressDto().setType(entity.getElectronicAddressTypeCode().getCtlDescTxt());
            dto.getElectronicAddressDto().setTypeCode(entity.getElectronicAddressTypeCode().getCtlNameCode());
            GrsElectronicAddresses address = findInformationRouteAddress(entity, dto.getCommunicationPurposeId(), dto.getElectronicAddressDto(), GrsElectronicAddresses.class, "electronicAddressTypeCode");
            dto.getElectronicAddressDto().setId(address != null ? address.getEaddrId() : null);
        }

        dto.setCommunicationDataOwnerCode(entity.getCmnctnDataOwnerCode());
        dto.setWorkLocationDataOwnerCode(entity.getWorkLocationDataOwnerCode());
        dto.setUserChid(entity.getUserChid());
        dto.setEffectiveStartDate(entity.getEffectiveStartDate());
        dto.setEffectiveEndDate(entity.getEffectiveEndDate());
        if (entity.getEndReasonCode() != null) {
            dto.setEndReasonCode(entity.getEndReasonCode().getCtlNameCode());
        }
        dto.setGenerationNum(entity.getGenerationNum());
        if (entity.getDataOwnerCode() != null) {
            dto.setDataOwnerCode(entity.getDataOwnerCode().getCtlNameCode());
        }
        dto.setCreatedDate(entity.getCreatedDts());
        dto.setInvalidatedDate(entity.getInvalidatedDts());

        dto.setDisplayActive(EntityUtils.isActive(dto.isActive(), dto.getEndReasonCode(), dto.getInvalidatedDate(), dto.getEffectiveStartDate(), dto.getEffectiveEndDate()));
        dto.setUpdatable(EntityUtils.isUpdatable(dto.isActive(), dto.getEndReasonCode(), dto.getInvalidatedDate()));

        return dto;
    }

    /**
     * Map the provided entities to data transfer objects.
     *
     * @param informationRoutes the entities
     * @param ignoreWorkLocations whether to ignore assembly for a specific
     * address relating to a work location
     * @return the populated transfer objects.
     */
    public List<InformationRouteDto> buildInformationRoutes(final List<PrsInformationRoutes> informationRoutes, boolean ignoreWorkLocations) {
        List<InformationRouteDto> result = new ArrayList<>();

        for (PrsInformationRoutes informationRoute : informationRoutes) {
            if (informationRoute.getWlWlId() == null || (informationRoute.getWlWlId() != null && !ignoreWorkLocations)) {
                result.add(buildInformationRoute(informationRoute));
            }
        }
        Collections.sort(result);
        return result;
    }

    /**
     * Map the provided entity to a data transfer object.
     *
     * @param disciplinaryAction the entity
     * @return the populated transfer object.
     */
    public DisciplinaryActionDto buildDisciplinaryAction(final PrsDisciplinaryActions disciplinaryAction) {
        DisciplinaryActionDto disciplinaryActionRecord = new DisciplinaryActionDto();
        if (disciplinaryAction.getPauthPauthId() != null) {
            disciplinaryActionRecord.setPauthId(disciplinaryAction.getPauthPauthId().getPauthId());
        }
        disciplinaryActionRecord.setId(disciplinaryAction.getDiscaId());
        if (disciplinaryAction.getActiveFlag() != null) {
            disciplinaryActionRecord.setActive(EntityUtils.booleanValue(disciplinaryAction.getActiveFlag()));
        }
        disciplinaryActionRecord.setIdentifier(disciplinaryAction.getDisciplinaryActionChid());
        disciplinaryActionRecord.setDisplayFlag(EntityUtils.booleanValue(disciplinaryAction.getDisplayFlag()));
        disciplinaryActionRecord.setDescription(disciplinaryAction.getDescriptionTxt());
        disciplinaryActionRecord.setArchiveDate(disciplinaryAction.getArchiveDate());
        disciplinaryActionRecord.setUserChid(disciplinaryAction.getUserChid());
        disciplinaryActionRecord.setEffectiveStartDate(disciplinaryAction.getEffectiveStartDate());
        disciplinaryActionRecord.setEffectiveEndDate(disciplinaryAction.getEffectiveEndDate());
        if (disciplinaryAction.getEndReasonCode() != null) {
            disciplinaryActionRecord.setEndReasonCode(disciplinaryAction.getEndReasonCode().getCtlNameCode());
            disciplinaryActionRecord.setEndReasonCodeId(disciplinaryAction.getEndReasonCode().getCtlId());
        }
        disciplinaryActionRecord.setGenerationNum(disciplinaryAction.getGenerationNum());
        if (disciplinaryAction.getDataOwnerCode() != null) {
            disciplinaryActionRecord.setDataOwnerCode(disciplinaryAction.getDataOwnerCode().getCtlNameCode());
        }
        disciplinaryActionRecord.setCreatedDate(disciplinaryAction.getCreatedDts());
        disciplinaryActionRecord.setInvalidatedDate(disciplinaryAction.getInvalidatedDts());

        disciplinaryActionRecord.setDisplayActive(EntityUtils.isActive(disciplinaryActionRecord.isActive(), disciplinaryActionRecord.getEndReasonCode(), disciplinaryActionRecord.getInvalidatedDate(), disciplinaryActionRecord.getEffectiveStartDate(), disciplinaryActionRecord.getEffectiveEndDate()));
        disciplinaryActionRecord.setUpdatable(EntityUtils.isUpdatable(disciplinaryActionRecord.isActive(), disciplinaryActionRecord.getEndReasonCode(), disciplinaryActionRecord.getInvalidatedDate()));

        return disciplinaryActionRecord;
    }

    /**
     * Map the provided entities to data transfer objects.
     *
     * @param prsDisciplinaryActions the entities
     * @return the populated transfer objects.
     */
    public List<DisciplinaryActionDto> buildDisciplinaryActions(final List<PrsDisciplinaryActions> prsDisciplinaryActions) {
        List<DisciplinaryActionDto> result = new ArrayList<>();

        for (PrsDisciplinaryActions disciplinaryAction : prsDisciplinaryActions) {
            result.add(buildDisciplinaryAction(disciplinaryAction));
        }
        Collections.sort(result);
        return result;
    }

    /**
     * Map the provided entities to data transfer objects.
     *
     * @param prsConfidentialityIndicators the entities
     * @return the populated transfer objects.
     */
    public List<ConfidentialityIndicatorDto> buildConfidentialityIndicators(final List<PrsConfidentialityIndicators> prsConfidentialityIndicators) {
        List<ConfidentialityIndicatorDto> result = new ArrayList<>();

        for (PrsConfidentialityIndicators confidentialityIndicator : prsConfidentialityIndicators) {
            result.add(buildConfidentialityIndicator(confidentialityIndicator));
        }

        return result;
    }

    /**
     * Map the provided entity to a data transfer object.
     *
     * @param confidentialityIndicator the entity
     * @return the populated transfer object.
     */
    public ConfidentialityIndicatorDto buildConfidentialityIndicator(PrsConfidentialityIndicators confidentialityIndicator) {
        ConfidentialityIndicatorDto confidentialityRecord = new ConfidentialityIndicatorDto();
        if (confidentialityIndicator.getPauthPauthId() != null) {
            confidentialityRecord.setPauthId(confidentialityIndicator.getPauthPauthId().getPauthId());
        }
        confidentialityRecord.setId(confidentialityIndicator.getPconId());
        if (confidentialityIndicator.getActiveFlag() != null) {
            confidentialityRecord.setActive(EntityUtils.booleanValue(confidentialityIndicator.getActiveFlag()));
        }
        confidentialityRecord.setConfidential(confidentialityIndicator.getConfidentialFlag().equals(CodeTableCodes.GrsCtBooleanTypes.YES.getValue()));
        confidentialityRecord.setUserChid(confidentialityIndicator.getUserChid());
        confidentialityRecord.setEffectiveStartDate(confidentialityIndicator.getEffectiveStartDate());
        confidentialityRecord.setEffectiveEndDate(confidentialityIndicator.getEffectiveEndDate());
        if (confidentialityIndicator.getEndReasonCode() != null) {
            confidentialityRecord.setEndReasonCode(confidentialityIndicator.getEndReasonCode().getCtlNameCode());
        }
        confidentialityRecord.setGenerationNum(confidentialityIndicator.getGenerationNum());
        confidentialityRecord.setDataOwnerCode(confidentialityIndicator.getDataOwnerCode().getCtlNameCode());
        confidentialityRecord.setCreatedDate(confidentialityIndicator.getCreatedDts());
        confidentialityRecord.setInvalidatedDate(confidentialityIndicator.getInvalidatedDts());

        confidentialityRecord.setDisplayActive(EntityUtils.isActive(confidentialityRecord.isActive(), confidentialityRecord.getEndReasonCode(), confidentialityRecord.getInvalidatedDate(), confidentialityRecord.getEffectiveStartDate(), confidentialityRecord.getEffectiveEndDate()));
        confidentialityRecord.setUpdatable(EntityUtils.isUpdatable(confidentialityRecord.isActive(), confidentialityRecord.getEndReasonCode(), confidentialityRecord.getInvalidatedDate()));
        return confidentialityRecord;
    }

    /**
     * Creates a ProviderRelationship DTO out of a PrsProviderRelationships
     * object
     *
     * @param prsProviderRelationship PrsProviderRelationships
     * @return ProviderRelationship
     */
    public ProviderRelationshipDto buildProviderRelationship(PrsProviderRelationships prsProviderRelationship) {
        ProviderRelationshipDto providerRelationshipRecord = new ProviderRelationshipDto();
        if (prsProviderRelationship.getPauthPauthId() != null) {
            providerRelationshipRecord.setPauthId(prsProviderRelationship.getPauthPauthId().getPauthId());
        }
        providerRelationshipRecord.setId(prsProviderRelationship.getReprId());
        if (prsProviderRelationship.getActiveFlag() != null) {
            providerRelationshipRecord.setActive(EntityUtils.booleanValue(prsProviderRelationship.getActiveFlag()));
        }
        List<GrsIdentifiers> identifiers = prsProviderRelationship.getPauthPautinRelnWithId().getGrsIdentifiersList();
        /* Invariant: A relationship cannot have been created unless the target Provider has an Identifier.
        
         At this point it is impossible to tell which identifier was used to establish the relationship:
         the Provider could have multiple identifiers, or the identifier could have been inactivated.
         Just show the first identifier.
         */
        providerRelationshipRecord.setIdentifier(identifiers.get(0).getProviderChid());

        providerRelationshipRecord.setTypeId(prsProviderRelationship.getProvRelationshipTypeCode().getCtlId());
        providerRelationshipRecord.setType(prsProviderRelationship.getProvRelationshipTypeCode().getCtlDescTxt());
        providerRelationshipRecord.setTypeCode(prsProviderRelationship.getProvRelationshipTypeCode().getCtlNameCode());
        providerRelationshipRecord.setUserChid(prsProviderRelationship.getUserChid());
        providerRelationshipRecord.setEffectiveStartDate(prsProviderRelationship.getEffectiveStartDate());
        providerRelationshipRecord.setEffectiveEndDate(prsProviderRelationship.getEffectiveEndDate());
        if (prsProviderRelationship.getEndReasonCode() != null) {
            providerRelationshipRecord.setEndReasonCode(prsProviderRelationship.getEndReasonCode().getCtlNameCode());
        }
        providerRelationshipRecord.setGenerationNum(prsProviderRelationship.getGenerationNum());
        providerRelationshipRecord.setDataOwnerCode(prsProviderRelationship.getDataOwnerCode().getCtlNameCode());
        providerRelationshipRecord.setCreatedDate(prsProviderRelationship.getCreatedDts());
        providerRelationshipRecord.setInvalidatedDate(prsProviderRelationship.getInvalidatedDts());

        providerRelationshipRecord.setDisplayActive(EntityUtils.isActive(providerRelationshipRecord.isActive(), providerRelationshipRecord.getEndReasonCode(), providerRelationshipRecord.getInvalidatedDate(), providerRelationshipRecord.getEffectiveStartDate(), providerRelationshipRecord.getEffectiveEndDate()));
        providerRelationshipRecord.setUpdatable(EntityUtils.isUpdatable(providerRelationshipRecord.isActive(), providerRelationshipRecord.getEndReasonCode(), providerRelationshipRecord.getInvalidatedDate()));
        //PLR-1071 : Fix (View Provider Details - Update Provider Relationship)
        if (identifiers.size() > 0) {
            PrsCtIdentifierTypes identifierTypeCode = identifiers.get(0).getIdentifierTypeCode();
            providerRelationshipRecord.setIdentifierTypeId(identifierTypeCode.getCtlId());
            providerRelationshipRecord.setIdentifierTypeCode(identifierTypeCode.getCtlNameCode());
        }
        if (prsProviderRelationship.getProvRelationshipTypeCode() != null) {
            providerRelationshipRecord.setRelationshipTypeId(prsProviderRelationship.getProvRelationshipTypeCode().getCtlId());
            providerRelationshipRecord.setRelationshipTypeCode(prsProviderRelationship.getProvRelationshipTypeCode().getCtlNameCode());
        }
        if (prsProviderRelationship.getTargetProvRelnTypeCode() != null) {
            providerRelationshipRecord.setTargetRelationshipTypeId(prsProviderRelationship.getTargetProvRelnTypeCode().getCtlId());
            providerRelationshipRecord.setTargetRelationshipTypeCode(prsProviderRelationship.getTargetProvRelnTypeCode().getCtlNameCode());
            providerRelationshipRecord.setTargetRelationshipTypeName(prsProviderRelationship.getTargetProvRelnTypeCode().getCtlDescTxt());
        }

        return providerRelationshipRecord;
    }

    /**
     * Map the provided entities to data transfer objects.
     *
     * @param prsProviderRelationships the entities
     * @return the populated transfer objects.
     */
    public List<ProviderRelationshipDto> buildProviderRelationships(final List<PrsProviderRelationships> prsProviderRelationships) {
        List<ProviderRelationshipDto> result = new ArrayList<>();

        for (PrsProviderRelationships prsProviderRelationship : prsProviderRelationships) {
            result.add(buildProviderRelationship(prsProviderRelationship));
        }
        Collections.sort(result);
        return result;
    }

    /**
     * Map the provided entities to data transfer objects.
     *
     * @param prsProvRuRelns the entities
     * @return the populated transfer objects.
     */
    public List<RegistryUserRelationshipDto> buildProviderRURelationships(final List<PrsProvRuRelns> prsProvRuRelns) {
        List<RegistryUserRelationshipDto> result = new ArrayList<>();

        for (PrsProvRuRelns prsProvRuReln : prsProvRuRelns) {
            result.add(buildProviderRURelationship(prsProvRuReln));
        }
        Collections.sort(result);
        return result;
    }

    public RegistryUserRelationshipDto buildProviderRURelationship(PrsProvRuRelns entity) {
        RegistryUserRelationshipDto dto = new RegistryUserRelationshipDto();
        copyCommonProperties(entity, dto);

        if (entity.getPauthPauthId() != null) {
            dto.setPauthId(entity.getPauthPauthId().getPauthId());
        }
        dto.setId(entity.getRurelId());
        dto.setDataOwnerCode(entity.getDataOwnerCode().getCtlNameCode());

        dto.setRegistryUserChid(entity.getRuRuRelnWithId().getPartyPartyId().getRegistryUserOrgChid());
        dto.setRegUserTypeId(entity.getRuRuRelnWithId().getRuTypeCode().getCtlId());
        dto.setRegUserType(entity.getRuRuRelnWithId().getRuTypeCode().getCtlDescTxt());
        dto.setRegUserTypeCode(entity.getRuRuRelnWithId().getRuTypeCode().getCtlNameCode());
        dto.setTypeId(entity.getRuRelationshipTypeCode().getCtlId());
        dto.setType(entity.getRuRelationshipTypeCode().getCtlDescTxt());
        dto.setTypeCode(entity.getRuRelationshipTypeCode().getCtlNameCode());
        dto.setDisplayActive(EntityUtils.isActive(dto.isActive(), dto.getEndReasonCode(), dto.getInvalidatedDate(), dto.getEffectiveStartDate(), dto.getEffectiveEndDate()));
        dto.setUpdatable(EntityUtils.isUpdatable(dto.isActive(), dto.getEndReasonCode(), dto.getInvalidatedDate()));
        dto.setGenerationNum(entity.getGenerationNum());

        return dto;
    }

    private void copyCommonProperties(EntityCommon entity, AbstractProviderDetail dto) {
        // DSHARPE TODO: Almost every converter in this class can use this method.
        if (entity.getActiveFlag() != null) {
            dto.setActive(EntityUtils.booleanValue(entity.getActiveFlag()));
        }
        if (entity.getEffectiveStartDate() != null) {
            dto.setEffectiveStartDate(entity.getEffectiveStartDate());
        }
        if (entity.getEffectiveEndDate() != null) {
            dto.setEffectiveEndDate(entity.getEffectiveEndDate());
        }
        dto.setGenerationNum(dto.getGenerationNum());
        if (entity.getInvalidatedDts() != null) {
            dto.setInvalidatedDate(entity.getInvalidatedDts());
        }
        if (entity.getUserChid() != null) {
            dto.setUserChid(entity.getUserChid());
        }
        if (entity.getCreatedDts() != null) {
            dto.setCreatedDate(entity.getCreatedDts());
        }
        if (entity.getEndReasonCode() != null) {
            dto.setEndReasonCode(entity.getEndReasonCode().getCtlNameCode());
        }
    }

    /**
     * Populates a list of note transfer objects from a list of note entities.
     *
     * @param prsNotes the list of note entities
     * @return the list of note transfer objects
     */
    public List<NoteDto> buildNotes(final List<PrsNotes> prsNotes) {
        List<NoteDto> result = new ArrayList<>();

        for (PrsNotes prsNote : prsNotes) {
            result.add(buildNote(prsNote));
        }
        Collections.sort(result);
        return result;
    }

    /**
     * Maps a note entity to a note transfer object
     *
     * @param prsNote the entity to map
     * @return the populated transfer object
     */
    public NoteDto buildNote(PrsNotes prsNote) {
        NoteDto noteRecord = new NoteDto();
        if (prsNote.getPauthPauthId() != null) {
            noteRecord.setPauthId(prsNote.getPauthPauthId().getPauthId());
        }
        noteRecord.setId(prsNote.getNotId());
        noteRecord.setNoteText(prsNote.getNoteText());
        noteRecord.setIdentifier(prsNote.getNoteChid());
        if (prsNote.getActiveFlag() != null) {
            noteRecord.setActive(EntityUtils.booleanValue(prsNote.getActiveFlag()));
        }
        noteRecord.setUserChid(prsNote.getUserChid());
        noteRecord.setEffectiveStartDate(prsNote.getEffectiveStartDate());
        noteRecord.setEffectiveEndDate(prsNote.getEffectiveEndDate());
        if (prsNote.getEndReasonCode() != null) {
            noteRecord.setEndReasonCode(prsNote.getEndReasonCode().getCtlNameCode());
        }
        noteRecord.setGenerationNum(prsNote.getGenerationNum());
        noteRecord.setDataOwnerCode(prsNote.getDataOwnerCode().getCtlNameCode());
        noteRecord.setCreatedDate(prsNote.getCreatedDts());
        noteRecord.setInvalidatedDate(prsNote.getInvalidatedDts());
        noteRecord.setDisplayActive(EntityUtils.isActive(noteRecord.isActive(), noteRecord.getEndReasonCode(), noteRecord.getInvalidatedDate(), noteRecord.getEffectiveStartDate(), noteRecord.getEffectiveEndDate()));
        noteRecord.setUpdatable(EntityUtils.isUpdatable(noteRecord.isActive(), noteRecord.getEndReasonCode(), noteRecord.getInvalidatedDate()));
        return noteRecord;
    }

    /**
     * finds and returns the address entity
     *
     * @param <T> - Address entity type : Can be GrsAddresses, GrsTelephones,
     * GrsElectornicAddresses
     * @param infoRoute - Information route entity
     * @param commnPurpose - communication purpose code id
     * @param detail - The address to : can be AddressDto, TelephoneDto,
     * ElectronicAddressDto
     * @param entityClass - The entity class of <T>
     * @param addressTypeCodeField - Address type entity field name
     * @return - found address/telephone/eAddress entity
     */
    private <T> T findInformationRouteAddress(PrsInformationRoutes infoRoute, Long commnPurpose, AbstractProviderDetail detail, Class<T> entityClass, String addressTypeCodeField) {
        StringBuilder queryBuilder = new StringBuilder();
        Long pauthId;
        if (infoRoute.getPauthPauthId() != null) {
            pauthId = infoRoute.getPauthPauthId().getPauthId();
        } else {
            pauthId = infoRoute.getWlWlId().getPauthPauthId().getPauthId();
        }
        if (infoRoute.getWorkLocationChid() != null) {
            queryBuilder.append("select a from ").append(entityClass.getSimpleName()).append(" a join a.wlWlId w where w.pauthPauthId.pauthId = :pauthId ");
            queryBuilder.append("and w.workLocationChid = :wlChid ");
            queryBuilder.append("and a.cmnctnPrpsTypCd.ctlId = :commnPurpose ");
            queryBuilder.append("and a.").append(addressTypeCodeField).append(".ctlId = :typeCode ");
            queryBuilder.append("and a.dataOwnerCode.ctlNameCode = :commnDataOwnerCode ");
            queryBuilder.append("and a.endReasonCode is null");
        } else {
            queryBuilder.append("select a from ").append(entityClass.getSimpleName()).append(" a where a.pauthPauthId.pauthId = :pauthId ");
            queryBuilder.append("and a.cmnctnPrpsTypCd.ctlId = :commnPurpose ");
            queryBuilder.append("and a.").append(addressTypeCodeField).append(".ctlId = :typeCode ");
            queryBuilder.append("and a.dataOwnerCode.ctlNameCode = :commnDataOwnerCode ");
            queryBuilder.append("and a.endReasonCode is null");
        }
        TypedQuery<T> query = em.createQuery(queryBuilder.toString(), entityClass);
        query.setParameter("pauthId", pauthId);
        query.setParameter("commnPurpose", commnPurpose);
        query.setParameter("typeCode", detail.getTypeId());
        query.setParameter("commnDataOwnerCode", infoRoute.getCmnctnDataOwnerCode());
        if (infoRoute.getWorkLocationChid() != null) {
            query.setParameter("wlChid", infoRoute.getWorkLocationChid());
        }
        List<T> addresses = query.getResultList();
        if (addresses.size() == 1) {
            return addresses.get(0);
        } else {
            return null;
        }
    }

    /**
     * Return the primary chid from list of registry identifiers. Primary chid
     * is the registry identifier's raw identifier
     *
     * @param registryIdentifiers
     * @return
     */
    private String findPrimaryChid(List<RegistryIdentifierDto> registryIdentifiers) {
        String primaryChid = null;
        if (registryIdentifiers != null && !registryIdentifiers.isEmpty()) {
            Collections.sort(registryIdentifiers);
            primaryChid = registryIdentifiers.get(0).getRawIdentifier();
            primaryChid = StringUtils.stripStart(primaryChid, "0");
        }
        return primaryChid;
    }
}
