package ca.bc.gov.health.plr.service.registry.user;

import ca.bc.gov.health.plr.service.provider.*;
import ca.bc.gov.health.plr.dto.converter.DistributionDtoConverter;
import ca.bc.gov.health.plr.dto.reguser.DistributionDto;
import ca.bc.gov.health.plr.dto.reguser.RegistryUserDetailsConverter;
import ca.bc.gov.health.plr.ejb.entity.GrsDistributionProfiles;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.interceptors.ChangeInterceptor;
import ca.bc.gov.health.plr.service.validators.DistributionAddressValidator;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.interceptor.Interceptors;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 * Service class for persisting Distribution records
 *
 * @author sumesh.kariyil
 */
@Stateless
public class MaintainDistributionService {

    /**
     * Entity Manager for persistence
     */
    @PersistenceContext(unitName = "PLR-ejbPU")
    protected EntityManager em;

    @EJB
    private JournalService<GrsDistributionProfiles> journalService;
    /**
     * Converter object for going between DTOs and Entities
     */
    @EJB
    private DistributionDtoConverter distributionDtoConverter;
    
    @EJB
    private DistributionAddressValidator distributionAddressValidator;
    
    @EJB
    private RegistryUserDetailsConverter registryUserDetailsConverter;
   

    /**
     * Query a fresh complete list of distributions related to a specific
     * registry user.
     * 
     * @param distributionDto
     * @return a list of fresh note transfer objects
     */
    public List<DistributionDto> refreshAllDistributions(DistributionDto distributionDto) {
        if (distributionDto.getRuRuId() != null) {
            GrsRegistryUsers regUser = em.find(GrsRegistryUsers.class, distributionDto.getRuRuId());
            return registryUserDetailsConverter.getDistributions(regUser);
        }
        return null;
    }

    /**
     * Persists an GrsDistributionProfiles to the database
     *
     * @param distributionDto distributionDto
     * @return DistributionDto with values refreshed from the database
     * @throws ca.bc.gov.health.plr.service.provider.DuplicateRecordException
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Interceptors({ChangeInterceptor.class})
    public DistributionDto saveDistribution(DistributionDto distributionDto) throws DuplicateRecordException, EntityValidationException {
        GrsDistributionProfiles newRecord = distributionDtoConverter.toEntity(distributionDto); 
        distributionAddressValidator.validate(newRecord.getTransmissionAddressTxt());
        newRecord = journalService.journal(newRecord);
        return registryUserDetailsConverter.buildDistribution(newRecord);
    }

    /**
     * Bulids a dto from a record in the database based on primary key (ID)
     *
     * @param toRefresh - a dto with an ID
     * @return - dto built from database record or null
     */
    public DistributionDto refresh(DistributionDto toRefresh) {
        GrsDistributionProfiles found = em.find(GrsDistributionProfiles.class, toRefresh.getId());
        DistributionDto toSendBack = registryUserDetailsConverter.buildDistribution(found);
        return toSendBack;
    }

}
