package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.DtoMetaData;
import ca.bc.gov.health.plr.dto.provider.ProviderDetailsUtil;
import ca.bc.gov.health.plr.ejb.entity.GrsAccessProfiles;
import ca.bc.gov.health.plr.ejb.entity.GrsIdentifiers;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.OwnableEntity;
import ca.bc.gov.health.plr.ejb.entity.PrsCtDataOwnerCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.util.EntityUtils;
import ca.bc.gov.health.plr.interceptors.TestUserInterceptor;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.producer.type.Authenticated;
import ca.bc.gov.health.plr.producer.type.User;
import ca.bc.gov.health.plr.service.provider.security.AuthorizationService;
import ca.bc.gov.health.plr.service.provider.security.LeafPermission;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.enterprise.inject.Instance;
import javax.inject.Inject;
import javax.interceptor.Interceptors;

/**
 *
 * @author sumesh.kariyil
 */
@Stateless
@Interceptors({TestUserInterceptor.class})
public class ProviderAuthorizationService {
    
    private static final Logger logger = Logger.getLogger(ProviderAuthorizationService.class.getName());

    @Inject
    @Authenticated
    private Instance<User> user;
    
    @EJB
    AuthorizationService authorizationService;

    @EJB
    CodesDao codesDao;
    
    EntityValidationException errorResult;

    @PostConstruct
    public void init() {
        BusinessRuleKeys key = BusinessRuleKeys.ERROR_OWNER_MISMATCH;
        String message = BusinessRuleMessageDao.getMessageResource(key);
        errorResult = new EntityValidationException(message);
    }

    /**
     *
     * @param provider
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    public void applyDataOwnerCode(PrsProviders provider) throws EntityValidationException {
        checkDataOwnerCode(provider.getGrsAddressesList(), provider.getHptCode());
        checkDataOwnerCode(provider.getGrsOrgNamesList(), provider.getHptCode());
        checkDataOwnerCode(provider.getGrsPersonNamesList(), provider.getHptCode());
        checkDataOwnerCode(provider.getGrsTelephonesList(), provider.getHptCode());
        checkDataOwnerCode(provider.getPrsStatusesList(), provider.getHptCode());
        checkDataOwnerCode(provider.getPrsDisciplinaryActionsList(), provider.getHptCode());
        checkDataOwnerCode(provider.getPrsConfidentialityIndicatorsList(), provider.getHptCode());
        checkDataOwnerCode(provider.getPrsConditionsList(), provider.getHptCode());
        checkDataOwnerCode(provider.getPrsDemographicDetailsList(), provider.getHptCode());
        checkDataOwnerCode(provider.getPrsProviderCredentialsList(), provider.getHptCode());
        checkDataOwnerCode(provider.getPrsProviderExpertisesList(), provider.getHptCode());
        checkDataOwnerCode(provider.getPrsProvRuRelnsList(), provider.getHptCode());
        checkDataOwnerCode(provider.getPrsInformationRoutesList(), provider.getHptCode());
        checkDataOwnerCode(provider.getPrsWorkLocationsList(), provider.getHptCode());
        checkDataOwnerCode(provider.getPrsProviderRelationshipsList(), provider.getHptCode());
        checkDataOwnerCode(provider.getGrsIdentifiersList(), provider.getHptCode());
        checkDataOwnerCode(provider.getPrsNotesList(), provider.getHptCode());
        checkDataOwnerCode(provider.getGrsElectronicAddressesList(), provider.getHptCode());
    }

    /**
     *
     * @param <T>
     * @param list
     * @param ctProviderRoleTypes
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    public <T extends OwnableEntity> void checkDataOwnerCode(List<T> list, PrsCtProviderRoleTypes ctProviderRoleTypes) throws EntityValidationException {
        if (list != null && !list.isEmpty()) {
            for (OwnableEntity entity : list) {
                checkDataOwnerCode(entity, ctProviderRoleTypes, ProviderDetailsUtil.getDataObjectName(entity.getClass()));
            }
        }
    }
    
    /**
     *
     * @param <T>
     * @param entity
     * @param provider
     * @throws EntityValidationException
     */
    public <T extends OwnableEntity> void checkDataOwnerCode(T entity, PrsProviders provider) throws EntityValidationException {
        checkDataOwnerCode(entity, provider.getHptCode(), ProviderDetailsUtil.getDataObjectName(entity.getClass()));
    }
    
    /**
     *
     * @param <T>
     * @param entity
     * @param provider
     * @return 
     * @throws EntityValidationException
     */
    public <T extends OwnableEntity> String getDataOwnerCode(T entity, PrsProviders provider) throws EntityValidationException {
        return getDataOwnerCode(entity, provider.getHptCode(), ProviderDetailsUtil.getDataObjectName(entity.getClass()));
    }
    
    /**
     *
     * @param <T>
     * @param entity
     * @param provider
     * @throws EntityValidationException
     */
    public <T extends OwnableEntity> void checkWlDataOwnerCode(T entity, PrsProviders provider) throws EntityValidationException {
        if(provider != null && provider.getHptCode() != null){            
            checkDataOwnerCode(entity, provider.getHptCode(), ProviderDetailsUtil.getWlDataObjectName(entity.getClass()));
        }
    }
    
    /**
     *
     * @param entity
     * @param ctProviderRoleTypes
     * @param dtoMetaData
     * @return 
     * @throws EntityValidationException
     */
    public List<String> getAllowedWlDataOwnerCodes(Class<?> entity, PrsCtProviderRoleTypes ctProviderRoleTypes, DtoMetaData dtoMetaData) 
            throws EntityValidationException {
        return getAllowedDataOwnerCodes(ctProviderRoleTypes,
            ProviderDetailsUtil.getWlDataObjectName(entity), ProviderDetailsUtil.getDtoRecordTypeValues(dtoMetaData));
    }
    
    
    /**
     * Returns the list of data owner codes which have write access to the table for the current user
     * 
     * @param entity
     * @param ctProviderRoleTypes
     * @param dtoMetaData
     * @return 
     * @throws EntityValidationException
     */
    public List<String> getAllowedDataOwnerCodes(Class<?> entity, PrsCtProviderRoleTypes ctProviderRoleTypes, DtoMetaData dtoMetaData) throws EntityValidationException {
        return getAllowedDataOwnerCodes(ctProviderRoleTypes,
                ProviderDetailsUtil.getDataObjectName(entity), ProviderDetailsUtil.getDtoRecordTypeValues(dtoMetaData));
    }
    
    private List<String> getAllowedDataOwnerCodes(PrsCtProviderRoleTypes ctProviderRoleTypes, 
            String tableName, List<String> recordTypes) {
        List<String> applicableDataOwnerCodes = new ArrayList<>();
        List<String> dataOwnerCodes = getDataOwnerCodes(user.get().getUserEntity());
        for(String dataOwnerCode : dataOwnerCodes){
            boolean isAllowed = true;
            List<LeafPermission> permissions = new ArrayList<>();
            for (String recordType : recordTypes) {
                LeafPermission leafPermission = authorizationService.getLeafPermission(user.get().getUserEntity(), tableName, recordType, null,
                        ctProviderRoleTypes, dataOwnerCode, AuthorizationService.AccessType.WRITE);
                if (leafPermission != null) {
                    permissions.add(leafPermission);
                }
            }
            if (permissions.isEmpty()) {
                isAllowed = false;
            } else {
                for (LeafPermission permission : permissions) {
                    isAllowed = isAllowed && permission.isWritable();
                }
            }
            if(isAllowed){
                applicableDataOwnerCodes.add(dataOwnerCode);
            }
        }
        return applicableDataOwnerCodes;
    }
    
    /**
     *
     * @param <T>
     * @param entity
     * @param registryUser
     * @param ctProviderRoleTypes
     * @param clientType
     * @throws EntityValidationException
     */
    private <T extends OwnableEntity> void checkDataOwnerCode(T entity, PrsCtProviderRoleTypes ctProviderRoleTypes,
             String tableName) throws EntityValidationException {

        String applicableDataOwner = getDataOwnerCode(entity, ctProviderRoleTypes, tableName);        
        if(applicableDataOwner != null){
            if(entity.getDataOwnerCode() == null){
                entity.setDataOwnerCode(codesDao.lookup(PrsCtDataOwnerCodes.class, applicableDataOwner));
            }
        } else {
            logger.log(Level.WARNING, "{0}:::{1}", new Object[]{errorResult.getMessage(), tableName});
            throw errorResult;
        }
    }
    
    /**
     *
     * @param <T>
     * @param entity
     * @param ctProviderRoleTypes
     * @param tableName
     * @return 
     * @throws EntityValidationException
     */
    private <T extends OwnableEntity> String getDataOwnerCode(T entity, PrsCtProviderRoleTypes ctProviderRoleTypes,
             String tableName) throws EntityValidationException {
        List<String> dataOwnerCodes = getDataOwnerCodes(entity, user.get().getUserEntity());
        String applicableDataOwner = null;
        for(String dataOwnerCode : dataOwnerCodes){
            boolean isAllowed = true;
            List<String> recordTypes = ProviderDetailsUtil.getEntityRecordTypeValues(entity);
            List<LeafPermission> permissions = new ArrayList<>();
            for (String recordType : recordTypes) {
                LeafPermission leafPermission = authorizationService.getLeafPermission(user.get().getUserEntity(), tableName, recordType, null,
                        ctProviderRoleTypes, dataOwnerCode, AuthorizationService.AccessType.WRITE);
                // There could be a scenario, where the user don't have access to ANY. But have access to recordType (for e.g, BC). 
                // But if the entity is having more than 1 record types, we cannot expect that there will be permissions defined for rest of the record types
                // In that case if the user have permission to One record type and don't have RECORDS to others, consider the permission for record type present in the permissions table
                if (leafPermission != null) {
                    permissions.add(leafPermission);
                }
            }
            if (permissions.isEmpty()) {
                isAllowed = false;
            } else {
                for (LeafPermission permission : permissions) {
                    isAllowed = isAllowed && permission.isWritable();
                }
            }
            if(isAllowed){
                applicableDataOwner = dataOwnerCode;
                break;
            }
        }
        
        return applicableDataOwner;
    }

    private <T extends OwnableEntity> List<String> getDataOwnerCodes(T entity, GrsRegistryUsers registryUser) {
        List<String> dataOwnerCodes = new ArrayList<>();
        if(entity.getDataOwnerCode() != null){
            dataOwnerCodes.add(entity.getDataOwnerCode().getCtlNameCode());
        } else {
            dataOwnerCodes.addAll(getDataOwnerCodes(registryUser));
        }
        return dataOwnerCodes;
    }
    
    private List<String> getDataOwnerCodes(GrsRegistryUsers registryUser) {
        List<String> dataOwnerCodes = new ArrayList<>();
        for (GrsAccessProfiles accessProfile : registryUser.getGrsAccessProfilesList()) {
            if (EntityUtils.isActive(EntityUtils.booleanValue(accessProfile.getActiveFlag()),
                    accessProfile.getEndReasonCode() != null ? accessProfile.getEndReasonCode().getCtlNameCode() : null,
                    accessProfile.getInvalidatedDts(),
                    accessProfile.getEffectiveStartDate(), accessProfile.getEffectiveEndDate())) {
                dataOwnerCodes.add(accessProfile.getDataOwnerCode().getCtlNameCode());
            }
        }
        return dataOwnerCodes;
    }
    
    

}
