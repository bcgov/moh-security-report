package ca.bc.gov.health.plr.rule.provider.search;

import ca.bc.gov.health.plr.interceptors.TestUserInterceptor;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.producer.type.Authenticated;
import ca.bc.gov.health.plr.producer.type.User;
import ca.bc.gov.health.plr.rule.BusinessRule;
import ca.bc.gov.health.plr.rule.BusinessRuleMessage;
import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import ca.bc.gov.health.plr.service.provider.security.AuthorizationService;
import java.util.Arrays;
import java.util.Set;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.ejb.LocalBean;
import javax.enterprise.inject.Instance;
import javax.inject.Inject;
import javax.interceptor.Interceptors;

/**
 * Implementation of REQ-00735, "Search Results Limited By Data Permissions". Checks if a specified Provider Role Type is
 * within the set of allowed Role Types for the given Registry User.
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@Stateless
@LocalBean
@Interceptors({TestUserInterceptor.class})
public class ValidateSearchProviderTypePermission implements BusinessRule {

    @EJB
    private AuthorizationService authorizationService;
    @Inject
    @Authenticated
    private Instance<User> user;
    

    public BusinessRuleResult validate(String providerRoleTypeName) {

        Set<String> allowedProviderTypes = authorizationService.getAllowedProviderTypes(user.get().getUserEntity());
        if (allowedProviderTypes.contains(providerRoleTypeName)) {
            return new BusinessRuleResult();
        } else {
            BusinessRuleKeys key = BusinessRuleKeys.ERROR_SEARCH_PROVIDERTYPE_PERMISSION;
            String message = BusinessRuleMessageDao.getMessageResource(key);
            BusinessRuleMessage businessRuleMessage = new BusinessRuleMessage(message, BusinessRuleMessage.Severity.ERROR);
            return new BusinessRuleResult(false, Arrays.asList(businessRuleMessage));
        }

    }

}
