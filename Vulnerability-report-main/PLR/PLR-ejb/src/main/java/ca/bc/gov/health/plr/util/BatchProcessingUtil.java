/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.util;

import ca.bc.gov.health.plr.dto.AddressValidationStatsDto;
import ca.bc.gov.health.plr.ejb.entity.PlrProcesses;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;

/**
 *
 * @author tim.osse
 */
@Stateless
@LocalBean
public class BatchProcessingUtil {
    
    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;
    
    private Map<String, String> batchDetails;
    
    
    public void saveBatchRunResults(){
        
    }
    public Map<String, String> getLastBatchRunResults(){
        List<PlrProcesses> processStats = em.createNamedQuery("PlrProcesses.findAll", PlrProcesses.class).getResultList();
        Map<String, String> lastBatchDetails = new HashMap<String, String>();
        
        for(PlrProcesses item : processStats){
            lastBatchDetails.put(item.getName(), item.getValue());
        }
        return lastBatchDetails;
    }
    
    public boolean isRunning(){
        String runningName = "plr.batch.address.process.running";
        PlrProcesses plrProcesses = em.createNamedQuery("PlrProcesses.isRunning", PlrProcesses.class).setParameter("name",runningName).getSingleResult();
        if(plrProcesses.getValue().isEmpty()){
            return false;
        }else {
            return Boolean.parseBoolean(plrProcesses.getValue());
        }
    }
    
    public void setRunning(String status){
        em.createNamedQuery("PlrProcesses.setRunning", PlrProcesses.class).setParameter("newVal",status).setParameter("nameVal","plr.batch.address.process.running").executeUpdate();
    }
    
    public void saveRunResults(AddressValidationStatsDto addressValidationStatsDto){
        
        Map<String, String> addrStats = addressValidationStatsDto.getStatisticFieldValueList();
        
        for(Map.Entry<String, String> entry : addrStats.entrySet()){
            String nameVal = entry.getKey();
            try{
                PlrProcesses plrProcesses = em.createNamedQuery("PlrProcesses.exists", PlrProcesses.class).setParameter("nameVal",nameVal).getSingleResult();
            } catch (NoResultException e){
                PlrProcesses plrProcess = new PlrProcesses();
                plrProcess.setName(entry.getKey());
                plrProcess.setValue(entry.getValue());
                em.persist(plrProcess);
                return;
            }
            em.createNamedQuery("PlrProcesses.update", PlrProcesses.class).setParameter("newVal",entry.getValue()).setParameter("nameVal",entry.getKey()).executeUpdate();
            
        }
    }
}
