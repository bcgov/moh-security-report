package ca.bc.gov.health.plr.dto.provider;

import ca.bc.gov.health.plr.dto.MessageDataBlockDto;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.ejb.entity.GrsOrgNames;
import ca.bc.gov.health.plr.ejb.entity.PrsCtNameTypes;
import ca.bc.gov.health.plr.rule.provider.AcceptableCharacterValidator;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeName;
import ca.bc.gov.health.plr.rule.provider.AcceptableOrganizationName;
import ca.bc.gov.health.plr.rule.provider.AcceptableOrganizationNameValidator;
import java.lang.reflect.Method;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.ObjectUtils;
import javax.validation.constraints.NotBlank;
import org.joda.time.DateTime;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class OrgNameDto extends AbstractProviderDetail implements MessageDataBlockDto, Comparable<OrgNameDto> {

    boolean preferred;
    @NotBlank(message = "{error.notblank.part1of2}Name{error.notblank.part2of2}")
    @AcceptableOrganizationName
    @Size(min = 1, max = 100, message = "{constraints.size.message.part1of2} 'Name' {constraints.size.message.part2of2}")
    private String name;
    @AcceptableOrganizationName
    @Size(max = 200, message = "{constraints.size.message.part1of2} 'Long Name' {constraints.size.message.part2of2}")
    private String longName;

    private Long ruRuId;

    @AcceptableCodeName(clazz = PrsCtNameTypes.class, code = "Name Type")
    private String typeCode;
    @NotNull(message = "{error.notblank.part1of2} Organization Name Effective Start Date {error.notblank.part2of2}")
    private Date effectiveStartDate;
    private Date effectiveEndDate;
    private Long typeId;

    /**
     * @return the preferred
     */
    public boolean isPreferred() {
        return preferred;
    }

    /**
     * @param preferred the preferred to set
     */
    public void setPreferred(boolean preferred) {
        this.preferred = preferred;
    }

    /**
     * @return the name
     */
    public String getName() {
        return name;
    }

    /**
     * @param name the name to set
     */
    public void setName(String name) {
        this.name = handleInvalidNameCharacters(name);
    }

    /**
     * @return the longName
     */
    public String getLongName() {
        return longName;
    }

    /**
     * @param longName the longName to set
     */
    public void setLongName(String longName) {
        this.longName = handleInvalidNameCharacters(longName);
    }

    @Override
    public int compareTo(OrgNameDto o) {

        final int BEFORE = -1;
        final int EQUAL = 0;
        final int AFTER = 1;
        //compare active
        if (!this.isActive() && o.isActive()) {
            return BEFORE;
        }
        if (this.isActive() && !o.isActive()) {
            return AFTER;
        }
        //todo date compare
        DateTime thisDate = new DateTime(this.getCreatedDate());
        DateTime thatDate = new DateTime(o.getCreatedDate());
        if (thisDate.isAfter(thatDate)) {
            return AFTER;
        }
        //compare indNames
        int compare = ObjectUtils.compare(o.getName(), this.getName());
        if (compare != EQUAL) {
            return compare;
        }
        return ObjectUtils.compare(o.getLongName(), this.getLongName());

    }

    public Long getRuRuId() {
        return ruRuId;
    }

    public void setRuRuId(Long ruRuId) {
        this.ruRuId = ruRuId;
    }

    @Override
    public String[] getMessageDataBlockFields() {
        return new String[]{"typeCode"};
    }

    @Override
    public ca.bc.gov.health.plr.dto.provider.esb.AbstractProviderDetail toEsbVersion() throws Exception {
        ca.bc.gov.health.plr.dto.provider.esb.OrgNameDto esbVersion = new ca.bc.gov.health.plr.dto.provider.esb.OrgNameDto();

        PropertyUtils.copyProperties(esbVersion, this);

        return esbVersion;

    }

    @Override
    public String getTypeCode() {
        return typeCode;
    }

    @Override
    public void setTypeCode(String typeCode) {
        this.typeCode = typeCode;
    }

    @Override
    public String getBlockName() {
        return "Name";
    }

    /**
     * @return the effectiveStartDate
     */
    @Override
    public Date getEffectiveStartDate() {
        return effectiveStartDate;
    }

    /**
     * @param effectiveStartDate the effectiveStartDate to set
     */
    @Override
    public void setEffectiveStartDate(Date effectiveStartDate) {
        this.effectiveStartDate = effectiveStartDate;
    }

    @Override
    public Date getEffectiveEndDate() {
        return effectiveEndDate;
    }

    @Override
    public void setEffectiveEndDate(Date effectiveEndDate) {
        this.effectiveEndDate = effectiveEndDate;
    }

    public Long getTypeId() {
        return typeId;
    }

    public void setTypeId(Long typeId) {
        this.typeId = typeId;
    }

    @Override
    public void addToProviderDto(ProviderDto providerDto) {
        providerDto.getOrgNames().add(this);
    }

    @Override
    public Class getEntityClass() {
        return GrsOrgNames.class;
    }

    @Override
    public Method getDtoConverterMethod() {
        Method method = null;
        try {
            method = ProviderDtoConverter.class.getMethod("buildOrgName", GrsOrgNames.class);
        } catch (NoSuchMethodException | SecurityException ex) {
            Logger.getLogger(AddressDto.class.getName()).log(Level.SEVERE, null, ex);
        }

        // return null is OK
        return method;
    }

    /**
     * This method will handle the invalid non-acceptable characters for the
     * organization name/description.
     *
     * @param value
     * @return
     */
    private static String handleInvalidNameCharacters(String value) {
        return AcceptableCharacterValidator.handleInvalidCharacters(value,
                AcceptableOrganizationNameValidator.VALID_ORGANIZATION_NAME_CHARS_PATTERN);
    }

}
