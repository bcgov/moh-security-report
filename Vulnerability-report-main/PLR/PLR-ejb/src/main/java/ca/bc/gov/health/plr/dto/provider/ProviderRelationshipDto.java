
package ca.bc.gov.health.plr.dto.provider;

import ca.bc.gov.health.plr.dto.MessageDataBlockDto;
import ca.bc.gov.health.plr.dto.MessageDataBlockDtoNullable;
import ca.bc.gov.health.plr.dto.businesskey.ProviderRelationshipBK;
import ca.bc.gov.health.plr.dto.businesskey.RegistryUserRelationshipBK;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.ejb.entity.PrsCtIdentifierTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtRelationshipTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviderRelationships;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeName;
import ca.bc.gov.health.plr.rule.provider.AcceptableId;
import ca.bc.gov.health.plr.util.DateUtils;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import javax.validation.constraints.NotBlank;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class ProviderRelationshipDto extends AbstractProviderDetail implements MessageDataBlockDto, MessageDataBlockDtoNullable, Comparable<ProviderRelationshipDto> {
    
    private Long identifierTypeId;
    @AcceptableCodeName(clazz = PrsCtIdentifierTypes.class, code = "Related Provider Identifier Type")
    private String identifierTypeCode;
    @NotBlank(message = "{error.notblank.part1of2}Related Provider Identifier{error.notblank.part2of2}")
    @Size(max = 50, message = "{constraints.size.message.part1of2} 'Related Provider Identifier' {constraints.size.message.part2of2}")
    @AcceptableId(pattern = ProviderDetailsUtil.provIDPattern)
    private String identifier;
    private Long relationshipTypeId;
    @AcceptableCodeName(clazz = PrsCtRelationshipTypes.class, code = "Provider Relationship Type")
    private String relationshipTypeCode;
    private Long targetRelationshipTypeId;
    @AcceptableCodeName(clazz = PrsCtRelationshipTypes.class, code = "Target Provider Relationship Type")
    private String targetRelationshipTypeCode;
    private String targetRelationshipTypeName;
    private Long providerInRelationWith;
    
    private String typeCode;
    
    private static final String[] RECORD_TYPES = new String[]{"relationshipTypeCode", "targetRelationshipTypeCode"};
    
    private static final String[] MESSAGE_DATA_BLOCK_TYPES = new String[]{"providerInRelationWith", "relationshipTypeCode", "targetRelationshipTypeCode"};
    private static final String[] MESSAGE_DATA_BLOCK_TYPES_NULLABLE = new String[]{"targetRelationshipTypeCode"};
    @NotNull(message = "{error.notblank.part1of2} Provider Relationship Effective Start Date {error.notblank.part2of2}")
    private Date effectiveStartDate;
    private Date effectiveEndDate;
    private Long typeId;
    
    @Override
    public String[] getRecordTypeFields(){
        return RECORD_TYPES;
    }
    
    public Long getIdentifierTypeId() {
        return identifierTypeId;
    }

    public void setIdentifierTypeId(Long collegeIdentifierType) {
        this.identifierTypeId = collegeIdentifierType;
    }

    public String getIdentifier() {
        return identifier;
    }

    public void setIdentifier(String collegeIdentifier) {
        collegeIdentifier = StringUtils.stripAccents(collegeIdentifier);
        collegeIdentifier = StringUtils.strip(collegeIdentifier);
        this.identifier = collegeIdentifier;
    }

    public Long getRelationshipTypeId() {
        return relationshipTypeId;
    }

    public void setRelationshipTypeId(Long relationshipTypeId) {
        this.relationshipTypeId = relationshipTypeId;
    }

    public Long getTargetRelationshipTypeId() {
        return targetRelationshipTypeId;
    }

    public void setTargetRelationshipTypeId(Long targetRelationshipTypeId) {
        this.targetRelationshipTypeId = targetRelationshipTypeId;
    }

    public String getTargetRelationshipTypeCode() {
        return targetRelationshipTypeCode;
    }

    public void setTargetRelationshipTypeCode(String targetRelationshipTypeCode) {
        this.targetRelationshipTypeCode = targetRelationshipTypeCode;
    }

    @Override
    public String[] getMessageDataBlockFields() {
        return MESSAGE_DATA_BLOCK_TYPES;
    }
    
    @Override
    public String[] getMessageDataBlockFieldsNullable() {
        return MESSAGE_DATA_BLOCK_TYPES_NULLABLE;
    }

    public String getIdentifierTypeCode() {
        return identifierTypeCode;
    }

    public void setIdentifierTypeCode(String identifierTypeCode) {
        this.identifierTypeCode = identifierTypeCode;
    }

    public String getRelationshipTypeCode() {
        return relationshipTypeCode;
    }

    public void setRelationshipTypeCode(String relationshipTypeCode) {
        this.relationshipTypeCode = relationshipTypeCode;
    }

    public Long getProviderInRelationWith() {
        return providerInRelationWith;
    }

    public void setProviderInRelationWith(Long providerInRelationWith) {
        this.providerInRelationWith = providerInRelationWith;
    }
    
    @Override
    public ca.bc.gov.health.plr.dto.provider.esb.AbstractProviderDetail toEsbVersion() throws Exception {  
        ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto esbVersion = new ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto();        
        
        PropertyUtils.copyProperties(esbVersion, this);
        
        return esbVersion;

    }

    @Override
    public String getTypeCode() {
        return typeCode;
    }

    @Override
    public void setTypeCode(String typeCode) {
        this.typeCode = typeCode;
    }
    @Override
    public String getBlockName() {
        return "Provider Relationship"; 
    }

    public String getTargetRelationshipTypeName() {
        return targetRelationshipTypeName;
    }

    public void setTargetRelationshipTypeName(String targetRelationshipTypeName) {
        this.targetRelationshipTypeName = targetRelationshipTypeName;
    }

    /**
     * @return the effectiveStartDate
     */
    @Override
    public Date getEffectiveStartDate() {
        return effectiveStartDate;
    }

    /**
     * @param effectiveStartDate the effectiveStartDate to set
     */
    @Override
    public void setEffectiveStartDate(Date effectiveStartDate) {
        this.effectiveStartDate = effectiveStartDate;
    }

    @Override
    public Date getEffectiveEndDate() {
        return effectiveEndDate;
    }

    @Override
    public void setEffectiveEndDate(Date effectiveEndDate) {
        this.effectiveEndDate = effectiveEndDate;
    }

    public Long getTypeId() {
        return typeId;
    }

    public void setTypeId(Long typeId) {
        this.typeId = typeId;
    }

    @Override
    public void addToProviderDto(ProviderDto providerDto) {
        providerDto.getProviderRelationships().add(this);
    }
    
    @Override
    public Class getEntityClass() {
        return PrsProviderRelationships.class;
    }
    
    @Override
    public Method getDtoConverterMethod() {
        Method method = null;
        try {
            method = ProviderDtoConverter.class.getMethod("buildProviderRelationship", PrsProviderRelationships.class);
        } catch (NoSuchMethodException | SecurityException ex) {
            Logger.getLogger(AddressDto.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // return null is OK
        return method;
    }
    
    @Override
    public int compareTo(ProviderRelationshipDto otherDto) {
        int keyCompareResult = ca.bc.gov.health.plr.util.PropertyUtils.compareString(this.getTypeCode(),otherDto.getTypeCode());
        if(keyCompareResult!=0) {
            return keyCompareResult;
        }
        keyCompareResult = ca.bc.gov.health.plr.util.PropertyUtils.compareString(this.getTargetRelationshipTypeCode(),otherDto.getTargetRelationshipTypeCode());
        if(keyCompareResult!=0) {
            return keyCompareResult;
        }
        keyCompareResult = ca.bc.gov.health.plr.util.PropertyUtils.compareString(this.getIdentifier(),otherDto.getIdentifier());
        if(keyCompareResult!=0) {
            return keyCompareResult;
        }
        keyCompareResult = super.compareDataOwnerCode(otherDto.getDataOwnerCode());
        if(keyCompareResult!=0) {
            return keyCompareResult;
        }
        keyCompareResult =  DateUtils.compareEffectiveStartAndCreatedDates(this.getEffectiveStartDate(), otherDto.getEffectiveStartDate(), this.getCreatedDate(), otherDto.getCreatedDate());
        if(keyCompareResult!=0) {
            return keyCompareResult;
        }
        return ca.bc.gov.health.plr.util.PropertyUtils.compareString(this.getEndReasonCode(),otherDto.getEndReasonCode());
    }   
    
   /**
    * Limit the size of input list of ProviderRelationshipDto to be less or equals to maxBusinessObjectShown
    * @param inList - the list of ProviderRelationshipDto
    * @param maxBusinessObjectShown int
    * @return the list of ProviderRelationshipDto, it's size is less or equals to maxBusinessObjectShown
    */
    public static List<ProviderRelationshipDto> limitDtoListBasedOnBK(List<ProviderRelationshipDto> inList, int maxBusinessObjectShown) {
        if(inList==null) {
            return null;
        } else if(inList.size()<=maxBusinessObjectShown) {
            return inList; 
        }        
        //find all business key objects
        List<ProviderRelationshipBK> bKeyList = new ArrayList<>();
        for(ProviderRelationshipDto t : inList) {
            ProviderRelationshipBK bk = new ProviderRelationshipBK(t.getTypeCode(), t.getDataOwnerCode(), t.getTargetRelationshipTypeCode(), t.getIdentifier());
            if(!bKeyList.contains(bk)) {
                bKeyList.add(bk);
            }
        }
        
        //go through each business key object and find all matching dtos
        List<ProviderRelationshipDto> allList = new ArrayList<>();
        for(ProviderRelationshipBK bk : bKeyList) {
            List<ProviderRelationshipDto> tmpList = new ArrayList<>();
            for(ProviderRelationshipDto t : inList) {
                ProviderRelationshipBK bkFromDto = new ProviderRelationshipBK(t.getTypeCode(), t.getDataOwnerCode(), t.getTargetRelationshipTypeCode(), t.getIdentifier());
                if(bk.equals(bkFromDto)) {
                    tmpList.add(t);
                }
            }
            //only keep first maxBusinessObjectShown dtos
            if(tmpList.size()>maxBusinessObjectShown) {
                tmpList = tmpList.subList(0, maxBusinessObjectShown);
            }
            if(!tmpList.isEmpty()) {
                allList.addAll(tmpList);
            }
        }
        
        return allList;
        
    }    

}
