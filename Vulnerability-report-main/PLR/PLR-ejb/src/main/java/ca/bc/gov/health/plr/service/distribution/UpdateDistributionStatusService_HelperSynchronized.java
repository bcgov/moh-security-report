/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.distribution;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.ejb.entity.GrsDistribEventItem;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.ConcurrencyManagement;
import javax.ejb.ConcurrencyManagementType;
import javax.ejb.DependsOn;
import javax.ejb.Singleton;
import javax.ejb.TransactionAttribute;
import javax.ejb.TransactionAttributeType;
import javax.naming.NamingException;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author Jonathan.Wiebe
 */
@ConcurrencyManagement(ConcurrencyManagementType.BEAN)
@DependsOn("JNDIResourceLoader")
@Singleton
public class UpdateDistributionStatusService_HelperSynchronized {

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;

    private static final Logger LOG = Logger.getLogger(UpdateDistributionStatusService_HelperSynchronized.class.getName());

    /**
     * Read and write the status
     *
     * @param NumId
     * @param intStatus
     */
    @TransactionAttribute(TransactionAttributeType.REQUIRES_NEW)
    public void writeDistribEventItemStatus(Long NumId, GrsDistribEventItem.Status intStatus) throws NamingException {
        GrsDistribEventItem distEventItem = em.find(GrsDistribEventItem.class, NumId);
        if (distEventItem != null && intStatus != null) {
            if (intStatus.equals(GrsDistribEventItem.Status.IN_PROGRESS) && !distEventItem.getStatus().equals(GrsDistribEventItem.Status.WAITING_FOR_PROCESSING)) {
                // The statuses have to be set in order, so if in progress doesn't follow waiting, 
                // then ignore this status update
            } else {
                distEventItem.setStatus(intStatus);
                distEventItem.setLastModifiedByNm(Consts.SYSTEM_USER);
                distEventItem.setLastModifiedOnDtm(Calendar.getInstance().getTime());
                em.merge(distEventItem);
            }
        } else {
            LOG.log(Level.WARNING, String.format("A request to update a non-existing distribution with an id '%s'. Skipping request.", NumId));
        }
    }

}
