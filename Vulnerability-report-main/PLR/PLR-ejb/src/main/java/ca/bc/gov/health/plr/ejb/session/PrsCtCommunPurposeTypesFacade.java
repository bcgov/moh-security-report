/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.ejb.session;

import ca.bc.gov.health.plr.ejb.entity.PrsCtCommunPurposeTypes;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.ejb.EJBException;
import javax.ejb.Lock;
import javax.ejb.LockType;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

/**
 *
 * @author david.sharpe
 */
@Startup
@Singleton
@Lock(LockType.READ)
public class PrsCtCommunPurposeTypesFacade extends AbstractFacade<PrsCtCommunPurposeTypes> {

    private static final String CLASSNAME = PrsCtCommunPurposeTypesFacade.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;
    private Map<String, PrsCtCommunPurposeTypes> codeNameMap = new ConcurrentHashMap<>();
    private Map<Long, PrsCtCommunPurposeTypes> idMap = new ConcurrentHashMap<>();
    private Map<String, PrsCtCommunPurposeTypes> codeNameMapFiltered = new ConcurrentHashMap<>();
    private Map<Long, PrsCtCommunPurposeTypes> idMapFiltered = new ConcurrentHashMap<>();

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public PrsCtCommunPurposeTypesFacade() {
        super(PrsCtCommunPurposeTypes.class);
    }

    @PostConstruct
    public void init() {
        List<PrsCtCommunPurposeTypes> list = super.findAll();

        for (PrsCtCommunPurposeTypes st : list) {
            codeNameMap.put(st.getCtlNameCode(), st);
            idMap.put(st.getCtlId(), st);
        }

        List<PrsCtCommunPurposeTypes> filteredList = findCommunTypesFilterOutEc();

        for (PrsCtCommunPurposeTypes purposeTypFilter : filteredList) {
            codeNameMapFiltered.put(purposeTypFilter.getCtlNameCode(), purposeTypFilter);
            idMapFiltered.put(purposeTypFilter.getCtlId(), purposeTypFilter);
        }

    }

    @Lock(LockType.WRITE)
    public void reInit() {
        codeNameMap.clear();
        idMap.clear();
        codeNameMapFiltered.clear();
        idMapFiltered.clear();
        init();
    }

    public PrsCtCommunPurposeTypes findByCommunicationPurposeType(CodeTableCodes.PrsCtCommunPurposeTypes communPurposeType) {
        return codeNameMap.get(communPurposeType.getValue());
    }

    public PrsCtCommunPurposeTypes findByCommunicationPurposeType(String communPurposeType) {
        return codeNameMap.get(communPurposeType);
    }

    @Override
    public PrsCtCommunPurposeTypes find(Object id) {
        return idMap.get(id);
    }

    @Override
    public List<PrsCtCommunPurposeTypes> findAll() {
        List<PrsCtCommunPurposeTypes> entityList = new ArrayList<>();
        entityList.addAll(codeNameMap.values());
        return entityList;
    }

    public List<PrsCtCommunPurposeTypes> findCommunTypesFilterOutEc() {

        Query query = em.createNamedQuery("PrsCtCommunPurposeTypes.findAllFilterByEc");
        query.setParameter("ctlNameCode", CodeTableCodes.PrsCtCommunPurposeTypes.EMERGENCY_CONTACT.getValue());

        List<PrsCtCommunPurposeTypes> entityList = new ArrayList<>();

        try {
            entityList = query.getResultList();
        } catch (EJBException ex) {
            ex.getMessage();
        }

        return entityList;
    }
}
