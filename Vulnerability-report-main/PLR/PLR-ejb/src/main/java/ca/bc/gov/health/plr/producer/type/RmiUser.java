package ca.bc.gov.health.plr.producer.type;

import ca.bc.gov.health.login.UserPrincipal;
import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.ejb.entity.GrsParties;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.session.GrsPartiesFacade;
import ca.bc.gov.health.plr.util.PlrRoleHelper;
import java.util.Hashtable;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.enterprise.context.RequestScoped;
import javax.inject.Inject;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingEnumeration;
import javax.naming.NamingException;
import javax.naming.directory.Attribute;
import javax.naming.directory.Attributes;
import javax.naming.directory.DirContext;
import javax.naming.directory.InitialDirContext;
import javax.naming.directory.SearchControls;
import javax.naming.directory.SearchResult;

/**
 * An instance of this class represents a user making a remote EJB calls using
 * (RMI-IIOP)
 *
 * @author Adebiyi.Kuseju
 */
@RequestScoped
public class RmiUser implements User {

    private static final Logger LOG = Logger.getLogger(RmiUser.class.getName());

    private UserPrincipal userPrincipal;

    @Inject
    @JNDIResource(Type.SSO_FILE)
    private Map<String, String> appSSOProps;

    @Inject
    @JNDIResource(Type.LDAP)
    private Hashtable ldapProps;

    @Inject
    private GrsPartiesFacade grsPartiesFacade;

    private GrsRegistryUsers regUser;

    @Override
    public GrsRegistryUsers getUserEntity() {
        return regUser;
    }

    @Override
    public UserPrincipal getUserPrincipal() {
        return userPrincipal;
    }

    @Override
    public void setUserId(String uid) {
        UserPrincipal up = null;

        if (userPrincipal == null && uid != null) {
            try {
                appSSOProps = getDirContext(Consts.APP_JNDI_RESOURCE_SSO);
            } catch (NamingException ne) {
                LOG.log(Level.SEVERE, ne.getMessage(), ne);
            }
            String userRoleKey = appSSOProps.get("sso_ldap_oid_user_role");
            String orgIdKey = appSSOProps.get("organization_id_key");
            up = new UserPrincipal();

            Attributes attrs = null;
            DirContext dctx = null;
            NamingEnumeration answer = null;
            try {
                dctx = getDirContext();

                SearchControls ctls = new SearchControls();
                ctls.setSearchScope(SearchControls.SUBTREE_SCOPE);
                answer = dctx.search("o=hnet,st=bc,c=ca", "(uid=" + uid + ")", ctls);
                if (answer.hasMore()) {
                    SearchResult entry = (SearchResult) answer.next();
                    attrs = entry.getAttributes();
                    up.setName(uid);
                    if (userRoleKey != null && !userRoleKey.equals("")) {
                        Attribute role = attrs.get(userRoleKey);
                        if (role != null) {
                            up.getRoles().add((String) role.get());
                        }
                    }
                    userPrincipal = up;

                    try {
                        String organization = entry.getName().split(",")[1].split("=")[1];
                        up.setOrganization(organization);
                    } catch (Exception e) {
                        //can't find org - leave it null
                    }
                } else {
                    up = null;
                }

                /*
                 This section is required by PLR to fetch the organization id from the 
                 parent directory. Ideally, this class may need to be re-implemented for
                 flexibility in handling any properties/attributes of interest, but to 
                 avoid breaking existing classes, this apporach along with minor changes 
                 in UserPrincipal in implementation is used.
                 */
                // Should we search for organization Id?
                if (up != null && up.getOrganization() != null && orgIdKey != null) {
                    // Search for organization in order to retrieve the OrgId
                    answer = dctx.search("o=hnet,st=bc,c=ca", "(o=" + up.getOrganization() + ")", ctls);
                    if (answer.hasMore()) {
                        SearchResult entry = (SearchResult) answer.next();
                        attrs = entry.getAttributes();

                        if (entry.getName() != null) {
                            String orgName = entry.getName().split("=")[1];

                            if (up.getOrganization().equals(orgName)) {
                                Attribute attr = attrs.get(orgIdKey);

                                if (attr != null) {
                                    up.addProperty(orgIdKey, attr.get().toString());

                                    // Fetch user for later 
                                    GrsParties gParties = grsPartiesFacade.findByOrganization(up.getProperty(PlrRoleHelper.organizationIdKey));

                                    // Check for null in cases the organization does not have a GrsResgistryUser assigned
                                    if (gParties != null) {
                                        regUser = gParties.getGrsRegistryUsersList().get(0);
                                    }

                                }
                            }
                        }
                    }
                }

            } catch (Exception exception) {
                LOG.log(Level.SEVERE, exception.getMessage(), exception);
            } finally {
                try {
                    if (answer != null) {
                        answer.close();
                    }
                    dctx.close();
                } catch (Exception exception) {
                    LOG.warning(exception.getMessage());
                }
            }

        }
    }

    private DirContext getDirContext() throws Exception {
        // Create the initial context
        return new InitialDirContext(ldapProps);

    }

    @Override
    public String getUserId() {
        return userPrincipal != null ? userPrincipal.getProperty(PlrRoleHelper.organizationIdKey) : null;
    }

    @Override
    public void resetUser() {
        userPrincipal = null;
    }

    public Map<String, String> getDirContext(String lookupName) throws NamingException {
        Context initialContext = new InitialContext();
        appSSOProps = (Map<String, String>) initialContext.lookup(lookupName);
        return appSSOProps;
    }

}
