/*
 * *********************************************************************************************************************
 *  Copyright (c) 2018, Ministry of Health, BC.                                                                        *
 *                                                                                                                     *
 *  All rights reserved.                                                                                               *
 *    This information contained herein may not be used in whole                                                       *
 *    or in part without the express written consent of the                                                            *
 *    Government of British Columbia, Canada.                                                                          *
 *                                                                                                                     *
 *  Revision Control Information                                                                                       *
 *  File:                $Id::                                                                                       $ *
 *  Date of Last Commit: $Date::                                                                                     $ *
 *  Revision Number:     $Rev::                                                                                      $ *
 *  Last Commit by:      $Author::                                                                                   $ *
 *                                                                                                                     *
 * *********************************************************************************************************************
 */
package ca.bc.gov.health.plr.rule.provider;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCommunPurposeTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtTelecomNumberTypes;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Logger;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.validation.ConstraintValidator;
import javax.validation.ConstraintValidatorContext;
import org.apache.commons.lang3.StringUtils;

/**
 * Validator for the telecom DTO which handles all constraints/rules for the
 * communication purpose type for 'Emergency Contact' and telecom number types
 * allowed.
 *
 * @author CGI Information Management Consultants Inc.
 */
public class TelecomCrossFieldValidator implements ConstraintValidator<TelecomCrossFieldConstraints, TelecommunicationDto> {

    private static final String CLASSNAME = TelecomCrossFieldValidator.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    CodesDao codesDao;
    private static final String TELECOM_NBR_TYPE = "telecom";

    @Override
    public void initialize(TelecomCrossFieldConstraints constraintAnnotation) {
        try {
            codesDao = (CodesDao) InitialContext.doLookup(Consts.JNDILOOKUP_CODESDAO);
        } catch (NamingException ex) {
            throw new RuntimeException(ex);
        }
    }

    /**
     * Cross field validation method for TelecommunicationDto to verify the
     * communication Purpose Type Code for the Emergency Contact is matching the
     * allowed telecom type(s).
     *
     *
     * @param value the TelecommunicationDto that has communication purpose
     * codes
     * @param context ConstraintValidatorContext
     *
     * @return boolean true if passes validations; false otherwise
     */
    @Override
    public boolean isValid(TelecommunicationDto value, ConstraintValidatorContext context) {
        if (value == null) {
            return true;
        }

        if (value instanceof TelecommunicationDto) {

            String telecomTypeCode = value.getTypeCode();
            String communPurposeTypeCd = value.getCommunicationPurposeCode();
            String telecomNbrTypeCd = "";

            if (!StringUtils.isEmpty(telecomTypeCode)
                    && codesDao.codeExists(PrsCtTelecomNumberTypes.class, telecomTypeCode)) {
                PrsCtTelecomNumberTypes foundTelecomNumberType = codesDao.lookup(PrsCtTelecomNumberTypes.class, telecomTypeCode);
                telecomTypeCode = foundTelecomNumberType.getCtlNameCode();

                if (codesDao.codeExists(PrsCtCommunPurposeTypes.class, communPurposeTypeCd)) {
                    PrsCtCommunPurposeTypes allowedPurposeType = codesDao.lookup(PrsCtCommunPurposeTypes.class, communPurposeTypeCd);
                    communPurposeTypeCd = allowedPurposeType.getCtlNameCode();
                    telecomNbrTypeCd = allowedPurposeType.getTelecomNbrType();

                } else if (!StringUtils.isEmpty(communPurposeTypeCd)
                        && !codesDao.codeExists(PrsCtCommunPurposeTypes.class, communPurposeTypeCd)) {
                    return false;
                }

            } else if (!StringUtils.isEmpty(telecomTypeCode)
                    && !codesDao.codeExists(PrsCtCommunPurposeTypes.class, telecomTypeCode)) {
                return false;
            }

            return validateTelecomTypeCodeAllowed(communPurposeTypeCd, telecomNbrTypeCd, telecomTypeCode, context);
        }

        return true;

    }

    /**
     * Method for error messages and to build template for constraint
     * violations.
     *
     *
     * @param key the BusinessRuleKeys specific error label
     * @param node the corresponding element/block for the error
     * @param cvc ConstraintValidatorContext
     *
     */
    public void changeErrorMessage(BusinessRuleKeys key, String node, ConstraintValidatorContext cvc) {
        cvc.disableDefaultConstraintViolation();
        String message = BusinessRuleMessageDao.getMessageResource(key);
        cvc.buildConstraintViolationWithTemplate(message).addNode(node).addConstraintViolation();
    }

    /**
     * Validates telecom types are allowed for the selected communication
     * purpose type codes.
     *
     * @param communicPurposeCd the communication purpose type code.
     * @param telecomNbrTypeCd a CSV list of "applicable telecom types".
     * @param telecomTypeCode he telecom number type.
     * @param context ConstraintValidatorContext
     *
     * @return true if telecomTypeCode is within the CSV telecomNbrTypeCd or if
     * telecomNbrTypeCd is blank.
     */
    private boolean validateTelecomTypeCodeAllowed(String communicPurposeCd, String telecomNbrTypeCd, String telecomTypeCode, ConstraintValidatorContext context) {
        if (StringUtils.isBlank(telecomTypeCode)) {
            return true;
        }

        if (isCommPurposeTypeEmergencyContact(communicPurposeCd)) {

            if (!isTelecomTypeApplicable(telecomTypeCode, telecomNbrTypeCd)) {
                changeErrorMessage(BusinessRuleKeys.ERROR_TELECOM_NBR_TYPE_NOT_ALLOWED, TELECOM_NBR_TYPE, context);
                return false;
            }

        } else {
            return true;
        }

        return true;
    }

    /**
     * Validates telecom types are allowed for the selected communication
     * purpose type codes.
     *
     * @param communPurposeTypeCode the communication purpose type code.
     *
     * @return true if communPurposeTypeCode is an Emergency Contact or if
     * communPurposeTypeCode is blank.
     */
    public boolean isCommPurposeTypeEmergencyContact(String communPurposeTypeCode) {
        return !StringUtils.isEmpty(communPurposeTypeCode)
                && (communPurposeTypeCode.equals(CodeTableCodes.PrsCtCommunPurposeTypes.EMERGENCY_CONTACT.getValue()));
    }

    /**
     * Returns true if telecomNumberType (e.g. "T/MB/") is within the CSV
     * applicableTelecomTypes (e.g. "T/MB/M"), or if applicableTelecomTypes is
     * blank.
     *
     * @param telecomNumberType the telecom number type.
     * @param applicableTelecomTypes a CSV list of "applicable telecom Types"
     * @return true if applicableTelecomTypes is within the CSV
     * allowedTelecomTypes or if applicableTelecomTypes is blank.
     */
    public static boolean isTelecomTypeApplicable(String telecomNumberType, String applicableTelecomTypes) {
        if (!StringUtils.isBlank(applicableTelecomTypes)) {

            List<String> allowedTelecomTypes = Arrays.asList(applicableTelecomTypes.split(","));
            if (!allowedTelecomTypes.contains(telecomNumberType)) {
                return false;
            }
        }
        return true;
    }

}
