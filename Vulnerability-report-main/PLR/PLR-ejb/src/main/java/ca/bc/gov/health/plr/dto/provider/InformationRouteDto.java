package ca.bc.gov.health.plr.dto.provider;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.MessageDataBlockDto;
import ca.bc.gov.health.plr.dto.MessageDataBlockDtoNullable;
import ca.bc.gov.health.plr.dto.businesskey.InformationRouteBK;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.ejb.entity.GrsCtDocumentTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtMechanisms;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCommunPurposeTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsInformationRoutes;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeName;
import ca.bc.gov.health.plr.util.DateUtils;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.validation.constraints.NotNull;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class InformationRouteDto extends AbstractProviderDetail implements MessageDataBlockDto, MessageDataBlockDtoNullable, Comparable<InformationRouteDto> {

    private Long workLocationIdentifier;
    private String workLocationDataOwnerCode;
    private Long documentTypeId;
    private String documentType;
    @AcceptableCodeName(clazz = GrsCtDocumentTypes.class, code = "Document Type")
    private String documentTypeCode;
    private Long mechanismTypeId;
    private String mechanismType;
    @AcceptableCodeName(clazz = GrsCtMechanisms.class, code = "Mechanism Type")
    private String mechanismTypeCode;
    
    private Long communicationPurposeId;
    private String communicationPurpose;
    @AcceptableCodeName(clazz = PrsCtCommunPurposeTypes.class, code = "Communication Purpose Type")
    private String communicationPurposeCode;
    private String communicationDataOwnerCode;
    private Long ruRuId;
    private Long wlWlId;
    private AddressDto addressDto = new AddressDto();
    private TelecommunicationDto telecommunicationDto = new TelecommunicationDto();
    private ElectronicAddressDto electronicAddressDto = new ElectronicAddressDto();
    
    private String typeCode;

    private static final String[] RECORD_TYPES = new String[]{"documentTypeCode" };

    private static final String[] MESSAGE_DATA_BLOCK_TYPES = new String[]{"documentTypeCode", "workLocationIdentifier", "electronicAddressDto.typeCode", "addressDto.typeCode", "telecommunicationDto.typeCode", "communicationPurposeCode", "communicationDataOwnerCode", "workLocationDataOwnerCode"};
    
    private static final String[] MESSAGE_DATA_BLOCK_TYPES_NULLABLE = new String[]{"workLocationIdentifier", "electronicAddressDto.typeCode", "addressDto.typeCode", "telecommunicationDto.typeCode", "communicationPurposeCode", "communicationDataOwnerCode", "workLocationDataOwnerCode"};
    
    
    @NotNull(message = "{error.notblank.part1of2} Information Route Effective Start Date {error.notblank.part2of2}")
    private Date effectiveStartDate;
    private Date effectiveEndDate;
    private Long typeId;

    @Override
    public String[] getRecordTypeFields() {
        return RECORD_TYPES;
    }

    public ElectronicAddressDto getElectronicAddressDto() {
        return electronicAddressDto;
    }

    public void setElectronicAddressDto(ElectronicAddressDto electronicAddressDto) {
        this.electronicAddressDto = electronicAddressDto;
    }

    public TelecommunicationDto getTelecommunicationDto() {
        return telecommunicationDto;
    }

    public void setTelecommunicationDto(TelecommunicationDto telecommunicationDto) {
        this.telecommunicationDto = telecommunicationDto;
    }

    public AddressDto getAddressDto() {
        return addressDto;
    }

    public void setAddressDto(AddressDto addressDto) {
        this.addressDto = addressDto;
    }

    public String getDocumentType() {
        return documentType;
    }

    public void setDocumentType(String documentType) {
        this.documentType = documentType;
    }

    public Long getMechanismTypeId() {
        return mechanismTypeId;
    }

    public void setMechanismTypeId(Long mechanismTypeId) {
        this.mechanismTypeId = mechanismTypeId;
    }

    public String getMechanismType() {
        return mechanismType;
    }

    public void setMechanismType(String mechanismType) {
        this.mechanismType = mechanismType;
    }

    public Long getWorkLocationIdentifier() {
        return workLocationIdentifier;
    }

    public void setWorkLocationIdentifier(Long workLocationIdentifier) {
        this.workLocationIdentifier = workLocationIdentifier;
    }

    public void setDocumentTypeId(Long documentTypeId) {
        this.documentTypeId = documentTypeId;
    }

    public Long getDocumentTypeId() {
        return documentTypeId;
    }

    public String getDocumentTypeCode() {
        return documentTypeCode;
    }

    public void setDocumentTypeCode(String documentTypeCode) {
        this.documentTypeCode = documentTypeCode;
    }

    public String getMechanismTypeCode() {
        return mechanismTypeCode;
    }

    public void setMechanismTypeCode(String mechanismTypeCode) {
        this.mechanismTypeCode = mechanismTypeCode;
    }

    public Long getCommunicationPurposeId() {
        return communicationPurposeId;
    }

    public void setCommunicationPurposeId(Long communicationPurposeId) {
        this.communicationPurposeId = communicationPurposeId;
    }

    public String getCommunicationPurpose() {
        return communicationPurpose;
    }

    public void setCommunicationPurpose(String communicationPurpose) {
        this.communicationPurpose = communicationPurpose;
    }

    public String getCommunicationPurposeCode() {
        return communicationPurposeCode;
    }

    public void setCommunicationPurposeCode(String communicationPurposeCode) {
        this.communicationPurposeCode = communicationPurposeCode;
    }

    public String getCommunicationDataOwnerCode() {
        return communicationDataOwnerCode;
    }

    public void setCommunicationDataOwnerCode(String communicationDataOwnerCode) {
        this.communicationDataOwnerCode = communicationDataOwnerCode;
    }

    public Long getRuRuId() {
        return ruRuId;
    }

    public void setRuRuId(Long ruRuId) {
        this.ruRuId = ruRuId;
    }

    public Long getWlWlId() {
        return wlWlId;
    }

    public void setWlWlId(Long wlWlId) {
        this.wlWlId = wlWlId;
    }

    public String getWorkLocationDataOwnerCode() {
        return workLocationDataOwnerCode;
    }

    public void setWorkLocationDataOwnerCode(String workLocationDataOwnerCode) {
        this.workLocationDataOwnerCode = workLocationDataOwnerCode;
    }

    @Override
    public String[] getMessageDataBlockFields() {
        return MESSAGE_DATA_BLOCK_TYPES;
    }
    
    @Override
    public String[] getMessageDataBlockFieldsNullable() {
        return MESSAGE_DATA_BLOCK_TYPES_NULLABLE;
    }

    @Override
    public ca.bc.gov.health.plr.dto.provider.esb.AbstractProviderDetail toEsbVersion() throws Exception {
        ca.bc.gov.health.plr.dto.provider.esb.InformationRouteDto esbVersion = new ca.bc.gov.health.plr.dto.provider.esb.InformationRouteDto();
        
        
        esbVersion.setWorkLocationIdentifier(this.getWorkLocationIdentifier());
        esbVersion.setWorkLocationDataOwnerCode(this.getWorkLocationDataOwnerCode());
        esbVersion.setDocumentType(this.getDocumentType());
        esbVersion.setDocumentTypeCode(this.getDocumentTypeCode());
        esbVersion.setDocumentTypeId(this.getDocumentTypeId());
        esbVersion.setCommunicationPurpose(this.getCommunicationPurpose());
        esbVersion.setCommunicationPurposeCode(this.getCommunicationPurposeCode());
        esbVersion.setCommunicationPurposeId(this.getCommunicationPurposeId());
        esbVersion.setCommunicationDataOwnerCode(this.getCommunicationDataOwnerCode());
        esbVersion.setRuRuId(this.getRuRuId());
        esbVersion.setWlWLId(this.getWlWlId());
        esbVersion.setAddressDto((ca.bc.gov.health.plr.dto.provider.esb.AddressDto)this.addressDto.toEsbVersion());
        esbVersion.setTelecommunicationDto((ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto)this.telecommunicationDto.toEsbVersion());
        esbVersion.setElectronicAddressDto((ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto)this.electronicAddressDto.toEsbVersion());
        
        esbVersion.setPauthId(this.getPauthId());
        esbVersion.setDataOwnerName(this.getDataOwnerName());
        esbVersion.setTypeId(this.getTypeId());
        esbVersion.setType(this.getType());
        esbVersion.setTypeCode(this.getTypeCode());
        
        esbVersion.setDataOwnerCode(this.getDataOwnerCode());
        
        esbVersion.setEffectiveStartDate(this.getEffectiveStartDate());
        esbVersion.setEffectiveEndDate(this.getEffectiveEndDate());
        esbVersion.setEndReasonCode(this.getEndReasonCode());
        esbVersion.setEndReasonCodeId(this.getEndReasonCodeId());
        esbVersion.setGenerationNum(this.getGenerationNum());
        
        esbVersion.setId(this.getId());
        esbVersion.setDisplayActive(this.isDisplayActive());
        esbVersion.setUpdatable(this.isUpdatable());
        esbVersion.setActive(this.isActive());
        esbVersion.setCreatedDate(this.getCreatedDate());
        esbVersion.setInvalidatedDate(this.getInvalidatedDate());
        esbVersion.setUserChid(this.getUserChid());
        esbVersion.setNoChangeOnUpdate(this.isNoChangeOnUpdate());
        return esbVersion;

    }

    @Override
    public String getTypeCode() {
        return typeCode;
    }

    @Override
    public void setTypeCode(String typeCode) {
        this.typeCode = typeCode;
    }
    @Override
    public String getBlockName() {
        return "Communication Preference";
    }

    /**
     * @return the effectiveStartDate
     */
    @Override
    public Date getEffectiveStartDate() {
        return effectiveStartDate;
    }

    /**
     * @param effectiveStartDate the effectiveStartDate to set
     */
    @Override
    public void setEffectiveStartDate(Date effectiveStartDate) {
        this.effectiveStartDate = effectiveStartDate;
    }

    @Override
    public Date getEffectiveEndDate() {
        return effectiveEndDate;
    }

    @Override
    public void setEffectiveEndDate(Date effectiveEndDate) {
        this.effectiveEndDate = effectiveEndDate;
    }

    public Long getTypeId() {
        return typeId;
    }

    public void setTypeId(Long typeId) {
        this.typeId = typeId;
    }

    @Override
    public void addToProviderDto(ProviderDto providerDto) {
        providerDto.getInformationRoutes().add(this);
    }
   
    @Override
    public Class getEntityClass() {
        return PrsInformationRoutes.class;
    }
    
    @Override
    public Method getDtoConverterMethod() {
        Method method = null;
        try {
            method = ProviderDtoConverter.class.getMethod("buildInformationRoute", PrsInformationRoutes.class);
        } catch (NoSuchMethodException | SecurityException ex) {
            Logger.getLogger(AddressDto.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // return null is OK
        return method;
    }
    
    private String extractInformationRouteTypeCode(InformationRouteDto irDto) {
        String informationRouteTypeCode = null;
        if(irDto.getAddressDto()!=null && irDto.getAddressDto().getTypeCode()!=null) {
            informationRouteTypeCode = Consts.INFORMATION_ROUTE_LOCATION_TYPE_CODE_ADDRESS;
        } else if(irDto.getTelecommunicationDto()!=null && irDto.getTelecommunicationDto().getTypeCode()!=null) {
            informationRouteTypeCode = Consts.INFORMATION_ROUTE_LOCATION_TYPE_CODE_TELEPHONE;
        } else if(irDto.getElectronicAddressDto()!=null && irDto.getElectronicAddressDto().getTypeCode()!=null) {
            informationRouteTypeCode = Consts.INFORMATION_ROUTE_LOCATION_TYPE_CODE_ELECTRONIC_ADDRESS;
        }
        return informationRouteTypeCode;
    }

    private String extractInformationRouteTypeCode() {
        return extractInformationRouteTypeCode(this);
    }
    
    @Override
    public int compareTo(InformationRouteDto otherDto) {
        int keyCompareResult = ca.bc.gov.health.plr.util.PropertyUtils.compareString(this.getDocumentTypeCode(), otherDto.getDocumentTypeCode());
        if (keyCompareResult != 0) {
            return keyCompareResult;
        }
        keyCompareResult = ca.bc.gov.health.plr.util.PropertyUtils.compareString(extractInformationRouteTypeCode(this), extractInformationRouteTypeCode(otherDto));
        if (keyCompareResult != 0) {
            return keyCompareResult;
        }

        keyCompareResult = ca.bc.gov.health.plr.util.PropertyUtils.compareString(this.getCommunicationPurpose(), otherDto.getCommunicationPurpose());
        if (keyCompareResult != 0) {
            return keyCompareResult;
        }

        keyCompareResult = super.compareDataOwnerCode(otherDto.getDataOwnerCode());
        if (keyCompareResult != 0) {
            return keyCompareResult;
        }

        keyCompareResult = ca.bc.gov.health.plr.util.PropertyUtils.compareString(this.getWorkLocationDataOwnerCode(), otherDto.getWorkLocationDataOwnerCode());
        if (keyCompareResult != 0) {
            return keyCompareResult;
        }

        keyCompareResult = ca.bc.gov.health.plr.util.PropertyUtils.compareLong(this.getWorkLocationIdentifier(), otherDto.getWorkLocationIdentifier());
        if (keyCompareResult != 0) {
            return keyCompareResult;
        }

        keyCompareResult =  DateUtils.compareEffectiveStartAndCreatedDates(this.getEffectiveStartDate(), otherDto.getEffectiveStartDate(), this.getCreatedDate(), otherDto.getCreatedDate());
        if (keyCompareResult != 0) {
            return keyCompareResult;
        }
        
        return ca.bc.gov.health.plr.util.PropertyUtils.compareString(this.getEndReasonCode(), otherDto.getEndReasonCode());
        
    }
    
    /**
     * Limit the size if input list of InformationRouteDto to be less or equals to the value of maxBusinessObjectShown
     * @param inList - list of InformationRouteDto 
     * @param maxBusinessObjectShown int
     * @return return new list of InformationRouteDto, it's size is less or equals to maxBusinessObjectShown
     */
    public static List<InformationRouteDto> limitDtoListBasedOnBK(List<InformationRouteDto> inList, int maxBusinessObjectShown) {
        if(inList==null) {
            return null;
        } else if(inList.size()<=maxBusinessObjectShown) {
            return inList; 
        }
        //find all business key objects
        List<InformationRouteBK> bKeyList = new ArrayList<>();
        for(InformationRouteDto t : inList) {
            InformationRouteBK bk = new InformationRouteBK();
            bk.setDocumentTypeCode(t.getDocumentTypeCode());
            bk.setInformationRouteTypeCode(t.extractInformationRouteTypeCode());
            bk.setCommunicationPurpose(t.getCommunicationPurpose());
            bk.setDataOwnerCode(t.getDataOwnerCode());
            bk.setWorkLocationDataOwnerCode(t.getWorkLocationDataOwnerCode());
            bk.setWorkLocationIdentifier(t.getWorkLocationIdentifier());
            if(!bKeyList.contains(bk)) {
                bKeyList.add(bk);
            }
        }
        
        //go through each business key object and find all matching dtos
        List<InformationRouteDto> allList = new ArrayList<>();
        for(InformationRouteBK bk : bKeyList) {
            List<InformationRouteDto> tmpList = new ArrayList<>();
            for(InformationRouteDto t : inList) {
                InformationRouteBK bkFromDto = new InformationRouteBK();
                bkFromDto.setDocumentTypeCode(t.getDocumentTypeCode());
                bkFromDto.setInformationRouteTypeCode(t.extractInformationRouteTypeCode());
                bkFromDto.setCommunicationPurpose(t.getCommunicationPurpose());
                bkFromDto.setDataOwnerCode(t.getDataOwnerCode());
                bkFromDto.setWorkLocationDataOwnerCode(t.getWorkLocationDataOwnerCode());
                bkFromDto.setWorkLocationIdentifier(t.getWorkLocationIdentifier());
                if(bk.equals(bkFromDto)) {
                    tmpList.add(t);
                }
            }
            //only keep first maxBusinessObjectShown dtos
            if(tmpList.size()>maxBusinessObjectShown) {
                tmpList = tmpList.subList(0, maxBusinessObjectShown);
            }
            if(!tmpList.isEmpty()) {
                allList.addAll(tmpList);
            }
        }
        
        return allList;
        
    }    
    

}
