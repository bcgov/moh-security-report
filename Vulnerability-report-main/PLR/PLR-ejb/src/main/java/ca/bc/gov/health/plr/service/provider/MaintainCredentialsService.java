package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.dto.provider.CredentialsDto;
import ca.bc.gov.health.plr.ejb.entity.PrsProviderCredentials;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.persistence.ProviderDao;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.provider.AccessRestrictionService;
import ca.bc.gov.health.plr.service.EntityValidatorService;
import ca.bc.gov.health.plr.service.validators.ApplicableCredentialValidator;
import ca.bc.gov.health.plr.service.validators.ConfidentialityValidator;
import ca.bc.gov.health.plr.service.validators.EntityChangeDetector;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 * Add or update a status for a provider.
 *
 * @author Grant.Hodgins
 */
@Stateless
@LocalBean
public class MaintainCredentialsService implements MaintainService<CredentialsDto>{
 
    
    @PersistenceContext(unitName = "PLR-ejbPU")
    protected EntityManager em;
    @EJB
    protected CodesDao codesDao;
    @EJB
    protected ProviderDao providerDao;
    @EJB
    protected ProviderDtoConverter providerDtoConverter;
    @EJB
    private JournalService<PrsProviderCredentials> journalService;
    
    @EJB
    private EntityValidatorService<PrsProviderCredentials> validatorService;

    @EJB
    private ConfidentialityValidator<PrsProviderCredentials> confidentialityValidator;
    
    @EJB
    private ApplicableCredentialValidator applicableCredentialValidator;
    
    @EJB
    private AccessRestrictionService accessRestrictionService;
    
    @EJB
    private EntityChangeDetector<CredentialsDto, PrsProviderCredentials> entityChangeDetector;
    

    /**
     * Maintain an credentials entity. This method determines if this maintain
     * operation is an add or an update.
     *
     * @param credentials the credentials to maintain
     * @return a populated list of provider-related transfer objects with
     * refreshed details
     * @throws ca.bc.gov.health.plr.service.provider.DuplicateRecordException
     * @throws ca.bc.gov.health.plr.rule.BusinessRuleException
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Override
    public CredentialsDto save(CredentialsDto credentials) throws DuplicateRecordException, BusinessRuleException, EntityValidationException {
        PrsProviders provider = providerDao.searchByProviderId(credentials.getPauthId());
        PrsProviderCredentials newRecord = providerDtoConverter.mapPrsProviderCredentials(credentials, provider);
        entityChangeDetector.checkForChanges(credentials, newRecord);
        if (credentials.isNoChangeOnUpdate()) {
            return credentials;
        }
        validatorService.validate(newRecord, confidentialityValidator, applicableCredentialValidator);
        newRecord = journalService.journal(newRecord);
        
        return providerDtoConverter.buildCredential(newRecord);
    }
    
    /**
     * Suggests a credential city name based on auto-complete search criteria.
     * The suggestion will provide city names that are in use for credentials.
     *
     * @param criteria the search criteria
     * @return a list of city name suggestions, ordered by system relevance
     */
    public List<String> suggestCredentialCityName(String criteria) {
        return codesDao.findCredentialCityNameByCriteria(criteria);
    }

    /**
     * Suggests a credential institution name based on auto-complete search
     * criteria. The suggestion will provide institution names that are in use
     * for credentials
     *
     * @param criteria the search criteria
     * @return a list of city name suggestions, ordered by system relevance
     */
    public List<String> suggestCredentialInstitutionName(String criteria) {
        return codesDao.findCredentialInstitutionNameByCriteria(criteria);
    }

    /**
     * Query a fresh complete list of demographic details related to a specific provider.
     *
     * @param pauthId the provider primary key
     * @return a list of fresh demographic details transfer objects
     */
    public List<CredentialsDto> refreshCredentials(Long pauthId) {
        PrsProviders provider = em.find(PrsProviders.class, pauthId);
        List<CredentialsDto> dtos = providerDtoConverter.buildCredentials(provider.getPrsProviderCredentialsList());
        accessRestrictionService.applyReadRestriction(dtos, provider.getHptCode(), PrsProviderCredentials.class);
        return dtos;
    }
}
