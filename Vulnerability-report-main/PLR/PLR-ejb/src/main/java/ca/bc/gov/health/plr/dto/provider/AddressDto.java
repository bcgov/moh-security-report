package ca.bc.gov.health.plr.dto.provider;

import ca.bc.gov.health.plr.dto.MessageDataBlockDto;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.PrsCtAddressTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.rule.provider.AcceptableAddress;
import ca.bc.gov.health.plr.rule.provider.AcceptableAddressValidator;
import ca.bc.gov.health.plr.rule.provider.AcceptableCharacterValidator;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeName;
import ca.bc.gov.health.plr.rule.provider.AddressCrossFieldConstraints;
import java.lang.reflect.Method;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import javax.validation.constraints.NotBlank;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@AddressCrossFieldConstraints
public class AddressDto extends LocationDto implements MessageDataBlockDto{
    
    private static final String[] MESSAGE_DATA_BLOCK_COLUMNS = new String[]{"communicationPurposeCode", "typeCode"};
    
    @NotBlank(message = "{error.notblank.part1of2}Address Line 1{error.notblank.part2of2}")
    @AcceptableAddress
    @Size(max = 100, message = "{constraints.size.message.part1of2} 'Address Line 1' {constraints.size.message.part2of2}")
    private String addressLineOne;
    @AcceptableAddress
    @Size(max = 100, message = "{constraints.size.message.part1of2} 'Address Line 2' {constraints.size.message.part2of2}")
    private String addressLineTwo;
    @AcceptableAddress
    @Size(max = 100, message = "{constraints.size.message.part1of2} 'Address Line 3' {constraints.size.message.part2of2}")
    private String addressLineThree;
    @AcceptableAddress
    @Size(max = 100)
    private String addressLineFour;
    @NotBlank(message = "{error.notblank.part1of2}City{error.notblank.part2of2}")
    @AcceptableAddress
    @Size(max = 60, message = "{constraints.size.message.part1of2} 'City' {constraints.size.message.part2of2}")
    private String city;
    @Size(max = 30, message = "{constraints.size.message.part1of2} 'Province/State' {constraints.size.message.part2of2}")
    private String provinceOrStateTxt;
    @AcceptableAddress
    // Validation size _conditionally_ in AddressCrossFieldConstraints.
    // @Size(max = 25)
    private String postalCode;
    private Long countryId;
    private String country;
    @NotBlank(message = "{error.notblank.part1of2}Country{error.notblank.part2of2}")
    @AcceptableCodeName(clazz = PrsCtCountries.class, code = "Country")
    private String countryCode;
    private Long ruRuID;
    private boolean validCpc;
    private String fullAddress;

    private static final String[] RECORD_TYPES = new String[]{"communicationPurposeCode"};
    
    @AcceptableCodeName(clazz = PrsCtAddressTypes.class, code = "Address Type")
    private String typeCode;
    @NotNull(message = "{error.notblank.part1of2} Address Effective Start Date {error.notblank.part2of2}")
    private Date effectiveStartDate;
    private Date effectiveEndDate;
    private Long typeId;
    private String validationStatus;
    private String validationStatusDesc;

    public String getValidationStatusDesc() {
        return validationStatusDesc;
    }

    public void setValidationStatusDesc(String validationStatusDesc) {
        this.validationStatusDesc = validationStatusDesc;
    }

    @Override
    public void setTypeCode(String typeCode) {
        this.typeCode = typeCode;
    }
    
    @Override
    public String[] getRecordTypeFields(){
        return RECORD_TYPES;
    }
    
    public String getAddressLineOne() {
        return addressLineOne;
    }

    public void setAddressLineOne(String addressLineOne) {
        this.addressLineOne = handleInvalidCharacters(addressLineOne);
    }

    public String getAddressLineTwo() {
        return addressLineTwo;
    }

    public void setAddressLineTwo(String addressLineTwo) {
        this.addressLineTwo = handleInvalidCharacters(addressLineTwo);
    }

    public String getAddressLineThree() {
        return addressLineThree;
    }

    public void setAddressLineThree(String addressLineThree) {
        this.addressLineThree = handleInvalidCharacters(addressLineThree);
    }

    public String getAddressLineFour() {
        return addressLineFour;
    }

    public void setAddressLineFour(String addressLineFour) {
        this.addressLineFour = handleInvalidCharacters(addressLineFour);
    }

    public String getCity() {
        return city;
    }

    public void setCity(String city) {
        this.city = handleInvalidCharacters(city);
    }
    
    public String getProvinceOrStateTxt() {
        return provinceOrStateTxt;
    }

    public void setProvinceOrStateTxt(String provinceOrStateTxt) {
        provinceOrStateTxt = StringUtils.stripAccents(provinceOrStateTxt);
        provinceOrStateTxt = StringUtils.strip(provinceOrStateTxt);
        this.provinceOrStateTxt = provinceOrStateTxt;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public boolean isValidCpc() {
        return validCpc;
    }

    public void setValidCpc(boolean validCpc) {
        this.validCpc = validCpc;
    }

    public String getCountryCode() {
        return countryCode;
    }

    public void setCountryCode(String countryCode) {
        this.countryCode = countryCode;
    }

    public Long getCountryId() {
        return countryId;
    }

    public void setCountryId(Long countryId) {
        this.countryId = countryId;
    }

    public String getPostalCode() {
        return postalCode;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = handleInvalidCharacters(postalCode);
    }

    public Long getRuRuID() {
        return ruRuID;
    }

    public void setRuRuID(Long ruruID) {
        this.ruRuID = ruruID;
    }

    public String getFullAddress() {
        return fullAddress;
    }

    public void setFullAddress(String fullAddress) {
        this.fullAddress = fullAddress;
    }

    @Override
    public String[] getMessageDataBlockFields() {
        return MESSAGE_DATA_BLOCK_COLUMNS;
    }
    
    @Override
    public ca.bc.gov.health.plr.dto.provider.esb.AbstractProviderDetail toEsbVersion() throws Exception {  
        ca.bc.gov.health.plr.dto.provider.esb.AddressDto esbVersion = new ca.bc.gov.health.plr.dto.provider.esb.AddressDto();                
        PropertyUtils.copyProperties(esbVersion, this);
        
        return esbVersion;

    }

    @Override
    public String getTypeCode() {
        return typeCode;
    }
    
    @Override
    public String getBlockName() {
        return "Address";
    }

    /**
     * @return the effectiveStartDate
     */
    @Override
    public Date getEffectiveStartDate() {
        return effectiveStartDate;
    }

    /**
     * @param effectiveStartDate the effectiveStartDate to set
     */
    @Override
    public void setEffectiveStartDate(Date effectiveStartDate) {
        this.effectiveStartDate = effectiveStartDate;
    }

    @Override
    public Date getEffectiveEndDate() {
        return effectiveEndDate;
    }

    @Override
    public void setEffectiveEndDate(Date effectiveEndDate) {
        this.effectiveEndDate = effectiveEndDate;
    }

    @Override
    public Long getTypeId() {
        return typeId;
    }
    
    @Override
    public void setTypeId(Long typeId) {
        this.typeId = typeId;
    }

    /**
     * @return the validationStatus
     */
    public String getValidationStatus() {
        return validationStatus;
    }
    
    public void setValidationStatus(String validationStatus) {
        this.validationStatus = validationStatus;
    }
        
    @Override
    public void addToProviderDto(ProviderDto providerDto) {
        providerDto.getAddresses().add(this);
    }
    
    @Override
    public Class getEntityClass() {
        return GrsAddresses.class;
    }
    
    @Override
    public Method getDtoConverterMethod() {
        Method method = null;
        try {
            method = ProviderDtoConverter.class.getMethod("buildAddress", GrsAddresses.class);
        } catch (NoSuchMethodException | SecurityException ex) {
            Logger.getLogger(AddressDto.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // return null is OK
        return method;
    }
    
    private static String handleInvalidCharacters(String address) {
        return AcceptableCharacterValidator.handleInvalidCharacters(address, AcceptableAddressValidator.INVALID_ADDRESS_CHARACTERS_PATTERN);
    }

}
