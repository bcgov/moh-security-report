
package ca.bc.gov.health.plr.dto.provider;

import ca.bc.gov.health.plr.dto.MessageDataBlockDto;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvCredentialTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvState;
import ca.bc.gov.health.plr.ejb.entity.PrsProviderCredentials;
import ca.bc.gov.health.plr.rule.provider.AcceptableAddress;
import ca.bc.gov.health.plr.rule.provider.AcceptableAnyField;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeId;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeName;
import java.lang.reflect.Method;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import javax.validation.constraints.NotBlank;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class CredentialsDto extends AbstractProviderDetail implements MessageDataBlockDto{
    @NotBlank(message = "{error.notblank.part1of2}Designation{error.notblank.part2of2}")
    @AcceptableAnyField( message = "{error.anyfield.invalidcharacters.part1of2} 'Designation' {error.anyfield.invalidcharacters.part2of2}")
    @Size(min = 1, max = 240, message = "{constraints.size.message.part1of2} 'Designation' {constraints.size.message.part2of2}")
    String designation;
    @AcceptableAnyField( message = "{error.anyfield.invalidcharacters.part1of2} 'Institution' {error.anyfield.invalidcharacters.part2of2}")
    @Size(max = 240, message = "{constraints.size.message.part1of2} 'Institution' {constraints.size.message.part2of2}")
    String grantingInstitution;
    @AcceptableAnyField( message = "{error.anyfield.invalidcharacters.part1of2} 'Registration Number' {error.anyfield.invalidcharacters.part2of2}")
    @Size(max = 240, message = "{constraints.size.message.part1of2} 'Registration Number' {constraints.size.message.part2of2}")
    String registrationNumber;
    @AcceptableAddress
    @Size(max = 240, message = "{constraints.size.message.part1of2} 'Institution City' {constraints.size.message.part2of2}")
    String institutionCity;
    @AcceptableCodeId(clazz = PrsCtProvState.class, code = "Province / State")
    Long institutionProvStateId;
    String institutionProvState;
    @AcceptableCodeName(clazz = PrsCtProvState.class, code = "Province / State")
    String institutionProvStateCode;
    @AcceptableCodeId(clazz = PrsCtCountries.class, code = "Country")
    Long institutionCountryId;
    String institutionCountry;
    @AcceptableCodeName(clazz = PrsCtCountries.class, code = "Country")
    String institutionCountryCode;
    @AcceptableAnyField( message = "{error.anyfield.invalidcharacters.part1of2} 'Credential Year' {error.anyfield.invalidcharacters.part2of2}")
    @Size(max = 50, message = "{constraints.size.message.part1of2} 'Credential Year' {constraints.size.message.part2of2}")
    String yearIssued;
    boolean equivalencyFlag;
    // TODO: typeId shadows variable in AbstractProviderDetail. Not good!
    @AcceptableCodeId(clazz = PrsCtProvCredentialTypes.class, code = "Credential Type")
    Long typeId;
    @AcceptableCodeName(clazz = PrsCtProvCredentialTypes.class, code = "Credential Type")
    private String typeCode;
    @NotNull(message = "{error.notblank.part1of2} Credential Effective Start Date {error.notblank.part2of2}")
    private Date effectiveStartDate;
    private Date effectiveEndDate;

    /**
     * @return the designation
     */
    public String getDesignation() {
        return designation;
    }

    /**
     * @param designation the designation to set
     */
    public void setDesignation(String designation) {
        designation = StringUtils.stripAccents(designation);
        designation = StringUtils.strip(designation);
        this.designation = designation;
    }

    /**
     * @return the grantingInstitution
     */
    public String getGrantingInstitution() {
        return grantingInstitution;
    }

    /**
     * @param grantingInstitution the grantingInstitution to set
     */
    public void setGrantingInstitution(String grantingInstitution) {
        grantingInstitution = StringUtils.stripAccents(grantingInstitution);
        grantingInstitution = StringUtils.strip(grantingInstitution);
        this.grantingInstitution = grantingInstitution;
    }

    /**
     * @return the registrationNumber
     */
    public String getRegistrationNumber() {
        return registrationNumber;
    }

    /**
     * @param registrationNumber the registrationNumber to set
     */
    public void setRegistrationNumber(String registrationNumber) {
        registrationNumber = StringUtils.stripAccents(registrationNumber);
        registrationNumber = StringUtils.strip(registrationNumber);
        this.registrationNumber = registrationNumber;
    }

    /**
     * @return the institutionCity
     */
    public String getInstitutionCity() {
        return institutionCity;
    }

    /**
     * @param institutionCity the institutionCity to set
     */
    public void setInstitutionCity(String institutionCity) {
        institutionCity = StringUtils.stripAccents(institutionCity);
        institutionCity = StringUtils.strip(institutionCity);
        this.institutionCity = institutionCity;
    }

    /**
     * @return the institutionProvState
     */
    public String getInstitutionProvState() {
        return institutionProvState;
    }

    /**
     * @param institutionProvState the institutionProvState to set
     */
    public void setInstitutionProvState(String institutionProvState) {
        this.institutionProvState = institutionProvState;
    }

    /**
     * @return the institutionProvStateCode
     */
    public String getInstitutionProvStateCode() {
        return institutionProvStateCode;
    }

    /**
     * @param institutionProvStateCode the institutionProvStateCode to set
     */
    public void setInstitutionProvStateCode(String institutionProvStateCode) {
        this.institutionProvStateCode = institutionProvStateCode;
    }

    /**
     * @return the institutionCountry
     */
    public String getInstitutionCountry() {
        return institutionCountry;
    }

    /**
     * @param institutionCountry the institutionCountry to set
     */
    public void setInstitutionCountry(String institutionCountry) {
        this.institutionCountry = institutionCountry;
    }

    /**
     * @return the institutionCountryCode
     */
    public String getInstitutionCountryCode() {
        return institutionCountryCode;
    }

    /**
     * @param institutionCountryCode the institutionCountryCode to set
     */
    public void setInstitutionCountryCode(String institutionCountryCode) {
        this.institutionCountryCode = institutionCountryCode;
    }

    /**
     * @return the yearIssued
     */
    public String getYearIssued() {
        return yearIssued;
    }

    /**
     * @param yearIssued the yearIssued to set
     */
    public void setYearIssued(String yearIssued) {
        yearIssued = StringUtils.stripAccents(yearIssued);
        yearIssued = StringUtils.strip(yearIssued);
        this.yearIssued = yearIssued;
    }

    /**
     * @return the institutionProvStateId
     */
    public Long getInstitutionProvStateId() {
        return institutionProvStateId;
    }

    /**
     * @param institutionProvStateId the institutionProvStateId to set
     */
    public void setInstitutionProvStateId(Long institutionProvStateId) {
        this.institutionProvStateId = institutionProvStateId;
    }

    /**
     * @return the institutionCountryId
     */
    public Long getInstitutionCountryId() {
        return institutionCountryId;
    }

    /**
     * @param institutionCountryId the institutionCountryId to set
     */
    public void setInstitutionCountryId(Long institutionCountryId) {
        this.institutionCountryId = institutionCountryId;
    }

    /**
     * @return the equivalencyFlag
     */
    public boolean isEquivalencyFlag() {
        return equivalencyFlag;
    }

    /**
     * @param equivalencyFlag the equivalencyFlag to set
     */
    public void setEquivalencyFlag(boolean equivalencyFlag) {
        this.equivalencyFlag = equivalencyFlag;
    }

    @Override
    public Long getTypeId() {
        return typeId;
    }

    @Override
    public void setTypeId(Long typeId) {
        this.typeId = typeId;
    }

    @Override
    public String[] getMessageDataBlockFields() {
        return new String[]{"typeCode"};
    }
    
    @Override
    public ca.bc.gov.health.plr.dto.provider.esb.AbstractProviderDetail toEsbVersion() throws Exception {  
        ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto esbVersion = new ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto();        
        
        PropertyUtils.copyProperties(esbVersion, this);
        
        return esbVersion;

    }

    @Override
    public String getTypeCode() {
        return typeCode;
    }

    @Override
    public void setTypeCode(String typeCode) {
        this.typeCode = typeCode;
    }
    @Override
    public String getBlockName() {
        return "Credential";
    }

    /**
     * @return the effectiveStartDate
     */
    @Override
    public Date getEffectiveStartDate() {
        return effectiveStartDate;
    }

    /**
     * @param effectiveStartDate the effectiveStartDate to set
     */
    @Override
    public void setEffectiveStartDate(Date effectiveStartDate) {
        this.effectiveStartDate = effectiveStartDate;
    }

    @Override
    public Date getEffectiveEndDate() {
        return effectiveEndDate;
    }

    @Override
    public void setEffectiveEndDate(Date effectiveEndDate) {
        this.effectiveEndDate = effectiveEndDate;
    }

    @Override
    public void addToProviderDto(ProviderDto providerDto) {
        providerDto.getCredentials().add(this);
    }

    
    
    @Override
    public Class getEntityClass() {
        return PrsProviderCredentials.class;
    }
    
    @Override
    public Method getDtoConverterMethod() {
        Method method = null;
        try {
            method = ProviderDtoConverter.class.getMethod("buildCredential", PrsProviderCredentials.class);
        } catch (NoSuchMethodException | SecurityException ex) {
            Logger.getLogger(AddressDto.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // return null is OK
        return method;
    }

}
