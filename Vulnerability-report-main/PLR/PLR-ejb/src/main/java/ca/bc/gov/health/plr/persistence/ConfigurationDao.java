package ca.bc.gov.health.plr.persistence;

import static ca.bc.gov.health.plr.constants.Consts.HEADER_HSTS_FILTER_FLAG_TRUE;
import ca.bc.gov.health.plr.dto.provider.esb.DistributionChangeType;
import ca.bc.gov.health.plr.persistence.CodeTableCodes.GrsCtPartyType;
import ca.bc.gov.health.plr.service.PLRConfigurationResourceLoader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.ejb.DependsOn;
import javax.ejb.EJB;
import javax.ejb.Lock;
import javax.ejb.LockType;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@Singleton
@Startup
@DependsOn("PLRConfigurationResourceLoader")
@Lock(LockType.READ)
public class ConfigurationDao {

    @EJB
    private PLRConfigurationResourceLoader configLoader;

    public int getMaxSearchResults() {
        return Integer.parseInt(configLoader.getValue(PLRConfigurationResourceLoader.SEARCH_PROVIDER_MAX_RESULTS));
    }

    public int getMaxResultsFromDatabase() {
        return Integer.parseInt(configLoader.getValue(PLRConfigurationResourceLoader.SEARCH_PROVIDER_MAX_RESULTS_FROM_DB));
    }

    public int getAddressSuggestionsUIDelay() {
        return Integer.parseInt(configLoader.getValue(PLRConfigurationResourceLoader.ADDRESSDOCTOR_FASTCOMPLETE_UIDELAY));
    }

    public List<String> getADFastCompleteProcessStatus() {
        String processStatuses = configLoader.getValue(PLRConfigurationResourceLoader.ADDRESSDOCTOR_FASTCOMPLETE_PROCESSSTATUS);
        if (StringUtils.isNotBlank(processStatuses)) {
            return Arrays.asList(processStatuses.split(","));
        }
        return new ArrayList<>();
    }

    /**
     * Returns list of string values for the registry admin emails to to receive
     * batch update status
     *
     * @return
     */
    public List<String> getBatchTxNotificationEmailIds() {
        String emails = configLoader.getValue(PLRConfigurationResourceLoader.BATCH_NOTIFICATION_RECIPIENTS);
        if (StringUtils.isNotBlank(emails)) {
            return Arrays.asList(emails.split(","));
        }
        return null;
    }

    /**
     * Returns the from email address for the batch update email
     *
     * @return
     */
    public String getBatchTxEmailFromAddress() {
        return configLoader.getValue(PLRConfigurationResourceLoader.BATCH_NOTIFICATION_FROM);
    }

    /**
     * Returns the message interaction id for distribution messages.
     *
     * @param changeType
     * @return
     */
    public String getMessageInteractionId(DistributionChangeType changeType, GrsCtPartyType partyType) {

        // older distributions won;t have a party type as everything was an IND
        if (partyType == null) {
            if (changeType.equals(DistributionChangeType.ADD)) {
                return configLoader.getValue(PLRConfigurationResourceLoader.DIST_INTERACTIONID_ADD_INDIVIDUAL);
            } else {
                return configLoader.getValue(PLRConfigurationResourceLoader.DIST_INTERACTIONID_UPDATE_INDIVIDUAL);
            }
        } else {
            if (changeType.equals(DistributionChangeType.ADD) && partyType.getValue().matches(CodeTableCodes.GrsCtPartyType.IND.getValue())) {
                return configLoader.getValue(PLRConfigurationResourceLoader.DIST_INTERACTIONID_ADD_INDIVIDUAL);
            } else if (changeType.equals(DistributionChangeType.UPDATE) && partyType.getValue().matches(CodeTableCodes.GrsCtPartyType.IND.getValue())) {
                return configLoader.getValue(PLRConfigurationResourceLoader.DIST_INTERACTIONID_UPDATE_INDIVIDUAL);
            } else if (changeType.equals(DistributionChangeType.ADD) && partyType.getValue().matches(CodeTableCodes.GrsCtPartyType.ORG.getValue())) {
                return configLoader.getValue(PLRConfigurationResourceLoader.DIST_INTERACTIONID_ADD_ORGANIZATION);
            } else {  // must be ORG for UPDATE
                return configLoader.getValue(PLRConfigurationResourceLoader.DIST_INTERACTIONID_UPDATE_ORGANIZATION);
            }
        }
    }

    /**
     * Returns reg admin org chid
     *
     * @return
     */
    public String getRegAdminOrgChid() {
        return configLoader.getValue(PLRConfigurationResourceLoader.REG_ADMIN_ORG_CHID);
    }

    /**
     * Returns target org chid
     *
     * @return
     */
    public String getTargetOrgChid() {
        return configLoader.getValue(PLRConfigurationResourceLoader.TARGET_ORGANIZATION_CHID);
    }

    /**
     * Returns source org chid
     *
     * @return
     */
    public String getSourceOrgChid() {
        return configLoader.getValue(PLRConfigurationResourceLoader.SOURCE_ORGANIZATION_CHID);
    }

    /**
     * Returns source network address chid
     *
     * @return
     */
    public String getSourceNetworkAddressChid() {
        return configLoader.getValue(PLRConfigurationResourceLoader.SOURCE_NETWORK_ADDRESS_CHID);
    }

    /**
     * Returns target network address chid
     *
     * @return
     */
    public String getTargetNetworkAddressChid() {
        return configLoader.getValue(PLRConfigurationResourceLoader.TARGET_NETWORK_ADDRESS_CHID);
    }

    /**
     * Returns email format regex value
     *
     * @return
     */
    public String getEmailFormatRegex() {
        return configLoader.getValue(PLRConfigurationResourceLoader.EMAIL_VALID_FORMAT_REGEX);
    }

    /**
     * Enable or disable HSTS (HTTP Strict Transport Security) filter Defaults
     * to enable by returning true
     *
     * @return String - the HSTS switch value from PLR_CONFIGURATION_PROPERTIES
     * table
     */
    public String getHSTSFilterSwitch() {
        String checkHSTSEnableSwitch = configLoader.getValue(PLRConfigurationResourceLoader.HSTS_FILTER_SWITCH);
        if (StringUtils.isNotBlank(checkHSTSEnableSwitch)) {
            return checkHSTSEnableSwitch;
        }
        return HEADER_HSTS_FILTER_FLAG_TRUE;
    }

    /**
     * Address Doctor Service Configurable Properties *
     */
    public String getADDownEmailNotificationSubject() {
        return configLoader.getValue(PLRConfigurationResourceLoader.ADDRESSDOCTOR_NOTIFICATION_DOWN_SUBJECT);
    }

    public String getADDownEmailNotificationBody() {
        return configLoader.getValue(PLRConfigurationResourceLoader.ADDRESSDOCTOR_NOTIFICATION_DOWN_BODY);
    }

    public String getADUpEmailNotificationSubject() {
        return configLoader.getValue(PLRConfigurationResourceLoader.ADDRESSDOCTOR_NOTIFICATION_UP_SUBJECT);
    }

    public String getADUpEmailNotificationBody() {
        return configLoader.getValue(PLRConfigurationResourceLoader.ADDRESSDOCTOR_NOTIFICATION_UP_BODY);
    }

    public List<String> getADEmailNotificationRecipients() {
        String adEmails = configLoader.getValue(PLRConfigurationResourceLoader.ADDRESSDOCTOR_NOTIFICATION_RECIPIENTS);
        if (StringUtils.isNotBlank(adEmails)) {
            return Arrays.asList(adEmails.split(","));
        }
        return new ArrayList<>();
    }

    public String getADEmailNotificationFrom() {
        return configLoader.getValue(PLRConfigurationResourceLoader.ADDRESSDOCTOR_NOTIFICATION_SENDER);
    }

    public List<String> getADEmailNotificationCCRecipients() {
        String adEmails = configLoader.getValue(PLRConfigurationResourceLoader.ADDRESSDOCTOR_NOTIFICATION_CCRECIPIENTS);
        if (StringUtils.isNotBlank(adEmails)) {
            return Arrays.asList(adEmails.split(","));
        }
        return new ArrayList<>();
    }

    public List<String> getADEmailNotificationBCCRecipients() {
        String adEmails = configLoader.getValue(PLRConfigurationResourceLoader.ADDRESSDOCTOR_NOTIFICATION_BCCRECIPIENTS);
        if (StringUtils.isNotBlank(adEmails)) {
            return Arrays.asList(adEmails.split(","));
        }
        return new ArrayList<>();
    }

    public String getADValidationProcessMode() {
        return configLoader.getValue(PLRConfigurationResourceLoader.ADDRESSDOCTOR_VALIDATION_MODE);
    }

    public List<String> getADProcessStatus() {
        String processStatuses = configLoader.getValue(PLRConfigurationResourceLoader.ADDRESSDOCTOR_VALIDATION_PROCESSSTATUS);
        if (StringUtils.isNotBlank(processStatuses)) {
            return Arrays.asList(processStatuses.split(","));
        }
        return new ArrayList<>();
    }

    public List<String> getADWarnProcessStatus() {
        String processStatuses = configLoader.getValue(PLRConfigurationResourceLoader.ADDRESSDOCTOR_VALIDATION_WARNING_PROCESSSTATUS);
        if (StringUtils.isNotBlank(processStatuses)) {
            return Arrays.asList(processStatuses.split(","));
        }
        return new ArrayList<>();
    }

    public int getADMailabilityScore() {
        return Integer.parseInt(configLoader.getValue(PLRConfigurationResourceLoader.ADDRESSDOCTOR_VALIDATION_MAILABILITYSCORE));
    }

    /**
     * Turns off address validation Marks all address as Unknown by pretending
     * unavailable by throwing exception Defaults to ON by returning true
     *
     * @return
     */
    public String getAddressValidationOnOffSwitch() {
        String validateAddressesOnOffSwitch = configLoader.getValue(PLRConfigurationResourceLoader.VALIDATE_ADDRESSES_SWITCH);
        if (StringUtils.isNotBlank(validateAddressesOnOffSwitch)) {
            return validateAddressesOnOffSwitch;
        }
        return "true";
    }
}
