package ca.bc.gov.health.plr.service.distribution;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.esb.BatchResponse;
import ca.bc.gov.health.plr.dto.esb.DistributionNotification;
import ca.bc.gov.health.plr.service.JNDIResourceLoader;
import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.URL;
import java.security.KeyStore;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.ApplicationScoped;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import javax.ws.rs.client.Client;
import javax.ws.rs.client.ClientBuilder;
import javax.ws.rs.client.Entity;
import javax.ws.rs.client.WebTarget;
import javax.ws.rs.core.MediaType;
import org.glassfish.jersey.client.ClientConfig;
import org.glassfish.jersey.jackson.JacksonFeature;

/**
 * Sends messages to the ESB.
 * 
 * @author David Sharpe (david.a.sharpe@cgi.com)
 */
@ApplicationScoped
public class RestClient {

    @EJB
    private JNDIResourceLoader prod;
    
    private WebTarget distributionResource;
    private WebTarget batchResource;
    private WebTarget healthResource;

    @PostConstruct
    void init() {
        try {
            /**
             * Configure our Jersey client for SSL Mutual Authentication
             */
            
            //Start by loading params from JNDI
            String trustStoreLocation = prod.appResource().get(Consts.ESB_CLIENT_TRUSTSTORE);
            String trustStorePassword = prod.appResource().get(Consts.ESB_CLIENT_TRUSTSTORE_PASSWORD);
            String keyStoreLocation = prod.appResource().get(Consts.ESB_CLIENT_KEYSTORE);
            String keyStorePassword = prod.appResource().get(Consts.ESB_CLIENT_KEYSTORE_PASSWORD);
            String keyPassword = prod.appResource().get(Consts.ESB_CLIENT_KEY_PASSWORD);
            //Load Truststore
            KeyStore trustStore = KeyStore.getInstance("JKS");
            trustStore.load(getClass().getResourceAsStream(trustStoreLocation), trustStorePassword.toCharArray());            
            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance("PKIX", "SunJSSE");
            trustManagerFactory.init(trustStore);
            
            //Load Keystore
            KeyStore keyStore = KeyStore.getInstance("JKS");
            keyStore.load(getClass().getResourceAsStream(keyStoreLocation), keyStorePassword.toCharArray());
            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance("SunX509", "SunJSSE");
            keyManagerFactory.init(keyStore, keyPassword.toCharArray());
            
            //Setup SSLContext
            SSLContext sslContext = SSLContext.getInstance("SSL");
            sslContext.init(keyManagerFactory.getKeyManagers(), trustManagerFactory.getTrustManagers(), null);
            
            Client client = ClientBuilder.newBuilder().hostnameVerifier(HttpsURLConnection.getDefaultHostnameVerifier()).sslContext(sslContext).register(JacksonFeature.class).build();
            
            //Initialize Jersey resources
            distributionResource = client.target(prod.appResource().get(Consts.ESB_DISTRIBUTION_SERVICE_BASE_URI));
            batchResource = client.target(prod.appResource().get(Consts.ESB_BATCH_SERVICE_BASE_URI));
            healthResource = client.target(prod.appResource().get(Consts.ESB_BATCH_SERVICE_BASE_URI).replace("plrBatch", "healthCheck"));
        } catch (Exception namingException) {
            throw new RuntimeException(namingException);
        }
    }
    
    public void post(DistributionNotification notification) {
        //distributionResource.request(MediaType.APPLICATION_JSON).post(notification);
        distributionResource.request().post(Entity.entity(notification, MediaType.APPLICATION_JSON), String.class);
    }
    
    public void post(BatchResponse batchResponse) {
        //batchResource.accept(MediaType.APPLICATION_JSON_TYPE).type(MediaType.APPLICATION_JSON_TYPE).post(batchResponse);
        batchResource.request().post(Entity.entity(batchResponse, MediaType.APPLICATION_JSON), String.class);
    }
    
    public String getEsbHealth() {
        return healthResource.request().get().readEntity(String.class);
    }

    /**
     * Configures the HttpURLConnection with a proxy if the standard system 
     * property <code>http.proxyHost</code> is defined, otherwise does not use
     * a proxy.
     */
//    private static class HttpURLConnectionFactoryProxyHandler implements HttpURLConnectionFactory {
//
//        private static final Proxy p = init();
//        
//        private static Proxy init() {
//            if (System.getProperties().containsKey("http.proxyHost")) {
//                return new Proxy(Proxy.Type.HTTP,
//                        new InetSocketAddress(
//                                System.getProperty("http.proxyHost"),
//                                Integer.getInteger("http.proxyPort", 80)));
//            }
//            return Proxy.NO_PROXY;
//        }
//        
//        @Override
//        public HttpURLConnection getHttpURLConnection(URL url) throws IOException {
//            return (HttpURLConnection) url.openConnection(p);
//        }
//    }

}
