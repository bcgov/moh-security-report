
package ca.bc.gov.health.plr.dto.provider;

import ca.bc.gov.health.plr.dto.MessageDataBlockDto;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.ejb.entity.PrsConditions;
import ca.bc.gov.health.plr.ejb.entity.PrsCtConditionTypes;
import ca.bc.gov.health.plr.rule.provider.AcceptableAnyField;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeId;
import ca.bc.gov.health.plr.rule.provider.AcceptableCodeName;
import java.lang.reflect.Method;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import javax.validation.constraints.NotBlank;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class ConditionsDto extends AbstractProviderDetail implements  MessageDataBlockDto{
    @AcceptableAnyField( message = "{error.anyfield.invalidcharacters.part1of2} 'Condition Identifier' {error.anyfield.invalidcharacters.part2of2}")
    @Size(max = 240, message = "{constraints.size.message.part1of2} 'Condition Identifier' {constraints.size.message.part2of2}")
     String identifier; //mapped to conditionCHID
    boolean restrictionFlag;
    @AcceptableAnyField( message = "{error.anyfield.invalidcharacters.part1of2} 'Condition Explanation' {error.anyfield.invalidcharacters.part2of2}")
    @Size(max = 240, message = "{constraints.size.message.part1of2} 'Condition Explanation' {constraints.size.message.part2of2}")
    String restrictionExplanationText;
    Long psrPsrID;
    //hiding parent class version so they can be annotated
    @AcceptableCodeId(clazz = PrsCtConditionTypes.class, code = "Condition Type")
    Long typeId;
    //hiding parent class version so they can be annotated
    @AcceptableCodeName(clazz = PrsCtConditionTypes.class, code = "Condition Type")
    @NotBlank(message = "{error.notblank.part1of2}Condition Type{error.notblank.part2of2}")
    String typeCode;
    @NotNull(message = "{error.notblank.part1of2}Condition Effective Start Date{error.notblank.part2of2}")
    private Date effectiveStartDate;
    private Date effectiveEndDate;

    /**
     * @return the identifier
     */
    public String getIdentifier() {
        return identifier;
    }

    /**
     * @param identifier the identifier to set
     */
    public void setIdentifier(String identifier) {
        identifier = StringUtils.stripAccents(identifier);
        identifier = StringUtils.strip(identifier);
        this.identifier = identifier;
    }

    /**
     * @return the restrictionFlag
     */
    public boolean isRestrictionFlag() {
        return restrictionFlag;
    }

    /**
     * @param restrictionFlag the restrictionFlag to set
     */
    public void setRestrictionFlag(boolean restrictionFlag) {
        this.restrictionFlag = restrictionFlag;
    }

    /**
     * @return the restrictionExplanationText
     */
    public String getRestrictionExplanationText() {
        return restrictionExplanationText;
    }

    /**
     * @param restrictionExplanationText the restrictionExplanationText to
     * set
     */
    public void setRestrictionExplanationText(String restrictionExplanationText) {
        restrictionExplanationText = StringUtils.stripAccents(restrictionExplanationText);
        restrictionExplanationText = StringUtils.strip(restrictionExplanationText);
        this.restrictionExplanationText = restrictionExplanationText;
    }

    /**
     *
     * @return providerSubRoleID
     */
    public Long getPsrPsrID() {
        return psrPsrID;
    }

    /**
     *
     * @param psrPsrID providerSubRoleID
     */
    public void setPsrPsrID(Long psrPsrID) {
        this.psrPsrID = psrPsrID;
    }

    /**
     * @return the typeCode
     */
    @Override
    public String getTypeCode() {
        return typeCode;
    }

    /**
     * @param typeCode the typeCode to set
     */
    @Override
    public void setTypeCode(String typeCode) {
        this.typeCode = typeCode;
    }

    /**
     * @return the typeId
     */
    @Override
    public Long getTypeId() {
        return typeId;
    }

    /**
     * @param typeId the typeId to set
     */
    @Override
    public void setTypeId(Long typeId) {
        this.typeId = typeId;
    }

    @Override
    public String[] getMessageDataBlockFields() {
        return new String[]{"identifier"};
    }
    
    @Override
    public ca.bc.gov.health.plr.dto.provider.esb.AbstractProviderDetail toEsbVersion() throws Exception {  
        ca.bc.gov.health.plr.dto.provider.esb.ConditionsDto esbVersion = new ca.bc.gov.health.plr.dto.provider.esb.ConditionsDto();        
        
        PropertyUtils.copyProperties(esbVersion, this);
        
        return esbVersion;

    }
    @Override
    public String getBlockName() {
        return "Condition";
    }

    /**
     * @return the effectiveStartDate
     */
    @Override
    public Date getEffectiveStartDate() {
        return effectiveStartDate;
    }

    /**
     * @param effectiveStartDate the effectiveStartDate to set
     */
    @Override
    public void setEffectiveStartDate(Date effectiveStartDate) {
        this.effectiveStartDate = effectiveStartDate;
    }

    @Override
    public Date getEffectiveEndDate() {
        return effectiveEndDate;
    }

    @Override
    public void setEffectiveEndDate(Date effectiveEndDate) {
        this.effectiveEndDate = effectiveEndDate;
    }

    @Override
    public void addToProviderDto(ProviderDto providerDto) {
        providerDto.getConditions().add(this);
    }

    
    @Override
    public Class getEntityClass() {
        return PrsConditions.class;
    }
    
    @Override
    public Method getDtoConverterMethod() {
        Method method = null;
        try {
            method = ProviderDtoConverter.class.getMethod("buildCondition", PrsConditions.class);
        } catch (SecurityException ex) {
            Logger.getLogger(AddressDto.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchMethodException ex) {
            Logger.getLogger(ConditionsDto.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        // return null is OK
        return method;
    }
    
}
