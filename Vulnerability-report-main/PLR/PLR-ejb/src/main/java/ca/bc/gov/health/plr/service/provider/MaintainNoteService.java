package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.converter.NoteDtoConverter;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.dto.provider.NoteDto;
import ca.bc.gov.health.plr.ejb.entity.PrsNotes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.rule.provider.AccessRestrictionService;
import ca.bc.gov.health.plr.service.EntityValidatorService;
import ca.bc.gov.health.plr.service.validators.ConfidentialityValidator;
import ca.bc.gov.health.plr.service.validators.EntityChangeDetector;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.math.BigDecimal;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import org.apache.commons.lang3.StringUtils;

/**
 * Add or update a note.
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@Stateless
@LocalBean
public class MaintainNoteService implements MaintainService<NoteDto>{

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;
    @EJB
    private NoteDtoConverter noteDtoConverter;
    @EJB
    private JournalService<PrsNotes> journalService;

    @EJB
    private EntityValidatorService<PrsNotes> validatorService;

    @EJB
    private ConfidentialityValidator<PrsNotes> confidentialityValidator;

    @EJB
    private AccessRestrictionService accessRestrictionService;
    
    @EJB
    private ProviderDtoConverter providerDtoConverter;
    
    @EJB
    private EntityChangeDetector<NoteDto, PrsNotes> entityChangeDetector;

    /**
     * Persists a DTO to the database
     *
     * @param dto dto to save
     * @throws ca.bc.gov.health.plr.service.provider.DuplicateRecordException
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Override
    public NoteDto save(NoteDto dto) throws DuplicateRecordException, EntityValidationException {
        if (StringUtils.isBlank(dto.getIdentifier())) {
            dto.setIdentifier(getNextNoteActionId());
        }

        PrsNotes newRecord = noteDtoConverter.toEntity(dto);
        entityChangeDetector.checkForChanges(dto, newRecord);
        if (dto.isNoChangeOnUpdate()) {
            return dto;
        }
        validatorService.validate(newRecord, confidentialityValidator);

        newRecord = journalService.journal(newRecord);

        return providerDtoConverter.buildNote(newRecord);
    }

    /**
     * Get a complete list of Note DTOs related to the specified Provider.
     *
     * @param pauthId specifies a valid Provider.
     * @return a complete list of Note DTOs related to the specified Provider.
     */
    public List<NoteDto> getNotes(Long pauthId) {
        PrsProviders provider = em.find(PrsProviders.class, pauthId);
        List<NoteDto> dtos = providerDtoConverter.buildNotes(provider.getPrsNotesList());
        accessRestrictionService.applyReadRestriction(dtos, provider.getHptCode(), PrsNotes.class);
        return dtos;
    }

    /**
     * @return the next Note CHID in sequence in the form "NC.#.PRS".
     */
    private String getNextNoteActionId() {
        String queryStr = "select PRS_NOTE_CHID_SEQ.nextval from dual";
        Query query = em.createNativeQuery(queryStr);
        Long result = ((BigDecimal) query.getSingleResult()).longValue();
        return "NC." + result + ".PRS";
    }

}
