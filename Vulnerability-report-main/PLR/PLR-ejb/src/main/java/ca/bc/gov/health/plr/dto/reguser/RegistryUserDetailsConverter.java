package ca.bc.gov.health.plr.dto.reguser;

import ca.bc.gov.health.plr.dto.PartyDetailsDto;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.OrgNameDto;

import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAccessProfiles;
import ca.bc.gov.health.plr.ejb.entity.GrsDistributionProfiles;
import ca.bc.gov.health.plr.ejb.entity.GrsPartyDetails;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.util.EntityUtils;
import java.util.ArrayList;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import org.apache.commons.lang3.Validate;

/**
 *
 * @author sumesh.kariyil
 */
@Stateless
public class RegistryUserDetailsConverter {
    
    @EJB
    private ProviderDtoConverter providerDtoConverter;
    
    public RegistryUserDetails toDto(GrsRegistryUsers grsRegistryUsers) {
        Validate.notNull(grsRegistryUsers);
        RegistryUserDetails registryUserDetails = new RegistryUserDetails();
        registryUserDetails.setRuId(grsRegistryUsers.getRuId());
        registryUserDetails.setParties(getPartyDetails(grsRegistryUsers));
        registryUserDetails.setActivePartyDto(getActiveParty(registryUserDetails.getParties()));
        registryUserDetails.setNames(getOrgNames(grsRegistryUsers));
        registryUserDetails.setActiveOrgName(getActiveOrgName(registryUserDetails.getNames()));
        registryUserDetails.setAddresses(getAddresses(grsRegistryUsers));
        registryUserDetails.setTelecommunication(getTelecommunications(grsRegistryUsers));
        registryUserDetails.setElectronicAddresses(getElectronicAddresses(grsRegistryUsers));
        registryUserDetails.setDistributions(getDistributions(grsRegistryUsers));
        registryUserDetails.setProfiles(getAccessProfiles(grsRegistryUsers));
        return registryUserDetails;
    }
    
    public List<PartyDto> getPartyDetails(GrsRegistryUsers user) {
        List<PartyDto> result = new ArrayList<>();
        if (user.getPartyPartyId() != null ) {            
            List<GrsPartyDetails> partyDetails = user.getPartyPartyId().getGrsPartyDetailsList();
            if(partyDetails != null && !partyDetails.isEmpty()){
                for(GrsPartyDetails grsPartyDetails : partyDetails){
                    String endReasonCode = grsPartyDetails.getEndReasonCode() == null ? null : grsPartyDetails.getEndReasonCode().getCtlNameCode();
                    PartyDto party = new PartyDto();
                    
                    party.setRegUserId(user.getPartyPartyId().getRegistryUserOrgChid());
                    if(user.getRuTypeCode() != null){
                        party.setRegUserType(user.getRuTypeCode().getCtlDescTxt());
                        party.setRegUserTypeCode(user.getRuTypeCode().getCtlNameCode());
                        party.setRegUserTypeId(user.getRuTypeCode().getCtlId());
                    }
                    if(user.getPartyPartyId().getPartyTypeCode() != null){
                        party.setPartyTypeCode(user.getPartyPartyId().getPartyTypeCode().getCtlNameCode());
                        party.setPartyTypeId(user.getPartyPartyId().getPartyTypeCode().getCtlId());
                    }
                    if(user.getJurisdictionCode() != null){
                        party.setJurisdictionCode(user.getJurisdictionCode().getCtlNameCode());
                        party.setJurisdictionName(user.getJurisdictionCode().getCtlDescTxt());
                    }      
                    party.setPartyDetailsDto(buildPartyDetails(grsPartyDetails));
                    party.getPartyDetailsDto().setPartyId(user.getPartyPartyId().getPartyId());
                    party.setId(user.getPartyPartyId().getPartyId());
                    if(grsPartyDetails.getDefaultDataOwnerCode() != null){
                        party.setDefaultDataSetCode(grsPartyDetails.getDefaultDataOwnerCode().getCtlNameCode());
                        party.setDefaultDataSetText(grsPartyDetails.getDefaultDataOwnerCode().getCtlDescTxt());
                    }
                    
                    party.setDisplayActive(EntityUtils.isActive(party.getPartyDetailsDto().isActive(), endReasonCode, grsPartyDetails.getInvalidatedDts(), grsPartyDetails.getEffectiveStartDate(), grsPartyDetails.getEffectiveEndDate()));
                    party.setActive(EntityUtils.booleanValue(user.getPartyPartyId().getActiveFlag()));
                    party.setUpdatable(EntityUtils.isUpdatable(party.getPartyDetailsDto().isActive(), endReasonCode, grsPartyDetails.getInvalidatedDts()));
                    party.setRuRuId(user.getRuId());
                    party.setUserChid(grsPartyDetails.getUserChid());
                    party.setCreatedDate(grsPartyDetails.getCreatedDts());
                    party.setInvalidatedDate(grsPartyDetails.getInvalidatedDts());
                    party.setEndReasonCode(grsPartyDetails.getEndReasonCode() != null?grsPartyDetails.getEndReasonCode().getCtlNameCode():null);
                    result.add(party);
                }
            }
        }
        return result;
    }
    
    public List<OrgNameDto> getOrgNames(GrsRegistryUsers user) {
        if(user.getGrsOrgNamesList() != null){
            return providerDtoConverter.buildOrgNames(user.getGrsOrgNamesList());
        } 
        return null;
    }
    
   
    
    private List<AddressDto> getAddresses(GrsRegistryUsers user) {
        if (user.getGrsAddressesList() != null) {
            List<AddressDto> addresses = providerDtoConverter.buildAddresses(user.getGrsAddressesList(), false);
            return addresses;
        }
        return null;
    }
    
    private List<TelecommunicationDto> getTelecommunications(GrsRegistryUsers user) {
        if (user.getGrsTelephonesList() != null) {
            List<TelecommunicationDto> telephones = providerDtoConverter.buildTelephones(user.getGrsTelephonesList(), false);
            return telephones;
        }
        return null;
    }
    
    private List<ElectronicAddressDto> getElectronicAddresses(GrsRegistryUsers user) {
        if (user.getGrsElectronicAddressesList() != null) {
            List<ElectronicAddressDto> electronicAddresses = providerDtoConverter.buildElectronicAddresses(
                    user.getGrsElectronicAddressesList(), false);
            return electronicAddresses;
        }
        return null;
    }

    public List<DistributionDto> getDistributions(GrsRegistryUsers user) {
        if (user.getGrsDistributionProfilesList() != null  ) {
            List<DistributionDto> distributions = new ArrayList<>();
            DistributionDto distributionDto;
            for (GrsDistributionProfiles distributionProfile : user.getGrsDistributionProfilesList()) {
                distributionDto = buildDistribution(distributionProfile);
//                if(distributionDto.isActive()){
                    distributions.add(distributionDto);
//                }
            }
            
            return distributions;
        }
        return null;
    }
    
    public DistributionDto buildDistribution(GrsDistributionProfiles distributionProfile) {
        DistributionDto details = new DistributionDto();
        details.setId(distributionProfile.getCdpId());
        if(distributionProfile.getDptCode() != null){
            details.setProfileType(distributionProfile.getDptCode().getCtlDescTxt());
            details.setProfileTypeCode(distributionProfile.getDptCode().getCtlNameCode());
            details.setProfileTypeId(distributionProfile.getDptCode().getCtlId());
        }
        details.setName(distributionProfile.getDistributionProfileChid());
        details.setDestAddress(parseDestinationAddress(distributionProfile.getTransmissionAddressTxt()));
        details.setUpperCase(EntityUtils.booleanValue(distributionProfile.getTextCaseCode()));
        details.setFutureUpdates(EntityUtils.booleanValue(distributionProfile.getFutureDatedUpdatesFlag()));
        if(distributionProfile.getEditransmissionHoldFlag() != null){
            details.setHold(EntityUtils.booleanValue(distributionProfile.getEditransmissionHoldFlag()));
        }
        if(distributionProfile.getDistributeCreatesCode() != null){
            details.setCreateCode(distributionProfile.getDistributeCreatesCode().getCtlNameCode());
            details.setCreateCodeId(distributionProfile.getDistributeCreatesCode().getCtlId());
        }
        if(distributionProfile.getDistributeUpdatesCode() != null){
            details.setUpdateCode(distributionProfile.getDistributeUpdatesCode().getCtlNameCode());
            details.setUpdateCodeId(distributionProfile.getDistributeUpdatesCode().getCtlId());
        }
        if(distributionProfile.getDistributeOwnCode() != null){
            details.setOwnCode(distributionProfile.getDistributeOwnCode().getCtlNameCode());
            details.setOwnCodeId(distributionProfile.getDistributeOwnCode().getCtlId());
        }        
        details.setEffectiveStartDate(distributionProfile.getEffectiveStartDate());
        details.setEffectiveEndDate(distributionProfile.getEffectiveEndDate());
        if (distributionProfile.getActiveFlag() != null) {
            details.setActive(EntityUtils.booleanValue(distributionProfile.getActiveFlag()));
        }
        details.setUserChid(distributionProfile.getUserChid());
        if (distributionProfile.getEndReasonCode() != null) {
            details.setEndReasonCode(distributionProfile.getEndReasonCode().getCtlNameCode());
        }
        details.setGenerationNum(distributionProfile.getGenerationNum());
        details.setCreatedDate(distributionProfile.getCreatedDts());
        details.setInvalidatedDate(distributionProfile.getInvalidatedDts());
        // Distribution doesn't have effective start date and end date to calculate the active state. So using isUpdatable to check the active
        details.setDisplayActive(EntityUtils.isUpdatable(details.isActive(), details.getEndReasonCode(), details.getInvalidatedDate()));
        details.setUpdatable(EntityUtils.isUpdatable(details.isActive(), details.getEndReasonCode(), details.getInvalidatedDate()));
        if (distributionProfile.getRuRuId() != null) {
            details.setRuRuId(distributionProfile.getRuRuId().getRuId());
        }
        if (distributionProfile.getOptionCode() != null) {
            details.setOptionCodeId(distributionProfile.getOptionCode().getCtlId());
            details.setOptionCode(distributionProfile.getOptionCode().getCtlNameCode());
        }
        
        
        if(distributionProfile.getHial() != null){
            details.setIsHial(EntityUtils.booleanValue(distributionProfile.getHial()));
        }
        return details;
    }

    public List<AccessProfileDto> getAccessProfiles(GrsRegistryUsers user) {
         if (user.getGrsAccessProfilesList() != null) {
            List<AccessProfileDto> profiles = new ArrayList<>();
            AccessProfileDto accessProfileDto;
            for (GrsAccessProfiles grsAccessProfile : user.getGrsAccessProfilesList()) {
                accessProfileDto = buildAccessProfile(grsAccessProfile);
                profiles.add(accessProfileDto);
            }
            return profiles;
        }
        return null;
    }

    public AccessProfileDto buildAccessProfile(GrsAccessProfiles grsAccessProfile) {
        AccessProfileDto details = new AccessProfileDto();
        details.setId(grsAccessProfile.getAcp1Id());   
        if (grsAccessProfile.getActiveFlag() != null) {
            details.setActive(EntityUtils.booleanValue(grsAccessProfile.getActiveFlag()));
        }
        if (grsAccessProfile.getDataOwnerCode() != null) {
            details.setDataOwnerCode(grsAccessProfile.getDataOwnerCode().getCtlNameCode());
        }
        if(grsAccessProfile.getApg1ApgId() != null){
            details.setGroupChid(grsAccessProfile.getApg1ApgId().getAccessProfileGroupChid());
            details.setProfileGroupId(grsAccessProfile.getApg1ApgId().getApgId());
        }
        details.setRuRuId(grsAccessProfile.getRuRuId().getRuId());
        details.setProviderType(grsAccessProfile.getHptCode().getCtlNameCode());
        details.setProviderTypeId(grsAccessProfile.getHptCode().getCtlId());
        details.setDistributeAfter(grsAccessProfile.getDistributeAfterDate());
        details.setEffectiveStartDate(grsAccessProfile.getEffectiveStartDate());
        details.setEffectiveEndDate(grsAccessProfile.getEffectiveEndDate());
        details.setUserChid(grsAccessProfile.getUserChid());
        if (grsAccessProfile.getEndReasonCode() != null) {
            details.setEndReasonCode(grsAccessProfile.getEndReasonCode().getCtlNameCode());
        }
        details.setGenerationNum(grsAccessProfile.getGenerationNum());
        details.setCreatedDate(grsAccessProfile.getCreatedDts());
        details.setInvalidatedDate(grsAccessProfile.getInvalidatedDts());
        
        details.setDisplayActive(EntityUtils.isActive(details.isActive(), details.getEndReasonCode(), details.getInvalidatedDate(), details.getEffectiveStartDate(), details.getEffectiveEndDate()));
        details.setUpdatable(EntityUtils.isUpdatable(details.isActive(), details.getEndReasonCode(), details.getInvalidatedDate()));

        return details;
    }

    private String parseDestinationAddress(String transmissionAddressTxt) {
        if(transmissionAddressTxt != null){
            for(HttpPrefix prefix : HttpPrefix.values()){
                int indx = transmissionAddressTxt.indexOf(prefix.getValue());
                if(indx > 0){
                    transmissionAddressTxt = transmissionAddressTxt.substring(indx);
                    break;
                }
            }
        }
        return transmissionAddressTxt;
    }

    public PartyDto getActiveParty(List<PartyDto> parties) {
        if(parties != null){
            for(PartyDto partyDto : parties){
                if(partyDto.isUpdatable()){
                    return partyDto;
                }
            }
        }
        return new PartyDto();
    }
    
    public OrgNameDto getActiveOrgName(List<OrgNameDto> names) {
        if(names != null){
            for(OrgNameDto nameDto : names){
                if(nameDto.isUpdatable()){
                    return nameDto;
                }
            }
        }
        return new OrgNameDto();
    }

    private PartyDetailsDto buildPartyDetails(GrsPartyDetails grsPartyDetails) {
        PartyDetailsDto partyDetailsDto = new PartyDetailsDto();

        partyDetailsDto.setActive(EntityUtils.booleanValue(grsPartyDetails.getActiveFlag()));
        partyDetailsDto.setContactDetails(grsPartyDetails.getContactDetailsTxt());
        partyDetailsDto.setAgreement(grsPartyDetails.getAgreementChid());
        partyDetailsDto.setEffectiveStartDate(grsPartyDetails.getEffectiveStartDate());
        partyDetailsDto.setEffectiveEndDate(grsPartyDetails.getEffectiveEndDate());        
        partyDetailsDto.setId(grsPartyDetails.getPtydId());
        if (grsPartyDetails.getEndReasonCode() != null) {
            partyDetailsDto.setEndReasonCodeId(grsPartyDetails.getEndReasonCode().getCtlId());
        }
        return partyDetailsDto;
    }
    
}
