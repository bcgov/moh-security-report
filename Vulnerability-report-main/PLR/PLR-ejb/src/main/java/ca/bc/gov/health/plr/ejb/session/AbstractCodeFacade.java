package ca.bc.gov.health.plr.ejb.session;

import ca.bc.gov.health.plr.ejb.entity.CodeTableInterface;
import ca.bc.gov.health.plr.persistence.CodeTableEnum;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import javax.annotation.PostConstruct;
import javax.ejb.Lock;
import javax.ejb.LockType;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.criteria.CriteriaQuery;

/**
 * Retrieves codes.
 * 
 * Implements caching. Codes will be loaded when the container instantiates the 
 * class, and they will not be reloaded until {@link #reInit()} is called.
 *
 * @author david.sharpe
 * @param <T> the code type.
 */
public abstract class AbstractCodeFacade<T extends CodeTableInterface> {

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;
    private final Class<T> entityClass;

    private final Map<String, T> codeNameMap = new ConcurrentHashMap<>();
    private final Map<Long, T> idMap = new ConcurrentHashMap<>();

    public AbstractCodeFacade(Class<T> entityClass) {
        this.entityClass = entityClass;
    }

    @PostConstruct
    public void init() {
        for (T code : getFromDb()) {
            codeNameMap.put(code.getCtlNameCode(), code);
            idMap.put(code.getCtlId(), code);
        }
    }

//    @Lock(LockType.WRITE)
    public void reInit() {
        codeNameMap.clear();
        idMap.clear();
        init();
    }

    public T findByName(String endReasonType) {
        return codeNameMap.get(endReasonType);
    }
    
    public T findByType(CodeTableEnum type) {
        return codeNameMap.get(type.getValue());
    }

    public T find(Long id) {
        return idMap.get(id);
    }

    public List<T> findAll() {
        return new ArrayList<>(codeNameMap.values());
    }
    
    private List<T> getFromDb() {
        CriteriaQuery<T> cq = em.getCriteriaBuilder().createQuery(entityClass);
        cq.select(cq.from(entityClass));
        return em.createQuery(cq).getResultList();
    }
    
}
