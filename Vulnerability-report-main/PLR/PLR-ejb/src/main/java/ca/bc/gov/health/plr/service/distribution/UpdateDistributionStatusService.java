package ca.bc.gov.health.plr.service.distribution;

import ca.bc.gov.health.plr.service.remote.PLRDistributionServiceRemote;
import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.provider.esb.DistributionStatus;
import ca.bc.gov.health.plr.ejb.entity.GrsDistribEventItem;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.naming.NamingException;
import javax.persistence.EntityManager;
import javax.persistence.OptimisticLockException;
import javax.persistence.PersistenceContext;

@Stateless
@LocalBean
public class UpdateDistributionStatusService implements PLRDistributionServiceRemote {

    private static final Logger LOG = Logger.getLogger(UpdateDistributionStatusService.class.getName());

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;

    @EJB
    UpdateDistributionStatusService_HelperSynchronized updateDistributionStatusService_HelperSynchronized;

    @Override
    public void updateDistributions(Map<String, DistributionStatus> statuses) {
        if (statuses != null) {
            for (Entry<String, DistributionStatus> entry : statuses.entrySet()) {
                String key = entry.getKey();
                DistributionStatus status = entry.getValue();
                updateDistribution(key, status);
            }
        }
    }

    private void updateDistribution(String id, DistributionStatus status) {
        if (status != null) {
            GrsDistribEventItem.Status intStatus = getInternalStatus(status);
            Long NumId = Long.valueOf(id);
            if (intStatus != null) {
                try {
                    Logger.getLogger(UpdateDistributionStatusService.class.getName()).log(Level.INFO, "Distribution status update received for ID " + NumId + " and status " + intStatus +".");
                    updateDistributionStatusService_HelperSynchronized.writeDistribEventItemStatus(NumId, intStatus);
                } catch (NamingException ex) {
                    Logger.getLogger(UpdateDistributionStatusService.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    private GrsDistribEventItem.Status getInternalStatus(DistributionStatus status) {
        GrsDistribEventItem.Status intStatus = null;
        switch (status) {
            case PROCESSED:
                intStatus = GrsDistribEventItem.Status.COMPLETED;
                break;
            case FAILED:
                intStatus = GrsDistribEventItem.Status.FAILED;
                break;
        }
        return intStatus;
    }
}
