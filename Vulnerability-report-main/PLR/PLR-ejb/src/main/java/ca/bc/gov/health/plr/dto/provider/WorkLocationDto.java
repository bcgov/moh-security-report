package ca.bc.gov.health.plr.dto.provider;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.DtoCommon;
import ca.bc.gov.health.plr.dto.businesskey.WorkLocationBK;
import ca.bc.gov.health.plr.dto.converter.EsbProviderDetailConverter;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocations;
import ca.bc.gov.health.plr.rule.provider.AcceptableAnyField;
import java.io.Serializable;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.validation.constraints.Digits;
import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;

//could not extend standard class as this one is not fully standard
public class WorkLocationDto implements Serializable, Comparable<WorkLocationDto> {

    private static final long serialVersionUID = 1L;

    private Long id;
    private Long pauthId;
    // REQ-00775 Validate Work Location ID, character limit 15
    @Digits(integer = 15, fraction = 0, message = "{digits.precision.part1of2}Work Location ID{digits.precision.part2of2}")
    private Long identifier;
    @AcceptableAnyField(message = "{error.anyfield.invalidcharacters.part1of2} 'User CHID' {error.anyfield.invalidcharacters.part2of2}")
    private String userChid;
    private Date createdDate;
    private Date invalidatedDate;
    private boolean active;
    private String dataOwnerCode;
    private String dataOwnerName;
    private Long operatorTypeId;
    private Long ownerTypeId;
    private Long statusId;
    private String campusOfCareTxt;
    private String operatorNameTxt;
    private String ownerNameTxt;
    private String contactNM;
    private boolean forProfit;
    private String serviceDeliveryAreaCd;
    private String localHealthAreaCd;
    private String notes;
    private String contactName;
    private boolean displayActive;
    private List<WorkLocationDetailsDto> workLocationDetails = new ArrayList<>();
    private List<AddressDto> addresses;
    private List<TelecommunicationDto> telecommunications;
    private List<InformationRouteDto> informationRoutes;
    private List<ElectronicAddressDto> electronicAddresses;
    private WorkLocationDetailsDto primaryWorkLocationDetails;

    // Contains the name of the list, which the user doesn't have access to view
    private List<String> unReadableRecords = new ArrayList<>();

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Long getPauthId() {
        return pauthId;
    }

    public void setPauthId(Long pauthPauthId) {
        this.pauthId = pauthPauthId;
    }

    public Long getIdentifier() {
        return identifier;
    }

    public void setIdentifier(Long identifier) {
        this.identifier = identifier;
    }

    public String getUserChid() {
        return userChid;
    }

    public void setUserChid(String userChid) {
        userChid = StringUtils.stripAccents(userChid);
        userChid = StringUtils.strip(userChid);
        this.userChid = userChid;
    }

    public Date getCreatedDate() {
        return createdDate;
    }

    public void setCreatedDate(Date createdDate) {
        this.createdDate = createdDate;
    }

    public Date getInvalidatedDate() {
        return invalidatedDate;
    }

    public void setInvalidatedDate(Date invalidatedDate) {
        this.invalidatedDate = invalidatedDate;
    }

    public boolean isActive() {
        return active;
    }

    public void setActive(boolean active) {
        this.active = active;
    }

    public String getDataOwnerCode() {
        return dataOwnerCode;
    }

    public void setDataOwnerCode(String dataOwnerCode) {
        this.dataOwnerCode = dataOwnerCode;
    }

    public String getDataOwnerName() {
        return dataOwnerName;
    }

    public void setDataOwnerName(String dataOwnerName) {
        this.dataOwnerName = dataOwnerName;
    }

    public Long getOperatorTypeId() {
        return operatorTypeId;
    }

    public void setOperatorTypeId(Long OperatorTypeId) {
        this.operatorTypeId = OperatorTypeId;
    }

    public Long getOwnerTypeId() {
        return ownerTypeId;
    }

    public void setOwnerTypeId(Long OwnerTypeId) {
        this.ownerTypeId = OwnerTypeId;
    }

    public Long getStatusId() {
        return statusId;
    }

    public void setStatusId(Long statusId) {
        this.statusId = statusId;
    }

    public String getCampusOfCareTxt() {
        return campusOfCareTxt;
    }

    public void setCampusOfCareTxt(String campusOfCareTxt) {
        this.campusOfCareTxt = campusOfCareTxt;
    }

    public String getOperatorNameTxt() {
        return operatorNameTxt;
    }

    public void setOperatorNameTxt(String operatorNameTxt) {
        this.operatorNameTxt = operatorNameTxt;
    }

    public String getOwnerNameTxt() {
        return ownerNameTxt;
    }

    public void setOwnerNameTxt(String ownerNameTxt) {
        this.ownerNameTxt = ownerNameTxt;
    }

    /**
     *
     * @return contact name maybe contact number //TODO
     */
    public String getContactNM() {
        return contactNM;
    }

    /**
     *
     * @param contactNM - contact name maybe contact number //TODO
     */
    public void setContactNM(String contactNM) {
        this.contactNM = contactNM;
    }

    public boolean isForProfit() {
        return forProfit;
    }

    public void setForProfit(boolean forProfit) {
        this.forProfit = forProfit;
    }

    public String getServiceDeliveryAreaCd() {
        return serviceDeliveryAreaCd;
    }

    public void setServiceDeliveryAreaCd(String serviceDeliveryAreaCd) {
        this.serviceDeliveryAreaCd = serviceDeliveryAreaCd;
    }

    public String getLocalHealthAreaCd() {
        return localHealthAreaCd;
    }

    public void setLocalHealthAreaCd(String localHealthAreaCd) {
        this.localHealthAreaCd = localHealthAreaCd;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public String getContactName() {
        return contactName;
    }

    public void setContactName(String contactName) {
        this.contactName = contactName;
    }

    public boolean isDisplayActive() {
        return displayActive;
    }

    public void setDisplayActive(boolean displayActive) {
        this.displayActive = displayActive;
    }

    public List<WorkLocationDetailsDto> getWorkLocationDetails() {
        return workLocationDetails;
    }

    public void setWorkLocationDetails(List<WorkLocationDetailsDto> workLocationDetails) {
        this.workLocationDetails = workLocationDetails;
    }

    public List<AddressDto> getAddresses() {
        return addresses;
    }

    public void setAddresses(List<AddressDto> addresses) {
        this.addresses = addresses;
    }

    public List<TelecommunicationDto> getTelecommunications() {
        return telecommunications;
    }

    public void setTelecommunications(List<TelecommunicationDto> telecommunications) {
        this.telecommunications = telecommunications;
    }

    public List<ElectronicAddressDto> getElectronicAddresses() {
        return electronicAddresses;
    }

    public void setElectronicAddresses(List<ElectronicAddressDto> electronicAddresses) {
        this.electronicAddresses = electronicAddresses;
    }

    public List<InformationRouteDto> getInformationRoutes() {
        return informationRoutes;
    }

    public void setInformationRoutes(List<InformationRouteDto> informationRoutes) {
        this.informationRoutes = informationRoutes;
    }

    /**
     *
     * @return the name stored by the active worklocation detail
     */
    public WorkLocationDetailsDto getPrimaryWorkLocationDetails() {
        return primaryWorkLocationDetails;
    }

    /**
     *
     * @param activeLocationDetailName the name stored by the active
     * worklocation detail
     */
    public void setPrimaryWorkLocationDetails(WorkLocationDetailsDto primaryWorkLocationDetails) {
        this.primaryWorkLocationDetails = primaryWorkLocationDetails;
    }

    public boolean isNew() {
        return id == null;
    }

    public List<String> getUnReadableRecords() {
        return unReadableRecords;
    }

    public void setUnReadableRecords(List<String> unReadableRecords) {
        this.unReadableRecords = unReadableRecords;
    }

    public ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto toEsbVersion() throws Exception {
        ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto esbVersion = new ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto();
        // The bean utils will throw runtime exception if we don't set the primary work location as null, 
        // the reason being bean utils checks for the name and the type and it sees the name same and the types different. 
        //One with plr package and other with esb package. The approach here is to assign the object to a temp variable and once
        //conversion is done convert the temp object and add it.
        WorkLocationDetailsDto tempPrimaryWlDetails = primaryWorkLocationDetails;
        this.setPrimaryWorkLocationDetails(null);
        PropertyUtils.copyProperties(esbVersion, this);
        this.primaryWorkLocationDetails = tempPrimaryWlDetails;
        esbVersion.setWorkLocationDetails(EsbProviderDetailConverter.toEsbList(workLocationDetails));
        esbVersion.setAddresses(EsbProviderDetailConverter.toEsbList(addresses));
        esbVersion.setTelecommunications(EsbProviderDetailConverter.toEsbList(telecommunications));
        esbVersion.setInformationRoutes(EsbProviderDetailConverter.toEsbList(informationRoutes));
        esbVersion.setElectronicAddresses(EsbProviderDetailConverter.toEsbList(electronicAddresses));

        if (primaryWorkLocationDetails != null) {
            esbVersion.setPrimaryWorkLocationDetails((ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDetailsDto) primaryWorkLocationDetails.toEsbVersion());
        }

        return esbVersion;
    }

    public Class getEntityClass() {
        return PrsWorkLocations.class;
    }

    public Method getDtoConverterMethod() {
        Method method = null;
        try {
            method = ProviderDtoConverter.class.getMethod("buildWorkLocation", PrsWorkLocations.class);
        } catch (NoSuchMethodException | SecurityException ex) {
            Logger.getLogger(AddressDto.class.getName()).log(Level.SEVERE, null, ex);
        }

        // return null is OK
        return method;
    }

    @Override
    public int compareTo(WorkLocationDto otherDto) {
        int key1CompareResult = ca.bc.gov.health.plr.util.PropertyUtils.compareLong(this.getIdentifier(), otherDto.getIdentifier());
        if (key1CompareResult != 0) {
            return key1CompareResult;
        } else {
            int key2CompareResult = ca.bc.gov.health.plr.util.PropertyUtils.compareString(this.dataOwnerCode, otherDto.getDataOwnerCode());
            if (key2CompareResult != 0) {
                return key2CompareResult;
            } else {
                return ca.bc.gov.health.plr.util.DateUtils.compareEffectiveStartAndCreatedDates(this.getWorkLocationDetails().get(0).getEffectiveStartDate(), otherDto.getWorkLocationDetails().get(0).getEffectiveStartDate(), this.getWorkLocationDetails().get(0).getCreatedDate(), otherDto.getWorkLocationDetails().get(0).getCreatedDate());
            }
        }
    }

    /**
     * Make a copy of WorkLocationDto for current or history view.
     *
     * @param currentOrHistoryView the view mode which is either current view or
     * history view.
     * @return the copy of WorkLocationDto
     */
    public WorkLocationDto copyForCurrentOrHistoryView(Consts.PROVIDER_DETAILS_VIEW_MODE currentOrHistoryView) {

        WorkLocationDto wld = new WorkLocationDto();
        wld.id = this.id;
        wld.pauthId = this.pauthId;
        wld.identifier = this.identifier;
        wld.userChid = this.userChid;
        wld.createdDate = this.createdDate;
        wld.invalidatedDate = this.invalidatedDate;
        wld.active = this.active;
        wld.dataOwnerCode = this.dataOwnerCode;
        wld.dataOwnerName = this.dataOwnerName;
        wld.operatorTypeId = this.operatorTypeId;
        wld.ownerTypeId = this.ownerTypeId;
        wld.statusId = this.statusId;
        wld.campusOfCareTxt = this.campusOfCareTxt;
        wld.operatorNameTxt = this.operatorNameTxt;
        wld.ownerNameTxt = this.ownerNameTxt;
        wld.contactNM = this.contactNM;
        wld.forProfit = this.forProfit;
        wld.serviceDeliveryAreaCd = this.serviceDeliveryAreaCd;
        wld.localHealthAreaCd = this.localHealthAreaCd;
        wld.notes = this.notes;
        wld.contactName = this.contactName;
        wld.displayActive = this.displayActive;
        wld.primaryWorkLocationDetails = this.primaryWorkLocationDetails;
        wld.unReadableRecords = this.unReadableRecords;
        wld.workLocationDetails = new ArrayList<>();
        wld.addresses = new ArrayList<>();
        wld.telecommunications = new ArrayList<>();
        wld.informationRoutes = new ArrayList<>();
        wld.electronicAddresses = new ArrayList<>();
        if (currentOrHistoryView == null) {
            return wld;
        }
        DtoCommon.pickAndAddToCurrentOrHistoryView(currentOrHistoryView, this.workLocationDetails, wld.workLocationDetails);
        DtoCommon.pickAndAddToCurrentOrHistoryView(currentOrHistoryView, this.addresses, wld.addresses);
        DtoCommon.pickAndAddToCurrentOrHistoryView(currentOrHistoryView, this.telecommunications, wld.telecommunications);
        DtoCommon.pickAndAddToCurrentOrHistoryView(currentOrHistoryView, this.informationRoutes, wld.informationRoutes);
        DtoCommon.pickAndAddToCurrentOrHistoryView(currentOrHistoryView, this.electronicAddresses, wld.electronicAddresses);
        return wld;
    }

    public boolean hasAnyWLDsWLsOrIRs() {
        if (this.hasWorkLocationDetails() || this.hasAddresses()
                || this.hasTelecommunications() || this.hasInformationRoutes() || this.hasElectronicAddresses()) {
            return true;
        }
        return false;
    }

    public boolean hasWorkLocationDetails() {
        if (this.workLocationDetails != null && !this.workLocationDetails.isEmpty()) {
            return true;
        }
        return false;
    }

    public boolean hasAddresses() {
        if (this.addresses != null && !this.addresses.isEmpty()) {
            return true;
        }
        return false;
    }

    public boolean hasTelecommunications() {
        if (this.telecommunications != null && !this.telecommunications.isEmpty()) {
            return true;
        }
        return false;
    }

    public boolean hasInformationRoutes() {
        if (this.informationRoutes != null && !this.informationRoutes.isEmpty()) {
            return true;
        }
        return false;
    }

    public boolean hasElectronicAddresses() {
        if (this.electronicAddresses != null && !this.electronicAddresses.isEmpty()) {
            return true;
        }
        return false;
    }

    /**
     * Limit the size of the input WorkLocationDto list according to the value
     * of maxBusinessObjectShown
     *
     * @param inList - the input list of WorkLocationDto
     * @param maxBusinessObjectShown int
     * @return the list of WorkLocationDto which it's size is less or equals to
     * maxBusinessObjectShown
     */
    public static List<WorkLocationDto> limitDtoListBasedOnBK(List<WorkLocationDto> inList, int maxBusinessObjectShown) {
        if (inList == null) {
            return null;
        } else if (inList.size() <= maxBusinessObjectShown) {
            return inList;
        }

        //find all business key objects
        List<WorkLocationBK> bKeyList = new ArrayList<>();
        for (WorkLocationDto t : inList) {
            WorkLocationBK bk = new WorkLocationBK(t.getId(), t.getDataOwnerCode());
            if (!bKeyList.contains(bk)) {
                bKeyList.add(bk);
            }
        }

        //go through each business key object and find all matching dtos
        List<WorkLocationDto> allList = new ArrayList<>();
        for (WorkLocationBK bk : bKeyList) {
            List<WorkLocationDto> tmpList = new ArrayList<>();
            for (WorkLocationDto t : inList) {
                WorkLocationBK bkFromDto = new WorkLocationBK(t.getId(), t.getDataOwnerCode());
                if (bk.equals(bkFromDto)) {
                    tmpList.add(t);
                }
            }
            //only keep first maxBusinessObjectShown dtos
            if (tmpList.size() > maxBusinessObjectShown) {
                tmpList = tmpList.subList(0, maxBusinessObjectShown);
            }
            if (!tmpList.isEmpty()) {
                allList.addAll(tmpList);
            }
        }

        return allList;

    }

}
