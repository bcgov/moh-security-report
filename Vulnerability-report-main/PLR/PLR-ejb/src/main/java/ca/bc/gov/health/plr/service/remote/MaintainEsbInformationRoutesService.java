/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.remote;

import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.esb.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsInformationRoutes;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocations;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.ArrayList;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.Stateless;

/**
 * Service to maintain information routes from ESB. Cannot use the generic
 * approach, as the data block depends on the child address and mechanism type.
 *
 * @author sumesh.kariyil
 */
@Stateless
public class MaintainEsbInformationRoutesService {

    @EJB
    private CodesDao codesDao;

    @EJB
    private MaintainProviderEsbProcessor<InformationRouteDto, ca.bc.gov.health.plr.dto.provider.InformationRouteDto> processor;

    public List<ca.bc.gov.health.plr.dto.provider.InformationRouteDto> process(MaintainProviderRequest request, MaintainProviderResponse response, ProviderDto providerDto) throws EntityValidationException, DuplicateRecordException, BusinessRuleException {
        List<ca.bc.gov.health.plr.dto.provider.InformationRouteDto> list = new ArrayList<>();
        for (InformationRouteDto informationRouteDto : request.getProviderDetails().getInformationRoutes()) {
            list.add(process(informationRouteDto, response, providerDto, null));
        }

        return list;
    }

    public List<ca.bc.gov.health.plr.dto.provider.InformationRouteDto> process(WorkLocationDto locationDto, MaintainProviderResponse response, PrsWorkLocations workLocation) throws EntityValidationException, DuplicateRecordException, BusinessRuleException {
        List<ca.bc.gov.health.plr.dto.provider.InformationRouteDto> list = new ArrayList<>();
        if (locationDto.getInformationRoutes() != null) {
            for (InformationRouteDto informationRouteDto : locationDto.getInformationRoutes()) {
                list.add(process(informationRouteDto, response, null, workLocation));
            }
        }

        return list;
    }

    private ca.bc.gov.health.plr.dto.provider.InformationRouteDto process(InformationRouteDto informationRouteDto, MaintainProviderResponse response, ProviderDto providerDto, PrsWorkLocations workLocation) throws EntityValidationException, DuplicateRecordException, BusinessRuleException {

        // Store the address, telecom and eAddress dto to a temp instance, as the BeanUtils cannot copy the child items
        ca.bc.gov.health.plr.dto.provider.InformationRouteDto dto = new ca.bc.gov.health.plr.dto.provider.InformationRouteDto();

        PrsCtProviderRoleTypes hpt = providerDto != null ? codesDao.lookup(PrsCtProviderRoleTypes.class, providerDto.getTypeId()) : (workLocation != null ? workLocation.getPauthPauthId().getHptCode() : null);
        AddressDto addressDto = new LocalDtoConverter<AddressDto, ca.bc.gov.health.plr.dto.provider.esb.AddressDto>()
                .convert(new AddressDto(), informationRouteDto.getAddressDto());
        ElectronicAddressDto electronicAddressDto
                = new LocalDtoConverter<ElectronicAddressDto, ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto>()
                .convert(new ElectronicAddressDto(), informationRouteDto.getElectronicAddressDto());
        TelecommunicationDto telecommunicationDto = new LocalDtoConverter<TelecommunicationDto, ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto>()
                .convert(new TelecommunicationDto(), informationRouteDto.getTelecommunicationDto());
        informationRouteDto.setAddressDto(null);
        informationRouteDto.setElectronicAddressDto(null);
        informationRouteDto.setTelecommunicationDto(null);
        dto = processor.convertAndValidate(informationRouteDto, dto);
        //Add the converted dtos to information routes dto
        dto.setAddressDto(addressDto);
        dto.setElectronicAddressDto(electronicAddressDto);
        dto.setTelecommunicationDto(telecommunicationDto);

        if (providerDto != null) {
            processor.setIdsAndDataOwnerCodeOnProviderChild(dto, PrsInformationRoutes.class, providerDto, "irtId");
        } else if (workLocation != null) {
            processor.setIdsAndDataOwnerCodeOnWorkLocationChild(dto, PrsInformationRoutes.class, workLocation, providerDto, "irtId");
        }

        return dto;
    }
}
