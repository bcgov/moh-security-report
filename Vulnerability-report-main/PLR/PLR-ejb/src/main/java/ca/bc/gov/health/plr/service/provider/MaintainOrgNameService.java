package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.converter.OrgNameDtoConverter;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.dto.provider.OrgNameDto;
import ca.bc.gov.health.plr.ejb.entity.GrsOrgNames;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.PrsCtNameTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.rule.provider.AccessRestrictionService;
import ca.bc.gov.health.plr.service.EntityValidatorService;
import ca.bc.gov.health.plr.service.validators.ConfidentialityValidator;
import ca.bc.gov.health.plr.service.validators.EffectiveDatesValidator;
import ca.bc.gov.health.plr.service.validators.EntityChangeDetector;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.service.validators.LastActiveValidator;
import ca.bc.gov.health.plr.service.validators.RegUserUniqueNameValidator;
import java.util.ArrayList;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 * Adds or updates Organization Names.
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@Stateless
@LocalBean
public class MaintainOrgNameService implements MaintainService<OrgNameDto> {

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;
    @EJB
    private OrgNameDtoConverter orgNameDtoConverter;
    @EJB
    private JournalService<GrsOrgNames> journalService;

    @EJB
    private EntityValidatorService<GrsOrgNames> validatorService;

    @EJB
    private EntityValidatorService<OrgNameDto> orgNameValidatorService;

    @EJB
    private RegUserUniqueNameValidator regUserUniqueNameValidator;

    @EJB
    private ConfidentialityValidator<GrsOrgNames> confidentialityValidator;

    @EJB
    protected CodesDao codesDao;

    @EJB
    private AccessRestrictionService accessRestrictionService;

    @EJB
    private LastActiveValidator<GrsOrgNames> lastActiveOrgNameValidator;

    @EJB
    private ProviderDtoConverter providerDtoConverter;
    
    @EJB
    private EntityChangeDetector<OrgNameDto, GrsOrgNames> entityChangeDetector;

    @EJB
    private EffectiveDatesValidator effectiveDatesValidator;
    
    /**
     * Add or update an Organization Name.
     *
     * @param toSave dto to save
     * @return
     * @throws ca.bc.gov.health.plr.service.provider.DuplicateRecordException
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Override
    public OrgNameDto save(OrgNameDto toSave) throws DuplicateRecordException, EntityValidationException {

        PrsCtNameTypes nameTypeCode = codesDao.lookup(PrsCtNameTypes.class, CodeTableCodes.PrsCtNameTypes.CURRENT_KNOWN_NAME);
        if (toSave.getTypeId() == null && toSave.getTypeCode() == null) {
            toSave.setTypeId(nameTypeCode.getCtlId());
        }

        GrsOrgNames newRecord = orgNameDtoConverter.toEntity(toSave);
        
        effectiveDatesValidator.validate(newRecord);
        
        entityChangeDetector.checkForChanges(toSave, newRecord);
	if(toSave.isNoChangeOnUpdate()){
            return toSave;
	}
        if (!(newRecord.getRuRuId() != null && newRecord.getPauthPauthId() == null)) {
            validatorService.validate(newRecord, lastActiveOrgNameValidator, confidentialityValidator);
        } else {//Add Registry Unique Name validation if the org is being added for reg user
            lastActiveOrgNameValidator.validate(newRecord);
            orgNameValidatorService.validate(toSave, regUserUniqueNameValidator);
        }
        newRecord = journalService.journal(newRecord);

        return providerDtoConverter.buildOrgName(newRecord);
    }

    /**
     * Get the Organization Names of the specified Provider.
     *
     * @param nameDto
     * @return the Organization Names of the specified Provider.
     */
    public List<OrgNameDto> getNames(OrgNameDto nameDto) {
        List<GrsOrgNames> names = new ArrayList<>();
        List<OrgNameDto> dtos = new ArrayList<>();
        if (nameDto.getPauthId() != null) {
            PrsProviders provider = em.find(PrsProviders.class, nameDto.getPauthId());
            names = provider.getGrsOrgNamesList();
            dtos = providerDtoConverter.buildOrgNames(names);
            accessRestrictionService.applyReadRestriction(dtos, provider.getHptCode(), GrsOrgNames.class);
        } else if (nameDto.getRuRuId() != null && nameDto.getRuRuId() != 0l) {
            GrsRegistryUsers regUser = em.find(GrsRegistryUsers.class, nameDto.getRuRuId());
            names = regUser.getGrsOrgNamesList();
            dtos = providerDtoConverter.buildOrgNames(names);
        }
        return dtos;
    }
}
