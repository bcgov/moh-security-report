/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ca.bc.gov.health.plr.ejb.session;

import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.Id;
import javax.persistence.Query;

/**
 *
 * @author david.sharpe
 */
public abstract class AbstractFacade<T> implements SearchableFacadeLocal {
    private Class<T> entityClass;

    public AbstractFacade(Class<T> entityClass) {
        this.entityClass = entityClass;
    }

    protected abstract EntityManager getEntityManager();

    public void create(T entity) {
        getEntityManager().persist(entity);
    }

    public void edit(T entity) {
        getEntityManager().merge(entity);
    }

    public void remove(T entity) {
        getEntityManager().remove(getEntityManager().merge(entity));
    }

    public T find(Object id) {
        return getEntityManager().find(entityClass, id);
    }

    public List<T> findAll() {
        javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery();
        cq.select(cq.from(entityClass));
        return getEntityManager().createQuery(cq).getResultList();
    }

    public List<T> findRange(int[] range) {
        javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery();
        cq.select(cq.from(entityClass));
        javax.persistence.Query q = getEntityManager().createQuery(cq);
        q.setMaxResults(range[1] - range[0] + 1);
        q.setFirstResult(range[0]);
        return q.getResultList();
    }

    public int count() {
        javax.persistence.criteria.CriteriaQuery cq = getEntityManager().getCriteriaBuilder().createQuery();
        javax.persistence.criteria.Root<T> rt = cq.from(entityClass);
        cq.select(getEntityManager().getCriteriaBuilder().count(rt));
        javax.persistence.Query q = getEntityManager().createQuery(cq);
        return ((Long) q.getSingleResult()).intValue();
    }
    
    @Override
       public <T> List<T> search(T entity) {
        try {
            EntityManager em = getEntityManager();
            Class clazz = entity.getClass();
            List<String> cols = new ArrayList<String>();
            List<Object> values = new ArrayList<Object>();
            Field[] fields = clazz.getDeclaredFields();
            for (Field field : fields) {
                try {
                    String fieldName = field.getName();
                    Method m = clazz.getMethod("get" + field.getName().substring(0, 1).toUpperCase() + field.getName().substring(1), new Class[0]);
                    Object value = m.invoke(entity, new Object[0]);
                    if (value != null && value.getClass().getAnnotation(Entity.class) != null) {
                        Field[] subFields = value.getClass().getDeclaredFields();
                        for (Field field1 : subFields) {
                            if (field1.getAnnotation(Id.class) != null) {
                                fieldName += "." + field1.getName();
                                m = value.getClass().getMethod("get" + field1.getName().substring(0, 1).toUpperCase() + field1.getName().substring(1), new Class[0]);
                                break;
                            }
                        }
                        value = m.invoke(value, new Object[0]);
                    }
                    if (value != null
                            && !((value instanceof String)
                            && ((String) value).isEmpty())) {
                        cols.add(fieldName);
                        values.add(value);
                    }

                } catch (Exception e) {
                    //ignore
                }
            }
            StringBuilder buff = new StringBuilder();
            buff.append("select o from " + clazz.getSimpleName() + " o ");
            for (int i = 0; i < values.size(); i++) {
                String col = cols.get(i);
                if (i == 0) {
                    buff.append("where ");
                } else {
                    buff.append(" and ");
                }
                if (values.get(i).toString().contains("%")) {
                    buff.append("o." + col + " like ?" + (i + 1));
                } else {
                    buff.append("o." + col + "=?" + (i + 1));
                }
            }
            buff.append(" "+getOrderByClause());
            Query q = em.createQuery(buff.toString(), clazz);
            for (int i = 0; i < values.size(); i++) {
                Object object = values.get(i);
                q.setParameter(i + 1, object);
            }
            return q.getResultList();
        } catch (Exception e) {
            return null;
        }

    }

    protected String getOrderByClause() {
        return "";
    }
    
}
