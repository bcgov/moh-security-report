/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvState;
import ca.bc.gov.health.plr.persistence.CodesDao;
import static ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants.PERSISTENCE_CONTEXT_UNIT_NAME;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.Address;
import ca.bc.gov.health.plr.soap.addressdoctor.generated.ArrayOfString;
import java.util.ArrayList;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.faces.model.SelectItem;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

/**
 *
 * @author ian.scott
 */
@Stateless
@LocalBean
public class AddressSupportService {

    @PersistenceContext(unitName = PERSISTENCE_CONTEXT_UNIT_NAME)
    protected EntityManager em;
    @EJB
    private CodesDao codesDao;

    /**
     * Add a space if required
     * @param criteria the address
     * @param address  the address
     */
    public void fixPostalCodeSpacing(GrsAddresses criteria, Address address) {
        if (criteria.getPostalCodeOrZipTxt() != null && !criteria.getPostalCodeOrZipTxt().isEmpty()) {
            address.setPostalCode(populatePostalCodeResult(criteria.getPostalCodeOrZipTxt()));
            if (!criteria.getPostalCodeOrZipTxt().contains(" ")) {
                int postalLength = criteria.getPostalCodeOrZipTxt().length();
                if (postalLength == 6) {
                    String first = criteria.getPostalCodeOrZipTxt().substring(0, 3);
                    String second = criteria.getPostalCodeOrZipTxt().substring(3, 6);
                    String postalCodeFormatted = first + " " + second;
                    address.setPostalCode(populatePostalCodeResult(postalCodeFormatted));
                }
            }
        }
    }
    
    public String fixPostalCodeSpacing(String postalCode) {
        String formattedPostal = "";
        if (postalCode != null && !postalCode.isEmpty()) {
            if (!postalCode.contains(" ")) {
                int postalLength = postalCode.length();
                if (postalLength == 6) {
                    String first = postalCode.substring(0, 3);
                    String second = postalCode.substring(3, 6);
                    String postalCodeFormatted = first + " " + second;
                    formattedPostal = postalCodeFormatted;
                } else {
                    formattedPostal = postalCode;
                }
            } else {
                formattedPostal = postalCode;
            }
        } else {
            formattedPostal = postalCode;
        }
        return formattedPostal;
    }
    
    private ArrayOfString populatePostalCodeResult(String postalCode){
        ArrayOfString postalCodeAoS = new ArrayOfString();
        postalCodeAoS.getString().add(postalCode);
        return postalCodeAoS;
    }

    /**
     * Return Countries ordered by name.
     *
     * @return Countries.
     */
    public List<PrsCtCountries> getCountriesOrderedByName() {
        TypedQuery<PrsCtCountries> query = em.createQuery("SELECT c FROM PrsCtCountries c ORDER BY c.ctlDescTxt", PrsCtCountries.class);
        return query.getResultList();
    }

    /**
     * Return the default Country as determined by constant in this class.
     *
     * @return the default Country.
     */
    public PrsCtCountries getDefaultCountry() {
        TypedQuery<PrsCtCountries> query = em.createQuery("SELECT c FROM PrsCtCountries c WHERE c.ctlNameCode = :code", PrsCtCountries.class);
        query.setParameter("code", Consts.DEFAULT_COUNTRY_CODE);
        List<PrsCtCountries> resultList = query.getResultList();
        PrsCtCountries c = resultList.get(0);
        return c;
    }

    /**
     * Return the provinces of the specified country. May be an empty list.
     *
     * @param countryId a valid country ID.
     * @return the provinces of the specified country. May be an empty list.
     */
    public List<PrsCtProvState> getProvincesOrderedByName(Long countryId) {
        PrsCtCountries country = em.find(PrsCtCountries.class, countryId);
        TypedQuery<PrsCtProvState> query = em.createQuery("SELECT p FROM PrsCtProvState p WHERE p.countryCode = :country ORDER BY p.ctlDescTxt", PrsCtProvState.class);
        query.setParameter("country", country.getCtlNameCode());
        List<PrsCtProvState> resultList;
        try {
            resultList = query.getResultList();
        } catch (NoResultException nre) {
            return new ArrayList();
        }

        return resultList;
    }

    /**
     * Return the province details of the specified country and province name
     *
     * @param countryName
     * @param province
     * @return the province details of the specified country and province
     */
    public PrsCtProvState getProvinceDetailsByCountry(String countryName, String province) {
        PrsCtCountries country = codesDao.lookup(PrsCtCountries.class, countryName);
        TypedQuery<PrsCtProvState> query = em.createQuery("SELECT p FROM PrsCtProvState p WHERE p.countryCode = :country and p.ctlNameCode = :province and p.endReasonCode is null and p.activeFlag = :active", PrsCtProvState.class);
        query.setParameter("country", country.getCtlNameCode());
        query.setParameter("province", province);
        query.setParameter("active", CodeTableCodes.GrsCtBooleanTypes.YES.getValue());
        PrsCtProvState provinceDetails = null;
        List<PrsCtProvState> provinces = query.getResultList();
        if (!provinces.isEmpty() && provinces.size() == 1) {
            provinceDetails = provinces.get(0);
        }
        return provinceDetails;
    }

    /**
     * Return the default province for the specified country, or null if there
     * is no default.
     *
     * @param countryId a valid country ID.
     * @return the default province for the specified country, or null if there
     * is no default.
     */
    public PrsCtProvState getDefaultProvince(Long countryId) {

        TypedQuery<PrsCtCountries> countryQuery = em.createQuery("SELECT c FROM PrsCtCountries c WHERE c.ctlId = :country", PrsCtCountries.class);
        countryQuery.setParameter("country", countryId);
        List<PrsCtCountries> country = countryQuery.getResultList();
        if (country.isEmpty()) {
            return null;
        }

        TypedQuery<PrsCtProvState> provinceQuery = em.createQuery("SELECT p FROM PrsCtProvState p WHERE p.ctlNameCode = :code AND p.countryCode = :country", PrsCtProvState.class);
        // Only Canada has a default province, so can hardcode this query parameter to BC.
        provinceQuery.setParameter("code", Consts.DEFAULT_PROVINCE_CODE);
        provinceQuery.setParameter("country", country.get(0).getCtlNameCode());

        List<PrsCtProvState> resultList = provinceQuery.getResultList();
        if (!resultList.isEmpty()) {
            return resultList.get(0);
        } else {
            return null;
        }
    }

    /**
     * Suggests a city name based on auto-complete search criteria. The
     * suggestion will provide cities that are in use for providers.
     *
     * @param criteria the search criteria
     * @return a list of city name suggestions, ordered by system relevance
     */
    public List<String> suggestCityName(String criteria) {
        return codesDao.findCityNameByCriteria(criteria);
    }

    public List<SelectItem> initProvinceDropdownOrderedByNameCode(Long country) {
        List<SelectItem> temp = new ArrayList<>();
        if (country != null && country != 0) {
            List<PrsCtProvState> provinces = getProvincesOrderedByName(country);
            if (provinces != null) {
                for (PrsCtProvState province : provinces) {
                    temp.add(new SelectItem(province.getCtlNameCode(), province.getCtlNameCode() + " - " + province.getCtlDescTxt()));
                }
            }
        }
        return temp;
    }
}
