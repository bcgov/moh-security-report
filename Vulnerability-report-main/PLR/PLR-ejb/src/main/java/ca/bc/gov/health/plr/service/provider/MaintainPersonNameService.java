package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.converter.PersonNameDtoConverter;
import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.dto.provider.PersonNameDto;
import ca.bc.gov.health.plr.ejb.entity.GrsPersonNames;
import ca.bc.gov.health.plr.ejb.entity.PrsCtNameTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.rule.provider.AccessRestrictionService;
import ca.bc.gov.health.plr.service.EntityValidatorService;
import ca.bc.gov.health.plr.service.validators.ConfidentialityValidator;
import ca.bc.gov.health.plr.service.validators.EntityChangeDetector;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.service.validators.LastActiveValidator;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author ian.scott
 */
@Stateless
@LocalBean
public class MaintainPersonNameService implements MaintainService<PersonNameDto>{

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;
    @EJB
    private PersonNameDtoConverter personNameDtoConverter;
    @EJB
    private JournalService<GrsPersonNames> journalService;
    
    @EJB
    private EntityValidatorService<GrsPersonNames> validatorService;

    @EJB
    private ConfidentialityValidator<GrsPersonNames> confidentialityValidator;
    
    @EJB
    protected CodesDao codesDao;
    
    @EJB
    private AccessRestrictionService accessRestrictionService;
    
    @EJB
    private LastActiveValidator<GrsPersonNames> lastActivePerosnNameValidator;
    
    @EJB
    private ProviderDtoConverter providerDtoConverter;
    
    @EJB
    private EntityChangeDetector<PersonNameDto, GrsPersonNames> entityChangeDetector;

    /**
     * Query a fresh complete list of Person Names related to a specific
     * provider.
     *
     * @param pauthId
     * @return a list of fresh note transfer objects
     */
    public List<PersonNameDto> getNames(long pauthId) {
        PrsProviders provider = em.find(PrsProviders.class, pauthId);
        List<GrsPersonNames> names = provider.getGrsPersonNamesList();
        List<PersonNameDto> indNames = providerDtoConverter.buildPersonNames(names);
        accessRestrictionService.applyReadRestriction(indNames, provider.getHptCode(), GrsPersonNames.class);
        return indNames;
    }

    /**
     * Persists a DTO to the database
     *
     * @param toSave dto to save
     * @return 
     * @throws ca.bc.gov.health.plr.service.provider.DuplicateRecordException
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Override
    public PersonNameDto save(PersonNameDto toSave) throws DuplicateRecordException, EntityValidationException {
        
        PrsCtNameTypes nameTypeCode = codesDao.lookup(PrsCtNameTypes.class, CodeTableCodes.PrsCtNameTypes.CURRENT_KNOWN_NAME);
        if (toSave.getTypeId() == null && toSave.getTypeCode() == null) {
            toSave.setTypeId(nameTypeCode.getCtlId());
        }
        
        GrsPersonNames newRecord = personNameDtoConverter.toEntity(toSave);
        entityChangeDetector.checkForChanges(toSave, newRecord);
	if(toSave.isNoChangeOnUpdate()){
            return toSave;
	}
        validatorService.validate(newRecord, lastActivePerosnNameValidator, confidentialityValidator);
        newRecord = journalService.journal(newRecord);
        
        return providerDtoConverter.buildPersonName(newRecord);
    }
}
