package ca.bc.gov.health.plr.dto.converter;

import ca.bc.gov.health.plr.dto.provider.InformationRouteDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtDocumentTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtMechanisms;
import ca.bc.gov.health.plr.ejb.entity.GrsElectronicAddresses;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.GrsTelephones;
import ca.bc.gov.health.plr.ejb.entity.PrsCtDataOwnerCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsInformationRoutes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocations;
import ca.bc.gov.health.plr.ejb.entity.util.EntityUtils;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author ian.scott
 */
@Stateless
public class InformationRouteDtoConverter {

    @PersistenceContext(unitName = "PLR-ejbPU")
    protected EntityManager em;
    @EJB
    CodesDao codesDao;
    @EJB
    DtoConverter dtoConverter;

    /**
     * Converts a InformationRoute into a PrsInformationRoutes
     *
     * @param dto InformationRoute to convert
     * @return Converted PrsInformationRoutes
     */
    public PrsInformationRoutes toEntity(InformationRouteDto dto) {
        PrsInformationRoutes newEntity = new PrsInformationRoutes();

        if (dto.getId() != null) {
            newEntity.setIrtId(dto.getId());
        }

        if (dto.getPauthId() != null) {
            newEntity.setPauthPauthId(em.find(PrsProviders.class, dto.getPauthId()));
        }
        if (dto.getRuRuId() != null) {
            newEntity.setRuRuId(em.find(GrsRegistryUsers.class, dto.getRuRuId()));
        }
        if (dto.getWlWlId() != null) {
            newEntity.setWlWlId(em.find(PrsWorkLocations.class, dto.getWlWlId()));
        }

        if (dto.getEndReasonCode() != null) {
            newEntity.setEndReasonCode(codesDao.lookup(GrsCtEndReasonTypes.class, dto.getEndReasonCode()));
        } else if (dto.getEndReasonCodeId() != null) {
            newEntity.setEndReasonCode(codesDao.lookup(GrsCtEndReasonTypes.class, dto.getEndReasonCodeId()));
        }

        newEntity.setWorkLocationChid(dto.getWorkLocationIdentifier());

        if(dto.getAddressDto()!=null && dto.getAddressDto().getId()!=null && dto.getAddressDto().getId()>0) {
            GrsAddresses address = em.find(GrsAddresses.class, dto.getAddressDto().getId());
            newEntity.setAddressTypeCode(address.getAddressTypeCode());
            newEntity.setCmnctnPrpsTypCd(address.getCmnctnPrpsTypCd());
            if (address.getDataOwnerCode() != null) {
                newEntity.setCmnctnDataOwnerCode(address.getDataOwnerCode().getCtlNameCode());
            }
            if (address.getWlWlId() != null) {
                newEntity.setWorkLocationChid(address.getWlWlId().getWorkLocationChid());
                if (address.getWlWlId().getDataOwnerCode() != null) {
                    newEntity.setWorkLocationDataOwnerCode(address.getWlWlId().getDataOwnerCode().getCtlNameCode());
                }
            }
        }

        if (dto.getDocumentTypeId() != null) {
            newEntity.setDocumentTypeCode(codesDao.lookup(GrsCtDocumentTypes.class, dto.getDocumentTypeId()));
        } else if (dto.getDocumentTypeCode() != null) {
            newEntity.setDocumentTypeCode(codesDao.lookup(GrsCtDocumentTypes.class, dto.getDocumentTypeCode()));
        }
        if(dto.getTelecommunicationDto()!=null && dto.getTelecommunicationDto().getId()!=null && dto.getTelecommunicationDto().getId()>0) {
            GrsTelephones telephone = em.find(GrsTelephones.class, dto.getTelecommunicationDto().getId());
            newEntity.setTlcmnctnNmbrTypCd(telephone.getTlcmnctnNmbrTypCd());
            newEntity.setCmnctnPrpsTypCd(telephone.getCmnctnPrpsTypCd());
            if (telephone.getDataOwnerCode() != null) {
                newEntity.setCmnctnDataOwnerCode(telephone.getDataOwnerCode().getCtlNameCode());
            }
            if (telephone.getWlWlId() != null) {
                newEntity.setWorkLocationChid(telephone.getWlWlId().getWorkLocationChid());
                if (telephone.getWlWlId().getDataOwnerCode() != null) {
                    newEntity.setWorkLocationDataOwnerCode(telephone.getWlWlId().getDataOwnerCode().getCtlNameCode());
                }
            }
        }

        if(dto.getElectronicAddressDto()!=null && dto.getElectronicAddressDto().getId()!=null && dto.getElectronicAddressDto().getId()>0) {    
            GrsElectronicAddresses address = em.find(GrsElectronicAddresses.class, dto.getElectronicAddressDto().getId());
            newEntity.setElectronicAddressTypeCode(address.getElectronicAddressTypeCode());
            newEntity.setCmnctnPrpsTypCd(address.getCmnctnPrpsTypCd());
            if (address.getDataOwnerCode() != null) {
                newEntity.setCmnctnDataOwnerCode(address.getDataOwnerCode().getCtlNameCode());
            }
            if (address.getWlWlId() != null) {
                newEntity.setWorkLocationChid(address.getWlWlId().getWorkLocationChid());
                if (address.getWlWlId().getDataOwnerCode() != null) {
                    newEntity.setWorkLocationDataOwnerCode(address.getWlWlId().getDataOwnerCode().getCtlNameCode());
                }
            }
        }


        if (dto.getDataOwnerCode() != null) {
            PrsCtDataOwnerCodes dataOwnerCode = codesDao.lookup(PrsCtDataOwnerCodes.class, dto.getDataOwnerCode());
            newEntity.setDataOwnerCode(dataOwnerCode);
        }

        dtoConverter.copyCommonProperties(dto, newEntity);
        
        return newEntity;
    }
}
