package ca.bc.gov.health.plr.dto.converter;

import ca.bc.gov.health.plr.dto.provider.RegistryUserRelationshipDto;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.PrsCtDataOwnerCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvRuRelnTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsProvRuRelns;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.service.provider.MaintainRegistryUserRelationshipService;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@Stateless
public class RegistryUserRelationshipDtoConverter {

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;
    @EJB
    private CodesDao codesDao;
    @EJB
    private DtoConverter dtoConverter;
    @EJB
    private MaintainRegistryUserRelationshipService service;

    /**
     * Converts a ProviderRelationship into a PrsProviderRelationships.
     *
     * The specified identifier must *uniquely* identify a Provider or else an
     * unchecked exception will be thrown, so validate the DTO *before* calling
     * the converter.
     *
     * @param dto ProviderRelationship to convert
     * @return converted PrsProviderRelationships
     */
    public PrsProvRuRelns toEntity(RegistryUserRelationshipDto dto) {
        PrsProvRuRelns entity = new PrsProvRuRelns();

        if (dto.getId() != null) {
            entity.setRurelId(dto.getId());
        }

        if (dto.getPauthId() != null) {
            entity.setPauthPauthId(em.find(PrsProviders.class, dto.getPauthId()));
        }

        if (dto.getDataOwnerCode() != null) {
            entity.setDataOwnerCode(codesDao.lookup(PrsCtDataOwnerCodes.class, dto.getDataOwnerCode()));
        }

        if (dto.getTypeId() != null) {
            PrsCtProvRuRelnTypes typeCode = codesDao.lookup(PrsCtProvRuRelnTypes.class, dto.getTypeId());
            entity.setRuRelationshipTypeCode(typeCode);
        } else if (dto.getTypeCode() != null) {
            PrsCtProvRuRelnTypes typeCode = codesDao.lookup(PrsCtProvRuRelnTypes.class, dto.getTypeCode());
            entity.setRuRelationshipTypeCode(typeCode);
        }

        if (dto.getRegistryUserChid() != null) {
            List<GrsRegistryUsers> users = service.getMatchingRegistryUsers(dto);
            if (users.size() != 1) {
                // This is a precondition of using the DTO converter.
                throw new IllegalArgumentException("Identifier does not uniquely identify Registry User. Cannot create Relationship entity.");
            }
            GrsRegistryUsers user = users.get(0);
            entity.setRuRuRelnWithId(user);
        }

        dtoConverter.copyCommonProperties(dto, entity);

        return entity;
    }

 
   

}
