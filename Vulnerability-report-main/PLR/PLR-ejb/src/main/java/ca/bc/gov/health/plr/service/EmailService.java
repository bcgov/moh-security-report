/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service;

import ca.bc.gov.health.plr.constants.Consts;
import java.io.File;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.mail.Message;
import javax.mail.Message.RecipientType;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.naming.NamingException;

/**
 * A generic service for sending email messages with attachments
 *
 * @author adebiyi.kuseju
 */
@ApplicationScoped
public class EmailService {

    @Inject
    private JNDIResourceLoader prod;

    private static final Logger logger = Logger.getLogger(EmailService.class.getName());
    
    TransportWrapper transportWrapper = new TransportWrapper();

    /**
     * Sends an email to intended recipients
     *
     * @param senderAddress
     * @param mainRecipients
     * @param ccRecipients
     * @param bccRecipients
     * @param subject
     * @param bodyText
     * @param attachmentFilePaths
     * @throws javax.mail.MessagingException
     */
    public void sendMail(String senderAddress, List<String> mainRecipients, List<String> ccRecipients, List<String> bccRecipients, String subject, String bodyText, List<String> attachmentFilePaths) throws MessagingException {

        try {
            Properties props = setupMailProps();
            Session session = Session.getDefaultInstance(props, null);
            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress(senderAddress));

            populateRecipients(message, mainRecipients, Message.RecipientType.TO);

            // We can't send an email without a primary recipient
            if (message.getRecipients(RecipientType.TO) == null) {
                throw new AddressException("Email notification requires at least one primary recipient");
            }

            populateRecipients(message, ccRecipients, Message.RecipientType.CC);
            populateRecipients(message, bccRecipients, Message.RecipientType.BCC);

            message.setSubject(subject);
            message.setSentDate(new Date());

            //
            // Set the email message text.
            //
            MimeBodyPart messagePart = new MimeBodyPart();
            messagePart.setText(bodyText);

            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(messagePart);

            // Set the email attachment file if any is provided                    
            if (attachmentFilePaths != null && !attachmentFilePaths.isEmpty()) {
                for (String attachment : attachmentFilePaths) {
                    
                    URI fileUri = new File(attachment).toURI();
                    if (Files.exists(Paths.get(fileUri))) {
                        MimeBodyPart attachmentPart = new MimeBodyPart();
                        FileDataSource fileDataSource = new FileDataSource(attachment) {

                            @Override
                            public String getContentType() {
                                return "application/octet-stream";
                            }
                        };
                        attachmentPart.setDataHandler(new DataHandler(fileDataSource));
                        attachmentPart.setFileName(fileDataSource.getName());
                        multipart.addBodyPart(attachmentPart);
                    } else {
                        throw new MessagingException(String.format("File '%s' does not exist", Paths.get(fileUri)));
                    }
                }
            }

            message.setContent(multipart);
            transportWrapper.send(message);

            logger.log(Level.INFO, "E-mail sent.");

        } catch (MessagingException e) {
            logger.log(Level.WARNING, String.format("Email error: %1$s", e.getMessage()));
            throw e;
        } catch (NamingException ex) {
            logger.log(Level.WARNING, String.format("Email error: %1$s", ex.getMessage()));
            throw new MessagingException(ex.getMessage());
        }

    }

    /**
     * convert recipient email addresses to internet standard
     *
     * @param recipients
     * @return
     * @throws AddressException
     */
    private InternetAddress[] prepareRecipients(List<String> recipients) throws AddressException {
        InternetAddress[] addressTo = null;

        if (recipients != null) {
            addressTo = new InternetAddress[recipients.size()];
            for (int i = 0; i < recipients.size(); i++) {
                addressTo[i] = new InternetAddress(recipients.get(i));
            }
        }

        return addressTo;
    }

    /**
     * Override default mail settings if custom values are provided
     *
     * @return
     * @throws NamingException
     */
    private Properties setupMailProps() throws NamingException {
        Properties props = new Properties();

        Map<String, String> appProperties = prod.appResource();
        String temp = appProperties.get(Consts.MAIL_SEREVR);

        if (temp != null && !temp.isEmpty()) {
            props.put("mail.smtp.host", temp);

            temp = appProperties.get(Consts.MAIL_SEREVR_PORT);

            if (temp != null && !temp.isEmpty()) {
                props.put("mail.smtp.port", temp);
            }
        }

        return props;
    }

    private void populateRecipients(MimeMessage message, List<String> recipients, RecipientType recipientType) throws AddressException, MessagingException {
        InternetAddress[] addressTo = prepareRecipients(recipients);

        if (addressTo != null) {
            message.setRecipients(recipientType, addressTo);
        }

    }

    // Wrap static method call to allow testing mock.
    static class TransportWrapper {
        public void send(MimeMessage message) throws MessagingException {
            Transport.send(message);
        }
    }

}
