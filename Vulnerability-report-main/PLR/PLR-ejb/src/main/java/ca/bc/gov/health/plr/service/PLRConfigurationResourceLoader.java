package ca.bc.gov.health.plr.service;

import ca.bc.gov.health.plr.ejb.entity.PlrConfigurationProperties;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.annotation.Resource;
import javax.ejb.Lock;
import javax.ejb.LockType;
import javax.ejb.ScheduleExpression;
import javax.ejb.Singleton;
import javax.ejb.Startup;
import javax.ejb.Timeout;
import javax.ejb.TimerConfig;
import javax.ejb.TimerService;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 * A configuration change aware implementation that reloads config to ensure
 * changes are reflected
 *
 * @author adebiyi.kuseju
 */
@Startup
@Singleton
public class PLRConfigurationResourceLoader {

    private static final Logger LOG = Logger.getLogger(PLRConfigurationResourceLoader.class.getName());

    public static final String SEARCH_PROVIDER_MAX_RESULTS = "searchProvider_maxResults";
    public static final String SEARCH_PROVIDER_MAX_RESULTS_FROM_DB = "searchProvider_maxResults_from_database";
    public static final String BATCH_NOTIFICATION_RECIPIENTS = "batch.notification.recepients";
    public static final String BATCH_NOTIFICATION_FROM = "batch.notification.from";
    public static final String DIST_INTERACTIONID_ADD_INDIVIDUAL = "distribution.message.interactionid.add";
    public static final String DIST_INTERACTIONID_UPDATE_INDIVIDUAL = "distribution.message.interactionid.update";
    public static final String DIST_INTERACTIONID_ADD_ORGANIZATION = "distribution.message.interactionid.add.org";
    public static final String DIST_INTERACTIONID_UPDATE_ORGANIZATION = "distribution.message.interactionid.update.org";
    public static final String REG_ADMIN_ORG_CHID = "reg.admin.org.chid";
    public static final String TARGET_ORGANIZATION_CHID = "target_organization_chid";
    public static final String SOURCE_ORGANIZATION_CHID = "source_organization_chid";
    public static final String SOURCE_NETWORK_ADDRESS_CHID = "source_network_address_chid";
    public static final String TARGET_NETWORK_ADDRESS_CHID = "target_network_address_chid";
    public static final String ADD_INTERACTIONID_RESPONSE = "add.message.interactionid.response";
    public static final String UPDATE_INTERACTIONID_RESPONSE = "update.message.interactionid.response";
    public static final String QUERY_INTERACTIONID_RESPONSE = "query.message.interactionid.response";
    // email valid format w/regex
    public static final String EMAIL_VALID_FORMAT_REGEX = "email_valid_format_regex";
    // HSTS filter switch
    public static final String HSTS_FILTER_SWITCH = "hsts_filter_switch";
    //AddressDoctor parameters
    public static final String ADDRESSDOCTOR_NOTIFICATION_DOWN_SUBJECT = "addressDoctor.notification.down.subject";
    public static final String ADDRESSDOCTOR_NOTIFICATION_DOWN_BODY = "addressDoctor.notification.down.body";
    public static final String ADDRESSDOCTOR_NOTIFICATION_UP_SUBJECT = "addressDoctor.notification.up.subject";
    public static final String ADDRESSDOCTOR_NOTIFICATION_UP_BODY = "addressDoctor.notification.up.body";
    public static final String ADDRESSDOCTOR_NOTIFICATION_RECIPIENTS = "addressDoctor.notification.recipients";
    public static final String ADDRESSDOCTOR_NOTIFICATION_SENDER = "addressDoctor.notification.sender";
    public static final String ADDRESSDOCTOR_NOTIFICATION_CCRECIPIENTS = "addressDoctor.notification.ccrecipients";
    public static final String ADDRESSDOCTOR_NOTIFICATION_BCCRECIPIENTS = "addressDoctor.notification.bccrecipients";
    public static final String ADDRESSDOCTOR_VALIDATION_MODE = "addressDoctor.validation.mode";
    public static final String ADDRESSDOCTOR_VALIDATION_PROCESSSTATUS = "addressDoctor.validation.processStatus";
    public static final String ADDRESSDOCTOR_VALIDATION_WARNING_PROCESSSTATUS = "addressDoctor.validation.warning.processStatus";
    public static final String ADDRESSDOCTOR_VALIDATION_MAILABILITYSCORE = "addressDoctor.validation.mailabilityScore";
    public static final String VALIDATE_ADDRESSES_SWITCH = "validate.addresses";
    public static final String ADDRESSDOCTOR_FASTCOMPLETE_PROCESSSTATUS="addressDoctor.fastcomplete.processStatus";
    public static final String ADDRESSDOCTOR_FASTCOMPLETE_UIDELAY="addressDoctor.fastcomplete.UIdelay";
            
            
    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;

    @Resource
    private TimerService timerService;

    private Map<String, String> configMap;

    @PostConstruct
    void init() {
        configMap = new ConcurrentHashMap<>();

        ScheduleExpression schedule = new ScheduleExpression().hour("*").minute("*/1").second(0);
        LOG.info(schedule.toString());

        TimerConfig config = new TimerConfig();
        config.setPersistent(false);
        timerService.createCalendarTimer(schedule, config);
        
        reload();
    }

    @Lock(LockType.READ)
    public String getValue(String key) {
        return configMap.get(key);
    }

    @Lock(LockType.WRITE)
    @Timeout
    void reload() {
        try {
            LOG.finer("Reloading configuration properties.");
            List<PlrConfigurationProperties> configProps = em.createNamedQuery("PlrConfigurationProperties.findAll", PlrConfigurationProperties.class).getResultList();
            configMap.clear();
            for (PlrConfigurationProperties item : configProps) {
                configMap.put(item.getName(), item.getValue());
            }
        } catch (Exception e) {
            /* 
                If we do not catch the exception, the server will "expunge" 
                timers and no further attempts will be made. Even so, you must
                watch out for Container Managed Transactions (GLASSFISH-20749).
                If the container has already marked the transaction for rollback, 
                it doesn't matter if you catch it. And it seems the JPA-EclipseLink 
                library marks transactions for rollback if queries fail. 
             */
            LOG.log(Level.SEVERE, "Configuration properties not loaded/refreshed.", e);
        }
    }

}
