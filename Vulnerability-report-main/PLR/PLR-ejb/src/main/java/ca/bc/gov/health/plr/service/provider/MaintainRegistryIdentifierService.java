package ca.bc.gov.health.plr.service.provider;

import ca.bc.gov.health.plr.dto.converter.ProviderDtoConverter;
import ca.bc.gov.health.plr.dto.converter.RegistryIdentifierDtoConverter;
import ca.bc.gov.health.plr.dto.provider.RegistryIdentifierDto;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryIdentifiers;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.service.EntityValidatorService;
import ca.bc.gov.health.plr.service.validators.ConfidentialityValidator;
import ca.bc.gov.health.plr.service.validators.EntityChangeDetector;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 * Add or update a registry identifier.
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@Stateless
@LocalBean
public class MaintainRegistryIdentifierService implements MaintainService<RegistryIdentifierDto>{

    @PersistenceContext(unitName = "PLR-ejbPU")
    private EntityManager em;

    @EJB
    private JournalService<GrsRegistryIdentifiers> journalService;
    @EJB
    private RegistryIdentifierDtoConverter dtoConverter;

    @EJB
    private EntityValidatorService<GrsRegistryIdentifiers> validatorService;

    @EJB
    private ConfidentialityValidator<GrsRegistryIdentifiers> confidentialityValidator;
    
    @EJB
    protected CodesDao codesDao;
    
    @EJB
    private ProviderDtoConverter providerDtoConverter;
    
    @EJB
    private EntityChangeDetector<RegistryIdentifierDto, GrsRegistryIdentifiers> entityChangeDetector;


    /**
     * Persists a DTO to the database
     *
     * @param dto dto to save
     * @return 
     * @throws ca.bc.gov.health.plr.service.provider.DuplicateRecordException
     * @throws ca.bc.gov.health.plr.service.validators.EntityValidationException
     */
    @Override
    public RegistryIdentifierDto save(RegistryIdentifierDto dto) throws DuplicateRecordException, EntityValidationException {
        GrsRegistryIdentifiers newRecord = dtoConverter.toEntity(dto);
        entityChangeDetector.checkForChanges(dto, newRecord);
	if(dto.isNoChangeOnUpdate()){
            return dto;
	}
        validatorService.validate(newRecord, confidentialityValidator);
        journalService.journal(newRecord);

        // Returning null to satisfy the MaintainService<T> interface, the returned value is never used
        return null;
    }
    
    /**
     * Gets a complete list of Registry Identifier DTOs of the specified
     * Provider.
     *
     * @param pauthId specifies a valid Provider.
     * @return a complete list of Registry Identifier DTOs of the specified
     * Provider.
     */
    public List<RegistryIdentifierDto> getIdentifiers(long pauthId) {
        PrsProviders provider = em.find(PrsProviders.class, pauthId);
        List<GrsRegistryIdentifiers> ids = provider.getGrsRegistryIdentifiersList();
        List<RegistryIdentifierDto> dtos = providerDtoConverter.buildRegistryIdentifiers(ids);
        return dtos;
    }

}
