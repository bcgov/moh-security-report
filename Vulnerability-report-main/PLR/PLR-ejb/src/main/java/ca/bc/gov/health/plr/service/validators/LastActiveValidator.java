/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.service.validators;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.ejb.entity.EntityCommon;
import ca.bc.gov.health.plr.ejb.entity.GrsIdentifiers;
import ca.bc.gov.health.plr.ejb.entity.GrsOrgNames;
import ca.bc.gov.health.plr.ejb.entity.GrsPersonNames;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.util.EntityUtils;
import ca.bc.gov.health.plr.interceptors.TestUserInterceptor;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.producer.type.Authenticated;
import ca.bc.gov.health.plr.producer.type.User;
import ca.bc.gov.health.plr.util.PropertyUtils;
import java.util.List;
import javax.ejb.LocalBean;
import javax.ejb.Stateless;
import javax.enterprise.inject.Instance;
import javax.inject.Inject;
import javax.interceptor.Interceptors;

/**
 * Validates that only a user with REG_ADMIN role can cease the last active record
 *
 * @author Adebiyi.Kuseju
 * @param <T> : the validating entity
 */
@LocalBean
@Stateless
@Interceptors({TestUserInterceptor.class})
public class LastActiveValidator<T extends EntityCommon> implements EntityValidator<T> {

    @Inject
    @Authenticated
    private Instance<User> user;

    @Override
    public void validate(T newRecord) throws EntityValidationException {
        if (newRecord.getEndReasonCode() != null 
                && CodeTableCodes.GrsCtEndReasonTypes.CEASE.getValue().equals(newRecord.getEndReasonCode().getCtlNameCode()) 
                && (PropertyUtils.doesPropertyExist(newRecord, "pauthPauthId") || PropertyUtils.doesPropertyExist(newRecord, "ruRuId"))) {
            PrsProviders provider = (PrsProviders) PropertyUtils.invokeGetter(newRecord, "pauthPauthId");
            if (provider != null) {

                List<? extends EntityCommon> items = null;
                String msg = null;
                if (newRecord instanceof GrsIdentifiers) {
                    items = provider.getGrsIdentifiersList();
                    msg = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_LAST_ACTIVE_IDENTIFIER_CEASED_PERMISSION);
                } else if (newRecord instanceof GrsOrgNames) {
                    items = provider.getGrsOrgNamesList();
                    msg = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_LAST_ACTIVE_ORG_NAME_CEASED_PERMISSION);
                } else if (newRecord instanceof GrsPersonNames) {
                    items = provider.getGrsPersonNamesList();
                    msg = BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_LAST_ACTIVE_PERSON_NAME_CEASED_PERMISSION);
                }

                if (items != null && !items.isEmpty() && !user.get().getUserPrincipal().getRoles().contains(Consts.REG_AMDIN_ROLE) && isLastActive(items)) {
                    throw new EntityValidationException(msg);
                }
            } else {//For registry user name cease
                if (newRecord instanceof GrsOrgNames) {
                    GrsOrgNames regUserName = (GrsOrgNames)newRecord;
                    if(regUserName.getRuRuId() != null){//Check if child of registry user
                        throw new EntityValidationException(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_DEFAULT_REGUSER_NAME_CEASED));
                    }
                }
            }
        }
    }

    private boolean isLastActive(List<? extends EntityCommon> items) {

        if (items.size() == 1) {
            return EntityUtils.isActive(items.get(0).getActiveFlag());
        }

        int activeCount = 0;
        for (EntityCommon item : items) {
            if (EntityUtils.isActive(item.getActiveFlag())) {
                activeCount++;
            }

            if (activeCount > 1) {
                break;
            }
        }

        return activeCount == 1;

    }
}
