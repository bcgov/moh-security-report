package ca.bc.gov.health.plr.dto.converter;

import ca.bc.gov.health.plr.dto.reguser.AccessProfileDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAccessProfileGroups;
import ca.bc.gov.health.plr.ejb.entity.GrsAccessProfiles;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsCtEndReasonTypes;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.PrsCtDataOwnerCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 * Converter class for switching between GrsDistributionProfiles objects and
 * DistributionDTOs
 *
 * @author sumesh.kariyil
 */
@Stateless
public class AccessProfileDtoConverter {

    @PersistenceContext(unitName = "PLR-ejbPU")
    protected EntityManager em;
    @EJB
    CodesDao codesDao;

    /**
     * Converts a DistributionDto into a GrsDistributionProfiles
     *
     * @param dto DistributionDto to convert
     * @return Converted GrsDistributionProfiles
     */
    public GrsAccessProfiles toEntity(AccessProfileDto dto) {
        GrsAccessProfiles accessProfile = new GrsAccessProfiles();

        if (dto.getId() != null) {
            accessProfile.setAcp1Id(dto.getId());
        }
        GrsCtBooleanTypes activeFlag;
        if (dto.isActive()) {
            activeFlag = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.YES);
        } else {
            activeFlag = codesDao.lookup(GrsCtBooleanTypes.class, CodeTableCodes.GrsCtBooleanTypes.NO);
        }
        accessProfile.setActiveFlag(activeFlag);
        if(dto.getProfileGroupId() != null){
            accessProfile.setApg1ApgId(em.find(GrsAccessProfileGroups.class, dto.getProfileGroupId()));
        }
        if(dto.getProviderType() != null){
            accessProfile.setHptCode(codesDao.lookup(PrsCtProviderRoleTypes.class, dto.getProviderType()));
        } else if (dto.getProviderTypeId() != null) {
            accessProfile.setHptCode(codesDao.lookup(PrsCtProviderRoleTypes.class, dto.getProviderTypeId()));
        }
        //TODO
//        if(dto.getProviderTypeId() != null){
//            accessProfile.setHptCode(em.find(PrsCtProviderRoleTypes.class, dto.getProviderTypeId()));            
//        }
//        if(accessProfile.getHptCode() != null){
//            accessProfile.setCategoryCode(accessProfile.getHptCode().getCategoryCode());
//        }
        
        if (dto.getCreatedDate() != null) {
            accessProfile.setCreatedDts(dto.getCreatedDate());
        }
        if (dto.getDataOwnerCode() != null) {
            PrsCtDataOwnerCodes dataOwnerCode = codesDao.lookup(PrsCtDataOwnerCodes.class, dto.getDataOwnerCode());
            accessProfile.setDataOwnerCode(dataOwnerCode);
        } else if (dto.getDataOwnerId() != null) {
            PrsCtDataOwnerCodes dataOwnerCode = codesDao.lookup(PrsCtDataOwnerCodes.class, dto.getDataOwnerId());
            accessProfile.setDataOwnerCode(dataOwnerCode);
        }
        if (dto.getEffectiveEndDate() != null) {
            accessProfile.setEffectiveEndDate(dto.getEffectiveEndDate());
        } else{
            accessProfile.setEffectiveEndDate(DatabaseConstants.SYSTEM_HIGH_DATE.toDate());
        }
        
        if (dto.getEffectiveStartDate() != null) {
            accessProfile.setEffectiveStartDate(dto.getEffectiveStartDate());
        }
        if (dto.getEndReasonCode() != null) {
            accessProfile.setEndReasonCode(codesDao.lookup(GrsCtEndReasonTypes.class, dto.getEndReasonCode()));
        } else if (dto.getEndReasonCodeId() != null) {
            accessProfile.setEndReasonCode(codesDao.lookup(GrsCtEndReasonTypes.class, dto.getEndReasonCodeId()));
        }

        if (dto.getGenerationNum() != null) {
            accessProfile.setGenerationNum(dto.getGenerationNum());
        }
        accessProfile.setInvalidatedDts(dto.getInvalidatedDate());
        
        accessProfile.setDistributeAfterDate(dto.getDistributeAfter());
        if(dto.getRuRuId() != null){
            accessProfile.setRuRuId(em.find(GrsRegistryUsers.class, dto.getRuRuId()));
        }        
        if (dto.getUserChid() != null) {
            accessProfile.setUserChid(dto.getUserChid());
        }
        
        return accessProfile;
    }
}
