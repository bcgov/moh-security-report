/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.dto.converter;

import ca.bc.gov.health.plr.dto.provider.WorkLocationDto;
import ca.bc.gov.health.plr.ejb.entity.DsrCtOwnerOperatorTypes;
import ca.bc.gov.health.plr.ejb.entity.DsrCtStatus;
import ca.bc.gov.health.plr.ejb.entity.DsrHlthServsDeliveryAreas;
import ca.bc.gov.health.plr.ejb.entity.DsrLocalHealthAreas;
import ca.bc.gov.health.plr.ejb.entity.GrsCtBooleanTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtDataOwnerCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocationDetails;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocations;
import ca.bc.gov.health.plr.ejb.entity.util.EntityUtils;
import ca.bc.gov.health.plr.persistence.CodesDao;
import java.util.ArrayList;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

/**
 *
 * @author ian.scott
 */
@Stateless
public class WorkLocationDtoConverter {

    @PersistenceContext(unitName = "PLR-ejbPU")
    EntityManager em;
    @EJB
    CodesDao codesDao;
 

    /**
     * Assemble Entity from transfer object
     *
     * @param dto - the transfer object to convert
     * @return - the entity representation of the transfer object
     */
    public PrsWorkLocations toEntity(WorkLocationDto dto) {
        PrsWorkLocations newEntity = new PrsWorkLocations();
        newEntity.setWlId(dto.getId());
        if (dto.getPauthId() != null) {
            newEntity.setPauthPauthId(em.find(PrsProviders.class, dto.getPauthId()));
        }
        newEntity.setWorkLocationChid(dto.getIdentifier());
        if (dto.getUserChid() != null) {
            newEntity.setUserChid(dto.getUserChid());
        }
        if (dto.getCreatedDate() != null) {
            newEntity.setCreatedDts(dto.getCreatedDate());
        }
        newEntity.setInvalidatedDts(dto.getInvalidatedDate());

        GrsCtBooleanTypes activeFlag = EntityUtils.toGrsCtBooleanType(dto.isActive(), codesDao);
        newEntity.setActiveFlag(activeFlag);

        if (dto.getDataOwnerCode() != null) {
            PrsCtDataOwnerCodes dataOwnerCode = codesDao.lookup(PrsCtDataOwnerCodes.class, dto.getDataOwnerCode());
            newEntity.setDataOwnerCode(dataOwnerCode);
        }

        if (dto.getOperatorTypeId() != null) {
            newEntity.setOperatorTypeId(codesDao.lookup(DsrCtOwnerOperatorTypes.class, dto.getOperatorTypeId()));
        }
        if (dto.getOwnerTypeId() != null) {
            newEntity.setOwnerTypeId(codesDao.lookup(DsrCtOwnerOperatorTypes.class, dto.getOwnerTypeId()));
        }
        if (dto.getStatusId() != null) {
            newEntity.setStatusId(codesDao.lookup(DsrCtStatus.class, dto.getStatusId()));
        }
        if (dto.getCampusOfCareTxt() != null) {
            newEntity.setCampusOfCareTxt(dto.getCampusOfCareTxt());
        }
        if (dto.getOperatorNameTxt() != null) {
            newEntity.setOperatorNameTxt(dto.getOperatorNameTxt());
        }
        if (dto.getContactNM() != null) {
            newEntity.setContactNm(dto.getContactNM());
        }
        GrsCtBooleanTypes forProfitFlag = EntityUtils.toGrsCtBooleanType(dto.isForProfit(), codesDao);
        newEntity.setIsForProfitYn(forProfitFlag);
        if (dto.getServiceDeliveryAreaCd() != null) {
            newEntity.setServiceDeliveryAreaCd(em.find(DsrHlthServsDeliveryAreas.class, dto.getServiceDeliveryAreaCd()));
        }
        if (dto.getLocalHealthAreaCd() != null) {
            //TODO - this may actually need ID there is nothing that really indicates how this works.
            newEntity.setLocalHealthAreaCd(em.find(DsrLocalHealthAreas.class, dto.getLocalHealthAreaCd()));
        }
        if (dto.getNotes() != null) {
            newEntity.setNotes(dto.getNotes());
        }
        if (dto.getContactName() != null) {
            newEntity.setContactName(dto.getContactName());
        }

        newEntity.setPrsWorkLocationDetailsList(new ArrayList<PrsWorkLocationDetails>());

        return newEntity;
    }
}
