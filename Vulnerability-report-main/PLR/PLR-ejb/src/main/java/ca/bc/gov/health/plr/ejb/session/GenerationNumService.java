package ca.bc.gov.health.plr.ejb.session;

import ca.bc.gov.health.plr.ejb.entity.UniqueDataBlock;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.util.PropertyUtils;
import java.util.List;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;

/**
 * Service for finding maximum Generation_Num for a given entity
 * on the column list that makes up the data block.
 *
 * @author Adebiyi Kuseju
 */
@Stateless
public class GenerationNumService {

    /**
     * Entity Manager for persistence
     */
    @PersistenceContext(unitName = "PLR-ejbPU")
    protected EntityManager em;
    
    /**
     * CodesDAO for looking up known code values
     */
    @EJB
    protected CodesDao codesDao;
    
    
    /**
     * Returns the max generation number or 0 if no existing record exists.
     *
     * @param record T record to examine
     * @param columns String[] set of columns making up the data block
     * @return max generation number or 0 if no existing record exists.
     */
    public <T extends UniqueDataBlock> Long findMaxGenerationNum(T record) {
        Long genNum = 0l;
        T topRecord = findMaxGenNumRecord(record);
        if (topRecord != null) {
            genNum = (Long) PropertyUtils.invokeGetter(topRecord, "generationNum");
        }
        return genNum;
    }
    
    /**
     * Returns the max generation number or 0 if no existing record exists.
     *
     * @param record T record to examine
     * @param columns String[] set of columns making up the data block
     * @return max generation number or 0 if no existing record exists.
     */
    public <T extends UniqueDataBlock> void incrementGenerationNum(T record) {

        T topRecord = findMaxGenNumRecord(record);
        if (topRecord != null) {
            Long genNum = (Long) PropertyUtils.invokeGetter(topRecord, "generationNum");
            PropertyUtils.invokeSetter(record, "generationNum", genNum + 1);
        } else {
            PropertyUtils.invokeSetter(record, "generationNum", 1);
        }
    }
    

    /**
     * Find the record of the specified type with the highest generation number,
     * or null if there are no records of the specified type.
     *
     * @param record specifies the values of the record type.
     * @param columns specifies the columns that make up the record type.
     * @return the record of the specified type with the highest generation
     * number, or null if there are no records of the specified type.
     */
    
    public <T extends UniqueDataBlock> T findMaxGenNumRecord(T record) {
        String[] columns = record.getDataBlockColumns();
        String queryStr = "SELECT t FROM " + record.getClass().getSimpleName() + " t WHERE ";
        int count = 1;
        for (int i = 0; i < columns.length; i++) {
            if (i > 0) {
                queryStr += " AND ";
            }
            if (PropertyUtils.invokeGetter(record, columns[i]) != null) {
                queryStr += "t." + columns[i] + " = ?" + count++;
            } else {
                queryStr += "t." + columns[i] + " IS NULL";
            }
        }
        queryStr += " order by t.generationNum DESC";
        TypedQuery<? extends Object> query = em.createQuery(queryStr, record.getClass());
        count = 1;
        for (String column : columns) {
            Object value = PropertyUtils.invokeGetter(record, column);
            if (value != null) {
                query.setParameter(count++, value);
            }
        }
        List<? extends Object> resultList = query.setMaxResults(1).getResultList();
        if (!resultList.isEmpty()) {
            @SuppressWarnings("unchecked")
            T result = (T) resultList.get(0);
            return result;
        } else {
            return null;
        }
    }

    

}
