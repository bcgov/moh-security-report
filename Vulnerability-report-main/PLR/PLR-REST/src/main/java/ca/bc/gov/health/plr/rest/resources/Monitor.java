package ca.bc.gov.health.plr.rest.resources;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.metrics.ExposeMetrics;
import java.util.Collection;
import javax.ejb.EJB;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import ca.bc.gov.health.plr.metrics.ExposeMetricsRemote;
import com.google.gson.GsonBuilder;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

/**
 * Exposes some operations information if the property "development_environment" 
 * is set to true in the "plr/application_properties" JNDI resource,
 * 
 * @author David Sharpe (david.a.sharpe@cgi.com)
 */
@Path("monitor")
@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
public class Monitor {

    @EJB
    ExposeMetricsRemote service;
    
    private static final Logger LOG = Logger.getLogger(Monitor.class.getName());

    @GET
    @SuppressWarnings("CallToPrintStackTrace")
    public String query() throws NamingException {
        Context context = new InitialContext();
        @SuppressWarnings("unchecked")
        Map<String, String> appProps = (Map<String, String>) context.lookup(Consts.APP_JNDI_RESOURCE);
        if (!Boolean.valueOf(appProps.get("development_environment"))) {
            return "development_environment=true not set";
        }
        
        Map<String, Object> metrics = new HashMap<>();
        try {
            Collection<ExposeMetrics.TimerWrapper> distTimers = service.getSendDistributionServiceTimers();
            metrics.put("sendDistributionServiceTimers", distTimers);
        } catch (Exception e) {
            LOG.log(Level.SEVERE, e.getMessage(), e);
            metrics.put("sendDistributionServiceTimers", "error");
        }

        try {
            service.databaseHealthcheck();
            metrics.put("database", "connected");
        } catch (Exception e) {
            LOG.log(Level.SEVERE, e.getMessage(), e);
            metrics.put("database", "error");
        }
        
        try {
            service.esbConnection();
            metrics.put("esb", "connected");
        } catch (Exception e) {
            LOG.log(Level.SEVERE, e.getMessage(), e);
            metrics.put("esb", "error");
        }
        
        try {
            metrics.put("sendDistributionsEnabled", service.sendDistributionsEnabled());
        } catch (Exception e) {
            LOG.log(Level.SEVERE, e.getMessage(), e);
            metrics.put("sendDistributionsEnabled", "error");
        }
        
        try {
            metrics.put("processDistributionsEnabled", service.processDistributionsEnabled());
        } catch (Exception e) {
            LOG.log(Level.SEVERE, e.getMessage(), e);
            metrics.put("processDistributionsEnabled", "error");
        }
        
        return new GsonBuilder().setPrettyPrinting().create().toJson(metrics);
    }

}
