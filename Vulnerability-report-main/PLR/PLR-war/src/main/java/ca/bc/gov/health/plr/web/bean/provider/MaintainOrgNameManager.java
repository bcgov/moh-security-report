package ca.bc.gov.health.plr.web.bean.provider;

import ca.bc.gov.health.plr.dto.provider.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.reguser.RegistryUserDetails;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.MaintainOrgNameService;
import ca.bc.gov.health.plr.service.provider.MaintainProviderService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import ca.bc.gov.health.plr.web.util.JSFUtils;
import java.io.Serializable;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

/**
 * MaintainOrgName.xhtml backing bean.
 *
 * @author ian.scott
 */
@ManagedBean
@ViewScoped
public class MaintainOrgNameManager implements Serializable {

    @EJB
    private MaintainOrgNameService service;
    @EJB
    protected MaintainProviderService maintainProviderService;
    private OrgNameDto dto = new OrgNameDto();
    private ProviderDto providerDetails;
    private RegistryUserDetails registryUserDetails;

    /**
     * Initialize the backing transfer objects.
     */
    @PostConstruct
    public void init() {
        resetDto();
    }

    /**
     * Resets the DTO so that the backing-bean can be re-used in the same view.
     */
    public void resetDto() {
        dto = new OrgNameDto();
    }

    /**
     * Add or update an Organization Name.
     */
    public void save() {
         if (this.dto.isNew()) {
            dto.setPauthId(providerDetails.getPauthId());
        }
        try {
            maintainProviderService.save(getDto());
            
            List<OrgNameDto> names = service.getNames(getDto());
            if(providerDetails != null){
                providerDetails.setOrgNames(names);
            } else if(registryUserDetails != null){
                registryUserDetails.setNames(names);
            }
            
            String message = JSFUtils.prepareSuccessMessage("name" , dto);
            FacesContext.getCurrentInstance().addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (DuplicateRecordException | EntityValidationException dre) {
            FacesContext.getCurrentInstance().addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_ERROR, dre.getMessage(), ""));
            FacesContext.getCurrentInstance().validationFailed();
        }
    }

    public OrgNameDto getDto() {
        return dto;
    }

    public void setDto(OrgNameDto dto) {
        this.dto = dto;
    }

    public ProviderDto getProviderDetails() {
        return providerDetails;
    }

    public void setProviderDetails(ProviderDto providerDetails) {
        this.providerDetails = providerDetails;
    }

    public RegistryUserDetails getRegistryUserDetails() {
        return registryUserDetails;
    }

    public void setRegistryUserDetails(RegistryUserDetails registryUserDetails) {
        this.registryUserDetails = registryUserDetails;
    }

  

}
