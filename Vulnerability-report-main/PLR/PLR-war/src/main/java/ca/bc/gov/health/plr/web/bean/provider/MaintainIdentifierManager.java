package ca.bc.gov.health.plr.web.bean.provider;

import ca.bc.gov.health.plr.dto.provider.CollegeIdentifierDto;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.MaintainProviderIdentifierService;
import ca.bc.gov.health.plr.service.provider.MaintainProviderService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import ca.bc.gov.health.plr.web.util.JSFUtils;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

/**
 * Backing bean for maintaining (creating/updating) a identifier for a specific
 * provider.
 *
 * @author ian.scott
 */
@ManagedBean
@ViewScoped
public class MaintainIdentifierManager {

    @EJB
    MaintainProviderIdentifierService maintainProviderIdentifierService;
    @EJB
    protected MaintainProviderService maintainProviderService;
    private Long pauthId;
    protected CollegeIdentifierDto identifierDto;
    protected List<CollegeIdentifierDto> identifiers;

    /**
     * Initialize the backing transfer objects. We'll do all at once since it's
     * cheap and we don't know what the users may choose.
     */
    @PostConstruct
    public void init() {
        identifierDto = new CollegeIdentifierDto();
    }

    /**
     * Initial method called from page which determines if the request is an add
     * or an update
     */
    public void save() {
        if (this.identifierDto.isNew()) {
            identifierDto.setPauthId(pauthId);
        }
        FacesContext fc = FacesContext.getCurrentInstance();
        try {
            CollegeIdentifierDto newIdentifier = maintainProviderService.save(getIdentifierDto());
            List<CollegeIdentifierDto> newIdentifiers = maintainProviderIdentifierService.refreshIdentifiers(newIdentifier);
            if (newIdentifiers != null && !newIdentifiers.isEmpty()) {
                identifiers.clear();
                identifiers.addAll(newIdentifiers);
            }
            String message = JSFUtils.prepareSuccessMessage("identifier" , identifierDto);
            fc.addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (DuplicateRecordException | EntityValidationException dre) {
            fc.validationFailed();
            fc.addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_ERROR, dre.getMessage(), ""));
        }
    }

    /**
     * @return the IdentifierDto
     */
    public CollegeIdentifierDto getIdentifierDto() {
        return identifierDto;
    }

    /**
     * @param identifierDto the IdentifierDto to set
     */
    public void setIdentifierDto(CollegeIdentifierDto identifierDto) {
        this.identifierDto = identifierDto;
    }

    /**
     *
     * @return list of all identifiers
     */
    public List<CollegeIdentifierDto> getIdentifiers() {
        return identifiers;
    }

    /**
     *
     * @param identifiers list of all the identifiers displayed on page
     */
    public void setIdentifiers(List<CollegeIdentifierDto> identifiers) {
        this.identifiers = identifiers;
    }

    /**
     * @param pauthId the pauthId to set
     */
    public void setPauthId(Long pauthId) {
        this.pauthId = pauthId;
    }
}
