package ca.bc.gov.health.plr.web.bean;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.dto.provider.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.StatusDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.service.provider.SearchProviderService;
import ca.bc.gov.health.plr.web.Droplists;
import ca.bc.gov.health.plr.web.util.JSFUtils;
import java.util.ArrayList;
import java.util.List;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.inject.Inject;
import static ca.bc.gov.health.plr.rule.provider.DataColumnToDtoField.*;
import ca.bc.gov.health.plr.service.JNDIResourceLoader;
import ca.bc.gov.health.plr.service.PlrUserRoleService;
import java.util.Date;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.naming.NamingException;

/**
 * Backing bean for add and update modal views initiated from
 * ProviderDetails.xhtml.
 *
 * @author Grant.Hodgins
 */
@ManagedBean
@ViewScoped
public class ViewProviderManager extends PlrManagedBean {

    @EJB
    private SearchProviderService searchProviderService;
    
    @EJB
    private CodesDao codesDao;

    @Inject
    private PlrUserRoleService userRoleService;
    
    @Inject
    private Droplists droplists;
    
    @Inject
    private JNDIResourceLoader jndiResource;
    
    private ProviderDto providerDetails;
    /*
     The providerDetailsCopy holds all records including incorrect data,
     From all maintain* screens this records will be passed to the manager to update
    */
    private ProviderDto providerDetailsCopy;
    /*
     providerDetailsFiltered to remove historical incorrect data and holds data for current view
     */
    private ProviderDto providerDetailsFiltered;
    /*
     providerDetailsHistory holds data for history view.
    */
    private ProviderDto providerDetailsHistory;
    /*
     providerDetailsAudit to include date for audit mode
     */
    private ProviderDto providerDetailsAudit;
    private Long pauthId;
    private Long providerTypeId;

    private List<SelectItem> applicableIdentifierTypes = null;
    
    private int maxBusinessObjectShown = Consts.MAX_BUSINESS_OBJECTS_SHOWN_DEFAULT;
    
    private Consts.PROVIDER_DETAILS_VIEW_MODE providerDetailsViewMode = Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_CURRENT_VIEW;
    
    @PostConstruct
    void init() {
        try {
            Map<String, String> appProperties = jndiResource.appResource();
            String maxBusinessObjectsShownString = appProperties.get(Consts.MAX_BUSINESS_OBJECTS_SHOWN);
            if(maxBusinessObjectsShownString!=null) {
                this.maxBusinessObjectShown = Integer.parseInt(maxBusinessObjectsShownString);
            }
        } catch (NamingException ex) {
            Logger.getLogger(ViewProviderManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    
    /**
     * View the details for a provider. The provider pauth_id is populated based
     * on a HTTP request parameter.
     */
    public void viewDetails() {
        if (!FacesContext.getCurrentInstance().getPartialViewContext().isAjaxRequest()
                && getPauthId() != null && getPauthId() > 0) {
            providerDetailsViewMode = Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_CURRENT_VIEW;
            //retrieves all the provider data
            providerDetails = searchProviderService.searchByProviderId(getPauthId());
            applicableIdentifierTypes = new ArrayList<>();
            if (providerDetails != null) {
                if (!providerDetails.isConfidential()) {
                    providerTypeId = providerDetails.getTypeId();
                    applicableIdentifierTypes = droplists.getApplicableIdentifierTypes(providerTypeId);
                }
            }
            //providerDetailsCopy include all the provider data, it could be more than providerDetailsAudit
            //as providerDetailsAudit will be limited under maxBusinessObjectShown
            providerDetailsCopy = providerDetails;
            //providerDetailsAudit provider data for audit mode
            providerDetailsAudit = providerDetails;
            
        }

        //providerDetailsCopy: stores data for Audit view mode
        providerDetailsCopy.removeCorrectionsIfNotRegAdmin(userRoleService.isRegAdmin());

        if (this.providerDetailsViewMode != null) {
            switch (this.providerDetailsViewMode) {
                case PROVIDER_DETAILS_CURRENT_VIEW:
                    //Stores data for Current view mode
                    providerDetailsFiltered = providerDetailsCopy.copyForCurrentOrHistoryViews(Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_CURRENT_VIEW);
                    providerDetailsFiltered.limitDtoListBasedOnBK(this.maxBusinessObjectShown);
                    break;
                case PROVIDER_DETAILS_HISTORY_VIEW:
                    //stores data for History view mode
                    providerDetailsHistory = providerDetailsCopy.copyForCurrentOrHistoryViews(Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_HISTORY_VIEW);
                    providerDetailsHistory.limitDtoListBasedOnBK(this.maxBusinessObjectShown);
                    break;
                case PROVIDER_DETAILS_AUDIT_VIEW:
                    //stores data for Audit view mode
                    providerDetailsAudit.limitDtoListBasedOnBK(this.maxBusinessObjectShown);
                    break;
                default:
                    break;
            }
        }

//        for(AddressDto address : providerDetails.getAllActiveAddresses()){
//            if(address.getValidationStatus() != null){
//                if(address.getValidationStatus().equals("Invalid")){
//                    BusinessRuleKeys key = BusinessRuleKeys.ERROR_CASE_ADDRESS_INVALID;
//                    String message = BusinessRuleMessageDao.getMessageResource(key);
//                    FacesContext.getCurrentInstance().addMessage("messages1", new FacesMessage(FacesMessage.SEVERITY_WARN, message, ""));
//                }
//            }
//        }
    }
    
    public void showCurrentView() {
        this.providerDetailsViewMode = Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_CURRENT_VIEW;
    }
    public void showHistoryView() {
        this.providerDetailsViewMode = Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_HISTORY_VIEW;
    }
    public void showAuditView() {
        this.providerDetailsViewMode = Consts.PROVIDER_DETAILS_VIEW_MODE.PROVIDER_DETAILS_AUDIT_VIEW;
    }

    /**
     * @return the pauthId
     */
    public Long getPauthId() {
        return pauthId;
    }

    /**
     * @param pauthId the pauthId to set
     */
    public void setPauthId(Long pauthId) {
        this.pauthId = pauthId;
    }

    /**
     * @return the providerDetails
     */
    public ProviderDto getProviderDetails() {

        if (providerDetailsViewMode != null) {
            switch (providerDetailsViewMode) {
                case PROVIDER_DETAILS_CURRENT_VIEW:
                    providerDetails = providerDetailsFiltered;
                    break;
                case PROVIDER_DETAILS_AUDIT_VIEW:
                    providerDetails = providerDetailsAudit;
                    break;
                case PROVIDER_DETAILS_HISTORY_VIEW:
                    providerDetails = providerDetailsHistory;
                    break;
                default:
                    break;
            }
        }
        return providerDetails;

    }

    public String getProviderRoleTypeDescription() {
        return codesDao.lookup(PrsCtProviderRoleTypes.class, getProviderDetails().getType()).getCtlDescTxt();
    }
    /**
     * Returns a SelectItem list of all PrsCtIdentifierTypes applicable to the
     * specified Provider Role Type ordered by usage frequency where frequency
     * >= 0.
     *
     * @return a SelectItem list of all PrsCtIdentifierTypes applicable to the
     * specified Provider Role Type ordered by usage frequency where frequency
     * >= 0.
     */
    public List<SelectItem> getApplicableIdentifierTypes() {
        return applicableIdentifierTypes;
    }

    /**
     * Constructs the header for the display in jsf page
     *
     * @param dto
     * @return
     */
    public String getDemographicHeader(DemographicDetailsDto dto) {
        StringBuilder header = new StringBuilder();
        
            if (!dto.getAccessRestrictionData().getUnreadables().contains(GENDER_CODE.getFieldName())) {
                header.append(dto.getGender());
                header.append(", ");
            }
            Date startDate = null;
            Date endDate = null;
            if (!dto.getAccessRestrictionData().getUnreadables().contains(DATE_OF_BIRTH_DATE.getFieldName())) {
                startDate = dto.getBirthDate();
            }
            if (!dto.getAccessRestrictionData().getUnreadables().contains(DATE_OF_DEATH_DATE.getFieldName())) {
                endDate = dto.getDeathDate();
            }

            header.append(JSFUtils.displayDateRange(startDate, endDate));
        
        return header.toString();
    }

    /**
     * Constructs the Status header for the display in jsf page
     *
     * @param dto
     * @return #{status.type} (#{status.reason})
     */
    public String getStatusHeader(StatusDto dto) {
        StringBuilder header = new StringBuilder();
        
        if (!dto.getAccessRestrictionData().getUnreadables().contains(STATUS_TYPE_CODE.getFieldName())) {
            header.append(dto.getType());
        }
        if (!dto.getAccessRestrictionData().getUnreadables().contains(STATUS_REASON_CODE.getFieldName())) {
            header.append(" ").append(dto.getReason());
        }
        
        return header.toString();
    }

    public ProviderDto getProviderDetailsCopy() {
        return providerDetailsCopy;
    }

    public void setProviderDetailsCopy(ProviderDto providerDetailsCopy) {
        this.providerDetailsCopy = providerDetailsCopy;
    }
    
    /**
     * Return the view mode for displaying on the view change button.
     * @return the view mode for displaying 
     */
    public String getProviderDetailsViewModeForDisplay() {

        if (null != providerDetailsViewMode) {
            switch (this.providerDetailsViewMode) {
                case PROVIDER_DETAILS_CURRENT_VIEW:
                    return Consts.PROVIDER_DETAILS_VIEW_MODE_FOR_DISPLAY.PROVIDER_DETAILS_CURRENT_VIEW.toString();
                case PROVIDER_DETAILS_AUDIT_VIEW:
                    return Consts.PROVIDER_DETAILS_VIEW_MODE_FOR_DISPLAY.PROVIDER_DETAILS_AUDIT_VIEW.toString();
                case PROVIDER_DETAILS_HISTORY_VIEW:
                    return Consts.PROVIDER_DETAILS_VIEW_MODE_FOR_DISPLAY.PROVIDER_DETAILS_HISTORY_VIEW.toString();
                default:
                    break;
            }
        }
        return null;
    }

    public PlrUserRoleService getUserRoleService() {
        return userRoleService;
    }

}
