package ca.bc.gov.health.plr.web.bean.provider;

import ca.bc.gov.health.plr.dto.provider.CredentialsDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvState;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.service.provider.AddressSupportService;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.MaintainCredentialsService;
import ca.bc.gov.health.plr.service.provider.MaintainProviderService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.Droplists;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import ca.bc.gov.health.plr.web.bean.provider.interfaces.GrowlEnabled;
import ca.bc.gov.health.plr.web.util.JSFUtils;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.inject.Inject;

/**
 * Backing bean for maintaining (creating/updating) an credential for a specific
 * provider.
 *
 * @author Grant.Hodgins
 */
@ManagedBean
@ViewScoped
public class MaintainCredentialsManager implements GrowlEnabled {

    @EJB
    protected MaintainCredentialsService maintainCredentialService;
    @EJB
    protected MaintainProviderService maintainProviderService;
    @Inject
    private Droplists droplists;
    @EJB
    private AddressSupportService addressSupportService;
    private Long pauthId;
    private Long providerTypeId;
    private List<SelectItem> credentialTypeSelectItems;
    private List<SelectItem> countrySelectItems;
    private List<SelectItem> provinceSelectItems;
    private CredentialsDto credentialsDto;
    private List<CredentialsDto> credentials;

    /**
     * Initialize the backing transfer object.
     */
    @PostConstruct
    public void init() {
        credentialsDto = new CredentialsDto();
        Long defaultCountryId = addressSupportService.getDefaultCountry().getCtlId();
        credentialsDto.setInstitutionCountryId(defaultCountryId);
        credentialsDto.setInstitutionProvStateId(addressSupportService.getDefaultProvince(defaultCountryId).getCtlId());
    }

    /**
     * Initialize the credential types based on the provider type.
     */
    private void initCredentialTypes() {
        credentialTypeSelectItems = new ArrayList<>();
        if (providerTypeId != null) {
            credentialTypeSelectItems = droplists.getApplicableCredentials(providerTypeId);
        }
    }

    /**
     * When Country Address is changed, update the Province Address dropdown.
     */
    public void countryChanged() {
        //PLR-2159 If the cuntry code is null, reset all country and province details
        if(credentialsDto.getInstitutionCountryId() == null){
            credentialsDto.setInstitutionCountry(null);
            credentialsDto.setInstitutionCountryCode(null);
            credentialsDto.setInstitutionProvStateId(null);
            credentialsDto.setInstitutionProvState(null);
            credentialsDto.setInstitutionProvStateCode(null);
        } else {
            PrsCtProvState province = addressSupportService.getDefaultProvince(credentialsDto.getInstitutionCountryId());
            //null check shouldn't be needed but helps me sleep at night
            if (province != null) {//if no state province is set, select the default
                Long provinceId = province.getCtlId();
                credentialsDto.setInstitutionProvStateId(provinceId);
            } else {
                credentialsDto.setInstitutionProvStateId(null);
            }
        }
    }
    
    /**
     * When the Province is set to default empty option, nullify all province related details.
     */
    public void provinceChanged(){
        if(credentialsDto.getInstitutionProvStateId() == null){
            credentialsDto.setInstitutionProvState(null);
            credentialsDto.setInstitutionProvStateCode(null);
        }
    }

    public void refreshDropDowns() {
        if(credentialsDto.getId() == null){//PLR-2159 If it's a new Credential then populate default values
             Long countryId;
            if (credentialsDto.getInstitutionCountryId() != null && credentialsDto.getInstitutionCountryId() > 0) {
                countryId = credentialsDto.getInstitutionCountryId();
            } else {
                countryId = addressSupportService.getDefaultCountry().getCtlId();
            }
            PrsCtProvState province = addressSupportService.getDefaultProvince(countryId);
            if (province != null &&  credentialsDto.getInstitutionProvStateId() == null) {//if no state province is set, select the default
                Long provinceId = province.getCtlId();
                credentialsDto.setInstitutionProvStateId(provinceId);
            }
        }
       
    }

    /**
     * Add or update a demographic record for a provider.
     */
    @Override
    public void save() {
        save(false);
    }

    /**
     * Add or update a demographic record for a provider.
     *
     * @param pDetailsGrowl
     */
    @Override
    public void save(boolean pDetailsGrowl) {

        if (credentialsDto.isNew()) {
            credentialsDto.setPauthId(pauthId);
        }

        String growl = null;
        try {
            if (pDetailsGrowl) {
                growl = PlrManagedBean.PROVIDER_DETAILS_GROWL;
            }
            maintainProviderService.save(credentialsDto);

            refreshFromDatabase();
            String message = JSFUtils.prepareSuccessMessage("credential" , credentialsDto);
            FacesContext.getCurrentInstance().addMessage(growl, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (DuplicateRecordException | BusinessRuleException | EntityValidationException ex) {
            FacesContext.getCurrentInstance().validationFailed();
            FacesContext.getCurrentInstance().addMessage(growl, new FacesMessage(FacesMessage.SEVERITY_ERROR, ex.getMessage(), ""));
        }

    }

    /**
     * Suggests a list of credential related city names based on keyed user
     * input.
     *
     * @param query the user input
     * @return a list of credential related city names based on keyed user
     * input.
     */
    public List<String> suggestCredentialCityName(String query) {
        return maintainCredentialService.suggestCredentialCityName(query);
    }

    /**
     * Suggests a list of credential related institution names based on keyed
     * user input.
     *
     * @param query the user input
     * @return a list of credential related institution names based on keyed
     * user input.
     */
    public List<String> suggestCredentialInstitutionName(String query) {
        return maintainCredentialService.suggestCredentialInstitutionName(query);
    }

    /**
     * Find the select item list of credential types.
     *
     * @return the select item list of credential types
     */
    public List<SelectItem> geCredentialTypeSelectItems() {
        return getCredentialTypeSelectItems();
    }

    /**
     * Gets the backing credential transfer object.
     *
     * @return the credentialsDto
     */
    public CredentialsDto getCredentialsDto() {
        return credentialsDto;
    }

    /**
     * Sets the backing credential transfer object. This is set when the user
     * initiates and update.
     *
     * @param credentialsDto the credentialsDto to set
     */
    public void setCredentialsDto(CredentialsDto credentialsDto) {
        this.credentialsDto = credentialsDto;
    }

    /**
     * Sets the list of credentials for the current provider. This is used for
     * AJAX refreshes after adding or updating a credential.
     *
     * @param credentials the credentials to set
     */
    public void setCredentials(List<CredentialsDto> credentials) {
        this.credentials = credentials;
    }

    /**
     * Sets the provider type so that we can filter the credential types select
     * list when adding or updating a credential.
     *
     * @param providerTypeId the providerTypeId to set
     */
    public void setProviderTypeId(Long providerTypeId) {
        this.providerTypeId = providerTypeId;
        initCredentialTypes();
    }

    /**
     * Find the credential type select items. Note this list is filtered in
     * initialization of this bean.
     *
     * @return the credentialTypeSelectItems
     */
    public List<SelectItem> getCredentialTypeSelectItems() {
        return credentialTypeSelectItems;
    }

    /**
     * @return the countrySelectItems
     */
    public List<SelectItem> getCountrySelectItems() {
        return countrySelectItems;
    }

    /**
     * @return the provinceSelectItems
     */
    public List<SelectItem> getProvinceSelectItems() {
        return provinceSelectItems;
    }

    /**
     * @param pauthId the pauthId to set
     */
    public void setPauthId(Long pauthId) {
        this.pauthId = pauthId;
    }

    private void refreshFromDatabase() {
        List<CredentialsDto> freshCredentialsList = maintainCredentialService.refreshCredentials(pauthId);
        credentials.clear();
        credentials.addAll(freshCredentialsList);
    }

}
