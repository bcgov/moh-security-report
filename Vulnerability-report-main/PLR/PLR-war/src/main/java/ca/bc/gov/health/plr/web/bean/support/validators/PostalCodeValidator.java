/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.web.bean.support.validators;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.rule.provider.AddressCrossFieldValidator;
import java.io.Serializable;
import javax.faces.application.FacesMessage;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.validator.FacesValidator;
import javax.faces.validator.Validator;
import javax.faces.validator.ValidatorException;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.validation.ConstraintValidatorContext;

/**
 * Faces validator for postal code
 *
 * @author sumesh.kariyil
 */
@FacesValidator(value = "postalCodeValidator")
public class PostalCodeValidator implements Validator {

    private PostalCodeFieldValidator postalCodeFieldValidator = new PostalCodeFieldValidator();

    private CodesDao codesDao;

    /**
     * Initializes codes DAO.
     *
     */
    protected void initCodesDao() {
        try {
            if (codesDao == null) {
                Context c = new InitialContext();
                codesDao = (CodesDao) c.lookup(Consts.JNDILOOKUP_CODESDAO);
            }
        } catch (NamingException ne) {
            throw new RuntimeException(ne);
        }
    }

    @Override
    public void validate(FacesContext context, UIComponent component, Object value) throws ValidatorException {
        if (value == null) {
            return;
        }
        initCodesDao();
        Long countryId = (Long) component.getAttributes().get("countryId");
        String countryCode = null;
        if (countryId != null && codesDao.codeExists(PrsCtCountries.class, countryId)) {
            PrsCtCountries foundCountry = codesDao.lookup(PrsCtCountries.class, countryId);
            countryCode = foundCountry.getCtlNameCode();
        }
        postalCodeFieldValidator.processPostalCode((String) value, countryCode, null);        
    }

    public static class PostalCodeFieldValidator extends AddressCrossFieldValidator implements Serializable {

        @Override
        public void changeErrorMessage(BusinessRuleKeys key, String node, ConstraintValidatorContext cvc) {
            throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR, BusinessRuleMessageDao.getMessageResource(key), ""));
        }
    }
}
