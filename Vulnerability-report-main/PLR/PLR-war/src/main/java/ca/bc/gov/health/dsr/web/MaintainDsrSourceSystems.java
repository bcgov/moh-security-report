package ca.bc.gov.health.dsr.web;
import ca.bc.gov.health.plr.ejb.entity.*;
import ca.bc.gov.health.dsr.ejb.session.*;
import ca.bc.gov.health.jsf.BaseBean;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.bean.ViewScoped;
import javax.faces.bean.ManagedBean;
import javax.faces.component.UIInput;
import javax.faces.component.UIViewRoot;
import javax.faces.model.SelectItem;

@ManagedBean(name="MaintainDsrSourceSystems")
@ViewScoped
/**
 * Backing bean for DsrSourceSystems code table maintenance
 * @author JSF Code Generator
 */
public class MaintainDsrSourceSystems extends BaseBean implements java.io.Serializable{

    /* Facade for persistence */
    @EJB
    private DsrSourceSystemFacadeLocal dsrSourceSystemsFacade;

    /* List of all values in the code table */
    private List<DsrSourceSystems> allDsrSourceSystemss;

    /* The instance we're currently editing */
    private DsrSourceSystems dsrSourceSystems;

    /* PK of the selected instance */
    private Object selectedKey;
    
    private boolean active = true;

    /**
     * Default Constructor
     */
    public MaintainDsrSourceSystems(){}

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init(){
        allDsrSourceSystemss = dsrSourceSystemsFacade.findAll();
        dsrSourceSystems = new DsrSourceSystems();
    }

    /**
     * Adds a new record
     */
    public String add(){
        nullify();
        
        DsrSourceSystems existing = null;
        
        for (DsrSourceSystems temp : allDsrSourceSystemss) {
            
            if (temp.getSourceSystemCd().equalsIgnoreCase(dsrSourceSystems.getSourceSystemCd())) {
                existing = temp;
                break;
            }
        }
        
        if (existing != null) {
            String msgStr = "Source system code '" + dsrSourceSystems.getSourceSystemCd() + "' exists already";
            FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, msgStr, msgStr);
            FacesContext.getCurrentInstance().addMessage(null, msg);
            
            return null;
        }
        
        
        preUpdate();
        
        dsrSourceSystemsFacade.create(dsrSourceSystems);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        ((Droplists)findBean("DsrDroplists")).init();
        return clear();
    }

    /**
     * Updates an existing record
     */
    public String update(){
        nullify();
        preUpdate();
        dsrSourceSystemsFacade.edit(dsrSourceSystems);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        ((Droplists)findBean("DsrDroplists")).init();
        return clear();
    }

    /**
     * Deletes a record
     */
    public String delete(){
        nullify();
        dsrSourceSystemsFacade.remove(dsrSourceSystems);
        init();
        ((Droplists)findBean("DsrDroplists")).init();
        return clear();
    }

    /**
     * Clears the form
     */
    public String clear(){
        selectedKey=null;
        active = true;
        dsrSourceSystems = new DsrSourceSystems();
        
        
        UIViewRoot viewRoot = FacesContext.getCurrentInstance().getViewRoot();

        String[] compIds = {"form1:hsdaCd", "form1:active", "form1:ssCd", "form1:ssDesc"};

        UIInput comp;
        for (String id : compIds) {
            comp = (UIInput) viewRoot.findComponent(id);
            if (comp != null) {
                comp.resetValue();
            }
        }

        return null;
    }
    /**
     * Selects a record for editing
     */
    public String select(){
        for(int i=0; i<allDsrSourceSystemss.size(); i++){
            if (allDsrSourceSystemss.get(i).getSourceSystemCd().equals(selectedKey)){
                dsrSourceSystems = allDsrSourceSystemss.get(i);
                preDisplay();
                break;
            }
        }
        return null;
    }
    
    public boolean isActive() {
        return active;
    }

    public void setActive(boolean active) {
        this.active = active;
    }

    private void preUpdate() {

        if (active) {
            dsrSourceSystems.setActiveYn("Y");
        } else {
            dsrSourceSystems.setActiveYn("N");
        }
    }

    private void preDisplay() {

        if (dsrSourceSystems.getActiveYn().equals("Y")) {
            active = true;
        } else {
            active = false;
        }
    }
    
    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify(){
    }
    /* Getters and Setters */
    public List<DsrSourceSystems> getAllDsrSourceSystemss(){
        return allDsrSourceSystemss;
    }
    public void setAllDsrSourceSystemss(List<DsrSourceSystems> allDsrSourceSystemss){
        this.allDsrSourceSystemss = allDsrSourceSystemss;
    }
    public DsrSourceSystems getDsrSourceSystems(){
        return dsrSourceSystems;
    }
    public void setDsrSourceSystems(DsrSourceSystems dsrSourceSystems){
        this.dsrSourceSystems = dsrSourceSystems;
    }
    public Object getSelectedKey(){
        return selectedKey;
    }
    public void setSelectedKey(Object selectedKey){
        this.selectedKey = selectedKey;
    }
}