package ca.bc.gov.health.dsr.web;

import ca.bc.gov.health.plr.ejb.entity.*;
import ca.bc.gov.health.dsr.ejb.session.*;
import ca.bc.gov.health.dsr.ejb.util.Constants;
import ca.bc.gov.health.dsr.ejb.session.EmailFacadeLocal;
import ca.bc.gov.health.jsf.BaseBean;
import ca.bc.gov.health.jsf.util.SiteIdentifierWrapper;
import ca.bc.gov.health.jsf.util.SiteIdentifierWrapperUtility;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.component.UIComponent;
import javax.faces.component.UIViewRoot;
import javax.faces.component.html.HtmlInputText;
import javax.faces.component.html.HtmlSelectManyListbox;
import javax.faces.component.html.HtmlSelectOneMenu;
import javax.faces.context.FacesContext;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;
import org.primefaces.component.panel.Panel;
import org.primefaces.component.calendar.Calendar;

/**
 *
 * @author Farbod.Golkar
 */
@ManagedBean(name = "DsrWorkLocationsStagingBean")
@ViewScoped
public class DsrWorkLocationsStagingBean extends BaseBean implements java.io.Serializable {

    @EJB
    private DsrWorkLocationStagingFacadeLocal dsrWorkLocationStagingFacade;
    private DsrWorkLocationsStaging dsrWorkLocationsStaging;
    @EJB
    private DsrProgramAreaFacadeLocal dsrProgramAreaFacade;
    @EJB
    private DsrCtStatusFacadeLocal dsrCtStatusFacade;
    @EJB
    private DsrLocalHealthAreaFacadeLocal dsrLocalHealthAreaFacade;
    @EJB
    private PrsProviderFacadeLocal prsProviderFacade;
    @EJB
    private PrsCtProvStateFacadeLocal prsCtProvStateFacade;
    @EJB
    private PrsCtCountriesFacadeLocal prsCtCountriesFacade;
    @EJB
    private PrsCtWorkLocationPurpsFacadeLocal prsCtWorkLocationPurpsFacade;
    @EJB
    private EmailFacadeLocal emailFacade;
    @ManagedProperty("#{DsrDroplists}")
    private Droplists dropList;
    private String selectedProgramArea;
    private List<String> selectedProgramCategories;
    private List<SiteIdentifierWrapper> siteIdentifierWrapperList = new ArrayList<>();
    /*
     * optional fields
     */
    private String faxAreaCode = "";
    private String faxNumber = "";
    private String faxExtensionNumber;
    private String operatorName = "";
    private String operatorType = "";
    private List<SelectItem> provinceList = new ArrayList<>();
    private List<SelectItem> categoryList = new ArrayList<>();
    private List<SelectItem> hsdaList = new ArrayList<>();
    private List<SelectItem> lhaList = new ArrayList<>();
    private List<DsrWorkLocationsStaging> pendingRequests;
    private boolean isView;
    // Message to display in Popup
    //private String actionResponse;
    private boolean success;
    private String dummyHsda;
    private Long dummyHa;

    /**
     * Default constructor
     */
    public DsrWorkLocationsStagingBean() {
    }

    /**
     * Initializes this bean after injection is complete
     */
    @PostConstruct
    public void init() {
        clear();

        PrsWorkLocations itemToview = (PrsWorkLocations) FacesContext.getCurrentInstance().getExternalContext().getRequestMap().get("displayObject");

        if (itemToview != null) {

            // Copy values from PrsWorkLocation to DsrWorkLocationStaging
            // to ensure we are going to be updating the staging table
            dsrWorkLocationsStaging.setWlId(itemToview);

            dsrWorkLocationsStaging.setContactName(itemToview.getContactName());
            dsrWorkLocationsStaging.setIdentifierNo(itemToview.getPrimaryId().getIdentifierNo());
            dsrWorkLocationsStaging.setRequestTypeCd(DsrWorkLocationsStaging.RequestType.CHANGED);
            dsrWorkLocationsStaging.setDeliverySiteNameTxt(itemToview.getPrsWorkLocationDetailsList().get(0).getWorkLocationNameTxt());

            dsrWorkLocationsStaging.setAddressLine1Txt(itemToview.getGrsAddressesList().get(0).getAddressLine1Txt());
            dsrWorkLocationsStaging.setAddressLine2Txt(itemToview.getGrsAddressesList().get(0).getAddressLine2Txt());
            dsrWorkLocationsStaging.setAddressLine3Txt(itemToview.getGrsAddressesList().get(0).getAddressLine3Txt());
            dsrWorkLocationsStaging.setAddressLine4Txt(itemToview.getGrsAddressesList().get(0).getAddressLine4Txt());
            dsrWorkLocationsStaging.setCountryId(itemToview.getGrsAddressesList().get(0).getCountryId());
            dsrWorkLocationsStaging.setProvinceId(itemToview.getGrsAddressesList().get(0).getProvinceId());
            dsrWorkLocationsStaging.setCityTxt(itemToview.getGrsAddressesList().get(0).getCityTxt());
            dsrWorkLocationsStaging.setPostalCodeOrZipTxt(itemToview.getGrsAddressesList().get(0).getPostalCodeOrZipTxt());


            for (GrsTelephones comms : itemToview.getGrsTelephonesList()) {

                if (comms.getTlcmnctnNmbrTypCd().getCtlNameCode().equalsIgnoreCase(PrsCtTelecomNumberTypesFacadeLocal.TelecomType.TELEPHONE.getValue())) {
                    dsrWorkLocationsStaging.setPhoneAreaCodeNum(comms.getAreaCodeNum());
                    dsrWorkLocationsStaging.setPhoneTelecommNmbrNum(comms.getTelecommunicationNmbrNum());
                    dsrWorkLocationsStaging.setPhoneExtensionNum(comms.getExtensionNum());
                } else if (comms.getTlcmnctnNmbrTypCd().getCtlNameCode().equalsIgnoreCase(PrsCtTelecomNumberTypesFacadeLocal.TelecomType.FAX.getValue())) {
                    dsrWorkLocationsStaging.setFaxAreaCodeNum(comms.getAreaCodeNum());
                    dsrWorkLocationsStaging.setFaxTelecommNmbrNum(comms.getTelecommunicationNmbrNum());
                    dsrWorkLocationsStaging.setFaxExtensionNum(comms.getExtensionNum());
                    faxAreaCode = comms.getAreaCodeNum();
                    faxNumber = comms.getTelecommunicationNmbrNum();
                    faxExtensionNumber = comms.getExtensionNum();
                }
            }

            if (!itemToview.getGrsElectronicAddressesList().isEmpty()) {
                dsrWorkLocationsStaging.setElectronicAddressTxt(itemToview.getGrsElectronicAddressesList().get(0).getElectronicAddressTxt());
            }
            dsrWorkLocationsStaging.setEffectiveStartDate(itemToview.getPrsWorkLocationDetailsList().get(0).getEffectiveStartDate());
            dsrWorkLocationsStaging.setEffectiveEndDate(itemToview.getPrsWorkLocationDetailsList().get(0).getEffectiveEndDate());

            dsrWorkLocationsStaging.setOwnerNameTxt(itemToview.getOwnerNameTxt());
            dsrWorkLocationsStaging.setOwnerTypeId(itemToview.getOwnerTypeId());
            dsrWorkLocationsStaging.setOperatorNameTxt(itemToview.getOperatorNameTxt());
            operatorName = itemToview.getOperatorNameTxt();
            dsrWorkLocationsStaging.setOperatorTypeId(itemToview.getOperatorTypeId());
            operatorType = itemToview.getOperatorTypeId() != null ? itemToview.getOperatorTypeId().getCtlId().toString() : null;

            selectedProgramArea = itemToview.getPrsWorkLocationDetailsList().get(0).getDsrSiteProgramCategoriesList().get(0).getProgramCategoryCd().getProgramAreaCd().getProgramAreaCd();
            getCategoriesForArea(selectedProgramArea);

            dsrWorkLocationsStaging.setStatusId(itemToview.getStatusId());

            List<DsrSiteProgramCategories> siteProgramCats = itemToview.getPrsWorkLocationDetailsList().get(0).getDsrSiteProgramCategoriesList();
            selectedProgramCategories = new ArrayList<>();
            List<DsrProgramCategoryStaging> list = new ArrayList<>();
            for (DsrSiteProgramCategories temp : siteProgramCats) {
                selectedProgramCategories.add(temp.getProgramCategoryCd().getProgramCategoryCd());

                DsrProgramCategoryStaging dsrProgramCategoryStaging = new DsrProgramCategoryStaging();

                dsrProgramCategoryStaging.setProgramCategoryCd(temp.getProgramCategoryCd());
                dsrProgramCategoryStaging.setWorkLocationsStagingId(dsrWorkLocationsStaging);

                list.add(dsrProgramCategoryStaging);
            }

            dsrWorkLocationsStaging.setDsrProgramCategoryStagingList(list);

            dsrWorkLocationsStaging.setCampusOfCareTxt(itemToview.getCampusOfCareTxt());
            dsrWorkLocationsStaging.setHealthAuthorityId(itemToview.getPauthPauthId());
            dsrWorkLocationsStaging.setServiceDeliveryAreaCd(itemToview.getServiceDeliveryAreaCd());
            dsrWorkLocationsStaging.setLocalHealthAreaCd(itemToview.getLocalHealthAreaCd());

            dummyHsda = itemToview.getServiceDeliveryAreaCd().getServiceDeliveryAreaCd();
            dummyHa = itemToview.getPauthPauthId().getPauthId();

            dsrWorkLocationsStaging.setNotes(itemToview.getNotes());

            dsrWorkLocationsStaging.setWorkLocationTypeId(itemToview.getPrsWorkLocationDetailsList().get(0).getWorkLocationTypeId());
            
            // Check needed for legacy data
        if (itemToview.getPrsWorkLocationDetailsList().get(0).getWorkLocationTypeId() == null) {     
            dsrWorkLocationsStaging.setWorkLocationTypeId(prsCtWorkLocationPurpsFacade.findDefaultWorkLocationPurps());
            
        }


            // Wrap DsrDeliverySiteIdentifiers for prsWorkLocation
            siteIdentifierWrapperList = SiteIdentifierWrapperUtility.createDsIdWrapperList(itemToview.getDsrDeliverySiteIdentifiersList());

            isView = true;
        }
    }

    public String addNewSite() {
        success = false;
        nullify();
        if (checkOptionalAndDateFields() == false) {
            return null;
        }

        if (!isLHAValid()) {
            return null;
        }

        setOptionalFields();

        dsrWorkLocationsStaging.setRequestTypeCd(DsrWorkLocationsStaging.RequestType.NEW);
        dsrWorkLocationsStaging.setStatusId(dsrCtStatusFacade.findActiveStatus());
        //     dsrWorkLocationStagingFacade.create(dsrWorkLocationsStaging);

        List<DsrProgramCategoryStaging> list = new ArrayList<>();

        /*
         * Insert selected program categories to the DSR_PROGRAM_CATEGORY_STAGING table
         */
        for (String categoryCode : selectedProgramCategories) {
            DsrProgramCategoryStaging dsrProgramCategoryStaging = new DsrProgramCategoryStaging();

            dsrProgramCategoryStaging.setProgramCategoryCd(new DsrProgramCategories(categoryCode));
            dsrProgramCategoryStaging.setWorkLocationsStagingId(dsrWorkLocationsStaging);

            list.add(dsrProgramCategoryStaging);
        }
        dsrWorkLocationsStaging.setDsrProgramCategoryStagingList(list);
        dsrWorkLocationStagingFacade.create(dsrWorkLocationsStaging);

        success = true;

        try {
            emailFacade.sendEmail(dsrWorkLocationsStaging.getSubmitterEmailTxt(), dsrWorkLocationsStaging.getDeliverySiteNameTxt(), EmailFacadeLocal.MESSAGE_TYPE.NEW_SITE);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }

    private boolean isLHAValid() {

        if (dsrWorkLocationsStaging.getLocalHealthAreaCd().getLocalHealthAreaCd() == null) {
            FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Local Health Area is required", "Local Health Area is required");
            FacesContext.getCurrentInstance().addMessage(null, msg);
            return false;
        }

        return true;
    }

    public String enableEditing() {
        isView = false;
        return null;
    }

    public String updateSite() {
        success = false;

        if (checkOptionalAndDateFields() == false) {
            return null;
        }

        if (!isLHAValid()) {
            return null;
        }

        // reset OneSide Entities in case there are changes.
//        PrsProvider provider = new PrsProvider();
//        provider.setPauthId(dsrWorkLocationsStaging.getHealthAuthorityId().getPauthId());
//        dsrWorkLocationsStaging.setHealthAuthorityId(provider);

        PrsProviders provider = prsProviderFacade.find(dsrWorkLocationsStaging.getHealthAuthorityId().getPauthId());
        dsrWorkLocationsStaging.setHealthAuthorityId(provider);


        DsrHlthServsDeliveryAreas dsrHealthDeliveryServicesArea = new DsrHlthServsDeliveryAreas();
        dsrHealthDeliveryServicesArea.setServiceDeliveryAreaCd(dsrWorkLocationsStaging.getServiceDeliveryAreaCd().getServiceDeliveryAreaCd());
        dsrWorkLocationsStaging.setServiceDeliveryAreaCd(dsrHealthDeliveryServicesArea);

        DsrLocalHealthAreas dsrLocalHealthArea = new DsrLocalHealthAreas();
        dsrLocalHealthArea.setLocalHealthAreaCd(dsrWorkLocationsStaging.getLocalHealthAreaCd().getLocalHealthAreaCd());
        dsrWorkLocationsStaging.setLocalHealthAreaCd(dsrLocalHealthArea);

        dsrWorkLocationsStaging.setDsrProgramCategoryStagingList(buildProgramCategoryList());
        setOptionalFields();
        dsrWorkLocationStagingFacade.edit(dsrWorkLocationsStaging);

        success = true;

        try {
            emailFacade.sendEmail(dsrWorkLocationsStaging.getSubmitterEmailTxt(), dsrWorkLocationsStaging.getDeliverySiteNameTxt(), EmailFacadeLocal.MESSAGE_TYPE.UPDATED_SITE);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

    private List<DsrProgramCategoryStaging> buildProgramCategoryList() {

        List<DsrProgramCategoryStaging> list = new ArrayList<>();

        /*
         * Insert selected program categories to the DSR_PROGRAM_CATEGORY_STAGING table
         */
        DsrProgramAreas programAtrea = dsrProgramAreaFacade.find(selectedProgramArea);
        for (String categoryCode : selectedProgramCategories) {
            DsrProgramCategoryStaging dsrProgramCategoryStaging = new DsrProgramCategoryStaging();
            DsrProgramCategories dsrProgramCategory = new DsrProgramCategories(categoryCode);
            dsrProgramCategory.setProgramAreaCd(programAtrea);
            dsrProgramCategoryStaging.setProgramCategoryCd(dsrProgramCategory);
            dsrProgramCategoryStaging.setWorkLocationsStagingId(dsrWorkLocationsStaging);

            list.add(dsrProgramCategoryStaging);
        }

        return list;
    }

    /**
     * Clears the state of this bean
     *
     * @return
     */
    public String clear() {

        success = false;

        PrsCtCountries defaultCountry = prsCtCountriesFacade.findDefaultCountry();
        PrsCtProvState defaultProvince = prsCtProvStateFacade.findDefaultProvince();


        // If this is an existing site, we don't want to clean out
        // identifier no
        if (dsrWorkLocationsStaging == null || dsrWorkLocationsStaging.getIdentifierNo() == null) {
            dsrWorkLocationsStaging = new DsrWorkLocationsStaging();
            siteIdentifierWrapperList.clear();
        } else {
            PrsWorkLocations id = dsrWorkLocationsStaging.getWlId();
            String identiferNo = dsrWorkLocationsStaging.getIdentifierNo();
            dsrWorkLocationsStaging = new DsrWorkLocationsStaging();
            dsrWorkLocationsStaging.setIdentifierNo(identiferNo);
            dsrWorkLocationsStaging.setWlId(id);
            siteIdentifierWrapperList = SiteIdentifierWrapperUtility.createDsIdWrapperList(id.getDsrDeliverySiteIdentifiersList());
        }

        dsrWorkLocationsStaging.setOwnerTypeId(new DsrCtOwnerOperatorTypes());
        dsrWorkLocationsStaging.setHealthAuthorityId(new PrsProviders());
        dsrWorkLocationsStaging.setServiceDeliveryAreaCd(new DsrHlthServsDeliveryAreas());
        dsrWorkLocationsStaging.setLocalHealthAreaCd(new DsrLocalHealthAreas());

        // location type should default to community care
        dsrWorkLocationsStaging.setWorkLocationTypeId(prsCtWorkLocationPurpsFacade.findDefaultWorkLocationPurps());
        selectedProgramArea = null;
        selectedProgramCategories = null;
        categoryList = null;
        hsdaList = null;
        lhaList = null;

        dsrWorkLocationsStaging.setCountryId(defaultCountry);
        getProvincesForCountry(defaultCountry.getCtlNameCode());
        dsrWorkLocationsStaging.setProvinceId(defaultProvince);

        faxNumber = null;
        faxExtensionNumber = null;
        faxAreaCode = null;
        operatorName = null;
        operatorType = null;

        //snow 
        dummyHsda = "";
        dummyHa = null;

        clearUIState();

        return null;
    }

    private void clearUIState() {

        UIViewRoot view = FacesContext.getCurrentInstance().getViewRoot();
        UIComponent comp = view.findComponent("siteStagingForm");
        List<UIComponent> comps = comp != null ? comp.getChildren() : null;
        List<UIComponent> fields;

        if (comps != null) {
            for (UIComponent c : comps) {
                if (c instanceof Panel) {

                    fields = c.getChildren();
                    for (UIComponent field : fields) {

                        if (field instanceof HtmlInputText) {
                            ((HtmlInputText) field).setSubmittedValue(null);
                            ((HtmlInputText) field).setValue(null);
                        } else if (field instanceof HtmlSelectManyListbox) {
                            ((HtmlSelectManyListbox) field).setSubmittedValue(null);
                            ((HtmlSelectManyListbox) field).setValue(null);
                        } else if (field instanceof HtmlSelectOneMenu) {
                            ((HtmlSelectOneMenu) field).setSubmittedValue(null);
                            ((HtmlSelectOneMenu) field).setValue(null);
                        } else if (field instanceof Calendar) {
                            ((Calendar) field).setSubmittedValue(null);
                            ((Calendar) field).setValue(null);
                        }

                    }
                }
            }
        }
    }

    /**
     * Clears the state of this bean
     *
     * @return
     */
    public String canelUpdate() {
        isView = true;
        return null;
    }

    /**
     * Nullifys any child objects which don't have valid PKs set
     */
    private void nullify() {
        /*if (dsrWorkLocationsStaging.getOperatorTypeId()!=null && dsrWorkLocationsStaging.getOperatorTypeId().getCtlId()==null){
         dsrWorkLocationsStaging.setOperatorTypeId(null);
         }*/
    }

    public boolean checkOptionalAndDateFields() {
        FacesMessage errMsg;

        if (faxAreaCode.equals("") && !(faxNumber.equals(""))) {
            errMsg = new FacesMessage("You entered a fax number, but no fax area code.");
            errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
            return false;
        } else if (!(faxAreaCode.equals("")) && faxNumber.equals("")) {
            errMsg = new FacesMessage("You entered a fax area code, but no fax number.");
            errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
            return false;
        }

        if (!(operatorName.equals("")) && (operatorType == null)) {
            errMsg = new FacesMessage("You entered an operator name, but did not choose an operator type.");
            errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
            return false;
        } else if (operatorName.equals("") && (operatorType != null)) {
            errMsg = new FacesMessage("You chose an operator type, but did not enter an operator name.");
            errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
            return false;
        }

        if (dsrWorkLocationsStaging.getEffectiveEndDate() != null) {
            if (dsrWorkLocationsStaging.getEffectiveStartDate().after(dsrWorkLocationsStaging.getEffectiveEndDate())) {
                errMsg = new FacesMessage("Start date cannot be after end date.");
                errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, errMsg);
                return false;
            }
        }
        return true;
    }

    public void setOptionalFields() {
        /* set fax entry */
        if (!(faxNumber.equals("") && faxAreaCode.equals(""))) {
            dsrWorkLocationsStaging.setFaxAreaCodeNum(faxAreaCode);
            dsrWorkLocationsStaging.setFaxTelecommNmbrNum(faxNumber);
            dsrWorkLocationsStaging.setFaxExtensionNum(faxExtensionNumber);
        } else {
            dsrWorkLocationsStaging.setFaxAreaCodeNum(null);
            dsrWorkLocationsStaging.setFaxTelecommNmbrNum(null);
            dsrWorkLocationsStaging.setFaxExtensionNum(null);
        }
        /* set operator entry */
        if (!(operatorName.equals("") && operatorType == null)) {
            dsrWorkLocationsStaging.setOperatorNameTxt(operatorName);
            dsrWorkLocationsStaging.setOperatorTypeId(new DsrCtOwnerOperatorTypes());
            dsrWorkLocationsStaging.getOperatorTypeId().setCtlId(Long.valueOf(operatorType));
        }
    }

    /* Getters and Setters */
    public DsrWorkLocationsStaging getDsrWorkLocationsStaging() {
        return dsrWorkLocationsStaging;
    }

    public Droplists getDropList() {
        return dropList;
    }

    public void setDropList(Droplists dropList) {
        this.dropList = dropList;
    }

    public String getSelectedProgramArea() {
        return selectedProgramArea;
    }

    public void setSelectedProgramArea(String selectedProgramArea) {
        this.selectedProgramArea = selectedProgramArea;
    }

    public List<String> getSelectedProgramCategories() {
        return selectedProgramCategories;
    }

    public void setSelectedProgramCategories(List<String> selectedProgramCategories) {
        this.selectedProgramCategories = selectedProgramCategories;
    }

    public List<SelectItem> getProvinceList() {
        return provinceList;
    }

    public List<SelectItem> getCategoryList() {
        return categoryList;
    }

    public List<SelectItem> getHsdaList() {
        return hsdaList;
    }

    public List<SelectItem> getLhaList() {
        return lhaList;
    }

    public List<DsrWorkLocationsStaging> getPendingRequests() {

        pendingRequests = dsrWorkLocationStagingFacade.findPendingRequests();
        return pendingRequests;
    }

    public void setPendingRequests(List<DsrWorkLocationsStaging> pendingRequests) {
        this.pendingRequests = pendingRequests;
    }

    public boolean isIsView() {
        return isView;
    }

    public void setIsView(boolean isView) {
        this.isView = isView;
    }

    /**
     *
     * @param defaultCountry
     */
    private void getProvincesForCountry(String countryCd) {
        provinceList = dropList.getAllProvincesInCountry(countryCd);
    }

    /**
     *
     * @param area
     */
    private void getCategoriesForArea(String area) {
        categoryList = dropList.getAllCategoriesWithCodeForArea(area);;
    }

//    /**
//     * @param healthAuthorityId
//     */
//    private void getHsdaForHealthAuthority(Long healthAuthorityId) {
//        hsdaList = dropList.getAllHsdaForHealthAuthority(healthAuthorityId);
//    }
//
//    /**
//     * @param hsdaCode
//     */
//    private void getLocalHealthAreaForHsda(String hsdaCode) {
//        lhaList = dropList.getAllLocalHealthAreaForHsda(new String[]{hsdaCode});
//    }
    public List<SiteIdentifierWrapper> getSiteIdentifierWrapperList() {
        return siteIdentifierWrapperList;
    }

    /**
     *
     * @param event
     */
    public void updateProvince(ValueChangeEvent event) {
        getProvincesForCountry(event.getNewValue().toString());
    }

    /**
     *
     * @param event
     */
    public void updateCategory(ValueChangeEvent event) {
        getCategoriesForArea(event.getNewValue().toString());
    }

    public void updateHsdaAndProvider(ValueChangeEvent event) {


        if (!event.getNewValue().equals("")) {
            DsrHlthServsDeliveryAreas dsrHealthDeliveryServicesArea = dsrLocalHealthAreaFacade.getHsdaForLocalHealthArea(event.getNewValue().toString());

            dsrWorkLocationsStaging.getServiceDeliveryAreaCd().setServiceDeliveryAreaCd(dsrHealthDeliveryServicesArea.getServiceDeliveryAreaCd());
            dsrWorkLocationsStaging.getHealthAuthorityId().setPauthId(dsrHealthDeliveryServicesArea.getPauthId().getPauthId());
            dummyHsda = dsrHealthDeliveryServicesArea.getServiceDeliveryAreaCd();
            dummyHa = dsrHealthDeliveryServicesArea.getPauthId().getPauthId();

        } else {
            dsrWorkLocationsStaging.getLocalHealthAreaCd().setLocalHealthAreaCd(null);
            dsrWorkLocationsStaging.getServiceDeliveryAreaCd().setServiceDeliveryAreaCd("");
            dsrWorkLocationsStaging.getHealthAuthorityId().setPauthId(null);
            dummyHsda = "";
            dummyHa = null;
        }

    }

    /**
     *
     * @param event
     */
//    public void updateHSDA(ValueChangeEvent event) {
//        getHsdaForHealthAuthority((Long) event.getNewValue());
//    }
//
//    /**
//     *
//     * @param event
//     */
//    public void updateLocalHealthArea(ValueChangeEvent event) {
//        getLocalHealthAreaForHsda(event.getNewValue().toString());
//    }
    public String viewSiteWithId(Long id, String action) {

        DsrWorkLocationsStaging item = null;

        // Locate Item to view using primary key for the entity
        for (DsrWorkLocationsStaging p : pendingRequests) {
            if (p.getWorkLocationsStagingId().equals(id)) {
                item = p;
                break;
            }
        }

        FacesContext.getCurrentInstance().getExternalContext().getRequestMap().put("displayPendingRequest", item);
        FacesContext.getCurrentInstance().getExternalContext().getRequestMap().put("action", action);
        return "ViewDeliverySite";

    }

    /**
     * @return the faxAreaCode
     */
    public String getFaxAreaCode() {
        return faxAreaCode;
    }

    /**
     * @param faxAreaCode the faxAreaCode to set
     */
    public void setFaxAreaCode(String faxAreaCode) {
        this.faxAreaCode = faxAreaCode;
    }

    /**
     * @return the faxNumber
     */
    public String getFaxNumber() {
        return faxNumber;
    }

    /**
     * @param faxNumber the faxNumber to set
     */
    public void setFaxNumber(String faxNumber) {
        this.faxNumber = faxNumber;
    }

    public String getFaxExtensionNumber() {
        return faxExtensionNumber;
    }

    public void setFaxExtensionNumber(String faxExtensionNumber) {
        this.faxExtensionNumber = faxExtensionNumber;
    }

    /**
     * @return the operatorName
     */
    public String getOperatorName() {
        return operatorName;
    }

    /**
     * @param operatorName the operatorName to set
     */
    public void setOperatorName(String operatorName) {
        this.operatorName = operatorName;
    }

    /**
     * @return the operatorType
     */
    public String getOperatorType() {
        return operatorType;
    }

    /**
     * @param operatorType the operatorType to set
     */
    public void setOperatorType(String operatorType) {
        this.operatorType = operatorType;
    }

    public boolean isSuccess() {
        return success;
    }

    public void setSuccess(boolean success) {
        this.success = success;
    }

    public String getDummyHsda() {
        return dummyHsda;
    }

    public void setDummyHsda(String dummyHsda) {
        //   this.dummyHsda = dummyHsda;
    }

    public Long getDummyHa() {
        return dummyHa;
    }

    public void setDummyHa(Long dummyHa) {
        //  this.dummyHa = dummyHa;
    }

    public List getViewExport() {

        List<String[]> siteData = new ArrayList<>();


        if (dsrWorkLocationsStaging == null || dsrWorkLocationsStaging.getWlId() == null) {
            return siteData;
        }

        int size = 2;
        String tab = "\t";
        String space = " ";

        String[] temp = new String[2];
        temp[0] = getResourceValue("AddDeliverySite.site.location");
        temp[1] = space;
        siteData.add(temp);

        temp = new String[size];


        if (dsrWorkLocationsStaging.getWlId() != null) {
            temp[0] = tab + getResourceValue("UpdateDeliverySite.site.location.ds.id");
            temp[1] = dsrWorkLocationsStaging.getIdentifierNo();
            siteData.add(temp);
        }


        if (dsrWorkLocationsStaging.getWlId() != null) {
            temp = new String[size];
            temp[0] = tab + getResourceValue("UpdateDeliverySite.site.location.status");
            temp[1] = dsrWorkLocationsStaging.getStatusId().getCtlDescTxt();
            siteData.add(temp);
        }

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.site.location.name");
        temp[1] = dsrWorkLocationsStaging.getDeliverySiteNameTxt();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("ViewDeliverySite.site.location.address");
        StringBuilder builder = new StringBuilder();
        builder.append(padWithSpaceIfNoNull(dsrWorkLocationsStaging.getAddressLine1Txt()))
                .append(padWithSpaceIfNoNull(dsrWorkLocationsStaging.getAddressLine2Txt()))
                .append(padWithSpaceIfNoNull(dsrWorkLocationsStaging.getAddressLine3Txt()))
                .append(padWithSpaceIfNoNull(dsrWorkLocationsStaging.getAddressLine4Txt()))
                .append(padWithSpaceIfNoNull(dsrWorkLocationsStaging.getCityTxt()))
                .append(padWithSpaceIfNoNull(dsrWorkLocationsStaging.getProvinceId().getCtlDescTxt()))
                .append(padWithSpaceIfNoNull(dsrWorkLocationsStaging.getCountryId().getCtlDescTxt()))
                .append(dsrWorkLocationsStaging.getPostalCodeOrZipTxt());

        temp[1] = builder.toString();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.site.location.contact.name");
        temp[1] = dsrWorkLocationsStaging.getContactName();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.site.location.telephone");

        builder.delete(0, builder.length());
        builder.append("(").append(dsrWorkLocationsStaging.getPhoneAreaCodeNum()).append(")")
                .append(dsrWorkLocationsStaging.getPhoneTelecommNmbrNum()).append(" Ext: ")
                .append(padWithSpaceIfNoNull(dsrWorkLocationsStaging.getPhoneExtensionNum()));

        temp[1] = builder.toString();

        siteData.add(temp);


        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.site.location.fax");
        if (faxAreaCode != null && !faxAreaCode.trim().isEmpty()) {
            builder.delete(0, builder.length());
            builder.append("(").append(faxAreaCode).append(")")
                    .append(faxNumber).append(space).append(getResourceValue("AddDeliverySite.site.location.fax.ext")).append(space)
                    .append(padWithSpaceIfNoNull(faxExtensionNumber));

            temp[1] = builder.toString();
        }
        siteData.add(temp);


        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.site.location.email");
        temp[1] = dsrWorkLocationsStaging.getElectronicAddressTxt();
        siteData.add(temp);


        DateFormat df = DateFormat.getDateInstance(DateFormat.MEDIUM);
        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.site.location.startdate");
        temp[1] = df.format(dsrWorkLocationsStaging.getEffectiveStartDate());
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.site.location.enddate");
        temp[1] = dsrWorkLocationsStaging.getEffectiveEndDate() != null ? df.format(dsrWorkLocationsStaging.getEffectiveEndDate()) : space;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = space;
        temp[1] = space;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = getResourceValue("AddDeliverySite.site.alternateId");
        temp[1] = space;
        siteData.add(temp);


        for (SiteIdentifierWrapper w : siteIdentifierWrapperList) {

            if (w.getDsId().getActiveYn().equalsIgnoreCase(Constants.NO_FLAG)) {
                temp = new String[size];
                temp[0] = tab + w.getDsId().getSourceSystemCd().getSourceSystemCd();
                temp[1] = w.getDsId().getIdentifierNo();
                siteData.add(temp);
            }
        }

        temp = new String[size];
        temp[0] = space;
        temp[1] = space;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = getResourceValue("AddDeliverySite.ownership.information");
        temp[1] = space;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.ownership.information.legal.owner");
        temp[1] = dsrWorkLocationsStaging.getOwnerNameTxt();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.ownership.information.legal.owner.type");
        temp[1] = dsrWorkLocationsStaging.getOwnerTypeId() != null ? dsrWorkLocationsStaging.getOwnerTypeId().getCtlDescTxt() : space;
        siteData.add(temp);


        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.ownership.information.legal.operator");
        temp[1] = operatorName;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.ownership.information.legal.operator.type");
        temp[1] = dsrWorkLocationsStaging.getOperatorTypeId() != null ? dsrWorkLocationsStaging.getOperatorTypeId().getCtlDescTxt() : space;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = space;
        temp[1] = space;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = getResourceValue("AddDeliverySite.additional.information");
        temp[1] = space;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.additional.information.program.area");
        temp[1] = dsrWorkLocationsStaging.getDsrProgramCategoryStagingList().get(0).getProgramCategoryCd().getProgramAreaCd().getProgramAreaDsc();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.additional.information.program.category");
        builder.delete(0, builder.length());
        for (DsrProgramCategoryStaging c : dsrWorkLocationsStaging.getDsrProgramCategoryStagingList()) {
            builder.append(c.getProgramCategoryCd().getProgramCategoryDsc()).append(";").append(space);
        }

        temp[1] = builder.delete(builder.length() - 2, builder.length()).toString();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.additional.information.program.campus");
        temp[1] = dsrWorkLocationsStaging.getCampusOfCareTxt();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.additional.information.lha");
        temp[1] = dsrWorkLocationsStaging.getLocalHealthAreaCd().getLocalHealthAreaDsc();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.additional.information.hsda");
        temp[1] = dsrWorkLocationsStaging.getServiceDeliveryAreaCd().getServiceDeliveryAreaDsc();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.additional.information.provider.organization");
        temp[1] = dsrWorkLocationsStaging.getHealthAuthorityId().getGrsOrgNamesList().get(0).getOrgnztnLongNameTxt();
        siteData.add(temp);

        return siteData;
    }

    private String padWithSpaceIfNoNull(String input) {

        if (input != null) {
            input = input + " ";
        } else {
            input = "";
        }

        return input;
    }
}