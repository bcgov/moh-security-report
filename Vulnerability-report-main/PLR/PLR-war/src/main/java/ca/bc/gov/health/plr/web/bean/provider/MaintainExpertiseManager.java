package ca.bc.gov.health.plr.web.bean.provider;

import ca.bc.gov.health.plr.dto.provider.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.MaintainExpertiseService;
import ca.bc.gov.health.plr.service.provider.MaintainProviderService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.Droplists;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import ca.bc.gov.health.plr.web.util.JSFUtils;
import java.io.Serializable;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.inject.Inject;

/**
 * Backing bean for maintaining (creating/updating) an expertise for a specific
 * provider.
 *
 * @author Grant.Hodgins
 */
@ManagedBean
@ViewScoped
public class MaintainExpertiseManager implements Serializable {

    @EJB
    protected MaintainExpertiseService maintainExpertiseService;
    @EJB
    protected MaintainProviderService maintainProviderService;
    @Inject
    private Droplists droplists;
    private ExpertiseDto dto;
    private ProviderDto providerDetails;
    private List<SelectItem> expertiseTypeSelectItems;
    
    /**
     * Initialize the backing transfer objects.
     */
    @PostConstruct
    public void init() {
        resetDto();
    }

    /**
     * Resets the DTO so that the backing-bean can be re-used in the same view.
     */
    public void resetDto() {
        dto = new ExpertiseDto();
    }

    /**
     * Add or update a status record for the provider viewed.
     */
    public void save() {

        if (this.dto.isNew()) {
            dto.setPauthId(providerDetails.getPauthId());
        }
        FacesContext fc = FacesContext.getCurrentInstance();
        try {
            maintainProviderService.save(getDto());

            List<ExpertiseDto> freshExpertiseList = maintainExpertiseService.getExpetises(providerDetails.getPauthId());
            providerDetails.setExpertise(freshExpertiseList);

            String message = JSFUtils.prepareSuccessMessage("expertise" , dto);
            fc.addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (DuplicateRecordException | EntityValidationException dre) {
            fc.validationFailed();
            fc.addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_ERROR, dre.getMessage(), ""));
        }
    }

    public ExpertiseDto getDto() {
        return dto;
    }

    public void setDto(ExpertiseDto dto) {
        this.dto = dto;
    }

    public ProviderDto getProviderDetails() {
        return providerDetails;
    }

    public void setProviderDetails(ProviderDto providerDetails) {        
        this.providerDetails = providerDetails;
        expertiseTypeSelectItems = droplists.getApplicableExpertiseTypes(this.providerDetails.getTypeId());
    }

    public List<SelectItem> getExpertiseTypeSelectItems() {
        return expertiseTypeSelectItems;
    }
}
