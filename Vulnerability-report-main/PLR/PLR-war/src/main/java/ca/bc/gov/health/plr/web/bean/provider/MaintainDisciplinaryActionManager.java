package ca.bc.gov.health.plr.web.bean.provider;

import ca.bc.gov.health.plr.dto.provider.DisciplinaryActionDto;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.MaintainDisciplinaryActionService;
import ca.bc.gov.health.plr.service.provider.MaintainProviderService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import ca.bc.gov.health.plr.web.util.JSFUtils;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

/**
 *
 * @author ian.scott
 */
@ManagedBean
@ViewScoped
public class MaintainDisciplinaryActionManager {

    @EJB
    protected MaintainDisciplinaryActionService maintainDisciplinaryActionService;
    @EJB
    protected MaintainProviderService maintainProviderService;
    private Long pauthId;
    protected DisciplinaryActionDto disciplinaryActionDto;
    protected List<DisciplinaryActionDto> disciplinaryActions;

    /**
     * Initialize the backing transfer objects. We'll do all at once since it's
     * cheap and we don't know what the users may choose.
     */
    @PostConstruct
    public void init() {
        disciplinaryActionDto = new DisciplinaryActionDto();
    }

    /**
     * Initial method called from page which determines if the request is an add
     * or an update
     */
    public void save() {
        if (this.disciplinaryActionDto.isNew()) {
            disciplinaryActionDto.setPauthId(pauthId);
        }
        try {
            DisciplinaryActionDto newRecord = maintainProviderService.save(getDisciplinaryActionDto());
            disciplinaryActions.clear();
            disciplinaryActions.addAll(maintainDisciplinaryActionService.refreshDisciplinaryActions(newRecord));
            String message = JSFUtils.prepareSuccessMessage("disciplinary action" , disciplinaryActionDto);
            FacesContext.getCurrentInstance().addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (DuplicateRecordException | EntityValidationException dre) {
            FacesContext.getCurrentInstance().addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_ERROR, dre.getMessage(), ""));
            FacesContext.getCurrentInstance().validationFailed();
        }
    }

    public DisciplinaryActionDto getDisciplinaryActionDto() {
        return disciplinaryActionDto;
    }

    public void setDisciplinaryActionDto(DisciplinaryActionDto disciplinaryActionDto) {
        this.disciplinaryActionDto = disciplinaryActionDto;
    }

    public List<DisciplinaryActionDto> getDisciplinaryActions() {
        return disciplinaryActions;
    }

    public void setDisciplinaryActions(List<DisciplinaryActionDto> disciplinaryActions) {
        this.disciplinaryActions = disciplinaryActions;
    }

    public void setPauthId(Long pauthId) {
        this.pauthId = pauthId;
    }
}
