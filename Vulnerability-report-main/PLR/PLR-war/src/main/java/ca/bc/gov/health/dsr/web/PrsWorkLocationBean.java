package ca.bc.gov.health.dsr.web;

import ca.bc.gov.health.plr.ejb.entity.*;
import ca.bc.gov.health.dsr.ejb.session.*;
import ca.bc.gov.health.dsr.ejb.util.Constants;
import ca.bc.gov.health.jsf.BaseBean;
import ca.bc.gov.health.jsf.util.SiteIdentifierWrapper;
import ca.bc.gov.health.jsf.util.SiteIdentifierWrapperUtility;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.component.UIComponent;
import javax.faces.component.UIViewRoot;
import javax.faces.component.html.HtmlInputText;
import javax.faces.component.html.HtmlSelectManyListbox;
import javax.faces.component.html.HtmlSelectOneMenu;
import javax.faces.context.FacesContext;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;
import javax.servlet.http.HttpServletRequest;
import org.primefaces.component.calendar.Calendar;
import org.primefaces.component.panel.Panel;
import javax.ws.rs.core.Context;
//import org.richfaces.component.UICalendar;

/**
 *
 * @author Farbod.Golkar
 */
@ManagedBean(name = "PrsWorkLocationBean")
@ViewScoped
public class PrsWorkLocationBean extends BaseBean implements java.io.Serializable {

    private static final String CLASSNAME = PrsWorkLocationBean.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    /* EJB for dealing with PrsWorkLocation instances */
    @EJB
    private PrsProviderFacadeLocal prsProviderFacade;
    @EJB
    private PrsWorkLocationFacadeLocal prsWorkLocationsFacade;
    @EJB
    private DsrLocalHealthAreaFacadeLocal dsrLocalHealthAreaFacade;
    @EJB
    private GrsCtBooleanTypesFacadeLocal grsCtBooleanTypesFacade;
    @EJB
    private DsrCtStatusFacadeLocal dsrCtStatusFacade;
    @EJB
    private PrsCtProvStateFacadeLocal prsCtProvStateFacade;
    @EJB
    private PrsCtCountriesFacadeLocal prsCtCountriesFacade;
    @EJB
    private PrsCtWorkLocationPurpsFacadeLocal prsCtWorkLocationPurpsFacade;
    @EJB
    private PrsCtCommunPurposeTypesFacadeLocal prsCtCommunPurposeTypesFacade;
    @EJB
    private PrsCtTelecomNumberTypesFacadeLocal prsCtTelecomNumberTypesFacad;
    @EJB
    private PrsCtElectronicAddrTypesFacadeLocal prsCtElectronicAddrTypesFacade;
    @EJB
    private PrsCtAddressTypesFacadeLocal prsCtAddressTypesFacade;
    @EJB
    private PrsCtDataOwnerCodesFacadeLocal prsCtDataOwnerCodesFacade;
    private PrsWorkLocations prsWorkLocation;
    private List<PrsWorkLocationDetails> prsWorkLocationDetails = new ArrayList<>();
    private DsrSourceSystems dsrSourceSystem;
    /* EJB for dealing with DsrDeliverySiteIdentifier instances */
    @EJB
    private DsrDeliverySiteIdentifierFacadeLocal dsrDeliverySiteIdentifierFacade;
    private List<DsrDeliverySiteIdentifiers> dsrDeliverySiteIdentifiers = new ArrayList<>();
    @EJB
    private DsrWorkLocationStagingFacadeLocal dsrWorkLocationStagingFacade;
    private List<GrsAddresses> grsAddresses = new ArrayList<>();
    /* EJB for dealing with GrsElectronicAddress instances */
    private List<GrsElectronicAddresses> grsElectronicAddresses = new ArrayList<>();
    private GrsTelephones grsTelephone;
    private GrsTelephones grsFaxNumber;
    /* optional fields */
    private String faxAreaCode;
    private String faxNumber;
    private String faxExtensionNumber;
    private String operatorName;
    private String operatorType;
    private List<GrsTelephones> grsTelephoneList;
    private PrsInformationRoutes prsInformationRoute;
    /* EJB for dealing with GrsCtLeaf instances */
    @ManagedProperty("#{DsrDroplists}")
    private Droplists dropList;
    private String selectedProgramArea;
    private List<String> selectedProgramCategories;
    private List<SelectItem> provinceList = new ArrayList<>();
    private List<SelectItem> categoryList = new ArrayList<>();
    private List<PrsWorkLocations> searchResult = new ArrayList<>();
    private List<SiteIdentifierWrapper> siteIdentifierWrapperList = new ArrayList<>();
    private boolean isView;
    // holds pending request to be approved
    private DsrWorkLocationsStaging pendingRequest;
    // value determines how to handle incoming request
    private String action;
    /*Search Parameter Holders */
    private String dsId;
    private String siteName;
    private String identifierSource;
    private Long selectedProviderOrganization;
    private String selectedProgramAreaForSearch;
    private String cityForSearch;
    private List<String> selectedProgramCategoriesForSearch;
    private List<Long> selectedRecordsStatus;
    private List<Long> selectedOwnersipType;
    private List<String> selectedHsdas;
    private List<String> selectedLhas;
    // Page tracker for datascroller
    private int currentPage;
    // Message to display in Popup
    private String actionResponse;
    // Page to navigate to after clicking ok in Notification Popup
    private String nextPage;
    private boolean success;
    private boolean approved;
    private boolean denied;
    private boolean searchSuccess;
    // This info does not belong here, but it gets deleted from
    // the DB once a request is approved is denied or approved
    // however, we need to display it in the view page
    private String submitterName;
    private String submitterEmail;
    private String dummyHsda;
    private Long dummyHa;
	
	@Context
    private HttpServletRequest httpRequest;

    /**
     * Default constructor
     */
    public PrsWorkLocationBean() {
    }

    /**
     * Initializes this bean after injection is complete
     */
    @PostConstruct
    public void init() {
        clear();
        // itemToview will not be null if we are trying to view a site from the search page
        PrsWorkLocations itemToview = (PrsWorkLocations) FacesContext.getCurrentInstance().getExternalContext().getRequestMap().get("displayObject");

        // Extract action information to help us to determine the action 
        // the user can take from the view
        action = (String) FacesContext.getCurrentInstance().getExternalContext().getRequestMap().get("action");

        if (itemToview != null) {

            Long tempwlId = itemToview.getWlId();
            prsWorkLocation = prsWorkLocationsFacade.find(tempwlId);

            if (itemToview.getOwnerTypeId() == null) {
                itemToview.setOwnerTypeId(new DsrCtOwnerOperatorTypes());
            }
            populateViewItems(itemToview);

            isView = true;
            return;
        }

        // pendingRequest will not be null if we are trying to view a site from the pending requests page
        pendingRequest = (DsrWorkLocationsStaging) FacesContext.getCurrentInstance().getExternalContext().getRequestMap().get("displayPendingRequest");

        if (pendingRequest != null) {

            // retrieve submitter info
            submitterName = pendingRequest.getSubmitterNm();
            submitterEmail = pendingRequest.getSubmitterEmailTxt();

            // Copy values from DsrWorkLocationStaging to PrsWorkLocation instance
            // to ensure we are going to be updating the staging table if we are
            // dealing with a change request
            if (pendingRequest.getRequestTypeCd() == DsrWorkLocationsStaging.RequestType.CHANGED) {
                Long wlId = pendingRequest.getWlId().getWlId();
                prsWorkLocation = prsWorkLocationsFacade.find(wlId);

                prsWorkLocation.setContactName(pendingRequest.getContactName());
                prsWorkLocation.getPrsWorkLocationDetailsList().get(0).setWorkLocationNameTxt(pendingRequest.getDeliverySiteNameTxt());
                prsWorkLocation.getGrsAddressesList().get(0).setAddressLine1Txt(pendingRequest.getAddressLine1Txt());
                prsWorkLocation.getGrsAddressesList().get(0).setAddressLine2Txt(pendingRequest.getAddressLine2Txt());
                prsWorkLocation.getGrsAddressesList().get(0).setAddressLine3Txt(pendingRequest.getAddressLine3Txt());
                prsWorkLocation.getGrsAddressesList().get(0).setAddressLine4Txt(pendingRequest.getAddressLine4Txt());
                prsWorkLocation.getGrsAddressesList().get(0).setCountryId(pendingRequest.getCountryId());
                prsWorkLocation.getGrsAddressesList().get(0).setProvinceId(pendingRequest.getProvinceId());
                prsWorkLocation.getGrsAddressesList().get(0).setCityTxt(pendingRequest.getCityTxt());
                prsWorkLocation.getGrsAddressesList().get(0).setPostalCodeOrZipTxt(pendingRequest.getPostalCodeOrZipTxt());
                grsAddresses = prsWorkLocation.getGrsAddressesList();

                // Get telephone information
                for (GrsTelephones comms : prsWorkLocation.getGrsTelephonesList()) {

                    if (comms.getTlcmnctnNmbrTypCd().getCtlNameCode().equalsIgnoreCase(PrsCtTelecomNumberTypesFacadeLocal.TelecomType.TELEPHONE.getValue())) {
                        grsTelephone = comms;
                        grsTelephone.setAreaCodeNum(pendingRequest.getPhoneAreaCodeNum());
                        grsTelephone.setTelecommunicationNmbrNum(pendingRequest.getPhoneTelecommNmbrNum());
                        grsTelephone.setExtensionNum(pendingRequest.getPhoneExtensionNum());
                        break;
                    }
                }

                faxAreaCode = pendingRequest.getFaxAreaCodeNum();
                faxNumber = pendingRequest.getFaxTelecommNmbrNum();
                faxExtensionNumber = pendingRequest.getFaxExtensionNum();

                // check needed for Legacy data
                if (prsWorkLocation.getGrsElectronicAddressesList() != null && !prsWorkLocation.getGrsElectronicAddressesList().isEmpty()) {
                    prsWorkLocation.getGrsElectronicAddressesList().get(0).setElectronicAddressTxt(pendingRequest.getElectronicAddressTxt());
                } else {
                    // this condition helps to deal with legacy data where there no exiating email address
                    GrsElectronicAddresses email = new GrsElectronicAddresses();
                    email.setElectronicAddressTxt(pendingRequest.getElectronicAddressTxt());
                    grsElectronicAddresses.clear();
                    grsElectronicAddresses.add(email);
                    prsWorkLocation.setGrsElectronicAddressesList(grsElectronicAddresses);
                }
                grsElectronicAddresses = prsWorkLocation.getGrsElectronicAddressesList();

                prsWorkLocation.getPrsWorkLocationDetailsList().get(0).setEffectiveStartDate(pendingRequest.getEffectiveStartDate());
                prsWorkLocation.getPrsWorkLocationDetailsList().get(0).setEffectiveEndDate(pendingRequest.getEffectiveEndDate());
                prsWorkLocationDetails = prsWorkLocation.getPrsWorkLocationDetailsList();

                // Wrap DsrDeliverySiteIdentifiers for prsWorkLocation
                siteIdentifierWrapperList = SiteIdentifierWrapperUtility.createDsIdWrapperList(prsWorkLocation.getDsrDeliverySiteIdentifiersList());

                // remove all non-active DsrDeliverySiteIdentifiers for prsWorkLocation since we have them wrapped already
                // and also, to make re-addition for modified/new/unchanged DsrDeliverySiteIdentifiers back to the 
                // DsrDeliverySiteIdentifiersList for prsWorkLocation
                prsWorkLocation.setDsrDeliverySiteIdentifiersList(prsWorkLocation.getDsrDeliverySiteIdentifiersList());

                prsWorkLocation.setOwnerNameTxt(pendingRequest.getOwnerNameTxt());
                prsWorkLocation.setOwnerTypeId(pendingRequest.getOwnerTypeId());

                operatorName = pendingRequest.getOperatorNameTxt();
                prsWorkLocation.setOperatorNameTxt(pendingRequest.getOperatorNameTxt());

                operatorType = (pendingRequest.getOperatorTypeId() != null) ? pendingRequest.getOperatorTypeId().getCtlId().toString() : operatorType;
                prsWorkLocation.setOperatorTypeId(pendingRequest.getOperatorTypeId());

                prsWorkLocation.setStatusId(pendingRequest.getStatusId());

                selectedProgramArea = pendingRequest.getDsrProgramCategoryStagingList().get(0).getProgramCategoryCd().getProgramAreaCd().getProgramAreaCd();
                getCategoriesForArea(selectedProgramArea);

                selectedProgramCategories = new ArrayList<>();
                List<DsrProgramCategoryStaging> programCatStaging = pendingRequest.getDsrProgramCategoryStagingList();

                DsrSiteProgramCategories item;

                // Remove current DsrSiteProgramCategory entities related to the 
                // PrsWorkLocationDetail in case there are changes in the 
                // this pending request
                prsWorkLocation.getPrsWorkLocationDetailsList().get(0).getDsrSiteProgramCategoriesList().clear();

                for (DsrProgramCategoryStaging temp : programCatStaging) {
                    // 
                    selectedProgramCategories.add(temp.getProgramCategoryCd().getProgramCategoryCd());

                    item = new DsrSiteProgramCategories();
                    item.setProgramCategoryCd(temp.getProgramCategoryCd());
                    item.setWldId(prsWorkLocation.getPrsWorkLocationDetailsList().get(0));

                    prsWorkLocation.getPrsWorkLocationDetailsList().get(0).getDsrSiteProgramCategoriesList().add(item);
                }

                prsWorkLocation.setCampusOfCareTxt(pendingRequest.getCampusOfCareTxt());
                prsWorkLocation.setPauthPauthId(pendingRequest.getHealthAuthorityId());
                prsWorkLocation.setServiceDeliveryAreaCd(pendingRequest.getServiceDeliveryAreaCd());
                prsWorkLocation.setLocalHealthAreaCd(pendingRequest.getLocalHealthAreaCd());

                // only used for input pages to provide visual feedback
                dummyHsda = pendingRequest.getServiceDeliveryAreaCd().getServiceDeliveryAreaCd();
                dummyHa = pendingRequest.getHealthAuthorityId().getPauthId();

                prsWorkLocation.setNotes(pendingRequest.getNotes());

                prsWorkLocation.getPrsWorkLocationDetailsList().get(0).setWorkLocationTypeId(pendingRequest.getWorkLocationTypeId());

            } else if (pendingRequest.getRequestTypeCd() == DsrWorkLocationsStaging.RequestType.NEW) {

                prsWorkLocation.setStatusId(pendingRequest.getStatusId());

                prsWorkLocation.setContactName(pendingRequest.getContactName());

                /* set work location detail entry */
                prsWorkLocationDetails.get(0).setWorkLocationNameTxt(pendingRequest.getDeliverySiteNameTxt());
                prsWorkLocationDetails.get(0).setEffectiveStartDate(pendingRequest.getEffectiveStartDate());
                prsWorkLocationDetails.get(0).setEffectiveEndDate(pendingRequest.getEffectiveEndDate());
                prsWorkLocationDetails.get(0).setWorkLocationTypeId(pendingRequest.getWorkLocationTypeId());

                selectedProgramArea = pendingRequest.getDsrProgramCategoryStagingList().get(0).getProgramCategoryCd().getProgramAreaCd().getProgramAreaCd();
                getCategoriesForArea(selectedProgramArea);

                /* create the program category entries */
                selectedProgramCategories = new ArrayList<>();
                prsWorkLocationDetails.get(0).setDsrSiteProgramCategoriesList(populatePrgCategories(pendingRequest));

                /* 
                 * create address entry 
                 */
                grsAddresses.get(0).setAddressLine1Txt(pendingRequest.getAddressLine1Txt());
                grsAddresses.get(0).setAddressLine2Txt(pendingRequest.getAddressLine2Txt());
                grsAddresses.get(0).setAddressLine3Txt(pendingRequest.getAddressLine3Txt());
                grsAddresses.get(0).setAddressLine4Txt(pendingRequest.getAddressLine4Txt());
                grsAddresses.get(0).setCountryId(pendingRequest.getCountryId());
                grsAddresses.get(0).setProvinceId(pendingRequest.getProvinceId());
                grsAddresses.get(0).setCityTxt(pendingRequest.getCityTxt());
                grsAddresses.get(0).setPostalCodeOrZipTxt(pendingRequest.getPostalCodeOrZipTxt());


                /* 
                 * create telephone entry 
                 */
                grsTelephone.setAreaCodeNum(pendingRequest.getPhoneAreaCodeNum());
                grsTelephone.setTelecommunicationNmbrNum(pendingRequest.getPhoneTelecommNmbrNum());
                grsTelephone.setExtensionNum(pendingRequest.getPhoneExtensionNum());
                grsTelephone.setCmnctnPrpsTypCd(prsCtCommunPurposeTypesFacade.findbyContactType(PrsCtCommunPurposeTypesFacadeLocal.ContactType.BUSINESS_CONTACT));
                grsTelephone.setTlcmnctnNmbrTypCd(prsCtTelecomNumberTypesFacad.findByTelecomType(PrsCtTelecomNumberTypesFacadeLocal.TelecomType.TELEPHONE));

                faxAreaCode = pendingRequest.getFaxAreaCodeNum();
                faxNumber = pendingRequest.getFaxTelecommNmbrNum();
                faxExtensionNumber = pendingRequest.getFaxExtensionNum();

                /* 
                 * create electronic address entry 
                 */
                grsElectronicAddresses.get(0).setElectronicAddressTxt(pendingRequest.getElectronicAddressTxt());

                prsWorkLocation.setOwnerNameTxt(pendingRequest.getOwnerNameTxt());
                prsWorkLocation.setOwnerTypeId(pendingRequest.getOwnerTypeId());

                operatorName = pendingRequest.getOperatorNameTxt();
                operatorType = (pendingRequest.getOperatorTypeId() != null) ? pendingRequest.getOperatorTypeId().getCtlId().toString() : operatorType;
                prsWorkLocation.setOperatorTypeId(pendingRequest.getOperatorTypeId());

                prsWorkLocation.setCampusOfCareTxt(pendingRequest.getCampusOfCareTxt());

                // Set provider
                prsWorkLocation.setPauthPauthId(pendingRequest.getHealthAuthorityId());
                prsWorkLocation.setServiceDeliveryAreaCd(pendingRequest.getServiceDeliveryAreaCd());
                prsWorkLocation.setLocalHealthAreaCd(pendingRequest.getLocalHealthAreaCd());

                // only used for input pages to provide visual feedback
                dummyHsda = pendingRequest.getServiceDeliveryAreaCd().getServiceDeliveryAreaCd();
                dummyHa = pendingRequest.getHealthAuthorityId().getPauthId();

                prsWorkLocation.setNotes(pendingRequest.getNotes());

            }

            isView = true;

        }

    }

    public String addNewSite() {

        if (addNewSiteCommon()) {
            populateViewItems(prsWorkLocationsFacade.find(prsWorkLocation.getWlId()));
            success = true;
            isView = true;
        }

        return null;
    }

    private boolean isLHAValid() {

        if (prsWorkLocation.getLocalHealthAreaCd().getLocalHealthAreaCd() == null) {
            FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Local Health Area is required", "Local Health Area is required");
            FacesContext.getCurrentInstance().addMessage(null, msg);
            return false;
        }

        return true;
    }

    private boolean addNewSiteCommon() {
        nullify();
        if (checkOptionalAndDateFields() == false) {
            return false;
        }

        if (!isLHAValid()) {
            return false;
        }


        /* set work location entry details */
        prsWorkLocation.setStatusId(dsrCtStatusFacade.findActiveStatus());
        prsWorkLocation.setActiveFlag(grsCtBooleanTypesFacade.findYesFlag());
        prsWorkLocation.setDataOwnerCode(prsCtDataOwnerCodesFacade.findByDefaultOwnerCode());
        prsWorkLocation.setWorkLocationChid(prsWorkLocationsFacade.generateWorkLocationChid(prsWorkLocation.getPauthPauthId().getPauthId()));

        /* set work location detail entry */
        prsWorkLocationDetails.get(0).setWlWlId(prsWorkLocation);
        prsWorkLocationDetails.get(0).setGenerationNum(1);
        prsWorkLocationDetails.get(0).setDefaultFlag(grsCtBooleanTypesFacade.findNoFlag());
        prsWorkLocation.setPrsWorkLocationDetailsList(prsWorkLocationDetails);

        dsrSourceSystem.setSourceSystemCd(Constants.DEFAULT_SOURCE_SYSTEM_CODE);

        /* set delivery site identifier entry */
        dsrDeliverySiteIdentifiers.get(0).setIdentifierNo(dsrDeliverySiteIdentifierFacade.generateIdentifierNumber());
        dsrDeliverySiteIdentifiers.get(0).setSourceSystemCd(dsrSourceSystem);
        dsrDeliverySiteIdentifiers.get(0).setActiveYn(Constants.YES_FLAG);

        dsrDeliverySiteIdentifiers.get(0).setWlWlId(prsWorkLocation);

        List<DsrDeliverySiteIdentifiers> siteIdentifiers = unwrapSiteIdentifiers();

        for (DsrDeliverySiteIdentifiers s : siteIdentifiers) {
            s.setWlWlId(prsWorkLocation);
            dsrDeliverySiteIdentifiers.add(s);
        }

        // Create CCIMS and Base20 identifiers if Program area is "Home and Care Community"
        if (selectedProgramArea.equalsIgnoreCase(Constants.HCC_PROGRAM_AREA_CODE)) {
            DsrDeliverySiteIdentifiers ds = new DsrDeliverySiteIdentifiers();
            ds.setWlWlId(prsWorkLocation);
            ds.setSourceSystemCd(new DsrSourceSystems(Constants.CCIMS_SOURCE_SYSTEM_CODE));
            ds.setActiveYn(Constants.YES_FLAG);
            ds.setIdentifierNo(dsrDeliverySiteIdentifierFacade.generateIdentifierNumberForLegacyProgamAreas(Constants.HCC_PROGRAM_AREA_CODE));
            dsrDeliverySiteIdentifiers.add(ds);

            DsrDeliverySiteIdentifiers base20 = new DsrDeliverySiteIdentifiers();
            base20.setWlWlId(prsWorkLocation);
            base20.setSourceSystemCd(new DsrSourceSystems(Constants.BASE_20_SOURCE_SYSTEM_CODE));
            base20.setActiveYn(Constants.YES_FLAG);
            base20.setIdentifierNo(padBeforeIfRequired(Integer.toString(Integer.parseInt(ds.getIdentifierNo()), Constants.BASE_20).toUpperCase(), "0", Constants.BASE_20_LENTGH));
            dsrDeliverySiteIdentifiers.add(base20);
        } // Create CPIM identifier if Program area is "Mental Health and Substance Use"
        else if (selectedProgramArea.equalsIgnoreCase(Constants.MH_PROGRAM_AREA_CODE)) {
            DsrDeliverySiteIdentifiers ds = new DsrDeliverySiteIdentifiers();
            ds.setWlWlId(prsWorkLocation);
            ds.setSourceSystemCd(new DsrSourceSystems(Constants.CPIM_SOURCE_SYSTEM_CODE));
            ds.setActiveYn(Constants.YES_FLAG);
            ds.setIdentifierNo(dsrDeliverySiteIdentifierFacade.generateIdentifierNumberForLegacyProgamAreas(Constants.MH_PROGRAM_AREA_CODE));
            dsrDeliverySiteIdentifiers.add(ds);
        }

        prsWorkLocation.setDsrDeliverySiteIdentifiersList(dsrDeliverySiteIdentifiers);

        /* set address entry */
        grsAddresses.get(0).setWlWlId(prsWorkLocation);
        grsAddresses.get(0).setEffectiveStartDate(prsWorkLocationDetails.get(0).getEffectiveStartDate());
        grsAddresses.get(0).setAddressTypeCode(prsCtAddressTypesFacade.findByAddressType(PrsCtAddressTypesFacadeLocal.AddressType.PHYSICAL));
        grsAddresses.get(0).setCmnctnPrpsTypCd(prsCtCommunPurposeTypesFacade.findbyContactType(PrsCtCommunPurposeTypesFacadeLocal.ContactType.BUSINESS_CONTACT));
        grsAddresses.get(0).setGenerationNum(1);
        prsWorkLocation.setGrsAddressesList(grsAddresses);

        /* set telephone entry */
        grsTelephone.setCmnctnPrpsTypCd(prsCtCommunPurposeTypesFacade.findbyContactType(PrsCtCommunPurposeTypesFacadeLocal.ContactType.BUSINESS_CONTACT));
        grsTelephone.setTlcmnctnNmbrTypCd(prsCtTelecomNumberTypesFacad.findByTelecomType(PrsCtTelecomNumberTypesFacadeLocal.TelecomType.TELEPHONE));
        grsTelephone.setGenerationNum(1);
        grsTelephone.setEffectiveStartDate(prsWorkLocationDetails.get(0).getEffectiveStartDate());
        grsTelephoneList.add(grsTelephone);

        for (GrsTelephones gTel : grsTelephoneList) {
            gTel.setWlWlId(prsWorkLocation);
        }
        prsWorkLocation.setGrsTelephonesList(grsTelephoneList);

        /* create the program category entries */
        prsWorkLocationDetails.get(0).setDsrSiteProgramCategoriesList(populatePrgCategories(null));

        setOptionalFields();

        prsWorkLocationsFacade.create(prsWorkLocation);

        // Ensure siteIdentifierWrapperList is updated with any auto generated alternate identifier
        siteIdentifierWrapperList = SiteIdentifierWrapperUtility.createDsIdWrapperList(prsWorkLocation.getDsrDeliverySiteIdentifiersList());

        // Change wrapped Ds ID status to read since we will go 
        // to view page after update
        updateWrappedSiteIdentifierStatus(SiteIdentifierWrapper.Status.READ);

        actionResponse = "New site added successfully ";
        nextPage = "ViewDeliverySite";
        action = "new";

        return true;
    }

    private List<DsrDeliverySiteIdentifiers> unwrapSiteIdentifiers() {
        List<DsrDeliverySiteIdentifiers> siteIdentifiers = new ArrayList<>();
        DsrDeliverySiteIdentifiers temp;

        for (SiteIdentifierWrapper s : siteIdentifierWrapperList) {
            siteIdentifiers.add(s.getDsId());

            try {
                temp = createBase20AlternateIdForCCIMs(s);
            } catch (NumberFormatException nfe) {
                //logger.log(Level.SEVERE, String.format("Cannot create BASE 20 alternate identifer for CCIMS '%s'", s.getDsId().getIdentifierNo()));
                FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Cannot create BASE 20 alternate identifer for CCIMS value entered", "Cannot create BASE 20 alternate identifer for CCIMS value entered");
                FacesContext.getCurrentInstance().addMessage(null, msg);
                throw nfe;
            }

            // If we have an alternate BASE_20 id generated then add it
            if (temp != null) {
                siteIdentifiers.add(temp);
            }
        }

        return siteIdentifiers;
    }

    private void updateWrappedSiteIdentifierStatus(SiteIdentifierWrapper.Status status) {

        for (SiteIdentifierWrapper s : siteIdentifierWrapperList) {
            s.setStatus(status);
        }

    }

    private DsrDeliverySiteIdentifiers createBase20AlternateIdForCCIMs(SiteIdentifierWrapper s) {
        DsrDeliverySiteIdentifiers ds = null;
        if ("Y".equals(s.getDsId().getActiveYn()) && s.getDsId().getSourceSystemCd().getSourceSystemCd().equals(Constants.CCIMS_SOURCE_SYSTEM_CODE)) {

            int ccimsIntValue = Integer.parseInt(s.getDsId().getIdentifierNo());

            ds = new DsrDeliverySiteIdentifiers();
            ds.setSourceSystemCd(new DsrSourceSystems(Constants.BASE_20_SOURCE_SYSTEM_CODE));
            ds.setActiveYn(Constants.YES_FLAG);
            ds.setIdentifierNo(padBeforeIfRequired(Integer.toString(ccimsIntValue, Constants.BASE_20).toUpperCase(), "0", Constants.BASE_20_LENTGH));

            for (SiteIdentifierWrapper item : siteIdentifierWrapperList) {

                // Only return newly generated BASE20 id if there is no matching id existing
                if ("Y".equals(item.getDsId().getActiveYn()) && item.getDsId().getSourceSystemCd().getSourceSystemCd().equals(Constants.BASE_20_SOURCE_SYSTEM_CODE)
                        && item.getDsId().getIdentifierNo().equals(ds.getIdentifierNo())) {
                    ds = null;
                    break;
                }
            }

        }

        return ds;
    }

    // Prepend value with pad
    private String padBeforeIfRequired(String value, String pad, int totalLength) {

        if (value != null && pad != null && !pad.isEmpty() && value.length() < totalLength) {

            int padBy = totalLength - value.length();
            StringBuilder builder = new StringBuilder(value);

            for (int i = 0; i < padBy && totalLength > builder.length(); i++) {
                builder.insert(0, pad);
            }
            value = builder.toString();

        }
        return value;
    }

    private void populateViewItems(PrsWorkLocations itemToview) {

        prsWorkLocation = itemToview;

        // Wrap DsrDeliverySiteIdentifiers for prsWorkLocation
        siteIdentifierWrapperList = SiteIdentifierWrapperUtility.createDsIdWrapperList(prsWorkLocation.getDsrDeliverySiteIdentifiersList());

        // remove all non-active DsrDeliverySiteIdentifiers for prsWorkLocation since we have them wrapped already
        // and also, to make re-addition for modified/new/unchanged DsrDeliverySiteIdentifiers back to the 
        // DsrDeliverySiteIdentifiersList for prsWorkLocation
        prsWorkLocation.setDsrDeliverySiteIdentifiersList(prsWorkLocation.getDsrDeliverySiteIdentifiersList());

        prsWorkLocationDetails = prsWorkLocation.getPrsWorkLocationDetailsList();
        grsAddresses = prsWorkLocation.getGrsAddressesList();

        // This check is needed to address legacy data to prvent application blowing up on nullpointer exception or something related
        if (prsWorkLocation.getGrsElectronicAddressesList() == null || prsWorkLocation.getGrsElectronicAddressesList().isEmpty()) {

            grsElectronicAddresses = new ArrayList<>();
            grsElectronicAddresses.add(new GrsElectronicAddresses());
            //prsWorkLocation.setGrsElectronicAddressesList(grsElectronicAddresses);
        } else {
            grsElectronicAddresses = prsWorkLocation.getGrsElectronicAddressesList();
        }

        for (GrsTelephones comms : prsWorkLocation.getGrsTelephonesList()) {

            if (comms.getTlcmnctnNmbrTypCd().getCtlNameCode().equalsIgnoreCase(PrsCtTelecomNumberTypesFacadeLocal.TelecomType.TELEPHONE.getValue())) {
                grsTelephone = comms;
            } else if (comms.getTlcmnctnNmbrTypCd().getCtlNameCode().equalsIgnoreCase(PrsCtTelecomNumberTypesFacadeLocal.TelecomType.FAX.getValue())) {
                faxAreaCode = comms.getAreaCodeNum();
                faxNumber = comms.getTelecommunicationNmbrNum();
                faxExtensionNumber = comms.getExtensionNum();
            }
        }

        operatorName = prsWorkLocation.getOperatorNameTxt();
        operatorType = prsWorkLocation.getOperatorTypeId() != null ? prsWorkLocation.getOperatorTypeId().getCtlId().toString() : null;

        selectedProgramArea = prsWorkLocation.getPrsWorkLocationDetailsList().get(0).getDsrSiteProgramCategoriesList().get(0).getProgramCategoryCd().getProgramAreaCd().getProgramAreaCd();
        getCategoriesForArea(selectedProgramArea);

        selectedProgramCategories = new ArrayList<>();
        List<DsrSiteProgramCategories> programCatStaging = prsWorkLocation.getPrsWorkLocationDetailsList().get(0).getDsrSiteProgramCategoriesList();

        for (DsrSiteProgramCategories temp : programCatStaging) {
            selectedProgramCategories.add(temp.getProgramCategoryCd().getProgramCategoryCd());
        }

        // Check needed for legacy data
        if (prsWorkLocation.getPrsWorkLocationDetailsList().get(0).getWorkLocationTypeId() == null) {
            prsWorkLocationDetails.get(0).setWorkLocationTypeId(prsCtWorkLocationPurpsFacade.findDefaultWorkLocationPurps());
            prsWorkLocation.setPrsWorkLocationDetailsList(prsWorkLocationDetails);
        }

        // only used for input pages to provide visual feedback
        dummyHsda = prsWorkLocation.getServiceDeliveryAreaCd().getServiceDeliveryAreaCd();
        dummyHa = prsWorkLocation.getPauthPauthId().getPauthId();

    }

    /**
     * Clears the state of this bean
     *
     * @return
     */
    public String clear() {
        success = false;
        denied = false;
        submitterName = null;
        submitterEmail = null;
        dummyHa = null;
        dummyHsda = null;

//        clearUIState();

        /* set the default country and province */
        PrsCtCountries defaultCountry = prsCtCountriesFacade.findDefaultCountry();
        PrsCtProvState defaultProvince = prsCtProvStateFacade.findDefaultProvince();

        grsAddresses = new ArrayList<>();
        grsAddresses.add(new GrsAddresses());
        grsAddresses.get(0).setCountryId(defaultCountry);
        grsAddresses.get(0).setProvinceId(defaultProvince);
        getProvincesForCountry(defaultCountry.getCtlNameCode());

        /* initialize */
        // If this is an existing site, we don't want to clean out
        // identifier no
        if (prsWorkLocation == null
                || (prsWorkLocation.getDsrDeliverySiteIdentifiersList() != null
                && prsWorkLocation.getDsrDeliverySiteIdentifiersList().get(0).getIdentifierNo() == null)) {

            prsWorkLocation = new PrsWorkLocations();
            dsrDeliverySiteIdentifiers = new ArrayList<>();
            dsrDeliverySiteIdentifiers.add(new DsrDeliverySiteIdentifiers());

        } else {
            Long id = prsWorkLocation.getWlId();
            dsrDeliverySiteIdentifiers = prsWorkLocation.getDsrDeliverySiteIdentifiersList();
            prsWorkLocation = new PrsWorkLocations();
            prsWorkLocation.setWlId(id);

            if (dsrDeliverySiteIdentifiers != null) {
                siteIdentifierWrapperList = SiteIdentifierWrapperUtility.createDsIdWrapperList(dsrDeliverySiteIdentifiers);

                // remove all non-active DsrDeliverySiteIdentifiers for prsWorkLocation since we have them wrapped already
                // and also, to make re-addition for modified/new/unchanged DsrDeliverySiteIdentifiers back to the 
                // DsrDeliverySiteIdentifiersList for prsWorkLocation
                prsWorkLocation.setDsrDeliverySiteIdentifiersList(dsrDeliverySiteIdentifiers);
            }
        }

        prsWorkLocation.setOwnerTypeId(new DsrCtOwnerOperatorTypes());
        prsWorkLocation.setOperatorTypeId(new DsrCtOwnerOperatorTypes());
        prsWorkLocation.setPauthPauthId(new PrsProviders());
        prsWorkLocation.setServiceDeliveryAreaCd(new DsrHlthServsDeliveryAreas());
        prsWorkLocation.setLocalHealthAreaCd(new DsrLocalHealthAreas());

        prsWorkLocationDetails = new ArrayList<>();
        prsWorkLocationDetails.add(new PrsWorkLocationDetails());

        // location type should default to community care
        prsWorkLocationDetails.get(0).setWorkLocationTypeId(prsCtWorkLocationPurpsFacade.findDefaultWorkLocationPurps());

        dsrSourceSystem = new DsrSourceSystems();

        grsElectronicAddresses = new ArrayList<>();
        grsElectronicAddresses.add(new GrsElectronicAddresses());

        grsTelephoneList = new ArrayList<>();
        grsTelephone = new GrsTelephones();
        grsFaxNumber = new GrsTelephones();
        faxAreaCode = "";
        faxNumber = "";
        faxExtensionNumber = "";
        prsInformationRoute = new PrsInformationRoutes();

        selectedProgramArea = null;
        selectedProgramCategories = null;
        categoryList.clear();

        setOperatorName("");
        setOperatorType(null);

        return null;
    }

    private void clearUIState() {

        UIViewRoot view = FacesContext.getCurrentInstance().getViewRoot();
        UIComponent comp = view.findComponent("viewDeliverySiteFormAdmin:updateAndApproveSite");
        List<UIComponent> comps = comp != null ? comp.getChildren() : null;
        List<UIComponent> fields;

        if (comps != null) {
            for (UIComponent c : comps) {
                if (c instanceof Panel) {

                    fields = c.getChildren();
                    for (UIComponent field : fields) {

                        if (field instanceof HtmlInputText) {
                            ((HtmlInputText) field).setSubmittedValue(null);
                            ((HtmlInputText) field).setValue(null);
                        } else if (field instanceof HtmlSelectManyListbox) {
                            ((HtmlSelectManyListbox) field).setSubmittedValue(null);
                            ((HtmlSelectManyListbox) field).setValue(null);
                        } else if (field instanceof HtmlSelectOneMenu) {
                            ((HtmlSelectOneMenu) field).setSubmittedValue(null);
                            ((HtmlSelectOneMenu) field).setValue(null);
                        } else if (field instanceof Calendar) {
                            ((Calendar) field).setSubmittedValue(null);
                            ((Calendar) field).setValue(null);
                        }

                    }
                }
            }
        }
    }

    public String cancelUpdate() {

        isView = true;

        return null;
    }

    /**
     * Nullifys any child objects which don't have valid PKs set
     */
    private void nullify() {
//        if (prsWorkLocation.getPauthPauthId() != null && prsWorkLocation.getPauthPauthId().getPauthId() == null) {
//            prsWorkLocation.setPauthPauthId(null);
//        }
        if (prsWorkLocation.getOwnerTypeId() != null && prsWorkLocation.getOwnerTypeId().getCtlId() == null) {
            prsWorkLocation.setOwnerTypeId(null);
        }
        if (prsWorkLocation.getStatusId() != null && prsWorkLocation.getStatusId().getCtlId() == null) {
            prsWorkLocation.setStatusId(null);
        }
        if (prsWorkLocation.getOperatorTypeId() != null && prsWorkLocation.getOperatorTypeId().getCtlId() == null) {
            prsWorkLocation.setOperatorTypeId(null);
        }
    }

    public boolean checkOptionalAndDateFields() {
        FacesMessage errMsg;

        if (faxAreaCode != null && faxNumber != null) {
            if (faxAreaCode.isEmpty() && !faxNumber.isEmpty()) {
                errMsg = new FacesMessage("You entered a fax number, but no fax area code.");
                errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, errMsg);
                return false;
            } else if (!faxAreaCode.isEmpty() && faxNumber.isEmpty()) {
                errMsg = new FacesMessage("You entered a fax area code, but no fax number.");
                errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, errMsg);
                return false;
            }

        }

        if (operatorName != null && operatorName.trim().length() > 0 && (getOperatorType() == null)) {
            errMsg = new FacesMessage("You entered an operator name, but did not choose an operator type.");
            errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
            return false;
        } else if ((operatorName == null || operatorName.trim().length() == 0) && (getOperatorType() != null)) {
            errMsg = new FacesMessage("You chose an operator type, but did not enter an operator name.");
            errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
            return false;
        }

        if (prsWorkLocationDetails.get(0).getEffectiveEndDate() != null) {
            if (prsWorkLocationDetails.get(0).getEffectiveStartDate().after(prsWorkLocationDetails.get(0).getEffectiveEndDate())) {
                errMsg = new FacesMessage("Start date cannot be after end date.");
                errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, errMsg);
                return false;
            }
        }

        return true;
    }

    private List<DsrSiteProgramCategories> populatePrgCategories(DsrWorkLocationsStaging pendingRequest) {
        List<DsrSiteProgramCategories> list = new ArrayList<>();

        if (pendingRequest == null) {
            for (String category : selectedProgramCategories) {

                DsrSiteProgramCategories dsrSiteProgramCategory = new DsrSiteProgramCategories();

                DsrProgramAreas prgArea = new DsrProgramAreas(selectedProgramArea);
                DsrProgramCategories dsrPrgCat = new DsrProgramCategories(category);
                dsrPrgCat.setProgramAreaCd(prgArea);

                dsrSiteProgramCategory.setProgramCategoryCd(dsrPrgCat);
                dsrSiteProgramCategory.setWldId(prsWorkLocationDetails.get(0));

                list.add(dsrSiteProgramCategory);
            }

        } else {

            List<DsrProgramCategoryStaging> programCatStaging = pendingRequest.getDsrProgramCategoryStagingList();

            for (DsrProgramCategoryStaging temp : programCatStaging) {
                selectedProgramCategories.add(temp.getProgramCategoryCd().getProgramCategoryCd());

                DsrSiteProgramCategories dsrSiteProgramCategory = new DsrSiteProgramCategories();
                dsrSiteProgramCategory.setProgramCategoryCd(temp.getProgramCategoryCd());

                list.add(dsrSiteProgramCategory);

            }
        }

        return list;
    }

    private void setOptionalFields() {

        /* set fax entry */
        if (faxNumber != null && !faxNumber.trim().isEmpty()
                && faxAreaCode != null && !faxAreaCode.trim().isEmpty()) {

            // If we are making a new entry, then there wouldn't be an existing fax number, 
            // otherwise we have to check to prevent adding a duplicate fax number
            if (prsWorkLocation.getGrsTelephonesList() != null && prsWorkLocation.getGrsTelephonesList().size() < 2) {
                grsFaxNumber.setAreaCodeNum(faxAreaCode);
                grsFaxNumber.setTelecommunicationNmbrNum(faxNumber);
                grsFaxNumber.setExtensionNum(faxExtensionNumber);
                grsFaxNumber.setCmnctnPrpsTypCd(prsCtCommunPurposeTypesFacade.findbyContactType(PrsCtCommunPurposeTypesFacadeLocal.ContactType.BUSINESS_CONTACT));
                grsFaxNumber.setTlcmnctnNmbrTypCd(prsCtTelecomNumberTypesFacad.findByTelecomType(PrsCtTelecomNumberTypesFacadeLocal.TelecomType.FAX));
                grsFaxNumber.setGenerationNum(1);
                grsFaxNumber.setEffectiveStartDate(prsWorkLocationDetails.get(0).getEffectiveStartDate());
                grsFaxNumber.setWlWlId(prsWorkLocation);
                prsWorkLocation.getGrsTelephonesList().add(grsFaxNumber);
            } else {
                for (GrsTelephones fax : prsWorkLocation.getGrsTelephonesList()) {
                    if (fax.getTlcmnctnNmbrTypCd().getCtlNameCode().equalsIgnoreCase(PrsCtTelecomNumberTypesFacadeLocal.TelecomType.FAX.getValue())) {
                        fax.setAreaCodeNum(faxAreaCode);
                        fax.setTelecommunicationNmbrNum(faxNumber);
                        fax.setExtensionNum(faxExtensionNumber);
                        break;
                    }
                }
            }
        } else {
            // If fax is removed during site update, then we have to remove it from prsWorklocation object as well
            if (prsWorkLocation.getGrsTelephonesList() != null && prsWorkLocation.getGrsTelephonesList().size() > 1) {
                int ndxToRemove = -1;
                for (int i = 0; i < prsWorkLocation.getGrsTelephonesList().size(); i++) {
                    if (prsWorkLocation.getGrsTelephonesList().get(i).getTlcmnctnNmbrTypCd().getCtlNameCode().equalsIgnoreCase(PrsCtTelecomNumberTypesFacadeLocal.TelecomType.FAX.getValue())) {
                        prsWorkLocation.getGrsTelephonesList().set(i, null);
                        ndxToRemove = i;
                    }
                }

                prsWorkLocation.getGrsTelephonesList().remove(ndxToRemove);
            }
        }

        /* set operator entry */
        prsWorkLocation.setOperatorNameTxt(operatorName);
        if (operatorType != null) {
            prsWorkLocation.setOperatorTypeId(new DsrCtOwnerOperatorTypes());
            prsWorkLocation.getOperatorTypeId().setCtlId(Long.valueOf(operatorType));
        } else {
            prsWorkLocation.setOperatorTypeId(null);
        }

        /* set e-mail entry */
        if (grsElectronicAddresses != null && !grsElectronicAddresses.isEmpty() && grsElectronicAddresses.get(0).getElectronicAddressTxt() != null && !grsElectronicAddresses.get(0).getElectronicAddressTxt().isEmpty()) {

            grsElectronicAddresses.get(0).setCmnctnPrpsTypCd(prsCtCommunPurposeTypesFacade.findbyContactType(PrsCtCommunPurposeTypesFacadeLocal.ContactType.BUSINESS_CONTACT));
            grsElectronicAddresses.get(0).setElectronicAddressTypeCode(prsCtElectronicAddrTypesFacade.findByElectronicCommType(PrsCtElectronicAddrTypesFacadeLocal.ElectronicCommType.EMAIL));
            grsElectronicAddresses.get(0).setWlWlId(prsWorkLocation);
            grsElectronicAddresses.get(0).setGenerationNum(1);
            grsElectronicAddresses.get(0).setEffectiveStartDate(prsWorkLocationDetails.get(0).getEffectiveStartDate());
            prsWorkLocation.setGrsElectronicAddressesList(grsElectronicAddresses);

        } else if (prsWorkLocation.getGrsElectronicAddressesList() != null && !prsWorkLocation.getGrsElectronicAddressesList().isEmpty()) {
            // this condition helps to deal with legacy data where there no exiating email address
            prsWorkLocation.getGrsElectronicAddressesList().clear();
            grsElectronicAddresses = prsWorkLocation.getGrsElectronicAddressesList();
        }
    }

    private void resetOptionalFieldsIfNecessary() {

        /* set e-mail entry */
        if (grsElectronicAddresses != null && grsElectronicAddresses.isEmpty()) {

            grsElectronicAddresses.add(new GrsElectronicAddresses());
            prsWorkLocation.setGrsElectronicAddressesList(grsElectronicAddresses);
        }
    }

    public String search() {
        FacesMessage errMsg;
        searchSuccess = false;

        if (selectedRecordsStatus != null) {
            selectedRecordsStatus.remove("-222");
        }

        if (selectedOwnersipType != null) {
            selectedOwnersipType.remove("-222");
        }

        if (selectedHsdas != null) {
            selectedHsdas.remove("");
        }

        if (selectedLhas != null) {
            selectedLhas.remove("");
        }

        if (selectedProgramCategoriesForSearch != null) {
            selectedProgramCategoriesForSearch.remove("");
        }

        if ((identifierSource == null)
                && (dsId.trim().equals(""))
                && (siteName.trim().equals(""))
                && (cityForSearch.trim().equals(""))
                && (selectedProviderOrganization == null)
                && (selectedProgramAreaForSearch == null)
                && (selectedRecordsStatus.isEmpty())
                && (selectedHsdas.isEmpty())
                && (selectedLhas.isEmpty())
                && (selectedOwnersipType.isEmpty())
                && (selectedProgramCategoriesForSearch.isEmpty())) {
            errMsg = new FacesMessage("You must supply a value in at least one search field.");
            errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
            return null;
        }

        //Snow
        if ((identifierSource != null)
                && (dsId.trim().equals(""))
                && (siteName.trim().equals(""))
                && (cityForSearch.trim().equals(""))
                && (selectedProviderOrganization == null)
                && (selectedProgramAreaForSearch == null)
                && (selectedRecordsStatus.isEmpty())
                && (selectedHsdas.isEmpty())
                && (selectedLhas.isEmpty())
                && (selectedOwnersipType.isEmpty())
                && (selectedProgramCategoriesForSearch.isEmpty())) {
            errMsg = new FacesMessage("Search by Identifier Source only is not allowed.");
            errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
            return null;

        }

        searchResult = prsWorkLocationsFacade.findAllMatchingSites(identifierSource, (dsId != null ? dsId.trim() : dsId), (siteName != null ? siteName.trim() : siteName), (cityForSearch != null ? cityForSearch.trim() : cityForSearch), selectedProviderOrganization, selectedProgramAreaForSearch, selectedRecordsStatus, selectedHsdas, selectedLhas, selectedOwnersipType, selectedProgramCategoriesForSearch);
        searchSuccess = searchResult.isEmpty();

        return null;
    }

    public String clearSearch() {

        dsId = "";
        siteName = "";
        identifierSource = "";
        cityForSearch = "";
        selectedProviderOrganization = 0L;
        selectedProgramCategoriesForSearch = null;
        selectedHsdas = null;
        selectedLhas = null;
        selectedProgramAreaForSearch = "";
        selectedRecordsStatus = null;
        selectedOwnersipType = null;
        searchResult.clear();
        searchSuccess = false;
        return null;
    }

    public String enableEditing() {
        isView = false;
        success = false;

        // itemToview will not be null if we are trying to view a site from the search page
        PrsWorkLocations itemToview = (PrsWorkLocations) FacesContext.getCurrentInstance().getExternalContext().getRequestMap().get("displayObject");

        if (itemToview != null) {

            Long tempwlId = itemToview.getWlId();
            prsWorkLocation = prsWorkLocationsFacade.find(tempwlId);

            if (itemToview.getOwnerTypeId() == null) {
                itemToview.setOwnerTypeId(new DsrCtOwnerOperatorTypes());
            }
            populateViewItems(itemToview);
        }

        return null;
    }

    public List<PrsWorkLocations> getSearchResult() {
        return searchResult;
    }

    public List getViewExport() {

        List<String[]> siteData = new ArrayList<>();

        if (action == null) {
            return siteData;
        }

        int size = 2;
        String tab = "\t";
        String space = " ";

        String[] temp = new String[2];
        temp[0] = getResourceValue("AddDeliverySite.site.location");
        temp[1] = space;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("UpdateDeliverySite.site.location.ds.id");

        if (prsWorkLocation.getWlId() == null && (action.equals("existingRequest") || action.equals("pendingRequest"))) {
            temp[1] = "Unassigned";
        } else {
            temp[1] = prsWorkLocation.getDsrDeliverySiteIdentifiersList().get(0).getIdentifierNo();
        }
        siteData.add(temp);

        if (prsWorkLocation.getWlId() != null) {
            temp = new String[size];
            temp[0] = tab + getResourceValue("UpdateDeliverySite.site.location.status");
            temp[1] = prsWorkLocation.getStatusId().getCtlDescTxt();
            siteData.add(temp);
        }

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.site.location.name");
        temp[1] = prsWorkLocationDetails.get(0).getWorkLocationNameTxt();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("ViewDeliverySite.site.location.address");
        StringBuilder builder = new StringBuilder();
        builder.append(padWithSpaceIfNoNull(grsAddresses.get(0).getAddressLine1Txt()))
                .append(padWithSpaceIfNoNull(grsAddresses.get(0).getAddressLine2Txt()))
                .append(padWithSpaceIfNoNull(grsAddresses.get(0).getAddressLine3Txt()))
                .append(padWithSpaceIfNoNull(grsAddresses.get(0).getAddressLine4Txt()))
                .append(padWithSpaceIfNoNull(grsAddresses.get(0).getCityTxt()))
                .append(padWithSpaceIfNoNull(grsAddresses.get(0).getProvinceId().getCtlDescTxt()))
                .append(padWithSpaceIfNoNull(grsAddresses.get(0).getCountryId().getCtlDescTxt()))
                .append(grsAddresses.get(0).getPostalCodeOrZipTxt());

        temp[1] = builder.toString();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.site.location.contact.name");
        temp[1] = prsWorkLocation.getContactName();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.site.location.telephone");
        builder.delete(0, builder.length());
        builder.append("(").append(grsTelephone.getAreaCodeNum()).append(")")
                .append(grsTelephone.getTelecommunicationNmbrNum()).append(" Ext: ")
                .append(padWithSpaceIfNoNull(grsTelephone.getExtensionNum()));

        temp[1] = builder.toString();

        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.site.location.fax");
        if (faxNumber != null && !faxNumber.trim().isEmpty()) {
            builder.delete(0, builder.length());
            builder.append("(").append(faxAreaCode).append(")")
                    .append(faxNumber).append(" Ext: ")
                    .append(padWithSpaceIfNoNull(faxExtensionNumber));

            temp[1] = builder.toString();
        }
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.site.location.email");
        temp[1] = grsElectronicAddresses.isEmpty() ? space : grsElectronicAddresses.get(0).getElectronicAddressTxt();
        siteData.add(temp);

        DateFormat df = DateFormat.getDateInstance(DateFormat.MEDIUM);
        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.site.location.startdate");
        temp[1] = df.format(prsWorkLocationDetails.get(0).getEffectiveStartDate());
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.site.location.enddate");
        temp[1] = prsWorkLocationDetails.get(0).getEffectiveEndDate() != null ? df.format(prsWorkLocationDetails.get(0).getEffectiveEndDate()) : space;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = space;
        temp[1] = space;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = getResourceValue("AddDeliverySite.site.alternateId");
        temp[1] = space;
        siteData.add(temp);

        for (SiteIdentifierWrapper w : siteIdentifierWrapperList) {

            if (w.getDsId().getActiveYn().equalsIgnoreCase(Constants.NO_FLAG)) {
                temp = new String[size];
                temp[0] = tab + w.getDsId().getSourceSystemCd().getSourceSystemCd();
                temp[1] = w.getDsId().getIdentifierNo();
                siteData.add(temp);
            }
        }

        temp = new String[size];
        temp[0] = space;
        temp[1] = space;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = getResourceValue("AddDeliverySite.ownership.information");
        temp[1] = space;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.ownership.information.legal.owner");
        temp[1] = prsWorkLocation.getOwnerNameTxt();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.ownership.information.legal.owner.type");
        temp[1] = prsWorkLocation.getOwnerTypeId() != null ? prsWorkLocation.getOwnerTypeId().getCtlDescTxt() : space;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.ownership.information.legal.operator");
        temp[1] = operatorName;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.ownership.information.legal.operator.type");
        temp[1] = prsWorkLocation.getOperatorTypeId() != null ? prsWorkLocation.getOperatorTypeId().getCtlDescTxt() : space;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = space;
        temp[1] = space;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = getResourceValue("AddDeliverySite.additional.information");
        temp[1] = space;
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.additional.information.program.area");
        temp[1] = prsWorkLocationDetails.get(0).getDsrSiteProgramCategoriesList().get(0).getProgramCategoryCd().getProgramAreaCd().getProgramAreaDsc();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.additional.information.program.category");
        builder.delete(0, builder.length());
        for (DsrSiteProgramCategories c : prsWorkLocationDetails.get(0).getDsrSiteProgramCategoriesList()) {
            builder.append(c.getProgramCategoryCd().getProgramCategoryDsc()).append(";").append(space);
        }

        temp[1] = builder.delete(builder.length() - 2, builder.length()).toString();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.additional.information.program.campus");
        temp[1] = prsWorkLocation.getCampusOfCareTxt();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.additional.information.lha");
        temp[1] = prsWorkLocation.getLocalHealthAreaCd().getLocalHealthAreaDsc();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.additional.information.hsda");
        temp[1] = prsWorkLocation.getServiceDeliveryAreaCd().getServiceDeliveryAreaDsc();
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.additional.information.provider.organization");
        temp[1] = prsWorkLocation.getPauthPauthId().getGrsOrgNamesList() != null && !prsWorkLocation.getPauthPauthId().getGrsOrgNamesList().isEmpty() ? prsWorkLocation.getPauthPauthId().getGrsOrgNamesList().get(0).getOrgnztnLongNameTxt() : "";
        siteData.add(temp);

        temp = new String[size];
        temp[0] = tab + getResourceValue("AddDeliverySite.additional.information.notes");
        temp[1] = prsWorkLocation.getNotes();
        siteData.add(temp);

        return siteData;
    }

    public boolean isIsView() {
        return isView;
    }

    public void setIsView(boolean isView) {
        this.isView = isView;
    }

    /**
     * @return the prsWorkLocation
     */
    public PrsWorkLocations getPrsWorkLocation() {
        return prsWorkLocation;
    }

    /**
     * @param prsWorkLocation the prsWorkLocation to set
     */
    public void setPrsWorkLocation(PrsWorkLocations prsWorkLocation) {
        this.prsWorkLocation = prsWorkLocation;
    }

    /**
     * @return the prsWorkLocationDetails
     */
    public List<PrsWorkLocationDetails> getPrsWorkLocationDetails() {
        return prsWorkLocationDetails;
    }

    /**
     * @param prsWorkLocationDetail the prsWorkLocationDetails to set
     */
    public void setPrsWorkLocationDetails(List<PrsWorkLocationDetails> prsWorkLocationDetails) {
        this.prsWorkLocationDetails = prsWorkLocationDetails;
    }

    /**
     * @return the dsrDeliverySiteIdentifier
     */
    public List<DsrDeliverySiteIdentifiers> getDsrDeliverySiteIdentifiers() {
        return dsrDeliverySiteIdentifiers;
    }

    /**
     * @param dsrDeliverySiteIdentifier the dsrDeliverySiteIdentifier to set
     */
    public void setDsrDeliverySiteIdentifier(List<DsrDeliverySiteIdentifiers> dsrDeliverySiteIdentifiers) {
        this.dsrDeliverySiteIdentifiers = dsrDeliverySiteIdentifiers;
    }

    /**
     * @return the grsAddresses
     */
    public List<GrsAddresses> getGrsAddresses() {
        return grsAddresses;
    }

    /**
     * @param grsAddresses the grsAddress to set
     */
    public void setGrsAddresses(List<GrsAddresses> grsAddresses) {
        this.grsAddresses = grsAddresses;
    }

    /**
     * @return the grsElectronicAddresses
     */
    public List<GrsElectronicAddresses> getGrsElectronicAddresses() {
        return grsElectronicAddresses;
    }

    /**
     * @param grsElectronicAddresses the grsElectronicAddress to set
     */
    public void setGrsElectronicAddress(List<GrsElectronicAddresses> grsElectronicAddresses) {
        this.grsElectronicAddresses = grsElectronicAddresses;
    }

    /**
     * @return the grsTelephone
     */
    public GrsTelephones getGrsTelephone() {
        return grsTelephone;
    }

    /**
     * @param grsTelephone the grsTelephone to set
     */
    public void setGrsTelephone(GrsTelephones grsTelephone) {
        this.grsTelephone = grsTelephone;
    }

    public String getFaxAreaCode() {
        return faxAreaCode;
    }

    public void setFaxAreaCode(String faxAreaCode) {
        this.faxAreaCode = faxAreaCode;
    }

    public String getFaxNumber() {
        return faxNumber;
    }

    public void setFaxNumber(String faxNumber) {
        this.faxNumber = faxNumber;
    }

    public String getFaxExtensionNumber() {
        return faxExtensionNumber;
    }

    public void setFaxExtensionNumber(String faxExtensionNumber) {
        this.faxExtensionNumber = faxExtensionNumber;
    }

//    /**
//     * @return the grsFaxNumber
//     */
//    public GrsTelephone getGrsFaxNumber() {
//        return grsFaxNumber;
//    }
//
//    /**
//     * @param grsFaxNumber the grsFaxNumber to set
//     */
//    public void setGrsFaxNumber(GrsTelephone grsFaxNumber) {
//        this.grsFaxNumber = grsFaxNumber;
//    }
    /**
     * @return the prsInformationRoute
     */
    public PrsInformationRoutes getPrsInformationRoute() {
        return prsInformationRoute;
    }

    /**
     * @param prsInformationRoute the prsInformationRoute to set
     */
    public void setPrsInformationRoute(PrsInformationRoutes prsInformationRoute) {
        this.prsInformationRoute = prsInformationRoute;
    }

    public Droplists getDropList() {
        return dropList;
    }

    public void setDropList(Droplists dropList) {
        this.dropList = dropList;
    }

    public String getSelectedProgramArea() {
        return selectedProgramArea;
    }

    public void setSelectedProgramArea(String selectedProgramArea) {
        this.selectedProgramArea = selectedProgramArea;
    }

    public List<String> getSelectedProgramCategories() {
        return selectedProgramCategories;
    }

    public void setSelectedProgramCategories(List<String> selectedProgramCategories) {
        this.selectedProgramCategories = selectedProgramCategories;
    }

    public List<SelectItem> getProvinceList() {
        return provinceList;
    }

    public List<SelectItem> getCategoryList() {
        return categoryList;
    }

    /**
     * @param countryId
     */
    private void getProvincesForCountry(String countryCd) {
        provinceList = dropList.getAllProvincesInCountry(countryCd);
    }

    public String getDsId() {
        return dsId;
    }

    public void setDsId(String dsId) {
        this.dsId = dsId;
    }

    public String getSiteName() {
        return siteName;
    }

    public void setSiteName(String siteName) {
        this.siteName = siteName;
    }

    public String getIdentifierSource() {
        return identifierSource;
    }

    public void setIdentifierSource(String identifierSource) {
        this.identifierSource = identifierSource;
    }

    public Long getSelectedProviderOrganization() {
        return selectedProviderOrganization;
    }

    public void setSelectedProviderOrganization(Long selectedProviderOrganization) {
        this.selectedProviderOrganization = selectedProviderOrganization;
    }

    public String getSelectedProgramAreaForSearch() {
        return selectedProgramAreaForSearch;
    }

    public void setSelectedProgramAreaForSearch(String selectedProgramAreaForSearch) {
        this.selectedProgramAreaForSearch = selectedProgramAreaForSearch;
    }

    public List<Long> getSelectedRecordsStatus() {
        return selectedRecordsStatus;
    }

    public void setSelectedRecordsStatus(List<Long> selectedRecordsStatus) {
        this.selectedRecordsStatus = selectedRecordsStatus;
    }

    public String getCityForSearch() {
        return cityForSearch;
    }

    public void setCityForSearch(String cityForSearch) {
        this.cityForSearch = cityForSearch;
    }

    public List<String> getSelectedProgramCategoriesForSearch() {
        return selectedProgramCategoriesForSearch;
    }

    public void setSelectedProgramCategoriesForSearch(List<String> selectedProgramCategoriesForSearch) {
        this.selectedProgramCategoriesForSearch = selectedProgramCategoriesForSearch;
    }

    public List<Long> getSelectedOwnersipType() {
        return selectedOwnersipType;
    }

    public void setSelectedOwnersipType(List<Long> selectedOwnersipType) {
        this.selectedOwnersipType = selectedOwnersipType;
    }

    public List<String> getSelectedHsdas() {
        return selectedHsdas;
    }

    public void setSelectedHsdas(List<String> selectedHsdas) {
        this.selectedHsdas = selectedHsdas;
    }

    public List<String> getSelectedLhas() {
        return selectedLhas;
    }

    public void setSelectedLhas(List<String> selectedLhas) {
        this.selectedLhas = selectedLhas;
    }

    /**
     * @param area
     */
    private void getCategoriesForArea(String area) {
        categoryList = dropList.getAllCategoriesWithCodeForArea(area);
    }

    /**
     * @param event
     */
    public void updateProvince(ValueChangeEvent event) {
        getProvincesForCountry(event.getNewValue().toString());
    }

    /**
     * @param country code
     */
    public void updateProvinceState(String countryCode) {
        getProvincesForCountry(countryCode);
    }

    /**
     *
     * @param event
     */
    public void updateCategory(ValueChangeEvent event) {
        getCategoriesForArea(event.getNewValue().toString());
    }

    public void updateHsdaAndProvider(ValueChangeEvent event) {

        if (!event.getNewValue().equals("")) {
            DsrHlthServsDeliveryAreas dsrHealthDeliveryServicesArea = dsrLocalHealthAreaFacade.getHsdaForLocalHealthArea(event.getNewValue().toString());

            prsWorkLocation.getServiceDeliveryAreaCd().setServiceDeliveryAreaCd(dsrHealthDeliveryServicesArea.getServiceDeliveryAreaCd());
            prsWorkLocation.getPauthPauthId().setPauthId(dsrHealthDeliveryServicesArea.getPauthId().getPauthId());
            dummyHsda = dsrHealthDeliveryServicesArea.getServiceDeliveryAreaCd();
            dummyHa = dsrHealthDeliveryServicesArea.getPauthId().getPauthId();

        } else {
            prsWorkLocation.getLocalHealthAreaCd().setLocalHealthAreaCd(null);
            prsWorkLocation.getServiceDeliveryAreaCd().setServiceDeliveryAreaCd("");
            prsWorkLocation.getPauthPauthId().setPauthId(null);
            dummyHsda = "";
            dummyHa = null;
        }

    }

    private boolean updateSiteCommon() {

        if (checkOptionalAndDateFields() == false) {
            return false;
        }

        if (!isLHAValid()) {
            return false;
        }

        /* create the program category entries */
        prsWorkLocationDetails.get(0).setDsrSiteProgramCategoriesList(populatePrgCategories(null));
        setOptionalFields();

        // reset OneSide Entities in case there are changes.
        PrsProviders provider = new PrsProviders();
        provider.setPauthId(prsWorkLocation.getPauthPauthId().getPauthId());
        prsWorkLocation.setPauthPauthId(provider);

        DsrHlthServsDeliveryAreas dsrHealthDeliveryServicesArea = new DsrHlthServsDeliveryAreas();
        dsrHealthDeliveryServicesArea.setServiceDeliveryAreaCd(prsWorkLocation.getServiceDeliveryAreaCd().getServiceDeliveryAreaCd());
        prsWorkLocation.setServiceDeliveryAreaCd(dsrHealthDeliveryServicesArea);

        DsrLocalHealthAreas dsrLocalHealthArea = new DsrLocalHealthAreas();
        dsrLocalHealthArea.setLocalHealthAreaCd(prsWorkLocation.getLocalHealthAreaCd().getLocalHealthAreaCd());
        prsWorkLocation.setLocalHealthAreaCd(dsrLocalHealthArea);

        DsrCtStatus temp = new DsrCtStatus();
        temp.setCtlId(prsWorkLocation.getStatusId().getCtlId());
        prsWorkLocation.setStatusId(temp);

        DsrCtOwnerOperatorTypes dsrCtOwnerOperatorTypes = new DsrCtOwnerOperatorTypes();
        dsrCtOwnerOperatorTypes.setCtlId(prsWorkLocation.getOwnerTypeId().getCtlId());
        prsWorkLocation.setOwnerTypeId(dsrCtOwnerOperatorTypes);

        PrsCtWorkLocationPurps prsCtWorkLocationPurps = new PrsCtWorkLocationPurps();
        prsCtWorkLocationPurps.setCtlId(prsWorkLocationDetails.get(0).getWorkLocationTypeId().getCtlId());
        prsWorkLocationDetails.get(0).setWorkLocationTypeId(prsCtWorkLocationPurps);

        // Remove existing CCIMS and Base20 identifiers if Program area is not "Home and Care Community"
        if (!selectedProgramArea.equalsIgnoreCase(Constants.HCC_PROGRAM_AREA_CODE)) {
            for (int i = siteIdentifierWrapperList.size() - 1; i >= 0; i--) {
                String sourceSystem = siteIdentifierWrapperList.get(i).getDsId().getSourceSystemCd().getSourceSystemCd();
                if (sourceSystem.equals(Constants.CCIMS_SOURCE_SYSTEM_CODE) || sourceSystem.equals(Constants.BASE_20_SOURCE_SYSTEM_CODE)) {
                    siteIdentifierWrapperList.remove(i);
                }
            }
            for (int i = 0; i < siteIdentifierWrapperList.size(); i++) {
                siteIdentifierWrapperList.get(i).setPosition(i);
            }
        }
        // Remove existing CPIM identifier if Program area is not "Mental Health and Substance Use"
        if (!selectedProgramArea.equalsIgnoreCase(Constants.MH_PROGRAM_AREA_CODE)) {
            for (int i = siteIdentifierWrapperList.size() - 1; i >= 0; i--) {
                String sourceSystem = siteIdentifierWrapperList.get(i).getDsId().getSourceSystemCd().getSourceSystemCd();
                if (sourceSystem.equals(Constants.CPIM_SOURCE_SYSTEM_CODE)) {
                    siteIdentifierWrapperList.remove(i);
                }
            }
            for (int i = 0; i < siteIdentifierWrapperList.size(); i++) {
                siteIdentifierWrapperList.get(i).setPosition(i);
            }
        }

        // unwrap wrapped DsrDeliverySiteIdentifier
        List<DsrDeliverySiteIdentifiers> siteIdentifiers = unwrapSiteIdentifiers();

        // remove all non-active DsrDeliverySiteIdentifiers for prsWorkLocation since we have them wrapped already
        // and also, to make re-addition for modified/new/unchanged DsrDeliverySiteIdentifiers back to the 
        // DsrDeliverySiteIdentifiersList for prsWorkLocation
        prsWorkLocation.getDsrDeliverySiteIdentifiersList().clear();

        // Create CCIMS and Base20 identifiers if absent and Program area is "Home and Care Community"
        if (selectedProgramArea.equalsIgnoreCase(Constants.HCC_PROGRAM_AREA_CODE)) {
            DsrDeliverySiteIdentifiers ccims = null;
            for (int i = siteIdentifiers.size() - 1; i >= 0; i--) {
                String sourceSystem = siteIdentifiers.get(i).getSourceSystemCd().getSourceSystemCd();
                if (sourceSystem.equals(Constants.CCIMS_SOURCE_SYSTEM_CODE)) {
                    ccims = siteIdentifiers.get(i);
                    break;
                }
            }

            if (ccims == null) {
                ccims = new DsrDeliverySiteIdentifiers();
                ccims.setWlWlId(prsWorkLocation);
                ccims.setSourceSystemCd(new DsrSourceSystems(Constants.CCIMS_SOURCE_SYSTEM_CODE));
                ccims.setActiveYn(Constants.NO_FLAG);
                ccims.setIdentifierNo(dsrDeliverySiteIdentifierFacade.generateIdentifierNumberForLegacyProgamAreas(Constants.HCC_PROGRAM_AREA_CODE));
                siteIdentifiers.add(ccims);
            }

            DsrDeliverySiteIdentifiers base20 = null;
            for (int i = siteIdentifiers.size() - 1; i >= 0; i--) {
                String sourceSystem = siteIdentifiers.get(i).getSourceSystemCd().getSourceSystemCd();
                if (sourceSystem.equals(Constants.BASE_20_SOURCE_SYSTEM_CODE)) {
                    base20 = siteIdentifiers.get(i);
                    break;
                }
            }

            if (base20 == null) {
                base20 = new DsrDeliverySiteIdentifiers();
                base20.setWlWlId(prsWorkLocation);
                base20.setSourceSystemCd(new DsrSourceSystems(Constants.BASE_20_SOURCE_SYSTEM_CODE));
                base20.setActiveYn(Constants.NO_FLAG);
                base20.setIdentifierNo(padBeforeIfRequired(Integer.toString(Integer.parseInt(ccims.getIdentifierNo()), Constants.BASE_20).toUpperCase(), "0", Constants.BASE_20_LENTGH));
                siteIdentifiers.add(base20);
            }
        } // Create CPIM identifier if absent and Program area is "Mental Health and Substance Use"
        else if (selectedProgramArea.equalsIgnoreCase(Constants.MH_PROGRAM_AREA_CODE)) {
            DsrDeliverySiteIdentifiers cpim = null;
            for (int i = siteIdentifiers.size() - 1; i >= 0; i--) {
                String sourceSystem = siteIdentifiers.get(i).getSourceSystemCd().getSourceSystemCd();
                if (sourceSystem.equals(Constants.CPIM_SOURCE_SYSTEM_CODE)) {
                    cpim = siteIdentifiers.get(i);
                    break;
                }
            }

            if (cpim == null) {
                cpim = new DsrDeliverySiteIdentifiers();
                cpim.setWlWlId(prsWorkLocation);
                cpim.setSourceSystemCd(new DsrSourceSystems(Constants.CPIM_SOURCE_SYSTEM_CODE));
                cpim.setActiveYn(Constants.NO_FLAG);
                cpim.setIdentifierNo(dsrDeliverySiteIdentifierFacade.generateIdentifierNumberForLegacyProgamAreas(Constants.MH_PROGRAM_AREA_CODE));
                siteIdentifiers.add(cpim);
            }
        }

        // Add new DsrDeliverySiteIdentifier to DsrDeliverySiteIdentifierList for prsWorkLocation
        for (DsrDeliverySiteIdentifiers s : siteIdentifiers) {

            if (s.getWlWlId() == null) {
                s.setWlWlId(prsWorkLocation);
            }

            prsWorkLocation.getDsrDeliverySiteIdentifiersList().add(s);
        }

        // We need to see if there is a need to update WorkLocationChid since
        // it is possible for a LHA change to result in a provider change
        // If there is change then generate a new WorkLocationChid based on the
        // new Provider value
        PrsWorkLocations original = prsWorkLocationsFacade.find(prsWorkLocation.getWlId());
        if (!original.getPauthPauthId().getPauthId().equals(prsWorkLocation.getPauthPauthId().getPauthId())) {
            prsWorkLocation.setWorkLocationChid(prsWorkLocationsFacade.generateWorkLocationChid(prsWorkLocation.getPauthPauthId().getPauthId()));
        }

        // prsWorkLocation.setGrsTelephonesList(grsTelephoneList);
        prsWorkLocationsFacade.edit(prsWorkLocation);

        // Ensure siteIdentifierWrapperList is updated with any auto generated alternate identifier
        siteIdentifierWrapperList = SiteIdentifierWrapperUtility.createDsIdWrapperList(prsWorkLocation.getDsrDeliverySiteIdentifiersList());

        // Change wrapped Ds ID status to read since we will go 
        // to view page after update
        updateWrappedSiteIdentifierStatus(SiteIdentifierWrapper.Status.READ);

        // a copy of the newly update entity is needed to
        // so that all the fields needed for display are 
        // available
        prsWorkLocation = prsWorkLocationsFacade.find(prsWorkLocation.getWlId());
        prsWorkLocationDetails = prsWorkLocation.getPrsWorkLocationDetailsList();

        dummyHsda = prsWorkLocation.getServiceDeliveryAreaCd().getServiceDeliveryAreaCd();
        dummyHa = prsWorkLocation.getPauthPauthId().getPauthId();

        //Ensure missing optional fields are reset to avoid nullpointer problem with views
        resetOptionalFieldsIfNecessary();

        actionResponse = "Site updated successfully ";

        return true;
    }

    public String updateSite() {

        try {
            if (updateSiteCommon()) {
                success = true;
                isView = true;
            }

        } catch (NumberFormatException nfe) {
            // do nothing
        }
        return null;
    }

    public String getAction() {
        return action;
    }

    public void setAction(String action) {
        this.action = action;
    }

    public int getCurrentPage() {
        return currentPage;
    }

    public void setCurrentPage(int currentPage) {
        this.currentPage = currentPage;
    }

    public boolean isNewRequest() {
        return pendingRequest.getRequestTypeCd() == DsrWorkLocationsStaging.RequestType.NEW;
    }

    public boolean isUpdateRequest() {
        return pendingRequest.getRequestTypeCd() == DsrWorkLocationsStaging.RequestType.CHANGED;
    }

    public String approveRequest() {

        if (pendingRequest.getRequestTypeCd() == DsrWorkLocationsStaging.RequestType.NEW) {
            addNewSiteCommon();
        } else if (pendingRequest.getRequestTypeCd() == DsrWorkLocationsStaging.RequestType.CHANGED) {
            updateSiteCommon();

        }

        // Remove request from staging table
        dsrWorkLocationStagingFacade.remove(pendingRequest);

        nextPage = "ApproveDeliverySiteRequest";
        approved = true;

        return null;

    }

    public String denyRequest() {
        // Remove request from staging table
        dsrWorkLocationStagingFacade.remove(pendingRequest);
        actionResponse = "New site rejected";

        nextPage = "ApproveDeliverySiteRequest";
        denied = true;
        return null;

    }

    public String viewCurrentSite() {
        FacesContext.getCurrentInstance().getExternalContext().getRequestMap().put("displayObject", prsWorkLocation);
        return "ViewDeliverySite";
    }

    public String viewSiteWithId(Long id, String action) {

        PrsWorkLocations item = null;

        // Locate Item to view using primary key for the entity
        for (PrsWorkLocations p : searchResult) {
            if (p.getWlId().equals(id)) {
                item = p;
                break;
            }
        }

        FacesContext.getCurrentInstance().getExternalContext().getRequestMap().put("displayObject", item);
        FacesContext.getCurrentInstance().getExternalContext().getRequestMap().put("action", action);

        return "ViewDeliverySite";

    }

    /**
     * @return the operatorName
     */
    public String getOperatorName() {
        return operatorName;
    }

    /**
     * @param operatorName the operatorName to set
     */
    public void setOperatorName(String operatorName) {
        this.operatorName = operatorName;
    }

    /**
     * @return the operatorType
     */
    public String getOperatorType() {
        return operatorType;
    }

    /**
     * @param operatorType the operatorType to set
     */
    public void setOperatorType(String operatorType) {
        this.operatorType = operatorType;
    }

    public String getActionResponse() {
        return actionResponse;
    }

    public void setActionResponse(String actionResponse) {
        this.actionResponse = actionResponse;
    }

    public String getNextPage() {
        return nextPage;
    }

    public void setNextPage(String nextPage) {
        this.nextPage = nextPage;
    }

    public boolean isSuccess() {
        return success;
    }

    public boolean isSearchSuccess() {
        return searchSuccess;
    }

    public void setSearchSuccess(boolean searchSuccess) {
        this.searchSuccess = searchSuccess;
    }

    public void setSuccess(boolean success) {
        this.success = success;
    }

    public void reset() {
        this.success = false;
    }

    public boolean isApproved() {
        return approved;
    }

    public void setApproved(boolean approved) {
        this.approved = approved;
    }

    public boolean isDenied() {
        return denied;
    }

    public void setDenied(boolean denied) {
        this.denied = denied;
    }

    public String getSubmitterName() {
        return submitterName;
    }

    public String getSubmitterEmail() {
        return submitterEmail;
    }

    public List<SiteIdentifierWrapper> getSiteIdentifierWrapperList() {
        return siteIdentifierWrapperList;
    }

    public String getDummyHsda() {
        return dummyHsda;
    }

    public void setDummyHsda(String dummyHsda) {
        //   this.dummyHsda = dummyHsda;
    }

    public Long getDummyHa() {
        return dummyHa;
    }

    public void setDummyHa(Long dummyHa) {
        //  this.dummyHa = dummyHa;
    }

    public String editSiteIdentifer() { //(SiteIdentifierWrapper temp) {

        String siteId = ((HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest()).getParameter("siteId");
        siteIdentifierWrapperList.get(Integer.parseInt(siteId)).setStatus(SiteIdentifierWrapper.Status.EDITING);
        return null;
    }

    public String deleteSiteIdentifer() { //(SiteIdentifierWrapper temp) {
        String siteId = ((HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest()).getParameter("siteId");
        int index = Integer.parseInt(siteId);
        for (int i = 0; i < siteIdentifierWrapperList.size(); i++) {
            SiteIdentifierWrapper id = siteIdentifierWrapperList.get(i);
            if (id.getPosition() == index) {
                if (id.isNew()) {
                    siteIdentifierWrapperList.remove(id);
                } else {
                    id.getDsId().setActiveYn("N");
                }
                break;
            }

        }
//        if (siteIdentifierWrapperList.get(index).isNew()){
//            siteIdentifierWrapperList.remove(index);
//        }else{
//            siteIdentifierWrapperList.get(index).getDsId().setActiveYn("N");
//        }
//        wrapped.getDsId().setActiveYn("N");
//
//        for (int i = 0; i < siteIdentifierWrapperList.size(); i++) {
//            siteIdentifierWrapperList.get(i).setPosition(i);
//        }

        return null;
    }

    private String padWithSpaceIfNoNull(String input) {

        if (input != null) {
            input = input + " ";
        } else {
            input = "";
        }

        return input;
    }

}
