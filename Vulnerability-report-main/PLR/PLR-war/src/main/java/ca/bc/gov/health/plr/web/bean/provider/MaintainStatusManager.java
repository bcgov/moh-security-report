package ca.bc.gov.health.plr.web.bean.provider;

import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.StatusDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusClassCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusReasonCodes;
import ca.bc.gov.health.plr.service.PlrUserRoleService;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.MaintainProviderService;
import ca.bc.gov.health.plr.service.provider.ProviderHelperService;
import ca.bc.gov.health.plr.service.provider.MaintainStatusService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.Droplists;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import ca.bc.gov.health.plr.web.util.JSFUtils;
import java.io.Serializable;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.inject.Inject;

/**
 * Backing bean for MaintainStatus.xhtml.
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@ManagedBean
@ViewScoped
public class MaintainStatusManager implements Serializable {

    @EJB
    ProviderHelperService providerServiceHelper;
    @EJB
    MaintainStatusService maintainStatusService;
    @EJB
    protected MaintainProviderService maintainProviderService;

    StatusDto dto = new StatusDto();
    private ProviderDto providerDetails;

    @Inject
    Droplists droplists;
    private List<SelectItem> statusReasonCodeSelectItems;
    
    @Inject
    private PlrUserRoleService userRoleService;
    
    /**
     * Initialize the backing transfer objects.
     */
    @PostConstruct
    public void init() {
        reset();
    }

    /**
     * Resets the backing-bean so that it can be re-used in the same view.
     */
    public void reset() {
        dto = new StatusDto();
        initializeDefaultStatusCode();
        initializeDefaultStatusClassCode();
        statusCodeChanged();
    }

    /**
     * Add or update a status record for the provider viewed.
     */
    public void save() {
        FacesContext fc = FacesContext.getCurrentInstance();
        try {
            if (dto.isNew()) {
                dto.setPauthId(providerDetails.getPauthId());
            }
            maintainProviderService.save(dto);
            List<StatusDto> statuses = maintainStatusService.getStatuses(providerDetails.getPauthId());
            providerDetails.setStatuses(statuses);

            String message = JSFUtils.prepareSuccessMessage("status" , dto);
            fc.addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (DuplicateRecordException | EntityValidationException ex) {
            fc.validationFailed();
            fc.addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_ERROR, ex.getMessage(), ""));
        }
    }

    /**
     * Initialize the Status Code dropdowns.
     *
     * The Status Reason Code dropdowns and default Status Reason Code depend on
     * the Status Code, so after Status Code is initialized we initialize them
     * too.
     */
    private void initializeDefaultStatusCode() {
        PrsCtStatusCodes statusCode = providerServiceHelper.getDefaultStatusCode();
        Long statusCodeId = statusCode.getCtlId();
        dto.setTypeId(statusCodeId);
        filterStatusReasonCodeSelectItems(statusCodeId);
        initializeDefaultStatusReasonCode(statusCodeId);
    }

    /**
     * Filter the Status Reason Code dropdown based on the provided status code.
     *
     * @param statusCodeId the status code to filter by
     */
    private void filterStatusReasonCodeSelectItems(Long statusCodeId) {
        statusReasonCodeSelectItems = droplists.initializeStatusReasonCodeDropdowns(statusCodeId);
    }

    /**
     * Initialize the Status Class Code dropdown.
     */
    private void initializeDefaultStatusClassCode() {
        PrsCtStatusClassCodes defaultStatusClassCode = providerServiceHelper.getDefaultStatusClassCode();
        if (defaultStatusClassCode != null) {
            dto.setClassCodeId(defaultStatusClassCode.getCtlId());
        }
    }

    /**
     * Initialize Status Reason Code based on the specified Status Code.
     *
     * @param statusCodeId a valid Status Code ID.
     */
    private void initializeDefaultStatusReasonCode(Long statusCodeId) {
        PrsCtStatusReasonCodes statusReasonCodeId = providerServiceHelper.getDefaultStatusReasonCode(statusCodeId);
        dto.setReasonCodeId(statusReasonCodeId.getCtlId());
    }

    /**
     * Update the Status Reason Code dropdown when Status Code is changed.
     */
    public void statusCodeChanged() {
        filterStatusReasonCodeSelectItems(dto.getTypeId());
        dto.setReasonCodeId(null);
    }
    
    /**
     * Return a list of SelectItem to be used on the xhtml page. The list returned doesn't include CEASE option.
     * @return List list of SelectItem
     */
    public List<SelectItem> getEndReasonCodeSelectItems() {
        //primary source is NOT allowed to cease status
        if(this.userRoleService.isPrimarySource()) {
            return this.droplists.getGrsCtEndReasonTypesWithoutCease();
        } else {
            return this.droplists.getGrsCtEndReasonTypes();
        }
    }

    public StatusDto getDto() {
        return dto;
    }

    public void setDto(StatusDto statusDto) {
        this.dto = statusDto;
        filterStatusReasonCodeSelectItems(statusDto.getTypeId());
    }

    public List<SelectItem> getStatusReasonCodeSelectItems() {
        return statusReasonCodeSelectItems;
    }

    public void setProviderDetails(ProviderDto providerDetails) {
        this.providerDetails = providerDetails;
    }

    public PlrUserRoleService getUserRoleService() {
        return userRoleService;
    }

}
