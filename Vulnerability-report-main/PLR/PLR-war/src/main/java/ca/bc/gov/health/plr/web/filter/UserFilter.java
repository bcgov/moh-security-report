/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.web.filter;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.ejb.entity.GrsParties;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.session.GrsPartiesFacade;
import ca.bc.gov.health.plr.util.PlrRoleHelper;
import java.io.IOException;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.annotation.WebFilter;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import org.apache.commons.lang3.StringUtils;
import javax.ws.rs.core.Context;

/**
 *
 * @author adebiyi.kuseju
 */
@WebFilter(filterName = "UserFilter", urlPatterns = {"/*"})
public class UserFilter implements Filter {

    private static final Logger logger = Logger.getLogger(UserFilter.class.getName());

    private static final boolean debug = true;
    // The filter configuration object we are associated with.  If
    // this value is null, this filter instance is not currently
    // configured. 
    private FilterConfig filterConfig = null;
    @EJB
    private GrsPartiesFacade grsPartiesFacade;
	
    @Context
    private HttpServletRequest httpRequest;

    public UserFilter() {
    }

    private void doBeforeProcessing(ServletRequest request, ServletResponse response)
            throws IOException, ServletException {
    }

    private void doAfterProcessing(ServletRequest request, ServletResponse response)
            throws IOException, ServletException {
    }

    /**
     *
     * @param request The servlet request we are processing
     * @param response The servlet response we are creating
     * @param chain The filter chain we are processing
     *
     * @exception IOException if an input/output error occurs
     * @exception ServletException if a servlet error occurs
     */
    @Override
    public void doFilter(ServletRequest request, ServletResponse response,
            FilterChain chain)
            throws IOException, ServletException {
        
        // Do not apply the filter at /callback. This URL does not require authentication, so there is no user.
        if (((HttpServletRequest) request).getServletPath().contains("callback")) {
            chain.doFilter(request, response);
            return;
        }

        doBeforeProcessing(request, response);

        Throwable problem = null;
        try {

            HttpSession session = ((HttpServletRequest) request).getSession();
            GrsRegistryUsers regUser = (GrsRegistryUsers) ((HttpServletRequest) request).getSession().getAttribute(Consts.USER_ID);
            if (regUser == null) {
                String org = PlrRoleHelper.getOrganizationId(session);

                // Do we have a valid org
                if (StringUtils.isNotBlank(org)) {
                    GrsParties grsParties = grsPartiesFacade.findByOrganization(org);
                    if (grsParties == null) {
                        request.getServletContext().getRequestDispatcher("/WEB-INF/util/NoOrganization.html").forward(request, response);
                        return;
                    }
                    regUser = grsParties.getGrsRegistryUsersList().get(0);
                    session.setAttribute(Consts.USER_ID, regUser);
                    logger.log(Level.INFO, "Session ID for the current logged session : {0}", session.getId());
                }
            }

            chain.doFilter(request, response);
        } catch (Throwable t) {
            // If an exception is thrown somewhere down the filter chain,
            // we still want to execute our after processing, and then
            // rethrow the problem after that.
            problem = t;
        }

        doAfterProcessing(request, response);

        // If there was a problem, we want to rethrow it if it is
        // a known type, otherwise log it.
        if (problem != null) {
            if (problem instanceof ServletException) {
                throw (ServletException) problem;
            }
            if (problem instanceof IOException) {
                throw (IOException) problem;
            }
            sendProcessingError(problem, response);
        }
    }

    /**
     * Return the filter configuration object for this filter.
     */
    public FilterConfig getFilterConfig() {
        return (this.filterConfig);
    }

    /**
     * Set the filter configuration object for this filter.
     *
     * @param filterConfig The filter configuration object
     */
    public void setFilterConfig(FilterConfig filterConfig) {
        this.filterConfig = filterConfig;
    }

    /**
     * Destroy method for this filter
     */
    @Override
    public void destroy() {
    }

    /**
     * Init method for this filter
     */
    @Override
    public void init(FilterConfig filterConfig) {
        this.filterConfig = filterConfig;
        if (filterConfig != null) {

        }
    }

    /**
     * Return a String representation of this object.
     */
    @Override
    public String toString() {
        if (filterConfig == null) {
            return ("UserFilter()");
        }
        StringBuffer sb = new StringBuffer("UserFilter(");
        sb.append(filterConfig);
        sb.append(")");
        return (sb.toString());
    }

    private void sendProcessingError(Throwable t, ServletResponse response) {
        String stackTrace = getStackTrace(t);

        if (stackTrace != null && !stackTrace.equals("")) {
            try {
                response.setContentType("text/html");
                PrintStream ps = new PrintStream(response.getOutputStream());
                PrintWriter pw = new PrintWriter(ps);
                pw.print("<html>\n<head>\n<title>Error</title>\n</head>\n<body>\n"); //NOI18N

                // PENDING! Localize this for next official release
                pw.print("<h1>The resource did not process correctly</h1>\n<pre>\n");
                pw.print(stackTrace);
                pw.print("</pre></body>\n</html>"); //NOI18N
                pw.close();
                ps.close();
                response.getOutputStream().close();
            } catch (Exception ex) {                
                logger.log(Level.SEVERE, "UserFilter encountered an error while processing filter chain.");
            }
        } else {
            try {
                PrintStream ps = new PrintStream(response.getOutputStream());
                ps.close();
                response.getOutputStream().close();
            } catch (Exception ex) {
                logger.log(Level.SEVERE, "UserFilter encountered an error while processing filter chain.");
            }
        }
    }

    public static String getStackTrace(Throwable t) {
        String stackTrace = null;
        try {
            StringWriter sw = new StringWriter();
            PrintWriter pw = new PrintWriter(sw);
            pw.close();
            sw.close();
            stackTrace = sw.getBuffer().toString();
        } catch (Exception ex) {
            logger.log(Level.SEVERE, "UserFilter encountered an error while processing stacktrace.");
        }
        return stackTrace;
    }

    public void log(String msg) {
        filterConfig.getServletContext().log(msg);
    }
}
