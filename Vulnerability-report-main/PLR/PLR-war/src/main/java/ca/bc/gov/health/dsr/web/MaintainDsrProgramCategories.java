package ca.bc.gov.health.dsr.web;

import ca.bc.gov.health.plr.ejb.entity.*;
import ca.bc.gov.health.dsr.ejb.session.*;
import ca.bc.gov.health.jsf.BaseBean;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.bean.ViewScoped;
import javax.faces.bean.ManagedBean;
import javax.faces.component.UIInput;
import javax.faces.component.UIViewRoot;

@ManagedBean(name = "MaintainDsrProgramCategories")
@ViewScoped
/**
 * Backing bean for DsrProgramCategories code table maintenance
 *
 * @author JSF Code Generator
 */
public class MaintainDsrProgramCategories extends BaseBean implements java.io.Serializable {

    /* Facade for persistence */
    @EJB
    private DsrProgramAreaFacadeLocal dsrProgramAreaFacade;
    @EJB
    private DsrProgramCategoryFacadeLocal dsrProgramCategoriesFacade;

    /* List of all values in the code table */
    private List<DsrProgramCategories> allDsrProgramCategoriess;

    /* The instance we're currently editing */
    private DsrProgramCategories dsrProgramCategories;

    /* PK of the selected instance */
    private Object selectedKey;
    
    private boolean active = true;

    /**
     * Default Constructor
     */
    public MaintainDsrProgramCategories() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        allDsrProgramCategoriess = dsrProgramCategoriesFacade.findAll();
        dsrProgramCategories = new DsrProgramCategories();
        dsrProgramCategories.setProgramAreaCd(new DsrProgramAreas());
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();
        DsrProgramCategories existing = null;
        
        for (DsrProgramCategories temp : allDsrProgramCategoriess) {
            
            if (temp.getProgramCategoryCd().equalsIgnoreCase(dsrProgramCategories.getProgramCategoryCd())) {
                existing = temp;
                break;
            }
        }
        
        if (existing != null) {
            String msgStr = "Program category code '" + dsrProgramCategories.getProgramCategoryCd() + "' exists already";
            FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, msgStr, msgStr);
            FacesContext.getCurrentInstance().addMessage(null, msg);
            
            return null;
        }
        
        preUpdate();
        
        dsrProgramCategoriesFacade.create(dsrProgramCategories);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        init();
        ((Droplists) findBean("DsrDroplists")).init();
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();
        DsrProgramAreas pgArea = dsrProgramAreaFacade.find(dsrProgramCategories.getProgramAreaCd().getProgramAreaCd());

        preUpdate();
        
        if (!pgArea.getProgramAreaDsc().equals(dsrProgramCategories.getProgramAreaCd().getProgramAreaDsc())) {
            pgArea.getDsrProgramCategoriesList().add(dsrProgramCategories);
            dsrProgramCategories.setProgramAreaCd(pgArea);
            dsrProgramAreaFacade.edit(pgArea);
        } else {
            dsrProgramCategoriesFacade.edit(dsrProgramCategories);
        }
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        init();
        ((Droplists) findBean("DsrDroplists")).init();
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        dsrProgramCategoriesFacade.remove(dsrProgramCategories);
        init();
        ((Droplists) findBean("DsrDroplists")).init();
        return null;
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        active = true;
        dsrProgramCategories = new DsrProgramCategories();
        dsrProgramCategories.setProgramAreaCd(new DsrProgramAreas());
        
        UIViewRoot viewRoot = FacesContext.getCurrentInstance().getViewRoot();

        String[] compIds = {"form1:pgArea", "form1:active", "form1:catCd", "form1:catDesc"};

        UIInput comp;
        for (String id : compIds) {
            comp = (UIInput) viewRoot.findComponent(id);
            if (comp != null) {
                comp.resetValue();
            }
        }

        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        for (int i = 0; i < allDsrProgramCategoriess.size(); i++) {
            if (allDsrProgramCategoriess.get(i).getProgramCategoryCd().equals(selectedKey)) {
                dsrProgramCategories = allDsrProgramCategoriess.get(i);
                preDisplay();
                break;
            }
        }
        return null;
    }
    
    public boolean isActive() {
        return active;
    }

    public void setActive(boolean active) {
        this.active = active;
    }

    private void preUpdate() {

        if (active) {
            dsrProgramCategories.setActiveYn("Y");
        } else {
            dsrProgramCategories.setActiveYn("N");
        }
    }

    private void preDisplay() {

        if (dsrProgramCategories.getActiveYn().equals("Y")) {
            active = true;
        } else {
            active = false;
        }
    }

    /**
     * Nullifys any parent records where proper PKs aren't set
     */
    private void nullify() {
    }
    /* Getters and Setters */

    public List<DsrProgramCategories> getAllDsrProgramCategoriess() {
        return allDsrProgramCategoriess;
    }

    public void setAllDsrProgramCategoriess(List<DsrProgramCategories> allDsrProgramCategoriess) {
        this.allDsrProgramCategoriess = allDsrProgramCategoriess;
    }

    public DsrProgramCategories getDsrProgramCategories() {
        return dsrProgramCategories;
    }

    public void setDsrProgramCategories(DsrProgramCategories dsrProgramCategories) {
        this.dsrProgramCategories = dsrProgramCategories;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }
}