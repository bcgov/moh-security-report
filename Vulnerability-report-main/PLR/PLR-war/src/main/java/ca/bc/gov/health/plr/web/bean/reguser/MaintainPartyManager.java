/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.web.bean.reguser;

import ca.bc.gov.health.plr.dto.PartyDetailsDto;
import ca.bc.gov.health.plr.dto.reguser.PartyDto;
import ca.bc.gov.health.plr.dto.reguser.RegistryUserDetails;
import ca.bc.gov.health.plr.dto.reguser.RegistryUserDetailsConverter;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.registry.user.MaintainPartyService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

/**
 *
 * @author sumesh.kariyil
 */
@ManagedBean
@ViewScoped
public class MaintainPartyManager {

    @EJB
    private MaintainPartyService service;
    @EJB
    private RegistryUserDetailsConverter registryUserDetailsConverter;
    
    private PartyDto dto;
    private RegistryUserDetails registryUserDetails;
    
    @PostConstruct
    public void init() {
        dto  = new PartyDto();
        dto.setPartyDetailsDto( new PartyDetailsDto());
    }

    /**
     * Resets the DTO so that the backing-bean can be re-used in the same view.
     */
    public void resetDto() {
        dto = new PartyDto();
    }

    /**
     * Add or update an Organization Name.
     */
    public void save() {
        try {
            service.save(getDto());

            List<PartyDto> parties = service.getParties(getDto());
            registryUserDetails.setParties(parties);
            registryUserDetails.setActivePartyDto(registryUserDetailsConverter.getActiveParty(parties));
            String message = "The Organization was successfully updated";
            FacesContext.getCurrentInstance().addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (DuplicateRecordException | EntityValidationException dre) {
            FacesContext.getCurrentInstance().addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_ERROR, dre.getMessage(), ""));
            FacesContext.getCurrentInstance().validationFailed();
        }
    }

    public PartyDto getDto() {
        return dto;
    }

    public void setDto(PartyDto dto) {
        this.dto = dto;
    }

    public RegistryUserDetails getRegistryUserDetails() {
        return registryUserDetails;
    }

    public void setRegistryUserDetails(RegistryUserDetails registryUserDetails) {
        this.registryUserDetails = registryUserDetails;
    }

    public MaintainPartyService getService() {
        return service;
    }

    public void setService(MaintainPartyService service) {
        this.service = service;
    }

}
