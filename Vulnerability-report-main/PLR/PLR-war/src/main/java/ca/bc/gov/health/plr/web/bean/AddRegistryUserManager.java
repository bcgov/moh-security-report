package ca.bc.gov.health.plr.web.bean;

import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.converter.RegistryUserDto;
import ca.bc.gov.health.plr.dto.converter.RegistryUserDtoConverter;
import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.PrsCtJurisdictions;
import ca.bc.gov.health.plr.ejb.entity.PrsCtNameTypes;
import ca.bc.gov.health.plr.ejb.entity.UniqueDataBlock;
import ca.bc.gov.health.plr.ejb.session.GenerationNumService;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.service.ErrorMessage;
import ca.bc.gov.health.plr.service.provider.AddressSupportService;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.registry.user.RegistryUserService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.service.validators.ExceptionCommon;
import ca.bc.gov.health.plr.web.bean.provider.MaintainTelephoneManager;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.validator.ValidatorException;
import javax.inject.Inject;

/**
 * Backing bean for adding a new provider view (AddProvider.xhtml).
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@ManagedBean
@ViewScoped
public class AddRegistryUserManager {

    @Inject
    private RegistryUserService registryUserService;
    @Inject
    private AddressSupportService addressSupportService;
    @Inject
    private RegistryUserDtoConverter registryUserDtoConverter;
    @Inject
    private CodesDao codesDao;
    @Inject
    private GenerationNumService generationNumService;
    private RegistryUserDto dto = new RegistryUserDto();
    private boolean addressFieldsRequired;
    private boolean telecomFieldsRequired;
    private boolean electronicAddressRequired;
    
    @ManagedProperty(value = "#{maintainTelephoneManager}")
    private MaintainTelephoneManager maintainTelephoneManager;

    /**
     * Initialize dropdowns and defaults.
     */
    @PostConstruct
    public void init() {
        dto.setEffectiveStartDate(new Date());
        dto.getActiveAddressDto().setEffectiveStartDate(new Date());
        dto.getActiveTelecomDto().setEffectiveStartDate(new Date());
        dto.getActiveElectronicAddressDto().setEffectiveStartDate(new Date());

        dto.getActiveAddressDto().setCountryId(addressSupportService.getDefaultCountry().getCtlId());

        PrsCtNameTypes nameType = codesDao.lookup(PrsCtNameTypes.class, CodeTableCodes.PrsCtNameTypes.CURRENT_KNOWN_NAME.getValue());
        dto.getActiveOrgNameDto().setType(nameType.getCtlDescTxt());
        dto.getActiveOrgNameDto().setTypeCode(nameType.getCtlNameCode());
        dto.getActiveOrgNameDto().setTypeId(nameType.getCtlId());
    }

    /**
     * Return the transfer object backing the form.
     *
     * @return the transfer object backing the form.
     */
    public RegistryUserDto getDto() {
        return dto;
    }

    public void setDto(RegistryUserDto dto) {
        this.dto = dto;
    }

    public String save() throws DuplicateRecordException, EntityValidationException {
        //PLR-376 : removed validateEmail as it is done using faces validator {conditionalEmailValidator}
        dto.setJurisdictionId(codesDao.lookup(PrsCtJurisdictions.class, CodeTableCodes.PrsCtJurisdictions.BRITISH_COLUMBIA.getValue()).getCtlId());
        dto.getActivePartyDto().setPartyTypeCode(CodeTableCodes.GrsCtPartyType.ORG.getValue());
        dto.getActiveOrgNameDto().setEffectiveStartDate(dto.getEffectiveStartDate());
        dto.getPartyDetailsDto().setEffectiveStartDate(dto.getEffectiveStartDate());

        GrsRegistryUsers newRegUser = registryUserDtoConverter.toEntity(dto);
        manageGenerationNum(newRegUser);
        registryUserService.setActiveAttributesForAdd(newRegUser);
        try {
            newRegUser = registryUserService.save(newRegUser);
        } catch (DuplicateRecordException | EntityValidationException ex) {
            handleException(ex);
            return null;
        }

        return "RegUserDetails.xhtml?faces-redirect=true&r=" + newRegUser.getRuId();
    }
    
    /**
     *  Validate whether the registry user id provided is unique
     * @param context
     * @param component
     * @param value
     * @throws ValidatorException 
     */
    public void validateParty(FacesContext context, UIComponent component, Object value) throws ValidatorException {
        try {
            dto.getActivePartyDto().setRegUserId((String)value);
            registryUserService.validatePartyDetails(dto.getActivePartyDto());
        } catch (EntityValidationException ex) {
            FacesMessage msg = new FacesMessage(ex.getMessage());
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            throw new ValidatorException(msg);
        }
    }
    
    /**
     * Validate whether the registry user org name provided is unique
     * @param context
     * @param component
     * @param value
     * @throws ValidatorException 
     */
    public void validateOrg(FacesContext context, UIComponent component, Object value) throws ValidatorException {
        try {
            dto.getActiveOrgNameDto().setName((String)value);
            dto.getActiveOrgNameDto().setRuRuId(dto.getId());
            registryUserService.validateOrgDetails(dto.getActiveOrgNameDto());
        } catch (EntityValidationException ex) {
            FacesMessage msg = new FacesMessage(ex.getMessage());
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            throw new ValidatorException(msg);
        }
    }

    public boolean isAddressFieldsRequired() {
        return addressFieldsRequired;
    }

    public void setAddressFieldsRequired(boolean addressFieldsRequired) {
        this.addressFieldsRequired = addressFieldsRequired;
    }

    public boolean isTelecomFieldsRequired() {
        return telecomFieldsRequired;
    }

    public void setTelecomFieldsRequired(boolean telecomFieldsRequired) {
        this.telecomFieldsRequired = telecomFieldsRequired;
    }

    public boolean isElectronicAddressRequired() {
        return electronicAddressRequired;
    }

    public void setElectronicAddressRequired(boolean electronicAddressRequired) {
        this.electronicAddressRequired = electronicAddressRequired;
    }

    public void resetAddress() {
        dto.setActiveAddressDto(new AddressDto());
        dto.getActiveAddressDto().setEffectiveStartDate(new Date());
        long defaultCountry = addressSupportService.getDefaultCountry().getCtlId();
        dto.getActiveAddressDto().setCountryId(defaultCountry);
    }

    public void resetTelecom() {
        dto.setActiveTelecomDto(new TelecommunicationDto());
        dto.getActiveTelecomDto().setEffectiveStartDate(new Date());
    }

    public void resetEAddress() {
        dto.setActiveElectronicAddressDto(new ElectronicAddressDto());
        dto.getActiveElectronicAddressDto().setEffectiveStartDate(new Date());
    }

    private void manageGenerationNum(GrsRegistryUsers entity) {

        manageGenerationNum(entity.getGrsAddressesList());
        manageGenerationNum(entity.getGrsElectronicAddressesList());
        manageGenerationNum(entity.getGrsOrgNamesList());
        manageGenerationNum(entity.getGrsPersonNamesList());
        manageGenerationNum(entity.getGrsTelephonesList());
        manageGenerationNum(entity.getPartyPartyId().getGrsPartyDetailsList());
    }

    private void manageGenerationNum(List<? extends UniqueDataBlock> entities) {
        if (entities != null && !entities.isEmpty()) {
            generationNumService.incrementGenerationNum(entities.get(0));
        }
    }

    private void handleException(ExceptionCommon ex) {
        if (ex instanceof DuplicateRecordException || ex instanceof EntityValidationException) {

            if (ex.getErrorMessages() != null && !ex.getErrorMessages().isEmpty()) {
                for (ErrorMessage errorMessage : ex.getErrorMessages()) {
                    FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMessage.getErrorMessage(), ""));
                }
            } else {
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, ((Exception) ex).getMessage(), ""));
            }
        }
    }

    public void setMaintainTelephoneManager(MaintainTelephoneManager maintainTelephoneManager) {
        this.maintainTelephoneManager = maintainTelephoneManager;
    }

    public MaintainTelephoneManager getMaintainTelephoneManager() {
        return maintainTelephoneManager;
    }
    
}
