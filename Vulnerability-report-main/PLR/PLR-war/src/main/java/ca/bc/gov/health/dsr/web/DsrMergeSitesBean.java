package ca.bc.gov.health.dsr.web;

import ca.bc.gov.health.dsr.ejb.session.DsrCtStatusFacadeLocal;
import ca.bc.gov.health.plr.ejb.entity.DsrDeliverySiteIdentifiers;
import ca.bc.gov.health.dsr.ejb.session.DsrDeliverySiteIdentifierFacadeLocal;
import ca.bc.gov.health.dsr.ejb.session.PrsWorkLocationFacadeLocal;
import ca.bc.gov.health.jsf.BaseBean;
import ca.bc.gov.health.plr.ejb.entity.PrsWorkLocations;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

/**
 * Bean for Handling Merging Operation for Delivery Sites
 *
 */
@ManagedBean(name = "DsrMergeSitesBean")
@ViewScoped
public class DsrMergeSitesBean extends BaseBean implements java.io.Serializable {

    @EJB
    private PrsWorkLocationFacadeLocal prsWorkLocationFacade;
    @EJB
    private DsrDeliverySiteIdentifierFacadeLocal dsrDeliverySiteIdentifierFacade;
    @EJB
    private DsrCtStatusFacadeLocal dsrCtStatusFacade;
    private String idType;
    private PrsWorkLocations survivingSite;
    private PrsWorkLocations nonSurvivingSite;

    /**
     * Default constructor
     */
    public DsrMergeSitesBean() {
    }

    /**
     * Initializes this bean after injection is complete
     */
    @PostConstruct
    public void init() {
        clear();
    }

    /**
     * Clears the state of this bean
     */
    public String clear() {
        survivingSite = new PrsWorkLocations();
        nonSurvivingSite = new PrsWorkLocations();
        return null;
    }

    public String merge() {

        boolean isError = false;

        if (survivingSite == null) {
            FacesMessage error = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Surviving DS ID does not exist", null);
            FacesContext.getCurrentInstance().addMessage("", error);
            isError = true;
        }

        if (survivingSite != null && survivingSite.getDsrDeliverySiteIdentifiersList().get(0).getWlWlId().getStatusId().getCtlDescTxt().equalsIgnoreCase("merged")) {
            FacesMessage error = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Surviving DS ID must be for an active delivery site", null);
            FacesContext.getCurrentInstance().addMessage("", error);
            isError = true;
        }

        if (nonSurvivingSite == null) {
            FacesMessage error = new FacesMessage(FacesMessage.SEVERITY_ERROR, "Non-Surviving DS ID does not exist", null);
            FacesContext.getCurrentInstance().addMessage("", error);
            isError = true;
        }

        if (isError) {
            return null;
        }

        // Obtain a list of the associated site identifiers
        List<DsrDeliverySiteIdentifiers> nonSurvivingIdentifiers = nonSurvivingSite.getDsrDeliverySiteIdentifiersList();
        List<DsrDeliverySiteIdentifiers> copyNonSurvivingIdentifiers = new ArrayList<>(nonSurvivingIdentifiers.size());

        DsrDeliverySiteIdentifiers temp = null;

        //Create a copy of the identifiers to be added to the surviving id
        for (DsrDeliverySiteIdentifiers t : nonSurvivingIdentifiers) {

            temp = new DsrDeliverySiteIdentifiers();

            temp.setCreatedOnDtm(t.getCreatedOnDtm());
            temp.setCreatedByNm(t.getCreatedByNm());
            temp.setIdentifierNo(t.getIdentifierNo());
            temp.setSourceSystemCd(t.getSourceSystemCd());

            
            if (t.getSourceSystemCd().getSourceSystemCd().equals("DSR")){
                //Deactivate non-survivor DSR ID in survivor
                temp.setActiveYn("N");
            }else{
                //Activate copied delivery site identifier id
                temp.setActiveYn(t.getActiveYn());
            }

            //Update the PRSWorkLocation Object for each of the 
            // copied site identifiers
            temp.setWlWlId(survivingSite);
            copyNonSurvivingIdentifiers.add(temp);

            //Deactivate delivery site identifier ids for the non-surviving DS_ID
            if (t.getSourceSystemCd().getSourceSystemCd().equals("DSR")){
                t.setActiveYn("N");
            }

        }

        // Add all copied site identifiers to the list of the site identifiers of the
        // surviving record
        survivingSite.getDsrDeliverySiteIdentifiersList().addAll(copyNonSurvivingIdentifiers);

        nonSurvivingSite.setStatusId(dsrCtStatusFacade.findMergedStatus());

        //save updated info to the DB
        prsWorkLocationFacade.edit(survivingSite);
        prsWorkLocationFacade.edit(nonSurvivingSite);

        survivingSite = prsWorkLocationFacade.find(survivingSite.getWlId());

        FacesContext.getCurrentInstance().getExternalContext().getRequestMap().put("displayObject", survivingSite);
        FacesContext.getCurrentInstance().getExternalContext().getRequestMap().put("action", "existingRequest");

        return "ViewDeliverySite";
    }

    public PrsWorkLocations getSurvivingSite() {
        return survivingSite;
    }

    public void setSurvivingSite(PrsWorkLocations survivingSite) {
        this.survivingSite = survivingSite;
    }

    public PrsWorkLocations getNonSurvivingSite() {
        return nonSurvivingSite;
    }

    public void setNonSurvivingSite(PrsWorkLocations nonSurvivingSite) {
        this.nonSurvivingSite = nonSurvivingSite;
    }

    public String getIdType() {
        return idType;
    }

    public void setIdType(String idType) {
        this.idType = idType;
    }
}