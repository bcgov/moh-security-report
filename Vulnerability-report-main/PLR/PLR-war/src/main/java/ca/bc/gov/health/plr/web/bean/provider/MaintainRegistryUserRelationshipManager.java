package ca.bc.gov.health.plr.web.bean.provider;

import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.RegistryUserRelationshipDto;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.MaintainProviderService;
import ca.bc.gov.health.plr.service.provider.MaintainRegistryUserRelationshipService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import ca.bc.gov.health.plr.web.util.JSFUtils;
import java.io.Serializable;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

/**
 * Backing bean for MaintainRegistryUserRelationship.xhtml.
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@ManagedBean
@ViewScoped
public class MaintainRegistryUserRelationshipManager implements Serializable {

    private RegistryUserRelationshipDto dto = new RegistryUserRelationshipDto();
    private ProviderDto providerDetails;
    @EJB
    private MaintainRegistryUserRelationshipService service;
    @EJB
    protected MaintainProviderService maintainProviderService;
    
    /**
     * Initialize the backing transfer objects.
     */
    @PostConstruct
    public void init() {
        resetDto();
    }

    /**
     * Resets the DTO so that the backing-bean can be re-used in the same view.
     */
    public void resetDto() {
        dto = new RegistryUserRelationshipDto();
    }

    /**
     * Adds or updates a Registry User relationship.
     */
    public void save() {
        try {
            if (dto.isNew()) {
                dto.setPauthId(providerDetails.getPauthId());                
            }
            maintainProviderService.save(dto);

            String message = JSFUtils.prepareSuccessMessage("relationship" , dto);
            FacesContext.getCurrentInstance().addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (DuplicateRecordException | BusinessRuleException | EntityValidationException ex) {
            FacesContext.getCurrentInstance().validationFailed();
            FacesContext.getCurrentInstance().addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_ERROR, ex.getMessage(), ""));
        }
        List<RegistryUserRelationshipDto> relationships = service.getRelationships(providerDetails.getPauthId());
        providerDetails.setRegistryUserRelationships(relationships);
    }

    public RegistryUserRelationshipDto getDto() {
        return dto;
    }

    public void setDto(RegistryUserRelationshipDto dto) {
        this.dto = dto;
    }
    
    public ProviderDto getProviderDetails() {
        return providerDetails;
    }

    public void setProviderDetails(ProviderDto providerDetails) {
        this.providerDetails = providerDetails;
    }
}
