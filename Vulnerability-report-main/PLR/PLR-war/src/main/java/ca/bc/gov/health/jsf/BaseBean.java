/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.jsf;

import java.io.IOException;
import java.util.ResourceBundle;
import javax.faces.FacesException;
import javax.faces.application.FacesMessage;
import javax.faces.application.FacesMessage.Severity;
import javax.faces.component.UIComponent;
import javax.faces.component.UIInput;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.servlet.http.HttpServletResponse;
import org.primefaces.component.datatable.DataTable;
import org.primefaces.component.export.Exporter;
import org.primefaces.component.export.ExporterFactory;

/**
 * Base class for JSF backing beans
 * @author greg.perkins
 */
public class BaseBean {

    private ResourceBundle bundle;
    
    /**
     * Looks up a bean in the FacesContext
     * @param name String - name of the managed bean
     * @return Object - the managed bean instance
     */
    public Object findBean(String name) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        return facesContext.getApplication().createValueBinding("#{" + name + "}").getValue(facesContext);
    }
    
    public void ajaxRedirect(String theUrl){
        FacesContext ctx = FacesContext.getCurrentInstance();
        ExternalContext extContext = ctx.getExternalContext();
        String url = extContext.encodeActionURL(ctx.getApplication().getViewHandler().getActionURL(ctx, theUrl));
        try {
            extContext.redirect(url);
        } catch (IOException ioe) {
            throw new FacesException(ioe);
        }        
    }    

    public void addErrorMessage(String msg){
        addMessage(msg,FacesMessage.SEVERITY_ERROR);
    }
    
    public void addInfoMessage(String msg){
        addMessage(msg,FacesMessage.SEVERITY_INFO);
    }
    
    private void addMessage(String msg, Severity severity) {
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(severity, msg, msg));
    }    
    
    public void resetComponent(String componentId) {
        UIComponent form = (UIComponent) FacesContext.getCurrentInstance().getViewRoot().findComponent(componentId);
        resetComponent(form);
    }

    public void resetComponent(UIComponent form) {
        for (UIComponent uic : form.getChildren()) {
            if (uic instanceof UIInput) {
                UIInput evh = (UIInput) uic;
                evh.resetValue();
            }
            resetComponent(uic);
        }
    }
    
    public String getResourceValue(String key) {

        if (bundle == null) {
            FacesContext context = FacesContext.getCurrentInstance();
            bundle = context.getApplication().getResourceBundle(context, "msg");

        }

        return bundle.getString(key);

    }

    /**
     * Exports a search results table as a PDF document
     * @return String
     */
//    public String exportSearchResultsAsPdf() {
//        exportSearchResults("pdf");
//        return null;
//    }

    /**
     * Exports a search results table as a PDF document
     * @return String
     */
//    public String exportSearchResultsAsXls() {
//        exportSearchResults("xls");
//        return null;
//    }

    /**
     * Exports a search results table as a PDF document
     * @return String
     */
//    public String exportSearchResultsAsCsv() {
//        exportSearchResults("csv");
//        return null;
//    }

    /**
     * Exports a RichTable or PrimeTable to the desired format
     * @param type - CSV / XLS / PDF
     * @return 
     */
//    private String exportSearchResults(String type) {
//        FacesContext fc = FacesContext.getCurrentInstance();
//        HttpServletResponse response = (HttpServletResponse) fc.getExternalContext().getResponse();
//        response.reset();
//        Object component = fc.getViewRoot().findComponent("form1:resultsTable");
//        DataTable dt = (DataTable) component;
//        
//        Exporter exporter = ExporterFactory.getExporterForType(type);
//        try {
//            //exporter.export(fc, dt, "export", false, new int[]{dt.getChildCount() - 1}, "UTF-8", null, null);
//            throw new Exception("Not implemented");
//            //fc.responseComplete();
//        } catch (Exception e) {
//            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Unable to export: " + e.getMessage(), "Unable to export: " + e.getMessage()));
//        }
//
//        return null;
//    }
    
     /**
     * Exports a search results table as a PDF document
     *
     * @param tabletId A string representing the id of the table to
     *                 be exported
     * 
     * @return String
     */
    public String exportAsPdf(String tabletId) {
        exportResults("pdf", tabletId);
        return null;
    }

    /**
     * Exports a search results table as a Excel document
     *
     * @param tabletId A string representing the id of the table to
     *                 be exported
     * @return String
     */
    public String exportAsXls(String tabletId) {
        exportResults("xls", tabletId);
        return null;
    }

    /**
     * Exports a search results table as a CSV document
     * 
     * @param tabletId A string representing the id of the table to
     *                 be exported
     *
     * @return String
     */
    public String exportAsCsv(String tabletId) {
        exportResults("csv", tabletId);
        return null;
    }
    
    protected String exportResults(String type, String tabletId) {
        
        FacesContext fc = FacesContext.getCurrentInstance();
        ExternalContext ec = fc.getExternalContext();
        
         ec.responseReset();
         if (type.equalsIgnoreCase("csv")) {
            ec.setResponseContentType("text/csv"); // Check http://www.iana.org/assignments/media-types for all types. Use if necessary ExternalContext#getMimeType() for auto-detection based on filename.
            ec.setResponseHeader("Content-Disposition", "attachment; filename=\"export.csv\"");
         }
        
        Object component = fc.getViewRoot().findComponent(tabletId);
        DataTable dt = null;
//        if (component instanceof UIDataTable) {
//            UIDataTable rdt = (UIDataTable) fc.getViewRoot().findComponent(tabletId);
//            dt = new DataTable();
//            dt.setValue(rdt.getValue());
//            dt.setVar(rdt.getVar());
//            dt.getChildren().addAll(rdt.getChildren());
//        } else {
            dt = (DataTable) component;
    //    }
        Exporter exporter = ExporterFactory.getExporterForType(type, null);
        try {
            exporter.export(fc, dt, "export", false, false, "UTF-8", null, null, null, null);
            fc.responseComplete();
        } catch (Exception e) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Unable to export: " + e.getMessage(), "Unable to export: " + e.getMessage()));
        }

        return null;
        
    }
}
