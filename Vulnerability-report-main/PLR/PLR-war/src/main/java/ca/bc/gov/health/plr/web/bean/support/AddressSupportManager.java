package ca.bc.gov.health.plr.web.bean.support;

import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvState;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.service.provider.AddressSupportService;
import ca.bc.gov.health.dsr.web.PrsWorkLocationBean;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.ViewScoped;
import javax.faces.model.SelectItem;

/**
 *
 * @author ian.scott
 */
@ManagedBean
@ViewScoped
public class AddressSupportManager {

    private static final String CLASSNAME = AddressSupportManager.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    @ManagedProperty(value = "#{PrsWorkLocationBean}")
    private PrsWorkLocationBean prsWorkLocationBean;

    @EJB
    AddressSupportService addressSupportService;
    @EJB
    private CodesDao codesDao;
    private PrsCtCountries defaultCountry;
    private List<SelectItem> countrySelectItemsOrderedByName;
    private List<SelectItem> provinceSelectItemsGroup1;
    private List<SelectItem> provinceSelectItemsGroup2;
    private List<SelectItem> addressProvinceSelectItems;
    private List<SelectItem> dsrCountrySelectItemsByName;
    private List<SelectItem> addressDsrProvinceSelectItems;
    private boolean displayDsrProvince = false;
    

    @PostConstruct
    public void init() {
        dsrCountrySelectItemsByName = new ArrayList<>();
        addressDsrProvinceSelectItems = new ArrayList<>();
        defaultCountry = getDefaultCountry();
        initCountryDropdownOrderedByName();
        initDsrCountryDropdownByName();
        provinceSelectItemsGroup1 = initProvinceDropdownOrderedByName(defaultCountry.getCtlId());
        provinceSelectItemsGroup2 = initProvinceDropdownOrderedByName(defaultCountry.getCtlId());
        addressProvinceSelectItems = addressSupportService.initProvinceDropdownOrderedByNameCode(defaultCountry.getCtlId());
        addressDsrProvinceSelectItems = prsWorkLocationBean.getProvinceList();
    }

    /**
     * Suggests a list of address related city names based on keyed user input.
     *
     * @param criteria the user input
     * @return a list of address related city names based on keyed user input.
     */
    public List<String> suggestCityName(String criteria) {
        return addressSupportService.suggestCityName(criteria);
    }
    
    public PrsCtCountries getDefaultCountry() {
        if (defaultCountry != null) {
            return defaultCountry;
        }
        return addressSupportService.getDefaultCountry();
    }

    public PrsCtProvState getDefaultProvince(Long countryId) {
        return addressSupportService.getDefaultProvince(countryId);
    }

    public void refreshDropDownsGroup1(Long countryID) {
        provinceSelectItemsGroup1 = initProvinceDropdownOrderedByName(countryID);
    }

    public void refreshDropDownsGroup2(Long countryID) {
        provinceSelectItemsGroup2 = initProvinceDropdownOrderedByName(countryID);
    }

    /**
     * Initialize the dropdown of all the countries ordered by Name - using the
     * ctlId as the value
     */
    public void initCountryDropdownOrderedByName() {
        countrySelectItemsOrderedByName = new ArrayList<>();
        List<PrsCtCountries> countries = addressSupportService.getCountriesOrderedByName();
        for (PrsCtCountries country : countries) {
            countrySelectItemsOrderedByName.add(new SelectItem(country.getCtlId(), country.getCtlNameCode() + " - " + country.getCtlDescTxt()));
        }

    }

    /**
     * Initialize the dropdown of all the DSR countries ordered by Name - using
     * the ctlId as the value
     */
    public void initDsrCountryDropdownByName() {
        dsrCountrySelectItemsByName = new ArrayList<>();
        List<PrsCtCountries> countries = addressSupportService.getCountriesOrderedByName();
        for (PrsCtCountries country : countries) {
            dsrCountrySelectItemsByName.add(new SelectItem(country.getCtlId(), country.getCtlDescTxt()));
        }

    }

    public void initProvinceDropdownOnDialogOpen(Long country) {
        addressProvinceSelectItems = addressSupportService.initProvinceDropdownOrderedByNameCode(country);
    }

    public void initDsrProvinceDropdownOnDialogOpen(Long country) {
        addressDsrProvinceSelectItems = initDsrProvinceDropdownByName(country);
    }

    private List<SelectItem> initProvinceDropdownOrderedByName(Long country) {

        List<SelectItem> temp = new ArrayList<>();
        if (country != null && country != 0) {
            List<PrsCtProvState> provinces = addressSupportService.getProvincesOrderedByName(country);
            if (provinces != null) {
                for (PrsCtProvState province : provinces) {
                    temp.add(new SelectItem(province.getCtlId(), province.getCtlNameCode() + " - " + province.getCtlDescTxt()));
                }
            }
        }
        return temp;
    }

    private List<SelectItem> initDsrProvinceDropdownByName(Long country) {
        List<SelectItem> temp = new ArrayList<>();
        if (country != null && country != 0) {
            List<PrsCtProvState> provinces = addressSupportService.getProvincesOrderedByName(country);
            if (provinces != null) {
                for (PrsCtProvState province : provinces) {
                    temp.add(new SelectItem(province.getCtlNameCode(), province.getCtlDescTxt()));
                }
            }
        }
        return temp;
    }

    public boolean showProvinceDropDown(Long countryId) {
        //If country is not US or CA, set showProvinceDropDown = false
        PrsCtCountries country = codesDao.lookup(PrsCtCountries.class, countryId);
        return (country.getCtlNameCode().equals(CodeTableCodes.PrsCtCountries.CANADA.getValue())
                || country.getCtlNameCode().equals(CodeTableCodes.PrsCtCountries.UNITED_STATES.getValue()));
    }

    public boolean showDsrProvinceDropDown(Long countryId) {

        //If country is not US or CA, set showProvinceDropDown = false
        PrsCtCountries country = codesDao.lookup(PrsCtCountries.class, countryId);
        boolean showProvinceDropDown = country.getCtlNameCode().equals(CodeTableCodes.PrsCtCountries.CANADA.getValue())
                || country.getCtlNameCode().equals(CodeTableCodes.PrsCtCountries.UNITED_STATES.getValue());

        return showProvinceDropDown;
    }

    public void countryChangedGroup1(Long updatedCountry) {
        provinceSelectItemsGroup1 = initProvinceDropdownOrderedByName(updatedCountry);
    }

    public void countryChangedGroup2(Long updatedCountry) {
        provinceSelectItemsGroup2 = initProvinceDropdownOrderedByName(updatedCountry);
    }

    public void addressDsrCountryChanged(Long updatedCountry) {

        addressDsrProvinceSelectItems = initDsrProvinceDropdownByName(updatedCountry);
        if (prsWorkLocationBean != null
                && prsWorkLocationBean.getGrsAddresses() != null
                && !prsWorkLocationBean.getGrsAddresses().isEmpty()) {
            prsWorkLocationBean.getGrsAddresses().get(0).setProvinceOrStateTxt("");
        }
        setDisplayDsrProvince(showDsrProvinceDropDown(updatedCountry));
    }

    public long determineCountryId(Long input) {
        if (input != null && input > 0) {
            return input;
        } else {
            return this.getDefaultCountry().getCtlId();
        }
    }

    public List<SelectItem> getCountrySelectItemsOrderedByName() {
        return countrySelectItemsOrderedByName;
    }

    public void setCountrySelectItemsOrderedByName(List<SelectItem> countrySelectItemsOrderedByName) {
        this.countrySelectItemsOrderedByName = countrySelectItemsOrderedByName;
    }

    public List<SelectItem> getProvinceSelectItemsGroup1() {
        return provinceSelectItemsGroup1;
    }

    public void setProvinceSelectItemsGroup1(List<SelectItem> provinceSelectItemsGroup1) {
        this.provinceSelectItemsGroup1 = provinceSelectItemsGroup1;
    }

    public List<SelectItem> getProvinceSelectItemsGroup2() {
        return provinceSelectItemsGroup2;
    }

    public void setProvinceSelectItemsGroup2(List<SelectItem> provinceSelectItemsGroup2) {
        this.provinceSelectItemsGroup2 = provinceSelectItemsGroup2;
    }

    public List<SelectItem> getAddressProvinceSelectItems() {
        return addressProvinceSelectItems;
    }

    public void setAddressProvinceSelectItems(List<SelectItem> addressProvinceSelectItems) {
        this.addressProvinceSelectItems = addressProvinceSelectItems;
    }

    // Required for @ManagedProperty injection.
    public void setPrsWorkLocationBean(PrsWorkLocationBean prsWorkLocationBean) {
        this.prsWorkLocationBean = prsWorkLocationBean;
    }
    
    public List<SelectItem> getDsrCountrySelectItemsByName() {
        return dsrCountrySelectItemsByName;
    }

    public void setDsrCountrySelectItemsByName(List<SelectItem> dsrCountrySelectItemsByName) {
        this.dsrCountrySelectItemsByName = dsrCountrySelectItemsByName;
    }

    public List<SelectItem> getAddressDsrProvinceSelectItems() {
        return addressDsrProvinceSelectItems;
    }

    public void setAddressDsrProvinceSelectItems(List<SelectItem> addressDsrProvinceSelectItems) {
        this.addressDsrProvinceSelectItems = addressDsrProvinceSelectItems;
    }

    public boolean isDisplayDsrProvince() {
        return displayDsrProvince;
    }

    public void setDisplayDsrProvince(boolean displayDsrProvince) {
        this.displayDsrProvince = displayDsrProvince;
    }
}
