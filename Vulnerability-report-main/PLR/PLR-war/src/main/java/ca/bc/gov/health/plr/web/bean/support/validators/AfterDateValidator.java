/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.web.bean.support.validators;

import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import ca.bc.gov.health.plr.rule.provider.ValidateBeforeAfterDates;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.faces.application.FacesMessage;
import javax.faces.component.UIComponent;
import javax.faces.component.UIInput;
import javax.faces.context.FacesContext;
import javax.faces.validator.FacesValidator;
import javax.faces.validator.Validator;
import javax.faces.validator.ValidatorException;

/**
 * Custom validator to ensure one date is after another.
 * Must provide the reference to the beforeDate via an f:attribute
 * May provide custom error messsage via an errorMessage f:attribute
 * @author greg.perkins
 */
@FacesValidator(value = "afterDateValidator")
public class AfterDateValidator implements Validator {

    private ValidateBeforeAfterDates validator = new ValidateBeforeAfterDates();
    
    /**
     * Date formatter for building error messages
     */
    private static final SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy");
    
    /**
     * Runs validation check to ensure this component's date value is after the referenced component's date.
     * Assumes mandatory and pattern checks are done by other validators, so these will short-circuit the validation.
     * 
     * @param context FacesContext
     * @param component UIComponent
     * @param value Object
     * @throws ValidatorException 
     */
    @Override
    public void validate(FacesContext context, UIComponent component, Object value) throws ValidatorException {
        if (value == null) {
            return; //Can't proceed
        }
        
        UIInput beforeDateControl = (UIInput) component.getAttributes().get("beforeDate");
        if (!beforeDateControl.isValid()) {
            return;  //Can't proceed
        }
        
        Date beforeDate = (Date) beforeDateControl.getValue();
        if (beforeDate == null) {
            return; //Can't proceed
        }
        
        Date afterDate = (Date)value;
        
        BusinessRuleResult result = validator.validate(beforeDate, afterDate, null, null);
        
        if (!result.isValid()){
            ((UIInput)component).setValid(false);
            String errorMessage = (String)component.getAttributes().get("errorMessage");
            if (errorMessage==null || "".equals(errorMessage)){
                errorMessage = sdf.format(afterDate)+" must be after "+sdf.format(beforeDate);
            }
            throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,errorMessage,""));
        }
    }
}
