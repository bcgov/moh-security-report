package ca.bc.gov.health.plr.web.bean.provider;

import ca.bc.gov.health.plr.dto.provider.DemographicDetailsDto;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.MaintainDemographicDetailsService;
import ca.bc.gov.health.plr.service.provider.MaintainProviderService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import ca.bc.gov.health.plr.web.bean.provider.interfaces.GrowlEnabled;
import ca.bc.gov.health.plr.web.util.JSFUtils;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

/**
 * Backing bean for maintaining (creating/updating) demographic details for a specific provider.
 *
 * @author Grant.Hodgins
 * @author greg.perkins
 */
@ManagedBean
@ViewScoped
public class MaintainDemographicDetailsManager implements GrowlEnabled {

    @EJB
    protected MaintainDemographicDetailsService maintainDemographicDetailsService;
    @EJB
    protected MaintainProviderService maintainProviderService;
    private Long pauthId;
    private DemographicDetailsDto demographicDetailsDto;
    private List<DemographicDetailsDto> demographicDetails;


    /**
     * Initialize the backing transfer object. We'll do all at once since it's cheap and we don't know what the users
     * may choose.
     */
    @PostConstruct
    public void init() {
        setDemographicDetailsDto(new DemographicDetailsDto());
    }

    /**
     * Add or update a demographic record for a provider.
     */
    @Override
    public void save() {
        save(false);
    }

    /**
     * Add or update a demographic record for a provider.
     * @param pDetailsGrowl
     */
    @Override
    public void save(boolean pDetailsGrowl) {

        if (demographicDetailsDto.isNew()) {
            demographicDetailsDto.setPauthId(pauthId);
        }

        String growl = null;
        try {
            if (pDetailsGrowl) {
                growl = PlrManagedBean.PROVIDER_DETAILS_GROWL;
            }
            
            // if none selected null-out the other representations of birth country
            if(getDemographicDetailsDto().getBirthCountryCodeId() == null) {
                getDemographicDetailsDto().setBirthCountry(null);
                getDemographicDetailsDto().setBirthCountryCode(null);
            }

            // if none selected null-out the other representations of birth province/state
            if(getDemographicDetailsDto().getBirthProvStateCodeId() == null) {
                getDemographicDetailsDto().setBirthProvState(null);
            }
            
            maintainProviderService.save(getDemographicDetailsDto());

            refreshFromDatabase();
            String message = JSFUtils.prepareSuccessMessage("demographic details" , demographicDetailsDto);
            FacesContext.getCurrentInstance().addMessage(growl, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (DuplicateRecordException | BusinessRuleException | EntityValidationException ex) {
            FacesContext.getCurrentInstance().validationFailed();
            FacesContext.getCurrentInstance().addMessage(growl, new FacesMessage(FacesMessage.SEVERITY_ERROR, ex.getMessage(), ""));
        }
    }
    
    public DemographicDetailsDto getDemographicDetailsDto() {
        return demographicDetailsDto;
    }

    public void setDemographicDetailsDto(DemographicDetailsDto demographicDetailsDto) {
        this.demographicDetailsDto = demographicDetailsDto;
    }
    
    /**
     * @param demographicDetails the demographicDetails to set
     */
    public void setDemographicDetails(List<DemographicDetailsDto> demographicDetails) {
        this.demographicDetails = demographicDetails;
    }
    
    public List<DemographicDetailsDto> getDemographicDetails() {
        return demographicDetails;
    }

    /**
     * @param pauthId the pauthId to set
     */
    public void setPauthId(Long pauthId) {
        this.pauthId = pauthId;
    }

    private void refreshFromDatabase() {
        List<DemographicDetailsDto> freshDemographicDetails = maintainDemographicDetailsService.refreshDemographicDetails(pauthId);
        demographicDetails.clear();
        demographicDetails.addAll(freshDemographicDetails);
    }

}
