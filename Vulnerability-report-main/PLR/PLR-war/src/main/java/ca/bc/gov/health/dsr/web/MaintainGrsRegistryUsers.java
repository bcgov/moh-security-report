package ca.bc.gov.health.dsr.web;
import ca.bc.gov.health.plr.ejb.entity.*;
import ca.bc.gov.health.dsr.ejb.session.*;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.bean.ViewScoped;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.context.Flash;

/**
 * Backing bean for editing GrsRegistryUserss
 * @author JSF Code Generator
 */
@ManagedBean(name="MaintainGrsRegistryUsers")
@ViewScoped
public class MaintainGrsRegistryUsers implements java.io.Serializable{
    /* EJB to handle persistence */
    @EJB
    private GrsRegistryUserFacadeLocal grsRegistryUsersFacade;


    /* EJB for dealing with GrsParties instances */
    @EJB
    private GrsPartyFacadeLocal grsPartiesFacade;
    /* Instace we're currently editing */
    private GrsRegistryUsers grsRegistryUsers;

    /* Flash scope to handle passing parameters from other views */
    @ManagedProperty("#{flash}")
    private Flash flash;

    /**
     * Default Constructor
     */
    public MaintainGrsRegistryUsers(){}

    /**
     * Initializes this bean
     */
    @PostConstruct
    public void init(){
        grsRegistryUsers = new GrsRegistryUsers();
        if (flash.get("selectedKey")!=null){
            grsRegistryUsers = grsRegistryUsersFacade.find(flash.get("selectedKey"));
        }
        if (flash.get("partyPartyId")!=null){
            grsRegistryUsers.setPartyPartyId(grsPartiesFacade.find(flash.get("partyPartyId")));
        }
        if(grsRegistryUsers.getPartyPartyId()==null){
            grsRegistryUsers.setPartyPartyId(new GrsParties());
        }
    }

    /**
     * Selects a record to update
     */
    public String select(){
         flash.keep("selectedKey");
        return "MaintainGrsRegistryUsers.xhtml";
    }
    /**
     * Adds a new record
     */
    public String add(){
        nullify();
        grsRegistryUsersFacade.create(grsRegistryUsers);
        addPlaceholders();
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update(){
        nullify();
        grsRegistryUsersFacade.edit(grsRegistryUsers);
        addPlaceholders();
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete(){
        nullify();
        grsRegistryUsersFacade.remove(grsRegistryUsers);
        return clear();
    }

    /**
     * Clears the form
     */
    public String clear(){
        grsRegistryUsers = new GrsRegistryUsers();
        addPlaceholders();
        return "MaintainGrsRegistryUsers.xhtml";
    }
    /**
     * Nullifys any child objects which don't have valid PKs set
     */
    private void nullify(){
        if (grsRegistryUsers.getPartyPartyId()!=null && grsRegistryUsers.getPartyPartyId().getPartyId()==null){
            grsRegistryUsers.setPartyPartyId(null);
        }
    }
    /**
     * Defaults parent objects which don't have valid PKs set
     */
    private void addPlaceholders(){
        if (grsRegistryUsers.getPartyPartyId()==null){
            grsRegistryUsers.setPartyPartyId(new GrsParties());
        }
    }
    /* Getters and Setters */
    public GrsRegistryUsers getGrsRegistryUsers(){
        return grsRegistryUsers;
    }
    public void setGrsRegistryUsers(GrsRegistryUsers grsRegistryUsers){
        this.grsRegistryUsers = grsRegistryUsers;
    }
    public Flash getFlash(){
        return flash;
    }
    public void setFlash(Flash flash){
        this.flash = flash;
    }
}