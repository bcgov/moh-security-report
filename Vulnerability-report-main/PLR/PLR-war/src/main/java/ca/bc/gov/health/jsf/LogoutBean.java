package ca.bc.gov.health.jsf;

import ca.bc.gov.health.security.OidcConfig;
import fish.payara.security.connectors.openid.api.OpenIdContext;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import javax.inject.Inject;

/**
 * Holds the currently selected top-level menu
 *
 * @author adebiyi.kuseju
 */
@ManagedBean(name = "LogoutBean")
@SessionScoped
public class LogoutBean {
    
    @Inject
    private OpenIdContext context;

    @Inject
    private OidcConfig oidcConfig;
    
    public LogoutBean() {
    }

    public void logout() throws UnsupportedEncodingException, IOException {
        String logoutUrl;
        String keycloakLogoutUrl
                = oidcConfig.getProviderUri()
                + "protocol/openid-connect/logout?redirect_uri="
                + URLEncoder.encode(oidcConfig.getRedirectUri(), "UTF-8");

        if (context.getAccessToken() != null) {
            String idp = (String) context.getAccessToken().getClaim("identity_provider");
            if (idp != null) {
                switch (idp) {
                    case "idir":
                        /**
                         * Currently Keycloak does not support logging out of SiteMinder IDP's automatically so we set
                         * the Keycloak Logout redirect_uri= parameter to be the SiteMinder logout and we set the
                         * SiteMinder returl= parameter to be application which chains both logouts for full Single Sign
                         * Out. https://github.com/bcgov/ocp-sso/issues/4
                         */
                        logoutUrl
                                = oidcConfig.getSiteminderLogoutUri()
                                + "?retnow=1&returl="
                                + oidcConfig.getRedirectUri();
                        keycloakLogoutUrl
                                = oidcConfig.getProviderUri()
                                + "protocol/openid-connect/logout?redirect_uri="
                                + URLEncoder.encode(logoutUrl, "UTF-8");
                        break;
                    case "phsa":
                        keycloakLogoutUrl
                                = oidcConfig.getPhsaLogoutUri();
                        break;
                    default:
                        break;
                }
            }
        }

        FacesContext.getCurrentInstance().getExternalContext().redirect(keycloakLogoutUrl);
        FacesContext.getCurrentInstance().getExternalContext().invalidateSession();
    }
}
