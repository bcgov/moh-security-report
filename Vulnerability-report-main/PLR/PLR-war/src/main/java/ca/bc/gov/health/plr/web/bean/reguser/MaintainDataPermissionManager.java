package ca.bc.gov.health.plr.web.bean.reguser;

import ca.bc.gov.health.plr.dto.reguser.AccessProfileDto;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.registry.user.MaintainAccessProfileService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import ca.bc.gov.health.plr.web.bean.provider.interfaces.GrowlEnabled;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.validation.ConstraintViolation;
import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;

/**
 *
 */
@ManagedBean
@ViewScoped
public class MaintainDataPermissionManager implements GrowlEnabled {

    @EJB
    protected MaintainAccessProfileService maintainAccessProfileService;
    
    private AccessProfileDto accessProfileDto;
    private List<AccessProfileDto> profiles;
    /**
     * panel identifer ajax should use when re-rendering
     */
    private String panelToUpdate;
    
    private Long ruId;

    /**
     * Initialize the backing transfer objects. We'll do all at once since it's
     * cheap and we don't know what the users may choose.
     */
    @PostConstruct
    public void init() {
        accessProfileDto = new AccessProfileDto();
        panelToUpdate = ":permissionPanel";
        ruId = 0L;
    }

    /**
     * Initial method called from page which determines if the request is an add
     * or an update does not use growl
     */
    @Override
    public void save() {
        save(false);
    }

    /**
     * Initial method called from page which determines if the request is an add
     * or an update
     *
     * @param pDetailsGrowl boolean indicating if the page growl should be used
     */
    @Override
    public void save(boolean pDetailsGrowl) {
        FacesContext context = FacesContext.getCurrentInstance();
        //ensures that class level constraints are fired/checked
        boolean passedValidation = preProcessDto(context, accessProfileDto);
        if (!passedValidation) {
            context.validationFailed();
            return;
        }

        if (this.accessProfileDto.isNew()) {
            if(ruId != 0L){
                accessProfileDto.setRuRuId(ruId);
            } 
        }
        String growl = null;
        try {
            if (pDetailsGrowl) {
                growl = PlrManagedBean.PROVIDER_DETAILS_GROWL;
            }

            AccessProfileDto temp = getAccessProfileDto();
            AccessProfileDto newAccessProfile = maintainAccessProfileService.save(temp);
            if(profiles != null){
                profiles.clear();
            } else {
                profiles = new ArrayList<>();
            }
            profiles.addAll(maintainAccessProfileService.refreshAllAccessProfiles(newAccessProfile));
            String message = "The data permission was successfully " + (accessProfileDto.isNew() ? "created." : "updated.");

            context.addMessage(growl, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (DuplicateRecordException dre) {
            context.addMessage(growl, new FacesMessage(FacesMessage.SEVERITY_ERROR, dre.getMessage(), ""));
            context.validationFailed();
        } catch (EntityValidationException ex) {
            context.addMessage(growl, new FacesMessage(FacesMessage.SEVERITY_ERROR, ex.getMessage(), ""));
            context.validationFailed();
        }
    }

    /**
     *
     * @return the : started representation of the panel to update
     */

    public String getPanelToUpdate() {
        return panelToUpdate;
    }

    /**
     *
     * @param panelToUpdate the : started representation of the panel to update
     */

    public void setPanelToUpdate(String panelToUpdate) {
        this.panelToUpdate = panelToUpdate;
    }

    /**
     * ensures that class level constraints are fired/checked
     *
     * @param context - faces context to inject messages if failures encountered
     * @param toProcess - the Address to call validation on.
     * @return true if all constraints passed. false if DTO failed any
     * validation
     */
    private boolean preProcessDto(FacesContext context, AccessProfileDto toProcess) {
        ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
        Validator validator = factory.getValidator();
        Set<ConstraintViolation<AccessProfileDto>> constraintViolations = validator.validate(toProcess);
        if (!constraintViolations.isEmpty()) {
            for (ConstraintViolation<?> constraintViolation : constraintViolations) {
                FacesMessage facesMessage = new FacesMessage(constraintViolation.getMessage());
                facesMessage.setSeverity(FacesMessage.SEVERITY_ERROR);
                context.addMessage(null, facesMessage);
            }
            return false;
        }
        return true;
    }

    public Long getRuId() {
        return ruId;
    }

    public void setRuId(Long ruId) {
        this.ruId = ruId;
    }

    public AccessProfileDto getAccessProfileDto() {
        return accessProfileDto;
    }

    public void setAccessProfileDto(AccessProfileDto accessProfileDto) {
        this.accessProfileDto = accessProfileDto;
    }

    public List<AccessProfileDto> getProfiles() {
        return profiles;
    }

    public void setProfiles(List<AccessProfileDto> profiles) {
        this.profiles = profiles;
    }

    
}
