package ca.bc.gov.health.dsr.web;
import ca.bc.gov.health.plr.ejb.entity.*;
import ca.bc.gov.health.dsr.ejb.session.*;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.bean.ViewScoped;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.context.Flash;

/**
 * Backing bean for editing PrsWorkLocationDetailss
 * @author JSF Code Generator
 */
@ManagedBean(name="MaintainPrsWorkLocationDetails")
@ViewScoped
public class MaintainPrsWorkLocationDetails implements java.io.Serializable{
    /* EJB to handle persistence */
    @EJB
    private PrsWorkLocationDetailFacadeLocal prsWorkLocationDetailsFacade;


    /* EJB for dealing with PrsWorkLocations instances */
    @EJB
    private PrsWorkLocationFacadeLocal prsWorkLocationsFacade;

    /* EJB for dealing with GrsCtLeaf instances */
    @EJB
    private PrsCtWorkLocationPurpsFacadeLocal prsCtWorkLocationPurpsFacade;
    /* Instace we're currently editing */
    private PrsWorkLocationDetails prsWorkLocationDetails;

    /* Flash scope to handle passing parameters from other views */
    @ManagedProperty("#{flash}")
    private Flash flash;

    /**
     * Default Constructor
     */
    public MaintainPrsWorkLocationDetails(){}

    /**
     * Initializes this bean
     */
    @PostConstruct
    public void init(){
        prsWorkLocationDetails = new PrsWorkLocationDetails();
        if (flash.get("selectedKey")!=null){
            prsWorkLocationDetails = prsWorkLocationDetailsFacade.find(flash.get("selectedKey"));
        }
        if (flash.get("wlWlId")!=null){
            prsWorkLocationDetails.setWlWlId(prsWorkLocationsFacade.find(flash.get("wlWlId")));
        }
        if(prsWorkLocationDetails.getWlWlId()==null){
            prsWorkLocationDetails.setWlWlId(new PrsWorkLocations());
        }
        if (flash.get("workLocationTypeId")!=null){
            prsWorkLocationDetails.setWorkLocationTypeId(prsCtWorkLocationPurpsFacade.find(flash.get("workLocationTypeId")));
        }
        if(prsWorkLocationDetails.getWorkLocationTypeId()==null){
            prsWorkLocationDetails.setWorkLocationTypeId(new PrsCtWorkLocationPurps());
        }
    }

    /**
     * Selects a record to update
     */
    public String select(){
         flash.keep("selectedKey");
        return "MaintainPrsWorkLocationDetails.xhtml";
    }
    /**
     * Adds a new record
     */
    public String add(){
        nullify();
        prsWorkLocationDetailsFacade.create(prsWorkLocationDetails);
        addPlaceholders();
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update(){
        nullify();
        prsWorkLocationDetailsFacade.edit(prsWorkLocationDetails);
        addPlaceholders();
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete(){
        nullify();
        prsWorkLocationDetailsFacade.remove(prsWorkLocationDetails);
        return clear();
    }

    /**
     * Clears the form
     */
    public String clear(){
        prsWorkLocationDetails = new PrsWorkLocationDetails();
        addPlaceholders();
        return "MaintainPrsWorkLocationDetails.xhtml";
    }
    /**
     * Nullifys any child objects which don't have valid PKs set
     */
    private void nullify(){
        if (prsWorkLocationDetails.getWlWlId()!=null && prsWorkLocationDetails.getWlWlId().getWlId()==null){
            prsWorkLocationDetails.setWlWlId(null);
        }
        if (prsWorkLocationDetails.getWorkLocationTypeId()!=null && prsWorkLocationDetails.getWorkLocationTypeId().getCtlId()==null){
            prsWorkLocationDetails.setWorkLocationTypeId(null);
        }
    }
    /**
     * Defaults parent objects which don't have valid PKs set
     */
    private void addPlaceholders(){
        if (prsWorkLocationDetails.getWlWlId()==null){
            prsWorkLocationDetails.setWlWlId(new PrsWorkLocations());
        }
        if (prsWorkLocationDetails.getWorkLocationTypeId()==null){
            prsWorkLocationDetails.setWorkLocationTypeId(new PrsCtWorkLocationPurps());
        }
    }
    /* Getters and Setters */
    public PrsWorkLocationDetails getPrsWorkLocationDetails(){
        return prsWorkLocationDetails;
    }
    public void setPrsWorkLocationDetails(PrsWorkLocationDetails prsWorkLocationDetails){
        this.prsWorkLocationDetails = prsWorkLocationDetails;
    }
    public Flash getFlash(){
        return flash;
    }
    public void setFlash(Flash flash){
        this.flash = flash;
    }
}