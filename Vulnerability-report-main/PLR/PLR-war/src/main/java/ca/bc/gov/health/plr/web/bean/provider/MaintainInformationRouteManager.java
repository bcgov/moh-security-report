package ca.bc.gov.health.plr.web.bean.provider;

import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtMechanisms;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.MaintainAddressService;
import ca.bc.gov.health.plr.service.provider.MaintainElectronicAddressService;
import ca.bc.gov.health.plr.service.provider.MaintainInformationRouteService;
import ca.bc.gov.health.plr.service.provider.MaintainProviderServiceHelper;
import ca.bc.gov.health.plr.service.provider.MaintainTelephoneService;
import ca.bc.gov.health.plr.service.provider.MaintainWorkLocationService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import ca.bc.gov.health.plr.web.util.JSFUtils;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;

/**
 * Backing bean for MaintainInformationRoute.xhtml.
 *
 * Referenced by InformationRoutes.xhtml and WorkLocations.xhtml.
 *
 * @author ian.scott
 */
@ManagedBean
@ViewScoped
public class MaintainInformationRouteManager implements Serializable {

    @EJB
    private MaintainWorkLocationService maintainWorkLocationService;
    @EJB
    private MaintainProviderServiceHelper maintainProviderServiceHelper;
    @EJB
    private MaintainAddressService maintainAddressService;
    @EJB
    private MaintainTelephoneService maintainTelephoneService;
    @EJB
    private MaintainElectronicAddressService maintainElectronicAddressService;
    @EJB
    private MaintainInformationRouteService maintainInformationRouteService;
    @EJB
    private CodesDao codesDao;
    private InformationRouteDto dto = new InformationRouteDto();
    private String panelToUpdate;
    private ProviderDto providerDetails;
    private WorkLocationDto workLocation;
    private List<SelectItem> addressSelectItems;
    private boolean isWorkLocationParent = false;

    /**
     * Initialize the backing transfer objects.
     */
    @PostConstruct
    public void init() {
        resetDto();
    }
    
    /**
     * Resets the DTO so that the backing-bean can be re-used in the same view.
     */
    public void resetDto() {
        dto = new InformationRouteDto();
    }

    /**
     * Adds or Updates an Information Route.
     */
    public void save() {
        if (providerDetails == null && workLocation == null) {
            throw new IllegalStateException("One of providerDetails or workLocation must be set.");
        }

        if (dto.isNew()) {
            if (!isWorkLocationParent) {
                dto.setPauthId(providerDetails.getPauthId());
            } else if (isWorkLocationParent) {
                dto.setWlWlId(workLocation.getId());
            }
        }
        try {
            maintainProviderServiceHelper.processInformationRoute(dto, providerDetails, null);

            String message = JSFUtils.prepareSuccessMessage("Communication Preference", dto);
            FacesContext.getCurrentInstance().addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (DuplicateRecordException | EntityValidationException | BusinessRuleException dre) {
            FacesContext.getCurrentInstance().addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_ERROR, dre.getMessage(), ""));
            FacesContext.getCurrentInstance().validationFailed();
        }

        List<InformationRouteDto> informationRoutes = maintainInformationRouteService.getInformationRoutes(dto);
        if (!isWorkLocationParent) {
            providerDetails.setInformationRoutes(informationRoutes);
        } else if (isWorkLocationParent && this.providerDetails.getWorkLocationList() != null) {
            //maintain provider worklocation's communication preference
            //providerDetails is actually ViewProviderManager.providerDetailsCopy which passed in from WorkLocation.xhtml address section
            //so it needs to be updated in order to refect the up-to-date values
            for (WorkLocationDto wlDto : this.providerDetails.getWorkLocationList()) {
                if (wlDto.getId().equals(this.workLocation.getId())) {
                    wlDto.setInformationRoutes(informationRoutes);
                    break;
                }
            }
        }
        isWorkLocationParent = false;
    }

    /**
     * @return the dialog will update this panel when required (e.g. a route has
     * been added).
     */
    public String getPanelToUpdate() {
        return panelToUpdate;
    }

    /**
     * The dialog will update this panel when required (e.g. a route has been
     * added).
     *
     * @param panelToUpdate
     */
    public void setPanelToUpdate(String panelToUpdate) {
        this.panelToUpdate = panelToUpdate;
    }

    public InformationRouteDto getDto() {
        return dto;
    }

    public void setDto(InformationRouteDto infoRouteDto) {
        this.dto = infoRouteDto;
    }

    /**
     * Convert chosen GRS_CT_MECHANISM to a String for
     * {@link #getSelectedMechanism()}.
     */
    public void handleMechanismChange() {
        String selectedMechanism = codesDao.lookup(GrsCtMechanisms.class, dto.getMechanismTypeId()).getCtlNameCode();
        dto.setMechanismTypeCode(selectedMechanism);
        dto.setWorkLocationIdentifier(null);
    }

    public void handleAddressChange() {
        dto.setAddressDto(maintainAddressService.refresh(dto.getAddressDto()));
        updateWorkLocationIdentifier(dto.getAddressDto().getWlWlId());
    }

    public void handleElectronicAddressChange() {
        dto.setElectronicAddressDto(maintainElectronicAddressService.refresh(dto.getElectronicAddressDto()));
        updateWorkLocationIdentifier(dto.getElectronicAddressDto().getWlWlId());
    }

    public void handleTelecommunicationChange() {
        dto.setTelecommunicationDto(maintainTelephoneService.refresh(dto.getTelecommunicationDto()));
        updateWorkLocationIdentifier(dto.getTelecommunicationDto().getWlWlId());
    }

    private void updateWorkLocationIdentifier(Long wlWlId) {
        if (wlWlId != null) {
            WorkLocationDto wl = maintainWorkLocationService.getWorkLocation(wlWlId);
            dto.setWorkLocationIdentifier(wl.getIdentifier());
            dto.setWorkLocationDataOwnerCode(wl.getDataOwnerCode());
        } else {
            dto.setWorkLocationIdentifier(null);
        }
    }

    public List<SelectItem> getAddressSelectItems() {
        List<AddressDto> addresses = providerDetails.getAllActiveAddresses();
        addressSelectItems = new ArrayList<>();
        for (AddressDto address : addresses) {
            StringBuilder sb = new StringBuilder();
            sb.append(address.getAddressLineOne());
            sb.append(" (");
            sb.append(address.getType());
            sb.append(", ");
            sb.append(address.getCommunicationPurpose());
            sb.append(", ");
            sb.append(address.getDataOwnerCode());
            if (address.getWlWlId() != null) {
                WorkLocationDetailsDto wlDetailsDto = maintainWorkLocationService.getFirstNonEndedWorkLocationsDetails(address.getWlWlId());
                if (wlDetailsDto != null && wlDetailsDto.getName() != null) {
                    sb.append(", ");
                    sb.append(wlDetailsDto.getName().trim());
                }
            }
            sb.append(")");
            addressSelectItems.add(new SelectItem(address.getId(), sb.toString()));
        }
        return addressSelectItems;
    }

    public List<SelectItem> getTelecommunicationSelectItems() {
        List<TelecommunicationDto> telecommunications = providerDetails.getAllActiveTelecommunications();
        addressSelectItems = new ArrayList<>();
        for (TelecommunicationDto telecommunication : telecommunications) {
            StringBuilder sb = new StringBuilder();
            sb.append("(");
            sb.append(telecommunication.getAreaCode());
            sb.append(")");
            sb.append(telecommunication.getNumber());
            sb.append(" (");
            sb.append(telecommunication.getType());
            sb.append(", ");
            sb.append(telecommunication.getCommunicationPurpose());
            sb.append(", ");
            sb.append(telecommunication.getDataOwnerCode());
            if (telecommunication.getWlWlId() != null) {
                WorkLocationDetailsDto wlDetailsDto = maintainWorkLocationService.getFirstNonEndedWorkLocationsDetails(telecommunication.getWlWlId());
                if (wlDetailsDto != null && wlDetailsDto.getName() != null) {
                    sb.append(", ");
                    sb.append(wlDetailsDto.getName().trim());
                }
            }
            sb.append(")");
            addressSelectItems.add(new SelectItem(telecommunication.getId(), sb.toString()));
        }
        return addressSelectItems;
    }

    public List<SelectItem> getElectronicAddressSelectItems() {
        List<ElectronicAddressDto> addresses = providerDetails.getAllActiveElectronicAddresses();

        addressSelectItems = new ArrayList<>();
        for (ElectronicAddressDto address : addresses) {
            StringBuilder sb = new StringBuilder();
            sb.append(address.getAddress());
            sb.append(" (");
            sb.append(address.getType());
            sb.append(", ");
            sb.append(address.getCommunicationPurpose());
            sb.append(", ");
            sb.append(address.getDataOwnerCode());
            if (address.getWlWlId() != null) {
                WorkLocationDetailsDto wlDetailsDto = maintainWorkLocationService.getFirstNonEndedWorkLocationsDetails(address.getWlWlId());
                if (wlDetailsDto != null && wlDetailsDto.getName() != null) {
                    sb.append(", ");
                    sb.append(wlDetailsDto.getName().trim());
                }
            }
            sb.append(")");
            addressSelectItems.add(new SelectItem(address.getId(), sb.toString()));
        }
        return addressSelectItems;
    }

    public WorkLocationDto getWorkLocation() {
        return workLocation;
    }

    public void setWorkLocation(WorkLocationDto workLocation) {
        this.workLocation = workLocation;
        isWorkLocationParent = true;
    }

    public ProviderDto getProviderDetails() {
        return providerDetails;
    }

    public void setProviderDetails(ProviderDto providerDetails) {
        this.providerDetails = providerDetails;
    }
}
