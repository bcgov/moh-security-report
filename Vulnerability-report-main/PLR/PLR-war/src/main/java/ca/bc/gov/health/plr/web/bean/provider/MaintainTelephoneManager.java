package ca.bc.gov.health.plr.web.bean.provider;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.provider.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDto;
import ca.bc.gov.health.plr.ejb.entity.CodeTableInterface;
import ca.bc.gov.health.plr.ejb.session.PrsCtCommunPurposeTypesFacade;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.MaintainProviderServiceHelper;
import ca.bc.gov.health.plr.service.provider.MaintainTelephoneService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import ca.bc.gov.health.plr.web.bean.provider.interfaces.GrowlEnabled;
import ca.bc.gov.health.plr.web.bean.provider.interfaces.WorkLocationChild;
import ca.bc.gov.health.plr.web.util.JSFUtils;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;

/**
 *
 * @author ian.scott
 */
@ManagedBean
@ViewScoped
public class MaintainTelephoneManager extends MaintainLocationManager implements GrowlEnabled, WorkLocationChild {

    @EJB
    protected MaintainTelephoneService maintainTelephoneService;
    @EJB
    protected MaintainProviderServiceHelper maintainProviderServiceHelper;

    @EJB
    private transient PrsCtCommunPurposeTypesFacade prsCtCommunPurposeTypesFacade;

    private Long pauthId;
    private Long workLocationId;
    protected TelecommunicationDto telephoneDto;
    protected List<TelecommunicationDto> telephones;
    /**
     * panel identifer ajax should use when re-rendering
     */
    private String panelToUpdate;

    private Long ruId;
    private List<SelectItem> prsCtTelecomPurposeCdByTelecomType;
    private List<SelectItem> prsCtTelecomPurposeCdByTelecomTypeSelectItems;
    /**
     * Work location identifier for telecom template
     */
    private boolean isWorkLocTelecom;

    /**
     * Initialize the backing transfer objects. We'll do all at once since it's
     * cheap and we don't know what the users may choose.
     */
    @PostConstruct
    public void init() {
        telephoneDto = new TelecommunicationDto();
        //set to default
        pauthId = 0l;
        workLocationId = 0l;
        panelToUpdate = ":telecommunicationsPanel";
        ruId = 0L;
        initPrsCtTelecomPurposeCdByTypeCode();
        prsCtTelecomPurposeCdByTelecomTypeSelectItems = prsCtTelecomPurposeCdByTelecomType;
        isWorkLocTelecom = false;
    }

    /**
     * Initial method called from page which determines if the request is an add
     * or an update does not use growl
     */
    @Override
    public void save() {
        save(false);
    }

    /**
     * Initial method called from page which determines if the request is an add
     * or an update
     *
     * @param pDetailsGrowl boolean indicating if the page growl should be used
     */
    @Override
    public void save(boolean pDetailsGrowl) {
        if (this.telephoneDto.isNew()) {
            if (pauthId != 0l && workLocationId != 0l && ruId != 0L) {
                throw new UnsupportedOperationException("Telephone Manager: Code Change Required - both values not default.");
            }
            //if both 0l let JPA handle failure
            if (pauthId != 0l) {
                telephoneDto.setPauthId(pauthId);
            } else if (ruId != 0L) {
                telephoneDto.setRuRuId(ruId);
            } else {
                telephoneDto.setWlWlId(workLocationId);
            }
        }
        String growl = null;
        try {
            if (pDetailsGrowl) {
                growl = PlrManagedBean.PROVIDER_DETAILS_GROWL;
            }

            maintainProviderServiceHelper.processLocation(telephoneDto, providerDetails, null);
            if (telephones != null) {
                telephones.clear();
            } else {
                telephones = new ArrayList<>();
            }

            telephones.addAll(maintainTelephoneService.refreshTelecommunications(telephoneDto));

            //if workLocationId is 0, the request is to maintain provider's telecommunication
            //if workLocationId is not 0, the request is to maintain provider worklocation's telecommunication
            if (workLocationId != 0l && super.providerDetails.getWorkLocationList() != null) {
                //maintain provider worklocation's telecommunication
                //providerDetails is actually ViewProviderManager.providerDetailsCopy which passed in from WorkLocation.xhtml telecommunication section
                //so it needs to be updated in order to refect the up-to-date values
                for (WorkLocationDto wlDto : super.providerDetails.getWorkLocationList()) {
                    if (wlDto.getId().equals(this.workLocationId)) {
                        wlDto.setTelecommunications(telephones);
                        break;
                    }
                }
            }
            String message = JSFUtils.prepareSuccessMessage("Telephone Number", telephoneDto);
            FacesContext.getCurrentInstance().addMessage(growl, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (DuplicateRecordException | BusinessRuleException | EntityValidationException dre) {
            FacesContext.getCurrentInstance().addMessage(growl, new FacesMessage(FacesMessage.SEVERITY_ERROR, dre.getMessage(), ""));
            FacesContext.getCurrentInstance().validationFailed();
        }

    }

    public TelecommunicationDto getTelephoneDto() {
        return telephoneDto;
    }

    public void setTelephoneDto(TelecommunicationDto telephoneDto) {
        this.telephoneDto = telephoneDto;
    }

    public void setTelephones(List<TelecommunicationDto> telephones) {
        this.telephones = telephones;
    }

    /**
     * @param pauthId the pauthId to set
     */
    @Override
    public void setPauthId(Long pauthId) {
        this.workLocationId = 0L;
        this.pauthId = pauthId;
    }

    /**
     *
     * @return the : started representation of the panel to update
     */
    @Override
    public String getPanelToUpdate() {
        return panelToUpdate;
    }

    /**
     *
     * @param panelToUpdate the : started representation of the panel to update
     */
    @Override
    public void setPanelToUpdate(String panelToUpdate) {
        this.panelToUpdate = panelToUpdate;
    }

    /**
     *
     * @param workLocationId the id of the work location
     */
    @Override
    public void setWorkLocationId(Long workLocationId) {
        this.pauthId = 0L;
        this.workLocationId = workLocationId;
    }

    public Long getRuId() {
        return ruId;
    }

    public void setRuId(Long ruId) {
        this.ruId = ruId;
    }

    public List<SelectItem> getPrsCtTelecomPurposeCdByTelecomTypeSelectItems() {
        return prsCtTelecomPurposeCdByTelecomTypeSelectItems;
    }

    public void setPrsCtTelecomPurposeCdByTelecomTypeSelectItems(List<SelectItem> prsCtTelecomPurposeCdByTelecomTypeSelectItems) {
        this.prsCtTelecomPurposeCdByTelecomTypeSelectItems = prsCtTelecomPurposeCdByTelecomTypeSelectItems;
    }

    /**
     * Initialize the list of Purpose Code telecom types.
     */
    private void initPrsCtTelecomPurposeCdByTypeCode() {
        prsCtTelecomPurposeCdByTelecomType = convertToSelectItems(prsCtCommunPurposeTypesFacade.findAll());
    }

    /**
     * Find the list of Telecom Purpose codes.
     *
     * @return the list of codes
     */
    public List<SelectItem> getPrsCtTelecomPurposeCdByTelecomType() {
        return prsCtTelecomPurposeCdByTelecomType;
    }

    /**
     * Converts a list of code table entities into a SelectItem list where the
     * code ID is the value.
     *
     * @param codeTableEntities a list of code table entities.
     * @return a SelectItem list where the code ID is the value.
     */
    private List<SelectItem> convertToSelectItems(List<? extends CodeTableInterface> codeTableEntities) {
        return convertToSelectItems(codeTableEntities, true);
    }

    /**
     * Converts a list of code table entities into a SelectItem list where the
     * code ID is the value.
     *
     * @param codeTableEntities a list of code table entities.
     * @param includeSelect : If true then select one option will be included
     *
     * @return a SelectItem list where the code ID is the value.
     */
    private List<SelectItem> convertToSelectItems(List<? extends CodeTableInterface> codeTableEntities, boolean includeSelect) {
        List<SelectItem> selectItems = new ArrayList<>();
        if (includeSelect) {
            SelectItem empty = new SelectItem(null, Consts.SELECT_ONE_LABLE);
            empty.setNoSelectionOption(true);
            selectItems.add(empty);
        }
        for (CodeTableInterface row : codeTableEntities) {
            if (row.getEndReasonCode() == null && CodeTableCodes.GrsCtBooleanTypes.YES.getValue().equals(row.getActiveFlag())) {
                selectItems.add(new SelectItem(row.getCtlId(), row.getCtlNameCode() + " - " + row.getCtlDescTxt()));
            }
        }
        return selectItems;
    }

    public void telecomTypeCodeChanged(Long updatedTelecomTypeCode) {
        prsCtTelecomPurposeCdByTelecomTypeSelectItems = maintainTelephoneService.initTelecomPurposeCdDropdownByType(updatedTelecomTypeCode);

    }

    public boolean isIsWorkLocTelecom() {
        return isWorkLocTelecom;
    }

    public void setIsWorkLocTelecom(boolean isWorkLocTelecom) {
        this.isWorkLocTelecom = isWorkLocTelecom;
    }

}
