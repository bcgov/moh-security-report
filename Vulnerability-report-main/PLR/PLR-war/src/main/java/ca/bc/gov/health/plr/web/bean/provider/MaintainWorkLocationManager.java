package ca.bc.gov.health.plr.web.bean.provider;

import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDetailsDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDto;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.MaintainProviderService;
import ca.bc.gov.health.plr.service.provider.MaintainWorkLocationService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import ca.bc.gov.health.plr.web.util.JSFUtils;
import java.io.Serializable;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

/**
 * Backing bean for both WorkLocation and WorkLocationDetails as the two
 * concepts are tightly coupled, to a degree where differentiating is somewhat
 * pointless
 *
 * @author ian.scott
 */
@ManagedBean
@ViewScoped
public class MaintainWorkLocationManager implements Serializable {

    @EJB
    private MaintainWorkLocationService service;
    @EJB
    protected MaintainProviderService maintainProviderService;

    private WorkLocationDetailsDto workLocationDetailsDto = new WorkLocationDetailsDto();
    private WorkLocationDto workLocationDto = new WorkLocationDto();
    private ProviderDto providerDetails;
    // panel identifer ajax should use when re-rendering 
    private String panelToUpdate = "";
    
    /**
     * Initialize the backing transfer objects.
     */
    @PostConstruct
    public void init() {
        resetDto();
    }

    /**
     * Resets the DTO so that the backing-bean can be re-used in the same view.
     */
    public void resetDto() {
        providerDetails = null;
        workLocationDetailsDto = new WorkLocationDetailsDto();
        workLocationDto = new WorkLocationDto();
    }

    /**
     * Initial method called from page which determines if the request is an add
     * or an update
     *
     * The workLocationDto and workLocationDetailsDto must be in one of two
     * valid states:
     *
     * <ol>
     * <li>workLocationDto and workLocationDetailsDto are new (adding)</li>
     * <li> workLocationDto and workLocationDetails already exist
     * (updating)</li>
     * </ol>
     *
     * Any other state will result in an exception.
     */
    public void save() {
        if (!isAddOrUpdate()) {
            throw new IllegalStateException("Program error. Operation must be valid add or update.");
        }

        try {
            String message;
            if (workLocationDto.isNew()) {
                addWorkLocationAndDetail();
                message = "The Work Location was successfully created.";
            } else {
                updateWorkLocationDetail();
                message = JSFUtils.prepareSuccessMessage("Work Location Details" , workLocationDetailsDto);
            }
            FacesContext.getCurrentInstance().addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (DuplicateRecordException | BusinessRuleException |  EntityValidationException ex) {
            FacesContext.getCurrentInstance().addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_ERROR, ex.getMessage(), ""));
            FacesContext.getCurrentInstance().validationFailed();
        }
    }

    private void addWorkLocationAndDetail() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {
        workLocationDto.setPauthId(providerDetails.getPauthId());        
        maintainProviderService.saveNewWorkLocationAndDetail(workLocationDto, workLocationDetailsDto);
        List<WorkLocationDto> workLocations = service.getWorkLocations(providerDetails);
        providerDetails.setWorkLocationList(workLocations);
    }

    private void updateWorkLocationDetail() throws DuplicateRecordException, EntityValidationException, BusinessRuleException {
        maintainProviderService.updateWorkLocationDetail(providerDetails, workLocationDetailsDto);
        List<WorkLocationDto> workLocations = service.getWorkLocations(providerDetails);
        providerDetails.setWorkLocationList(workLocations);
    }
    
    private boolean isAddOrUpdate() {
        return isAdd() || isUpdate();
    }

    private boolean isAdd() {
        return workLocationDto.isNew() && workLocationDetailsDto.isNew();
    }

    private boolean isUpdate() {
        return !workLocationDto.isNew() && !workLocationDetailsDto.isNew();
    }

    public String getPanelToUpdate() {
        return panelToUpdate;
    }

    public void setPanelToUpdate(String panelToUpdate) {
        this.panelToUpdate = panelToUpdate;
    }

    public WorkLocationDetailsDto getWorkLocationDetailsDto() {
        return workLocationDetailsDto;
    }

    public void setWorkLocationDetailsDto(WorkLocationDetailsDto workLocationDetailsDto) {
        this.workLocationDetailsDto = workLocationDetailsDto;
    }

    public WorkLocationDto getWorkLocationDto() {
        return workLocationDto;
    }

    public void setWorkLocationDto(WorkLocationDto workLocationDto) {
        this.workLocationDto = workLocationDto;
    }

    public ProviderDto getProviderDetails() {
        return providerDetails;
    }

    public void setProviderDetails(ProviderDto providerDetails) {
        this.providerDetails = providerDetails;
    }

}
