package ca.bc.gov.health.plr.web;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.ejb.entity.CodeTableInterface;
import ca.bc.gov.health.plr.ejb.entity.GrsAccessProfileGroups;
import ca.bc.gov.health.plr.ejb.entity.GrsRegistryUsers;
import ca.bc.gov.health.plr.ejb.entity.PrsCtDataOwnerCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvExpertiseTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProviderRoleTypes;
import ca.bc.gov.health.plr.ejb.session.GrsAccessProfileGroupsFacade;
import ca.bc.gov.health.plr.ejb.session.GrsCtDataObjectsFacade;
import ca.bc.gov.health.plr.ejb.session.GrsCtDistributionOnOperationFacade;
import ca.bc.gov.health.plr.ejb.session.GrsCtDistributionOwnCodeFacade;
import ca.bc.gov.health.plr.ejb.session.GrsCtDistributionProfileTypeFacade;
import ca.bc.gov.health.plr.ejb.session.GrsCtDocumentTypesFacadeLocal;
import ca.bc.gov.health.plr.ejb.session.GrsCtEndReasonTypesFacade;
import ca.bc.gov.health.plr.ejb.session.GrsCtMechanismsFacade;
import ca.bc.gov.health.plr.ejb.session.GrsCtOptionCodesFacade;
import ca.bc.gov.health.plr.ejb.session.GrsCtRegIdentifierTypesFacadeLocal;
import ca.bc.gov.health.plr.ejb.session.GrsCtRegUserTypesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtAddressTypesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtCommunPurposeTypesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtConditionTypesFacadeLocal;
import ca.bc.gov.health.plr.ejb.session.PrsCtDataOwnerCodesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtElectronicAddrTypesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtGenderCodesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtNameTypesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtProvCredentialTypesFacadeLocal;
import ca.bc.gov.health.plr.ejb.session.PrsCtProvExpertiseTypesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtProvRuRelnTypesFacadeLocal;
import ca.bc.gov.health.plr.ejb.session.PrsCtRelationshipTypesFacadeLocal;
import ca.bc.gov.health.plr.ejb.session.PrsCtStatusClassCodesFacadeLocal;
import ca.bc.gov.health.plr.ejb.session.PrsCtStatusCodesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtStatusReasonCodesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtTelecomNumberTypesFacade;
import ca.bc.gov.health.plr.ejb.session.PrsCtWorkLocationPurpsFacade;
import ca.bc.gov.health.plr.ejb.session.PrsProvidersFacade;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import static ca.bc.gov.health.plr.persistence.CodeTableCodes.GrsCtDataObjects.*;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.service.provider.ProviderHelperService;
import ca.bc.gov.health.plr.util.LanguageExpertiseTypeComparator;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.ApplicationScoped;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.inject.Named;
import javax.servlet.http.HttpSession;

/**
 * Convenience class for loading/managing lists for f:selectItems in the view
 * layer.
 *
 * @author Greg.Perkins
 * @author David.Sharpe
 * @author Grant.Hodgins
 */
@ApplicationScoped()
@Named("Droplists")
public class Droplists implements Serializable {

    @EJB
    private CodesDao codesDao;
    @EJB
    private ProviderHelperService maintainProviderService;
    @EJB
    private transient GrsCtRegIdentifierTypesFacadeLocal grsCtRegIdentifierTypesFacade;
    @EJB
    private transient GrsCtEndReasonTypesFacade grsCtEndReasonTypesFacade;
    @EJB
    private transient PrsCtAddressTypesFacade prsCtAddressTypesFacade;
    @EJB
    private transient PrsCtCommunPurposeTypesFacade prsCtCommunPurposeTypesFacade;
    @EJB
    private transient PrsCtDataOwnerCodesFacade prsCtDataOwnerCodesFacade;
    @EJB
    private transient PrsCtGenderCodesFacade prsCtGenderCodesFacade;
    @EJB
    private transient PrsCtProvCredentialTypesFacadeLocal prsCtProvCredentialTypesFacade;
    @EJB
    private transient PrsCtStatusClassCodesFacadeLocal prsCtStatusClassCodesFacade;
    @EJB 
    private transient PrsCtStatusCodesFacade prsCtStatusCodesFacade;
    @EJB
    private transient PrsCtNameTypesFacade prsCtNameTypesFacade;
    @EJB
    private transient PrsCtProvExpertiseTypesFacade prsCtProvExpertiseTypesFacade;
    @EJB
    private transient PrsCtElectronicAddrTypesFacade prsCtElectronicAddressTypesFacade;
    @EJB
    private transient PrsCtRelationshipTypesFacadeLocal prsCtRelationshipTypesFacade;
    @EJB
    private transient PrsCtProvRuRelnTypesFacadeLocal prsCtProvRuRelnTypesFacadeLocal;
    @EJB
    private transient PrsCtTelecomNumberTypesFacade prsCtTelecomNumberTypesFacade;
    @EJB
    private transient PrsCtConditionTypesFacadeLocal prsCtConditionTypesFacade;
    @EJB
    private transient GrsCtDocumentTypesFacadeLocal grsCtDocumentTypesFacade;
    @EJB
    private transient GrsCtMechanismsFacade grsCtMechanismsFacade;
    @EJB
    private transient PrsCtWorkLocationPurpsFacade prsCtWorkLocationPurpsFacade;
    @EJB
    private transient PrsProvidersFacade prProviderFacade;
    @EJB
    private transient GrsCtRegUserTypesFacade grsCtRegUserTypesFacade;
    
    @EJB
    private transient GrsCtDistributionOwnCodeFacade grsCtDistributionOwnCodeFacade;

    @EJB
    private transient GrsCtDistributionOnOperationFacade grsCtDistributionOnOperationFacade;

    @EJB
    private transient GrsCtDistributionProfileTypeFacade grsCtDistributionProfileTypeFacade;
    
    @EJB
    private transient GrsAccessProfileGroupsFacade grsAccessProfileGroupsFacade;
    
    @EJB
    private transient GrsCtOptionCodesFacade grsCtOptionCodesFacade;
    
    @EJB
    private transient GrsCtDataObjectsFacade grsCtDataObjectsFacade;
    
    @EJB
    private transient PrsCtStatusReasonCodesFacade prsCtStatusReasonCodesFacade;
    
    private static final String[] EXCLUDED_DATA_OBJECTS_FOR_PERMISSIONS = 
    {PRS_WORK_LOCATION_DETAIL.getValue(),PRS_SUBROLE_IDENTIFIER.getValue(),PRS_SUBROLE_STATUS.getValue(), PRS_SUBROLE_CONDITION.getValue(), REGISTRY_IDENTIFIER.getValue()};
    

    private List<SelectItem> grsCtRegIdentifierTypes;
    private List<SelectItem> prsCtAddressTypes;
    private List<SelectItem> prsCtCommunPurposeTypes;
    private List<SelectItem> prsCtDataOwnerCodes;
    private List<SelectItem> prsCtGenderCodes;
    private List<SelectItem> prsCtGenderCodesWithSelectOne;
    private List<SelectItem> prsCtProvCredentialTypes;
    private List<SelectItem> prsCtStatusClassCodes;
    private List<SelectItem> prsCtStatusCodes;
    private List<SelectItem> grsCtEndReasonTypes;
    private List<SelectItem> grsCtEndReasonTypesWithoutCease;
    private List<SelectItem> prsCtPersonNameTypes;
    private List<SelectItem> prsCtProvExpertiseTypes;
    private List<SelectItem> prsCtElectronicAddressTypes;
    private List<SelectItem> prsCtRelationshipTypes;
    private List<SelectItem> prsCtProvRuRelnTypes;
    private List<SelectItem> prsCtTelecomNumberTypes;
    private List<SelectItem> prsCtConditionTypes;
    private List<SelectItem> grsCtMechanisms;
    private List<SelectItem> grsCtDocumentTypes;
    private List<SelectItem> prsCtWorkLocationPurps;
    private List<SelectItem> grsCtDistributionOwnCodes;
    private List<SelectItem> grsCtDistributionOnOperations;
    private List<SelectItem> grsCtDistributionProfileTypes;
    private List<SelectItem> grsAccessProfileGroupNames;
    private List<SelectItem> grsCtOptionCodes;
    private List<SelectItem> grsCtDataObjects;
    private List<SelectItem> prsCtCommunPurposeTypesFilterByEc;
    private List<SelectItem> prsCtStatusReasonCodes;

    @PostConstruct
    public void init() {
        initGrsCtRegIdentifierTypes();
        initPrsCtAddressTypes();
        initPrsCtCommunPurposeTypes();
        initPrsCtDataOwnerCodes();
        initPrsCtGenderCodes();
        initPrsCtGenderCodesWithSelectOne();
        initPrsCtProvCredentialTypes();
        initPrsCtStatusClassCodes();
        initPrsCtStatusCodes();
        initGrsCtEndReasonTypes();
        initGrsCtEndReasonTypesWithoutCease();
        initPrsCtPersonNameTypes();
        initPrsCtExpertiseTypes();
        initPrsCtElectronicAddressTypes();
        initPrsCtRelationshipTypes();
        initPrsCtProvRuRelnTypes();
        initPrsCtTelecomNumberTypes();
        initPrsCtConditionTypes();
        initGrsCtMechanisms();
        initGrsCtDocumentTypes();
        initPrsCtWorkLocationPurps();
        initGrsDistributionOwnCodes();
        initGrsCtDistributionOnOperations();
        initGrsDistributionProfileTypes();
        initGrsAccessProfileGroupNames();
        initGrsCtOptionCodes();
        initGrsCtDataObjects();
        initPrsCtCommunPurposeTypesFilterOutEc();
        initPrsCtStatusReasonCodes();
    }

    /**
     * Find the list of address types.
     *
     * @return the list of Relationship types
     */
    public List<SelectItem> getPrsCtProvRuRelnTypes() {
        return prsCtProvRuRelnTypes;
    }

    /**
     * Initialize the list of Relationship types.
     */
    private void initPrsCtProvRuRelnTypes() {
        prsCtProvRuRelnTypes = convertToSelectItems(prsCtProvRuRelnTypesFacadeLocal.findAll());
    }

    /**
     * Find the list of address types.
     *
     * @return the list of Relationship types
     */
    public List<SelectItem> getPrsCtRelationshipTypes() {
        return prsCtRelationshipTypes;
    }

    /**
     * Initialize the list of Relationship types.
     */
    private void initPrsCtRelationshipTypes() {
        prsCtRelationshipTypes = convertToSelectItems(prsCtRelationshipTypesFacade.findAll());
    }

    /**
     * Initialize the list of Address types.
     */
    private void initPrsCtAddressTypes() {
        prsCtAddressTypes = convertToSelectItems(prsCtAddressTypesFacade.findAll());
    }

    /**
     * Find the list of address types.
     *
     * @return the list of address types
     */
    public List<SelectItem> getPrsCtAddressTypes() {
        return prsCtAddressTypes;
    }

    /**
     * Initialize the list of Electronic Address types.
     */
    private void initPrsCtElectronicAddressTypes() {
        prsCtElectronicAddressTypes = convertToSelectItems(prsCtElectronicAddressTypesFacade.findAll());
    }

    /**
     * Return the list of Electronic Address Types
     *
     * @return
     */
    public List<SelectItem> getPrsCtElectonicAddressTypes() {
        return prsCtElectronicAddressTypes;
    }

    /**
     * Initialize the list of Communication Purposes
     */
    private void initPrsCtCommunPurposeTypes() {
        prsCtCommunPurposeTypes = convertToSelectItems(prsCtCommunPurposeTypesFacade.findAll());
    }

    /**
     * Find the list of communication purpose types.
     *
     * @return the list of communication purpose types
     */
    public List<SelectItem> getPrsCtCommunPurposeTypes() {
        return prsCtCommunPurposeTypes;
    }

    /**
     * Initialize the list of Data Owner Codes.
     */
    private void initPrsCtDataOwnerCodes() {
        prsCtDataOwnerCodes = convertToSelectItems(prsCtDataOwnerCodesFacade.findAll());
    }

    /**
     * Find the list of data owner codes.
     *
     * @return the list of data owner codes
     */
    public List<SelectItem> getPrsCtDataOwnerCodes() {
        return prsCtDataOwnerCodes;
    }

    /**
     * Initialize the list of Gender Codes.
     */
    private void initPrsCtGenderCodes() {
        prsCtGenderCodes = convertToSelectItems(prsCtGenderCodesFacade.findAll(), false);
    }
    /**
     * Initialize the list of Gender Codes with the select one option as the first option
     */
    private void initPrsCtGenderCodesWithSelectOne() {
        prsCtGenderCodesWithSelectOne = convertToSelectItems(prsCtGenderCodesFacade.findAll(), true);
    }

    /**
     * Find the list of gender codes.
     *
     * @return the list of gender codes
     */
    public List<SelectItem> getPrsCtGenderCodes() {
        return prsCtGenderCodes;
    }

    /**
     * Find the list of gender codes with select one at the first option.
     *
     * @return the list of gender codes
     */
    public List<SelectItem> getPrsCtGenderCodesWithSelectOne() {
        return prsCtGenderCodesWithSelectOne;
    }

    /**
     * Initialize the list of Credential types.
     */
    private void initPrsCtProvCredentialTypes() {
        prsCtProvCredentialTypes = convertToSelectItems(prsCtProvCredentialTypesFacade.findAll());
    }

    /**
     * Find the list of provider credential types.
     *
     * @return the list of provider credential types
     */
    public List<SelectItem> getPrsCtProvCredentialTypes() {
        return prsCtProvCredentialTypes;
    }

    /**
     * Initialize the list of Status Class Codes.
     */
    private void initPrsCtStatusClassCodes() {
        prsCtStatusClassCodes = convertToSelectItems(prsCtStatusClassCodesFacade.findAll());
    }

    /**
     * Find the list of status class codes.
     *
     * @return the list of status class codes
     */
    public List<SelectItem> getPrsCtStatusClassCodes() {
        return prsCtStatusClassCodes;
    }

    /**
     * Initialize the list of Status Codes.
     */
    private void initPrsCtStatusCodes() {
        prsCtStatusCodes = convertToSelectItems(prsCtStatusCodesFacade.findAll());
    }

    /**
     * Find the list of status codes.
     *
     * @return the list of status codes
     */
    public List<SelectItem> getPrsCtStatusCodes() {
        return prsCtStatusCodes;
    }

    /**
     * Returns a SelectItem list of provider role types that the current
     * registry user is allowed to view ordered by usage frequency where
     * frequency > 0.
     *
     * "Allowed" means the current registry user has permission to view
     * Providers associated with the identifier type.
     *
     * @return a SelectItem list of provider role types that the current
     * registry user is allowed to view ordered by usage frequency where
     * frequency > 0.
     */
    public List<SelectItem> getProviderRoleTypesForSearch(String regEx) {
        return convertToSelectItems(codesDao.getProviderRoleTypesForSearch(getCurrentUser(), regEx));
    }

    public List<SelectItem> getProviderRoleTypesForSearchNoSelect(String regEx) {
        return convertToSelectItems(codesDao.getProviderRoleTypesForSearch(getCurrentUser(), regEx), false);
    }
    
    /**
     * Returns a SelectItem list of provider role types that the current
     * registry user is allowed to add.
     *
     * @return a SelectItem list of provider role types that the current
     * registry user is allowed to add.
     */
    public List<SelectItem> getProviderRoleTypesForAdd() {
        return convertToSelectItems(codesDao.getProviderRoleTypeForAdd(getCurrentUser()));
    }
    /**
     * Returns a SelectItem list of provider role types that the current
     * registry user is allowed to add OOP.
     *
     * @return a SelectItem list of provider role types that the current
     * registry user is allowed to add.
     */
    public List<SelectItem> getProviderRoleTypesForAddOOP() {
        return convertToSelectItems(codesDao.getProviderRoleTypeForAddOOP(getCurrentUser()));
    }
    /**
     * Returns a SelectItem list of provider role types that the current
     * registry user is allowed to add ORGS.
     *
     * @return a SelectItem list of provider role types that the current
     * registry user is allowed to add.
     */
    public List<SelectItem> getProviderRoleTypesForAddORG() {
        return convertToSelectItems(codesDao.getProviderRoleTypeForAddORG(getCurrentUser()));
    }

    /**
     * Returns a SelectItem list of identifier types that the current registry
     * user is allowed to view ordered by usage frequency where frequency > 0.
     *
     * "Allowed" means the current registry user has permission to view
     * Providers associated with the identifier type.
     *
     * @return a SelectItem list of identifier types that the current registry
     * user is allowed to view ordered by usage frequency where frequency > 0.
     */
    public List<SelectItem> getIdentifierTypesForSearch() {               
        return convertToSelectItems(codesDao.getIdentifierTypesForSearch(getCurrentUser()));
    }

    /**
     * Returns a SelectItem list of all identifier types.
     *
     * @return a SelectItem list of all identifier types.
     */
    public List<SelectItem> getIdentifierTypes() {
        return convertToSelectItems(codesDao.getIdentifierTypesCodes());
    }

    /**
     * Initialize the list of Registry Identifier types.
     */
    private void initGrsCtRegIdentifierTypes() {
        grsCtRegIdentifierTypes = convertToSelectItems(grsCtRegIdentifierTypesFacade.findAll());
    }

    /**
     * Find the list of registry identifier types.
     *
     * @return the list of registry identifier types
     */
    public List<SelectItem> getGrsCtRegIdentifierTypes() {
        return grsCtRegIdentifierTypes;
    }

    /**
     * Initialize the list of End Reason types.
     */
    private void initGrsCtEndReasonTypes() {
        grsCtEndReasonTypes = convertToSelectItems(grsCtEndReasonTypesFacade.findAll());
    }

    /**
     * Find the list of end reason types.
     *
     * @return the list of end reason types
     */
    public List<SelectItem> getGrsCtEndReasonTypes() {
        return grsCtEndReasonTypes;
    }
    
    /**
     * Initialize the list of End Reason types.
     */
    private void initGrsCtEndReasonTypesWithoutCease() {
        grsCtEndReasonTypesWithoutCease = convertToSelectItems(grsCtEndReasonTypesFacade.findEndReasonCodeListWithoutCease());
    }

    /**
     * Find the list of end reason types.
     *
     * @return the list of end reason types
     */
    public List<SelectItem> getGrsCtEndReasonTypesWithoutCease() {
        return grsCtEndReasonTypesWithoutCease;
    }    
    /**
     * Initialize the list of Person Name types.
     */
    private void initPrsCtPersonNameTypes() {
        prsCtPersonNameTypes = convertToSelectItems(prsCtNameTypesFacade.findAll());
    }
    
    /**
     * Initialize the list of Expertise types.
     */
    private void initPrsCtExpertiseTypes() {
        List<PrsCtProvExpertiseTypes> provExperTypeList = prsCtProvExpertiseTypesFacade.findAll();
        prsCtProvExpertiseTypes = new ArrayList<>();
        for (PrsCtProvExpertiseTypes row : provExperTypeList) {
            if (row.getEndReasonCode() == null && CodeTableCodes.GrsCtBooleanTypes.YES.getValue().equals(row.getActiveFlag())) {
                prsCtProvExpertiseTypes.add(new SelectItem(row.getCtlId(), row.getCtlNameCode() + " - " + row.getCtlDescTxt() + " - " + row.getProvRoleType() ));
            }
        }        
    }
    
    

    /**
     * Find the list of person name types.
     *
     * @return the list of person name types
     */
    public List<SelectItem> getPrsCtPersonNameTypes() {
        return prsCtPersonNameTypes;
    }
    
    /**
     * Find the list of expertise types.
     *
     * @return the list of expertise types
     */
    public List<SelectItem> getPrsCtProvExpertiseTypes() {
        return prsCtProvExpertiseTypes;
    }

    /**
     * Initialize the list of Telecom Number types.
     */
    private void initPrsCtTelecomNumberTypes() {
        prsCtTelecomNumberTypes = convertToSelectItems(prsCtTelecomNumberTypesFacade.findAll());
    }

    /**
     * Find the list of Telecom Number types.
     *
     * @return the list of types
     */
    public List<SelectItem> getPrsCtTelecomNumberTypes() {
        return prsCtTelecomNumberTypes;
    }

    /**
     * Initialize the list of Condition types.
     */
    private void initPrsCtConditionTypes() {
        prsCtConditionTypes = convertToSelectItems(prsCtConditionTypesFacade.findAll());
    }

    /**
     * Find the list of Condition types.
     *
     * @return the list of types
     */
    public List<SelectItem> getPrsCtConditionTypes() {
        return prsCtConditionTypes;
    }

    /**
     * Initialize the list of Work Location Purposes.
     */
    private void initPrsCtWorkLocationPurps() {
        prsCtWorkLocationPurps = convertToSelectItems(prsCtWorkLocationPurpsFacade.findAll());
    }

    /**
     * Find the list of Work Location Purposes types.
     *
     * @return the list of types
     */
    public List<SelectItem> getPrsCtWorkLocationPurps() {
        return prsCtWorkLocationPurps;
    }

    /**
     * Initialize the list of Mechanism types.
     */
    private void initGrsCtMechanisms() {
        grsCtMechanisms = convertToSelectItems(grsCtMechanismsFacade.findAll());
    }

    /**
     * Find the list of Mechanisms types.
     *
     * @return the list of types
     */
    public List<SelectItem> getGrsCtMechanisms() {
        return grsCtMechanisms;
    }

    /**
     * Initialize the list of Document types.
     */
    private void initGrsCtDocumentTypes() {
        grsCtDocumentTypes = convertToSelectItems(grsCtDocumentTypesFacade.findAll());
    }

    /**
     * Find the list of Document types.
     *
     * @return the list of types
     */
    public List<SelectItem> getGrsCtDocumentTypes() {
        return grsCtDocumentTypes;
    }

    /**
     * Initialize Status Reason Codes based on the specified Status Code.
     *
     * @param statusCodeId a valid Status Code ID.
     * @return the initialized list of select items.
     */
    public List<SelectItem> initializeStatusReasonCodeDropdowns(long statusCodeId) {
        return convertToSelectItems(maintainProviderService.filterStatusReasonCodes(statusCodeId));
    }

    /**
     * Returns a SelectItem list of all PrsCtProvExpertiseTypes applicable to
     * the specified Provider Role Type.
     *
     * @param providerRoleTypeId specifies a valid Provider Role Type.
     * @return a SelectItem list of all PrsCtProvExpertiseTypes applicable to
     * the specified Provider Role Type.
     */
    public List<SelectItem> getApplicableExpertiseTypes(long providerRoleTypeId) {
        return convertToSelectItemsForExpertise(codesDao.getApplicableExpertiseTypes(providerRoleTypeId), false);
    }
    
    /**
     * Returns a SelectItem list of all PrsCtProvExpertiseTypes applicable to
     * the specified Provider Role Type. Exclude Language ones.
     *
     * @param providerRoleTypeId specifies a valid Provider Role Type.
     * @return a SelectItem list of all PrsCtProvExpertiseTypes applicable to
     * the specified Provider Role Type.
     */
    public List<SelectItem> getApplicableExpertiseTypesExcludeLanguage(long providerRoleTypeId) {
        List<PrsCtProvExpertiseTypes> providerExpertiseTypeList= null;
        if(providerRoleTypeId==Long.parseLong(Consts.SELECT_ONE_VALUE)) {
            providerExpertiseTypeList= prsCtProvExpertiseTypesFacade.findAll(); //include all expertises and languages
        } else {
            providerExpertiseTypeList = codesDao.getApplicableExpertiseTypes(providerRoleTypeId);  //include all expertises and languages for the specific providerRoleTypeId
        }
        //remove languages
        List<PrsCtProvExpertiseTypes>  providerExpertiseTypeListExcludeLanguage = new ArrayList<>();
        for(PrsCtProvExpertiseTypes providerExpertiseType : providerExpertiseTypeList) {
            boolean isLanguage = false;
            if(providerExpertiseType.getProvRoleType()!=null && providerExpertiseType.getProvRoleType().trim().compareToIgnoreCase(Consts.LANG)==0) {
                isLanguage = true;
            }
            if(!isLanguage) {
                providerExpertiseTypeListExcludeLanguage.add(providerExpertiseType);
            }
        }
        Collections.sort(providerExpertiseTypeListExcludeLanguage, new LanguageExpertiseTypeComparator());
        return convertToSelectItemsForExpertise(providerExpertiseTypeListExcludeLanguage, false);
    }    

    /**
     * Returns a SelectItem list of all PrsCtIdentifierTypes applicable to the
     * specified Provider Role Type ordered by usage frequency where frequency
     * >= 0.
     *
     * @param providerTypeId specifies a valid Provider Role Type.
     * @return a SelectItem list of all PrsCtIdentifierTypes applicable to the
     * specified Provider Role Type ordered by usage frequency where frequency
     * >= 0.
     */
    public List<SelectItem> getApplicableIdentifierTypes(long providerTypeId) {
        return convertToSelectItems(codesDao.getApplicableIdentifierTypes(providerTypeId));
    }

    /**
     * Returns a SelectItem list of all PrsCtProvCredentialTypes applicable to
     * the specified Provider Role Type.
     *
     * @param providerRoleTypeId specifies a valid Provider Role Type.
     * @return a list of all PrsCtProvCredentialTypes applicable to the
     * specified Provider Role Type.
     */
    public List<SelectItem> getApplicableCredentials(long providerRoleTypeId) {
        return convertToSelectItems(codesDao.getApplicableCredentials(providerRoleTypeId));
    }
    
    public List<SelectItem> getGrsCtRegUserTypes() {
        return convertToSelectItems(grsCtRegUserTypesFacade.findAll());
    }

    /**
     * Converts a list of code table entities into a SelectItem list where the
     * code ID is the value.
     *
     * @param codeTableEntities a list of code table entities.
     * @return a SelectItem list where the code ID is the value.
     */
    private List<SelectItem> convertToSelectItems(List<? extends CodeTableInterface> codeTableEntities) {
        return convertToSelectItems(codeTableEntities, true);
    }
    
    private List<SelectItem> convertToSelectItemsForExpertise(List<PrsCtProvExpertiseTypes> provExpertiseTypeList, boolean includeSelect) {
        List<SelectItem> selectItems = new ArrayList<>();
        if(includeSelect){
            SelectItem empty = new SelectItem(null,"Select One");
            empty.setNoSelectionOption(true);
            selectItems.add(empty);
        }
        for (PrsCtProvExpertiseTypes row : provExpertiseTypeList) {
            if (row.getEndReasonCode() == null && CodeTableCodes.GrsCtBooleanTypes.YES.getValue().equals(row.getActiveFlag())) {
                selectItems.add(new SelectItem(row.getCtlId(), row.getCtlNameCode() + " - " + row.getCtlDescTxt() + " - " + row.getProvRoleType()));
            }
        }
        return selectItems;
    }     
    
    /**
     * Converts a list of code table entities into a SelectItem list where the
     * code ID is the value.
     *
     * @param codeTableEntities a list of code table entities.
     * @param includeSelect : If true then select one option will be included
     * 
     * @return a SelectItem list where the code ID is the value.
     */
    private List<SelectItem> convertToSelectItems(List<? extends CodeTableInterface> codeTableEntities, boolean includeSelect) {
        List<SelectItem> selectItems = new ArrayList<>();
        if(includeSelect){
            SelectItem empty = new SelectItem(null,Consts.SELECT_ONE_LABLE);
            empty.setNoSelectionOption(true);
            selectItems.add(empty);
        }
        for (CodeTableInterface row : codeTableEntities) {
            if (row.getEndReasonCode() == null && CodeTableCodes.GrsCtBooleanTypes.YES.getValue().equals(row.getActiveFlag())) {
                selectItems.add(new SelectItem(row.getCtlId(), row.getCtlNameCode() + " - " + row.getCtlDescTxt()));
            }
        }
        return selectItems;
    }
    
    
    
    private GrsRegistryUsers getCurrentUser() {
         return (GrsRegistryUsers)((HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false)).getAttribute(Consts.USER_ID);         
    }
    
    /**
     * Initialize the list of Distribution Own codes.
     */
    private void initGrsDistributionOwnCodes() {
        grsCtDistributionOwnCodes  = convertToSelectItems(grsCtDistributionOwnCodeFacade.findAll());
    }
    
    /**
     * Initialize the list of Distribution On Operations.
     */
    private void initGrsCtDistributionOnOperations() {
        grsCtDistributionOnOperations  = convertToSelectItems(grsCtDistributionOnOperationFacade.findAll());
    }
    
    /**
     * Initialize the list of Distribution Profile Types.
     */
    private void initGrsDistributionProfileTypes() {
        grsCtDistributionProfileTypes = convertToSelectItems(grsCtDistributionProfileTypeFacade.findAll());
    } 
    
    /**
     * Initialize the list of Access Profile Group Names.
     */
    public void initGrsAccessProfileGroupNames() {
        List<GrsAccessProfileGroups> accessGroups =  grsAccessProfileGroupsFacade.findAll();
        grsAccessProfileGroupNames = new ArrayList<>();
        if(accessGroups != null){
            for(GrsAccessProfileGroups accessProfileGroup : accessGroups){
                grsAccessProfileGroupNames.add(new SelectItem(accessProfileGroup.getApgId(), accessProfileGroup.getAccessProfileGroupChid()));
            }
        }
    } 
    
    public List<SelectItem> getGrsCtDistributionOwnCodes() {
        return grsCtDistributionOwnCodes;
    }
    
    public List<SelectItem> getGrsCtDistributionOnOperations() {
        return grsCtDistributionOnOperations;
    }
    
    public List<SelectItem> getGrsCtDistributionProfileTypes() {
        return grsCtDistributionProfileTypes;
    }

    public List<SelectItem> getGrsAccessProfileGroupNames() {
        return grsAccessProfileGroupNames;
    }
    
  
    //TODO - Remove this after the referential integrity creation
    public List<SelectItem> getProviderRoleTypesForDistribution() {
        List<PrsCtProviderRoleTypes> providerTypes = codesDao.findOrderedProviderRoleTypeCodes(false);
        List<SelectItem> providerRoleTypesForDistribution = new ArrayList<>();
        SelectItem empty = new SelectItem(null,"Select One");
        empty.setNoSelectionOption(true);
        providerRoleTypesForDistribution.add(empty);
        if(providerTypes != null){
            for(PrsCtProviderRoleTypes row : providerTypes){
                if(row.getEndReasonCode() == null && CodeTableCodes.GrsCtBooleanTypes.YES.getValue().equals(row.getActiveFlag())){
                    providerRoleTypesForDistribution.add(new SelectItem(row.getCtlNameCode(), row.getCtlNameCode() + " - " + row.getCtlDescTxt()));
                }
            }
        }
        return providerRoleTypesForDistribution;
    }
    
    public List<SelectItem> getPrsCtDataOwnerCodesForDistribution() {
        List<PrsCtDataOwnerCodes> dataOwnerCodes = prsCtDataOwnerCodesFacade.findAll();
        List<SelectItem> prsCtDataOwnerCodesForDistribution = new ArrayList<>();
        SelectItem empty = new SelectItem(null, "Select One");
        empty.setNoSelectionOption(true);
        prsCtDataOwnerCodesForDistribution.add(empty);
        if (dataOwnerCodes != null) {
            for (PrsCtDataOwnerCodes row : dataOwnerCodes) {
                if (row.getEndReasonCode() == null && CodeTableCodes.GrsCtBooleanTypes.YES.getValue().equals(row.getActiveFlag())) {
                    prsCtDataOwnerCodesForDistribution.add(new SelectItem(row.getCtlNameCode(), row.getCtlNameCode() + " - " + row.getCtlDescTxt()));
                }

            }
        }
        return prsCtDataOwnerCodesForDistribution;
    }

    private void initGrsCtOptionCodes() {
       grsCtOptionCodes = convertToSelectItems(grsCtOptionCodesFacade.findAll());
    }
    
    private void initGrsCtDataObjects() {
        grsCtDataObjects = new ArrayList<>();
        SelectItem empty = new SelectItem(null,"Select One");
        empty.setNoSelectionOption(true);
        grsCtDataObjects.add(empty);
        List<String> excludedValues = Arrays.asList(EXCLUDED_DATA_OBJECTS_FOR_PERMISSIONS);
        for (CodeTableInterface row : grsCtDataObjectsFacade.findAll()) {
            // No need to display EXCLUDED_DATA_OBJECTS_FOR_PERMISSIONS in DPS Permissions
            if (!excludedValues.contains(row.getCtlNameCode()) &&
                    row.getEndReasonCode() == null && CodeTableCodes.GrsCtBooleanTypes.YES.getValue().equals(row.getActiveFlag())) {
                grsCtDataObjects.add(new SelectItem(row.getCtlId(), row.getCtlNameCode()));
            }            
        }
    }

    public List<SelectItem> getGrsCtOptionCodes() {
        return grsCtOptionCodes;
    }

    public List<SelectItem> getGrsCtDataObjects() {
        return grsCtDataObjects;
    }

    /**
     * Returns a SelectItem list of Language Expertise Types.
     *
     * @return a SelectItem list of Language Expertise Types.
     */
    public List<SelectItem> getAllLanguageExpertiseTypes() {
        return convertToSelectItems(codesDao.getAllLanguageExpertiseTypes(), false);
    }
    
    /**
     * Initialize the list of Communication Purposes with codes filtered out 'EC'
     */
    private void initPrsCtCommunPurposeTypesFilterOutEc() {
        prsCtCommunPurposeTypesFilterByEc = convertToSelectItems(prsCtCommunPurposeTypesFacade.findCommunTypesFilterOutEc());
    }

    /**
     * Find the list of communication purpose types filtered by EC.
     *
     * @return the list of communication purpose types filtered by EC
     */
    public List<SelectItem> getPrsCtCommunPurposeTypesFilterByEc() {
        return prsCtCommunPurposeTypesFilterByEc;
    }
    
    /**
     * Initialize the list of license Status Reason Codes.
     */
    private void initPrsCtStatusReasonCodes() {
        prsCtStatusReasonCodes = convertToSelectItems(prsCtStatusReasonCodesFacade.findAll());
    }

    /**
     * Find the list of status codes.
     *
     * @return the list of status codes
     */
    public List<SelectItem> getPrsCtStatusReasonCodes() {
        return prsCtStatusReasonCodes;
    }
}
