package ca.bc.gov.health.plr.web.bean.support.validators;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.ejb.entity.PrsCtElectronicAddrTypes;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import ca.bc.gov.health.plr.rule.provider.ValidateEmailAddress;
import javax.faces.application.FacesMessage;
import javax.faces.component.UIComponent;
import javax.faces.component.UIInput;
import javax.faces.context.FacesContext;
import javax.faces.validator.FacesValidator;
import javax.faces.validator.Validator;
import javax.faces.validator.ValidatorException;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;

/**
 * Custom validator to ensure the value is an email address if the type is email
 * Must provide the reference to the typeId via an f:attribute
 *
 * @author greg.perkins
 */
@FacesValidator(value = "conditionalEmailValidator")
public class ConditionalEmailValidator implements Validator {

    private final ValidateEmailAddress validator = new ValidateEmailAddress();
    private CodesDao codesDao;

    /**
     * Initializes codes DAO.
     *
     */
    protected void initCodesDao() {
        try {
            if (codesDao == null) {
                Context c = new InitialContext();
                codesDao = (CodesDao) c.lookup(Consts.JNDILOOKUP_CODESDAO);
            }
        } catch (NamingException ne) {
            throw new RuntimeException(ne);
        }
    }

    /**
     * Runs validation check to ensure this component's value is a valid email
     * address when the type is email
     *
     * @param context FacesContext
     * @param component UIComponent
     * @param value Object
     * @throws ValidatorException
     */
    @Override
    public void validate(FacesContext context, UIComponent component, Object value) throws ValidatorException {
        initCodesDao();

        if (value == null) {
            return; //Can't proceed
        }

        UIInput typeControl = (UIInput) component.getAttributes().get("typeId");
        if (!typeControl.isValid()) {
            return;  //Can't proceed
        }

        Long typeId = (Long) typeControl.getValue();
        if (typeId == null) {
            return; //Can't proceed
        }

        if (typeId.equals(codesDao.lookup(PrsCtElectronicAddrTypes.class, CodeTableCodes.PrsCtElectronicAddrTypes.EMAIL).getCtlId())) {
            BusinessRuleResult result = validator.validate((String) value);
            if (!result.isValid()) {
                ((UIInput) component).setValid(false);
                throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR, BusinessRuleException.concatenateMessages(result.getMessages()), ""));
            }
        }

    }
}
