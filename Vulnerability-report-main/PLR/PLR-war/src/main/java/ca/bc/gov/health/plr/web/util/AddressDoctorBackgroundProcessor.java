/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.web.util;

import ca.bc.gov.health.plr.dto.AddressValidationStatsDto;
import ca.bc.gov.health.plr.persistence.ConfigurationDao;
import ca.bc.gov.health.plr.service.EmailService;
import ca.bc.gov.health.plr.service.provider.MaintainAddressService;
import ca.bc.gov.health.plr.util.AddressDoctorBackgroundProcessorHelper;
import ca.bc.gov.health.plr.util.BatchProcessingUtil;
import java.net.SocketException;
import java.time.format.DateTimeFormatter;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Future;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.AsyncResult;
import javax.ejb.Asynchronous;
import javax.inject.Inject;
import javax.mail.MessagingException;

/**
 *
 * @author tim.osse
 */
public class AddressDoctorBackgroundProcessor {

    private AddressValidationStatsDto addressValidationStatsDto;
    
    private static final String CLASSNAME = AddressDoctorBackgroundProcessor.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);
    @Inject
    private ConfigurationDao configurationDao;
    
    @Inject 
    private EmailService emailService;
    
    @Inject 
    BatchProcessingUtil processUtil;

    @Asynchronous
    public Future<AddressValidationStatsDto> processAddresses(MaintainAddressService maintainAddressService){
        String startTime = null;
        String endTime = null;
        try {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
            LocalDateTime startNow = LocalDateTime.now();
            startTime = dtf.format(startNow);
            LOG.log(Level.INFO, "AddressDoctorBackgroundProcessor processAddresses before maintainAddressService.processOldAddresses()");
            addressValidationStatsDto = maintainAddressService.processOldAddresses();
            LocalDateTime endNow = LocalDateTime.now();
            endTime = dtf.format(endNow);
        } catch (Exception e){
            //System.out.println("Exception Message: "+ e.getMessage());
            Logger.getLogger(AddressDoctorBackgroundProcessor.class.getName()).log(Level.SEVERE, e.getMessage());
        }
        LOG.log(Level.INFO, "AddressDoctorBackgroundProcessor processAddresses after try block maintainAddressService.processOldAddresses()", startTime);
        addressValidationStatsDto.setLastRunStartDateTime(startTime);
        addressValidationStatsDto.setLastRunCompleteDateTime(endTime);
        saveRunResults(addressValidationStatsDto);
        String subject = "PLR Web has completed validating existing provider addresses";
        String bodyText = "PLR Web has completed validating existing provider addresses";
        sendNoticeEmail(subject, bodyText);
        return new AsyncResult<>(addressValidationStatsDto);
    }
    
    public void sendNoticeEmail(String subject, String bodyText){

        String senderAddress = configurationDao.getADEmailNotificationFrom();
        List<String> mainRecipients = configurationDao.getADEmailNotificationRecipients();
        List<String> ccRecipients = configurationDao.getADEmailNotificationCCRecipients();
        List<String> bccRecipients = configurationDao.getADEmailNotificationBCCRecipients();
        List<String> attachmentFilePaths = new ArrayList<>();

        try {
            emailService.sendMail(senderAddress, mainRecipients, ccRecipients, bccRecipients, subject, bodyText, attachmentFilePaths);
        } catch (MessagingException se) {
               LOG.log(Level.SEVERE, "Failed to send Address Doctor batch processing completion email:", se);
            if (!(se.getCause() instanceof SocketException)) {
                 LOG.log(Level.SEVERE, "Failed to send Address Doctor batch processing completion email, Socket Exception:", se);
            }
        }
    }
    
    private void saveRunResults(AddressValidationStatsDto addressValidationStatsDto){
        processUtil.saveRunResults(addressValidationStatsDto);
    }
}
