package ca.bc.gov.health.plr.web.bean.provider;

import ca.bc.gov.health.plr.dto.provider.ConditionsDto;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.MaintainConditionService;
import ca.bc.gov.health.plr.service.provider.MaintainProviderService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import ca.bc.gov.health.plr.web.util.JSFUtils;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

/**
 *
 * @author ian.scott
 */
@ManagedBean
@ViewScoped
public class MaintainConditionManager {

    @EJB
    protected MaintainConditionService maintainConditionService;
    @EJB
    protected MaintainProviderService maintainProviderService;
    private Long pauthId;
    protected ConditionsDto conditionDto;
    protected List<ConditionsDto> conditions;

    /**
     * Initialize the backing transfer objects. We'll do all at once since it's
     * cheap and we don't know what the users may choose.
     */
    @PostConstruct
    public void init() {
        conditionDto = new ConditionsDto();

    }

    /**
     * Initial method called from page which determines if the request is an add
     * or an update
     */
    public void save() {
        try {
            if (this.conditionDto.isNew()) {
                conditionDto.setPauthId(pauthId);
            }

            ConditionsDto newRecord = maintainProviderService.save(getConditionDto());
            conditions.clear();
            conditions.addAll(maintainConditionService.refreshConditions(newRecord));
            String message = JSFUtils.prepareSuccessMessage("condition" , conditionDto);

            FacesContext.getCurrentInstance().addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (DuplicateRecordException | EntityValidationException dre) {
            FacesContext.getCurrentInstance().addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_ERROR, dre.getMessage(), ""));
            FacesContext.getCurrentInstance().validationFailed();
        }
    }

    public ConditionsDto getConditionDto() {
        return conditionDto;
    }

    public void setConditionDto(ConditionsDto conditionDto) {
        this.conditionDto = conditionDto;
    }

    public List<ConditionsDto> getConditions() {
        return conditions;
    }

    public void setConditions(List<ConditionsDto> conditions) {
        this.conditions = conditions;
    }

    /**
     * @param pauthId the pauthId to set
     */
    public void setPauthId(Long pauthId) {
        this.pauthId = pauthId;
    }
}
