package ca.bc.gov.health.dsr.web;
import ca.bc.gov.health.plr.ejb.entity.*;
import ca.bc.gov.health.dsr.ejb.session.*;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.bean.ViewScoped;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.context.Flash;

/**
 * Backing bean for editing PrsWorkLocationss
 * @author JSF Code Generator
 */
@ManagedBean(name="MaintainPrsWorkLocations")
@ViewScoped
public class MaintainPrsWorkLocations implements java.io.Serializable{
    /* EJB to handle persistence */
    @EJB
    private PrsWorkLocationFacadeLocal prsWorkLocationsFacade;


    /* EJB for dealing with PrsProviders instances */
    @EJB
    private PrsProviderFacadeLocal prsProvidersFacade;

    /* EJB for dealing with GrsCtLeaf instances */
    @EJB
    private DsrCtStatusFacadeLocal dsrCtStatusFacade;
    
    @EJB
    private PrsCtProvStateFacadeLocal prsCtProvStateFacade;
    
    @EJB
    private PrsCtCountriesFacadeLocal prsCtCountriesFacade;
    
    @EJB
    private DsrCtOwnerOperatorTypesFacadeLocal dsrCtOwnerOperatorTypesFacade;
    
    @EJB
    private PrsCtWorkLocationPurpsFacadeLocal PrsCtWorkLocationPurpsFacade;
    /* Instace we're currently editing */
    private PrsWorkLocations prsWorkLocations;

    /* Flash scope to handle passing parameters from other views */
    @ManagedProperty("#{flash}")
    private Flash flash;

    /**
     * Default Constructor
     */
    public MaintainPrsWorkLocations(){}

    /**
     * Initializes this bean
     */
    @PostConstruct
    public void init(){
        prsWorkLocations = new PrsWorkLocations();
        if (flash.get("selectedKey")!=null){
            prsWorkLocations = prsWorkLocationsFacade.find(flash.get("selectedKey"));
        }
        if (flash.get("pauthPauthId")!=null){
            prsWorkLocations.setPauthPauthId(prsProvidersFacade.find(flash.get("pauthPauthId")));
        }
        if(prsWorkLocations.getPauthPauthId()==null){
            prsWorkLocations.setPauthPauthId(new PrsProviders());
        }
        if (flash.get("ownerTypeId")!=null){
            prsWorkLocations.setOwnerTypeId(dsrCtOwnerOperatorTypesFacade.find(flash.get("ownerTypeId")));
        }
        if(prsWorkLocations.getOwnerTypeId()==null){
            prsWorkLocations.setOwnerTypeId(new DsrCtOwnerOperatorTypes());
        }
        if (flash.get("statusId")!=null){
            prsWorkLocations.setStatusId(dsrCtStatusFacade.find(flash.get("statusId")));
        }
        if(prsWorkLocations.getStatusId()==null){
            prsWorkLocations.setStatusId(new DsrCtStatus());
        }
        if (flash.get("operatorTypeId")!=null){
            prsWorkLocations.setOperatorTypeId(dsrCtOwnerOperatorTypesFacade.find(flash.get("operatorTypeId")));
        }
        if(prsWorkLocations.getOperatorTypeId()==null){
            prsWorkLocations.setOperatorTypeId(new DsrCtOwnerOperatorTypes());
        }
    }

    /**
     * Selects a record to update
     */
    public String select(){
         flash.keep("selectedKey");
        return "MaintainPrsWorkLocations.xhtml";
    }
    /**
     * Adds a new record
     */
    public String add(){
        nullify();
        prsWorkLocationsFacade.create(prsWorkLocations);
        addPlaceholders();
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Add Successful", "Add Successful"));
        return null;
    }

    /**
     * Updates an existing record
     */
    public String update(){
        nullify();
        prsWorkLocationsFacade.edit(prsWorkLocations);
        addPlaceholders();
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Update Successful", "Update Successful"));
        return null;
    }

    /**
     * Deletes a record
     */
    public String delete(){
        nullify();
        prsWorkLocationsFacade.remove(prsWorkLocations);
        return clear();
    }

    /**
     * Clears the form
     */
    public String clear(){
        prsWorkLocations = new PrsWorkLocations();
        addPlaceholders();
        return "MaintainPrsWorkLocations.xhtml";
    }
    /**
     * Nullifys any child objects which don't have valid PKs set
     */
    private void nullify(){
        if (prsWorkLocations.getPauthPauthId()!=null && prsWorkLocations.getPauthPauthId().getPauthId()==null){
            prsWorkLocations.setPauthPauthId(null);
        }
        if (prsWorkLocations.getOwnerTypeId()!=null && prsWorkLocations.getOwnerTypeId().getCtlId()==null){
            prsWorkLocations.setOwnerTypeId(null);
        }
        if (prsWorkLocations.getStatusId()!=null && prsWorkLocations.getStatusId().getCtlId()==null){
            prsWorkLocations.setStatusId(null);
        }
        if (prsWorkLocations.getOperatorTypeId()!=null && prsWorkLocations.getOperatorTypeId().getCtlId()==null){
            prsWorkLocations.setOperatorTypeId(null);
        }
    }
    /**
     * Defaults parent objects which don't have valid PKs set
     */
    private void addPlaceholders(){
        if (prsWorkLocations.getPauthPauthId()==null){
            prsWorkLocations.setPauthPauthId(new PrsProviders());
        }
        if (prsWorkLocations.getOwnerTypeId()==null){
            prsWorkLocations.setOwnerTypeId(new DsrCtOwnerOperatorTypes());
        }
        if (prsWorkLocations.getStatusId()==null){
            prsWorkLocations.setStatusId(new DsrCtStatus());
        }
        if (prsWorkLocations.getOperatorTypeId()==null){
            prsWorkLocations.setOperatorTypeId(new DsrCtOwnerOperatorTypes());
        }
    }
    /* Getters and Setters */
    public PrsWorkLocations getPrsWorkLocations(){
        return prsWorkLocations;
    }
    public void setPrsWorkLocations(PrsWorkLocations prsWorkLocations){
        this.prsWorkLocations = prsWorkLocations;
    }
    public Flash getFlash(){
        return flash;
    }
    public void setFlash(Flash flash){
        this.flash = flash;
    }
}