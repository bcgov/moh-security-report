/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.web.bean;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.inject.Inject;

import ca.bc.gov.health.plr.service.provider.MaintainAddressService;
import ca.bc.gov.health.plr.dto.AddressValidationStatsDto;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import ca.bc.gov.health.plr.web.util.AddressDoctorBackgroundProcessor;
import ca.bc.gov.health.plr.util.BatchProcessingUtil;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

/**
 *
 * @author tim.osse
 */
@ManagedBean
@ViewScoped
public class ValidateExistProvAddrManager extends PlrManagedBean {

    @Inject 
    MaintainAddressService maintainAddressService;
    
    private AddressValidationStatsDto addressValidationStatsDto;
    
    @Inject
    AddressDoctorBackgroundProcessor asyncService;
    
    @Inject 
    BatchProcessingUtil processUtil;

    public BatchProcessingUtil getProcessUtil() {
        return processUtil;
    }
    
    @PostConstruct
    public void init() {
        isRunning();
        showBatchRunResults();
    }
    
    public void validate() throws InterruptedException, ExecutionException{
        Future<AddressValidationStatsDto> f = null;
        if(processUtil.isRunning()){
            BusinessRuleKeys key = BusinessRuleKeys.ERROR_MESSAGE_BATCH_VALIDATION_ALREADY_RUNNING;
            String message = BusinessRuleMessageDao.getMessageResource(key);
            FacesContext.getCurrentInstance().addMessage("messages", new FacesMessage(FacesMessage.SEVERITY_WARN, message, ""));
        } else if (!processUtil.isRunning()){
            processUtil.setRunning("true");
            f = asyncService.processAddresses(maintainAddressService);
            processUtil.setRunning("false");
        }

        showBatchRunResults();
    }
    
    public void showBatchRunResults(){
        AddressValidationStatsDto addressValidationStatsDtoo = new AddressValidationStatsDto(processUtil.getLastBatchRunResults());
        setAddressValidationStatsDto(addressValidationStatsDtoo);
    }
    
    /**
     * @return the addressValidationStatsDto
     */
    public AddressValidationStatsDto getAddressValidationStatsDto() {
        return addressValidationStatsDto;
    }

    /**
     * @param addressValidationStatsDto the addressValidationStatsDto to set
     */
    public void setAddressValidationStatsDto(AddressValidationStatsDto addressValidationStatsDto) {
        this.addressValidationStatsDto = addressValidationStatsDto;
    }
    
    public void isRunning(){
        if(processUtil.isRunning()){
            BusinessRuleKeys key = BusinessRuleKeys.ERROR_MESSAGE_BATCH_VALIDATION_ALREADY_RUNNING;
            String message = BusinessRuleMessageDao.getMessageResource(key);
            FacesContext.getCurrentInstance().addMessage("messages", new FacesMessage(FacesMessage.SEVERITY_WARN, message, ""));
        }
    }
}
