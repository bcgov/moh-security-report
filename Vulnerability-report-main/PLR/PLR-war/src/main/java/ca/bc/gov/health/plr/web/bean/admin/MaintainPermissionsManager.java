/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.web.bean.admin;

import ca.bc.gov.health.plr.dto.dps.AccessProfileGroupDto;
import ca.bc.gov.health.plr.dto.dps.DataElementPermissionDto;
import ca.bc.gov.health.plr.ejb.entity.GrsCtDataObjects;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.service.dps.DpsService;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

/**
 *
 * @author sumesh.kariyil
 */
@ManagedBean
@ViewScoped
public class MaintainPermissionsManager extends PlrManagedBean implements Serializable {
    
    private static final String CLASSNAME = MaintainPermissionsManager.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    private AccessProfileGroupDto dpsDto;

    private List<DataElementPermissionDto> dataObjectPermissions = new ArrayList<>();

    private List<DataElementPermissionDto> changedPermissions = new ArrayList<>();

    private List<DataElementPermissionDto> clonedDataObjectPermissions = new ArrayList<>();

    private Long selectedDataObject;

    @EJB
    private DpsService dpsService;

    @EJB
    private CodesDao codesDao;
    
    private static final String ANY = "ANY";
    
    /**
     * Initialize the backing transfer objects.
     */
    @PostConstruct
    public void init() {
        LOG.log(Level.INFO, "MaintainPermissionsManager init verifying resources");
    }

    /**
     * Method to display permissions for the DPS
     *
     * @param accessProfileGroupDto
     */
    public void viewPermissions(AccessProfileGroupDto accessProfileGroupDto) {
        dpsDto = accessProfileGroupDto;
        selectedDataObject = codesDao.lookup(GrsCtDataObjects.class, CodeTableCodes.GrsCtDataObjects.GRS_ADDRESS).getCtlId();
        populatePermissions();
    }

    /**
     * Method to populate all the permissions for the selected APG
     */
    public void populatePermissions() {
        //Clear all the list
        dataObjectPermissions.clear();
        changedPermissions.clear();
        clonedDataObjectPermissions.clear();
        // Add all permissions to the list
        dataObjectPermissions.addAll(dpsService.findPermissions(dpsDto.getId(), selectedDataObject));
        try {
            // Create a clone of the permissions and keep inside clonedDataObjectPermissions,
            // This is used to check whether any permission is changed or not.
            for (DataElementPermissionDto dto : dataObjectPermissions) {
                clonedDataObjectPermissions.add(dto.clone());
            }
        } catch (CloneNotSupportedException ex) {
            FacesContext.getCurrentInstance().validationFailed();
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, ex.getMessage() , ""));
        }
    }

    /**
     * Method to update all the changes to DB
     */
    public void update() {
        dpsService.savePermissions(changedPermissions);
        String message = "Changed permissions were successfully updated";
        FacesContext.getCurrentInstance().addMessage(PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        dpsService.clearDpsCache(dpsDto.getId());
        populatePermissions();
    }

    /**
     * a change listener method to add the changed permissions to the list (this
     * is needed to highlight the changed row, and for confirmation during save)
     *
     * @param changedPermission
     */
    public void addToChanges(DataElementPermissionDto changedPermission) {
        //Add the changed dto to the changedPermissions list
        addToChangedPermissionList(changedPermission);
        // If the changed item is ANY and if READ or WRITE is checked, then uncheck TYPE read and write
        // If the changed item is not ANY and if READ or WRITE is checked, then uncheck ANY read and write
        if (changedPermission.isReadFlag() || changedPermission.isUpdateFlag()) {
            for (DataElementPermissionDto permission : dataObjectPermissions) {
                if ( (ANY.equals(changedPermission.getDeclCode()) && !ANY.equals(permission.getDeclCode()))
                        || (!ANY.equals(changedPermission.getDeclCode()) && ANY.equals(permission.getDeclCode()))) {
                    permission.setReadFlag(false);
                    permission.setUpdateFlag(false);
                    //Add the changed dto to the changedPermissions list
                    addToChangedPermissionList(permission);
                }
            }
        }
    }
    
    /**
     * 1. Removes the item from the changedPermissions
     * 2. If the record is changed then adds to changedPermissions.
     * 
     * @param dto 
     */
    private void addToChangedPermissionList(DataElementPermissionDto dto){
        // Iterate the changedPermissions and remove the record if the changed item is already there in the changedPermissions list
        Iterator<DataElementPermissionDto> iter = changedPermissions.iterator();
        while (iter.hasNext()) {
            DataElementPermissionDto depd = iter.next();
            if (depd.getApgId().equals(dto.getApgId()) && depd.getDeclCode().equals(dto.getDeclCode())) {
                iter.remove();
            }
        }
        // If the changed item is present in cloned list, it means the record is unchanged. If it doesn't exist in the cloned list add to changedPermissions list
        if (!clonedDataObjectPermissions.contains(dto)) {
            changedPermissions.add(dto);
        }
    }

    public AccessProfileGroupDto getDpsDto() {
        return dpsDto;
    }

    public void setDpsDto(AccessProfileGroupDto dpsDto) {
        this.dpsDto = dpsDto;
    }

    public List<DataElementPermissionDto> getDataObjectPermissions() {
        return dataObjectPermissions;
    }

    public void setDataObjectPermissions(List<DataElementPermissionDto> dataObjectPermissions) {
        this.dataObjectPermissions = dataObjectPermissions;
    }

    public Long getSelectedDataObject() {
        return selectedDataObject;
    }

    public void setSelectedDataObject(Long selectedDataObject) {
        this.selectedDataObject = selectedDataObject;
    }

    public List<DataElementPermissionDto> getChangedPermissions() {
        return changedPermissions;
    }

    public void setChangedPermissions(List<DataElementPermissionDto> changedPermissions) {
        this.changedPermissions = changedPermissions;
    }

}
