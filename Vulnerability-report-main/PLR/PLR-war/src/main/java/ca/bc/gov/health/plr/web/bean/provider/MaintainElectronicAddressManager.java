package ca.bc.gov.health.plr.web.bean.provider;

import ca.bc.gov.health.plr.dto.provider.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.WorkLocationDto;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.MaintainElectronicAddressService;
import ca.bc.gov.health.plr.service.provider.MaintainProviderService;
import ca.bc.gov.health.plr.service.provider.MaintainProviderServiceHelper;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import ca.bc.gov.health.plr.web.bean.provider.interfaces.GrowlEnabled;
import ca.bc.gov.health.plr.web.bean.provider.interfaces.WorkLocationChild;
import ca.bc.gov.health.plr.web.util.JSFUtils;
import java.util.ArrayList;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;

/**
 * MaintainElectronicAddress.xhtml backing bean.
 *
 * @author greg.perkins
 */
@ManagedBean
@ViewScoped
public class MaintainElectronicAddressManager extends MaintainLocationManager implements GrowlEnabled, WorkLocationChild {

    /**
     * EJB for dealing with persistence
     */
    @EJB
    protected MaintainElectronicAddressService maintainAddressService;
    @EJB
    protected MaintainProviderServiceHelper maintainProviderServiceHelper;

    private Long pauthId;
    private Long workLocationId;
    /**
     * panel identifer ajax should use when re-rendering
     */
    private String panelToUpdate;
    /**
     * Address instance that we're editing
     */
    protected ElectronicAddressDto addressDto;
    /**
     * List of all addresses for the provider so we can add new items to it
     */
    protected List<ElectronicAddressDto> addresses;

    private Long ruId;

    /**
     * Initialize the backing transfer objects. We'll do all at once since it's
     * cheap and we don't know what the users may choose.
     */
    @PostConstruct
    public void init() {
        addressDto = new ElectronicAddressDto();
        //set to default
        pauthId = 0l;
        workLocationId = 0l;
        panelToUpdate = ":eAddressesPanel";
        ruId = 0L;
    }

    /**
     * Initial method called from page which determines if the request is an add
     * or an update does not use growl
     */
    @Override
    public void save() {
        save(false);
    }

    /**
     * Initial method called from page which determines if the request is an add
     * or an update
     *
     * @param pDetailsGrowl boolean indicating if the page growl should be used
     */
    @Override
    public void save(boolean pDetailsGrowl) {
        if (this.addressDto.isNew()) {

            if (pauthId != 0l && workLocationId != 0l && ruId != 0L) {
                throw new UnsupportedOperationException("Address Manager:Code Change Required - both values not default."); //To change body of generated methods, choose Tools | Templates.
            }
            //if both 0l let JPA handle failure
            if (pauthId != 0l) {
                addressDto.setPauthId(pauthId);
            } else if (ruId != 0L) {
                addressDto.setRuRuID(ruId);
            } else {
                addressDto.setWlWlId(workLocationId);
            }
        }
        String growl = null;
        try {
            if (pDetailsGrowl) {
                growl = PlrManagedBean.PROVIDER_DETAILS_GROWL;
            }
            ElectronicAddressDto freshAddress = (ElectronicAddressDto)maintainProviderServiceHelper.processLocation(getAddressDto(), providerDetails, null);

//            ElectronicAddressDto freshAddress = maintainProviderService.save(getAddressDto());
            if (addresses != null) {
                addresses.clear();
            } else {
                addresses = new ArrayList<>();
            }
            addresses.addAll(maintainAddressService.refreshAllEAddresses(freshAddress));
            
            //if workLocationId is 0, the request is to maintain provider's electronic address
            //if workLocationId is not 0, the request is to maintain provider worklocation's electronic address
            if(workLocationId != 0l && super.providerDetails.getWorkLocationList() != null) {
                //maintain provider worklocation's electronic address
                //providerDetails is actually ViewProviderManager.providerDetailsCopy which passed in from WorkLocation.xhtml electronic address section
                //so it needs to be updated in order to refect the up-to-date values
                for( WorkLocationDto wlDto : super.providerDetails.getWorkLocationList() ) {
                    if(wlDto.getId().equals(this.workLocationId)) {
                        wlDto.setElectronicAddresses(addresses);
                        break;
                    }
                }
            }
            
            String message = JSFUtils.prepareSuccessMessage("electronic address", addressDto);
            FacesContext.getCurrentInstance().addMessage(growl, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (DuplicateRecordException | BusinessRuleException | EntityValidationException e) {
            FacesContext.getCurrentInstance().addMessage(growl, new FacesMessage(FacesMessage.SEVERITY_ERROR, e.getMessage(), ""));
            FacesContext.getCurrentInstance().validationFailed();
        }

    }

    /**
     * @return the addressDto
     */
    public ElectronicAddressDto getAddressDto() {
        return addressDto;
    }

    /**
     * @param addressDto the addressDto to set
     */
    public void setAddressDto(ElectronicAddressDto addressDto) {
        this.addressDto = addressDto;
    }

    /**
     *
     * @return list of all addresses
     */
    public List<ElectronicAddressDto> getAddresses() {
        return addresses;
    }

    /**
     *
     * @param addresses set list of all addresses
     */
    public void setAddresses(List<ElectronicAddressDto> addresses) {
        this.addresses = addresses;
    }

    /**
     * @param pauthId the pauthId to set
     */
    @Override
    public void setPauthId(Long pauthId) {
        this.workLocationId = 0L;
        this.pauthId = pauthId;
    }

    /**
     *
     * @return the : started representation of the panel to update
     */
    @Override
    public String getPanelToUpdate() {
        return panelToUpdate;
    }

    /**
     *
     * @param panelToUpdate the : started representation of the panel to update
     */
    @Override
    public void setPanelToUpdate(String panelToUpdate) {
        this.panelToUpdate = panelToUpdate;
    }

    /**
     *
     * @param workLocationId the id of the work location
     */
    @Override
    public void setWorkLocationId(Long workLocationId) {
        this.pauthId = 0L;
        this.workLocationId = workLocationId;
    }

    public Long getRuId() {
        return ruId;
    }

    public void setRuId(Long ruId) {
        this.ruId = ruId;
    }

}
