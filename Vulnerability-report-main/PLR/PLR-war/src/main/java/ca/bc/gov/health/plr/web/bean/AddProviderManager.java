package ca.bc.gov.health.plr.web.bean;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.provider.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCommunPurposeTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtIdentifierTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvState;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusClassCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusReasonCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtTelecomNumberTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsProviders;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.rule.BusinessRuleResult;
import ca.bc.gov.health.plr.rule.provider.ValidateEmailAddress;
import ca.bc.gov.health.plr.service.provider.MaintainProviderService;
import ca.bc.gov.health.plr.service.provider.AddressSupportService;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.ProviderHelperService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.Droplists;
import ca.bc.gov.health.plr.service.AddressDoctorService;
import ca.bc.gov.health.plr.dto.AddressSuggestion;
import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.ConfigurationDao;
import ca.bc.gov.health.plr.service.JNDIResourceLoader;
import ca.bc.gov.health.plr.service.provider.MaintainAddressService;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;
import javax.faces.validator.ValidatorException;
import javax.inject.Inject;
import javax.naming.NamingException;
import org.primefaces.PrimeFaces;
import org.primefaces.context.PrimeRequestContext;
import org.primefaces.event.FlowEvent;
import org.primefaces.event.SelectEvent;

/**
 * Backing bean for adding a new provider view (AddProvider.xhtml).
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
@ManagedBean
@ViewScoped
public class AddProviderManager {
    
    private static final String CLASSNAME = AddProviderManager.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    private boolean addPhoneNumber = false;
    private boolean addFaxNumber = false;
    private boolean addEmail = false;
    private boolean addCredential = false;
    private boolean addExpertise = false;
    private boolean addrInvalidWarnedFlag = false;

    @Inject
    private AddressDoctorService addressDoctorService;

    @Inject
    MaintainProviderService addProviderService;
    @Inject
    ProviderHelperService maintainProviderService;
    @Inject
    MaintainAddressService maintainAddressService;
    @Inject
    private ValidateEmailAddress validateEmailAddress;
    @Inject
    AddressSupportService addressSupportService;
    @Inject
    private JNDIResourceLoader jndiResourceLoader;
    
    ProviderDto dto = new ProviderDto(true);

    @Inject
    Droplists droplists;
    @Inject
    private CodesDao codesDao;

    @Inject
    ConfigurationDao configurationDao;
    
    private List<SelectItem> statusReasonCodeSelectItems;
    private List<SelectItem> expertiseTypeSelectItems;
    private List<SelectItem> identifierTypeSelectItems;
    private List<SelectItem> credentialTypeSelectItems;
    private List<SelectItem> providerTypeSelectItems;
    private List<SelectItem> providerTypeSelectItemsOOP;
    private List<SelectItem> providerTypeSelectItemsORG;
    private List<SelectItem> addressProvinceSelectItems;

    private String OOP = "false";

    private String addressAutoComplete;
    
    public ConfigurationDao getConfigurationDao() {
        return configurationDao;
    }
    
    public String getAddressAutoComplete() {
        return addressAutoComplete;
    }

    public void setAddressAutoComplete(String addressAutoComplete) {
        this.addressAutoComplete = addressAutoComplete;
    }
    private List<AddressSuggestion> suggestedAddresses = new ArrayList<AddressSuggestion>();
    private int DEFAULT_MAX_SUGGEST_RESULTS = 5;

    public int getAutocompleteMaxResults() {
        try {
            // Check for the max autocomplete results property
            if (jndiResourceLoader.appResource().containsKey(Consts.ADDRESS_AUTOCOMPLETE_MAX_RESULTS)) {
                // Override default setting with supplied max results property
                return Integer.parseInt(jndiResourceLoader.appResource().get(Consts.ADDRESS_AUTOCOMPLETE_MAX_RESULTS));
            }
        } catch (NamingException ex) {

        }
        return DEFAULT_MAX_SUGGEST_RESULTS;
    }

    public String getOOP() {
        return OOP;
    }

    public void setOOP(String isOOP) {
        this.OOP = isOOP;
    }

    public void timeInMillis() {
        getDto().setIdentifiers(new ArrayList<CollegeIdentifierDto>() {
            {
                add(new CollegeIdentifierDto() {
                    {
                        Calendar cal = Calendar.getInstance();
                        setIdentifier("" + cal.getTimeInMillis() + "" + new Double(Math.random() * 1000.0).intValue());
                    }
                });
            }
        });
    }

    public AddProviderManager() {

    }

    /**
     * If not null, but empty, then address doctor is availble but had no
     * results
     */
    public Boolean getSuggestedAddressesIsNotNullButEmpty() {
        return suggestedAddresses != null && suggestedAddresses.isEmpty();
    }

    /**
     * Initialize dropdowns and defaults.
     */
    @PostConstruct
    public void init() {

        // grab the request parameters
        Map<String, String> parametersMap = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
        String partyType = parametersMap.get("type");
        String oop = parametersMap.get("OOP");
        setOOP(oop);

        // filter appropriately for role type and IDs
        if (getOOP() != null && getOOP().matches("false") && partyType.matches(CodeTableCodes.GrsCtPartyType.IND.getValue())) {
            providerTypeSelectItems = droplists.getProviderRoleTypesForAdd();
        } else if (getOOP() != null && getOOP().matches("true") && partyType.matches(CodeTableCodes.GrsCtPartyType.IND.getValue())) {
            providerTypeSelectItems = droplists.getProviderRoleTypesForAddOOP();
        } else if (partyType != null && partyType.matches(CodeTableCodes.GrsCtPartyType.ORG.getValue())) {
            providerTypeSelectItems = droplists.getProviderRoleTypesForAddORG();
        } else { // default
            providerTypeSelectItems = droplists.getProviderRoleTypesForAdd();
        }

        //The 'Select One' option is the first and default one, so check the size to 1
        if (providerTypeSelectItems.isEmpty() || providerTypeSelectItems.size() == 1) {
            FacesContext.getCurrentInstance().addMessage(null,
                    new FacesMessage(FacesMessage.SEVERITY_INFO, "You do not have permission to add BC Providers.", null));
            return;
        }

        // Assume there is at least one Provider Role Type (apart from select one option), because if there is not the deployment is broken anyhow.
        dto.setTypeId((Long) providerTypeSelectItems.get(1).getValue());
        dto.getExpertise().add(new ExpertiseDto());
        dto.getCredentials().add(new CredentialsDto());

        providerTypeChanged();
        Long defaultCountryId = addressSupportService.getDefaultCountry().getCtlId();

        dto.getAddresses().get(0).setCountryId(defaultCountryId);
        dto.getAddresses().get(0).setProvinceOrStateTxt("BC");
        dto.getCredentials().get(0).setInstitutionCountryId(defaultCountryId);
        dto.getCredentials().get(0).setInstitutionProvStateId(addressSupportService.getDefaultProvince(defaultCountryId).getCtlId());

        initializeDefaultStatusCode();
        initializeDefaultStatusClassCode();

        suggestedAddresses = new ArrayList();
        addressProvinceSelectItems = addressSupportService.initProvinceDropdownOrderedByNameCode(dto.getAddresses().get(0).getCountryId());
    }

    /**
     * Initialize the Status Code dropdowns.
     *
     * The Status Reason Code dropdowns and default Status Reason Code depend on
     * the Status Code, so after Status Code is initialized we initialize them
     * too.
     */
    private void initializeDefaultStatusCode() {
        PrsCtStatusCodes statusCode = maintainProviderService.getDefaultStatusCode();
        Long statusCodeId = statusCode.getCtlId();
        dto.getStatuses().get(0).setTypeId(statusCodeId);
        statusReasonCodeSelectItems = droplists.initializeStatusReasonCodeDropdowns(statusCodeId);
        initializeDefaultStatusReasonCode(statusCodeId);
    }

    /**
     * Initialize Status Reason Code based on the specified Status Code.
     *
     * @param statusCodeId a valid Status Code ID.
     */
    private void initializeDefaultStatusReasonCode(Long statusCodeId) {
        PrsCtStatusReasonCodes statusReasonCodeId = maintainProviderService.getDefaultStatusReasonCode(statusCodeId);
        dto.getStatuses().get(0).setReasonCodeId(statusReasonCodeId.getCtlId());
    }

    private void initializeDefaultStatusClassCode() {
        PrsCtStatusClassCodes defaultStatusClassCode = maintainProviderService.getDefaultStatusClassCode();
        if (defaultStatusClassCode != null) {
            dto.getStatuses().get(0).setClassCodeId(defaultStatusClassCode.getCtlId());
        }
    }

    /**
     * Persist the a new Provider and redirect to the View Provider page for the
     * new Provider.
     *
     * @return a redirect to the View Provider page for the new Provider.
     */
    public String save() {

        // Web request default.
        dto.setJurisdictionType(CodeTableCodes.PrsCtJurisdictions.BRITISH_COLUMBIA);

        PrsProviders provider;
        try {
            provider = addProviderService.saveWebProvider(dto);
        } catch (EntityValidationException | DuplicateRecordException ex) {
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, ex.getMessage(), ""));
            return null;
        } catch (BusinessRuleException ex) {
            if (ex.getResults().get(0).getMessages().get(0).getSeverity().toString().equals("WARNING")) {
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, ex.getMessage(), ""));
                return null;
            } else {
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, ex.getMessage(), ""));
                return null;
            }
        }

        return "ProviderDetails.xhtml?faces-redirect=true&p=" + provider.getPauthId();
    }

    /**
     * When Country Credential is changed, update the Province Credential
     * dropdown.
     */
    public void countryCredentialChanged() {
        //PLR-2159 If the cuntry code is null, reset all country and province details
        if (dto.getCredentials().get(0).getInstitutionCountryId() == null) {
            dto.getCredentials().get(0).setInstitutionCountry(null);
            dto.getCredentials().get(0).setInstitutionCountryCode(null);
            dto.getCredentials().get(0).setInstitutionProvStateId(null);
            dto.getCredentials().get(0).setInstitutionProvState(null);
            dto.getCredentials().get(0).setInstitutionProvStateCode(null);
        } else {
            PrsCtProvState province = addressSupportService.getDefaultProvince(dto.getCredentials().get(0).getInstitutionCountryId());
            if (province != null) {
                Long provinceId = province.getCtlId();
                dto.getCredentials().get(0).setInstitutionProvStateId(provinceId);
            } else {
                dto.getCredentials().get(0).setInstitutionProvStateId(null);
            }
        }
    }

    /**
     * When the Province is set to default empty option nullify all province
     * related details.
     */
    public void provinceCredentialChanged() {
        if (dto.getCredentials().get(0).getInstitutionProvStateId() == null) {
            dto.getCredentials().get(0).setInstitutionProvState(null);
            dto.getCredentials().get(0).setInstitutionProvStateCode(null);
        }
    }

    /**
     * When Status Code is changed, update the Status Reason Code dropdown.
     */
    public void statusCodeChanged() {
        statusReasonCodeSelectItems = droplists.initializeStatusReasonCodeDropdowns(dto.getStatuses().get(0).getTypeId());
        dto.getStatuses().get(0).setReasonCodeId(null);
    }

    /**
     * When Provider Role Type is changed, update the Expertise Type dropdown.
     */
    public void providerTypeChanged() {

        expertiseTypeSelectItems = droplists.getApplicableExpertiseTypes(dto.getTypeId());
        getDto().getExpertise().get(0).setTypeId(null);

        identifierTypeSelectItems = droplists.getApplicableIdentifierTypes(dto.getTypeId());
        removeIPCCPN();

        getDto().getIdentifiers().get(0).setTypeId(null);

        credentialTypeSelectItems = droplists.getApplicableCredentials(dto.getTypeId());
        getDto().getCredentials().get(0).setTypeId(null);
    }

    /**
     * Removes IPC and CPN identifier types from a select item list
     */
    private void removeIPCCPN() {
        List<SelectItem> removeIDItems = new ArrayList<SelectItem>();
        for (SelectItem selectItem : identifierTypeSelectItems) {
            if (selectItem.getValue() != null) {
                if (selectItem.getValue().equals(codesDao.lookup(PrsCtIdentifierTypes.class, CodeTableCodes.PrsCtIdentifierTypeCodes.CPN.getValue()).getCtlId())
                        || selectItem.getValue().equals(codesDao.lookup(PrsCtIdentifierTypes.class, CodeTableCodes.PrsCtIdentifierTypeCodes.IPC.getValue()).getCtlId())) {
                    removeIDItems.add(selectItem);
                }
            }
        }
        identifierTypeSelectItems.removeAll(removeIDItems);
    }

    public void resetPhone() {
        dto.getTelecommunication().get(0).setAreaCode(null);
        dto.getTelecommunication().get(0).setNumber(null);
        dto.getTelecommunication().get(0).setExtension(null);
        dto.getTelecommunication().get(0).setEffectiveStartDate(null);
        dto.getTelecommunication().get(0).setTypeId(codesDao.lookup(PrsCtTelecomNumberTypes.class, CodeTableCodes.PrsCtTelecomNumberTypes.TELEPHONE).getCtlId());
        dto.getTelecommunication().get(0).setCommunicationPurposeId(codesDao.lookup(PrsCtCommunPurposeTypes.class, CodeTableCodes.PrsCtCommunPurposeTypes.BUSINESS_CONTACT).getCtlId());
        PrimeRequestContext.getCurrentInstance().getApplicationContext().release(); //reset("form:phoneGrid");
    }

    public void resetFax() {
        dto.getTelecommunication().get(1).setAreaCode(null);
        dto.getTelecommunication().get(1).setNumber(null);
        dto.getTelecommunication().get(1).setEffectiveStartDate(null);
        dto.getTelecommunication().get(1).setTypeId(codesDao.lookup(PrsCtTelecomNumberTypes.class, CodeTableCodes.PrsCtTelecomNumberTypes.FAX).getCtlId());
        dto.getTelecommunication().get(1).setCommunicationPurposeId(codesDao.lookup(PrsCtCommunPurposeTypes.class, CodeTableCodes.PrsCtCommunPurposeTypes.BUSINESS_CONTACT).getCtlId());
        PrimeRequestContext.getCurrentInstance().getApplicationContext().release(); //reset("form:faxGrid");
    }

    public void resetEmail() {
        dto.getElectronicAddresses().get(0).setAddress(null);
        dto.getElectronicAddresses().get(0).setEffectiveStartDate(null);
        PrimeRequestContext.getCurrentInstance().getApplicationContext().release(); //reset("form:emailGrid");
    }

    public void resetCredential() {
        /* Country and province are not reset because it breaks the default
         country and province logic. If we need to reset these values, revisit
         the logic.
         */
        dto.getCredentials().get(0).setTypeId(null);
        dto.getCredentials().get(0).setDesignation(null);
        dto.getCredentials().get(0).setRegistrationNumber(null);
        dto.getCredentials().get(0).setGrantingInstitution(null);
        dto.getCredentials().get(0).setInstitutionCity(null);
        dto.getCredentials().get(0).setEquivalencyFlag(false);
        dto.getCredentials().get(0).setYearIssued(null);
        dto.getCredentials().get(0).setEffectiveStartDate(null);
        PrimeRequestContext.getCurrentInstance().getApplicationContext().release(); //reset("form:credGrid");
    }

    public void resetExpertise() {
        dto.getExpertise().get(0).setTypeId(null);
        dto.getExpertise().get(0).setSourcesCode(null);
        dto.getExpertise().get(0).setEffectiveStartDate(null);
        PrimeRequestContext.getCurrentInstance().getApplicationContext().release(); // reset("form:expertGrid");
    }

    /**
     * Validate the format of the email address.
     *
     * (Method signature must match
     * {@link javax.faces.validator.Validator#validate(javax.faces.context.FacesContext, javax.faces.component.UIComponent, java.lang.Object)}.
     *
     * @param context
     * @param component
     * @param value
     * @throws ValidatorException
     */
    public void validateEmail(FacesContext context, UIComponent component, Object value) throws ValidatorException {
        String address = (String) value;
        BusinessRuleResult result = validateEmailAddress.validate(address);
        if (!result.isValid()) {
            FacesMessage msg = new FacesMessage(result.getMessages().get(0).getMessage());
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            throw new ValidatorException(msg);
        }
    }

    /**
     * Retrieve a list of address suggestions from the AddressDoctorManager.
     *
     * @param criteria user input
     * @return list of suggested addresses
     */
    public List<AddressSuggestion> suggestAddresses(String criteria) {
        addressCountryChanged(addressSupportService.getDefaultCountry().getCtlId());
        suggestedAddresses = addressDoctorService.suggestAddresses(criteria);
        return suggestedAddresses;
    }

    /**
     * Parses a selected address suggestion into the DTO's address fields.
     *
     * @param event represents an item selected by the user
     */
    public void onAutoCompleteSelection(SelectEvent event) {
        StringBuilder selection = new StringBuilder((String) event.getObject());
        for (AddressSuggestion address : suggestedAddresses) {
            if (address.toString().contains(selection)) {
                dto.getAddresses().get(0).setAddressLineOne(address.getAddressLine1());
                dto.getAddresses().get(0).setAddressLineTwo(address.getAddressLine2());
                dto.getAddresses().get(0).setAddressLineThree(address.getAddressLine3());
                dto.getAddresses().get(0).setAddressLineFour(address.getAddressLine4());
                dto.getAddresses().get(0).setCity(address.getCity());
                dto.getAddresses().get(0).setCountry(address.getCountry());
                dto.getAddresses().get(0).setCountryId(addressSupportService.getDefaultCountry().getCtlId());
                dto.getAddresses().get(0).setProvinceOrStateTxt(address.getProvince());
                dto.getAddresses().get(0).setPostalCode(address.getPostalCode());
                break;
            }
        }
        addressAutoComplete = "";
    }

    /**
     * Updates the province selection drop down when a new country is selected.
     *
     * @param updatedCountry given country code
     */
    public void addressCountryChanged(Long updatedCountry) {
        addressProvinceSelectItems = addressSupportService.initProvinceDropdownOrderedByNameCode(updatedCountry);
        dto.getAddresses().get(0).setProvinceOrStateTxt("");
    }
    private AddressDto recommendedAddress;

    public AddressDto getRecommendedAddress() {
        return recommendedAddress;
    }

    public void setRecommendedAddress(AddressDto recommended) {
        this.recommendedAddress = recommended;
    }

    public String onFlowProcess(FlowEvent event) {
        if ("contact".equals(event.getOldStep()) && !addrInvalidWarnedFlag) {
            
            LOG.log(Level.INFO, "AddProviderManager onFlowProcess Country_Code id is: {0}.",
                    new Object[]{dto.getAddresses().get(0).getCountryId()});

            if (dto.getAddresses().get(0).getCountryId().equals(codesDao.lookup(PrsCtCountries.class, "CA").getCtlId())) {
                GrsAddresses grsAddressResult = maintainAddressService.validateAddressForWarn(dto.getAddresses().get(0));
                if (grsAddressResult.getValidationStatus().getCtlNameCode().equals("I")) {
                    if (grsAddressResult.isProcessStatusWarnLevel()){
                        this.recommendedAddress = new AddressDto();
                        this.recommendedAddress = convertGrsToDtoAddress(grsAddressResult);
                        addrInvalidWarnedFlag = true;
                        PrimeFaces.current().executeScript("PF('addrValidDlg').show()");                      
                        return event.getOldStep();
                    } else {
                        // address is invalid but there are no corrections available
                        addrInvalidWarnedFlag = true;
                        LOG.log(Level.INFO, "validateAddressForWarn:=I no corrections= ");
                        PrimeFaces.current().executeScript("PF('addrInvalidNoCorrectionsDlg').show()");
                        return event.getOldStep();
                    }

                } else if (grsAddressResult.getValidationStatus().getCtlNameCode().equals("U")) {
                    addrInvalidWarnedFlag = true;
                    PrimeFaces.current().executeScript("PF('addrValidationUnkownDlg').show()");
                    return event.getOldStep();
                }
            } else {
                return event.getNewStep();
            }
        } else if (!"contact".equals(event.getOldStep())) {
            addrInvalidWarnedFlag = false;
        }
        
        // add warn invalid address message from the contact old step
        if (("confirm".equalsIgnoreCase(event.getNewStep()) && addrInvalidWarnedFlag) ) {
            addAddressInvalidWarnMsg();
        }
        return event.getNewStep();
    }

    /**
     * Handles warning messages for address w/status invalid.
     *
     */
    public void addAddressInvalidWarnMsg() {
        BusinessRuleKeys keyWarnInvalid = BusinessRuleKeys.WARNING_ADD_ADDRESS_VALIDATION_INVALID;
        String messageWarnInvalid = BusinessRuleMessageDao.getMessageResource(keyWarnInvalid);
        FacesContext.getCurrentInstance().addMessage("addrWarnInvalidMsg", new FacesMessage(FacesMessage.SEVERITY_WARN, messageWarnInvalid, ""));
    }

    /*User has entered an invalid address and has chosen to continue using the address returned from Address Doctor, so replace the address obj and continue*/
    public void useADAddress() {
        //convert to addressDto
        LOG.log(Level.INFO, "AddProviderManager useADAddress");
        //replace the dto address elements returned from AD
        AddressDto recommended = this.getRecommendedAddress();
        if (recommended.getAddressLineOne() != null && !recommended.getAddressLineOne().isEmpty()) {
            dto.getAddresses().get(0).setAddressLineOne(recommended.getAddressLineOne());
        }
        if (recommended.getAddressLineTwo() != null && !recommended.getAddressLineTwo().isEmpty()) {
            dto.getAddresses().get(0).setAddressLineTwo(recommended.getAddressLineTwo());
        }
        if (recommended.getCity() != null && !recommended.getCity().isEmpty()) {
            dto.getAddresses().get(0).setCity(recommended.getCity());
        }
        if (recommended.getProvinceOrStateTxt()!= null && !recommended.getProvinceOrStateTxt().isEmpty()) {
            dto.getAddresses().get(0).setProvinceOrStateTxt(recommended.getProvinceOrStateTxt());
        }
        if (recommended.getPostalCode()!= null && !recommended.getPostalCode().isEmpty()) {
            dto.getAddresses().get(0).setPostalCode(recommended.getPostalCode());
        }

        LOG.log(Level.INFO, "AddProviderManager useADAddress_List_Size is: {0} "
                + "and getAddressLineOne is : {1}.", 
                new Object[]{this.dto.getAddresses().size(), 
                    this.dto.getAddresses().get(0).getAddressLineOne()});
        
        // added warning message when address status is changed to recommended/valid
        BusinessRuleKeys keyWarnValid = BusinessRuleKeys.WARNING_ADD_ADDRESS_VALIDATION_VALID;
        String messageWarnValid = BusinessRuleMessageDao.getMessageResource(keyWarnValid);
        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_WARN, messageWarnValid, ""));
    }
    

    public AddressDto convertGrsToDtoAddress(GrsAddresses grsAddresses) {
        AddressDto addressDto = new AddressDto();
        if (!grsAddresses.getAddressLine1Txt().isEmpty() && grsAddresses.getAddressLine1Txt() != null) {
            addressDto.setAddressLineOne(grsAddresses.getAddressLine1Txt());
        }
        if (!grsAddresses.getAddressLine2Txt().isEmpty() && grsAddresses.getAddressLine2Txt() != null) {
            addressDto.setAddressLineTwo(grsAddresses.getAddressLine2Txt());
        }/* if(!grsAddresses.getAddressLine3Txt().isEmpty() && grsAddresses.getAddressLine3Txt() != null){
            addressDto.setAddressLineThree(grsAddresses.getAddressLine3Txt());
        } if(!grsAddresses.getAddressLine4Txt().isEmpty() && grsAddresses.getAddressLine4Txt() != null){
            addressDto.setAddressLineFour(grsAddresses.getAddressLine4Txt());
        }*/
        if (!grsAddresses.getCityTxt().isEmpty() && grsAddresses.getCityTxt() != null) {
            addressDto.setCity(grsAddresses.getCityTxt());
        }
        if (!grsAddresses.getProvinceOrStateTxt().isEmpty() && grsAddresses.getProvinceOrStateTxt() != null) {
            addressDto.setProvinceOrStateTxt(grsAddresses.getProvinceOrStateTxt());
        }
        if (!grsAddresses.getPostalCodeOrZipTxt().isEmpty() && grsAddresses.getPostalCodeOrZipTxt() != null) {
            addressDto.setPostalCode(grsAddresses.getPostalCodeOrZipTxt());
        }
        return addressDto;
    }

    /**
     * Return the transfer object backing the form.
     *
     * @return the transfer object backing the form.
     */
    public ProviderDto getDto() {
        return dto;
    }

    public List<SelectItem> getStatusReasonCodeSelectItems() {
        return statusReasonCodeSelectItems;
    }

    public List<SelectItem> getExpertiseTypeSelectItems() {
        return expertiseTypeSelectItems;
    }

    public List<SelectItem> getIdentifierTypeSelectItems() {
        return identifierTypeSelectItems;
    }

    public List<SelectItem> getCredentialTypeSelectItems() {
        return credentialTypeSelectItems;
    }

    public List<SelectItem> getProviderTypeSelectItems() {
        return providerTypeSelectItems;
    }

    public boolean isAddPhoneNumber() {
        return addPhoneNumber;
    }

    public void setAddPhoneNumber(boolean addPhoneNumber) {
        this.addPhoneNumber = addPhoneNumber;
    }

    public boolean isAddFaxNumber() {
        return addFaxNumber;
    }

    public void setAddFaxNumber(boolean addFaxNumber) {
        this.addFaxNumber = addFaxNumber;
    }

    public boolean isAddEmail() {
        return addEmail;
    }

    public void setAddEmail(boolean addEmail) {
        this.addEmail = addEmail;
    }

    public boolean isAddCredential() {
        return addCredential;
    }

    public void setAddCredential(boolean addCredential) {
        this.addCredential = addCredential;
    }

    public boolean isAddExpertise() {
        return addExpertise;
    }

    public void setAddExpertise(boolean addExpertise) {
        this.addExpertise = addExpertise;
    }

    public List<SelectItem> getProviderTypeSelectItemsOOP() {
        return providerTypeSelectItemsOOP;
    }

    public void setProviderTypeSelectItemsOOP(List<SelectItem> providerTypeSelectItemsOOP) {
        this.providerTypeSelectItemsOOP = providerTypeSelectItemsOOP;
    }

    public List<SelectItem> getProviderTypeSelectItemsORG() {
        return providerTypeSelectItemsORG;
    }

    public void setProviderTypeSelectItemsORG(List<SelectItem> providerTypeSelectItemsORG) {
        this.providerTypeSelectItemsORG = providerTypeSelectItemsORG;
    }

    public List<AddressSuggestion> getSuggestedAddresses() {
        return suggestedAddresses;
    }

    public void setSuggestedAddresses(List<AddressSuggestion> suggestedAddresses) {
        this.suggestedAddresses = suggestedAddresses;
    }

    public List<SelectItem> getAddressProvinceSelectItems() {
        return addressProvinceSelectItems;
    }

    public void setAddressProvinceSelectItems(List<SelectItem> addressProvinceSelectItems) {
        this.addressProvinceSelectItems = addressProvinceSelectItems;
    }

    // Required for @ManagedProperty injection.
    public void setAddressDoctorService(AddressDoctorService addressDoctorService) {
        this.addressDoctorService = addressDoctorService;
    }
}
