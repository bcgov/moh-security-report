/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.web.bean.admin;

import ca.bc.gov.health.plr.dto.dps.AccessProfileGroupDescDto;
import ca.bc.gov.health.plr.dto.dps.AccessProfileGroupDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtJurisdictions;
import ca.bc.gov.health.plr.persistence.CodeTableCodes;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.producer.type.Authenticated;
import ca.bc.gov.health.plr.producer.type.User;
import ca.bc.gov.health.plr.service.dps.DpsService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.Droplists;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import java.io.Serializable;
import java.util.Date;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.inject.Instance;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.inject.Inject;

/**
 *
 * @author sumesh.kariyil
 */
@ManagedBean
@ViewScoped
public class MaintainDpsManager extends PlrManagedBean implements Serializable {
    
    private AccessProfileGroupDto dpsDto;
    
    private List<AccessProfileGroupDto> groups;
    
    @EJB
    private CodesDao codesDao;
    
    @EJB
    private DpsService dpsService;
    
    @Inject
    @Authenticated
    private Instance<User> user;
    
    private Long cloneOrigin;
    
    @Inject
    private Droplists droplist;
    
    /**
     * Initialize the backing transfer objects.
     */
    @PostConstruct
    public void init() {
        initDps();
    }
    
    /**
     * Suggests a list of Party names on keyed user input
     *
     * @param criteria
     * @return a list of Party names based on keyed user input.
     */
    public List<String> suggestRegUserChid(String criteria) {        
        return dpsService.suggestRegUserChid(criteria);
    }

    
    /**
     * Method to display information for update DPS
     * @param accessProfileGroupDto 
     */
    public void updateDps(AccessProfileGroupDto accessProfileGroupDto){
        dpsDto = accessProfileGroupDto;
        if(dpsDto.getActiveGroupDesc() == null){
            initActiveAccessGroup();
        }
        cloneOrigin = null;
    } 
    
    
    
    /**
     * Method to clone the DPS and create new
     * @param accessProfileGroupDto 
     */
    public void cloneDps(AccessProfileGroupDto accessProfileGroupDto){
        initDps();
        cloneOrigin = accessProfileGroupDto.getId();
        dpsDto.setGroupChid(accessProfileGroupDto.getGroupChid()+" - CLONE");
        dpsDto.getActiveGroupDesc().setDescription(accessProfileGroupDto.getActiveGroupDesc().getDescription());
    }
    
    /**
     * Method to add a new DPS
     * 
     */
    public void addDps(){        
        initDps();
    }
    
    /**
     * Saves DPS
     */
    public void save(){
        try {
            dpsService.saveDps(dpsDto, cloneOrigin);
            //refresh the drop down list
            droplist.initGrsAccessProfileGroupNames();
            String message = "The DPS was successfully " + (dpsDto.isNew() ? "created." : "updated.");
            FacesContext.getCurrentInstance().addMessage(PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (EntityValidationException ex) {
            FacesContext.getCurrentInstance().validationFailed();
            FacesContext.getCurrentInstance().addMessage(PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_ERROR, ex.getMessage(), ""));
        } finally{            
            groups.clear();
            groups.addAll(dpsService.findAllDps());
        }
    }
    
    
    /**
     * Initialize the access profile group and description DTOs
     */
    private void initDps(){
        cloneOrigin = null;
        dpsDto = new AccessProfileGroupDto();        
        Date today = new Date();
        dpsDto.setRegUserChid(user.get().getUserEntity().getPartyPartyId().getRegistryUserOrgChid());
        PrsCtJurisdictions defaultJur = codesDao.lookup(PrsCtJurisdictions.class, CodeTableCodes.PrsCtJurisdictions.BRITISH_COLUMBIA.getValue());
        dpsDto.setJurisdictionCodeId(defaultJur.getCtlId());
        dpsDto.setJurisdictionCode(defaultJur.getCtlNameCode());
        dpsDto.setJurisdictionDesc(defaultJur.getCtlDescTxt());
        dpsDto.setActive(true);
        dpsDto.setCreatedDate(today);
        initActiveAccessGroup();
    }
    
    
     private void initActiveAccessGroup() {
        dpsDto.setActiveGroupDesc(new AccessProfileGroupDescDto());
        Date today = new Date();
        dpsDto.getActiveGroupDesc().setCreatedDate(today);
        dpsDto.getActiveGroupDesc().setEffectiveStartDate(today);
        dpsDto.getActiveGroupDesc().setActive(true);
    }

    public AccessProfileGroupDto getDpsDto() {
        return dpsDto;
    }

    public void setDpsDto(AccessProfileGroupDto dpsDto) {
        this.dpsDto = dpsDto;
    }

    public List<AccessProfileGroupDto> getGroups() {
        return groups;
    }

    public void setGroups(List<AccessProfileGroupDto> groups) {
        this.groups = groups;
    }

    public Long getCloneOrigin() {
        return cloneOrigin;
    }

    public void setCloneOrigin(Long cloneOrigin) {
        this.cloneOrigin = cloneOrigin;
    }

}
