package ca.bc.gov.health.plr.web.bean.provider;

import ca.bc.gov.health.plr.dto.provider.ConfidentialityIndicatorDto;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.MaintainConfidentialityService;
import ca.bc.gov.health.plr.service.provider.MaintainProviderService;
import ca.bc.gov.health.plr.service.provider.security.AuthorizationService;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import ca.bc.gov.health.plr.web.bean.PlrManagedBean;
import ca.bc.gov.health.plr.web.util.JSFUtils;
import java.util.List;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ViewScoped;
import javax.faces.context.FacesContext;
import javax.inject.Inject;

/**
 * MaintainConfidentiality.xhtml backing bean.
 *
 * @author greg.perkins
 */
@ManagedBean
@ViewScoped
public class MaintainConfidentialityManager {

    /**
     * EJB for dealing with persistence
     */
    @Inject
    protected MaintainConfidentialityService maintainConfidentialityService;
    @EJB
    protected MaintainProviderService maintainProviderService;

    private Long pauthId;
    /**
     * ConfidentialityIndicator instance that we're editing
     */
    protected ConfidentialityIndicatorDto confidentialityDto;
    /**
     * List of all ConfidentialityIndicators for the provider so we can add new
     * items to it
     */
    protected List<ConfidentialityIndicatorDto> confidentialityIndicators;

    /**
     * Initialize the backing transfer objects. We'll do all at once since it's
     * cheap and we don't know what the users may choose.
     */
    @PostConstruct
    public void init() {
        confidentialityDto = new ConfidentialityIndicatorDto();
    }

    /**
     * Initial method called from page which determines if the request is an add
     * or an update
     */
    public void save() {

        if (confidentialityDto.isNew()) {
            confidentialityDto.setPauthId(pauthId);
        }
        try {
            maintainProviderService.save(confidentialityDto);
            List<ConfidentialityIndicatorDto> result = maintainConfidentialityService.refreshConfidentialityIndicators(pauthId);
            confidentialityIndicators.clear();
            confidentialityIndicators.addAll(result);

            String message = JSFUtils.prepareSuccessMessage("Confidentiality Indicator", confidentialityDto);
            FacesContext.getCurrentInstance().addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_INFO, message, ""));
        } catch (DuplicateRecordException | EntityValidationException | BusinessRuleException ex) {
            FacesContext.getCurrentInstance().addMessage(PlrManagedBean.PROVIDER_DETAILS_GROWL, new FacesMessage(FacesMessage.SEVERITY_ERROR, ex.getMessage(), ""));
            FacesContext.getCurrentInstance().validationFailed();
        }

    }

    public ConfidentialityIndicatorDto getConfidentialityDto() {
        return confidentialityDto;
    }

    public void setConfidentialityDto(ConfidentialityIndicatorDto confidentialityDto) {
        this.confidentialityDto = confidentialityDto;
    }

    public List<ConfidentialityIndicatorDto> getConfidentialityIndicators() {
        return confidentialityIndicators;
    }

    public void setConfidentialityIndicators(List<ConfidentialityIndicatorDto> confidentialityIndicators) {
        this.confidentialityIndicators = confidentialityIndicators;
    }

    /**
     * @param pauthId the pauthId to set
     */
    public void setPauthId(Long pauthId) {
        this.pauthId = pauthId;
    }

    public boolean canWrite(ConfidentialityIndicatorDto confidentialityDto) {
        return maintainConfidentialityService.isPermitted(confidentialityDto, AuthorizationService.AccessType.WRITE);
    }

    public boolean canCreate(Long pauthId) {

        if (confidentialityDto.getPauthId() == null) {
            confidentialityDto.setPauthId(pauthId);
        }
        return maintainConfidentialityService.isPermitted(confidentialityDto, AuthorizationService.AccessType.WRITE);
    }

}
