package ca.bc.gov.health.plr.web.bean.provider;

import ca.bc.gov.health.plr.dto.provider.StatusDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusClassCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusReasonCodes;
import ca.bc.gov.health.plr.service.provider.ProviderHelperService;
import ca.bc.gov.health.plr.web.Droplists;
import java.util.ArrayList;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *
 * @author Grant.Hodgins
 */
public class MaintainStatusManagerTest {

    private MaintainStatusManager maintainStatusBean;
    private ProviderHelperService mockMaintainProviderService;

    @Before
    public void setUp() {
        mockMaintainProviderService = mock(ProviderHelperService.class);
        maintainStatusBean = new MaintainStatusManager();
        maintainStatusBean.providerServiceHelper = mockMaintainProviderService;
        maintainStatusBean.dto = new StatusDto();
        maintainStatusBean.droplists = mock(Droplists.class);

        // Mock some mandatory values to avoid NullPointerExpceptions.
        when(mockMaintainProviderService.getDefaultStatusCode()).thenReturn(mock(PrsCtStatusCodes.class));
        when(mockMaintainProviderService.getDefaultStatusReasonCode(Mockito.anyLong())).thenReturn(mock(PrsCtStatusReasonCodes.class));
    }

    /**
     * Test that the backing bean obtains the default status code from the
     * service.
     */
    @Test
    public void testDefaultStatusCode() {

        PrsCtStatusCodes mockStatusCode = mock(PrsCtStatusCodes.class);
        Long defaultStatusCodeId = 54l;
        when(mockStatusCode.getCtlId()).thenReturn(defaultStatusCodeId);
        when(mockMaintainProviderService.getDefaultStatusCode()).thenReturn(mockStatusCode);

        maintainStatusBean.providerServiceHelper = mockMaintainProviderService;
        maintainStatusBean.reset();
        assertEquals(defaultStatusCodeId, maintainStatusBean.getDto().getTypeId());
    }

    /**
     * Test that the backing bean obtains the default status class code from the
     * service.
     */
    @Test
    public void testDefaultStatusClassCode() {

        PrsCtStatusClassCodes mockStatusClassCode = mock(PrsCtStatusClassCodes.class);
        Long defaultStatusCodeId = 54l;
        when(mockStatusClassCode.getCtlId()).thenReturn(defaultStatusCodeId);
        when(mockMaintainProviderService.getDefaultStatusClassCode()).thenReturn(mockStatusClassCode);

        maintainStatusBean.providerServiceHelper = mockMaintainProviderService;
        maintainStatusBean.reset();
        assertEquals(defaultStatusCodeId, maintainStatusBean.getDto().getClassCodeId());
    }

    @Test
    public void testGetStatusReasonCodeSelectItems_correctCodes() {
        Long statusCodeId = 42l;
        ArrayList<PrsCtStatusReasonCodes> statusReasonCodes = new ArrayList<>();
        statusReasonCodes.add(mock(PrsCtStatusReasonCodes.class));
        statusReasonCodes.add(mock(PrsCtStatusReasonCodes.class));
        when(mockMaintainProviderService.filterStatusReasonCodes(statusCodeId)).thenReturn(statusReasonCodes);

        // Confirm that an unrecognized Status Code is associated with no Status Reason Codes.
        maintainStatusBean.getDto().setTypeId(Long.MIN_VALUE);
        maintainStatusBean.statusCodeChanged();
        assertTrue(maintainStatusBean.getStatusReasonCodeSelectItems().isEmpty());
    }

    @Test
    public void testStatusCodeChanged_nullStatusReasonCode() {
        maintainStatusBean.getDto().setTypeId(Long.MIN_VALUE);
        maintainStatusBean.statusCodeChanged();
        assertNull(maintainStatusBean.getDto().getReasonCodeId());
    }
}
