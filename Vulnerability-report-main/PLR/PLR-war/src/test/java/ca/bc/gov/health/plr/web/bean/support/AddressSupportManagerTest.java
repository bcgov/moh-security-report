/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.web.bean.support;

import ca.bc.gov.health.dsr.web.PrsWorkLocationBean;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvState;
import ca.bc.gov.health.plr.service.provider.AddressSupportService;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Collections;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *
 * @author ian.scott
 */
public class AddressSupportManagerTest {

    private AddressSupportService mockAddressSupportService;
    private AddressSupportManager addressSupportBean;

    @Before
    public void setUp() throws IllegalArgumentException, IllegalAccessException, NoSuchFieldException {
        mockAddressSupportService = mock(AddressSupportService.class);
        addressSupportBean = new AddressSupportManager();
        Field field = AddressSupportManager.class.getDeclaredField("prsWorkLocationBean");
        field.setAccessible(true);
        field.set(addressSupportBean, new PrsWorkLocationBean());
        
        addressSupportBean.addressSupportService = mockAddressSupportService;



        when(mockAddressSupportService.getDefaultProvince(Mockito.anyLong())).thenReturn(mock(PrsCtProvState.class));
        when(mockAddressSupportService.getDefaultCountry()).thenReturn(mock(PrsCtCountries.class));

    }

    /**
     * Test that if there are no provinces associated with the default country,
     * the province dropdown lists are empty.
     */
    @Test
    public void testDefaultCountry_noProvinces() {

        when(mockAddressSupportService.getProvincesOrderedByName(Mockito.anyLong())).thenReturn(Collections.<PrsCtProvState>emptyList());
        addressSupportBean.init();


        assertTrue(addressSupportBean.getProvinceSelectItemsGroup1().isEmpty());
        assertTrue(addressSupportBean.getProvinceSelectItemsGroup2().isEmpty());
    }

    /**
     * Test that when the country address is changed to a country for which
     * provinces are associated, the associated provinces are set in the backing
     * bean.
     */
    @Test
    public void testGetProvinceAddressSelectItems_correctProvinces() {

        PrsCtCountries mockCountry = mock(PrsCtCountries.class);
        Long countryId =
                5l;
        when(mockCountry.getCtlId()).thenReturn(countryId);
        ArrayList< PrsCtProvState> provinces = new ArrayList<>();
        provinces.add(mock(PrsCtProvState.class));
        provinces.add(mock(PrsCtProvState.class));
        when(mockAddressSupportService.getProvincesOrderedByName(countryId)).thenReturn(provinces);

        // Test that an unrecognized country returns no provinces.

        addressSupportBean.countryChangedGroup1(6l);
        assertTrue(addressSupportBean.getProvinceSelectItemsGroup1().isEmpty());

        // Test that a recognized country returns the expected provinces.
        addressSupportBean.countryChangedGroup1(countryId);
        assertEquals(2,
                addressSupportBean.getProvinceSelectItemsGroup1().size());
    }

    /**
     * Test that when the country credential is changed to a country for which
     * provinces are associated, the associated provinces are set in the backing
     * bean.
     */
    @Test
    public void testGetProvinceCredentialSelectItems_correctProvinces() {

        PrsCtCountries mockCountry = mock(PrsCtCountries.class);
        Long countryId =
                5l;
        when(mockCountry.getCtlId()).thenReturn(countryId);
        ArrayList<PrsCtProvState> provinces = new ArrayList<>();
        provinces.add(mock(PrsCtProvState.class));
        provinces.add(mock(PrsCtProvState.class));
        when(mockAddressSupportService.getProvincesOrderedByName(countryId)).thenReturn(provinces);

        // Test that an unrecognized country returns no provinces.
        addressSupportBean.countryChangedGroup2(6l);
        assertTrue(addressSupportBean.getProvinceSelectItemsGroup2().isEmpty());

        // Test that a recognized country returns the expected provinces.
        addressSupportBean.countryChangedGroup2(countryId);
        assertEquals(2,
                addressSupportBean.getProvinceSelectItemsGroup2().size());
    }
}
