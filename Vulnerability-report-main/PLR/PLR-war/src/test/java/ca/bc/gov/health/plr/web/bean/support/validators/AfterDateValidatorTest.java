/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.plr.web.bean.support.validators;

import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.component.UIComponent;
import javax.faces.component.UIInput;
import javax.faces.component.UIViewRoot;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;
import javax.faces.context.ResponseStream;
import javax.faces.context.ResponseWriter;
import javax.faces.render.RenderKit;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Matchers.anyBoolean;
import static org.mockito.Matchers.anyString;
import org.mockito.Mockito;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *
 * @author Jonathan.Wiebe
 */
public class AfterDateValidatorTest {

    public AfterDateValidatorTest() {
    }

    @Before
    public void setUp() {
        facesContext = new FacesContext() {
            {
            }

            @Override
            public Application getApplication() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public Iterator<String> getClientIdsWithMessages() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public ExternalContext getExternalContext() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public FacesMessage.Severity getMaximumSeverity() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public Iterator<FacesMessage> getMessages() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public Iterator<FacesMessage> getMessages(String clientId) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public RenderKit getRenderKit() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public boolean getRenderResponse() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public boolean getResponseComplete() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public ResponseStream getResponseStream() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void setResponseStream(ResponseStream responseStream) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public ResponseWriter getResponseWriter() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void setResponseWriter(ResponseWriter responseWriter) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public UIViewRoot getViewRoot() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void setViewRoot(UIViewRoot root) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void addMessage(String clientId, FacesMessage message) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void release() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void renderResponse() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void responseComplete() {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        };
    }
    
    @After
    public void tearDown() {
    }

    FacesContext facesContext = null;
    
    @Test
    public void testValidate_Pass() {
        AfterDateValidator afterDateValidator = new AfterDateValidator();
        UIComponent uiComponent = mock(UIComponent.class);
        UIInput uiInput = mock(UIInput.class);
        Mockito.doReturn(true).when(uiInput).isValid();
        Mockito.doReturn(new Date()).when(uiInput).getValue();
        Map<String, Object> map = new HashMap<>();
        map.put("beforeDate", uiInput);
        map.put("errorMessage", "error message");
        Mockito.doReturn(map).when(uiComponent).getAttributes();
        try {
            afterDateValidator.validate(facesContext, uiComponent, new Date());
        } catch(Exception ex) {
            assertTrue(false);
        }
        assertTrue(true);
    }
    
    @Test
    public void testValidate_Fail() {
        AfterDateValidator afterDateValidator = new AfterDateValidator();
        UIInput uiComponent = mock(UIInput.class);
        UIInput uiInput = mock(UIInput.class);
        Mockito.doReturn(true).when(uiInput).isValid();
        Mockito.doReturn(new Date()).when(uiInput).getValue();
        Map<String, Object> map = new HashMap<>();
        map.put("beforeDate", uiInput);
        map.put("errorMessage", "error message");
        Mockito.doReturn(map).when(uiComponent).getAttributes();
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.DAY_OF_MONTH, -1);
        boolean exThrown = false;
        try {
            afterDateValidator.validate(facesContext, uiComponent, cal.getTime());
        } catch(Exception ex) {
            assertTrue("error message".matches(ex.getMessage()));
            exThrown = true;
        }
        assertTrue(exThrown);
    }

}
