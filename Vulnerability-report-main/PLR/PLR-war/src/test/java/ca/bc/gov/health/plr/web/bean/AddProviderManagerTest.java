package ca.bc.gov.health.plr.web.bean;

import ca.bc.gov.health.plr.dto.provider.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvState;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusCodes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtStatusReasonCodes;
import ca.bc.gov.health.plr.service.provider.MaintainProviderService;
import ca.bc.gov.health.plr.service.provider.AddressSupportService;
import ca.bc.gov.health.plr.service.provider.ProviderHelperService;
import ca.bc.gov.health.plr.web.Droplists;
import ca.bc.gov.health.plr.dto.AddressSuggestion;
import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.faces.model.SelectItem;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.mockito.Mockito;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import org.primefaces.event.SelectEvent;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class AddProviderManagerTest {

    private AddProviderManager addProviderBean;
    private MaintainProviderService mockAddProviderService;
    private ProviderHelperService mockMaintainProviderService;
    private AddressSupportService mockAddressSupportService;
    private Droplists mockDroplists;

    @Before
    public void setUp() {
        mockAddProviderService = mock(MaintainProviderService.class);
        mockMaintainProviderService = mock(ProviderHelperService.class);
        mockAddressSupportService = mock(AddressSupportService.class);
        mockDroplists = mock(Droplists.class);
        addProviderBean = new AddProviderManager();
        addProviderBean.addProviderService = mockAddProviderService;
        addProviderBean.maintainProviderService = mockMaintainProviderService;
        addProviderBean.addressSupportService = mockAddressSupportService;
        addProviderBean.dto = new ProviderDto(true);
        addProviderBean.dto.getExpertise().add(new ExpertiseDto());
        addProviderBean.dto.getCredentials().add(new CredentialsDto());
        addProviderBean.dto.setTypeId(Long.MIN_VALUE);
        addProviderBean.droplists = mockDroplists;

        // Mock some mandatory values to avoid NullPointerExpceptions.
        when(mockMaintainProviderService.getDefaultStatusCode()).thenReturn(mock(PrsCtStatusCodes.class));
        when(mockMaintainProviderService.getDefaultStatusReasonCode(Mockito.anyLong())).thenReturn(mock(PrsCtStatusReasonCodes.class));

        when(mockAddressSupportService.getDefaultProvince(Mockito.anyLong())).thenReturn(mock(PrsCtProvState.class));
        when(mockAddressSupportService.getDefaultCountry()).thenReturn(mock(PrsCtCountries.class));

        when(mockDroplists.getProviderRoleTypesForAdd()).thenReturn(Arrays.asList(new SelectItem(null, "Please select"), new SelectItem(1l, "some value")));
    }

    /**
     * Test that when the country address changes, the province credential is
     * reset to null.
     */
    @Test
    public void countryCredentialChanged_resetProvinceCredential() {
        when(mockAddressSupportService.getDefaultProvince(Mockito.anyLong())).thenReturn(null);

        addProviderBean.getDto().getCredentials().get(0).setInstitutionProvStateId(1l);
        addProviderBean.countryCredentialChanged();
        assertNull(addProviderBean.getDto().getCredentials().get(0).getInstitutionProvStateId());
    }

    /**
     * Test that the backing bean obtains the default country from the service.
     */
    @Ignore
    @Test
    public void testDefaultCountry() {
        Long defaultCountry = 1l;
        PrsCtCountries mockCountry = mock(PrsCtCountries.class);
        when(mockCountry.getCtlId()).thenReturn(defaultCountry);
        when(mockAddressSupportService.getDefaultCountry()).thenReturn(mockCountry);

        addProviderBean.addProviderService = mockAddProviderService;
        addProviderBean.init();
        assertEquals(defaultCountry, addProviderBean.getDto().getAddresses().get(0).getCountryId());
        assertEquals(defaultCountry, addProviderBean.getDto().getCredentials().get(0).getInstitutionCountryId());
    }

    /**
     * Test that the backing bean obtains the default province from the service.
     */
    @Ignore
    @Test
    public void testDefaultProvince() {
        PrsCtCountries mockCountry = mock(PrsCtCountries.class);
        Long countryId = 6l;
        when(mockCountry.getCtlId()).thenReturn(countryId);
        when(mockAddressSupportService.getDefaultCountry()).thenReturn(mockCountry);

        PrsCtProvState mockProvince = mock(PrsCtProvState.class);
        Long provinceId = 5l;
        when(mockProvince.getCtlId()).thenReturn(provinceId);
        when(mockAddressSupportService.getDefaultProvince(countryId)).thenReturn(mockProvince);

        addProviderBean.addProviderService = mockAddProviderService;
        addProviderBean.init();

        assertEquals(provinceId, addProviderBean.getDto().getCredentials().get(0).getInstitutionProvStateId());
    }

    @Test
    public void testGetExpertiseTypeSelectItems_correctCodes() {
        Long someProviderTypeId = 78l;
        List<SelectItem> expertiseTypes = new ArrayList<>();
        expertiseTypes.add(mock(SelectItem.class));
        expertiseTypes.add(mock(SelectItem.class));
        when(mockDroplists.getApplicableExpertiseTypes(someProviderTypeId)).thenReturn(expertiseTypes);

        // Confirm that an unrecognized Provider Type is associated with no Expertise Types.
        addProviderBean.getDto().setTypeId(Long.MIN_VALUE);
        addProviderBean.providerTypeChanged();
        assertTrue(addProviderBean.getExpertiseTypeSelectItems().isEmpty());

        // Confirm that a recognized Provider Type is associated with the expected Expertise Types.
        addProviderBean.getDto().setTypeId(someProviderTypeId);
        addProviderBean.providerTypeChanged();
        assertEquals(2, addProviderBean.getExpertiseTypeSelectItems().size());
    }

    @Test
    public void testProviderTypeChanged_nullExpertiseType() {
        addProviderBean.getDto().getExpertise().get(0).setTypeId(Long.MIN_VALUE);
        addProviderBean.providerTypeChanged();
        assertNull(addProviderBean.getDto().getExpertise().get(0).getTypeId());
    }
    
    /**
     * Test that when an address suggestion is selected, the auto complete 
     * method properly populates the provider address with the selection's data.
     */
    @Ignore
    @Test
    public void testOnAutoCompleteSelection() {
        
        // Create sample address suggestion object
        AddressSuggestion address = new AddressSuggestion();
        address.setAddressLine1("Test bldg.");
        address.setAddressLine2("1st floor");
        address.setAddressLine3("123 Test st");
        address.setAddressLine4("PO box 0000");
        address.setCity("City");
        address.setProvince("BC");
        address.setCountry("CA");
        address.setPostalCode("A0A 0A0");
        
        // Create sample list containing the sample address suggestion
        List<AddressSuggestion> suggestedAddresses = new ArrayList();
        suggestedAddresses.add(address);
//        addProviderBean.setSuggestedAddresses(suggestedAddresses);
        
        // Mock the select event to represent a selected address suggestion
        SelectEvent event = mock(SelectEvent.class);
        when(event.getObject()).thenReturn(address.toString());
//        addProviderBean.onAutoCompleteSelection(event);
        
        // Confirm that the address dto is populated with the selected address suggestion's data
        assertEquals(address.getAddressLine1(), addProviderBean.dto.getAddresses().get(0).getAddressLineOne());
        assertEquals(address.getAddressLine2(), addProviderBean.dto.getAddresses().get(0).getAddressLineTwo());
        assertEquals(address.getAddressLine3(), addProviderBean.dto.getAddresses().get(0).getAddressLineThree());
        assertEquals(address.getAddressLine4(), addProviderBean.dto.getAddresses().get(0).getAddressLineFour());
        assertEquals(address.getCity(), addProviderBean.dto.getAddresses().get(0).getCity());
        assertEquals(address.getProvince(), addProviderBean.dto.getAddresses().get(0).getProvinceOrStateTxt());
        assertEquals(address.getCountry(), addProviderBean.dto.getAddresses().get(0).getCountry());
        assertEquals(address.getPostalCode(), addProviderBean.dto.getAddresses().get(0).getPostalCode());
        
        // Confirm that the auto complete field is cleared after processing
//        assertEquals("", addProviderBean.getAddressAutoComplete());
    }
    
    /*
    *
    */
    @Ignore
    @Test
    public void testUseADAddress(){
        //Setup original providerDto.addressDto
        AddressDto address = new AddressDto();
        address.setAddressLineOne("1175 Douglas Ave");
        address.setAddressLineTwo("");
        address.setCity("Victoria");
        address.setProvinceOrStateTxt("BC");
        address.setPostalCode("V8W 2E1");
        
        List<AddressDto> addresses = new ArrayList<>();
        addresses.add(address);        
        addProviderBean.dto.setAddresses(addresses);
        
        //Create recommended address
        AddressDto recommendedAddress = new AddressDto();
        recommendedAddress.setAddressLineOne("1175 Douglas St");
        recommendedAddress.setAddressLineTwo("");
        recommendedAddress.setCity("Victoria");
        recommendedAddress.setProvinceOrStateTxt("BC");
        recommendedAddress.setPostalCode("V8W 2E1");
        addProviderBean.setRecommendedAddress(recommendedAddress);
        
        //Replace original with recommended
        addProviderBean.useADAddress();
        
        //Verify the recommended address has been used
        assertEquals(recommendedAddress.getAddressLineOne(), addProviderBean.dto.getAddresses().get(0).getAddressLineOne());
        assertEquals(recommendedAddress.getAddressLineTwo(), addProviderBean.dto.getAddresses().get(0).getAddressLineTwo());
      /*  assertEquals(recommendedAddress.getAddressLineThree(), addProviderBean.dto.getAddresses().get(0).getAddressLineThree());
        assertEquals(recommendedAddress.getAddressLineFour(), addProviderBean.dto.getAddresses().get(0).getAddressLineFour());*/
        assertEquals(recommendedAddress.getCity(), addProviderBean.dto.getAddresses().get(0).getCity());
        assertEquals(recommendedAddress.getProvinceOrStateTxt(), addProviderBean.dto.getAddresses().get(0).getProvinceOrStateTxt());
        assertEquals(recommendedAddress.getCountry(), addProviderBean.dto.getAddresses().get(0).getCountry());
        assertEquals(recommendedAddress.getPostalCode(), addProviderBean.dto.getAddresses().get(0).getPostalCode());
    }
    
    /*
    *
    */
    @Test
    public void testConvertGrsToDtoAddress(){
        GrsAddresses grsAddresses = new GrsAddresses();
        grsAddresses.setAddressLine1Txt("1175 Douglas St");
        grsAddresses.setAddressLine2Txt("");
        grsAddresses.setCityTxt("Victoria");
        grsAddresses.setProvinceOrStateTxt("BC");
        grsAddresses.setPostalCodeOrZipTxt("V8W 2E1");
        
        AddressDto addressDto = addProviderBean.convertGrsToDtoAddress(grsAddresses);
        
        assertEquals(grsAddresses.getAddressLine1Txt(), addressDto.getAddressLineOne());
        assertNull(addressDto.getAddressLineTwo());
        assertEquals(grsAddresses.getCityTxt(), addressDto.getCity());
        assertEquals(grsAddresses.getProvinceOrStateTxt(), addressDto.getProvinceOrStateTxt());
        assertEquals(grsAddresses.getPostalCodeOrZipTxt(), addressDto.getPostalCode());
    }
}
