package ca.bc.gov.health.plr.web.bean.provider;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.ejb.entity.GrsAddresses;
import ca.bc.gov.health.plr.ejb.entity.PrsCtAddressTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtAddressValidTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCommunPurposeTypes;
import ca.bc.gov.health.plr.ejb.entity.PrsCtCountries;
import ca.bc.gov.health.plr.ejb.entity.PrsCtProvState;
import ca.bc.gov.health.plr.persistence.BusinessRuleKeys;
import ca.bc.gov.health.plr.persistence.BusinessRuleMessageDao;
import ca.bc.gov.health.plr.persistence.CodesDao;
import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import ca.bc.gov.health.plr.rule.BusinessRuleException;
import ca.bc.gov.health.plr.service.provider.AddressSupportService;
import ca.bc.gov.health.plr.service.provider.DuplicateRecordException;
import ca.bc.gov.health.plr.service.provider.MaintainAddressService;
import ca.bc.gov.health.plr.service.provider.MaintainProviderService;
import ca.bc.gov.health.plr.service.provider.MaintainProviderServiceHelper;
import ca.bc.gov.health.plr.service.validators.EntityValidationException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.validation.Validation;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import static org.mockito.Matchers.any;
import org.mockito.Mockito;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

/**
 *
 * @author ian.scott
 */
@RunWith(PowerMockRunner.class)
@PrepareForTest({FacesContext.class, Validation.class, InitialContext.class})
@PowerMockIgnore({"javax.net.ssl.*", "javax.management.*"})
public class MaintainAddressManagerTest {

    private MaintainAddressManager maintainAddressBean;
    private MaintainAddressService maintainAddressServiceBean;
    private MaintainProviderServiceHelper maintainProviderServiceHelper;
    private FacesContext facesContext;
    private ArgumentCaptor<FacesMessage> facesMessageCaptor;
    private CodesDao codesDao;
    private AddressSupportService addressSupportService;

    @Before
    public void setup() throws DuplicateRecordException, NamingException, BusinessRuleException, EntityValidationException {
        PowerMockito.mockStatic(FacesContext.class);

        facesContext = mock(FacesContext.class);
        when(FacesContext.getCurrentInstance()).thenReturn(facesContext);

        maintainAddressServiceBean = mock(MaintainAddressService.class);
        maintainProviderServiceHelper = mock (MaintainProviderServiceHelper.class);

        when(maintainAddressServiceBean.save(any(AddressDto.class))).thenReturn(getAddress());

        maintainAddressBean = new MaintainAddressManager(){
                @Override
                public void validateAddressForWarn(AddressDto addressDto){
                    FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "successfully created", ""));
                };
        };
        maintainAddressBean.maintainAddressService = maintainAddressServiceBean;
        maintainAddressBean.maintainProviderServiceHelper = maintainProviderServiceHelper;
        // create an ArgumentCaptor for the FacesMessage that will be added to
        // the FacesContext
        facesMessageCaptor = ArgumentCaptor.forClass(FacesMessage.class);

        codesDao = mock(CodesDao.class);
        maintainAddressBean.codesDao = codesDao;
        
        when(codesDao.isValidProvStateCode(Mockito.anyString(), Mockito.anyString())).thenReturn(Boolean.TRUE);
        when(codesDao.doesCountryPossessProvState(Mockito.anyString())).thenReturn(Boolean.TRUE);

        //for some reason AnyString is not working (even with .eq)
        when(codesDao.codeExists(PrsCtCountries.class, "CA")).thenReturn(Boolean.TRUE);
        when(codesDao.codeExists(PrsCtProvState.class, "BC")).thenReturn(Boolean.TRUE);
        when(codesDao.codeExists(PrsCtCountries.class, "QQ")).thenReturn(Boolean.TRUE);
        when(codesDao.codeExists(PrsCtCountries.class, "US")).thenReturn(Boolean.TRUE);
        when(codesDao.codeExists(PrsCtProvState.class, "adsf")).thenReturn(Boolean.TRUE);
        when(codesDao.codeExists(PrsCtProvState.class, "QQ")).thenReturn(Boolean.TRUE);
        when(codesDao.codeExists(PrsCtCommunPurposeTypes.class, "BC")).thenReturn(Boolean.TRUE);
        when(codesDao.codeExists(PrsCtAddressTypes.class, "M")).thenReturn(Boolean.TRUE);
        PrsCtCountries CA = new PrsCtCountries(){
            {
                this.setCtlNameCode("CA");
                this.setCtlDescTxt("Canada");
                this.setCtlId(1239l);
            }  
        };
        PrsCtAddressTypes M = new PrsCtAddressTypes(){
            {
                this.setCtlId(2838l);
                this.setCtlNameCode("M");
            }
        };
        when(codesDao.lookup(PrsCtCountries.class, "CA")).thenReturn(CA);
        when(codesDao.lookup(PrsCtAddressTypes.class, "M")).thenReturn(M);

        PowerMockito.mockStatic(InitialContext.class);
        Mockito.when(InitialContext.doLookup(Consts.JNDILOOKUP_CODESDAO)).thenReturn(codesDao);
        
        addressSupportService = mock(AddressSupportService.class);
        when(addressSupportService.getProvinceDetailsByCountry(Mockito.anyString(), Mockito.anyString())).thenReturn(new PrsCtProvState());
        when(InitialContext.doLookup(Consts.JNDILOOKUP_ADDRESS_SUPPORT)).thenReturn(addressSupportService);

        //as default a provider not work location address is being created
        maintainAddressBean.setAddresses(new ArrayList<AddressDto>());
        maintainAddressBean.setPauthId(123l);
        maintainAddressBean.setWorkLocationId(0l);
        maintainAddressBean.setRuId(0l);
    }
    
////////////////////////////////////////////////////////////////////

    @Test
    public void addressPostal_postalBlankCanada() {

        AddressDto address = getAddress();
        address.setCity("toda");
        maintainAddressBean.setAddressDto(address);

        maintainAddressBean.validateForSave(true);
        // verify if the call to addMessage() was made and capture the
        // FacesMessage that was passed
        verify(facesContext).addMessage(Mockito.anyString(),
                facesMessageCaptor.capture());
        List<FacesMessage> allValues = facesMessageCaptor.getAllValues();
        assertEquals(1, allValues.size());
        FacesMessage message = facesMessageCaptor.getValue();
        assertEquals(FacesMessage.SEVERITY_INFO, message.getSeverity());
        assertTrue(message.getSummary().contains("successfully created"));
    }

    @Test
    public void addressPostal_postalBlankNotCanada() {

        AddressDto address = getAddress();
        address.setCity("toda");
        address.setCountryCode("QQ");
        maintainAddressBean.setAddressDto(address);

        maintainAddressBean.validateForSave(true);
        // verify if the call to addMessage() was made and capture the
        // FacesMessage that was passed
        verify(facesContext).addMessage(Mockito.anyString(),
                facesMessageCaptor.capture());
        List<FacesMessage> allValues = facesMessageCaptor.getAllValues();
        assertEquals(1, allValues.size());
        FacesMessage message = facesMessageCaptor.getValue();
        assertEquals(FacesMessage.SEVERITY_INFO, message.getSeverity());
        assertTrue(message.getSummary().contains("successfully created"));
    }

    @Test
    public void addressPostal_NoSpaceUpperCase_Canada() {

        AddressDto address = getAddress();
        address.setCity("toda");
        address.setPostalCode("V8V8V8");
        maintainAddressBean.setAddressDto(address);

        maintainAddressBean.validateForSave(true);
        // verify if the call to addMessage() was made and capture the
        // FacesMessage that was passed
        verify(facesContext).addMessage(Mockito.anyString(),
                facesMessageCaptor.capture());
        List<FacesMessage> allValues = facesMessageCaptor.getAllValues();
        assertEquals(1, allValues.size());
        FacesMessage message = facesMessageCaptor.getValue();
        assertEquals(FacesMessage.SEVERITY_INFO, message.getSeverity());
        assertTrue(message.getSummary().contains("successfully created"));
    }

    @Test
    public void addressPostal_SpaceUpperCase_Canada() {

        AddressDto address = getAddress();
        address.setCity("toda");
        address.setPostalCode("V8V 8V8");
        maintainAddressBean.setAddressDto(address);

        maintainAddressBean.validateForSave(true);
        // verify if the call to addMessage() was made and capture the
        // FacesMessage that was passed
        verify(facesContext).addMessage(Mockito.anyString(),
                facesMessageCaptor.capture());
        List<FacesMessage> allValues = facesMessageCaptor.getAllValues();
        assertEquals(1, allValues.size());
        FacesMessage message = facesMessageCaptor.getValue();
        assertEquals(FacesMessage.SEVERITY_INFO, message.getSeverity());
        assertTrue(message.getSummary().contains("successfully created"));
    }

    @Test
    public void addressPostal_SpaceLowerCase_Canada() {

        AddressDto address = getAddress();
        address.setCity("toda");
        address.setPostalCode("v8v 8v8");
        maintainAddressBean.setAddressDto(address);

        maintainAddressBean.validateForSave(true);
        // verify if the call to addMessage() was made and capture the
        // FacesMessage that was passed
        verify(facesContext).addMessage(Mockito.anyString(),
                facesMessageCaptor.capture());
        List<FacesMessage> allValues = facesMessageCaptor.getAllValues();
        assertEquals(1, allValues.size());
        FacesMessage message = facesMessageCaptor.getValue();
        assertEquals(FacesMessage.SEVERITY_ERROR, message.getSeverity());
        assertEquals(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ADDRESSPOSTALFIELD_PATTERNMATCH), message.getSummary());
    }

    @Test
    public void addressPostal_NoSpaceLowerCase_Canada() {

        AddressDto address = getAddress();
        address.setCity("toda");
        address.setPostalCode("v8v8v8");
        maintainAddressBean.setAddressDto(address);

        maintainAddressBean.validateForSave(true);
        // verify if the call to addMessage() was made and capture the
        // FacesMessage that was passed
        verify(facesContext).addMessage(Mockito.anyString(),
                facesMessageCaptor.capture());
        List<FacesMessage> allValues = facesMessageCaptor.getAllValues();
        assertEquals(1, allValues.size());
        FacesMessage message = facesMessageCaptor.getValue();
        assertEquals(FacesMessage.SEVERITY_ERROR, message.getSeverity());
        assertEquals(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ADDRESSPOSTALFIELD_PATTERNMATCH), message.getSummary());
    }

    @Test
    public void addressPostal_NoSpaceMixCase_Canada() {

        AddressDto address = getAddress();
        address.setCity("toda");
        address.setPostalCode("v8V8v8");
        maintainAddressBean.setAddressDto(address);

        maintainAddressBean.validateForSave(true);
        // verify if the call to addMessage() was made and capture the
        // FacesMessage that was passed
        verify(facesContext).addMessage(Mockito.anyString(),
                facesMessageCaptor.capture());
        List<FacesMessage> allValues = facesMessageCaptor.getAllValues();
        assertEquals(1, allValues.size());
        FacesMessage message = facesMessageCaptor.getValue();
        assertEquals(FacesMessage.SEVERITY_ERROR, message.getSeverity());
        assertEquals(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ADDRESSPOSTALFIELD_PATTERNMATCH), message.getSummary());
    }

    @Test
    public void addressPostal_NoSpaceUpperCaseMissingNumber_Canada() {

        AddressDto address = getAddress();
        address.setCity("toda");
        address.setPostalCode("V8V8V");
        maintainAddressBean.setAddressDto(address);

        maintainAddressBean.validateForSave(true);
        // verify if the call to addMessage() was made and capture the
        // FacesMessage that was passed
        verify(facesContext).addMessage(Mockito.anyString(),
                facesMessageCaptor.capture());
        List<FacesMessage> allValues = facesMessageCaptor.getAllValues();
        assertEquals(1, allValues.size());
        FacesMessage message = facesMessageCaptor.getValue();
        assertEquals(FacesMessage.SEVERITY_ERROR, message.getSeverity());
        assertEquals(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ADDRESSPOSTALFIELD_PATTERNMATCH), message.getSummary());
    }

    @Test
    public void addressPostal_NoSpaceUpperCaseExtraNumber_Canada() {

        AddressDto address = getAddress();
        address.setCity("toda");
        address.setPostalCode("V8V8V88");
        maintainAddressBean.setAddressDto(address);

        maintainAddressBean.validateForSave(true);
        // verify if the call to addMessage() was made and capture the
        // FacesMessage that was passed
        verify(facesContext).addMessage(Mockito.anyString(),
                facesMessageCaptor.capture());
        List<FacesMessage> allValues = facesMessageCaptor.getAllValues();
        assertEquals(1, allValues.size());
        FacesMessage message = facesMessageCaptor.getValue();
        assertEquals(FacesMessage.SEVERITY_ERROR, message.getSeverity());
        assertEquals(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ADDRESSPOSTALFIELD_PATTERNMATCH), message.getSummary());
    }

    @Test
    public void addressPostal_SpaceUpperCaseExtraNumber_Canada() {

        AddressDto address = getAddress();
        address.setCity("toda");
        address.setPostalCode("V8V 8V88");
        maintainAddressBean.setAddressDto(address);

        maintainAddressBean.validateForSave(true);
        // verify if the call to addMessage() was made and capture the
        // FacesMessage that was passed
        verify(facesContext).addMessage(Mockito.anyString(),
                facesMessageCaptor.capture());
        List<FacesMessage> allValues = facesMessageCaptor.getAllValues();
        assertEquals(1, allValues.size());
        FacesMessage message = facesMessageCaptor.getValue();
        assertEquals(FacesMessage.SEVERITY_ERROR, message.getSeverity());
        assertEquals(BusinessRuleMessageDao.getMessageResource(BusinessRuleKeys.ERROR_ADDRESSPOSTALFIELD_PATTERNMATCH), message.getSummary());
    }

    @Test
    public void addressPostal_SpaceUpperCaseExtraNumber_NOTCanada() {

        AddressDto address = getAddress();
        address.setCity("toda");
        address.setCountryCode("US");
        address.setPostalCode("V8V 8V88");
        maintainAddressBean.setAddressDto(address);

        maintainAddressBean.validateForSave(true);
        // verify if the call to addMessage() was made and capture the
        // FacesMessage that was passed
        verify(facesContext).addMessage(Mockito.anyString(),
                facesMessageCaptor.capture());
        List<FacesMessage> allValues = facesMessageCaptor.getAllValues();
        assertEquals(1, allValues.size());
        FacesMessage message = facesMessageCaptor.getValue();
        assertEquals(FacesMessage.SEVERITY_INFO, message.getSeverity());
        assertTrue(message.getSummary().contains("successfully created"));
    }

    private static AddressDto getAddress() {
        AddressDto result = new AddressDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(DatabaseConstants.SYSTEM_HIGH_DATE.toDate());
        result.setEffectiveStartDate(DatabaseConstants.SYSTEM_LOW_DATE.toDate());
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("Mailing");
        result.setTypeCode("M");
        //result.setTypeId(2838l);  ///address type code Mailing

        result.setUserChid("Test User Chid JUNIT");

        //  result.setAddressLineFour("Address Line Four");
        result.setAddressLineOne("Address Line One");
        //  result.setAddressLineThree("Address Line Three");
        // result.setAddressLineTwo("Address Line Two");
        //   result.setCity("Victoria");
        result.setCommunicationPurpose("Business Contact");
        result.setCommunicationPurposeCode("BC");
        //result.setCommunicationPurposeId(2802l);
        result.setCountry("Canada");
        result.setCountryCode("CA");
        //result.setCountryId(1239l);
        result.setProvinceOrStateTxt("British Columbia (BC)");
        result.setValidCpc(false);
        return result;
    }
}
