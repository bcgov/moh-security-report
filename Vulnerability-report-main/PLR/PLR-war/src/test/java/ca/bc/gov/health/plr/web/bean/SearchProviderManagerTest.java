package ca.bc.gov.health.plr.web.bean;

import ca.bc.gov.health.plr.constants.Consts;
import ca.bc.gov.health.plr.dto.provider.ProviderDto;
import ca.bc.gov.health.plr.dto.provider.AddressDto;
import ca.bc.gov.health.plr.dto.provider.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.ProviderType;
import ca.bc.gov.health.plr.dto.provider.StatusDto;
import ca.bc.gov.health.plr.web.Droplists;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.faces.model.SelectItem;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.mockito.Matchers;
import static org.mockito.Matchers.any;
import org.mockito.Mockito;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

/**
 *
 * @author David Sharpe <david.a.sharpe@cgi.com>
 */
public class SearchProviderManagerTest {
    
    private Droplists mockDroplists;
    
    @Before
    public void setUp() {
        mockDroplists = mock(Droplists.class);
        
    }

    @Test
    public void test_renderNames() {
        SearchProviderManager searchProviderBean = new SearchProviderManager();
        ProviderDto resultRecord = new ProviderDto();
        resultRecord.setProviderType(ProviderType.PRACTITIONER);
        resultRecord.setPauthId(42l);
        List<PersonNameDto> names = new ArrayList<>();
        PersonNameDto name = new PersonNameDto();
        name.setFirstName("Grant");
        name.setLastName("Hodgins");
        name.setDisplayActive(true);
        names.add(name);
        name = new PersonNameDto();
        name.setFirstName("David");
        name.setLastName("Sharpe");
        name.setDisplayActive(true);
        names.add(name);
        resultRecord.setIndNames(names);
        String renderedNames = searchProviderBean.renderNames(resultRecord);
        Assert.assertEquals("Hodgins, Grant<br/>"
                + "Sharpe, David", renderedNames);

        // now switch to remove the html tags
        searchProviderBean.setRenderForExport(true);
        renderedNames = searchProviderBean.renderNames(resultRecord);
        Assert.assertEquals("Hodgins, Grant" + SearchProviderManager.ALT_ENTER + "Sharpe, David", renderedNames);
    }

    @Test
    public void test_renderActiveNames() {
        SearchProviderManager searchProviderBean = new SearchProviderManager();
        ProviderDto resultRecord = new ProviderDto();
        resultRecord.setProviderType(ProviderType.PRACTITIONER);
        resultRecord.setPauthId(42l);
        List<PersonNameDto> names = new ArrayList<>();
        PersonNameDto name = new PersonNameDto();
        name.setFirstName("Grant");
        name.setLastName("Hodgins");
        name.setDisplayActive(false);
        names.add(name);
        name = new PersonNameDto();
        name.setFirstName("David");
        name.setLastName("Sharpe");
        name.setDisplayActive(true);
        names.add(name);
        resultRecord.setIndNames(names);
        String renderedNames = searchProviderBean.renderNames(resultRecord);
        Assert.assertEquals("Sharpe, David", renderedNames);

        // now switch to remove the html tags
        searchProviderBean.setRenderForExport(true);
        renderedNames = searchProviderBean.renderNames(resultRecord);
        Assert.assertEquals("Sharpe, David", renderedNames);
    }

    @Test
    public void test_renderIdentifiers() {
        SearchProviderManager searchProviderBean = new SearchProviderManager();
        ProviderDto resultRecord = new ProviderDto();
        List<CollegeIdentifierDto> identifiers = new ArrayList<>();
        CollegeIdentifierDto identifier = new CollegeIdentifierDto();
        identifier.setIdentifier("5555555");
        identifier.setTypeCode("TYPECODE1");
        identifiers.add(identifier);
        identifier.setDisplayActive(true);
        identifier = new CollegeIdentifierDto();
        identifier.setIdentifier("5555552");
        identifier.setTypeCode("TYPECODE2");
        identifier.setDisplayActive(true);
        identifiers.add(identifier);
        resultRecord.setIdentifiers(identifiers);
        String renderedIdentifiers = searchProviderBean.renderIdentifiers(resultRecord);
        Assert.assertEquals("5555555 (TYPECODE1)<br/>5555552 (TYPECODE2)", renderedIdentifiers);

        // now switch to remove the html tags
        searchProviderBean.setRenderForExport(true);
        renderedIdentifiers = searchProviderBean.renderIdentifiers(resultRecord);
        Assert.assertEquals("5555555 (TYPECODE1)" + SearchProviderManager.ALT_ENTER + "5555552 (TYPECODE2)", renderedIdentifiers);
    }

    @Test
    public void test_renderActiveIdentifiers() {
        SearchProviderManager searchProviderBean = new SearchProviderManager();
        ProviderDto resultRecord = new ProviderDto();
        List<CollegeIdentifierDto> identifiers = new ArrayList<>();
        CollegeIdentifierDto identifier = new CollegeIdentifierDto();
        identifier.setIdentifier("5555555");
        identifier.setTypeCode("TYPECODE1");
        identifier.setDisplayActive(false);
        identifiers.add(identifier);
        identifier = new CollegeIdentifierDto();
        identifier.setIdentifier("5555552");
        identifier.setTypeCode("TYPECODE2");
        identifier.setDisplayActive(true);
        identifiers.add(identifier);
        resultRecord.setIdentifiers(identifiers);
        String renderedIdentifiers = searchProviderBean.renderIdentifiers(resultRecord);
        Assert.assertEquals("5555552 (TYPECODE2)", renderedIdentifiers);

        // now switch to remove the html tags
        searchProviderBean.setRenderForExport(true);
        renderedIdentifiers = searchProviderBean.renderIdentifiers(resultRecord);
        Assert.assertEquals("5555552 (TYPECODE2)", renderedIdentifiers);

    }

    @Test
    public void test_renderAddresses() {
        SearchProviderManager searchProviderBean = new SearchProviderManager();
        ProviderDto resultRecord = new ProviderDto();
        List<AddressDto> addresses = new ArrayList<>();
        AddressDto address = new AddressDto();
        address.setAddressLineOne("line1");
        address.setCity("city1");
        address.setProvinceOrStateTxt("province1");
        address.setDisplayActive(true);
        addresses.add(address);
        address = new AddressDto();
        address.setAddressLineOne("line1");
        address.setCity("city2");
        address.setProvinceOrStateTxt("province2");
        address.setDisplayActive(true);
        addresses.add(address);
        resultRecord.setAddresses(addresses);
        String renderedAddresses = searchProviderBean.renderAddresses(resultRecord);
        Assert.assertEquals("line1, city1, province1<br/>line1, city2, province2", renderedAddresses);

        // now switch to remove the html tags
        searchProviderBean.setRenderForExport(true);
        renderedAddresses = searchProviderBean.renderAddresses(resultRecord);
        Assert.assertEquals("line1, city1, province1" + SearchProviderManager.ALT_ENTER + "line1, city2, province2", renderedAddresses);

    }

    @Test
    public void test_renderActiveAddresses() {
        SearchProviderManager searchProviderBean = new SearchProviderManager();
        ProviderDto resultRecord = new ProviderDto();
        List<AddressDto> addresses = new ArrayList<>();
        AddressDto address = new AddressDto();
        address.setAddressLineOne("line1");
        address.setCity("city1");
        address.setProvinceOrStateTxt("province1");
        address.setDisplayActive(false);
        addresses.add(address);
        address = new AddressDto();
        address.setAddressLineOne("line1");
        address.setCity("city2");
        address.setProvinceOrStateTxt("province2");
        address.setDisplayActive(true);
        addresses.add(address);
        resultRecord.setAddresses(addresses);
        String renderedAddresses = searchProviderBean.renderAddresses(resultRecord);
        Assert.assertEquals("line1, city2, province2", renderedAddresses);

        // now switch to remove the html tags
        searchProviderBean.setRenderForExport(true);
        renderedAddresses = searchProviderBean.renderAddresses(resultRecord);
        Assert.assertEquals("line1, city2, province2", renderedAddresses);

    }

    @Test
    public void test_renderAddresses_nullElements_nullElementsNotRendered() {
        SearchProviderManager searchProviderBean = new SearchProviderManager();
        ProviderDto resultRecord = new ProviderDto();
        List<AddressDto> addresses = new ArrayList<>();
        AddressDto address = new AddressDto();
        address.setAddressLineOne("line1");
        address.setCity("city1");
        address.setProvinceOrStateTxt(null);
        addresses.add(address);
        address.setDisplayActive(true);
        address = new AddressDto();
        address.setAddressLineOne(null);
        address.setCity("city2");
        address.setProvinceOrStateTxt(null);
        address.setDisplayActive(true);
        addresses.add(address);
        resultRecord.setAddresses(addresses);
        String renderedAddresses = searchProviderBean.renderAddresses(resultRecord);
        Assert.assertEquals("line1, city1<br/>city2", renderedAddresses);

        // now switch to remove the html tags
        searchProviderBean.setRenderForExport(true);
        renderedAddresses = searchProviderBean.renderAddresses(resultRecord);
        Assert.assertEquals("line1, city1" + SearchProviderManager.ALT_ENTER + "city2", renderedAddresses);

    }

    @Test
    public void test_renderStatuses() {
        SearchProviderManager searchProviderBean = new SearchProviderManager();
        ProviderDto resultRecord = new ProviderDto();
        List<StatusDto> statuses = new ArrayList<>();
        StatusDto status = new StatusDto();
        status.setType("status1");
        status.setDisplayActive(true);
        statuses.add(status);
        status = new StatusDto();
        status.setType("status2");
        status.setDisplayActive(true);
        statuses.add(status);
        resultRecord.setStatuses(statuses);
        String renderedStatuses = searchProviderBean.renderStatuses(resultRecord);
        Assert.assertEquals("status1<br/>status2", renderedStatuses);

        // now switch to remove the html tags
        searchProviderBean.setRenderForExport(true);
        renderedStatuses = searchProviderBean.renderStatuses(resultRecord);
        Assert.assertEquals("status1" + SearchProviderManager.ALT_ENTER + "status2", renderedStatuses);
    }

    @Ignore
    @Test
    public void test_matchHistory() {
        SearchProviderManager searchProviderBean = new SearchProviderManager();
        
        searchProviderBean.droplists=mockDroplists;
        when(mockDroplists.getProviderRoleTypesForSearch(Mockito.anyString())).thenReturn(Arrays.asList(new SelectItem(Consts.SELECT_ONE_VALUE, Consts.SELECT_ONE_LABLE), new SelectItem(1l, "some value")));

        //calling post construct for managed bean
        searchProviderBean.init();

        Assert.assertTrue(searchProviderBean.getSearchProviderFormData().isHistoryFlag());
    }
}
