package ca.bc.gov.health.ejb.entitylistener;


import ca.bc.gov.health.plr.ejb.entity.util.DatabaseConstants;
import java.lang.reflect.InvocationTargetException;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import org.apache.commons.beanutils.PropertyUtils;

/**
 * Listener for JPA lifecycle events to ensure common audit fields are set
 * before persistence.
 *
 * @author greg.perkins, ghodgins
 */
public class AuditListener {

    private static final Logger logger = Logger.getLogger(AuditListener.class.getName());

    public AuditListener() {
    }

    /**
     * Provide created and invalidated dates as well as the user performing the
     * insert. Note:
     *
     * @PrePersist is executed before the entity manager persist operation is
     * actually executed or cascaded. This call is synchronous with the persist
     * operation.
     *
     * @param entity the entity to create
     */
    @PrePersist
    public void prePersist(Object entity) {

        setPropertyIfExists(entity, "createdDts", new Date());
        setPropertyIfExists(entity, "createdOnDtm", new Date());
        setPropertyIfExistAndNull(entity, "createdByNm", findUserName());
        setPropertyIfExists(entity, "statelessTransactionNbr", 1l);
        setPropertyIfExistAndNull(entity, "effectiveEndDate", DatabaseConstants.SYSTEM_HIGH_DATE.toDate());


    }

    /**
     * Note:
     *
     * @PreUpdate is executed before the database UPDATE operation.
     *
     * @param entity the entity to update
     */
    @PreUpdate
    public void preUpdate(Object entity) {
        setPropertyIfExists(entity, "lastModifiedOnDtm", new Date());
        setPropertyIfExistAndNull(entity, "lastModifiedByNm", findUserName());

    }

    /**
     * Pulls the current user's name
     *
     * @return String
     */
    private String findUserName() {
        
        String result = null; //RoleHelper.getUserName(FacesContext.getCurrentInstance());
        return result == null ? "TODO" : result;
    }

    private void setPropertyIfExists(Object entity, String property, Object value) {
        try {
            if(doesPropertyExist(entity, property)){
                PropertyUtils.setProperty(entity, property, value);
            }
        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException ex) {
            Logger.getLogger(AuditListener.class.getName()).log(Level.WARNING, ex.getMessage());
        }

    }
    
    private void setPropertyIfExistAndNull(Object entity, String property, Object value) {
        try {
            if(doesPropertyExist(entity, property) && !isPropertySet(entity, property)){
                PropertyUtils.setProperty(entity, property, value);
            }
        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException ex) {
            Logger.getLogger(AuditListener.class.getName()).log(Level.WARNING, ex.getMessage());
        }

    }
    
    private boolean doesPropertyExist(Object entity, String property) {
        try {
            org.apache.commons.beanutils.PropertyUtils.getProperty(entity, property);
        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException ex) {
            return false;
        }

        return true;
    }
    
    private boolean isPropertySet(Object entity, String property) {
        Object value = null;
        try {
            value = org.apache.commons.beanutils.PropertyUtils.getProperty(entity, property);
        } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException ex) {
            return false;
        }

        return value != null;
    }
}
