/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.addrvalidation.audit;

import ca.bc.gov.moh.esb.util.audit.AuditProcessor;
import ca.bc.gov.moh.esb.util.audit.entity.EventMessage;
import ca.bc.gov.moh.esb.util.audit.entity.Transaction;
import ca.bc.gov.moh.esb.util.audit.entity.TransactionEvent;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.xml.ws.soap.SOAPFaultException;
import org.apache.commons.lang3.StringUtils;

/**
 * This class takes the SOAP message request/response and builds a Transaction
 * entity object from the data to insert into the audit tables
 * 
 * @author killian.faussart
 */
@Stateless
public class AddressValidationDatabaseAudit {

    private static final String COMPLETE = "COMPLETE";
    private static final String RECEIVE = "RECEIVE";
    private static final String ERROR = "ERROR";
    private static final String TRANSACTION_TYPE = "ADDRVAL";
    private static final String SUCCESS_MESSAGE = "The address was successfully validated";
    private static final int CODE_MAX = 50;
    private static final int MSG_MAX = 500;
    
    private static boolean hasError = false;
    
    @EJB
    private AddressValidationProducer avp;
    
    private final AuditProcessor ap = new AuditProcessor();
    
    public AddressValidationDatabaseAudit() {
        
    }
    
    public AddressValidationDatabaseAudit(AddressValidationProducer avp) {
        this.avp = avp;
    }

    public void auditComplete(Transaction transaction) {
        audit(transaction, "INFO", COMPLETE, null);
        hasError = false;
    }

    public void auditReceive(Transaction transaction) {
        audit(transaction, "INFO", RECEIVE, null);
    }
    
    public void auditError(Transaction transaction, Exception error) {
        hasError = true;
        audit(transaction, ERROR, ERROR, error);
        if (error instanceof SOAPFaultException) {
            hasError = false;
        }
    }

    private void audit(Transaction transaction, String level, String eventType, Exception error) {

        transaction.setType(TRANSACTION_TYPE);
        try{
            transaction.setServer(InetAddress.getLocalHost().getHostName());
        } catch (UnknownHostException ex) {
            Logger.getLogger(AddressValidationDatabaseAudit.class.getName()).log(Level.SEVERE, null, ex);
        }

        TransactionEvent event = new TransactionEvent();
        event.setEventTime(Calendar.getInstance().getTime());
        event.setType(eventType);
        event.setTransactionId(transaction.getTransactionId());

        EventMessage eventMessage = new EventMessage();
        if (hasError) {
            if (error != null) {
                eventMessage.setErrorCode(StringUtils.abbreviate(error.getClass().getSimpleName(), CODE_MAX));
                eventMessage.setMessageText(StringUtils.abbreviate(error.getMessage(), MSG_MAX));
                eventMessage.setLevel(level);
                eventMessage.setTransactionEventId(event);
                event.getEventMessageList().clear();
                event.getEventMessageList().add(eventMessage);
            }
        } else if (eventType.equals(COMPLETE)) {
            eventMessage.setMessageText(SUCCESS_MESSAGE);
            eventMessage.setLevel(level);
            eventMessage.setTransactionEventId(event);
            event.getEventMessageList().clear();
            event.getEventMessageList().add(eventMessage);
        }
        
        if (transaction.getIsNew()){
            avp.sendJMSMessageToAddrValQueue(transaction);
//            ap.insert(transaction);
        }
        avp.sendJMSMessageToAddrValQueue(event);
//        ap.insert(event);
    }
}
