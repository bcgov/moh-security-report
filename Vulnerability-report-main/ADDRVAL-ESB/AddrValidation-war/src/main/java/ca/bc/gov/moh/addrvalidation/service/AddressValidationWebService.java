/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.addrvalidation.service;

import ca.bc.gov.moh.addrvalidation.converter.StatusCodeValueMapper;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.AddressValidationSoap;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.Response;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.ArrayOfAddress;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.ArrayOfEnrichment;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.Parameters;
import ca.bc.gov.moh.addrvalidation.exception.AddressValidationException;
import static ca.bc.gov.moh.addrvalidation.service.AddressValidationSOAPHandler.EXCEPTION_KEY;
import static ca.bc.gov.moh.addrvalidation.service.AddressValidationSOAPHandler.TRANSACTION_ID;
import javax.annotation.Resource;
import javax.jws.HandlerChain;
import javax.jws.WebService;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.handler.MessageContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Killian.Faussart
 */
@WebService(serviceName = "AddressValidation",
        portName = "AddressValidationSoap",
        endpointInterface = "ca.bc.gov.moh.addrvalidation.entity.wsdl.AddressValidationSoap",
        wsdlLocation = "WEB-INF/wsdl/addressvalidation.wsdl",
        targetNamespace = "http://validator5.AddressDoctor.com/Webservice5/v4")
@HandlerChain(file = "AddressValidationSoap_handler.xml")
public class AddressValidationWebService implements AddressValidationSoap {
    
    private static final int GENERIC_STATUS_CODE = 900;
    private static final String GENERIC_STATUS_MESSAGE = "Server error: ";
    private static final Logger logger = LoggerFactory.getLogger(AddressValidationWebService.class);
    
    @Resource
    private WebServiceContext context;
    
    
    /**
     *
     * @param login not used (only for AddressDoctor Cloud service)
     * @param password not used (only for AddressDoctor Cloud service)
     * @param parameters contains the process mode (BATCH, CERTIFIED,
     * INTERACTIVE, FASTCOMPLETION)
     * @param addresses contains the actual addresses to validate
     * @param enrichments contains more details on the addresses (optional)
     * @return
     */
    @Override
    public Response process(String login, String password, Parameters parameters, ArrayOfAddress addresses, ArrayOfEnrichment enrichments) {
        
      
        Response validationResponse;
        StatusCodeValueMapper statusCodeMapper = null;
        try {
            statusCodeMapper = new StatusCodeValueMapper();
            AddressValidationProcessor addrValidation = new AddressValidationProcessor(parameters, addresses, enrichments, 
                    (String) getContext().getMessageContext().get(TRANSACTION_ID));
            validationResponse = addrValidation.validate();
            
        } catch (AddressValidationException e) {
            validationResponse = new Response(); 
            if (statusCodeMapper != null) {
                String[] finalStatus = statusCodeMapper.mapAddressDoctorStatusCode(e.getErrorCode(),e.getMessage());
                validationResponse.setStatusCode(Integer.parseInt(finalStatus[0]));
                validationResponse.setStatusMessage(finalStatus[1]);
            }
            // Store exception for auditing
            storeException(e);
            
        } catch (Exception ex) {
            logger.error("An unexpected error occurred: "+ex.getMessage(),ex);
            validationResponse = buildGenericErrorResponse(ex.getMessage());
            // Store exception for auditing
            storeException(ex);
        }
        return validationResponse;
    }
    
    private Response buildGenericErrorResponse(String exceptionMessage){
        Response errorResp = new Response();
        errorResp.setStatusCode(GENERIC_STATUS_CODE);
        errorResp.setStatusMessage(GENERIC_STATUS_MESSAGE.concat(exceptionMessage));
        return errorResp;
    }
    
    private void storeException(Exception ex) {
        MessageContext msgContext = getContext().getMessageContext();
        msgContext.put(EXCEPTION_KEY, ex);
    }
    
    public WebServiceContext getContext() {
        return context;
    }
}
