/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.addrvalidation.converter;

import ca.bc.gov.moh.addrvalidation.entity.common.AddressElements;
import ca.bc.gov.moh.addrvalidation.entity.common.AddressLines;
import ca.bc.gov.moh.addrvalidation.entity.common.Building;
import ca.bc.gov.moh.addrvalidation.entity.common.Contact;
import ca.bc.gov.moh.addrvalidation.entity.common.Country;
import ca.bc.gov.moh.addrvalidation.entity.common.CountrySpecificLocalityLine;
import ca.bc.gov.moh.addrvalidation.entity.common.DeliveryAddressLine;
import ca.bc.gov.moh.addrvalidation.entity.common.DeliveryService;
import ca.bc.gov.moh.addrvalidation.entity.common.FormattedAddressLine;
import ca.bc.gov.moh.addrvalidation.entity.common.Key;
import ca.bc.gov.moh.addrvalidation.entity.common.Locality;
import ca.bc.gov.moh.addrvalidation.entity.common.Number;
import ca.bc.gov.moh.addrvalidation.entity.common.Organization;
import ca.bc.gov.moh.addrvalidation.entity.common.PostalCode;
import ca.bc.gov.moh.addrvalidation.entity.common.Province;
import ca.bc.gov.moh.addrvalidation.entity.common.RecipientLine;
import ca.bc.gov.moh.addrvalidation.entity.common.Residue;
import ca.bc.gov.moh.addrvalidation.entity.common.Street;
import ca.bc.gov.moh.addrvalidation.entity.common.SubBuilding;
import ca.bc.gov.moh.addrvalidation.entity.result.AddrDocResult;
import ca.bc.gov.moh.addrvalidation.entity.result.AddrDocResultData;
import ca.bc.gov.moh.addrvalidation.entity.result.CAMEO;
import ca.bc.gov.moh.addrvalidation.entity.result.CASS;
import ca.bc.gov.moh.addrvalidation.entity.result.EnrichmentData;
import ca.bc.gov.moh.addrvalidation.entity.result.GeoCoding;
import ca.bc.gov.moh.addrvalidation.entity.result.SERP;
import ca.bc.gov.moh.addrvalidation.entity.result.SupplementaryUS;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.Address;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.ArrayOfEnrichment;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.ArrayOfResultData;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.ArrayOfString;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.Enrichment;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.Result;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.ResultData;
import com.addressdoctor.AddressDoctorException;
import java.io.StringReader;
import java.util.List;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author killian.faussart
 */
public class AddressDoctorXMLToSoapEntityConverter {

    private static final Logger logger = LoggerFactory.getLogger(AddressDoctorXMLToSoapEntityConverter.class);

    /**
     * This methods maps the AddressDoctor XML result String with the SOAP
     * Result entity
     *
     * @param resultXML
     * @return
     * @throws AddressDoctorException
     */
    public Result convert(String resultXML) {
        Result result = new Result();

        //Unmarshal xml String
        AddrDocResult addrDocResult = generateResultEntity(resultXML);

        if (addrDocResult != null) {

            //Setting the result generic information
            result.setCountryISO3(addrDocResult.getCountryISO3());
            result.setProcessStatus(addrDocResult.getProcessStatus());

            List<AddrDocResultData> addrDocResultDataList = addrDocResult.getResultData();
            ArrayOfResultData arrayOfResultData = new ArrayOfResultData();

            for (AddrDocResultData rd : addrDocResultDataList) {
                ResultData resultData = new ResultData();
                Address addr = new Address();

                //Setting the resultData generic information
                populateGenericResultDataInformation(resultData, rd);

                //Setting the AddressElements
                populateAddressElements(addr, rd.getAddressElements());

                //Setting the AddressLines
                populateAddressLines(addr, rd.getAddressLines());

                //Setting the Complete Address
                if (rd.getAddressComplete() != null) {
                    addr.setAddressComplete(rd.getAddressComplete().getContent());
                }


                resultData.setAddress(addr);
                arrayOfResultData.getResultData().add(resultData);
            }

            result.setResultDataSet(arrayOfResultData);
        }

        return result;
    }

    /**
     * Generates the AddressDoctor result entities from the XML result string
     *
     * @param resultXML
     * @return
     */
    private AddrDocResult generateResultEntity(String resultXML) {
        
        if (resultXML == null) {
            return null;
        }
        
        AddrDocResult result = null;
        try {

            JAXBContext jaxbContext = JAXBContext.newInstance(AddrDocResult.class);

            //The substring is necessary as an extra "?" has to be removed at the beginning of the String
            StringReader reader = new StringReader(resultXML.substring(1));
            Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();

            result = (AddrDocResult) jaxbUnmarshaller.unmarshal(reader);

        } catch (JAXBException ex) {
            logger.error("An error occured while generating the AddressDoctor result entity", ex);
        }

        return result;
    }

    /**
     *
     * @param resultData SOAP Response Entity to populate
     * @param rd AddressDoctor result data to extract data from
     */
    private void populateGenericResultDataInformation(ResultData resultData, AddrDocResultData rd) {
        resultData.setResultNumber(rd.getResultNumber());
        resultData.setMailabilityScore(rd.getMailabilityScore());
        resultData.setResultPercentage(rd.getResultPercentage());
        resultData.setElementInputStatus(rd.getElementInputStatus());
        resultData.setElementResultStatus(rd.getElementResultStatus());
        resultData.setElementRelevance(rd.getElementRelevance());
        resultData.setExtElementStatus(rd.getExtElementStatus());
        resultData.setAddressResolutionCode(rd.getAddressResolutionCode());
        resultData.setAddressType(rd.getAddressType());
        resultData.setLanguageISO3(rd.getLanguageISO3());
    }

    /**
     *
     * @param address SOAP Response Entity to populate
     * @param addressLines AddressDoctor entity to extract data from
     */
    private void populateAddressLines(Address address, AddressLines addressLines) {
        if (addressLines != null) {

            //Setting FormattedLines
            List<FormattedAddressLine> formattedAddressLine = addressLines.getFormattedAddressLine();
            ArrayOfString formattedAddresses = new ArrayOfString();
            for (FormattedAddressLine fal : formattedAddressLine) {
                formattedAddresses.getString().add(fal.getContent());
            }
            address.setFormattedAddress(formattedAddresses);

            //Setting DeliveryAddressLines
            List<DeliveryAddressLine> deliveryAddressLine = addressLines.getDeliveryAddressLine();
            ArrayOfString deliveryAddresses = new ArrayOfString();
            for (DeliveryAddressLine dal : deliveryAddressLine) {
                deliveryAddresses.getString().add(dal.getContent());
            }
            address.setDeliveryAddressLines(deliveryAddresses);

            //Setting RecipientLines
            List<RecipientLine> recipientLine = addressLines.getRecipientLine();
            ArrayOfString recipientAddresses = new ArrayOfString();
            for (RecipientLine rl : recipientLine) {
                recipientAddresses.getString().add(rl.getContent());
            }
            address.setRecipientLines(recipientAddresses);

            //Setting CountrySpecificLocalityLines
            List<CountrySpecificLocalityLine> countrySpecificLocalityLine = addressLines.getCountrySpecificLocalityLine();
            ArrayOfString countrySpecificAddresses = new ArrayOfString();
            for (CountrySpecificLocalityLine csll : countrySpecificLocalityLine) {
                countrySpecificAddresses.getString().add(csll.getContent());
            }
            address.setCountrySpecificLocalityLine(countrySpecificAddresses);

        }
    }

    /**
     * Populates the AddressElements
     *
     * @param addr SOAP Response Entity to populate
     * @param addressElements AddressDoctor entity to extract data from
     */
    private void populateAddressElements(Address addr, AddressElements addressElements) {
        if (addressElements != null) {

            //Setting Buildings
            List<Building> buildings = addressElements.getBuilding();
            ArrayOfString buildingArray = new ArrayOfString();
            for (Building building : buildings) {
                buildingArray.getString().add(building.getContent());
            }
            addr.setBuilding(buildingArray);

            //Setting Contacts
            List<Contact> contacts = addressElements.getContact();
            ArrayOfString contactArray = new ArrayOfString();
            for (Contact contact : contacts) {
                contactArray.getString().add(contact.getContent());
            }
            addr.setContact(contactArray);

            //Setting Countries
            List<Country> countries = addressElements.getCountry();
            ArrayOfString countryArray = new ArrayOfString();
            for (Country country : countries) {
                countryArray.getString().add(country.getContent());
            }
            addr.setCountry(countryArray);

            //Setting Delivery Services
            List<DeliveryService> deliveryServices = addressElements.getDeliveryService();
            ArrayOfString deliveryServiceArray = new ArrayOfString();
            for (DeliveryService deliveryService : deliveryServices) {
                deliveryServiceArray.getString().add(deliveryService.getContent());
            }
            addr.setDeliveryService(deliveryServiceArray);

            //Setting RecordID (only one possible)
            List<Key> keys = addressElements.getKey();
            for (Key key : keys) {
                addr.setRecordId(key.getContent());
                break;
            }

            //Setting Localities
            List<Locality> localities = addressElements.getLocality();
            ArrayOfString localityArray = new ArrayOfString();
            for (Locality locality : localities) {
                localityArray.getString().add(locality.getContent());
            }
            addr.setLocality(localityArray);

            //Setting House Numbers
            List<Number> numbers = addressElements.getNumber();
            ArrayOfString numberArray = new ArrayOfString();
            for (Number number : numbers) {
                numberArray.getString().add(number.getContent());
            }
            addr.setHouseNumber(numberArray);

            //Setting Organizations
            List<Organization> organizations = addressElements.getOrganization();
            ArrayOfString organizationArray = new ArrayOfString();
            for (Organization organization : organizations) {
                organizationArray.getString().add(organization.getContent());
            }
            addr.setOrganization(organizationArray);

            //Setting PostalCodes
            List<PostalCode> postalCodes = addressElements.getPostalCode();
            ArrayOfString postalCodeArray = new ArrayOfString();
            for (PostalCode postalCode : postalCodes) {
                postalCodeArray.getString().add(postalCode.getContent());
            }
            addr.setPostalCode(postalCodeArray);

            //Setting Provinces
            List<Province> provinces = addressElements.getProvince();
            ArrayOfString provinceArray = new ArrayOfString();
            for (Province province : provinces) {
                provinceArray.getString().add(province.getContent());
            }
            addr.setProvince(provinceArray);

            //Setting Residues
            List<Residue> residues = addressElements.getResidue();
            ArrayOfString residueArray = new ArrayOfString();
            for (Residue residue : residues) {
                residueArray.getString().add(residue.getContent());
            }
            addr.setResidue(residueArray);

            //Setting Streets
            List<Street> streets = addressElements.getStreet();
            ArrayOfString streetArray = new ArrayOfString();
            for (Street street : streets) {
                streetArray.getString().add(street.getContent());
            }
            addr.setStreet(streetArray);

            //Setting SubBuildings
            List<SubBuilding> subBuildings = addressElements.getSubBuilding();
            ArrayOfString subbuildingArray = new ArrayOfString();
            for (SubBuilding subbuilding : subBuildings) {
                subbuildingArray.getString().add(subbuilding.getContent());
            }
            addr.setSubBuilding(subbuildingArray);
        }
    }

}
