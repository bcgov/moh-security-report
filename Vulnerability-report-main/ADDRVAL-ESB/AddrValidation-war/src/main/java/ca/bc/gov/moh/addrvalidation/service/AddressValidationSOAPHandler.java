/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.addrvalidation.service;

import ca.bc.gov.moh.addrvalidation.audit.AddressValidationDatabaseAudit;
import ca.bc.gov.moh.addrvalidation.config.Config;
import ca.bc.gov.moh.addrvalidation.config.ConfigType;
import ca.bc.gov.moh.addrvalidation.audit.AddressValidationFileDropAudit;
import ca.bc.gov.moh.esb.util.SimpleSerializer;
import ca.bc.gov.moh.esb.util.audit.entity.Transaction;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.security.cert.X509Certificate;
import java.util.Properties;
import java.util.Set;
import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.ejb.EJB;
import javax.naming.NamingException;
import javax.servlet.http.HttpServletRequest;
import javax.xml.namespace.QName;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPFault;
import javax.xml.soap.SOAPMessage;
import javax.xml.ws.handler.MessageContext;
import javax.xml.ws.handler.soap.SOAPHandler;
import javax.xml.ws.handler.soap.SOAPMessageContext;
import javax.xml.ws.soap.SOAPFaultException;

/**
 * This class is used to intercept the raw SOAP request and response so that
 * they can be audited and serialized on the file system
 *
 * @author killian.faussart
 */
public class AddressValidationSOAPHandler implements SOAPHandler<SOAPMessageContext> {
     
    public static final String TRANSACTION_ID = "transactionId";
    public static final String TRANSACTION_KEY = "ESB_TRANSACTION";
    public static final String EXCEPTION_KEY = "exceptionKey";
    
    @EJB
    private AddressValidationDatabaseAudit dbAudit;
    
    @Override
    public Set<QName> getHeaders() {
        //NOTHING TO DO HERE
        return null;
    }

    @Override
    public boolean handleMessage(SOAPMessageContext context) {
        
        Boolean isResponse = (Boolean) context.get(MessageContext.MESSAGE_OUTBOUND_PROPERTY);
        SOAPMessage message = context.getMessage();
        ByteArrayOutputStream out = new ByteArrayOutputStream();

        String transactionId;
        Transaction transaction;
        
        if (context.containsKey(TRANSACTION_ID)) {
            transactionId = (String) context.get(TRANSACTION_ID);
        } else {
            transactionId = UUID.randomUUID().toString();
            context.put(TRANSACTION_ID, transactionId);
            context.setScope(TRANSACTION_ID, MessageContext.Scope.APPLICATION);
        }
        
        
        if (context.containsKey(TRANSACTION_KEY)) {
            String serializedTransaction = (String) context.get(TRANSACTION_KEY);
            transaction = (Transaction) SimpleSerializer.fromString(serializedTransaction);
            transaction.setIsNew(false);
        } else {    
            transaction = new Transaction(transactionId);
            
            // Get the organization name from the SSL certificate.
            HttpServletRequest request = (HttpServletRequest) context.get(MessageContext.SERVLET_REQUEST);
            X509Certificate certs[] = (X509Certificate[]) request.getAttribute("javax.servlet.request.X509Certificate");
            if (certs != null && certs.length > 0) {
                String organization = certs[0].getSubjectX500Principal().getName();
                transaction.setOrganization(
                        organization.substring(organization.indexOf("O=") + 2, organization.indexOf(",L=")));
            }
        }

        try {

            String strMsg;
            message.writeTo(out);
            strMsg = new String(out.toByteArray());

            Properties appProps = Config.<Properties>getResource(ConfigType.APPLICATION_PROPERTIES);
            String fileDropPath = appProps.getProperty("fileDropPath");

            AddressValidationFileDropAudit fileDrop = new AddressValidationFileDropAudit(fileDropPath, transactionId);

            Exception caughtException = (Exception) context.get(EXCEPTION_KEY);
            if (caughtException != null) {
                if (caughtException.getCause() != null) {
                    caughtException = (Exception) caughtException.getCause();
                }
                String exceptionMsg = "<Exception><ExceptionCode>" + caughtException.getClass().getSimpleName()
                    + "</ExceptionCode><ExceptionMessage>" + caughtException.getMessage()
                    + "</ExceptionMessage></Exception>";
                dbAudit.auditError(transaction, caughtException);
                fileDrop.dropAddressError(exceptionMsg);
            }
            
            if (isResponse) {
                dbAudit.auditComplete(transaction);
                fileDrop.dropAddressResponse(strMsg);
            } else {
                dbAudit.auditReceive(transaction);
                fileDrop.dropAddressRequest(strMsg);
            }

            String newSerializedTransaction = SimpleSerializer.toString(transaction);
            context.put(TRANSACTION_KEY, newSerializedTransaction);

        } catch (SOAPException | IOException | NamingException ex) {
            Logger.getLogger(AddressValidationSOAPHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return true;
    }

    @Override
    public boolean handleFault(SOAPMessageContext context) {
        
        SOAPMessage message = context.getMessage();
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        
        String transactionId;
        Transaction transaction;
        
        if (context.containsKey(TRANSACTION_ID)) {
            transactionId = (String) context.get(TRANSACTION_ID);
        } else {
            transactionId = UUID.randomUUID().toString();
            context.put(TRANSACTION_ID, transactionId);
            context.setScope(TRANSACTION_ID, MessageContext.Scope.APPLICATION);
        }
              
        if (context.containsKey(TRANSACTION_KEY)) {
            String serializedTransaction = (String) context.get(TRANSACTION_KEY);
            transaction = (Transaction) SimpleSerializer.fromString(serializedTransaction);
            transaction.setIsNew(false);
        } else {            
            transaction = new Transaction(transactionId);
        }
        
        try {

            String strMsg;
            message.writeTo(out);
            strMsg = new String(out.toByteArray());
            
            Properties appProps = Config.<Properties>getResource(ConfigType.APPLICATION_PROPERTIES);
            String fileDropPath = appProps.getProperty("fileDropPath");

            AddressValidationFileDropAudit fileDrop = new AddressValidationFileDropAudit(fileDropPath, transactionId);
            
            SOAPFault fault = message.getSOAPBody().getFault();
            Exception caughtException = new SOAPFaultException(fault);
            
            dbAudit.auditError(transaction, caughtException);
            fileDrop.dropAddressError(strMsg);
            
        } catch (SOAPException | IOException | NamingException ex) {
            Logger.getLogger(AddressValidationSOAPHandler.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return true;
    }

    @Override
    public void close(MessageContext context) {
        //NOTHING TO DO HERE
    }

}
