/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.addrvalidation.converter;

import ca.bc.gov.moh.addrvalidation.constant.DefaultType;
import ca.bc.gov.moh.addrvalidation.constant.ProcessMode;
import ca.bc.gov.moh.addrvalidation.entity.common.AddressCode;
import ca.bc.gov.moh.addrvalidation.entity.common.AddressComplete;
import ca.bc.gov.moh.addrvalidation.entity.common.AddressElements;
import ca.bc.gov.moh.addrvalidation.entity.common.AddressLines;
import ca.bc.gov.moh.addrvalidation.entity.common.Building;
import ca.bc.gov.moh.addrvalidation.entity.common.Contact;
import ca.bc.gov.moh.addrvalidation.entity.common.Country;
import ca.bc.gov.moh.addrvalidation.entity.common.CountrySpecificLocalityLine;
import ca.bc.gov.moh.addrvalidation.entity.common.DeliveryAddressLine;
import ca.bc.gov.moh.addrvalidation.entity.common.DeliveryService;
import ca.bc.gov.moh.addrvalidation.entity.common.FormattedAddressLine;
import ca.bc.gov.moh.addrvalidation.entity.inputdata.InputData;
import ca.bc.gov.moh.addrvalidation.entity.common.Key;
import ca.bc.gov.moh.addrvalidation.entity.common.Locality;
import ca.bc.gov.moh.addrvalidation.entity.common.Organization;
import ca.bc.gov.moh.addrvalidation.entity.common.PostalCode;
import ca.bc.gov.moh.addrvalidation.entity.common.Province;
import ca.bc.gov.moh.addrvalidation.entity.common.RecipientLine;
import ca.bc.gov.moh.addrvalidation.entity.common.Residue;
import ca.bc.gov.moh.addrvalidation.entity.common.Street;
import ca.bc.gov.moh.addrvalidation.entity.common.SubBuilding;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.Address;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.AddressDetailed;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.BuildingDetailed;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.ContactDetailed;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.CountryDetailed;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.DeliveryServiceDetailed;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.HouseNumberDetailed;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.LocalityDetailed;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.OrganizationDetailed;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.Parameters;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.PostalCodeDetailed;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.ProvinceDetailed;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.ResidueDetailed;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.StreetDetailed;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.SubBuildingDetailed;
import ca.bc.gov.moh.addrvalidation.entity.common.Number;
import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.xml.transform.StringResult;

/**
 *
 * @author killian.faussart
 */
public class SoapEntityToAddressDoctorXMLConverter {

    private static final Logger logger = LoggerFactory.getLogger(SoapEntityToAddressDoctorXMLConverter.class);

    /**
     * Will convert the Address object to a valid InputData XML that can be parsed by AddressDoctor
     * @param addr the Entity of the SOAP Request
     * @return 
     */
    public String convert(Address addr) {

        InputData inputData = new InputData();
        AddressElements addrElements = new AddressElements();
        
        //ADDRESS LINES
        populateInputDataAddressLines(inputData, addr);
        
        //ADDRESS COMPLETE
        populateAddressComplete(inputData, addr);
        
        //ADDRESS CODE
        populateAddressCode(inputData, addr);

        //ADDRESS ELEMENTS
        boolean addedElement = populateAddrElementsWithDefaultValues(addrElements, addr);
        boolean addedDetailedElement = populateAddrElementsWithDetailedValues(addrElements, addr.getAddressDetailed());

        if (addedElement || addedDetailedElement) {
            inputData.setAddressElements(addrElements);
        }

        //GENERATING THE INPUT DATA XML FILE
        String inputDataXML = generateInputDataXML(inputData);
        //logger.info(inputDataXML);

        return inputDataXML;
    }
    
    /**
     * Creates the <AddressCode> part of the AddressDoctor input data xml
     * (Requires a specific license that we don't have for now)
     * @param inputData
     * @param addr 
     */
    private void populateAddressCode(InputData inputData, Address addr){
        if(addr.getAddressCode() != null){
            AddressCode addrCode = new AddressCode();
            addrCode.setType(addr.getAddressCode().getCodeType());
            addrCode.setContent(addr.getAddressCode().getValue());
            inputData.setAddressCode(addrCode);
        }
    }

    /**
     * Creates the <AddressComplete> part of the AddressDoctor input data xml
     * @param inputData
     * @param addr 
     */
    private void populateAddressComplete(InputData inputData, Address addr){
        AddressComplete addrComplete = new AddressComplete();
        String addrCompStr = addr.getAddressComplete();

        if (!StringUtils.isEmpty(addrCompStr)) {
            //addrObject.setInputAddressComplete(addrComplete);
            addrComplete.setContent(addrCompStr);
            inputData.setAddressComplete(addrComplete);
        }
    }
    
    /**
     * Creates the <AddressLines> part of the AddressDoctor input data xml
     * @param inputData
     * @param addr 
     */
    private void populateInputDataAddressLines(InputData inputData, Address addr) {
        AddressLines addrLines = new AddressLines();

        //
        //FORMATTED ADDRESS LINES
        //
        List<String> formattedAddr = addr.getFormattedAddress() != null ? addr.getFormattedAddress().getString() : new ArrayList<String>();

        if (!formattedAddr.isEmpty()) {

            for (int i = 0; i < formattedAddr.size(); i++) {
                FormattedAddressLine formattedAddrLine = new FormattedAddressLine();
                formattedAddrLine.setContent(formattedAddr.get(i));
                formattedAddrLine.setLine(String.valueOf(i + 1));
                addrLines.getFormattedAddressLine().add(formattedAddrLine);
                //addrObject.setInputAddressLine("FormattedAddressLine", i+1, formattedAddr.get(i));
            }
            inputData.setAddressLines(addrLines);
        }

        //
        //DELIVERY ADDRESS LINES
        //
        List<String> deliveryAddr = addr.getDeliveryAddressLines() != null ? addr.getDeliveryAddressLines().getString() : new ArrayList<String>();

        if (!deliveryAddr.isEmpty()) {

            for (int i = 0; i < deliveryAddr.size(); i++) {
                DeliveryAddressLine deliveryAddrLine = new DeliveryAddressLine();
                deliveryAddrLine.setContent(deliveryAddr.get(i));
                deliveryAddrLine.setLine(String.valueOf(i + 1));
                addrLines.getDeliveryAddressLine().add(deliveryAddrLine);
                //addrObject.setInputAddressLine("DeliveryAddressLine", i+1, deliveryAddr.get(i));
            }
            inputData.setAddressLines(addrLines);
        }

        //
        // RECIPIENT ADDRESS LINES
        //
        List<String> recipientAddr = addr.getRecipientLines() != null ? addr.getRecipientLines().getString() : new ArrayList<String>();

        if (!recipientAddr.isEmpty()) {

            for (int i = 0; i < recipientAddr.size(); i++) {
                RecipientLine recipientAddrLine = new RecipientLine();
                recipientAddrLine.setContent(recipientAddr.get(i));
                recipientAddrLine.setLine(String.valueOf(i + 1));
                addrLines.getRecipientLine().add(recipientAddrLine);
                //addrObject.setInputAddressLine("RecipientAddressLine", i+1, deliveryAddr.get(i));
            }
            inputData.setAddressLines(addrLines);
        }

        //
        // COUNTRY SPECIFIC LOCALITY ADDRESS LINES
        //
        List<String> countrySpecificLocalityAddr = addr.getCountrySpecificLocalityLine() != null ? addr.getCountrySpecificLocalityLine().getString() : new ArrayList<String>();

        if (!countrySpecificLocalityAddr.isEmpty()) {

            for (int i = 0; i < countrySpecificLocalityAddr.size(); i++) {
                CountrySpecificLocalityLine countrySpecificAddrLine = new CountrySpecificLocalityLine();
                countrySpecificAddrLine.setContent(countrySpecificLocalityAddr.get(i));
                countrySpecificAddrLine.setLine(String.valueOf(i + 1));
                addrLines.getCountrySpecificLocalityLine().add(countrySpecificAddrLine);
                //addrObject.setInputAddressLine("CountrySpecificLocalityLine", i+1, deliveryAddr.get(i));
            }
            inputData.setAddressLines(addrLines);
        }
    }

    /**
     * Creates the <AddressElements> part of the AddressDoctor input data xml.
     * (With the default values)
     * @param addrElements
     * @param addr 
     * @return boolean true if an element was added. False otherwise
     */
    private boolean populateAddrElementsWithDefaultValues(AddressElements addrElements, Address addr) {
        
        boolean addedElement = false;
        
        List<String> countries = addr.getCountry() != null ? addr.getCountry().getString() : new ArrayList<String>();

        if (countries.size() > 0) {
            for (int i = 0; i < countries.size(); i++) {
                Country country = new Country();
                country.setType(DefaultType.COUNTRY.getValue());
                country.setItem(String.valueOf(i + 1));
                country.setContent(countries.get(i));
                addrElements.getCountry().add(country);
            }
            
            addedElement = true;
        }

        List<String> localities = addr.getLocality() != null ? addr.getLocality().getString() : new ArrayList<String>();

        if (localities.size() > 0) {
            for (int i = 0; i < localities.size(); i++) {
                Locality locality = new Locality();
                locality.setType(DefaultType.LOCALITY.getValue());
                locality.setItem(String.valueOf(i + 1));
                locality.setContent(localities.get(i));
                addrElements.getLocality().add(locality);
            }
            
            addedElement = true;
        }

        List<String> postalCodes = addr.getPostalCode() != null ? addr.getPostalCode().getString() : new ArrayList<String>();

        if (postalCodes.size() > 0) {
            for (int i = 0; i < postalCodes.size(); i++) {
                PostalCode postalCode = new PostalCode();
                postalCode.setType(DefaultType.POSTALCODE.getValue());
                postalCode.setItem(String.valueOf(i + 1));
                postalCode.setContent(postalCodes.get(i));
                addrElements.getPostalCode().add(postalCode);
            }
            
            addedElement = true;
        }

        List<String> provinces = addr.getProvince() != null ? addr.getProvince().getString() : new ArrayList<String>();

        if (provinces.size() > 0) {
            for (int i = 0; i < provinces.size(); i++) {
                Province province = new Province();
                province.setType(DefaultType.PROVINCE.getValue());
                province.setItem(String.valueOf(i + 1));
                province.setContent(provinces.get(i));
                addrElements.getProvince().add(province);
            }
            
            addedElement = true;
        }

        List<String> streets = addr.getStreet() != null ? addr.getStreet().getString() : new ArrayList<String>();

        if (streets.size() > 0) {
            for (int i = 0; i < streets.size(); i++) {
                Street street = new Street();
                street.setType(DefaultType.STREET.getValue());
                street.setItem(String.valueOf(i + 1));
                street.setContent(streets.get(i));
                addrElements.getStreet().add(street);
            }
            
            addedElement = true;
        }

        List<String> numbers = addr.getHouseNumber() != null ? addr.getHouseNumber().getString() : new ArrayList<String>();

        if (numbers.size() > 0) {
            for (int i = 0; i < numbers.size(); i++) {
                ca.bc.gov.moh.addrvalidation.entity.common.Number number = new ca.bc.gov.moh.addrvalidation.entity.common.Number();
                number.setType(DefaultType.NUMBER.getValue());
                number.setItem(String.valueOf(i + 1));
                number.setContent(numbers.get(i));
                addrElements.getNumber().add(number);
            }
            
            addedElement = true;
        }

        List<String> buildings = addr.getBuilding() != null ? addr.getBuilding().getString() : new ArrayList<String>();

        if (buildings.size() > 0) {
            for (int i = 0; i < buildings.size(); i++) {
                Building building = new Building();
                building.setType(DefaultType.BUILDING.getValue());
                building.setItem(String.valueOf(i + 1));
                building.setContent(buildings.get(i));
                addrElements.getBuilding().add(building);
            }
            
            addedElement = true;
        }

        List<String> subBuildings = addr.getSubBuilding() != null ? addr.getSubBuilding().getString() : new ArrayList<String>();

        if (subBuildings.size() > 0) {
            for (int i = 0; i < subBuildings.size(); i++) {
                SubBuilding subBuilding = new SubBuilding();
                subBuilding.setType(DefaultType.SUBBUILDING.getValue());
                subBuilding.setItem(String.valueOf(i + 1));
                subBuilding.setContent(subBuildings.get(i));
                addrElements.getSubBuilding().add(subBuilding);
            }
            
            addedElement = true;
        }

        List<String> deliveryServices = addr.getDeliveryService() != null ? addr.getDeliveryService().getString() : new ArrayList<String>();

        if (deliveryServices.size() > 0) {
            for (int i = 0; i < deliveryServices.size(); i++) {
                DeliveryService deliveryService = new DeliveryService();
                deliveryService.setType(DefaultType.DELIVERYSERVICE.getValue());
                deliveryService.setItem(String.valueOf(i + 1));
                deliveryService.setContent(deliveryServices.get(i));
                addrElements.getDeliveryService().add(deliveryService);
            }
            
            addedElement = true;
        }

        List<String> organizations = addr.getOrganization() != null ? addr.getOrganization().getString() : new ArrayList<String>();

        if (organizations.size() > 0) {
            for (int i = 0; i < organizations.size(); i++) {
                Organization organization = new Organization();
                organization.setType(DefaultType.ORGANIZATION.getValue());
                organization.setItem(String.valueOf(i + 1));
                organization.setContent(organizations.get(i));
                addrElements.getOrganization().add(organization);
            }
            
            addedElement = true;
        }

        List<String> contacts = addr.getContact() != null ? addr.getContact().getString() : new ArrayList<String>();

        if (contacts.size() > 0) {
            for (int i = 0; i < contacts.size(); i++) {
                Contact contact = new Contact();
                contact.setType(DefaultType.CONTACT.getValue());
                contact.setItem(String.valueOf(i + 1));
                contact.setContent(contacts.get(i));
                addrElements.getContact().add(contact);
            }
            
            addedElement = true;
        }

        List<String> residues = addr.getResidue() != null ? addr.getResidue().getString() : new ArrayList<String>();

        if (residues.size() > 0) {
            for (int i = 0; i < residues.size(); i++) {
                Residue residue = new Residue();
                residue.setType(DefaultType.RESIDUE.getValue());
                residue.setItem(String.valueOf(i + 1));
                residue.setContent(residues.get(i));
                addrElements.getResidue().add(residue);
            }
            
            addedElement = true;
        }

        String recordId = addr.getRecordId();

        if (!StringUtils.isEmpty(recordId)) {
            Key key = new Key();
            key.setType(DefaultType.KEY.getValue());
            key.setContent(recordId);
            key.setItem("1");
            addrElements.getKey().add(key);
            addedElement = true;
        }
        
        
        return addedElement;
    }

    /**
     * Creates the <AddressElements> part of the AddressDoctor input data xml
     * (With the detailed values)
     * @param addrElements
     * @param addrDetailed 
     * @return boolean true if an element was added. False otherwise
     */
    private boolean populateAddrElementsWithDetailedValues(AddressElements addrElements, AddressDetailed addrDetailed) {
        
        boolean addedElement = false;
        
        if (addrDetailed != null) {

            List<CountryDetailed> countriesDetailed = addrDetailed.getCountry() != null ? addrDetailed.getCountry().getCountryDetailed() : new ArrayList<CountryDetailed>();

            if (countriesDetailed.size() > 0) {

                //In AddressDoctor two different types for the same element cannot have the same item number 
                for (CountryDetailed cd : countriesDetailed) {
                    Country country = new Country();
                    country.setItem(String.valueOf(cd.getItem()));
                    addrElements.getCountry().add(country);

                    if (!StringUtils.isEmpty(cd.getABBREVIATION())) {
                        country.setType("ABBREVIATION");
                        country.setContent(cd.getABBREVIATION());
                        continue;
                    }

                    if (!StringUtils.isEmpty(cd.getNAMEEN())) {
                        country.setType("NAME");
                        country.setContent(cd.getNAMEEN());
                        continue;
                    }

                    if (!StringUtils.isEmpty(cd.getISO2())) {
                        country.setType("ISO2");
                        country.setContent(cd.getNAMEEN());
                        continue;
                    }

                    if (!StringUtils.isEmpty(cd.getISO3())) {
                        country.setType("ISO3");
                        country.setContent(cd.getNAMEEN());
                        continue;
                    }

                    if (!StringUtils.isEmpty(cd.getISONUMBER())) {
                        country.setType("ISO_NUMBER");
                        country.setContent(cd.getNAMEEN());
                    }
                }
                
                addedElement = true;
            }

            List<LocalityDetailed> localitiesDetailed = addrDetailed.getLocality() != null ? addrDetailed.getLocality().getLocalityDetailed() : new ArrayList<LocalityDetailed>();

            if (localitiesDetailed.size() > 0) {
                for (LocalityDetailed ld : localitiesDetailed) {
                    Locality locality = new Locality();
                    locality.setItem(String.valueOf(ld.getItem()));
                    addrElements.getLocality().add(locality);

                    if (!StringUtils.isEmpty(ld.getADDINFO())) {
                        locality.setType("ADD_INFO");
                        locality.setContent(ld.getADDINFO());
                        continue;
                    }

                    if (!StringUtils.isEmpty(ld.getCOMPLETE())) {
                        locality.setType("COMPLETE");
                        locality.setContent(ld.getADDINFO());
                        continue;
                    }

                    if (!StringUtils.isEmpty(ld.getNAME())) {
                        locality.setType("NAME");
                        locality.setContent(ld.getADDINFO());
                        continue;
                    }

                    if (!StringUtils.isEmpty(ld.getPREFERREDNAME())) {
                        locality.setType("PREFERRED_NAME");
                        locality.setContent(ld.getADDINFO());
                        continue;
                    }

                    if (!StringUtils.isEmpty(ld.getSORTINGCODE())) {
                        locality.setType("SORTING_CODE");
                        locality.setContent(ld.getADDINFO());
                    }
                }
                
                addedElement = true;
            }

            List<PostalCodeDetailed> postalCodesDetailed = addrDetailed.getPostalCode() != null ? addrDetailed.getPostalCode().getPostalCodeDetailed() : new ArrayList<PostalCodeDetailed>();

            if (postalCodesDetailed.size() > 0) {
                for (PostalCodeDetailed pcd : postalCodesDetailed) {
                    PostalCode postalCode = new PostalCode();
                    postalCode.setItem(String.valueOf(pcd.getItem()));
                    addrElements.getPostalCode().add(postalCode);

                    if (!StringUtils.isEmpty(pcd.getADDON())) {
                        postalCode.setType("ADD_ON");
                        postalCode.setContent(pcd.getADDON());
                        continue;
                    }

                    if (!StringUtils.isEmpty(pcd.getBASE())) {
                        postalCode.setType("BASE");
                        postalCode.setContent(pcd.getBASE());
                        continue;
                    }

                    if (!StringUtils.isEmpty(pcd.getFORMATTED())) {
                        postalCode.setType("FORMATTED");
                        postalCode.setContent(pcd.getFORMATTED());
                        continue;
                    }

                    if (!StringUtils.isEmpty(pcd.getUNFORMATTED())) {
                        postalCode.setType("UNFORMATTED");
                        postalCode.setContent(pcd.getUNFORMATTED());
                    }
                }
                
                addedElement = true;
            }

            List<ProvinceDetailed> provincesDetailed = addrDetailed.getProvince() != null ? addrDetailed.getProvince().getProvinceDetailed() : new ArrayList<ProvinceDetailed>();

            if (provincesDetailed.size() > 0) {
                for (ProvinceDetailed pd : provincesDetailed) {
                    Province province = new Province();
                    province.setItem(String.valueOf(pd.getItem()));
                    addrElements.getProvince().add(province);

                    if (!StringUtils.isEmpty(pd.getABBREVIATION())) {
                        province.setType("ABBREVIATION");
                        province.setContent(pd.getABBREVIATION());
                        continue;
                    }

                    if (!StringUtils.isEmpty(pd.getCOUNTRYSTANDARD())) {
                        province.setType("COUNTRY_STANDARD");
                        province.setContent(pd.getCOUNTRYSTANDARD());
                        continue;
                    }

                    if (!StringUtils.isEmpty(pd.getEXTENDED())) {
                        province.setType("EXTENDED");
                        province.setContent(pd.getEXTENDED());
                        continue;
                    }

                    if (!StringUtils.isEmpty(pd.getISO())) {
                        province.setType("ISO");
                        province.setContent(pd.getISO());
                    }
                }
                
                addedElement = true;
            }

            List<StreetDetailed> streetsDetailed = addrDetailed.getStreet() != null ? addrDetailed.getStreet().getStreetDetailed() : new ArrayList<StreetDetailed>();

            if (streetsDetailed.size() > 0) {
                for (StreetDetailed sd : streetsDetailed) {
                    Street street = new Street();
                    street.setItem(String.valueOf(sd.getItem()));
                    addrElements.getStreet().add(street);

                    if (!StringUtils.isEmpty(sd.getADDINFO())) {
                        street.setType("ADD_INFO");
                        street.setContent(sd.getADDINFO());
                        continue;
                    }

                    if (!StringUtils.isEmpty(sd.getCOMPLETE())) {
                        street.setType("COMPLETE");
                        street.setContent(sd.getCOMPLETE());
                        continue;
                    }

                    if (!StringUtils.isEmpty(sd.getCOMPLETEWITHNUMBER())) {
                        street.setType("COMPLETE_WITH_NUMBER");
                        street.setContent(sd.getCOMPLETEWITHNUMBER());
                        continue;
                    }

                    if (!StringUtils.isEmpty(sd.getNAME())) {
                        street.setType("NAME");
                        street.setContent(sd.getNAME());
                        continue;
                    }

                    if (!StringUtils.isEmpty(sd.getPOSTDESCRIPTOR())) {
                        street.setType("POST_DESCRIPTOR");
                        street.setContent(sd.getPOSTDESCRIPTOR());
                        continue;
                    }

                    if (!StringUtils.isEmpty(sd.getPOSTDIRECTIONAL())) {
                        street.setType("POST_DIRECTIONAL");
                        street.setContent(sd.getPOSTDIRECTIONAL());
                        continue;
                    }

                    if (!StringUtils.isEmpty(sd.getPREDESCRIPTOR())) {
                        street.setType("PRE_DESCRIPTOR");
                        street.setContent(sd.getPREDESCRIPTOR());
                        continue;
                    }

                    if (!StringUtils.isEmpty(sd.getPREDIRECTIONAL())) {
                        street.setType("PRE_DIRECTIONAL");
                        street.setContent(sd.getPREDIRECTIONAL());
                    }
                }
                
                addedElement = true;
            }

            List<HouseNumberDetailed> numbersDetailed = addrDetailed.getHouseNumber() != null ? addrDetailed.getHouseNumber().getHouseNumberDetailed() : new ArrayList<HouseNumberDetailed>();

            if (numbersDetailed.size() > 0) {
                for (HouseNumberDetailed hnd : numbersDetailed) {
                    Number number = new Number();
                    number.setItem(String.valueOf(hnd.getItem()));
                    addrElements.getNumber().add(number);

                    if (!StringUtils.isEmpty(hnd.getADDINFO())) {
                        number.setType("ADD_INFO");
                        number.setContent(hnd.getADDINFO());
                        continue;
                    }

                    if (!StringUtils.isEmpty(hnd.getCOMPLETE())) {
                        number.setType("COMPLETE");
                        number.setContent(hnd.getCOMPLETE());
                        continue;
                    }

                    if (!StringUtils.isEmpty(hnd.getDESCRIPTOR())) {
                        number.setType("DESCRIPTOR");
                        number.setContent(hnd.getDESCRIPTOR());
                        continue;
                    }

                    if (!StringUtils.isEmpty(hnd.getNUMBER())) {
                        number.setType("NUMBER");
                        number.setContent(hnd.getNUMBER());
                    }
                }
                
                addedElement = true;
            }

            List<BuildingDetailed> buildingsDetailed = addrDetailed.getBuilding() != null ? addrDetailed.getBuilding().getBuildingDetailed() : new ArrayList<BuildingDetailed>();

            if (buildingsDetailed.size() > 0) {
                for (BuildingDetailed bd : buildingsDetailed) {
                    Building building = new Building();
                    building.setItem(String.valueOf(bd.getItem()));
                    addrElements.getBuilding().add(building);

                    if (!StringUtils.isEmpty(bd.getCOMPLETE())) {
                        building.setType("COMPLETE");
                        building.setContent(bd.getCOMPLETE());
                        continue;
                    }

                    if (!StringUtils.isEmpty(bd.getCOMPLETEWITHSUBBUILDING())) {
                        building.setType("COMPLETE_WITH_SUBBUILDING");
                        building.setContent(bd.getCOMPLETEWITHSUBBUILDING());
                        continue;
                    }

                    if (!StringUtils.isEmpty(bd.getNAME())) {
                        building.setType("NAME");
                        building.setContent(bd.getNAME());
                        continue;
                    }

                    if (!StringUtils.isEmpty(bd.getDESCRIPTOR())) {
                        building.setType("DESCRIPTOR");
                        building.setContent(bd.getDESCRIPTOR());
                        continue;
                    }

                    if (!StringUtils.isEmpty(bd.getNUMBER())) {
                        building.setType("NUMBER");
                        building.setContent(bd.getNUMBER());
                    }
                }
                
                addedElement = true;
            }

            List<SubBuildingDetailed> subBuildingsDetailed = addrDetailed.getSubBuilding() != null ? addrDetailed.getSubBuilding().getSubBuildingDetailed() : new ArrayList<SubBuildingDetailed>();

            if (subBuildingsDetailed.size() > 0) {
                for (SubBuildingDetailed sbd : subBuildingsDetailed) {
                    SubBuilding subBuilding = new SubBuilding();
                    subBuilding.setItem(String.valueOf(sbd.getItem()));
                    addrElements.getSubBuilding().add(subBuilding);

                    if (!StringUtils.isEmpty(sbd.getCOMPLETE())) {
                        subBuilding.setType("COMPLETE");
                        subBuilding.setContent(sbd.getCOMPLETE());
                        continue;
                    }

                    if (!StringUtils.isEmpty(sbd.getDESCRIPTOR())) {
                        subBuilding.setType("DESCRIPTOR");
                        subBuilding.setContent(sbd.getDESCRIPTOR());
                        continue;
                    }

                    if (!StringUtils.isEmpty(sbd.getNAME())) {
                        subBuilding.setType("NAME");
                        subBuilding.setContent(sbd.getNAME());
                        continue;
                    }

                    if (!StringUtils.isEmpty(sbd.getNUMBER())) {
                        subBuilding.setType("NUMBER");
                        subBuilding.setContent(sbd.getNUMBER());
                    }
                }
                
                addedElement = true;
            }

            List<DeliveryServiceDetailed> deliveryServicesDetailed = addrDetailed.getDeliveryService() != null ? addrDetailed.getDeliveryService().getDeliveryServiceDetailed() : new ArrayList<DeliveryServiceDetailed>();

            if (deliveryServicesDetailed.size() > 0) {
                for (DeliveryServiceDetailed dsd : deliveryServicesDetailed) {
                    DeliveryService deliveryService = new DeliveryService();
                    deliveryService.setItem(String.valueOf(dsd.getItem()));
                    addrElements.getDeliveryService().add(deliveryService);

                    if (!StringUtils.isEmpty(dsd.getADDINFO())) {
                        deliveryService.setType("ADD_INFO");
                        deliveryService.setContent(dsd.getADDINFO());
                        continue;
                    }

                    if (!StringUtils.isEmpty(dsd.getCOMPLETE())) {
                        deliveryService.setType("COMPLETE");
                        deliveryService.setContent(dsd.getCOMPLETE());
                        continue;
                    }

                    if (!StringUtils.isEmpty(dsd.getDESCRIPTOR())) {
                        deliveryService.setType("DESCRIPTOR");
                        deliveryService.setContent(dsd.getDESCRIPTOR());
                        continue;
                    }

                    if (!StringUtils.isEmpty(dsd.getNUMBER())) {
                        deliveryService.setType("NUMBER");
                        deliveryService.setContent(dsd.getNUMBER());
                    }
                }
                
                addedElement = true;
            }

            List<OrganizationDetailed> organizationsDetailed = addrDetailed.getOrganization() != null ? addrDetailed.getOrganization().getOrganizationDetailed() : new ArrayList<OrganizationDetailed>();

            if (organizationsDetailed.size() > 0) {
                for (OrganizationDetailed od : organizationsDetailed) {
                    Organization organization = new Organization();
                    organization.setItem(String.valueOf(od.getItem()));
                    addrElements.getOrganization().add(organization);

                    if (!StringUtils.isEmpty(od.getCOMPLETE())) {
                        organization.setType("COMPLETE");
                        organization.setContent(od.getCOMPLETE());
                        continue;
                    }

                    if (!StringUtils.isEmpty(od.getDEPARTMENT())) {
                        organization.setType("DEPARTMENT");
                        organization.setContent(od.getDEPARTMENT());
                        continue;
                    }

                    if (!StringUtils.isEmpty(od.getDESCRIPTOR())) {
                        organization.setType("DESCRIPTOR");
                        organization.setContent(od.getDESCRIPTOR());
                        continue;
                    }

                    if (!StringUtils.isEmpty(od.getNAME())) {
                        organization.setType("NAME");
                        organization.setContent(od.getNAME());
                    }
                }
                
                addedElement = true;
            }

            List<ContactDetailed> contactsDetailed = addrDetailed.getContact() != null ? addrDetailed.getContact().getContactDetailed() : new ArrayList<ContactDetailed>();

            if (contactsDetailed.size() > 0) {
                for (ContactDetailed cd : contactsDetailed) {
                    Contact contact = new Contact();
                    contact.setItem(String.valueOf(cd.getItem()));
                    addrElements.getContact().add(contact);

                    if (!StringUtils.isEmpty(cd.getCOMPLETE())) {
                        contact.setType("COMPLETE");
                        contact.setContent(cd.getCOMPLETE());
                        continue;
                    }

                    if (!StringUtils.isEmpty(cd.getFIRSTNAME())) {
                        contact.setType("FIRST_NAME");
                        contact.setContent(cd.getFIRSTNAME());
                        continue;
                    }

                    if (!StringUtils.isEmpty(cd.getFUNCTION())) {
                        contact.setType("FUNCTION");
                        contact.setContent(cd.getFUNCTION());
                        continue;
                    }

                    if (!StringUtils.isEmpty(cd.getGENDER())) {
                        contact.setType("GENDER");
                        contact.setContent(cd.getGENDER());
                        continue;
                    }

                    if (!StringUtils.isEmpty(cd.getLASTNAME())) {
                        contact.setType("LAST_NAME");
                        contact.setContent(cd.getLASTNAME());
                        continue;
                    }

                    if (!StringUtils.isEmpty(cd.getMIDDLENAME())) {
                        contact.setType("MIDDLE_NAME");
                        contact.setContent(cd.getMIDDLENAME());
                        continue;
                    }

                    if (!StringUtils.isEmpty(cd.getNAME())) {
                        contact.setType("NAME");
                        contact.setContent(cd.getNAME());
                        continue;
                    }

                    if (!StringUtils.isEmpty(cd.getSALUTATION())) {
                        contact.setType("SALUTATION");
                        contact.setContent(cd.getSALUTATION());
                        continue;
                    }

                    if (!StringUtils.isEmpty(cd.getTITLE())) {
                        contact.setType("TITLE");
                        contact.setContent(cd.getTITLE());
                    }
                }
                
                addedElement = true;
            }

            List<ResidueDetailed> residuesDetailed = addrDetailed.getResidue() != null ? addrDetailed.getResidue().getResidueDetailed() : new ArrayList<ResidueDetailed>();

            if (residuesDetailed.size() > 0) {
                for (ResidueDetailed rd : residuesDetailed) {
                    Residue residue = new Residue();
                    residue.setItem(String.valueOf(rd.getItem()));
                    addrElements.getResidue().add(residue);

                    if (!StringUtils.isEmpty(rd.getNECESSARY())) {
                        residue.setType("NECESSARY");
                        residue.setContent(rd.getNECESSARY());
                        continue;
                    }

                    if (!StringUtils.isEmpty(rd.getSUPERFLUOUS())) {
                        residue.setType("SUPERFLUOUS");
                        residue.setContent(rd.getSUPERFLUOUS());
                        continue;
                    }

                    if (!StringUtils.isEmpty(rd.getUNRECOGNIZED())) {
                        residue.setType("UNRECOGNIZED");
                        residue.setContent(rd.getUNRECOGNIZED());
                    }
                }
                
                addedElement = true;
            }
        }
        
        return addedElement;
    }

    /**
     * Return the Parameters as an XML formatted String ready to be processed by
     * the AddressObject. Only the ProcessMode is used.
     *
     * @param parameters the parameters coming from the SOAP request
     * @return
     */
    public String convertParameters(Parameters parameters) {
        ProcessMode processMode;

        try {
            processMode = ProcessMode.valueOf(parameters.getProcessMode());
        } catch (IllegalArgumentException ex) {
            logger.warn("The process mode was not recognized. Batch will be used as default: " + ex.getMessage(), ex);
            processMode = ProcessMode.BATCH;
        }

        return "<?xml version=\"1.0\" encoding=\"UTF-16\"?>\n"
                + "<Parameters WriteXMLEncoding=\"UTF-16\" WriteXMLBOM=\"NEVER\">\n"
                + "  <Process Mode=\"" + processMode.name() + "\" EnrichmentGeoCoding=\"ON\" EnrichmentCASS=\"ON\""
                + " EnrichmentSERP=\"ON\" EnrichmentCAMEO=\"ON\" EnrichmentSupplementaryUS=\"ON\" />\n"
                + "  <Input Encoding=\"UTF-16\" FormatType=\"ALL\" FormatWithCountry=\"ON\" />\n"
                + "  <Result Encoding=\"UTF-16\" CountryType=\"NAME_EN\" GlobalPreferredDescriptor=\"SHORT\" />\n"
                + "</Parameters>";
    }

    /**
     * Will generate the InputDataXML String from the InputData java object
     *
     * @param inputData
     * @return
     */
    private String generateInputDataXML(InputData inputData) {
        StringResult inputDataXML = new StringResult();

        try {
            JAXBContext jaxbContext = JAXBContext.newInstance(InputData.class);
            Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
            jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
            jaxbMarshaller.marshal(inputData, inputDataXML);
        } catch (JAXBException ex) {
            logger.error("An error occured while generating the inputData XML file", ex);
        }

        return inputDataXML.toString();
    }

}
