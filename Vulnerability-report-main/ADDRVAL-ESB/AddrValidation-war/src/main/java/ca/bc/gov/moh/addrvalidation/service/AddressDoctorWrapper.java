/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.addrvalidation.service;

import ca.bc.gov.moh.addrvalidation.config.Config;
import ca.bc.gov.moh.addrvalidation.config.ConfigType;
import ca.bc.gov.moh.addrvalidation.exception.AddressValidationException;
import com.addressdoctor.AddressDoctor;
import com.addressdoctor.AddressDoctorException;
import com.addressdoctor.AddressObject;
import java.util.Properties;
import java.util.logging.Level;
import javax.naming.NamingException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This wrapper helps with the unit tests
 *
 * @author killian.faussart
 */
public class AddressDoctorWrapper {

    private static final Logger logger = LoggerFactory.getLogger(AddressDoctorWrapper.class);

    private AddressObject addrObject;
    private int iLastError = 0;

    public AddressDoctorWrapper() {

    }
    
    static {
        final String setConfigFile = getConfig();
        
        try {
            AddressDoctor.initialize(null, setConfigFile, null, null); 
        } catch (AddressDoctorException ex) {
            java.util.logging.Logger.getLogger(AddressDoctorWrapper.class.getName()).log(Level.SEVERE, null, ex);
            throw new RuntimeException("AddressDoctor failed to initialize:" + ex.getMessage() + " " + ex.getNumber());
        }
    }

    public void setParametersXML(String parameters) throws AddressValidationException {
        try {
            addrObject = AddressDoctor.getAddressObject();
            addrObject.setParametersXML(parameters, null);
        } catch (AddressDoctorException ex) {
            logger.error("Exception while getting the AddressObject ", ex);
            throw new AddressValidationException(ex.getMessage(), ex, ex.getNumber());
        }
    }

    public static String getConfig() {
        try {
            Properties appProps = Config.<Properties>getResource(ConfigType.APPLICATION_PROPERTIES);
            String dbConfigPath = appProps.getProperty("dbConfigLocation");
            return dbConfigPath;
        } catch (NamingException ex) {
            logger.error("Exception while getting the JNDI resource DBConfigPath", ex);
        }

        return null;
    }

    public String processAddress(String address) throws AddressValidationException {
        /////////////////////////////////////////////////////
        // Set the address
        /////////////////////////////////////////////////////
        try {
            addrObject.setInputDataXML(address);
        } catch (AddressDoctorException ex) {
            logger.error("An error occured while setting the InputDataXML of AddressObject ", ex);
            throw new AddressValidationException(ex.getMessage(), ex, ex.getNumber());
        }

        ///////////////////////////////////////////////
        // Process the Address
        ///////////////////////////////////////////////
        try {

            AddressDoctor.process(addrObject);
            iLastError = addrObject.getLastError();
            logger.info("Process returned " + iLastError);
        } catch (AddressDoctorException ex) {
            logger.error("Exception occured while processing address", ex);
            throw new AddressValidationException(ex.getMessage(), ex, ex.getNumber());
        }

        ///////////////////////////////////////////////
        // Get the result
        ///////////////////////////////////////////////
        String result = null;
        if (iLastError == 0) {
            try {
                result = addrObject.getResultXML();
            } catch (AddressDoctorException ex) {
                logger.error("Exception occured while getting XML result from AddressObject", ex);
                throw new AddressValidationException(ex.getMessage(), ex, ex.getNumber());
            }
        }

        return result;
    }

    public void clearData() throws AddressValidationException {
        try {
            //Clearing data for next address
            addrObject.clearData();
        } catch (AddressDoctorException ex) {
            logger.error("Exception occured while clearing AddressObject", ex);
            throw new AddressValidationException(ex.getMessage(), ex, ex.getNumber());
        }
    }

    public void releaseAddress() throws AddressValidationException {
        // Release the AddressObject again and DeInit the AddressDoctor
        // NOTE: In a batch process only use one AddressObject! Use the function AD_ClearData and use it again
        //		 to maximize performance. Do not call GetAddressObject and ReleaseAddressObject for each address!
        try {
            AddressDoctor.releaseAddressObject(addrObject);
        } catch (AddressDoctorException ex) {
            logger.error("Exception while releasing the AO", ex);
            throw new AddressValidationException(ex.getMessage(), ex, ex.getNumber());
        }
    }

    public int getStatusCode() {
        return iLastError;
    }
}
