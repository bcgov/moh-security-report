/*
 * *********************************************************************************************************************
 *  Copyright (c) 2018, Ministry of Health, BC.                                                 *
 *                                                                                                                     *
 *  All rights reserved.                                                                                               *
 *    This information contained herein may not be used in whole                                                       *
 *    or in part without the express written consent of the                                                            *
 *    Government of British Columbia, Canada.                                                                          *
 *                                                                                                                     *
 *  Revision Control Information                                                                                       *
 *  File:                $Id::                                                                                       $ *
 *  Date of Last Commit: $Date::                                                                                     $ *
 *  Revision Number:     $Rev::                                                                                      $ *
 *  Last Commit by:      $Author::                                                                                   $ *
 *                                                                                                                     *
 * *********************************************************************************************************************
 */
package ca.bc.gov.moh.addrvalidation.entity.result;

import ca.bc.gov.moh.addrvalidation.entity.common.Building;
import ca.bc.gov.moh.addrvalidation.entity.common.Contact;
import ca.bc.gov.moh.addrvalidation.entity.common.Country;
import ca.bc.gov.moh.addrvalidation.entity.common.DeliveryService;
import ca.bc.gov.moh.addrvalidation.entity.common.Key;
import ca.bc.gov.moh.addrvalidation.entity.common.Locality;
import ca.bc.gov.moh.addrvalidation.entity.common.Number;
import ca.bc.gov.moh.addrvalidation.entity.common.Organization;
import ca.bc.gov.moh.addrvalidation.entity.common.PostalCode;
import ca.bc.gov.moh.addrvalidation.entity.common.Province;
import ca.bc.gov.moh.addrvalidation.entity.common.Residue;
import ca.bc.gov.moh.addrvalidation.entity.common.Street;
import ca.bc.gov.moh.addrvalidation.entity.common.SubBuilding;
import org.junit.Assert;
import org.junit.Test;

/**
 *
 * @author joshua.burton
 */
public class ObjectFactoryTest {
    
    @Test
    public void testResultObjectFactoryMethods() {
        
        ObjectFactory of = new ObjectFactory();
        
        Assert.assertNotNull(of.createAMAS(of.createAMAS()));
        Assert.assertNotNull(of.createAddressComplete(of.createAddressComplete()));
        Assert.assertNotNull(of.createAddressElements(of.createAddressElements()));
        Assert.assertNotNull(of.createAddressLines(of.createAddressLines()));
        Assert.assertNotNull(of.createBuilding(of.createBuilding()));
        Assert.assertNotNull(of.createCAMEO(of.createCAMEO()));
        Assert.assertNotNull(of.createCASS(of.createCASS()));
        Assert.assertNotNull(of.createContact(of.createContact()));
        Assert.assertNotNull(of.createCountry(of.createCountry()));
        Assert.assertNotNull(of.createCountrySpecificLocalityLine(of.createCountrySpecificLocalityLine()));
        Assert.assertNotNull(of.createDeliveryAddressLine(of.createDeliveryAddressLine()));
        Assert.assertNotNull(of.createDeliveryService(of.createDeliveryService()));
        Assert.assertNotNull(of.createEnrichmentData(of.createEnrichmentData()));
        Assert.assertNotNull(of.createFormattedAddressLine(of.createFormattedAddressLine()));
        Assert.assertNotNull(of.createGeoCoding(of.createGeoCoding()));
        Assert.assertNotNull(of.createKey(of.createKey()));
        Assert.assertNotNull(of.createLocality(of.createLocality()));
        Assert.assertNotNull(of.createNumber(of.createNumber()));
        Assert.assertNotNull(of.createOrganization(of.createOrganization()));
        Assert.assertNotNull(of.createPostalCode(of.createPostalCode()));
        Assert.assertNotNull(of.createProvince(of.createProvince()));
        Assert.assertNotNull(of.createRecipientLine(of.createRecipientLine()));
        Assert.assertNotNull(of.createResidue(of.createResidue()));
        Assert.assertNotNull(of.createResult(of.createResult()));
        Assert.assertNotNull(of.createResultData(of.createResultData()));
        Assert.assertNotNull(of.createSERP(of.createSERP()));
        Assert.assertNotNull(of.createSNA(of.createSNA()));
        Assert.assertNotNull(of.createSendRight(of.createSendRight()));
        Assert.assertNotNull(of.createStreet(of.createStreet()));
        Assert.assertNotNull(of.createSubBuilding(of.createSubBuilding()));
        Assert.assertNotNull(of.createSupplementaryAT(of.createSupplementaryAT()));
        Assert.assertNotNull(of.createSupplementaryBE(of.createSupplementaryBE()));
        Assert.assertNotNull(of.createSupplementaryBR(of.createSupplementaryBR()));
        Assert.assertNotNull(of.createSupplementaryCH(of.createSupplementaryCH()));
        Assert.assertNotNull(of.createSupplementaryDE(of.createSupplementaryDE()));
        Assert.assertNotNull(of.createSupplementaryES(of.createSupplementaryES()));
        Assert.assertNotNull(of.createSupplementaryFR(of.createSupplementaryFR()));
        Assert.assertNotNull(of.createSupplementaryGB(of.createSupplementaryGB()));
        Assert.assertNotNull(of.createSupplementaryIT(of.createSupplementaryIT()));
        Assert.assertNotNull(of.createSupplementaryJP(of.createSupplementaryJP()));
        Assert.assertNotNull(of.createSupplementaryKR(of.createSupplementaryKR()));
        Assert.assertNotNull(of.createSupplementaryPL(of.createSupplementaryPL()));
        Assert.assertNotNull(of.createSupplementaryRS(of.createSupplementaryRS()));
        Assert.assertNotNull(of.createSupplementaryRU(of.createSupplementaryRU()));
        Assert.assertNotNull(of.createSupplementaryUS(of.createSupplementaryUS()));
        Assert.assertNotNull(of.createSupplementaryZA(of.createSupplementaryZA()));
    }
    
    @Test
    public void testResultEntitiesDefaultValues() {
        
        ObjectFactory of = new ObjectFactory();
        
        // Complex types
        Assert.assertEquals("ERRORCODE", of.createAMAS().getType());
        Assert.assertEquals("CATEGORY", of.createCAMEO().getType());
        Assert.assertEquals("ERRORCODE", of.createCASS().getType());
        Assert.assertEquals("COMPLETE", of.createGeoCoding().getType());
        Assert.assertEquals("CATEGORY", of.createSERP().getType());
        Assert.assertEquals("CATEGORY", of.createSNA().getType());
        Assert.assertEquals("VALIDITY_CODE", of.createSendRight().getType());
        
        // Suplementary entities
        Assert.assertEquals("POSTAL_ADDRESS_CODE", of.createSupplementaryAT().getType());
        Assert.assertEquals("NIS_CODE", of.createSupplementaryBE().getType());
        Assert.assertEquals("IBGE_CODE", of.createSupplementaryBR().getType());
        Assert.assertEquals("POSTAL_CODE_EXTENSION", of.createSupplementaryCH().getType());
        Assert.assertEquals("LOCALITY_ID", of.createSupplementaryDE().getType());
        Assert.assertEquals("INE_STREET_CODE", of.createSupplementaryES().getType());
        Assert.assertEquals("INSEE_CODE", of.createSupplementaryFR().getType());
        Assert.assertEquals("DELIVERY_POINT_SUFFIXES", of.createSupplementaryGB().getType());
        Assert.assertEquals("ISTAT_CODE", of.createSupplementaryIT().getType());
        Assert.assertEquals("CHOUMEI_AZA_CODE", of.createSupplementaryJP().getType());
        Assert.assertEquals("ADDRESS_ID", of.createSupplementaryKR().getType());
        Assert.assertEquals("GMINA_CODE", of.createSupplementaryPL().getType());
        Assert.assertEquals("POSTAL_ADDRESS_CODE", of.createSupplementaryRS().getType());
        Assert.assertEquals("FIAS_ID", of.createSupplementaryRU().getType());
        Assert.assertEquals("COUNTY_FIPS_CODE", of.createSupplementaryUS().getType());
        Assert.assertEquals("NAD_ID", of.createSupplementaryZA().getType());
        
        // Result entities
        Assert.assertEquals("1", of.createBuilding().getItem());
        Assert.assertEquals("COMPLETE", of.createBuilding().getType());
        Assert.assertEquals("1", of.createContact().getItem());
        Assert.assertEquals("COMPLETE", of.createContact().getType());
        Assert.assertEquals("1", of.createCountry().getItem());
        Assert.assertEquals("NAME_EN", of.createCountry().getType());
        Assert.assertEquals("1", of.createDeliveryService().getItem());
        Assert.assertEquals("COMPLETE", of.createDeliveryService().getType());
        Assert.assertEquals("1", of.createKey().getItem());
        Assert.assertEquals("RECORD_ID", of.createKey().getType());
        Assert.assertEquals("1", of.createLocality().getItem());
        Assert.assertEquals("COMPLETE", of.createLocality().getType());
        Assert.assertEquals("1", of.createNumber().getItem());
        Assert.assertEquals("COMPLETE", of.createNumber().getType());
        Assert.assertEquals("1", of.createOrganization().getItem());
        Assert.assertEquals("COMPLETE", of.createOrganization().getType());
        Assert.assertEquals("1", of.createPostalCode().getItem());
        Assert.assertEquals("FORMATTED", of.createPostalCode().getType());
        Assert.assertEquals("1", of.createProvince().getItem());
        Assert.assertEquals("COUNTRY_STANDARD", of.createProvince().getType());
        Assert.assertEquals("1", of.createResidue().getItem());
        Assert.assertEquals("UNRECOGNIZED", of.createResidue().getType());
        Assert.assertEquals("1", of.createStreet().getItem());
        Assert.assertEquals("COMPLETE", of.createStreet().getType());
        Assert.assertEquals("1", of.createSubBuilding().getItem());
        Assert.assertEquals("COMPLETE", of.createSubBuilding().getType());
        
        // Line entities
        Assert.assertEquals("1", of.createCountrySpecificLocalityLine().getLine());
        Assert.assertEquals("1", of.createDeliveryAddressLine().getLine());
        Assert.assertEquals("1", of.createFormattedAddressLine().getLine());
        Assert.assertEquals("1", of.createRecipientLine().getLine());
        
        // Address Doctor result entity
        Assert.assertNotNull(of.createResult().getResultData());
        Assert.assertEquals("0", of.createResult().getCount());
        Assert.assertEquals("NO", of.createResult().getCountOverflow());
        Assert.assertEquals("BATCH", of.createResult().getModeUsed());
        Assert.assertEquals("DATABASE", of.createResult().getPreferredLanguage());
        Assert.assertEquals("DATABASE", of.createResult().getPreferredScript());
    }
    
    @Test
    public void testResultEntitiesModifiedValues() {
        
        ObjectFactory of = new ObjectFactory();
        
        // GIVEN
        // Result entities
        AMAS amas = of.createAMAS();
        CAMEO cameo = of.createCAMEO();
        CASS cass = of.createCASS();
        GeoCoding geoCoding = of.createGeoCoding();
        SERP serp = of.createSERP();
        SNA sna = of.createSNA();
        SendRight sendRight = of.createSendRight();
        SupplementaryAT at = of.createSupplementaryAT();
        SupplementaryBE be = of.createSupplementaryBE();
        SupplementaryBR br = of.createSupplementaryBR();
        SupplementaryCH ch = of.createSupplementaryCH();
        SupplementaryDE de = of.createSupplementaryDE();
        SupplementaryES es = of.createSupplementaryES();
        SupplementaryFR fr = of.createSupplementaryFR();
        SupplementaryGB gb = of.createSupplementaryGB();
        SupplementaryIT it = of.createSupplementaryIT();
        SupplementaryJP jp = of.createSupplementaryJP();
        SupplementaryKR kr = of.createSupplementaryKR();
        SupplementaryPL pl = of.createSupplementaryPL();
        SupplementaryRS rs = of.createSupplementaryRS();
        SupplementaryRU ru = of.createSupplementaryRU();
        SupplementaryUS us = of.createSupplementaryUS();
        SupplementaryZA za = of.createSupplementaryZA();
        
        // Common entities
        Building building = of.createBuilding();
        Contact contact = of.createContact();
        Country country = of.createCountry();
        DeliveryService deliveryService = of.createDeliveryService();
        Key key = of.createKey();
        Locality locality = of.createLocality();
        Number number = of.createNumber();
        Organization organization = of.createOrganization();
        PostalCode postalCode = of.createPostalCode();
        Province province = of.createProvince();
        Residue residue = of.createResidue();
        Street street = of.createStreet();
        SubBuilding subBuilding = of.createSubBuilding();
        
        // Address Doctor result
        AddrDocResult result = of.createResult();
        
        
        // WHEN
        amas.setType("test");
        cameo.setType("test");
        cass.setType("test");
        geoCoding.setType("test");
        serp.setType("test");
        sna.setType("test");
        sendRight.setType("test");
        at.setType("test");
        be.setType("test");
        br.setType("test");
        ch.setType("test");
        de.setType("test");
        es.setType("test");
        fr.setType("test");
        gb.setType("test");
        it.setType("test");
        jp.setType("test");
        kr.setType("test");
        pl.setType("test");
        rs.setType("test");
        ru.setType("test");
        us.setType("test");
        za.setType("test");
        
        building.setItem("0");
        building.setType("test");
        contact.setItem("0");
        contact.setType("test");
        country.setItem("0");
        country.setType("test");
        deliveryService.setItem("0");
        deliveryService.setType("test");
        key.setItem("0");
        key.setType("test");
        locality.setItem("0");
        locality.setType("test");
        number.setItem("0");
        number.setType("test");
        organization.setItem("0");
        organization.setType("test");
        postalCode.setItem("0");
        postalCode.setType("test");
        province.setItem("0");
        province.setType("test");
        residue.setItem("0");
        residue.setType("test");
        street.setItem("0");
        street.setType("test");
        subBuilding.setItem("0");
        subBuilding.setType("test");
        
        result.setCount("1");
        result.setCountOverflow("YES");
        result.setModeUsed("test");
        result.setPreferredLanguage("test");
        result.setPreferredScript("test");
        
        
        // THEN
        Assert.assertEquals("test", amas.getType());
        Assert.assertEquals("test", cameo.getType());
        Assert.assertEquals("test", cass.getType());
        Assert.assertEquals("test", geoCoding.getType());
        Assert.assertEquals("test", serp.getType());
        Assert.assertEquals("test", sna.getType());
        Assert.assertEquals("test", sendRight.getType());
        Assert.assertEquals("test", at.getType());
        Assert.assertEquals("test", be.getType());
        Assert.assertEquals("test", br.getType());
        Assert.assertEquals("test", ch.getType());
        Assert.assertEquals("test", de.getType());
        Assert.assertEquals("test", es.getType());
        Assert.assertEquals("test", fr.getType());
        Assert.assertEquals("test", gb.getType());
        Assert.assertEquals("test", it.getType());
        Assert.assertEquals("test", jp.getType());
        Assert.assertEquals("test", kr.getType());
        Assert.assertEquals("test", pl.getType());
        Assert.assertEquals("test", rs.getType());
        Assert.assertEquals("test", ru.getType());
        Assert.assertEquals("test", us.getType());
        Assert.assertEquals("test", za.getType());
        
        Assert.assertEquals("0", building.getItem());
        Assert.assertEquals("test", building.getType());
        Assert.assertEquals("0", contact.getItem());
        Assert.assertEquals("test", contact.getType());
        Assert.assertEquals("0", country.getItem());
        Assert.assertEquals("test", country.getType());
        Assert.assertEquals("0", deliveryService.getItem());
        Assert.assertEquals("test", deliveryService.getType());
        Assert.assertEquals("0", key.getItem());
        Assert.assertEquals("test", key.getType());
        Assert.assertEquals("0", locality.getItem());
        Assert.assertEquals("test", locality.getType());
        Assert.assertEquals("0", number.getItem());
        Assert.assertEquals("test", number.getType());
        Assert.assertEquals("0", organization.getItem());
        Assert.assertEquals("test", organization.getType());
        Assert.assertEquals("0", postalCode.getItem());
        Assert.assertEquals("test", postalCode.getType());
        Assert.assertEquals("0", province.getItem());
        Assert.assertEquals("test", province.getType());
        Assert.assertEquals("0", residue.getItem());
        Assert.assertEquals("test", residue.getType());
        Assert.assertEquals("0", street.getItem());
        Assert.assertEquals("test", street.getType());
        Assert.assertEquals("0", subBuilding.getItem());
        Assert.assertEquals("test", subBuilding.getType());
        
        Assert.assertEquals("1", result.getCount());
        Assert.assertEquals("YES", result.getCountOverflow());
        Assert.assertEquals("test", result.getModeUsed());
        Assert.assertEquals("test", result.getPreferredLanguage());
        Assert.assertEquals("test", result.getPreferredScript());
    }
}
