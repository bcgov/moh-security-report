/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.addrvalidation;

import ca.bc.gov.moh.addrvalidation.service.AddressDoctorWrapper;
import ca.bc.gov.moh.addrvalidation.service.AddressValidationWebService;
import ca.bc.gov.moh.addrvalidation.service.AddressValidationProcessor;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.ArrayOfAddress;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.ArrayOfEnrichment;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.Process;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.Parameters;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.Response;
import ca.bc.gov.moh.addrvalidation.exception.AddressValidationException;
import com.addressdoctor.AddressDoctor;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPMessage;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.handler.MessageContext;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
import org.powermock.modules.junit4.PowerMockRunner;

/**
 *
 * @author killian.faussart
 */
@RunWith(PowerMockRunner.class)
@PrepareForTest({AddressDoctor.class, AddressValidationProcessor.class, AddressDoctorWrapper.class, WebServiceContext.class})
@PowerMockIgnore({"javax.xml.*", "org.xml.*", "org.w3c.*"})
@SuppressStaticInitializationFor("ca.bc.gov.moh.addrvalidation.service.AddressDoctorWrapper")
public class AddressValidationWebServiceTest {

    //Root of the SOAP Request
    private Process process;
    
    private void convertXMLFile(String fileName) {
        try {

            File file = new File(getClass().getClassLoader().getResource(fileName).getFile());
            JAXBContext jaxbContext = JAXBContext.newInstance(Process.class);

            SOAPMessage message = MessageFactory.newInstance().createMessage(null, new FileInputStream(file));

            Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
            process = (Process) jaxbUnmarshaller.unmarshal(message.getSOAPBody().extractContentAsDocument());

        } catch (JAXBException | SOAPException | IOException ex) {
            Logger.getLogger(AddressValidationWebServiceTest.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    @Test
    public void testOneAddressFastCompletionNoDetailed() throws Exception {

        //GIVEN
        convertXMLFile("TEST_ONE_FC_NOD.xml");

        ArrayOfAddress addressArray = process.getAddresses();
        ArrayOfEnrichment enrichmentArray = process.getEnrichments();
        String login = process.getLogin();
        String password = process.getPassword();
        Parameters parameters = process.getParameters();

        AddressDoctorWrapper adWrapperMock = PowerMockito.mock(AddressDoctorWrapper.class);      
        PowerMockito.whenNew(AddressDoctorWrapper.class).withNoArguments().thenReturn(adWrapperMock);
        
        WebServiceContext contextMock = PowerMockito.mock(WebServiceContext.class);
        MessageContext messageCtxMock = PowerMockito.mock(MessageContext.class);
        PowerMockito.when(contextMock.getMessageContext()).thenReturn(messageCtxMock);
        
        AddressValidationWebService avwsMock = PowerMockito.mock(AddressValidationWebService.class);
        PowerMockito.when(avwsMock.getContext()).thenReturn(contextMock);
        
        //WHEN
        PowerMockito.doCallRealMethod().when(avwsMock).process(login, password, parameters, addressArray, enrichmentArray);
        Response response = avwsMock.process(login, password, parameters, addressArray, enrichmentArray);

        //THEN
        Mockito.verify(adWrapperMock, Mockito.times(1)).setParametersXML(Mockito.anyString());
        Mockito.verify(adWrapperMock, Mockito.times(1)).processAddress(Mockito.anyString());
        Mockito.verify(adWrapperMock, Mockito.times(1)).clearData();
        Mockito.verify(adWrapperMock, Mockito.times(1)).releaseAddress();
        Assert.assertNotNull(response);
        Assert.assertEquals(100, response.getStatusCode());
        Assert.assertEquals("OK", response.getStatusMessage());
    }

    @Test
    public void testTwoAddressesFastCompletionNoDetailed() throws Exception {

        //GIVEN
        convertXMLFile("TEST_TWO_FC_NOD.xml");

        ArrayOfAddress addressArray = process.getAddresses();
        ArrayOfEnrichment enrichmentArray = process.getEnrichments();
        String login = process.getLogin();
        String password = process.getPassword();
        Parameters parameters = process.getParameters();

        AddressDoctorWrapper adWrapperMock = PowerMockito.mock(AddressDoctorWrapper.class);
        PowerMockito.whenNew(AddressDoctorWrapper.class).withNoArguments().thenReturn(adWrapperMock);

        WebServiceContext contextMock = PowerMockito.mock(WebServiceContext.class);
        MessageContext messageCtxMock = PowerMockito.mock(MessageContext.class);
        PowerMockito.when(contextMock.getMessageContext()).thenReturn(messageCtxMock);
        
        AddressValidationWebService avwsMock = PowerMockito.mock(AddressValidationWebService.class);
        PowerMockito.when(avwsMock.getContext()).thenReturn(contextMock);
        
        //WHEN
        PowerMockito.doCallRealMethod().when(avwsMock).process(login, password, parameters, addressArray, enrichmentArray);
        Response response = avwsMock.process(login, password, parameters, addressArray, enrichmentArray);

        //THEN
        Mockito.verify(adWrapperMock, Mockito.times(1)).setParametersXML(Mockito.anyString());
        Mockito.verify(adWrapperMock, Mockito.times(2)).processAddress(Mockito.anyString());
        Mockito.verify(adWrapperMock, Mockito.times(2)).clearData();
        Mockito.verify(adWrapperMock, Mockito.times(1)).releaseAddress();
        Assert.assertNotNull(response);
        Assert.assertEquals(100, response.getStatusCode());
        Assert.assertEquals("OK", response.getStatusMessage());
    }

    @Test
    public void testOneAddressBatchNoDetailed() throws Exception {

        //GIVEN
        convertXMLFile("TEST_ONE_BATCH_NOD.xml");

        ArrayOfAddress addressArray = process.getAddresses();
        ArrayOfEnrichment enrichmentArray = process.getEnrichments();
        String login = process.getLogin();
        String password = process.getPassword();
        Parameters parameters = process.getParameters();

        AddressDoctorWrapper adWrapperMock = PowerMockito.mock(AddressDoctorWrapper.class);
        PowerMockito.whenNew(AddressDoctorWrapper.class).withNoArguments().thenReturn(adWrapperMock);
        
        WebServiceContext contextMock = PowerMockito.mock(WebServiceContext.class);
        MessageContext messageCtxMock = PowerMockito.mock(MessageContext.class);
        PowerMockito.when(contextMock.getMessageContext()).thenReturn(messageCtxMock);
        
        AddressValidationWebService avwsMock = PowerMockito.mock(AddressValidationWebService.class);
        PowerMockito.when(avwsMock.getContext()).thenReturn(contextMock);
        
        //WHEN
        PowerMockito.doCallRealMethod().when(avwsMock).process(login, password, parameters, addressArray, enrichmentArray);
        Response response = avwsMock.process(login, password, parameters, addressArray, enrichmentArray);
        
        //THEN
        Mockito.verify(adWrapperMock, Mockito.times(1)).setParametersXML(Mockito.anyString());
        Mockito.verify(adWrapperMock, Mockito.times(1)).processAddress(Mockito.anyString());
        Mockito.verify(adWrapperMock, Mockito.times(1)).clearData();
        Mockito.verify(adWrapperMock, Mockito.times(1)).releaseAddress();
        Assert.assertNotNull(response);
        Assert.assertEquals(100, response.getStatusCode());
        Assert.assertEquals("OK", response.getStatusMessage());
    }

    @Test
    public void testMappedErrorAddressValidationException() throws Exception {

        //GIVEN
        convertXMLFile("TEST_ONE_FC_NOD.xml");

        ArrayOfAddress addressArray = process.getAddresses();
        ArrayOfEnrichment enrichmentArray = process.getEnrichments();
        String login = process.getLogin();
        String password = process.getPassword();
        Parameters parameters = process.getParameters();

        AddressDoctorWrapper adWrapperMock = PowerMockito.mock(AddressDoctorWrapper.class);
        PowerMockito.whenNew(AddressDoctorWrapper.class).withNoArguments().thenReturn(adWrapperMock);
        PowerMockito.doThrow(new AddressValidationException("Message", new Throwable(), 900)).when(adWrapperMock).processAddress(Mockito.anyString());

        WebServiceContext contextMock = PowerMockito.mock(WebServiceContext.class);
        MessageContext messageCtxMock = PowerMockito.mock(MessageContext.class);
        PowerMockito.when(contextMock.getMessageContext()).thenReturn(messageCtxMock);
        
        AddressValidationWebService avwsMock = PowerMockito.mock(AddressValidationWebService.class);
        PowerMockito.when(avwsMock.getContext()).thenReturn(contextMock);
        
        //WHEN
        PowerMockito.doCallRealMethod().when(avwsMock).process(login, password, parameters, addressArray, enrichmentArray);
        Response response = avwsMock.process(login, password, parameters, addressArray, enrichmentArray);

        //THEN
        Mockito.verify(adWrapperMock, Mockito.times(1)).setParametersXML(Mockito.anyString());

        Assert.assertNotNull(response);
        Assert.assertEquals(900, response.getStatusCode());
        Assert.assertEquals("SERVER ERROR", response.getStatusMessage());
    }
    
    @Test
    public void testUnMappedErrorAddressValidationException() throws Exception {

        //GIVEN
        convertXMLFile("TEST_ONE_FC_NOD.xml");

        ArrayOfAddress addressArray = process.getAddresses();
        ArrayOfEnrichment enrichmentArray = process.getEnrichments();
        String login = process.getLogin();
        String password = process.getPassword();
        Parameters parameters = process.getParameters();

        AddressDoctorWrapper adWrapperMock = PowerMockito.mock(AddressDoctorWrapper.class);
        PowerMockito.whenNew(AddressDoctorWrapper.class).withNoArguments().thenReturn(adWrapperMock);
        PowerMockito.doThrow(new AddressValidationException("Error: A XML string is invalid", new Throwable(), 1101)).when(adWrapperMock).processAddress(Mockito.anyString());

        WebServiceContext contextMock = PowerMockito.mock(WebServiceContext.class);
        MessageContext messageCtxMock = PowerMockito.mock(MessageContext.class);
        PowerMockito.when(contextMock.getMessageContext()).thenReturn(messageCtxMock);
        
        AddressValidationWebService avwsMock = PowerMockito.mock(AddressValidationWebService.class);
        PowerMockito.when(avwsMock.getContext()).thenReturn(contextMock);
        
        //WHEN
        PowerMockito.doCallRealMethod().when(avwsMock).process(login, password, parameters, addressArray, enrichmentArray);
        Response response = avwsMock.process(login, password, parameters, addressArray, enrichmentArray);

        //THEN
        Mockito.verify(adWrapperMock, Mockito.times(1)).setParametersXML(Mockito.anyString());

        Assert.assertNotNull(response);
        Assert.assertEquals(900, response.getStatusCode());
        Assert.assertEquals("SERVER ERROR", response.getStatusMessage());
    }
    
}
