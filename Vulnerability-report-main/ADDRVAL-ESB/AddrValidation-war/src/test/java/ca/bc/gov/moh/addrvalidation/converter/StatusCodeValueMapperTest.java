package ca.bc.gov.moh.addrvalidation.converter;

import ca.bc.gov.moh.addrvalidation.AddressValidationWebServiceTest;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.ArrayOfAddress;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.ArrayOfEnrichment;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.Parameters;
import ca.bc.gov.moh.addrvalidation.entity.wsdl.Response;
import ca.bc.gov.moh.addrvalidation.exception.AddressValidationException;
import ca.bc.gov.moh.addrvalidation.service.AddressDoctorWrapper;
import ca.bc.gov.moh.addrvalidation.service.AddressValidationProcessor;
import ca.bc.gov.moh.addrvalidation.service.AddressValidationWebService;
import com.addressdoctor.AddressDoctor;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import javax.xml.soap.MessageFactory;
import javax.xml.soap.SOAPException;
import javax.xml.soap.SOAPMessage;
import javax.xml.ws.WebServiceContext;
import javax.xml.ws.handler.MessageContext;
import org.junit.Assert;
import static org.junit.Assert.assertEquals;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mockito;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.core.classloader.annotations.SuppressStaticInitializationFor;
import org.powermock.modules.junit4.PowerMockRunner;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author killian.faussart
 */
@RunWith(PowerMockRunner.class)
@PrepareForTest({AddressDoctor.class, AddressValidationProcessor.class, AddressDoctorWrapper.class, WebServiceContext.class})
@PowerMockIgnore({"javax.xml.*", "org.xml.*", "org.w3c.*"})
@SuppressStaticInitializationFor("ca.bc.gov.moh.addrvalidation.service.AddressDoctorWrapper")
public class StatusCodeValueMapperTest {
       
    //Root of the SOAP Request
    private ca.bc.gov.moh.addrvalidation.entity.wsdl.Process process;
    
    //Array of Address Doctor error codes
    private static final int[] ERROR_CODES = {
        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 100, 101, 102, 200, 201, 300, 301, 400,
        401, 500, 900, 901, 902, 1000, 1002, 1003, 1004, 1005, 1100, 1101, 1200, 1201, 1300,
        1301, 1302, 1400, 1401, 1501, 1502, 1503, 1800, 1801, 1802,
        1803, 1900, 1901, -1300, -1600, -1601, -1602, -9900, -9901, -10000, -10001, -10002
    };

    //Array of Address Doctor codes mapping to the "100, OK" audit code
    private static final int[] SUCCESS_CODES = {0, 100, 101, 102, 200, 201, 400, 401, 500, 1500, 1600, 1700, 1701};
    
    
    private void convertXMLFile(String fileName) {
        try {

            File file = new File(getClass().getClassLoader().getResource(fileName).getFile());
            JAXBContext jaxbContext = JAXBContext.newInstance(ca.bc.gov.moh.addrvalidation.entity.wsdl.Process.class);

            SOAPMessage message = MessageFactory.newInstance().createMessage(null, new FileInputStream(file));

            Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
            process = (ca.bc.gov.moh.addrvalidation.entity.wsdl.Process) jaxbUnmarshaller.unmarshal(message.getSOAPBody().extractContentAsDocument());

        } catch (JAXBException | SOAPException | IOException ex) {
            Logger.getLogger(AddressValidationWebServiceTest.class.getName()).log(Level.SEVERE, null, ex);
        }

    }
    
    @Test
    public void testStatusMapperConfiguration() throws IOException {
        StatusCodeValueMapper statusValueMapper = new StatusCodeValueMapper();

        String[] mappedStatus = statusValueMapper.mapAddressDoctorStatusCode(0);
        assertEquals("100",mappedStatus[0]);
        assertEquals("OK", mappedStatus[1]);
        
        mappedStatus = statusValueMapper.mapAddressDoctorStatusCode(1000);
        assertEquals("900",mappedStatus[0]);
        assertEquals("SERVER ERROR", mappedStatus[1]);
        
        //Testing missing mapping
        mappedStatus = statusValueMapper.mapAddressDoctorStatusCode(-1);
        assertEquals("-1", mappedStatus[0]);
        assertEquals("UNMAPPED ERROR CODE", mappedStatus[1]);

    }
    
    @Test
    public void testStatusCodeAuditing() throws Exception {
        //GIVEN
        convertXMLFile("TEST_ONE_FC_NOD.xml");

        ArrayOfAddress addressArray = process.getAddresses();
        ArrayOfEnrichment enrichmentArray = process.getEnrichments();
        String login = process.getLogin();
        String password = process.getPassword();
        Parameters parameters = process.getParameters();
        
        //Loop initializations
        AddressDoctorWrapper adWrapperMock = PowerMockito.mock(AddressDoctorWrapper.class);
        PowerMockito.whenNew(AddressDoctorWrapper.class).withNoArguments().thenReturn(adWrapperMock);
        
        WebServiceContext contextMock = PowerMockito.mock(WebServiceContext.class);
        MessageContext messageCtxMock = PowerMockito.mock(MessageContext.class);
        PowerMockito.when(contextMock.getMessageContext()).thenReturn(messageCtxMock);
        
        AddressValidationWebService avwsMock = PowerMockito.mock(AddressValidationWebService.class);
        PowerMockito.when(avwsMock.getContext()).thenReturn(contextMock);
        PowerMockito.doCallRealMethod().when(avwsMock).process(login, password, parameters, addressArray, enrichmentArray);
        
        Response response;
        
        //Loop through all Address Doctor error codes
        for (int i=0; i < ERROR_CODES.length; i++) {
            //WHEN
            PowerMockito.doThrow(new AddressValidationException("Message", new Throwable(), ERROR_CODES[i])).when(adWrapperMock).processAddress(Mockito.anyString());
            response = avwsMock.process(login, password, parameters, addressArray, enrichmentArray);
            
            //THEN
            Assert.assertNotNull(response);
            if (Arrays.binarySearch(SUCCESS_CODES, ERROR_CODES[i]) >= 0) {
                Assert.assertEquals(100, response.getStatusCode());
                Assert.assertEquals("OK", response.getStatusMessage());
                continue;
            }
            Assert.assertEquals(900, response.getStatusCode());
            Assert.assertEquals("SERVER ERROR", response.getStatusMessage());
        }
        
    }
}
