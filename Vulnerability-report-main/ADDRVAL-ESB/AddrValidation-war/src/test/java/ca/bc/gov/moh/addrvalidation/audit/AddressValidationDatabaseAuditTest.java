/*
 * *********************************************************************************************************************
 *  Copyright (c) 2018, Ministry of Health, BC.                                                 *
 *                                                                                                                     *
 *  All rights reserved.                                                                                               *
 *    This information contained herein may not be used in whole                                                       *
 *    or in part without the express written consent of the                                                            *
 *    Government of British Columbia, Canada.                                                                          *
 *                                                                                                                     *
 *  Revision Control Information                                                                                       *
 *  File:                $Id::                                                                                       $ *
 *  Date of Last Commit: $Date::                                                                                     $ *
 *  Revision Number:     $Rev::                                                                                      $ *
 *  Last Commit by:      $Author::                                                                                   $ *
 *                                                                                                                     *
 * *********************************************************************************************************************
 */
package ca.bc.gov.moh.addrvalidation.audit;

import ca.bc.gov.moh.esb.util.audit.entity.Transaction;
import ca.bc.gov.moh.esb.util.audit.entity.TransactionEvent;
import java.util.UUID;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

/**
 * NOTE: Jacoco does not pick up classes that are spied on. Therefore, code 
 * coverage will not be properly reflected for this class, as it uses a spy
 * on an AddressValidationDatabaseAudit object.
 * 
 * @author joshua.burton
 */
@RunWith(PowerMockRunner.class)
@PrepareForTest({AddressValidationDatabaseAudit.class})
@PowerMockIgnore({"javax.xml.*", "org.xml.*", "org.w3c.*"})
public class AddressValidationDatabaseAuditTest {
    
    @Captor
    private ArgumentCaptor<String> levelCaptor;
    @Captor
    private ArgumentCaptor<String> typeCaptor;
    @Captor
    private ArgumentCaptor<Exception> exceptionCaptor;
    
    private final AddressValidationProducer avp = PowerMockito.mock(AddressValidationProducer.class);
    private final AddressValidationDatabaseAudit avda = PowerMockito.spy(new AddressValidationDatabaseAudit(avp));
    
    @Before
    public void init() {
        MockitoAnnotations.initMocks(this);
        PowerMockito.doNothing().when(avp).sendJMSMessageToAddrValQueue(Mockito.any(Transaction.class));
        PowerMockito.doNothing().when(avp).sendJMSMessageToAddrValQueue(Mockito.any(TransactionEvent.class));
    }
    
    @Test
    public void testAuditComplete() throws Exception {
        
        // GIVEN
        Transaction transaction = new Transaction(UUID.randomUUID().toString());
        
        // WHEN
        avda.auditComplete(transaction);
        
        // THEN
        PowerMockito.verifyPrivate(avda).invoke("audit", Mockito.any(Transaction.class), levelCaptor.capture(), typeCaptor.capture(), exceptionCaptor.capture());
        Assert.assertEquals("INFO", levelCaptor.getValue());
        Assert.assertEquals("COMPLETE", typeCaptor.getValue());
        Assert.assertNull(exceptionCaptor.getValue());
    }
    
    @Test
    public void testAuditReceive() throws Exception {
        
        // GIVEN
        Transaction transaction = new Transaction(UUID.randomUUID().toString());
        
        // WHEN
        avda.auditReceive(transaction);
        
        // THEN
        PowerMockito.verifyPrivate(avda).invoke("audit", Mockito.any(Transaction.class), levelCaptor.capture(), typeCaptor.capture(), exceptionCaptor.capture());
        Assert.assertEquals("INFO", levelCaptor.getValue());
        Assert.assertEquals("RECEIVE", typeCaptor.getValue());
        Assert.assertNull(exceptionCaptor.getValue());
    }
    
    @Test
    public void testAuditError() throws Exception {
        
        // GIVEN
        Transaction transaction = new Transaction(UUID.randomUUID().toString());
        Exception e = new Exception("Error Message");
        
        // WHEN
        avda.auditError(transaction, e);
        
        // THEN
        PowerMockito.verifyPrivate(avda).invoke("audit", Mockito.any(Transaction.class), levelCaptor.capture(), typeCaptor.capture(), exceptionCaptor.capture());
        Assert.assertEquals("ERROR", levelCaptor.getValue());
        Assert.assertEquals("ERROR", typeCaptor.getValue());
        Assert.assertEquals("Error Message", exceptionCaptor.getValue().getMessage());
    }
}
