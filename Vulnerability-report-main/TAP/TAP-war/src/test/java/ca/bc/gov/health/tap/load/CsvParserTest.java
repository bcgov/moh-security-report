/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        CsvParserTest.java                             *
 * Date of Last Commit: $Date::                                              $ *
 * Revision Number:      $Rev::                                              $ *
 * Last Commit by:    $Author::                                              $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.tap.load;


import java.io.StringReader;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import static org.junit.Assert.*;
import org.junit.Test;

/**
 *
 * @author adebiyi.kuseju
 */
public class CsvParserTest {

    private DateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

    public CsvParserTest() {
    }

     /**
     * Test of parse method, of class CsvParser.
     */
    @Test
    public void testParse() throws Exception {

        String line1 = "2011-04-12,3321468,9870912731,\"LADYSMITH, BC\",V9G1S2,067,04,27999,DEASE LAKE,00";

        String[] line1Array = {"2011-04-12", "3321468", "9870912731", "LADYSMITH, BC", "V9G1S2", "067", "04", "27999", "DEASE LAKE", "00"};
        List<Object[]> expected = new ArrayList<Object[]>();
        List<Integer> dateColumns = new ArrayList<Integer>();
        dateColumns.add(0);

        expected.add(getResult(line1Array, dateColumns));

        CsvParser parser = new CsvParser(new StringReader(line1));
        List<Object[]> result = parser.parse(1);

        parser.done();
        assertTrue(areEqual(expected, result));

    }

    /**
     * Test of parse method with emphasis on trimming trailing spaces.
     */
    @Test
    public void testParseTrim() throws Exception {

        String line1 = "2011-04-12,3321468  ,9870912731,LADYSMITH BC             ,V9G1S2,067,04,27999,DEASE LAKE               ,00";
        String line2 = "2011-03-04,2971429  ,9842045181,KAMLOOPS BC              ,V1S1R8,024,01,00030,NANAIMO                  ,00";
        
        List<Object[]> expected = new ArrayList<Object[]>();
        List<Integer> dateColumns = new ArrayList<Integer>();
        dateColumns.add(0);

        String[] temp = line1.split(",");
        CsvParser.trim(temp);
        expected.add(getResult(temp, dateColumns));

        temp = line2.split(",");
        CsvParser.trim(temp);
        expected.add(getResult(temp, dateColumns));

        CsvParser parser = new CsvParser(new StringReader(line1 + "\n" + line2));                
        List<Object[]> result = parser.parse(2);

        parser.done();
        assertTrue(areEqual(expected, result));

    }


     /**
     * Test of parse method with emphasis on trimming trailing spaces.
     */
    @Test
    public void testParseDate() throws Exception {

        String line1 = "2011-04-12,3321468  ,9870912731,LADYSMITH BC             ,V9G1S2,067,04,27999,DEASE LAKE               ,00";

        CsvParser parser = new CsvParser(new StringReader(line1));
        List<Object[]> result = parser.parse();

        parser.done();
        assertEquals("2011-04-12", sdf.format(result.get(0)[0]));


    }

    /**
     * Test of parse method with emphasis on trimming trailing spaces.
     */
    @Test
    public void testGettingMoreThanTotalRecords() throws Exception {

        String line1 = "2011-04-12,3321468,9870912731,\"LADYSMITH, BC\",V9G1S2,067,04,27999,DEASE LAKE,00";

        CsvParser parser = new CsvParser(new StringReader(line1));
        List<Object[]> result = parser.parse(5);

        parser.done();
        assertEquals("Expected 1 but was " + result.size(), 1, result.size());

    }


    /**
     * Test of parse method with emphasis on reading records in batches.
     */
    @Test
    public void testReadingInBatches() throws Exception {

        String line1 = "2011-04-11,3321461,9870912731,LADYSMITH BC1,V9G1S2,067,04,27999,DEASE LAKE,00";
        String line2 = "2011-04-12,3321462,9870912731,LADYSMITH BC2,V9G1S2,067,04,27999,DEASE LAKE,00";
        String line3 = "2011-04-13,3321463,9870912731,LADYSMITH BC3,V9G1S2,067,04,27999,DEASE LAKE,00";
        String line4 = "2011-04-13,3321464,9870912731,LADYSMITH BC4,V9G1S2,067,04,27999,DEASE LAKE,00";
        String line5 = "2011-04-15,3321465,9870912731,LADYSMITH BC5,V9G1S2,067,04,27999,DEASE LAKE,00";

        List<Object[]> expected = new ArrayList<Object[]>();
        List<Integer> dateColumns = new ArrayList<Integer>();
        dateColumns.add(0);

        String[] temp = line1.split(",");
        expected.add(getResult(temp, dateColumns));

        temp = line2.split(",");
        expected.add(getResult(temp, dateColumns));

        temp = line3.split(",");
        expected.add(getResult(temp, dateColumns));

        temp = line4.split(",");
        expected.add(getResult(temp, dateColumns));

        temp = line5.split(",");
        expected.add(getResult(temp, dateColumns));

        CsvParser parser = new CsvParser(new StringReader(line1 + "\n" + line2 + "\n" + line3 + "\n" + line4 + "\n" + line5));
        List<Object[]> result = new ArrayList<Object[]>();
        List<Object[]> batch = null;

        while ((batch = parser.parse(2)).size() > 0) {
            result.addAll(batch);
        }

        parser.done();
        assertTrue(areEqual(expected, result));

    }


    /**
     * Test of parse method with emphasis on skipping x number of rows.
     */
    @Test
    public void testSkip() throws Exception {

        String line1 = "2011-04-12,3321468,9870912731,\"LADYSMITH, BC\",V9G1S2,067,04,27999,DEASE LAKE,00";

        CsvParser parser = new CsvParser(new StringReader(line1));
        List<Object[]> result = parser.parse(5, 1);

        parser.done();
        assertEquals("Expected 0 but was " + result.size(), 0, result.size());

    }


    /**
     * Test of parse method where an attempt is made to skip more than
     * the number of records available in a file
     */
    @Test
    public void testSkipMoreThanTotalRecords() throws Exception {

        String line1 = "2011-04-12,3321468,9870912731,\"LADYSMITH, BC\",V9G1S2,067,04,27999,DEASE LAKE,00";

        CsvParser parser = new CsvParser(new StringReader(line1));
        List<Object[]> result = parser.parse(5, 2);

        parser.done();
        assertEquals("Expected 0 but was " + result.size(), 0, result.size());

    }


     private Object[] getResult(String[] line, List<Integer> dateColumns) throws Exception {
        Object[] row = new Object[line.length];

        for (int i = 0; i < line.length; i++) {
            if (dateColumns.contains(i)) {
                row[i] = sdf.parse(line[i]);
                continue;
            }
            row[i] = line[i];
        }

        return row;
    }

     private boolean areEqual(List<Object[]> left, List<Object[]> right) {

         if (left.size() != right.size()) {
             return false;
         }

         Object[] temp = null;
         for (int i = 0; i < left.size(); i++) {
             temp = left.get(i);

             for (int j = 0; j < temp.length; j++) {
                if (!temp[j].equals(right.get(i)[j])) {
                    return false;
                }
            }
  
         }

         return true;
     }

}