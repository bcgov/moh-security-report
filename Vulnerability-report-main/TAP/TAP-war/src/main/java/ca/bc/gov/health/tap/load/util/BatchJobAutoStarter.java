/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        BatchJobAutoStarter.java                       *
 * Date of Last Commit: $Date::                                              $ *
 * Revision Number:      $Rev::                                              $ *
 * Last Commit by:    $Author::                                              $ *
 *                                                                             *
 *******************************************************************************/

package ca.bc.gov.health.tap.load.util;

import ca.bc.gov.health.tap.load.LoadProcess;
import ca.bc.gov.health.tap.load.SftpFileDownloader;
import ca.bc.gov.health.tap.load.config.ConfigException;
import ca.bc.gov.health.tap.load.config.ConfigLoaderFactory;
import ca.bc.gov.health.tap.load.config.IConfigLoader;
import ca.bc.gov.health.tap.session.LoadFacadeLocal;
import com.jcraft.jsch.JSchException;
import it.sauronsoftware.cron4j.Scheduler;
import it.sauronsoftware.cron4j.Task;
import jakarta.servlet.ServletContext;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author adebiyi.kuseju
 */
public class BatchJobAutoStarter implements Runnable {

    private static final String CLASSNAME = BatchJobAutoStarter.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    private final Scheduler scheduler;
    private final IConfigLoader configLoader;
    private Map<String, Object> config;
    private String scheduleId;
    private final String myScheduleId;
    private LoadFacadeLocal loadFacade;
    private final ServletContext ctx;
    private String mySchedule;
    private String batchJobScedule;
    private boolean createImmediateScheduler;

    public BatchJobAutoStarter(LoadFacadeLocal loadFacade, final ServletContext ctx) throws ConfigException, JSchException {

        this.configLoader = ConfigLoaderFactory.getConfigLoader(BatchConstants.JNDI);
        this.loadFacade = loadFacade;
        this.ctx = ctx;
        this.config = configLoader.getConfig(true);

        this.scheduler = new Scheduler();

        //Schedule this autoscheduler
        mySchedule = (String) config.get(BatchConstants.BATCH_JOB_AUTO_START_SCHEDULE);
        myScheduleId = scheduler.schedule(mySchedule, this);

        scheduler.start();

        runImmediateBatchJobIfNeeded();
    }

    @Override
    public void run() {

        try {
            LOG.log(Level.INFO, "Reloading configuration values");

            config = configLoader.getConfig(false);

            runImmediateBatchJobIfNeeded();

            boolean runJob = Boolean.parseBoolean((String) config.get(BatchConstants.RUN_BATCH_JOB));

            if (runJob) {
                startBatchJob();
            } else {
                stopBatchJob();
            }

        } catch (ConfigException | JSchException ex) {
            LOG.log(Level.SEVERE, ex.getMessage(), ex);
        } finally {

            String temp = (String) config.get(BatchConstants.BATCH_JOB_AUTO_START_SCHEDULE);

            if (!mySchedule.equals(temp)) {
                mySchedule = temp;
                scheduler.reschedule(myScheduleId, mySchedule);
                LOG.log(Level.INFO, String.format("Batch Job Auto Starter Schedule Changed to %s", mySchedule));

            }
        }

    }

    private void runImmediateBatchJobIfNeeded() throws JSchException {

        boolean temp = Boolean.parseBoolean((String) config.get(BatchConstants.CREATE_IMMEDIATE_SCHEDULE));

        if ((temp != createImmediateScheduler) && temp) {
            LOG.log(Level.INFO, "Starting immediate batch job");
            scheduler.launch((Task) setUpBatchJob());
        }

        createImmediateScheduler = temp;
    }

    private void stopBatchJob() {
        if (scheduleId != null) {
            LOG.log(Level.INFO, "Descheduling batch job");
            scheduler.deschedule(scheduleId);
            scheduleId = null;
        }
    }

    private void startBatchJob() throws JSchException {

        if (scheduleId == null) {
            batchJobScedule = (String) config.get(BatchConstants.SCHEDULE);
            LOG.log(Level.INFO, String.format("Scheduling batch job to run at %s", batchJobScedule));
            scheduleId = scheduler.schedule(batchJobScedule, (Runnable) setUpBatchJob());
        } else {

            String temp = (String) config.get(BatchConstants.SCHEDULE);

            // Reschedule batch job if a schedule string has been updated
            if (!batchJobScedule.equals(temp)) {
                batchJobScedule = temp;
                scheduler.reschedule(scheduleId, batchJobScedule);
                LOG.log(Level.INFO, String.format("Rescheduling batch job to run at %s", batchJobScedule));

            }
        }
    }

    private LoadProcess setUpBatchJob() throws JSchException {
        return new LoadProcess(loadFacade, new SftpFileDownloader(config), Integer.parseInt((String) config.get(BatchConstants.BATCH_SIZE)), ctx);
    }

    public void destroy() {

        if (scheduler != null && scheduler.isStarted()) {
            scheduler.stop();
            LOG.log(Level.INFO, "Batch Cronjob Destroyed");
            LOG.log(Level.INFO, "Batch Job Auto Starter Destroyed");
        }
    }
}
