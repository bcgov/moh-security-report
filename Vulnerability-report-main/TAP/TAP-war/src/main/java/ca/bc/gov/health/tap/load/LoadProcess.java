/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        LoadProcess.java                               *
 * Date of Last Commit: $Date::                                              $ *
 * Revision Number:      $Rev::                                              $ *
 * Last Commit by:    $Author::                                              $ *
 *                                                                             *
 *******************************************************************************/

package ca.bc.gov.health.tap.load;

import ca.bc.gov.health.tap.session.LoadFacadeLocal;
import ca.bc.gov.health.tap.web.Droplists;
import it.sauronsoftware.cron4j.Task;
import it.sauronsoftware.cron4j.TaskExecutionContext;
import jakarta.servlet.ServletContext;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Runnable class that checks for an updated file on an SFTP server and if found, processes the file and loads it into
 * the database.
 *
 * @author adebiyi.kuseju
 */
public class LoadProcess extends Task implements Runnable {

    private static final String CLASSNAME = LoadProcess.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    private FileDownloader sftpClient;
    private LoadFacadeLocal loadFacade;
    private int batchSize;
    private ServletContext ctx;

    /**
     * Creates a new LoadProcess
     *
     * @param loadFacade - Facade for inserting records
     * @param sftpClient - A FileDownloader implementation
     * @param batchSize
     * @param ctx
     */
    public LoadProcess(LoadFacadeLocal loadFacade, FileDownloader sftpClient, int batchSize, ServletContext ctx) {
        this.loadFacade = loadFacade;
        this.sftpClient = sftpClient;
        this.batchSize = batchSize;
        this.ctx = ctx;
    }

    /**
     * Runs the load process
     */
    @Override
    public void run() {
        try {

            long loaded = 0;
            LOG.log(Level.INFO, "Checking to see if new file is available....");
            File csv = sftpClient.fetch();

            if (csv != null) {
                LOG.log(Level.INFO, "Beginning load process...");
                String loadId = getLoadId();
                CsvParser parser = new CsvParser(new FileReader(csv));
                List<Object[]> rows = parser.parse(batchSize, 1);

                // This loop is necessary to ensure we continue read the entire file
                // because the CvsParser returns the records in the file in batches
                while (rows != null && !rows.isEmpty()) {
                    loadFacade.loadRows(loadId, rows, loaded);
                    loaded += rows.size();
                    rows = parser.parse(batchSize);
                }

                parser.done();
                sftpClient.archiveFile(csv);

                // After data load, droplists needs to be updated
                Droplists dpList = ((Droplists) ctx.getAttribute("Droplists"));

                if (dpList != null) {
                    dpList.update();
                }

                LOG.log(Level.INFO, String.format("Load process completed. %s records loaded", loaded));

                int duplicates = loadFacade.processDuplicates();
                loadFacade.createDuplicateCountEntry(loadId, duplicates);

                if (duplicates > 0) {
                    LOG.log(Level.WARNING, String.format("%s duplicate(s) found in new data loaded", duplicates));
                }

            } else {
                LOG.log(Level.INFO, "New file not available, nothing to process");
            }

        } catch (FileNotFoundException fne) {
            LOG.log(Level.WARNING, String.format("New file not available for processing. Server says : %s", fne.getMessage()));
        } catch (Exception e) {
            LOG.log(Level.WARNING, "Error processing file ", e);
        }
    }

    @Override
    public void execute(TaskExecutionContext tec) {
        run();
    }

    private String getLoadId() {
        Calendar cal = Calendar.getInstance();

        StringBuilder builder = new StringBuilder(String.valueOf(cal.get(Calendar.YEAR)));
        builder.append("-");

        builder.append(normalize(1 + cal.get(Calendar.MONTH)))
                .append("-")
                .append(normalize(cal.get(Calendar.DAY_OF_MONTH)))
                .append("-")
                .append(normalize(cal.get(Calendar.HOUR_OF_DAY)))
                .append("-")
                .append(normalize(cal.get(Calendar.MINUTE)))
                .append("-")
                .append(normalize(cal.get(Calendar.SECOND)));

        return builder.toString();
    }

    private String normalize(int val) {

        if (val < 10) {
            return "0" + val;
        } else {
            return String.valueOf(val);
        }
    }
}
