/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        Droplists.java                                 *
 * Date of Last Commit: $Date::                                              $ *
 * Revision Number:      $Rev::                                              $ *
 * Last Commit by:    $Author::                                              $ *
 *                                                                             *
 *******************************************************************************/

package ca.bc.gov.health.tap.web;

import ca.bc.gov.health.tap.session.ReportFacadeLocal;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.faces.model.SelectItem;
import jakarta.inject.Named;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 *
 * @author greg.perkins
 */
@ApplicationScoped
@Named("Droplists")
public class Droplists {

    @EJB
    private ReportFacadeLocal reportFacade;
    private List<SelectItem> dateRanges = new ArrayList<>();
    private List<SelectItem> fiscalDateRanges = new ArrayList<>();
    private Map<String, Object> healthAuthorities = new LinkedHashMap<>();
    private Map<String, Object> healthAuthoritiesNoAllOption = new LinkedHashMap<>();
    private Map<String, Object> specialistHAs = new LinkedHashMap<>();
    private Map<String, Object> lha = new LinkedHashMap<>();
    private Map<String, Object> countRanges = new LinkedHashMap<>();
    private String lastDataUpdate;
    private final String ALL = "ALL";
    private final Lock dataUpdateLock = new ReentrantLock();
    private final Lock dateRangeLock = new ReentrantLock();
    private final Lock fiscalDateRangeLock = new ReentrantLock();
    private final Lock healthAuthLock = new ReentrantLock();
    private final Lock specialistHALock = new ReentrantLock();
    private final Lock countRangeLock = new ReentrantLock();
    private final Lock lhaLock = new ReentrantLock();

    @PostConstruct
    public void init() {
        populateDateRanges();
        populateCountRanges();
        populateHealthAuthorities();
        populateSpecialistHAs();
        populateLHAs();
        updateLastDataDate();
    }

    public List<SelectItem> getDateRanges() {
        try {
            dateRangeLock.lock();
            if (dateRanges.isEmpty()) {
                populateDateRanges();
            }
        } finally {
            dateRangeLock.unlock();
        }

        return this.dateRanges;
    }

    public List<SelectItem> getFiscalDateRanges() {
        try {
            fiscalDateRangeLock.lock();
            if (fiscalDateRanges.isEmpty()) {
                getDateRanges();
                populateFiscalDateRanges();
            }
        } finally {
            fiscalDateRangeLock.unlock();
        }

        return this.fiscalDateRanges;
    }

    public Map<String, Object> getCountRanges() {

        try {
            countRangeLock.lock();
            if (countRanges.isEmpty()) {
                populateCountRanges();
            }
        } finally {
            countRangeLock.unlock();
        }

        return countRanges;
    }

    public Map<String, Object> getHealthAuthorities() {
        try {
            healthAuthLock.lock();
            if (healthAuthorities.isEmpty()) {
                populateHealthAuthorities();
            }
        } finally {
            healthAuthLock.unlock();
        }

        return healthAuthorities;
    }

    public Map<String, Object> getHealthAuthoritiesWithoutALLOption() {
        getHealthAuthorities();
        return healthAuthoritiesNoAllOption;
    }

    public Map<String, Object> getSpecialistHAs() {
        try {
            specialistHALock.lock();
            if (specialistHAs.isEmpty()) {
                populateSpecialistHAs();
            }
        } finally {
            specialistHALock.unlock();
        }

        return specialistHAs;
    }

    public Map<String, Object> getLHAs() {

        try {
            lhaLock.lock();
            if (lha.isEmpty()) {
                populateLHAs();
            }
        } finally {
            lhaLock.unlock();
        }

        return lha;
    }

    private void populateCountRanges() {
        populate(reportFacade.retrieveCountRanges(), countRanges);
    }

    private void populateDateRanges() {

        List<String> dates = reportFacade.reportDateRanges();
        dateRanges.clear();

        if (dates != null) {
            for (int i = dates.size() - 1; i >= 0; i--) { // Newest report date ranges to appear on top
                dateRanges.add(new SelectItem(dates.get(i), dates.get(i)));
            }
        }

        dateRanges.add(new SelectItem("No Selection"));
    }

    private void populateFiscalDateRanges() {

        fiscalDateRanges.clear();
        for (SelectItem t : dateRanges) {

            if (t.getLabel().startsWith("APRIL") && t.getLabel().contains("MARCH")) {
                fiscalDateRanges.add(new SelectItem(t.getLabel(), t.getLabel()));
            }
        }

        fiscalDateRanges.add(new SelectItem("No Selection"));

    }

    private void populate(Map<String, Object> source, Map<String, Object> destination) {
        destination.clear();
        destination.put(ALL, ALL);

        if (source != null) {
            destination.putAll(source);
        }
    }

    private void populateHealthAuthorities() {
        populate(reportFacade.retrieveHealthAuthorities(), healthAuthorities);

        // Remove all option in use for list where user must make selection
        healthAuthoritiesNoAllOption.putAll(healthAuthorities);
        healthAuthoritiesNoAllOption.remove(ALL);
    }

    private void populateSpecialistHAs() {
        populate(reportFacade.retrieveSpecialistHAs(), specialistHAs);
    }

    private void populateLHAs() {
        populate(reportFacade.retrieveLHAs(), lha);
    }

    public String getLastDataUpdate() {
        try {
            dataUpdateLock.lock();
            if (lastDataUpdate == null) {
                updateLastDataDate();
            }
        } finally {
            dataUpdateLock.unlock();
        }
        return lastDataUpdate;
    }

    private void updateLastDataDate() {
        lastDataUpdate = reportFacade.lastDataUpdate();
    }

    public void update() {

        try {
            dateRangeLock.lock();
            populateDateRanges();
        } finally {
            dateRangeLock.unlock();
        }

        try {
            fiscalDateRangeLock.lock();
            populateFiscalDateRanges();
        } finally {
            fiscalDateRangeLock.unlock();
        }

        try {
            countRangeLock.lock();
            populateCountRanges();
        } finally {
            countRangeLock.unlock();
        }

        try {
            healthAuthLock.lock();
            populateHealthAuthorities();
        } finally {
            healthAuthLock.unlock();
        }

        try {
            specialistHALock.lock();
            populateSpecialistHAs();
        } finally {
            specialistHALock.unlock();
        }

        try {
            lhaLock.lock();
            populateLHAs();
        } finally {
            lhaLock.unlock();
        }

        try {
            dataUpdateLock.lock();
            updateLastDataDate();
        } finally {
            dataUpdateLock.unlock();
        }

    }
}
