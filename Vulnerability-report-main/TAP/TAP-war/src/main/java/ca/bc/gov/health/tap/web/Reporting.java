/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        Reporting.java                                 *
 * Date of Last Commit: $Date::                                              $ *
 * Revision Number:      $Rev::                                              $ *
 * Last Commit by:    $Author::                                              $ *
 *                                                                             *
 *******************************************************************************/

/*
 * TravelAssistanceSummary.java
 *
 * Created on Feb 9, 2011, 3:31:13 PM
 */
package ca.bc.gov.health.tap.web;

import ca.bc.gov.health.tap.session.ReportFacadeLocal;
import ca.bc.gov.health.tap.session.valueObjects.FrequencyReportItem;
import ca.bc.gov.health.tap.session.valueObjects.FrequencyReportItemFlat;
import ca.bc.gov.health.tap.session.valueObjects.WhyReportItem;
import ca.bc.gov.health.tap.session.valueObjects.WhyReportItemFlat;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.RequestScoped;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

/**
 * <p>
 * Page bean that corresponds to a similarly named JSP page. This class contains
 * component definitions (and initialization code) for all components that you
 * have defined on this page, as well as lifecycle methods and event handlers
 * where you may add behavior to respond to incoming events.</p>
 *
 * @author greg.perkins
 */
@RequestScoped
@Named("Reporting")
public class Reporting {

    @EJB
    private ReportFacadeLocal reportFacade;
    private static final String ALL = "ALL";
    private List results;
    private Date startDate;
    private Date endDate;
    private Date customStartDate;
    private Date customEndDate;
    private String selectedDateRange;
    private String singlehealthAuthoritySelection;
    private String[] healthAuthorities;
    private String[] clientLHA;
    @Inject
    private Droplists dropList;
    private String[] datesForCurrentandLast3Fiscalyears = {"", "", "", ""};

    private int selectedMenu;

    /**
     * <p>
     * Construct a new Page bean instance.</p>
     */
    @PostConstruct
    public void init() {
        FacesContext fc = FacesContext.getCurrentInstance();
        Map<String, String> params = fc.getExternalContext().getRequestParameterMap();
        String selMenu = params.get("selMenu");
        if (selMenu == null) {
            this.selectedMenu = 1;
        } else {
            this.selectedMenu = Integer.parseInt(selMenu);
        }
    }


    public String viewSummaryReport() {
        if (isValid()) {
            parseDate();

            ArrayList<String[]> container = new ArrayList<>(1);
            container.add(healthAuthorities);

            String[][] args = new String[2][];
            args[0] = collateMultiSelectOptions(container, dropList.getHealthAuthorities());
            healthAuthorities = container.get(0);

            container.set(0, clientLHA);
            args[1] = collateMultiSelectOptions(container, dropList.getLHAs());
            clientLHA = container.get(0);

            results = reportFacade.travelAssistanceSummary(startDate, endDate, args[0], args[1]);
//            results = reportFacade.travelAssistanceSummary(startDate, endDate, collateHealthAuthorities());

        }

        return null;
    }

    public List printSummaryReport() {
        if (isValid()) {
            parseDate();

            ArrayList<String[]> container = new ArrayList<>(1);
            container.add(healthAuthorities);

            String[][] args = new String[2][];
            args[0] = collateMultiSelectOptions(container, dropList.getHealthAuthorities());
            healthAuthorities = container.get(0);

            container.set(0, clientLHA);
            args[1] = collateMultiSelectOptions(container, dropList.getLHAs());
            clientLHA = container.get(0);

            results = reportFacade.travelAssistanceSummary(startDate, endDate, args[0], args[1]);
//            results = reportFacade.travelAssistanceSummary(startDate, endDate, collateHealthAuthorities());
            return results;
        }

        return null;
    }

    public String viewFerryOnlyReport() {
        if (isValid()) {
            parseDate();

            ArrayList<String[]> container = new ArrayList<>(1);
            container.add(healthAuthorities);

            String[][] args = new String[2][];
            args[0] = collateMultiSelectOptions(container, dropList.getHealthAuthorities());
            healthAuthorities = container.get(0);

            container.set(0, clientLHA);
            args[1] = collateMultiSelectOptions(container, dropList.getLHAs());
            clientLHA = container.get(0);

            results = reportFacade.ferryOnlySummary(startDate, endDate, args[0], args[1]);
//            results = reportFacade.ferryOnlySummary(startDate, endDate, collateHealthAuthorities());
        }

        return null;
    }

    public List printFerryOnlyReport() {
        if (isValid()) {
            parseDate();

            ArrayList<String[]> container = new ArrayList<>(1);
            container.add(healthAuthorities);

            String[][] args = new String[2][];
            args[0] = collateMultiSelectOptions(container, dropList.getHealthAuthorities());
            healthAuthorities = container.get(0);

            container.set(0, clientLHA);
            args[1] = collateMultiSelectOptions(container, dropList.getLHAs());
            clientLHA = container.get(0);

            results = reportFacade.ferryOnlySummary(startDate, endDate, args[0], args[1]);
            return results;
        }

        return null;
    }

    public String viewFerryWhyReport() {
        if (isValid()) {
            parseDate();

            ArrayList<String[]> container = new ArrayList<>(1);
//            container.add(healthAuthorities);
            String[] singleHa = new String[1];
            singleHa[0] = singlehealthAuthoritySelection;
            container.add(singleHa);

            String[][] args = new String[2][];
            args[0] = collateMultiSelectOptions(container, dropList.getHealthAuthorities());
//            healthAuthorities = container.get(0);

            container.set(0, clientLHA);
            args[1] = collateMultiSelectOptions(container, dropList.getLHAs());
            clientLHA = container.get(0);

            results = reportFacade.whyReport(startDate, endDate, args[0], args[1]);

            whyToFlat();
        }

        return null;
    }

    public List printFerryWhyReport() {
        if (isValid()) {
            parseDate();

            ArrayList<String[]> container = new ArrayList<>(1);
//            container.add(healthAuthorities);
            String[] singleHa = new String[1];
            singleHa[0] = singlehealthAuthoritySelection;
            container.add(singleHa);

            String[][] args = new String[2][];
            args[0] = collateMultiSelectOptions(container, dropList.getHealthAuthorities());
//            healthAuthorities = container.get(0);

            container.set(0, clientLHA);
            args[1] = collateMultiSelectOptions(container, dropList.getLHAs());
            clientLHA = container.get(0);

            results = reportFacade.whyReport(startDate, endDate, args[0], args[1]);

            whyToFlat();
            return results;
        }

        return null;
    }

    private void whyToFlat() {
        List<WhyReportItem> oldResults = results;
        List<WhyReportItemFlat> newResults = new ArrayList<>();
        WhyReportItemFlat itemToAdd = new WhyReportItemFlat();
        for (int i = 0; i < oldResults.size(); i++) {
            for (int j = 0; j < oldResults.get(i).getChildren().size(); j++) {
                itemToAdd = transferToFlat(oldResults.get(i).getChildren().get(j), "1");
                newResults.add(itemToAdd);
                for (int k = 0; k < oldResults.get(i).getChildren().get(j).getChildren().size(); k++) {
                    for (int l = 0; l < oldResults.get(i).getChildren().get(j).getChildren().get(k).getChildren().size(); l++) {
                        itemToAdd = transferToFlat(oldResults.get(i).getChildren().get(j).getChildren().get(k).getChildren().get(l), "3");
                        newResults.add(itemToAdd);
                    }
                    itemToAdd = transferToFlat(oldResults.get(i).getChildren().get(j).getChildren().get(k), "2");
                    newResults.add(itemToAdd);
                }
            }
            itemToAdd = transferToFlat(oldResults.get(i), "0");
            newResults.add(itemToAdd);
        }
        results = newResults;
    }

    private WhyReportItemFlat transferToFlat(WhyReportItem base, String iLevel) {
        WhyReportItemFlat flatItem = new WhyReportItemFlat();
        if (base.getMiscellaneuous() != null) {
            flatItem.setMiscellaneuous(base.getMiscellaneuous());
        }
        if (base.getPatientLHA() != null) {
            flatItem.setPatientLHA(base.getPatientLHA());
        }
        if (base.getPremiumAssistance() != null) {
            flatItem.setPremiumAssistance(base.getPremiumAssistance());
        }
        if (base.getReferringPhysicianNumber() != null) {
            flatItem.setReferringPhysicianNumber(base.getReferringPhysicianNumber());
        }
        if (base.getSpecialistLHA() != null) {
            flatItem.setSpecialistLHA(base.getSpecialistLHA());
        }
        if (base.getSpecialistSpecialty() != null) {
            flatItem.setSpecialistSpecialty(base.getSpecialistSpecialty());
        }
        if (base.getNoOfConfirmations() != null) {
            flatItem.setNoOfConfirmations(base.getNoOfConfirmations());
        }
        if (base.getTotal() != null) {
            flatItem.setTotal(base.getTotal());
        }
        flatItem.setTypeItem(iLevel);
        return flatItem;
    }

    public String viewFrequencyReport() {
        if (isValid()) {
            parseDate();
            getStartEndYears();

            ArrayList<String[]> container = new ArrayList<>(1);
            container.add(healthAuthorities);

            String[][] args = new String[2][];
            args[0] = collateMultiSelectOptions(container, dropList.getHealthAuthorities());
            healthAuthorities = container.get(0);

            container.set(0, clientLHA);
            args[1] = collateMultiSelectOptions(container, dropList.getLHAs());
            clientLHA = container.get(0);

            results = reportFacade.frequencyReport(startDate, endDate, args[0], args[1]);

            frequencyToFlat();
        }

        return null;
    }

    public List printFrequencyReport() {
        if (isValid()) {
            parseDate();
            getStartEndYears();

            ArrayList<String[]> container = new ArrayList<>(1);
            container.add(healthAuthorities);

            String[][] args = new String[2][];
            args[0] = collateMultiSelectOptions(container, dropList.getHealthAuthorities());
            healthAuthorities = container.get(0);

            container.set(0, clientLHA);
            args[1] = collateMultiSelectOptions(container, dropList.getLHAs());
            clientLHA = container.get(0);

            results = reportFacade.frequencyReport(startDate, endDate, args[0], args[1]);

            frequencyToFlat();
            return results;
        }

        return null;
    }

    private void frequencyToFlat() {
        List<FrequencyReportItem> oldResults = results;
        List<FrequencyReportItemFlat> newResults = new ArrayList<>();
        FrequencyReportItemFlat itemToAdd = new FrequencyReportItemFlat();
        for (int i = 0; i < oldResults.size(); i++) {
            itemToAdd = transferFrequencyToFlat(oldResults.get(i), "0");
            newResults.add(itemToAdd);
            if (oldResults.get(i).getChildren() != null) {
                for (int j = 0; j < oldResults.get(i).getChildren().size(); j++) {
                    for (int k = 0; k < oldResults.get(i).getChildren().get(j).getChildren().size(); k++) {
                        itemToAdd = transferFrequencyToFlat(oldResults.get(i).getChildren().get(j).getChildren().get(k), "2");
                        newResults.add(itemToAdd);
                    }
                    itemToAdd = transferFrequencyToFlat(oldResults.get(i).getChildren().get(j), "1");
                    newResults.add(itemToAdd);
                }
            }
        }
        results = newResults;
    }

    private FrequencyReportItemFlat transferFrequencyToFlat(FrequencyReportItem base, String iLevel) {
        FrequencyReportItemFlat flatItem = new FrequencyReportItemFlat();
        if (base.getMiscellaneuous() != null) {
            flatItem.setMiscellaneuous(base.getMiscellaneuous());
        }
        if (base.getPatientLHA() != null) {
            flatItem.setPatientLHA(base.getPatientLHA());
        }
        if (base.getSpecialistNumber() != null) {
            flatItem.setSpecialistNumber(base.getSpecialistNumber());
        }
        if (base.getReferringPhysicianNumber() != null) {
            flatItem.setReferringPhysicianNumber(base.getReferringPhysicianNumber());
        }
        if (base.getSpecialistLHA() != null) {
            flatItem.setSpecialistLHA(base.getSpecialistLHA());
        }
        if (base.getSpecialistSpecialty() != null) {
            flatItem.setSpecialistSpecialty(base.getSpecialistSpecialty());
        }
        if (base.getCurrentFiscalCount() != null) {
            flatItem.setCurrentFiscalCount(base.getCurrentFiscalCount());
        }
        if (base.getCurrentFiscal_1Count() != null) {
            flatItem.setCurrentFiscal_1Count(base.getCurrentFiscal_1Count());
        }
        if (base.getCurrentFiscal_2Count() != null) {
            flatItem.setCurrentFiscal_2Count(base.getCurrentFiscal_2Count());
        }
        if (base.getCurrentFiscal_3Count() != null) {
            flatItem.setCurrentFiscal_3Count(base.getCurrentFiscal_3Count());
        }
        flatItem.setTypeItem(iLevel);
        return flatItem;
    }

    public String viewTravelForWhatServiceReport() {
        if (isValid()) {
            parseDate();
            getStartEndYears();

            ArrayList<String[]> container = new ArrayList<>(1);
            container.add(healthAuthorities);

            String[][] args = new String[2][];
            args[0] = collateMultiSelectOptions(container, dropList.getHealthAuthorities());
            healthAuthorities = container.get(0);

            container.set(0, clientLHA);
            args[1] = collateMultiSelectOptions(container, dropList.getLHAs());
            clientLHA = container.get(0);

            results = reportFacade.travelForWhatServiceReport(startDate, endDate, args[0], args[1]);
        }

        return null;
    }

    public List printTravelForWhatServiceReport() {
        if (isValid()) {
            parseDate();
            getStartEndYears();

            ArrayList<String[]> container = new ArrayList<>(1);
            container.add(healthAuthorities);

            String[][] args = new String[2][];
            args[0] = collateMultiSelectOptions(container, dropList.getHealthAuthorities());
            healthAuthorities = container.get(0);

            container.set(0, clientLHA);
            args[1] = collateMultiSelectOptions(container, dropList.getLHAs());
            clientLHA = container.get(0);

            results = reportFacade.travelForWhatServiceReport(startDate, endDate, args[0], args[1]);
            return results;
        }

        return null;
    }

    public String viewFromRsidenceReport() {
        if (isValid()) {
            parseDate();
            results = reportFacade.fromRsidenceSummary(startDate, endDate);
        }

        return null;
    }

    public List printFromRsidenceReport() {
        if (isValid()) {
            parseDate();
            results = reportFacade.fromRsidenceSummary(startDate, endDate);
            return results;
        }

        return null;
    }

    public String viewToDestinationReport() {
        if (isValid()) {
            parseDate();
            results = reportFacade.toDestinationSummary(startDate, endDate);
        }

        return null;
    }

    public List printToDestinationReport() {
        if (isValid()) {
            parseDate();
            results = reportFacade.toDestinationSummary(startDate, endDate);
            return results;
        }

        return null;
    }

    public String viewPerPatientReport() {
        if (isValid()) {
            parseDate();

            ArrayList<String[]> container = new ArrayList<>(1);
            container.add(healthAuthorities);

            String[][] args = new String[2][];
            args[0] = collateMultiSelectOptions(container, dropList.getHealthAuthorities());
            healthAuthorities = container.get(0);

            container.set(0, clientLHA);
            args[1] = collateMultiSelectOptions(container, dropList.getLHAs());
            clientLHA = container.get(0);

            results = reportFacade.perPatientSummary(startDate, endDate, args[0], args[1]);
//            results = reportFacade.perPatientSummary(startDate, endDate, collateHealthAuthorities());
        }

        return null;
    }

    public List printPerPatientReport() {
        if (isValid()) {
            parseDate();

            ArrayList<String[]> container = new ArrayList<>(1);
            container.add(healthAuthorities);

            String[][] args = new String[2][];
            args[0] = collateMultiSelectOptions(container, dropList.getHealthAuthorities());
            healthAuthorities = container.get(0);

            container.set(0, clientLHA);
            args[1] = collateMultiSelectOptions(container, dropList.getLHAs());
            clientLHA = container.get(0);

            results = reportFacade.perPatientSummary(startDate, endDate, args[0], args[1]);
            return results;
        }

        return null;
    }

    public List getResults() {
        return results;
    }

    public void setResults(List results) {
        this.results = results;
    }

    public Date getCustomEndDate() {
        return customEndDate;
    }

    public void setCustomEndDate(Date customEndDate) {
        this.customEndDate = customEndDate;
    }

    public Date getCustomStartDate() {
        return customStartDate;
    }

    public void setCustomStartDate(Date customStartDate) {
        this.customStartDate = customStartDate;
    }

    public String getSelectedDateRange() {
        return selectedDateRange;
    }

    public void setSelectedDateRange(String selectedDateRange) {
        this.selectedDateRange = selectedDateRange;
    }

    public String[] getHealthAuthorities() {
        return healthAuthorities;
    }

    public void setHealthAuthorities(String[] healthAuthorities) {
        this.healthAuthorities = healthAuthorities;
    }

    public String[] getClientLHA() {
        return clientLHA;
    }

    public void setClientLHA(String[] lha) {
        this.clientLHA = lha;
    }

    public Droplists getDropList() {
        return dropList;
    }

    public void setDropList(Droplists dropList) {
        this.dropList = dropList;
    }

    public String getDateRanges() {

        if (selectedDateRange != null && !selectedDateRange.equals("No Selection")) {
            return selectedDateRange;
        }

        if (customStartDate != null && customEndDate != null) {
            DateFormat df = new SimpleDateFormat("MMMM dd yyyy");
            df.format(customStartDate);

            return df.format(customStartDate) + " - " + df.format(customEndDate);
        }

        return null;

    }

    public String getSinglehealthAuthoritySelection() {
        return singlehealthAuthoritySelection;
    }

    public void setSinglehealthAuthoritySelection(String singlehealthAuthoritySelection) {
        this.singlehealthAuthoritySelection = singlehealthAuthoritySelection;
    }

    public String getClientHACriteria() {
        return mergeArray(healthAuthorities, dropList.getHealthAuthorities());
    }

    public String getClientLHACriteria() {
        return mergeArray(clientLHA, dropList.getLHAs());
    }

    public boolean isValid() {

        if (!selectedDateRange.equals("No Selection")) {

            if (customStartDate == null && customEndDate == null) {
                return true;
            } else {
                FacesContext.getCurrentInstance().addMessage("Only one date range entry is allowed", new FacesMessage("Only one date range entry is allowed"));
                return false;
            }
        } else {
            if (customStartDate == null && customEndDate == null) {
                FacesContext.getCurrentInstance().addMessage("Please select a date range entry", new FacesMessage("Please select a date range entry"));
                return false;

            } else if ((customStartDate == null && customEndDate != null) || (customStartDate != null && customEndDate == null)) {

                FacesContext.getCurrentInstance().addMessage("The two custom date entries are required", new FacesMessage("The two custom date entries are required"));
                return false;
            } else {

                if (customEndDate.before(customStartDate)) {
                    FacesContext.getCurrentInstance().addMessage("End date cannot be earlier than Start date", new FacesMessage("End date cannot be earlier than Start date"));
                    return false;
                }
            }
        }

        return true;
    }

    private String mergeArray(String[] selection, Map<String, Object> keyVals) {
        StringBuilder builder = new StringBuilder();

        if (selection != null) {

            if (!selection[0].equals("ALL")) {

                Map<String, Object> transposed = new LinkedHashMap<>();
                Entry<String, Object> temp;

                for (Iterator<Entry<String, Object>> itr = keyVals.entrySet().iterator(); itr.hasNext();) {
                    temp = itr.next();
                    transposed.put((String) temp.getValue(), temp.getKey());
                }

                for (String s : selection) {
                    builder.append(transposed.get(s)).append(", ");
                }

                builder.delete(builder.length() - 2, builder.length());
            } else {
                builder.append(selection[0]);
            }

            return builder.toString();
        }

        return null;

    }

    private void parseDate() {

        if (!selectedDateRange.equals("No Selection")) {

            int sepNdx = selectedDateRange.indexOf('-');
            DateFormat df = new SimpleDateFormat("MMMM dd yyyy");

            try {
                this.startDate = df.parse(selectedDateRange.substring(0, sepNdx).trim());
                this.endDate = df.parse(selectedDateRange.substring(sepNdx + 1).trim());

            } catch (ParseException pe) {
                pe.printStackTrace();
            }

        } else {
            startDate = customStartDate;
            endDate = customEndDate;
        }

    }

    private String[] collateHealthAuthorities() {

        String[] collated;

        if (healthAuthorities != null && healthAuthorities.length > 1) {
            // If "ALL" and any other specific health authorities are selected then we default to all
            int ndx = -1;
            for (int i = 0; i < healthAuthorities.length; i++) {

                if (healthAuthorities[i].equals("ALL")) {
                    ndx = i;
                    break;
                }
            }

            if (ndx > -1) {
                healthAuthorities = new String[1];
                healthAuthorities[0] = ALL;
            }
        }

        if (healthAuthorities == null || healthAuthorities.length == 0 || (healthAuthorities.length == 1 && healthAuthorities[0].equals(ALL))) {
            collated = new String[dropList.getHealthAuthorities().keySet().size() - 1];
            Object[] temp = dropList.getHealthAuthorities().values().toArray();

            for (int i = 1; i < temp.length; i++) {
                collated[i - 1] = (String) temp[i];
            }

            if (healthAuthorities == null || healthAuthorities.length == 0) {
                healthAuthorities = new String[1];
                healthAuthorities[0] = ALL;
            }
        } else {
            collated = healthAuthorities;
        }

        return collated;
    }

    private String[] collateMultiSelectOptions(List<String[]> container, Map<String, Object> possibleValues) {

        String[] collated;
        String[] selection = container.get(0);

        if (selection != null && selection.length > 1) {
            // If "ALL" and any other specific health authorities are selected then we default to ALL
            int ndx = -1;
            for (int i = 0; i < selection.length; i++) {

                if (selection[i].equals(ALL)) {
                    ndx = i;
                    break;
                }
            }

            if (ndx > -1) {
                selection = new String[1];
                selection[0] = ALL;
            }
        }

        if (selection == null || selection.length == 0 || (selection.length == 1 && selection[0].equals(ALL))) {
            collated = new String[possibleValues.keySet().size() - 1];
            Object[] temp = possibleValues.values().toArray();

            for (int i = 1; i < temp.length; i++) {
                collated[i - 1] = (String) temp[i];
            }

            if (selection == null || selection.length == 0) {
                selection = new String[1];
                selection[0] = ALL;
            }
        } else {
            collated = selection;
        }

        container.set(0, selection);

        return collated;
    }

    public String[] getFiscalDatesForLastThreeYears() {
        return datesForCurrentandLast3Fiscalyears;
    }

    private void getStartEndYears() {
        int[] currentfiscal = new int[2];

        Calendar c = Calendar.getInstance();

        c.setTime(startDate);
        currentfiscal[0] = c.get(Calendar.YEAR);

        c.setTime(endDate);
        currentfiscal[1] = c.get(Calendar.YEAR);

        if (currentfiscal != null) {
            datesForCurrentandLast3Fiscalyears[0] = currentfiscal[0] + "/" + currentfiscal[1];
            datesForCurrentandLast3Fiscalyears[1] = (currentfiscal[0] - 1) + "/" + (currentfiscal[1] - 1);
            datesForCurrentandLast3Fiscalyears[2] = (currentfiscal[0] - 2) + "/" + (currentfiscal[1] - 2);
            datesForCurrentandLast3Fiscalyears[3] = (currentfiscal[0] - 3) + "/" + (currentfiscal[1] - 3);
        }
    }

    public int getSelectedMenu() {
        return selectedMenu;
    }

    public void setSelectedMenu(int selectedMenu) {
        this.selectedMenu = selectedMenu;
    }

}
