/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.util.validation;

import ca.bc.gov.moh.hsa.util.audit.AuditableResponse;
import ca.bc.gov.moh.hsa.util.audit.AuditableResponseMessage;
import ca.bc.gov.moh.hsa.util.audit.ConstraintViolationAuditableResponseMessage;
import java.util.List;
import java.util.Set;
import javax.validation.ConstraintValidatorFactory;
import javax.validation.ConstraintViolation;
import javax.validation.MessageInterpolator;
import javax.validation.TraversableResolver;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.component.bean.validator.BeanValidationException;

/**
 *
 * @author conrad.gustafson
 */
public class AuditingBeanValidator implements Processor {

    private ValidatorFactory validatorFactory;
    private Validator validator;
    private Class<?> group;
    
    public void process(Exchange exchange) throws Exception {
        Object bean = exchange.getIn().getBody();
        Set<ConstraintViolation<Object>> constraintViolations = null;
        
        if (this.group != null) {
            constraintViolations = validator.validate(bean, group);
        } else {
            constraintViolations = validator.validate(bean);
        }
        
        if (!constraintViolations.isEmpty()) {
            if (bean instanceof AuditableResponse) {
                setEventMessages( (AuditableResponse) bean, constraintViolations);
            }
            
            throw new BeanValidationException(exchange, constraintViolations, exchange.getIn().getBody());
        }
    }
    
     public ValidatorFactory getValidatorFactory() {
        return validatorFactory;
    }

    public void setValidatorFactory(ValidatorFactory validatorFactory) {
        this.validatorFactory = validatorFactory;
        this.validator = this.validatorFactory.getValidator();
    }

    public Validator getValidator() {
        return validator;
    }
    
    public Class<?> getGroup() {
        return group;
    }
   
    public void setGroup(Class<?> group) {
        this.group = group;
    }

    public MessageInterpolator getMessageInterpolator() {
        return this.validatorFactory.getMessageInterpolator();
    }

    public TraversableResolver getTraversableResolver() {
        return this.validatorFactory.getTraversableResolver();
    }

    public ConstraintValidatorFactory getConstraintValidatorFactory() {
        return this.validatorFactory.getConstraintValidatorFactory();
    }

    private void setEventMessages(AuditableResponse auditableResponse, Set<ConstraintViolation<Object>> constraintViolations) {
        List<AuditableResponseMessage> auditableResponseMessageList = auditableResponse.getAuditableResponseMessageList();
        
        for (ConstraintViolation<Object> constraintViolation : constraintViolations) {
            AuditableResponseMessage message = new ConstraintViolationAuditableResponseMessage(constraintViolation);
            auditableResponseMessageList.add(message);
        }
    }
}
