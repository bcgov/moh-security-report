/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.util.audit;

import ca.bc.gov.moh.hsa.util.audit.entity.dao.TransactionDAO;
import java.util.Map;
import org.apache.camel.Endpoint;
import org.apache.camel.impl.DefaultComponent;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * Component for setting up audit endpoints. Can be configured with level and status parameters, which will be passed to the audit processor.
 * @author greg.perkins
 */
public class AuditComponent extends DefaultComponent {

    /**
     * DAO to pass to the processor for persistence
     */
    @Autowired
    private TransactionDAO dao;
    
    private static final String AUDIT_TYPE_INIT = "INITIALIZE";
    private static final String AUDIT_TYPE_MAPPED = "MAPPED";
       
    /**
     * Creates the endpoint for auditing
     * @param uri protocol
     * @param auditType auditType
     * @param map Map<String,Object> extra parameters (eventType, level, status, transactionType)
     * @return Endpoint
     * @throws Exception 
     */
    @Override
    protected Endpoint createEndpoint(String uri, String auditType, Map<String, Object> map) throws Exception {
        String level = null;
        String status = null;
        String transactionType = null;
        String eventType = null;
        
      
        
        if (auditType != null && auditType.equals(AUDIT_TYPE_INIT) ) {
            
            if (map.containsKey("transactionType")){
                transactionType = map.get("transactionType").toString();
            }
            
            AuditProcessorInit ap = new AuditProcessorInit(transactionType);
            return new AuditEndpoint(uri, ap);
        }
        else if (auditType != null && auditType.equals(AUDIT_TYPE_MAPPED) ) {
            
            if (map.containsKey("level")){
                level = map.get("level").toString();
            }
            if (map.containsKey("status")){
                status = map.get("status").toString();
            }        
            if (map.containsKey("transactionType")){
                transactionType = map.get("transactionType").toString();
            }
            if (map.containsKey("eventType")) {
                eventType = map.get("eventType").toString();
            }
            
            AuditProcessor ap = new AuditProcessor(eventType, level, status, transactionType);
            return new AuditEndpoint(uri, ap);
            
        } else {
            //This assumes that the audit information event/status/level/transactionType
            //has been stored in the header which is done in the case of applications 
            //calling the audit process with a wiretap
            AuditProcessor ap = new AuditProcessor();
            ap.setDao(dao);
            return new AuditEndpoint(uri, ap);
        }
        
        
        
    }
}

