/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.util.audit;

import java.io.File;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.camel.CamelContext;
import org.apache.camel.component.file.FileComponent;
import org.apache.camel.component.file.FileEndpoint;
import org.apache.camel.component.file.GenericFileConfiguration;
import org.apache.camel.component.file.GenericFileEndpoint;
import org.apache.camel.util.FileUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 *
 * @author conrad.gustafson
 */
@Component
public class FileDropComponent extends FileComponent {

    private String messageDropDirectory;
    private FileDropConfiguration fileDropConfiguration;
    public static final String TRANSACTION_MESSAGE_TYPE_HEADER_KEY = "messageType";
    public static final String TRANSACTION_MESSAGE_CONTEXT_AUDIT_ERROR = "AuditError";
    
    public FileDropComponent() {
        super();
    }

    public FileDropComponent(CamelContext context) {
        super(context);
    }

    protected GenericFileEndpoint<File> buildFileEndpoint(String uri, String messageContext, Map<String, Object> parameters) throws Exception {
        
        FileEndpoint fileEndpoint;
        
        String fileName = "//${header[" + TRANSACTION_MESSAGE_TYPE_HEADER_KEY + "]}//${header[" 
                        + TransactionIDAssigner.TRANSACTION_ID_HEADER_KEY + "]}-${date:now:yyyyMMddHHmmssSSS}-" + messageContext;
        parameters.put("fileName", fileName);
        parameters.put("autoCreate", "true");
        parameters.put("allowNullBody", true);
        
//        Logger.getLogger(FileDropComponent.class.getName()).log(Level.INFO, "messageDropDirectory from glassfish prop OK? : {0}", messageDropDirectory);

        File file = new File(messageDropDirectory);
        
        if (messageContext.equals(TRANSACTION_MESSAGE_CONTEXT_AUDIT_ERROR)) {
            fileEndpoint = new AuditErrorFileEndPoint(uri, this, messageContext);
        } else {
            fileEndpoint = new ConfigurableFileEndpoint(uri, this, messageContext);
        }
        
        GenericFileConfiguration config = new GenericFileConfiguration();
        config.setDirectory(FileUtil.isAbsolute(file) ? file.getAbsolutePath() : file.getPath());
        fileEndpoint.setConfiguration(config);
        fileEndpoint.setFile(file);

        return fileEndpoint;
    }

    public String getMessageDropDirectory() {
        return messageDropDirectory;
    }

    @Autowired
    public void setMessageDropDirectory(String messageDropDirectory) {
        this.messageDropDirectory = messageDropDirectory;
    }

    boolean isMessageToBeSaved(String transactionType, String messageContext) {
        if (fileDropConfiguration == null) {
            return false;
        }
        return fileDropConfiguration.isMessageToBeSaved(transactionType, messageContext);
    }

    @Autowired
    public void setFileDropConfiguration(FileDropConfiguration fileDropConfiguration) {
        this.fileDropConfiguration = fileDropConfiguration;
    }
    
    
}
