/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ca.bc.gov.moh.hsa.util.audit.entity.dao;

import ca.bc.gov.moh.hsa.util.audit.entity.AffectedParty;
import ca.bc.gov.moh.hsa.util.audit.entity.Transaction;
import ca.bc.gov.moh.hsa.util.audit.entity.TransactionEvent;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 * DAO for persisting transactions to the audit database
 * @author greg.perkins
 */
@Transactional(propagation = Propagation.REQUIRED)
@Component
public class TransactionDAO {
    
    @PersistenceContext
    private EntityManager em;
    
    /**
     * Inserts a new transaction
     * @param entity Transaction
     * @throws java.lang.Exception
     */
    public Transaction insert(Transaction entity) throws Exception{
        em.persist(entity);
        em.flush();
        return em.find(Transaction.class, entity.getTransactionId());
    }
    
    /**
     * Updates an existing transaction
     * @param entity Transaction
     * @throws java.lang.Exception
     */    
    public void update(Transaction entity) throws Exception{  
        
        if (entity.getOrganization() != null &&
                entity.getSourceSystem() != null &&
                entity.getUserId() != null) {
            
            em.merge(entity);
           
        } else {
            //This is to avoid overwriting the Source, Org, and UserId if those values are null
            //Rather than need to query the database for each audit event
            Query partialUpdate = em.createNamedQuery("Transaction.insertPartialObject");
            partialUpdate.setParameter("status", entity.getStatus());
            partialUpdate.setParameter("transactionId", entity.getTransactionId());
            partialUpdate.executeUpdate();
            
            for (TransactionEvent transactionEvent : entity.getTransactionEventList()) {
                em.persist(transactionEvent);
            }
            for (AffectedParty affectedParty : entity.getAffectedPartyList()) {
                em.persist(affectedParty);
            }
            
        }
            
    }
    
    public List<Transaction> getTransaction(String transactionId) {
        
        Query findTransaction = em.createNamedQuery("Transaction.findByTransactionId");
        findTransaction.setParameter("transactionId", transactionId);
        return findTransaction.getResultList();
    }

    public List<Transaction> findDuplicateCompleteTransaction(String messageId, String transactionId, String type) {
        TypedQuery<Transaction> duplicateTransactionQuery = em.createNamedQuery("Transaction.findDuplicate", Transaction.class);
        duplicateTransactionQuery.setParameter("transactionId", transactionId);
        duplicateTransactionQuery.setParameter("messageId", messageId);
        duplicateTransactionQuery.setParameter("type", type);
        return duplicateTransactionQuery.getResultList();
    }   
}
