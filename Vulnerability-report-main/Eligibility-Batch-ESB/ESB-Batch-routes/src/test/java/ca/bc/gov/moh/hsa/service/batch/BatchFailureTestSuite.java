/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.service.batch;

import org.apache.camel.CamelContext;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.test.spring.CamelSpringDelegatingTestContextLoader;
import org.apache.camel.test.spring.CamelSpringJUnit4ClassRunner;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;

/**
 * Test suite for catastrophic failures
 * Simulates exceptions being thrown by downstream webservices
 *
 * @author greg.perkins
 */
@RunWith(CamelSpringJUnit4ClassRunner.class)
@ContextConfiguration(
        loader = CamelSpringDelegatingTestContextLoader.class, locations = {"classpath:/environmentSpecific.xml"}
)
public class BatchFailureTestSuite extends AbstractBatchTest {

    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(BatchTestSuite.class);

    @Produce(uri = "direct:batch")
    protected ProducerTemplate testProducer;

    @Autowired
    protected CamelContext camelContext;

    @Before
    public  void init() throws Exception {
        camelContext.getRouteDefinitions().get(2).adviceWith(camelContext, new RouteBuilder() {
            @Override
            public void configure() {
                intercept().setHeader("CERT_ORG", constant("PHSA"));
            }
        });
    }

    /**
     * Tests that an exception thrown by the GetDemographics call will result in a proper error message
     *
     * @throws Exception
     */
    @Test
    @DirtiesContext
    public void testGetDemoException() throws Exception {

//        This code used to find the appropriate route - must be a better way!        
//        List<RouteDefinition> routes = camelContext.getRouteDefinitions();
//        for (RouteDefinition route : routes) {
//            System.out.println("ROUTE: "+route.getId()+" "+route.toString());
//        }
        camelContext.getRouteDefinitions().get(2).adviceWith(camelContext, new RouteBuilder() {
            @Override
            public void configure() {
                // intercept sending to mock:foo and do something else
                interceptSendToEndpoint("direct:getDemographicsRawSecure")
                        .skipSendToOriginalEndpoint()
                        .throwException(new Exception("Forced Fail"));
            }
        });

        String content = loadFileAndWrapInSoapMessage("validBatch.xml");
        Object result = testProducer.requestBody(content);
        Assert.assertNotNull(result);
        String response = result.toString();
        assert (assertUnhandledException(response));
    }

    /**
     * Tests that an exception thrown by the GetEligibility call will result in a proper error message
     *
     * @throws Exception
     */
    @Test
    @DirtiesContext
    public void testGetEligException() throws Exception {

//        This code used to find the appropriate route - must be a better way!        
//        List<RouteDefinition> routes = camelContext.getRouteDefinitions();
//        for (RouteDefinition route : routes) {
//            System.out.println("ROUTE: "+route.getId()+" "+route.toString());
//        }
        camelContext.getRouteDefinitions().get(2).adviceWith(camelContext, new RouteBuilder() {
            @Override
            public void configure() {
                // intercept sending to mock:foo and do something else
                interceptSendToEndpoint("direct:getDemographicsRawSecure")
                        .skipSendToOriginalEndpoint()
                        .throwException(new Exception("Forced Fail"));
            }
        });

        String content = loadFileAndWrapInSoapMessage("validBatch.xml");
        Object result = testProducer.requestBody(content);
        Assert.assertNotNull(result);
        String response = result.toString();
        assert (assertUnhandledException(response));
    }

}
