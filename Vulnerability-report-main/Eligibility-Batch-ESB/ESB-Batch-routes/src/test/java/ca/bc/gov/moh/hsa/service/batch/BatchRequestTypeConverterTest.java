/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ca.bc.gov.moh.hsa.service.batch;

import ca.bc.gov.moh.hsa.esb.service.batch.BatchRequestTypeConverter;
import ca.bc.gov.moh.hsa.esb.service.batch.dto.BatchRequestDTO;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.junit.After;
import org.junit.AfterClass;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.xml.sax.SAXException;

/**
 *
 * @author conrad.gustafson
 */
public class BatchRequestTypeConverterTest {
    
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(BatchRequestTypeConverterTest.class);
    
    public BatchRequestTypeConverterTest() {
    }
    
    @BeforeClass
    public static void setUpClass() {
    }
    
    @AfterClass
    public static void tearDownClass() {
    }
    
    @Before
    public void setUp() {
    }
    
    @After
    public void tearDown() {
    }

    /**
     * Test of createBatchRequestDTOFromDocument method, of class BatchRequestTypeConverter.
     */
    @Test
    public void testCreateBatchRequestDTOFromDocument() throws SAXException, IOException, ParserConfigurationException, TransformerException {
        System.out.println("createBatchRequestDTOFromDocument");
        final String validBatchFile = "validbatch.xml";
        final String phsaSampleFile = "samples/EMPI_Query_201406251817123.xml";
        
        InputStream stream = getClass().getClassLoader().getResourceAsStream(phsaSampleFile);
	DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
	DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
	Document document = dBuilder.parse(stream);
        
        logger.info(documentToString(document));
        
        BatchRequestDTO result = BatchRequestTypeConverter.createBatchRequestDTOFromDocument(document);
        assert(2 == result.getIndividualMessages().size());
        assertNotNull(result.getModeCode());
        assert("I".equals(result.getModeCode()));
    }
 
    private String documentToString(Document document) throws TransformerException {
        DOMSource domSource = new DOMSource(document);
        StringWriter writer = new StringWriter();
        StreamResult result = new StreamResult(writer);
        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer transformer = tf.newTransformer();
        transformer.transform(domSource, result);
        String asString = writer.toString();
        return asString;
    }
    
}
