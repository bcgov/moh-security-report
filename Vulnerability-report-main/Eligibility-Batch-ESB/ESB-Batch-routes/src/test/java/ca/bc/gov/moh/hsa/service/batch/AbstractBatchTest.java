/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.service.batch;

import java.io.IOException;
import java.io.StringReader;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.commons.io.IOUtils;
import org.xml.sax.InputSource;

/**
 * Abstract base class for Batch unit testing classes
 *
 * @author greg.perkins
 */
public abstract class AbstractBatchTest {

    /*
     * XPath objects for running against XML documents
     */
    private XPathFactory xpathFactory = XPathFactory.newInstance();
    protected XPath xpath = xpathFactory.newXPath();


    /* UTILITY METHODS */
    
    /**
     * Loads a sample message from a file, and wraps it in a SOAP message for sending to the WS endpoints
     *
     * @param filename String - The file to load
     * @return String - The file contents, wrapped with SOAP elements
     * @throws IOException
     */
    protected String loadFileAndWrapInSoapMessage(String filename) throws IOException {
        String content = IOUtils.toString(this.getClass().getClassLoader().getResourceAsStream(filename), "UTF-8");
        content = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Header></soap:Header><soap:Body>" + content + "</soap:Body></soap:Envelope>";
        return content;
    }

    /**
     * Checks that the message contains a schema validation error message in the appropriate location
     *
     * @param msg String - The response message to check
     * @return boolean - True if the expected message was found
     */
    protected boolean assertSchemaError(String msg) {
        try {
            InputSource source = new InputSource(new StringReader(msg));
            String result = xpath.evaluate("//*[local-name() = 'acknowledgement'][@typeCode='AE']/*[local-name() = 'acknowledgementDetail']", source);
            return (result.contains("SchemaValidationException"));
        } catch (XPathExpressionException ex) {
            return false;
        }
    }

    /**
     * Checks that the message contains a success message in the get demo response location
     *
     * @param msg String - The response message to check
     * @return boolean - True if the expected message was found
     */
    protected boolean assertSuccessfulGetDemo(String msg) {
        try {
            InputSource source = new InputSource(new StringReader(msg));
            String result = xpath.evaluate("//*[local-name() = 'HCIM_IN_GetDemographicsResponse']//*[local-name() = 'queryResponseCode']/@code", source);
            return (result.contains("The get demographics query completed successfully."));
        } catch (XPathExpressionException ex) {
            return false;
        }
    }

    /**
     * Checks that the message contains a success message in the get eligibility location
     *
     * @param msg String - The response message to check
     * @return boolean - True if the expected message was found
     */
    protected boolean assertSuccessfulGetElig(String msg) {
        try {
            InputSource source = new InputSource(new StringReader(msg));
            String result = xpath.evaluate("//*[local-name() = 'HCIM_IN_GetDemographicsResponse']//*[local-name() = 'queryResponseCode']/@code", source);
            return (result.contains("The get demographics query completed successfully."));
        } catch (XPathExpressionException ex) {
            return false;
        }
    }

    /**
     * Checks that the message contains an error message in the get demo location
     *
     * @param msg String - The response message to check
     * @return boolean - True if the expected message was found
     */
    protected boolean assertErrorGetDemo(String msg) {
        try {
            InputSource source = new InputSource(new StringReader(msg));
            String result = xpath.evaluate("//*[local-name() = 'HCIM_IN_GetDemographicsResponse']//*[local-name() = 'queryResponseCode']/@code", source);
            return (!result.contains("The get demographics query completed successfully."));
        } catch (XPathExpressionException ex) {
            return false;
        }
    }

    /**
     * Checks that the message contains an error message in the get eligibility location
     *
     * @param msg String - The response message to check
     * @return boolean - True if the expected message was found
     */
    protected boolean assertErrorGetElig(String msg) {
        try {
            InputSource source = new InputSource(new StringReader(msg));
            String result = xpath.evaluate("//*[local-name() = 'QUCR_IN210101BC']//*[local-name() = 'queryResponseCode']/@code", source);
            return (result.contains("AE"));
        } catch (XPathExpressionException ex) {
            return false;
        }
    }

    /**
     * Checks that the message contains a business validation (wrong number of messages) error message in the batch
     * location
     *
     * @param msg String - The response message to check
     * @return boolean - True if the expected message was found
     */
    protected boolean assertBusinessErrorWrongNumber(String msg) {
        try {
            InputSource source = new InputSource(new StringReader(msg));
            String result = xpath.evaluate("//*[local-name() = 'acknowledgement'][@typeCode='AE']/*[local-name() = 'acknowledgementDetail']", source);
            return (result.contains("WRONG_NUMBER_OF_MESSAGES"));
        } catch (XPathExpressionException ex) {
            return false;
        }
    }

    /**
     * Checks that the message contains a business validation (wrong type of messages) error message in the batch
     * location
     *
     * @param msg String - The response message to check
     * @return boolean - True if the expected message was found
     */
    protected boolean assertBusinessErrorWrongType(String msg) {
        try {
            InputSource source = new InputSource(new StringReader(msg));
            String result = xpath.evaluate("//*[local-name() = 'acknowledgement'][@typeCode='AE']/*[local-name() = 'acknowledgementDetail']", source);
            return (result.contains("WRONG_TYPES_OF_MESSAGES"));
        } catch (XPathExpressionException ex) {
            return false;
        }
    }

    /**
     * Checks that the message contains a business validation (wrong mode) error message in the batch location
     *
     * @param msg String - The response message to check
     * @return boolean - True if the expected message was found
     */
    protected boolean assertBusinessErrorWrongMode(String msg) {
        try {
            InputSource source = new InputSource(new StringReader(msg));
            String result = xpath.evaluate("//*[local-name() = 'acknowledgement'][@typeCode='AE']/*[local-name() = 'acknowledgementDetail']", source);
            return (result.contains("MODE_CODE_NOT_SUPPORTED"));
        } catch (XPathExpressionException ex) {
            return false;
        }
    }
      
    
    /**
     * Checks that the message contains a business validation (wrong cert) error message in the batch location
     *
     * @param msg String - The response message to check
     * @return boolean - True if the expected message was found
     */
    protected boolean assertBusinessErrorCertMismatch(String msg) {
        try {
            InputSource source = new InputSource(new StringReader(msg));
            String result = xpath.evaluate("//*[local-name() = 'acknowledgement'][@typeCode='AE']/*[local-name() = 'acknowledgementDetail']", source);
            return (result.contains("ORG_CERT_MISMATCH"));
        } catch (XPathExpressionException ex) {
            return false;
        }
    }     

    /**
     * Checks that the message contains a generic error message in the batch location
     *
     * @param msg String - The response message to check
     * @return boolean - True if the expected message was found
     */
    protected boolean assertUnhandledException(String msg) {
        try {
            InputSource source = new InputSource(new StringReader(msg));
            String result = xpath.evaluate("//*[local-name() = 'acknowledgement'][@typeCode='AE']/*[local-name() = 'acknowledgementDetail']", source);
            return (result != null && !"".equals(result));
        } catch (XPathExpressionException ex) {
            return false;
        }
    }
}
