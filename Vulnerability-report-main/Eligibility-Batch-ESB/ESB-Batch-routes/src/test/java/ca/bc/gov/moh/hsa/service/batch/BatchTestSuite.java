/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.service.batch;

import java.io.IOException;
import org.apache.camel.CamelContext;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.test.spring.CamelSpringDelegatingTestContextLoader;
import org.apache.camel.test.spring.CamelSpringJUnit4ClassRunner;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;

/**
 *
 * @author greg.perkins
 */
@RunWith(CamelSpringJUnit4ClassRunner.class)
@ContextConfiguration(
        loader = CamelSpringDelegatingTestContextLoader.class, locations = {"classpath:/simpleTestApplicationContext.xml","classpath:/batchEnvironmentSpecific.xml"}
)
public class BatchTestSuite extends AbstractBatchTest {

    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(BatchTestSuite.class);

    @Produce(uri = "direct:batch")
    protected ProducerTemplate testProducer;

    @Autowired
    protected CamelContext camelContext;

    @Before
    public void init() throws Exception {
        camelContext.getRouteDefinitions().get(2).adviceWith(camelContext, new RouteBuilder() {
            @Override
            public void configure() {
                intercept().setHeader("CERT_ORG", constant("PHSA"));
            }
        });
    }

    @Test
    public void testValidBatch() throws InterruptedException, IOException {
        String content = loadFileAndWrapInSoapMessage("validBatch.xml");
        Object result = testProducer.requestBody(content);
        Assert.assertNotNull(result);
        String response = result.toString();
        assert (assertSuccessfulGetDemo(response));
        assert (assertSuccessfulGetElig(response));
    }

    @Test
    public void testInvalidBatch() throws InterruptedException, IOException {
        String content = loadFileAndWrapInSoapMessage("batchInvalid.xml");
        Object result = testProducer.requestBody(content);
        Assert.assertNotNull(result);
        String response = result.toString();
        assert (assertSchemaError(response));
    }

    @Test
    public void testInvalidGetDemo() throws InterruptedException, IOException {
        String content = loadFileAndWrapInSoapMessage("batchInvalidGetDemo.xml");
        Object result = testProducer.requestBody(content);
        Assert.assertNotNull(result);
        String response = result.toString();
        assert (assertErrorGetDemo(response));
        //assert (assertSuccessfulGetElig(response));
    }

    @Test
    public void testInvalidEligibility() throws InterruptedException, IOException {
        String content = loadFileAndWrapInSoapMessage("batchInvalidGetEligibility.xml");
        Object result = testProducer.requestBody(content);
        Assert.assertNotNull(result);
        String response = result.toString();
        assert (assertErrorGetElig(response));
        assert (assertSuccessfulGetDemo(response));
    }

    @Test
    public void testMissingGetDemo() throws InterruptedException, IOException {
        String content = loadFileAndWrapInSoapMessage("batchMissingGetDemo.xml");
        Object result = testProducer.requestBody(content);
        Assert.assertNotNull(result);
        String response = result.toString();
        assert (assertBusinessErrorWrongNumber(response));
    }

    @Test
    public void testDoubleGetDemo() throws InterruptedException, IOException {
        String content = loadFileAndWrapInSoapMessage("batchDoubleGetDemo.xml");
        Object result = testProducer.requestBody(content);
        Assert.assertNotNull(result);
        String response = result.toString();
        assert (assertBusinessErrorWrongType(response));
    }

    @Test
    public void testDoubleGetDemoSingleGetEligibility() throws InterruptedException, IOException {
        String content = loadFileAndWrapInSoapMessage("batchDoubleGetDemoSingleEligibility.xml");
        Object result = testProducer.requestBody(content);
        Assert.assertNotNull(result);
        String response = result.toString();
        assert (assertBusinessErrorWrongNumber(response));
    }

    @Test
    public void testMissingEligibility() throws InterruptedException, IOException {
        String content = loadFileAndWrapInSoapMessage("batchMissingEligibility.xml");
        Object result = testProducer.requestBody(content);
        Assert.assertNotNull(result);
        String response = result.toString();
        assert (assertBusinessErrorWrongNumber(response));
    }

    @Test
    public void testDoubleEligibility() throws InterruptedException, IOException {
        String content = loadFileAndWrapInSoapMessage("batchDoubleEligibility.xml");
        Object result = testProducer.requestBody(content);
        Assert.assertNotNull(result);
        String response = result.toString();
        assert (assertBusinessErrorWrongType(response));
    }

    @Test
    public void testDoubleEligibilitySingleGetDemo() throws InterruptedException, IOException {
        String content = loadFileAndWrapInSoapMessage("batchDoubleEligibilitySingleGetDemo.xml");
        Object result = testProducer.requestBody(content);
        Assert.assertNotNull(result);
        String response = result.toString();
        assert (assertBusinessErrorWrongNumber(response));
    }

    @Test
    public void testInvalidMode() throws InterruptedException, IOException {
        String content = loadFileAndWrapInSoapMessage("batchInvalidMode.xml");
        Object result = testProducer.requestBody(content);
        Assert.assertNotNull(result);
        String response = result.toString();
        assert (assertBusinessErrorWrongMode(response));
    }

}
