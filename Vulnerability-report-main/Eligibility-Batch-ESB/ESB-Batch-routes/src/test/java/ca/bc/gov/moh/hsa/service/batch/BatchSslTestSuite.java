/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.service.batch;

import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.test.spring.CamelSpringDelegatingTestContextLoader;
import org.apache.camel.test.spring.CamelSpringJUnit4ClassRunner;
import org.apache.camel.util.jsse.SSLContextParameters;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;

/**
 * Test suite for SSL failures Simulates ssl client cert issues
 *
 * @author greg.perkins
 */
@RunWith(CamelSpringJUnit4ClassRunner.class)
@ContextConfiguration(
        loader = CamelSpringDelegatingTestContextLoader.class, locations = {"classpath:/environmentSpecific.xml"}
)
public class BatchSslTestSuite extends AbstractBatchTest {

    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(BatchTestSuite.class);

    @Produce(uri = "direct:batch")
    protected ProducerTemplate testProducer;

    @Autowired
    protected CamelContext camelContext;


    
    @Test
    @DirtiesContext
    public void testUseCert() throws Exception {
        camelContext.getRouteDefinitions().get(0).adviceWith(camelContext, new RouteBuilder() {
            @Override
            public void configure() {
                intercept().setHeader("CERT_ORG", constant("PHSA"));
            }
        });

        String content = loadFileAndWrapInSoapMessage("validBatch.xml");
        Object result = testProducer.requestBody(content);
        Assert.assertNotNull(result);
        String response = result.toString();
        assert (super.assertSuccessfulGetDemo(response));
        assert (super.assertSuccessfulGetElig(response));
    }
    
    @Test
    @DirtiesContext
    public void testUseMissingOrg() throws Exception {
        camelContext.getRouteDefinitions().get(0).adviceWith(camelContext, new RouteBuilder() {
            @Override
            public void configure() {
                intercept().setHeader("CERT_ORG", constant("FOO"));
            }
        });

        String content = loadFileAndWrapInSoapMessage("validBatch.xml");
        Object result = testProducer.requestBody(content);
        Assert.assertNotNull(result);
        String response = result.toString();
        assert (super.assertUnhandledException(response));
    }     
    
    @Test
    @DirtiesContext
    public void testUseWrongCert() throws Exception {
        camelContext.getRouteDefinitions().get(0).adviceWith(camelContext, new RouteBuilder() {
            @Override
            public void configure() {
                intercept().setHeader("CERT_ORG", constant("VCHA"));
            }
        });

        String content = loadFileAndWrapInSoapMessage("validBatch.xml");
        Object result = testProducer.requestBody(content);
        Assert.assertNotNull(result);
        String response = result.toString();
        assert (super.assertUnhandledException(response));
    }    
 
}
