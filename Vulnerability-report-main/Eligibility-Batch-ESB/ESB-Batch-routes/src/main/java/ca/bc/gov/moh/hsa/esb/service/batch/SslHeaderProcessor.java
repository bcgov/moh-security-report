/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.esb.service.batch;

import ca.bc.gov.moh.hsa.esb.service.batch.HeaderConstants;
import java.security.cert.X509Certificate;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import org.apache.camel.Exchange;
import org.apache.camel.Message;
import org.apache.camel.Processor;
import org.apache.camel.component.cxf.common.message.CxfConstants;
import org.apache.commons.codec.digest.DigestUtils;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;

/**
 * Processor to pull the CN from the X509 client cert, and place it in a header for later retrieval. Can only be used
 * for cxf endpoints.
 *
 * @author greg.perkins
 */
@Component
public class SslHeaderProcessor implements Processor {

    @Value("#{certificateMapping}")
    private Map<String,String> certificateMapping;
    
    @Override
    public void process(Exchange exchange) throws Exception {
        Message in = exchange.getIn();
        org.apache.cxf.message.Message cxfMessage = in.getHeader(CxfConstants.CAMEL_CXF_MESSAGE, org.apache.cxf.message.Message.class);
        if (cxfMessage != null) {
            HttpServletRequest request = (HttpServletRequest) cxfMessage.get("HTTP.REQUEST");
            if (request.isSecure()) {
                X509Certificate cert = ((X509Certificate[]) request.getAttribute("javax.servlet.request.X509Certificate"))[0];
                String thumbprint = DigestUtils.sha1Hex(cert.getEncoded());
                String certOrg = certificateMapping.get(thumbprint);
                System.out.println("Setting "+HeaderConstants.ORG_KEY+" to: "+certOrg);
                exchange.getIn().setHeader(HeaderConstants.ORG_KEY, certOrg);
            }
        }
    }

    
    
    /**
     * Extract the CN from the X509 Certificate
     * @param cert X509Certificate
     * @return String - the CN from the certificate
     */
    private String extractCN(X509Certificate cert) {
        String name = cert.getSubjectX500Principal().getName();
        String[] parts = name.split(",");
        for (String part : parts) {
            String[] kv = part.split("=");
            if (kv[0].equals("CN")) {
                String orgName = kv[1];
                int idx = orgName.lastIndexOf("_");
                orgName = orgName.substring(0, idx);
                return orgName;
            }
        }
        return null;
    }

}
