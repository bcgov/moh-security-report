/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.esb.service.batch;

import ca.bc.gov.moh.hsa.esb.service.batch.dto.IndividualBatchRequestDTO;
import ca.bc.gov.moh.hsa.util.dto.MessageDTO;
import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.namespace.NamespaceContext;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;
import org.apache.camel.Converter;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 * Converter to go between Individual Request / Response DTOs, and their XML representations
 *
 * @author greg.perkins
 */
@Converter
public class IndividualRequestConverter {

    static final String GET_DEMOGRAPHICS_ELEMENT_NAME = "HCIM_IN_GetDemographicsResponse";
    static final String GET_ELIGIBILITY_ELEMENT_NAME = "QUCR_IN210101BC";
    static final String MODE_CODE_ELEMENT_NAME = "responseModeCode";
    static final String MODE_CODE_ATTRIBUTE_NAME = "code";
    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(IndividualRequestConverter.class);

    /**
     * Create an XML StreamSource out of an IndividualBatchRequestDTO
     *
     * @param dto IndividualBatchRequestDTO - Input value to convert from
     * @return StreamSource - Converted value
     */
    @Converter
    public StreamSource createSourceFromDto(IndividualBatchRequestDTO dto) {
        StringReader reader = new StringReader(dto.getMessageBody());
        return new javax.xml.transform.stream.StreamSource(reader);
    }

    /**
     * Create an XML Document out of an IndividualBatchRequestDTO
     *
     * @param dto IndividualBatchRequestDTO - Input value to convert from
     * @return StreamSource - Converted value
     */
    @Converter
    public Document createDocumentFromDto(IndividualBatchRequestDTO dto) throws SAXException, IOException, ParserConfigurationException {

        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
        return docBuilder.parse(new InputSource(new StringReader(dto.getMessageBody())));

    }

    /**
     * Creates a MessageDTO out of an XML DOMSource
     *
     * @param source DOMSource - Input value to convert from
     * @return MessageDTO - Converted Value
     * @throws TransformerConfigurationException
     * @throws TransformerException
     */
    @Converter
    public MessageDTO createFromSource(DOMSource source) throws TransformerConfigurationException, TransformerException {
        MessageDTO dto = new MessageDTO();
        extractMessageType(source, dto);

        StringWriter sw = new StringWriter();
        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer transformer = tf.newTransformer();
        transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
        transformer.setOutputProperty(OutputKeys.METHOD, "xml");
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
        transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
        transformer.transform(source, new StreamResult(sw));
        dto.setMessageBody(sw.toString());
        return dto;

    }

    /**
     * Determines the message type of the document, and sets it in the dto
     *
     * @param document - Document to search
     * @param dto - MessageDTO to set the value in
     */
    private static void extractMessageType(DOMSource document, MessageDTO dto) {

        XPath xPath = XPathFactory.newInstance().newXPath();

        NamespaceContext nsc = new BatchNamespaceContext();
        xPath.setNamespaceContext(nsc);
        try {
            NodeList nodes = (NodeList) xPath.evaluate("//urn:HCIM_IN_GetDemographicsResponse | //urn:QUCR_IN210101BC", document, XPathConstants.NODESET);
            for (int i = 0; i < nodes.getLength(); ++i) {
                Element element = (Element) nodes.item(i);
                handleIfIndividualRequest(element, dto);
            }
        } catch (XPathExpressionException ex) {
            Logger.getLogger(IndividualRequestConverter.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * Sets the message type if it matches either a get demo or get eligibility
     *
     * @param element Element
     * @param batchRequestDTO MessageDTO
     */
    private static void handleIfIndividualRequest(Element element, MessageDTO batchRequestDTO) {

        MessageDTO.MessageType messageType = null;
        String nodeName = element.getNodeName();
        if (nodeName.endsWith(GET_DEMOGRAPHICS_ELEMENT_NAME)) {
            messageType = MessageDTO.MessageType.GET_DEMOGRAPHICS_MESSAGE_TYPE;
        } else if (nodeName.endsWith(GET_ELIGIBILITY_ELEMENT_NAME)) {
            messageType = MessageDTO.MessageType.GET_ELIGIBILITY_MESSAGE_TYPE;
        }
        batchRequestDTO.setMessageType(messageType);

    }

}
