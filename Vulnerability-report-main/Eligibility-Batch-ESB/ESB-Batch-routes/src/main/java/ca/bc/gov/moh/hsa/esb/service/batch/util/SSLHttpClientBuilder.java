/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.esb.service.batch.util;

import java.io.IOException;
import java.io.InputStream;
import java.security.KeyStore;

import javax.net.ssl.SSLContext;
import org.apache.commons.codec.binary.Base64;
import org.apache.http.HttpException;
import org.apache.http.HttpRequest;
import org.apache.http.HttpRequestInterceptor;
import org.apache.http.client.HttpClient;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.conn.ssl.TrustAllStrategy;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.protocol.HttpContext;
import org.apache.http.ssl.SSLContextBuilder;
import org.springframework.ws.transport.http.HttpComponentsMessageSender;

/**
 * HttpClient builder that supports SSL Mutual Authentication and HTTP Basic simultaneously
 * @author greg.perkins
 */
public class SSLHttpClientBuilder {

    //SSL Params
    private String clientKeyStore;
    private String clientKeyStorePassword;
    private String clientKeyPassword;
    private String clientTrustStore;
    private String clientTrustStorePassword;
    
    //HTTP Basic params
    private String httpUserName;
    private String httpPassword;
    
    //Timeout param
    private String timeout;
    
    /**
     * Builds an HTTP Client that contains an SSL Context for mutual auth, as well as HTTP Basic authentication
     * @return HttpClient
     * @throws Exception 
     */
    public HttpClient getHttpClient() throws Exception{

            if (clientKeyStore!=null && clientKeyStorePassword!=null && clientKeyPassword!=null && clientTrustStore!=null && clientTrustStorePassword!=null ){
                final String base64Password = new String(Base64.encodeBase64((httpUserName+":"+httpPassword).getBytes()));
                KeyStore client = KeyStore.getInstance("JKS");
                InputStream clientIs = this.getClass().getResourceAsStream("/"+clientKeyStore);
                client.load(clientIs,clientKeyStorePassword.toCharArray());  
                clientIs.close();
                KeyStore trust = KeyStore.getInstance("JKS");
                InputStream trustIs = this.getClass().getResourceAsStream("/"+clientTrustStore);
                trust.load(trustIs,clientTrustStorePassword.toCharArray());  
                trustIs.close();
                SSLContext sslContext = SSLContextBuilder.create().loadKeyMaterial(client, clientKeyPassword.toCharArray()).loadTrustMaterial(trust, new TrustAllStrategy()).build();
                RequestConfig config = RequestConfig.custom()
                        .setConnectTimeout(Integer.parseInt(timeout))
                        .setConnectionRequestTimeout(Integer.parseInt(timeout))
                        .setSocketTimeout(Integer.parseInt(timeout))
                        .build();
                HttpClient httpClient = HttpClientBuilder.create()
                        .addInterceptorFirst(new HttpComponentsMessageSender.RemoveSoapHeadersInterceptor())
                        .addInterceptorLast(new HttpRequestInterceptor() {
                            @Override
                            public void process(HttpRequest hr, HttpContext hc) throws HttpException, IOException {
                                hr.addHeader("Authorization", "Basic "+base64Password);
                            }
                        })
                        .setSSLContext(sslContext)
                        .setDefaultRequestConfig(config)
                        .build();
                return httpClient;
            }
        return null;
    }

    public String getHttpUserName() {
        return httpUserName;
    }

    public void setHttpUserName(String httpUserName) {
        this.httpUserName = httpUserName;
    }

    public String getHttpPassword() {
        return httpPassword;
    }

    public void setHttpPassword(String httpPassword) {
        this.httpPassword = httpPassword;
    }

    public String getClientKeyStore() {
        return clientKeyStore;
    }

    public void setClientKeyStore(String clientKeyStore) {
        this.clientKeyStore = clientKeyStore;
    }

    public String getClientKeyStorePassword() {
        return clientKeyStorePassword;
    }

    public void setClientKeyStorePassword(String clientKeyStorePassword) {
        this.clientKeyStorePassword = clientKeyStorePassword;
    }

    public String getClientKeyPassword() {
        return clientKeyPassword;
    }

    public void setClientKeyPassword(String clientKeyPassword) {
        this.clientKeyPassword = clientKeyPassword;
    }

    public String getClientTrustStore() {
        return clientTrustStore;
    }

    public void setClientTrustStore(String clientTrustStore) {
        this.clientTrustStore = clientTrustStore;
    }

    public String getClientTrustStorePassword() {
        return clientTrustStorePassword;
    }

    public void setClientTrustStorePassword(String clientTrustStorePassword) {
        this.clientTrustStorePassword = clientTrustStorePassword;
    }

    public String getTimeout() {
        return timeout;
    }

    public void setTimeout(String timeout) {
        this.timeout = timeout;
    }
}
