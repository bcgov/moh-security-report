/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.esb.service.batch.exception;

import ca.bc.gov.moh.hsa.esb.service.batch.HeaderConstants;
import ca.bc.gov.moh.hsa.esb.service.batch.dto.AcknowledgementDTO;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.springframework.stereotype.Component;

/**
 * Component for building the context used to send back NACK responses when an error occurs
 *
 * @author greg.perkins
 */
@Component
public class NackContextBuilder implements Processor {

    @Override
    public void process(Exchange exchange) throws Exception {

        List<AcknowledgementDTO> acks = exchange.getProperty("acks", List.class);
        AcknowledgementDTO ack = new AcknowledgementDTO();
        if (acks == null) {
            acks = new ArrayList<AcknowledgementDTO>();
        }

        Exception exception = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Exception.class);
        exchange.setProperty("acknowledgementTypeCode", "AE");
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddkkmmss.SSS0Z");
        exchange.getIn().setHeader(HeaderConstants.CREATION_TIME, sdf.format(new Date()));
            String transactionID = UUID.randomUUID().toString();
            exchange.setProperty("transactionId", transactionID);        
        if (exception instanceof NoCertificateFoundException) {
            ack.setCode("MSG-0019");
            ack.setDisplayName("The HIAL security certificate is incorrect.");
            ack.setOriginalText("The HIAL security certificate is incorrect.");
            ack.setText(exception.getMessage());
            acks.add(ack);
        } else if (exception instanceof org.springframework.ws.client.WebServiceTransportException) {
            ack.setCode("MSG-0019");
            ack.setDisplayName("The HIAL security certificate is incorrect.");
            ack.setOriginalText("The HIAL security certificate is incorrect.");
            ack.setText(exception.getMessage());
            acks.add(ack);
        } else if (exception instanceof org.springframework.ws.client.WebServiceIOException) {
            Throwable cause = exception.getCause();
            if (cause != null && cause instanceof UnknownHostException) {
                ack.setCode("MSG-0018");
                ack.setDisplayName("The Send Port location value for the ESB service is not valid.");
                ack.setOriginalText(null);
                ack.setText(exception.getMessage());
                acks.add(ack);
            } else if (cause != null && cause instanceof SocketTimeoutException) {
                ack.setCode("RTEDEST");
                ack.setDisplayName("Error: The destination of this message is known to the receiving application. Messages have been successfully routed to that destination in the past. The link to the destination application or an intermediate application is unavailable.");
                ack.setOriginalText(null);
                ack.setText(null);
                acks.add(ack);                 
                ack = new AcknowledgementDTO();
                ack.setCode("MSG-0032");
                ack.setDisplayName("Error: the batch service request timed out..");
                ack.setOriginalText(null);
                ack.setText(exception.getMessage());
                acks.add(ack); 
            }
        } 
        
        if (acks.isEmpty()){
                ack.setCode("RTEDEST");
                ack.setDisplayName("Message routing error, destination unreachable.");
                ack.setOriginalText("Error: The destination of this message is known to the receiving application. Messages have been successfully routed to that destination in the past. The link to the destination application or an intermediate application is unavailable.");
                ack.setText(exception.getMessage());
                acks.add(ack);             
        }
        exchange.getIn().setBody(ack);
        exchange.setProperty("acks", acks);
    }

}
