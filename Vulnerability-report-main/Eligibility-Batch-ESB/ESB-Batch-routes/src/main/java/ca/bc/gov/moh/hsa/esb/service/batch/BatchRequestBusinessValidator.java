/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.esb.service.batch;

import ca.bc.gov.moh.hsa.esb.service.batch.dto.BatchRequestDTO;
import ca.bc.gov.moh.hsa.esb.service.batch.dto.IndividualBatchRequestDTO;
import ca.bc.gov.moh.hsa.esb.service.batch.exception.BatchRequestBusinessValidationException;
import ca.bc.gov.moh.hsa.esb.service.batch.exception.BatchRequestBusinessValidationException.ValidationErrorType;
import ca.bc.gov.moh.hsa.util.dto.MessageDTO;
import java.util.EnumSet;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;
import org.springframework.stereotype.Component;

/**
 *
 * @author conrad.gustafson
 */
@Component
public class BatchRequestBusinessValidator {
    
    private static final String EXPECTED_MODE_CODE = "I";

    public List<IndividualBatchRequestDTO> validate(BatchRequestDTO batchRequestDTO) throws BatchRequestBusinessValidationException {
        List<IndividualBatchRequestDTO> individualMessages = batchRequestDTO.getIndividualMessages();

        assertNumberOfMessages(individualMessages);
        assertTypesOfMessages(individualMessages);
        assertModeCode(batchRequestDTO.getModeCode());
        
        return individualMessages;
    }

    private void assertMatchingOrgs(BatchRequestDTO batchRequestDTO){
        
    }
    
    private void assertNumberOfMessages(List<IndividualBatchRequestDTO> individualMessages) throws BatchRequestBusinessValidationException {
        if (2 != individualMessages.size()) {
            throw new BatchRequestBusinessValidationException(ValidationErrorType.WRONG_NUMBER_OF_MESSAGES);
        }
    }

    private void assertTypesOfMessages(List<IndividualBatchRequestDTO> individualMessages) throws BatchRequestBusinessValidationException {
        EnumSet<MessageDTO.MessageType> typesFound;
        typesFound = EnumSet.noneOf(MessageDTO.MessageType.class);

        for (Iterator<IndividualBatchRequestDTO> it = individualMessages.iterator(); it.hasNext();) {
            MessageDTO individualRequestDTO = it.next();
            MessageDTO.MessageType individualMessageType = individualRequestDTO.getMessageType();
            if (typesFound.contains(individualMessageType)) {
                throw new BatchRequestBusinessValidationException(ValidationErrorType.WRONG_TYPES_OF_MESSAGES);
            } else {
                typesFound.add(individualMessageType);
            }
        }
    }

    private void assertModeCode(String modeCode) throws BatchRequestBusinessValidationException {
        if (!EXPECTED_MODE_CODE.equals(modeCode)) {
            throw new BatchRequestBusinessValidationException(ValidationErrorType.MODE_CODE_NOT_SUPPORTED);
        }
    }    
}
