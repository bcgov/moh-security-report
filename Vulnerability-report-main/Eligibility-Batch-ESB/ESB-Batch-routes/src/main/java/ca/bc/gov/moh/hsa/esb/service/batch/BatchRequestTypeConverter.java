/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.esb.service.batch;

import ca.bc.gov.moh.hsa.esb.service.batch.dto.BatchRequestDTO;
import ca.bc.gov.moh.hsa.esb.service.batch.dto.IndividualBatchRequestDTO;
import ca.bc.gov.moh.hsa.util.dto.MessageDTO.MessageType;
import java.io.StringWriter;
import java.io.Writer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.namespace.NamespaceContext;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.*;
import org.apache.camel.Converter;
import org.slf4j.LoggerFactory;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

/**
 *
 * @author conrad.gustafson
 */
@Converter
public class BatchRequestTypeConverter {

    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(BatchRequestTypeConverter.class);

    static final String GET_DEMOGRAPHICS_ELEMENT_NAME = "HCIM_IN_GetDemographics";
    static final String GET_ELIGIBILITY_ELEMENT_NAME = "QUCR_IN200101BC";
    static final String MODE_CODE_ELEMENT_NAME = "responseModeCode";
    static final String MODE_CODE_ATTRIBUTE_NAME = "code";

    final static XPath xPath = XPathFactory.newInstance().newXPath();
    final static NamespaceContext nsc = new BatchNamespaceContext();
    static Transformer transformer;

    static {
        xPath.setNamespaceContext(nsc);
        try {
            transformer = TransformerFactory.newInstance().newTransformer();
            transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
        } catch (TransformerConfigurationException ex) {
            Logger.getLogger(BatchRequestTypeConverter.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    @Converter
    public static BatchRequestDTO createBatchRequestDTOFromDocument(Document document) {

        BatchRequestDTO batchRequestDTO = new BatchRequestDTO();
        extractProperties(document, batchRequestDTO);
        return batchRequestDTO;
    }

    private static void extractProperties(Document document, BatchRequestDTO batchRequestDTO) {

        try {

            NodeList nodes = (NodeList) xPath.evaluate("//urn:HCIM_IN_GetDemographics | //v3:QUCR_IN200101BC",
                    document, XPathConstants.NODESET);
            for (int i = 0; i < nodes.getLength(); ++i) {
                Element element = (Element) nodes.item(i);
                handleIfIndividualRequest(element, batchRequestDTO);
            }

            Object responseModeCode = xPath.evaluate("//v3:responseModeCode/@code", document, XPathConstants.STRING);
            batchRequestDTO.setModeCode(responseModeCode.toString());
            
            Object org = xPath.evaluate("/v3:MCCI_IN200100BC/v3:sender/v3:device/v3:asAgent/v3:representedOrganization/v3:id/@extension", document, XPathConstants.STRING);
            batchRequestDTO.getSender().setOrganization(org.toString());
            Object orgOid = xPath.evaluate("/v3:MCCI_IN200100BC/v3:sender/v3:device/v3:asAgent/v3:representedOrganization/v3:id/@root", document, XPathConstants.STRING);
            batchRequestDTO.setOrganizationOid(orgOid.toString());
            Object device = xPath.evaluate("/v3:MCCI_IN200100BC/v3:sender/v3:device/v3:id/@extension", document, XPathConstants.STRING);
            batchRequestDTO.getSender().setSystemName(device.toString());
            Object deviceOid = xPath.evaluate("/v3:MCCI_IN200100BC/v3:sender/v3:device/v3:id/@root", document, XPathConstants.STRING);
            batchRequestDTO.setDeviceOid(deviceOid.toString());           
            Object getDemoId = xPath.evaluate("//v3:HCIM_IN_GetDemographics/v3:id/@extension", document, XPathConstants.STRING);
            batchRequestDTO.setGetDemoId(getDemoId.toString()); 
            Object getEligId = xPath.evaluate("//v3:QUCR_IN200101BC/v3:id/@extension", document, XPathConstants.STRING);
            batchRequestDTO.setGetEligId(getEligId.toString()); 
            Object batchId = xPath.evaluate("/v3:MCCI_IN200100BC/v3:id/@extension", document, XPathConstants.STRING);
            batchRequestDTO.setBatchId(batchId.toString()); 
            

        } catch (XPathExpressionException ex) {
            Logger.getLogger(BatchRequestTypeConverter.class.getName()).log(Level.SEVERE, null, ex);
            throw new RuntimeException(ex);
        }
    }

    private static void handleIfIndividualRequest(Element element, BatchRequestDTO batchRequestDTO) {
        IndividualBatchRequestDTO individualMessage = new IndividualBatchRequestDTO();

        MessageType messageType = null;
        String nodeName = element.getNodeName();
        if (nodeName.endsWith(GET_DEMOGRAPHICS_ELEMENT_NAME)) {
            messageType = MessageType.GET_DEMOGRAPHICS_MESSAGE_TYPE;
        } else if (nodeName.endsWith(GET_ELIGIBILITY_ELEMENT_NAME)) {
            messageType = MessageType.GET_ELIGIBILITY_MESSAGE_TYPE;
        }
        individualMessage.setMessageType(messageType);

        String messageBody = convertNodeToString(element);
        individualMessage.setMessageBody(messageBody);

        try{
            String xpq = "";
            String messageIdQuery = "";
            String userIdQuery;
            String deviceQuery;
            Object user;
            Object device;
            if (messageType == MessageType.GET_DEMOGRAPHICS_MESSAGE_TYPE){
                xpq = "//urn:HCIM_IN_GetDemographics/v3:sender/v3:device/v3:asAgent/v3:representedOrganization/v3:id/@extension";
                messageIdQuery = "//urn:HCIM_IN_GetDemographics/v3:id/@extension";
                userIdQuery = "//urn:HCIM_IN_GetDemographics/v3:controlActProcess/v3:dataEnterer/v3:assignedPerson/v3:id/@extension";
                deviceQuery = "//urn:HCIM_IN_GetDemographics/v3:sender/v3:device/v3:id/@extension";
                
                user = xPath.evaluate(userIdQuery, element, XPathConstants.STRING);
                individualMessage.getAuthor().getUser().setUserId(user.toString());
                device = xPath.evaluate(deviceQuery, element, XPathConstants.STRING);
                individualMessage.getSender().setSystemName(device.toString());
                
            }else if (messageType == MessageType.GET_ELIGIBILITY_MESSAGE_TYPE){
                xpq = "//v3:QUCR_IN200101BC/v3:sender/v3:device/v3:asAgent/v3:representedOrganization/v3:id/@extension";
                userIdQuery = "//v3:QUCR_IN200101BC/v3:controlActProcess/v3:authorOrPerformer/v3:assignedPerson/v3:id/@extension";
                messageIdQuery = "//v3:QUCR_IN200101BC/v3:id/@extension";
                user = xPath.evaluate(userIdQuery, element, XPathConstants.STRING);
                individualMessage.getAuthor().getUser().setUserId(user.toString());
            }
            Object org = xPath.evaluate(xpq, element, XPathConstants.STRING);
            individualMessage.getSender().setOrganization(org.toString());
            
            Object messageId = xPath.evaluate(messageIdQuery, element, XPathConstants.STRING);
            individualMessage.setMessageId(messageId.toString());
            
        }catch(XPathExpressionException xpe){
            
        }
            
        
        batchRequestDTO.getIndividualMessages().add(individualMessage);
    }

    private static String convertNodeToString(Node node) {

        try {
            DOMSource source = new DOMSource(node);
            Writer stringWriter = new StringWriter();
            StreamResult streamResult = new StreamResult(stringWriter);
            transformer.transform(source, streamResult);
            return stringWriter.toString();
        } catch (TransformerConfigurationException ex) {
            logger.error("Error transforming message node", ex);
            throw new RuntimeException(ex);
        } catch (TransformerException ex) {
            logger.error("Error transforming message node", ex);
            throw new RuntimeException(ex);
        }
    }

}
