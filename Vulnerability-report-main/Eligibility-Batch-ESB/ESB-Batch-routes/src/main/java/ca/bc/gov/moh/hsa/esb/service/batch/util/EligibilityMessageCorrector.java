/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.esb.service.batch.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.TimeZone;
import java.util.regex.Pattern;
import org.jboss.logging.Logger;

/**
 *
 * @author joshua.burton
 */
public class EligibilityMessageCorrector {

    /** Takes a batch message body and performs message corrections required before splitting the GD and GE messages.
     * 
     * @param body The original message body
     * @return The corrected message body
     */
    public static String correctBatchIn(String body) {
        String correctedBody = body;
        correctedBody = correctedBody.replaceAll("(:ns0|ns0:)", "");
        if (!Pattern.compile("<QUCR_IN200101BC[^>]*xmlns=[^>]*").matcher(correctedBody).find()) {
            correctedBody = correctedBody.replaceFirst("<QUCR_IN200101BC", "<QUCR_IN200101BC xmlns=\"urn:hl7-org:v3\"");
        }
        return correctedBody;
    }

    /** Takes an eligibility input message body and performs message corrections required before sending the message.
     * This is compatible with both the initial GE_IN and the replayed GE_IN messages for surviving PHNs.
     * 
     * @param body The original message body
     * @return The corrected message body
     */
    public static String correctEligibilityIn(String body) {
        String correctedBody = body;
        // Conditional checks and replacements
        if (!Pattern.compile("<QUCR_IN200101BC[^>]*xmlns:xsi=[^>]*").matcher(correctedBody).find()) {
            correctedBody = correctedBody.replaceFirst("xmlns=\"urn:hl7-org:v3\"", "xmlns=\"urn:hl7-org:v3\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"");
        }
        if (!Pattern.compile("<QUCR_IN200101BC[^>]*ITSVersion=[^>]*").matcher(correctedBody).find()) {
            correctedBody = correctedBody.replaceFirst("<QUCR_IN200101BC", "<QUCR_IN200101BC ITSVersion=\"XML_1.0\"");
        }
        if (!Pattern.compile("<creationTime[^>]*xsi:type=[^>]*").matcher(correctedBody).find()) {
            correctedBody = correctedBody.replaceFirst("<creationTime", "<creationTime xsi:type=\"TS\"");
        }
        correctedBody = correctedBody.replaceAll("moodCode=\".*\"", "moodCode=\"EVN\"");
        // Removed tags and properties
        correctedBody = correctedBody.replaceAll("\\s*<coveredPartyAsPatient[^.].*/>", "");
        correctedBody = correctedBody.replaceAll("\\s*<assignedPerson.*/>", "");
        correctedBody = correctedBody.replaceAll("\\s*<asAgent[\\s\\S]*/asAgent>(?=\\s*</device>\\s*</receiver>)", "");
        correctedBody = correctedBody.replaceAll("\\s*<asAgent[\\s\\S]*/asAgent>(?=\\s*</device>\\s*</sender>)", "");
        correctedBody = correctedBody.replaceAll("\\s?use=\"BUS\"", "");
        return correctedBody;
    }

    /** Takes an eligibility output message body and performs message corrections required before putting the message into the BATCH_OUT message.
     * 
     * @param body The original message body
     * @return The corrected message body
     */
    public static String correctEligibilityOut(String body) {
        String correctedBody = body;
        try {
            // Fix xmlns:ns0 namespace so that it is correctly set to urn:hl7-org:v3
            correctedBody = correctedBody.replaceAll("xmlns:ns0=\"https://hcim.ehealth.gov.bc.ca/\"", "xmlns:ns0=\"urn:hl7-org:v3\"");
            // Modify the creationTime date so that it is in PST
            SimpleDateFormat sdfTimezoneIn = new SimpleDateFormat("yyyyMMddkkmmss.SSSZ");
            SimpleDateFormat sdfTimezoneOut = new SimpleDateFormat("yyyyMMddkkmmss.SSS0Z");
            String creationTimeStr = correctedBody.substring(correctedBody.indexOf("creationTime"));
            creationTimeStr = creationTimeStr.substring(0, creationTimeStr.indexOf("/>"));
            creationTimeStr = creationTimeStr.replaceAll("(hl7)*", "").replaceAll("[^\\d.-]*", "").replaceAll("(\\d-)", "-");
            Calendar creationTime = Calendar.getInstance();
            creationTime.setTime(sdfTimezoneIn.parse(creationTimeStr));
            creationTime.setTimeZone(TimeZone.getTimeZone("PST"));
            String newCreationTime = sdfTimezoneOut.format(creationTime.getTime());
            correctedBody = correctedBody.replaceFirst("creationTime value=\"[\\d.-]*\"", "creationTime value=\"" + newCreationTime + "\"");
        } catch (ParseException ex) {
            Logger.getLogger(EligibilityMessageCorrector.class).error(ex.getMessage(), ex);
        }
        return correctedBody;
    }
}
