/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.esb.service.batch.exception;

import ca.bc.gov.moh.hsa.esb.service.batch.HeaderConstants;
import ca.bc.gov.moh.hsa.esb.service.batch.dto.AcknowledgementDTO;
import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import org.apache.camel.Exchange;
import org.apache.camel.processor.validation.SchemaValidationException;
import static org.hibernate.validator.internal.util.Contracts.assertNotNull;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.xml.sax.SAXParseException;

/**
 * Handles schema validation exceptions
 *
 * @author conrad.gustafson
 * @author greg.perkins
 */
@Component
public class BatchSchemaValidationExceptionProcessor extends AbstractExceptionProcessor {

    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(BatchSchemaValidationExceptionProcessor.class);

    /**
     * Handle schema validation exception by converting response into a string containing the exception info
     *
     * @param exchange Exchange
     * @throws Exception
     */
    @Override
    public void process(Exchange exchange) throws Exception {
        common(exchange);

        SchemaValidationException caused = (SchemaValidationException) exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class);
        assertNotNull(caused);

        StringWriter s = new StringWriter();
        s.append(caused.getClass().getSimpleName() + " - Errors:");
        List<SAXParseException> errors = caused.getErrors();
        for (SAXParseException spe : errors) {
            s.append("[" + spe.getLocalizedMessage() + "]");
        }
        logger.error("Handled Exception: " + caused.getClass().getSimpleName());
        
        exchange.getIn().setHeader(HeaderConstants.SENDING_DEVICE, "");
        exchange.getIn().setHeader(HeaderConstants.SENDING_DEVICE_OID, "");
        exchange.getIn().setHeader(HeaderConstants.SENDING_ORG, "");
        exchange.getIn().setHeader(HeaderConstants.SENDING_ORG_OID, "");
        exchange.getIn().setHeader(HeaderConstants.BATCH_ID, "");
        
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddkkmmss.SSS0Z");
        exchange.getIn().setHeader(HeaderConstants.CREATION_TIME, sdf.format(new Date()));
        AcknowledgementDTO ack = new AcknowledgementDTO();
        ack.setCode("MSG-0031");
        ack.setDisplayName("Error: The HL7 message is invalid. Please correct the HL7 message, and resubmit it.");
        ack.setOriginalText(null);
        ack.setText(s.toString());
        List<AcknowledgementDTO> acks = exchange.getProperty("acks",List.class);
        if (acks==null){
            acks = new ArrayList<AcknowledgementDTO>();
        }
        acks.add(ack);
        exchange.setProperty("acks", acks);        
        

    }
}
