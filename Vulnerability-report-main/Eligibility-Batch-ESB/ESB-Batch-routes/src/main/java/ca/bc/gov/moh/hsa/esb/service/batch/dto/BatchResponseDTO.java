/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.esb.service.batch.dto;

import ca.bc.gov.moh.hsa.esb.service.batch.BatchNamespaceContext;
import static ca.bc.gov.moh.hsa.esb.service.batch.util.EligibilityMessageCorrector.correctEligibilityOut;
import ca.bc.gov.moh.hsa.util.audit.AffectedParties;
import ca.bc.gov.moh.hsa.util.audit.AuditableParty;
import ca.bc.gov.moh.hsa.util.audit.AuditableResponse;
import ca.bc.gov.moh.hsa.util.audit.AuditableResponseMessage;
import java.io.Serializable;
import java.io.StringReader;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import javax.xml.namespace.NamespaceContext;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathFactory;
import org.xml.sax.InputSource;

/**
 *
 * @author conrad.gustafson
 */
public class BatchResponseDTO implements AuditableResponse, AuditableResponseMessage, AffectedParties, Serializable {

    SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddkkmmss.SSS0Z");//2014|09|25|12|34|29.8172-0700
    public String timestamp = sdf.format(new Date());
    public String getDemographicsResponse = null;
    public String getEligibilityResponse = null;
    public String exceptionMessage = "The batch request has been successfully processed.";
    public String responseCode = "AA";
    public String organization;
    public String device;

    final static XPath xPath = XPathFactory.newInstance().newXPath();
    final static NamespaceContext nsc = new BatchNamespaceContext();

    static {
        xPath.setNamespaceContext(nsc);
    }

    public boolean isSurvivingPHN() {
        return getDemographicsResponse.contains("BCHCIM.GD.0.0015");
    }

    public String getGetDemographicsResponse() {
        return getDemographicsResponse;
    }

    public void setGetDemographicsResponse(String getDemographicsResponse) {
        this.getDemographicsResponse = getDemographicsResponse;
    }

    public String getGetEligibilityResponse() {
        return getEligibilityResponse;
    }

    public void setGetEligibilityResponse(String getEligibilityResponse) {
        this.getEligibilityResponse = correctEligibilityOut(getEligibilityResponse);
    }

    public String getExceptionMessage() {
        return exceptionMessage;
    }

    public void setExceptionMessage(String exceptionMessage) {
        this.exceptionMessage = exceptionMessage;
    }

    public String getResponseCode() {
        return responseCode;
    }

    public void setResponseCode(String responseCode) {
        this.responseCode = responseCode;
    }

    public String getTimestamp() {
        return timestamp;
    }

    public void setTimestamp(String timestamp) {
        this.timestamp = timestamp;
    }

    public String getOrganization() {
        return organization;
    }

    public void setOrganization(String organization) {
        this.organization = organization;
    }

    public String getDevice() {
        return device;
    }

    public void setDevice(String device) {
        this.device = device;
    }

    @Override
    public String getResponseText() {
        return exceptionMessage;
    }

    @Override
    public List<AuditableParty> getAuditableParties() {
        List<AuditableParty> parties = new ArrayList<>();
        AuditableParty ap = new AuditableParty();
        ap.setIdentifier(findPHN());
        ap.setIdentifierSource(findSource());
        ap.setIdentifierType(findType());
        ap.setStatus(findStatus());
        parties.add(ap);
        return parties;
    }

    private String findPHN() {
        try {
            String newPhn = (String) xPath.evaluate("//v3:identifiedPerson/v3:id/@extension", new InputSource(new StringReader(getDemographicsResponse)), XPathConstants.STRING);
            return newPhn;
        } catch (Exception e) {
            return null;
        }
    }

    private String findSource() {
        try {
            String newPhn = (String) xPath.evaluate("//v3:identifiedPerson/v3:id/@assigningAuthorityName", new InputSource(new StringReader(getDemographicsResponse)), XPathConstants.STRING);
            return newPhn;
        } catch (Exception e) {
            return null;
        }
    }

    private String findType() {
        try {
            String newPhn = (String) xPath.evaluate("//v3:identifiedPerson/v3:id/@root", new InputSource(new StringReader(getDemographicsResponse)), XPathConstants.STRING);
            return newPhn;
        } catch (Exception e) {
            return null;
        }
    }

    private String findStatus() {
        try {
            String newPhn = (String) xPath.evaluate("//v3:identifiedPerson/v3:id/@displayable", new InputSource(new StringReader(getDemographicsResponse)), XPathConstants.STRING);
            return newPhn;
        } catch (Exception e) {
            return null;
        }
    }

    @Override
    public List<AuditableResponseMessage> getAuditableResponseMessageList() {
        return Arrays.asList(new AuditableResponseMessage[]{this});
    }

}
