/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.esb.service.batch;

import ca.bc.gov.moh.hsa.esb.service.batch.dto.BatchResponseDTO;
import java.io.StringWriter;
import java.io.Writer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.namespace.NamespaceContext;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

/**
 * Processes the revised Get Eligibility response message
 * @author greg.perkins
 */
@Component
public class SurvivorGetEligibilityResponseConverter implements Processor {

    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(SurvivorGetEligibilityResponseConverter.class);
    final static NamespaceContext nsc = new BatchNamespaceContext();
    static Transformer transformer;

    static {
        try {
            transformer = TransformerFactory.newInstance().newTransformer();
            transformer.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, "yes");
            transformer.setOutputProperty(OutputKeys.METHOD, "xml");
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
        } catch (TransformerConfigurationException ex) {
            Logger.getLogger(BatchRequestTypeConverter.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * Put the new response back in the original response container
     * @param exchange Exchange
     * @throws Exception 
     */
    @Override
    public void process(Exchange exchange) throws Exception {
        BatchResponseDTO orig = exchange.getProperty("ORIGINAL_RESPONSE", BatchResponseDTO.class);
        DOMSource dom = (DOMSource) exchange.getIn().getBody();
        String newResponse = convertNodeToString(dom);
        orig.setGetEligibilityResponse(newResponse);
        exchange.getIn().setBody(orig);
    }

    /**
     * Pull the text of the XML response
     * @param source DOMSource
     * @return String
     */
    private static String convertNodeToString(DOMSource source) {

        try {
            Writer stringWriter = new StringWriter();
            StreamResult streamResult = new StreamResult(stringWriter);
            transformer.transform(source, streamResult);
            return stringWriter.toString();
        } catch (TransformerConfigurationException ex) {
            logger.error("Error transforming message node", ex);
            throw new RuntimeException(ex);
        } catch (TransformerException ex) {
            logger.error("Error transforming message node", ex);
            throw new RuntimeException(ex);
        }
    }
}
