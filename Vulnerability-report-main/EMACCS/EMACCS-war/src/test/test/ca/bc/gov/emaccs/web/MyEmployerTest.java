/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        MyEmployerTest.java                            *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package test.ca.bc.gov.emaccs.web;

import java.util.List;
import java.util.Random;
import org.junit.After;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;

/**
 *
 * @author joshua.lewis
 */
public class MyEmployerTest extends BaseTestCase {
    private By addBtn;
    private By updateBtn;
    private By cancelBtn;

    private By byLicno = By.name("form1:LicenceNumber");
    private By byDept = By.name("form1:deptcode");
    private By byEmpNo = By.name("form1:empno");
    private By byHireDate = By.name("form1:beforeDateInputDate");
    private By byEndDate = By.name("form1:afterDateInputDate");

    private WebElement eleLicno;
    private Select eleDept;
    private WebElement eleEmpNo;
    private WebElement eleHireDate;
    private WebElement eleEndDate;

    private String valLicno;
    private String indexDept;
    private String valEmpNo;
    private String valHireDate;
    private String valEndDate;


    @Before
    public void goToMyEmployer() {
        driver.findElement(By.linkText("EMACCS Home")).click();
        driver.findElement(By.linkText("Update My Employer")).click();

        addBtn = By.xpath("//input[@type='submit'][@value='Add']");
        updateBtn = By.xpath("//input[@type='submit'][@value='Update']");
        cancelBtn = By.xpath("//input[@type='submit'][@value='Cancel']");

        setUpElements();
    }

    @After
    public void restoreVals() throws Exception{
// no default record to restore values to
    }


    @Test
    public void testPresence() throws InterruptedException {
        assertTrue(isTextPresent("My Employment Information"));

        // Entry box contents
        By entryDiv = By.id("form1:entry");

        assertTrue(isTextPresent(entryDiv, "Department"));
        assertTrue(isTextPresent(entryDiv, "Employee Number"));
        assertTrue(isTextPresent(entryDiv, "Start Date"));
        assertTrue(isTextPresent(entryDiv, "End Date"));

        assertTrue(isElementPresent(byDept));
        assertTrue(isElementPresent(byEmpNo));
        assertTrue(isElementPresent(byHireDate));
        assertTrue(isElementPresent(byEndDate));

        // All of these should be blank/default
        assertTrue(getIndex(byDept).equals("0"));
        assertTrue(getValue(byEmpNo).equals(""));
        assertTrue(getValue(byHireDate).equals(""));
        assertTrue(getValue(byEndDate).equals(""));

        assertTrue(isElementPresent(addBtn) || isElementPresent(updateBtn));
        assertTrue(isElementPresent(cancelBtn));


        By tablesDiv = By.xpath("//div[2]/div[2]");
        assertTrue(isTextPresent(tablesDiv, "Department"));
        assertTrue(isTextPresent(tablesDiv, "Start Date"));
        assertTrue(isTextPresent(tablesDiv, "End Date"));

        List<WebElement> optionsCol = driver.findElements(By.xpath("//div[@id='form1:previous']/table/tbody/tr/td[4]"));
        List<WebElement> updateBtns = driver.findElements(By.xpath("//div[@id='form1:previous']/table/tbody/tr/td[4]/input[@type='submit'][@value='Update']"));

        // There should be an update button for every row
        assertTrue(optionsCol.size() == updateBtns.size());


        Random rn = new Random();
        int rdm = rn.nextInt(840);

    }

    @Test
    public void testCancel() {
        // By default, the form is empty, so put random stuff in it
        eleDept.selectByIndex(10);
        eleEmpNo.sendKeys("65498");
        findElement(byHireDate).click();
        findElement(By.id("form1:beforeDateDayCell2")).click();
        findElement(byEndDate).click();
        findElement(By.id("form1:afterDateDayCell32")).click();

        clickCancel();

        assertTrue(getIndex(byDept).equals("0"));
        assertTrue(getValue(byEmpNo).equals(""));
        assertTrue(getValue(byHireDate).equals(""));
        assertTrue(getValue(byEndDate).equals(""));
    }

    @Test
    public void testErrorMsgs() throws Exception {

        //Test errors
        clickSave();
        assertTrue(isTextPresent(By.cssSelector("span.rf-msgs"), "Employee Number is required for certain Departments"));
        assertTrue(isTextPresent(By.cssSelector("span.rf-msgs"), "StartDate is required"));
        clickCancel();

        // Add an Employee number
        // Now only the Start Date should error
        eleEmpNo.sendKeys("75025");
        clickSave();
        assertFalse(isTextPresent(By.cssSelector("span.rf-msgs"), "Employee Number is required for certain Departments"));
        assertTrue(isTextPresent(By.cssSelector("span.rf-msgs"), "StartDate is required"));
        clickCancel();

        // Change the Department to one that doesn't require an employee number, and clear it
        // Should have the same result
        eleDept.selectByIndex(0);
        eleEmpNo.clear();
        findElement(byHireDate).click();
        findElement(By.id("form1:beforeDateDayCell2")).click();
        clickSave();
        assertTrue(isTextPresent(By.cssSelector("span.rf-msgs"), "Employee Number is required for certain Departments"));
        assertFalse(isTextPresent(By.cssSelector("span.rf-msgs"), "StartDate is required"));
        clickCancel();


    }

    @Test
    public void testUpdate() throws Exception {
        Random rn = new Random();
        int rdm = rn.nextInt(840);

        int tempDeptIdx = rdm;
        String tempDeptTxt;
        String tempEmpNoVal = "";
        String tempHireDateVal;
        String tempEndDateVal;


        eleDept.selectByIndex(tempDeptIdx);

        if (Character.toString(getValue(byDept).charAt(0)).equalsIgnoreCase("A")) {
            tempEmpNoVal = "75025";
            eleEmpNo.sendKeys(tempEmpNoVal);
        }

        findElement(byHireDate).click();
        findElement(By.id("form1:beforeDateDayCell2")).click();
        findElement(byEndDate).click();
        findElement(By.id("form1:afterDateDayCell32")).click();

        tempDeptTxt = eleDept.getFirstSelectedOption().getText();
        tempHireDateVal = getValue(byHireDate);
        tempEndDateVal = getValue(byEndDate);

        //Test success
        clickSave();
        assertTrue(isTextPresent(By.cssSelector("span.rf-msgs"), "Add Successful"));
        clickCancel();

        // These values are in the table, somewhere
        assertTrue(isTextPresent(By.xpath("//div[@id='form1:previous']/table/tbody"), tempDeptTxt));
        assertTrue(isTextPresent(By.xpath("//div[@id='form1:previous']/table/tbody"), tempHireDateVal));
        assertTrue(isTextPresent(By.xpath("//div[@id='form1:previous']/table/tbody"), tempEndDateVal));

        // find the correct row
        int trCount = driver.findElements(By.xpath("//div[@id='form1:previous']/table/tbody/tr")).size();
        int index = 0;
        while(index <= trCount) {
            index++;
            if (isTextPresent(By.xpath("//div[@id='form1:previous']/table/tbody/tr["+index+"]"), tempDeptTxt) &&
                    isTextPresent(By.xpath("//div[@id='form1:previous']/table/tbody/tr["+index+"]"), tempHireDateVal) &&
                    isTextPresent(By.xpath("//div[@id='form1:previous']/table/tbody/tr["+index+"]"), tempEndDateVal)) {
                break;
            }
        }

        driver.findElement(By.xpath("//div[@id='form1:previous']/table/tbody/tr["+index+"]/td[4]/input[@value='Update']")).click();
        waitasec();

        assertTrue((new Select(driver.findElement(byDept))).getFirstSelectedOption().getText().equals(tempDeptTxt));
        assertTrue(getIndex(byDept).equals(Integer.toString(tempDeptIdx)));
        assertTrue(getValue(byEmpNo).equals(tempEmpNoVal));
        assertTrue(getValue(byHireDate).equals(tempHireDateVal));
        assertTrue(getValue(byEndDate).equals(tempEndDateVal));
    }


    /*
     * Assign the screen elements
     */
    private void setUpElements() {
        eleDept = new Select(findElement(byDept));
        eleEmpNo = findElement(byEmpNo);
        eleHireDate = findElement(byHireDate);
        eleEndDate = findElement(byEndDate);
    }

    /*
     * Click the Add/Update button by focusing on the element first, clicking it,
     * waiting for the update status message, and finally setting up the page elements (again)
     */
    private void clickSave() throws Exception {

        if (isElementPresent(addBtn)) {
            findElement(addBtn).sendKeys();
            findElement(addBtn).click();
        } else {
            findElement(updateBtn).sendKeys();
            findElement(updateBtn).click();
        }
        waitForForm();
        waitasec();

        // apparently, the elements need to be set up again every time the page loads
        setUpElements();
    }

    /*
     * Click the cancel button by focusing on the element first, clicking it,
     * waiting for the spinner to disappear, and finally setting up the page elements (again)
     */
    private void clickCancel() {

        findElement(cancelBtn).sendKeys();
        findElement(cancelBtn).click();
        wait.until(ExpectedConditions.invisibilityOfElementLocated(
                By.cssSelector("form#form1 div:nth-child(2) span.rf-st-stop")));
        waitasec();
        // if any elements are reloaded (such as after a cancel/save button click), set them up again
        setUpElements();
    }

}
