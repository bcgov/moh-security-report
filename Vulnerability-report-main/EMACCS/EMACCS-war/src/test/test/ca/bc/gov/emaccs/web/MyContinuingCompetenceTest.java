/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        MyContinuingCompetenceTest.java                *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package test.ca.bc.gov.emaccs.web;

import org.junit.After;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;

/**
 *
 * @author joshua.lewis
 */
public class MyContinuingCompetenceTest extends BaseTestCase {

    private By updateBtn;
    private By cancelBtn;
    private By requestAdjBtn;

    private By byReportingYr = By.name("form1:reportingYear");
    private By byDrop1 = By.name("form1:drop1");
    private By byDrop2 = By.name("form1:drop2");
    private By byDrop3 = By.name("form1:drop3");
    private By byArea = By.name("form1:area");

    private Select eleReportingYr;
    private Select eleDrop1;
    private Select eleDrop2;
    private Select eleDrop3;
    private WebElement eleArea;

    private String indexReportingYr;
    private String indexDrop1;
    private String indexDrop2;
    private String indexDrop3;
    private String valArea;


    @Before
    public void goToMyCcStatus() {

        findElement(By.linkText("EMACCS Home")).click();
        findElement(By.linkText("View My CC Status")).click();

        requestAdjBtn = By.xpath("//input[@type='submit'][@value='Request Adjudication']");
        updateBtn = By.xpath("//input[@type='submit'][@value='Update Request']");
        cancelBtn = By.xpath("//input[@type='submit'][@value='Cancel']");

        setUpElements();
        setUpFieldVals();
    }

    @After
    public void restoreVals() throws Exception {
        setUpElements();

        eleDrop1.selectByIndex(Integer.parseInt(indexDrop1));
        eleDrop2.selectByIndex(Integer.parseInt(indexDrop2));
        eleDrop3.selectByIndex(Integer.parseInt(indexDrop3));
        eleArea.clear();
        eleArea.sendKeys(valArea);

        clickSave();
    }

    @Test
    public void testPresence() throws InterruptedException {
        // Page header
        assertTrue(isTextPresent("My Continuing Competence Status"));

        // Entry box contents
        By entryDiv = By.id("form1:entry");

        assertTrue(isTextPresent(entryDiv, "Reporting Year"));
        assertTrue(isTextPresent(entryDiv, "Patient Contacts"));
        assertTrue(isTextPresent(entryDiv, "CC Status"));
        assertTrue(isTextPresent(entryDiv, "Continuing Education Credits"));

        // Necessary Tables and Columns
        By tablesDiv = By.xpath("//form/div[2]/div");

        assertTrue(isTextPresent(tablesDiv, "Patient Contact and Continuing Education List"));

        By patientContactsTable = By.xpath("//div[2]/div[2]/div");
        By approvedActivitiesTable = By.xpath("//div[2]/div[2]/div[2]");
        By pendingActivitiesTable = By.xpath("//div[2]/div[2]/div[3]");

        // Patient Contacts table and columns
        assertTrue(isTextPresent(patientContactsTable, "Patient Contacts"));
        assertTrue(isTextPresent(patientContactsTable, "Call Date"));
        assertTrue(isTextPresent(patientContactsTable, "Contact Type"));
        assertTrue(isTextPresent(patientContactsTable, "Sub-Contact Type"));
        assertTrue(isTextPresent(patientContactsTable, "Skill 1"));
        assertTrue(isTextPresent(patientContactsTable, "Skill 2"));

        // Approved Activities table and columns
        assertTrue(isTextPresent(approvedActivitiesTable, "Approved Activities"));
        assertTrue(isTextPresent(approvedActivitiesTable, "Activity Name"));
        assertTrue(isTextPresent(approvedActivitiesTable, "NOCP"));
        assertTrue(isTextPresent(approvedActivitiesTable, "Start Date"));
        assertTrue(isTextPresent(approvedActivitiesTable, "End Date"));
        assertTrue(isTextPresent(approvedActivitiesTable, "Credits"));
        assertTrue(isTextPresent(approvedActivitiesTable, "Adjudicated Credits"));

        // Activities Pending Approval table and columns
        assertTrue(isTextPresent(pendingActivitiesTable, "Activities Pending Approval"));
        assertTrue(isTextPresent(pendingActivitiesTable, "Activity Name"));
        assertTrue(isTextPresent(pendingActivitiesTable, "Status"));

        // Adjudication Request form
        assertTrue(isElementPresent(byDrop1));
        assertTrue(isElementPresent(byDrop2));
        assertTrue(isElementPresent(byDrop3));
        assertTrue(isElementPresent(byArea));
    }

    @Test
    public void testCancel() {
        // Clear the drop-downs
        eleDrop1.selectByIndex(0);
        eleDrop2.selectByIndex(0);
        eleDrop3.selectByIndex(0);

        clickCancel();


        assertTrue(getIndex(byDrop1).equals(indexDrop1));
        assertTrue(getIndex(byDrop2).equals(indexDrop2));
        assertTrue(getIndex(byDrop3).equals(indexDrop3));
    }

    @Test
    public void testUpdate() throws Exception {
        String tempDrop1Idx = indexDrop1.equals("1") ? "2" : "1";
        String tempDrop2Idx = indexDrop2.equals("1") ? "2" : "1";
        String tempDrop3Idx = indexDrop3.equals("1") ? "2" : "1";
        String tempAreaVal = "Ob la di, ob la da";

        eleDrop1.selectByIndex(Integer.parseInt(tempDrop1Idx));
        eleDrop2.selectByIndex(Integer.parseInt(tempDrop2Idx));
        eleDrop3.selectByIndex(Integer.parseInt(tempDrop3Idx));
        eleArea.clear();
        eleArea.sendKeys(tempAreaVal);

        clickSave();
        clickCancel();

        assertTrue(getValue(byArea).equals(tempAreaVal));
        assertTrue(getIndex(byDrop1).equals(tempDrop1Idx));
        assertTrue(getIndex(byDrop2).equals(tempDrop2Idx));
        assertTrue(getIndex(byDrop3).equals(tempDrop3Idx));

    }


    /*
     * Assign the screen elements
     */
    private void setUpElements() {
        eleReportingYr = new Select(findElement(byReportingYr));

        eleDrop1 = new Select(findElement(byDrop1));
        eleDrop2 = new Select(findElement(byDrop2));
        eleDrop3 = new Select(findElement(byDrop3));
        eleArea = findElement(byArea);
    }

    /*
     * Retreive the current values from the form and save them to variables
     */
    private void setUpFieldVals() {
        indexReportingYr = getIndex(byReportingYr);

        indexDrop1 = getIndex(byDrop1);
        indexDrop2 = getIndex(byDrop2);
        indexDrop3 = getIndex(byDrop3);
        valArea = getValue(byArea);
    }

    /*
     * Click the Add/Update button by focusing on the element first, clicking it,
     * waiting for the update status message, and finally setting up the page elements (again)
     */
    private void clickSave() throws Exception {

        if (isElementPresent(requestAdjBtn)) {
            findElement(requestAdjBtn).sendKeys();
            findElement(requestAdjBtn).click();
        } else {
            findElement(updateBtn).sendKeys();
            findElement(updateBtn).click();
        }
        waitForForm();
        waitasec();
        // apparently, the elements need to be set up again every time the page loads
        setUpElements();
    }

    /*
     * Click the cancel button by focusing on the element first, clicking it,
     * waiting for the spinner to disappear, and finally setting up the page elements (again)
     */
    private void clickCancel() {

        findElement(cancelBtn).sendKeys();
        findElement(cancelBtn).click();
        wait.until(ExpectedConditions.invisibilityOfElementLocated(
                By.cssSelector("form#form1 div:nth-child(2) span.rf-st-stop")));
        waitasec();

        // if any elements are reloaded (such as after a cancel/save button click), set them up again
        setUpElements();
    }


}
