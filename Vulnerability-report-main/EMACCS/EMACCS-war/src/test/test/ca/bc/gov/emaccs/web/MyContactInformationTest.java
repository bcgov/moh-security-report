/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        MyContactInformationTest.java                  *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package test.ca.bc.gov.emaccs.web;

import java.util.ArrayList;
import java.util.List;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;
import org.junit.Before;
import org.junit.Test;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;


/**
 *
 * @author joshua.lewis
 */
public class MyContactInformationTest extends BaseTestCase {

    private By saveBtnBy;
    private By cancelBtnBy;

    private By byAddress = By.name("form1:address");
    private By byCity = By.name("form1:city");
    private By byProv = By.name("form1:prov");
    private By byPostal = By.name("form1:postal");
    private By byLastUpdated = By.name("form1:lastUpdated");
    private By byPhonePri = By.name("form1:phonePri");
    private By byPhoneAlt = By.name("form1:phoneAlt");
    private By byEmail = By.name("form1:email");

    private WebElement eleAddress;
    private WebElement eleCity;
    private Select eleProv;
    private WebElement elePostal;
    private WebElement elePhonePri;
    private WebElement elePhoneAlt;
    private WebElement eleEmail;

    private String valAddress;
    private String valCity;
    private String valProv;
    private String valPostal;
    private String valPhonePri;
    private String valPhoneAlt;
    private String valEmail;


    @Before
    public void goToMyContactInfo() {
        findElement(By.linkText("EMACCS Home")).click();
        findElement(By.linkText("Update My Contact Info")).click();

        saveBtnBy = By.xpath("//input[@type='submit'][@value='Save']");
        cancelBtnBy = By.xpath("//input[@type='submit'][@value='Cancel']");

        setUpElements();
        setUpFieldVals();
    }


    @Test
    public void testPresence() throws InterruptedException {
        // Page header
        assertTrue(isTextPresent("My Contact Information"));

        // Required labels
        assertTrue(isTextPresent(By.id("form1:entry_body"), "Address"));
        assertTrue(isTextPresent(By.id("form1:entry_body"), "City"));
        assertTrue(isTextPresent(By.id("form1:entry_body"), "Province"));
        assertTrue(isTextPresent(By.id("form1:entry_body"), "Postal Code"));
        assertTrue(isTextPresent(By.id("form1:entry_body"), "Last Updated"));
        assertTrue(isTextPresent(By.id("form1:entry_body"), "Primary Contact"));
        assertTrue(isTextPresent(By.id("form1:entry_body"), "Alternate Contact"));
        assertTrue(isTextPresent(By.id("form1:entry_body"), "Email Address"));

        // Conditional label
        if (!getValue(By.id("form1:returnmail")).equals("0")) {
            assertTrue(isTextPresent("You have returned mail! Please update your mailing address!"));
        } else {
            assertFalse(isTextPresent("You have returned mail! Please update your mailing address!"));
        }

        // These fields should be populated on first load
        assertFalse(getValue(byAddress).isEmpty());
        assertFalse(getValue(byCity).isEmpty());
        assertFalse(getValue(byPostal).isEmpty());
        assertFalse(getValue(byPhonePri).isEmpty());

        // Check the province list
        List<WebElement> provOptions = eleProv.getOptions();
        List<String> provs = new ArrayList<String>();

        for (WebElement prov : provOptions) {
            provs.add(prov.getAttribute("value"));
        }

        assertTrue(provs.contains("AB"));
        assertTrue(provs.contains("BC"));
        assertTrue(provs.contains("MB"));
        assertTrue(provs.contains("NB"));
        assertTrue(provs.contains("NL"));
        assertTrue(provs.contains("NS"));
        assertTrue(provs.contains("NT"));
        assertTrue(provs.contains("NU"));
        assertTrue(provs.contains("ON"));
        assertTrue(provs.contains("PE"));
        assertTrue(provs.contains("QC"));
        assertTrue(provs.contains("SK"));
        assertTrue(provs.contains("YT"));

        // This field is not editable
        assertFalse(findElement(byLastUpdated).isEnabled());
    }

    @Test
    public void testErrorMsgs() throws Exception {
        //Test success
        clickSave();
        assertTrue(isTextPresent("Update Successful"));

        // Test that the alternate phone and email are NOT required
        valPhoneAlt = getValue(byPhoneAlt);
        valEmail = getValue(byEmail);
        elePhoneAlt.clear();
        eleEmail.clear();
        clickSave();
        assertTrue(isTextPresent("Update Successful"));

        // restore previous values for these fields
        elePhoneAlt.sendKeys(valPhoneAlt);
        eleEmail.sendKeys(valEmail);


        //Test errors
        eleAddress.clear();
        clickSave();
        assertTrue(isTextPresent("Address is required"));

        eleCity.clear();
        clickSave();
        assertTrue(isTextPresent("Address is required"));
        assertTrue(isTextPresent("City is required"));

        elePostal.clear();
        elePhonePri.clear();
        clickSave();
        assertTrue(isTextPresent("Address is required"));
        assertTrue(isTextPresent("City is required"));
        assertTrue(isTextPresent("Postal Code is required"));
        assertTrue(isTextPresent("Phone no. is required"));
    }

    @Test
    public void testCancel() {
        eleAddress.clear();
        eleCity.clear();
        elePostal.clear();
        elePhonePri.clear();
        elePhoneAlt.clear();
        eleEmail.clear();

        clickCancel();

        assertTrue(getValue(byAddress).equals(valAddress));
        assertTrue(getValue(byCity).equals(valCity));
        assertTrue(getValue(byProv).equals(valProv));
        assertTrue(getValue(byPostal).equals(valPostal));
        assertTrue(getValue(byPhonePri).equals(valPhonePri));
        assertTrue(getValue(byPhoneAlt).equals(valPhoneAlt));
        assertTrue(getValue(byEmail).equals(valEmail));

    }

    @Test
    public void testUpdate() throws Exception {
        String tempAddressVal = "123 Evergreen Terrace";
        String tempCityVal = "Springfield";
        String tempProvVal = "YT";
        String tempPostalVal = "H0H 0H0";
        String tempPhonePriVal = "(888) 555-1234";
        String tempPhoneAltVal = "(888) 555-1234";
        String tempEmailVal = "testy@tester.ca";

        eleAddress.clear();
        eleAddress.sendKeys(tempAddressVal);
        clickSave();
        clickCancel();
        assertTrue(getValue(byAddress).equals(tempAddressVal));

        eleCity.clear();
        eleCity.sendKeys(tempCityVal);
        clickSave();
        clickCancel();
        assertTrue(getValue(byAddress).equals(tempAddressVal));
        assertTrue(getValue(byCity).equals(tempCityVal));

        eleProv.selectByValue(tempProvVal);
        clickSave();
        clickCancel();
        assertTrue(getValue(byAddress).equals(tempAddressVal));
        assertTrue(getValue(byCity).equals(tempCityVal));
        assertTrue(getValue(byProv).equals(tempProvVal));

        elePostal.clear();
        elePostal.sendKeys(tempPostalVal);
        clickSave();
        clickCancel();
        assertTrue(getValue(byPostal).equals(tempPostalVal));
        assertTrue(getValue(byAddress).equals(tempAddressVal));
        assertTrue(getValue(byCity).equals(tempCityVal));
        assertTrue(getValue(byProv).equals(tempProvVal));


        elePhonePri.clear();
        elePhonePri.sendKeys(tempPhonePriVal);
        clickSave();
        clickCancel();
        assertTrue(getValue(byPhonePri).equals(tempPhonePriVal));
        assertTrue(getValue(byPostal).equals(tempPostalVal));
        assertTrue(getValue(byAddress).equals(tempAddressVal));
        assertTrue(getValue(byCity).equals(tempCityVal));
        assertTrue(getValue(byProv).equals(tempProvVal));

        elePhoneAlt.clear();
        elePhoneAlt.sendKeys(tempPhoneAltVal);
        clickSave();
        clickCancel();
        assertTrue(getValue(byPhoneAlt).equals(tempPhoneAltVal));
        assertTrue(getValue(byPhonePri).equals(tempPhonePriVal));
        assertTrue(getValue(byPostal).equals(tempPostalVal));
        assertTrue(getValue(byAddress).equals(tempAddressVal));
        assertTrue(getValue(byCity).equals(tempCityVal));
        assertTrue(getValue(byProv).equals(tempProvVal));

        eleEmail.clear();
        eleEmail.sendKeys(tempEmailVal);
        clickSave();
        clickCancel();
        assertTrue(getValue(byEmail).equals(tempEmailVal));
        assertTrue(getValue(byPhoneAlt).equals(tempPhoneAltVal));
        assertTrue(getValue(byPhonePri).equals(tempPhonePriVal));
        assertTrue(getValue(byPostal).equals(tempPostalVal));
        assertTrue(getValue(byAddress).equals(tempAddressVal));
        assertTrue(getValue(byCity).equals(tempCityVal));
        assertTrue(getValue(byProv).equals(tempProvVal));


        eleAddress.clear();
        eleCity.clear();
        elePostal.clear();
        elePhonePri.clear();
        elePhoneAlt.clear();
        eleEmail.clear();
        eleAddress.sendKeys(valAddress);
        eleCity.sendKeys(valCity);
        eleProv.selectByValue(valProv);
        elePostal.sendKeys(valPostal);
        elePhonePri.sendKeys(valPhonePri);
        elePhoneAlt.sendKeys(valPhoneAlt);
        eleEmail.sendKeys(valEmail);
        clickSave();
    }

    // Assign the screen elements
    private void setUpElements() {
        eleAddress = findElement(byAddress);
        eleCity = findElement(byCity);
        eleProv = new Select(findElement(byProv));
        elePostal = findElement(byPostal);
        elePhonePri = findElement(byPhonePri);
        elePhoneAlt = findElement(byPhoneAlt);
        eleEmail = findElement(byEmail);
    }

    // Retreive the current values from the form and save them to variables
    private void setUpFieldVals() {
        valAddress = getValue(byAddress);
        valCity = getValue(byCity);
        valProv = getValue(byProv);
        valPostal = getValue(byPostal);
        valPhonePri = getValue(byPhonePri);
        valPhoneAlt = getValue(byPhoneAlt);
        valEmail = getValue(byEmail);
    }

    private void clickSave() throws Exception {
        findElement(saveBtnBy).sendKeys();
        findElement(saveBtnBy).click();
        waitForForm();
        waitasec();

        // apparently, the elements need to be set up again every time the page loads
        setUpElements();
    }

    private void clickCancel() {
        findElement(cancelBtnBy).click();
        waitasec();

        // if any elements are reloaded (such as after a cancel/save button click), set them up again
        setUpElements();
    }
}
