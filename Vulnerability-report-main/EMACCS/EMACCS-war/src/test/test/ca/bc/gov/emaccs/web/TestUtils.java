/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        TestUtils.java                                 *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package test.ca.bc.gov.emaccs.web;

import java.util.logging.Level;
import java.util.logging.Logger;
import static org.junit.Assert.fail;
import org.openqa.selenium.By;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.WebDriverWait;

/**
 *
 * @author joshua.lewis
 */
public class TestUtils {

    protected WebDriver driver;
    protected WebDriverWait wait;

    protected void waitForForm() throws Exception {
        for (int second = 0;; second++) {
            if (second >= 60) {
                fail("timeout");
            }
            try {
                if (isElementPresent(By.cssSelector("span.rf-msgs-sum"))) {
                    break;
                }
            } catch (Exception e) {
            }
            Thread.sleep(1000);
        }
    }

    protected boolean isTextPresent (String searchText) {
        return isTextPresent(By.id("content"), searchText);
    }

    protected boolean isTextPresent (By byArg, String searchText) {
        for (int second = 0;; second++) {
            if (second >= 60) {
                return false;
            }
            try {
                if (isElementPresent(byArg)) {
                    return driver.findElement(byArg).getText().matches(regexIt(searchText));
                }
            } catch (Exception e) {
            }
            try {
                Thread.sleep(500);
            } catch (InterruptedException ex) {
            }
        }
    }

    protected boolean isElementPresent(By by) {
        try {
            driver.findElement(by);
            return true;
        } catch (NoSuchElementException e) {
            return false;
        }
    }

    /**
     * Use a regular expression to search a block of text for a string
     * @param arg
     * @return a string formatted with a regular expression
     */
    protected String regexIt(String arg) {
        return "^[\\s\\S]*" + arg + "[\\s\\S]*$";
    }

    /**
     * Takes in a 'By' and returns the locator string
     * @param by
     * @return a locator string
     */
    protected String getByStr(By by) {
        String returnVal = by.toString();

        returnVal = returnVal.substring(returnVal.indexOf(" ")+1);

        return returnVal;
    }

    protected String getValue(By by) {
        try {
            WebElement ele = wait.until(ExpectedConditions.presenceOfElementLocated(by));
            return ele.getAttribute("value");
        } catch (NoSuchElementException e) {
            return "";
        }
    }

    protected String getIndex(By by) {
        try {
            Select ele = new Select(wait.until(ExpectedConditions.presenceOfElementLocated(by)));
            return ele.getFirstSelectedOption().getAttribute("index");
        } catch (NoSuchElementException e) {
            return "";
        }
    }

    protected WebElement findElement(By by) {
        try {
            return wait.until(ExpectedConditions.presenceOfElementLocated(by));
        } catch (NoSuchElementException e) {
            return null;
        }
    }

    protected void waitasec() {
        try {
            Thread.sleep(2000);
        } catch (InterruptedException ex) {
        }
    }

}
