/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        MaintainNocpCompetencyType.java                *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/
package ca.bc.gov.health.emaccs.web;

import ca.bc.gov.health.ejb.exception.FacadeException;
import ca.bc.gov.health.emaccs.ejb.entity.NocpArea;
import ca.bc.gov.health.emaccs.ejb.entity.NocpCompetencyType;
import ca.bc.gov.health.emaccs.ejb.session.NocpAreaFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.NocpCompetencyTypeFacadeLocal;
import ca.bc.gov.health.jsf.BaseBean;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Backing bean for NocpCompetencyType code table maintenance
 */
@ViewScoped
@Named("MaintainNocpCompetencyType")
public class MaintainNocpCompetencyType extends BaseBean implements java.io.Serializable {

    private static final long serialVersionUID = 1L;
    private static final String CLASS_NAME = MaintainNocpCompetencyType.class.getName();
    private static final Logger log = Logger.getLogger(CLASS_NAME);

    @EJB
    private NocpCompetencyTypeFacadeLocal nocpCompetencyTypeFacade;
    @EJB
    private NocpAreaFacadeLocal nocpAreaFacade;

    @Inject
    private Droplists droplists;

    private List<NocpCompetencyType> allNocpCompetencyTypes;
    private NocpCompetencyType nocpCompetencyType;

    public MaintainNocpCompetencyType() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        allNocpCompetencyTypes = nocpCompetencyTypeFacade.findAll();
        nocpCompetencyType = new NocpCompetencyType();
        nocpCompetencyType.setId(new Date().getTime());
        nocpCompetencyType.setNocpAreaId(new NocpArea());
    }

    public void clear() {
        nocpCompetencyType = new NocpCompetencyType();

        // This ID is temporary, and is used to compare  objects
        nocpCompetencyType.setId(new Date().getTime());
        nocpCompetencyType.setNocpAreaId(new NocpArea());

    }

    /**
     * Adds a new record
     */
    public void add() {
        nullify();
        nocpCompetencyType.setId(null);
        try {
            nocpCompetencyTypeFacade.create(nocpCompetencyType);
            nocpCompetencyType.setNocpAreaId(nocpAreaFacade.find(nocpCompetencyType.getNocpAreaId().getId()));
            allNocpCompetencyTypes.add(0, nocpCompetencyType);
            droplists.initNocpTypes();
            addInfoMessage("Add Successful");
        } catch (FacadeException e) {
            if (e.getExceptionClass().getSimpleName().equals("PersistenceException")) {
                addErrorMessage("Error encountered during add. Check that the entry does not already exist or try again after leaving the page");
            } else {
                addErrorMessage("Error encountered during add. Cannot add record with code" + nocpCompetencyType.getCompetencyCode() + " and name:" + nocpCompetencyType.getCompetencyName());
            }
        } catch (Exception e) {
            addErrorMessage("Error encountered. Cannot add record with code" + nocpCompetencyType.getCompetencyCode() + " and name:" + nocpCompetencyType.getCompetencyName());
            log.log(Level.WARNING, "Unable to add record {0}", e.getMessage());
        }
        clear();
    }

    /**
     * Updates an existing record
     */
    public void update() {
        nullify();
        nocpCompetencyType.setNocpAreaId(new NocpArea(nocpCompetencyType.getNocpAreaId().getId()));
        NocpCompetencyType replacement = null;
        nocpCompetencyType.getNocpAreaId();
        nocpCompetencyType.getNocpAreaId().getAreaName();
        try {
            replacement = nocpCompetencyTypeFacade.edit(nocpCompetencyType);
            droplists.initNocpSubtypes();
            addInfoMessage("Update Successful");
        } catch (Exception e) {
            addErrorMessage("Update Failed.");
            log.log(Level.WARNING, "Unable to update record: {0}", e.getMessage());
        }
        if (replacement != null) {
            try {
                int index = allNocpCompetencyTypes.indexOf(nocpCompetencyType);
                try {
                    allNocpCompetencyTypes.set(index, replacement);
                } catch (Exception e) {
                    init();
                }
            } catch (Exception e) {
                log.log(Level.SEVERE, "Unable to replace updated record: {0}", e.getMessage());
            }
        }
        clear();
    }

    /**
     * Deletes a record
     */
    public void delete() {
        nullify();
        try {

            nocpCompetencyTypeFacade.remove(nocpCompetencyType);
            boolean worked = allNocpCompetencyTypes.remove(nocpCompetencyType);
            if (!worked) {
                init();
            }
            droplists.initNocpSubtypes();
            addInfoMessage("Remove Successful");
        } catch (Exception e) {
            addInfoMessage("Remove Failed");
            addErrorMessage("Error encountered. Cannot delete record with code" + nocpCompetencyType.getCompetencyCode() + " and name:" + nocpCompetencyType.getCompetencyName());
            log.log(Level.WARNING, "Unable to delete record {0}", e.getMessage());
        }
        log.log(Level.WARNING, "Delete Successful");
        clear();
    }

    /**
     * Selects a record for editing
     */
    public void select() {

    }

    /**
     * Nullifies any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (nocpCompetencyType.getNocpAreaId() != null && nocpCompetencyType.getNocpAreaId().getId() == null) {
            nocpCompetencyType.setNocpAreaId(null);
        }
    }

    /*
     * Getters and Setters
     */

    public List<NocpCompetencyType> getAllNocpCompetencyTypes() {
        return allNocpCompetencyTypes;
    }

    public void setAllNocpCompetencyTypes(List<NocpCompetencyType> allNocpCompetencyTypes) {
        this.allNocpCompetencyTypes = allNocpCompetencyTypes;
    }

    public NocpCompetencyType getNocpCompetencyType() {
        return nocpCompetencyType;
    }

    public void setNocpCompetencyType(NocpCompetencyType nocpCompetencyType) {
        this.nocpCompetencyType = nocpCompetencyType;
    }

}
