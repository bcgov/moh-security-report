/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        SelectItemHelper.java                          *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.jsf;

import jakarta.faces.model.SelectItem;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.beanutils.PropertyUtils;

/**
 *
 * @author greg.perkins
 */
public class SelectItemHelper implements Serializable {
  private static final String CLASS_NAME = SelectItemHelper.class.getName();
  private static final Logger log = Logger.getLogger(CLASS_NAME );
    // with only the list itself
    private SelectItemHelper(){
    }
    public static List buildSelectItemList(List list) {
        List outList = new ArrayList();
        try{
            for (Iterator it = list.iterator(); it.hasNext();) {
                Object item = it.next();
                SelectItem selectItem = new SelectItem();
                try {
                    selectItem.setValue(item);
                    selectItem.setLabel(item.toString());
                    outList.add(selectItem);
                } catch (Exception e) {
                    /*ignore*/
                }
            }
        }catch(Exception e){
            log.log(Level.SEVERE, "Failure buildSelectItemList: {0} message: {1}", new Object[]{e.getClass().getSimpleName(), e.getMessage()});
        }
        return outList;
    }

    // without second label string
    // without sorting
    public static List buildSelectItemList(List list,
            String labelProperty,
            String valueProperty) {
        return buildSelectItemList(list, labelProperty, null, valueProperty, true);
    }

    // without second label string
    public static List buildSelectItemList(List list,
            String labelProperty,
            String valueProperty, boolean doSort) {
        return buildSelectItemList(list, labelProperty, null, valueProperty, doSort);
    }

    // without sorting
    public static List buildSelectItemList(List list,
            String labelPropertyPrefix, String labelPropertySuffix,
            String valueProperty) {
        return buildSelectItemList(list, labelPropertyPrefix, labelPropertySuffix, valueProperty, true);
    }

        public static List buildSelectItemList(List list,
            String labelPropertyPrefix, String labelPropertySuffix,
            String valueProperty, boolean doSort) {
            return buildSelectItemList(list, labelPropertyPrefix, labelPropertySuffix, valueProperty, doSort, 110);
        }
    
    // with all inputs
    public static List buildSelectItemList(List list,
            String labelPropertyPrefix, String labelPropertySuffix,
            String valueProperty, boolean doSort, int maxLength) {

        List outList = new ArrayList();
        for (Iterator it = list.iterator(); it.hasNext();) {
            Object item = it.next();
            SelectItem selectItem = new SelectItem();
            try {
                selectItem.setValue(PropertyUtils.getProperty(item, valueProperty));
                String label = PropertyUtils.getProperty(item, labelPropertyPrefix).toString();
                label = labelPropertySuffix == null ? label : label + " - " + PropertyUtils.getProperty(item, labelPropertySuffix).toString();
                if (label.length()>maxLength){
                    label = label.substring(0,97)+"...";
                }
                selectItem.setLabel(label);
                outList.add(selectItem);
            } catch (Exception e) {
                /*ignore*/
            }
        }
        if (doSort) {
            Collections.sort(outList, new Comparator<SelectItem>() {
                @Override
                public int compare(SelectItem o1, SelectItem o2) {
                    return o1.getLabel().compareTo(o2.getLabel());
                }
            });
        }
        return outList;
    }
}
