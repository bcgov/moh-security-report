/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        RequiredDataFilter.java                        *
 * Date of Last Commit: $Date::                                              $ *
 * Revision Number:      $Rev::                                              $ *
 * Last Commit by:    $Author::                                              $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.jsf;

import ca.bc.gov.health.emaccs.web.User;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.event.PhaseEvent;
import jakarta.faces.event.PhaseId;
import jakarta.faces.event.PhaseListener;
import java.io.Serializable;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author ian.scott
 */
public class RequiredDataFilter  implements PhaseListener,Serializable {

    static final Logger logger = Logger.getLogger(RequiredDataFilter.class.getName());
    
  public RequiredDataFilter(){

    }
    
  
  @Override
     public PhaseId getPhaseId() {
         return PhaseId.ANY_PHASE;
     }
  
     /**
      * Pre-processor for our Phase.
      * Checks the authorization provider, and throws a 403 error if we
      * don't have the appropriate authorization.
      * 
      * @param phaseEvent
      */    
    @Override
     public void beforePhase(PhaseEvent phaseEvent) { 
        logger.fine(phaseEvent.getPhaseId().toString());
     }
     
     /**
      * Post-processor for our Phase.
      * Checks the authorization provider, and throws a 403 error if we
      * don't have the appropriate authorization.
      * 
      * @param phaseEvent
      */
    @Override
     public void afterPhase(PhaseEvent phaseEvent){
        if (phaseEvent.getPhaseId().equals(PhaseId.RESTORE_VIEW)){
            FacesContext ctx = phaseEvent.getFacesContext();
           
            //TODO - only cares about EMA..
            try{
              Class userClass = User.class;
              User user = (User) ctx.getApplication().evaluateExpressionGet(ctx, "#{"+userClass.getSimpleName()+"}", userClass);
              if(user !=null){
                   if(user.getUserRole().equals("EMA") &&user.getEmaId()==null){
                     addErrorMessage("Your licence number appears to be invalid, please notify keepalicense@gov.bc.ca to have this remedied.",ctx);
                     ctx.getApplication() .getNavigationHandler().handleNavigation(ctx, null, "error");
                     ctx.renderResponse();
                    }
                   String uName = user.getUserName();
                   if(uName==null||user.getUserName().isEmpty()){
                       //TODO - improve - e.g new page with better desc
                       //TODO - this will impact new users as well, need to be more clever.
                    // does not work - addErrorMessage("Your session has expired please log out and back in to continue",ctx);
                     // does not work - ctx.getApplication() .getNavigationHandler().handleNavigation(ctx, null, "error");
                     // does not work - ctx.renderResponse();
                   }
              }
            }catch(Exception e){
                logger.log(Level.SEVERE, "Exception caught afterPhase: {0} message: {1}", new Object[]{e.getClass().getSimpleName(), e.getMessage()});
            }
        }
     }
    

    private void addErrorMessage(String msg,FacesContext ctx) {
        addMessage(msg, FacesMessage.SEVERITY_ERROR, ctx);
    }


    private void addMessage(String msg, FacesMessage.Severity severity,FacesContext ctx) {
        //the first time user.init is run an info message of the same sentence is added, checking here removes duplicate entries quick and easy
        if(ctx.getMessageList().size() !=1){
            ctx.addMessage(null, new FacesMessage(severity, msg, msg));
        }
    }
    
    


    
}
