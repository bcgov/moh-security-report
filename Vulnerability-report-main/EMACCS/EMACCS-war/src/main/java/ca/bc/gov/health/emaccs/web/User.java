/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        User.java                                      *
 * Date of Last Commit: $Date:: 2015-06-25 11:57:08 -0700 (Thu, 25 Jun 2015) $ *
 * Revision Number:      $Rev:: 2551                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.emaccs.web;

import ca.bc.gov.health.emaccs.ejb.entity.EmergencyMedicalAssistant;
import ca.bc.gov.health.emaccs.ejb.entity.Qualification;
import ca.bc.gov.health.emaccs.ejb.session.EmaccsApplicationVariablesFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.EmergencyMedicalAssistantFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.QualificationFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.UsersFacadeLocal;
import ca.bc.gov.health.jsf.BaseBean;
import static ca.bc.gov.health.util.Constants.CLAIM_SITEMINDER_GUID;
import static ca.bc.gov.health.util.Constants.ROLE_EMA;
import static ca.bc.gov.health.util.Constants.ROLE_NONE;
import static ca.bc.gov.health.util.Constants.ROLE_UNKNOWN;
import ca.bc.gov.health.util.SecurityUtil;
import fish.payara.security.openid.api.AccessToken;
import fish.payara.security.openid.api.OpenIdContext;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.SessionScoped;
import jakarta.faces.context.ExternalContext;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.security.Principal;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Common session scoped bean to hold user information
 *
 * @author greg.perkins
 */
@SessionScoped
@Named("User")
public class User extends BaseBean implements Serializable {

    private static final long serialVersionUID = 1L;
    private boolean isInactive = true;
    private boolean inactiveSet = false;
    private boolean noAccess = true;
    private boolean noAccessSet = false;
    private String userName = "";
    private String userRole = "";
    private String userGuid = "";

    private static final String CLASS_NAME = User.class.getName();
    private static final Logger log = Logger.getLogger(CLASS_NAME);

    private Long refreshTime = 00L;

    @Inject
    private OpenIdContext context;

    /*
     * Facades for persistence
     */
    @EJB
    private EmergencyMedicalAssistantFacadeLocal emergencyMedicalAssistantFacade;
    @EJB
    private QualificationFacadeLocal qualificationFacade;
    @EJB
    private EmaccsApplicationVariablesFacadeLocal emaccsApplicationVariablesFacade;

    @EJB
    private UsersFacadeLocal usersFacade;

    private EmergencyMedicalAssistant emergencyMedicalAssistant = new EmergencyMedicalAssistant();

    @PostConstruct
    public void init() {
        Calendar date = new GregorianCalendar();
        date.set(Calendar.HOUR_OF_DAY, 0);
        date.set(Calendar.MINUTE, 0);
        date.set(Calendar.SECOND, 0);
        date.set(Calendar.MILLISECOND, 0);
        date.add(Calendar.DAY_OF_MONTH, 1);
        refreshTime = date.getTimeInMillis();

        getUserRole();
        getUserName();
        getIsInactive();
        getNoAccess();

        try {
            // XXX This code is quite redundant with EmaccsIdentityStore but there isn't
            // easy way to pass information
            AccessToken token = context.getAccessToken();
            ExternalContext externalContext = FacesContext.getCurrentInstance().getExternalContext();
            userGuid = token.getJwtClaims().getStringClaim(CLAIM_SITEMINDER_GUID).get();

            log.info("Context groups " + context.getCallerGroups());

            emergencyMedicalAssistant = new EmergencyMedicalAssistant();

            // Check the role established in EmaccsIdentityStore
            if (externalContext.isUserInRole(ROLE_EMA) || externalContext.isUserInRole(ROLE_NONE)) {
                // EMA user
                emergencyMedicalAssistant = emergencyMedicalAssistantFacade.findByUserGuid(userGuid);
                userRole = emergencyMedicalAssistant.getRole();
            } else if (externalContext.isUserInRole(ROLE_UNKNOWN)) {
                userRole = ROLE_UNKNOWN;
            } else {
                // must be an admin user. Pull from Keycloak
                populateAdminUserFromToken(token);
            }

        } catch (Exception e) {
            super.addErrorMessage("Try again later or contact EMA Licencing. User retrieval failed.");
            log.log(Level.SEVERE, "Unable to setup the Licenced User due to {0} with message {1}",
                    new Object[]{e.getClass().getSimpleName(), e.getMessage()});
            emergencyMedicalAssistant = new EmergencyMedicalAssistant();
        }

    }

    //Taken from base bean to prevent cyclical references
    public String getUserRole() {
        if (System.currentTimeMillis() > refreshTime) {
            init();
        }
        return userRole;
    }

    /**
     * Returns the currently logged in user's name, formatted for display
     *
     * @return String
     */
    public String getDisplayName() {
        return String.format("%s %s", emergencyMedicalAssistant.getFname(), emergencyMedicalAssistant.getLname());
    }

    public Long getEmaId() {
        return emergencyMedicalAssistant.getRegisId();
    }

    public String getEmaEmail() {
        return emergencyMedicalAssistant.getEmail();
    }

    public String getStatusCode() {
        if (System.currentTimeMillis() > refreshTime) {
            init();
        }
        return emergencyMedicalAssistant.getStatus().getWsgcode();
    }

    public String getStatusDesc() {
        if (System.currentTimeMillis() > refreshTime) {
            init();
        }
        return emergencyMedicalAssistant.getStatus().getLkwDesc();
    }

    /**
     * Returns the currently logged in user's Licence Number
     *
     * @return String
     */
    public String getLicenceNo() {
        return emergencyMedicalAssistant.getLicno();
    }

    /**
     * Returns true if the user's returned mail flag is set
     *
     * @return boolean
     */
    public boolean isReturnedMail() {
        if (getUserRole().equals("EMA") && emergencyMedicalAssistant.getReturnmail() != null) {
            return emergencyMedicalAssistant.getReturnmail() == -1;
        }

        return false;
    }

    public void setReturnedMail(Short flag) {
        emergencyMedicalAssistant.setReturnmail(flag);
    }

    /**
     * Pulls the current user's name
     *
     * @return String
     */
    public String getUserName() {
        Principal user = (Principal) FacesContext.getCurrentInstance().getExternalContext().getUserPrincipal();
        if (user == null) {
            return "";
        }
        userName = SecurityUtil.formatUserName(user.getName());

        return userName;
    }

    /**
     * Determines if we have a known user logged in
     */
    public boolean isKnownUser() {
        return emergencyMedicalAssistant.getFname() != null;
    }

    public boolean isValidLicenceNumber(String licNo) {
        // licences have to be 6 digits
        if (licNo.length() != 6) {
            return false;
        } else {
            return emergencyMedicalAssistantFacade.isValidEma(licNo);
        }

    }

    /**
     * *
     * * checks if the EMA is a student by licence number
     *
     * @param licNo - the licence number of the EMA to check
     * @return true if they are a student(EMA's status is S13)
     */
    public boolean isStudentEMA() {
        if (System.currentTimeMillis() > refreshTime) {
            init();
        }
        // if the licence number doesn't exist, it cannot be a student 
        // next, the status code must be S13
        return emergencyMedicalAssistantFacade.isStudentEma(emergencyMedicalAssistant.getLicno());
    }

    /**
     * *
     * * checks that the they are a qualifying EMA who is not a student by licence no
     *
     * @param licNo - the licence number of the EMA to check
     * @return true if they are an EMA (by emaccs standards) and not a student(status is NOT S13)
     */
    public boolean isNonStudentEMA() {
        if (System.currentTimeMillis() > refreshTime) {
            init();
        }
        String role = this.getUserRole();
        if (role == null || !role.equals("EMA")) {
            return false;
        }
        boolean result = !emergencyMedicalAssistantFacade.isStudentEma(emergencyMedicalAssistant.getLicno());
        return result;
    }

    public String getExpiredSuspendedDates() {
        if (System.currentTimeMillis() > refreshTime) {
            init();
        }
        Qualification qualRecord = new Qualification(new EmergencyMedicalAssistant(emergencyMedicalAssistant.getRegisId()));
        List<Qualification> quals = qualificationFacade.search(qualRecord);
        qualRecord = quals.get(0);
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd");

        return String.format("Expiry Date: %s | Suspension Date: %s",
                qualRecord.getLicexpdt() == null ? "None" : sdf.format(qualRecord.getLicexpdt()),
                qualRecord.getEnddate() == null ? "None" : sdf.format(qualRecord.getEnddate()));
    }

    public boolean getNoAccess() {
        noAccess = emergencyMedicalAssistantFacade.isNoAccess(emergencyMedicalAssistant.getLicno());
        return noAccess;
    }

    public boolean getIsInactive() {
        //TODO test with: 102517,104836,111107
        isInactive = emergencyMedicalAssistantFacade.isInactive(emergencyMedicalAssistant.getLicno());
        return isInactive;
    }

    //TODO move to User
    //used in xhtml pages
    public boolean isCCExempt(Long reportingYearId) {
        if (System.currentTimeMillis() > refreshTime) {
            init();
        }
        return emergencyMedicalAssistantFacade.isExemptEMA(reportingYearId, getLicenceNo());
    }

    //TODO move to User
    //used in xhtml pages
    public boolean isShortFall(Long reportingYearId) {
        if (System.currentTimeMillis() > refreshTime) {
            init();
        }
        if (getUserRole().equals("EMA")) {
            return emergencyMedicalAssistantFacade.isInShortfall(reportingYearId, getLicenceNo());
        } else {
            return true;
        }
    }

    //TODO move to User
    //used in xhtml pages
    public boolean isCurrentYearShortFall() {
        if (System.currentTimeMillis() > refreshTime) {
            init();
        }
        return emergencyMedicalAssistantFacade.isInShortfall(emaccsApplicationVariablesFacade.getCurrentReportingYearId(), getLicenceNo());
    }

    //TODO move to User
    //used in xhtml pages
    public boolean isPreviousYearShortFall() {
        if (System.currentTimeMillis() > refreshTime) {
            init();
        }
        return emergencyMedicalAssistantFacade.isInShortfall(emaccsApplicationVariablesFacade.getPreviousReportingYearId(), getLicenceNo());
    }

    //TODO move to User
    //used in xhtml pages
    public boolean isPendingAdj(Long reportingYearId) {
        if (System.currentTimeMillis() > refreshTime) {
            init();
        }
        if (getUserRole().equals("EMA")) {
            return emergencyMedicalAssistantFacade.isPendingAdjudication(reportingYearId, getLicenceNo());
        } else {
            return true;
        }
    }
    //TODO have editable year (log reportyear) precalculated
    //todo have shortfall and adj year info calculated in curr and prev

    public String getUserGuid() {
        return userGuid;
    }

    public void setUserGuid(String userGuid) {
        this.userGuid = userGuid;
    }

    private void populateAdminUserFromToken(AccessToken token) {
        // Assume there is only a single role
        userRole = SecurityUtil.loadKeycloakRoles(token).get(0);

        emergencyMedicalAssistant.setFname(token.getJwtClaims().getStringClaim("given_name").orElse(""));
        emergencyMedicalAssistant.setLname(token.getJwtClaims().getStringClaim("family_name").orElse(""));
        emergencyMedicalAssistant.setEmail(token.getJwtClaims().getStringClaim("email").orElse(""));
    }

}
