/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        MaintainContactSubtype.java                    *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

package ca.bc.gov.health.emaccs.web;

import ca.bc.gov.health.emaccs.ejb.entity.ContactSubtype;
import ca.bc.gov.health.emaccs.ejb.entity.ContactType;
import ca.bc.gov.health.emaccs.ejb.session.ContactSubtypeFacadeLocal;
import ca.bc.gov.health.jsf.BaseBean;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.ejb.EJBException;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.util.List;

/**
 * Backing bean for ContactSubtype code table maintenance
*/
@ViewScoped
@Named("MaintainContactSubtype")
public class MaintainContactSubtype extends BaseBean implements java.io.Serializable {
    private static final long serialVersionUID = 1L;

    @EJB
    private ContactSubtypeFacadeLocal contactSubtypeFacade;

    @Inject
    private Droplists droplists;

    private List<ContactSubtype> allContactSubtypes;
    private ContactSubtype contactSubtype;
    private Object selectedKey;

    public MaintainContactSubtype() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        allContactSubtypes = contactSubtypeFacade.findAll();
        contactSubtype = new ContactSubtype();
        if (contactSubtype.getContactTypeId() == null) {
            contactSubtype.setContactTypeId(new ContactType());
        }
        droplists.initContactSubtypes();
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        try {
            contactSubtypeFacade.create(contactSubtype);
            addInfoMessage("Add Successful");
            init();
        } catch (EJBException e) {
            for (Throwable t = e.getCause(); t != null; t = t.getCause()) {
                if (t.getClass().getName().equals("java.sql.SQLException")) {

                    addErrorMessage("Cannot add record, as it violates a constraint. %n%s");
                }
            }

        }

        return clear();
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();
        // set contact type id for the selected contact type from the screen
        contactSubtype.setContactTypeId(new ContactType(contactSubtype.getContactTypeId().getId()));
        contactSubtypeFacade.edit(contactSubtype);
        addInfoMessage("Update Successful");
        init();
        return clear();
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        try {
            for (int i = 0; i < allContactSubtypes.size(); i++) {
                if (allContactSubtypes.get(i).getId().equals(selectedKey)) {
                    contactSubtypeFacade.remove(allContactSubtypes.get(i));
                }
            }
            addInfoMessage("Delete Successful");
            init();
        } catch (EJBException e) {
            for (Throwable t = e.getCause(); t != null; t = t.getCause()) {
                if (t.getClass().getName().equals("java.sql.SQLException")) {

                    addErrorMessage("Cannot remove record, as it violates a constraint. %n%s");
                }
            }

        }

        return clear();
    }

    /**
     * Clears the form
     */
    public String clear() {
        selectedKey = null;
        contactSubtype = new ContactSubtype();
        if (contactSubtype.getContactTypeId() == null) {
            contactSubtype.setContactTypeId(new ContactType());
        }
        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        for (int i = 0; i < allContactSubtypes.size(); i++) {
            if (allContactSubtypes.get(i).getId().equals(selectedKey)) {
                contactSubtype = allContactSubtypes.get(i);
            }
        }
        return null;
    }

    /**
     * Nullifies any parent records where proper PKs aren't set
     */
    private void nullify() {
    }

    /*
     * Getters and Setters
     */
    public List<ContactSubtype> getAllContactSubtypes() {
        return allContactSubtypes;
    }

    public void setAllContactSubtypes(List<ContactSubtype> allContactSubtypes) {
        this.allContactSubtypes = allContactSubtypes;
    }

    public ContactSubtype getContactSubtype() {
        return contactSubtype;
    }

    public void setContactSubtype(ContactSubtype contactSubtype) {
        this.contactSubtype = contactSubtype;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }
    
    //Required due to ManagedProperty above
    public void setDroplists(Droplists droplists) {
        this.droplists = droplists;
    }
}