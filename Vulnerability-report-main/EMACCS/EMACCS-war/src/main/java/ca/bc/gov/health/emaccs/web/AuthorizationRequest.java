/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        AuthorizationRequest.java                      *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.emaccs.web;

import ca.bc.gov.health.emaccs.ejb.entity.EmergencyMedicalAssistant;
import ca.bc.gov.health.emaccs.ejb.session.EmergencyMedicalAssistantFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.email.EmailFacadeLocal;
import ca.bc.gov.health.jsf.BaseBean;
import static ca.bc.gov.health.util.Constants.ROLE_EMA;
import static ca.bc.gov.health.util.Constants.ROLE_NONE;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.Date;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author greg.perkins
 */
@ViewScoped
@Named("AuthorizationRequest")
public class AuthorizationRequest extends BaseBean implements Serializable {

    private static final long serialVersionUID = 1L;

    private static final Logger LOGGER = Logger.getLogger(AuthorizationRequest.class.getName());

    @EJB
    private EmailFacadeLocal emailFacade;

    @EJB
    private EmergencyMedicalAssistantFacadeLocal emaFacade;

    @Inject
    private User user;

    private boolean submissionComplete = false;

    private String headerText;
    private String uGuid;
    private String lastName;
    private String firstName;
    private String userName;
    private Date dateOfBirth;
    private String licenceNo;
    private String phoneNumber;
    private String email;

    /**
     * Initialize the backing bean.
     */
    @PostConstruct
    public void initialize() {
        Map<String, String> headers = FacesContext.getCurrentInstance().getExternalContext().getRequestHeaderMap();

        userName = user.getUserName();
        uGuid = user.getUserGuid();

        LOGGER.info("userName: " + userName + ", uGuid: " + uGuid);

        StringBuilder buff = new StringBuilder(1024);
        for (Map.Entry<String, String> entry : headers.entrySet()) {
            String value = entry.getValue();
            buff.append("<li>").append(entry.getKey()).append(" = ").append(value).append("</li>");
        }
        headerText = buff.toString();
    }

    /**
     * Submit the authorization request.
     *
     * If the user already exists in the directory then the submitted data are merged to the existing entry. Otherwise a
     * new user is created in the directory.
     *
     * The authorization request is sent by email to the ministry that will review it and give the EMA role to the user.
     *
     * @return null
     */
    public String submit() {
        if (submissionComplete) {
            super.addInfoMessage("Resubmission disabled - your request has already been submitted. The ministry will contact you within 10 business days.");
            super.addInfoMessage("Contact EMA Licencing if changes are required.");
            clear();
            return null;
        }

        try {

            if (userName == null) {
                userName = firstName + "." + lastName;
            }

            if (!checkLicenseNumberValidity()) {
                LOGGER.log(Level.INFO, "Registered licence number does not match with the provided information.");
                super.addErrorMessage("The licence number was already registered and does not match the details you provided.");
                super.addInfoMessage("Contact EMA Licencing if changes are required.");
                return null;
            }

            boolean emailSent = false;

            EmergencyMedicalAssistant user = emaFacade.findByLicenceNo(Long.parseLong(licenceNo));

            StringBuilder sB = new StringBuilder();
            sB.append("Your request has been submitted and will be processed in the order it was received. Access can take up to 10 business days. ");
            sB.append("Please wait 10 business days before contacting the branch regarding your access. Any requests/inquiries made directly to the ");
            sB.append("branch prior to 10 business days regarding access may not be responded to. You will receive a confirmation email via the email ");
            sB.append("address you registered with once your access has been approved. Thank you for your cooperation.");

            // Make sure the user is registered (i.e. exists in REGIS)
            if (user != null) {
                boolean emaAlready = ROLE_EMA.equals(user.getRole());
                if (emaAlready) {
                	LOGGER.log(Level.INFO, "Licence number already has EMA role. Overwriting existing user and setting role to none.");
                }

                user.setRole(ROLE_NONE);
                user.setUserGuid(uGuid);
                user.setUserId(userName);

                emaFacade.edit(user);
                emailSent = emailFacade.sendAuthorizationRequest(firstName + " " + lastName, licenceNo, phoneNumber, email, sB.toString());
                LOGGER.log(Level.INFO, "New authorization request submitted: REGIS entry updated.");

                if (emailSent) {
                    super.addInfoMessage(sB.toString());
                    submissionComplete = true;
                } else {
                    LOGGER.log(Level.WARNING, "Authorization request could not be sent.");
                    super.addErrorMessage("Contact EMA Licencing your request has been submitted but notification failed.");
                    submissionComplete = true;
                }

            } else {
                // XXX If the user isn't in REGIS, then they can't request authorization as they haven't been registered in EMARRS
                LOGGER.log(Level.WARNING, "User {0} does not exist in REGIS.", userName);
                super.addErrorMessage("Contact EMA Licencing your request failed.");
                submissionComplete = true;
            }

        } catch (Exception exception) {
            super.addErrorMessage("Request Failed. Try again later, if the problem persists contact EMA Licencing");
            LOGGER.log(Level.WARNING, "User {0} was unable to submit request for access [{1}]", new Object[]{userName, exception.getMessage()});
        }
        clear();
        return null;
    }

    /**
     * @return the date of birth
     */
    public Date getDateOfBirth() {
        return dateOfBirth;
    }

    /**
     * Set the date of birth.
     *
     * @param dateOfBirth the new date of birth
     */
    public void setDateOfBirth(Date dateOfBirth) {
        this.dateOfBirth = dateOfBirth;
    }

    /**
     * @return the email address
     */
    public String getEmail() {
        return email;
    }

    /**
     * Set the email address.
     *
     * @param email the new email address
     */
    public void setEmail(String email) {
        this.email = email;
    }

    /**
     * @return the first name
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     * Set the first name.
     *
     * @param firstName the new first name
     */
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    /**
     * @return the last name
     */
    public String getLastName() {
        return lastName;
    }

    /**
     * Set the last name.
     *
     * @param lastName the new last name
     */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    /**
     * @return the licence number
     */
    public String getLicenceNo() {
        return licenceNo;
    }

    /**
     * Set the licence number.
     *
     * @param licenceNo the new licence number
     */
    public void setLicenceNo(String licenceNo) {
        this.licenceNo = licenceNo;
    }

    /**
     * @return the phone number
     */
    public String getPhoneNumber() {
        return phoneNumber;
    }

    /**
     * Set the phone number.
     *
     * @param phoneNumber the new phone number
     */
    public void setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
    }

    /**
     * @return the header text
     */
    public String getHeaderText() {
        return headerText;
    }

    /**
     * Sets the header text.
     *
     * @param headerText the new header text
     */
    public void setHeaderText(String headerText) {
        this.headerText = headerText;
    }

    private void clear() {
        this.lastName = "";
        this.firstName = "";
        this.dateOfBirth = null;
        this.licenceNo = "";
        this.phoneNumber = "";
        this.email = "";
    }

    private boolean checkLicenseNumberValidity() {

        return matchLicenceInDB(licenceNo);
    }

    private boolean matchLicenceInDB(String licenceNumber) {
        try {
            EmergencyMedicalAssistant ema = emaFacade.findByLicenceNo(Long.parseLong(licenceNumber));
            boolean isMatch = ema == null || ema.getFname().toUpperCase().contains(firstName.toUpperCase()) || ema.getLname().equalsIgnoreCase(lastName);
            return isMatch;
        } catch (NumberFormatException exception) {
            LOGGER.log(Level.WARNING, "Invalid licence number supplied.", exception);
            return false;
        }
    }
}
