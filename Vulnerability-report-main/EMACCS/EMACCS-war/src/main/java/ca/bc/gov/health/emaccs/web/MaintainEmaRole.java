/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        MaintainEmaRole.java                           *
 * Date of Last Commit: $Date::                                              $ *
 * Revision Number:      $Rev::                                              $ *
 * Last Commit by:    $Author::                                              $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.emaccs.web;

import ca.bc.gov.health.emaccs.ejb.entity.EmergencyMedicalAssistant;
import ca.bc.gov.health.emaccs.ejb.session.EmergencyMedicalAssistantFacadeLocal;
import ca.bc.gov.health.jsf.BaseBean;
import static ca.bc.gov.health.util.Constants.ROLE_EMA;
import static ca.bc.gov.health.util.Constants.ROLE_NONE;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Assign or remove a EMA role to a licensed EMA
 *
 * @author grant.shan
 */
@ViewScoped
@Named("MaintainEmaRole")
public class MaintainEmaRole extends BaseBean implements Serializable {

    private static final long serialVersionUID = 1L;
    private static final String CLASS_NAME = MaintainEmaRole.class.getName();
    private static final Logger log = Logger.getLogger(CLASS_NAME);

    @EJB
    private EmergencyMedicalAssistantFacadeLocal emaFacade;

    private EmergencyMedicalAssistant ema;
    private List<EmergencyMedicalAssistant> emas;

    /*
	 * PK of the selected instance
     */
    private Object selectedKey;
    private Boolean includeAll;
    private String firstName;
    private String lastName;
    private String licenseNo;
    private String userName;
    private boolean showGrantButton;
    private boolean showRevokeButton;
    private boolean showDeleteButton;

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        ema = new EmergencyMedicalAssistant();
        showGrantButton = false;
        showRevokeButton = false;
        showDeleteButton = false;
    }

    /**
     * Search REGIS entries
     *
     * @return null
     */
    public String search() {
        // verify if research champs are empty

        if ((userName == null && firstName == null && lastName == null && licenseNo == null)
                || (userName.length() <= 0 && firstName.length() <= 0 && lastName.length() <= 0
                && licenseNo.length() <= 0)) {
            addErrorMessage("Please enter search criteria in at least one of the input fields below");
            return null;
        }

        try {
            emas = emaFacade.find(userName, firstName, lastName, licenseNo, includeAll);
        } catch (Exception e) {
            log.log(Level.SEVERE, "error message: ", e);
            addErrorMessage("Search failed" + e.toString());
        }

        return null;
    }

    /**
     * Assign EMA role
     *
     * @return null
     */
    public String grantEmaRole() {
        try {
            ema.setRole(ROLE_EMA);
            emaFacade.edit(ema);
            setButtonStatus();
        } catch (Exception e) {
            addErrorMessage("Unable to grant role" + e.toString());
        }

        return null;
    }

    /**
     * Remove EMA role
     *
     * @return null
     */
    public String revokeEmaRole() {
        try {
            ema.setRole(ROLE_NONE);
            emaFacade.edit(ema);
            setButtonStatus();
        } catch (Exception e) {
            addErrorMessage("Unable to grant role" + e.toString());
        }

        return null;
    }

    /**
     * Delete an EMA User.
     *
     * @return null
     */
    public String deleteEMA() {
        String userId = ema.getUserId();

        // Remove all attributes added when the user created an AuthorizationRequest
        ema.setRole(null);
        ema.setUserId(null);
        ema.setUserGuid(null);
        emaFacade.edit(ema);

        addInfoMessage(userId + " deleted");
        clear();
        return null;
    }

    /**
     * Selects a record for editing
     *
     * @return null
     */
    public String select() {
        ema = this.emas.stream().filter(ema -> ema.getUserId().equals(selectedKey)).findFirst().get();
        this.firstName = ema.getFname();
        this.lastName = ema.getLname();
        this.licenseNo = ema.getLicno();
        this.userName = ema.getUserId();
        setButtonStatus();

        return null;
    }

    /**
     * Control if the buttons show on the screen
     */
    public void setButtonStatus() {
        showRevokeButton = ema != null
                && ROLE_EMA.equals(ema.getRole());
        showGrantButton = ema != null
                && ROLE_NONE.equals(ema.getRole());
        showDeleteButton = ema != null;

    }

    /**
     * Clear the screen
     *
     * @return null
     */
    public String clear() {
        this.ema = new EmergencyMedicalAssistant();
        this.includeAll = false;
        this.firstName = null;
        this.lastName = null;
        this.licenseNo = null;
        this.selectedKey = null;
        this.userName = null;
        this.showGrantButton = false;
        this.showRevokeButton = false;
        this.showDeleteButton = false;
        return null;
    }

    /**
     * Get method
     *
     * @return selectedKey
     */
    public Object getSelectedKey() {
        return selectedKey;
    }

    /**
     *
     * @param selectedKey
     */
    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    /**
     *
     * @return
     */
    public String getFirstName() {
        return firstName;
    }

    /**
     *
     * @param firstName
     */
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    /**
     *
     * @return
     */
    public String getLastName() {
        return lastName;
    }

    /**
     *
     * @param lastName
     */
    public void setLastName(String lastName) {
        this.lastName = lastName;
    }

    /**
     *
     * @return
     */
    public String getLicenseNo() {
        return licenseNo;
    }

    /**
     *
     * @param licenseNo
     */
    public void setLicenseNo(String licenseNo) {
        this.licenseNo = licenseNo;
    }

    /**
     *
     * @return
     */
    public String getUserName() {
        return userName;
    }

    /**
     *
     * @param userName
     */
    public void setUserName(String userName) {
        this.userName = userName;
    }

    /**
     *
     * @return
     */
    public boolean isShowGrantButton() {
        return showGrantButton;
    }

    /**
     *
     * @param showGrantButton
     */
    public void setShowGrantButton(boolean showGrantButton) {
        this.showGrantButton = showGrantButton;
    }

    /**
     *
     * @return
     */
    public boolean isShowRevokeButton() {
        return showRevokeButton;
    }

    /**
     *
     * @param showRevokeButton
     */
    public void setShowRevokeButton(boolean showRevokeButton) {
        this.showRevokeButton = showRevokeButton;
    }

    /**
     *
     * @return
     */
    public Boolean getIncludeAll() {
        return includeAll;
    }

    /**
     *
     * @param includeAll
     */
    public void setIncludeAll(Boolean includeAll) {
        this.includeAll = includeAll;
    }

    public EmergencyMedicalAssistant getEma() {
        return ema;
    }

    public void setEma(EmergencyMedicalAssistant ema) {
        this.ema = ema;
    }

    public List<EmergencyMedicalAssistant> getEmas() {
        return emas;
    }

    public void setEmas(List<EmergencyMedicalAssistant> emas) {
        this.emas = emas;
    }

    public boolean isShowDeleteButton() {
        return showDeleteButton;
    }

}
