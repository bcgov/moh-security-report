/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        MaintainSkill.java                             *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/
package ca.bc.gov.health.emaccs.web;

import ca.bc.gov.health.ejb.exception.FacadeException;
import ca.bc.gov.health.emaccs.ejb.entity.Skill;
import ca.bc.gov.health.emaccs.ejb.session.SkillFacadeLocal;
import ca.bc.gov.health.jsf.BaseBean;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.List;

/**
 * Backing bean for Skill code table maintenance
 */
@ViewScoped
@Named("MaintainSkill")
public class MaintainSkill extends BaseBean implements java.io.Serializable {

    private static final long serialVersionUID = 1L;
    /* Facade for persistence */
    @EJB
    private SkillFacadeLocal skillFacade;

    private List<Skill> allSkills;
    private Skill skill;
    private Object selectedKey;

    /**
     * Default Constructor
     */
    public MaintainSkill() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        allSkills = skillFacade.findAll();
        skill = new Skill();
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        try {
            skillFacade.create(skill);
            addInfoMessage("Add Successful");
        } catch (FacadeException e) {
            addErrorMessage("Cannot add record");
        }

        return clear();
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();
        try {
            skillFacade.edit(skill);
            addInfoMessage("Update Successful");
        } catch (FacadeException e) {
            addErrorMessage("Cannot update record");
        }
        return clear();
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();

        try {
            for (int i = 0; i < allSkills.size(); i++) {
                if (allSkills.get(i).getId().equals(selectedKey)) {
                    skillFacade.remove(allSkills.get(i));
                }
            }
            addInfoMessage("Remove Successful");
        } catch (FacadeException e) {
            addErrorMessage("Cannot remove record");
        }

        return clear();
    }

    /**
     * Clears the form
     */
    public String clear() {
        init();
        selectedKey = null;
        skill = new Skill();
        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        for (int i = 0; i < allSkills.size(); i++) {
            if (allSkills.get(i).getId().equals(selectedKey)) {
                skill = allSkills.get(i);
            }
        }
        return null;
    }

    /**
     * Nullifies any parent records where proper PKs aren't set
     */
    private void nullify() {
    }

    /* Getters and Setters */
    public List<Skill> getAllSkills() {
        return allSkills;
    }

    public void setAllSkills(List<Skill> allSkills) {
        this.allSkills = allSkills;
    }

    public Skill getSkill() {
        return skill;
    }

    public void setSkill(Skill skill) {
        this.skill = skill;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }
}
