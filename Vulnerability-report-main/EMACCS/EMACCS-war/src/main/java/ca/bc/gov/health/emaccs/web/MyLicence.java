/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        MyLicence.java                                 *
 * Date of Last Commit: $Date:: 2016-11-18 12:55:57 -0800 (Fri, 18 Nov 2016) $ *
 * Revision Number:      $Rev:: 2649                                         $ *
 * Last Commit by:    $Author:: tschiavo                                     $ *
 *                                                                             *
 *******************************************************************************/

package ca.bc.gov.health.emaccs.web;

import ca.bc.gov.health.emaccs.ejb.entity.EmergencyMedicalAssistant;
import ca.bc.gov.health.emaccs.ejb.entity.Endorsements;
import ca.bc.gov.health.emaccs.ejb.entity.Lksuspnd;
import ca.bc.gov.health.emaccs.ejb.entity.Lkwsg;
import ca.bc.gov.health.emaccs.ejb.entity.Qualification;
import ca.bc.gov.health.emaccs.ejb.entity.Restr;
import ca.bc.gov.health.emaccs.ejb.entity.Suspnd;
import ca.bc.gov.health.emaccs.ejb.session.EmergencyMedicalAssistantFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.EndorsementsFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.QualificationFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.RestrFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.SuspndFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.email.EmailFacadeLocal;
import ca.bc.gov.health.jsf.ApplicationBean;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.event.ValueChangeEvent;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;


@Named("MyLicence")
@ViewScoped
public class MyLicence extends ApplicationBean implements java.io.Serializable {
    private static final long serialVersionUID = 1L;
    private static final String CLASS_NAME = MyLicence.class.getName();
    private static final Logger log = Logger.getLogger(CLASS_NAME);
    /**
     * A record from QUAL, used to display info at the top of the page, as well
     * as supply data for the relinquish licence method
     */
    private Qualification licenceInfo;

    /* Currently searched for licence number; There's good reason to have it not null... */
    private String licenceNumber = "";

    /**
     * Suspension date, will be blank for active users
     */
    private Date suspDate;

    /**
     * The following three lists provide the data for the on-screen table-lists
     */
    private List<Qualification> qualifications = new ArrayList<>();//QUAL
    private List<Endorsements> endorsements = new ArrayList<>();    //ENDORS
    private List<Restr> restrictions = new ArrayList<>();                  //RESTR

    /**
     * An instantiated endorsement object is needed for the relinquish
     * endorsement method
     */
    private Endorsements endorsement = new Endorsements();

    // Qualifications
    @EJB
    private QualificationFacadeLocal qualificationFacade;
    @EJB
    private SuspndFacadeLocal suspndFacade;
    // Endorsements
    @EJB
    private EndorsementsFacadeLocal endorsementsFacade;
    // Restrictions
    @EJB
    private RestrFacadeLocal restrictionsFacade;
    // Email
    @EJB
    private EmailFacadeLocal emailFacade;
    // other
    @EJB
    private EmergencyMedicalAssistantFacadeLocal emergencyMedicalAssistantFacade;

    /**
     * Creates a new instance of MyLicence
     */
    public MyLicence() {
    }

    @PostConstruct
    public void init() {
        if (user.getUserRole().equals("EMA")) {
            licenceNumber = user.getLicenceNo();
        }
        if (!licenceNumber.isEmpty()) {
            initLists();
        }
    }

    public void changeLicenceNumber(ValueChangeEvent event) {
        //find list of other activities for that EMA when the user searches for an EMA by licence number
        licenceNumber = (String)event.getNewValue();
        if (!isValidLicenceNumber()) {
            addErrorMessage(licenceNumber + " is an invalid licence number.");
        }
        init();
        
    }

    public void search() {
        if (licenceNumber.length() < 6 ) {
            addErrorMessage("Please insert a valid licence number.");
            return;
        }
        if (!isValidLicenceNumber()) {
            addErrorMessage(licenceNumber + " is an invalid licence number.");
        }
        init();

    }

    public boolean isValidLicenceNumber() {
        return super.isValidLicenceNumber(licenceNumber);
    }

/**
 * Separate method for initializing the three lists on the page
 */
    private void initLists() {

        // get qualifications
        Qualification qQuery = new Qualification();
        qQuery.setLicno(licenceNumber);
        qualifications = qualificationFacade.search(qQuery);

        if (!qualifications.isEmpty()) {
            for (Qualification q : qualifications) {
                if (q.getIscurrent().toString().equals("-1")) {
                    suspDate = q.getEnddate();
                    licenceInfo = q;
                }
            }
        }


        // get endorsements
        // [PRNTONLIC == -1 and esuspdate is null]
        endorsements = endorsementsFacade.findIV(licenceNumber);


        // get restrictions
        Restr rQuery = new Restr();
        rQuery.setLicno(licenceNumber);
        restrictions = restrictionsFacade.search(rQuery);

    }


    /**
     * Relinquish an endorsement by adding a suspension date to ENDORS
     * and adding a linked suspension record to SUSPND
     */
    public void relinquishEndorsement() {
        // the endorsement variable is currently populated when this method fires
        nullify();
        //TODO - make into one transaction
        try{
            endorsement.setEsuspdate(super.getTodaysDate());
            endorsement.setPrntonlic(Short.parseShort("0"));
            endorsementsFacade.edit(endorsement);

            Suspnd suspended = new Suspnd();
            suspended.setRegisId(new EmergencyMedicalAssistant(user.getEmaId()));
            suspended.setLicno(endorsement.getLicno());
            suspended.setScode(endorsement.getEcode().getEcode());
            suspended.setSuspreason(new Lksuspnd("B17"));
            suspended.setSuspdate(super.getTodaysDate());

			//TODO add try catch on .create to differentiate email failure from update failure
            suspndFacade.create(suspended);
            // send to keepalicense@gov.bc.ca
           // sendNotificationEmail("Endorsement Relinquished");
            emailFacade.sendEndorsementRelinquished(user.getDisplayName(), licenceNumber);
            addInfoMessage("Endorsement Relinquished");
         }catch(Exception e){
            addErrorMessage("Unable to relinquish endorsement, please try again later");
            log.log(Level.SEVERE, "relinquishEndorsement encountered a problem: {0} due to: {1}", new Object[]{e.getClass().getSimpleName(), e.getMessage()});
         }
            init();        
    }

    /**
     * Relinquish a licence by updating the status and adding a suspension date to REGIS
     * and adding a linked suspension record to SUSPND
     */
    public void relinquishLicence() {
        nullify();
        //TODO - make into one transaction
        try{
            // update REGIS.STATUS = S12 and  REGIS.ST_DATE = today
            EmergencyMedicalAssistant ema = emergencyMedicalAssistantFacade.find(user.getEmaId());
            ema.setStatus(new Lkwsg("S12"));
            ema.setStDate(super.getTodaysDate());
            emergencyMedicalAssistantFacade.edit(ema);

            // licenceInfo is the Qualifications record [populated in initLists()] with QUAL.ISCURRENT set to 'true' [-1]
            // Add a suspended record
            Suspnd suspended = new Suspnd();
            suspended.setRegisId(ema);
            suspended.setLicno(licenceInfo.getLicno());
            suspended.setScode(licenceInfo.getQcode().getQcode());
            suspended.setSuspreason(new Lksuspnd("B16"));
            suspended.setSuspdate(super.getTodaysDate());
            suspndFacade.create(suspended);

            // Update the qualifications record to set the suspended date
            licenceInfo.setEnddate(ema.getStDate());
            licenceInfo.setLicexpdt(super.getTodaysDate());
			//TODO add try catch on .create to differentiate email failure from update failure
            qualificationFacade.edit(licenceInfo);
             
            // Licence is spelled 'License' here for a reason! Please don't change it!
            //sendNotificationEmail("License Relinquished");
            emailFacade.sendLicenceRelinquished(user.getDisplayName(), licenceNumber);
            addInfoMessage("License Relinquished");
            // send to emalbgeneral@gov.bc.ca
         }catch(Exception e){
            addErrorMessage("Unable to relinquish license, please try again later");
            log.log(Level.SEVERE, "relinquishLicence encountered a problem: {0} due to: {1}", new Object[]{e.getClass().getSimpleName(), e.getMessage()});
        }
        init();
    }

    /**
     * Nullifies any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (endorsement.getEcode() != null
                && endorsement.getEcode().getEcode() == null) {
            endorsement.setEcode(null);
        }
    }

    /*
     * Getters and Setters
     */
    public List<Endorsements> getEndorsements() {
        return endorsements;
    }
    public Qualification getLicenceInfo() {
        return licenceInfo;
    }
    public List<Qualification> getQualifications() {
        return qualifications;
    }
    public List<Restr> getRestrictions() {
        return restrictions;
    }
    public Date getSuspDate() {
        return suspDate;
    }
    public Endorsements getEndorsement() {
        return endorsement;
    }
    public void setEndorsement(Endorsements endorsement) {
        this.endorsement = endorsement;
    }
    
    public String getLicenceNumber() {
        return licenceNumber;
    }
    public void setLicenceNumber(String licenceNumber) {
        this.licenceNumber = licenceNumber;
    }

}
