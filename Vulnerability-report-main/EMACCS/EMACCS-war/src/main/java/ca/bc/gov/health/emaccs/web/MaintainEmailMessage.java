/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        MaintainEmailMessage.java                      *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/
package ca.bc.gov.health.emaccs.web;

import ca.bc.gov.health.ejb.exception.FacadeException;
import ca.bc.gov.health.emaccs.ejb.entity.EmailMessage;
import ca.bc.gov.health.emaccs.ejb.session.EmailMessageFacadeLocal;
import ca.bc.gov.health.jsf.BaseBean;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.util.List;

/**
 * Backing bean for EmailMessage code table maintenance
 */
@ViewScoped
@Named("MaintainEmailMessage")
public class MaintainEmailMessage extends BaseBean implements java.io.Serializable {

    private static final long serialVersionUID = 1L;
    /*
     * Facade for persistence
     */
    @EJB
    private EmailMessageFacadeLocal emailMessageFacade;

    @Inject
    private Droplists droplists;

    private List<EmailMessage> allEmailMessages;
    private EmailMessage emailMessage;
    private Object selectedKey;

    public MaintainEmailMessage() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        allEmailMessages = emailMessageFacade.findAll();
        emailMessage = new EmailMessage();
    }

    /**
     * Adds a new record
     */
    public String add() {

        try {
            emailMessageFacade.create(emailMessage);
            addInfoMessage("Add Successful");
        } catch (FacadeException e) {
            addErrorMessage("Cannot Add record");
        }

        return clear();
    }

    /**
     * Updates an existing record
     */
    public String update() {

        try {
            emailMessageFacade.edit(emailMessage);
            addInfoMessage("Update Successful");
        } catch (FacadeException e) {
            addErrorMessage("Cannot update record");
        }
        return clear();
    }

    /**
     * Deletes a record
     */
    public String delete() {

        try {
            for (int i = 0; i < allEmailMessages.size(); i++) {
                if (allEmailMessages.get(i).getId().equals(selectedKey)) {
                    emailMessageFacade.remove(allEmailMessages.get(i));
                }
            }
            addInfoMessage("Remove Successful");
        } catch (FacadeException e) {
            addErrorMessage("Cannot delete record");
        }
        return clear();
    }

    /**
     * Clears the form
     */
    public String clear() {
        init();
        selectedKey = null;
        emailMessage = new EmailMessage();
        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        for (int i = 0; i < allEmailMessages.size(); i++) {
            if (allEmailMessages.get(i).getId().equals(selectedKey)) {
                emailMessage = allEmailMessages.get(i);
            }
        }
        return null;
    }

    /*
     * Getters and Setters
     */
    public List<EmailMessage> getAllEmailMessages() {
        return allEmailMessages;
    }

    public void setAllEmailMessages(List<EmailMessage> allEmailMessages) {
        this.allEmailMessages = allEmailMessages;
    }

    public EmailMessage getEmailMessage() {
        return emailMessage;
    }

    public void setEmailMessage(EmailMessage emailMessage) {
        this.emailMessage = emailMessage;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    //Required due to ManagedProperty above
    public void setDroplists(Droplists droplists) {
        this.droplists = droplists;
    }
}
