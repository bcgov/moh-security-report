/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        EvaluateOtherActivities.java                   *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/
package ca.bc.gov.health.emaccs.web;

import ca.bc.gov.health.ejb.exception.FacadeException;
import ca.bc.gov.health.emaccs.ejb.entity.ActivityStatus;
import ca.bc.gov.health.emaccs.ejb.entity.NocpArea;
import ca.bc.gov.health.emaccs.ejb.entity.NocpCompetencySubtype;
import ca.bc.gov.health.emaccs.ejb.entity.NocpCompetencyType;
import ca.bc.gov.health.emaccs.ejb.entity.OtherActivity2;
import ca.bc.gov.health.emaccs.ejb.entity.ReportingYear;
import ca.bc.gov.health.emaccs.ejb.session.EmergencyMedicalAssistantFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.NocpCompetencySubtypeFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.NocpCompetencyTypeFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.OtherActivity2FacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.ReportingYearFacadeLocal;
import ca.bc.gov.health.jsf.ApplicationBean;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.context.Flash;
import jakarta.faces.event.ValueChangeEvent;
import jakarta.faces.validator.ValidatorException;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.file.UploadedFile;

/**
 * Backing bean for Evaluate Other Activities Screen
 *
 * @author Greg Perkins
 */
@ViewScoped
@Named("EvaluateOtherActivities")
public class EvaluateOtherActivities extends ApplicationBean implements Serializable {

    private static final long serialVersionUID = 1L;
    private static final String CLASS_NAME = EvaluateOtherActivities.class.getName();
    private static final Logger log = Logger.getLogger(CLASS_NAME);
    /*
     * Facade for persistence
     */
    @EJB
    private OtherActivity2FacadeLocal otherActivity2Facade;
    @EJB
    private NocpCompetencyTypeFacadeLocal nocpCompetencyTypeFacade;
    @EJB
    private NocpCompetencySubtypeFacadeLocal nocpCompetencySubtypeFacade;
    @EJB
    private EmergencyMedicalAssistantFacadeLocal emaFacade;
    @EJB
    private ReportingYearFacadeLocal reportingYearFacade;

    /*
     * The instance we're currently editing
     */
    private OtherActivity2 otherActivity2 = new OtherActivity2();
    private OtherActivity2 otherActivityToDelete = new OtherActivity2();
    private List<OtherActivity2> otherActivity2List = new ArrayList<>();
    private List<NocpCompetencyType> filteredNOCPTypes = new ArrayList<>();
    private List<NocpCompetencySubtype> filteredNOCPSubtypes = new ArrayList<>();
    private boolean uploadChanged = false;

    private Long reportingYearId;
    private String licenceNumber = "";

    private Flash flash;
    private Long emaId = null;
    private double otherCreditTotal = 0;

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {

        flash = FacesContext.getCurrentInstance().getExternalContext().getFlash();

        if (flash.get("emaId") != null) {
            emaId = (Long) flash.get("emaId");
            reportingYearId = (Long) flash.get("reportingYearId");
        }

        setUp();

        if (flash.get("id") != null) {
            otherActivity2 = otherActivity2Facade.find((Long) flash.get("id"));
            otherActivity2List = removeThisOa(otherActivity2, otherActivity2List);
        }

        setupNOCPs();
        licenceNumber = otherActivity2.getEmaId() != null ? otherActivity2.getEmaId().getLicno() : null;

    }

    private void setUp() {
        //Default reporting year to current year if not set
        if (reportingYearId == null) {
            reportingYearId = reportingYearFacade.getCurrentReportingYear().getId();
        }
        otherActivity2List = otherActivity2Facade.findByEmaIdReportingYear(emaId, reportingYearId);

        // calculate the other credit total before removing any entries
        calcOtherCreditTotal();

    }

    public String navigateTo() {
        return "EvaluateOtherActivities.xhtml";
    }

    /**
     * Adds a new record
     */
    public void add() {

        otherActivity2.setReportingYearId(new ReportingYear(getReportingYearId(otherActivity2.getEndDate())));

        try {
            otherActivity2Facade.create(otherActivity2);
            otherActivity2Facade.checkRequirements(otherActivity2.getEmaId().getRegisId(), reportingYearId, false);
            clear();
            addInfoMessage("Add Successful");

        } catch (FacadeException e) {
            addErrorMessage("Add Failed. Try again by navigating away and returning to screen.");
            if (e.getExceptionClass() != null && e.getExceptionClass().getSimpleName().equals("PersistenceException")) {
                addErrorMessage("Please double check your values as you enter them");
            }

        }
    }

    /**
     * Updates an existing record
     */
    public void update() {

        otherActivity2.setReportingYearId(new ReportingYear(getReportingYearId(otherActivity2.getEndDate())));

        try {
            otherActivity2 = otherActivity2Facade.edit(otherActivity2);
            otherActivity2Facade.checkRequirements(otherActivity2.getEmaId().getRegisId(), reportingYearId, true);

            addInfoMessage("Update Successful");

        } catch (FacadeException e) {
            addErrorMessage("Update Failed. Try again by navigating away and returning to screen");

            if (e.getExceptionClass() != null && e.getExceptionClass().getSimpleName().equals("PersistenceException")) {
                addErrorMessage("Please double check your values as you enter them");
            }
        }
        clear();

    }

    /**
     * Deletes a record
     */
    public void delete() {
        try {
            otherActivity2Facade.remove(otherActivityToDelete);
            otherActivity2List.remove(otherActivityToDelete);
            otherActivityToDelete = null;
            addInfoMessage("Delete Successful");

        } catch (FacadeException e) {
            addErrorMessage("Delete Failed");
        }
    }

    /**
     * Clears the form
     */
    public void clear() {
        this.setOtherActivity2(setupOtherActivity2());
        clearNOCPLists();
        calcOtherCreditTotal();
        uploadChanged = false;
    }

    /* clear out the NOCP competency list and specific competency list if the area list is cleared */
    public void clearNOCPLists() {
        filteredNOCPTypes.clear();
        filteredNOCPSubtypes.clear();
    }

    /* These two methods are used along side a property action listener to select an activity from the table
    * Normally we would just pass the new activity value to the method and could do it all in one method but the 
    * AuthorizationPhaseListener from LoginModules won't let me do that (throws NPE) so it's two methods and a propertyActionListener
    * Called in the following order from the UI:
    * 1. ActionListener - resetActivityList() - put the current activity back into the list
    * 2. propertyActionListener - sets the 'otherActivity' selected by the user
    * 3. Action - select() - setup the NOCP's for the newly selected activity and remove it from the list 
     */
    public void resetActivityList() {
        if (otherActivity2.getId() != null) {
            otherActivity2List.add(0, otherActivity2); // add the previously selected activity back to the list
        }
    }

    public void select() {
        setupNOCPs();
        otherActivity2List = removeThisOa(otherActivity2, otherActivity2List);
    }

    /*
     * Method to remove an OtherActivity object from a list, based on ID
     * Used to ensure there are no duplicates, and called in multiple places
     */
    private List<OtherActivity2> removeThisOa(OtherActivity2 removeObjectLikeThis, List<OtherActivity2> theList) {
        if (theList != null && !theList.isEmpty()) {
            for (OtherActivity2 theObject : theList) {
                if (removeObjectLikeThis.getId().toString().equals(theObject.getId().toString())) {
                    theList.remove(theObject);
                    break;
                }
            }
        }
        return theList;
    }

    private OtherActivity2 setupOtherActivity2() {
        OtherActivity2 temp = new OtherActivity2();
        temp.setReportingYearId(new ReportingYear(reportingYearId));

        temp.setEmaId(emaFacade.find(emaId));

        temp.setNocpAreaId(new NocpArea());

        temp.setNocpCompetencyTypeId(new NocpCompetencyType());

        temp.setNocpCompetencySubtypeId(new NocpCompetencySubtype());

        temp.setStatusId(new ActivityStatus());

        temp.setStatusDate(new Date());

        return temp;
    }

    private void setupNOCPs() {
        if (otherActivity2.getNocpAreaId() != null && otherActivity2.getNocpAreaId().getId() != null) {

            filterNocpCompetencyTypes(otherActivity2.getNocpAreaId());

            if (otherActivity2.getNocpCompetencyTypeId() != null && otherActivity2.getNocpCompetencyTypeId().getId() != null) {
                filterNocpCompetencySubtype(otherActivity2.getNocpCompetencyTypeId());

                if (otherActivity2.getNocpCompetencySubtypeId() == null) {
                    otherActivity2.setNocpCompetencySubtypeId(new NocpCompetencySubtype());
                }
            }
        }
    }

    public void changeReportingYear(ValueChangeEvent event) {
        reportingYearId = (Long) event.getNewValue();

        clearNOCPLists();
        init();
    }

    public void changeNOCPArea(ValueChangeEvent event) {
        clearNOCPLists();
        NocpArea newValue = (NocpArea) event.getNewValue();
        if (newValue != null) {
            filterNocpCompetencyTypes(newValue);
        }
    }

    public void changeNOCPType(ValueChangeEvent event) {
        filteredNOCPSubtypes.clear();
        NocpCompetencyType newValue = (NocpCompetencyType) event.getNewValue();

        if (newValue != null) {
            filterNocpCompetencySubtype(newValue);
        }
    }

    private void filterNocpCompetencyTypes(NocpArea value) {
        NocpCompetencyType params = new NocpCompetencyType();
        params.setNocpAreaId(value);
        filteredNOCPTypes = nocpCompetencyTypeFacade.search(params);

    }

    private void filterNocpCompetencySubtype(NocpCompetencyType value) {
        NocpCompetencySubtype params = new NocpCompetencySubtype();
        params.setNocpGeneralCompetencyId(value);
        filteredNOCPSubtypes = nocpCompetencySubtypeFacade.search(params);
    }

    private void calcOtherCreditTotal() {
        double total = 0;
        if (otherActivity2List != null) {
            for (OtherActivity2 oa : otherActivity2List) {
                if (oa.getCredits() != null) {
                    total += oa.getCredits().doubleValue();
                }
                if (oa.getAdjudicatedCredits() != null) {
                    total += oa.getAdjudicatedCredits().doubleValue();
                }
            }
        }

        otherCreditTotal = total;
    }

    public String uploadFile(FileUploadEvent event) throws Exception {
        UploadedFile item = event.getFile();
        String name = item.getFileName();
        String mimeType = item.getContentType();

        if (name.contains("\\")) {
            name = name.substring(name.lastIndexOf('\\') + 1);
        }

        if (name.length() > 200) {
            String message = "Filename for file to upload must be 200 characters or less.";
            addErrorMessage(message);
            throw new ValidatorException(new FacesMessage(message));
        }
        if (mimeType.length() > 200) {
            mimeType = mimeType.substring(0, 200);
        }

        //Limit size of the file to 50mb (52,428,800 bytes - 50mg)
        if (item.getSize() >= 52428800) {
            String message = "File exceeds 50 megs limit. Please consider compressing the file(zip) or to use another file format.";
            addErrorMessage(message);
            throw new ValidatorException(new FacesMessage(message));
        }

        otherActivity2.setAttachment(item.getContent());
        otherActivity2.setMimetype(mimeType);
        otherActivity2.setFilename(name);

        uploadChanged = true;

        return null;
    }

    /* Getters and Setters */
    public double getOtherCreditTotal() {
        return otherCreditTotal;
    }

    public List<NocpCompetencySubtype> getFilteredNOCPSubtypes() {
        return filteredNOCPSubtypes;
    }

    public void setFilteredNOCPSubtypes(List<NocpCompetencySubtype> filteredNOCPSubtypes) {
        this.filteredNOCPSubtypes = filteredNOCPSubtypes;
    }

    public List<NocpCompetencyType> getFilteredNOCPTypes() {
        return filteredNOCPTypes;
    }

    public void setFilteredNOCPTypes(List<NocpCompetencyType> filteredNOCPTypes) {
        this.filteredNOCPTypes = filteredNOCPTypes;
    }

    public OtherActivity2 getOtherActivity2() {
        return otherActivity2;
    }

    public void setOtherActivity2(OtherActivity2 otherActivity) {
        if (this.otherActivity2 != null && this.otherActivity2.getId() != null) {
            otherActivity2List.add(0, this.otherActivity2);
        }
        if (otherActivity2.getNocpAreaId() == null || otherActivity2.getNocpAreaId().getId() == null) {
            otherActivity2.setNocpAreaId(new NocpArea());
        } else {
            filterNocpCompetencyTypes(otherActivity2.getNocpAreaId());
        }
        if (otherActivity2.getNocpCompetencyTypeId() == null || otherActivity2.getNocpCompetencyTypeId().getId() == null) {
            otherActivity2.setNocpCompetencyTypeId(new NocpCompetencyType());
        } else {
            filterNocpCompetencySubtype(otherActivity2.getNocpCompetencyTypeId());
        }
        if (otherActivity2.getNocpCompetencySubtypeId() == null || otherActivity2.getNocpCompetencySubtypeId().getId() == null) {
            otherActivity2.setNocpCompetencySubtypeId(new NocpCompetencySubtype());
        }

        this.otherActivity2 = otherActivity;
    }

    public List<OtherActivity2> getOtherActivity2List() {
        return otherActivity2List;
    }

    public void setOtherActivity2List(List<OtherActivity2> otherActivity2List) {
        this.otherActivity2List = otherActivity2List;
    }

    public Long getReportingYearId() {
        return reportingYearId;
    }

    public void setReportingYearId(Long reportingYearId) {
        this.reportingYearId = reportingYearId;
    }

    public Flash getFlash() {
        return flash;
    }

    public void setFlash(Flash flash) {
        this.flash = flash;
    }

    public String getLicenceNumber() {
        return licenceNumber;
    }

    public OtherActivity2 getOtherActivityToDelete() {
        return otherActivityToDelete;
    }

    public void setOtherActivityToDelete(OtherActivity2 otherActivityToDelete) {
        this.otherActivityToDelete = otherActivityToDelete;
    }

    public boolean isUploadChanged() {
        return uploadChanged;
    }
}
