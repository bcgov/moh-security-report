/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        MaintainReportingYear.java                     *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/
package ca.bc.gov.health.emaccs.web;

import ca.bc.gov.health.ejb.exception.FacadeException;
import ca.bc.gov.health.emaccs.ejb.entity.ReportingYear;
import ca.bc.gov.health.emaccs.ejb.session.EmaccsApplicationVariablesFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.ReportingYearFacadeLocal;
import ca.bc.gov.health.jsf.BaseBean;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.List;

/**
 * Backing bean for ReportingYear code table maintenance
 */
@ViewScoped
@Named("MaintainReportingYear")
public class MaintainReportingYear extends BaseBean implements Serializable {

    private static final long serialVersionUID = 1L;
    /*
     * Facade for persistence
     */
    @EJB
    private ReportingYearFacadeLocal reportingYearFacade;

    @Inject
    private Droplists droplists;
    @EJB
    private EmaccsApplicationVariablesFacadeLocal emaccsApplicationVariablesFacade;

    private List<ReportingYear> allReportingYears;
    private ReportingYear reportingYear;
    private Object selectedKey;

    /**
     * Default Constructor
     */
    public MaintainReportingYear() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        allReportingYears = reportingYearFacade.findAll();
        reportingYear = new ReportingYear();
    }

    /**
     * Adds a new record
     */
    public void add() {

        try {
            reportingYearFacade.create(reportingYear);
            allReportingYears = reportingYearFacade.findAll();
            reportingYear = new ReportingYear();
            droplists.initReportingYears();
            addInfoMessage("Add Successful");
        } catch (FacadeException e) {
            addErrorMessage("Cannot add record");
        }

    }

    /**
     * Updates an existing record
     */
    public void update() {

        try {
            reportingYearFacade.edit(reportingYear);
            allReportingYears = reportingYearFacade.findAll();
            droplists.initReportingYears();
            addInfoMessage("Update Successful");
        } catch (FacadeException e) {
            addErrorMessage("Cannot update record");
        }
        emaccsApplicationVariablesFacade.reportingYearUpdate(reportingYear.getId());
    }

    /**
     * Deletes a record
     */
    public void delete() {

        try {
            for (int i = 0; i < allReportingYears.size(); i++) {
                if (allReportingYears.get(i).getId().equals(selectedKey)) {
                    reportingYearFacade.remove(allReportingYears.get(i));
                    allReportingYears = reportingYearFacade.findAll();
                    droplists.initReportingYears();
                }
            }
            addInfoMessage("Remove Successful");
        } catch (FacadeException e) {
            addErrorMessage("Cannot remove record");
        }
        emaccsApplicationVariablesFacade.reportingYearUpdate(reportingYear.getId());

    }

    /**
     * Clears the form
     */
    public void clear() {

        droplists.initReportingYears();
        selectedKey = null;
        reportingYear = new ReportingYear();

    }

    /**
     * Selects a record for editing
     */
    public void select() {
        for (int i = 0; i < allReportingYears.size(); i++) {
            if (allReportingYears.get(i).getId().equals(selectedKey)) {
                reportingYear = allReportingYears.get(i);
            }
        }
    }

    /*
     * Getters and Setters
     */
    public List<ReportingYear> getAllReportingYears() {
        return allReportingYears;
    }

    public void setAllReportingYears(List<ReportingYear> allReportingYears) {
        this.allReportingYears = allReportingYears;
    }

    public ReportingYear getReportingYear() {
        return reportingYear;
    }

    public void setReportingYear(ReportingYear reportingYear) {
        this.reportingYear = reportingYear;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }

    //Required due to ManagedProperty above
    public void setDroplists(Droplists droplists) {
        this.droplists = droplists;
    }
}
