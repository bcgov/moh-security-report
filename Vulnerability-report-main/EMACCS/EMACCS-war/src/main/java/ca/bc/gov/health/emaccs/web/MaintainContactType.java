/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        MaintainContactType.java                       *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

package ca.bc.gov.health.emaccs.web;


import ca.bc.gov.health.ejb.exception.FacadeException;
import ca.bc.gov.health.emaccs.ejb.entity.ContactType;
import ca.bc.gov.health.emaccs.ejb.session.ContactTypeFacadeLocal;
import ca.bc.gov.health.jsf.BaseBean;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.util.List;


/**
 * Backing bean for ContactType code table maintenance
 *
 * @author JSF Code Generator
 */
@ViewScoped
@Named("MaintainContactType")
public class MaintainContactType extends BaseBean implements java.io.Serializable {
    private static final long serialVersionUID = 1L;
    /*
     * Facade for persistence
     */
    @EJB
    private ContactTypeFacadeLocal contactTypeFacade;

    @Inject
    private Droplists droplists;
    /*
     * List of all values in the code table
     */
    private List<ContactType> allContactTypes;

    /*
     * The instance we're currently editing
     */
    private ContactType contactType;

    /*
     * PK of the selected instance
     */
    private Object selectedKey;

    /**
     * Default Constructor
     */
    public MaintainContactType() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        allContactTypes = contactTypeFacade.findAll();
        contactType = new ContactType();
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        try {
            contactTypeFacade.create(contactType);
            addInfoMessage("Add Successful");
        } catch (FacadeException e) {
            addErrorMessage("Cannot Add record");
        }

        return clear();
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();
        try{
            contactTypeFacade.edit(contactType);
            addInfoMessage("Update Successful");
         } catch (FacadeException e) {
             addErrorMessage("Cannot update record");
         }

        return clear();
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        try {
            for (int i = 0; i < allContactTypes.size(); i++) {
                if (allContactTypes.get(i).getId().equals(selectedKey)) {
                    contactTypeFacade.remove(allContactTypes.get(i));
                }
            }
            addInfoMessage("Remove Successful");
        } catch (FacadeException e) {
                addErrorMessage("Cannot remove record");
        }
        return clear();
    }

    /**
     * Clears the form
     */
    public String clear() {
        init();
        droplists.initContactTypes();
        selectedKey = null;
        contactType = new ContactType();
        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        for (int i = 0; i < allContactTypes.size(); i++) {
            if (allContactTypes.get(i).getId().equals(selectedKey)) {
                contactType = allContactTypes.get(i);
            }
        }
        return null;
    }

    /**
     * Nullifies any parent records where proper PKs aren't set
     */
    private void nullify() {
    }
    /*
     * Getters and Setters
     */

    public List<ContactType> getAllContactTypes() {
        return allContactTypes;
    }

    public void setAllContactTypes(List<ContactType> allContactTypes) {
        this.allContactTypes = allContactTypes;
    }

    public ContactType getContactType() {
        return contactType;
    }

    public void setContactType(ContactType contactType) {
        this.contactType = contactType;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }
    //Required due to ManagedProperty above
    public void setDroplists(Droplists droplists) {
        this.droplists = droplists;
    }
}