/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        MyEmployer.java                                *
 * Date of Last Commit: $Date:: 2016-05-19 11:28:07 -0700 (Thu, 19 May 2016) $ *
 * Revision Number:      $Rev:: 2626                                         $ *
 * Last Commit by:    $Author:: kfaussar                                     $ *
 *                                                                             *
 *******************************************************************************/

package ca.bc.gov.health.emaccs.web;

import ca.bc.gov.health.emaccs.ejb.entity.CurrentEmployment;
import ca.bc.gov.health.emaccs.ejb.entity.EmergencyMedicalAssistant;
import ca.bc.gov.health.emaccs.ejb.entity.PreviousEmployment;
import ca.bc.gov.health.emaccs.ejb.entity.custom.EmploymentHolder;
import ca.bc.gov.health.emaccs.ejb.session.CurrentEmploymentFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.EmergencyMedicalAssistantFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.PreviousEmploymentFacadeLocal;
import ca.bc.gov.health.jsf.ApplicationBean;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.event.ValueChangeEvent;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;


@Named("MyEmployer")
@ViewScoped
public class MyEmployer extends ApplicationBean implements java.io.Serializable {

    private static final long serialVersionUID = 1L;
    private static final String CLASS_NAME = MyEmployer.class.getName();
    private static final Logger log = Logger.getLogger(CLASS_NAME);
    /**
     * Each of these three lists represents a table list on the page
     */
    private List<EmploymentHolder> employmentHistory;
    private List<PreviousEmployment> previousEmployments;
    private List<CurrentEmployment> currentEmployments;
    /* Currently searched for licence number */
    private String licenceNumber = "";

    /*
     * Facades for persistence
     */
    @EJB
    private CurrentEmploymentFacadeLocal currentEmploymentFacade;
    @EJB
    private PreviousEmploymentFacadeLocal previousEmploymentFacade;
    @EJB
    private EmergencyMedicalAssistantFacadeLocal emergencyMedicalAssistantFacade;

    /**
     * Creates a new instance of MyEmployer
     */
    public MyEmployer() {
    }

    @PostConstruct
    private void init() {
        if (user.getUserRole().equals("EMA")) {
            EmergencyMedicalAssistant emergencyMedicalAssistant = emergencyMedicalAssistantFacade.find(user.getEmaId());
            licenceNumber = emergencyMedicalAssistant.getLicno();
        }

        if (!licenceNumber.isEmpty()) {
            initLists();
        }
    }

    public void changeLicenceNumber(ValueChangeEvent event) {
        //find list of other activities for that EMA when the user searches for an EMA by licence number
        licenceNumber = (String) event.getNewValue();
        if (!isValidLicenceNumber()) {
            addErrorMessage(licenceNumber + " is an invalid licence number.");
        }
        //employmentholder cleared in init during setup
        init();
    }

    public void search() {
        //find list of other activities for that EMA when the user searches for an EMA by licence number
        if(licenceNumber.length() < 6) {
            addErrorMessage("Please insert a valid licence number.");
            return;
        }
        if (!isValidLicenceNumber()) {
            addErrorMessage(licenceNumber + " is an invalid licence number.");
        }
        //employmentholder cleared in init during setup
        init();
    }

    public boolean isValidLicenceNumber() {
        return super.isValidLicenceNumber(licenceNumber);
    }

    
    
    /**
     * Separate method for initializing the three lists on the page
     */
    private void initLists() {

        previousEmployments = new ArrayList<>();
        try {
            previousEmployments = previousEmploymentFacade.findByLicno(licenceNumber);
        } catch (Exception e) {
            log.log(Level.SEVERE, "Search problem in previousEmploymentFacade.findLatest()", new Object[]{e.getClass().getSimpleName(), e.getMessage()});
        }
        currentEmployments = new ArrayList<>();
        try {
            currentEmployments = currentEmploymentFacade.findByLicno(licenceNumber);
        } catch (Exception e) {
            log.log(Level.SEVERE, "Search problem in currentEmploymentFacade.findLatest()", new Object[]{e.getClass().getSimpleName(), e.getMessage()});
        }
              
        checkCurrentList(currentEmployments);
        checkPreviousList(previousEmployments);
        
        //add them to employmentHistory
        CleanUpList(previousEmployments, currentEmployments);
        employmentHistory = new ArrayList<>();
        employmentHistory = EmploymentHolder.convertCurrEmpList(currentEmployments);
        employmentHistory.addAll(EmploymentHolder.convertPrevEmpList(previousEmployments));

    }
    
    /*
     * Check current employment list make sure each item belongs to the current licno
     */
    private void checkCurrentList (List<CurrentEmployment> curr) {
        int counter = 0;
        for (int i = 0; i< curr.size(); i++ ) {
            CurrentEmployment a = curr.get(i);
            if (!licenceNumber.equals(a.getLicno())) {
                counter++;
            }
        }
        if (counter!= 0) {
            log.log(Level.SEVERE, "Current employment lists contain wrong items: " + counter);
        }
    }
    
    /*
     * Check current employment list make sure each item belongs to the current licno
     */
    private void checkPreviousList (List<PreviousEmployment> prev) {
        int counter = 0;
        for (int i = 0; i< prev.size(); i++ ) {
            PreviousEmployment a = prev.get(i);
            if (!licenceNumber.equals(a.getLicno())) {
                counter++;
            }
        }
        if (counter!= 0) {
            log.log(Level.SEVERE, "Previous employment lists contain wrong items: " + counter);
        }
    }
    
    /** First check if the lists contain wrong items, then clean up then add previous and 
     * current employments into history list
     *  In case if there is one employer existing in both previous and current list,
     *  remove the one in the previous history list so the history list only keep
     *  ONE latest record for any employer and NO duplicate employers will be displayed
     *  This fix is for Defect 172, 2015/03/18
     */
    public void CleanUpList(List<PreviousEmployment> prev, List<CurrentEmployment> curr) {      
        
        String debugCodeString = "";
        String before = "previousEmployment size: " + prev.size() + " currentEmployment size: " + curr.size();
        log.log(Level.INFO, "Starting MyEmployer.CleanUpList() before: {0} ",  before);
        
        for (int i = 0; i< curr.size(); i++ ) {
            CurrentEmployment a = curr.get(i);
            String aCode = a.getDeptcode().getDeptcode();
            for (int j = 0; j< prev.size(); j++) {
                PreviousEmployment b = prev.get(j);
                String bCode = b.getDeptcode().getDeptcode();
                if ( aCode.equals(bCode)) {
                    PreviousEmployment temp = b;
                    prev.remove(b);
                    debugCodeString += temp.getDeptcode().getDeptcode() + " ";
                }
            }
        }
        String after = "previousEmployment size: " + prev.size() + " currentEmployment size: " + curr.size();
        log.log(Level.INFO, "After : {0}",  after);
        log.log(Level.INFO, "Removed duplicates in previous employment, deptcode: " + debugCodeString);
        
    }
    
    /*
     * Getters and Setters
     */
    public List getEmploymentHistory() {
        return employmentHistory;
    }

    public void setEmploymentHistory(List employmentHistory) {
        this.employmentHistory = employmentHistory;
    }

    public String getLicenceNumber() {
        return licenceNumber;
    }

    public void setLicenceNumber(String licenceNumber) {
        this.licenceNumber = licenceNumber;
    }

}
