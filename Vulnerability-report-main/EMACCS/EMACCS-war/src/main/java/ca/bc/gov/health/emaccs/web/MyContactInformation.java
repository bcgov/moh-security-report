/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        MyContactInformation.java                      *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

package ca.bc.gov.health.emaccs.web;

import ca.bc.gov.health.emaccs.ejb.entity.EmergencyMedicalAssistant;
import ca.bc.gov.health.emaccs.ejb.entity.Province;
import ca.bc.gov.health.emaccs.ejb.session.EmergencyMedicalAssistantFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.ProvinceFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.email.EmailFacadeLocal;
import ca.bc.gov.health.jsf.ApplicationBean;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.event.ValueChangeEvent;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.ArrayList;
import java.util.List;


@Named("MyContactInformation")
@ViewScoped
public class MyContactInformation extends ApplicationBean implements java.io.Serializable {
    private static final long serialVersionUID = 1L;

    /*
     * The instance we're currently editing
     */
    private EmergencyMedicalAssistant emergencyMedicalAssistant = new EmergencyMedicalAssistant();
    private String licenceNumber = "";

    @EJB
    private EmergencyMedicalAssistantFacadeLocal emergencyMedicalAssistantFacade;
    @EJB
    private EmailFacadeLocal emailFacade;
    @EJB
    private ProvinceFacadeLocal provinceFacade;
    
    List<String> provCodes = null;
    private String secondaryEmail;
    
    public MyContactInformation() {
    }

    @PostConstruct
    public void init() {
        if (!licenceNumber.isEmpty()) {
            searchByLicenceNo();
        } else if (user.getUserRole().equals("EMA")) {
            emergencyMedicalAssistant = emergencyMedicalAssistantFacade.find(user.getEmaId());
            licenceNumber = emergencyMedicalAssistant.getLicno();
            splitEmails();
        }
        // set the default province code if NULL or otherwise doesn't have a valid value
        if(provCodes==null || provCodes.isEmpty()){
            List<Province> provinces = provinceFacade.findAll();
            provCodes = new ArrayList();
            for (Province prov : provinces) {
                provCodes.add(prov.getProvinceCode());
            }
        }
        if (emergencyMedicalAssistant.getProv() == null) {
            //OC is 'other country'
            emergencyMedicalAssistant.setProv("OC");

        } else if (!provCodes.contains(emergencyMedicalAssistant.getProv())) {
            emergencyMedicalAssistant.setProv("OC");
        }
    }

    private void searchByLicenceNo() {
        emergencyMedicalAssistant = new EmergencyMedicalAssistant();
        emergencyMedicalAssistant.setLicno(licenceNumber);
        List<EmergencyMedicalAssistant> results = emergencyMedicalAssistantFacade.search(emergencyMedicalAssistant);

        if (results!=null&&!results.isEmpty()) {
            emergencyMedicalAssistant = results.get(0);
            splitEmails();
        }

    }

    public void changeLicenceNumber(ValueChangeEvent event) {
        //find list of other activities for that EMA when the user searches for an EMA by licence number
        licenceNumber = (String) event.getNewValue();
        emergencyMedicalAssistant = null;
        if (!isValidLicenceNumber()) {
            super.addErrorMessage(licenceNumber + " is an invalid licence number.");
        }
        init();
    }

    public void search() {
        if(licenceNumber.length() < 6) {
            addErrorMessage("Please insert a valid licence number.");
            return;
        }
        emergencyMedicalAssistant = null;
        if (!isValidLicenceNumber()) {
            super.addErrorMessage(licenceNumber + " is an invalid licence number.");
        }
        init();
    }

    public boolean isValidLicenceNumber() {
        return super.isValidLicenceNumber(licenceNumber);
    }

    /**
     * Updates an existing record
     */
    public String update() {
        EmergencyMedicalAssistant origEma;
        EmergencyMedicalAssistant updatedEMA = null;
        boolean sendNotification = false;

        if (user.getUserRole().equals("EMA")) {
            origEma = emergencyMedicalAssistantFacade.find(user.getEmaId());
        } else {
            origEma = emergencyMedicalAssistantFacade.find(emergencyMedicalAssistant.getRegisId());
        }

        // check if the original EMA has the returned mail flag set (-1 is TRUE) AND
        // any of: City, Addrress, Province, or Postal Code updated
        if (origEma.getReturnmail().intValue() != 0
                && (!origEma.getAddress().equals(emergencyMedicalAssistant.getAddress())
                || !origEma.getCity().equals(emergencyMedicalAssistant.getCity())
                || !origEma.getProv().equals(emergencyMedicalAssistant.getProv())
                || !origEma.getPcode().equals(emergencyMedicalAssistant.getPcode()))) {
            // if at least one field has changed, reset the returned mail flag to false (0)
            emergencyMedicalAssistant.setReturnmail(Short.parseShort("0"));

            // set flag for this session, instead of reloading the EMA object
            user.setReturnedMail(Short.parseShort("0"));

            sendNotification = true;
        }

        if (emergencyMedicalAssistant.getReturnmail().intValue() != 0) {
            // ask the user to try again
            super.addErrorMessage("There was returned mail, please update your address.");

        } else {
            // format the phone number
            emergencyMedicalAssistant.setPhone(super.stripPhoneNumber(emergencyMedicalAssistant.getPhone()));
            emergencyMedicalAssistant.setAltphone(super.stripPhoneNumber(emergencyMedicalAssistant.getAltphone()));
            String postalCode = emergencyMedicalAssistant.getPcode().toUpperCase();
            if (!postalCode.contains(" ")) {
                postalCode = postalCode.substring(0, 3) + " " + postalCode.substring(3, 6);
            }
            // set it to upper case
            emergencyMedicalAssistant.setPcode(postalCode);

            //Primary and Secondary email concatenate to the same email column in the database
            formatEmails();
            
            try{
            // proceed with update            
                updatedEMA = emergencyMedicalAssistantFacade.edit(emergencyMedicalAssistant);
                addInfoMessage("Update Successful");
            }catch(Exception e){
                addErrorMessage("Update Failed");
                return clear();
            }
            

            if (sendNotification) {
                // send off a notification email, after the update has happened (the email may have changed)
                emailFacade.sendContactInfoUpdate(user.getDisplayName(), licenceNumber);
               // sendNotificationEmail();
            }

        }
        if(updatedEMA !=null){
            emergencyMedicalAssistant=updatedEMA;
            splitEmails();
            return null;
        }else{
            return clear();
        }
    }
    
    private void formatEmails() {
           
        String primaryEmail = emergencyMedicalAssistant.getEmail();
        StringBuilder newEmail = new StringBuilder();
        String newEmailString;
        
        if (primaryEmail != null && !primaryEmail.equals("")) { 
            
            if (primaryEmail.length() < 55) {
                newEmail.append(primaryEmail);
                newEmail.append(";");
            } else {
                addErrorMessage("Combined length of the two emails must be less than 55 characters");
                return;
            }
            
        }
        if (secondaryEmail != null && !secondaryEmail.equals("")) {
            
            if (newEmail.length() + secondaryEmail.length() < 55) {
                newEmail.append(secondaryEmail);
                newEmail.append(";");
                
            } else {
                addWarningMessage("Combined length of the two emails must be less than 54 characters. Only the Primary Email was submitted");
            }
                      
        }
        newEmailString = newEmail.toString();
        emergencyMedicalAssistant.setEmail(newEmailString);
        
    }
    
    private void splitEmails() {
        if (emergencyMedicalAssistant.getEmail() != null ) {
            
            String[] emails = emergencyMedicalAssistant.getEmail().split(";");
                
            if (emails.length > 0) {
                emergencyMedicalAssistant.setEmail(emails[0].replace(";", ""));
                secondaryEmail = null;
            }
            if (emails.length > 1) {
                secondaryEmail = emails[1].replace(";", "");
            } 

        
        }   
    }

    /**
     * Clears the form
     */
    public String clear() {
        init();
        return null;
    }

    /*
     * Getters and Setters
     */
    public EmergencyMedicalAssistant getEmergencyMedicalAssistant() {
        return emergencyMedicalAssistant;
    }

    public void setEmergencyMedicalAssistant(EmergencyMedicalAssistant emergencyMedicalAssistant) {
        this.emergencyMedicalAssistant = emergencyMedicalAssistant;
    }

    public String getLicenceNumber() {
        return licenceNumber;
    }

    public void setLicenceNumber(String licenceNumber) {
        this.licenceNumber = licenceNumber;
    }

    public String getSecondaryEmail() {
        return secondaryEmail;
    }

    public void setSecondaryEmail(String secondaryEmail) {
        this.secondaryEmail = secondaryEmail;
    }

}
