/*******************************************************************************
 * Copyright © 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        BulletinsAndAlerts.java                        *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

package ca.bc.gov.health.emaccs.web;

import ca.bc.gov.health.emaccs.ejb.entity.Bulletin;
import ca.bc.gov.health.emaccs.ejb.entity.EmergencyMedicalAssistant;
import ca.bc.gov.health.emaccs.ejb.entity.OtherActivity;
import ca.bc.gov.health.emaccs.ejb.entity.Qualification;
import ca.bc.gov.health.emaccs.ejb.entity.ReportingYear;
import ca.bc.gov.health.emaccs.ejb.session.BulletinFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.EmergencyMedicalAssistantFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.OtherActivityFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.QualificationFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.ReportingYearFacadeLocal;
import ca.bc.gov.health.jsf.ApplicationBean;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.concurrent.TimeUnit;


@Named("BulletinsAndAlerts")
@ViewScoped
public class BulletinsAndAlerts extends ApplicationBean implements java.io.Serializable {
    private static final long serialVersionUID = 1L;
    /*
     * Facade for persistence
     */
    @EJB
    private BulletinFacadeLocal bulletinFacade;
    @EJB
    private OtherActivityFacadeLocal otherActivityFacade;
    @EJB
    private EmergencyMedicalAssistantFacadeLocal emergencyMedicalAssistantFacade;
    @EJB
    private QualificationFacadeLocal qualificationFacade;
    @EJB
    private ReportingYearFacadeLocal reportingYearFacade;

    private List<Bulletin> allActiveBulletins;
    private List<Bulletin> allBulletins;
    private Bulletin bulletin;

    private EmergencyMedicalAssistant ema;
    private List<EmergencyMedicalAssistant> resultsEma = new ArrayList<>();
    
    private Qualification qualification;
    private List<Qualification> qualificationList;
    
    private String alertCounterDays = "";

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        clear();

        // find all the active bulletins from the bulletinFacade instance
        allActiveBulletins = bulletinFacade.findAllActiveBulletins();

        // find the logged user details
        if (user.getUserRole().equals("EMA")) {
            EmergencyMedicalAssistant emaSearch = new EmergencyMedicalAssistant();
            emaSearch.setRegisId(user.getEmaId());
            resultsEma = emergencyMedicalAssistantFacade.search(emaSearch);
            displayCountdownDays();
        }
    }

    /**
     * Clears the form
     */
    public String clear() {
        bulletin = new Bulletin();
        allBulletins = new ArrayList();
        allActiveBulletins = new ArrayList();
        //resetComponent("form1");
        return null;
    }

    /**
     * Displays countdown of the number of days until the user’s licence expires
     * @return 
     */
    public void displayCountdownDays() {

        if (!resultsEma.isEmpty()) {
            ema = resultsEma.get(0);
            // retrieve current qualification info from the logged user
            Qualification qualificationTemp = new Qualification(ema);
            qualificationList = qualificationFacade.search(qualificationTemp);
            qualificationList.forEach((qual) -> {
              // create current date and the licence expiry date instances
              Date currentDate = new Date();
              Date expiryLicenceDate = qual.getLicexpdt();
              // compare the dates and display the corresponding message
              if (expiryLicenceDate == null) {
                alertCounterDays = "Your licence has no end date.";
              } else if (expiryLicenceDate.after(currentDate)) {
                // convert the difference from millisec to days
                long days = TimeUnit.MILLISECONDS.toDays(expiryLicenceDate.getTime() - currentDate.getTime());
                // display the countdown of the number of days
                // until the user’s licence expires
                alertCounterDays = "Your licence expires in " + String.valueOf(days) + " days.";
                
              } else if (expiryLicenceDate.before(currentDate)) {
                // if licence is expired then display the expiry message
                alertCounterDays = "Your licence has expired.";// + expiryLicenceDate.toString();
              }
          });

        }
    }

    /**
     * Display an alert if the user is an EMA and has an activity
     * with a status of "Pending Information"
     */
    public String displayAlert() {
        // get the details for the logged user
        String alertText = "";
        if (!resultsEma.isEmpty()) {
            ema = resultsEma.get(0);
            // retrieve list with other activities
            //List<OtherActivity> otherActivitiesList = otherActivityFacade.findAllExceptAttachment(ema.getRegisId());
            List<OtherActivity> otherActivitiesList = ema.getOtherActivityList();

            if (!otherActivitiesList.isEmpty()) {
                // search other activities associated with logged user
                // for the current reporting year
                OtherActivity otherActivity = new OtherActivity();
                otherActivity.setEmaId(ema);
                otherActivity.setReportingYearId(new ReportingYear(reportingYearFacade.getCurrentReportingYear().getId()));
                List<OtherActivity> resultsOtherActivities = otherActivityFacade.search(otherActivity);
                // extract the credits associated within other activity instance
                for (OtherActivity otherActivity1 : resultsOtherActivities) {
                    if ("Pending Adjudication".equalsIgnoreCase(otherActivity1.getStatusId().getActivityStatus()) ||
                            "Pending Information".equalsIgnoreCase(otherActivity1.getStatusId().getActivityStatus())) {
                        alertText = "We require further information from you "
                                + "before your activities can be evaluated.";
                    }
                }
            }
        }
        return alertText;
    }

    /**
     * Selects licence and navigates to evaluate other activity screen for editing
     */
    public String selectAlertLink() {
        // handle screen navigation when alert message is displayed
        if (!displayAlert().isEmpty()) {
            return "SubmitOtherActivities.xhtml";
        }
        return null;
    }


    /*
     * Getters and Setters
     */

    public List<Bulletin> getAllActiveBulletins() {
        return allActiveBulletins;
    }

    public void setAllActiveBulletins(List<Bulletin> allActiveBulletins) {
        this.allActiveBulletins = allActiveBulletins;
    }

    public List<Bulletin> getAllBulletins() {
        return allBulletins;
    }

    public void setAllBulletins(List<Bulletin> allBulletins) {
        this.allBulletins = allBulletins;
     }

    public Bulletin getBulletin() {
        return bulletin;
    }

    public void setBulletin(Bulletin bulletin) {
        this.bulletin = bulletin;
    }

    public EmergencyMedicalAssistant getEmergencyMedicalAssistant() {
        return ema;
    }

    public void setEmergencyMedicalAssistant(EmergencyMedicalAssistant ema) {
        this.ema = ema;
    }

    public List<EmergencyMedicalAssistant> getResultsEma(){
        return resultsEma;
    }

    public Qualification getQualification() {
        return qualification;
    }

    public void setQualification(Qualification qualification) {
        this.qualification = qualification;
    }

    public List<Qualification> getQualificationList() {
        return qualificationList;
    }

    public void setQualificationList(List<Qualification> qualificationList) {
        this.qualificationList = qualificationList;
    }

  public String getAlertCounterDays() {
    return alertCounterDays;
  }

}
