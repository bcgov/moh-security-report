/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        SubmitOtherActivities.java                     *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/
package ca.bc.gov.health.emaccs.web;

import ca.bc.gov.health.ejb.exception.FacadeException;
import ca.bc.gov.health.emaccs.ejb.entity.ActivityStatus;
import ca.bc.gov.health.emaccs.ejb.entity.EmergencyMedicalAssistant;
import ca.bc.gov.health.emaccs.ejb.entity.NocpArea;
import ca.bc.gov.health.emaccs.ejb.entity.NocpCompetencySubtype;
import ca.bc.gov.health.emaccs.ejb.entity.NocpCompetencyType;
import ca.bc.gov.health.emaccs.ejb.entity.OtherActivity;
import ca.bc.gov.health.emaccs.ejb.entity.OtherActivity2;
import ca.bc.gov.health.emaccs.ejb.entity.ReportingYear;
import ca.bc.gov.health.emaccs.ejb.session.AbstractFacade;
import ca.bc.gov.health.emaccs.ejb.session.ActivityStatusFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.EmaccsApplicationVariablesFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.EmergencyMedicalAssistantFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.NocpAreaFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.NocpCompetencySubtypeFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.NocpCompetencyTypeFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.OtherActivity2FacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.OtherActivityFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.ReportingYearFacadeLocal;
import ca.bc.gov.health.jsf.ApplicationBean;
import ca.bc.gov.health.jsf.SelectItemHelper;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.event.ValueChangeEvent;
import jakarta.faces.model.SelectItem;
import jakarta.faces.validator.ValidatorException;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.primefaces.event.FileUploadEvent;
import org.primefaces.model.file.UploadedFile;

@ViewScoped
@Named("SubmitOtherActivities")
public class SubmitOtherActivities extends ApplicationBean implements java.io.Serializable {

    private static final long serialVersionUID = 1L;
    private static final String CLASS_NAME = SubmitOtherActivities.class.getName();
    private static final Logger log = Logger.getLogger(CLASS_NAME);
    /*
     * Facade for persistence
     */
    @EJB
    private OtherActivityFacadeLocal otherActivityFacade;
    @EJB
    private OtherActivity2FacadeLocal otherActivity2Facade;
    @EJB
    private ActivityStatusFacadeLocal activityStatusFacade;
    @EJB
    private NocpAreaFacadeLocal nocpAreaFacade;
    @EJB
    private NocpCompetencyTypeFacadeLocal nocpCompetencyTypeFacade;
    @EJB
    private NocpCompetencySubtypeFacadeLocal nocpCompetencySubtypeFacade;
    @EJB
    private EmergencyMedicalAssistantFacadeLocal emergencyMedicalAssistantFacade;
    @EJB
    private EmaccsApplicationVariablesFacadeLocal emaccsApplicationVariablesFacade;
    @EJB
    private ReportingYearFacadeLocal reportingYearFacade;

    /*
     * The instance we're currently editing
     */
    private OtherActivity otherActivity = new OtherActivity();
    private OtherActivity2 otherActivity2 = new OtherActivity2();
    private OtherActivity otherActivityToDelete = new OtherActivity();
    private List<OtherActivity> otherActivityList = new ArrayList<>();
    private List<OtherActivity2> otherActivity2List = new ArrayList<>();
    private List<SelectItem> filteredNOCPTypes = new ArrayList<>();
    private List<SelectItem> filteredNOCPSubtypes = new ArrayList<>();

    // an object just for comments
    private OtherActivity yetAnotherActivity = new OtherActivity();
    /*
     * PK of the selected instance
     */
    private Long reportingYearId;
    private EmergencyMedicalAssistant emaInUse;
    private boolean ccExempt = false;
    private boolean pendingAdj = true;
    private boolean shortfall = true;
    private boolean editable = false;
    private boolean userIsEma;
    private boolean adjudicationPeriod = false;
    private boolean shortfallPeriod = false;
    private boolean uploadChanged = false;

    /* Currently searched for licence number; There's good reason to have it not null... */
    private String licenceNumber = "";

    private void searchByLicenceNo() {
        otherActivityList = otherActivityFacade.findByLicenceNumber(licenceNumber, reportingYearId);
    }

    private void searchByCurrentUser() {
        otherActivityList = otherActivityFacade.findByEmaIdReportingYear(user.getEmaId(), reportingYearId);
    }

    private EmergencyMedicalAssistant designateEMA(boolean isEMA, String licenceNo) {
        if (isEMA) {
            return new EmergencyMedicalAssistant(user.getEmaId());
        } else if (!licenceNo.isEmpty()) {
            EmergencyMedicalAssistant eQuery = new EmergencyMedicalAssistant();
            List<EmergencyMedicalAssistant> results;
            eQuery.setLicno(licenceNo);
            results = emergencyMedicalAssistantFacade.search(eQuery);
            if (results != null && !results.isEmpty()) {
                return new EmergencyMedicalAssistant(results.get(0).getRegisId());
            }
        }
        return null;
    }

    private OtherActivity setupOtherActivity() {
        OtherActivity temp = new OtherActivity();
        temp.setReportingYearId(new ReportingYear(reportingYearId));

        if (emaInUse != null) {
            temp.setEmaId(emaInUse);
        }

        temp.setNocpAreaId(new NocpArea());

        temp.setNocpCompetencyTypeId(new NocpCompetencyType());

        temp.setNocpCompetencySubtypeId(new NocpCompetencySubtype());

        temp.setStatusId(new ActivityStatus());

        temp.setStatusDate(new Date());

        return temp;
    }

    private OtherActivity2 setupOtherActivity2() {
        OtherActivity2 temp = new OtherActivity2();
        temp.setReportingYearId(new ReportingYear(reportingYearId));

        if (emaInUse != null) {
            temp.setEmaId(emaInUse);
        }

        temp.setNocpAreaId(new NocpArea());

        temp.setNocpCompetencyTypeId(new NocpCompetencyType());

        temp.setNocpCompetencySubtypeId(new NocpCompetencySubtype());

        temp.setStatusId(new ActivityStatus());

        temp.setStatusDate(new Date());

        return temp;
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        setUp();

        if (!licenceNumber.isEmpty()) {
            initList();
        }
    }

    private void setUp() {
        if (reportingYearId == null) {
            reportingYearId = reportingYearFacade.getCurrentReportingYear().getId();
        }

        if (user.getUserRole().equals("EMA")) {
            userIsEma = true;
            licenceNumber = user.getLicenceNo();

            ccExempt = user.isCCExempt(reportingYearId);
            shortfall = user.isShortFall(reportingYearId);
            pendingAdj = user.isPendingAdj(reportingYearId);
            adjudicationPeriod = emaccsApplicationVariablesFacade.isAdjudicationPeriod(reportingYearId);
            shortfallPeriod = emaccsApplicationVariablesFacade.isShortfallPeriod(reportingYearId);

        } else {
            userIsEma = false;
        }

        editable = super.selectedYearEditable(userIsEma, ccExempt, shortfall, pendingAdj, adjudicationPeriod, shortfallPeriod, reportingYearId);
        emaInUse = designateEMA(userIsEma, licenceNumber);
        otherActivity2 = setupOtherActivity2();

    }

    private void initList() {
        if (userIsEma) {
            searchByCurrentUser();
        } else if (!licenceNumber.isEmpty()) {
            searchByLicenceNo();
        }

        DecimalFormat myFormatter = new DecimalFormat("0.#");
        List<String> hours = new ArrayList<>();
        for (Double dd = 0.5; dd <= 40; dd += 0.5) {
            hours.add(myFormatter.format(dd));
        }
    }

    public void changeLicenceNumber(ValueChangeEvent event) {
        //find list of other activities for that EMA when the user searches for an EMA by licence number
        licenceNumber = (String) event.getNewValue();
        clearNOCPLists();
        if (!isValidLicenceNumber()) {
            addErrorMessage(licenceNumber + " is an invalid licence number.");
        }
        init();
    }

    public void search() {
        if (licenceNumber.length() < 6 ) {
            addErrorMessage("Please insert a valid licence number.");
            return;
        }
        clearNOCPLists();
        if (!isValidLicenceNumber()) {
            addErrorMessage(licenceNumber + " is an invalid licence number.");
        }
        init();
    }

    public boolean isValidLicenceNumber() {
        return super.isValidLicenceNumber(licenceNumber);
    }

    public void changeReportingYear(ValueChangeEvent event) {
        reportingYearId = (Long) event.getNewValue();
        init();
    }

    public void changeNOCPArea(ValueChangeEvent event) {
        clearNOCPLists();
        Object eventValue = event.getNewValue();
        if (eventValue != null && !eventValue.equals("")) {
            loadNOCPArea((Long) eventValue);
        }
    }

    private void loadNOCPArea(Long idToUser) {
        NocpCompetencyType params = new NocpCompetencyType();
        params.setNocpAreaId(new NocpArea(idToUser));
        List<NocpCompetencyType> results = nocpCompetencyTypeFacade.search(params);
        filteredNOCPTypes = SelectItemHelper.buildSelectItemList(results, "competencyCode", "competencyName", "id");
    }

    public void changeNOCPType(ValueChangeEvent event) {
        filteredNOCPSubtypes.clear();
        Object eventValue = event.getNewValue();
        if (eventValue != null && !eventValue.equals("")) {
            loadNOCPType((Long) eventValue);
        }
    }

    private void loadNOCPType(Long idToUser) {
        NocpCompetencySubtype params = new NocpCompetencySubtype();
        params.setNocpGeneralCompetencyId(new NocpCompetencyType(idToUser));
        List<NocpCompetencySubtype> results = nocpCompetencySubtypeFacade.search(params);
        if (results != null) {
            filteredNOCPSubtypes = SelectItemHelper.buildSelectItemList(results, "subtypeCompetencyCode", "subtypeCompetencyName", "id");
        }
    }

    /* clear out the NOCP competency list and specific competency list if the area list is cleared */
    public void clearNOCPLists() {
        filteredNOCPTypes.clear();
        filteredNOCPSubtypes.clear();
    }

    public double getOtherCreditTotal() {

        Double total = Double.valueOf(0);
        for (OtherActivity oa : otherActivityList) {
            if (oa.getCredits() != null) {
                total += oa.getCredits().doubleValue();
            }
            if (oa.getAdjudicatedCredits() != null) {
                total += oa.getAdjudicatedCredits().doubleValue();
            }
        }
        return total;
    }

    /**
     * Adds a new record
     */
    public String add() {
        // fix any broken keys
        nullify();

        // set these IDs to valid objects, this helps with displaying the NOCPs in the list
        otherActivity2.setNocpAreaId(nocpAreaFacade.find(otherActivity2.getNocpAreaId().getId()));

        if (otherActivity2.getNocpCompetencyTypeId() != null && otherActivity2.getNocpCompetencyTypeId().getId() > 0) {
            otherActivity2.setNocpCompetencyTypeId(nocpCompetencyTypeFacade.find(otherActivity2.getNocpCompetencyTypeId().getId()));
            if (otherActivity2.getNocpCompetencySubtypeId() != null && otherActivity2.getNocpCompetencySubtypeId().getId() > 0) {
                otherActivity2.setNocpCompetencySubtypeId(nocpCompetencySubtypeFacade.find(otherActivity2.getNocpCompetencySubtypeId().getId()));
            }
        }

        if (otherActivity2.getStatusId().getId() != null) {
            otherActivity2.setStatusId(activityStatusFacade.find(otherActivity2.getStatusId().getId()));
        } else {
            ActivityStatus aStat = new ActivityStatus();
            aStat.setActivityStatus("Pending Review");
            List<ActivityStatus> aStatList = activityStatusFacade.search(aStat);
            if (!aStatList.isEmpty()) {
                otherActivity2.setStatusId(aStatList.get(0));
            }
        }
        otherActivity2.setReportingYearId(new ReportingYear(getReportingYearId(otherActivity2.getEndDate())));

        try {
            otherActivity2Facade.create(otherActivity2);
            // add it to the inserts list, and the displayed list
            otherActivity.copyProps(otherActivity2);
            otherActivityList.add(0, otherActivity);
            addInfoMessage("Add Successful");
            try {
                otherActivity2Facade.checkRequirements(emaInUse.getRegisId(), reportingYearId, false);
            } catch (Exception e) {
                log.log(Level.INFO, "Submit other activity - requirement failed :{0}", e.getMessage());
            }
        } catch (FacadeException e) {
            log.log(Level.INFO, "Submit other activities - add failed : {0}", e.getMessage());
            addErrorMessage("Add Failed. Try again by navigating away and returning to screen. Contact EMA Licensing if problem persists");
            if (e.getExceptionClass() != null && e.getExceptionClass().getSimpleName().equals("PersistenceException")) {
                addErrorMessage("Please double check your values as you enter them");
            }

        } catch (Exception e) {
            log.log(Level.INFO, "Submit other activities - add failed : {0}", e.getMessage());
            addErrorMessage("Add Failed. Try again by navigating away and returning to screen. Contact EMA Licensing if problem persists");
        }
        // reset the current object and set up the form again
        return refresh();
    }

    /**
     * Updates an existing record
     */
    public String update() throws ParseException {
        // fix any broken keys
        nullify();

        // remove the record from the inserts list incase it already exists there
        otherActivity.setChange(AbstractFacade.EntityChange.None);
        otherActivity2.setChange(AbstractFacade.EntityChange.Change);

        // set these IDs to valid objects, this helps with displaying the NOCPs in the list
        otherActivity2.setNocpAreaId(nocpAreaFacade.find(otherActivity2.getNocpAreaId().getId()));

        if (otherActivity2.getNocpCompetencyTypeId() != null && otherActivity2.getNocpCompetencyTypeId().getId() > 0) {
            otherActivity2.setNocpCompetencyTypeId(nocpCompetencyTypeFacade.find(otherActivity2.getNocpCompetencyTypeId().getId()));
            if (otherActivity2.getNocpCompetencySubtypeId() != null && otherActivity2.getNocpCompetencySubtypeId().getId() > 0) {
                otherActivity2.setNocpCompetencySubtypeId(nocpCompetencySubtypeFacade.find(otherActivity2.getNocpCompetencySubtypeId().getId()));
            }
        }
        otherActivity2.setReportingYearId(new ReportingYear(getReportingYearId(otherActivity2.getEndDate())));
        // If the activity was in Pending Information status, update it to Pending Review status
        if (otherActivity2.getStatusId().getActivityStatus().equalsIgnoreCase("Pending Information")) {
            ActivityStatus tempAS = new ActivityStatus();
            tempAS.setActivityStatus("Pending Review");
            List<ActivityStatus> results = activityStatusFacade.search(tempAS);

            if (!results.isEmpty()) {
                otherActivity2.setStatusId(results.get(0));
            }
        }
        OtherActivity2 replacement = null;

        try {
            replacement = otherActivity2Facade.edit(otherActivity2);
            try {
                otherActivity2Facade.checkRequirements(otherActivity2.getEmaId().getRegisId(), reportingYearId, true);
            } catch (Exception e) {
                log.log(Level.INFO, "Submit other activity - requirement failed :{0}", e.getMessage());
            }
            addInfoMessage("Update Successful");
        } catch (FacadeException e) {
            log.log(Level.INFO, "Submit other activities - update failed : {0}", e.getMessage());
            addErrorMessage("Update Failed. Try again by navigating away and returning to screen. Contact EMA Licensing if problem persists");
            if (e.getExceptionClass() != null && e.getExceptionClass().getSimpleName().equals("PersistenceException")) {
                addErrorMessage("Please double check your values as you enter them");
            }

        } catch (Exception e) {
            log.log(Level.INFO, "Submit other activities - update failed : {0}", e.getMessage());
            addErrorMessage("Update Failed. Try again by navigating away and returning to screen. Contact EMA Licensing if problem persists");
        }
        if (replacement != null) {
            otherActivity.copyProps(replacement);
        }

        otherActivityList.add(0, otherActivity);

        // reset the current object and set up the form again
        return refresh();
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        uploadChanged = false;
        otherActivity2.copyProps2(otherActivity);
        otherActivityList = removeThisOa(otherActivity, otherActivityList);
        //otherActivity2List = removeThisOa(otherActivity2, otherActivity2List);
        return null;
    }

    /**
     * Deletes a record
     */
    public void delete() {
        try {
            otherActivityFacade.remove(otherActivityToDelete);
            otherActivityList.remove(otherActivityToDelete);
            otherActivityToDelete = null;
            addInfoMessage("Delete Successful");

        } catch (FacadeException e) {
            log.log(Level.INFO, "Submit other activities - delete failed : {0}", e.getMessage());
            addErrorMessage("Delete Failed. Try again by navigating away and returning to screen. Contact EMA Licensing if problem persists");
        }
    }

    /**
     * called at the end of add / update serves a similar purpose to clear(),
     * but doesn't reprocess the displayed list i.e. doesn't erase the displayed
     * list, re-query the database, and re-add the temp lists (inserts, updates)
     */
    public String refresh() {
        //required
        otherActivity = null;
        otherActivity2 = null;
        //clearNOCPLists();
        return clear();
    }

    /**
     * Clears the form
     */
    public String clear() {
        //this.setOtherActivity(setupOtherActivity());
        this.setOtherActivity2(setupOtherActivity2());
        clearNOCPLists();
        uploadChanged = false;
        return null;
    }

    /**
     * Cancels current action Clears the temp lists and retrieves the displayed
     * list from the database
     */
    public String cancel() {
        init();
        return null;
    }

    /**
     * Nullifies any parent records where proper PKs aren't set
     */
    private void nullify() {
        if (otherActivity2.getNocpAreaId() != null && otherActivity2.getNocpAreaId().getId() == null) {
            otherActivity2.setNocpAreaId(null);
            otherActivity2.setNocpAreaId(null);
        }
        if (otherActivity2.getReportingYearId() != null && otherActivity2.getReportingYearId().getId() == null) {
            otherActivity2.setReportingYearId(null);
            otherActivity2.setReportingYearId(null);
        }
        if (otherActivity2.getNocpCompetencyTypeId() != null && otherActivity2.getNocpCompetencyTypeId().getId() == null) {
            otherActivity2.setNocpCompetencyTypeId(null);
            otherActivity2.setNocpCompetencyTypeId(null);
        }
        if (otherActivity2.getNocpCompetencySubtypeId() != null && otherActivity2.getNocpCompetencySubtypeId().getId() == null) {
            otherActivity2.setNocpCompetencySubtypeId(null);
            otherActivity2.setNocpCompetencySubtypeId(null);
        }
    }

    public String uploadFile(FileUploadEvent event) throws Exception {

        try {
            log.log(Level.INFO, "java.io.tmpdir= {0}", System.getProperty("java.io.tmpdir"));
            log.log(Level.INFO, "file tmp name= {0}", event.getFile().getFileName());
            
            UploadedFile item = event.getFile();
            String name = item.getFileName();
            String mimeType = item.getContentType();

            log.log(Level.INFO, "vÃ©rification du caractÃ¨re de fin");
            if (name.contains("\\")) {
                name = name.substring(name.lastIndexOf('\\') + 1);
            }

            log.log(Level.INFO, "vÃ©rification de la rÃ¨gle des 200 cars.");
            if (name.length() > 200) {
                String message = "Filename for file to upload must be 200 characters or less.";
                addErrorMessage(message);
                throw new ValidatorException(new FacesMessage(message));
            }
            if (mimeType.length() > 200) {
                mimeType = mimeType.substring(0, 200);
            }

            log.log(Level.INFO, "vÃ©rification de la taille - 50 mg");
            
            //Limit size of the file to 50mb (52,428,800 bytes - 50mg)
            if (item.getSize() >= 52428800) {
                String message = "File exceeds 50 megs limit. Please consider compressing the file(zip) or to use another file format.";
                addErrorMessage(message);
                throw new ValidatorException(new FacesMessage(message));
            }

            log.log(Level.INFO, "Joindre le fichier - DÃ©but");
            otherActivity2.setAttachment(item.getContent());
            otherActivity2.setMimetype(mimeType);
            otherActivity2.setFilename(name);
            log.log(Level.INFO, "Joindre le fichier - Fin");
        } catch (Exception ex) {
            log.log(Level.INFO,ex.getLocalizedMessage());
            throw new ValidatorException(new FacesMessage("Localize message : " + ex.getLocalizedMessage()));
        }

        uploadChanged = true;

        return null;
    }


    /*
     * Method to remove an EmploymentHolder object from a list, based on ID
     * Used to ensure there are no duplicates, and called in multiple places
     */
    private List<OtherActivity> removeThisOa(OtherActivity removeObjectLikeThis, List<OtherActivity> theList) {
        if (!theList.isEmpty()) {
            for (OtherActivity theObject : theList) {
                if (removeObjectLikeThis.getId().toString().equals(theObject.getId().toString())) {
                    theList.remove(theObject);
                    break;
                }
            }
        }
        return theList;
    }

    private List<OtherActivity2> removeThisOa(OtherActivity2 removeObjectLikeThis, List<OtherActivity2> theList) {
        if (!theList.isEmpty()) {
            for (OtherActivity2 theObject : theList) {
                if (removeObjectLikeThis.getId().toString().equals(theObject.getId().toString())) {
                    theList.remove(theObject);
                    break;
                }
            }
        }
        return theList;
    }

    /*
     * Getters and Setters
     */
    public List<SelectItem> getFilteredNOCPSubtypes() {
        return filteredNOCPSubtypes;
    }

    public void setFilteredNOCPSubtypes(List<SelectItem> filteredNOCPSubtypes) {
        this.filteredNOCPSubtypes = filteredNOCPSubtypes;
    }

    public List<SelectItem> getFilteredNOCPTypes() {
        return filteredNOCPTypes;
    }

    public void setFilteredNOCPTypes(List<SelectItem> filteredNOCPTypes) {
        this.filteredNOCPTypes = filteredNOCPTypes;
    }

    public OtherActivity getOtherActivity() {
        return otherActivity;
    }

    public OtherActivity2 getOtherActivity2() {
        return otherActivity2;
    }

    public void setOtherActivity(OtherActivity otherActivity) {
        if (this.otherActivity != null && this.otherActivity.getId() != null) {
            otherActivityList.add(0, this.otherActivity);
        }
        if (otherActivity.getNocpAreaId() == null || otherActivity.getNocpAreaId().getId() == null) {
            otherActivity.setNocpAreaId(new NocpArea());
        } else {
            loadNOCPArea(otherActivity.getNocpAreaId().getId());
        }
        if (otherActivity.getNocpCompetencyTypeId() == null || otherActivity.getNocpCompetencyTypeId().getId() == null) {
            otherActivity.setNocpCompetencyTypeId(new NocpCompetencyType());
        } else {
            loadNOCPType(otherActivity.getNocpCompetencyTypeId().getId());
        }
        if (otherActivity.getNocpCompetencySubtypeId() == null || otherActivity.getNocpCompetencySubtypeId().getId() == null) {
            otherActivity.setNocpCompetencySubtypeId(new NocpCompetencySubtype());
        }

        this.otherActivity = otherActivity;
    }

    public void setOtherActivity2(OtherActivity2 otherActivity2) {
        if (this.otherActivity2 != null && this.otherActivity2.getId() != null) {
            otherActivity2List.add(0, this.otherActivity2);
        }
        if (otherActivity2.getNocpAreaId() == null || otherActivity2.getNocpAreaId().getId() == null) {
            otherActivity2.setNocpAreaId(new NocpArea());
        } else {
            loadNOCPArea(otherActivity2.getNocpAreaId().getId());
        }
        if (otherActivity2.getNocpCompetencyTypeId() == null || otherActivity2.getNocpCompetencyTypeId().getId() == null) {
            otherActivity2.setNocpCompetencyTypeId(new NocpCompetencyType());
        } else {
            loadNOCPType(otherActivity2.getNocpCompetencyTypeId().getId());
        }
        if (otherActivity2.getNocpCompetencySubtypeId() == null || otherActivity2.getNocpCompetencySubtypeId().getId() == null) {
            otherActivity2.setNocpCompetencySubtypeId(new NocpCompetencySubtype());
        }

        this.otherActivity2 = otherActivity2;
    }

    public List<OtherActivity> getOtherActivityList() {
        return otherActivityList;
    }

    public List<OtherActivity2> getOtherActivity2List() {
        return otherActivity2List;
    }

    public void setOtherActivityList(List<OtherActivity> otherActivityList) {
        this.otherActivityList = otherActivityList;
    }

    public Long getReportingYearId() {
        return reportingYearId;
    }

    public void setReportingYearId(Long reportingYearId) {
        this.reportingYearId = reportingYearId;
    }

    public String getLicenceNumber() {
        return licenceNumber;
    }

    public void setLicenceNumber(String licenceNumber) {
        this.licenceNumber = licenceNumber;
    }

    public boolean isCcExempt() {
        return ccExempt;
    }

    //depends on setup
    public boolean isPendingAdj() {
        return pendingAdj;
    }

    //depends on setup
    public boolean isShortfall() {
        return shortfall;
    }

    public boolean isUserIsEma() {
        return userIsEma;
    }

    public OtherActivity getYetAnotherActivity() {
        return yetAnotherActivity;
    }

    public void setYetAnotherActivity(OtherActivity yetAnotherActivity) {
        this.yetAnotherActivity = yetAnotherActivity;
    }

    public boolean isEditable() {
        return editable;
    }

    public boolean isShortfallPeriod() {
        return shortfallPeriod;
    }

    public boolean isAdjudicationPeriod() {
        return adjudicationPeriod;
    }

    public OtherActivity getOtherActivityToDelete() {
        return otherActivityToDelete;
    }

    public void setOtherActivityToDelete(OtherActivity otherActivityToDelete) {
        this.otherActivityToDelete = otherActivityToDelete;
    }

    public boolean isUploadChanged() {
        return uploadChanged;
    }

    public boolean hasAttachment(int rowId) {
        return otherActivity2Facade.hasAttachment(otherActivity2.getEMA_Id(), rowId);
    }

}
