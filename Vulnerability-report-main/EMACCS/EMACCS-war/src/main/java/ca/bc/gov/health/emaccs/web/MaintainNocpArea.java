/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        MaintainNocpArea.java                          *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

package ca.bc.gov.health.emaccs.web;


import ca.bc.gov.health.ejb.exception.FacadeException;
import ca.bc.gov.health.emaccs.ejb.entity.NocpArea;
import ca.bc.gov.health.emaccs.ejb.session.NocpAreaFacadeLocal;
import ca.bc.gov.health.jsf.BaseBean;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.util.List;


/**
 * Backing bean for NocpArea code table maintenance
 */
@ViewScoped
@Named("MaintainNocpArea")
public class MaintainNocpArea extends BaseBean implements java.io.Serializable {
    private static final long serialVersionUID = 1L;

    @EJB
    private NocpAreaFacadeLocal nocpAreaFacade;

    @Inject 
    private Droplists droplists;
    
    private List<NocpArea> allNocpAreas;
    private NocpArea nocpArea;
    private Object selectedKey;

    /**
     * Default Constructor
     */
    public MaintainNocpArea() {
    }

    /**
     * Initializes this bean after injection
     */
    @PostConstruct
    public void init() {
        allNocpAreas = nocpAreaFacade.findAll();
        nocpArea = new NocpArea();
    }

    /**
     * Adds a new record
     */
    public String add() {
        nullify();

        try {
            nocpAreaFacade.create(nocpArea);
            addInfoMessage("Add Successful");
        } catch (FacadeException e) {
                    addErrorMessage("Cannot add record");
        }

        return clear();
    }

    /**
     * Updates an existing record
     */
    public String update() {
        nullify();
        try{
            nocpAreaFacade.edit(nocpArea);
            addInfoMessage("Update Successful");
        } catch (FacadeException e) {
                    addErrorMessage("Cannot update record");
        }
        return clear();
    }

    /**
     * Deletes a record
     */
    public String delete() {
        nullify();
        try {
            for (int i = 0; i < allNocpAreas.size(); i++) {
                if (allNocpAreas.get(i).getId().equals(selectedKey)) {
                    nocpAreaFacade.remove(allNocpAreas.get(i));
                }
            }
            addInfoMessage("Remove Successful");
        } catch (FacadeException e) {
                    addErrorMessage("Cannot remove record.");
        }
        return clear();
    }

    /**
     * Clears the form
     */
    public String clear() {
        init();
        droplists.initNocpAreas();
        selectedKey = null;
        nocpArea = new NocpArea();
        return null;
    }

    /**
     * Selects a record for editing
     */
    public String select() {
        for (int i = 0; i < allNocpAreas.size(); i++) {
            if (allNocpAreas.get(i).getId().equals(selectedKey)) {
                nocpArea = allNocpAreas.get(i);
            }
        }
        return null;
    }

    /**
     * Nullifies any parent records where proper PKs aren't set
     */
    private void nullify() {
    }
    /*
     * Getters and Setters
     */

    public List<NocpArea> getAllNocpAreas() {
        return allNocpAreas;
    }

    public void setAllNocpAreas(List<NocpArea> allNocpAreas) {
        this.allNocpAreas = allNocpAreas;
    }

    public NocpArea getNocpArea() {
        return nocpArea;
    }

    public void setNocpArea(NocpArea nocpArea) {
        this.nocpArea = nocpArea;
    }

    public Object getSelectedKey() {
        return selectedKey;
    }

    public void setSelectedKey(Object selectedKey) {
        this.selectedKey = selectedKey;
    }
        
    //Required due to ManagedProperty above
    public void setDroplists(Droplists droplists) {
        this.droplists = droplists;
    }
}