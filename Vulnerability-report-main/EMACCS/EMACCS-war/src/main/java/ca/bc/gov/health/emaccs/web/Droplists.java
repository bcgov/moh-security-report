/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        Droplists.java                                 *
 * Date of Last Commit: $Date:: 2016-12-19 10:04:18 -0800 (Mon, 19 Dec 2016) $ *
 * Revision Number:      $Rev:: 2669                                         $ *
 * Last Commit by:    $Author:: tschiavo                                     $ *
 *                                                                             *
 *******************************************************************************/
package ca.bc.gov.health.emaccs.web;

import ca.bc.gov.health.emaccs.ejb.entity.ActivityStatus;
import ca.bc.gov.health.emaccs.ejb.entity.Employer;
import ca.bc.gov.health.emaccs.ejb.entity.NocpArea;
import ca.bc.gov.health.emaccs.ejb.entity.NocpCompetencySubtype;
import ca.bc.gov.health.emaccs.ejb.entity.NocpCompetencyType;
import ca.bc.gov.health.emaccs.ejb.session.ActivityStatusFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.ActivityTypeFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.ContactSubtypeFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.ContactTypeFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.EmployerFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.KeycloakFacade;
import ca.bc.gov.health.emaccs.ejb.session.KeycloakUser;
import ca.bc.gov.health.emaccs.ejb.session.LkadjstatusFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.LkcmedatFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.LkexamtypeFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.NocpAreaFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.NocpCompetencySubtypeFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.NocpCompetencyTypeFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.ProvinceFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.ReportingYearFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.SkillFacadeLocal;
import ca.bc.gov.health.jsf.SelectItemHelper;
import ca.bc.gov.health.util.SecurityUtil;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.faces.model.SelectItem;
import jakarta.inject.Named;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

@ApplicationScoped
@Named("Droplists")
public class Droplists implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	private static final String CLASS_NAME = Droplists.class.getName();
    private static final Logger log = Logger.getLogger(CLASS_NAME);

    @EJB
    private ActivityStatusFacadeLocal activityStatusFacade;
    @EJB
    private ActivityTypeFacadeLocal activityTypeFacade;
    @EJB
    private ContactSubtypeFacadeLocal contactSubtypeFacade;
    @EJB
    private ContactTypeFacadeLocal contactTypeFacade;
    @EJB
    private EmployerFacadeLocal employerFacade;
    @EJB
    private NocpAreaFacadeLocal nocpAreaFacade;
    @EJB
    private NocpCompetencySubtypeFacadeLocal nocpCompetencySubtypeFacade;
    @EJB
    private NocpCompetencyTypeFacadeLocal nocpCompetencyTypeFacade;
    @EJB
    private ReportingYearFacadeLocal reportingYearFacade;
    @EJB
    private ProvinceFacadeLocal provinceFacade;
    @EJB
    private LkexamtypeFacadeLocal lkExamTypeFacade;
    @EJB
    private LkadjstatusFacadeLocal lkAdjStatusFacade;
    @EJB
    private LkcmedatFacadeLocal lkcmedatFacade;
    @EJB
    private SkillFacadeLocal skillFacade;
    @EJB
    private KeycloakFacade keycloakFacade;

    private List<SelectItem> activityStatus;
    private List<SelectItem> activityTypes;
    private List<SelectItem> enabledActivityTypes;
    private List<SelectItem> contactSubtypes;
    private List<SelectItem> contactTypes;
    private List<SelectItem> nocpAreas;
    private List<SelectItem> nocpCompetencySubtypes;
    private List<SelectItem> nocpCompetencyTypes;
    private List<SelectItem> reportingYears;
    private List<SelectItem> provinces;
    private List<SelectItem> hoursList;
    private List<SelectItem> skills;

    private List<SelectItem> lkExamType;
    private List<SelectItem> lkCmedats;
    private List<SelectItem> lkAdjstatus;

    private Long employerTimeout;
    private Long userTimeout;
    private List<SelectItem> employerList;
    private List<SelectItem> usersList;

    private List<ActivityStatus> allActivityStatus;
    private List<NocpArea> allNocpAreas;
    private List<NocpCompetencyType> allNocpTypes;
    private List<NocpCompetencySubtype> allNocpSubTypes;

    @PostConstruct
    public void init() {
        long startTime = System.currentTimeMillis();
        initActivityStatus();
        initActivityTypes();
        initEnabledActivityTypes();
        initContactSubtypes();
        initContactTypes();
        initNocpAreas();
        initNocpSubtypes();
        initNocpTypes();
        initReportingYears();
        initProvinces();
        initEmployers();
        initHoursList();
        initLkExamtype();
        initLkAdjStatus();
        initLkCmedats();
        initSkills();
        log.log(Level.INFO, "DropLists init() takes:  " + (System.currentTimeMillis() - startTime) + " ms");
    }

    public void initProvinces() {
        long startTime = System.currentTimeMillis();
        List a = provinceFacade.findAll();
        provinces = SelectItemHelper.buildSelectItemList(a, "provinceCode", "provinceCode");
        log.log(Level.INFO, "12, initProvinces() takes:  " + (System.currentTimeMillis() - startTime) + " ms, size: " + a.size());
    }

    //TODO cache
    public void initReportingYears() {
        long startTime = System.currentTimeMillis();
        List a = reportingYearFacade.findAll();
        reportingYears = SelectItemHelper.buildSelectItemList(a, "reportingYear", "id");
        int size = reportingYears.size();

        for (int count = 0; count < size - (size - 1); count++) {
            // Always remove the first one, until there are 4 left
            reportingYears.remove(0);
        }
        Collections.reverse(reportingYears);
        log.log(Level.INFO, "10, initReportingYears() takes:  " + (System.currentTimeMillis() - startTime) + " ms, size: " + size);

    }

    public void initNocpAreas() {
        long startTime = System.currentTimeMillis();
        allNocpAreas = nocpAreaFacade.findAll();
        nocpAreas = SelectItemHelper.buildSelectItemList(allNocpAreas, "areaCode", "areaName", "id");
        log.log(Level.INFO, "7, initNocpAreas() takes:  " + (System.currentTimeMillis() - startTime) + " ms, size: " + allNocpAreas.size());
    }

    public void initNocpTypes() {
        long startTime = System.currentTimeMillis();
        allNocpTypes = nocpCompetencyTypeFacade.findAll();
        nocpCompetencyTypes = SelectItemHelper.buildSelectItemList(allNocpTypes, "competencyCode", "competencyName", "id");
        log.log(Level.INFO, "9, initNocpTypes() takes:  " + (System.currentTimeMillis() - startTime) + " ms, size: " + allNocpTypes.size());
    }

    public void initNocpSubtypes() {
        long startTime = System.currentTimeMillis();
        allNocpSubTypes = nocpCompetencySubtypeFacade.findAll();
        nocpCompetencySubtypes = SelectItemHelper.buildSelectItemList(allNocpSubTypes, "subtypeCompetencyCode", "subtypeCompetencyName", "id");
        log.log(Level.INFO, "8, initNocpSubtypes() takes:  " + (System.currentTimeMillis() - startTime) + " ms, size: " + allNocpSubTypes.size());
    }

    public void initContactTypes() {
        long startTime = System.currentTimeMillis();
        List a = contactTypeFacade.findAll();
        contactTypes = SelectItemHelper.buildSelectItemList(a, "contactTypeName", "id");
        log.log(Level.INFO, "5, initContactTypes() takes:  " + (System.currentTimeMillis() - startTime) + " ms, size: " + a.size());
    }

    public void initContactSubtypes() {
        long startTime = System.currentTimeMillis();
        List a = contactSubtypeFacade.findAll();
        contactSubtypes = SelectItemHelper.buildSelectItemList(a, "contactSubtypeName", "id");
        log.log(Level.INFO, "4, initContactSubtypes() takes:  " + (System.currentTimeMillis() - startTime) + " ms, size: " + a.size());
    }

    public void initActivityStatus() {
        long startTime = System.currentTimeMillis();
        allActivityStatus = activityStatusFacade.findAll();
        Collections.sort(allActivityStatus, (ActivityStatus s1, ActivityStatus s2) -> s1.getActivityStatus().compareToIgnoreCase(s2.getActivityStatus()));
        activityStatus = SelectItemHelper.buildSelectItemList(allActivityStatus, "activityStatus", "id");
        log.log(Level.INFO, "1, initActivityStatus() takes:  " + (System.currentTimeMillis() - startTime) + " ms, size: " + allActivityStatus.size());
    }

    public void initActivityTypes() {
        long startTime = System.currentTimeMillis();
        List a = activityTypeFacade.findAll();
        List<SelectItem> temp = SelectItemHelper.buildSelectItemList(a, "activityName", "id", false);
        Collections.sort(temp, new Comparator<SelectItem>() {
            @Override
            public int compare(SelectItem o1, SelectItem o2) {
                return o1.getLabel().compareToIgnoreCase(o2.getLabel());
            }
        });
        activityTypes = temp;
        log.log(Level.INFO, "2, initActivityTypes() takes:  " + (System.currentTimeMillis() - startTime) + " ms, size: " + a.size());
    }

    public void initEnabledActivityTypes() {
        long startTime = System.currentTimeMillis();
        List a = activityTypeFacade.findEnabled();
        List<SelectItem> temp = SelectItemHelper.buildSelectItemList(a, "activityName", "id", false);
        Collections.sort(temp, new Comparator<SelectItem>() {
            @Override
            public int compare(SelectItem o1, SelectItem o2) {
                return o1.getLabel().compareToIgnoreCase(o2.getLabel());
            }
        });
        enabledActivityTypes = temp;
        log.log(Level.INFO, "2, initEnabledActivityTypes() takes:  " + (System.currentTimeMillis() - startTime) + " ms, size: " + a.size());
    }

    public void initEmployers() {
        long startTime = System.currentTimeMillis();
        List<Employer> origList = employerFacade.findAllUnique();
        List<Employer> capsList = new ArrayList();
        //External defect #21 - they want all Employer names to be in all CAPS
        for (Employer e : origList) {
            e.setDeptname(e.getDeptname().toUpperCase());
            capsList.add(e);
        }
        employerList = SelectItemHelper.buildSelectItemList(capsList, "deptname", "deptcode");
        employerTimeout = System.currentTimeMillis() + 1000 * 60 * 5;
        log.log(Level.INFO, "13, initEmployers() takes:  " + (System.currentTimeMillis() - startTime) + " ms, size: " + capsList.size());
    }

    public void initHoursList() {
        long startTime = System.currentTimeMillis();
        if (hoursList == null || hoursList.isEmpty()) {
            hoursList = new ArrayList();
            DecimalFormat myFormatter = new DecimalFormat("0.#");
            List<String> hours = new ArrayList<>();
            for (Double dd = 0.5; dd <= 40; dd += 0.5) {
                hours.add(myFormatter.format(dd));
            }
            hoursList = SelectItemHelper.buildSelectItemList(hours);
        }
        log.log(Level.INFO, "14, initHoursList() takes:  " + (System.currentTimeMillis() - startTime) + " ms, size: " + hoursList.size());
    }

    public void initSkills() {
        long startTime = System.currentTimeMillis();
        List a = skillFacade.findAll();
        skills = SelectItemHelper.buildSelectItemList(a, "skillName", "id");
        log.log(Level.INFO, "11, initSkills() takes:  " + (System.currentTimeMillis() - startTime) + " ms, size: " + a.size());
    }

    public void initLkExamtype() {
        lkExamType = SelectItemHelper.buildSelectItemList(lkExamTypeFacade.findAll(), "addesc", "id");
    }

    public void initLkAdjStatus() {
        lkAdjstatus = SelectItemHelper.buildSelectItemList(lkAdjStatusFacade.findAll(), "addesc", "id");
    }

    public void initLkCmedats() {
        lkCmedats = SelectItemHelper.buildSelectItemList(lkcmedatFacade.findAll(), "cdesc", "ccode");
        log.log(Level.INFO, "lkcemedat initialized, size: {0}", lkCmedats.size());
    }

    /* Getters and Setters */
    public List<SelectItem> getActivityStatus() {
        return activityStatus;
    }

    public List<SelectItem> getActivityTypes() {
        return activityTypes;
    }

    public List<SelectItem> getEnabledActivityTypes() {
        return enabledActivityTypes;
    }

    public List<SelectItem> getContactSubtypes() {
        return contactSubtypes;
    }

    public List<SelectItem> getContactTypes() {
        return contactTypes;
    }

    public List<SelectItem> getEmployers() {
        if (employerList == null || System.currentTimeMillis() > employerTimeout) {
            initEmployers();
        }
        return employerList;
    }

    public List<SelectItem> getHoursList() {
        if (hoursList == null || hoursList.isEmpty()) {
            this.initHoursList();
        }
        return hoursList;
    }

    public List<SelectItem> getNocpAreas() {
        return nocpAreas;
    }

    public List<SelectItem> getNocpCompetencySubtypes() {
        return nocpCompetencySubtypes;
    }

    public List<SelectItem> getNocpCompetencyTypes() {
        return nocpCompetencyTypes;
    }

    public List<SelectItem> getReportingYears() {
        return reportingYears;
    }

    public List<SelectItem> getUsers() {
        if (usersList == null || System.currentTimeMillis() > userTimeout) {
            ArrayList<SelectItem> tempUsersList = new ArrayList<>();

    		// Search for CA/CCA/DIRECTOR users
    		List<String> roles = Arrays.asList("CA", "CCA", "DIRECTOR");
    		roles.forEach(role -> {
                List<KeycloakUser> users = keycloakFacade.getAdminUsers(role);
                users.forEach(user -> {
                	String userName = SecurityUtil.formatUserName(user.getUsername()).toUpperCase();
                	tempUsersList.add(new SelectItem(userName, user.getRole() + " - " + userName));
                });    			
    		});

            Collections.sort(tempUsersList, new Comparator<SelectItem>() {
                @Override
                public int compare(SelectItem o1, SelectItem o2) {
                    return o1.getLabel().compareTo(o2.getLabel());
                }
            });
            usersList = tempUsersList;

            userTimeout = System.currentTimeMillis() + 1000 * 60 * 5;
        }
        return usersList;
    }
    
    public List<SelectItem> getProvinces() {
        if (provinces == null || provinces.isEmpty()) {
            this.initProvinces();
        }
        return provinces;
    }

    public List<NocpArea> getAllNocpAreas() {
        return allNocpAreas;
    }

    public List<NocpCompetencyType> getAllNocpTypes() {
        return allNocpTypes;
    }

    public List<NocpCompetencySubtype> getAllNocpSubTypes() {
        return allNocpSubTypes;
    }

    public List<SelectItem> getLkExamType() {
        return lkExamType;
    }

    public List<SelectItem> getLkCmedats() {
        return lkCmedats;
    }

    public List<SelectItem> getLkAdjstatus() {
        return lkAdjstatus;
    }

    public List<SelectItem> getSkills() {
        return skills;
    }

    public List<ActivityStatus> getAllActivityStatus() {
        return allActivityStatus;
    }

}
