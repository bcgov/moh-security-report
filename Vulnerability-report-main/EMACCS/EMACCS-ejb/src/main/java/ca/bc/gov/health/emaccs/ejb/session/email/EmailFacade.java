/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        EmailFacade.java                               *
 * Date of Last Commit: $Date:: 2016-11-18 12:55:57 -0800 (Fri, 18 Nov 2016) $ *
 * Revision Number:      $Rev:: 2649                                         $ *
 * Last Commit by:    $Author:: tschiavo                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.emaccs.ejb.session.email;

import ca.bc.gov.health.ejb.exception.FacadeException;
import ca.bc.gov.health.emaccs.ejb.entity.EmailMessage;
import ca.bc.gov.health.emaccs.ejb.entity.EmergencyMedicalAssistant;
import ca.bc.gov.health.emaccs.ejb.session.ContextDependent;
import ca.bc.gov.health.emaccs.ejb.session.EmailMessageFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.EmergencyMedicalAssistantFacadeLocal;
import jakarta.ejb.EJB;
import jakarta.ejb.Stateless;
import java.io.Serializable;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author greg.perkins
 */
@Stateless(name = "EmailFacade")
public class EmailFacade extends ContextDependent implements EmailFacadeLocal, Serializable {

    private static final String CLASS_NAME = EmailFacade.class.getName();
    private static final Logger log = Logger.getLogger(CLASS_NAME);
    @EJB
    private EmailMessageFacadeLocal emailMessageFacade;
    @EJB
    private EmergencyMedicalAssistantFacadeLocal emergencyMedicalAssistantFacade;
    private EmailService svc;

    public EmailFacade() {
        try {
            Hashtable jndiEmailContext = super.getDirContext("java:app/emaccs/mail_properties");
            String server = (String) jndiEmailContext.get("mailServer");
            if (server == null) {
                //TODO - too much info?
                log.log(Level.SEVERE, "Unable to retrive 'mailServer' from 'java:app/emaccs/mail_properties'");
            }
            svc = new EmailService(server);
        } catch (Exception e) {
            log.log(Level.SEVERE, e.getMessage());
            FacadeException messageToUser = new FacadeException(e, e.getClass());
            throw messageToUser;
        }
    }

    private boolean sendEmail(EmailMessage emailObj, String emailName) {
        try {
            svc.sendEmail(emailObj);
            return true;
        } catch (Exception e) {
            log.log(Level.SEVERE, "sending email: {0} failed with message:{1}\n emailBody:{2}", new Object[]{emailName, e.getMessage(), emailObj.getBody()});
            return false;
        }
    }

    /**
     * *
     *
     * @param finalOutput the entire string of the message less the signature
     * that's added in this method
     */
    @Override
    public boolean sendNewYearBatch(String finalOutput) {
        String emailDesc = "New Year Batch";
        EmailMessage emailMsg = emailMessageFacade.findByName(emailDesc);
        if (emailMsg == null) {
            log.log(Level.WARNING, "sending failed for: {0}", emailDesc);
            return false;
        }
        EmailMessage newMsg = new EmailMessage();
        String body = String.format("%s%n%n%s", emailMsg.getBody(), finalOutput);
        String content = body
                + // add the same signature to all emails
                String.format("%n%n%s%n%s%n%s%n%s%n%s%n",
                        "Continuing Competence Program Area",
                        "Email: Keepalicense@gov.bc.ca",
                        "Phone: 250-952-1211 Fax: 250-952-1222",
                        "Continuing Competence Forms and Information: http://www.health.gov.bc.ca/ema/continuing-competence/reporting.html",
                        "National Occupational Competency Profile for Paramedics (NOCPs):  http://paramedic.ca/nocp/");
        newMsg.setBody(content);
        newMsg.setSubject(emailMsg.getSubject());

        String currentAddress = emailMsg.getEmailAddress();
        String javaTeamEmail = "assm-java.vic@cgi.com";
        if (!currentAddress.toLowerCase().contains(javaTeamEmail)) {
            newMsg.setEmailAddress(currentAddress + ";" + javaTeamEmail);
        } else {
            newMsg.setEmailAddress(currentAddress);
        }

        return this.sendEmail(newMsg, emailDesc);
    }

    /**
     * *
     *
     * @param finalOutput the entire string of the message less the signature
     * that's added in this method
     */
    @Override
    public boolean sendCCTransferBatch(String finalOutput) {
        String emailDesc = "CC Transfer";
        EmailMessage emailMsg = emailMessageFacade.findByName(emailDesc);
        if (emailMsg == null) {
            log.log(Level.WARNING, "sending failed for: {0}", emailDesc);
            return false;
        }
        EmailMessage newMsg = new EmailMessage();
        String body = String.format("%s%n%n%s", emailMsg.getBody(), finalOutput);
        String content = body;
        newMsg.setBody(content);
        newMsg.setSubject(emailMsg.getSubject());
        String javaTeamEmail = "assm-java.vic@cgi.com";
        if (!emailMsg.getEmailAddress().toLowerCase().contains(javaTeamEmail)) {
            newMsg.setEmailAddress(emailMsg.getEmailAddress() + ";" + javaTeamEmail);
        } else {
            newMsg.setEmailAddress(emailMsg.getEmailAddress());
        }
        return this.sendEmail(newMsg, emailDesc);
    }

    /**
     * *
     *
     * @param fullName - first and last name
     * @param licNo - licence number
     * @param phoneNumber - phone number
     * @param email - email address
     * @param emailContent - email content
     */
    @Override
    public boolean sendAuthorizationRequest(String fullName, String licNo, String phoneNumber, String email, String emailContent) {
        String emailDesc = "Authorization Request";

        StringBuilder msg = new StringBuilder(1024);
        msg.append(fullName);
        msg.append(" has requested access to the EMACCS system\n");
        msg.append("Licence No: ").append(licNo).append("\n");
        msg.append("Telephone No: ").append(phoneNumber).append("\n");
        msg.append("Email Address: ").append(email).append("\n");
        msg.append("Message to EMA: ").append(emailContent).append("\n");

        String emailBody = msg.toString();
        return setBodyAndSend(emailDesc, emailBody, emailDesc, email);
    }

    /**
     * *
     *
     * @param fullName - first and last name
     * @param licNo - L-cence number
     */
    @Override
    public boolean sendEndorsementRelinquished(String fullName, String licNo) {
        String emailDesc = "Endorsement Relinquished";

        String body = String.format("Name: %s%nLicence Number: %s%n",
                fullName, licNo);

        return preFixToBodyAndSend(emailDesc, body);
    }

    /**
     * *
     *
     * @param fullName - first and last name
     * @param licNo - Licence number
     */
    @Override
    public boolean sendLicenceRelinquished(String fullName, String licNo) {
        String emailDesc = "License Relinquished";

        String body = String.format("Licence #%s%n",
                licNo);

        return preFixToBodyAndSend(emailDesc, body);
    }

    /**
     * *
     *
     * @param fullName - first and last name
     * @param licNo - L-cence number
     */
    @Override
    public boolean sendContactInfoUpdate(String fullName, String licNo) {
        String emailDesc = "Contact Information Updated";
        String body = String.format("Name: %s%nLicence Number: %s%n",
                fullName, licNo);

        return preFixToBodyAndSend(emailDesc, body);
    }

    /*
     * END * Not related directly to status chagnes
     *
     */

    /**
     * *
     *
     * @param licNo - licence number - can be null if emaid(regis_id_ is not
     * @param emaId - emaid(regis_id) - can be null if licence number is not
     */
    @Override
    public boolean sendRevertToShortfall(Long licNo, Long emaId) {
        EmergencyMedicalAssistant ema = findEMA(licNo, emaId);
        if (ema == null) {
            log.log(Level.WARNING, "sendRevertToShortfall failed to find the EMA update email sent for regis_id: {0} with Licno: {1}", new Object[]{emaId, licNo});
            return false;
        }
        String licenceNo = ema.getLicno();
        String fullName = ema.getFname() + " " + ema.getLname();
        String emaEmail = ema.getEmail();
        if (licenceNo == null) {
            log.log(Level.WARNING, "sendRevertToShortfall failed to find a licno. no update email sent for: name:{0} email: {1}", new Object[]{fullName, emaEmail});
            return false;
        }
        String emailDesc = "Revert to Shortfall";

        String body = String.format("Name: %s %nLicence Number: %s%n",
                fullName,
                licenceNo);
        return preFixToBodyAndSend(emailDesc, body, emaEmail);
    }

    /**
     * *
     * sends email when the EMA is put into Shortfall - adjudication Denied
     */
    @Override
    public boolean sendRevertToShortfall_AdjudicationDenied(Long licNo, Long emaId) {
        EmergencyMedicalAssistant ema = findEMA(licNo, emaId);
        if (ema == null) {
            log.log(Level.WARNING, "sendRevertToShortfall_AdjudicationDenied failed to find the EMA update email sent for regis_id: {0} with Licno: {1}", new Object[]{emaId, licNo});
            return false;
        }
        String licenceNo = ema.getLicno();
        String fullName = ema.getFname() + " " + ema.getLname();
        String emaEmail = ema.getEmail();
        if (licenceNo == null) {
            log.log(Level.WARNING, "sendRevertToShortfall_AdjudicationDenied failed to find a licno. no update email sent for: name:{0} email: {1}", new Object[]{fullName, emaEmail});
            return false;
        }
        String emailDesc = "In Shortfall - Adjudication Denied";

        String body = String.format("Name: %s %nLicence Number: %s%n",
                fullName,
                licenceNo);
        return preFixToBodyAndSend(emailDesc, body, emaEmail);
    }

    /**
     * *
     *
     * @param licNo - licence number - can be null if emaid(regis_id_ is not
     * @param emaId - emaid(regis_id) - can be null if licence number is not
     */
    @Override
    public boolean sendRequirementMet(Long licNo, Long emaId) {
        EmergencyMedicalAssistant ema = findEMA(licNo, emaId);
        if (ema == null) {
            log.log(Level.WARNING, "sendRequirementMet failed to find the EMA update email sent for regis_id: {0} with Licno: {1}", new Object[]{emaId, licNo});
            return false;
        }
        String licenceNo = ema.getLicno();
        String fullName = ema.getFname() + " " + ema.getLname();
        String emaEmail = ema.getEmail();
        if (licenceNo == null) {
            log.log(Level.WARNING, "sendRequirementMet failed to find a licno. no update email sent for: name:{0} email: {1}", new Object[]{fullName, emaEmail});
            return false;
        }
        String emailDesc = "Requirements Met";

        String body = String.format("Name: %s %nLicence Number: %s%n",
                fullName,
                licenceNo);
        return preFixToBodyAndSend(emailDesc, body, emaEmail);
    }

    /**
     * *
     * NOT implemented sends email when the EMA is put into Requirements Met -
     * adjudicated
     */
    @Override
    public boolean sendRequirementMet_Adjudicated(Long licNo, Long emaId) {
        EmergencyMedicalAssistant ema = findEMA(licNo, emaId);
        if (ema == null) {
            log.log(Level.WARNING, "sendRequirementMetAdjudicated failed to find the EMA update email sent for regis_id: {0} with Licno: {1}", new Object[]{emaId, licNo});
            return false;
        }
        String licenceNo = ema.getLicno();
        String fullName = ema.getFname() + " " + ema.getLname();
        String emaEmail = ema.getEmail();
        if (licenceNo == null) {
            log.log(Level.WARNING, "sendRequirementMetAdjudicated failed to find a licno. no update email sent for: name:{0} email: {1}", new Object[]{fullName, emaEmail});
            return false;
        }
        String emailDesc = "Requirements Met - Adjudicated";

        String body = String.format("Name: %s %nLicence Number: %s%n",
                fullName,
                licenceNo);
        return preFixToBodyAndSend(emailDesc, body, emaEmail);
    }

    /**
     * *
     * sends email when the EMA is put into requirements met via CC Batch
     * Transfer
     */
    @Override
    public boolean sendRequirementMet_CCTransfer(Long licNo, Long emaId) {
        EmergencyMedicalAssistant ema = findEMA(licNo, emaId);
        if (ema == null) {
            log.log(Level.WARNING, "sendRequirementMetAdjudicated failed to find the EMA update email sent for regis_id: {0} with Licno: {1}", new Object[]{emaId, licNo});
            return false;
        }
        String licenceNo = ema.getLicno();
        String fullName = ema.getFname() + " " + ema.getLname();
        String emaEmail = ema.getEmail();
        if (licenceNo == null) {
            log.log(Level.WARNING, "sendRequirementMetAdjudicated failed to find a licno. no update email sent for: name:{0} email: {1}", new Object[]{fullName, emaEmail});
            return false;
        }
        String emailDesc = "Requirements Met - CC Transfer";

        String body = String.format("Name: %s %nLicence Number: %s%n",
                fullName,
                licenceNo);
        return preFixToBodyAndSend(emailDesc, body, emaEmail);
    }

    /**
     * *
     *
     * @param licNo - licence number - can be null if emaid(regis_id_ is not
     * @param emaId - emaid(regis_id) - can be null if licence number is not
     */
    @Override
    public boolean sendEvaluateAnActivity_CE(Long licNo, Long emaId) {
        EmergencyMedicalAssistant ema = findEMA(licNo, emaId);
        if (ema == null) {
            log.log(Level.WARNING, "sendEvaluateAnActivity_CE failed to find the EMA update email sent for regis_id: {0} with Licno: {1}", new Object[]{emaId, licNo});
            return false;
        }
        String licenceNo = ema.getLicno();
        String fullName = ema.getFname() + " " + ema.getLname();
        String emaEmail = ema.getEmail();

        String emailDesc = "Evaluate an Activity - CE credit";

        String body = String.format("Name: %s %nLicence Number: %s%n",
                fullName,
                licenceNo);
        return preFixToBodyAndSend(emailDesc, body, emaEmail);
    }

    /**
     * *
     * NOT implemented
     */
    public boolean sendOtherActRequirementsMet() {
        // String licenceNo = ensureLicenceNo(licNo,emaId);
        //  if(licenceNo==null){}
        String emailDesc = "Other activities requirements met";
        throw new UnsupportedOperationException("sendOtherActRequirementsMet- Not supported yet.");
    }

    /**
     * *
     * NOT implemented
     */
    //TODO - is this used..
    public boolean sendLogIVStarts() {
        String emailDesc = "Log IV Starts";
        throw new UnsupportedOperationException("sendLogIVStarts- Not supported yet.");
    }

    /**
     * *
     * NOT implemented
     */
    public boolean sendEvaluateAnActivity_IV() {
        String emailDesc = "Evaluate an Activity - IV Start";
        throw new UnsupportedOperationException("sendEvaluateAnActivity_IV- Not supported yet.");
    }

    /**
     * *
     * NOT implemented
     */
    public boolean sendPendingInformation() {
        String emailDesc = "Pending Information";
        throw new UnsupportedOperationException("sendPendingInformation- Not supported yet.");
    }

    /*
     * END of not yet used
     */
    private boolean setBodyAndSend(String emailToFind, String emailBody, String emailDesc, String emailEma) {
        EmailMessage emailMsg = emailMessageFacade.findByName(emailToFind);
        if (emailMsg == null) {
            log.log(Level.WARNING, "sending failed for: {0}", emailToFind);
            return false;
        }
        
        String sendTo = emailMsg.getEmailAddress() + ";" + emailEma;
        String emailSubject = emailMsg.getSubject();

        //TODO - see if you can send the original with the body changed vs making a new one.
        EmailMessage newMsg = new EmailMessage();
        newMsg.setEmailAddress(sendTo);
        newMsg.setSubject(emailSubject);
        newMsg.setBody(emailBody);
        return this.sendEmail(newMsg, emailDesc);
    }

    private boolean preFixToBodyAndSend(String emailToFind, String emailBodyPrefix, String emailAddr) {
        EmailMessage emailMsg = emailMessageFacade.findByName(emailToFind);
        if (emailMsg == null) {
            log.log(Level.WARNING, "sending failed for: {0}", emailToFind);
            return false;
        }
        String sendTo;
        if (emailAddr == null || emailAddr.isEmpty()) {
            sendTo = emailMsg.getEmailAddress();//"emalbgeneral@gov.bc.ca";
            if (sendTo == null || sendTo.isEmpty()) {
                sendTo = "emalbgeneral@gov.bc.ca";
            }
        } else {
            sendTo = emailAddr;
        }

        String emailSubject = emailMsg.getSubject();
        //TODO - see if you can send the original with the body changed vs making a new one.
        EmailMessage newMsg = new EmailMessage();
        newMsg.setEmailAddress(sendTo);
        newMsg.setSubject(emailSubject);
        newMsg.setBody(String.format("%s%n%s", emailBodyPrefix, emailMsg.getBody()));
        return this.sendEmail(newMsg, emailToFind);
    }

    private boolean preFixToBodyAndSend(String emailToFind, String emailBodyPrefix) {
        EmailMessage emailMsg = emailMessageFacade.findByName(emailToFind);
        if (emailMsg == null) {
            log.log(Level.WARNING, "sending failed for: {0}", emailToFind);
            return false;
        }
        String sendTo = emailMsg.getEmailAddress();
        String emailSubject = emailMsg.getSubject();

        //TODO - see if you can send the original with the body changed vs making a new one.
        EmailMessage newMsg = new EmailMessage();
        newMsg.setEmailAddress(sendTo);
        newMsg.setSubject(emailSubject);
        newMsg.setBody(String.format("%s%n%s", emailBodyPrefix, emailMsg.getBody()));
        return this.sendEmail(newMsg, emailToFind);
    }

    /**
     * *
     *
     * @param licNo licence number if known. null if not
     * @param emaID emaID(regis_id) number if known. null if not
     * @return licno number. OR null if didn't have or couldn't find licno
     * number.
     */
    private EmergencyMedicalAssistant findEMA(Long licNo, Long emaID) {
        if (licNo == null && emaID == null) {
            return null;
        } else if (licNo != null) {
            return emergencyMedicalAssistantFacade.findByLicenceNo(licNo);
        } else {
            return emergencyMedicalAssistantFacade.findByRegisId(emaID);
        }
    }
}
