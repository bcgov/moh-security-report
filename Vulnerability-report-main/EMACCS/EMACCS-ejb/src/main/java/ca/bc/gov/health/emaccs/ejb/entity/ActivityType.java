/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        ActivityType.java                              *
 * Date of Last Commit: $Date:: 2016-12-19 10:04:18 -0800 (Mon, 19 Dec 2016) $ *
 * Revision Number:      $Rev:: 2669                                         $ *
 * Last Commit by:    $Author:: tschiavo                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.emaccs.ejb.entity;

import ca.bc.gov.health.annotation.CodeTable;
import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import jakarta.persistence.Basic;
import jakarta.persistence.CascadeType;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Version;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

/**
 *
 * @author greg.perkins
 */
@Entity
@EntityListeners({AuditListener.class})
@Table(name = "EMA_CODES_ACTIVITY_TYPES", schema = "EMA")
@SequenceGenerator(name = "ActivityTypeSeq", sequenceName = "EMA_CODES_ACTIVITY_TYPES_SEQ", allocationSize = 1, initialValue = 1)
@NamedQueries({
    @NamedQuery(name = "ActivityType.findAll", query = "SELECT a FROM ActivityType a"),
    @NamedQuery(name = "ActivityType.findEnabled", query = "Select a FROM ActivityType a where a.disabled = 0")})
@CodeTable(label = "ACTIVITY_NAME", value = "ID")
public class ActivityType implements Serializable {

    @Basic(optional = false)
    @NotNull
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "activityTypeId")
    private List<ActivityNocpArea> activityNocpAreaList;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "activityTypeId")
    private List<ActivityNocpCompType> activityNocpCompTypeList;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "activityTypeId")
    private List<ActivityNocpCompSubtype> activityNocpCompSubtypeList;
    private static final long serialVersionUID = 1L;
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "ActivityTypeSeq")
    @NotNull
    @Column(name = "ID")
    private Long id;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 200)
    @Column(name = "ACTIVITY_NAME")
    private String activityName;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "DURATION")
    private String duration;
    @Basic(optional = false)
    @NotNull
    @Column(name = "DEFAULT_CREDITS")
    private BigDecimal defaultCredits;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "MAXIMUM")
    private String maximum;
    @Basic(optional = false)
    @NotNull
    @Column(name = "ACTIVITY_CODE")
    private long activityCode;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Size(max = 100)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
    @Version
    private Long statelessTransactionNbr;
    @Column(name = "DISABLED")
    private int disabled;
    @OneToMany(cascade = CascadeType.ALL, mappedBy = "activityId")
    private List<ApprovedActivity> approvedActivityList;

    
    
    public ActivityType() {
    }

    public ActivityType(Long id) {
        this.id = id;
    }

    public ActivityType(Long id, String activityName, String duration, BigDecimal defaultCredits, String maximum, long activityCode, String createdByNm, Date createdOnDtm) {
        this.id = id;
        this.activityName = activityName;
        this.duration = duration;
        this.defaultCredits = defaultCredits;
        this.maximum = maximum;
        this.activityCode = activityCode;
        this.createdByNm = createdByNm;
        this.createdOnDtm = createdOnDtm;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getActivityName() {
        return activityName;
    }

    public void setActivityName(String activityName) {
        this.activityName = activityName;
    }

    public String getDuration() {
        return duration;
    }

    public void setDuration(String duration) {
        this.duration = duration;
    }

    public BigDecimal getDefaultCredits() {
        return defaultCredits;
    }

    public void setDefaultCredits(BigDecimal defaultCredits) {
        this.defaultCredits = defaultCredits;
    }

    public String getMaximum() {
        return maximum;
    }

    public void setMaximum(String maximum) {
        this.maximum = maximum;
    }

    public long getActivityCode() {
        return activityCode;
    }

    public void setActivityCode(long activityCode) {
        this.activityCode = activityCode;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }
    
    public int getDisabled() {
        return disabled;
    }

    public void setDisabled(int disabled) {
        this.disabled = disabled;
    }
    
    public Boolean getDisabledBool() {
        return (disabled == 1);
    }
    
    public void setDisabledBool(Boolean disabledBool) {
        disabled = disabledBool ? 1 : 0;
    }

    public List<ApprovedActivity> getApprovedActivityList() {
        return approvedActivityList;
    }

    public void setApprovedActivityList(List<ApprovedActivity> approvedActivityList) {
        this.approvedActivityList = approvedActivityList;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof ActivityType)) {
            return false;
        }
        ActivityType other = (ActivityType) object;
        if ((this.id == null && other.getId() != null) || (this.id != null && !this.id.equals(other.getId()))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.emaccs.ejb.entity.ActivityType[ id=" + id + " ]";
    }

    public List<ActivityNocpArea> getActivityNocpAreaList() {
        return activityNocpAreaList;
    }

    public void setActivityNocpAreaList(List<ActivityNocpArea> activityNocpAreaList) {
        this.activityNocpAreaList = activityNocpAreaList;
    }

    public List<ActivityNocpCompType> getActivityNocpCompTypeList() {
        return activityNocpCompTypeList;
    }

    public void setActivityNocpCompTypeList(List<ActivityNocpCompType> activityNocpCompTypeList) {
        this.activityNocpCompTypeList = activityNocpCompTypeList;
    }

    public List<ActivityNocpCompSubtype> getActivityNocpCompSubtypeList() {
        return activityNocpCompSubtypeList;
    }

    public void setActivityNocpCompSubtypeList(List<ActivityNocpCompSubtype> activityNocpCompSubtypeList) {
        this.activityNocpCompSubtypeList = activityNocpCompSubtypeList;
    }

    /* get a text string of all NOCP codes associated with an activity */
    public String getActivityNocpCodes() {
        StringBuilder nocpCodeList = new StringBuilder(1024);
        for (ActivityNocpArea currentArea : activityNocpAreaList) {
            nocpCodeList.append(currentArea.getNocpAreaId().getAreaCode()).append(", ");
        }
        for (ActivityNocpCompType currentType : activityNocpCompTypeList) {
            nocpCodeList.append(currentType.getNocpCompTypeId().getCompetencyCode()).append(", ");
        }
        for (ActivityNocpCompSubtype currentSubtype : activityNocpCompSubtypeList) {
            nocpCodeList.append(currentSubtype.getNocpCompSubtypeId().getSubtypeCompetencyCode()).append(", ");
        }

        int indexToRemove = nocpCodeList.lastIndexOf(",") > nocpCodeList.lastIndexOf(".") ? nocpCodeList.lastIndexOf(",") : nocpCodeList.lastIndexOf(".");
        if(indexToRemove > 0) {
            nocpCodeList.deleteCharAt(indexToRemove);
        }

        return nocpCodeList.toString();

    }


}
