/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        EmailService.java                              *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.emaccs.ejb.session.email;

import ca.bc.gov.health.emaccs.ejb.entity.EmailMessage;
import jakarta.mail.Address;
import jakarta.mail.Message;
import jakarta.mail.MessagingException;
import jakarta.mail.Session;
import jakarta.mail.Transport;
import jakarta.mail.internet.AddressException;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;
import java.io.Serializable;
import java.util.Properties;

/**
 *
 * @author greg.perkins
 */
public class EmailService  implements Serializable{

    private Properties properties;

    public EmailService(String host) {
        // Get system properties
        properties = System.getProperties();
        // Setup mail server
        properties.setProperty("mail.smtp.host", host);
        
        // TODO 
        // Please do not delete these lines below.
        // Setup the mail port to run locally EMACCS using FakeSMTP on port 2525
        // For other environments, don't forget to comment it.
        // reference : http://nilhcem.com/FakeSMTP/
        //properties.setProperty("mail.smtp.port", "2525");
    }
    
    protected void sendEmail(EmailMessage emailObj) throws MessagingException {
        // Get the default Session object.
        Session session = Session.getDefaultInstance(properties);

        String from = "keepalicense@gov.bc.ca";
        String to = emailObj.getEmailAddress();
        String subject = emailObj.getSubject();
        String content = emailObj.getBody() +       // add the same signature to all emails
            String.format("%n%n%s%n%s%n%s%n%s%n%s%n",
                "Continuing Competence Program Area",
                "Email: keepalicense@gov.bc.ca",
                "Phone: 250-952-1211 Fax: 250-952-1222",
                "Continuing Competence Forms and Information: http://www.health.gov.bc.ca/ema/continuing-competence/reporting.html",
                "National Occupational Competency Profile for Paramedics (NOCPs):  http://paramedic.ca/nocp/");

            // Create a default MimeMessage object.
            MimeMessage message = new MimeMessage(session);

            // Set From: header field of the header.
            message.setFrom(new InternetAddress(from));

            // Set To: header field of the header.
            message.addRecipients(Message.RecipientType.TO, convertRecipients(to));

            // Set Subject: header field
            message.setSubject(subject);

            // Now set the actual message
            message.setText(content);

            // Send message
            Transport.send(message);

    }

    private Address[] convertRecipients(String recipientStr) throws AddressException {
        Address[] recipients;
        int fromInt = 0;
        int toInt;
        int index = 0;
        int len;

        if (recipientStr.contains(",") || recipientStr.contains(";") || recipientStr.contains(" ")) {
            // format the string for efficient parsing
            recipientStr = recipientStr.replaceAll("[;\\s]+", ",");
            while (recipientStr.contains(",,")) {
                recipientStr = recipientStr.replaceAll(",,", ",");
            }
            // count the number of delimiters, then add one for the length of the array
            recipients = new Address[countThis(recipientStr, ',') + 1];
            // the length of the string is used to determine when to stop parsing
            len = recipientStr.length();

            // parse the string in a loop, and add each email address to the array
            while (fromInt < len) {
                toInt = recipientStr.indexOf(',', fromInt) > 0 ? recipientStr.indexOf(',', fromInt) : len;
                recipients[index] = new InternetAddress(recipientStr.substring(fromInt, toInt));
                fromInt = toInt + 1;
                index++;
            }

        } else {
            // usually, there will only be one address, add it to the array
            recipients = new Address[1];
            recipients[0] = new InternetAddress(recipientStr);
        }

        return recipients;
    }

    private int countThis(String str, char lookFor) {
        int counter = 0;
        for(int i = 0; i < str.length(); i++ ) {
            if(str.charAt(i) == lookFor) {
                counter++;
            }
        }
        return counter;
    }
}
