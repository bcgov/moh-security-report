/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        ReportingYearFacade.java                       *
 * Date of Last Commit: $Date:: 2017-10-19 15:00:46 -0700 (Thu, 19 Oct 2017) $ *
 * Revision Number:      $Rev:: 2847                                         $ *
 * Last Commit by:    $Author:: arlopez                                      $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.emaccs.ejb.session;

import ca.bc.gov.health.emaccs.ejb.entity.ReportingYear;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author greg.perkins
 */
@Stateless
public class ReportingYearFacade extends AbstractFacade<ReportingYear> implements ReportingYearFacadeLocal, Serializable {
    private static final String CLASS_NAME = ReportingYearFacade.class.getName();
    private static final Logger log = Logger.getLogger(CLASS_NAME);
    
    @PersistenceContext(unitName = "EMACCS-ejbPU")
    private EntityManager em;

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public ReportingYearFacade() {
        super(ReportingYear.class);
    }

    /* Default bulletin query with ordering by year, ascending */
    @Override
    public List<ReportingYear> findAll() {
        Query query = em.createNativeQuery("select * from EMA_CODES_REPORTING_YEARS r" +
                " order by r.REPORTING_YEAR asc",
                ReportingYear.class);

        return query.getResultList();
    }

    /***
     *  get the previous reporting year (based on if it's before or after April 1st)
     * @return returns the PreviousReportingyear or null if less or more than 1 result found
     */
    @Override
    public ReportingYear getPreviousReportingYear(){
            Query q = em.createNativeQuery("select * from ema_codes_reporting_years where reporting_year like"
                    +" case when  sysdate >= to_date(concat('01-04-',to_char( sysdate, 'YYYY')),'dd-mm-yyyy') then"
                    +" concat(to_char(add_months(sysdate,-12), 'YYYY'),'/%')"
                    +" else"
                    +" concat('%/',to_char(add_months(sysdate,-12), 'YYYY'))"
                    +" end"                   
                    ,
            ReportingYear.class);
            ReportingYear result = null;
            try{
                result = (ReportingYear) q.getSingleResult();
            }catch(Exception e){
                log.log(Level.WARNING, "Did not retrieve single Result for previousReportingYear: {0}", e.getMessage());
                return result;
            }
            
            return result;
    }
    /***
     *  get the current reporting year (based on if it's before or after April 1st)
     * @return returns the currentReportingyear or null if less or more than 1 result found
     */
    @Override
    public ReportingYear getCurrentReportingYear(){
        Query topYear = em.createNativeQuery("select * from "
                + "(select * from ema_codes_reporting_years t2 ORDER BY t2.REPORTING_YEAR DESC)"
                + " WHERE rownum=1 "                   
                    ,
            ReportingYear.class);
            Query q = em.createNativeQuery("select * from ema_codes_reporting_years where reporting_year like"
                    +" case when  sysdate >= to_date(concat('01-04-',to_char( sysdate, 'YYYY')),'dd-mm-yyyy') then"
                    +" concat(to_char(sysdate, 'YYYY'),'/%')"
                    +" else"
                    +" concat('%/',to_char(sysdate, 'YYYY'))"
                    +" end"                   
                    ,
            ReportingYear.class);
            ReportingYear result = null;
            try{
               List<ReportingYear> res= q.getResultList();
                if(res.isEmpty())
                    result= (ReportingYear) topYear.getSingleResult();
                else
                    result = (ReportingYear) q.getSingleResult();
                    
            }catch(Exception e){
                log.log(Level.WARNING, "Did not retrieve single Result for currentReportingYear: {0}", e.getMessage());
                return result;
            }
            return result;
    }

    @Override
    public boolean isAdjudicationPeriod(Long reportingYearId) {
        Query queryAllActive = em.createNativeQuery("select count(*) from ema_codes_reporting_years  ery"
            + " where ery.id =?1"
            + " and (shortfall_date is not null and trunc(shortfall_date) <=trunc(sysdate) and trunc(shortfall_date+37) > trunc(sysdate)  )"
                + " and ( substr(ERY.REPORTING_YEAR, 0,4)=to_char(sysdate, 'YYYY') or substr(ERY.REPORTING_YEAR, 6,4)=to_char(sysdate, 'YYYY'))");
                queryAllActive.setParameter(1, reportingYearId);
                BigDecimal count;
            try{
                count = (BigDecimal) queryAllActive.getSingleResult();
            }catch(Exception e){
                return false;
            }
            if(count == null){
                return false;
            }else if (count.intValue() == 1) {
                return true;
            } else {
                return false;
            }
    }

    @Override
    public boolean isShortfallPeriod(Long reportingYearId) {
         Query queryAllActive = em.createNativeQuery("select count(*) from ema_codes_reporting_years  ery"
            + " where ery.id =?1"
            + " and (DECODE(shortfall_date, null, to_date(concat('01-05-',to_char( sysdate, 'YYYY')),'dd-mm-yyyy'))> trunc(sysdate) or trunc(shortfall_date) > trunc(sysdate))"
                + " and ( substr(ERY.REPORTING_YEAR, 0,4)=to_char(sysdate, 'YYYY') or substr(ERY.REPORTING_YEAR, 6,4)=to_char(sysdate, 'YYYY'))"
                );
                queryAllActive.setParameter(1, reportingYearId);
                BigDecimal count;
            try{
                count = (BigDecimal) queryAllActive.getSingleResult();
            }catch(Exception e){
                return false;
            }
            if(count == null){
                return false;
            }else if (count.intValue() == 1) {
                return true;
            } else {
                return false;
            }
    }
    
    //They are the same time period but referred to differnetly so different methods to prevent confusion
    //TODO - get exact, these vary year to year (probably need a new field to accomidate)
    @Override
    public boolean isExamPeriod(Long reportingYearId) {
        return isAdjudicationPeriod(reportingYearId);
    }
    
    
}
