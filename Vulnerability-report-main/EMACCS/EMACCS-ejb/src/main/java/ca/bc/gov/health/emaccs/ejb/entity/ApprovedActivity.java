/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        ApprovedActivity.java                          *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.emaccs.ejb.entity;

import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import ca.bc.gov.health.emaccs.ejb.entity.custom.CCStatus;
import ca.bc.gov.health.emaccs.ejb.session.AbstractFacade;
import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Transient;
import jakarta.persistence.Version;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author greg.perkins
 */
@Entity
@EntityListeners({AuditListener.class})
@Table(name = "EMA_APPROVED_ACTIVITIES", schema = "EMA")
@SequenceGenerator(name = "ApprovedActivitySeq", sequenceName = "EMA_APPROVED_ACTIVITIES_SEQ", allocationSize = 1, initialValue = 1)
@NamedQueries({
    @NamedQuery(name = "ApprovedActivity.findAll", query = "SELECT a FROM ApprovedActivity a")})
public class ApprovedActivity implements CCStatus, Serializable {

    private static final String CLASS_NAME = ApprovedActivity.class.getName();

    private static final Logger log = Logger.getLogger(CLASS_NAME);

    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "ApprovedActivitySeq")
    @NotNull
    @Column(name = "ID")
    private Long id;

    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 200)
    @Column(name = "LOCATION")
    private String location;

    @Basic(optional = false)
    @NotNull
    @Column(name = "START_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    private Date startDate;

    @Basic(optional = false)
    @NotNull
    @Column(name = "END_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    private Date endDate;

    @Size(max = 300)
    @Column(name = "DETAILS")
    private String details;

    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;

    @Basic(optional = false)
    @NotNull
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;

    @Size(max = 100)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;

    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;

    @Column(name = "STATELESS_TRANSACTION_NBR")
    @Version
    private Long statelessTransactionNbr;

    @JoinColumn(name = "EMA_ID", referencedColumnName = "REGIS_ID")
    @ManyToOne(optional = false)
    private EmergencyMedicalAssistant emaId;

    @JoinColumn(name = "REPORTING_YEAR_ID", referencedColumnName = "ID")
    @ManyToOne(optional = false)
    private ReportingYear reportingYearId;

    @JoinColumn(name = "ACTIVITY_ID", referencedColumnName = "ID")
    @ManyToOne(optional = false)
    private ActivityType activityId;

    @NotNull
    @Column(name = "CREDITS")
    private BigDecimal credits;

    @Transient
    private AbstractFacade.EntityChange change = AbstractFacade.EntityChange.None;

    public ApprovedActivity() {
        // TODO initialize values such as dates
    }

    public ApprovedActivity(Long id) {
        this.id = id;
    }

    public ApprovedActivity(Long id, String location, Date startDate, Date endDate, String createdByNm, Date createdOnDtm) {
        this.id = id;
        this.location = location;
        this.startDate = startDate;
        this.endDate = endDate;
        this.createdByNm = createdByNm;
        this.createdOnDtm = createdOnDtm;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public Date getStartDate() {
        // TODO date should never be null, fix application
        return startDate == null ? null : new Date(startDate.getTime());
    }

    public void setStartDate(Date startDate) {
        // TODO date should never be null, fix application
        this.startDate = startDate == null ? null : new Date(startDate.getTime());
    }

    public Date getEndDate() {
        // TODO date should never be null, fix application
        return endDate == null ? null : new Date(endDate.getTime());
    }

    public void setEndDate(Date endDate) {
        // TODO date should never be null, fix application
        this.endDate = endDate == null ? null : new Date(endDate.getTime());
    }

    public String getDetails() {
        return details;
    }

    public void setDetails(String details) {
        this.details = details;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public Date getCreatedOnDtm() {
        // TODO date should never be null, fix application
        return createdOnDtm == null ? null : new Date(createdOnDtm.getTime());
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        // TODO date should never be null, fix application
        this.createdOnDtm = createdOnDtm == null ? null : new Date(createdOnDtm.getTime());
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm == null ? null : new Date(lastModifiedOnDtm.getTime());
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        // TODO date should never be null, fix application
        this.lastModifiedOnDtm = lastModifiedOnDtm == null ? null : new Date(lastModifiedOnDtm.getTime());
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public EmergencyMedicalAssistant getEmaId() {
        return emaId;
    }

    public void setEmaId(EmergencyMedicalAssistant emaId) {
        this.emaId = emaId;
    }

    public ReportingYear getReportingYearId() {
        return reportingYearId;
    }

    public void setReportingYearId(ReportingYear reportingYearId) {
        this.reportingYearId = reportingYearId;
    }

    public ActivityType getActivityId() {
        return activityId;
    }

    public void setActivityId(ActivityType activityId) {
        this.activityId = activityId;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof ApprovedActivity)) {
            return false;
        }
        ApprovedActivity other = (ApprovedActivity) object;
        if ((this.id == null && other.getId() != null) || (this.id != null && !this.id.equals(other.getId()))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.emaccs.ejb.entity.ApprovedActivity[ id=" + id + " ]";
    }

    public String getNocpListAsString() {
        log.entering(CLASS_NAME, "getNocpListAsString()");

        // TODO calculate typical nocp list length from the data in order to set the buffer length
        final StringBuilder nocpList = new StringBuilder(1024);
        for (ActivityNocpArea nocpArea : activityId.getActivityNocpAreaList()) {
            nocpList.append(nocpArea.getNocpAreaId().getAreaCode()).append(',').append(' ');
        }

        for (ActivityNocpCompType nocpComp : activityId.getActivityNocpCompTypeList()) {
            nocpList.append(nocpComp.getNocpCompTypeId().getCompetencyCode()).append(',').append(' ');
        }

        for (ActivityNocpCompSubtype nocpComp : activityId.getActivityNocpCompSubtypeList()) {
            nocpList.append(nocpComp.getNocpCompSubtypeId().getSubtypeCompetencyCode()).append(',').append(' ');
        }

        //if nothing has been added to the list don't remove anything
        if (nocpList.length() >= 3) {
            nocpList.delete(nocpList.length() - 3, nocpList.length() - 1);
        } else {
            log.log(Level.WARNING, "{0} with activityId:{1} had no NOCP entries. Investigation possibly required.", new Object[]{activityId.getActivityName(), activityId.getId()});
        }

        log.exiting(CLASS_NAME, "getNocpListAsString()", nocpList);
        return nocpList.toString();
    }

    //shorthand method to have the same name as OtherActivity
    public String getActivityName() {
        return activityId.getActivityName();
    }

    //shorthand method to have the same name as OtherActivity
    public BigDecimal getCredits() {
        return credits;
    }

    public void setCredits(BigDecimal credits) {
        this.credits = credits;
    }

    //shorthand method to have a similar method from OtherActivity
    public BigDecimal getAdjudicatedCredits() {
        return BigDecimal.ZERO;
    }

    @Override
    public Long getEMA_Id() {
        if (emaId != null) {
            return emaId.getRegisId();
        }
        return null;
    }

    public AbstractFacade.EntityChange getChange() {
        return change;
    }

    public void setChange(AbstractFacade.EntityChange change) {
        this.change = change;
    }
}
