/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        EmailMessageFacade.java                        *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.emaccs.ejb.session;

import ca.bc.gov.health.emaccs.ejb.entity.EmailMessage;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.io.Serializable;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author greg.perkins
 */
@Stateless
public class EmailMessageFacade extends AbstractFacade<EmailMessage> implements EmailMessageFacadeLocal, Serializable {
    private static final String CLASS_NAME = EmailMessageFacade.class.getName();
    private static final Logger log = Logger.getLogger(CLASS_NAME);
    @PersistenceContext(unitName = "EMACCS-ejbPU")
    private EntityManager em;

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public EmailMessageFacade() {
        super(EmailMessage.class);
    }

    /* Default Email query with ordering by description */
    @Override
    public List<EmailMessage> findAll() {
        Query query = em.createNativeQuery("select * from EMA_CODES_EMAIL_MESSAGES e"
                + " order by upper(e.DESCRIPTION)",
                EmailMessage.class);

        return query.getResultList();
    }

    @Override
    public EmailMessage findByName(String name) {
        try{
            Query q = em.createNativeQuery("select * from EMA_CODES_EMAIL_MESSAGES where DESCRIPTION = ?1", EmailMessage.class);
            q.setParameter(1, name);
            EmailMessage msg = (EmailMessage) q.getSingleResult();
            return msg;
        }catch(Exception e){
            log.log(Level.SEVERE, "Unable to find email named: {0} with error: {1}", new Object[]{name, e.getMessage()});
        }
        return null;
    }
    
    

    //never tested, wrote it then talked to Amanda and she got rid of all the year/year becaues it didn't work - so commenting out
    /*public EmailMessage findByNameReplaceWithYear(String name,Long reportingYearID) {
        Query q = em.createNativeQuery("select * from(\n" +
            " select em.id,em.description, replace(em.subject,'YEAR/YEAR', ry.reporting_year) as subject, replace(em.body,'YEAR/YEAR', ry.reporting_year) as body, em.email_address,em.created_by_NM, em.created_on_DTM,em.last_modified_by_nm, em.last_modified_on_DTM,em.stateless_transaction_Nbr from ema.ema_codes_email_Messages em\n" +
            " join ema.ema_codes_reporting_years ry on ry.id = ?2\n" +
            " where lower(DESCRIPTION)  = lower(?1)\n" +
            ")", EmailMessage.class);
        q.setParameter(1, name);
        q.setParameter(2, reportingYearID);
        EmailMessage msg = (EmailMessage) q.getSingleResult();
        return msg;
    }*/

}
