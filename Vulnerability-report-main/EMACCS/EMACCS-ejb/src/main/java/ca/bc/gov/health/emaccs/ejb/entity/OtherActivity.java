/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        OtherActivity.java                             *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.emaccs.ejb.entity;

import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import ca.bc.gov.health.emaccs.ejb.entity.custom.CCStatus;
import ca.bc.gov.health.emaccs.ejb.session.AbstractFacade;
import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.PostLoad;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Transient;
import jakarta.persistence.Version;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.logging.Logger;

/**
 *
 * @author greg.perkins
 */
@Entity
@EntityListeners({AuditListener.class})
@Table(name = "EMA_OTHER_ACTIVITIES", schema = "EMA")
@SequenceGenerator(name = "OtherActivitySeq", sequenceName = "EMA_OTHER_ACTIVITIES_SEQ", allocationSize = 1, initialValue = 1)
@NamedQueries({
    @NamedQuery(name = "OtherActivity.findAll", query = "SELECT o FROM OtherActivity o")})
public class OtherActivity implements CCStatus, Serializable {

    private static final String CLASS_NAME = OtherActivity.class.getName();
    private static final Logger log = Logger.getLogger(CLASS_NAME);
    private static final long serialVersionUID = 1L;
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "OtherActivitySeq")
    @NotNull
    @Column(name = "ID")
    private Long id;
    @Basic(optional = false)
    @Size(max = 200)
    @Column(name = "ACTIVITY_NAME")
    private String activityName;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 200)
    @Column(name = "LOCATION")
    private String location;
    @Basic(optional = false)
    @NotNull
    @Column(name = "START_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    private Date startDate;
    @Basic(optional = false)
    @NotNull
    @Column(name = "END_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    private Date endDate;
    // @Max(value=?)  @Min(value=?)//if you know range of your decimal fields consider using these annotations to enforce field validation
    @Basic(optional = false)
    @NotNull
    @Column(name = "DURATION")
    private BigDecimal duration;
    @Size(max = 300)
    @Column(name = "DETAILS")
    private String details;
    
    //See OtherActivity2 for attachment
    /*@Lob
    @Basic(fetch=FetchType.LAZY)
    @Column(name = "ATTACHMENT")
    private Serializable attachment;*/
    
    @Size(max = 200)
    @Column(name = "FILENAME")
    private String filename;
    @Size(max = 200)
    @Column(name = "MIMETYPE")
    private String mimetype;
    @Basic(optional = false)
    @NotNull
    @Column(name = "STATUS_DATE")
    @Temporal(TemporalType.TIMESTAMP)
    private Date statusDate;
    @Column(name = "ASSIGNED_TO")
    private Long assignedTo;
    @Size(max = 100)
    @Column(name = "ASSIGNED_TO_USERNAME")
    private String assignedToUsername;
    @Column(name = "CREDITS")
    private BigDecimal credits;
    @Column(name = "ADJUDICATED_CREDITS")
    private BigDecimal adjudicatedCredits;
    @Size(max = 4000)
    @Column(name = "COMMENTS")
    private String comments;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Basic(optional = false)
    @NotNull
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Size(max = 100)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
    @Version
    private Long statelessTransactionNbr;
    @JoinColumn(name = "EMA_ID", referencedColumnName = "REGIS_ID")
    @ManyToOne(optional = false)
    private EmergencyMedicalAssistant emaId;
    @JoinColumn(name = "REPORTING_YEAR_ID", referencedColumnName = "ID")
    @ManyToOne(optional = false)
    private ReportingYear reportingYearId;
    @JoinColumn(name = "NOCP_COMPETENCY_TYPE_ID", referencedColumnName = "ID")
    @ManyToOne
    private NocpCompetencyType nocpCompetencyTypeId;
    @JoinColumn(name = "NOCP_COMPETENCY_SUBTYPE_ID", referencedColumnName = "ID")
    @ManyToOne
    private NocpCompetencySubtype nocpCompetencySubtypeId;
    @JoinColumn(name = "NOCP_AREA_ID", referencedColumnName = "ID")
    @ManyToOne(optional = false)
    private NocpArea nocpAreaId;
    @JoinColumn(name = "STATUS_ID", referencedColumnName = "ID")
    @ManyToOne(optional = false)
    private ActivityStatus statusId;

    @Transient
    private AbstractFacade.EntityChange change = AbstractFacade.EntityChange.None;
    /* checkbox for determining whether or not an activity is selected on the Batch Activity Evaluation screen */
 /* default to null to prevent nullPointerExceptions when the list spans > 1 page */
    private transient Boolean selected;

    @Transient
    private ActivityStatus originalStatusId;

    public OtherActivity() {
        // TODO Dates should be initialized rather than left as NULLs, but testing is needed.
    }

    public OtherActivity(Long id) {
        this.id = id;
    }

    public OtherActivity(Long id, String activityName, String location, Date startDate, Date endDate, BigDecimal duration, Date statusDate, String createdByNm, Date createdOnDtm) {
        this.id = id;
        this.activityName = activityName;
        this.location = location;
        this.startDate = startDate;
        this.endDate = endDate;
        this.duration = duration;
        this.statusDate = statusDate;
        this.createdByNm = createdByNm;
        this.createdOnDtm = createdOnDtm;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getActivityName() {
        return activityName;
    }

    public void setActivityName(String activityName) {
        this.activityName = activityName;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public Date getStartDate() {
        // TODO date should never be null, fix application
        return this.startDate == null ? null : new Date(startDate.getTime());
    }

    public void setStartDate(Date startDate) {
        // TODO date should never be null, fix application
        this.startDate = startDate == null ? null : new Date(startDate.getTime());
    }

    public Date getEndDate() {
        // TODO date should never be null, fix application
        return endDate == null ? null : new Date(endDate.getTime());
    }

    public void setEndDate(Date endDate) {
        // TODO date should never be null, fix application
        this.endDate = endDate == null ? null : new Date(endDate.getTime());
    }

    public BigDecimal getDuration() {
        return duration;
    }

    public void setDuration(BigDecimal duration) {
        this.duration = duration;
    }

    public String getDetails() {
        return details;
    }

    public void setDetails(String details) {
        this.details = details;
    }

    /*public Serializable getAttachment() {
        return null;
    }

    public void setAttachment(Serializable attachment) {
        //this.attachment = null;
    }*/

    public String getFilename() {
        return filename;
    }

    public void setFilename(String filename) {
        this.filename = filename;
    }

    public String getMimetype() {
        return mimetype;
    }

    public void setMimetype(String mimetype) {
        this.mimetype = mimetype;
    }

    public Date getStatusDate() {
        // TODO date should never be null, fix application
        return this.statusDate == null ? null : new Date(statusDate.getTime());
    }

    public void setStatusDate(Date statusDate) {
        this.statusDate = statusDate == null ? null : new Date(statusDate.getTime());
    }

    public Long getAssignedTo() {
        return assignedTo;
    }

    public void setAssignedTo(Long assignedTo) {
        this.assignedTo = assignedTo;
    }

    public String getAssignedToUsername() {
        return assignedToUsername;
    }

    public void setAssignedToUsername(String assignedToUsername) {
        this.assignedToUsername = assignedToUsername;
    }

    public BigDecimal getCredits() {
        return credits;
    }

    public void setCredits(BigDecimal credits) {
        this.credits = credits;
    }

    public BigDecimal getAdjudicatedCredits() {
        return adjudicatedCredits;
    }

    public void setAdjudicatedCredits(BigDecimal adjudicatedCredits) {
        this.adjudicatedCredits = adjudicatedCredits;
    }

    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public Date getCreatedOnDtm() {
        // TODO date should never be null, fix application
        return this.createdOnDtm == null ? null : new Date(createdOnDtm.getTime());
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        // TODO date should never be null, fix application
        this.createdOnDtm = createdOnDtm == null ? null : new Date(createdOnDtm.getTime());
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Date getLastModifiedOnDtm() {
        // TODO date should never be null, fix application
        return this.lastModifiedOnDtm == null ? null : new Date(lastModifiedOnDtm.getTime());
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        // TODO date should never be null, fix application
        this.lastModifiedOnDtm = lastModifiedOnDtm == null ? null : new Date(lastModifiedOnDtm.getTime());
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public EmergencyMedicalAssistant getEmaId() {
        return emaId;
    }

    public void setEmaId(EmergencyMedicalAssistant emaId) {
        this.emaId = emaId;
    }

    public ReportingYear getReportingYearId() {
        return reportingYearId;
    }

    public void setReportingYearId(ReportingYear reportingYearId) {
        this.reportingYearId = reportingYearId;
    }

    public NocpCompetencyType getNocpCompetencyTypeId() {
        return nocpCompetencyTypeId;
    }

    public void setNocpCompetencyTypeId(NocpCompetencyType nocpCompetencyTypeId) {
        this.nocpCompetencyTypeId = nocpCompetencyTypeId;
    }

    public NocpCompetencySubtype getNocpCompetencySubtypeId() {
        return nocpCompetencySubtypeId;
    }

    public void setNocpCompetencySubtypeId(NocpCompetencySubtype nocpCompetencySubtypeId) {
        this.nocpCompetencySubtypeId = nocpCompetencySubtypeId;
    }

    public NocpArea getNocpAreaId() {
        return nocpAreaId;
    }

    public void setNocpAreaId(NocpArea nocpAreaId) {
        this.nocpAreaId = nocpAreaId;
    }

    public ActivityStatus getStatusId() {
        return statusId;
    }

    public void setStatusId(ActivityStatus statusId) {
        this.statusId = statusId;
    }

    public Boolean getSelected() {
        return selected;
    }

    public void setSelected(Boolean selected) {
        this.selected = selected;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof OtherActivity)) {
            return false;
        }
        OtherActivity other = (OtherActivity) object;
        if ((this.id == null && other.getId() != null) || (this.id != null && !this.id.equals(other.getId()))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.emaccs.ejb.entity.OtherActivity[ id=" + id + " ]";
    }

    public String getNocpListAsString() {
        log.entering(CLASS_NAME, "getNocpListAsString()");

        // TODO calculate typical nocp list length from the data in order to set the buffer length
        final StringBuilder nocpList = new StringBuilder(1024);
        if (nocpAreaId != null) {
            nocpList.append(nocpAreaId.getAreaCode()).append(',').append(' ');
        }
        if (nocpCompetencyTypeId != null) {
            nocpList.append(nocpCompetencyTypeId.getCompetencyCode()).append(',').append(' ');
        }
        if (nocpCompetencySubtypeId != null) {
            nocpList.append(nocpCompetencySubtypeId.getSubtypeCompetencyCode()).append(',').append(' ');
        }
        if (nocpList.length() >= 3) {
            nocpList.delete(nocpList.length() - 3, nocpList.length() - 1);
        }

        log.exiting(CLASS_NAME, "getNocpListAsString()", nocpList);
        return nocpList.toString();
    }

    @Override
    public Long getEMA_Id() {
        if (emaId != null) {
            return emaId.getRegisId();
        }
        return null;
    }

    public AbstractFacade.EntityChange getChange() {
        return change;
    }

    public void setChange(AbstractFacade.EntityChange change) {
        this.change = change;
    }
    //Added so determinations could be done for changes in status

    @PostLoad
    private void setTransient() {
        this.originalStatusId = statusId;
    }
    //not part of the table

    public ActivityStatus getOriginalStatusId() {
        return originalStatusId;
    }
    
    //This function serves to copy same properties from OtherActivity2 object
    public void copyProps(OtherActivity2 oa){
        this.setId(oa.getId());
        this.setActivityName(oa.getActivityName());
        this.setLocation(oa.getLocation());
        this.setStartDate(oa.getStartDate());
        this.setEndDate(oa.getEndDate());
        this.setDuration(oa.getDuration());
        this.setDetails(oa.getDetails());
        this.setStatusDate(oa.getStatusDate());
        this.setCreatedByNm(oa.getCreatedByNm());
        this.setCreatedOnDtm(oa.getCreatedOnDtm());
        this.setStatelessTransactionNbr(oa.getStatelessTransactionNbr());
        this.setEmaId(oa.getEmaId());
        this.setReportingYearId(oa.getReportingYearId());
        this.setNocpCompetencyTypeId(oa.getNocpCompetencyTypeId());
        this.setNocpCompetencySubtypeId(oa.getNocpCompetencySubtypeId());
        this.setNocpAreaId(oa.getNocpAreaId());
        this.setStatusId(oa.getStatusId());
    }
}
