/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        Case.java                                      *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.emaccs.ejb.entity;

import ca.bc.gov.health.ejb.entitylistener.AuditListener;
import jakarta.persistence.Basic;
import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.EntityListeners;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.JoinColumn;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.NamedQueries;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.OneToMany;
import jakarta.persistence.SequenceGenerator;
import jakarta.persistence.Table;
import jakarta.persistence.Temporal;
import jakarta.persistence.TemporalType;
import jakarta.persistence.Version;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;

/**
 *
 * @author greg.perkins
 */
@Entity
@EntityListeners({AuditListener.class})
@Table(name = "CASES", schema = "EMA")
@SequenceGenerator(name="CaseSeq", sequenceName="CASES_SEQ", allocationSize=1, initialValue=1)
@NamedQueries({
    @NamedQuery(name = "Case.findAll", query = "SELECT c FROM Case c")})
public class Case implements Serializable {
    private static final long serialVersionUID = 1L;
    // @Max(value=?)  @Min(value=?)//if you know range of your decimal fields consider using these annotations to enforce field validation
    @Id
@GeneratedValue(strategy=GenerationType.SEQUENCE,generator="CaseSeq")
        @NotNull
    @Column(name = "CASE_ID")
    private BigDecimal caseId;
    @Size(max = 14)
    @Column(name = "ARCORCNO")
    private String arcorcno;
    @Column(name = "CLOSEDATE")
    @Temporal(TemporalType.TIMESTAMP)
    private Date closedate;
    @Size(max = 1024)
    @Column(name = "COMMENTS")
    private String comments;
    @Column(name = "OPENDATE")
    @Temporal(TemporalType.TIMESTAMP)
    private Date opendate;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 100)
    @Column(name = "CREATED_BY_NM")
    private String createdByNm;
    @Basic(optional = false)
    @NotNull
    @Column(name = "CREATED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdOnDtm;
    @Size(max = 100)
    @Column(name = "LAST_MODIFIED_BY_NM")
    private String lastModifiedByNm;
    @Column(name = "LAST_MODIFIED_ON_DTM")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedOnDtm;
    @Column(name = "STATELESS_TRANSACTION_NBR")
	@Version
    private Long statelessTransactionNbr;
    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 6)
    @Column(name = "CASENO")
    private String caseno;
    @OneToMany(mappedBy = "caseId")
    private List<Eventlog> eventlogList;
    @JoinColumn(name = "STATUS", referencedColumnName = "CSCODE")
    @ManyToOne(optional = false)
    private Lkcstatus status;
    @OneToMany(mappedBy = "caseId")
    private List<Incidents> incidentsList;

    public Case() {
    }

    public Case(BigDecimal caseId) {
        this.caseId = caseId;
    }

    public Case(BigDecimal caseId, String createdByNm, Date createdOnDtm, String caseno) {
        this.caseId = caseId;
        this.createdByNm = createdByNm;
        this.createdOnDtm = createdOnDtm;
        this.caseno = caseno;
    }

    public BigDecimal getCaseId() {
        return caseId;
    }

    public void setCaseId(BigDecimal caseId) {
        this.caseId = caseId;
    }

    public String getArcorcno() {
        return arcorcno;
    }

    public void setArcorcno(String arcorcno) {
        this.arcorcno = arcorcno;
    }

    public Date getClosedate() {
        return closedate;
    }

    public void setClosedate(Date closedate) {
        this.closedate = closedate;
    }

    public String getComments() {
        return comments;
    }

    public void setComments(String comments) {
        this.comments = comments;
    }

    public Date getOpendate() {
        return opendate;
    }

    public void setOpendate(Date opendate) {
        this.opendate = opendate;
    }

    public String getCreatedByNm() {
        return createdByNm;
    }

    public void setCreatedByNm(String createdByNm) {
        this.createdByNm = createdByNm;
    }

    public Date getCreatedOnDtm() {
        return createdOnDtm;
    }

    public void setCreatedOnDtm(Date createdOnDtm) {
        this.createdOnDtm = createdOnDtm;
    }

    public String getLastModifiedByNm() {
        return lastModifiedByNm;
    }

    public void setLastModifiedByNm(String lastModifiedByNm) {
        this.lastModifiedByNm = lastModifiedByNm;
    }

    public Date getLastModifiedOnDtm() {
        return lastModifiedOnDtm;
    }

    public void setLastModifiedOnDtm(Date lastModifiedOnDtm) {
        this.lastModifiedOnDtm = lastModifiedOnDtm;
    }

    public Long getStatelessTransactionNbr() {
        return statelessTransactionNbr;
    }

    public void setStatelessTransactionNbr(Long statelessTransactionNbr) {
        this.statelessTransactionNbr = statelessTransactionNbr;
    }

    public String getCaseno() {
        return caseno;
    }

    public void setCaseno(String caseno) {
        this.caseno = caseno;
    }

    public List<Eventlog> getEventlogList() {
        return eventlogList;
    }

    public void setEventlogList(List<Eventlog> eventlogList) {
        this.eventlogList = eventlogList;
    }

    public Lkcstatus getStatus() {
        return status;
    }

    public void setStatus(Lkcstatus status) {
        this.status = status;
    }

    public List<Incidents> getIncidentsList() {
        return incidentsList;
    }

    public void setIncidentsList(List<Incidents> incidentsList) {
        this.incidentsList = incidentsList;
    }

    @Override
    public int hashCode() {
        int hash = 0;
        hash += (caseId != null ? caseId.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Case)) {
            return false;
        }
        Case other = (Case) object;
        if ((this.caseId == null && other.getCaseId() != null) || (this.caseId != null && !this.caseId.equals(other.getCaseId()))) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        return "ca.bc.gov.health.emaccs.ejb.entity.Case[ caseId=" + caseId + " ]";
    }
    
}
