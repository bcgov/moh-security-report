/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        EmploymentHolder.java                          *
 * Date of Last Commit: $Date:: 2016-05-19 11:28:07 -0700 (Thu, 19 May 2016) $ *
 * Revision Number:      $Rev:: 2626                                         $ *
 * Last Commit by:    $Author:: kfaussar                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * This class is used to hold either a DEPTHIST (PreviousEmployment) or DEPTCURR (CurrentEmployment) entity
 * It has the ability to convert to either of these objects, or be created from them.
 */
package ca.bc.gov.health.emaccs.ejb.entity.custom;

import ca.bc.gov.health.emaccs.ejb.entity.CurrentEmployment;
import ca.bc.gov.health.emaccs.ejb.entity.EmergencyMedicalAssistant;
import ca.bc.gov.health.emaccs.ejb.entity.Employer;
import ca.bc.gov.health.emaccs.ejb.entity.PreviousEmployment;
import ca.bc.gov.health.emaccs.ejb.session.AbstractFacade.EntityChange;
import ca.bc.gov.health.emaccs.ejb.session.CurrentEmploymentFacadeLocal;
import ca.bc.gov.health.emaccs.ejb.session.PreviousEmploymentFacadeLocal;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 *
 * @author joshua.lewis
 */
public class EmploymentHolder implements Serializable {

    private Long id;
    private Employer deptcode;
    private String empno;
    private Date enddate;
    private Date hiredate;
    private String type;
    private EmergencyMedicalAssistant regisId;
    private String licNo;
    private EntityChange change = EntityChange.None;
    private EmploymentHolder original;

//    private CurrentEmploymentFacadeLocal currentEmploymentFacade;
//    private PreviousEmploymentFacadeLocal previousEmploymentFacade;
    public EmploymentHolder() {
    }

    public EmploymentHolder(CurrentEmployment currentEmployment) {
        this.id = currentEmployment.getDeptcurrId();
        this.type = "current";

        this.deptcode = currentEmployment.getDeptcode();


        this.empno = currentEmployment.getEmpno();


        this.hiredate = currentEmployment.getHiredate();


        this.regisId = currentEmployment.getRegisId();


        this.licNo = currentEmployment.getLicno();

    }

    public EmploymentHolder(PreviousEmployment previousEmployment) {
        this.id = previousEmployment.getDepthistId();
        this.type = "previous";

        this.deptcode = previousEmployment.getDeptcode();
        this.empno = previousEmployment.getEmpno();
        this.hiredate = previousEmployment.getHiredate();
        this.enddate = previousEmployment.getEnddate();
        this.regisId = previousEmployment.getRegisId();
        this.licNo = previousEmployment.getLicno();
    }

    public EmploymentHolder backup() {
        original = new EmploymentHolder();
        original.id = this.id;
        original.type = this.type;
        original.deptcode = this.deptcode;
        original.empno = this.empno;
        original.hiredate = this.hiredate;
        original.enddate = this.enddate;
        original.regisId = this.regisId;
        original.licNo = this.licNo;
        return this;
    }

    public void revert() {
        if (original == null) {
            return;
        }
        this.id = original.id;
        this.type = original.type;
        this.deptcode = original.deptcode;
        this.empno = original.empno;
        this.hiredate = original.hiredate;
        this.enddate = original.enddate;
        this.regisId = original.regisId;
        this.licNo = original.licNo;
        change = EntityChange.None;
    }

    public static List<EmploymentHolder> convertPrevEmpList(List<PreviousEmployment> prevEmps) {
        List<EmploymentHolder> empHolderList = new ArrayList<>();

        for (PreviousEmployment employment : prevEmps) {
            empHolderList.add(new EmploymentHolder(employment).backup());
        }

        return empHolderList;
    }

    public static List<EmploymentHolder> convertCurrEmpList(List<CurrentEmployment> currEmps) {
        List<EmploymentHolder> empHolderList = new ArrayList<>();

        for (CurrentEmployment employment : currEmps) {
            empHolderList.add(new EmploymentHolder(employment).backup());
        }

        return empHolderList;
    }

    public void setEmploymentHolder(CurrentEmployment currentEmployment) {
        this.id = currentEmployment.getDeptcurrId();
        this.type = "current";

        this.deptcode = currentEmployment.getDeptcode();
        this.empno = currentEmployment.getEmpno();
        this.hiredate = currentEmployment.getHiredate();
        this.regisId = currentEmployment.getRegisId();
        this.licNo = currentEmployment.getLicno();
    }

    public void setEmploymentHolder(PreviousEmployment previousEmployment) {
        this.id = previousEmployment.getDepthistId();
        this.type = "previous";

        this.deptcode = previousEmployment.getDeptcode();
        this.empno = previousEmployment.getEmpno();
        this.hiredate = previousEmployment.getHiredate();
        this.enddate = previousEmployment.getEnddate();
        this.regisId = previousEmployment.getRegisId();
        this.licNo = previousEmployment.getLicno();
    }

    public CurrentEmployment getCurrentEmployment(CurrentEmploymentFacadeLocal currentEmploymentFacade) {
        CurrentEmployment currentEmployment = new CurrentEmployment();
        if (id != null) {
            currentEmployment = currentEmploymentFacade.find(id);
        }

        currentEmployment.setDeptcode(deptcode);
        currentEmployment.setEmpno(empno);
        currentEmployment.setHiredate(hiredate);
        currentEmployment.setRegisId(regisId);
        currentEmployment.setLicno(licNo);

        return currentEmployment;
    }

    public PreviousEmployment getPreviousEmployment(PreviousEmploymentFacadeLocal previousEmploymentFacade) {
        PreviousEmployment previousEmployment = new PreviousEmployment();
        if (id != null && type.equals("previous")) {
            previousEmployment = previousEmploymentFacade.find(id);
        }

        previousEmployment.setDeptcode(deptcode);
        previousEmployment.setEmpno(empno);
        previousEmployment.setHiredate(hiredate);
        previousEmployment.setEnddate(enddate);
        previousEmployment.setRegisId(regisId);
        previousEmployment.setLicno(licNo);

        return previousEmployment;
    }
    
    public boolean isEndDateFieldDisable(){
        if(original != null){
            if(original.enddate != null){
                return true;
            }
        } 
        return false;
    }

    /*
     * Getters and Setters
     */
    public Employer getDeptcode() {
        return deptcode;
    }

    public void setDeptcode(Employer deptcode) {
        this.deptcode = deptcode;
    }

    public String getEmpno() {
        return empno;
    }

    public void setEmpno(String empno) {
        this.empno = empno;
    }

    public Date getEnddate() {
        return enddate;
    }

    public void setEnddate(Date enddate) {
        this.enddate = enddate;
    }

    public Date getHiredate() {
        return hiredate;
    }

    public void setHiredate(Date hiredate) {
        this.hiredate = hiredate;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getType() {
        return type;
    }

    public EmergencyMedicalAssistant getRegisId() {
        return regisId;
    }

    public void setRegisId(EmergencyMedicalAssistant regisId) {
        this.regisId = regisId;
    }

    public String getLicNo() {
        return licNo;
    }

    public void setLicNo(String licNo) {
        this.licNo = licNo;
    }

    public EntityChange getChange() {
        return change;
    }

    public void setChange(EntityChange change) {
        this.change = change;
    }
    
    
    
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (id != null ? id.hashCode() : 0);
        return hash;
    }

    @Override
    public boolean equals(Object object) {
        // TODO: Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof EmploymentHolder)) {
            return false;
        }
        EmploymentHolder other = (EmploymentHolder) object;
        if ((this.id == null && other.getId() != null) || (this.id != null && !this.id.equals(other.getId()))) {
            return false;
        }
        return true;
    }
}
