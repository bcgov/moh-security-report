package ca.bc.gov.health.util;

import fish.payara.security.openid.api.AccessToken;
import jakarta.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class SecurityUtil {

    private static final String CLAIM_RESOURCE_ACCESS = "resource_access";
    private static final String KEYCLOAK_CLIENT = "EMACCS";
    private static final String USER_ROLES = "roles";

    @SuppressWarnings({"unchecked", "deprecation"})
    public static List<String> loadKeycloakRoles(AccessToken jwt) {
        List<String> roles = new ArrayList<>();

        Map<String, Object> resourceAccess = (Map<String, Object>) jwt.getClaims().get(CLAIM_RESOURCE_ACCESS);
        if (resourceAccess == null) {
            return roles;
        }

        Map<String, Object> resource = (Map<String, Object>) resourceAccess.get(KEYCLOAK_CLIENT);
        if (resource == null) {
            return roles;
        }

        return (List<String>) resource.get(USER_ROLES);
    }

    public static String formatUserName(String userName) {
        // Strip the Keycloak Identiy Provider suffix (e.g. @bceid, @idir) from the userName
        String trimmedUserName = userName;
        if (userName != null && userName.contains("@")) {
            int lastAtIndex = userName.lastIndexOf('@');
            if (lastAtIndex > 0) {
                trimmedUserName = userName.substring(0, lastAtIndex);
            }
        }
        return trimmedUserName;
    }

    public static UserRole loadUserRole(HttpServletRequest request) {
        for (UserRole role : UserRole.values()) {
            if (request.isUserInRole(role.name())) {
                return role;
            }
        }
        return UserRole.UNKNOWN;
    }
}
