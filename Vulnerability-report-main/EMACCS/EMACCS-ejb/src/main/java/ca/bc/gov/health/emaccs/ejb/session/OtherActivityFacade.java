/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        OtherActivityFacade.java                       *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.emaccs.ejb.session;

import ca.bc.gov.health.ejb.exception.FacadeException;
import ca.bc.gov.health.emaccs.ejb.entity.ActivityStatus;
import ca.bc.gov.health.emaccs.ejb.entity.OtherActivity;
import ca.bc.gov.health.emaccs.ejb.entity.OtherActivity2;
import ca.bc.gov.health.emaccs.ejb.session.custom.CCStatusManagerFacade;
import ca.bc.gov.health.emaccs.ejb.session.email.EmailFacadeLocal;
import jakarta.ejb.EJB;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.io.Serializable;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author greg.perkins
 */
@Stateless
public class OtherActivityFacade extends CCStatusManagerFacade<OtherActivity> implements OtherActivityFacadeLocal<OtherActivity>, Serializable {

    private static final String CLASS_NAME = OtherActivity.class.getName();
    private static final Logger log = Logger.getLogger(CLASS_NAME);

    @PersistenceContext(unitName = "EMACCS-ejbPU")
    private EntityManager em;

    @EJB
    private EmailFacadeLocal emailFacade;
    @EJB
    ActivityStatusFacadeLocal activityStatusFacade;

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public OtherActivityFacade() {
        super(OtherActivity.class);
    }

    @Override
    public List<OtherActivity> findPending(Long reportingYearId, Long emaId) {
        return find(reportingYearId, emaId, "PENDING%");
    }

    @Override
    public List<OtherActivity> findRejected(Long reportingYearId, Long emaId) {
        return find(reportingYearId, emaId, "REJECTED%");
    }

    @Override
    public List<OtherActivity> findApproved(Long reportingYearId, Long emaId) {
        return find(reportingYearId, emaId, "APPROVED%");
    }

    @Override
    public OtherActivity edit(OtherActivity otherActivity) {
        //left outside catch so facade exception can be caught by caller
        OtherActivity returnedEntity = super.edit(otherActivity);
        try {
            ActivityStatus setStatus = activityStatusFacade.find(otherActivity.getStatusId().getId());
            String actStatus = setStatus.getActivityStatus();
            String orig_ActStatus = otherActivity.getOriginalStatusId().getActivityStatus();
            if (actStatus != null && actStatus.equalsIgnoreCase("Pending Information")) {
                try {
                    if (!actStatus.equals(orig_ActStatus)) {
                        emailFacade.sendEvaluateAnActivity_CE(null, otherActivity.getEMA_Id());
                    }
                } catch (FacadeException e) {
                    log.log(Level.SEVERE, "Unable to send email for Pending Information. regis: {0} act: {1} due to: {2}", new Object[]{otherActivity.getEMA_Id(), otherActivity.getActivityName(), e.getException().getMessage()});
                } catch (Exception e) {
                    log.log(Level.SEVERE, "Unable to send email for Pending Information. regis: {0} act: {1} due to: {2}", new Object[]{otherActivity.getEMA_Id(), otherActivity.getActivityName(), e.getMessage()});
                }
            }
        } catch (FacadeException e) {
            if (otherActivity != null) {
                log.log(Level.SEVERE, "Unable to calculate and possibly send email for Pending Information. regis: {0} act: {1} due to: {2}", new Object[]{otherActivity.getEMA_Id(), otherActivity.getActivityName(), e.getException().getMessage()});
            }
        } catch (Exception e) {
            if (otherActivity != null) {
                log.log(Level.SEVERE, "Unable to calculate and possibly send email for Pending Information. regis: {0} act: {1} due to: {2}", new Object[]{otherActivity.getEMA_Id(), otherActivity.getActivityName(), e.getMessage()});
            }
        }
        return returnedEntity;
    }

    public List<OtherActivity> find(Long reportingYearId, Long emaId, String status) {
        Query query = em.createNativeQuery("select * from EMA_OTHER_ACTIVITIES"
            + " where EMA_ID = ?1"
            + " and REPORTING_YEAR_ID = ?2"
            + " and STATUS_ID in ("
            + " select ID from EMA_CODES_ACTIVITY_STATUSES"
            + " where upper(ACTIVITY_STATUS) like ?3)"
            + " order by UPPER(EMA_OTHER_ACTIVITIES.ACTIVITY_NAME)",
            OtherActivity.class);
        query.setParameter(1, emaId);
        query.setParameter(2, reportingYearId);
        query.setParameter(3, status);

        return query.getResultList();
    }
    
    public List<OtherActivity2> find2(Long reportingYearId, Long emaId, String status) {
        Query query = em.createNativeQuery("select * from EMA_OTHER_ACTIVITIES"
            + " where EMA_ID = ?1"
            + " and REPORTING_YEAR_ID = ?2"
            + " and STATUS_ID in ("
            + " select ID from EMA_CODES_ACTIVITY_STATUSES"
            + " where upper(ACTIVITY_STATUS) like ?3)"
            + " order by UPPER(EMA_OTHER_ACTIVITIES.ACTIVITY_NAME)",
            OtherActivity.class);
        query.setParameter(1, emaId);
        query.setParameter(2, reportingYearId);
        query.setParameter(3, status);

        return query.getResultList();
    }
    
    @Override
    public boolean hasAttachment(Long emaId, int rowId){
        Query query = em.createNativeQuery("select ID from EMA_OTHER_ACTIVITIES where EMA_ID = " + emaId + " and ID = " + rowId + " and LENGTH(ATTACHMENT) <> 0");
        
        return !query.getResultList().isEmpty();
    }
    
    @Override
    public List<OtherActivity> findByLicenceNumber(String licenceNumber, Long reportingYearId) {
        return findByLicenceNumber(licenceNumber,reportingYearId,false);
    }
    
    public List<OtherActivity> findByLicenceNumber(String licenceNumber, Long reportingYearId, boolean allFields) {
        String fields  = "*";
        if (!allFields) 
            fields = "ACTIVITY_NAME,ADJUDICATED_CREDITS,ASSIGNED_TO,ASSIGNED_TO_USERNAME,COMMENTS,CREATED_BY_NM,CREATED_ON_DTM,CREDITS,DETAILS,DURATION,EMA_ID,END_DATE,FILENAME,ID,LAST_MODIFIED_BY_NM,LAST_MODIFIED_ON_DTM,LOCATION,MIMETYPE,NOCP_AREA_ID,NOCP_COMPETENCY_SUBTYPE_ID,NOCP_COMPETENCY_TYPE_ID,REPORTING_YEAR_ID,START_DATE,STATELESS_TRANSACTION_NBR,STATUS_DATE,STATUS_ID";
        Query query = em.createNativeQuery("select " + fields + " from EMA_OTHER_ACTIVITIES"
            + " where EMA_ID = "
            + " (select REGIS_ID from REGIS where REGIS.LICNO= ?1)"
            + " AND REPORTING_YEAR_ID = ?2",
            OtherActivity.class);
        query.setParameter(1, licenceNumber);
        query.setParameter(2, reportingYearId);
        List<OtherActivity> queryResult = query.getResultList();
                
        return queryResult;
    }

    @Override
    public List<OtherActivity> findByEmaIdReportingYear(Long emaId, Long reportingYearId) {
        return findByEmaIdReportingYear(emaId,reportingYearId,false);
    }
    
   
    public List<OtherActivity> findByEmaIdReportingYear(Long emaId, Long reportingYearId, boolean allFields) {
        String fields  = "*";
        if (!allFields) 
            fields = "ACTIVITY_NAME,ADJUDICATED_CREDITS,ASSIGNED_TO,ASSIGNED_TO_USERNAME,COMMENTS,CREATED_BY_NM,CREATED_ON_DTM,CREDITS,DETAILS,DURATION,EMA_ID,END_DATE,FILENAME,ID,LAST_MODIFIED_BY_NM,LAST_MODIFIED_ON_DTM,LOCATION,MIMETYPE,NOCP_AREA_ID,NOCP_COMPETENCY_SUBTYPE_ID,NOCP_COMPETENCY_TYPE_ID,REPORTING_YEAR_ID,START_DATE,STATELESS_TRANSACTION_NBR,STATUS_DATE,STATUS_ID";
        Query query = em.createNativeQuery("select " + fields + " from EMA_OTHER_ACTIVITIES"
            + " where EMA_ID = ?1"
            + " and REPORTING_YEAR_ID = ?2"
            + " order by UPPER(EMA_OTHER_ACTIVITIES.ACTIVITY_NAME)",
            OtherActivity.class);
        query.setParameter(1, emaId);
        query.setParameter(2, reportingYearId);
        List<OtherActivity> queryResult = query.getResultList();
                
        return queryResult;
    }


    @Override
    public List<OtherActivity> batchActivitySearch(OtherActivity params, String lastNameParam, String firstNameParam, String licenceNumberParam) {
        String queryString = "select a from OtherActivity a "
            + "inner join a.emaId as ema "
            + "inner join a.statusId as status ";

        /* build where clause of SQL statement based on which parameters were provided in the Batch Activity Evaluation search form */
        String whereClause = "";

        /* reporting year */
        if (params.getReportingYearId().getId() != null) {
            whereClause = whereClause.concat("a.reportingYearId.id=" + params.getReportingYearId().getId() + " ");
        }
        /* status */
        if (params.getStatusId().getId() != null) {
            if (!whereClause.isEmpty()) {
                whereClause = whereClause.concat("AND ");
            }
            if (params.getStatusId().getId().toString().equals("999")) {
                whereClause = whereClause.concat("a.statusId.activityStatus like \"Pending%\" ");
            } else {
                whereClause = whereClause.concat("a.statusId.id=" + params.getStatusId().getId() + " ");
            }
        }
        /* activity name */
        if (!params.getActivityName().isEmpty()) {
            if (!whereClause.isEmpty()) {
                whereClause = whereClause.concat("AND ");
            }
            String upperName = params.getActivityName().toUpperCase();
            whereClause = whereClause.concat("upper(a.activityName) like \"" + upperName + "\" ");
        }
        /* assigned to */
        if (params.getAssignedToUsername() != null && !params.getAssignedToUsername().isEmpty()) {
            if (!whereClause.isEmpty()) {
                whereClause = whereClause.concat("AND ");
            }
            whereClause = whereClause.concat("a.assignedToUsername = \"" + params.getAssignedToUsername() + "\" ");
        }

        /* EMA last name */
        if (!lastNameParam.isEmpty()) {
            if (!whereClause.isEmpty()) {
                whereClause = whereClause.concat("AND ");
            }
            String upperLName = lastNameParam.toUpperCase();
            whereClause = whereClause.concat("upper(a.emaId.lname) = \"" + upperLName + "\" ");
        }

        /* EMA first name */
        if (!firstNameParam.isEmpty()) {
            if (!whereClause.isEmpty()) {
                whereClause = whereClause.concat("AND ");
            }
            String upperFName = firstNameParam.toUpperCase();
            whereClause = whereClause.concat("upper(a.emaId.fname) = \"" + upperFName + "\" ");
        }

        /* EMA licence number */
        if (!licenceNumberParam.isEmpty()) {
            if (!whereClause.isEmpty()) {
                whereClause = whereClause.concat("AND ");
            }
            whereClause = whereClause.concat("a.emaId.licno = \"" + licenceNumberParam + "\" ");
        }

        /* if any of the parameters were provided, create a 'where' clause to hold the form values */
        if (!whereClause.isEmpty()) {
            queryString = queryString.concat("where ");
            queryString = queryString.concat(whereClause);
        }
        queryString = queryString.concat(" order by a.statusDate asc");

        log.log(Level.INFO, queryString);
        Query query = em.createQuery(queryString, OtherActivity.class);
        return query.getResultList();
    }

}
