/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        LicenceMaintenanceFacade.java                  *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.emaccs.ejb.session;

import ca.bc.gov.health.ejb.exception.FacadeException;
import ca.bc.gov.health.emaccs.ejb.entity.LicenceMaintenance;
import ca.bc.gov.health.emaccs.ejb.entity.Lkcmedat;
import ca.bc.gov.health.emaccs.ejb.session.custom.CCStatusManagerFacade;
import ca.bc.gov.health.emaccs.ejb.session.email.EmailFacadeLocal;
import jakarta.ejb.EJB;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.LockTimeoutException;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.PersistenceException;
import jakarta.persistence.Query;
import jakarta.persistence.TransactionRequiredException;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Root;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author greg.perkins
 */
@Stateless
public class LicenceMaintenanceFacade extends CCStatusManagerFacade<LicenceMaintenance> implements LicenceMaintenanceFacadeLocal<LicenceMaintenance>, Serializable {

    private static final String CLASS_NAME = LicenceMaintenanceFacade.class.getName();
    private static final Logger log = Logger.getLogger(CLASS_NAME);

    @PersistenceContext(unitName = "EMACCS-ejbPU")
    private EntityManager em;
    @EJB
    private EmailFacadeLocal emailFacade;
    @EJB
    private LkcmedatFacadeLocal lkCmedatFacade;

    public LicenceMaintenanceFacade() {
        super(LicenceMaintenance.class);
    }

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    @Override
    public List<LicenceMaintenance> adjudicationSearch(LicenceMaintenance params) {

        String queryString = "select cme.*"
                + ", nvl(pc_pre.patientCount_pre,0) as patientcount_pre"
                + ", nvl(pc_post.patientCount_post,0) as patientcount_post"
                + ", nvl(otherAct_adj.otherActivityCredits_Adj,0) as otherActivityCredits_Adj"
                + ", nvl(otherAct_app.otherActivityCredits_App,0) as otherActivityCredits_App"
                + ", nvl(otherAct_pend.otherActivityCredits_Pend,0) as otherActivityCredits_Pend"
                + ",nvl(approvedAct_pre.approvedActivityCredits_pre,0) as approvedActivityCredits_Pre "
                + ",nvl(approvedAct_post.approvedActivityCredits_post,0) as approvedActivityCredits_Post "
                + "from CMEDAT cme "
                + "inner join REGIS ema "
                + "on cme.REGIS_ID = ema.REGIS_ID "
                + "inner join EMA_ADJUDICATION_REQUEST adj "
                + "on cme.REGIS_ID = adj.EMA_ID and cme.REPORTYR = adj.REPORTING_YEAR_ID "
                + " left outer join(select ema_id, count(reporting_year_id) as patientCount_pre from ema_patient_contacts   pc join ema_codes_reporting_years ry on ry.id = pc.reporting_year_id where pc.reporting_year_id=" + params.getReportyr().getId() + " and (trunc(pc.created_on_dtm) < to_date(substr(RY.REPORTING_YEAR, 6,4)||'-04-01', 'YYYY-MM-DD')and (pc.last_modified_on_dtm is null or trunc(pc.last_modified_on_dtm) < to_date(substr(RY.REPORTING_YEAR, 6,4)||'-04-01', 'YYYY-MM-DD'))) group by ema_id) pc_pre on pc_pre.ema_id =ema.regis_id "
                + " left outer join(select ema_id, count(reporting_year_id) as patientCount_post from ema_patient_contacts pc join ema_codes_reporting_years ry on ry.id = pc.reporting_year_id where pc.reporting_year_id=" + params.getReportyr().getId() + " and (trunc(pc.created_on_dtm) >=to_date(substr(RY.REPORTING_YEAR, 6,4)||'-04-01', 'YYYY-MM-DD') or (pc.last_modified_on_dtm is not null and trunc(pc.last_modified_on_dtm) >=  to_date(substr(RY.REPORTING_YEAR, 6,4)||'-04-01', 'YYYY-MM-DD'))) group by ema_id) pc_post on pc_post.ema_id =ema.regis_id "
                + " left outer join(select eoa.EMA_id, nvl(sum(eoa.adjudicated_credits),0) as otherActivityCredits_Adj from EMA_OTHER_ACTIVITIES EOA join EMA_CODES_ACTIVITY_STATUSES ECAS on ECAS.id = EOA.status_id and lower(ECAS.Activity_status) = 'adjudicated'  where reporting_year_id=" + params.getReportyr().getId() + " group by ema_id) otherAct_adj on otherAct_adj.ema_id =ema.regis_id "
                + " left outer join(select eoa.EMA_id,  nvl(sum(eoa.credits),0) as otherActivityCredits_App from EMA_OTHER_ACTIVITIES EOA join EMA_CODES_ACTIVITY_STATUSES ECAS on ECAS.id = EOA.status_id and lower(ECAS.Activity_status) = 'approved'  where reporting_year_id=" + params.getReportyr().getId() + " group by ema_id) otherAct_app on otherAct_app.ema_id =ema.regis_id "
                + " left outer join(select eoa.EMA_id,  nvl(sum(eoa.credits),0)+nvl(sum(eoa.adjudicated_credits),0) as otherActivityCredits_Pend from EMA_OTHER_ACTIVITIES EOA join EMA_CODES_ACTIVITY_STATUSES ECAS on ECAS.id = EOA.status_id and lower(ECAS.Activity_status) like ('pending%')  where reporting_year_id=" + params.getReportyr().getId() + " group by ema_id) otherAct_pend on otherAct_pend.ema_id =ema.regis_id "
                //looks at last modified + " left outer join(select eaa.ema_id,nvl(sum(ecat.credits),0) as approvedActivityCredits_pre from EMA_APPROVED_ACTIVITIES eaa join EMA_CODES_ACTIVITY_TYPES ecat on ECAT.ID = EAA.ACTIVITY_ID  join ema_codes_reporting_years ry on ry.id = eaa.reporting_year_id  where reporting_year_id = " + params.getReportyr().getId() + "  and (trunc(eaa.created_on_dtm) < to_date(substr(RY.REPORTING_YEAR, 6,4)||'-04-01', 'YYYY-MM-DD')and (eaa.last_modified_on_dtm is null or trunc(eaa.last_modified_on_dtm)  < to_date(substr(RY.REPORTING_YEAR, 6,4)||'-04-01', 'YYYY-MM-DD'))) group by ema_id) approvedAct_pre on approvedAct_pre.ema_id =ema.regis_id " 
                //looks at last modified + " left outer join(select eaa.ema_id,nvl(sum(ecat.credits),0) as approvedActivityCredits_post from EMA_APPROVED_ACTIVITIES eaa join EMA_CODES_ACTIVITY_TYPES ecat on ECAT.ID = EAA.ACTIVITY_ID  join ema_codes_reporting_years ry on ry.id = eaa.reporting_year_id  where reporting_year_id = " + params.getReportyr().getId() + " and (trunc(eaa.created_on_dtm) >=to_date(substr(RY.REPORTING_YEAR, 6,4)||'-04-01', 'YYYY-MM-DD') or (eaa.last_modified_on_dtm is not null and trunc(eaa.last_modified_on_dtm) >=  to_date(substr(RY.REPORTING_YEAR, 6,4)||'-04-01', 'YYYY-MM-DD'))) group by ema_id) approvedAct_post on approvedAct_post.ema_id =ema.regis_id " 
                + " left outer join(select eaa.ema_id,nvl(sum(ecat.default_credits),0) as approvedActivityCredits_pre from EMA_APPROVED_ACTIVITIES eaa join EMA_CODES_ACTIVITY_TYPES ecat on ECAT.ID = EAA.ACTIVITY_ID  join ema_codes_reporting_years ry on ry.id = eaa.reporting_year_id  where reporting_year_id = " + params.getReportyr().getId() + "  and (trunc(eaa.created_on_dtm) < to_date(substr(RY.REPORTING_YEAR, 6,4)||'-04-01', 'YYYY-MM-DD')) group by ema_id) approvedAct_pre on approvedAct_pre.ema_id =ema.regis_id "
                + " left outer join(select eaa.ema_id,nvl(sum(ecat.default_credits),0) as approvedActivityCredits_post from EMA_APPROVED_ACTIVITIES eaa join EMA_CODES_ACTIVITY_TYPES ecat on ECAT.ID = EAA.ACTIVITY_ID  join ema_codes_reporting_years ry on ry.id = eaa.reporting_year_id  where reporting_year_id = " + params.getReportyr().getId() + " and (trunc(eaa.created_on_dtm) >=to_date(substr(RY.REPORTING_YEAR, 6,4)||'-04-01', 'YYYY-MM-DD')) group by ema_id) approvedAct_post on approvedAct_post.ema_id =ema.regis_id ";

        /*
         * build where clause of SQL statement based on which parameters were
         * provided in the  search form
         */

        /* reporting year */
        String whereClause = "where cme.REPORTYR = " + params.getReportyr().getId() + " and adj.SUBMISSION_COMPLETE_YN = 'Y' ";

        if (params.getAssignedToUsername() != null && !params.getAssignedToUsername().isEmpty()) {
            String upperAName = params.getAssignedToUsername().toUpperCase();
            whereClause = whereClause.concat("AND upper(cme.ASSIGNED_TO_USERNAME) like '" + upperAName + "' ");
        }

        if (params.getRegisId().getLname() != null && !params.getRegisId().getLname().isEmpty()) {
            String upperLName = params.getRegisId().getLname().toUpperCase();
            whereClause = whereClause.concat("AND upper(ema.LNAME) like '" + upperLName + "' ");
        }

        if (params.getRegisId().getFname() != null && !params.getRegisId().getFname().isEmpty()) {
            String upperFName = params.getRegisId().getFname().toUpperCase();
            whereClause = whereClause.concat("AND upper(ema.FNAME) like '" + upperFName + "' ");
        }

        if (params.getLicno() != null && !params.getLicno().isEmpty()) {
            whereClause = whereClause.concat("AND cme.LICNO = " + params.getLicno() + " ");
        }

        queryString = queryString.concat(whereClause);
        queryString = queryString.concat("order by cme.CMEDATE desc");

        Query query = em.createNativeQuery(queryString, "LicenceMaintenanceWithTotals");
        List allFound = query.getResultList();
        LicenceMaintenance found;
        List<LicenceMaintenance> allLM = new ArrayList<>();
        //TODO throw facadeException and catch on other side
        for (Object inList : allFound) {
            Object[] entityPieces = (Object[]) inList;
            found = (LicenceMaintenance) entityPieces[0];
            found.setPatientCount_Pre(((BigDecimal) entityPieces[1]).intValue());
            found.setPatientCount_Post(((BigDecimal) entityPieces[2]).intValue());
            found.setOtherActivityCredits_Adj(((BigDecimal) entityPieces[3]).doubleValue());
            found.setOtherActivityCredits_App(((BigDecimal) entityPieces[4]).doubleValue());
            found.setOtherActivityCredits_Pend(((BigDecimal) entityPieces[5]).doubleValue());
            found.setApprovedActivityCredits_Pre(((BigDecimal) entityPieces[6]).doubleValue());
            found.setApprovedActivityCredits_Post(((BigDecimal) entityPieces[7]).doubleValue());
            allLM.add(found);
        }

        return allLM;
    }

    private final Set<String> allShortfallCodes = new HashSet<>(Arrays.asList("T301", "T302"));
    private final Set<String> allReqmetCodes = new HashSet<>(Arrays.asList("T303", "T304", "T305", "T306"));
    private final String pendingAdjCode = "T307";
    private final String directorApproved = "approved";
    private final String directorDenied = "denied";

    @Override
    public LicenceMaintenance edit(LicenceMaintenance licenceMaintenance) {

        //left outside catch so facade exception can be caught by caller
        LicenceMaintenance returnedEntity = super.edit(licenceMaintenance);
        try {
            String newCcode = licenceMaintenance.getCcode().getCcode();
            String newApprStat = licenceMaintenance.getDirectorApproval().getAddesc().toLowerCase();
            String origCcode = licenceMaintenance.getOriginalCcode().getCcode();
            String origApprStat = licenceMaintenance.getLowercaseOriginalDirectorApproval();
            if (!newCcode.equals(origCcode)) {
                //in shortfall
                if (allShortfallCodes.contains(origCcode)) {
                    if (newCcode.equals("T303")) { //requirements met
                        emailFacade.sendRequirementMet(null, licenceMaintenance.getEMA_Id());
                    } else if (newCcode.equals("T304")) { //requirements met CC transfer
                        emailFacade.sendRequirementMet_CCTransfer(null, licenceMaintenance.getEMA_Id());
                    } else if (newCcode.equals("T305") && newApprStat.equals(directorApproved)) {//requirements met adjudicated
                        emailFacade.sendRequirementMet_Adjudicated(null, licenceMaintenance.getEMA_Id());
                    } else if (newCcode.equals("T307")) { //Pending adjudication
                        // do nothing as there is no pending adj email and they know they are doing that because they clicked the button.
                    }
                    //in requirements met
                } else if (allReqmetCodes.contains(origCcode)) {
                    if (newCcode.equals("T301")) { //shorfall
                        emailFacade.sendRevertToShortfall(null, licenceMaintenance.getEMA_Id());
                    } else if (newCcode.equals("T302")) { //shortfall adjudication denied
                        emailFacade.sendRevertToShortfall_AdjudicationDenied(null, licenceMaintenance.getEMA_Id());
                    } else if (origCcode.equals("T305") && (newApprStat.equals(directorApproved) && !origApprStat.equals(directorApproved))) {
                        emailFacade.sendRequirementMet_Adjudicated(null, licenceMaintenance.getEMA_Id());
                    } else if (origCcode.equals("T306")) {
                        //TODO see if they want exam email
                    }
                    // in pending adj
                } else if (pendingAdjCode.equals(origCcode)) {
                    if (newCcode.equals("T305")) {//requirements met adjudicated
                        emailFacade.sendRequirementMet_Adjudicated(null, licenceMaintenance.getEMA_Id());
                    } else if (newCcode.equals("T302")) { //shortfall adjudication denied
                        emailFacade.sendRevertToShortfall_AdjudicationDenied(null, licenceMaintenance.getEMA_Id());
                    } else if (allShortfallCodes.contains(origCcode)) { //catch all if another type of shortfall picked
                        emailFacade.sendRevertToShortfall(null, licenceMaintenance.getEMA_Id());
                    } else if (allReqmetCodes.contains(origCcode)) {//catch all if another type of req met picked
                        emailFacade.sendRequirementMet(null, licenceMaintenance.getEMA_Id());
                    }
                }
            }
        } catch (Exception e) {
            log.log(Level.SEVERE, "Unable to calculate and possibly send email for status change");
        }
        return returnedEntity;
    }

    /**
     * Perform search using form fields loaded from the screen
     */
    @Override
    public List<LicenceMaintenance> searchParamsForm(LicenceMaintenance licenceMaintenance) {
        Query query = em.createNativeQuery("", LicenceMaintenance.class);
        if (licenceMaintenance.getLicno().isEmpty()
                && licenceMaintenance.getAssignedToUsername() == null
                && (!licenceMaintenance.getRegisId().getLname().isEmpty()
                && !licenceMaintenance.getRegisId().getFname().isEmpty())) {
            query = em.createNativeQuery("select * from CMEDAT"
                    + " where REPORTYR = ?1"
                    + " and REGIS_ID = (select REGIS_ID from REGIS where upper(REGIS.LNAME) = ?2 and upper(REGIS.FNAME) = ?3)"
                    + " order by CMEDAT.CMEDATE desc",
                    LicenceMaintenance.class);
            query.setParameter(1, licenceMaintenance.getReportyr().getId());
            query.setParameter(2, licenceMaintenance.getRegisId().getLname().toUpperCase());
            query.setParameter(3, licenceMaintenance.getRegisId().getFname().toUpperCase());
        } else if ((licenceMaintenance.getRegisId().getLname().isEmpty()
                || licenceMaintenance.getRegisId().getFname().isEmpty())
                && licenceMaintenance.getAssignedToUsername() == null
                && licenceMaintenance.getLicno().isEmpty()) {
            query = em.createNativeQuery("select * from CMEDAT"
                    + " where REPORTYR = ?1"
                    + " order by CMEDAT.CMEDATE desc",
                    LicenceMaintenance.class);
            query.setParameter(1, licenceMaintenance.getReportyr().getId());
        } else if (licenceMaintenance.getAssignedToUsername() == null
                && !licenceMaintenance.getLicno().isEmpty()
                && (!licenceMaintenance.getRegisId().getLname().isEmpty()
                && !licenceMaintenance.getRegisId().getFname().isEmpty())) {
            query = em.createNativeQuery("select * from CMEDAT"
                    + " where REPORTYR = ?1"
                    + " and LICNO = ?2"
                    + " and REGIS_ID = (select REGIS_ID from REGIS where upper(REGIS.LNAME) = ?3 and upper(REGIS.FNAME) = ?4)"
                    + " order by CMEDAT.CMEDATE desc",
                    LicenceMaintenance.class);
            query.setParameter(1, licenceMaintenance.getReportyr().getId());
            query.setParameter(2, licenceMaintenance.getLicno());
            query.setParameter(3, licenceMaintenance.getRegisId().getLname().toUpperCase());
            query.setParameter(4, licenceMaintenance.getRegisId().getFname().toUpperCase());
        }
        return query.getResultList();
    }

    /*
    EvaluateOtherActivities - on save passes in creditsChanged(doesn't do it on insert only update/delteed) and isEMA
    LogPatientContacts- on save passes in deleted occoured and isEMA
    SubmitApprovedActivities  - on save passes in deleted occoured and isEMA


    if requirementMet and not EMA and delete of patient contact or credit(update/delete)
	check credits/contacts and maybe move to shortfall
	
    if NOT requirementMet and NOT PENDING ADJ
	check credits/contacts and move into requirements met*/
    // TODO - refactor has been deleted as activity credit edits could reduce or add and reduction needs the deleted logic
    // See CreditChangeFacade for detail about
    @Override
    public void checkIfRequirementsMet(Long emaId, Long reportingYearId, boolean hasBeenDeleted) {

        Query query = em.createNativeQuery(
                "SELECT entire.* FROM ("
                + "select"
                + " licman.CMEDAT_ID, ("
                + "select count (distinct EPC.ID)"
                + " from EMA_PATIENT_CONTACTS epc"
                + " where epc.EMA_ID = LICMAN.REGIS_ID"
                + " and epc.REPORTING_YEAR_ID = LICMAN.REPORTYR"
                + ") CONTACTS,"
                + " nvl("
                + "("
                + "select sum(ecat.default_credits)"
                + " from EMA_APPROVED_ACTIVITIES eaa,"
                + " EMA_CODES_ACTIVITY_TYPES ecat"
                + " WHERE eaa.EMA_ID = LICMAN.REGIS_ID"
                + " and eaa.REPORTING_YEAR_ID = LICMAN.REPORTYR"
                + " and ECAT.ID = EAA.ACTIVITY_ID"
                + "), 0"
                + ") +  nvl("
                + "("
                + "select sum(eoa.CREDITS)"
                + " from EMA_OTHER_ACTIVITIES eoa"
                + " where eoa.EMA_ID(+) = LICMAN.REGIS_ID"
                + " and eoa.REPORTING_YEAR_ID(+) = LICMAN.REPORTYR"
                + " and eoa.STATUS_ID in ("
                + " select ID from EMA_CODES_ACTIVITY_STATUSES"
                + " where upper(ACTIVITY_STATUS) like 'APPROVED%'"
                + ")"
                + "), 0"
                + ") + nvl("
                + "("
                + "select sum(eoa.ADJUDICATED_CREDITS)"
                + " from EMA_OTHER_ACTIVITIES eoa"
                + " where eoa.EMA_ID(+) = LICMAN.REGIS_ID"
                + " and eoa.REPORTING_YEAR_ID(+) = LICMAN.REPORTYR"
                + " and eoa.STATUS_ID in ("
                + " select ID from EMA_CODES_ACTIVITY_STATUSES"
                + " where upper(ACTIVITY_STATUS) like 'ADJUDICATED%'"
                + ")"
                + "), 0"
                + ") TOTAL_CREDITS,"
                + " CREATED_ON_DTM "
                + " from CMEDAT licman "
                + " where LICMAN.REPORTYR = ?1"
                + " and LICMAN.REGIS_ID = ?2"
                // Order by the most current creation date
                + " ORDER BY licman.CREATED_ON_DTM DESC"
                // Limit to 1 record
                + ") entire WHERE rownum=1"
        );
        query.setParameter(1, reportingYearId);
        query.setParameter(2, emaId);
        List<Object[]> results = null;
        Object[] result = null;
        try {
            results = query.getResultList();
            results = query.getResultList();
            result = results.get(0);
        } catch (Exception e) {
            log.log(Level.WARNING, "Unable to checkIfRequirementsMet (probably no CMEDAT returned) for ema:{0} during reportingID: {1} due to:{2} with: {3}", new Object[]{emaId, reportingYearId, CLASS_NAME, e.getMessage()});
            throw new FacadeException(e, e.getClass());
        }
        //Shouldn't be possible
        if (result == null) {
            log.log(Level.WARNING, "Unable to checkIfRequirementsMet for {0} as a null was unexpectedly met", emaId);
            return;
        }

        long cmedatId = ((BigDecimal) result[0]).longValue();
        int contacts = ((BigDecimal) result[1]).intValue();
        double credits = ((BigDecimal) result[2]).doubleValue();
        LicenceMaintenance lm = em.find(LicenceMaintenance.class, cmedatId);
        Calendar cal = Calendar.getInstance();
        Date today = new Date();
        cal.set(today.getYear() + 1900, today.getMonth(), today.getDate(), 0, 0, 0);
        today = cal.getTime();
        log.log(Level.INFO, "****** if requirements Met******************");

        if (!lm.getCcode().getCdesc().contains("REQUIREMENTS MET")) {
            log.log(Level.INFO, "****** if Exempt start******************");
            if (lm.getCcode().getCdesc().equals("EXEMPT")) {
                return;

            } else if (!lm.getCcode().getCdesc().contains("PENDING ADJUDICATION")) {
                // Check credits and contacts
                if ((credits >= 20 && ((credits + contacts) >= 40))) {
                    //Update to requirements met
                    lm.setCcode(new Lkcmedat(lkCmedatFacade.getCcode("REQUIREMENTS MET")));
                    lm.setCmedate(today);
                    lm.setStatusDate(lm.getCmedate());
                    this.edit(lm);

                }
            }
        } else {
            //adds updates won't change this, only deletes
            if (!hasBeenDeleted) {
                return;
            }
            // Check credits and contacts
            if (!(credits >= 20 && ((credits + contacts) >= 40))) {
                lm.setCcode(new Lkcmedat(lkCmedatFacade.getCcode("IN SHORTFALL")));
                lm.setCmedate(today);
                lm.setStatusDate(lm.getCmedate());
                this.edit(lm);
            }
        }
    }

    @Override
    public LicenceMaintenance getCurrentLicenceMaintenanceForEmaReportingYear(LicenceMaintenance lmQuery) {

        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<LicenceMaintenance> criteriaQuery = cb.createQuery(LicenceMaintenance.class);
        Root<LicenceMaintenance> from = criteriaQuery.from(LicenceMaintenance.class);
        CriteriaQuery<LicenceMaintenance> select = criteriaQuery.select(from);

        List<Predicate> criterias = new ArrayList<>();

        criterias.add(cb.equal(from.get("regisId"), lmQuery.getRegisId()));
        criterias.add(cb.equal(from.get("reportyr"), lmQuery.getReportyr()));

        criteriaQuery.orderBy(cb.desc(from.get("createdOnDtm")));

        // Applying filter
        criteriaQuery.where(cb.and(criterias.toArray(new Predicate[0])));
        TypedQuery<LicenceMaintenance> query = em.createQuery(criteriaQuery);
        query.setParameter("regisId", lmQuery.getRegisId());
        query.setParameter("reportyr", lmQuery.getReportyr());

        log.log(Level.INFO, "====>> {0}, {1}", new Object[]{lmQuery.getRegisId().getRegisId(), lmQuery.getReportyr().getId()});
        LicenceMaintenance lmResult = null;

        //checkIfRequirementsMet(lmQuery.getRegisId().getRegisId(), lmQuery.getReportyr().getId(), true);
        try {
            List<LicenceMaintenance> lList = query.getResultList();
            if (lList.size() > 0) {
                lmResult = lList.get(0);
            }

        } catch (IllegalStateException | LockTimeoutException | TransactionRequiredException ex) {
            // Ignore
        } catch (PersistenceException ex) {
            // Ignore
        }
        return lmResult;
    }

    /* 
    private void sendEmail(String emailToSend, Long emaId,Long reportingYearId,LicenceMaintenance lm){
         
            EmergencyMedicalAssistant ema = em.find(EmergencyMedicalAssistant.class, emaId);
            String email = ema.getEmail();
            if (email == null || email.isEmpty()) {
                email = "emalbgeneral@gov.bc.ca";
            }
            ReportingYear ry = em.find(ReportingYear.class, reportingYearId);
            Query q = em.createNativeQuery("select * from EMA_CODES_EMAIL_MESSAGES where DESCRIPTION = ?1",
                    EmailMessage.class);
            q.setParameter(1, emailToSend);
            EmailMessage msgResult = (EmailMessage) q.getSingleResult();
            EmailMessage newEmail = new EmailMessage();
            newEmail.setEmailAddress(email);

            newEmail.setSubject(msgResult.getSubject().replace("YEAR/YEAR", ry.getReportingYear()));
            newEmail.setBody(String.format("Name: %s %s%nLicence Number: %s%n%n",
                ema.getFname(),
                ema.getLname(),
                lm.getLicno())
                + msgResult.getBody().replace("YEAR/YEAR", ry.getReportingYear()));

            emailFacade.sendEmail(newEmail);
    }*/
}
