/*******************************************************************************
 * Copyright Â© 2015, Province of British Columbia.                             *
 *                                                                             *
 * All rights reserved.                                                        *
 *                                                                             *
 * File:                        ApprovedActivityFacade.java                    *
 * Date of Last Commit: $Date:: 2015-06-22 17:18:37 -0700 (Mon, 22 Jun 2015) $ *
 * Revision Number:      $Rev:: 2540                                         $ *
 * Last Commit by:    $Author:: cmatsond                                     $ *
 *                                                                             *
 *******************************************************************************/

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.emaccs.ejb.session;

import ca.bc.gov.health.emaccs.ejb.entity.ApprovedActivity;
import ca.bc.gov.health.emaccs.ejb.entity.ReportingYear;
import ca.bc.gov.health.emaccs.ejb.session.custom.CCStatusManagerFacade;
import jakarta.ejb.EJB;
import jakarta.ejb.Stateless;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author greg.perkins
 */
@Stateless
public class ApprovedActivityFacade extends CCStatusManagerFacade<ApprovedActivity> implements ApprovedActivityFacadeLocal<ApprovedActivity>, Serializable {

    private static final String CLASS_NAME = ApprovedActivityFacade.class.getName();
    private static final Logger LOG = Logger.getLogger(CLASS_NAME);
    @EJB
    private ReportingYearFacadeLocal reportingYearFacade;

    @PersistenceContext(unitName = "EMACCS-ejbPU")
    private EntityManager em;

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public ApprovedActivityFacade() {
        super(ApprovedActivity.class);
    }

    @Override
    public List<ApprovedActivity> findAll() {
        Query query = em.createNativeQuery("select * from EMA_APPROVED_ACTIVITIES a"
                + " INNER JOIN EMA_CODES_ACTIVITY_TYPES t on a.ACTIVITY_ID=t.ID"
                + " ORDER BY t.ACTIVITY_NAME",
                ApprovedActivity.class);
        return query.getResultList();
    }

    @Override
    public List<ApprovedActivity> findByLicenceNumber(String licenceNumber, Long reportingYearId) {
        Query query = em.createNativeQuery("select * from EMA_APPROVED_ACTIVITIES a"
                + " INNER JOIN EMA_CODES_ACTIVITY_TYPES t on a.ACTIVITY_ID=t.ID"
                + " where a.EMA_ID = "
                + " (select REGIS_ID from REGIS where REGIS.LICNO= ?1) "
                + " AND a.REPORTING_YEAR_ID = ?2"
                + " ORDER BY t.ACTIVITY_NAME",
                ApprovedActivity.class);
        query.setParameter(1, licenceNumber);
        query.setParameter(2, reportingYearId);
        return query.getResultList();
    }

    @Override
    public List<ApprovedActivity> findByEmaIdReportingYear(Long emaId, Long reportingYearId) {
        Query query = em.createNativeQuery("select * from EMA_APPROVED_ACTIVITIES a"
                + " INNER JOIN EMA_CODES_ACTIVITY_TYPES t on a.ACTIVITY_ID=t.ID"
                + " where a.EMA_ID = ?1 "
                + " AND a.REPORTING_YEAR_ID = ?2"
                + " ORDER BY t.ACTIVITY_NAME",
                ApprovedActivity.class);
        query.setParameter(1, emaId);
        query.setParameter(2, reportingYearId);
        return query.getResultList();
    }

    @Override
    public List<ApprovedActivity> findByActivityTypeReportingYear(Long activityTypeId, Long reportingYearId) {
        Query query = em.createNativeQuery("select * from EMA_APPROVED_ACTIVITIES a "
                + "INNER JOIN EMA_CODES_ACTIVITY_TYPES t on t.ID=a.ACTIVITY_ID "
                + "where a.ACTIVITY_ID = ?1 "
                + "AND a.REPORTING_YEAR_ID = ?2",
                ApprovedActivity.class);
        query.setParameter(1, activityTypeId);
        query.setParameter(2, reportingYearId);
        return query.getResultList();
    }

    @Override
    public void updateAffectedEMAStatusForCurrentYear(Long activityId, List<Long> emaIdList) {
        ReportingYear reportingYear = reportingYearFacade.getCurrentReportingYear();
        LOG.log(Level.INFO, "Start update processing for the activity type id {0} of reporting year id {1}", new Object[]{activityId, reportingYear.getId()});
        for (long emaId : emaIdList) {
            LOG.log(Level.INFO, "Procesing ema id {0} (checkRequirements)", emaId);
            try {
                this.checkRequirements(emaId, reportingYear.getId(), true);
            } catch (Exception e) {
                LOG.log(Level.SEVERE, e.getLocalizedMessage());
            }
        }
        LOG.log(Level.INFO, "Finish update processing");
    }

    @Override
    public List<Long> updatedAffectedActivitiesForCurrentYear(Long activityTypeId, BigDecimal newCredits) {
        ReportingYear reportingYear = reportingYearFacade.getCurrentReportingYear();
        List<Long> emaIdList = new ArrayList<>();
        List<ApprovedActivity> approvedActivityList = this.findByActivityTypeReportingYear(activityTypeId, reportingYear.getId());
        LOG.log(Level.INFO, "updatedAffectedActivitiesForCurrentYear - records count --> {0}", approvedActivityList.size());
        for (ApprovedActivity approvedActivity : approvedActivityList) {
            LOG.log(Level.INFO, "updatedAffectedActivitiesForCurrentYear --> Processing activity id {0}", approvedActivity.getId());
            approvedActivity.setCredits(newCredits);
            this.edit(approvedActivity);
            emaIdList.add(approvedActivity.getEMA_Id());
        }
        return emaIdList;
    }
}
