package ca.bc.gov.health.security;

import jakarta.ws.rs.client.Client;
import jakarta.ws.rs.client.ClientBuilder;
import jakarta.ws.rs.client.Entity;
import jakarta.ws.rs.client.WebTarget;
import jakarta.ws.rs.core.Form;
import jakarta.ws.rs.core.MediaType;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;
import java.util.function.Supplier;

/**
 * A class for obtaining access tokens from Keycloak using a service account.
 *
 * <p>Not thread safe.
 *
 * @author david.a.sharpe
 */
public class KeycloakTokenSupplier implements Supplier<String> {

  private String token;
  private Instant generatedAt;

  private final Client client;
  private final WebTarget target;
  private final Form credentialsForm;

  public KeycloakTokenSupplier(String authServerBaseUrl, String clientId, String clientSecret) {
    client = ClientBuilder.newBuilder().build();
    target = client.target(authServerBaseUrl);
    credentialsForm =
        new Form()
            .param("client_id", clientId)
            .param("client_secret", clientSecret)
            .param("grant_type", "client_credentials");
  }

  @Override
  public String get() {
    fetchToken();
    return token;
  }

  // No need to synchronize this method call if used within a Stateless EJB.
  private void fetchToken() {
    // The default Keycloak access token expiry is 5 minutes and is unlikely to change.
    if (generatedAt == null || Instant.now().isAfter(generatedAt.plus(1, ChronoUnit.MINUTES))) {
      this.generatedAt = Instant.now();
      Future<Map> response =
          target
              .request(MediaType.APPLICATION_FORM_URLENCODED)
              .accept(MediaType.APPLICATION_JSON_TYPE)
              .buildPost(Entity.form(credentialsForm))
              .submit(Map.class);
      try {
        Map map = response.get();
        token = String.valueOf(map.get("access_token"));
      } catch (InterruptedException | ExecutionException e) {
        throw new RuntimeException(e);
      }
    }
  }

  public void closeClient() {
    if (client != null) {
      client.close();
    }
  }
}
