/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package ca.bc.gov.moh.hsa.util.audit.entity.dao;

import ca.bc.gov.moh.hsa.util.audit.entity.Transaction;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceException;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

/**
 * DAO for persisting transactions to the audit database
 * @author greg.perkins
 */
@Transactional(propagation = Propagation.REQUIRED)
@Component
public class TransactionDAO {
    
    /**
     * Entity Manager for persisting
     */
    @PersistenceContext
    private EntityManager em;
    
    /**
     * Inserts a new transaction
     * @param entity Transaction
     * @return Transaction - updated with generated values
     */
    public Transaction insert(Transaction entity){
        em.persist(entity);
        em.flush();
        entity = em.find(Transaction.class, entity.getTransactionId());
        return entity;
    }
    
    /**
     * Updates an existing transaction
     * @param entity Transaction
     * @return Transaction - updated with generated values
     */    
    public Transaction update(Transaction entity){
        entity = em.merge(entity);
        em.flush();
        entity = em.find(Transaction.class, entity.getTransactionId());
        return entity;
    }

    public List<Transaction> findDuplicateCompleteTransaction(String messageId, String transactionId) {
        Query duplicateTransactionQuery = em.createNamedQuery("Transaction.findDuplicate");
        duplicateTransactionQuery.setParameter("transactionId", transactionId);
        duplicateTransactionQuery.setParameter("messageId", messageId);
        return duplicateTransactionQuery.getResultList();
    }
    
    /**
     * Gets a Transaction by its ID.
     * 
     * Throws an exception if the given ID does not uniquely identify a 
     * Transaction.
     * 
     * @param transactionId must uniquely identify a Transaction.
     * @return a Transaction.
     * 
     * @throws PersistenceException
     */
    public Transaction getTransaction(String transactionId) {
        TypedQuery<Transaction> query = em.createNamedQuery("Transaction.findByTransactionId", Transaction.class);
        query.setParameter("transactionId", transactionId);
        return query.getSingleResult();
    }
}
