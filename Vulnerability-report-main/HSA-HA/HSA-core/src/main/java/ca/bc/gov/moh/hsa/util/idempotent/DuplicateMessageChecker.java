/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.util.idempotent;

import ca.bc.gov.moh.hsa.util.SimpleSerializer;
import static ca.bc.gov.moh.hsa.util.audit.AuditProcessor.TRANSACTION_HEADER_KEY;
import ca.bc.gov.moh.hsa.util.audit.AuditableMessage;
import ca.bc.gov.moh.hsa.util.audit.AuditableResponse;
import ca.bc.gov.moh.hsa.util.audit.AuditableResponseMessage;
import ca.bc.gov.moh.hsa.util.audit.entity.Transaction;
import ca.bc.gov.moh.hsa.util.audit.entity.dao.TransactionDAO;
import java.util.List;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

/**
 *
 * @author conrad.gustafson
 */
@Component
public class DuplicateMessageChecker implements Processor {

    @Autowired
    private TransactionDAO dao;

    @Override
    public void process(Exchange exchange) throws Exception {

        String transactionId = getTransactionId(exchange);
        if (transactionId == null) {
            return;
        }
        
        String messageId = getMessageId(exchange);
        if (messageId == null) {
            return;
        }

        if (duplicateMessageFound(messageId, transactionId)) {
            
            Object body = exchange.getIn().getBody();
            if (body instanceof AuditableResponse) {
                AuditableResponse response = (AuditableResponse) body;
                response.getAuditableResponseMessageList().add(new DuplicateMessageAuditableResponseMessage());
            }
            throw new DuplicateMessageException();
        }
    }

    private String getMessageId(Exchange exchange) {
        String messageId = null;
        Object body = exchange.getIn().getBody();
        if (body instanceof AuditableMessage) {
            messageId = ((AuditableMessage) body).getMessageId();
        }
        return messageId;
    }

    private String getTransactionId(Exchange exchange) {
        String transactionId = null;

        String serializedTransaction = exchange.getIn().getHeader(TRANSACTION_HEADER_KEY, String.class);
        Transaction transaction = null;
        if (!StringUtils.isEmpty(serializedTransaction)) {
            transaction = (Transaction) SimpleSerializer.fromString(serializedTransaction);
            transactionId = transaction.getTransactionId();
        }
        return transactionId;
    }

    private boolean duplicateMessageFound(String messageId, String transactionId) {
        List<Transaction> findDuplicateCompleteTransaction = dao.findDuplicateCompleteTransaction(messageId, transactionId);
        return !findDuplicateCompleteTransaction.isEmpty();
    }

}
