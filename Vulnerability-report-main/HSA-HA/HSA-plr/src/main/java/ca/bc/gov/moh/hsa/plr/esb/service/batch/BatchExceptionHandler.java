/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.esb.service.batch;

import ca.bc.gov.health.plr.dto.esb.BatchResponse;
import ca.bc.gov.moh.hsa.entity.CommunicationFunction;
import ca.bc.gov.moh.hsa.plr.converter.BatchResponseToEntityConverter;
import ca.bc.gov.moh.hsa.plr.converter.dtotohl7.PLREntityToHL7BatchTypeConverter;
import ca.bc.gov.moh.hsa.plr.converter.dtotoprsxml.PLREntityToPLRXMLTypeConverter;
import ca.bc.gov.moh.hsa.plr.converter.hl7todto40.BatchRequestHL7ToEntityConverter;
import ca.bc.gov.moh.hsa.plr.entity.transaction.BatchRequestEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.BatchResponseEntity;
import java.util.Date;
import java.util.Set;
import java.util.UUID;
import javax.validation.ConstraintViolation;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.component.bean.validator.BeanValidationException;
import org.hl7.v3.m4_0.CE;
import org.hl7.v3.m4_0.CS;
import org.hl7.v3.m4_0.ED;
import org.hl7.v3.m4_0.II;
import org.hl7.v3.m4_0.MCCIMT000300Acknowledgement;
import org.hl7.v3.m4_0.MCCIMT000300AcknowledgementDetail;
import org.hl7.v3.m4_0.MCCIMT000300TargetMessage;
import org.hl7.v3.m4_0.MCCIMT200100Batch;
import org.hl7.v3.m4_0.ObjectFactory;
import org.hl7.v3.m4_0.QUMTIN200002MCCIMT000300Message;
import org.springframework.stereotype.Component;
import prs2.whic.org.response.GRSINFORMATIONMESSAGE;
import prs2.whic.org.response.GRSMESSAGES;

/**
 * Handles exceptions thrown during the MaintainProvider process
 *
 * @author greg.perkins
 */
@Component
public class BatchExceptionHandler implements Processor {

    /**
     * Constant for a generic exception code TODO: What should this be?
     */
    public static final String GENERIC_ERROR_CODE = "MSG.PRV.BAT.1.0.1000";
    
    /**
     * Handles the exception generated by the batch route
     * @param exchange Exchange - The message exchange
     * @throws Exception 
     */
    @Override
    public void process(Exchange exchange) throws Exception {
        String hl7header = exchange.getIn().getHeader("hl7", String.class);
        if (hl7header == null || hl7header.equals("true")){
            processHL7(exchange);
        }else{
            processPlrXml(exchange);
        }
    }
    
    /**
     * Generates an error in PLRXML format
     * @param exchange Exchange - The message exchange
     * @throws Exception 
     */
    public void processPlrXml(Exchange exchange) throws Exception {
        BatchResponseEntity res = stubResponse();
        String errorMessage = buildMessage(exchange);
        
        GRSINFORMATIONMESSAGE info = new GRSINFORMATIONMESSAGE();
        info.setMSGCODETXT(GENERIC_ERROR_CODE);
        info.setMSGTEXTTXT(errorMessage);
        
        GRSMESSAGES response = PLREntityToPLRXMLTypeConverter.convertRequestResponseEntityToPLRXML(res);
        response.getGRSINFORMATIONMESSAGE().add(info);
        exchange.getIn().setBody(response);
    }
        
    /**
     * Generates an error in HL7 format
     * @param exchange Exchange - The message exchange
     * @throws Exception 
     */    
    public void processHL7(Exchange exchange) throws Exception {
        BatchResponseEntity res = stubResponse();
        String errorMessage = buildMessage(exchange);

        Object in = exchange.getIn().getBody();
        II incomingMessageId = null;
        if (in instanceof MCCIMT200100Batch) {
            MCCIMT200100Batch hl7 = (MCCIMT200100Batch) in;
            incomingMessageId = hl7.getId();
            res.setInteractionId(hl7.getInteractionId().getExtension());
            BatchRequestHL7ToEntityConverter converter = new BatchRequestHL7ToEntityConverter() {
            };
            BatchRequestEntity entity = new BatchRequestEntity();
            converter.setSenderFields(hl7, entity);
            converter.setReceiverFields(hl7, entity);
            CommunicationFunction sender = entity.getSender();
            CommunicationFunction receiver = entity.getReceiver().get(0);
            res.setSender(receiver);
            res.getReceiver().set(0, sender);
        }else if (in instanceof BatchResponse){
            BatchResponse br = (BatchResponse)in;
            BatchResponseToEntityConverter.convertSource(br, res);
            BatchResponseToEntityConverter.convertTarget(br, res);
            incomingMessageId = new II();
            incomingMessageId.setExtension(br.getUniqueMessageId());
        }
        ObjectFactory factory = new ObjectFactory();

        MCCIMT000300Acknowledgement nack = new MCCIMT000300Acknowledgement();
        nack.setTypeCode(new CS("AE"));
        MCCIMT000300AcknowledgementDetail detail = new MCCIMT000300AcknowledgementDetail();
        nack.getAcknowledgementDetail().add(detail);
        detail.setText(factory.createMCCIMT000300AcknowledgementDetailText(ed(errorMessage)));
        detail.setCode(factory.createMCCIMT000300AcknowledgementDetailCode(ce(GENERIC_ERROR_CODE)));
        nack.setTargetMessage(new MCCIMT000300TargetMessage());
        nack.getTargetMessage().setId(incomingMessageId);

        QUMTIN200002MCCIMT000300Message response = PLREntityToHL7BatchTypeConverter.convertBatchResponseEntityToHl7(res);
        response.getAcknowledgement().add(nack);

        exchange.getIn().setBody(response);

    }

    /**
     * Generates an error message based on the exception thrown
     *
     * @param exchange Exchange - The message exchange
     * @return String - Human Readable error
     */
    private String buildMessage(Exchange exchange) {
        Throwable caused = (Throwable) exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class);
        if (caused != null) {
           caused.printStackTrace();
            while (caused.getCause() != null) {
                caused = caused.getCause();
            }
        }
        if (caused == null) {
            return "Unidentified Error";
        }
        StringBuilder buff = new StringBuilder();
        if (caused instanceof BeanValidationException) {
            Set<ConstraintViolation<Object>> constraintViolations = ((BeanValidationException) caused).getConstraintViolations();
            for (ConstraintViolation<Object> constraintViolation : constraintViolations) {
                if (buff.length() > 0) {
                    buff.append(", ");
                }
                buff.append(constraintViolation.getMessage());
            }
        } else {
            buff.append(caused.getClass().getSimpleName());
            buff.append(": ");
            buff.append(caused.getMessage());
        }
        return buff.toString();
    }

    /**
     * Creates a new response entity with default values
     * @return BatchResponseEntity
     */
    private BatchResponseEntity stubResponse() {
        BatchResponseEntity res = new BatchResponseEntity();
        res.setCreationTime(new Date());
        res.setMessageId(UUID.randomUUID().toString());
        return res;
    }
    
    /**
     * Generates an HL7 ED element
     * @param txt String
     * @return  ED
     */
    private ED ed(String txt) {
        ED e = new ED();
        e.setText(txt);
        return e;
    }

    /**
     * Generates and HL7 CE element
     * @param txt String
     * @return CE
     */
    private CE ce(String txt) {
        CE c = new CE();
        c.setCode(txt);
        return c;
    }    

}
