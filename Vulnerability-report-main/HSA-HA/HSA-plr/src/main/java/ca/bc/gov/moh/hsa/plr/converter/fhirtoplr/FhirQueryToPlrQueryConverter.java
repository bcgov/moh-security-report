/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.fhirtoplr;

import ca.bc.gov.health.plr.dto.esb.QueryParameters;
import ca.bc.gov.health.plr.dto.esb.QueryRequest;
import static ca.bc.gov.moh.hsa.plr.converter.dtotohl7.HL740Constants.ACCEPT_ACK_CODE;
import static ca.bc.gov.moh.hsa.plr.converter.dtotohl7.HL740Constants.PROCESSING_CODE;
import static ca.bc.gov.moh.hsa.plr.converter.dtotohl7.HL740Constants.PROCESSING_MODE_CODE;
import ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants;
import java.util.ArrayList;
import java.util.Map;
import java.util.UUID;
import org.apache.camel.Converter;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;

/**
 * Converter class for mapping incoming FHIR v4 query messages to PLR ESB format
 *
 * @author greg.perkins
 */
@Converter
public class FhirQueryToPlrQueryConverter implements Processor{

    /**
     * Converts a request URL into a QueryRequest object
     * by populating the QueryParameters collection based on URL Query Parameters
     * @param inputParams Map
     * @return QueryRequest
     */
    @Converter
    public static QueryRequest convertFhirQueryToPlrQueryRequest(Map<String,Object> inputParams) {
        QueryRequest qr = new QueryRequest();
        QueryParameters params = new QueryParameters();
        
        //Boilerplate parameters required by REST service
        qr.setUniqueMessageID(UUID.randomUUID().toString());
        qr.setProcessingCode(PROCESSING_CODE);
        qr.setProcessModeCode(PROCESSING_MODE_CODE);
        qr.setAcceptAckCode(ACCEPT_ACK_CODE);        
        
        String uri = (String)inputParams.get(Exchange.HTTP_URI);
        params.setHistoryFlag(uri!=null && uri.contains("extendedQuery"));
        params.setOrganizationFlag(uri!=null && uri.contains("Organization"));

        //Query by ID
        if (inputParams.containsKey("_id")){
            params.setIdentifier(inputParams.get("_id").toString());
            params.setIdentifierTypeCode(ProviderFhirConstants.INTERNAL_PROVIDER_CODE);
        }else if (params.isOrganizationFlag()){
            //Query by Parameter
            if (inputParams.containsKey("address-city")){
                params.setCity((String)inputParams.get("address-city"));
            }
            if (inputParams.containsKey("name")){
                params.setOrganizationProviderName((String)inputParams.get("name"));
            }
            if (inputParams.containsKey("identifier")){
                params.setIdentifier(inputParams.get("identifier").toString());
            }
            if (inputParams.containsKey("identifier-type")){
                params.setIdentifierTypeCode(inputParams.get("identifier-type").toString());
            }
        }else{
            //Query by Parameter
            if (inputParams.containsKey("address-city")){
                params.setCity((String)inputParams.get("address-city"));
            }
            if (inputParams.containsKey("given-name")){
                params.setFirstName((String)inputParams.get("given-name"));
            }
            if (inputParams.containsKey("surname")){
                params.setLastName((String)inputParams.get("surname"));
            }
            if (inputParams.containsKey("role")){
                params.setProviderRoleTypeCode((String)inputParams.get("role"));
            }
            if (inputParams.containsKey("gender")){
                params.setGender((String)inputParams.get("gender"));
            }
            if (inputParams.containsKey("language")){
                if (params.getQualifications()==null){
                    params.setQualifications(new ArrayList<>());
                }
                params.getQualifications().add((String)inputParams.get("language"));
            }
            if (inputParams.containsKey("expertise")){
                if (params.getQualifications()==null){
                    params.setQualifications(new ArrayList<>());
                }
                params.getQualifications().add((String)inputParams.get("expertise"));                
            }

            if (inputParams.containsKey("status")){
                params.setLicenseStatus((String)inputParams.get("status"));
            }

            if (inputParams.containsKey("status-reason")){
                 params.setLicenseStatusReason((String)inputParams.get("status-reason"));
            }
            if (inputParams.containsKey("identifier")){
                params.setIdentifier(inputParams.get("identifier").toString());
            }
            if (inputParams.containsKey("identifier-type")){
                params.setIdentifierTypeCode(inputParams.get("identifier-type").toString());
            }  
        }
        
        //TODO: This will ultimately come from a keycloak token. for now, use either the supplied userID or a hardcoded value
        if (inputParams.containsKey("userID")){
            qr.setRegistryUserOrgId(inputParams.get("userID").toString());
        }else{
            qr.setRegistryUserOrgId("jwiebe");
        }
        qr.setQueryParameters(params);
        return qr;
    }

    /**
     * Performs the conversion on a camel exchange body
     * @param exchange Exchange
     * @throws Exception 
     */
    @Override
    public void process(Exchange exchange) throws Exception {
        QueryRequest qr = convertFhirQueryToPlrQueryRequest(exchange.getIn().getHeaders());
        exchange.getIn().setBody(qr);
    }
    
}
