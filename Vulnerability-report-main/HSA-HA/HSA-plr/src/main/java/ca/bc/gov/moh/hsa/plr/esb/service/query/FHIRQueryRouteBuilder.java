/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.esb.service.query;

import ca.bc.gov.moh.hsa.plr.converter.RestAuditLogProcessor;
import ca.bc.gov.moh.hsa.plr.converter.fhirtoplr.FhirJsonConverter;
import ca.bc.gov.moh.hsa.plr.converter.fhirtoplr.FhirQueryToPlrQueryConverter;
import ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.PlrProviderToFhirPractitionerConverter;
import ca.bc.gov.moh.hsa.plr.converter.orgprovtofhir.PlrProviderToFhirOrganizationConverter;
import ca.bc.gov.moh.hsa.plr.esb.fhir.common.CamelFhirFactoryProcessor;
import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRException;
import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRExceptionProcessor;
import org.apache.camel.Exchange;
import org.apache.camel.builder.RouteBuilder;
import org.springframework.stereotype.Component;

/**
 * RouteBuilder to create FHIR Query endpoints
 * @author greg.perkins
 */
@Component
public class FHIRQueryRouteBuilder extends RouteBuilder{

    /**
     * Create routes required for FHIR services in camel
     * @throws Exception 
     */
    @Override
    public void configure() throws Exception {
        configureErrorRoute();
        configurePractitionerQueryRoutes();
        configureOrganizationQueryRoutes();
    }

    /**
     * Setup the common error handler
     */
    private void configureErrorRoute(){
        from("direct:fhirError")
            .process(new FHIRExceptionProcessor())
            .process(new FhirJsonConverter())
            .to("audit:ERROR")
            .to("messagedrop:ERROR");
    }
    
    /**
     * Sets up the practitioner query routes
     */
    private void configurePractitionerQueryRoutes() {
        
        //Setup basic route
        from("direct:fhirPractitioner")
            .routeId("fhir:Practitioner")
            .log("The ${routeId} route received a request")
            .doTry()
                .process(new RestAuditLogProcessor())
                .to("audit:RECEIVE?transactionType=FHIRPRACTITIONER&level=INFO")
                .to("messagedrop:RECEIVE")
                .process(new CamelFhirFactoryProcessor())
                .process(new FhirQueryToPlrQueryConverter())
                .to("direct:plrQuery")
                .process(new PlrProviderToFhirPractitionerConverter())
                .process(new FhirJsonConverter())
                .to("audit:RESPOND?level=INFO")
                .to("messagedrop:RESPOND")
            .doCatch(FHIRException.class)
                .to("direct:fhirError")
                .handled(true)
            .doCatch(Exception.class)
                .to("direct:fhirError")
                .setHeader(Exchange.HTTP_RESPONSE_CODE,simple("500"))
                .handled(true)
            .doFinally()
                .removeHeader("HSA_TRANSACTION")   
                .removeHeader("HSA_TRANSACTION_ID")
                .setHeader(Exchange.CONTENT_TYPE,simple("application/fhir+json"))
            .end();
        
        //Custom URL patterns
        from("rest:get:Practitioner/{_id}/$entityQuery")
            .to("direct:fhirPractitioner");
        
        from("rest:get:Practitioner/$entityQuery")
            .to("direct:fhirPractitioner");
        
        from("rest:get:Practitioner/{_id}/$extendedQuery")
            .to("direct:fhirPractitioner");
        
        from("rest:get:Practitioner/$extendedQuery")
            .to("direct:fhirPractitioner");
       
            
    }
    
    private void configureOrganizationQueryRoutes(){
        //Setup basic route
        from("direct:fhirOrganization")
            .routeId("fhir:Organization")
            .log("The ${routeId} route received a request")
            .doTry()
                .process(new RestAuditLogProcessor())
                .to("audit:RECEIVE?transactionType=FHIRPORGANIZATION&level=INFO")
                .to("messagedrop:RECEIVE")
                .process(new CamelFhirFactoryProcessor())
                .process(new FhirQueryToPlrQueryConverter())
                .to("direct:plrQuery")
                .process(new PlrProviderToFhirOrganizationConverter())
                .process(new FhirJsonConverter())
                .to("audit:RESPOND?level=INFO")
                .to("messagedrop:RESPOND")
            .doCatch(FHIRException.class)
                .to("direct:fhirError")
                .handled(true)
            .doCatch(Exception.class)
                .to("direct:fhirError")
                .setHeader(Exchange.HTTP_RESPONSE_CODE,simple("500"))
                .handled(true)
            .doFinally()
                .removeHeader("HSA_TRANSACTION")   
                .removeHeader("HSA_TRANSACTION_ID")
                .setHeader(Exchange.CONTENT_TYPE,simple("application/fhir+json"))
            .end();
        
        //Custom URL patterns
        from("rest:get:Organization/{_id}/$entityQuery")
            .to("direct:fhirOrganization");
        
        from("rest:get:Organization/$entityQuery")
            .to("direct:fhirOrganization");
        
        from("rest:get:Organization/{_id}/$extendedQuery")
            .to("direct:fhirOrganization");
        
        from("rest:get:Organization/$extendedQuery")
            .to("direct:fhirOrganization");
    }
}
