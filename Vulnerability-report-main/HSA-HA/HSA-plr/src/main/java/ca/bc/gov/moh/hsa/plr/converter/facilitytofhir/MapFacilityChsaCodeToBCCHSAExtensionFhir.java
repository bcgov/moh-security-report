/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.facilitytofhir;

import ca.bc.gov.health.plr.dto.facility.esb.FacilityDto;
import ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.FhirContextFactory;
import ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.BC_LOCATION_PROFILE_URL;
import ca.uhn.fhir.parser.DataFormatException;
import ca.uhn.fhir.parser.IParser;
import ca.uhn.fhir.validation.FhirValidator;
import ca.uhn.fhir.validation.SingleValidationMessage;
import ca.uhn.fhir.validation.ValidationOptions;
import ca.uhn.fhir.validation.ValidationResult;
import java.io.Serializable;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hl7.fhir.r4bc1.model.BCFacilityCHSAExtension;
import org.hl7.fhir.r4bc1.model.BCLocation;
import org.hl7.fhir.r4bc1.model.BCStatusExtension;
import org.hl7.fhir.r4.model.CodeableConcept;
import org.hl7.fhir.r4.model.Identifier;
import org.hl7.fhir.r4.model.Period;
import org.hl7.fhir.r4.model.StringType;

/**
 * Class for mapping components between PLR Facility Community Health Service
 * area and BC CHSA Custom extension part of BCLocation resource.
 *
 * @author dan.stepanov
 */
public class MapFacilityChsaCodeToBCCHSAExtensionFhir implements ProviderFhirConstants, Serializable {

    private static final String CLASSNAME = MapFacilityChsaCodeToBCCHSAExtensionFhir.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    FacilityDto facilityDetails = new FacilityDto();

    public String mapFacilityChsaCodeToBCLocationCHSAExt(FacilityDto bcFacilityDetails) throws Exception {

        String facilityCHSACode = bcFacilityDetails.getCivicAddressDto().getChsaNameCode();

        BCLocation bcLocationFhir = new BCLocation();

        String jsonParsedBCLocationFhir = null;

        // get period time for BC Note extension
        Period fhirPeriodBcCHSAExt = new Period();

        if (!facilityCHSACode.isEmpty()) {

            // create BC CHSA custom extensions FHIR model
            BCFacilityCHSAExtension bcFacilityCHSAExtFhir = new BCFacilityCHSAExtension();

            // create BC Note custom text extension FHIR model
            // get CHSA code text values from the CivicAddressDto and set BC CHSA text custom extension string type values
            CodeableConcept bcCHSACodeConcept = new CodeableConcept();
            bcCHSACodeConcept.setText(facilityCHSACode);
            bcFacilityCHSAExtFhir.setFacilityCHSACode(bcCHSACodeConcept);

//                bcNoteExtensions.add(bcNotePeriodExtFhir);
            bcLocationFhir.setBcFacilityCHSAExtension(bcFacilityCHSAExtFhir);
        }

        jsonParsedBCLocationFhir = parseEncodedBCLocation(bcLocationFhir);

        // validate new BCLocation resource w/address structure
        validateBCLocationFhir(initializeFhirValidator(), jsonParsedBCLocationFhir);

        return jsonParsedBCLocationFhir;
    }

    public String parseEncodedBCLocation(BCLocation bcLocation) throws DataFormatException {
        // Instantiate a new JSON parser
        IParser jparser = FhirContextFactory.forR4().newJsonParser();

        // Serialize it
        String serializedBCLocation = jparser.encodeResourceToString(bcLocation);

        LOG.log(Level.INFO, "MapFacilityChsaCodeToBCCHSAExtensionFhir parseEncodedBCLocation serializedPrac is: {0}.", new Object[]{serializedBCLocation});

        return serializedBCLocation;
    }

    public FhirValidator initializeFhirValidator() {
        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator validator = FhirContextFactory.forR4().newValidator();
        /*
        * set FHIR validator to validate against standard schema during validation
         */
        validator.setValidateAgainstStandardSchema(true);
        return validator;
    }

    public boolean validateBCLocationFhir(FhirValidator validator, String parsedBCLocationFhir) throws DataFormatException {
        // Validate
        ValidationResult validResult = null;
        boolean isLocationResultValid = false;
        try {
            validResult = validator.validateWithResult(parsedBCLocationFhir, new ValidationOptions().addProfile(BC_LOCATION_PROFILE_URL));
        } catch (DataFormatException dfe) {
            LOG.log(Level.SEVERE, "MapFacilityChsaCodeToBCCHSAExtensionFhir encountered a data format error while validate BCLocation Fhir.");
        } catch (Exception ex) {
            LOG.log(Level.SEVERE, "MapFacilityChsaCodeToBCCHSAExtensionFhir encountered an error while validating BCLocation Fhir.");
        }
        if (validResult != null && validResult.isSuccessful()) {
            isLocationResultValid = true;
        } else if (validResult != null && !validResult.isSuccessful()) {
            // display the validation issues
            for (SingleValidationMessage validMsg : validResult.getMessages()) {

                LOG.log(Level.INFO, "MapFacilityChsaCodeToBCCHSAExtensionFhir validation issue severity is: {0} and location is: {1} and message is: {2}.",
                        new Object[]{validMsg.getSeverity(), validMsg.getLocationString(), validMsg.getMessage()});
            }
        }

        LOG.log(Level.INFO, "MapFacilityChsaCodeToBCCHSAExtensionFhir validateBCLocationFhir isLocationResultValid is: {0}.",
                new Object[]{isLocationResultValid});

        return isLocationResultValid;
    }

}
