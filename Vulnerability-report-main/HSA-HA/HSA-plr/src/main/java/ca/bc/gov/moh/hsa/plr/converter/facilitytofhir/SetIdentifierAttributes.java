/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.facilitytofhir;

import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.*;
import java.util.Date;

/**
 *
 * @author jonathan.wiebe
 */
public class SetIdentifierAttributes extends SetAttributesCommon {

    public SetIdentifierAttributes(FHIRFactory theFactory) {
        super(theFactory);
    }

    /**
     * Creates and populates a Identifier resource
     *
     * @param identifierParent target object to add identifier too
     * @param system identifier system
     * @param value identifier value
     * @param start identifier start date
     * @param end identifier end date
     * @param use enumeration for FHIRFactory.IdentifierUse
     * @return identifier Object
     */
    public Object addBCIdentifier(Object identifierParent, String system, String value, Date start, Date end, FHIRFactory.IdentifierUse use) {
        Object identifier = factory.newBCIdentifier();
        factory.callMethod(identifier, "setSystem", system);
        this.setIdentifierValue(identifier, value);
        factory.getSetPeriodAttributes().addPeriod(identifier, start, end);
        // there is nothing but OFFICAL so far
        this.setIdentifierUse(identifier, use);
        if (version == FHIRFactory.FHIR_VERSION.R4 || version == FHIRFactory.FHIR_VERSION.R4BC1) {
            factory.callMethod(identifierParent, "addIdentifier", (org.hl7.fhir.r4.model.Identifier) identifier);
        }
        return identifier;
    }

    /**
     * Creates and populates a BCIdentifier resource
     *
     * @param identifierParent target object to add identifier too
     * @param identifierType identifier type
     * @param value identifier value
     * @param start identifier start date
     * @param end identifier end date
     * @param use enumeration for FHIRFactory.IdentifierUse
     * @return identifier Object
     */
    public Object addBCIdentifierType(Object identifierParent, String identifierType, String value, Date start, Date end, FHIRFactory.IdentifierUse use) {
        Object identifier = factory.newBCIdentifier();
        this.setIdentifierValue(identifier, value);
        this.setIdentifierType(identifier, identifierType);
        factory.getSetPeriodAttributes().addPeriod(identifier, start, end);
        // there is nothing but OFFICAL so far
        this.setIdentifierUse(identifier, use);
        factory.callMethod(identifierParent, "addIdentifier", (org.hl7.fhir.r4.model.Identifier) identifier);

        return identifier;
    }
    
    /**
     * Creates and populates a BCIdentifier for BC Practitioner and BC Organization resources
     *
     * @param identifierParent target object to add identifier too
     * @param identifierType identifier type
     * @param value identifier value
     * @param start identifier start date
     * @param end identifier end date
     * @return identifier Object
     */
    public Object addBCIdentifierTypeResource(Object identifierParent, String identifierType, String value, Date start, Date end) {
        this.setIdentifierValue(identifierParent, value);
        this.setIdentifierType(identifierParent, identifierType);
        factory.getSetPeriodAttributes().addPeriod(identifierParent, start, end);

        return identifierParent;
    }

    public void setIdentifierAssigner(Object targetIdentifier, String value) {
        Object assigner = factory.newReference();
        factory.getSetReferenceAttributes().setReferenceDisplay(assigner, value);
        factory.callMethod(targetIdentifier, "setAssigner", assigner);
    }

    public void setIdentifierUse(Object targetIdentifier, FHIRFactory.IdentifierUse value) {
        switch (value) {
            case OFFICIAL: {
                factory.callMethod(targetIdentifier, "setUse",org.hl7.fhir.r4.model.Identifier.IdentifierUse.OFFICIAL);
                break;
            }
            case USUAL: {
                factory.callMethod(targetIdentifier, "setUse",org.hl7.fhir.r4.model.Identifier.IdentifierUse.USUAL);
                break;
            }
            default:
        }
    }

    public void setIdentifierValue(Object targetIdentifier, String value) {
        if (value != null && !value.isEmpty()) {
            factory.callMethod(targetIdentifier, "setValue", value);
        }

    }

    public void setIdentifierType(Object targetIdentifier, String identifTypeCode) {
        Object cc = factory.newCodeableConcept();
        Object identifierTypeCoding = factory.newCoding();
        // setCodingSystem
        factory.getSetCodingAttributes().setCodingSystem(identifierTypeCoding, BC_IDENTIFIER_TYPE_CODING_SYSTEM_LINK);
        // setCodingCode
        if (identifTypeCode != null && !identifTypeCode.isEmpty()) {
            factory.getSetCodingAttributes().setCodingCode(identifierTypeCoding, identifTypeCode);
        }

        // set CodeableConcept
        factory.getSetCodeableConceptAttributes().setCoding(cc, identifierTypeCoding);
        this.setIdentifierTypeCode(targetIdentifier, cc);
    }
    
    public void setIdentifierTypeCode(Object targetIdentifier, Object identifTypeCode) {
        factory.callMethod(targetIdentifier, "setType", identifTypeCode);
    }
    
    public void setIdentifierERCOwner(Object parent, String endReasonCode, String dataOwnerCode) {
        factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(parent, endReasonCode, dataOwnerCode);
    }

    public void setIdentifierSystem(Object identifier, String system) {
        factory.callMethod(identifier, "setSystem", system);
    }

}
