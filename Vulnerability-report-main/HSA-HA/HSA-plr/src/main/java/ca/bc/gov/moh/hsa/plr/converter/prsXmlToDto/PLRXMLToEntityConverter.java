package ca.bc.gov.moh.hsa.plr.converter.prsXmlToDto;

import ca.bc.gov.moh.hsa.entity.AddressAttribute;
import ca.bc.gov.moh.hsa.entity.CommunicationFunction;
import ca.bc.gov.moh.hsa.entity.ConfidentialityMaskAttribute;
import ca.bc.gov.moh.hsa.entity.DateAttribute;
import ca.bc.gov.moh.hsa.entity.EmailAttribute;
import ca.bc.gov.moh.hsa.entity.GenderAttribute;
import ca.bc.gov.moh.hsa.entity.IdentifierAttribute;
import ca.bc.gov.moh.hsa.entity.OrganizationNameAttribute;
import ca.bc.gov.moh.hsa.entity.Person;
import ca.bc.gov.moh.hsa.entity.PersonNameAttribute;
import ca.bc.gov.moh.hsa.entity.PhoneAttribute;
import ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils;
import ca.bc.gov.moh.hsa.plr.entity.transaction.BatchRequestEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ConditionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.CredentialAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.MaintainProviderRequestEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderAttribute;
import java.util.ArrayList;
import java.util.List;
import prs2.whic.org.GRSADDRESS;
import prs2.whic.org.GRSELECTRONICADDRESS;
import prs2.whic.org.GRSIDENTIFIER;
import prs2.whic.org.GRSMESSAGE;
import prs2.whic.org.GRSPAYLOAD;
import prs2.whic.org.GRSPERSONALNAME;
import prs2.whic.org.GRSTELEPHONE;
import prs2.whic.org.PRSCONDITION;
import prs2.whic.org.PRSDEMOGRAPHICDETAIL;
import prs2.whic.org.PRSDISCIPLINARYACTION;
import prs2.whic.org.PRSPROVIDER;
import ca.bc.gov.moh.hsa.plr.entity.transaction.DisciplinaryActionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ExpertiseAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.InformationRouteAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.NoteAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderRelationshipAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.StatusAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.WorkLocationAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.WorkLocationDetailsAttribute;
import org.apache.cxf.common.util.StringUtils;
import prs2.whic.org.GRSMESSAGES;
import prs2.whic.org.GRSRELATEDIDENTIFIER;
import prs2.whic.org.GRSRELATEDRU;
import prs2.whic.org.PRSCONFIDENTIALITYINDICATOR;
import prs2.whic.org.PRSINFORMATIONROUTE;
import prs2.whic.org.PRSNOTE;
import prs2.whic.org.PRSPROVIDERCREDENTIAL;
import prs2.whic.org.PRSPROVIDEREXPERTISE;
import prs2.whic.org.PRSPROVIDERRELATIONSHIP;
import prs2.whic.org.PRSPROVRURELN;
import prs2.whic.org.PRSSTATUS;
import prs2.whic.org.PRSWORKLOCATION;
import prs2.whic.org.PRSWORKLOCATIONADDRESS;
import prs2.whic.org.PRSWORKLOCATIONDETAIL;
import prs2.whic.org.PRSWORKLOCATIONELECTRONICADDRESS;
import prs2.whic.org.PRSWORKLOCATIONINFORMATIONROUTE;
import prs2.whic.org.PRSWORKLOCATIONTELEPHONE;
import static ca.bc.gov.moh.hsa.plr.esb.service.batch.BatchServiceRouteBuilder.BATCH_MAX_MESSAGE_COUNT;
import org.apache.commons.collections.CollectionUtils;
import prs2.whic.org.GRSORGANIZATIONNAME;
import prs2.whic.org.GRSQUERYPARAMETER;

/**
 *
 * @author conrad.gustafson
 */
public class PLRXMLToEntityConverter {
    
    private static final String GRS_IDENTIFIERSPROVIDER_CHID = "GRS_IDENTIFIERS.PROVIDER_CHID";
    private static final String GRS_IDENTIFIERSIDENTIFIER_TYPE_CODE = "GRS_IDENTIFIERS.IDENTIFIER_TYPE_CODE";
    
    public static BatchRequestEntity convertGrsMessagesToEntity(GRSMESSAGES grsMessages, String transactionId) {
        
        BatchRequestEntity batchRequestEntity = new BatchRequestEntity();
        
        batchRequestEntity.setMessageId(transactionId);
        batchRequestEntity.setMessageType("GRSMESSAGES");
        
        List<MaintainProviderRequestEntity> maintainProviderRequestEntities = batchRequestEntity.getMaintainProviderRequestEntities();
        
        List<GRSMESSAGE> messageList = grsMessages.getGRSMESSAGE();
         for (GRSMESSAGE grsMessage : messageList) {
            MaintainProviderRequestEntity maintainProviderRequestEntity = convertGrsMessageToEntity(grsMessage);
            maintainProviderRequestEntities.add(maintainProviderRequestEntity);
        }
        
        return batchRequestEntity;
    }

    public static MaintainProviderRequestEntity convertGrsMessageToEntity(GRSMESSAGE grsMessage) {
        MaintainProviderRequestEntity transactionRequest = new MaintainProviderRequestEntity();
        final CommunicationFunction sender = transactionRequest.getSender();
        final CommunicationFunction receiver = transactionRequest.getReceiver().get(0);

        // Mapping
        transactionRequest.setMessageId(grsMessage.getUNIQUEMESSAGECHID());
        transactionRequest.setMessageType("GRSMESSAGE");

        sender.setFacilityId(grsMessage.getSENDINGFACILITYCHID());
        receiver.setFacilityId(grsMessage.getRECEIVINGFACILITYCHID());

        sender.setSystemName(grsMessage.getSENDINGAPPLICATIONCHID());
        receiver.setSystemName(grsMessage.getRECEIVINGAPPLICATIONCHID());

        sender.setOrganizationId(grsMessage.getSENDINGORGANISATIONCHID());
        receiver.setOrganizationId(grsMessage.getRECEIVINGORGANISATIONCHID());

        sender.setJurisdiction(grsMessage.getSENDINGJURISDICTIONCODE());

        transactionRequest.setInteractionId(grsMessage.getINTERACTIONTYPECODE());

        receiver.setEnvironment(grsMessage.getENVIRONMENTCODE());
        transactionRequest.setVersionNumber(grsMessage.getVERSIONNUMBERCODE());

        sender.setNetworkAddress(grsMessage.getSENDINGNETWORKADDRESSCHID());
        receiver.setNetworkAddress(grsMessage.getRECEIVINGNETWORKADDRESSCHID());

        transactionRequest.setCreationTime(ConverterUtils.convertFromPLRStringToDate(grsMessage.getMESSAGEDTM()));
        transactionRequest.setOriginalEventTime(ConverterUtils.convertFromPLRStringToDate(grsMessage.getORIGINALEVENTDTM()));

        transactionRequest.setResponsibleUserId(grsMessage.getRESPONSIBLEUSERCHID());

        sender.setUserId(grsMessage.getSENDINGUSERCHID());
        
        GRSPAYLOAD grsPayload = grsMessage.getGRSPAYLOAD();
        List<PRSPROVIDER> grsProviderList = grsPayload.getPRSPROVIDER();
        if (grsProviderList.size() > BATCH_MAX_MESSAGE_COUNT){
            throw new IllegalArgumentException("Number of messages in batch ("+grsProviderList.size()+") exceeds maximum of "+BATCH_MAX_MESSAGE_COUNT);
        }
        if (grsProviderList != null && !grsProviderList.isEmpty()) {
            PRSPROVIDER grsProvider = grsProviderList.get(0);
            ProviderAttribute provider = new ProviderAttribute();
            provider.setPartyType(grsProvider.getPARTYTYPECODE());
            provider.setUserId(grsProvider.getREGISTRYUSERORGCHID());
            provider.setJurisdiction(grsProvider.getJURISDICTIONCODE());
            provider.setHptCode(grsProvider.getHPTCODE());

            setIdentifiers(grsProvider, provider);
            setNames(grsProvider, provider);
            setOrganizationNames(provider, grsProvider);
            setAddresses(grsProvider, provider);
            setPhones(grsProvider, provider);
            setElectronicAddresses(grsProvider, provider);
            setConditions(grsProvider, provider);
            // call setDemographicDetails before setConfidentiality!
            // setConfidentiality depends on demographics.
            setDemographicDetails(grsProvider, provider);
            setConfidentiality(grsProvider, provider);
            setDisciplinaryActions(grsProvider, provider);
            setInformationRoutes(grsProvider, provider);
            setNotes(grsProvider, provider);
            setRegistryUserRelationships(grsProvider, provider);
            setProviderRelationships(grsProvider, provider);
            setCredentials(grsProvider, provider);
            setExpertises(grsProvider, provider);
            setStatuses(grsProvider, provider);
            setWorkLocations(grsProvider, provider);

            transactionRequest.setProvider(provider);
        }

        return transactionRequest;
    }

    public static void setIdentifiers(PRSPROVIDER grsProvider, ProviderAttribute provider) {
        List<IdentifierAttribute> mappedCollegeIdentifiers = new ArrayList<>();
        for (GRSIDENTIFIER grsIdentifier : grsProvider.getGRSIDENTIFIER()) {
            IdentifierAttribute mappedIdentifier = new IdentifierAttribute();
            mappedIdentifier.setValue(grsIdentifier.getPROVIDERCHID());
            mappedIdentifier.setUncodedType(grsIdentifier.getIDENTIFIERTYPECODE());
            mappedIdentifier.setStartDate(ConverterUtils.convertFromPLRStringToDate(grsIdentifier.getEFFECTIVESTARTDATE()));
            mappedIdentifier.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(grsIdentifier.getEFFECTIVEENDDATE()));
            mappedIdentifier.setEndReasonCode(grsIdentifier.getENDREASONCODE());
            mappedIdentifier.setSource(grsIdentifier.getDATAOWNERCODE());
            mappedCollegeIdentifiers.add(mappedIdentifier);
        }
        convertQueryParameterToIdentifier(grsProvider.getGRSQUERYPARAMETER(), mappedCollegeIdentifiers);
        if (CollectionUtils.isNotEmpty(mappedCollegeIdentifiers)) {
            provider.setCollegeIdentifiers(mappedCollegeIdentifiers);
        }
    }

    // PLR-2046. For some unknown reason HIBC batch files can specify one Identifier in GRS_QUERY_PARAMETER.
    private static void convertQueryParameterToIdentifier(List<GRSQUERYPARAMETER> grsqueryparameters, List<IdentifierAttribute> mappedCollegeIdentifiers) {
        String providerChid = null;
        String identifierType = null;
        for (GRSQUERYPARAMETER q : grsqueryparameters) {
            if (GRS_IDENTIFIERSIDENTIFIER_TYPE_CODE.equals(q.getPARAMETERTXT())) {
                identifierType = q.getVALUETXT();
            }
            if (GRS_IDENTIFIERSPROVIDER_CHID.equals(q.getPARAMETERTXT())) {
                providerChid = q.getVALUETXT();
            }
        }
        if (providerChid != null && identifierType != null) {
            IdentifierAttribute mappedIdentifier = new IdentifierAttribute();
            mappedIdentifier.setValue(providerChid);
            mappedIdentifier.setUncodedType(identifierType);
            mappedCollegeIdentifiers.add(mappedIdentifier);
        }
    }

    public static void setNames(PRSPROVIDER grsProvider, ProviderAttribute provider) {
        List<GRSPERSONALNAME> grsPersonalNameList = grsProvider.getGRSPERSONALNAME();
        if (!CollectionUtils.isEmpty(grsPersonalNameList)) {
            List<PersonNameAttribute> personNameAttributes = new ArrayList<>();
            provider.setPersonNames(personNameAttributes);

            for (GRSPERSONALNAME grsPersonalName : grsPersonalNameList) {
                PersonNameAttribute personNameAttribute = new PersonNameAttribute();
                personNameAttribute.setUncodedType(grsPersonalName.getNAMETYPECODE());
                personNameAttribute.setPreferred(convertToBoolean(grsPersonalName.getPNAMEPREFERREDFLAG()));
                personNameAttribute.setLastName(grsPersonalName.getPRSNSURNAMETXT());
                personNameAttribute.setFirstName(grsPersonalName.getPRSNFIRSTGIVENNAMETXT());
                personNameAttribute.setMiddleName(grsPersonalName.getPRSNSECONDGIVENNAMETXT());
                personNameAttribute.setSecondMiddleName(grsPersonalName.getPRSNTHIRDGIVENNAMETXT());
                personNameAttribute.setSuffix(grsPersonalName.getPRSNSUFFIXTXT());
                personNameAttribute.setPrefix(grsPersonalName.getPRSNPREFIXTXT());
                personNameAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(grsPersonalName.getEFFECTIVESTARTDATE()));
                personNameAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(grsPersonalName.getEFFECTIVEENDDATE()));
                personNameAttribute.setEndReasonCode(grsPersonalName.getENDREASONCODE());
                personNameAttribute.setSource(grsPersonalName.getDATAOWNERCODE());
                personNameAttributes.add(personNameAttribute);
            }

        }
    }
    
    private static void setOrganizationNames(ProviderAttribute provider, PRSPROVIDER grsProvider) {
        List<OrganizationNameAttribute> organizationNameAttributes = new ArrayList<>();
        provider.setOrganizationNames(organizationNameAttributes);
        for (GRSORGANIZATIONNAME orgname : grsProvider.getGRSORGANIZATIONNAME()) {
            OrganizationNameAttribute organizationNameAttribute = new OrganizationNameAttribute();
            organizationNameAttribute.setUncodedType(orgname.getNAMETYPECODE());
            organizationNameAttribute.setPreferred(convertToBoolean(orgname.getPNAMEPREFERREDFLAG()));
            organizationNameAttribute.setName(orgname.getORGNZTNNAMETXT());
            organizationNameAttribute.setLongName(orgname.getORGNZTNLONGNAMETXT());
            organizationNameAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(orgname.getEFFECTIVESTARTDATE()));
            organizationNameAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(orgname.getEFFECTIVEENDDATE()));
            organizationNameAttribute.setEndReasonCode(orgname.getENDREASONCODE());
            organizationNameAttribute.setSource(orgname.getDATAOWNERCODE());
            organizationNameAttributes.add(organizationNameAttribute);
        }
    }

    public static void setAddresses(PRSPROVIDER grsProvider, ProviderAttribute provider) {
        List<GRSADDRESS> grsAddressList = grsProvider.getGRSADDRESS();
        if (!CollectionUtils.isEmpty(grsAddressList)) {
            List<AddressAttribute> addressAttributes = new ArrayList<>();
            provider.setAddresses(addressAttributes);

            for (GRSADDRESS grsAddress : grsAddressList) {
                AddressAttribute addressAttribute = new AddressAttribute();

                addressAttribute.setCommunicationPurposeCode(grsAddress.getCMNCTNPRPSTYPCD());
                addressAttribute.setUncodedType(grsAddress.getADDRESSTYPECODE());
                addressAttribute.setCity(grsAddress.getCITYTXT());
                addressAttribute.setProvince(grsAddress.getPROVINCEORSTATETXT());
                addressAttribute.setPostalCode(grsAddress.getPOSTALCODEORZIPTXT());
                addressAttribute.setCountry(grsAddress.getCOUNTRYCODE());
                addressAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(grsAddress.getEFFECTIVESTARTDATE()));
                addressAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(grsAddress.getEFFECTIVEENDDATE()));
                addressAttribute.setEndReasonCode(grsAddress.getENDREASONCODE());
                addressAttribute.setSource(grsAddress.getDATAOWNERCODE());

                List<String> streetAddressLines = addressAttribute.getStreetAddressLines();
                streetAddressLines.add(grsAddress.getADDRESSLINE1TXT());
                streetAddressLines.add(grsAddress.getADDRESSLINE2TXT());
                streetAddressLines.add(grsAddress.getADDRESSLINE3TXT());
                streetAddressLines.add(grsAddress.getADDRESSLINE4TXT());

                addressAttributes.add(addressAttribute);
            }
        }
    }

    public static void setPhones(PRSPROVIDER grsProvider, ProviderAttribute provider) {
        List<GRSTELEPHONE> grsPhoneList = grsProvider.getGRSTELEPHONE();
        if (!CollectionUtils.isEmpty(grsPhoneList)) {
            List<PhoneAttribute> phoneAttributes = new ArrayList<>();
            provider.setPhones(phoneAttributes);

            for (GRSTELEPHONE grsPhone : grsPhoneList) {
                PhoneAttribute phoneAttribute = new PhoneAttribute();

                phoneAttribute.setCommunicationPurposeCode(grsPhone.getCMNCTNPRPSTYPCD());
                phoneAttribute.setUncodedType(grsPhone.getTLCMNCTNNMBRTYPCD());
                phoneAttribute.setAreaCode(grsPhone.getAREACODENUM());
                phoneAttribute.setNumber(grsPhone.getTELECOMMUNICATIONNMBRNUM());
                phoneAttribute.setExtension(grsPhone.getEXTENSIONNUM());
                phoneAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(grsPhone.getEFFECTIVESTARTDATE()));
                phoneAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(grsPhone.getEFFECTIVEENDDATE()));
                phoneAttribute.setEndReasonCode(grsPhone.getENDREASONCODE());
                phoneAttribute.setSource(grsPhone.getDATAOWNERCODE());

                phoneAttributes.add(phoneAttribute);
            }
        }
    }

    public static void setElectronicAddresses(PRSPROVIDER grsProvider, ProviderAttribute provider) {
        List<GRSELECTRONICADDRESS> grsElectronicAddressList = grsProvider.getGRSELECTRONICADDRESS();
        if (!CollectionUtils.isEmpty(grsElectronicAddressList)) {
            List<EmailAttribute> emailAttributes = new ArrayList<>();
            provider.setEmails(emailAttributes);

            for (GRSELECTRONICADDRESS grsElectronicAddress : grsElectronicAddressList) {
                EmailAttribute emailAttribute = new EmailAttribute();

                emailAttribute.setCommunicationPurposeCode(grsElectronicAddress.getCMNCTNPRPSTYPCD());
                emailAttribute.setUncodedType(grsElectronicAddress.getELECTRONICADDRESSTYPECODE());
                emailAttribute.setAddress(grsElectronicAddress.getELECTRONICADDRESSTXT());
                emailAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(grsElectronicAddress.getEFFECTIVESTARTDATE()));
                emailAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(grsElectronicAddress.getEFFECTIVEENDDATE()));
                emailAttribute.setEndReasonCode(grsElectronicAddress.getENDREASONCODE());
                emailAttribute.setSource(grsElectronicAddress.getDATAOWNERCODE());

                emailAttributes.add(emailAttribute);
            }

        }
    }

    public static void setConfidentiality(PRSPROVIDER grsProvider, ProviderAttribute providerAttribute) {
        for (PRSCONFIDENTIALITYINDICATOR ind : grsProvider.getPRSCONFIDENTIALITYINDICATOR()) {
            ConfidentialityMaskAttribute ma = new ConfidentialityMaskAttribute();
            ma.setMasked("Y".equals(ind.getCONFIDENTIALFLAG()));
            ma.setStartDate(ConverterUtils.convertFromPLRStringToDate(ind.getEFFECTIVESTARTDATE()));
            ma.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(ind.getEFFECTIVEENDDATE()));
            ma.setEndReasonCode(ind.getENDREASONCODE());
            ma.setSource(ind.getDATAOWNERCODE());
            
            lazyInitDemographicDetails(providerAttribute);
            providerAttribute.getDemographicDetails().get(0).getConfidentialityMask().add(ma);
        }
    }

    // Please Note that the empty demographic block created from here will be removed later in PLREntityToDtoTypeConverter::setDemographicDetails
    private static void lazyInitDemographicDetails(ProviderAttribute providerAttribute) {
        if (providerAttribute.getDemographicDetails() == null) {
            providerAttribute.setDemographicDetails(new ArrayList<Person>());
        }
        if (providerAttribute.getDemographicDetails().isEmpty()) {
            providerAttribute.getDemographicDetails().add(new Person());
        }
        if (providerAttribute.getDemographicDetails().get(0).getConfidentialityMask() == null) {
            providerAttribute.getDemographicDetails().get(0).setConfidentialityMask(new ArrayList<ConfidentialityMaskAttribute>());
        }
    }
    
    public static void setConditions(PRSPROVIDER grsProvider, ProviderAttribute provider) {
        List<PRSCONDITION> prsConditionList = grsProvider.getPRSCONDITION();
        if (!CollectionUtils.isEmpty(prsConditionList)) {
            List<ConditionAttribute> conditionAttributes = new ArrayList<>();
            provider.setConditions(conditionAttributes);

            for (PRSCONDITION prsCondition : prsConditionList) {
                ConditionAttribute conditionAttribute = new ConditionAttribute();

                conditionAttribute.setId(prsCondition.getCONDITIONCHID());
                conditionAttribute.setUncodedType(prsCondition.getCONDITIONTYPECODE());
                conditionAttribute.setRestricted(convertToBoolean(prsCondition.getRESTRICTIONFLAG()));
                conditionAttribute.setRestrictionExplanationText(prsCondition.getRESTRICTIONEXPLANATIONTXT());

                conditionAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(prsCondition.getEFFECTIVESTARTDATE()));
                conditionAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(prsCondition.getEFFECTIVEENDDATE()));
                conditionAttribute.setEndReasonCode(prsCondition.getENDREASONCODE());
                conditionAttribute.setSource(prsCondition.getDATAOWNERCODE());

                conditionAttributes.add(conditionAttribute);
            }
        }
    }

    public static void setDemographicDetails(PRSPROVIDER grsProvider, ProviderAttribute provider) {
        List<PRSDEMOGRAPHICDETAIL> prsDemographicDetailsList = grsProvider.getPRSDEMOGRAPHICDETAIL();
        if (!CollectionUtils.isEmpty(prsDemographicDetailsList)) {
            List<Person> demographicDetails = new ArrayList<>();
            provider.setDemographicDetails(demographicDetails);

            for (PRSDEMOGRAPHICDETAIL prsDemographicDetail : prsDemographicDetailsList) {
                Person personAttribute = new Person();

                personAttribute.setBirthDate(new DateAttribute(ConverterUtils.convertFromPLRStringToDate(prsDemographicDetail.getDATEOFBIRTHDATE())));
                personAttribute.setDeathDate(new DateAttribute(ConverterUtils.convertFromPLRStringToDate(prsDemographicDetail.getDATEOFDEATHDATE())));
                personAttribute.setBirthCountryCode(prsDemographicDetail.getCOUNTRYOFBIRTHCODE());
                personAttribute.setBirthProvinceCode(prsDemographicDetail.getPROVORSTATEOFBIRTHTXT());
                personAttribute.setGender(new GenderAttribute(prsDemographicDetail.getGENDERCODE()));

                personAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(prsDemographicDetail.getEFFECTIVESTARTDATE()));
                personAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(prsDemographicDetail.getEFFECTIVEENDDATE()));
                personAttribute.setEndReasonCode(prsDemographicDetail.getENDREASONCODE());
                personAttribute.setSource(prsDemographicDetail.getDATAOWNERCODE());

                demographicDetails.add(personAttribute);

            }
        }
    }

    public static void setDisciplinaryActions(PRSPROVIDER grsProvider, ProviderAttribute provider) {
        List<PRSDISCIPLINARYACTION> prsDisciplinaryActionsList = grsProvider.getPRSDISCIPLINARYACTION();
        if (!CollectionUtils.isEmpty(prsDisciplinaryActionsList)) {
            List<DisciplinaryActionAttribute> disciplinaryActions = new ArrayList<>();
            provider.setDisciplinaryActions(disciplinaryActions);

            for (PRSDISCIPLINARYACTION prsDisciplinaryAction : prsDisciplinaryActionsList) {
                DisciplinaryActionAttribute disciplinaryActionAttribute = new DisciplinaryActionAttribute();

                disciplinaryActionAttribute.setIdentifier(prsDisciplinaryAction.getDISCIPLINARYACTIONCHID());
                disciplinaryActionAttribute.setDisplay(convertToBoolean(prsDisciplinaryAction.getDISPLAYFLAG()));
                disciplinaryActionAttribute.setDescription(prsDisciplinaryAction.getDESCRIPTIONTXT());
                disciplinaryActionAttribute.setArchiveDate(ConverterUtils.convertFromPLRStringToDate(prsDisciplinaryAction.getARCHIVEDATE()));

                disciplinaryActionAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(prsDisciplinaryAction.getEFFECTIVESTARTDATE()));
                disciplinaryActionAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(prsDisciplinaryAction.getEFFECTIVEENDDATE()));
                disciplinaryActionAttribute.setEndReasonCode(prsDisciplinaryAction.getENDREASONCODE());
                disciplinaryActionAttribute.setSource(prsDisciplinaryAction.getDATAOWNERCODE());

                disciplinaryActions.add(disciplinaryActionAttribute);

            }
        }
    }

    public static void setInformationRoutes(PRSPROVIDER grsProvider, ProviderAttribute provider) {
        List<PRSINFORMATIONROUTE> prsInformationRoutes = grsProvider.getPRSINFORMATIONROUTE();
        if (!CollectionUtils.isEmpty(prsInformationRoutes)) {
            List<InformationRouteAttribute> informationRouteAttributes = new ArrayList<>();
            provider.setInformationRoutes(informationRouteAttributes);

            for (PRSINFORMATIONROUTE prsInformationRoute : prsInformationRoutes) {
                InformationRouteAttribute informationRouteAttribute = new InformationRouteAttribute();

                informationRouteAttribute.setDocumentTypeCode(prsInformationRoute.getDOCUMENTTYPECODE());
                informationRouteAttribute.setMechanismTypeCode(prsInformationRoute.getMECHANISMTYPECODE());
                informationRouteAttribute.setDefaulted(convertToBoolean(prsInformationRoute.getDEFAULTFLAG()));
                
                
                final String addressTypeCode = prsInformationRoute.getADDRESSTYPECODE();
                final String phoneTypeCode = prsInformationRoute.getTLCMNCTNNMBRTYPCD();
                final String emailTypeCode = prsInformationRoute.getELECTRONICADDRESSTYPECODE();
                
                if (!StringUtils.isEmpty(addressTypeCode)) {
                    AddressAttribute addressAttribute = new AddressAttribute();
                    addressAttribute.setUncodedType(addressTypeCode);
                    informationRouteAttribute.setAddressAttribute(addressAttribute);
                }
                
                if (!StringUtils.isEmpty(phoneTypeCode)) {
                    PhoneAttribute phoneAttribute = new PhoneAttribute();
                    phoneAttribute.setUncodedType(phoneTypeCode);
                    informationRouteAttribute.setPhoneAttribute(phoneAttribute);
                }
                
                if (!StringUtils.isEmpty(emailTypeCode)) {
                    EmailAttribute emailAttribute = new EmailAttribute();
                    emailAttribute.setUncodedType(emailTypeCode);
                    informationRouteAttribute.setEmailAttribute(emailAttribute);
                }
                
                informationRouteAttribute.setCommunicationPurposeCode(prsInformationRoute.getCMNCTNPRPSTYPCD());
                informationRouteAttribute.setCommunicationDataOwnerCode(prsInformationRoute.getCMNCTNDATAOWNERCODE());
                
                informationRouteAttribute.setWorkLocationIdentifier(stringToLong(prsInformationRoute.getWORKLOCATIONCHID()));
                informationRouteAttribute.setWorkLocationOwnerCode(prsInformationRoute.getWORKLOCATIONDATAOWNERCODE());
                informationRouteAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(prsInformationRoute.getEFFECTIVESTARTDATE()));
                informationRouteAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(prsInformationRoute.getEFFECTIVEENDDATE()));
                informationRouteAttribute.setEndReasonCode(prsInformationRoute.getENDREASONCODE());
                informationRouteAttribute.setSource(prsInformationRoute.getDATAOWNERCODE());

                informationRouteAttributes.add(informationRouteAttribute);

            }
        }
    }

    public static void setNotes(PRSPROVIDER grsProvider, ProviderAttribute provider) {
        List<PRSNOTE> prsNotes = grsProvider.getPRSNOTE();
        if (!CollectionUtils.isEmpty(prsNotes)) {
            List<NoteAttribute> noteAttributeList = new ArrayList<>();
            provider.setNotes(noteAttributeList);

            for (PRSNOTE prsNote : prsNotes) {
                NoteAttribute noteAttribute = new NoteAttribute();

                noteAttribute.setIdentifier(prsNote.getNOTECHID());
                noteAttribute.setText(prsNote.getNOTETEXT());

                noteAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(prsNote.getEFFECTIVESTARTDATE()));
                noteAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(prsNote.getEFFECTIVEENDDATE()));
                noteAttribute.setEndReasonCode(prsNote.getENDREASONCODE());
                noteAttribute.setSource(prsNote.getDATAOWNERCODE());

                noteAttributeList.add(noteAttribute);
            }
        }
    }

    public static void setRegistryUserRelationships(PRSPROVIDER grsProvider, ProviderAttribute provider) {
        List<PRSPROVRURELN> prsRegistryUserRelationships = grsProvider.getPRSPROVRURELN();
        if (!CollectionUtils.isEmpty(prsRegistryUserRelationships)) {
            List<ProviderRelationshipAttribute> providerRelationshipAttributes = new ArrayList<>();
            provider.setRegistryUserRelationships(providerRelationshipAttributes);

            for (PRSPROVRURELN prsRegistryUserRelationship : prsRegistryUserRelationships) {
                ProviderRelationshipAttribute providerRelationshipAttribute = new ProviderRelationshipAttribute();
                providerRelationshipAttribute.setRelationshipWithProviderType(prsRegistryUserRelationship.getRURELATIONSHIPTYPECODE());
                providerRelationshipAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(prsRegistryUserRelationship.getEFFECTIVESTARTDATE()));
                providerRelationshipAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(prsRegistryUserRelationship.getEFFECTIVEENDDATE()));
                providerRelationshipAttribute.setEndReasonCode(prsRegistryUserRelationship.getENDREASONCODE());
                providerRelationshipAttribute.setSource(prsRegistryUserRelationship.getDATAOWNERCODE());
                
                List<GRSRELATEDRU> grsRelatedRus = prsRegistryUserRelationship.getGRSRELATEDRU();
                if (!grsRelatedRus.isEmpty()) {
                    // Highlander -- there can only be one!
                    GRSRELATEDRU grsRelatedRu = grsRelatedRus.get(0);
                    providerRelationshipAttribute.setRelationshipWithProviderCollegeId(grsRelatedRu.getREGISTRYUSERORGCHID());
                    providerRelationshipAttribute.setRelationshipTypeCode(grsRelatedRu.getRUTYPECODE());
                }
                
                providerRelationshipAttributes.add(providerRelationshipAttribute);
            }
        }
    }

    public static void setCredentials(PRSPROVIDER grsProvider, ProviderAttribute provider) {
        List<PRSPROVIDERCREDENTIAL> prsCredentials = grsProvider.getPRSPROVIDERCREDENTIAL();
        if (!CollectionUtils.isEmpty(prsCredentials)) {
            List<CredentialAttribute> credentialAttributeList = new ArrayList<>();
            provider.setCredentials(credentialAttributeList);

            for (PRSPROVIDERCREDENTIAL prsCredential : prsCredentials) {
                CredentialAttribute credentialAttribute = new CredentialAttribute();

                credentialAttribute.setUncodedType(prsCredential.getPROVIDERCREDENTIALTYPECODE());
                credentialAttribute.setDesignation(prsCredential.getCREDENTIALDESIGNATIONTXT());
                credentialAttribute.setRegistrationNumber(prsCredential.getREGISTRATIONNUMBERTXT());
                credentialAttribute.setGrantingInstitution(prsCredential.getCREDENTIALGRANTINGINSTTXT());
                credentialAttribute.setInstitutionCity(prsCredential.getINSTITUTIONCITYTXT());
                credentialAttribute.setInstitutionProvStateCode(prsCredential.getINSTITUTIONPROVINCECODE());
                credentialAttribute.setInstitutionCountryCode(prsCredential.getINSTITUTIONCOUNTRYCODE());
                credentialAttribute.setEquivalent(convertToBoolean(prsCredential.getEQUIVALENCYFLAG()));
                credentialAttribute.setYearIssued(prsCredential.getYEARCREDENTIALISSUEDTXT());

                credentialAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(prsCredential.getEFFECTIVESTARTDATE()));
                credentialAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(prsCredential.getEFFECTIVEENDDATE()));
                credentialAttribute.setEndReasonCode(prsCredential.getENDREASONCODE());
                credentialAttribute.setSource(prsCredential.getDATAOWNERCODE());

                credentialAttributeList.add(credentialAttribute);
            }
        }
    }

    public static void setExpertises(PRSPROVIDER grsProvider, ProviderAttribute provider) {
        List<PRSPROVIDEREXPERTISE> prsProviderExpertise = grsProvider.getPRSPROVIDEREXPERTISE();
        if (!CollectionUtils.isEmpty(prsProviderExpertise)) {
            List<ExpertiseAttribute> expertiseAttributeList = new ArrayList<>();
            provider.setExpertises(expertiseAttributeList);

            for (PRSPROVIDEREXPERTISE prsExpertise : prsProviderExpertise) {
                ExpertiseAttribute expertiseAttribute = new ExpertiseAttribute();

                expertiseAttribute.setRoleCode(prsExpertise.getPROVEXPERTISEROLETYPECODE());
                expertiseAttribute.setUncodedType(prsExpertise.getPROVIDEREXPERTISETYPECODE());
                expertiseAttribute.setSourceCode(prsExpertise.getORIGINALSOURCEPROVIDERCODE());

                expertiseAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(prsExpertise.getEFFECTIVESTARTDATE()));
                expertiseAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(prsExpertise.getEFFECTIVEENDDATE()));
                expertiseAttribute.setEndReasonCode(prsExpertise.getENDREASONCODE());
                expertiseAttribute.setSource(prsExpertise.getDATAOWNERCODE());

                expertiseAttributeList.add(expertiseAttribute);
            }
        }
    }

    public static void setStatuses(PRSPROVIDER grsProvider, ProviderAttribute provider) {
        List<PRSSTATUS> prsStatuses = grsProvider.getPRSSTATUS();
        if (!CollectionUtils.isEmpty(prsStatuses)) {
            List<StatusAttribute> statusAttributeList = new ArrayList<>();
            provider.setStatuses(statusAttributeList);

            for (PRSSTATUS prsStatus : prsStatuses) {
                StatusAttribute statusAttribute = new StatusAttribute();

                statusAttribute.setUncodedType(prsStatus.getSTATUSTYPECODE());
                statusAttribute.setClassCode(prsStatus.getSTATUSCLASSCODE());
                statusAttribute.setReasonCode(prsStatus.getSTATUSREASONCODE());

                statusAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(prsStatus.getEFFECTIVESTARTDATE()));
                statusAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(prsStatus.getEFFECTIVEENDDATE()));
                statusAttribute.setEndReasonCode(prsStatus.getENDREASONCODE());
                statusAttribute.setSource(prsStatus.getDATAOWNERCODE());

                statusAttributeList.add(statusAttribute);
            }
        }
    }

    public static void setWorkLocations(PRSPROVIDER grsProvider, ProviderAttribute provider) {
        List<PRSWORKLOCATION> prsWorkLocations = grsProvider.getPRSWORKLOCATION();
        if (!CollectionUtils.isEmpty(prsWorkLocations)) {
            List<WorkLocationAttribute> workLocationAttributeList = new ArrayList<>();
            provider.setWorkLocations(workLocationAttributeList);

            for (PRSWORKLOCATION prsWorkLocation : prsWorkLocations) {
                WorkLocationAttribute workLocationAttribute = new WorkLocationAttribute();

                workLocationAttribute.setIdentifier(prsWorkLocation.getWORKLOCATIONCHID());
                workLocationAttribute.setDataOwnerCode(prsWorkLocation.getDATAOWNERCODE());

                setWorkLocationDetails(prsWorkLocation, workLocationAttribute);
                setWorkLocationAddresses(prsWorkLocation, workLocationAttribute);
                setWorkLocationElectronicAddresses(prsWorkLocation, workLocationAttribute);
                setWorkLocationPhones(prsWorkLocation, workLocationAttribute);
                setWorkLocationInformationRoutes(prsWorkLocation, workLocationAttribute);

                workLocationAttributeList.add(workLocationAttribute);
            }
        }
    }

    private static void setWorkLocationDetails(PRSWORKLOCATION prsWorkLocation, WorkLocationAttribute workLocationAttribute) {
        List<PRSWORKLOCATIONDETAIL> prsWorkLocationDetails = prsWorkLocation.getPRSWORKLOCATIONDETAIL();
        if (!CollectionUtils.isEmpty(prsWorkLocationDetails)) {
            List<WorkLocationDetailsAttribute> workLocationDetailsAttributeList = new ArrayList<>();
            workLocationAttribute.setDetails(workLocationDetailsAttributeList);

            for (PRSWORKLOCATIONDETAIL prsWorkLocationDetail : prsWorkLocationDetails) {
                WorkLocationDetailsAttribute workLocationDetailsAttribute = new WorkLocationDetailsAttribute();

                workLocationDetailsAttribute.setName(prsWorkLocationDetail.getWORKLOCATIONNAMETXT());
                workLocationDetailsAttribute.setAdditionalAddresseeInfo(prsWorkLocationDetail.getADDITIONALADDRESSEEINFOTXT());
                workLocationDetailsAttribute.setDefaulted(convertToBoolean(prsWorkLocationDetail.getDEFAULTFLAG()));
                workLocationDetailsAttribute.setTypeCode(prsWorkLocationDetail.getWORKLOCATIONTYPECODE());

                workLocationDetailsAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(prsWorkLocationDetail.getEFFECTIVESTARTDATE()));
                workLocationDetailsAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(prsWorkLocationDetail.getEFFECTIVEENDDATE()));
                workLocationDetailsAttribute.setEndReasonCode(prsWorkLocationDetail.getENDREASONCODE());

                workLocationDetailsAttributeList.add(workLocationDetailsAttribute);
            }
        }
    }

    private static void setWorkLocationAddresses(PRSWORKLOCATION prsWorkLocation, WorkLocationAttribute workLocationAttribute) {
        List<PRSWORKLOCATIONADDRESS> prsWorkLocationAddresss = prsWorkLocation.getPRSWORKLOCATIONADDRESS();
        if (!CollectionUtils.isEmpty(prsWorkLocationAddresss)) {
            List<AddressAttribute> addressAttributes = new ArrayList<>();
            workLocationAttribute.setAddresses(addressAttributes);

            for (PRSWORKLOCATIONADDRESS prsWorkLocationAddress : prsWorkLocationAddresss) {
                AddressAttribute addressAttribute = new AddressAttribute();

                addressAttribute.setCommunicationPurposeCode(prsWorkLocationAddress.getCMNCTNPRPSTYPCD());
                addressAttribute.setUncodedType(prsWorkLocationAddress.getADDRESSTYPECODE());
                addressAttribute.setCity(prsWorkLocationAddress.getCITYTXT());
                addressAttribute.setProvince(prsWorkLocationAddress.getPROVINCEORSTATETXT());
                addressAttribute.setPostalCode(prsWorkLocationAddress.getPOSTALCODEORZIPTXT());
                addressAttribute.setCountry(prsWorkLocationAddress.getCOUNTRYCODE());
                addressAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(prsWorkLocationAddress.getEFFECTIVESTARTDATE()));
                addressAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(prsWorkLocationAddress.getEFFECTIVEENDDATE()));
                addressAttribute.setEndReasonCode(prsWorkLocationAddress.getENDREASONCODE());
                addressAttribute.setSource(prsWorkLocationAddress.getDATAOWNERCODE());

                List<String> streetAddressLines = addressAttribute.getStreetAddressLines();
                streetAddressLines.add(prsWorkLocationAddress.getADDRESSLINE1TXT());
                streetAddressLines.add(prsWorkLocationAddress.getADDRESSLINE2TXT());
                streetAddressLines.add(prsWorkLocationAddress.getADDRESSLINE3TXT());
                streetAddressLines.add(prsWorkLocationAddress.getADDRESSLINE4TXT());

                addressAttributes.add(addressAttribute);
            }
        }
    }

    private static void setWorkLocationElectronicAddresses(PRSWORKLOCATION prsWorkLocation, WorkLocationAttribute workLocationAttribute) {
        List<PRSWORKLOCATIONELECTRONICADDRESS> prsWorkLocationElectronicAddresses = prsWorkLocation.getPRSWORKLOCATIONELECTRONICADDRESS();
        if (!CollectionUtils.isEmpty(prsWorkLocationElectronicAddresses)) {
            List<EmailAttribute> emailAttributes = new ArrayList<>();
            workLocationAttribute.setEmailAddresses(emailAttributes);

            for (PRSWORKLOCATIONELECTRONICADDRESS prsWorkLocationElectronicAddress : prsWorkLocationElectronicAddresses) {
                EmailAttribute emailAttribute = new EmailAttribute();

                emailAttribute.setCommunicationPurposeCode(prsWorkLocationElectronicAddress.getCMNCTNPRPSTYPCD());
                emailAttribute.setUncodedType(prsWorkLocationElectronicAddress.getELECTRONICADDRESSTYPECODE());
                emailAttribute.setAddress(prsWorkLocationElectronicAddress.getELECTRONICADDRESSTXT());
                emailAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(prsWorkLocationElectronicAddress.getEFFECTIVESTARTDATE()));
                emailAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(prsWorkLocationElectronicAddress.getEFFECTIVEENDDATE()));
                emailAttribute.setEndReasonCode(prsWorkLocationElectronicAddress.getENDREASONCODE());
                emailAttribute.setSource(prsWorkLocationElectronicAddress.getDATAOWNERCODE());

                emailAttributes.add(emailAttribute);
            }
        }
    }

    private static void setWorkLocationPhones(PRSWORKLOCATION prsWorkLocation, WorkLocationAttribute workLocationAttribute) {
        List<PRSWORKLOCATIONTELEPHONE> prsWorkLocationPhoneList = prsWorkLocation.getPRSWORKLOCATIONTELEPHONE();
        if (!CollectionUtils.isEmpty(prsWorkLocationPhoneList)) {
            List<PhoneAttribute> phoneAttributes = new ArrayList<>();
            workLocationAttribute.setPhoneNumbers(phoneAttributes);

            for (PRSWORKLOCATIONTELEPHONE prsWorkLocationPhone : prsWorkLocationPhoneList) {
                PhoneAttribute phoneAttribute = new PhoneAttribute();

                phoneAttribute.setCommunicationPurposeCode(prsWorkLocationPhone.getCMNCTNPRPSTYPCD());
                phoneAttribute.setUncodedType(prsWorkLocationPhone.getTLCMNCTNNMBRTYPCD());
                phoneAttribute.setAreaCode(prsWorkLocationPhone.getAREACODENUM());
                phoneAttribute.setNumber(prsWorkLocationPhone.getTELECOMMUNICATIONNMBRNUM());
                phoneAttribute.setExtension(prsWorkLocationPhone.getEXTENSIONNUM());
                phoneAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(prsWorkLocationPhone.getEFFECTIVESTARTDATE()));
                phoneAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(prsWorkLocationPhone.getEFFECTIVEENDDATE()));
                phoneAttribute.setEndReasonCode(prsWorkLocationPhone.getENDREASONCODE());
                phoneAttribute.setSource(prsWorkLocationPhone.getDATAOWNERCODE());

                phoneAttributes.add(phoneAttribute);
            }
        }
    }

    private static void setWorkLocationInformationRoutes(PRSWORKLOCATION prsWorkLocation, WorkLocationAttribute workLocationAttribute) {
        List<PRSWORKLOCATIONINFORMATIONROUTE> prsWorkLocationInformationRoutes = prsWorkLocation.getPRSWORKLOCATIONINFORMATIONROUTE();
        if (!CollectionUtils.isEmpty(prsWorkLocationInformationRoutes)) {
            List<InformationRouteAttribute> informationRouteAttributes = new ArrayList<>();
            workLocationAttribute.setInformationRoutes(informationRouteAttributes);

            for (PRSWORKLOCATIONINFORMATIONROUTE prsInformationRoute : prsWorkLocationInformationRoutes) {
                InformationRouteAttribute informationRouteAttribute = new InformationRouteAttribute();

                informationRouteAttribute.setDocumentTypeCode(prsInformationRoute.getDOCUMENTTYPECODE());
                informationRouteAttribute.setMechanismTypeCode(prsInformationRoute.getMECHANISMTYPECODE());
                informationRouteAttribute.setDefaulted(convertToBoolean(prsInformationRoute.getDEFAULTFLAG()));
                
                
                final String addressTypeCode = prsInformationRoute.getADDRESSTYPECODE();
                final String phoneTypeCode = prsInformationRoute.getTLCMNCTNNMBRTYPCD();
                final String emailTypeCode = prsInformationRoute.getELECTRONICADDRESSTYPECODE();
                
                if (!StringUtils.isEmpty(addressTypeCode)) {
                    AddressAttribute addressAttribute = new AddressAttribute();
                    addressAttribute.setUncodedType(addressTypeCode);
                    informationRouteAttribute.setAddressAttribute(addressAttribute);
                }
                
                if (!StringUtils.isEmpty(phoneTypeCode)) {
                    PhoneAttribute phoneAttribute = new PhoneAttribute();
                    phoneAttribute.setUncodedType(phoneTypeCode);
                    informationRouteAttribute.setPhoneAttribute(phoneAttribute);
                }
                
                if (!StringUtils.isEmpty(emailTypeCode)) {
                    EmailAttribute emailAttribute = new EmailAttribute();
                    emailAttribute.setUncodedType(emailTypeCode);
                    informationRouteAttribute.setEmailAttribute(emailAttribute);
                }
                
                informationRouteAttribute.setCommunicationPurposeCode(prsInformationRoute.getCMNCTNPRPSTYPCD());
                informationRouteAttribute.setCommunicationDataOwnerCode(prsInformationRoute.getCMNCTNDATAOWNERCODE());

                informationRouteAttribute.setWorkLocationIdentifier(stringToLong(prsInformationRoute.getWORKLOCATIONCHID()));
                informationRouteAttribute.setWorkLocationOwnerCode(prsInformationRoute.getWORKLOCATIONDATAOWNERCODE());

                informationRouteAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(prsInformationRoute.getEFFECTIVESTARTDATE()));
                informationRouteAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(prsInformationRoute.getEFFECTIVEENDDATE()));
                informationRouteAttribute.setEndReasonCode(prsInformationRoute.getENDREASONCODE());
                informationRouteAttribute.setSource(prsInformationRoute.getDATAOWNERCODE());

                informationRouteAttributes.add(informationRouteAttribute);
            }
        }
    }

    private static boolean convertToBoolean(String restrictionFlag) {
        return "Y".equals(restrictionFlag);
    }
    
    public static Long stringToLong(String longString) {
        if (StringUtils.isEmpty(longString)) {
            return null;
        } 
        
        return Long.valueOf(longString);
    }

    private static void setProviderRelationships(PRSPROVIDER grsProvider, ProviderAttribute provider) {
        List<PRSPROVIDERRELATIONSHIP> prsProviderRelationships = grsProvider.getPRSPROVIDERRELATIONSHIP();
        if (!CollectionUtils.isEmpty(prsProviderRelationships)) {
            List<ProviderRelationshipAttribute> providerRelationshipAttributes = new ArrayList<>();
            provider.setProviderRelationships(providerRelationshipAttributes);

            for (PRSPROVIDERRELATIONSHIP relationship : prsProviderRelationships) {
                ProviderRelationshipAttribute providerRelationshipAttribute = new ProviderRelationshipAttribute();
                
                providerRelationshipAttribute.setRelationshipTypeCode(relationship.getPROVRELATIONSHIPTYPECODE());
                providerRelationshipAttribute.setStartDate(ConverterUtils.convertFromPLRStringToDate(relationship.getEFFECTIVESTARTDATE()));
                providerRelationshipAttribute.setExpiryDate(ConverterUtils.convertFromPLRStringToDate(relationship.getEFFECTIVEENDDATE()));
                providerRelationshipAttribute.setEndReasonCode(relationship.getENDREASONCODE());
                providerRelationshipAttribute.setSource(relationship.getDATAOWNERCODE());
                
                if (!CollectionUtils.isEmpty(relationship.getGRSRELATEDIDENTIFIER())) {
                    GRSRELATEDIDENTIFIER rid = relationship.getGRSRELATEDIDENTIFIER().get(0);
                    providerRelationshipAttribute.setRelationshipWithProviderCollegeId(rid.getPROVIDERCHID());
                    providerRelationshipAttribute.setRelationshipWithProviderType(rid.getIDENTIFIERTYPECODE());
                }
 
                providerRelationshipAttributes.add(providerRelationshipAttribute);
            }
        }
    }

}
