/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir;

import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import ca.bc.gov.moh.hsa.plr.converter.facilitytofhir.SetAttributesCommon;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.*;
import java.util.Date;

/**
 *
 * @author dan.stepanov
 */
public class SetPractitionerAttributes extends SetAttributesCommon {

    public SetPractitionerAttributes(FHIRFactory theFactory) {
        super(theFactory);
    }

    public void setPractitionerBCAddress(Object practitioner, Object bcAddress) {
        factory.callMethod(practitioner, "addAddress", bcAddress);
    }

    public void setPractitionerBirthplaceAddress(Object practitioner, Object addressBirthplaceExt) {
        factory.callMethod(practitioner, "setBcBirthplaceExtension", addressBirthplaceExt);
    }

    public void setPractitionerId(Object practitioner, String practitionerId) {
        factory.callMethod(practitioner, "bc-practitioner", practitionerId);
    }

    public void setPractitionerNote(Object practitioner, Object note) {
        factory.callMethod(practitioner, "addBcNoteExtension", note);
    }

    public void setPractitionerTelecom(Object practitioner, Object telecom) {
        factory.callMethod(practitioner, "addTelecom", telecom);
    }

    public void setPractitionerBirthTime(Object practitioner, Date dob) {
        if (dob != null) {

            // add new dateType
            Object dateType = factory.newDateType();
            factory.callMethod(practitioner, "setBirthDateElement", dateType);
            Object dateTimeType = factory.newDateTimeType(dob);

            // Create an extension and add it to the dateType/_birthdate 
           factory.getSetExtensionAttributes().addExtension(dateType, BC_PROVIDER_BIRTHTIME_EXTENSION_URL, dateTimeType, null);
        }
    }

    public void setPractitionerDeathDate(Object practitioner, Date deathDate) {
        if (deathDate != null) {
            // add new dateTypeDeath  
            Object dateTypeDeath = factory.newDateType(deathDate);
            factory.callMethod(practitioner, "setBcDeathDateExtension", dateTypeDeath);
        }
    }

    public void setPractitionerGender(Object practitioner, Object gender) {
        factory.callMethod(practitioner, "setGender", gender);
    }

    public void setPractitionerERCOwner(Object practitioner, Object ercOwnerExtension) {
        factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().setERCOwner(practitioner, ercOwnerExtension);
    }

    public void addPractitionerBCPeriod(Object practitioner, Date start, Date end) {
        factory.getSetPeriodAttributes().addPeriod(practitioner, start, end);
    }

    public void setPractitionerLicenseStatus(Object practitioner, Object licenseStatus) {
        factory.callMethod(practitioner, "addBcLicenseStatusExtension", licenseStatus);
    }

    public void setPractitionerHumanName(Object practitioner, Object bcHumanName) {
        factory.callMethod(practitioner, "addName", bcHumanName);
    }

    public void addPractitionerBCIdentifier(Object practitioner, Object bcIdentifier) {
        factory.callMethod(practitioner, "addIdentifier", bcIdentifier);
    }

    public void setPractitionerCommunication(Object practitioner, Object communication) {
        factory.callMethod(practitioner, "addCommunication", communication);
    }

    public void setPractitionerQualificationOrganization(Object practitioner, Object qualification) {
        factory.callMethod(practitioner, "addQualificationOrganization", qualification);
    }

    public void setPractitionerQualificationIssuer(Object practitioner, Object qualificationIssuer) {
        factory.callMethod(practitioner, "addQualificationIssuer", qualificationIssuer);
    }
    
    public void setPractitionerQualification(Object practitioner, Object qualificationComponent) {
        factory.callMethod(practitioner, "addQualification", qualificationComponent);
    }

    public void setPractitionerActiveStatus(Object practitioner, boolean activeStatus) {
        // add new booleanType activeStatus  
        Object booleanActiveStatus = factory.newBooleanType(activeStatus);
        factory.callMethod(practitioner, "setActiveElement", booleanActiveStatus);
    }

    public void setPractitionerContainedResource(Object practitioner, Object containedResource) {
        factory.callMethod(practitioner, "setContained", containedResource);
    }
    
    public void setPractitionerDisciplinaryAction(Object practitioner, Object disciplinaryAction) {
        factory.callMethod(practitioner, "addBcDisciplinaryActionExtension", disciplinaryAction);
    }

    void setPractitionerCondition(Object practitioner, Object bcConditionExtension) {
        factory.callMethod(practitioner, "addBcConditionExtension", bcConditionExtension);
    }

    void setPractitionerConfidentiality(Object practitioner, Object bcConfidentialityExtension) {
        factory.callMethod(practitioner, "addBcConfidentialityExtension", bcConfidentialityExtension);
    }

    void setPractitionerRelationship(Object practitioner, Object bcPractRelationshipExtension) {
        factory.callMethod(practitioner, "addBcPractitionerRelationshipExtension", bcPractRelationshipExtension);
    }

}
