/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.dtotohl7;

import ca.bc.gov.moh.hsa.entity.CommunicationFunction;
import ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils;
import ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser;
import ca.bc.gov.moh.hsa.plr.entity.transaction.BatchResponseEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.MaintainProviderResponseEntity;
import java.nio.charset.StandardCharsets;
import java.text.ParseException;
import java.util.Date;
import java.util.List;
import java.util.zip.GZIPOutputStream;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.parsers.ParserConfigurationException;
import org.apache.commons.codec.binary.Base64OutputStream;
import org.apache.commons.lang.StringUtils;
import org.hl7.v3.m4_0.CE;
import org.hl7.v3.m4_0.COCTMT090100AssignedPerson;
import org.hl7.v3.m4_0.COCTMT150000Organization;
import org.hl7.v3.m4_0.CS;
import org.hl7.v3.m4_0.EN;
import org.hl7.v3.m4_0.II;
import org.hl7.v3.m4_0.IVLTS;
import org.hl7.v3.m4_0.IVXBTS;
import org.hl7.v3.m4_0.MCCIMT000300Agent;
import org.hl7.v3.m4_0.MCCIMT000300Device;
import org.hl7.v3.m4_0.MCCIMT000300Organization;
import org.hl7.v3.m4_0.MCCIMT000300Receiver;
import org.hl7.v3.m4_0.MCCIMT000300Sender;
import org.hl7.v3.m4_0.ON;
import org.hl7.v3.m4_0.ObjectFactory;
import org.hl7.v3.m4_0.PRPMIN303011MCCIMT000300Message;
import org.hl7.v3.m4_0.QUMTIN200002MCCIMT000300Message;
import org.hl7.v3.m4_0.QUMTIN200002QUQIMT120001ControlActProcess;
import org.hl7.v3.m4_0.QUQIMT120001AuthorOrPerformer;
import org.hl7.v3.m4_0.TEL;
import org.hl7.v3.m4_0.TS;
import org.springframework.util.CollectionUtils;
import org.w3c.dom.Document;
import org.apache.commons.io.output.ByteArrayOutputStream;
import org.hl7.v3.m4_0.BinaryDataEncoding;
import org.hl7.v3.m4_0.ED;
import org.hl7.v3.m4_0.PRPMIN301011MCCIMT000300Message;
import org.hl7.v3.m4_0.QUMTIN200002QUQIMT120001Subject2;
import org.hl7.v3.m4_0.QUMTMT200002DocumentEvent;

/**
 *
 * @author conrad.gustafson
 */
public class PLREntityToHL7BatchTypeConverter implements OidsUser, HL740Constants {

    protected static final ObjectFactory objectFactory = new ObjectFactory();
    
    public static final String BATCH_RESPONSE_INTERACTION_ID_ADD = "IN301030";
    public static final String BATCH_REQUEST_INTERACTION_ID_ADD = "IN301010";
    public static final String BATCH_RESPONSE_INTERACTION_ID_UPDATE = "IN303030";

    public static QUMTIN200002MCCIMT000300Message convertBatchResponseEntityToHl7(BatchResponseEntity entity) throws ParseException, ParserConfigurationException, JAXBException {
        QUMTIN200002MCCIMT000300Message convertedMessage = new QUMTIN200002MCCIMT000300Message();

        setHeaders(entity, convertedMessage);
        setSender(entity, convertedMessage);
        setReceiver(entity, convertedMessage);
        setControlActProcess(entity, convertedMessage);

        List<MaintainProviderResponseEntity> providerResponses = entity.getMaintainProviderResponseEntities();
        int count = 1;
        for (MaintainProviderResponseEntity providerResponse : providerResponses) {

            String responseType = providerResponse.getInteractionId();

            String output = null;
            if (BATCH_RESPONSE_INTERACTION_ID_ADD.equals(responseType) || BATCH_REQUEST_INTERACTION_ID_ADD.equals(responseType)) {
                PRPMIN301011MCCIMT000300Message add = PLREntityToHL7AddTypeConverter.convertMaintainProviderResponseEntityToAdd40(providerResponse);
                output = marshallAdd(add);
            } else if (BATCH_RESPONSE_INTERACTION_ID_UPDATE.equals(responseType)) {
                PRPMIN303011MCCIMT000300Message update = PLREntityToHL7UpdateTypeConverter.convertMaintainProviderResponseEntityToUpdate40(providerResponse);
                output = marshallUpdate(update);
            } else {
                PLREntityToHL7AddTypeConverter.setAcknowledgements(providerResponse, convertedMessage.getAcknowledgement());
                //throw new RuntimeException("Could not determine type of Maintain Response to create (add or update)");
            }
            
            addOutputAsElement(convertedMessage, output, count);
            count++;
        }

        return convertedMessage;
    }

    public static void addOutputAsElement(QUMTIN200002MCCIMT000300Message convertedMessage, String zippedOutput, int count) {
        QUMTIN200002QUQIMT120001Subject2 subject = new QUMTIN200002QUQIMT120001Subject2();
        convertedMessage.getControlActProcess().getSubject().add(subject);

        QUMTMT200002DocumentEvent documentEvent = new QUMTMT200002DocumentEvent();
        subject.setDocumentEvent(documentEvent);

        II idValue = new II();
        String filename = "FileRet_Ind_ProvDet_D" + count + ".xml";
        idValue.setExtension(filename);
        JAXBElement<II> documentEventIdJaxbElement = objectFactory.createQUMTMT200002DocumentEventId(idValue);
        documentEvent.setId(documentEventIdJaxbElement);

        ED documentEventTextElement = new ED();
        documentEventTextElement.setMediaType("text/xml");
        documentEventTextElement.setRepresentation(BinaryDataEncoding.TXT);
        documentEventTextElement.setText(zippedOutput);
        JAXBElement<ED> documentEventTextJaxbElement = objectFactory.createQUMTMT200002DocumentEventText(documentEventTextElement);
        documentEvent.setText(documentEventTextJaxbElement);
    }

    public static void setHeaders(BatchResponseEntity entity, QUMTIN200002MCCIMT000300Message convertedMessage) throws ParseException {
        // Set ID
        convertedMessage.setId(new II(MESSAGE_OID, entity.getMessageId()));

        // Set creation time
        TS creationTimeTS = new TS();
        Date creationTimeDate = entity.getCreationTime();
        creationTimeTS.setValue(ConverterUtils.convertFromDateToHL7String(creationTimeDate));
        convertedMessage.setCreationTime(creationTimeTS);

        // Set interaction ID
        convertedMessage.setInteractionId(new II(INTERACTION_OID, entity.getInteractionId()));
        CS versionCode = new CS("3.0");
        JAXBElement<CS> versionCodeElement = objectFactory.createMCCIMT200100BatchVersionCode(versionCode);
        convertedMessage.setVersionCode(versionCodeElement);

        // Set static variables
        convertedMessage.setProcessingCode(new CS(PROCESSING_CODE));
        convertedMessage.setProcessingModeCode(new CS(PROCESSING_MODE_CODE));
        convertedMessage.setAcceptAckCode(new CS(ACCEPT_ACK_CODE));
    }

    private static void setSender(BatchResponseEntity entity, QUMTIN200002MCCIMT000300Message convertedMessage) {
        MCCIMT000300Sender sender = new MCCIMT000300Sender();
        convertedMessage.setSender(sender);
        final CommunicationFunction senderEntity = entity.getSender();

        JAXBElement<TEL> telecomElement = objectFactory.createMCCIMT200100SenderTelecom(new TEL(senderEntity.getNetworkAddress()));
        sender.setTelecom(telecomElement);

        sender.setDevice(createDevice(SENDER_FACILITY_OID, senderEntity.getFacilityId(), senderEntity.getSystemName(), senderEntity.getEnvironment(), senderEntity.getOrganizationId(), SENDER_ORGANIZATION_OID));

    }

    private static void setReceiver(BatchResponseEntity entity, QUMTIN200002MCCIMT000300Message convertedMessage) {
        List<MCCIMT000300Receiver> receiverList = convertedMessage.getReceiver();
        MCCIMT000300Receiver receiver = new MCCIMT000300Receiver();
        receiverList.add(receiver);

        List<CommunicationFunction> receiverEntityList = entity.getReceiver();
        if (!CollectionUtils.isEmpty(receiverEntityList)) {
            final CommunicationFunction receiverEntity = receiverEntityList.get(0);

            JAXBElement<TEL> telecomElement = objectFactory.createMCCIMT200100ReceiverTelecom(new TEL(receiverEntity.getNetworkAddress()));
            receiver.setTelecom(telecomElement);

            receiver.setDevice(createDevice(RECEIVER_FACILITY_OID, receiverEntity.getFacilityId(), receiverEntity.getSystemName(), receiverEntity.getEnvironment(), receiverEntity.getOrganizationId(), RECEIVER_ORGANIZATION_OID));
        }

    }

    private static MCCIMT000300Device createDevice(String deviceIdRoot, String facilityId, String systemName, String environment, String organizationId, String organizationIdRoot) {
        MCCIMT000300Device device = new MCCIMT000300Device();

        List<II> idList = device.getId();

        if (!StringUtils.isEmpty(deviceIdRoot) && !StringUtils.isEmpty(environment)) {
            idList.add(new II(ENVIRONMENT_OID, environment));
        }

        if (!StringUtils.isEmpty(facilityId)) {
            idList.add(new II(deviceIdRoot, facilityId));
        }
        
        // PLR-2178: Schema validation requires 1+ ID elements.
        if (idList.isEmpty()) {
            idList.add(new II());
        }

        if (!StringUtils.isEmpty(systemName)) {
            List<EN> nameList = device.getName();
            nameList.add(new EN(systemName));
        }

        if (!StringUtils.isEmpty(organizationId)) {
            MCCIMT000300Agent agencyFor = new MCCIMT000300Agent();
            MCCIMT000300Organization representedOrganization = new MCCIMT000300Organization();

            List<II> representedOrganizationIdList = representedOrganization.getId();
            representedOrganizationIdList.add(new II(organizationIdRoot, organizationId));
            JAXBElement<MCCIMT000300Organization> representedOrganizationElement = objectFactory.createMCCIMT000300AgentRepresentedOrganization(representedOrganization);
            agencyFor.setRepresentedOrganization(representedOrganizationElement);
            JAXBElement<MCCIMT000300Agent> agencyForElement = objectFactory.createMCCIMT000300DeviceAgencyFor(agencyFor);
            device.setAgencyFor(agencyForElement);
        }

        return device;
    }

    private static void setControlActProcess(BatchResponseEntity entity,
            QUMTIN200002MCCIMT000300Message convertedMessage) throws ParseException {
        QUMTIN200002QUQIMT120001ControlActProcess controlActProcess = new QUMTIN200002QUQIMT120001ControlActProcess();
        controlActProcess.setMoodCode(CONTROL_ACT_PROCESS_MOOD_CODE);
        convertedMessage.setControlActProcess(controlActProcess);

        // need to add a priority in order for the same message to 
        // be valid in version 4.04
        List<CE> priorityCodeList = controlActProcess.getPriorityCode();
        CE priorityCode = new CE();
        priorityCode.setCode(DEFAULT_PRIORITY_CODE);
        priorityCodeList.add(priorityCode);

        List<QUQIMT120001AuthorOrPerformer> authorOrPerformerList = controlActProcess.getAuthorOrPerformer();

        QUQIMT120001AuthorOrPerformer performer = new QUQIMT120001AuthorOrPerformer();
        performer.setTypeCode(TYPE_CODE_PERFORMER);
        COCTMT090100AssignedPerson performerAssignedPerson = new COCTMT090100AssignedPerson();
        performerAssignedPerson.getClassCode().add(CLASS_CODE_ASSIGNED);
        List<II> performerAssignedPersonIdList = performerAssignedPerson.getId();
        performerAssignedPersonIdList.add(new II(SOURCE_USER_OID, entity.getResponsibleUserId()));
        JAXBElement<COCTMT090100AssignedPerson> performerAssignedPersonEntity = objectFactory.createMFMIMT700701AuthorOrPerformerAssignedPerson(performerAssignedPerson);
        performer.setAssignedPerson(performerAssignedPersonEntity);
        authorOrPerformerList.add(performer);

        String sourceJurisdiction = entity.getSender().getJurisdiction();
        if (!StringUtils.isEmpty(sourceJurisdiction)) {
            COCTMT150000Organization representedOrganization = new COCTMT150000Organization();
            representedOrganization.getId().add(new II());
            representedOrganization.getName().add(new ON(sourceJurisdiction));
            JAXBElement<COCTMT150000Organization> representedOrganizationElement = objectFactory.createCOCTMT090100AssignedPersonRepresentedOrganization(representedOrganization);
            performerAssignedPerson.setRepresentedOrganization(representedOrganizationElement);
        }

        QUQIMT120001AuthorOrPerformer author = new QUQIMT120001AuthorOrPerformer();
        author.setTypeCode(TYPE_CODE_AUTHOR);
        COCTMT090100AssignedPerson authorAssignedPerson = new COCTMT090100AssignedPerson();
        authorAssignedPerson.getClassCode().add(CLASS_CODE_ASSIGNED);
        List<II> authorAssignedPersonIdList = authorAssignedPerson.getId();
        authorAssignedPersonIdList.add(new II(RESPONSIBLE_PERSON_USER_OID, entity.getResponsibleUserId()));
        JAXBElement<COCTMT090100AssignedPerson> authorAssignedPersonEntity = objectFactory.createMFMIMT700701AuthorOrPerformerAssignedPerson(authorAssignedPerson);
        author.setAssignedPerson(authorAssignedPersonEntity);
        authorOrPerformerList.add(author);

        Date originalEventTime = entity.getOriginalEventTime();
        if (originalEventTime != null) {
            IVXBTS lowValue = new IVXBTS();
            lowValue.setValue(ConverterUtils.convertFromDateToHL7String(originalEventTime));
            JAXBElement<IVXBTS> createIVLTSLow = objectFactory.createIVLTSLow(lowValue);
            IVLTS effectiveTimeValue = new IVLTS();
            effectiveTimeValue.getRest().add(createIVLTSLow);
            JAXBElement<IVLTS> effectiveTime = objectFactory.createQUMTIN200002QUQIMT120001ControlActProcessEffectiveTime(effectiveTimeValue);
            controlActProcess.setEffectiveTime(effectiveTime);
        }
    }

    private static String marshallAdd(PRPMIN301011MCCIMT000300Message update) throws ParserConfigurationException, JAXBException {
        Document marshalledAdd = ConverterUtils.marshall(update, PRPMIN301011MCCIMT000300Message.class, SCHEMA_ADD_40_XML_HEADER);
        String updateAsString = ConverterUtils.convertNodeToString(marshalledAdd);

        updateAsString = updateAsString.replace("xmlns:ns2=\"urn:hl7-org:v3\"", "xmlns=\"urn:hl7-org:v3\"");
        updateAsString = updateAsString.replace("ns2:", "");
        return updateAsString;
    }

    private static String marshallUpdate(PRPMIN303011MCCIMT000300Message update) throws ParserConfigurationException, JAXBException {
        Document marshalledAdd = ConverterUtils.marshall(update, PRPMIN303011MCCIMT000300Message.class, SCHEMA_UPDATE_40_XML_HEADER);
        String updateAsString = ConverterUtils.convertNodeToString(marshalledAdd);

        updateAsString = updateAsString.replace("xmlns:ns2=\"urn:hl7-org:v3\"", "xmlns=\"urn:hl7-org:v3\"");
        updateAsString = updateAsString.replace("ns2:", "");
        return updateAsString;
    }
 
    /**
     * Compresses and encodes a String using GZIP compression, and Base64 encoding
     * @param input - Arbitrary String to encode
     * @return String - GZipped and Base64 encoded representation of the input String
     */
    private static String zip(String input) {
        if (input==null){
            return "";
        }
        String zippedOutput = "";
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        try {
            GZIPOutputStream gzip = new GZIPOutputStream(baos);
            gzip.write(input.getBytes(StandardCharsets.UTF_8));
            gzip.flush();
            gzip.close();
            byte[] zippedData = baos.toByteArray();
            baos = new ByteArrayOutputStream();
            Base64OutputStream b64os = new Base64OutputStream(baos);
            b64os.write(zippedData);
            b64os.flush();
            b64os.close();
            zippedOutput = new String(baos.toByteArray(),StandardCharsets.UTF_8);
        } catch (Throwable t) {
            throw new RuntimeException(t);
        }

        return zippedOutput;
    }

}
