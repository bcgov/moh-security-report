/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.orgprovtofhir;

import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants;
import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import java.io.Serializable;
import java.util.logging.Logger;

/**
 * Class for mapping components between PLR Organization Provider and FHIR
 * BCOrganizationBundle profile resource.
 *
 * @author dan.stepanov
 */
public class MapOrgProviderToBCOrganizationBundle implements ProviderFhirConstants, Serializable {

    private static final String CLASSNAME = MapOrgProviderToBCOrganizationBundle.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    public static ProviderDetails orgProviderDetails = new ProviderDetails();

    public static void addOrgProviderToBCOrganizationBundle(FHIRFactory factory, ProviderDetails orgProviderDetails, Object bcOrganizationBundleFhir) {

        // create BCOrganization/BCOrganizationAffiliation types for FHIR model
        Object bcOrganizationFhir = factory.newBCOrganization();
//        Object bcOrganizationAffiliationFhir = factory.newBCOrganizationAffiliation();

        MapOrgProviderToBCOrganizationFhir.addOrgProviderActiveStatusToBCOrganization(factory, orgProviderDetails, bcOrganizationFhir);
        if (orgProviderDetails.getOrgNames() != null) {
            MapOrgProviderToBCOrganizationFhir.addOrgProviderNameToBCOrganization(factory, orgProviderDetails.getOrgNames(), bcOrganizationFhir);
        }
        if (orgProviderDetails.getAddresses() != null) {
            MapOrgProviderToBCOrganizationFhir.addOrgProviderAddressToBCOrganizationAddress(factory, orgProviderDetails.getAddresses(), bcOrganizationFhir);
        }
        if (orgProviderDetails.getIdentifiers() != null) {
            MapOrgProviderToBCOrganizationFhir.addOrgProviderIdentifiersToBCOrganization(factory, orgProviderDetails.getIdentifiers(), bcOrganizationFhir);
        }
        if (orgProviderDetails.getStatuses() != null) {
            MapOrgProviderToBCOrganizationFhir.addOrgProviderLicenseStatusToBCOrganization(factory, orgProviderDetails.getStatuses(), bcOrganizationFhir);
        }
        if (orgProviderDetails.getTelecommunication() != null) {
            MapOrgProviderToBCOrganizationFhir.addOrgProviderTelecomToBCOrganizationTelecom(factory, orgProviderDetails.getTelecommunication(), bcOrganizationFhir);
        }
        if (orgProviderDetails.getElectronicAddresses() != null) {
            MapOrgProviderToBCOrganizationFhir.addOrgProviderElectronicAddressToBCOrganizationTelecom(factory, orgProviderDetails.getElectronicAddresses(), bcOrganizationFhir);
        }
        if (orgProviderDetails.getNotes() != null) {
            MapOrgProviderToBCOrganizationFhir.addOrgProviderNoteToBCOrganization(factory, orgProviderDetails.getNotes(), bcOrganizationFhir);
        }

        // TODO check for org provider to organization relationships
        // TODO check for org provider to Practitioner relationships
        // TODO check for org provider to location relationships
        // SetOrganizationBundleAttributes w/BCOrganization profile
        factory.getSetOrganizationBundleAttributes().setOrganization(bcOrganizationBundleFhir, bcOrganizationFhir);

        // set Organization bundle type to BundleType.TRANSACTION  
//        factory.getSetBundleAttributes().setBundleType(bcOrganizationFhir, FHIRFactory.BundleType.TRANSACTION);
    }

}
