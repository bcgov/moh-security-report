package ca.bc.gov.moh.hsa.plr.converter.plr;

import ca.bc.gov.moh.hsa.entity.AddressAttribute;
import ca.bc.gov.moh.hsa.entity.CommunicationFunction;
import ca.bc.gov.moh.hsa.entity.DateAttribute;
import ca.bc.gov.moh.hsa.entity.EmailAttribute;
import ca.bc.gov.moh.hsa.entity.IdentifierAttribute;
import ca.bc.gov.moh.hsa.entity.OrganizationNameAttribute;
import ca.bc.gov.moh.hsa.entity.Person;
import ca.bc.gov.moh.hsa.entity.PersonNameAttribute;
import ca.bc.gov.moh.hsa.entity.PhoneAttribute;
import ca.bc.gov.moh.hsa.plr.converter.dtotohl7.HL740Constants;
import ca.bc.gov.moh.hsa.plr.converter.dtotohl7416.PLREntityToHL7QueryResponseTypeConverter;
import ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils;
import static ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils.PROVIDER_TYPE_ORG;
import ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser;
import static ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser.MESSAGE_INTERACTION_ROOT_OID;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ConditionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.CredentialAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.DisciplinaryActionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.DistributionRequestEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ExpertiseAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderRelationshipAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.StatusAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.WorkLocationAttribute;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;
import javax.xml.bind.JAXBElement;
import org.apache.camel.Converter;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.hl7.v3.m4_16.CE;
import org.hl7.v3.m4_16.AD;
import org.hl7.v3.m4_16.AdxpCity;
import org.hl7.v3.m4_16.AdxpCountry;
import org.hl7.v3.m4_16.AdxpPostalCode;
import org.hl7.v3.m4_16.AdxpState;
import org.hl7.v3.m4_16.AdxpStreetAddressLine;
import org.hl7.v3.m4_16.COCTMT090003BCAssignedEntity;
import org.hl7.v3.m4_16.COCTMT090100BCAssignedPerson;
import org.hl7.v3.m4_16.COCTMT090100BCOrganization;
import org.hl7.v3.m4_16.CS;
import org.hl7.v3.m4_16.CV;
import org.hl7.v3.m4_16.CommunicationFunctionType;
import org.hl7.v3.m4_16.ED;
import org.hl7.v3.m4_16.EN;
import org.hl7.v3.m4_16.EnFamily;
import org.hl7.v3.m4_16.EnGiven;
import org.hl7.v3.m4_16.EnPrefix;
import org.hl7.v3.m4_16.EnSuffix;
import org.hl7.v3.m4_16.II;
import org.hl7.v3.m4_16.MCCIMT000100BCReceiver;
import org.hl7.v3.m4_16.MCCIMT000100BCSender;
import org.hl7.v3.m4_16.MFMIMT700701BCAuthorOrPerformer;
import org.hl7.v3.m4_16.PRPMIN303030CA;
import org.hl7.v3.m4_16.PRPMIN303030CAMFMIMT700701BCControlActProcess;
import org.hl7.v3.m4_16.PRPMIN303030CAMFMIMT700701BCRegistrationEvent;
import org.hl7.v3.m4_16.PRPMIN303030CAMFMIMT700701BCSubject4;
import org.hl7.v3.m4_16.PRPMMT303010BCHealthCareProvider;
import org.hl7.v3.m4_16.ST;
import org.hl7.v3.m4_16.PN;
import org.hl7.v3.m4_16.INT;
import org.hl7.v3.m4_16.IVLTS;
import org.hl7.v3.m4_16.IVXBTS;
import org.hl7.v3.m4_16.MCCIMT000100BCAgent;
import org.hl7.v3.m4_16.MCCIMT000100BCDevice;
import org.hl7.v3.m4_16.MCCIMT000100BCOrganization;
import org.hl7.v3.m4_16.MFMIMT700701BCAuthor;
import org.hl7.v3.m4_16.MFMIMT700701BCCustodian;
import org.hl7.v3.m4_16.ObjectFactory;
import org.hl7.v3.m4_16.PRPMIN303030CAMCCIMT000100BCMessage;
import org.hl7.v3.m4_16.PRPMIN303030CAMFMIMT700701BCSubject2;
import org.hl7.v3.m4_16.PRPMMT303010BCActDefinitionOrEvent;
import org.hl7.v3.m4_16.PRPMMT303010BCAssignedEntity;
import org.hl7.v3.m4_16.PRPMMT303010BCBirthplace;
import org.hl7.v3.m4_16.PRPMMT303010BCControlActEvent;
import org.hl7.v3.m4_16.PRPMMT303010BCDisciplinaryAction;
import org.hl7.v3.m4_16.PRPMMT303010BCHealthCareProviderStatusCode;
import org.hl7.v3.m4_16.PRPMMT303010BCJurisdiction;
import org.hl7.v3.m4_16.PRPMMT303010BCLocation;
import org.hl7.v3.m4_16.PRPMMT303010BCOrganization;
import org.hl7.v3.m4_16.PRPMMT303010BCPlace;
import org.hl7.v3.m4_16.PRPMMT303010BCPrimaryPerformer;
import org.hl7.v3.m4_16.PRPMMT303010BCPrincipalPerson;
import org.hl7.v3.m4_16.PRPMMT303010BCPrivilege;
import org.hl7.v3.m4_16.PRPMMT303010BCQualifiedEntity;
import org.hl7.v3.m4_16.PRPMMT303010BCRelatedTo;
import org.hl7.v3.m4_16.PRPMMT303010BCResponsibleParty;
import org.hl7.v3.m4_16.PRPMMT303010BCRoleActivation;
import org.hl7.v3.m4_16.PRPMMT303010BCServiceDeliveryLocation;
import org.hl7.v3.m4_16.PRPMMT303010BCSubject1;
import org.hl7.v3.m4_16.PRPMMT303010BCSubject2;
import org.hl7.v3.m4_16.PRPMMT303010BCSubject3;
import org.hl7.v3.m4_16.PRPMMT303010BCTerritorialAuthority;
import org.hl7.v3.m4_16.SXCMTS;
import org.hl7.v3.m4_16.TEL;
import org.hl7.v3.m4_16.TS;
import static ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils.MESSAGE_INTERACTION_EXTENSION_DIST_ORG_UPDATE;

/**
 * Converts a distribution message from the entity format into the HL7 format
 * ready to be converted to XML and sent off to distribution clients.
 *
 * @see AddDistributionEntityToHl7Converter
 *
 * @author greg.perkins
 */
@Converter
public class UpdateDistributionEntityToHl7Converter {

    /**
     * Object factory for creating JAXB objects
     */
    protected final static ObjectFactory factory = new ObjectFactory();

    public static final SimpleDateFormat YEAR_MONTH_DAY_FORMAT = new SimpleDateFormat("yyyyMMdd");
    public static final SimpleDateFormat DATE_TIME_FORMAT = new SimpleDateFormat("yyyyMMddHHmmss");

    /**
     * By Default SimpleDateFormat objects use Lenient parsing, which will
     * convert invalid dates (such as 2000-01-00) into valid ones (1999-12-31).
     * Turn off lenient mode to enforce strict parsing
     */
    static {
        YEAR_MONTH_DAY_FORMAT.setLenient(false);
        DATE_TIME_FORMAT.setLenient(false);
    }

    /**
     * Converts a DistributionRequestEntity object into a PRPMIN303030CA jaxb
     * object
     *
     * @param in DistributionRequestEntity
     * @return PRPMIN303030CA
     * @throws IllegalAccessException, InvocationTargetException
     */
    @Converter
    public static PRPMIN303030CA convertToPRPMIN303030CA(DistributionRequestEntity in)
            throws IllegalAccessException, InvocationTargetException {
        PRPMIN303030CA out = new PRPMIN303030CA();
        out.setITSVersion("XML_1.0");
        convert(out, in);
        return out;
    }

    private static PRPMIN303030CAMCCIMT000100BCMessage convert(PRPMIN303030CAMCCIMT000100BCMessage out, DistributionRequestEntity in)
            throws IllegalAccessException, InvocationTargetException {

        ProviderAttribute providerDetails = in.getProvider();

        out.setReceiver(new MCCIMT000100BCReceiver());
        out.setSender(new MCCIMT000100BCSender());
        convertHeaderFields(out, in);
        convertReceiver(out, in);
        convertSender(out, in);

        PRPMIN303030CAMFMIMT700701BCControlActProcess controlActProcess = new PRPMIN303030CAMFMIMT700701BCControlActProcess();
        out.setControlActProcess(controlActProcess);
        controlActProcess.setPriorityCode(cs("R"));
        convertAuthor(in, controlActProcess);

        controlActProcess.setSubject(new PRPMIN303030CAMFMIMT700701BCSubject2());
        PRPMIN303030CAMFMIMT700701BCRegistrationEvent registrationEvent = new PRPMIN303030CAMFMIMT700701BCRegistrationEvent();
        registrationEvent.setStatusCode(cs("active"));
        controlActProcess.getSubject().setRegistrationEvent(registrationEvent);

        //set the valud of typeCode, this is required by conformance
        List<String> subjectTypeCodeList = new ArrayList();
        subjectTypeCodeList.add(HL740Constants.TYPE_CODE_SUBJ);
        controlActProcess.getSubject().setTypeCode(subjectTypeCodeList);

        //Don't include IDs
        PRPMIN303030CAMFMIMT700701BCSubject4 subject = new PRPMIN303030CAMFMIMT700701BCSubject4();
        registrationEvent.setSubject1(subject);
        PRPMMT303010BCHealthCareProvider healthCareProvider = new PRPMMT303010BCHealthCareProvider();
        healthCareProvider.getClassCode().add("PROV");

        subject.setHealthCareProvider(healthCareProvider);

        //set the value of typeCode, this is required by conformance
        List<String> subject1TypeCodeList = new ArrayList();
        subject1TypeCodeList.add(HL740Constants.TYPE_CODE_SBJ);
        subject.setTypeCode(subject1TypeCodeList);

        CE healthCareProviderCode = ce(providerDetails.getHptCode());
        healthCareProviderCode.setCodeSystemName(HL740Constants.HPT_CODE_SYSTEM_NAME);
        healthCareProvider.setCode(healthCareProviderCode);

        for (IdentifierAttribute id : providerDetails.getCollegeIdentifiers()) {
            healthCareProvider.getId().add(convertIdentifier(id));
        }

        for (AddressAttribute addr : providerDetails.getAddresses()) {
            healthCareProvider.getAddr().add(convertAddressToAD(addr));
        }

        // added logic for ORG provider type  
        // if this is an ORG, add ORG name, long name to firstname and surname
        if (out.getInteractionId().getRoot().equalsIgnoreCase(MESSAGE_INTERACTION_ROOT_OID)
                && out.getInteractionId().getExtension().equalsIgnoreCase(MESSAGE_INTERACTION_EXTENSION_DIST_ORG_UPDATE)) {

            if (providerDetails.getPartyType() != null && (!providerDetails.getPartyType().isEmpty()
                    && providerDetails.getPartyType().equalsIgnoreCase(PROVIDER_TYPE_ORG))) {

                populatePersonNamesFromOrgNames(providerDetails);
            }
        }

        for (PersonNameAttribute name : providerDetails.getPersonNames()) {
            convertName(name, healthCareProvider);
        }

        for (PhoneAttribute phone : providerDetails.getPhones()) {
            healthCareProvider.getTelecom().add(convertTelecommunicationToTEL(phone));
        }

        for (EmailAttribute email : providerDetails.getEmails()) {
            healthCareProvider.getTelecom().add(convertElectronicAddressToTEL(email));
        }

        int statusCounter = 1;
        for (StatusAttribute status : providerDetails.getStatuses()) {
            healthCareProvider.setStatusCode(convertStatus(status));
            // PLR-2188: Do not include endDate.
            healthCareProvider.setEffectiveTime(effectiveTime(status.getStartDate(), null));
            //Generate the ID to link the status with the subjectOf2 record
            String ext = "status" + statusCounter;
            statusCounter++;
            //Set the ID on the status
            healthCareProvider.getStatusCode().setControlActReferenceId(new II());
            healthCareProvider.getStatusCode().getControlActReferenceId().setExtension(ext);
            healthCareProvider.getStatusCode().getControlActReferenceId().setRoot("2.16.840.1.113883.3.40.1.12");

            //Generate SubjectOf2 with reason code
            PRPMMT303010BCSubject2 subject2 = new PRPMMT303010BCSubject2();
            CE ce = new CE();
            ce.setCode(status.getReasonCode());
            subject2.setRoleActivation(new PRPMMT303010BCRoleActivation());
            subject2.getRoleActivation().setReasonCode(ce);
            List<String> classCodeList = new ArrayList<>();
            classCodeList.add(HL740Constants.CLASS_CODE_CACT);
            subject2.getRoleActivation().setClassCode(classCodeList);
            PRPMMT303010BCControlActEvent controlActEvent = new PRPMMT303010BCControlActEvent();
            II ii = new II();
            ii.setExtension(ext);
            ii.setRoot("2.16.840.1.113883.3.40.1.12");
            controlActEvent.setId(ii);
            PRPMMT303010BCSubject3 subject3 = new PRPMMT303010BCSubject3();
            subject3.setControlActEvent(controlActEvent);

            //set typeCode, this is required by conformance
            List<String> subjectInSubjectOf2TypeCodeList = new ArrayList<>();
            subjectInSubjectOf2TypeCodeList.add(HL740Constants.TYPE_CODE_SUBJ);
            subject3.setTypeCode(subjectInSubjectOf2TypeCodeList);

            subject2.getRoleActivation().getSubjectOf().add(subject3);

            //set typeCode, this is required by conformance
            List<String> subjectOf2TypeCodeList = new ArrayList<>();
            subjectOf2TypeCodeList.add(HL740Constants.TYPE_CODE_SBJ);
            subject2.setTypeCode(subjectOf2TypeCodeList);

            //Add SubjectOf2 to the provider.
            healthCareProvider.getSubjectOf2().add(subject2);
        }

        PRPMMT303010BCOrganization org = new PRPMMT303010BCOrganization();
        PRPMMT303010BCTerritorialAuthority territory = new PRPMMT303010BCTerritorialAuthority();
        territory.setCode(cs("Province"));
        territory.getClassCode().add("TERR");
        PRPMMT303010BCJurisdiction t = new PRPMMT303010BCJurisdiction();
        territory.setTerritory(factory.createPRPMMT303010BCTerritorialAuthorityTerritory(t));
        t.getClassCode().add("PLC");
        t.setDeterminerCode("INSTANCE");
        t.setCode(cs("BC"));
        org.setTerritorialAuthority(factory.createPRPMMT303010BCOrganizationTerritorialAuthority(territory));
        healthCareProvider.setIssuingOrganization(factory.createPRPMMT303010BCHealthCareProviderIssuingOrganization(org));
        healthCareProvider.getIssuingOrganization().getValue().getClassCode().add("ORG");
        healthCareProvider.getIssuingOrganization().getValue().setDeterminerCode("INSTANCE");

        //healthCarePrincipalPerson?
        for (DisciplinaryActionAttribute disciplinaryAction : providerDetails.getDisciplinaryActions()) {
            subject.getHealthCareProvider().getSubjectOf1().add(convertDisciplinaryAction(disciplinaryAction));
        }

        for (ConditionAttribute condition : providerDetails.getConditions()) {
            healthCareProvider.getResponsibleFor().add(convertCondition(condition));
        }

        for (WorkLocationAttribute workLocation : providerDetails.getWorkLocations()) {
            healthCareProvider.getRelatedTo().add(convertWorkLocation(workLocation));
        }

        for (CredentialAttribute cred : providerDetails.getCredentials()) {
            healthCareProvider.getRelatedTo().add(convertCredential(cred));
        }

        for (ExpertiseAttribute expertise : providerDetails.getExpertises()) {
            healthCareProvider.getRelatedTo().add(convertExpertise(expertise));
        }

        for (ProviderRelationshipAttribute rel : providerDetails.getProviderRelationships()) {
            healthCareProvider.getRelatedTo().add(convertRelationship(rel));
        }

        for (Person person : providerDetails.getDemographicDetails()) {
            convertDemographics(person, providerDetails.getPersonNames(), healthCareProvider);
        }

        MFMIMT700701BCAuthor author = new MFMIMT700701BCAuthor();
        author.setAssignedEntity(new COCTMT090003BCAssignedEntity());
        registrationEvent.setAuthor(factory.createPRPMIN303030CAMFMIMT700701BCRegistrationEventAuthor(author));
        registrationEvent.getAuthor().getValue().getAssignedEntity().getId().add(ii(in.getRegistryOrgUserId(), "2.16.840.1.113883.3.40.3.3"));
        MFMIMT700701BCCustodian custodian = new MFMIMT700701BCCustodian();
        custodian.setAssignedEntity(new COCTMT090003BCAssignedEntity());
        registrationEvent.setCustodian(custodian);
        registrationEvent.getCustodian().getAssignedEntity().getId().add(ii(in.getSourceOrganizationChid(), "2.16.840.1.113883.3.40.4.2"));

        return out;
    }

    /**
     * Populates person name attributes from the organization names. Copy
     * properties and sets person firstname from org name and person last name
     * from org longname.
     *
     * @param providerDetails ProviderAttribute entity
     * @throws IllegalAccessException
     * @throws InvocationTargetException
     */
    protected static void populatePersonNamesFromOrgNames(ProviderAttribute providerDetails)
            throws InvocationTargetException, IllegalAccessException {

        List<OrganizationNameAttribute> orgNames = providerDetails.getOrganizationNames();
        List<PersonNameAttribute> personalNames = providerDetails.getPersonNames();
        personalNames.clear();

        for (OrganizationNameAttribute orgName : orgNames) {
            PersonNameAttribute personName = new PersonNameAttribute();
            BeanUtils.copyProperties(personName, orgName);
            personName.setFirstName(orgName.getName());
            personName.setLastName(orgName.getLongname());
            personalNames.add(personName);
        }

        providerDetails.setPersonNames(personalNames);
    }

    private static void convertName(PersonNameAttribute name, PRPMMT303010BCHealthCareProvider healthCareProvider) {
        PN pn = convertPersonNameToPN(name);
        if (CollectionUtils.isNotEmpty(pn.getUse()) && pn.getUse().get(0) != null) {
            String use = pn.getUse().get(0);
            if (use.equalsIgnoreCase(HL740Constants.USE_C)) {
                healthCareProvider.getName().add(pn);
            }
            if (use.equalsIgnoreCase(HL740Constants.USE_L)) {
                PRPMMT303010BCPrincipalPerson healthCarePrincipalPerson = healthCareProvider.getHealthCarePrincipalPerson();
                if (healthCarePrincipalPerson == null) {
                    healthCarePrincipalPerson = new PRPMMT303010BCPrincipalPerson();
                    healthCareProvider.setHealthCarePrincipalPerson(healthCarePrincipalPerson);
                }
                healthCarePrincipalPerson.getName().add(pn);
            }
        }
    }

    private static void convertDemographics(Person person, List<PersonNameAttribute> personNameList, PRPMMT303010BCHealthCareProvider healthCareProvider) {
        PRPMMT303010BCPrincipalPerson healthCarePrincipalPerson = healthCareProvider.getHealthCarePrincipalPerson();
        if (healthCarePrincipalPerson == null) {
            healthCarePrincipalPerson = new PRPMMT303010BCPrincipalPerson();
            healthCareProvider.setHealthCarePrincipalPerson(healthCarePrincipalPerson);
        }

        if (person.getGender() != null && person.getGender().getValue() != null) {
            String genderValue = person.getGender().getValue();
            healthCarePrincipalPerson.setAdministrativeGenderCode(cs(genderValue));
        }

        DateAttribute birthDate = person.getBirthDate();
        DateAttribute deathDate = person.getDeathDate();
        String birthCountryCode = person.getBirthCountryCode();
        String birthProvinceCode = person.getBirthProvinceCode();

        if (birthDate != null && birthDate.getValue() != null) {
            healthCarePrincipalPerson.setBirthTime(convertToTS(birthDate.getValue()));
        }

        if (deathDate != null && deathDate.getValue() != null) {
            healthCarePrincipalPerson.setDeceasedTime(convertToTS(deathDate.getValue()));
        }

        ObjectFactory objectFactory = new ObjectFactory();

        if (!StringUtils.isEmpty(birthProvinceCode) || !StringUtils.isEmpty(birthCountryCode)) {

            PRPMMT303010BCBirthplace birthPlace = new PRPMMT303010BCBirthplace();

            JAXBElement<PRPMMT303010BCBirthplace> birthPlaceJaxb = objectFactory.createPRPMMT303010BCPrincipalPersonBirthplace(birthPlace);
            AD addr = objectFactory.createAD();
            birthPlaceJaxb.getValue().setAddr(addr);
            List<String> classCodeList = new ArrayList();
            classCodeList.add(HL740Constants.CLASS_CODE_BIRTHPL);
            birthPlaceJaxb.getValue().setClassCode(classCodeList);
            List<Serializable> content = addr.getContent();
            if (!StringUtils.isEmpty(birthProvinceCode)) {
                AdxpState provinceCodeValue = new AdxpState();
                provinceCodeValue.setText(birthProvinceCode);
                JAXBElement<AdxpState> provinceElement = objectFactory.createADState(provinceCodeValue);
                content.add(provinceElement);
            }
            if (!StringUtils.isEmpty(birthCountryCode)) {
                AdxpCountry countryValue = new AdxpCountry();
                countryValue.setText(birthCountryCode);
                JAXBElement<AdxpCountry> CountryElement = objectFactory.createADCountry(countryValue);
                content.add(CountryElement);
            }
            healthCarePrincipalPerson.setBirthplace(birthPlaceJaxb);
        }

        //Add classCode and determinerCode attribute to <healthCarePrincipalPerson> element
        //This is required by conformance.
        List<String> classCodeList = new ArrayList();
        classCodeList.add(HL740Constants.CLASS_CODE_PSN);
        healthCarePrincipalPerson.setClassCode(classCodeList);
        healthCarePrincipalPerson.setDeterminerCode(HL740Constants.DETERMINER_CODE_INSTANCE);
    }

    public static PRPMMT303010BCHealthCareProviderStatusCode convertStatus(StatusAttribute status) {
        PRPMMT303010BCHealthCareProviderStatusCode code = new PRPMMT303010BCHealthCareProviderStatusCode();
        code.setCode(status.getUncodedType());
        code.setValidTime(effectiveTime(status.getStartDate(), status.getExpiryDate()));
        return code;
    }

    public static II convertIdentifier(IdentifierAttribute id) {
        II hcpId = ii(id.getValue(), ConverterUtils.getOid(id.getUncodedType()));
        return hcpId;
    }

    public static PRPMMT303010BCRelatedTo convertRelationship(ProviderRelationshipAttribute rel) {
        PRPMMT303010BCRelatedTo relatedTo = new PRPMMT303010BCRelatedTo();
        relatedTo.setTypeCode(HL740Constants.TYPE_CODE_REL);
        PRPMMT303010BCHealthCareProvider relatedProvider = new PRPMMT303010BCHealthCareProvider();
        relatedProvider.getId().add(ii(rel.getRelationshipWithProviderCollegeId(), ConverterUtils.getOid(rel.getRelationshipWithProviderType())));
        relatedProvider.setCode(cs(rel.getRelationshipTypeCode()));
        PN pn = new PN();
        pn.getContent().add(rel.getRelationshipWithProviderName());
        relatedProvider.getName().add(pn);
        relatedProvider.setEffectiveTime(effectiveTime(rel.getStartDate(), rel.getExpiryDate()));
        relatedTo.setHealthCareProvider(factory.createPRPMMT303010BCRelatedToHealthCareProvider(relatedProvider));
        return relatedTo;
    }

    public static PRPMMT303010BCRelatedTo convertExpertise(ExpertiseAttribute expertise) {
        PRPMMT303010BCRelatedTo relatedTo = new PRPMMT303010BCRelatedTo();
        relatedTo.setTypeCode(HL740Constants.TYPE_CODE_REL);
        PRPMMT303010BCQualifiedEntity qualifiedEntity = new PRPMMT303010BCQualifiedEntity();
        relatedTo.setQualifiedEntity(factory.createPRPMMT303010BCRelatedToQualifiedEntity(qualifiedEntity));
        qualifiedEntity.setCode(new CV());
        qualifiedEntity.getCode().setCode(expertise.getUncodedType());
        qualifiedEntity.getCode().setOriginalText(ed(expertise.getSourceCode()));
        qualifiedEntity.setEffectiveTime(effectiveTime(expertise.getStartDate(), expertise.getExpiryDate()));
        List<String> classCodeList = new ArrayList<>();
        classCodeList.add(HL740Constants.CLASS_CODE_QUAL);
        qualifiedEntity.setClassCode(classCodeList);
        return relatedTo;
    }

    public static PRPMMT303010BCRelatedTo convertCredential(CredentialAttribute cred) {
        PRPMMT303010BCRelatedTo relatedTo = new PRPMMT303010BCRelatedTo();
        relatedTo.setTypeCode(HL740Constants.TYPE_CODE_REL);
        relatedTo.setQualifiedEntity(factory.createPRPMMT303010BCRelatedToQualifiedEntity(new PRPMMT303010BCQualifiedEntity()));
        PRPMMT303010BCQualifiedEntity qualifiedEntity = relatedTo.getQualifiedEntity().getValue();
        List<String> classCodeList = new ArrayList<>();
        classCodeList.add(HL740Constants.CLASS_CODE_QUAL);
        qualifiedEntity.setClassCode(classCodeList);
        qualifiedEntity.setId(ii(cred.getRegistrationNumber(), "2.16.840.1.113883.3.40.1.2"));

        CE code = new CE();
        code.setCode(cred.getUncodedType());

        // Set Equivalency Flag - REMOVED as schema doesn't allow it
//        CD value = new CD();
//        value.setCode(String.valueOf(cred.isEquivalent()));
//        code.getTranslation().add(value);
        // Set Designation
        TEL tel = new TEL();
        tel.setValue(cred.getDesignation());

        JAXBElement<TEL> createEDReference = new ObjectFactory().createEDReference(tel);
        ED originalText = new ED();
        originalText.getContent().add(createEDReference);
        code.setOriginalText(originalText);

        qualifiedEntity.setCode(code);

        qualifiedEntity.setEffectiveTime(effectiveTime(cred.getStartDate(), cred.getExpiryDate()));
        qualifiedEntity.setQualificationGrantingOrganization(factory.createPRPMMT303010BCQualifiedEntityQualificationGrantingOrganization(new PRPMMT303010BCOrganization()));
        PRPMMT303010BCOrganization grantingOrg = qualifiedEntity.getQualificationGrantingOrganization().getValue();
        grantingOrg.setName(st(cred.getGrantingInstitution()));
        AD addr = new AD();
        grantingOrg.setAddr(addr);
        AdxpCountry country = new AdxpCountry();
        country.getContent().add(cred.getInstitutionCountryCode());
        AdxpState state = new AdxpState();
        state.getContent().add(cred.getInstitutionProvStateCode());
        AdxpCity city = new AdxpCity();
        city.getContent().add(cred.getInstitutionCity());
        addr.getContent().add(city);
        addr.getContent().add(state);
        addr.getContent().add(country);
        return relatedTo;
    }

    public static PRPMMT303010BCRelatedTo convertWorkLocation(WorkLocationAttribute workLocation) {
        PRPMMT303010BCRelatedTo relatedTo = new PRPMMT303010BCRelatedTo();
        relatedTo.setTypeCode(HL740Constants.TYPE_CODE_REL);
        PRPMMT303010BCAssignedEntity assignedEntity = new PRPMMT303010BCAssignedEntity();
        PRPMMT303010BCPrimaryPerformer performer = new PRPMMT303010BCPrimaryPerformer();
        PRPMMT303010BCActDefinitionOrEvent event = new PRPMMT303010BCActDefinitionOrEvent();
        PRPMMT303010BCLocation location = new PRPMMT303010BCLocation();
        PRPMMT303010BCServiceDeliveryLocation sdl = new PRPMMT303010BCServiceDeliveryLocation();
        PRPMMT303010BCPlace place = new PRPMMT303010BCPlace();

        sdl.setLocation(factory.createPRPMMT303010BCServiceDeliveryLocationLocation(place));
        location.setServiceDeliveryLocation(sdl);
        event.setLocation(factory.createPRPMMT303010BCActDefinitionOrEventLocation(location));
        performer.setActDefinitionOrEvent(event);
        assignedEntity.setPerformance(factory.createPRPMMT303010BCAssignedEntityPerformance(performer));
        relatedTo.setAssignedEntity(factory.createPRPMMT303010BCRelatedToAssignedEntity(assignedEntity));

        sdl.setId(ii(workLocation.getIdentifier(), "2.16.840.1.113883.3.40.1.10"));

        if (CollectionUtils.isNotEmpty(workLocation.getDetails())) {
            sdl.setCode(cs(workLocation.getDetails().get(0).getTypeCode()));
            sdl.setEffectiveTime(effectiveTime(workLocation.getDetails().get(0).getStartDate(), workLocation.getDetails().get(0).getExpiryDate()));
            place.setName(en(workLocation.getDetails().get(0).getName()));
            // work location details default flag
            boolean workLocationDetailsDefaultFlag = workLocation.getDetails().get(0).isDefaulted();
            location.setSequenceNumber(INT(workLocationDetailsDefaultFlag ? 1 : 0));
        }

        if (workLocation.getAddresses() != null) {
            for (AddressAttribute address : workLocation.getAddresses()) {
                sdl.getAddr().add(convertAddressToAD(address));
            }
        }
        if (workLocation.getPhoneNumbers() != null) {
            for (PhoneAttribute tele : workLocation.getPhoneNumbers()) {
                sdl.getTelecom().add(convertTelecommunicationToTEL(tele));
            }
        }
        if (workLocation.getEmailAddresses() != null) {
            for (EmailAttribute elec : workLocation.getEmailAddresses()) {
                sdl.getTelecom().add(convertElectronicAddressToTEL(elec));
            }
        }

        return relatedTo;
    }

    public static PRPMMT303010BCResponsibleParty convertCondition(ConditionAttribute condition) {
        PRPMMT303010BCResponsibleParty responsibleFor = new PRPMMT303010BCResponsibleParty();
        PRPMMT303010BCPrivilege priv = new PRPMMT303010BCPrivilege();
        responsibleFor.setPrivilege(priv);
        priv.setId(ii(condition.getId(), OidsUser.CONDITION_OID));
        priv.setCode(cs(condition.getUncodedType()));
        priv.setEffectiveTime(effectiveTime(condition.getStartDate(), condition.getExpiryDate()));
        priv.setConfidentialityCode(new CV());
        priv.getConfidentialityCode().setCode(condition.isRestricted() ? "R" : "N");
        priv.getConfidentialityCode().setOriginalText(ed(condition.getRestrictionExplanationText()));
        priv.setMoodCode("DEF");
        return responsibleFor;
    }

    public static void convertAuthor(DistributionRequestEntity in, PRPMIN303030CAMFMIMT700701BCControlActProcess controlActProcess) {
        MFMIMT700701BCAuthorOrPerformer author = new MFMIMT700701BCAuthorOrPerformer();
        author.setTypeCode("PRF");
        author.setAssignedPerson(new COCTMT090100BCAssignedPerson());
        author.getAssignedPerson().setId(ii(in.getSender().getUserId(), "2.16.840.1.113883.3.40.6.2"));
        if (author.getAssignedPerson().getRepresentedOrganization() == null) {
            COCTMT090100BCOrganization representedOrganization = new COCTMT090100BCOrganization();
            org.hl7.v3.m4_16.ST name = new org.hl7.v3.m4_16.ST();
            name.setText(in.getSender().getJurisdiction());
            representedOrganization.setName(name);
            author.getAssignedPerson().setRepresentedOrganization(factory.createCOCTMT090100BCAssignedPersonRepresentedOrganization(representedOrganization));
        }
        controlActProcess.getAuthorOrPerformer().add(author);
        author = new MFMIMT700701BCAuthorOrPerformer();
        author.setTypeCode("PRF");
        author.setAssignedPerson(new COCTMT090100BCAssignedPerson());
        author.getAssignedPerson().setId(ii(in.getResponsibleUserId(), "2.16.840.1.113883.3.40.6.1"));
        controlActProcess.getAuthorOrPerformer().add(author);
    }

    public static void convertSender(PRPMIN303030CAMCCIMT000100BCMessage out, DistributionRequestEntity in) {
        MCCIMT000100BCSender sender = out.getSender();
        sender.setTypeCode(CommunicationFunctionType.SND);
        sender.setTelecom(new TEL());
        sender.getTelecom().setValue(in.getSender().getNetworkAddress());
        sender.setDevice(new MCCIMT000100BCDevice());
        sender.getDevice().getId().add(ii(in.getSender().getFacilityId(), "2.16.840.1.113883.3.40.5.2"));
        sender.getDevice().setName(st(in.getSender().getSystemName()));
        MCCIMT000100BCAgent agent = new MCCIMT000100BCAgent();
        agent.setRepresentedOrganization(factory.createMCCIMT000100BCAgentRepresentedOrganization(new MCCIMT000100BCOrganization()));
        sender.getDevice().setAsAgent(factory.createMCCIMT000100BCDeviceAsAgent(agent));
        sender.getDevice().getAsAgent().getValue().getRepresentedOrganization().getValue().setId(ii(in.getSourceOrganizationChid(), "2.16.840.1.113883.3.40.4.2"));
    }

    public static void convertReceiver(PRPMIN303030CAMCCIMT000100BCMessage out, DistributionRequestEntity in) {
        MCCIMT000100BCReceiver receiver = out.getReceiver();
        receiver.setTypeCode(CommunicationFunctionType.RCV);
        receiver.setTelecom(new TEL());
        CommunicationFunction cf = in.getReceiver().get(0);
        receiver.getTelecom().setValue(cf.getNetworkAddress());
        receiver.setDevice(new MCCIMT000100BCDevice());
        receiver.getDevice().getId().add(ii(cf.getEnvironment(), "2.16.840.1.113883.3.40.1.14"));
        receiver.getDevice().getId().add(ii(cf.getFacilityId(), "2.16.840.1.113883.3.40.5.1"));
        receiver.getDevice().setName(st(cf.getSystemName()));
        MCCIMT000100BCAgent agent = new MCCIMT000100BCAgent();
        agent.setRepresentedOrganization(factory.createMCCIMT000100BCAgentRepresentedOrganization(new MCCIMT000100BCOrganization()));
        receiver.getDevice().setAsAgent(factory.createMCCIMT000100BCDeviceAsAgent(agent));
        receiver.getDevice().getAsAgent().getValue().getRepresentedOrganization().getValue().setId(ii(cf.getOrganizationId(), "2.16.840.1.113883.3.40.4.1"));
    }

    public static void convertHeaderFields(PRPMIN303030CAMCCIMT000100BCMessage out, DistributionRequestEntity in) {
        out.setId(ii(UUID.randomUUID().toString(), "2.16.840.1.113883.3.40.1.5"));
        out.setCreationTime(convertToTS(in.getCreationTime()));
        out.setVersionCode(cs(in.getVersionNumber()));
        out.setInteractionId(ii(in.getInteractionId(), "2.16.840.1.113883.3.40.3.1"));
        out.getProfileId().add(ii(in.getRelease(), "2.16.840.1.113883.3.40.1.7"));
        out.setProcessingCode(cs("T"));
        out.setProcessingModeCode(cs("T"));
        out.setAcceptAckCode(cs("NE"));
    }

    public static PRPMMT303010BCSubject1 convertDisciplinaryAction(DisciplinaryActionAttribute disciplinaryAction) {
        PRPMMT303010BCSubject1 subjectOf1 = new PRPMMT303010BCSubject1();
        PRPMMT303010BCDisciplinaryAction da = new PRPMMT303010BCDisciplinaryAction();
        subjectOf1.setDisciplinaryAction(da);
        da.setId(ii(disciplinaryAction.getIdentifier(), "2.16.840.1.113883.3.40.1.4"));
        da.setText(ed(disciplinaryAction.getDescription()));
        da.setEffectiveTime(effectiveTime(disciplinaryAction.getStartDate(), disciplinaryAction.getExpiryDate()));
        da.setConfidentialityCode(new CV());
        da.getConfidentialityCode().setCode(disciplinaryAction.isDisplay() ? "R" : "N");
        da.setClassCode("DISPACT");
        da.setMoodCode("EVN");
        return subjectOf1;
    }

    public static AD convertAddressToAD(AddressAttribute addr) {
        AD ad = new AD();
        PLREntityToHL7QueryResponseTypeConverter.convertTypeAndPurpose(ad, addr);
        for (String line : addr.getStreetAddressLines()) {
            AdxpStreetAddressLine street = new AdxpStreetAddressLine();
            street.setText(line);
            ad.getContent().add(street);
        }
        if (addr.getCity() != null) {
            AdxpCity city = new AdxpCity();
            city.setText(addr.getCity());
            ad.getContent().add(city);
        }
        if (addr.getProvince() != null) {
            AdxpState state = new AdxpState();
            state.setText(addr.getProvince());
            ad.getContent().add(state);
        }
        if (addr.getCountry() != null) {
            AdxpCountry country = new AdxpCountry();
            country.setText(addr.getCountry());
            ad.getContent().add(country);
        }
        if (addr.getPostalCode() != null) {
            AdxpPostalCode postal = new AdxpPostalCode();
            postal.setText(addr.getPostalCode());
            ad.getContent().add(postal);
        }
        ad.getContent().add(useablePeriod(addr.getStartDate(), addr.getExpiryDate()));
        return ad;
    }

    public static PN convertPersonNameToPN(PersonNameAttribute name) {
        PN pn = new PN();
        pn.getUse().add(ConverterUtils.reverseMapPersonNameUse(name.getUncodedType()));
        if (name.getLastName() != null) {
            EnFamily family = new EnFamily();
            family.setText(name.getLastName());
            pn.getContent().add(family);
        }
        if (name.getFirstName() != null) {
            EnGiven first = new EnGiven();
            first.setText(name.getFirstName());
            pn.getContent().add(first);
        }
        if (name.getMiddleName() != null) {
            EnGiven given = new EnGiven();
            given.setText(name.getMiddleName());
            pn.getContent().add(given);
        }
        if (name.getSecondMiddleName() != null) {
            EnGiven given = new EnGiven();
            given.setText(name.getSecondMiddleName());
            pn.getContent().add(given);
        }

        if (name.getSuffix() != null) {
            EnSuffix suffix = new EnSuffix();
            suffix.setText(name.getSuffix());
            pn.getContent().add(suffix);
        }
        if (name.getPrefix() != null) {
            EnPrefix prefix = new EnPrefix();
            prefix.setText(name.getPrefix());
            pn.getContent().add(prefix);
        }
        pn.getContent().add(effectiveTime(name.getStartDate(), name.getExpiryDate()));
        return pn;
    }

    public static TEL convertTelecommunicationToTEL(PhoneAttribute phone) {
        TEL tel = new TEL();
        String use = ConverterUtils.convertToHl7Use(phone.getCommunicationPurposeCode(), phone.getUncodedType());
        tel.getUse().add(use);
        String scheme = ConverterUtils.convertPlrTypeToHl7Scheme(phone.getUncodedType());
        StringBuilder buff = new StringBuilder();
        buff.append(StringUtils.defaultString(scheme));
        buff.append(StringUtils.defaultString(phone.getAreaCode()));
        buff.append(StringUtils.defaultString(phone.getNumber()));
        buff.append(StringUtils.defaultString(phone.getExtension()));
        tel.setValue(buff.toString());
        tel.getUseablePeriod().add(effectiveTime(phone.getStartDate(), phone.getExpiryDate()));
        return tel;
    }

    public static TEL convertElectronicAddressToTEL(EmailAttribute email) {
        TEL tel = new TEL();
        String use = ConverterUtils.convertToHl7Use(email.getCommunicationPurposeCode(), email.getUncodedType());
        tel.getUse().add(use);
        String scheme = ConverterUtils.convertPlrTypeToHl7Scheme(email.getUncodedType());
        tel.setValue(scheme + email.getAddress());
        tel.getUseablePeriod().add(effectiveTime(email.getStartDate(), email.getExpiryDate()));
        return tel;
    }

    protected static ST st(String value) {
        ST st = new ST();
        st.setText(value);
        return st;
    }

    protected static II ii(String value, String oid) {
        II ii = new II();
        ii.setExtension(value);
        ii.setRoot(oid);
        return ii;
    }

    protected static ED ed(String value) {
        ED ed = new ED();
        ed.setText(value);
        return ed;
    }

    protected static INT INT(int i) {
        INT in = new INT();
        in.setValue(BigInteger.valueOf(i));
        return in;
    }

    protected static EN en(String value) {
        EN en = new EN();
        en.getContent().add(value);
        return en;
    }

    protected static JAXBElement<SXCMTS> useablePeriod(Date effectiveStartDate, Date effectiveEndDate) {
        ObjectFactory objectFactory = new ObjectFactory();
        return objectFactory.createADUseablePeriod(effectiveTime(effectiveStartDate, effectiveEndDate));
    }

    protected static IVLTS effectiveTime(Date effectiveStartDate, Date effectiveEndDate) {
        IVLTS ivlts = new IVLTS();

        synchronized (DATE_TIME_FORMAT) {
            IVXBTS ts1 = new IVXBTS();
            ts1.setValue(effectiveStartDate == null ? null : DATE_TIME_FORMAT.format(effectiveStartDate));
            IVXBTS ts2 = new IVXBTS();
            if (effectiveEndDate == null) {
                ts2.setValue(null);
            } else if (ConverterUtils.isYearExpiryDateDefaultYear(effectiveEndDate)) {
                ts2.setValue("");
            } else {
                ts2.setValue(DATE_TIME_FORMAT.format(effectiveEndDate));
            }
            ivlts.getRest().add(factory.createIVLTSLow(ts1));
            if (ts2.getValue() != null && ts2.getValue().length() > 0) {
                ivlts.getRest().add(factory.createIVLTSHigh(ts2));
            }
        }
        return ivlts;
    }

    protected static CS cs(String value) {
        CS cs = new CS();
        cs.setCode(value);
        return cs;
    }

    protected static CE ce(String value) {
        CE ce = new CE();
        ce.setCode(value);
        return ce;
    }

    public static TS convertToTS(Date value) {
        synchronized (DATE_TIME_FORMAT) {
            TS ts = new TS();
            ts.setValue(DATE_TIME_FORMAT.format(value));
            return ts;
        }
    }

    public static String convertToDateTS(Date value) {
        synchronized (YEAR_MONTH_DAY_FORMAT) {
            return YEAR_MONTH_DAY_FORMAT.format(value);
        }
    }

}
