/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.orgprovtofhir;

import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.FhirContextFactory;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.ADDRESS_TYPE_MAIL;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.ADDRESS_TYPE_PHYSICAL;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.COMMON_PROVIDER_NUMBER;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.CURRENT_NAME_TYPE_CODE_USE_L;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.ORGANIZATION_IDENTIFIER_PLR;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.TELECOM_TYPE_EMAIL;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.TELECOM_TYPE_FAX;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.TELECOM_TYPE_FTP;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.TELECOM_TYPE_HTTP;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.TELECOM_TYPE_MOBILE;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.TELECOM_TYPE_MODEM;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.TELECOM_TYPE_PAGER;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.TELECOM_TYPE_TELEPHONE;
import ca.uhn.fhir.parser.DataFormatException;
import ca.uhn.fhir.parser.IParser;
import ca.uhn.fhir.validation.FhirValidator;
import ca.uhn.fhir.validation.SingleValidationMessage;
import ca.uhn.fhir.validation.ValidationResult;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hl7.fhir.r4.model.Address;
import org.hl7.fhir.r4.model.CodeableConcept;
import org.hl7.fhir.r4.model.ContactPoint;
import org.hl7.fhir.r4.model.Identifier;
import org.hl7.fhir.r4.model.Organization;
import org.hl7.fhir.r4.model.Period;
import org.hl7.fhir.r4.model.StringType;
import org.hl7.fhir.r4.model.UriType;

/**
 * Class for mapping components between PLR ORG Provider and FHIR Organization
 * resource.
 *
 * @author dan.stepanov
 */
public class MapOrgProviderToOrganizationFhir {

    private static final String CLASSNAME = MapOrgProviderToOrganizationFhir.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    ProviderDetails orgProviderDetails = new ProviderDetails();

    public String mapOrgProviderIdentifiersToOrgIdentifier(ProviderDetails orgProviderDetails) throws Exception {

        List<CollegeIdentifierDto> providerIdentifiers = new ArrayList<>();
        providerIdentifiers = orgProviderDetails.getIdentifiers();

        Organization orgPractFhir = new Organization();
        String jsonParsedOrganizationFhir = null;

        // get period time for each identifier ORGID/CPN
        Period orgIdentifierPeriod = new Period();

        List<Identifier> practOrgIdentifiers = new ArrayList<>();

        if (!providerIdentifiers.isEmpty()) {

            for (CollegeIdentifierDto orgProviderIdentifierDto : providerIdentifiers) {

                // create new FHIR identifiers for org provider ORGID/CPN identifiers
                Identifier identifierTypeORG = new Identifier();

                // get ORGID/CPN value from the identifier
                identifierTypeORG.setValue(orgProviderIdentifierDto.getIdentifier());

                // set FHIR period start/end date w/effective start/end dates from ORGID/CPN identifiers
                orgIdentifierPeriod.setStart(orgProviderIdentifierDto.getEffectiveStartDate());
                orgIdentifierPeriod.setEnd(orgProviderIdentifierDto.getEffectiveEndDate());

                // set period time for ORG identifier
                identifierTypeORG.setPeriod(orgIdentifierPeriod);

                // will require extensions for ORGID/CPN Identifier types
                CodeableConcept codeableConceptOrgid = new CodeableConcept();
                if (orgProviderIdentifierDto.getTypeCode().contains(COMMON_PROVIDER_NUMBER)) {
                    codeableConceptOrgid.setText(COMMON_PROVIDER_NUMBER);                    
                } 
                if (orgProviderIdentifierDto.getTypeCode().contains(ORGANIZATION_IDENTIFIER_PLR)) {
                    codeableConceptOrgid.setText(ORGANIZATION_IDENTIFIER_PLR);
                }                
                identifierTypeORG.setType(codeableConceptOrgid);

                // set use for ORGID/CPN identifiers -- usual for now
                Identifier.IdentifierUse identifierOrgIdUse = null;
                identifierOrgIdUse = identifierOrgIdUse.USUAL;
                identifierTypeORG.setUse(identifierOrgIdUse);

                // add all ORG identifiers to practIdentifiers list
                practOrgIdentifiers.add(identifierTypeORG);
            }
        }

        // URI Type - to check if needed?
        UriType uriType = new UriType();
        String uriFhirType = uriType.fhirType();

        // StringType - value (The portion of the identifier typically relevant to the user and which is unique within the context of the system)
        StringType valueOrgIdNumber = new StringType();

        // end reason code - will need an extension TODO!
        // data owner code/name - check if we need extensions - TODO!

        // set identifier list to FHIR Organization
        orgPractFhir.setIdentifier(practOrgIdentifiers);

        jsonParsedOrganizationFhir = parseEncodedOrgPractitionerJson(orgPractFhir);

        // validate new Organization resource w/identifier structure
        validateOrgPractitionerFhir(initializeFhirValidator(), jsonParsedOrganizationFhir);

        return jsonParsedOrganizationFhir;

    }

    public String mapOrgProviderNamesActiveToOrgNameAliasActive(ProviderDetails orgProviderDetails) throws Exception {

        List<OrgNameDto> orgProviderNames = new ArrayList<>();
        orgProviderNames = orgProviderDetails.getOrgNames();

        Organization orgCurrentNameFhir = new Organization();
        String jsonParsedOrganizationFhir = null;

        if (!orgProviderNames.isEmpty()) {

            for (OrgNameDto orgNameDto : orgProviderNames) {

                // check if ORG name type code is CURR legal Current known name
                // no need to check for ORG name type code CRED - Credential name confirmed are not used for orgs
                if (orgNameDto.getTypeCode().contains(CURRENT_NAME_TYPE_CODE_USE_L)) {

                    // get ORG name from the orgNameDto and set value in FHIR org name
                    orgCurrentNameFhir.setName(orgNameDto.getName());

                    // get ORG long name from the orgNameDto and add alias value in FHIR org alias
                    orgCurrentNameFhir.addAlias(orgNameDto.getLongName());

                    // get ORG active flag from the orgNameDto and set active flag value in FHIR org
                    orgCurrentNameFhir.setActive(orgNameDto.isActive());
                }
            }
        }

        // end reason code - will need an extension TODO!
        // missing start/end dates for org names - will need an extension TODO!
        // data owner code/name - check if we need extensions - TODO!
        jsonParsedOrganizationFhir = parseEncodedOrgPractitionerJson(orgCurrentNameFhir);

        // validate new Organization resource w/name structure
        validateOrgPractitionerFhir(initializeFhirValidator(), jsonParsedOrganizationFhir);

        return jsonParsedOrganizationFhir;

    }

    public String mapOrgProviderTelecomToOrgTelecom(ProviderDetails orgProviderDetails) throws Exception {

        List<TelecommunicationDto> orgProviderTelecoms = new ArrayList<>();
        orgProviderTelecoms = orgProviderDetails.getTelecommunication();

        Organization orgPractFhir = new Organization();
        String jsonParsedOrganizationFhir = null;

        // create Contact points for phone/fax/pager FHIR model
        ContactPoint telephoneFhir = new ContactPoint();
        ContactPoint faxFhir = new ContactPoint();
        ContactPoint pagerFhir = new ContactPoint();
        ContactPoint modemFhir = new ContactPoint();
        ContactPoint mobileFhir = new ContactPoint();

        // get period time
        Period fhirPeriodTelephone = new Period();
        Period fhirPeriodFax = new Period();
        Period fhirPeriodPager = new Period();
        Period fhirPeriodModem = new Period();
        Period fhirPeriodMobile = new Period();

        List<ContactPoint> orgTelecomsFhir = new ArrayList<>();

        if (!orgProviderTelecoms.isEmpty()) {

            for (TelecommunicationDto providerTelecomDto : orgProviderTelecoms) {
                // telecom type code phone
                if (providerTelecomDto.getTypeCode().contains(TELECOM_TYPE_TELEPHONE)) {

                    // get phone values from the TelecommunicationDto and set contact system point code
                    ContactPoint.ContactPointSystem contactPointSystemPhone = null;
                    contactPointSystemPhone = ContactPoint.ContactPointSystem.PHONE;
                    telephoneFhir.setSystem(contactPointSystemPhone);

                    StringBuilder phoneNbrFhir = new StringBuilder();
                    if (providerTelecomDto.getAreaCode() != null) {
                        phoneNbrFhir.append(providerTelecomDto.getAreaCode());
                    }
                    if (providerTelecomDto.getNumber() != null) {
                        phoneNbrFhir.append(providerTelecomDto.getNumber());
                    }
                    if (providerTelecomDto.getExtension() != null) {
                        phoneNbrFhir.append(providerTelecomDto.getExtension());
                    }

                    // set telephone FHIR value 
                    telephoneFhir.setValue(phoneNbrFhir.toString());

                    // add phone FHIR use - work purpose of this contact point -- TEMP!
                    // we need to add extensions to map communication purpose codes i.e. MC/OC/BC/HC etc...
                    ContactPoint.ContactPointUse phoneContactPointUse = null;
                    phoneContactPointUse = phoneContactPointUse.WORK;
                    telephoneFhir.setUse(phoneContactPointUse);

                    // set FHIR period start/end date w/effective start/end dates from telecom
                    fhirPeriodTelephone.setStart(providerTelecomDto.getEffectiveStartDate());
                    fhirPeriodTelephone.setEnd(providerTelecomDto.getEffectiveEndDate());

                    // set period time for telephone FHIR
                    telephoneFhir.setPeriod(fhirPeriodTelephone);
                }
                // telecom type code fax
                if (providerTelecomDto.getTypeCode().contains(TELECOM_TYPE_FAX)) {

                    // get fax values from the TelecommunicationDto and set contact system point code
                    ContactPoint.ContactPointSystem contactPointSystemFax = null;
                    contactPointSystemFax = ContactPoint.ContactPointSystem.FAX;
                    faxFhir.setSystem(contactPointSystemFax);

                    StringBuilder faxNbrFhir = new StringBuilder();
                    if (providerTelecomDto.getAreaCode() != null) {
                        faxNbrFhir.append(providerTelecomDto.getAreaCode());
                    }
                    if (providerTelecomDto.getNumber() != null) {
                        faxNbrFhir.append(providerTelecomDto.getNumber());
                    }
                    if (providerTelecomDto.getExtension() != null) {
                        faxNbrFhir.append(providerTelecomDto.getExtension());
                    }

                    // set fax FHIR value 
                    faxFhir.setValue(faxNbrFhir.toString());

                    // add fax FHIR use - purpose of this contact point -- TEMP!
                    // we need to add extensions to map communication purpose codes i.e. MC/OC/BC/HC etc...
                    ContactPoint.ContactPointUse faxContactPointUse = null;
                    faxContactPointUse = faxContactPointUse.WORK;
                    faxFhir.setUse(faxContactPointUse);

                    // set FHIR period start/end date w/effective start/end dates from telecom
                    fhirPeriodFax.setStart(providerTelecomDto.getEffectiveStartDate());
                    fhirPeriodFax.setEnd(providerTelecomDto.getEffectiveEndDate());

                    // set period time for fax FHIR
                    faxFhir.setPeriod(fhirPeriodFax);
                }
                // telecom type code pager
                if (providerTelecomDto.getTypeCode().contains(TELECOM_TYPE_PAGER)) {

                    // get pager values from the TelecommunicationDto and set contact system point code
                    ContactPoint.ContactPointSystem contactPointSystemPager = null;
                    contactPointSystemPager = ContactPoint.ContactPointSystem.PAGER;
                    pagerFhir.setSystem(contactPointSystemPager);

                    StringBuilder pagerNbrFhir = new StringBuilder();
                    if (providerTelecomDto.getAreaCode() != null) {
                        pagerNbrFhir.append(providerTelecomDto.getAreaCode());
                    }
                    if (providerTelecomDto.getNumber() != null) {
                        pagerNbrFhir.append(providerTelecomDto.getNumber());
                    }
                    if (providerTelecomDto.getExtension() != null) {
                        pagerNbrFhir.append(providerTelecomDto.getExtension());
                    }

                    // set pager FHIR value 
                    pagerFhir.setValue(pagerNbrFhir.toString());

                    // add pager FHIR use - temp purpose of this contact point -- TEMP!
                    // we need to add extensions to map communication purpose codes i.e. MC/OC/BC/HC etc...
                    ContactPoint.ContactPointUse pagerContactPointUse = null;
                    pagerContactPointUse = pagerContactPointUse.TEMP;
                    pagerFhir.setUse(pagerContactPointUse);

                    // set FHIR period start/end date w/effective start/end dates from telecom
                    fhirPeriodPager.setStart(providerTelecomDto.getEffectiveStartDate());
                    fhirPeriodPager.setEnd(providerTelecomDto.getEffectiveEndDate());

                    // set period time for pager FHIR
                    pagerFhir.setPeriod(fhirPeriodPager);
                }
                // telecom type code modem
                if (providerTelecomDto.getTypeCode().equalsIgnoreCase(TELECOM_TYPE_MODEM)) {

                    // get modem values from the TelecommunicationDto and set contact system point code
                    ContactPoint.ContactPointSystem contactPointSystemModem = null;
                    contactPointSystemModem = ContactPoint.ContactPointSystem.OTHER; // check for modem - TODO
                    modemFhir.setSystem(contactPointSystemModem);

                    StringBuilder modemNbrFhir = new StringBuilder();
                    if (providerTelecomDto.getAreaCode() != null) {
                        modemNbrFhir.append(providerTelecomDto.getAreaCode());
                    }
                    if (providerTelecomDto.getNumber() != null) {
                        modemNbrFhir.append(providerTelecomDto.getNumber());
                    }
                    if (providerTelecomDto.getExtension() != null) {
                        modemNbrFhir.append(providerTelecomDto.getExtension());
                    }

                    // set modem FHIR value 
                    modemFhir.setValue(modemNbrFhir.toString());

                    // add modem FHIR use - temp purpose of this contact point -- TEMP!
                    // we need to add extensions to map communication purpose codes i.e. MC/OC/BC/HC etc...
                    ContactPoint.ContactPointUse modemContactPointUse = null;
                    modemContactPointUse = modemContactPointUse.TEMP;
                    modemFhir.setUse(modemContactPointUse);

                    // set FHIR period start/end date w/effective start/end dates from telecom
                    fhirPeriodModem.setStart(providerTelecomDto.getEffectiveStartDate());
                    fhirPeriodModem.setEnd(providerTelecomDto.getEffectiveEndDate());

                    // set period time for modem FHIR
                    modemFhir.setPeriod(fhirPeriodModem);
                }
                // telecom type code mobile
                if (providerTelecomDto.getTypeCode().equalsIgnoreCase(TELECOM_TYPE_MOBILE)) {

                    // get mobile values from the TelecommunicationDto and set contact system point code
                    ContactPoint.ContactPointSystem contactPointSystemMobile = null;
                    contactPointSystemMobile = ContactPoint.ContactPointSystem.PHONE; // check for mobile - TODO
                    mobileFhir.setSystem(contactPointSystemMobile);

                    StringBuilder mobileNbrFhir = new StringBuilder();
                    if (providerTelecomDto.getAreaCode() != null) {
                        mobileNbrFhir.append(providerTelecomDto.getAreaCode());
                    }
                    if (providerTelecomDto.getNumber() != null) {
                        mobileNbrFhir.append(providerTelecomDto.getNumber());
                    }
                    if (providerTelecomDto.getExtension() != null) {
                        mobileNbrFhir.append(providerTelecomDto.getExtension());
                    }

                    // set mobile FHIR value 
                    mobileFhir.setValue(mobileNbrFhir.toString());

                    // add mobile FHIR use - mobile purpose of this contact point -- TEMP!
                    // we need to add extensions to map communication purpose codes i.e. MC/OC/BC/HC etc...
                    ContactPoint.ContactPointUse mobileContactPointUse = null;
                    mobileContactPointUse = mobileContactPointUse.MOBILE; // TODO check for mobile
                    mobileFhir.setUse(mobileContactPointUse);

                    // set FHIR period start/end date w/effective start/end dates from telecom
                    fhirPeriodMobile.setStart(providerTelecomDto.getEffectiveStartDate());
                    fhirPeriodMobile.setEnd(providerTelecomDto.getEffectiveEndDate());

                    // set period time for mobile FHIR
                    mobileFhir.setPeriod(fhirPeriodMobile);
                }
            }
        }

        // end reason code - will need an extension TODO!
        // data owner code/name - check if we need extensions - TODO!
        // telecom purpose codes will need extensions for telecom specific phone/fax/paget
        //add phone/fax/pager/mobile to Organization telecom list and set telecom list to FHIR Organization
        orgTelecomsFhir.add(telephoneFhir);
        orgTelecomsFhir.add(faxFhir);
        orgTelecomsFhir.add(pagerFhir);
        orgTelecomsFhir.add(modemFhir);
        orgTelecomsFhir.add(mobileFhir);

        orgPractFhir.setTelecom(orgTelecomsFhir);

        jsonParsedOrganizationFhir = parseEncodedOrgPractitionerJson(orgPractFhir);

        // validate new Org resource w/telecom structure
        validateOrgPractitionerFhir(initializeFhirValidator(), jsonParsedOrganizationFhir);

        return jsonParsedOrganizationFhir;

    }

    public String mapOrgProviderElectronicAddressToOrgTelecom(ProviderDetails orgProviderDetails) throws Exception {

        List<ElectronicAddressDto> orgProviderElectronicAddress = new ArrayList<>();
        orgProviderElectronicAddress = orgProviderDetails.getElectronicAddresses();

        Organization orgPractFhir = new Organization();
        String jsonParsedOrganizationFhir = null;

        // create Contact points for email/ftp/http FHIR model
        ContactPoint emailFhir = new ContactPoint();
        ContactPoint ftpFhir = new ContactPoint();
        ContactPoint httpFhir = new ContactPoint();

        // get period time
        Period fhirPeriodEmail = new Period();
        Period fhirPeriodFtp = new Period();
        Period fhirPeriodHttp = new Period();

        List<ContactPoint> orgElectronicAddressTelecomFhir = new ArrayList<>();

        if (!orgProviderElectronicAddress.isEmpty()) {

            for (ElectronicAddressDto electronicAddressDto : orgProviderElectronicAddress) {
                // telecom type code email
                if (electronicAddressDto.getTypeCode().contains(TELECOM_TYPE_EMAIL)) {

                    // get email values from the ElectronicAddressDto and set contact system point code
                    ContactPoint.ContactPointSystem contactPointSystemEmail = null;
                    contactPointSystemEmail = ContactPoint.ContactPointSystem.EMAIL;
                    emailFhir.setSystem(contactPointSystemEmail);

                    // set email FHIR value                     
                    if (electronicAddressDto.getAddress() != null && !electronicAddressDto.getAddress().isEmpty()) {
                        emailFhir.setValue(electronicAddressDto.getAddress());
                    }

                    // add email FHIR use - work purpose of this contact point -- TEMP!
                    // we need to add extensions to map communication purpose codes i.e. MC/OC/BC/HC etc...
                    ContactPoint.ContactPointUse emailContactPointUse = null;
                    emailContactPointUse = emailContactPointUse.WORK;
                    emailFhir.setUse(emailContactPointUse);

                    // set FHIR period start/end date w/effective start/end dates from telecom
                    fhirPeriodEmail.setStart(electronicAddressDto.getEffectiveStartDate());
                    fhirPeriodEmail.setEnd(electronicAddressDto.getEffectiveEndDate());

                    // set period time for email FHIR
                    emailFhir.setPeriod(fhirPeriodEmail);
                }
                // telecom type code ftp
                if (electronicAddressDto.getTypeCode().contains(TELECOM_TYPE_FTP)) {

                    // get ftp values from the ElectronicAddressDto and set contact system point code
                    ContactPoint.ContactPointSystem contactPointSystemFtp = null;
                    contactPointSystemFtp = ContactPoint.ContactPointSystem.OTHER;
                    ftpFhir.setSystem(contactPointSystemFtp);

                    // set ftp FHIR value                     
                    if (electronicAddressDto.getAddress() != null && !electronicAddressDto.getAddress().isEmpty()) {
                        ftpFhir.setValue(electronicAddressDto.getAddress());
                    }

                    // add ftp FHIR use - work purpose of this contact point -- TEMP!
                    // we need to add extensions to map communication purpose codes i.e. MC/OC/BC/HC etc...
                    ContactPoint.ContactPointUse ftpContactPointUse = null;
                    ftpContactPointUse = ftpContactPointUse.WORK;
                    ftpFhir.setUse(ftpContactPointUse);

                    // set FHIR period start/end date w/effective start/end dates from telecom
                    fhirPeriodFtp.setStart(electronicAddressDto.getEffectiveStartDate());
                    fhirPeriodFtp.setEnd(electronicAddressDto.getEffectiveEndDate());

                    // set period time for ftp FHIR
                    ftpFhir.setPeriod(fhirPeriodFtp);
                }
                // telecom type code http
                if (electronicAddressDto.getTypeCode().contains(TELECOM_TYPE_HTTP)) {

                    // get http values from the ElectronicAddressDto and set contact system point code
                    ContactPoint.ContactPointSystem contactPointSystemHttp = null;
                    contactPointSystemHttp = ContactPoint.ContactPointSystem.URL;
                    httpFhir.setSystem(contactPointSystemHttp);

                    // set http FHIR value                     
                    if (electronicAddressDto.getAddress() != null && !electronicAddressDto.getAddress().isEmpty()) {
                        httpFhir.setValue(electronicAddressDto.getAddress());
                    }

                    // add http FHIR use - work purpose of this contact point -- TEMP!
                    // we need to add extensions to map communication purpose codes i.e. MC/OC/BC/HC etc...
                    ContactPoint.ContactPointUse httpContactPointUse = null;
                    httpContactPointUse = httpContactPointUse.WORK;
                    httpFhir.setUse(httpContactPointUse);

                    // set FHIR period start/end date w/effective start/end dates from telecom
                    fhirPeriodHttp.setStart(electronicAddressDto.getEffectiveStartDate());
                    fhirPeriodHttp.setEnd(electronicAddressDto.getEffectiveEndDate());

                    // set period time for http FHIR
                    httpFhir.setPeriod(fhirPeriodHttp);
                }
            }
        }

        // add  email/ftp/http to Organization telecom list and set telecom list to FHIR Organization
        orgElectronicAddressTelecomFhir.add(emailFhir);
        orgElectronicAddressTelecomFhir.add(ftpFhir);
        orgElectronicAddressTelecomFhir.add(httpFhir);

        // end reason code - will need an extension TODO!
        // data owner code/name - check if we need extensions - TODO!
        // telecom purpose codes will need extensions for telecom specific email/ftp/http
        orgPractFhir.setTelecom(orgElectronicAddressTelecomFhir);

        jsonParsedOrganizationFhir = parseEncodedOrgPractitionerJson(orgPractFhir);

        // validate new Org resource w/telecom structure
        validateOrgPractitionerFhir(initializeFhirValidator(), jsonParsedOrganizationFhir);

        return jsonParsedOrganizationFhir;

    }

    public String mapOrgProviderAddressToOrganizationAddress(ProviderDetails orgProviderDetails) throws Exception {

        List<AddressDto> orgAddresses = new ArrayList<>();
        orgAddresses = orgProviderDetails.getAddresses();

        Organization orgPractFhir = new Organization();
        String jsonParsedOrganizationFhir = null;

        // create org address types mailing/physical FHIR model
        Address orgAddressMailFhir = new Address();
        Address orgAddressPhysicalFhir = new Address();

        // get period time for org address
        Period fhirPeriodAddressMail = new Period();
        Period fhirPeriodAddressPhysical = new Period();

        List<Address> orgAddressFhir = new ArrayList<>();

        if (!orgAddresses.isEmpty()) {

            for (AddressDto orgAddressDto : orgAddresses) {
                // map org address mailing
                if (orgAddressDto.getTypeCode().contains(ADDRESS_TYPE_MAIL)) {

                    // get org address city values from the AddressDto and set organization address mail type values
                    orgAddressMailFhir.setCity(orgAddressDto.getCity());
                    // get org address postal code values from the AddressDto and set organization address mail type values
                    orgAddressMailFhir.setPostalCode(orgAddressDto.getPostalCode());
                    // get org address province/state code values from the AddressDto and set organization address mail type values
                    orgAddressMailFhir.setState(orgAddressDto.getProvinceOrStateTxt());
                    // get org address country code values from the AddressDto and set organization address mail type values
                    orgAddressMailFhir.setCountry(orgAddressDto.getCountryCode());

                    // StringType - org address lines
                    StringType lineOneAddressVal = new StringType();
                    lineOneAddressVal.fromStringValue(orgAddressDto.getAddressLineOne());

                    StringType lineTwoAddressVal = new StringType();
                    lineTwoAddressVal.fromStringValue(orgAddressDto.getAddressLineTwo());

                    StringType lineThreeAddressVal = new StringType();
                    lineThreeAddressVal.fromStringValue(orgAddressDto.getAddressLineThree());

                    List<StringType> orgAddressLinesMail = new ArrayList<>();
                    orgAddressLinesMail.add(lineOneAddressVal);
                    orgAddressLinesMail.add(lineTwoAddressVal);
                    orgAddressLinesMail.add(lineThreeAddressVal);

                    orgAddressMailFhir.setLine(orgAddressLinesMail);

                    // add full org address mail
                    orgAddressMailFhir.setText(orgAddressDto.getFullAddress());

                    // add org address use FHIR required field -- TODO w/extension for specific PLR purpose codes
                    Address.AddressUse addressUseMailFhir = null;
                    addressUseMailFhir = addressUseMailFhir.WORK;
                    orgAddressMailFhir.setUse(addressUseMailFhir);

                    // set FHIR period start/end date w/effective start/end dates from org address
                    fhirPeriodAddressMail.setStart(orgAddressDto.getEffectiveStartDate());
                    fhirPeriodAddressMail.setEnd(orgAddressDto.getEffectiveEndDate());

                    // set period time for org addresss type mail
                    orgAddressMailFhir.setPeriod(fhirPeriodAddressMail);
                }
                // map org address physical
                if (orgAddressDto.getTypeCode().contains(ADDRESS_TYPE_PHYSICAL)) {

                    // get org address city values from the AddressDto and set organization address physical type values
                    orgAddressPhysicalFhir.setCity(orgAddressDto.getCity());
                    // get org address postal code values from the AddressDto and set organization address physical type values
                    orgAddressPhysicalFhir.setPostalCode(orgAddressDto.getPostalCode());
                    // get org address province/state code values from the AddressDto and set organization address physical type values
                    orgAddressPhysicalFhir.setState(orgAddressDto.getProvinceOrStateTxt());
                    // get org address country code values from the AddressDto and set organization address physical type values
                    orgAddressPhysicalFhir.setCountry(orgAddressDto.getCountryCode());

                    // StringType - org address lines
                    StringType lineOneAddressVal = new StringType();
                    lineOneAddressVal.fromStringValue(orgAddressDto.getAddressLineOne());

                    StringType lineTwoAddressVal = new StringType();
                    lineTwoAddressVal.fromStringValue(orgAddressDto.getAddressLineTwo());

                    StringType lineThreeAddressVal = new StringType();
                    lineThreeAddressVal.fromStringValue(orgAddressDto.getAddressLineThree());

                    List<StringType> orgAddressLinesPhysical = new ArrayList<>();
                    orgAddressLinesPhysical.add(lineOneAddressVal);
                    orgAddressLinesPhysical.add(lineTwoAddressVal);
                    orgAddressLinesPhysical.add(lineThreeAddressVal);

                    orgAddressPhysicalFhir.setLine(orgAddressLinesPhysical);

                    // add full org address physical
                    orgAddressPhysicalFhir.setText(orgAddressDto.getFullAddress());

                    // add address use FHIR required field -- TODO w/extension for specific PLR purpose codes
                    Address.AddressUse addressUsePhysicalFhir = null;
                    addressUsePhysicalFhir = addressUsePhysicalFhir.WORK;
                    orgAddressPhysicalFhir.setUse(addressUsePhysicalFhir);

                    // set FHIR period start/end date w/effective start/end dates from org address
                    fhirPeriodAddressPhysical.setStart(orgAddressDto.getEffectiveStartDate());
                    fhirPeriodAddressPhysical.setEnd(orgAddressDto.getEffectiveEndDate());

                    // set period time for org addresss type physical
                    orgAddressPhysicalFhir.setPeriod(fhirPeriodAddressPhysical);
                }
            }
        }

        //add mail/physical org addresses to Organization address list and set org address list to FHIR Organization
        orgAddressFhir.add(orgAddressMailFhir);
        orgAddressFhir.add(orgAddressPhysicalFhir);

        // end reason code - will need an extension TODO!
        // data owner code/name - check if we need extensions - TODO!
        orgPractFhir.setAddress(orgAddressFhir);

        jsonParsedOrganizationFhir = parseEncodedOrgPractitionerJson(orgPractFhir);

        // validate new Organization resource w/address structure
        validateOrgPractitionerFhir(initializeFhirValidator(), jsonParsedOrganizationFhir);

        return jsonParsedOrganizationFhir;

    }

    public FhirValidator initializeFhirValidator() {
        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator validator = FhirContextFactory.forR4().newValidator();
        /*
        * set FHIR validator to validate against standard schema during validation
         */
        validator.setValidateAgainstStandardSchema(true);
        return validator;
    }

    public boolean validateOrgPractitionerFhir(FhirValidator validator, String parsedOrgPracFhir) throws DataFormatException {
        // Validate
        ValidationResult validResult = null;
        boolean isOrgPractResultValid = false;

        try {
            validResult = validator.validateWithResult(parsedOrgPracFhir);
        } catch (DataFormatException dfe) {
            dfe.printStackTrace();
//            throw new RuntimeException(dfe);            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        if (validResult != null && validResult.isSuccessful()) {
            isOrgPractResultValid = true;
        } else if (validResult != null && !validResult.isSuccessful()) {
            // display the validation issues
            for (SingleValidationMessage validMsg : validResult.getMessages()) {

                LOG.log(Level.INFO, "MapProviderToOrganizationFhir validation issue severity is: {0} and location is: {1} and message is: {2}.",
                        new Object[]{validMsg.getSeverity(), validMsg.getLocationString(), validMsg.getMessage()});
            }
        }

        LOG.log(Level.INFO, "MapProviderToOrganizationFhir validatePractitionerFhir isOrgPractResultValid is: {0}.",
                new Object[]{isOrgPractResultValid});

        return isOrgPractResultValid;
    }

    public String parseEncodedOrgPractitionerJson(Organization orgFhir) throws DataFormatException {
        // Instantiate a new JSON parser
        IParser jparser = FhirContextFactory.forR4().newJsonParser();

        // Serialize it
        String serializedOrgPrac = jparser.encodeResourceToString(orgFhir);

        LOG.log(Level.INFO, "MapProviderToOrganizationFhir parseEncodedOrgPractitionerJson serializedPrac is: {0}.", new Object[]{serializedOrgPrac});

        return serializedOrgPrac;
    }

}
