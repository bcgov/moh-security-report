/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.esb.service.query;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.QueryResponse;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto;
import ca.uhn.fhir.context.FhirContext;
import ca.uhn.fhir.parser.IParser;
import java.util.Date;
import java.util.UUID;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.hl7.fhir.r4.model.Address;
import org.hl7.fhir.r4.model.Address.AddressType;
import org.hl7.fhir.r4.model.Address.AddressUse;
import org.hl7.fhir.r4.model.Bundle;
import org.hl7.fhir.r4.model.Bundle.BundleEntryComponent;
import org.hl7.fhir.r4.model.Bundle.BundleLinkComponent;
import org.hl7.fhir.r4.model.Bundle.BundleType;
import org.hl7.fhir.r4.model.CodeableConcept;
import org.hl7.fhir.r4.model.Coding;
import org.hl7.fhir.r4.model.ContactPoint;
import org.hl7.fhir.r4.model.HumanName;
import org.hl7.fhir.r4.model.Identifier;
import org.hl7.fhir.r4.model.Location;
import org.hl7.fhir.r4.model.OperationOutcome;
import org.hl7.fhir.r4.model.OperationOutcome.IssueSeverity;
import org.hl7.fhir.r4.model.OperationOutcome.IssueType;
import org.hl7.fhir.r4.model.OperationOutcome.OperationOutcomeIssueComponent;
import org.hl7.fhir.r4.model.Period;
import org.hl7.fhir.r4.model.Practitioner;
import org.hl7.fhir.r4.model.PractitionerRole;
import org.hl7.fhir.r4.model.Reference;
import org.hl7.fhir.r4.model.StringType;

/**
 *
 * @author jonathan.wiebe
 */
public class FHIRProcessorQueryOut implements Processor {

    FhirContext ctx = FhirContext.forR4();

    @Override
    public void process(Exchange exchng) throws Exception {
        IParser jparser = ctx.newJsonParser();
        IParser xparser = ctx.newXmlParser();

        QueryResponse response = exchng.getIn().getBody(QueryResponse.class);
        Bundle bundle = new Bundle();
        bundle.setType(BundleType.SEARCHSET);

        populateAck(response, bundle);
        populate(response, bundle);

        String contentType = exchng.getIn().getHeader("contentType", String.class);
        String bString = "not ok";
        if (contentType != null) {
            if (contentType.contains("xml")) {
                bString = xparser.setPrettyPrint(true).encodeResourceToString(bundle);
            } else {
                bString = jparser.setPrettyPrint(true).encodeResourceToString(bundle);
            }
        }
        exchng.getOut().setBody(bString, String.class);
    }

    private void populate(QueryResponse response, Bundle bundle) {

        for (ProviderDetails pd : response.getProviderDetails()) {
            Practitioner prac = new Practitioner();
            PractitionerRole pracRole = new PractitionerRole();
            String practitionerpath = "";

            for (ExpertiseDto ex : pd.getExpertise()) {
                pracRole.getSpecialty().add(codeCon(ex.getTypeCode(), ex.getType()));
            }

            for (WorkLocationDto wl : pd.getWorkLocationList()) {
                Location loc = new Location();
                loc.setName(wl.getWorkLocationDetails().get(0).getName());
                loc.getType().add(codeCon(wl.getWorkLocationDetails().get(0).getTypeCode()));
                for (TelecommunicationDto tele : wl.getTelecommunications()) {
                    ContactPoint cp = new ContactPoint();
                    cp.setValue(tele.getAreaCode() + tele.getNumber() + "x" + tele.getExtension());
                    cp.setUse(ContactPoint.ContactPointUse.WORK);
                    cp.setSystem(ContactPoint.ContactPointSystem.PHONE);
                    cp.setPeriod(period(tele.getEffectiveStartDate(), tele.getEffectiveEndDate()));
                    loc.getTelecom().add(cp);
                }
                String uuid = UUID.randomUUID().toString();
                Reference reference = new Reference();
                reference.setReference(uuid);
                pracRole.getLocation().add(reference);
                loc.setId(uuid);
                {
                    BundleEntryComponent bec = new BundleEntryComponent();
                    bec.setResource(loc);
                    bundle.getEntry().add(bec);
                }
            }

            for (CollegeIdentifierDto i : pd.getIdentifiers()) {
                Identifier FHIRi = new Identifier();
                FHIRi.setValue(i.getIdentifier());
                FHIRi.setType(codeCon(i.getTypeCode(), i.getType()));
                if (practitionerpath.isEmpty()) {
                    practitionerpath = "/" + i.getIdentifier() + "?idType=" + i.getTypeCode();
                }
                prac.getIdentifier().add(FHIRi);
            }

            for (PersonNameDto n : pd.getIndNames()) {
                HumanName name = new HumanName();
                name.setFamily(pd.getIndNames().get(0).getLastName());
                name.getGiven().add(new StringType(pd.getIndNames().get(0).getFirstName()));
                prac.getName().add(name);
            }

            for (AddressDto a : pd.getAddresses()) {
                Address addr = new Address();
                addr.getLine().add(new StringType(pd.getAddresses().get(0).getAddressLineOne()));
                addr.setType(a.getTypeCode().equals("M") ? AddressType.POSTAL : AddressType.PHYSICAL);
                addr.setUse(a.getPostalCode().equals("BC") ? AddressUse.WORK : AddressUse.HOME);
                addr.setCity(a.getCity());
                addr.setState(a.getProvinceOrStateTxt());
                addr.setPostalCode(a.getPostalCode());
                addr.setPeriod(period(a.getEffectiveStartDate(), a.getEffectiveEndDate()));
                prac.getAddress().add(addr);
            }
            String uuid = UUID.randomUUID().toString();
            Reference reference = new Reference();
            reference.setReference(uuid);
            pracRole.setPractitioner(reference);
            prac.setId(uuid);
            {
                BundleEntryComponent bec = new BundleEntryComponent();
                bec.setResource(pracRole);
                bec.setFullUrl("Bundle" + practitionerpath);
                bundle.getEntry().add(bec);
            }
            {
                BundleEntryComponent bec = new BundleEntryComponent();
                bec.setResource(prac);
                bundle.getEntry().add(bec);
            }
        }
    }

    private Period period(Date a, Date b) {
        Period p = new Period();
        p.setStart(a);
        p.setEnd(b);
        return p;
    }

    private void populateAck(QueryResponse response, Bundle bundle) {
        for (Acknowledgment ack : response.getAcknowledgments()) {
            OperationOutcome oo = new OperationOutcome();
            OperationOutcomeIssueComponent ooic = new OperationOutcomeIssueComponent();
            ooic.setDetails(codeCon(ack.getMsgCode(), ack.getMsgText()));
            oo.getIssue().add(ooic);
            if (ack.getMsgCode().contains("7067")) {
                ooic.setCode(IssueType.BUSINESSRULE);
                ooic.setSeverity(IssueSeverity.INFORMATION);
            } else {
                ooic.setCode(IssueType.EXCEPTION);
                ooic.setSeverity(IssueSeverity.ERROR);
            }

            BundleEntryComponent bec = new BundleEntryComponent();
            bec.setResource(oo);
            bundle.getEntry().add(bec);

        }
    }

    private CodeableConcept codeCon(String code, String msg) {
        CodeableConcept cc = codeCon(code);
        cc.setText(msg);
        return cc;
    }

    private CodeableConcept codeCon(String code) {
        CodeableConcept cc = new CodeableConcept();
        Coding c = new Coding();
        cc.getCoding().add(c);
        c.setCode(code);
        return cc;
    }

}
