package ca.bc.gov.moh.hsa.plr.converter.dtotohl7;

import ca.bc.gov.moh.hsa.entity.AddressAttribute;
import ca.bc.gov.moh.hsa.entity.Attribute;
import ca.bc.gov.moh.hsa.entity.CommunicationFunction;
import ca.bc.gov.moh.hsa.entity.DateAttribute;
import ca.bc.gov.moh.hsa.entity.IdentifierAttribute;
import ca.bc.gov.moh.hsa.entity.Person;
import ca.bc.gov.moh.hsa.entity.PersonNameAttribute;
import ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils;
import ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser;
import ca.bc.gov.moh.hsa.plr.entity.transaction.AcknowledgementEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ConditionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.CredentialAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.DisciplinaryActionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ExpertiseAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.MaintainProviderResponseEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.NoteAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderRelationshipAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.StatusAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.WorkLocationAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.WorkLocationDetailsAttribute;
import java.io.Serializable;
import java.math.BigInteger;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import javax.xml.bind.JAXBElement;
import org.apache.commons.lang.StringUtils;
import org.hl7.v3.m4_0.AD;
import org.hl7.v3.m4_0.AdxpCity;
import org.hl7.v3.m4_0.AdxpCountry;
import org.hl7.v3.m4_0.AdxpPostalCode;
import org.hl7.v3.m4_0.AdxpState;
import org.hl7.v3.m4_0.AdxpStreetAddressLine;
import org.hl7.v3.m4_0.CD;
import org.hl7.v3.m4_0.CE;
import org.hl7.v3.m4_0.COCTMT090003AssignedEntity;
import org.hl7.v3.m4_0.COCTMT090100AssignedPerson;
import org.hl7.v3.m4_0.COCTMT150000Organization;
import org.hl7.v3.m4_0.CR;
import org.hl7.v3.m4_0.CS;
import org.hl7.v3.m4_0.ED;
import org.hl7.v3.m4_0.EN;
import org.hl7.v3.m4_0.EnFamily;
import org.hl7.v3.m4_0.EnGiven;
import org.hl7.v3.m4_0.EnPrefix;
import org.hl7.v3.m4_0.EnSuffix;
import org.hl7.v3.m4_0.II;
import org.hl7.v3.m4_0.INT;
import org.hl7.v3.m4_0.IVLTS;
import org.hl7.v3.m4_0.IVXBTS;
import org.hl7.v3.m4_0.MCCIMT000300Acknowledgement;
import org.hl7.v3.m4_0.MCCIMT000300AcknowledgementDetail;
import org.hl7.v3.m4_0.MCCIMT000300Agent;
import org.hl7.v3.m4_0.MCCIMT000300Device;
import org.hl7.v3.m4_0.MCCIMT000300Organization;
import org.hl7.v3.m4_0.MCCIMT000300Receiver;
import org.hl7.v3.m4_0.MCCIMT000300Sender;
import org.hl7.v3.m4_0.MCCIMT000300TargetMessage;
import org.hl7.v3.m4_0.MFMIMT700701Author2;
import org.hl7.v3.m4_0.MFMIMT700701AuthorOrPerformer;
import org.hl7.v3.m4_0.MFMIMT700701Custodian;
import org.hl7.v3.m4_0.ON;
import org.hl7.v3.m4_0.ObjectFactory;
import org.hl7.v3.m4_0.PRPMIN301011MCCIMT000300Message;
import org.hl7.v3.m4_0.PRPMIN301011MFMIMT700701ControlActProcess;
import org.hl7.v3.m4_0.PRPMIN301011MFMIMT700701RegistrationEvent;
import org.hl7.v3.m4_0.PRPMIN301011MFMIMT700701Subject1;
import org.hl7.v3.m4_0.PRPMIN301011MFMIMT700701Subject2;
import org.hl7.v3.m4_0.PRPMMT309000ActDefinitionOrEvent;
import org.hl7.v3.m4_0.PRPMMT309000ActDefinitionOrEventLocation;
import org.hl7.v3.m4_0.PRPMMT309000AssignedEntity;
import org.hl7.v3.m4_0.PRPMMT309000AssignedEntity2;
import org.hl7.v3.m4_0.PRPMMT309000ControlActEvent;
import org.hl7.v3.m4_0.PRPMMT309000Custodian;
import org.hl7.v3.m4_0.PRPMMT309000DisciplinaryAction;
import org.hl7.v3.m4_0.PRPMMT309000HealthCareProvider;
import org.hl7.v3.m4_0.PRPMMT309000HealthCareProviderId;
import org.hl7.v3.m4_0.PRPMMT309000HealthCareProviderIdUpdateMode;
import org.hl7.v3.m4_0.PRPMMT309000HealthCareProviderResponsibleFor;
import org.hl7.v3.m4_0.PRPMMT309000HealthCareProviderResponsibleForUpdateMode;
import org.hl7.v3.m4_0.PRPMMT309000HealthCareProviderSubjectOf1;
import org.hl7.v3.m4_0.PRPMMT309000HealthCareProviderSubjectOf1UpdateMode;
import org.hl7.v3.m4_0.PRPMMT309000HealthCareProviderSubjectOf4;
import org.hl7.v3.m4_0.PRPMMT309000HealthCareProviderSubjectOf4UpdateMode;
import org.hl7.v3.m4_0.PRPMMT309000Jurisdiction;
import org.hl7.v3.m4_0.PRPMMT309000Note;
import org.hl7.v3.m4_0.PRPMMT309000Organization;
import org.hl7.v3.m4_0.PRPMMT309000Place;
import org.hl7.v3.m4_0.PRPMMT309000PrimaryPerformer3;
import org.hl7.v3.m4_0.PRPMMT309000PrincipalPerson;
import org.hl7.v3.m4_0.PRPMMT309000PrincipalPersonAdministrativeGenderCode;
import org.hl7.v3.m4_0.PRPMMT309000PrincipalPersonBirthTime;
import org.hl7.v3.m4_0.PRPMMT309000PrincipalPersonBirthplace;
import org.hl7.v3.m4_0.PRPMMT309000PrincipalPersonDeceasedTime;
import org.hl7.v3.m4_0.PRPMMT309000PrincipalPersonName;
import org.hl7.v3.m4_0.PRPMMT309000PrincipalPersonNameUpdateMode;
import org.hl7.v3.m4_0.PRPMMT309000Privilege;
import org.hl7.v3.m4_0.PRPMMT309000PrivilegeCategorization;
import org.hl7.v3.m4_0.PRPMMT309000RelatedTo;
import org.hl7.v3.m4_0.PRPMMT309000RoleActivation;
import org.hl7.v3.m4_0.PRPMMT309000ServiceDeliveryLocation;
import org.hl7.v3.m4_0.PRPMMT309000Subject3;
import org.hl7.v3.m4_0.PRPMMT309000Subject4;
import org.hl7.v3.m4_0.PRPMMT309000Subject6;
import org.hl7.v3.m4_0.PRPMMT309000TerritorialAuthority;
import org.hl7.v3.m4_0.QTY;
import org.hl7.v3.m4_0.ST;
import org.hl7.v3.m4_0.TEL;
import org.hl7.v3.m4_0.TS;
import org.springframework.util.CollectionUtils;

/**
 * Converts internal ESB DTOs to HL7 Add Provider Messages.
 * 
 * Should be identical to PLREntityToHL7UpdateTypeConverter except where types
 * differ.
 * 
 * @see PLREntityToHL7UpdateTypeConverter
 *
 * @author conrad.gustafson
 */
public class PLREntityToHL7AddTypeConverter implements OidsUser, HL740Constants {

    protected static final ObjectFactory objectFactory = new ObjectFactory();

    public static PRPMIN301011MCCIMT000300Message convertMaintainProviderResponseEntityToAdd40(MaintainProviderResponseEntity entity) throws ParseException {
        return convertMaintainProviderResponseEntityToAdd40(entity, false);
    }

    public static PRPMIN301011MCCIMT000300Message convertMaintainProviderResponseEntityToAdd40(MaintainProviderResponseEntity entity,
            boolean excludeUpdateFields) throws ParseException {
        PRPMIN301011MCCIMT000300Message convertedMessage = new PRPMIN301011MCCIMT000300Message();

        setHeaders(entity, convertedMessage);
        setAcknowledgements(entity, convertedMessage.getAcknowledgement());
        setSender(entity, convertedMessage);
        setReceiver(entity, convertedMessage);
        String receivingJurisdictionCode = entity.getReceiver().get(0).getJurisdiction();
        if (entity.getProvider() != null) {
            setControlActProcess(entity, convertedMessage, receivingJurisdictionCode, excludeUpdateFields);
        }

        return convertedMessage;
    }

    public static void setHeaders(MaintainProviderResponseEntity entity, PRPMIN301011MCCIMT000300Message convertedMessage) throws ParseException {
        // Set ID
        convertedMessage.setId(new II(MESSAGE_OID, entity.getMessageId()));

        // Set creation time
        TS creationTimeTS = new TS();
        Date creationTimeDate = entity.getCreationTime();
        creationTimeTS.setValue(ConverterUtils.convertFromDateToHL7String(creationTimeDate));
        convertedMessage.setCreationTime(creationTimeTS);

        // Set interaction ID
        convertedMessage.setInteractionId(new II(INTERACTION_OID, entity.getInteractionId()));
        CS versionCode = new CS("3.0");
        JAXBElement<CS> versionCodeElement = objectFactory.createMCCIMT200100BatchVersionCode(versionCode);
        convertedMessage.setVersionCode(versionCodeElement);

        // Set static variables
        convertedMessage.setProcessingCode(new CS(PROCESSING_CODE));
        convertedMessage.setProcessingModeCode(new CS(PROCESSING_MODE_CODE));
//        convertedMessage.setResponseModeCode(new CS(RESPONSE_MODE_CODE));
        convertedMessage.setAcceptAckCode(new CS(ACCEPT_ACK_CODE));
    }

    private static void setSender(MaintainProviderResponseEntity entity, PRPMIN301011MCCIMT000300Message convertedMessage) {
        final CommunicationFunction senderEntity = entity.getSender();
        MCCIMT000300Sender sender = new MCCIMT000300Sender();

        if (senderEntity.getNetworkAddress() != null) {
            JAXBElement<TEL> telecomElement = objectFactory.createMCCIMT200100SenderTelecom(new TEL(senderEntity.getNetworkAddress()));
            sender.setTelecom(telecomElement);
        }

        MCCIMT000300Device createDevice = createDevice(SENDER_FACILITY_OID, senderEntity.getFacilityId(), senderEntity.getSystemName(), senderEntity.getEnvironment(), senderEntity.getOrganizationId(), SENDER_ORGANIZATION_OID);
        if (!CollectionUtils.isEmpty(createDevice.getId())) {
            sender.setDevice(createDevice);
        }

        // PLR-2169: Add the sender element only if it contains data to pass schema validation.
        if (sender.getDevice() != null || sender.getTelecom() != null) {
            convertedMessage.setSender(sender);
        }
    }
    
    private static void setReceiver(MaintainProviderResponseEntity entity, PRPMIN301011MCCIMT000300Message convertedMessage) {

        List<CommunicationFunction> receiverEntityList = entity.getReceiver();
        if (!CollectionUtils.isEmpty(receiverEntityList)) {
            MCCIMT000300Receiver receiver = new MCCIMT000300Receiver();
            final CommunicationFunction receiverEntity = receiverEntityList.get(0);

            if (receiverEntity.getNetworkAddress() != null) {
                JAXBElement<TEL> telecomElement = objectFactory.createMCCIMT200100ReceiverTelecom(new TEL(receiverEntity.getNetworkAddress()));
                receiver.setTelecom(telecomElement);
            }

            MCCIMT000300Device device = createDevice(RECEIVER_FACILITY_OID, receiverEntity.getFacilityId(), receiverEntity.getSystemName(), receiverEntity.getEnvironment(), receiverEntity.getOrganizationId(), RECEIVER_ORGANIZATION_OID);
            if (!CollectionUtils.isEmpty(device.getId())) {
                receiver.setDevice(device);
            }

            // PLR-2169: Add the receiver element only if it contains data to pass schema validation.
            if (receiver.getDevice() != null || receiver.getTelecom() != null) {
                convertedMessage.getReceiver().add(receiver);
            } else {
                // PLR-2169: Add a null element in order to generate an xsi:nil element and pass schema validation.
                convertedMessage.getReceiver().add(null);
            }
        }
    }

    private static MCCIMT000300Device createDevice(String deviceIdRoot, String facilityId, String systemName, String environment, String organizationId, String organizationIdRoot) {
        MCCIMT000300Device device = new MCCIMT000300Device();

        List<II> idList = device.getId();

        if (!StringUtils.isEmpty(deviceIdRoot) && !StringUtils.isEmpty(environment)) {
            idList.add(new II(ENVIRONMENT_OID, environment));
        }

        if (!StringUtils.isEmpty(facilityId)) {
            idList.add(new II(deviceIdRoot, facilityId));
        }

        if (!StringUtils.isEmpty(systemName)) {
            List<EN> nameList = device.getName();
            nameList.add(new EN(systemName));
        }

        if (!StringUtils.isEmpty(organizationId)) {
            MCCIMT000300Agent agencyFor = new MCCIMT000300Agent();
            MCCIMT000300Organization representedOrganization = new MCCIMT000300Organization();

            List<II> representedOrganizationIdList = representedOrganization.getId();
            representedOrganizationIdList.add(new II(organizationIdRoot, organizationId));
            JAXBElement<MCCIMT000300Organization> representedOrganizationElement = objectFactory.createMCCIMT000300AgentRepresentedOrganization(representedOrganization);
            agencyFor.setRepresentedOrganization(representedOrganizationElement);
            JAXBElement<MCCIMT000300Agent> agencyForElement = objectFactory.createMCCIMT000300DeviceAgencyFor(agencyFor);
            device.setAgencyFor(agencyForElement);
        }

        return device;
    }

    private static void setControlActProcess(MaintainProviderResponseEntity entity,
            PRPMIN301011MCCIMT000300Message convertedMessage,
            String receivingJurisdictionCode,
            boolean excludeUpdateFields) throws ParseException {
        PRPMIN301011MFMIMT700701ControlActProcess controlActProcess = new PRPMIN301011MFMIMT700701ControlActProcess();
        controlActProcess.setMoodCode(CONTROL_ACT_PROCESS_MOOD_CODE);
        convertedMessage.setControlActProcess(controlActProcess);

        // need to add a priority in order for the same message to 
        // be valid in version 4.04
        List<CE> priorityCodeList = controlActProcess.getPriorityCode();
        CE priorityCode = new CE();
        priorityCode.setCode(DEFAULT_PRIORITY_CODE);
        priorityCodeList.add(priorityCode);

        List<MFMIMT700701AuthorOrPerformer> authorOrPerformerList = controlActProcess.getAuthorOrPerformer();

        MFMIMT700701AuthorOrPerformer performer = new MFMIMT700701AuthorOrPerformer();
        performer.setTypeCode(TYPE_CODE_PERFORMER);
        COCTMT090100AssignedPerson performerAssignedPerson = new COCTMT090100AssignedPerson();
        performerAssignedPerson.getClassCode().add(CLASS_CODE_ASSIGNED);
        List<II> performerAssignedPersonIdList = performerAssignedPerson.getId();
        performerAssignedPersonIdList.add(new II(SOURCE_USER_OID, entity.getProvider().getUserId()));
        JAXBElement<COCTMT090100AssignedPerson> performerAssignedPersonEntity = objectFactory.createMFMIMT700701AuthorOrPerformerAssignedPerson(performerAssignedPerson);
        performer.setAssignedPerson(performerAssignedPersonEntity);
        authorOrPerformerList.add(performer);

        String sourceJurisdiction = entity.getSender().getJurisdiction();
        if (!StringUtils.isEmpty(sourceJurisdiction)) {
            COCTMT150000Organization representedOrganization = new COCTMT150000Organization();
            representedOrganization.getId().add(new II());
            representedOrganization.getName().add(new ON(sourceJurisdiction));
            JAXBElement<COCTMT150000Organization> representedOrganizationElement = objectFactory.createCOCTMT090100AssignedPersonRepresentedOrganization(representedOrganization);
            performerAssignedPerson.setRepresentedOrganization(representedOrganizationElement);
        }

        MFMIMT700701AuthorOrPerformer author = new MFMIMT700701AuthorOrPerformer();
        author.setTypeCode(TYPE_CODE_AUTHOR);
        COCTMT090100AssignedPerson authorAssignedPerson = new COCTMT090100AssignedPerson();
        authorAssignedPerson.getClassCode().add(CLASS_CODE_ASSIGNED);
        List<II> authorAssignedPersonIdList = authorAssignedPerson.getId();
        authorAssignedPersonIdList.add(new II(RESPONSIBLE_PERSON_USER_OID, entity.getResponsibleUserId()));
        JAXBElement<COCTMT090100AssignedPerson> authorAssignedPersonEntity = objectFactory.createMFMIMT700701AuthorOrPerformerAssignedPerson(authorAssignedPerson);
        author.setAssignedPerson(authorAssignedPersonEntity);
        authorOrPerformerList.add(author);

        List<PRPMIN301011MFMIMT700701Subject1> subjectList = controlActProcess.getSubject();
        PRPMIN301011MFMIMT700701Subject1 subject = new PRPMIN301011MFMIMT700701Subject1();
        subjectList.add(subject);

        PRPMIN301011MFMIMT700701RegistrationEvent registrationEvent = new PRPMIN301011MFMIMT700701RegistrationEvent();
        subject.setRegistrationEvent(registrationEvent);

        // Have to have at least one each of these to validate
        List<II> registrationEventIds = registrationEvent.getId();
        registrationEventIds.add(new II(null, null));
        registrationEvent.setStatusCode(new CS(null));

        MFMIMT700701Author2 registrationEventAuthor = new MFMIMT700701Author2();
        JAXBElement<MFMIMT700701Author2> authorElement = objectFactory.createPRPMIN301011MFMIMT700701RegistrationEventAuthor(registrationEventAuthor);
        registrationEvent.setAuthor(authorElement);

        COCTMT090003AssignedEntity registrationEventAuthorAssignedEntity = new COCTMT090003AssignedEntity();
        registrationEventAuthor.setAssignedEntity(registrationEventAuthorAssignedEntity);
        final ProviderAttribute providerEntity = entity.getProvider();

        String messageUserId = entity.getSender().getUserId();
        List<II> authorAssignedEntityIdList = registrationEventAuthorAssignedEntity.getId();
        authorAssignedEntityIdList.add(new II(REGISTRY_USER_ORG_OID, messageUserId));

        MFMIMT700701Custodian custodian = new MFMIMT700701Custodian();
        COCTMT090003AssignedEntity custodianAssignedEntity = new COCTMT090003AssignedEntity();
        custodian.setAssignedEntity(custodianAssignedEntity);
        List<String> custodianTypeCodeList = custodian.getTypeCode();
        custodianTypeCodeList.add(TYPE_CODE_CUSTODIAN);

        // Have to have at least one of these to validate
        List<II> custodianAssignedEntityIdList = custodianAssignedEntity.getId();
        custodianAssignedEntityIdList.add(new II(null, null));

        registrationEvent.setCustodian(custodian);

        PRPMIN301011MFMIMT700701Subject2 subject1 = new PRPMIN301011MFMIMT700701Subject2();
        subject1.getTypeCode().add(TYPE_CODE_SBJ);
        registrationEvent.setSubject1(subject1);

        setHealthCareProvider(subject1, providerEntity, receivingJurisdictionCode, excludeUpdateFields);
    }

    public static void setHealthCareProvider(PRPMIN301011MFMIMT700701Subject2 subject1,
            final ProviderAttribute providerEntity,
            String receivingJurisdictionCode,
            boolean excludeUpdateFields) throws ParseException {
        PRPMMT309000HealthCareProvider healthCareProvider = new PRPMMT309000HealthCareProvider();
        JAXBElement<PRPMMT309000HealthCareProvider> healthCareProviderElement = objectFactory.createPRPMIN301011MFMIMT700701Subject2HealthCareProvider(healthCareProvider);
        subject1.setHealthCareProvider(healthCareProviderElement);

        List<String> healthCareProviderClassCodeList = healthCareProvider.getClassCode();
        healthCareProviderClassCodeList.add(CLASS_CODE_PROVINCE);

        List<PRPMMT309000HealthCareProviderId> healthCareProviderIdList = healthCareProvider.getId();

        List<IdentifierAttribute> collegeIdentifiers = providerEntity.getCollegeIdentifiers();
        if (!CollectionUtils.isEmpty(collegeIdentifiers)) {
            for (IdentifierAttribute collegeIdentifier : collegeIdentifiers) {
                String uncodedType = collegeIdentifier.getUncodedType();
                String value = collegeIdentifier.getValue();

                final PRPMMT309000HealthCareProviderId id = new PRPMMT309000HealthCareProviderId();
                id.setRoot(ConverterUtils.getOid(uncodedType));
                id.setExtension(value);
                final String endReasonCode = collegeIdentifier.getEndReasonCode();
                id.setControlActReferenceId(createControlActReferenceId(healthCareProvider, endReasonCode, collegeIdentifier.getSource()));
                id.setValidTime(createValidTimeFromStartAndExpiryDates(collegeIdentifier.getStartDate(), collegeIdentifier.getExpiryDate()));

                if (!StringUtils.isEmpty(endReasonCode)) {
                    id.setUpdateMode(PRPMMT309000HealthCareProviderIdUpdateMode.C);
                }

                healthCareProviderIdList.add(id);
            }
        }

        List<IdentifierAttribute> registryIdentifiers = providerEntity.getRegistryIdentifiers();
        if (!CollectionUtils.isEmpty(registryIdentifiers)) {
            for (IdentifierAttribute registryIdentifier : registryIdentifiers) {
                String uncodedType = registryIdentifier.getUncodedType();
                String value = registryIdentifier.getValue();

                final PRPMMT309000HealthCareProviderId id = new PRPMMT309000HealthCareProviderId();
                id.setRoot(ConverterUtils.getOid(uncodedType));
                id.setExtension(value);
                final String endReasonCode = registryIdentifier.getEndReasonCode();
                id.setControlActReferenceId(createControlActReferenceId(healthCareProvider, endReasonCode, registryIdentifier.getSource()));
                id.setValidTime(createValidTimeFromStartAndExpiryDates(registryIdentifier.getStartDate(), registryIdentifier.getExpiryDate()));

                if (!StringUtils.isEmpty(endReasonCode)) {
                    id.setUpdateMode(PRPMMT309000HealthCareProviderIdUpdateMode.C);
                }

                healthCareProviderIdList.add(id);
            }
        }

        CE code = new CE();
        code.setCode(providerEntity.getHptCode());
        code.setCodeSystemName(HPT_CODE_SYSTEM_NAME);
        healthCareProvider.setCode(code);

//        List<PRPMMT309000HealthCareProviderAddr> addrList = healthCareProvider.getAddr();
//        List<AddressAttribute> entityAddresses = providerEntity.getAddresses();
//        for (AddressAttribute entityAddress : entityAddresses) {
//            PRPMMT301011HealthCareProviderAddr hl7Address = (PRPMMT301011HealthCareProviderAddr) createHL7AddressFromEntityAddress(entityAddress, healthCareProvider, PRPMMT309000HealthCareProviderAddr.class);
//            addrList.add(hl7Address);
//        }
//        List<PRPMMT301011HealthCareProviderTelecom> telecomList = healthCareProvider.getTelecom();
//
//        List<PhoneAttribute> phones = providerEntity.getPhones();
//        for (PhoneAttribute entityPhone : phones) {
//            PRPMMT301011HealthCareProviderTelecom hl7Phone = (PRPMMT301011HealthCareProviderTelecom) createHL7PhoneFromEntityPhone(entityPhone, healthCareProvider, PRPMMT301011HealthCareProviderTelecom.class);
//            telecomList.add(hl7Phone);
//        }
//
//        List<EmailAttribute> emails = providerEntity.getEmails();
//        for (EmailAttribute entityEmail : emails) {
//            PRPMMT301011HealthCareProviderTelecom hl7email = (PRPMMT301011HealthCareProviderTelecom) createHL7EmailFromEntityEmail(entityEmail, healthCareProvider, PRPMMT301011HealthCareProviderTelecom.class);
//            telecomList.add(hl7email);
//        }
        List<StatusAttribute> statusAttributeList = providerEntity.getStatuses();
        if (!CollectionUtils.isEmpty(statusAttributeList)) {
            StatusAttribute statusAttribute = statusAttributeList.get(0);
            String typeCode = statusAttribute.getUncodedType();
            String reasonCode = statusAttribute.getEndReasonCode();
            String dataOwner = statusAttribute.getSource();
            Date startDate = statusAttribute.getStartDate();
            Date expiryDate = statusAttribute.getExpiryDate();

            // No status code on response?
//            PRPMMT309000HealthCareProviderStatusCode hl7StatusCode = new PRPMMT301011HealthCareProviderStatusCode();
//            if (!StringUtils.isEmpty(reasonCode)) {
//                hl7StatusCode.setUpdateMode(PRPMMT309000HealthCareProviderStatusCodeUpdateMode.C);
//            }
//            hl7StatusCode.setCode(typeCode);
//
//            hl7StatusCode.setControlActReferenceId(createControlActReferenceId(healthCareProvider, reasonCode, dataOwner));
//            hl7StatusCode.setValidTime(createValidTimeFromStartAndExpiryDates(startDate, expiryDate));
//
//            healthCareProvider.setStatusCode(objectFactory.createPRPMMT301011HealthCareProviderStatusCode(hl7StatusCode));
            setHealthCarePrincipalPerson(healthCareProvider, providerEntity);
            setRepresentedOrganization(healthCareProvider, receivingJurisdictionCode);
            if (!excludeUpdateFields) {
                setDisciplinaryActions(healthCareProvider, providerEntity);
                setNotes(healthCareProvider, providerEntity);
            }
            setConditions(healthCareProvider, providerEntity);
            setExpertise(healthCareProvider, providerEntity);
            setWorkLocations(healthCareProvider, providerEntity, excludeUpdateFields);
            if (!excludeUpdateFields) {
//                setInformationRoutes(healthCareProvider, providerEntity);
                setProviderRelationships(healthCareProvider, providerEntity);
            }
        }
    }

//    public static void setInformationRoutes(PRPMMT309000HealthCareProvider healthCareProvider, ProviderAttribute providerEntity) throws ParseException {
//        List<InformationRouteAttribute> informationRouteAttributes = providerEntity.getInformationRoutes();
//        for (InformationRouteAttribute informationRouteAttribute : informationRouteAttributes) {
//            createInformationRoute(healthCareProvider, informationRouteAttribute, null);
//        }
//    }
    public static void setWorkLocations(PRPMMT309000HealthCareProvider healthCareProvider,
            ProviderAttribute providerEntity,
            boolean excludeUpdateFields) throws ParseException {

        List<PRPMMT309000RelatedTo> relatedToList = healthCareProvider.getRelatedTo();

        List<WorkLocationAttribute> workLocationAttributes = providerEntity.getWorkLocations();

        // Have to find the default one first, the rest can go in any order
        List<WorkLocationAttribute> tempWorkLocationAttributes = new ArrayList<>();
        List<WorkLocationAttribute> orderedWorkLocationAttributes = new ArrayList<>();

        boolean defaultFound = false;
        for (WorkLocationAttribute workLocationAttribute : workLocationAttributes) {
            boolean isDefault = false;
            List<WorkLocationDetailsAttribute> workLocationDetailsList = workLocationAttribute.getDetails();
            if (!CollectionUtils.isEmpty(workLocationDetailsList)) {
                WorkLocationDetailsAttribute workLocationDetailsAttribute = workLocationDetailsList.get(0);
                isDefault = workLocationDetailsAttribute.isDefaulted();
            }
            if (isDefault) {
                defaultFound = true;
                orderedWorkLocationAttributes.add(workLocationAttribute);
                orderedWorkLocationAttributes.addAll(tempWorkLocationAttributes);
            } else if (!defaultFound) {
                tempWorkLocationAttributes.add(workLocationAttribute);
            } else {
                orderedWorkLocationAttributes.add(workLocationAttribute);
            }
        }

        int count = 1;
        for (WorkLocationAttribute workLocationAttribute : orderedWorkLocationAttributes) {
            PRPMMT309000RelatedTo relatedTo = createRelatedTo(workLocationAttribute, healthCareProvider, false);
            relatedTo.setIsWorkLocation(true);

            String identifier = workLocationAttribute.getIdentifier();
            String typeCode = null;
            String endReasonCode = null;
            String dataOwnerCode = null;

            IVLTS validTime = null;

            String locationNameText = null;

            List<WorkLocationDetailsAttribute> workLocationDetailsList = workLocationAttribute.getDetails();
            if (!CollectionUtils.isEmpty(workLocationDetailsList)) {
                WorkLocationDetailsAttribute workLocationDetailsAttribute = workLocationDetailsList.get(0);
                typeCode = workLocationDetailsAttribute.getTypeCode();
                locationNameText = workLocationDetailsAttribute.getName();
                Date startDate = workLocationDetailsAttribute.getStartDate();
                Date expiryDate = workLocationDetailsAttribute.getExpiryDate();
                validTime = createValidTimeFromStartAndExpiryDates(startDate, expiryDate);
                endReasonCode = workLocationDetailsAttribute.getEndReasonCode();
                dataOwnerCode = workLocationDetailsAttribute.getSource();
            }
            boolean isChange = !StringUtils.isEmpty(endReasonCode);
            relatedTo.setWorkLocationIdentifier(Long.valueOf(identifier));
            relatedTo.setWorkLocationOwnerCode(dataOwnerCode);

            // No update mode in this version
//            if (isChange) {
//                relatedTo.setUpdateMode(PRPMMT309000HealthCareProviderRelatedToUpdateMode.C);
//            }
            PRPMMT309000AssignedEntity assignedEntityElement = new PRPMMT309000AssignedEntity();
            assignedEntityElement.getClassCode().add(CLASS_CODE_ASSIGNED);
            JAXBElement<PRPMMT309000AssignedEntity> relatedToAssignedEntity = objectFactory.createPRPMMT309000RelatedToRelatedToAssignedEntity(assignedEntityElement);
            relatedTo.setRelatedToAssignedEntity(relatedToAssignedEntity);

            PRPMMT309000PrimaryPerformer3 performance = new PRPMMT309000PrimaryPerformer3();
            performance.getTypeCode().add(TYPE_CODE_PPRF);
            assignedEntityElement.getPerformance().add(performance);

            PRPMMT309000ActDefinitionOrEvent act = new PRPMMT309000ActDefinitionOrEvent();
            act.getMoodCode().add(MOOD_CODE_DEF);
            act.getClassCode().add(CLASS_CODE_ACT);
            performance.setActDefinitionOrEvent(act);

            PRPMMT309000ActDefinitionOrEventLocation location = new PRPMMT309000ActDefinitionOrEventLocation();
            location.getTypeCode().add(TYPE_CODE_LOC);
            act.getLocation().add(location);

//            INT sequenceNumber = new INT();
//            final BigInteger bigIntegerSequenceNumber = BigInteger.valueOf(count);
//            sequenceNumber.setValue(bigIntegerSequenceNumber);
//            relatedTo.setSequenceNumber(bigIntegerSequenceNumber);
//            JAXBElement<INT> sequenceNumberElement = objectFactory.createPRPMMT303010LocationSequenceNumber(sequenceNumber);
//            location.setSequenceNumber(sequenceNumberElement);
            PRPMMT309000ServiceDeliveryLocation serviceDeliveryLocationElement = new PRPMMT309000ServiceDeliveryLocation();
            serviceDeliveryLocationElement.getClassCode().add(CLASS_CODE_SDLC);
            location.setServiceDeliveryLocation(serviceDeliveryLocationElement);

            II controlActReferenceId = createControlActReferenceId(healthCareProvider, endReasonCode, dataOwnerCode);
            location.setControlActReferenceId(controlActReferenceId);

            final II serviceDeliveryLocationIdElement = new II(WORKLOCATION_OID, identifier);
            JAXBElement<II> serviceDeliveryLocationIdJaxbElement = objectFactory.createPRPMMT309000ServiceDeliveryLocationId(serviceDeliveryLocationIdElement);
            serviceDeliveryLocationElement.setId(serviceDeliveryLocationIdJaxbElement);

            CE codeElement = new CE();
            codeElement.setCode(typeCode);
            serviceDeliveryLocationElement.setCode(codeElement);

            serviceDeliveryLocationElement.setEffectiveTime(validTime);

            PRPMMT309000Place innerLocationElement = new PRPMMT309000Place();
            innerLocationElement.setDeterminerCode(DETERMINER_CODE_INSTANCE);
            innerLocationElement.getClassCode().add(CLASS_CODE_PLC);
            JAXBElement<PRPMMT309000Place> innerLocationJaxbElement = objectFactory.createPRPMMT309000ServiceDeliveryLocationLocation(innerLocationElement);
            serviceDeliveryLocationElement.setLocation(innerLocationJaxbElement);

            EN nameElement = new EN();
            EnGiven givenName = new EnGiven();
            givenName.setText(locationNameText);
            nameElement.getContent().add(objectFactory.createENGiven(givenName));
            innerLocationElement.setName(nameElement);

            relatedToList.add(relatedTo);
            count++;

            // how do we create information routes when we have no sequence number to identify the work location??
//            if (!excludeUpdateFields) {
//                List<InformationRouteAttribute> informationRouteAttributes = workLocationAttribute.getInformationRoutes();
//                for (InformationRouteAttribute informationRouteAttribute : informationRouteAttributes) {
//                    createInformationRoute(healthCareProvider, informationRouteAttribute, relatedTo.getSequenceNumber());
//                }
//            }
        }
    }

//    private static void createInformationRoute(PRPMMT309000HealthCareProvider healthCareProvider,
//            InformationRouteAttribute informationRouteAttribute, BigInteger workLocationSequenceNumber) throws ParseException {
//        List<PRPMMT309000RelatedTo> relatedToList = healthCareProvider.getRelatedTo();
//
//        PRPMMT309000RelatedTo relatedTo = createRelatedTo(informationRouteAttribute, healthCareProvider);
//        relatedTo.setIsInformationRoute(true);
//
//        String documentTypeCode = informationRouteAttribute.getDocumentTypeCode();
//        String mechanismTypeCode = informationRouteAttribute.getMechanismTypeCode();
//
//        Long workLocationIdentifier = informationRouteAttribute.getWorkLocationIdentifier();
//        String workLocationOwnerCode = informationRouteAttribute.getWorkLocationOwnerCode();
//
//        Date startDate = informationRouteAttribute.getStartDate();
//        Date expiryDate = informationRouteAttribute.getExpiryDate();
//        boolean isChange = !StringUtils.isEmpty(informationRouteAttribute.getEndReasonCode());
//
//        IVLTS validTime = createValidTimeFromStartAndExpiryDates(startDate, expiryDate);
//
//        PRPMMT309000AssignedEntity assignedEntityElement = new PRPMMT309000AssignedEntity();
//        assignedEntityElement.getClassCode().add(CLASS_CODE_ASSIGNED);
//        JAXBElement<PRPMMT309000AssignedEntity> relatedToAssignedEntityJaxbElement = objectFactory.createPRPMMT309000RelatedToRelatedToAssignedEntity(assignedEntityElement);
//        relatedTo.setRelatedToAssignedEntity(relatedToAssignedEntityJaxbElement);
//
//        PRPMMT309000PrimaryPerformer3 performance = new PRPMMT309000PrimaryPerformer3();
//        performance.getTypeCode().add(TYPE_CODE_PPRF);
//        assignedEntityElement.getPerformance().add(performance);
//
//        PRPMMT309000ActDefinitionOrEvent act = new PRPMMT309000ActDefinitionOrEvent();
//        act.getMoodCode().add(MOOD_CODE_DEF);
//        act.getClassCode().add(CLASS_CODE_ACT);
//        performance.setActDefinitionOrEvent(act);
//
//        PRPMMT309000ActDefinitionOrEventSequel sequel = new PRPMMT309000ActDefinitionOrEventSequel();
//        sequel.getTypeCode().add(TYPE_CODE_SEQL);
//        if (isChange) {
//            sequel.setUpdateMode(PRPMMT301011ActDefinitionOrEventSequelUpdateMode.C);
//        }
//        act.getSequel().add(sequel);
//        act
//
//        PRPMMT301011InformRequest informRequest = new PRPMMT301011InformRequest();
//        informRequest.getMoodCode().add(MOOD_CODE_RQO);
//        informRequest.getClassCode().add(CLASS_CODE_INFRM);
//        sequel.setInformRequest(informRequest);
//
//        CD informRequestCode = new CD();
//        informRequestCode.setCode(documentTypeCode);
//        informRequest.setCode(informRequestCode);
//
//        PRPMMT301011InformRequestSubject informRequestSubjectElement = new PRPMMT301011InformRequestSubject();
//        informRequestSubjectElement.getTypeCode().add(TYPE_CODE_SBJ);
//        JAXBElement<PRPMMT301011InformRequestSubject> informRequestSubjecteJaxbElement = objectFactory.createPRPMMT301011InformRequestSubject(informRequestSubjectElement);
//        informRequest.setSubject(informRequestSubjecteJaxbElement);
//
//        CE informRequestSubjectModeCode = new CE();
//        informRequestSubjectModeCode.setCode(mechanismTypeCode);
//        informRequestSubjectElement.setModeCode(informRequestSubjectModeCode);
//
//        PRPMMT301011ServiceDeliveryLocation serviceDeliveryLocation = new PRPMMT301011ServiceDeliveryLocation();
//        serviceDeliveryLocation.getClassCode().add(CLASS_CODE_SDLC);
//        // if this information request is owned by a work location, then put a reference to the work location here
//        if (workLocationSequenceNumber != null) {
//            II workLocationReference = new II(WORKLOCATION_OID, workLocationSequenceNumber.toString());
//            JAXBElement<II> workLocationReferenceElement = objectFactory.createPRPMMT301011ServiceDeliveryLocationId(workLocationReference);
//            serviceDeliveryLocation.setId(workLocationReferenceElement);
//        }
//        serviceDeliveryLocation.setCode(new CE());
//        serviceDeliveryLocation.setEffectiveTime(new IVLTS());
//
//        informRequestSubjectElement.setServiceDeliveryLocation(serviceDeliveryLocation);
//
//        PRPMMT301011InformRequestIndirectTarget indirectTarget = new PRPMMT301011InformRequestIndirectTarget();
//        indirectTarget.getTypeCode().add(TYPE_CODE_IND);
//        informRequest.setIndirectTarget(indirectTarget);
//
//        final PRPMMT301011ServiceDeliveryLocation indirectTargeterviceDeliveryLocation = new PRPMMT301011ServiceDeliveryLocation();
//        indirectTargeterviceDeliveryLocation.getClassCode().add(CLASS_CODE_SDLC);
//        JAXBElement<PRPMMT301011ServiceDeliveryLocation> indirectTargetServiceDeliveryLocationJaxbElement
//                = objectFactory.createPRPMMT301011IndirectTargetServiceDeliveryLocation(indirectTargeterviceDeliveryLocation);
//        indirectTarget.setServiceDeliveryLocation(indirectTargetServiceDeliveryLocationJaxbElement);
//
//        // if this information request is targeted at a work location, then put a reference to the work location here
//        if (workLocationIdentifier != null && !StringUtils.isEmpty(workLocationOwnerCode)) {
//            // find the work location that matches
//            for (PRPMMT301011HealthCareProviderRelatedTo relatedToCandidate : relatedToList) {
//                if (relatedToCandidate.isIsWorkLocation()
//                        && workLocationOwnerCode.equals(relatedToCandidate.getWorkLocationOwnerCode())
//                        && workLocationIdentifier.equals(relatedToCandidate.getWorkLocationIdentifier())) {
//
//                    II workLocationReference = new II(WORKLOCATION_OID, relatedToCandidate.getSequenceNumber().toString());
//                    JAXBElement<II> workLocationReferenceElement = objectFactory.createPRPMMT301011ServiceDeliveryLocationId(workLocationReference);
//                    indirectTargeterviceDeliveryLocation.setId(workLocationReferenceElement);
//                }
//            }
//        }
//
//        // Address
//        List<PRPMMT301011ServiceDeliveryLocationAddr> addrList = indirectTargeterviceDeliveryLocation.getAddr();
//        AddressAttribute addressAttribute = informationRouteAttribute.getAddressAttribute();
//        if (addressAttribute != null) {
//            PRPMMT301011ServiceDeliveryLocationAddr indirectTargeterviceDeliveryLocationAddr = (PRPMMT301011ServiceDeliveryLocationAddr) createHL7AddressFromEntityAddress(addressAttribute, healthCareProvider, PRPMMT301011ServiceDeliveryLocationAddr.class);
//            addrList.add(indirectTargeterviceDeliveryLocationAddr);
//        }
//
//        List<PRPMMT301011ServiceDeliveryLocationTelecom> telecomList = indirectTargeterviceDeliveryLocation.getTelecom();
//
//        // Email
//        EmailAttribute emailAttribute = informationRouteAttribute.getEmailAttribute();
//        if (emailAttribute != null) {
//            PRPMMT301011ServiceDeliveryLocationTelecom telecom = (PRPMMT301011ServiceDeliveryLocationTelecom) createHL7EmailFromEntityEmail(emailAttribute, healthCareProvider, PRPMMT301011ServiceDeliveryLocationTelecom.class);
//            telecomList.add(telecom);
//        }
//
//        // Phone numbers
//        PhoneAttribute phoneNumberAttribute = informationRouteAttribute.getPhoneAttribute();
//        if (phoneNumberAttribute != null) {
//            PRPMMT301011ServiceDeliveryLocationTelecom telecom = (PRPMMT301011ServiceDeliveryLocationTelecom) createHL7PhoneFromEntityPhone(phoneNumberAttribute, healthCareProvider, PRPMMT301011ServiceDeliveryLocationTelecom.class);
//            telecomList.add(telecom);
//        }
//
//        sequel.setControlActReferenceId(controlActReferenctId);
//        sequel.setValidTime(validTime);
//
//        relatedToList.add(relatedTo);
//    }
    public static void setProviderRelationships(PRPMMT309000HealthCareProvider healthCareProvider, ProviderAttribute providerEntity) throws ParseException {
        List<PRPMMT309000RelatedTo> relatedToList = healthCareProvider.getRelatedTo();
        List<ProviderRelationshipAttribute> relationshipAttributeList = providerEntity.getProviderRelationships();
        for (ProviderRelationshipAttribute relationshipAttribute : relationshipAttributeList) {
            PRPMMT309000RelatedTo relatedTo = createRelatedTo(relationshipAttribute, healthCareProvider);

            String relationshipTypeCode = relationshipAttribute.getRelationshipWithProviderType();
            String relationshipTypeOID = ConverterUtils.getOid(relationshipTypeCode);
            String relationshipWithProviderCollegeId = relationshipAttribute.getRelationshipWithProviderCollegeId();

            String relationshipWithProviderType = relationshipAttribute.getRelationshipTypeCode();
            //Name isn't needed in current renslation, leave it here, in case future version needs it
            //String relationshipWithProviderName = relationshipAttribute.getRelationshipWithProviderName();

            PRPMMT309000HealthCareProvider healthCareProviderElement = new PRPMMT309000HealthCareProvider();
            healthCareProviderElement.getClassCode().add(CLASS_CODE_PROVINCE);
            JAXBElement<PRPMMT309000HealthCareProvider> healthCareProviderJaxbElement = objectFactory.createPRPMMT309000RelatedToRelatedToHealthCareProvider(healthCareProviderElement);

            PRPMMT309000HealthCareProviderId id = new PRPMMT309000HealthCareProviderId();
            id.setRoot(relationshipTypeOID);
            id.setExtension(relationshipWithProviderCollegeId);
            healthCareProviderElement.getId().add(id);

            CE code = new CE();
            code.setCode(relationshipWithProviderType);
            healthCareProviderElement.setCode(code);

            EN name = new EN();
            name.setText(relationshipAttribute.getRelationshipWithProviderName());
            healthCareProviderElement.getName().add(name);

            relatedTo.setRelatedToHealthCareProvider(healthCareProviderJaxbElement);

            relatedToList.add(relatedTo);

        }
    }
    public static void setExpertise(PRPMMT309000HealthCareProvider healthCareProvider, ProviderAttribute providerEntity) throws ParseException {
        List<PRPMMT309000RelatedTo> relatedToList = healthCareProvider.getRelatedTo();
        List<ExpertiseAttribute> expertiseAttributes = providerEntity.getExpertises();
        for (ExpertiseAttribute expertiseAttribute : expertiseAttributes) {
            PRPMMT309000RelatedTo relatedTo = createRelatedTo(expertiseAttribute, healthCareProvider);

            PRPMMT309000HealthCareProvider relatedToHealthCareProvider = new PRPMMT309000HealthCareProvider();
            relatedToHealthCareProvider.getClassCode().add(CLASS_CODE_PROVINCE);
            PRPMMT309000HealthCareProviderId relatedToHealthCareProviderId = new PRPMMT309000HealthCareProviderId();
            relatedToHealthCareProvider.getId().add(relatedToHealthCareProviderId);

            JAXBElement<PRPMMT309000HealthCareProvider> relatedToHealthCareProviderJaxbElement = objectFactory.createPRPMMT309000RelatedToRelatedToHealthCareProvider(relatedToHealthCareProvider);
            relatedTo.setRelatedToHealthCareProvider(relatedToHealthCareProviderJaxbElement);

            String typeCode = expertiseAttribute.getUncodedType();
            String originalSourceProviderCode = expertiseAttribute.getSourceCode();;

            CE codeElement = new CE();
            codeElement.setCode(typeCode);
            relatedToHealthCareProvider.setCode(codeElement);

            ED originalTextElement = new ED();
            originalTextElement.setText(originalSourceProviderCode);
            codeElement.setOriginalText(originalTextElement);

            relatedToList.add(relatedTo);
        }

    }

    public static void setCredentials(PRPMMT309000HealthCareProvider healthCareProvider, ProviderAttribute providerEntity) throws ParseException {
        List<PRPMMT309000RelatedTo> relatedToList = healthCareProvider.getRelatedTo();
        List<CredentialAttribute> credentialAttributes = providerEntity.getCredentials();
        for (CredentialAttribute attribute : credentialAttributes) {
            PRPMMT309000RelatedTo relatedTo = createRelatedTo(attribute, healthCareProvider);

            String registrationNumber = attribute.getRegistrationNumber();
            String typeCode = attribute.getUncodedType();
            String designation = attribute.getDesignation();
            boolean isEquivalent = attribute.isEquivalent();
            String grantingInstitution = attribute.getGrantingInstitution();
            String institutionCity = attribute.getInstitutionCity();
            String institutionCountry = attribute.getInstitutionCountryCode();
            String institutionProvince = attribute.getInstitutionProvStateCode();
            String yearIssued = attribute.getYearIssued();

            Date startDate = attribute.getStartDate();
            Date expiryDate = attribute.getExpiryDate();

            PRPMMT309000HealthCareProvider relatedToHealthCareProvider = new PRPMMT309000HealthCareProvider();
            relatedToHealthCareProvider.getClassCode().add(CLASS_CODE_PROVINCE);
            JAXBElement<PRPMMT309000HealthCareProvider> relatedToHealthCareProviderJaxbElement = objectFactory.createPRPMMT309000RelatedToRelatedToHealthCareProvider(relatedToHealthCareProvider);
            relatedTo.setRelatedToHealthCareProvider(relatedToHealthCareProviderJaxbElement);

            PRPMMT309000HealthCareProviderId relatedToHealthCareProviderId = new PRPMMT309000HealthCareProviderId();
            relatedToHealthCareProviderId.setRoot(CREDENTIAL_OID);
            relatedToHealthCareProviderId.setExtension(registrationNumber);
            relatedToHealthCareProvider.getId().add(relatedToHealthCareProviderId);

            CE codeElement = new CE();
            codeElement.setCode(typeCode);
            relatedToHealthCareProvider.setCode(codeElement);
            
            ED originalTextElement = new ED();
            TEL referenceElement = new TEL();
            referenceElement.setValue(designation);
            originalTextElement.setReference(referenceElement);
            codeElement.setOriginalText(originalTextElement);

            CR qualifierElement = new CR();
            CD qualifierValueElement = new CD();
            qualifierValueElement.setCode(Boolean.toString(isEquivalent));
            qualifierElement.setValue(qualifierValueElement);
            codeElement.getQualifier().add(qualifierElement);

            PRPMMT309000Organization representedOrganizationElement = new PRPMMT309000Organization();
            representedOrganizationElement.setDeterminerCode(DETERMINER_CODE_INSTANCE);
            representedOrganizationElement.getClassCode().add(CLASS_CODE_ORG);
            JAXBElement<PRPMMT309000Organization> representedOrganizationJaxbElement = objectFactory.createPRPMMT309000AssignedEntityRepresentedOrganization(representedOrganizationElement);
            relatedToHealthCareProvider.setRepresentedOrganization(representedOrganizationJaxbElement);

            ON nameElement = new ON();
            nameElement.setText(grantingInstitution);
            relatedToHealthCareProvider.getName().add(nameElement);

            // addresses not supported?
//            AD addressElement = new AD();
//            List<Serializable> addressContent = addressElement.getContent();
//            if (!StringUtils.isEmpty(institutionCity)) {
//                AdxpCity cityElement = objectFactory.createAdxpCity();
//                cityElement.setText(institutionCity);
//                addressContent.add(objectFactory.createADCity(cityElement));
//            }
//            if (!StringUtils.isEmpty(institutionProvince)) {
//                AdxpState stateElement = objectFactory.createAdxpState();
//                stateElement.setText(institutionProvince);
//                addressContent.add(objectFactory.createADState(stateElement));
//
//            }
//            if (!StringUtils.isEmpty(institutionCountry)) {
//                AdxpCountry countryElement = objectFactory.createAdxpCountry();
//                countryElement.setText(institutionCountry);
//                addressContent.add(objectFactory.createADCountry(countryElement));
//            }
//            
//            relatedToHealthCareProvider.getAddr().add(addressElement);
            PRPMMT309000Subject3 subjectOf2 = new PRPMMT309000Subject3();
            subjectOf2.getTypeCode().add(TYPE_CODE_SBJ);
            relatedToHealthCareProvider.getSubjectOf2().add(subjectOf2);

            PRPMMT309000RoleActivation roleActivation = new PRPMMT309000RoleActivation();
            roleActivation.getClassCode().add(CLASS_CODE_CACT);
            roleActivation.getMoodCode().add(MOOD_CODE_EVN);
            subjectOf2.setRoleActivation(roleActivation);

            relatedToList.add(relatedTo);
        }
    }

    public static PRPMMT309000RelatedTo createRelatedTo(Attribute attribute, PRPMMT309000HealthCareProvider healthCareProvider) {

        return createRelatedTo(attribute, healthCareProvider, true);
    }

    public static PRPMMT309000RelatedTo createRelatedTo(Attribute attribute, PRPMMT309000HealthCareProvider healthCareProvider,
            boolean createControlActReferenceId) {
        PRPMMT309000RelatedTo relatedTo = new PRPMMT309000RelatedTo();
        relatedTo.setTypeCode(TYPE_CODE_REL);

        return relatedTo;
    }

    public static void setConditions(PRPMMT309000HealthCareProvider healthCareProvider, ProviderAttribute providerEntity) throws ParseException {
        List<PRPMMT309000HealthCareProviderResponsibleFor> responsibleForList = healthCareProvider.getResponsibleFor();
        List<ConditionAttribute> conditionAttributes = providerEntity.getConditions();
        for (ConditionAttribute conditionAttribute : conditionAttributes) {

            String id = conditionAttribute.getId();
            String restrictionExplanationText = conditionAttribute.getRestrictionExplanationText();
            String typeCode = conditionAttribute.getUncodedType();

            String dataOwner = conditionAttribute.getSource();
            String reasonCode = conditionAttribute.getEndReasonCode();
            Date startDate = conditionAttribute.getStartDate();
            Date expiryDate = conditionAttribute.getExpiryDate();

            PRPMMT309000HealthCareProviderResponsibleFor responsibleFor = new PRPMMT309000HealthCareProviderResponsibleFor();
            responsibleFor.getTypeCode().add(TYPE_CODE_RESP);

            if (!StringUtils.isEmpty(reasonCode)) {
                responsibleFor.setUpdateMode(PRPMMT309000HealthCareProviderResponsibleForUpdateMode.C);
            }

            PRPMMT309000Privilege privilegeElement = new PRPMMT309000Privilege();
            privilegeElement.setMoodCode(MOOD_CODE_DEF);
            privilegeElement.getClassCode().add(CLASS_CODE_ACT);
            responsibleFor.setPrivilege(privilegeElement);

            JAXBElement<II> privilegeElementJaxbId = objectFactory.createPRPMMT309000PrivilegeId(new II(CONDITION_OID, id));
            privilegeElement.setId(privilegeElementJaxbId);

            IVLTS validTime = createValidTimeFromStartAndExpiryDates(startDate, expiryDate);
            privilegeElement.setEffectiveTime(validTime);

            CE confidentialityCodeElement = new CE();
            ED originalTextElement = new ED();
            originalTextElement.setText(restrictionExplanationText);
            confidentialityCodeElement.setOriginalText(originalTextElement);
            JAXBElement<CE> confidentialityCodeJaxbElement = objectFactory.createPRPMMT309000PrivilegeConfidentialityCode(confidentialityCodeElement);
            privilegeElement.setConfidentialityCode(confidentialityCodeJaxbElement);

            PRPMMT309000Subject4 subjectOfElement = new PRPMMT309000Subject4();
            subjectOfElement.getTypeCode().add(TYPE_CODE_SUBJ);
            privilegeElement.getSubjectOf().add(subjectOfElement);

            PRPMMT309000PrivilegeCategorization privilegeCategorizationElement = new PRPMMT309000PrivilegeCategorization();
            privilegeCategorizationElement.getMoodCode().add(MOOD_CODE_EVN);
            privilegeCategorizationElement.getClassCode().add(CLASS_CODE_OBS);
            subjectOfElement.setPrivilegeCategorization(privilegeCategorizationElement);

            CD privilegeCategorizationCodeElement = new CD();
            privilegeCategorizationCodeElement.setCode(CODE_PrivilegeCategorization);
            privilegeCategorizationElement.setCode(privilegeCategorizationCodeElement);

            CE privilegeCategorizationValueElement = new CE();
            privilegeCategorizationValueElement.setCode(typeCode);
            privilegeCategorizationElement.setValue(privilegeCategorizationValueElement);

            II controlActReferenceId = createControlActReferenceId(healthCareProvider, reasonCode, dataOwner);
            responsibleFor.setControlActReferenceId(controlActReferenceId);

            responsibleForList.add(responsibleFor);
        }

    }

    public static void setDisciplinaryActions(PRPMMT309000HealthCareProvider healthCareProvider, ProviderAttribute providerEntity) throws ParseException {
        List<PRPMMT309000HealthCareProviderSubjectOf1> subjectOf1List = healthCareProvider.getSubjectOf1();
        List<DisciplinaryActionAttribute> disciplinaryActionAttributes = providerEntity.getDisciplinaryActions();
        for (DisciplinaryActionAttribute disciplinaryActionAttribute : disciplinaryActionAttributes) {
            PRPMMT309000HealthCareProviderSubjectOf1 subjectOf1 = new PRPMMT309000HealthCareProviderSubjectOf1();
            subjectOf1.getTypeCode().add(TYPE_CODE_SBJ);

            String identifier = disciplinaryActionAttribute.getIdentifier();
            String description = disciplinaryActionAttribute.getDescription();
            boolean isDisplay = disciplinaryActionAttribute.isDisplay();
            Date archiveDate = disciplinaryActionAttribute.getArchiveDate();

            String dataOwner = disciplinaryActionAttribute.getSource();
            String reasonCode = disciplinaryActionAttribute.getEndReasonCode();
            Date startDate = disciplinaryActionAttribute.getStartDate();
            Date expiryDate = disciplinaryActionAttribute.getExpiryDate();

            if (!StringUtils.isEmpty(reasonCode)) {
                subjectOf1.setUpdateMode(PRPMMT309000HealthCareProviderSubjectOf1UpdateMode.C);
            }

            PRPMMT309000DisciplinaryAction disciplinaryActionElement = new PRPMMT309000DisciplinaryAction();
            disciplinaryActionElement.getMoodCode().add(MOOD_CODE_EVN);
            disciplinaryActionElement.getClassCode().add(CLASS_CODE_DISPACT);

            subjectOf1.setDisciplinaryAction(disciplinaryActionElement);

            II idValue = new II(DISCIPLINARYACTION_OID, identifier);
            disciplinaryActionElement.setId(idValue);

            ST textValue = new ST();
            textValue.setText(description);
            JAXBElement<ST> textElement = objectFactory.createPRPMMT309000DisciplinaryActionText(textValue);
            disciplinaryActionElement.setText(textElement);

            IVLTS validTime = createValidTimeFromStartAndExpiryDates(startDate, expiryDate);
            disciplinaryActionElement.setEffectiveTime(validTime);

            TS availabilityTimeElement = new TS();
            availabilityTimeElement.setValue(ConverterUtils.convertFromDateToHL7String(archiveDate));
            JAXBElement<TS> availabilityTimeJaxbElement = objectFactory.createPRPMMT309000DisciplinaryActionAvailabilityTime(availabilityTimeElement);
            disciplinaryActionElement.setAvailabilityTime(availabilityTimeJaxbElement);

            CE confidentialityCodeElement = new CE();
            confidentialityCodeElement.setCode(ConverterUtils.convertToFlag(isDisplay));
            JAXBElement<CE> confidentialityCodeJaxbElement = objectFactory.createPRPMMT309000DisciplinaryActionConfidentialityCode(confidentialityCodeElement);
            disciplinaryActionElement.setConfidentialityCode(confidentialityCodeJaxbElement);

            II controlActReferenceId = createControlActReferenceId(healthCareProvider, reasonCode, dataOwner);
            subjectOf1.setControlActReferenceId(controlActReferenceId);

            subjectOf1List.add(subjectOf1);
        }
    }

    public static void setRepresentedOrganization(PRPMMT309000HealthCareProvider healthCareProvider, String territoryCodeValue) throws ParseException {
        PRPMMT309000Organization representedOrganization = new PRPMMT309000Organization();
        JAXBElement<PRPMMT309000Organization> representedOrganizationElement = objectFactory.createPRPMMT309000HealthCareProviderRepresentedOrganization(representedOrganization);
        healthCareProvider.setRepresentedOrganization(representedOrganizationElement);

        representedOrganization.setDeterminerCode(TYPE_CODE_INSTANCE);
        representedOrganization.getClassCode().add(CLASS_CODE_ORG);
        PRPMMT309000TerritorialAuthority territorialAuthority = new PRPMMT309000TerritorialAuthority();
        representedOrganization.getTerritory().add(territorialAuthority);

        territorialAuthority.getClassCode().add(CLASS_CODE_TERR);
        CE territorialAuthorityCode = new CE();
        territorialAuthorityCode.setCode(CODE_Province);
        territorialAuthority.setCode(territorialAuthorityCode);

        PRPMMT309000Jurisdiction territory = new PRPMMT309000Jurisdiction();
        JAXBElement<PRPMMT309000Jurisdiction> territoryElement = objectFactory.createPRPMMT309000TerritorialAuthorityTerritory(territory);
        territorialAuthority.setTerritory(territoryElement);
        territory.setDeterminerCode(TYPE_CODE_INSTANCE);
        territory.getClassCode().add(CLASS_CODE_PLC);
        CE territoryCode = new CE();
        territoryCode.setCode(territoryCodeValue);
        territory.setCode(territoryCode);

    }

    public static void setNotes(PRPMMT309000HealthCareProvider healthCareProvider, ProviderAttribute providerEntity) throws ParseException {
        final List<PRPMMT309000HealthCareProviderSubjectOf4> subjectOf4List = healthCareProvider.getSubjectOf4();
        List<NoteAttribute> noteAttributes = providerEntity.getNotes();
        for (NoteAttribute noteAttribute : noteAttributes) {

            String noteText = noteAttribute.getText();
            String noteId = noteAttribute.getIdentifier();
            Date startDate = noteAttribute.getStartDate();
            Date expiryDate = noteAttribute.getExpiryDate();
            String dataOwner = noteAttribute.getSource();
            String endReasonCode = noteAttribute.getEndReasonCode();

            PRPMMT309000HealthCareProviderSubjectOf4 subjectOf4 = new PRPMMT309000HealthCareProviderSubjectOf4();
            subjectOf4.getTypeCode().add(TYPE_CODE_SBJ);
            if (!StringUtils.isEmpty(endReasonCode)) {
                subjectOf4.setUpdateMode(PRPMMT309000HealthCareProviderSubjectOf4UpdateMode.C);
            }
            PRPMMT309000Note noteElement = new PRPMMT309000Note();
            subjectOf4.setNote(noteElement);

            noteElement.getMoodCode().add(MOOD_CODE_EVN);
            noteElement.getClassCode().add(CLASS_CODE_OBS);

            II noteIdElement = new II();
            noteIdElement.setExtension(noteId);
            noteElement.setId(noteIdElement);

            ST textElement = new ST();
            textElement.setText(noteText);
            noteElement.setText(textElement);

            II controlActReferenceId = createControlActReferenceId(healthCareProvider, endReasonCode, dataOwner);
            IVLTS validTime = createValidTimeFromStartAndExpiryDates(startDate, expiryDate);

            noteElement.setEffectiveTime(validTime);

            subjectOf4.setControlActReferenceId(controlActReferenceId);
            subjectOf4.setValidTime(validTime);

            subjectOf4List.add(subjectOf4);
        }
    }

    public static void setHealthCarePrincipalPerson(PRPMMT309000HealthCareProvider healthCareProvider, ProviderAttribute providerEntity) throws ParseException {

        PRPMMT309000PrincipalPerson healthCarePrincipalPerson = new PRPMMT309000PrincipalPerson();
        JAXBElement<PRPMMT309000PrincipalPerson> hl7HealthCarePrincipalPerson = objectFactory.createPRPMMT309000HealthCareProviderHealthCarePrincipalPerson(healthCarePrincipalPerson);
        healthCareProvider.setHealthCarePrincipalPerson(hl7HealthCarePrincipalPerson);

        healthCarePrincipalPerson.setDeterminerCode(TYPE_CODE_INSTANCE);
        healthCarePrincipalPerson.getClassCode().add(CLASS_CODE_PSN);

        final List<PRPMMT309000PrincipalPersonName> hl7NameList = healthCarePrincipalPerson.getName();

        List<PersonNameAttribute> nameAttributeList = providerEntity.getPersonNames();
        for (PersonNameAttribute nameAttribute : nameAttributeList) {
            PRPMMT309000PrincipalPersonName principalPersonName = convertNameAttributeToHL7Name(healthCareProvider, nameAttribute);
            hl7NameList.add(principalPersonName);
        }

        List<Person> demographicDetailsList = providerEntity.getDemographicDetails();
        if (!CollectionUtils.isEmpty(demographicDetailsList)) {
            // Only the first one matters
            Person person = demographicDetailsList.get(0);

            String genderValue = person.getGender().getValue();
            PRPMMT309000PrincipalPersonAdministrativeGenderCode hl7GenderCode = new PRPMMT309000PrincipalPersonAdministrativeGenderCode();
            hl7GenderCode.setCode(genderValue);
            JAXBElement<PRPMMT309000PrincipalPersonAdministrativeGenderCode> hl7JaxbGenderCode = objectFactory.createPRPMMT309000PrincipalPersonAdministrativeGenderCode(hl7GenderCode);
            healthCarePrincipalPerson.setAdministrativeGenderCode(hl7JaxbGenderCode);

            DateAttribute birthDate = person.getBirthDate();
            DateAttribute deathDate = person.getDeathDate();
            String birthCountryCode = person.getBirthCountryCode();
            String birthProvinceCode = person.getBirthProvinceCode();
            String source = person.getSource();
            String endReasonCode = person.getEndReasonCode();
            Date startDate = person.getStartDate();
            Date expiryDate = person.getExpiryDate();

            II controlActReferenceId = createControlActReferenceId(healthCareProvider, endReasonCode, source);
            IVLTS validTime = createValidTimeFromStartAndExpiryDates(startDate, expiryDate);

            if (birthDate != null) {
                PRPMMT309000PrincipalPersonBirthTime birthTime = new PRPMMT309000PrincipalPersonBirthTime();
                birthTime.setValue(ConverterUtils.convertFromDateToHL7String(birthDate.getValue()));
                birthTime.setControlActReferenceId(controlActReferenceId);
                birthTime.setValidTime(validTime);
                JAXBElement<PRPMMT309000PrincipalPersonBirthTime> birthTimeJaxbElement = objectFactory.createPRPMMT309000PrincipalPersonBirthTime(birthTime);
                healthCarePrincipalPerson.setBirthTime(birthTimeJaxbElement);
            }

            if (deathDate != null) {
                PRPMMT309000PrincipalPersonDeceasedTime deathTimeValue = new PRPMMT309000PrincipalPersonDeceasedTime();
                JAXBElement<PRPMMT309000PrincipalPersonDeceasedTime> deathTimeElement = objectFactory.createPRPMMT309000PrincipalPersonDeceasedTime(deathTimeValue);
                deathTimeValue.setValue(ConverterUtils.convertFromDateToHL7String(deathDate.getValue()));
                deathTimeValue.setControlActReferenceId(controlActReferenceId);
                deathTimeValue.setValidTime(validTime);
                healthCarePrincipalPerson.setDeceasedTime(deathTimeElement);
            }

            if (!StringUtils.isEmpty(birthProvinceCode) || !StringUtils.isEmpty(birthCountryCode)) {
                List<PRPMMT309000PrincipalPersonBirthplace> birthplaceElementList = healthCarePrincipalPerson.getBirthplace();
                PRPMMT309000PrincipalPersonBirthplace birthPlaceElement = new PRPMMT309000PrincipalPersonBirthplace();
                birthPlaceElement.getClassCode().add(CLASS_CODE_BIRTHPL);
                AD addr = new AD();
                List<Serializable> content = addr.getContent();
                if (!StringUtils.isEmpty(birthProvinceCode)) {
                    AdxpState provinceCodeValue = new AdxpState();
                    provinceCodeValue.setText(birthProvinceCode);
                    JAXBElement<AdxpState> provinceElement = objectFactory.createADState(provinceCodeValue);
                    content.add(provinceElement);
                }
                if (!StringUtils.isEmpty(birthCountryCode)) {
                    AdxpCountry countryValue = new AdxpCountry();
                    countryValue.setText(birthCountryCode);
                    JAXBElement<AdxpCountry> CountryElement = objectFactory.createADCountry(countryValue);
                    content.add(CountryElement);
                }
                JAXBElement<AD> addrElement = objectFactory.createPRPMMT309000BirthplaceAddr(addr);
                birthPlaceElement.setAddr(addrElement);
                birthPlaceElement.setControlActReferenceId(controlActReferenceId);
                birthPlaceElement.setValidTime(validTime);

                birthplaceElementList.add(birthPlaceElement);
            }
        }

    }

    public static PRPMMT309000PrincipalPersonName convertNameAttributeToHL7Name(PRPMMT309000HealthCareProvider healthCareProvider, PersonNameAttribute nameAttribute) throws ParseException {
        PRPMMT309000PrincipalPersonName hl7Name;
        hl7Name = new PRPMMT309000PrincipalPersonName();
        hl7Name.setUpdateMode(PRPMMT309000PrincipalPersonNameUpdateMode.C);

        List<String> useList = hl7Name.getUse();
        String nameType = nameAttribute.getUncodedType();
        if ("CRED".equals(nameType)) {
            useList.add("C");
        }
        if ("CURR".equals(nameType)) {
            useList.add("L");
        }

        String lastName = nameAttribute.getLastName();
        String firstName = nameAttribute.getFirstName();
        String middleName = nameAttribute.getMiddleName();
        String secondMiddleName = nameAttribute.getSecondMiddleName();
        String prefix = nameAttribute.getPrefix();
        String suffix = nameAttribute.getSuffix();
        String dataOwner = nameAttribute.getSource();
        String endReasonCode = nameAttribute.getEndReasonCode();
        Date startDate = nameAttribute.getStartDate();
        Date expiryDate = nameAttribute.getExpiryDate();

        if (!StringUtils.isEmpty(endReasonCode)) {
            hl7Name.setUpdateMode(PRPMMT309000PrincipalPersonNameUpdateMode.C);
        }

        List<Serializable> content = hl7Name.getContent();

        if (!StringUtils.isEmpty(lastName)) {
            EnFamily familyNameElement = new EnFamily();
            familyNameElement.setText(lastName);
            content.add(objectFactory.createPRPMMT309000PrincipalPersonNameFamily(familyNameElement));
        }

        if (!StringUtils.isEmpty(firstName)) {
            EnGiven firstNameElement = new EnGiven();
            firstNameElement.setText(firstName);
            content.add(objectFactory.createPRPMMT309000PrincipalPersonNameGiven(firstNameElement));
        }

        if (!StringUtils.isEmpty(middleName)) {
            EnGiven middleNameElement = new EnGiven();
            middleNameElement.setText(middleName);
            content.add(objectFactory.createPRPMMT309000PrincipalPersonNameGiven(middleNameElement));
        }

        if (!StringUtils.isEmpty(secondMiddleName)) {
            EnGiven secondMiddleNameElement = new EnGiven();
            secondMiddleNameElement.setText(secondMiddleName);
            content.add(objectFactory.createPRPMMT309000PrincipalPersonNameGiven(secondMiddleNameElement));
        }

        if (!StringUtils.isEmpty(prefix)) {
            EnPrefix prefixElement = new EnPrefix();
            prefixElement.setText(prefix);
            content.add(objectFactory.createPRPMMT309000PrincipalPersonNamePrefix(prefixElement));
        }

        if (!StringUtils.isEmpty(suffix)) {
            EnSuffix suffixElement = new EnSuffix();
            suffixElement.setText(suffix);
            content.add(objectFactory.createPRPMMT309000PrincipalPersonNameSuffix(suffixElement));
        }

        if (startDate != null || expiryDate != null) {
            IVLTS validTime = createValidTimeFromStartAndExpiryDates(startDate, expiryDate);
            Serializable validTimeElement = objectFactory.createPRPMMT303010HealthCareProviderAddrValidTime(validTime);
            content.add(validTimeElement);
        }

        if (!StringUtils.isEmpty(endReasonCode) || !StringUtils.isEmpty(dataOwner)) {
            content.add(createControlActReferenceIdElement(healthCareProvider, endReasonCode, dataOwner));
        }

        return hl7Name;
    }

//    public static TEL createHL7EmailFromEntityEmail(EmailAttribute entityEmail, PRPMMT309000HealthCareProvider healthCareProvider, Class clazz) throws ParseException {
//        return createHL7EmailFromEntityEmail(entityEmail, healthCareProvider, true, clazz);
//    }
//    public static TEL createHL7EmailFromEntityEmail(EmailAttribute entityEmail, PRPMMT309000HealthCareProvider healthCareProvider, boolean includeAuditInfo, Class clazz) throws ParseException {
//
//        TEL hl7Email;
//
//        try {
//            hl7Email = (TEL) clazz.newInstance();
//        } catch (InstantiationException ex) {
//            throw new RuntimeException(ex);
//        } catch (IllegalAccessException ex) {
//            throw new RuntimeException(ex);
//        }
//
//        String address = entityEmail.getAddress();
//
//        String typeCode = entityEmail.getUncodedType();
//        String communicationPurposeCode = entityEmail.getCommunicationPurposeCode();
//
//        Date startDate = entityEmail.getStartDate();
//        Date expiryDate = entityEmail.getExpiryDate();
//        String dataOwner = entityEmail.getSource();
//        String reasonCode = entityEmail.getEndReasonCode();
//
//        hl7Email.setValue(EMAIL_PREFIX + address);
//
//        if (!StringUtils.isEmpty(reasonCode)) {
//            if (hl7Email instanceof PRPMMT309000HealthCareProviderTelecom) {
//                ((PRPMMT309000HealthCareProviderTelecom) hl7Email).setUpdateMode(PRPMMT309000HealthCareProviderTelecomUpdateMode.C);
//            }
//            if (hl7Email instanceof PRPMMT309000ServiceDeliveryLocationTelecom) {
//                ((PRPMMT309000ServiceDeliveryLocationTelecom) hl7Email).setUpdateMode(PRPMMT309000ServiceDeliveryLocationTelecomUpdateMode.C);
//            }
//        }
//
//        List<String> uses = ConverterUtils40.createCommunicationUses(typeCode, communicationPurposeCode);
//        hl7Email.getUse().addAll(uses);
//
//        if (includeAuditInfo) {
//
//            if (hl7Email instanceof PRPMMT309000HealthCareProviderTelecom) {
//                final PRPMMT309000HealthCareProviderTelecom email = (PRPMMT309000HealthCareProviderTelecom) hl7Email;
//                email.setControlActReferenceId(createControlActReferenceId(healthCareProvider, reasonCode, dataOwner));
//                TS validTime = createValidTimeFromStartAndExpiryDates(startDate, expiryDate);
//                if (validTime != null) {
//                    email.setValidTime(validTime);
//                }
//            }
//
//            if (hl7Email instanceof PRPMMT309000ServiceDeliveryLocationTelecom) {
//                final PRPMMT309000ServiceDeliveryLocationTelecom email = (PRPMMT309000ServiceDeliveryLocationTelecom) hl7Email;
//                email.setControlActReferenceId(createControlActReferenceId(healthCareProvider, reasonCode, dataOwner));
//                TS validTime = createValidTimeFromStartAndExpiryDates(startDate, expiryDate);
//                if (validTime != null) {
//                    email.setValidTime(validTime);
//                }
//            }
//
//        }
//
//        return hl7Email;
//    }
//    public static TEL createHL7PhoneFromEntityPhone(PhoneAttribute entityPhone, PRPMMT309000HealthCareProvider healthCareProvider, Class clazz) throws ParseException {
//        return createHL7PhoneFromEntityPhone(entityPhone, healthCareProvider, true, clazz);
//    }
//    public static TEL createHL7PhoneFromEntityPhone(PhoneAttribute entityPhone, PRPMMT309000HealthCareProvider healthCareProvider, boolean includeAuditInfo, Class clazz) throws ParseException {
//        TEL hl7Phone;
//        try {
//            hl7Phone = (TEL) clazz.newInstance();
//        } catch (InstantiationException ex) {
//            throw new RuntimeException(ex);
//        } catch (IllegalAccessException ex) {
//            throw new RuntimeException(ex);
//        }
//
//        String areaCode = entityPhone.getAreaCode();
//        String number = entityPhone.getNumber();
//
//        String typeCode = entityPhone.getUncodedType();
//        String communicationPurposeCode = entityPhone.getCommunicationPurposeCode();
//
//        Date startDate = entityPhone.getStartDate();
//        Date expiryDate = entityPhone.getExpiryDate();
//        String dataOwner = entityPhone.getSource();
//        String reasonCode = entityPhone.getEndReasonCode();
//
//        StringBuilder builder = new StringBuilder(TELEPHONE_PREFIX);
//
//        if (!StringUtils.isEmpty(areaCode)) {
//            builder.append(areaCode);
//        }
//        if (!StringUtils.isEmpty(number)) {
//            builder.append(number);
//        }
//        hl7Phone.setValue(builder.toString());
//
//        if (!StringUtils.isEmpty(reasonCode)) {
//            if (hl7Phone instanceof PRPMMT309000HealthCareProviderTelecom) {
//                ((PRPMMT309000HealthCareProviderTelecom) hl7Phone).setUpdateMode(PRPMMT309000HealthCareProviderTelecomUpdateMode.C);
//            }
//            if (hl7Phone instanceof PRPMMT309000ServiceDeliveryLocationTelecom) {
//                ((PRPMMT309000ServiceDeliveryLocationTelecom) hl7Phone).setUpdateMode(PRPMMT309000ServiceDeliveryLocationTelecomUpdateMode.C);
//            }
//        }
//
//        List<String> uses = ConverterUtils40.createCommunicationUses(typeCode, communicationPurposeCode);
//        hl7Phone.getUse().addAll(uses);
//
//        if (includeAuditInfo) {
//
//            if (hl7Phone instanceof PRPMMT309000HealthCareProviderTelecom) {
//                final PRPMMT309000HealthCareProviderTelecom phone = (PRPMMT309000HealthCareProviderTelecom) hl7Phone;
//                phone.setControlActReferenceId(createControlActReferenceId(healthCareProvider, reasonCode, dataOwner));
//                TS validTime = createValidTimeFromStartAndExpiryDates(startDate, expiryDate);
//                if (validTime != null) {
//                    phone.setValidTime(validTime);
//                }
//            }
//            if (hl7Phone instanceof PRPMMT309000ServiceDeliveryLocationTelecom) {
//                final PRPMMT309000ServiceDeliveryLocationTelecom phone = (PRPMMT309000ServiceDeliveryLocationTelecom) hl7Phone;
//                phone.setControlActReferenceId(createControlActReferenceId(healthCareProvider, reasonCode, dataOwner));
//                TS validTime = createValidTimeFromStartAndExpiryDates(startDate, expiryDate);
//                if (validTime != null) {
//                    phone.setValidTime(validTime);
//                }
//            }
//
//        }
//
//        return hl7Phone;
//    }
    public static AD createHL7AddressFromEntityAddress(AddressAttribute entityAddress, PRPMMT309000HealthCareProvider healthCareProvider, Class clazz) throws ParseException {
        return createHL7AddressFromEntityAddress(entityAddress, healthCareProvider, true, clazz);
    }

    public static AD createHL7AddressFromEntityAddress(AddressAttribute entityAddress, PRPMMT309000HealthCareProvider healthCareProvider, boolean createAuditFields, Class clazz) throws ParseException {
        AD hl7Address = null;
        String city = entityAddress.getCity();
        String country = entityAddress.getCountry();
        String postalCode = entityAddress.getPostalCode();
        String province = entityAddress.getProvince();
        List<String> streetAddressLines = entityAddress.getStreetAddressLines();
        Date startDate = entityAddress.getStartDate();
        Date expiryDate = entityAddress.getExpiryDate();
        String dataOwner = entityAddress.getSource();
        String reasonCode = entityAddress.getEndReasonCode();
        String addressTypeCode = entityAddress.getUncodedType();
        String communicationPurposeCode = entityAddress.getCommunicationPurposeCode();

        try {
            hl7Address = (AD) clazz.newInstance();
        } catch (InstantiationException ex) {
            throw new RuntimeException(ex);
        } catch (IllegalAccessException ex) {
            throw new RuntimeException(ex);
        }
        List<String> addressUses = ConverterUtils.createCommunicationUses(addressTypeCode, communicationPurposeCode);
        hl7Address.getUse().addAll(addressUses);
//
//        if (!StringUtils.isEmpty(reasonCode)) {
//            if (hl7Address instanceof PRPMMT309000HealthCareProviderAddr) {
//                ((PRPMMT309000HealthCareProviderAddr) hl7Address).setUpdateMode(PRPMMT309000HealthCareProviderAddrUpdateMode.C);
//            } else if (hl7Address instanceof PRPMMT309000ServiceDeliveryLocationAddr) {
//                ((PRPMMT309000ServiceDeliveryLocationAddr) hl7Address).setUpdateMode(PRPMMT309000ServiceDeliveryLocationAddrUpdateMode.C);
//            }
//        }

        List<Serializable> content = hl7Address.getContent();
        if (!StringUtils.isEmpty(city)) {
            AdxpCity cityElement = new AdxpCity();
            cityElement.setText(city);
            JAXBElement<AdxpCity> cityJaxb = objectFactory.createPRPMMT303010HealthCareProviderAddrCity(cityElement);
            content.add(cityJaxb);
        }
        if (!StringUtils.isEmpty(country)) {
            AdxpCountry countryElement = new AdxpCountry();
            countryElement.setText(country);
            JAXBElement<AdxpCountry> countryJaxb = objectFactory.createPRPMMT303010HealthCareProviderAddrCountry(countryElement);
            content.add(countryJaxb);
        }
        if (!StringUtils.isEmpty(postalCode)) {
            AdxpPostalCode postalCodelement = new AdxpPostalCode();
            postalCodelement.setText(postalCode);
            JAXBElement<AdxpPostalCode> postalCodeJaxb = objectFactory.createPRPMMT303010HealthCareProviderAddrPostalCode(postalCodelement);
            content.add(postalCodeJaxb);
        }
        if (!StringUtils.isEmpty(province)) {
            AdxpState stateElement = new AdxpState();
            stateElement.setText(province);
            JAXBElement<AdxpState> stateJaxb = objectFactory.createPRPMMT303010HealthCareProviderAddrState(stateElement);
            content.add(stateJaxb);
        }
        for (String streetAddressLine : streetAddressLines) {
            if (!StringUtils.isEmpty(streetAddressLine)) {
                AdxpStreetAddressLine streetElement = new AdxpStreetAddressLine();
                streetElement.setText(streetAddressLine);
                JAXBElement<AdxpStreetAddressLine> streetJaxb = objectFactory.createPRPMMT303010HealthCareProviderAddrStreetAddressLine(streetElement);
                content.add(streetJaxb);
            }
        }

//        if (createAuditFields) {
//            content.add(createControlActReferenceIdElement(healthCareProvider, reasonCode, dataOwner));
//
//            JAXBElement<TS> addrValidTime = createValidTimeElementFromStartAndExpiryDates(startDate, expiryDate);
//            if (addrValidTime != null) {
//                content.add(addrValidTime);
//            }
//        }
        return hl7Address;
    }

//    public static JAXBElement<TS> createValidTimeElementFromStartAndExpiryDates(Date startDate, Date expiryDate) throws ParseException {
//        JAXBElement<TS> addrValidTime = null;
//
//        IVLTS ts = createValidTimeFromStartAndExpiryDates(startDate, expiryDate);
//        if (ts != null) {
//            addrValidTime = objectFactory.createPRPMMT309000HealthCareProviderAddrValidTime(ts);
//        }
//
//        return addrValidTime;
//    }
    public static IVLTS createValidTimeFromStartAndExpiryDates(Date startDate, Date expiryDate) throws ParseException {
        IVLTS ts = null;
        if (startDate != null || expiryDate != null) {
            ts = new IVLTS();

            List<JAXBElement<? extends QTY>> rest = ts.getRest();

            if (startDate != null) {
                IVXBTS lowValue = new IVXBTS();
                lowValue.setValue(ConverterUtils.convertFromDateToHL7String(startDate));
                JAXBElement<IVXBTS> createIVLTSLow = objectFactory.createIVLTSLow(lowValue);
                rest.add(createIVLTSLow);
            }

            if (expiryDate != null) {
                String hv = ConverterUtils.convertExpiryDateToHL7String(expiryDate);
                if (!"".equals(hv)){
                    IVXBTS highValue = new IVXBTS();
                    highValue.setValue(hv);
                    JAXBElement<IVXBTS> createIVLTSHigh = objectFactory.createIVLTSHigh(highValue);
                    rest.add(createIVLTSHigh);
                }
            }
        }
        return ts;
    }

    public static JAXBElement<II> createControlActReferenceIdElement(PRPMMT309000HealthCareProvider healthCareProvider, String reasonCode, String dataOwner) {
        II addressOwnerRef = createControlActReferenceId(healthCareProvider, reasonCode, dataOwner);
        JAXBElement<II> controlActReferenceId = objectFactory.createENControlActReferenceId(addressOwnerRef);
        return controlActReferenceId;
    }

    public static II createControlActReferenceId(PRPMMT309000HealthCareProvider healthCareProvider, String reasonCode, String dataOwner) {

        final List<PRPMMT309000Subject3> subjectOf2List = healthCareProvider.getSubjectOf2();

        int sequenceNumber = 0;

        for (PRPMMT309000Subject3 subjectOf2 : subjectOf2List) {
            final List<PRPMMT309000Subject6> subjectOfList = subjectOf2.getRoleActivation().getSubjectOf();
            if (CollectionUtils.isEmpty(subjectOfList)) {
                // sequence number is zero
                break;
            }
            String extension = subjectOfList.get(0).getControlActEvent().getId().getExtension();
            try {
                int comparedSequenceValue = Integer.valueOf(extension).intValue();
                if (sequenceNumber < comparedSequenceValue) {
                    sequenceNumber = comparedSequenceValue;
                }
            } catch (NumberFormatException nfe) {
                // not a sequence number -- ignore
                continue;
            }
        }
        sequenceNumber++;

        II addressOwnerRef = new II(AUDIT_INFO_POINTER_OID, String.valueOf(sequenceNumber));

        PRPMMT309000Subject3 owner = new PRPMMT309000Subject3();
        owner.getTypeCode().add(TYPE_CODE_SBJ);
        subjectOf2List.add(owner);

        PRPMMT309000RoleActivation roleActivation = new PRPMMT309000RoleActivation();
        roleActivation.getMoodCode().add(MOOD_CODE_EVN);
        roleActivation.getClassCode().add(CLASS_CODE_CACT);
        owner.setRoleActivation(roleActivation);

        PRPMMT309000Subject6 ownerSubjectOf = new PRPMMT309000Subject6();
        ownerSubjectOf.getTypeCode().add(TYPE_CODE_SUBJ);
        roleActivation.getSubjectOf().add(ownerSubjectOf);

        PRPMMT309000ControlActEvent ownerControlActEvent = new PRPMMT309000ControlActEvent();
        ownerControlActEvent.getMoodCode().add(MOOD_CODE_EVN);
        ownerControlActEvent.getClassCode().add(CLASS_CODE_CACT);
        ownerSubjectOf.setControlActEvent(ownerControlActEvent);
        ownerControlActEvent.setId(new II(AUDIT_INFO_TARGET_OID, String.valueOf(sequenceNumber)));

        CE reasonCodeElement = new CE();
        ownerControlActEvent.getReasonCode().add(reasonCodeElement);
        if (!StringUtils.isEmpty(reasonCode)) {
            reasonCodeElement.setCode(reasonCode);
        }

        PRPMMT309000Custodian custodian = new PRPMMT309000Custodian();
        custodian.getTypeCode().add(TYPE_CODE_CUSTODIAN);
        ownerControlActEvent.getCustodian().add(custodian);

        PRPMMT309000AssignedEntity2 custodianAssignedEntity = new PRPMMT309000AssignedEntity2();
        custodianAssignedEntity.getClassCode().add(CLASS_CODE_ASSIGNED);
        custodian.setAssignedEntity(custodianAssignedEntity);
        custodianAssignedEntity.getId().add(new II(DATA_OWNER_OID, dataOwner));

        return addressOwnerRef;
    }

    public static void setAcknowledgements(MaintainProviderResponseEntity entity, List<MCCIMT000300Acknowledgement> convertedAcknowledgmentList) {
        Collection<AcknowledgementEntity> acknowledgementEntities = entity.getAcknowledgements();
        for (AcknowledgementEntity acknowledgementEntity : acknowledgementEntities) {
            MCCIMT000300Acknowledgement hl7Acknowledgement = new MCCIMT000300Acknowledgement();
            List<MCCIMT000300AcknowledgementDetail> acknowledgementDetails = hl7Acknowledgement.getAcknowledgementDetail();

            final String typeCode = acknowledgementEntity.getTypeCode();
            if (!StringUtils.isEmpty(typeCode)) {
                CS typeCodeCS = new CS();
                typeCodeCS.setCode(typeCode);
                hl7Acknowledgement.setTypeCode(typeCodeCS);
            }

            final String messagesWaitingNumber = acknowledgementEntity.getMessagesWaitingNumber();
            if (!StringUtils.isEmpty(messagesWaitingNumber)) {
                INT messagesWaitingElement = new INT();
                messagesWaitingElement.setValue(new BigInteger(messagesWaitingNumber));
                JAXBElement<INT> messagesWaitingJaxbElement = objectFactory.createMCCIMT000300AcknowledgementMessageWaitingNumber(messagesWaitingElement);
                hl7Acknowledgement.setMessageWaitingNumber(messagesWaitingJaxbElement);
            }

            MCCIMT000300AcknowledgementDetail acknowledgementDetail = new MCCIMT000300AcknowledgementDetail();
            acknowledgementDetails.add(acknowledgementDetail);

            final String code = acknowledgementEntity.getCode();
            if (!StringUtils.isEmpty(code)) {
                CE detailCode = new CE();
                detailCode.setCode(code);
                JAXBElement<CE> ackDetailCodeJaxbElement = objectFactory.createMCCIMT000300AcknowledgementDetailCode(detailCode);
                acknowledgementDetail.setCode(ackDetailCodeJaxbElement);
            }

            final String text = acknowledgementEntity.getText();
            if (!StringUtils.isEmpty(text)) {
                ED ackDetailTextElement = new ED();
                ackDetailTextElement.setText(text);
                JAXBElement<ED> ackDetailTextJaxbElement = objectFactory.createMCCIMT000300AcknowledgementDetailText(ackDetailTextElement);
                acknowledgementDetail.setText(ackDetailTextJaxbElement);
            }

            final String targetMessageID = acknowledgementEntity.getTargetMessageID();
            if (!StringUtils.isEmpty(targetMessageID)) {
                MCCIMT000300TargetMessage targetMessageElement = new MCCIMT000300TargetMessage();
                hl7Acknowledgement.setTargetMessage(targetMessageElement);

                II targetMessageId = new II();
                targetMessageId.setRoot(OidsUser.ACKNOWLEDGEMENT_OID);
                targetMessageId.setExtension(targetMessageID);
                targetMessageElement.setId(targetMessageId);
            }

            convertedAcknowledgmentList.add(hl7Acknowledgement);
        }
    }
}
