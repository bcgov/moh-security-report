/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.QueryResponse;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import java.io.Serializable;
import java.util.Collection;
import java.util.logging.Logger;
import org.apache.camel.Exchange;

/**
 * Class for mapping components between PLR Individual Provider and FHIR BC
 * QueryResponseBundle profile resource.
 *
 * @author dan.stepanov
 */
public class MapIndivProviderToBCQueryResponseBundle implements ProviderFhirConstants, Serializable {

    private static final String CLASSNAME = MapIndivProviderToBCQueryResponseBundle.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    public static Object addProviderToBCQueryResponseBundle(FHIRFactory factory, QueryResponse queryResponse) {
        return addProviderToBCQueryResponseBundle(factory,queryResponse,null);
    }
    
    public static Object addProviderToBCQueryResponseBundle(FHIRFactory factory, QueryResponse queryResponse,Exchange exchange){

        // create BCPractitionerBundle/operationOutcomeQueryResponse types for FHIR model
        Object operationOutcomeQueryResponseFhir = factory.newOperationOutcome();
        Object bcQueryResponseBundleFhir = factory.newBCQueryResponseBundle();

        Collection<ProviderDetails> indivProviders = queryResponse.getProviderDetails();
        Collection<Acknowledgment> acknowledgements = queryResponse.getAcknowledgments();

        if (!indivProviders.isEmpty()) {
            for (ProviderDetails indivProviderDetail : indivProviders) {

                if (indivProviderDetail != null && indivProviderDetail.getPauthId() != null) {
                    Object bcPractitionerBundleFhir = factory.newBCPractitionerBundle();

                    // set Practitioner bundle type to BundleType.TRANSACTION  
                    factory.getSetBundleAttributes().setBundleType(bcPractitionerBundleFhir, FHIRFactory.BundleType.TRANSACTION);

                    MapIndivProviderToBCPractitionerBundle.addProviderToBCPractitionerBundle(factory, indivProviderDetail, bcPractitionerBundleFhir);

                    // SetQueryResponseBundleAttributes w/BCPractitionerBundle profile
                    factory.getSetQueryResponseBundleAttributes().setPractitionerBundle(bcQueryResponseBundleFhir, bcPractitionerBundleFhir);

                }
            }
        } else if (exchange!=null) {
            handle404(exchange);
        }
        mapResponseMessages(acknowledgements, factory, exchange, operationOutcomeQueryResponseFhir,bcQueryResponseBundleFhir);
        
        // SetQueryResponseBundleAttributes w/OperationOutcome QueryResponse
        factory.getSetQueryResponseBundleAttributes().setOperationOutcomeQueryResponse(bcQueryResponseBundleFhir, operationOutcomeQueryResponseFhir);

        // set SetQueryResponse bundle type to BundleType.SEARCHSET  
        factory.getSetBundleAttributes().setBundleType(bcQueryResponseBundleFhir, FHIRFactory.BundleType.SEARCHSET);

        return bcQueryResponseBundleFhir;
    }

    /**
     * Maps the acknowledgements from PLR into an Operation Outcome
     * @param acknowledgements
     * @param factory
     * @param exchange
     * @param operationOutcomeQueryResponseFhir
     * @param bcQueryResponseBundleFhir 
     */
    public static void mapResponseMessages(Collection<Acknowledgment> acknowledgements, FHIRFactory factory, Exchange exchange, Object operationOutcomeQueryResponseFhir, Object bcQueryResponseBundleFhir) {
        if (acknowledgements != null && !acknowledgements.isEmpty()) {
            for (Acknowledgment queryAcknowledgment : acknowledgements) {
                Object operationOutcomeIssueFhir = factory.newOperationOutcomeIssueComponent();
                // SetOperationOutcomeIssueComponentAttributes w/Severity/TypeCode/details for QueryResponse
                // sample <code code="GRS.SYS.UNK.QRY.0.0.7067"/>
                String ackMessageCode = queryAcknowledgment.getMsgCode();
                //If no parameters provided, change HTTP response to 400
                if (ackMessageCode.equals("GRS.SYS.UNK.QRY.1.0.7065") && exchange!=null){
                    exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE,""+400);
                }
                String messageCodeSeverity = "";
                if (ackMessageCode != null && !ackMessageCode.isEmpty()) {
                    String[] parsedMessageCode = ackMessageCode.split(MESSAGE_CODE_CHAR_SEPARATOR);
                    if (parsedMessageCode != null && parsedMessageCode.length > 4 && !parsedMessageCode[4].isEmpty()) {
                        messageCodeSeverity = parsedMessageCode[4];
                        factory.getSetOperationOutcomeIssueComponentAttributes().setIssueSeverity(operationOutcomeIssueFhir, decodeSeverity(factory, messageCodeSeverity));
                    }
                    factory.getSetOperationOutcomeIssueComponentAttributes().setIssueCode(operationOutcomeIssueFhir, decodeIssueType(factory, parsedMessageCode[3]));
                    factory.getSetOperationOutcomeIssueComponentAttributes().setIssueDetails(operationOutcomeIssueFhir, queryAcknowledgment.getMsgCode(), queryAcknowledgment.getMsgText());
                }
                factory.callMethod(operationOutcomeQueryResponseFhir, "addIssue", operationOutcomeIssueFhir);
            }
        }
        // SetQueryResponseBundleAttributes w/OperationOutcome QueryResponse
        factory.getSetQueryResponseBundleAttributes().setOperationOutcomeQueryResponse(bcQueryResponseBundleFhir, operationOutcomeQueryResponseFhir);

        // set SetQueryResponse bundle type to BundleType.SEARCHSET  
        factory.getSetBundleAttributes().setBundleType(bcQueryResponseBundleFhir, FHIRFactory.BundleType.SEARCHSET);
    }

    /**
     * Sets an HTTP error code 404 if no results found and we searched by ID
     * @param exchange 
     */
    public static void handle404(Exchange exchange) {
        //If no results found & we searched by ID, then return a 404 status code
        boolean hasId = exchange.getIn().getHeaders().containsKey("_id");
        if (hasId){
            exchange.getIn().setHeader(Exchange.HTTP_RESPONSE_CODE,""+404);
        }
    }

    public static Object decodeSeverity(FHIRFactory factory, String messageCodeSeverity) {
        switch (messageCodeSeverity) {
            case "0": // info
                return factory.newOOIssueSeverity(FHIRFactory.OperationOutcomeIssueSeverity.INFORMATION);
            case "1": // error
                return factory.newOOIssueSeverity(FHIRFactory.OperationOutcomeIssueSeverity.ERROR);
            case "2": // warning
                return factory.newOOIssueSeverity(FHIRFactory.OperationOutcomeIssueSeverity.WARNING);
            default:
                return factory.newOOIssueSeverity(FHIRFactory.OperationOutcomeIssueSeverity.NULL);
        }
    }

    /**
     * Hardcode to business rule.  That is all we have for now.
     * @param factory FHIR factory
     * @param type The type code
     * @return 
     */
    public static Object decodeIssueType(FHIRFactory factory, String type) {
        switch (type) {
            default:
                return factory.newOOIssueCode(FHIRFactory.OperationOutcomeIssueCode.BUSINESSRULE);
        }

    }

}
