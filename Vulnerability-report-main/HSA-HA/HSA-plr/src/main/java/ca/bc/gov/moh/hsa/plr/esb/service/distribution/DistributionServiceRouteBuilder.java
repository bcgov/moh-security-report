package ca.bc.gov.moh.hsa.plr.esb.service.distribution;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.DistributionProfileType;
import ca.bc.gov.health.plr.dto.esb.DistributionNotification;
import ca.bc.gov.health.plr.dto.esb.DistributionUpdate;
import ca.bc.gov.health.plr.dto.provider.esb.DistributionChangeType;
import ca.bc.gov.moh.hsa.plr.converter.facilitytofhir.DistributionNoticationToFHIRConverter_ForLocation;
import ca.bc.gov.moh.hsa.plr.entity.transaction.DistributionRequestEntity;
import ca.bc.gov.moh.hsa.plr.esb.service.maintain.MessageIdExtractor;
import ca.bc.gov.moh.hsa.plr.esb.service.util.RemoveTransactionHeader;
import ca.bc.gov.moh.hsa.plr.esb.service.util.RestoreTransactionHeader;
import ca.bc.gov.moh.hsa.plr.esb.service.util.SetTransportLayerSecurity;
import ca.bc.gov.moh.hsa.util.audit.AuditProcessor;
import ca.bc.gov.moh.hsa.util.audit.FileDropComponent;
import ca.bc.gov.moh.hsa.util.audit.entity.dao.TransactionDAO;
import com.fasterxml.jackson.databind.DeserializationFeature;
import org.apache.camel.Exchange;
import org.apache.camel.Predicate;
import org.apache.camel.Processor;
import org.apache.camel.builder.PredicateBuilder;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.component.jackson.JacksonDataFormat;
import org.apache.camel.converter.jaxb.JaxbDataFormat;
import org.apache.camel.model.rest.RestBindingMode;
import org.apache.commons.lang.Validate;
import org.hl7.fhir.r4.model.Bundle;
import org.hl7.v3.m4_16.PRPMIN301030CA;
import org.hl7.v3.m4_16.PRPMIN303030CA;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import prs2.whic.org.response.GRSMESSAGE;

/**
 * Builds the camel routes for the Provider Distributions
 * @author greg.perkins
 */
@Component
public class DistributionServiceRouteBuilder extends RouteBuilder {

    private @Value("${distributionStatusURI}") String distributionStatusURI;
    private @Value("${createDistributionStub}") boolean createDistributionStub;
    
    private static final RestoreTransactionHeader RESTORE_TRANSACTION_HEADER = new RestoreTransactionHeader();
    private static final RemoveTransactionHeader REMOVE_TRANSACTION_HEADER = new RemoveTransactionHeader();
    
    @Autowired
    private TransactionDAO dao;
    
    private static final String DISTRIBUTION_PROFILE_TYPE = "distributionProfileType";
    private static final String DISTRIBUTION_CHANGE_TYPE = "distributionChangeType";
    
    /**
     * Configures routes for Provider Distributions
     * @throws Exception 
     */
    @Override
    public void configure() throws Exception {
        
        //Set the https to use TLSv1.2
        SetTransportLayerSecurity.getRegistry();
        
        JaxbDataFormat hl7JaxbFormat = new JaxbDataFormat("org.hl7.v3.m4_16");
        JacksonDataFormat distIn = new JacksonDataFormat(DistributionNotification.class);
        distIn.setInclude("NON_NULL");
        distIn.setPrettyPrint(true);
        distIn.disableFeature(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);
        JacksonDataFormat distOut = new JacksonDataFormat(Acknowledgment.class);
        distOut.setInclude("NON_NULL");
        distOut.setPrettyPrint(true);
        JacksonDataFormat statusOut = new JacksonDataFormat(DistributionUpdate.class);
        statusOut.setInclude("NON_NULL");
        statusOut.setPrettyPrint(true);
        
        AuditProcessor redeliveryProcessor = new AuditProcessor("REDELIVERY", "WARN", null, null);
        redeliveryProcessor.setDao(dao);
        
        // Expose EJB request endpoint
        from("direct:distribution")
            .routeId("direct:distribution")
            .streamCaching()
            .onException(Throwable.class)
                .handled(true)
                .to("messagedrop:ERROR")
                .to("audit:ERROR")
                .bean(DistributionAckBuilder.class, "fail")
            .end()
            .setHeader(FileDropComponent.TRANSACTION_MESSAGE_TYPE_HEADER_KEY, simple("PRDIST"))
            .bean(MessageIdExtractor.class)
            .wireTap("direct:outboundDistributionQueue")
            //ACK back to PLR
            .bean(DistributionAckBuilder.class, "success");
        
        JaxbDataFormat plrJaxbFormat_response = new JaxbDataFormat("prs2.whic.org.response");
        plrJaxbFormat_response.setPrettyPrint(true);
        
        Predicate hl7Add = PredicateBuilder.and(
                header(DISTRIBUTION_CHANGE_TYPE).isEqualTo(DistributionChangeType.ADD),
                header(DISTRIBUTION_PROFILE_TYPE).isEqualTo(DistributionProfileType.HL7));
        Predicate hl7Update = PredicateBuilder.and(
                header(DISTRIBUTION_CHANGE_TYPE).isEqualTo(DistributionChangeType.UPDATE), 
                header(DISTRIBUTION_PROFILE_TYPE).isEqualTo(DistributionProfileType.HL7));
        Predicate fhirR4BC1_Add = PredicateBuilder.and(
                header(DISTRIBUTION_CHANGE_TYPE).isEqualTo(DistributionChangeType.ADD_FACILITY), 
                header(DISTRIBUTION_PROFILE_TYPE).isEqualTo(DistributionProfileType.FHIR_R4BC1));
        Predicate fhirR4BC1_Update = PredicateBuilder.and(
                header(DISTRIBUTION_CHANGE_TYPE).isEqualTo(DistributionChangeType.UPDATE_FACILITY), 
                header(DISTRIBUTION_PROFILE_TYPE).isEqualTo(DistributionProfileType.FHIR_R4BC1));
        
        from("direct:outboundDistributionQueue")
            .routeId("direct:outboundDistributionQueue")
            .streamCaching()
            .onException(Exception.class)
                .handled(true)
                .log("${exception.stacktrace}")
                .convertBodyTo(String.class)
                .to("messagedrop:ERROR")
                .to("audit:ERROR?transactionType=PRDIST&level=ERROR")
                .to("direct:distributionStatusFailure")
            .end()
            .setHeader(FileDropComponent.TRANSACTION_MESSAGE_TYPE_HEADER_KEY, simple("PRDIST"))
            .process(new AddDistributionTypeHeaders())
            .choice()
                .when(fhirR4BC1_Add)
                    .log("Received a FHIR R4 BC1 message ADD.")
                    .to("direct:distributionOutboundFHIR")
                .when(fhirR4BC1_Update)
                    .log("Received a FHIR R4 BC1 message UPDATE.")
                    .to("direct:distributionOutboundFHIR")
                .otherwise()
                    .to("direct:distributionOutboundHL7V3PRSXML")
               .end()
            ;
        
        from("direct:distributionOutboundHL7V3PRSXML")
            .routeId("direct:distributionOutboundHL7V3PRSXML")
            .bean(DistributionAddressExtractor.class)
            .choice()
                .when(hl7Add)
                    .convertBodyTo(DistributionRequestEntity.class)
                    .convertBodyTo(PRPMIN301030CA.class)
                    .setHeader("CamelSpringWebserviceSoapAction", simple("urn:hl7-org:v3/PRPM_IN301030CA"))
                    .marshal(hl7JaxbFormat)
                .when(hl7Update)
                    .convertBodyTo(DistributionRequestEntity.class)
                    .convertBodyTo(PRPMIN303030CA.class)
                    .setHeader("CamelSpringWebserviceSoapAction", simple("urn:hl7-org:v3/PRPM_IN303030CA"))
                    .marshal(hl7JaxbFormat)
                .when(header(DISTRIBUTION_PROFILE_TYPE).isEqualTo(DistributionProfileType.PRSXML))                    
                    .convertBodyTo(DistributionRequestEntity.class)
                    .convertBodyTo(GRSMESSAGE.class)
                    .marshal(plrJaxbFormat_response)
                .otherwise()
                    .throwException(new IllegalArgumentException("Could not determine Distribution type (HL7 ADD/Update, PRS XML)."))
            .end()                   
            .convertBodyTo(String.class)
            .to("audit:DIST_OUT?transactionType=PRDIST&level=INFO")
            .to("messagedrop:DIST_OUT")
            //Send to dummy endpoint (actual URL will be pulled from header)
            .to("direct:distributionOutbound")
            .convertBodyTo(String.class)            
            //Drop the response from the external system    
            .to("audit:DIST_IN?transactionType=PRDIST&level=INFO")
            .to("messagedrop:DIST_IN")
            .to("direct:distributionStatusSuccess")
        ;
        
        from("direct:distributionOutboundFHIR")
            .routeId("direct:distributionOutboundFHIR")
            .bean(FHIRDistributionAddressExtractor.class)
            .convertBodyTo(String.class)
            .to("audit:DIST_OUT?transactionType=PRDIST&level=INFO")
            .to("messagedrop:DIST_OUT")
            // https://www.hl7.org/fhir/http.html#transaction
            // Bundle transactions should always be POST
            .setHeader(Exchange.HTTP_METHOD, constant("POST"))
            .removeHeaders("CamelHttp*")
            .setHeader("content-type",simple("application/fhir+json; fhirVersion=4.0"))
            //.process(REMOVE_TRANSACTION_HEADER)
            // destination address will be ..../Bundle/<distrib event item id>
            .log("Destination address is ${in.headers."+FHIRDistributionAddressExtractor.FHIR_DISTRIBUTION_CONSUMER_ADDRESS+"}")
            .toD("${in.headers."+FHIRDistributionAddressExtractor.FHIR_DISTRIBUTION_CONSUMER_ADDRESS+"}")
            //.process(RESTORE_TRANSACTION_HEADER)
            .convertBodyTo(String.class)            
            //Drop the response from the external system    
            .to("audit:DIST_IN?transactionType=PRDIST&level=INFO")
            .to("messagedrop:DIST_IN")
            .to("direct:distributionStatusSuccess")
        ;
        
        from("direct:distributionStatusSuccess")
                .routeId("direct:distributionStatusSuccess")
                .bean(DistributionStatusUpdater.class, "success")
                .marshal(statusOut)
                .convertBodyTo(String.class)                
                .to("audit:STATUS_OUT?transactionType=PRDIST&level=INFO")
                .to("messagedrop:STATUS_OUT")
                .setHeader(Exchange.HTTP_METHOD, constant("POST"))
                .setHeader("content-type",simple("application/json"))
                .process(REMOVE_TRANSACTION_HEADER)
                .to(distributionStatusURI)
                .process(RESTORE_TRANSACTION_HEADER)
                .to("audit:COMPLETE")
                ;
       
        from("direct:distributionStatusFailure")
                .routeId("direct:distributionStatusFailure")
                .bean(DistributionStatusUpdater.class, "fail")
                .marshal(statusOut)
                .convertBodyTo(String.class)
                .to("audit:STATUS_OUT?transactionType=PRDIST&level=ERROR")
                .to("messagedrop:STATUS_OUT")
                .setHeader(Exchange.HTTP_METHOD, constant("POST"))
                .setHeader("content-type",simple("application/json"))
                .process(REMOVE_TRANSACTION_HEADER)
                .to(distributionStatusURI)
                .process(RESTORE_TRANSACTION_HEADER)
                .to("audit:COMPLETE");
        
        //Setup REST engine
        restConfiguration()
            .component("servlet")
            .bindingMode(RestBindingMode.json)
            .dataFormatProperty("prettyPrint", "true");
        
        //Setup REST endpoint
        from("rest://post:distribution")
            .routeId("rest://post:distribution")
            .convertBodyTo(String.class)
            .to("audit:REST_IN?transactionType=PRDIST&level=INFO")
            .to("messagedrop:REST_IN")
            .unmarshal(distIn)
            .to("direct:distribution")
            .marshal(distOut)
            .convertBodyTo(String.class)
            .to("audit:REST_OUT?transactionType=PRDIST&level=INFO")
            .to("messagedrop:REST_OUT")
            ;

        if (createDistributionStub){
            from("cxf:///outboundDistribution?wsdlURL=wsdl/PRPM_AR300002.wsdl&dataFormat=MESSAGE&endpointName=PRPM_AR300002Soap")
            .routeId("distributionStub")
            .setBody(constant("<?xml version=\"1.0\"?><soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"><soap:Header></soap:Header><soap:Body><ok/></soap:Body></soap:Envelope>"))
            ;
        }
        
    }

    private static class AddDistributionTypeHeaders implements Processor {

        @Override
        public void process(Exchange exchange) throws Exception {
            DistributionNotification distNofication = exchange.getIn().getBody(DistributionNotification.class);
            DistributionProfileType profileType = distNofication.getProfileType();
            DistributionChangeType changeType = distNofication.getChangeType();
            Validate.notNull(profileType, "profileType cannot be null.");
            Validate.notNull(changeType, "changeType cannot be null.");
            
            exchange.getIn().setHeader(DISTRIBUTION_PROFILE_TYPE, profileType);
            exchange.getIn().setHeader(DISTRIBUTION_CHANGE_TYPE, changeType);

        }
    }

}

