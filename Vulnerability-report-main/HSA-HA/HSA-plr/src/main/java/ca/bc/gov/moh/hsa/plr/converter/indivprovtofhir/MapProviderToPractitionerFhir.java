/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir;

import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.uhn.fhir.parser.DataFormatException;
import ca.uhn.fhir.parser.IParser;
import ca.uhn.fhir.validation.FhirValidator;
import ca.uhn.fhir.validation.SingleValidationMessage;
import ca.uhn.fhir.validation.ValidationResult;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hl7.fhir.r4.model.Address;
import org.hl7.fhir.r4.model.Address.AddressUse;
import org.hl7.fhir.r4.model.CodeableConcept;
import org.hl7.fhir.r4.model.Coding;
import org.hl7.fhir.r4.model.ContactPoint;
import org.hl7.fhir.r4.model.ContactPoint.ContactPointSystem;
import org.hl7.fhir.r4.model.ContactPoint.ContactPointUse;
import org.hl7.fhir.r4.model.Enumerations.AdministrativeGender;
import org.hl7.fhir.r4.model.Extension;
import org.hl7.fhir.r4.model.HumanName;
import org.hl7.fhir.r4.model.HumanName.NameUse;
import org.hl7.fhir.r4.model.Identifier;
import org.hl7.fhir.r4.model.Identifier.IdentifierUse;
import org.hl7.fhir.r4.model.Period;
import org.hl7.fhir.r4.model.Practitioner;
import org.hl7.fhir.r4.model.Practitioner.PractitionerQualificationComponent;
import org.hl7.fhir.r4.model.StringType;
import org.hl7.fhir.r4.model.UriType;

/**
 * Class for mapping components between PLR Provider and FHIR Practitioner
 * resource.
 *
 * @author dan.stepanov
 */
public class MapProviderToPractitionerFhir implements ProviderFhirConstants, Serializable {

    private static final String CLASSNAME = MapProviderToPractitionerFhir.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    ProviderDetails indivProviderDetails = new ProviderDetails();

    public String mapIndProviderIdentifiersToPractIdentifier(ProviderDetails indivProviderDetails) throws Exception {

        List<CollegeIdentifierDto> providerIdentifiers = indivProviderDetails.getIdentifiers();

        Practitioner practitionerFhir = new Practitioner();
        String jsonParsedPractitionerFhir = null;

        // create new FHIR identifiers for provider IPC/CPN identifiers
        Identifier identifierTypeIPC = new Identifier();
        Identifier identifierTypeCPN = new Identifier();
        
//        IdentifierUse identifierUseInternal = null;
//        identifierUseInternal = identifierUseInternal.OFFICIAL;
//        identifierTypeIPC.setUse(identifierUseInternal);

        // get period time for each identifier IPC/CPN
        Period IPCIdentifierPeriod = new Period();
        Period CPNIdentifierPeriod = new Period();

        List<Identifier> practIdentifiers = new ArrayList<>();

        for (CollegeIdentifierDto providerIdentifierDto : providerIdentifiers) {

            // IPC identifier
            if (providerIdentifierDto.getTypeCode().contains(INTERNAL_PROVIDER_CODE)) {

                // get IPC value from the identifier
                identifierTypeIPC.setValue(providerIdentifierDto.getIdentifier());

                // set FHIR period start/end date w/effective start/end dates from IPC identifier
                IPCIdentifierPeriod.setStart(providerIdentifierDto.getEffectiveStartDate());
                IPCIdentifierPeriod.setEnd(providerIdentifierDto.getEffectiveEndDate());

                // set period time for IPC identifier
                identifierTypeIPC.setPeriod(IPCIdentifierPeriod);

                // will require extensions for IPC/CPN Identifier types
                CodeableConcept codeableConcept = new CodeableConcept();
                codeableConcept.setText(INTERNAL_PROVIDER_CODE);
                identifierTypeIPC.setType(codeableConcept);

                // set use for IPC identifier -- temp for now
                IdentifierUse identifierIPCUse = null;
                identifierIPCUse = identifierIPCUse.TEMP;
                identifierTypeIPC.setUse(identifierIPCUse);
            }

            // CPN identifier
            if (providerIdentifierDto.getTypeCode().contains(COMMON_PROVIDER_NUMBER)) {

                // get CPN value from the identifier
                identifierTypeCPN.setValue(providerIdentifierDto.getIdentifier());

                // set FHIR period start/end date w/effective start/end dates from CPN identifier
                CPNIdentifierPeriod.setStart(providerIdentifierDto.getEffectiveStartDate());
                CPNIdentifierPeriod.setEnd(providerIdentifierDto.getEffectiveEndDate());

                // set period time for CPN identifier
                identifierTypeCPN.setPeriod(CPNIdentifierPeriod);

                // will require extensions for IPC/CPN Identifier types
                CodeableConcept codeableConcept = new CodeableConcept();
                codeableConcept.setText(COMMON_PROVIDER_NUMBER);
                identifierTypeCPN.setType(codeableConcept);

                // set use for CPN identifier -- secondary for now
                IdentifierUse identifierCPNUse = null;
                identifierCPNUse = identifierCPNUse.SECONDARY;
                identifierTypeCPN.setUse(identifierCPNUse);
            }
        }

        // URI Type - to check if needed?
        UriType uriType = new UriType();
        String uriFhirType = uriType.fhirType();

        // StringType - value (The portion of the identifier typically relevant to the user and which is unique within the context of the system)
        StringType valueIPCNumber = new StringType();

        // end reason code - will need an extension TODO!
        // data owner code/name - check if we need extensions - TODO!
        // add IPC/CPN identifiers to practIdentifiers list and set list to FHIR Practitioner
        practIdentifiers.add(identifierTypeIPC);
        practIdentifiers.add(identifierTypeCPN);

        practitionerFhir.setIdentifier(practIdentifiers);

        jsonParsedPractitionerFhir = parseEncodedPractitioner(practitionerFhir);

        // validate new Practitioner resource w/identifier structure
        validatePractitionerFhir(initializeFhirValidator(), jsonParsedPractitionerFhir);

        return jsonParsedPractitionerFhir;

    }

    public String mapIndProviderNameToPractName(ProviderDetails indivProviderDetails) throws Exception {

        String jsonParsedPractitionerFhir = null;

        List<PersonNameDto> indivPersonNames = indivProviderDetails.getIndNames();

        Practitioner practitionerFhir = new Practitioner();

        // create Human names usual/official FHIR model
        HumanName usualNameFhir = new HumanName();
        HumanName officialNameFhir = new HumanName();

        // get period time
        Period fhirPeriodUsualName = new Period();
        Period fhirPeriodOfficialName = new Period();

        List<HumanName> practNamesFhir = new ArrayList<>();

        for (PersonNameDto personNameDto : indivPersonNames) {
            if (personNameDto.getTypeCode().contains(CRED_NAME_TYPE_CODE_USE_C)) {

                // get name values from the PersonNameDto and set names usual values
                usualNameFhir.setFamily(personNameDto.getLastName());
                // StringType - Given names
                StringType firstNameUsualVal = new StringType();
                firstNameUsualVal.fromStringValue(personNameDto.getFirstName());

                StringType secondNameUsualVal = new StringType();
                secondNameUsualVal.fromStringValue(personNameDto.getSecondName());

                StringType thirdNameUsualVal = new StringType();
                thirdNameUsualVal.fromStringValue(personNameDto.getThirdName());

                // add prefix/suffix for the names
                usualNameFhir.addPrefix(personNameDto.getPrefix());
                usualNameFhir.addSuffix(personNameDto.getSuffix());

                // add full name
                usualNameFhir.setText(personNameDto.getFullName());

                List<StringType> givenUsualNames = new ArrayList<>();
                givenUsualNames.add(firstNameUsualVal);
                givenUsualNames.add(secondNameUsualVal);
                givenUsualNames.add(thirdNameUsualVal);

                usualNameFhir.setGiven(givenUsualNames);

                // add name use FHIR usual
                NameUse usualNameUseFhir = null;
                usualNameUseFhir = usualNameUseFhir.USUAL;
                usualNameFhir.setUse(usualNameUseFhir);

                // set FHIR period start/end date w/effective start/end dates from name
                fhirPeriodUsualName.setStart(personNameDto.getEffectiveStartDate());
                fhirPeriodUsualName.setEnd(personNameDto.getEffectiveEndDate());

                // set period time for names usual
                usualNameFhir.setPeriod(fhirPeriodUsualName);
            }
            if (personNameDto.getTypeCode().contains(CURRENT_NAME_TYPE_CODE_USE_L)) {

                // set names official values
                officialNameFhir.setFamily(personNameDto.getLastName());
                // StringType - Given names
                StringType firstNameOfficialVal = new StringType();
                firstNameOfficialVal.fromStringValue(personNameDto.getFirstName());

                StringType secondNameOfficialVal = new StringType();
                secondNameOfficialVal.fromStringValue(personNameDto.getSecondName());

                StringType thirdNameOfficialVal = new StringType();
                thirdNameOfficialVal.fromStringValue(personNameDto.getThirdName());

                // add prefix/suffix for the names
                officialNameFhir.addPrefix(personNameDto.getPrefix());
                officialNameFhir.addSuffix(personNameDto.getSuffix());

                List<StringType> givenOfficialNames = new ArrayList<>();
                givenOfficialNames.add(firstNameOfficialVal);
                givenOfficialNames.add(secondNameOfficialVal);
                givenOfficialNames.add(thirdNameOfficialVal);

                officialNameFhir.setGiven(givenOfficialNames);

                // add full name
                officialNameFhir.setText(personNameDto.getFullName());

                // set name use
                NameUse officialNameUseFhir = null;
                officialNameUseFhir = officialNameUseFhir.OFFICIAL;
                officialNameFhir.setUse(officialNameUseFhir);

                // set FHIR period start/end date w/effective start/end dates from name
                fhirPeriodOfficialName.setStart(personNameDto.getEffectiveStartDate());
                fhirPeriodOfficialName.setEnd(personNameDto.getEffectiveEndDate());

                // set period time for names official
                officialNameFhir.setPeriod(fhirPeriodOfficialName);
            }
        }

        // end reason code - will need an extension TODO!
        // data owner code/name - check if we need extensions - TODO!
        //add usual/official names to Practitioner names list and set name list to FHIR Practitioner
        practNamesFhir.add(officialNameFhir);
        practNamesFhir.add(usualNameFhir);

        practitionerFhir.setName(practNamesFhir);

        // parse encoded Practitioner Fhir resource
        jsonParsedPractitionerFhir = parseEncodedPractitioner(practitionerFhir);

        // validate new Practitioner resource w/name structure
        validatePractitionerFhir(initializeFhirValidator(), jsonParsedPractitionerFhir);

        return jsonParsedPractitionerFhir;

    }

    public String mapIndProviderTelecomToPractTelecom(ProviderDetails indivProviderDetails) throws Exception {

        List<TelecommunicationDto> indivProviderTelecoms = new ArrayList<>();
        indivProviderTelecoms = indivProviderDetails.getTelecommunication();

        Practitioner practitionerFhir = new Practitioner();
        String jsonParsedPractitionerFhir = null;

        // create Contact points for phone/fax/pager FHIR model
        ContactPoint telephoneFhir = new ContactPoint();
        ContactPoint faxFhir = new ContactPoint();
        ContactPoint pagerFhir = new ContactPoint();
        ContactPoint modemFhir = new ContactPoint();
        ContactPoint mobileFhir = new ContactPoint();

        // get period time
        Period fhirPeriodTelephone = new Period();
        Period fhirPeriodFax = new Period();
        Period fhirPeriodPager = new Period();
        Period fhirPeriodModem = new Period();
        Period fhirPeriodMobile = new Period();

        List<ContactPoint> practTelecomFhir = new ArrayList<>();

        if (!indivProviderTelecoms.isEmpty()) {
            for (TelecommunicationDto providerTelecomDto : indivProviderTelecoms) {
                // telecom type code phone
                if (providerTelecomDto.getTypeCode().contains(TELECOM_TYPE_TELEPHONE)) {

                    // get phone values from the TelecommunicationDto and set contact system point code
                    ContactPointSystem contactPointSystemPhone = null;
                    contactPointSystemPhone = ContactPointSystem.PHONE;
                    telephoneFhir.setSystem(contactPointSystemPhone);

                    StringBuilder phoneNbrFhir = new StringBuilder();
                    if (providerTelecomDto.getAreaCode() != null) {
                        phoneNbrFhir.append(providerTelecomDto.getAreaCode());
                    }
                    if (providerTelecomDto.getNumber() != null) {
                        phoneNbrFhir.append(providerTelecomDto.getNumber());
                    }
                    if (providerTelecomDto.getExtension() != null) {
                        phoneNbrFhir.append(providerTelecomDto.getExtension());
                    }

                    // set telephone FHIR value 
                    telephoneFhir.setValue(phoneNbrFhir.toString());

                    // add phone FHIR use - purpose of this contact point -- TEMP!
                    // we need to add extensions to map communication purpose codes i.e. MC/OC/BC/HC etc...
                    ContactPointUse phoneContactPointUse = null;
                    phoneContactPointUse = phoneContactPointUse.HOME;
                    telephoneFhir.setUse(phoneContactPointUse);

                    // set FHIR period start/end date w/effective start/end dates from telecom
                    fhirPeriodTelephone.setStart(providerTelecomDto.getEffectiveStartDate());
                    fhirPeriodTelephone.setEnd(providerTelecomDto.getEffectiveEndDate());

                    // set period time for telephone FHIR
                    telephoneFhir.setPeriod(fhirPeriodTelephone);
                }
                // telecom type code fax
                if (providerTelecomDto.getTypeCode().contains(TELECOM_TYPE_FAX)) {

                    // get fax values from the TelecommunicationDto and set contact system point code
                    ContactPointSystem contactPointSystemFax = null;
                    contactPointSystemFax = ContactPointSystem.FAX;
                    faxFhir.setSystem(contactPointSystemFax);

                    StringBuilder faxNbrFhir = new StringBuilder();
                    if (providerTelecomDto.getAreaCode() != null) {
                        faxNbrFhir.append(providerTelecomDto.getAreaCode());
                    }
                    if (providerTelecomDto.getNumber() != null) {
                        faxNbrFhir.append(providerTelecomDto.getNumber());
                    }
                    if (providerTelecomDto.getExtension() != null) {
                        faxNbrFhir.append(providerTelecomDto.getExtension());
                    }

                    // set fax FHIR value 
                    faxFhir.setValue(faxNbrFhir.toString());

                    // add fax FHIR use - purpose of this contact point -- TEMP!
                    // we need to add extensions to map communication purpose codes i.e. MC/OC/BC/HC etc...
                    ContactPointUse faxContactPointUse = null;
                    faxContactPointUse = faxContactPointUse.WORK;
                    faxFhir.setUse(faxContactPointUse);

                    // set FHIR period start/end date w/effective start/end dates from telecom
                    fhirPeriodFax.setStart(providerTelecomDto.getEffectiveStartDate());
                    fhirPeriodFax.setEnd(providerTelecomDto.getEffectiveEndDate());

                    // set period time for fax FHIR
                    faxFhir.setPeriod(fhirPeriodFax);
                }
                // telecom type code pager
                if (providerTelecomDto.getTypeCode().contains(TELECOM_TYPE_PAGER)) {

                    // get pager values from the TelecommunicationDto and set contact system point code
                    ContactPointSystem contactPointSystemPager = null;
                    contactPointSystemPager = ContactPointSystem.PAGER;
                    pagerFhir.setSystem(contactPointSystemPager);

                    StringBuilder pagerNbrFhir = new StringBuilder();
                    if (providerTelecomDto.getAreaCode() != null) {
                        pagerNbrFhir.append(providerTelecomDto.getAreaCode());
                    }
                    if (providerTelecomDto.getNumber() != null) {
                        pagerNbrFhir.append(providerTelecomDto.getNumber());
                    }
                    if (providerTelecomDto.getExtension() != null) {
                        pagerNbrFhir.append(providerTelecomDto.getExtension());
                    }

                    // set pager FHIR value 
                    pagerFhir.setValue(pagerNbrFhir.toString());

                    // add pager FHIR use - purpose of this contact point -- TEMP!
                    // we need to add extensions to map communication purpose codes i.e. MC/OC/BC/HC etc...
                    ContactPointUse pagerContactPointUse = null;
                    pagerContactPointUse = pagerContactPointUse.TEMP;
                    pagerFhir.setUse(pagerContactPointUse);

                    // set FHIR period start/end date w/effective start/end dates from telecom
                    fhirPeriodPager.setStart(providerTelecomDto.getEffectiveStartDate());
                    fhirPeriodPager.setEnd(providerTelecomDto.getEffectiveEndDate());

                    // set period time for pager FHIR
                    pagerFhir.setPeriod(fhirPeriodPager);
                }
                // telecom type code modem
                if (providerTelecomDto.getTypeCode().equalsIgnoreCase(TELECOM_TYPE_MODEM)) {

                    // get modem values from the TelecommunicationDto and set contact system point code
                    ContactPointSystem contactPointSystemModem = null;
                    contactPointSystemModem = ContactPointSystem.OTHER; // check for modem - TODO
                    modemFhir.setSystem(contactPointSystemModem);

                    StringBuilder modemNbrFhir = new StringBuilder();
                    if (providerTelecomDto.getAreaCode() != null) {
                        modemNbrFhir.append(providerTelecomDto.getAreaCode());
                    }
                    if (providerTelecomDto.getNumber() != null) {
                        modemNbrFhir.append(providerTelecomDto.getNumber());
                    }
                    if (providerTelecomDto.getExtension() != null) {
                        modemNbrFhir.append(providerTelecomDto.getExtension());
                    }

                    // set modem FHIR value 
                    modemFhir.setValue(modemNbrFhir.toString());

                    // add modem FHIR use - purpose of this contact point -- TEMP!
                    // we need to add extensions to map communication purpose codes i.e. MC/OC/BC/HC etc...
                    ContactPointUse modemContactPointUse = null;
                    modemContactPointUse = modemContactPointUse.TEMP;
                    modemFhir.setUse(modemContactPointUse);

                    // set FHIR period start/end date w/effective start/end dates from telecom
                    fhirPeriodModem.setStart(providerTelecomDto.getEffectiveStartDate());
                    fhirPeriodModem.setEnd(providerTelecomDto.getEffectiveEndDate());

                    // set period time for modem FHIR
                    modemFhir.setPeriod(fhirPeriodModem);
                }
                // telecom type code mobile
                if (providerTelecomDto.getTypeCode().equalsIgnoreCase(TELECOM_TYPE_MOBILE)) {

                    // get mobile values from the TelecommunicationDto and set contact system point code
                    ContactPointSystem contactPointSystemMobile = null;
                    contactPointSystemMobile = ContactPointSystem.PHONE; // check for mobile - TODO
                    mobileFhir.setSystem(contactPointSystemMobile);

                    StringBuilder mobileNbrFhir = new StringBuilder();
                    if (providerTelecomDto.getAreaCode() != null) {
                        mobileNbrFhir.append(providerTelecomDto.getAreaCode());
                    }
                    if (providerTelecomDto.getNumber() != null) {
                        mobileNbrFhir.append(providerTelecomDto.getNumber());
                    }
                    if (providerTelecomDto.getExtension() != null) {
                        mobileNbrFhir.append(providerTelecomDto.getExtension());
                    }

                    // set mobile FHIR value 
                    mobileFhir.setValue(mobileNbrFhir.toString());

                    // add mobile FHIR use - purpose of this contact point -- TEMP!
                    // we need to add extensions to map communication purpose codes i.e. MC/OC/BC/HC etc...
                    ContactPointUse mobileContactPointUse = null;
                    mobileContactPointUse = mobileContactPointUse.MOBILE; // TODO check for mobile
                    mobileFhir.setUse(mobileContactPointUse);

                    // set FHIR period start/end date w/effective start/end dates from telecom
                    fhirPeriodMobile.setStart(providerTelecomDto.getEffectiveStartDate());
                    fhirPeriodMobile.setEnd(providerTelecomDto.getEffectiveEndDate());

                    // set period time for mobile FHIR
                    mobileFhir.setPeriod(fhirPeriodMobile);
                }
            }
        }

        // end reason code - will need an extension TODO!
        // data owner code/name - check if we need extensions - TODO!
        // telecom purpose codes will need extensions for telecom specific phone/fax/paget
        //add phone/fax/pager/mobile to Practitioner telecom list and set telecom list to FHIR Practitioner
        practTelecomFhir.add(telephoneFhir);
        practTelecomFhir.add(faxFhir);
        practTelecomFhir.add(pagerFhir);
        practTelecomFhir.add(modemFhir);
        practTelecomFhir.add(mobileFhir);

        practitionerFhir.setTelecom(practTelecomFhir);

        jsonParsedPractitionerFhir = parseEncodedPractitioner(practitionerFhir);

        // validate new Practitioner resource w/telecom structure
        validatePractitionerFhir(initializeFhirValidator(), jsonParsedPractitionerFhir);

        return jsonParsedPractitionerFhir;

    }

    public String mapIndProviderDemographicDetailsToFhir(ProviderDetails indivProviderDetails) throws Exception {

        List<DemographicDetailsDto> indivPersonDemographicDetailsDto = indivProviderDetails.getDemographicDetails();

        Practitioner practitionerFhir = new Practitioner();
        String jsonParsedPractitionerFhir = null;

        // create AdministrativeGender in FHIR model
        AdministrativeGender fhirGender = null;

        // create birthdate for FHIR model
        Date birthdateFhir = new Date();

        for (DemographicDetailsDto demographicDetailsDto : indivPersonDemographicDetailsDto) {
            if (demographicDetailsDto.getTypeCode().contains(GENDER_CODE_FEMALE)) {
                // set gender value
                fhirGender = fhirGender.FEMALE;
            }
            if (demographicDetailsDto.getTypeCode().contains(GENDER_CODE_MALE)) {
                // set gender value
                fhirGender = fhirGender.MALE;
            }
            if (demographicDetailsDto.getTypeCode().contains(GENDER_CODE_UNKNOWN)) {
                // set gender value
                fhirGender = fhirGender.UNKNOWN;
            }

            // get period time
//            Period fhirPeriodGender = new Period();
            // set FHIR period start/end date w/effective start/end dates from demographics
//            fhirPeriodGender.setStart(demographicDetailsDto.getEffectiveStartDate());
//            fhirPeriodGender.setEnd(demographicDetailsDto.getEffectiveEndDate());
            if (demographicDetailsDto.getBirthDate() != null) {
                birthdateFhir = demographicDetailsDto.getBirthDate();
            }

        }

        // end reason code - will need an extension - TODO!
        // data owner code/name - check if we need extensions - TODO!
        // birthplace - will need an extension - TODO!
        // deathdate  - will need extension - TODO!
        practitionerFhir.setGender(fhirGender);
        practitionerFhir.setBirthDate(birthdateFhir);

        jsonParsedPractitionerFhir = parseEncodedPractitioner(practitionerFhir);

        // validate new Practitioner resource w/birthdate/gender structure
        validatePractitionerFhir(initializeFhirValidator(), jsonParsedPractitionerFhir);

        return jsonParsedPractitionerFhir;
    }

    public String mapIndProviderAddressToPractAddress(ProviderDetails indivProviderDetails) throws Exception {

        List<AddressDto> indivPersonAddress = indivProviderDetails.getAddresses();

        Practitioner practitionerFhir = new Practitioner();
        String jsonParsedPractitionerFhir = null;

        // create address types mailing/physical FHIR model
        Address pracAddressMailFhir = new Address();
        Address pracAddressPhysicalFhir = new Address();

        // get period time
        Period fhirPeriodAddressMail = new Period();
        Period fhirPeriodAddressPhysical = new Period();

        List<Address> practAddressFhir = new ArrayList<>();

        for (AddressDto personAddressDto : indivPersonAddress) {
            // map address mailing
            if (personAddressDto.getTypeCode().contains(ADDRESS_TYPE_MAIL)) {

                // get address city values from the AddressDto and set address mail type values
                pracAddressMailFhir.setCity(personAddressDto.getCity());
                // get address postal code values from the AddressDto and set address mail type values
                pracAddressMailFhir.setPostalCode(personAddressDto.getPostalCode());
                // get address province/state code values from the AddressDto and set address mail type values
                pracAddressMailFhir.setState(personAddressDto.getProvinceOrStateTxt());
                // get address country code values from the AddressDto and set address mail type values
                pracAddressMailFhir.setCountry(personAddressDto.getCountryCode());

                // StringType - address lines
                StringType lineOneAddressVal = new StringType();
                lineOneAddressVal.fromStringValue(personAddressDto.getAddressLineOne());

                StringType lineTwoAddressVal = new StringType();
                lineTwoAddressVal.fromStringValue(personAddressDto.getAddressLineTwo());

                StringType lineThreeAddressVal = new StringType();
                lineThreeAddressVal.fromStringValue(personAddressDto.getAddressLineThree());

                List<StringType> addressLinesMail = new ArrayList<>();
                addressLinesMail.add(lineOneAddressVal);
                addressLinesMail.add(lineTwoAddressVal);
                addressLinesMail.add(lineThreeAddressVal);

                pracAddressMailFhir.setLine(addressLinesMail);

                // add full address mail
                pracAddressMailFhir.setText(personAddressDto.getFullAddress());

                // add address use FHIR required field -- TODO w/extension for specific PLR purpose codes
                AddressUse addressUseMailFhir = null;
                addressUseMailFhir = addressUseMailFhir.TEMP;
                pracAddressMailFhir.setUse(addressUseMailFhir);

                // set FHIR period start/end date w/effective start/end dates from address
                fhirPeriodAddressMail.setStart(personAddressDto.getEffectiveStartDate());
                fhirPeriodAddressMail.setEnd(personAddressDto.getEffectiveEndDate());

                // set period time for addresss type mail
                pracAddressMailFhir.setPeriod(fhirPeriodAddressMail);
            }
            // map address physical
            if (personAddressDto.getTypeCode().contains(ADDRESS_TYPE_PHYSICAL)) {

                // get address city values from the AddressDto and set address physical type values
                pracAddressPhysicalFhir.setCity(personAddressDto.getCity());
                // get address postal code values from the AddressDto and set address physical type values
                pracAddressPhysicalFhir.setPostalCode(personAddressDto.getPostalCode());
                // get address province/state code values from the AddressDto and set address physical type values
                pracAddressPhysicalFhir.setState(personAddressDto.getProvinceOrStateTxt());
                // get address country code values from the AddressDto and set address physical type values
                pracAddressPhysicalFhir.setCountry(personAddressDto.getCountryCode());

                // StringType - address lines
                StringType lineOneAddressVal = new StringType();
                lineOneAddressVal.fromStringValue(personAddressDto.getAddressLineOne());

                StringType lineTwoAddressVal = new StringType();
                lineTwoAddressVal.fromStringValue(personAddressDto.getAddressLineTwo());

                StringType lineThreeAddressVal = new StringType();
                lineThreeAddressVal.fromStringValue(personAddressDto.getAddressLineThree());

                List<StringType> addressLinesPhysical = new ArrayList<>();
                addressLinesPhysical.add(lineOneAddressVal);
                addressLinesPhysical.add(lineTwoAddressVal);
                addressLinesPhysical.add(lineThreeAddressVal);

                pracAddressPhysicalFhir.setLine(addressLinesPhysical);

                // add full address physical
                pracAddressPhysicalFhir.setText(personAddressDto.getFullAddress());

                // add address use FHIR required field -- TODO w/extension for specific PLR purpose codes
                AddressUse addressUsePhysicalFhir = null;
                addressUsePhysicalFhir = addressUsePhysicalFhir.TEMP;
                pracAddressPhysicalFhir.setUse(addressUsePhysicalFhir);

                // set FHIR period start/end date w/effective start/end dates from address
                fhirPeriodAddressPhysical.setStart(personAddressDto.getEffectiveStartDate());
                fhirPeriodAddressPhysical.setEnd(personAddressDto.getEffectiveEndDate());

                // set period time for addresss type physical
                pracAddressPhysicalFhir.setPeriod(fhirPeriodAddressPhysical);
            }

        }

        // end reason code - will need an extension TODO!
        // data owner code/name - check if we need extensions - TODO!
        //add mail/physical addresses to Practitioner address list and set address list to FHIR Practitioner
        practAddressFhir.add(pracAddressMailFhir);
        practAddressFhir.add(pracAddressPhysicalFhir);

        practitionerFhir.setAddress(practAddressFhir);

        jsonParsedPractitionerFhir = parseEncodedPractitioner(practitionerFhir);

        // validate new Practitioner resource w/address structure
        validatePractitionerFhir(initializeFhirValidator(), jsonParsedPractitionerFhir);

        return jsonParsedPractitionerFhir;

    }

    public String mapIndProviderCredentialsToPractQualification(ProviderDetails indivProviderDetails) throws Exception {

        List<CredentialsDto> indivPersonCredentials = indivProviderDetails.getCredentials();

        Practitioner practitionerFhir = new Practitioner();
        String jsonParsedPractitionerFhir = null;

        List<PractitionerQualificationComponent> pracQualifications = new ArrayList<>();

        for (CredentialsDto personCredentialsDto : indivPersonCredentials) {

            // create prac qualification component FHIR model
            PractitionerQualificationComponent pracQualifFhir = new PractitionerQualificationComponent();

            // map credential types
            // get qualification component for each credential from individ provider values from the CredentialsDto and set QualificationComponent values
            CodeableConcept qualificationCodeConcept = new CodeableConcept();
            Coding qualCode = new Coding();

            // TODO to verify if all the credential codes from PLR provider match w/qualification codes from FHIR
            // PRS_CT_PROV_CREDENTIAL_TYPES has 58 credential codes 
            // FHIR Code System Content v2.7 has 61 codes --see https://www.hl7.org/fhir/v2/0360/2.7/index.html 
            // some credentials codes don't match or doesn't exist i.e DN/EMR/EMT-P/LPND/
            qualCode.setCode(personCredentialsDto.getTypeCode());
            List<Coding> qualCodes = new ArrayList<>();
            qualCodes.add(qualCode);
            qualificationCodeConcept.setCoding(qualCodes);

            pracQualifFhir.setCode(qualificationCodeConcept);

            // set credential org identifiers
            List<Identifier> credentialIdentifiers = new ArrayList<>();
            Identifier credentialId = new Identifier();
            // set credential registration number - to be verified TODO!
            credentialId.setValue(personCredentialsDto.getRegistrationNumber());
            credentialIdentifiers.add(credentialId);

            pracQualifFhir.setIdentifier(credentialIdentifiers);

            // designation/personCredentialsDto.getDesignation() - will need extension TODO!
            // yearIssued/personCredentialsDto.getYearIssued() - will need extension TODO!
            // equivalency flag/personCredentialsDto.isEquivalencyFlag() - will need extension TODO!
            List<Extension> credentialExtensions = new ArrayList<>();
            Extension credentialExtension = new Extension();
            pracQualifFhir.setExtension(credentialExtensions);

            // set institution reference that issued credential
//            Reference credentialIssuedRef = new Reference();
//            credentialIssuedRef.setDisplay(personCredentialsDto.getGrantingInstitution());
//            pracQualifFhir.setIssuer(credentialIssuedRef);
            // create org institution that issued credential in FHIR
//            Organization institutionOrg = new Organization();
            // create an address associated w/org institution that issued credential in FHIR
//            Address institutionAddress = new Address();
            // set city/provinceState/country codes in institutionAddress FHIR w/values from provider credential 
//            institutionAddress.setCity(personCredentialsDto.getInstitutionCity());
//            institutionAddress.setState(personCredentialsDto.getInstitutionProvStateCode());
//            institutionAddress.setCountry(personCredentialsDto.getInstitutionCountryCode());
            // add institution address to org institution that issued credential
//            institutionOrg.addAddress(institutionAddress);
            // set granting institution name
//            institutionOrg.setName(personCredentialsDto.getGrantingInstitution());
            // set org institution name in FHIR
//            pracQualifFhir.setIssuerTarget(institutionOrg);
            // get period time
            Period fhirPeriodQualification = new Period();

            // set FHIR period start/end date w/effective start/end dates from credential
            fhirPeriodQualification.setStart(personCredentialsDto.getEffectiveStartDate());
            fhirPeriodQualification.setEnd(personCredentialsDto.getEffectiveEndDate());

            // set period time for each credential
            pracQualifFhir.setPeriod(fhirPeriodQualification);

            //add Qualification components Fhir to Practitioner qualification list
            pracQualifications.add(pracQualifFhir);
        }

        // end reason code - will need an extension TODO!
        // data owner code/name - check if we need extensions - TODO!
        // set qualification list to FHIR Practitioner
        practitionerFhir.setQualification(pracQualifications);

        jsonParsedPractitionerFhir = parseEncodedPractitioner(practitionerFhir);

        // validate new Practitioner resource w/qualification structure
        validatePractitionerFhir(initializeFhirValidator(), jsonParsedPractitionerFhir);

        return jsonParsedPractitionerFhir;
    }

    public String mapIndProviderExpertiseToPractLanguage(ProviderDetails indivProviderDetails) throws Exception {

        List<ExpertiseDto> indivPersonExpertise = indivProviderDetails.getExpertise();

        Practitioner practitionerFhir = new Practitioner();
        String jsonParsedPractitionerFhir = null;

        List<CodeableConcept> languageCodes = new ArrayList<>();

        for (ExpertiseDto personExpertiseDto : indivPersonExpertise) {

            // create prac common language component FHIR model
            CodeableConcept languageCodeConcept = new CodeableConcept();

            List<Coding> langCodes = new ArrayList<>();
            // map language code type
            // get language component for each expertise from individ provider values from the ExpertiseDto
            if (personExpertiseDto.getRoleTypeCode().equalsIgnoreCase(EXPERTISE_LANGUAGE_CODE)) {
                // TODO to verify if all the expertise codes from PLR provider match w/language codes from FHIR
                // PRS_CT_PROV_EXPERTISE_TYPES where PROV_ROLE_TYPE = 'LANG' has 207 language codes
                // FHIR value set includes codes from the 'urn:ietf:bcp:47' -- see https://www.hl7.org/fhir/valueset-languages.html
                // PLR language codes from expertise don't seem to match any of the FHIR all-language codes
                Coding languageCode = new Coding();
                languageCode.setCode(personExpertiseDto.getTypeCode());
                languageCode.setDisplay(personExpertiseDto.getType());

                langCodes.add(languageCode);
                languageCodeConcept.setCoding(langCodes);

                //add language Code Conceptd Fhir to Practitioner language code list
                languageCodes.add(languageCodeConcept);
            }

        }

        // end reason code - will need an extension TODO!
        // data owner code/name - check if we need extensions - TODO!
        // missing start/end dates for language/expertise code - will need an extension TODO!
        // set communication language codes list to FHIR Practitioner
        practitionerFhir.setCommunication(languageCodes);

        jsonParsedPractitionerFhir = parseEncodedPractitioner(practitionerFhir);

        // validate new Practitioner resource w/language structure
        validatePractitionerFhir(initializeFhirValidator(), jsonParsedPractitionerFhir);

        return jsonParsedPractitionerFhir;
    }

    public String parseEncodedPractitioner(Practitioner practitionerFhir) throws DataFormatException {
        // Instantiate a new JSON parser
        IParser jparser = FhirContextFactory.forR4().newJsonParser();

        // Serialize it
        String serializedPrac = jparser.encodeResourceToString(practitionerFhir);

        LOG.log(Level.INFO, "MapProviderToPractitionerFhir parseEncodedPractitioner serializedPrac is: {0}.", new Object[]{serializedPrac});

        return serializedPrac;
    }

    public FhirValidator initializeFhirValidator() {
        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator validator = FhirContextFactory.forR4().newValidator();
        /*
        * set FHIR validator to validate against standard schema during validation
         */
        validator.setValidateAgainstStandardSchema(true);
        return validator;
    }

    public boolean validatePractitionerFhir(FhirValidator validator, String parsedPractitionerFhir) throws DataFormatException {
        // Validate
        ValidationResult validResult = null;
        boolean isPractResultValid = false;
        try {
            validResult = validator.validateWithResult(parsedPractitionerFhir);
        } catch (DataFormatException dfe) {
            LOG.log(Level.SEVERE, "MapProviderToPractitionerFhir encountered a data format error while validate Practitioner Fhir.");
        } catch (Exception ex) {
            LOG.log(Level.SEVERE, "MapProviderToPractitionerFhir encountered an error while validating Practitioner Fhir.");
        }
        if (validResult != null && validResult.isSuccessful()) {
            isPractResultValid = true;
        } else if (validResult != null && !validResult.isSuccessful()) {
            // display the validation issues
            for (SingleValidationMessage validMsg : validResult.getMessages()) {

                LOG.log(Level.INFO, "MapProviderToPractitionerFhir validation issue severity is: {0} and location is: {1} and message is: {2}.",
                        new Object[]{validMsg.getSeverity(), validMsg.getLocationString(), validMsg.getMessage()});
            }
        }

        LOG.log(Level.INFO, "MapProviderToPractitionerFhir validatePractitionerFhir isPractResultValid is: {0}.",
                new Object[]{isPractResultValid});

        return isPractResultValid;
    }

}
