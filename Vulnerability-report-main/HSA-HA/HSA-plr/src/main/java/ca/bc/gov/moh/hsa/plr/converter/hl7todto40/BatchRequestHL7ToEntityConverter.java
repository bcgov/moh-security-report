package ca.bc.gov.moh.hsa.plr.converter.hl7todto40;

import ca.bc.gov.moh.hsa.entity.CommunicationFunction;
import static ca.bc.gov.moh.hsa.plr.converter.dtotohl7.PLREntityToHL7BatchTypeConverter.BATCH_RESPONSE_INTERACTION_ID_ADD;
import static ca.bc.gov.moh.hsa.plr.converter.dtotohl7.PLREntityToHL7BatchTypeConverter.BATCH_RESPONSE_INTERACTION_ID_UPDATE;
import ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils;
import static ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser.MESSAGE_OID;
import static ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser.RECEIVER_ENVIRONMENT_OID;
import static ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser.RECEIVER_FACILITY_OID;
import static ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser.SENDER_ENVIRONMENT_OID;
import static ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser.SENDER_FACILITY_OID;
import ca.bc.gov.moh.hsa.plr.entity.transaction.BatchRequestEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.MaintainProviderRequestEntity;
import java.math.BigInteger;
import java.util.List;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Unmarshaller;
import org.apache.cxf.common.util.CollectionUtils;
import org.apache.cxf.common.util.StringUtils;
import org.hl7.v3.m4_0.CS;
import org.hl7.v3.m4_0.EN;
import org.hl7.v3.m4_0.II;
import org.hl7.v3.m4_0.INT;
import org.hl7.v3.m4_0.MCCIMT200100Agent;
import org.hl7.v3.m4_0.MCCIMT200100Batch;
import org.hl7.v3.m4_0.MCCIMT200100Device;
import org.hl7.v3.m4_0.MCCIMT200100Organization;
import org.hl7.v3.m4_0.MCCIMT200100Receiver;
import org.hl7.v3.m4_0.MCCIMT200100Sender;
import org.hl7.v3.m4_0.PRPMIN301010MCCIMT000100Message;
import org.hl7.v3.m4_0.PRPMIN303010MCCIMT000100Message;
import org.hl7.v3.m4_0.TEL;
import org.hl7.v3.m4_0.TS;
import org.w3c.dom.Node;
import static ca.bc.gov.moh.hsa.plr.esb.service.batch.BatchServiceRouteBuilder.BATCH_MAX_MESSAGE_COUNT;
import org.w3c.dom.NodeList;

/**
 *
 * @author conrad.gustafson
 */
public class BatchRequestHL7ToEntityConverter {

    private static final JAXBContext jaxbContextAdd;
    private static final JAXBContext jaxbContextUpdate;
    
    private static AddProviderHL7ToEntityConverter addConverter = new AddProviderHL7ToEntityConverter();
    private static UpdateProviderHL7ToEntityConverter updateConverter = new UpdateProviderHL7ToEntityConverter();

    static {
        try {
            jaxbContextAdd = JAXBContext.newInstance(PRPMIN301010MCCIMT000100Message.class);
            jaxbContextUpdate = JAXBContext.newInstance(PRPMIN303010MCCIMT000100Message.class);
        } catch (JAXBException ex) {
            throw new RuntimeException(ex);
        }
    }

    public BatchRequestEntity convertMCCIMT200100BatchToEntity(MCCIMT200100Batch batchRequest, String transactionId) throws JAXBException {
        BatchRequestEntity requestEntity = new BatchRequestEntity();
        
        requestEntity.setMessageType("MCCI_IN200100");
        requestEntity.setMessageId(transactionId);

        setCreationTime(batchRequest, requestEntity);
        setInteractionType(batchRequest, requestEntity);
        setVersionCode(batchRequest, requestEntity);

        setSenderFields(batchRequest, requestEntity);
        setReceiverFields(batchRequest, requestEntity);

        List<INT> totalNumberList = batchRequest.getBatchTotalNumber();
        if (!CollectionUtils.isEmpty(totalNumberList)) {
            INT totalNumber = totalNumberList.get(0);
            BigInteger totalNumberInteger = totalNumber.getValue();
            requestEntity.setTotalNumber(totalNumberInteger);
        }

        CS acceptAckCode = batchRequest.getAcceptAckCode();
        if (acceptAckCode != null) {
            requestEntity.setAcceptAckCode(acceptAckCode.getCode());
        }

        List<MaintainProviderRequestEntity> requestEntityList = requestEntity.getMaintainProviderRequestEntities();
        List<Object> transmissions = batchRequest.getTransmission();
        
        for (Object transmission : transmissions) {

            NodeList childNodes = ((Node) transmission).getChildNodes();
            
            for (int i = 0; i < childNodes.getLength(); i++) {
                
                Node childNode = childNodes.item(i);
                
                MaintainProviderRequestEntity entity = null;
                
                if ("PRPM_IN301010".equals(childNode.getNodeName())) {
                    Unmarshaller jaxbUnmarshaller = jaxbContextAdd.createUnmarshaller();
                    JAXBElement<PRPMIN301010MCCIMT000100Message> element = jaxbUnmarshaller.unmarshal(childNode, PRPMIN301010MCCIMT000100Message.class);
                    PRPMIN301010MCCIMT000100Message add = element.getValue();
                    entity = addConverter.convertHL7RequestMessage(add);
                    entity.setInteractionId(BATCH_RESPONSE_INTERACTION_ID_ADD);
                }
                
                if ("PRPM_IN303010".equals(childNode.getNodeName())) {
                    Unmarshaller jaxbUnmarshaller = jaxbContextUpdate.createUnmarshaller();
                    JAXBElement<PRPMIN303010MCCIMT000100Message> element = jaxbUnmarshaller.unmarshal(childNode, PRPMIN303010MCCIMT000100Message.class);
                    PRPMIN303010MCCIMT000100Message update = element.getValue();
                    entity = updateConverter.convertHL7RequestMessage(update);
                    entity.setInteractionId(BATCH_RESPONSE_INTERACTION_ID_UPDATE);
                }
                
                if (entity != null) {
                    requestEntityList.add(entity);
                }
                
            }
            
            if (requestEntityList.size() > BATCH_MAX_MESSAGE_COUNT) {
                throw new IllegalArgumentException("Number of messages in batch (" + requestEntityList.size() + ") exceeds maximum of " + BATCH_MAX_MESSAGE_COUNT);
            }
        }

        return requestEntity;
    }

    public void setReceiverFields(MCCIMT200100Batch providerMessage, BatchRequestEntity requestEntity) {
        CommunicationFunction communicationFunction = null;

        List<MCCIMT200100Receiver> receivers = providerMessage.getReceiver();
        if (receivers != null && !CollectionUtils.isEmpty(receivers)) {
            MCCIMT200100Receiver hl7Receiver = receivers.get(0);
            if (hl7Receiver != null) {
                List<CommunicationFunction> communicationFunctionList = requestEntity.getReceiver();
                if (communicationFunctionList != null && !communicationFunctionList.isEmpty()) {
                    communicationFunction = communicationFunctionList.get(0);

                    JAXBElement<TEL> telecomElement = hl7Receiver.getTelecom();
                    if (telecomElement == null) {
                        return;
                    }

                    TEL telecom = telecomElement.getValue();
                    if (telecom != null) {
                        String telecomValue = telecom.getValue();
                        if (!StringUtils.isEmpty(telecomValue)) {
                            communicationFunction.setNetworkAddress(telecomValue);
                        }
                    }

                    MCCIMT200100Device device = hl7Receiver.getDevice();
                    if (device != null) {

                        List<II> ids = device.getId();

                        String environment = ConverterUtils.findIdForOid40(ids, RECEIVER_ENVIRONMENT_OID);
                        communicationFunction.setEnvironment(environment);

                        String facilityId = ConverterUtils.findIdForOid40(ids, RECEIVER_FACILITY_OID);
                        communicationFunction.setFacilityId(facilityId);

                        List<EN> nameList = device.getName();
                        if (nameList != null && !CollectionUtils.isEmpty(nameList)) {
                            EN name = nameList.get(0);
                            communicationFunction.setSystemName(name.getText());
                        }
                    }

                    JAXBElement<MCCIMT200100Agent> agencyFor = device.getAgencyFor();
                    if (agencyFor != null) {
                        MCCIMT200100Agent agencyForValue = agencyFor.getValue();
                        JAXBElement<MCCIMT200100Organization> representedOrganization = agencyForValue.getRepresentedOrganization();
                        if (representedOrganization != null) {
                            MCCIMT200100Organization representedOrganizationValue = representedOrganization.getValue();
                            List<II> ids = representedOrganizationValue.getId();
                            if (ids != null && !CollectionUtils.isEmpty(ids)) {
                                II representedOrganizationId = ids.get(0);
                                if (representedOrganizationId != null) {
                                    communicationFunction.setOrganizationId(representedOrganizationId.getExtension());
                                }
                            }
                        }
                    }
                }
            }
        }

    }

    public void setSenderFields(MCCIMT200100Batch providerMessage, BatchRequestEntity requestEntity) {
        MCCIMT200100Sender hl7Sender = providerMessage.getSender();
        if (hl7Sender != null) {
            CommunicationFunction communicationFunction = requestEntity.getSender();

            JAXBElement<TEL> telecomElement = hl7Sender.getTelecom();
            if (telecomElement != null) {
                TEL telecom = telecomElement.getValue();
                if (telecom != null) {
                    String telecomValue = telecom.getValue();
                    if (!StringUtils.isEmpty(telecomValue)) {
                        communicationFunction.setNetworkAddress(telecomValue);
                    }
                }
            }

            MCCIMT200100Device device = hl7Sender.getDevice();
            if (device != null) {

                List<II> ids = device.getId();

                String environment = ConverterUtils.findIdForOid40(ids, SENDER_ENVIRONMENT_OID);
                communicationFunction.setEnvironment(environment);

                String facilityId = ConverterUtils.findIdForOid40(ids, SENDER_FACILITY_OID);
                communicationFunction.setFacilityId(facilityId);

                List<EN> nameList = device.getName();
                if (!CollectionUtils.isEmpty(nameList)) {
                    final EN name = nameList.get(0);
                    if (name != null) {
                        communicationFunction.setSystemName(name.getText());
                    }
                }

                JAXBElement<MCCIMT200100Agent> agencyFor = device.getAgencyFor();
                if (agencyFor != null) {
                    MCCIMT200100Agent agencyForValue = agencyFor.getValue();
                    JAXBElement<MCCIMT200100Organization> representedOrganization = agencyForValue.getRepresentedOrganization();
                    if (representedOrganization != null) {
                        MCCIMT200100Organization representedOrganizationValue = representedOrganization.getValue();
                        List<II> idList = representedOrganizationValue.getId();
                        if (!CollectionUtils.isEmpty(idList)) {
                            II representedOrganizationId = idList.get(0);
                            if (representedOrganizationId != null) {
                                communicationFunction.setOrganizationId(representedOrganizationId.getExtension());
                            }
                        }
                    }
                }
            }
        }

    }

    public void setCreationTime(MCCIMT200100Batch providerMessage, BatchRequestEntity requestEntity) {
        TS creationTime = providerMessage.getCreationTime();
        if (creationTime != null) {
            requestEntity.setCreationTime(ConverterUtils.convertFromHL7StringToDate(creationTime.getValue()));
        }
    }

    public void setMessageId(MCCIMT200100Batch providerMessage, BatchRequestEntity requestEntity) {
        final II id = providerMessage.getId();
        String idRoot = id.getRoot();
        if (!StringUtils.isEmpty(idRoot) && MESSAGE_OID.equals(idRoot)) {
            requestEntity.setMessageId(id.getExtension());
        }
    }

    private void setInteractionType(MCCIMT200100Batch requestMessage, BatchRequestEntity requestEntity) {
        II interactionId = requestMessage.getInteractionId();
        if (interactionId != null) {
            requestEntity.setInteractionId(interactionId.getExtension());
        }
    }

    private void setVersionCode(MCCIMT200100Batch requestMessage, BatchRequestEntity requestEntity) {
        JAXBElement<CS> versionCS = requestMessage.getVersionCode();
        if (versionCS != null) {
            requestEntity.setVersionNumber(versionCS.getValue().getCode());
        }
    }

}
