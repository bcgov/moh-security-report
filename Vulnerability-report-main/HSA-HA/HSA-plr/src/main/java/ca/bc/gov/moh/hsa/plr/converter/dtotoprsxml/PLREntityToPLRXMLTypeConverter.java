package ca.bc.gov.moh.hsa.plr.converter.dtotoprsxml;

import ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils;
import ca.bc.gov.moh.hsa.entity.AddressAttribute;
import ca.bc.gov.moh.hsa.entity.CommunicationFunction;
import ca.bc.gov.moh.hsa.entity.ConfidentialityMaskAttribute;
import ca.bc.gov.moh.hsa.entity.EmailAttribute;
import ca.bc.gov.moh.hsa.entity.IdentifierAttribute;
import ca.bc.gov.moh.hsa.entity.Message;
import ca.bc.gov.moh.hsa.entity.OrganizationNameAttribute;
import ca.bc.gov.moh.hsa.entity.Person;
import ca.bc.gov.moh.hsa.entity.PersonNameAttribute;
import ca.bc.gov.moh.hsa.entity.PhoneAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.AcknowledgementEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.BatchInformationMessageEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.BatchResponseEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ConditionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.CredentialAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.DisciplinaryActionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ExpertiseAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.InformationRouteAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.MaintainProviderResponseEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.NoteAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderRelationshipAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.StatusAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.WorkLocationAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.WorkLocationDetailsAttribute;
import java.lang.reflect.InvocationTargetException;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;
import org.apache.commons.beanutils.BeanUtils;
import org.apache.commons.collections.CollectionUtils;
import prs2.whic.org.response.GRSADDRESS;
import prs2.whic.org.response.GRSELECTRONICADDRESS;
import prs2.whic.org.response.GRSIDENTIFIER;
import prs2.whic.org.response.GRSINFORMATIONMESSAGE;
import prs2.whic.org.response.GRSMESSAGE;
import prs2.whic.org.response.GRSMESSAGES;
import prs2.whic.org.response.GRSORGANIZATIONNAME;
import prs2.whic.org.response.GRSPAYLOAD;
import prs2.whic.org.response.GRSPERSONALNAME;
import prs2.whic.org.response.GRSRELATEDIDENTIFIER;
import prs2.whic.org.response.GRSRELATEDRU;
import prs2.whic.org.response.GRSTELEPHONE;
import prs2.whic.org.response.PRSCONDITION;
import prs2.whic.org.response.PRSCONFIDENTIALITYINDICATOR;
import prs2.whic.org.response.PRSDEMOGRAPHICDETAIL;
import prs2.whic.org.response.PRSDISCIPLINARYACTION;
import prs2.whic.org.response.PRSINFORMATIONROUTE;
import prs2.whic.org.response.PRSNOTE;
import prs2.whic.org.response.PRSPROVIDER;
import prs2.whic.org.response.PRSPROVIDERCREDENTIAL;
import prs2.whic.org.response.PRSPROVIDEREXPERTISE;
import prs2.whic.org.response.PRSPROVIDERRELATIONSHIP;
import prs2.whic.org.response.PRSPROVRURELN;
import prs2.whic.org.response.PRSSTATUS;
import prs2.whic.org.response.PRSWORKLOCATION;
import prs2.whic.org.response.PRSWORKLOCATIONADDRESS;
import prs2.whic.org.response.PRSWORKLOCATIONDETAIL;
import prs2.whic.org.response.PRSWORKLOCATIONELECTRONICADDRESS;
import prs2.whic.org.response.PRSWORKLOCATIONINFORMATIONROUTE;
import prs2.whic.org.response.PRSWORKLOCATIONTELEPHONE;

/**
 *
 * @author conrad.gustafson
 */
public class PLREntityToPLRXMLTypeConverter {

    private static final String CLASSNAME = PLREntityToPLRXMLTypeConverter.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    public static GRSMESSAGES convertRequestResponseEntityToPLRXML(BatchResponseEntity batchResponseEntity) {
        GRSMESSAGES grsMessages = new GRSMESSAGES();
        grsMessages.setGRSPAYLOAD(new GRSMESSAGES.GRSPAYLOAD());

        List<GRSINFORMATIONMESSAGE> grsInformationMessageList = grsMessages.getGRSINFORMATIONMESSAGE();
        List<BatchInformationMessageEntity> informationMessageEntities = batchResponseEntity.getInformationMessages();
        for (BatchInformationMessageEntity informationMessageEntity : informationMessageEntities) {
            GRSINFORMATIONMESSAGE grsInformationMessage = new GRSINFORMATIONMESSAGE();
            grsInformationMessage.setMSGCODETXT(informationMessageEntity.getMessageCode());
            grsInformationMessage.setMSGTEXTTXT(informationMessageEntity.getMessageText());
            grsInformationMessageList.add(grsInformationMessage);
        }

        List<GRSMESSAGE> grsMessageList = grsMessages.getGRSPAYLOAD().getGRSMESSAGE();
        List<MaintainProviderResponseEntity> maintainProviderResposneEntities = batchResponseEntity.getMaintainProviderResponseEntities();
        for (MaintainProviderResponseEntity maintainProviderResponseEntity : maintainProviderResposneEntities) {
            GRSMESSAGE msg = convertMaintainProviderResponseEntityToPLRXML(maintainProviderResponseEntity);
            grsMessageList.add(msg);
            for (AcknowledgementEntity ack : maintainProviderResponseEntity.getAcknowledgements()) {
                GRSINFORMATIONMESSAGE grsInformationMessage = new GRSINFORMATIONMESSAGE();
                grsInformationMessage.setMSGCODETXT(ack.getCode());
                grsInformationMessage.setMSGTEXTTXT(ack.getText());
                msg.getGRSINFORMATIONMESSAGE().add(grsInformationMessage);
            }
        }

        return grsMessages;
    }

    public static GRSMESSAGE convertMaintainProviderResponseEntityToPLRXML(MaintainProviderResponseEntity in) {
        GRSMESSAGE grsMessage = new GRSMESSAGE();

        convertMessageMetadata(in, grsMessage);

        grsMessage.setGRSPAYLOAD(convertGRSPayload(in.getProvider()));

        return grsMessage;
    }

    public static void convertMessageMetadata(Message in, GRSMESSAGE grsMessage) {
        final CommunicationFunction sender = in.getSender();
        final CommunicationFunction receiver = in.getReceiver().get(0);

        grsMessage.setUNIQUEMESSAGECHID(in.getMessageId());
        grsMessage.setSENDINGFACILITYCHID(sender.getFacilityId());
        grsMessage.setRECEIVINGFACILITYCHID(receiver.getFacilityId());
        grsMessage.setSENDINGAPPLICATIONCHID(sender.getSystemName());
        grsMessage.setRECEIVINGAPPLICATIONCHID(receiver.getSystemName());
        grsMessage.setSENDINGORGANISATIONCHID(sender.getOrganizationId());
        grsMessage.setRECEIVINGORGANISATIONCHID(receiver.getOrganizationId());
        grsMessage.setSENDINGJURISDICTIONCODE(sender.getJurisdiction());
        grsMessage.setRECEIVINGJURISDICTIONCODE(sender.getJurisdiction());
        grsMessage.setINTERACTIONTYPECODE(in.getInteractionId());

        // From the batch file implementation guide ...
        // This always seems to be APP
        grsMessage.setACKTYPEREQDCODE("APP");

        // From the batch file implmementation guide MT133010 is the batch file response.
        // This could be different for distributions, but prsxml is only used for batch
        // right now.
        grsMessage.setMESSAGETYPECODE("MT133010");

        grsMessage.setENVIRONMENTCODE(receiver.getEnvironment());

        // From the batch file implementation guide ...
        // This always seems to be OPS
        grsMessage.setPROCESSINGTYPECODE("OPS");

        grsMessage.setVERSIONNUMBERCODE(in.getVersionNumber());
        grsMessage.setRECEIVINGNETWORKADDRESSCHID(receiver.getNetworkAddress());
        grsMessage.setSENDINGNETWORKADDRESSCHID(sender.getNetworkAddress());
        grsMessage.setMESSAGEDTM(ConverterUtils.convertFromDateToPLRString(in.getCreationTime()));
        grsMessage.setORIGINALEVENTDTM(ConverterUtils.convertFromDateToPLRString(in.getOriginalEventTime()));
        grsMessage.setSENDINGUSERCHID(sender.getUserId());
        grsMessage.setRESPONSIBLEUSERCHID(in.getResponsibleUserId());
    }

    public static GRSPAYLOAD convertGRSPayload(ProviderAttribute in) {
        GRSPAYLOAD grsPayload = new GRSPAYLOAD();
        List<PRSPROVIDER> providerList = grsPayload.getPRSPROVIDER();

        providerList.add(convertPRSProvider(in));
        return grsPayload;
    }

    public static PRSPROVIDER convertPRSProvider(ProviderAttribute provider) {
        PRSPROVIDER prsProvider = new PRSPROVIDER();

        convertProviderAttributeToPrsProvider(provider, prsProvider);

        return prsProvider;
    }

    public static void convertProviderAttributeToPrsProvider(ProviderAttribute provider, PRSPROVIDER prsProvider) {

        // we wnat empyt elements <asdf></asdf> so use an empty string ...
        prsProvider.setPARTYTYPECODE(provider.getPartyType() != null ? provider.getPartyType() : "");
        prsProvider.setREGISTRYUSERORGCHID(provider.getUserId());
        prsProvider.setJURISDICTIONCODE(provider.getJurisdiction() != null ? provider.getJurisdiction() : "");
        prsProvider.setHPTCODE(provider.getHptCode() != null ? provider.getHptCode() : "");

        List<GRSIDENTIFIER> grsIdentifierList = prsProvider.getGRSIDENTIFIER();
        List<IdentifierAttribute> collegeIdentifiers = provider.getCollegeIdentifiers();
        for (IdentifierAttribute collegeIdentifier : collegeIdentifiers) {
            grsIdentifierList.add(convertIdentifier(collegeIdentifier));
        }

        List<GRSPERSONALNAME> grsPersonalNameList = prsProvider.getGRSPERSONALNAME();
        List<PersonNameAttribute> personNames = provider.getPersonNames();
        for (PersonNameAttribute personName : personNames) {
            grsPersonalNameList.add(convertPersonalName(personName));
        }

        List<GRSORGANIZATIONNAME> grsOrganizationNameList = prsProvider.getGRSORGANIZATIONNAME();
        List<OrganizationNameAttribute> organizationNames = provider.getOrganizationNames();
        for (OrganizationNameAttribute organizationName : organizationNames) {
            grsOrganizationNameList.add(convertOrganizationName(organizationName));
        }

        List<GRSADDRESS> grsAddressList = prsProvider.getGRSADDRESS();
        List<AddressAttribute> addresses = provider.getAddresses();
        for (AddressAttribute address : addresses) {
            grsAddressList.add(convertAddress(address));
        }

        List<GRSTELEPHONE> grsTelephoneList = prsProvider.getGRSTELEPHONE();
        List<PhoneAttribute> phones = provider.getPhones();
        for (PhoneAttribute phone : phones) {
            grsTelephoneList.add(convertTelephone(phone));
        }

        List<GRSELECTRONICADDRESS> grsElectronicAddressList = prsProvider.getGRSELECTRONICADDRESS();
        List<EmailAttribute> emails = provider.getEmails();
        for (EmailAttribute email : emails) {
            grsElectronicAddressList.add(convertElectronicAddress(email));
        }

        List<PRSCONDITION> prsConditionList = prsProvider.getPRSCONDITION();
        List<ConditionAttribute> conditions = provider.getConditions();
        for (ConditionAttribute condition : conditions) {
            prsConditionList.add(convertPrsCondition(condition));
        }

        List<PRSDEMOGRAPHICDETAIL> prsDemographicDetail = prsProvider.getPRSDEMOGRAPHICDETAIL();
        List<Person> demographicDetails = provider.getDemographicDetails();
        for (Person demographicDetail : demographicDetails) {
            prsDemographicDetail.add(convertDemographicDetail(demographicDetail));
        }

        List<PRSCONFIDENTIALITYINDICATOR> prsconfidentialityindicator = prsProvider.getPRSCONFIDENTIALITYINDICATOR();
        if (!CollectionUtils.isEmpty(demographicDetails)
                && demographicDetails.get(0).getConfidentialityMask() != null) {
            for (ConfidentialityMaskAttribute ma : demographicDetails.get(0).getConfidentialityMask()) {
                prsconfidentialityindicator.add(convertConfidentalityMaskAttribute(ma));
            }
        }

        List<PRSDISCIPLINARYACTION> prsDisciplinaryAction = prsProvider.getPRSDISCIPLINARYACTION();
        List<DisciplinaryActionAttribute> disciplinaryActions = provider.getDisciplinaryActions();
        for (DisciplinaryActionAttribute disciplinaryAction : disciplinaryActions) {
            prsDisciplinaryAction.add(convertDisciplinaryAction(disciplinaryAction));
        }

        List<PRSINFORMATIONROUTE> prsInformationRoute = prsProvider.getPRSINFORMATIONROUTE();
        List<InformationRouteAttribute> informationRoutes = provider.getInformationRoutes();
        for (InformationRouteAttribute informationRoute : informationRoutes) {
            prsInformationRoute.add(convertInformationRoute(informationRoute));
        }

        List<PRSNOTE> prsNote = prsProvider.getPRSNOTE();
        List<NoteAttribute> notes = provider.getNotes();
        for (NoteAttribute note : notes) {
            prsNote.add(convertNote(note));
        }

        List<PRSPROVRURELN> prsRegistryUserRelationships = prsProvider.getPRSPROVRURELN();
        List<ProviderRelationshipAttribute> providerRegistryUserRelationships = provider.getRegistryUserRelationships();
        for (ProviderRelationshipAttribute providerRegistryUserRelationship : providerRegistryUserRelationships) {
            prsRegistryUserRelationships.add(convertRegistryUserRelationships(providerRegistryUserRelationship));
        }

        List<PRSPROVIDERRELATIONSHIP> prsProviderRelationships = prsProvider.getPRSPROVIDERRELATIONSHIP();
        List<ProviderRelationshipAttribute> providerRelationships = provider.getProviderRelationships();
        for (ProviderRelationshipAttribute providerRelationship : providerRelationships) {
            prsProviderRelationships.add(convertProviderRelationships(providerRelationship));
        }

        List<PRSPROVIDERCREDENTIAL> prsCredentials = prsProvider.getPRSPROVIDERCREDENTIAL();
        List<CredentialAttribute> credentials = provider.getCredentials();
        for (CredentialAttribute credential : credentials) {
            prsCredentials.add(convertCredentials(credential));
        }

        List<PRSPROVIDEREXPERTISE> prsExpertises = prsProvider.getPRSPROVIDEREXPERTISE();
        List<ExpertiseAttribute> expertises = provider.getExpertises();
        for (ExpertiseAttribute expertise : expertises) {
            prsExpertises.add(convertExpertises(expertise));
        }

        List<PRSSTATUS> prsStatuses = prsProvider.getPRSSTATUS();
        List<StatusAttribute> statuses = provider.getStatuses();
        for (StatusAttribute status : statuses) {
            prsStatuses.add(convertStatuses(status));
        }

        List<PRSWORKLOCATION> prsWorkLocations = prsProvider.getPRSWORKLOCATION();
        List<WorkLocationAttribute> workLocations = provider.getWorkLocations();
        for (WorkLocationAttribute workLocation : workLocations) {
            prsWorkLocations.add(convertWorkLocations(workLocation));
        }
    }

    private static PRSCONFIDENTIALITYINDICATOR convertConfidentalityMaskAttribute(ConfidentialityMaskAttribute ma) {
        PRSCONFIDENTIALITYINDICATOR ci = new PRSCONFIDENTIALITYINDICATOR();
        ci.setCONFIDENTIALFLAG(ma.getMasked() ? "Y" : "N");
        ci.setEFFECTIVESTARTDATE(dateToPLRDateString(ma.getStartDate()));
        ci.setEFFECTIVEENDDATE(expiryDateToPLRDateString(ma.getExpiryDate()));
        ci.setENDREASONCODE(ma.getEndReasonCode());
        ci.setDATAOWNERCODE(ma.getSource());
        return ci;
    }

    public static GRSIDENTIFIER convertIdentifier(IdentifierAttribute collegeIdentifier) {
        GRSIDENTIFIER identifier = new GRSIDENTIFIER();
        identifier.setPROVIDERCHID(collegeIdentifier.getValue());
        identifier.setIDENTIFIERTYPECODE(collegeIdentifier.getUncodedType());
        identifier.setEFFECTIVESTARTDATE(dateToPLRDateString(collegeIdentifier.getStartDate()));
        identifier.setEFFECTIVEENDDATE(expiryDateToPLRDateString(collegeIdentifier.getExpiryDate()));
        identifier.setENDREASONCODE(collegeIdentifier.getEndReasonCode());
        identifier.setDATAOWNERCODE(collegeIdentifier.getSource());
        return identifier;
    }

    private static GRSPERSONALNAME convertPersonalName(PersonNameAttribute personName) {
        GRSPERSONALNAME personalName = new GRSPERSONALNAME();
        personalName.setNAMETYPECODE(personName.getUncodedType());
        personalName.setPNAMEPREFERREDFLAG(convertToFlag(personName.isPreferred()));
        personalName.setPRSNSURNAMETXT(personName.getLastName());
        personalName.setPRSNFIRSTGIVENNAMETXT(personName.getFirstName());
        personalName.setPRSNSECONDGIVENNAMETXT(personName.getMiddleName());
        personalName.setPRSNTHIRDGIVENNAMETXT(personName.getSecondMiddleName());
        personalName.setPRSNSUFFIXTXT(personName.getSuffix());
        personalName.setPRSNPREFIXTXT(personName.getPrefix());
        personalName.setEFFECTIVESTARTDATE(dateToPLRDateString(personName.getStartDate()));
        personalName.setEFFECTIVEENDDATE(expiryDateToPLRDateString(personName.getExpiryDate()));
        personalName.setENDREASONCODE(personName.getEndReasonCode());
        personalName.setDATAOWNERCODE(personName.getSource());
        return personalName;
    }

    private static GRSORGANIZATIONNAME convertOrganizationName(OrganizationNameAttribute organizationName) {
        GRSORGANIZATIONNAME grsOrganizationName = new GRSORGANIZATIONNAME();
        grsOrganizationName.setNAMETYPECODE(organizationName.getUncodedType());
        grsOrganizationName.setPNAMEPREFERREDFLAG(convertToFlag(organizationName.isPreferred()));
        grsOrganizationName.setORGNZTNLONGNAMETXT(organizationName.getLongname());
        grsOrganizationName.setORGNZTNNAMETXT(organizationName.getName());
        grsOrganizationName.setEFFECTIVESTARTDATE(dateToPLRDateString(organizationName.getStartDate()));
        grsOrganizationName.setEFFECTIVEENDDATE(expiryDateToPLRDateString(organizationName.getExpiryDate()));
        grsOrganizationName.setENDREASONCODE(organizationName.getEndReasonCode());
        grsOrganizationName.setDATAOWNERCODE(organizationName.getSource());
        return grsOrganizationName;
    }

    private static GRSADDRESS convertAddress(AddressAttribute address) {
        GRSADDRESS grsAddress = new GRSADDRESS();
        grsAddress.setCMNCTNPRPSTYPCD(address.getCommunicationPurposeCode());
        grsAddress.setADDRESSTYPECODE(address.getUncodedType());

        List<String> streetAddressLines = address.getStreetAddressLines();
        int lineNumber = 1;
        for (String streetAddressLine : streetAddressLines) {
            switch (lineNumber) {
                case 1:
                    grsAddress.setADDRESSLINE1TXT(streetAddressLine);
                    break;
                case 2:
                    grsAddress.setADDRESSLINE2TXT(streetAddressLine);
                    break;
                case 3:
                    grsAddress.setADDRESSLINE3TXT(streetAddressLine);
                    break;
                case 4:
                    grsAddress.setADDRESSLINE4TXT(streetAddressLine);
                    break;
            }
            lineNumber++;
        }

        grsAddress.setCITYTXT(address.getCity());
        grsAddress.setPROVINCEORSTATETXT(address.getProvince());
        grsAddress.setPOSTALCODEORZIPTXT(address.getPostalCode());
        grsAddress.setCOUNTRYCODE(address.getCountry());
        grsAddress.setEFFECTIVESTARTDATE(dateToPLRDateString(address.getStartDate()));
        grsAddress.setEFFECTIVEENDDATE(expiryDateToPLRDateString(address.getExpiryDate()));
        grsAddress.setENDREASONCODE(address.getEndReasonCode());
        grsAddress.setDATAOWNERCODE(address.getSource());
        return grsAddress;
    }

    private static GRSTELEPHONE convertTelephone(PhoneAttribute phone) {
        GRSTELEPHONE grsTelephone = new GRSTELEPHONE();
        grsTelephone.setCMNCTNPRPSTYPCD(phone.getCommunicationPurposeCode());
        grsTelephone.setTLCMNCTNNMBRTYPCD(phone.getUncodedType());
        grsTelephone.setAREACODENUM(phone.getAreaCode());
        grsTelephone.setTELECOMMUNICATIONNMBRNUM(phone.getNumber());
        grsTelephone.setEXTENSIONNUM(phone.getExtension());
        grsTelephone.setEFFECTIVESTARTDATE(dateToPLRDateString(phone.getStartDate()));
        grsTelephone.setEFFECTIVEENDDATE(expiryDateToPLRDateString(phone.getExpiryDate()));
        grsTelephone.setENDREASONCODE(phone.getEndReasonCode());
        grsTelephone.setDATAOWNERCODE(phone.getSource());
        return grsTelephone;
    }

    private static GRSELECTRONICADDRESS convertElectronicAddress(EmailAttribute email) {
        GRSELECTRONICADDRESS grsElectronicAddress = new GRSELECTRONICADDRESS();
        grsElectronicAddress.setCMNCTNPRPSTYPCD(email.getCommunicationPurposeCode());
        grsElectronicAddress.setELECTRONICADDRESSTYPECODE(email.getUncodedType());
        grsElectronicAddress.setELECTRONICADDRESSTXT(email.getAddress());
        grsElectronicAddress.setEFFECTIVESTARTDATE(dateToPLRDateString(email.getStartDate()));
        grsElectronicAddress.setEFFECTIVEENDDATE(expiryDateToPLRDateString(email.getExpiryDate()));
        grsElectronicAddress.setENDREASONCODE(email.getEndReasonCode());
        grsElectronicAddress.setDATAOWNERCODE(email.getSource());
        return grsElectronicAddress;
    }

    private static PRSCONDITION convertPrsCondition(ConditionAttribute condition) {
        PRSCONDITION prsCondition = new PRSCONDITION();
        prsCondition.setCONDITIONCHID(condition.getId());
        prsCondition.setCONDITIONTYPECODE(condition.getUncodedType());
        prsCondition.setRESTRICTIONFLAG(convertToFlag(condition.isRestricted()));
        prsCondition.setRESTRICTIONEXPLANATIONTXT(condition.getRestrictionExplanationText());
        prsCondition.setEFFECTIVESTARTDATE(dateToPLRDateString(condition.getStartDate()));
        prsCondition.setEFFECTIVEENDDATE(expiryDateToPLRDateString(condition.getExpiryDate()));
        prsCondition.setENDREASONCODE(condition.getEndReasonCode());
        prsCondition.setDATAOWNERCODE(condition.getSource());
        return prsCondition;
    }

    private static PRSDEMOGRAPHICDETAIL convertDemographicDetail(Person demographicDetail) {
        PRSDEMOGRAPHICDETAIL prsDemographicDetail = new PRSDEMOGRAPHICDETAIL();
        prsDemographicDetail.setDATEOFBIRTHDATE(dateToPLRDateString(demographicDetail.getBirthDate().getValue()));
        prsDemographicDetail.setDATEOFDEATHDATE(dateToPLRDateString(demographicDetail.getDeathDate().getValue()));
        prsDemographicDetail.setCOUNTRYOFBIRTHCODE(demographicDetail.getBirthCountryCode());
        prsDemographicDetail.setPROVORSTATEOFBIRTHTXT(demographicDetail.getBirthProvinceCode());
        prsDemographicDetail.setGENDERCODE(demographicDetail.getGender().getValue());
        prsDemographicDetail.setEFFECTIVESTARTDATE(dateToPLRDateString(demographicDetail.getStartDate()));
        prsDemographicDetail.setEFFECTIVEENDDATE(expiryDateToPLRDateString(demographicDetail.getExpiryDate()));
        prsDemographicDetail.setENDREASONCODE(demographicDetail.getEndReasonCode());
        prsDemographicDetail.setDATAOWNERCODE(demographicDetail.getSource());
        return prsDemographicDetail;
    }

    private static PRSDISCIPLINARYACTION convertDisciplinaryAction(DisciplinaryActionAttribute disciplinaryAction) {
        PRSDISCIPLINARYACTION prsDisciplinaryAction = new PRSDISCIPLINARYACTION();
        prsDisciplinaryAction.setDISCIPLINARYACTIONCHID(disciplinaryAction.getIdentifier());
        prsDisciplinaryAction.setDISPLAYFLAG(convertToFlag(disciplinaryAction.isDisplay()));
        prsDisciplinaryAction.setDESCRIPTIONTXT(disciplinaryAction.getDescription());
        prsDisciplinaryAction.setARCHIVEDATE(dateToPLRDateString(disciplinaryAction.getArchiveDate()));
        prsDisciplinaryAction.setEFFECTIVESTARTDATE(dateToPLRDateString(disciplinaryAction.getStartDate()));
        prsDisciplinaryAction.setEFFECTIVEENDDATE(expiryDateToPLRDateString(disciplinaryAction.getExpiryDate()));
        prsDisciplinaryAction.setENDREASONCODE(disciplinaryAction.getEndReasonCode());
        prsDisciplinaryAction.setDATAOWNERCODE(disciplinaryAction.getSource());
        return prsDisciplinaryAction;
    }

    private static PRSINFORMATIONROUTE convertInformationRoute(InformationRouteAttribute informationRoute) {
        PRSINFORMATIONROUTE prsInformationRoute = new PRSINFORMATIONROUTE();
        prsInformationRoute.setDOCUMENTTYPECODE(informationRoute.getDocumentTypeCode());

        // must have at least an empty element
        prsInformationRoute.setMECHANISMTYPECODE(informationRoute.getMechanismTypeCode() != null ? informationRoute.getMechanismTypeCode() : "");
        prsInformationRoute.setDEFAULTFLAG(convertToFlag(informationRoute.isDefaulted()));

        AddressAttribute addressAttribute = informationRoute.getAddressAttribute();
        PhoneAttribute phoneAttribute = informationRoute.getPhoneAttribute();
        EmailAttribute emailAttribute = informationRoute.getEmailAttribute();

        if (addressAttribute != null) {
            prsInformationRoute.setADDRESSTYPECODE(addressAttribute.getUncodedType());
        }

        if (phoneAttribute != null) {
            prsInformationRoute.setTLCMNCTNNMBRTYPCD(phoneAttribute.getUncodedType());
        }

        if (emailAttribute != null) {
            prsInformationRoute.setELECTRONICADDRESSTYPECODE(emailAttribute.getUncodedType());
        }

        prsInformationRoute.setCMNCTNPRPSTYPCD(informationRoute.getCommunicationPurposeCode());
        prsInformationRoute.setCMNCTNDATAOWNERCODE(informationRoute.getCommunicationDataOwnerCode());

        prsInformationRoute.setWORKLOCATIONCHID(convertLongToString(informationRoute.getWorkLocationIdentifier()));
        prsInformationRoute.setWORKLOCATIONDATAOWNERCODE(informationRoute.getWorkLocationOwnerCode());

        prsInformationRoute.setEFFECTIVESTARTDATE(dateToPLRDateString(informationRoute.getStartDate()));
        prsInformationRoute.setEFFECTIVEENDDATE(expiryDateToPLRDateString(informationRoute.getExpiryDate()));
        prsInformationRoute.setENDREASONCODE(informationRoute.getEndReasonCode());
        prsInformationRoute.setDATAOWNERCODE(informationRoute.getSource());
        return prsInformationRoute;
    }

    private static PRSNOTE convertNote(NoteAttribute note) {
        PRSNOTE prsNote = new PRSNOTE();
        prsNote.setNOTECHID(note.getIdentifier());
        prsNote.setNOTETEXT(note.getText());

        prsNote.setEFFECTIVESTARTDATE(dateToPLRDateString(note.getStartDate()));
        prsNote.setEFFECTIVEENDDATE(expiryDateToPLRDateString(note.getExpiryDate()));
        prsNote.setENDREASONCODE(note.getEndReasonCode());
        prsNote.setDATAOWNERCODE(note.getSource());
        return prsNote;
    }

    private static PRSPROVIDERCREDENTIAL convertCredentials(CredentialAttribute credential) {
        PRSPROVIDERCREDENTIAL prsCredential = new PRSPROVIDERCREDENTIAL();
        prsCredential.setPROVIDERCREDENTIALTYPECODE(credential.getUncodedType());
        prsCredential.setCREDENTIALDESIGNATIONTXT(credential.getDesignation());
        prsCredential.setREGISTRATIONNUMBERTXT(credential.getRegistrationNumber());
        prsCredential.setCREDENTIALGRANTINGINSTTXT(credential.getGrantingInstitution());
        prsCredential.setINSTITUTIONCITYTXT(credential.getInstitutionCity());
        prsCredential.setINSTITUTIONPROVINCECODE(credential.getInstitutionProvStateCode());
        prsCredential.setINSTITUTIONCOUNTRYCODE(credential.getInstitutionCountryCode());
        prsCredential.setEQUIVALENCYFLAG(convertToFlag(credential.isEquivalent()));
        prsCredential.setYEARCREDENTIALISSUEDTXT(credential.getYearIssued());

        prsCredential.setEFFECTIVESTARTDATE(dateToPLRDateString(credential.getStartDate()));
        prsCredential.setEFFECTIVEENDDATE(expiryDateToPLRDateString(credential.getExpiryDate()));
        prsCredential.setENDREASONCODE(credential.getEndReasonCode());
        prsCredential.setDATAOWNERCODE(credential.getSource());
        return prsCredential;
    }

    private static PRSPROVIDEREXPERTISE convertExpertises(ExpertiseAttribute expertise) {
        PRSPROVIDEREXPERTISE prsExpertise = new PRSPROVIDEREXPERTISE();
        prsExpertise.setPROVEXPERTISEROLETYPECODE(expertise.getRoleCode());
        prsExpertise.setPROVIDEREXPERTISETYPECODE(expertise.getUncodedType());
        prsExpertise.setORIGINALSOURCEPROVIDERCODE(expertise.getSourceCode());

        prsExpertise.setEFFECTIVESTARTDATE(dateToPLRDateString(expertise.getStartDate()));
        prsExpertise.setEFFECTIVEENDDATE(expiryDateToPLRDateString(expertise.getExpiryDate()));
        prsExpertise.setENDREASONCODE(expertise.getEndReasonCode());
        prsExpertise.setDATAOWNERCODE(expertise.getSource());
        return prsExpertise;
    }

    private static PRSSTATUS convertStatuses(StatusAttribute status) {
        PRSSTATUS prsStatus = new PRSSTATUS();
        prsStatus.setSTATUSTYPECODE(status.getUncodedType());
        prsStatus.setSTATUSCLASSCODE(status.getClassCode());
        prsStatus.setSTATUSREASONCODE(status.getReasonCode());

        prsStatus.setEFFECTIVESTARTDATE(dateToPLRDateString(status.getStartDate()));
        prsStatus.setEFFECTIVEENDDATE(expiryDateToPLRDateString(status.getExpiryDate()));
        prsStatus.setENDREASONCODE(status.getEndReasonCode());
        prsStatus.setDATAOWNERCODE(status.getSource());
        return prsStatus;
    }

    private static PRSWORKLOCATION convertWorkLocations(WorkLocationAttribute workLocation) {
        PRSWORKLOCATION prsWorkLocation = new PRSWORKLOCATION();
        prsWorkLocation.setWORKLOCATIONCHID(workLocation.getIdentifier());
        prsWorkLocation.setDATAOWNERCODE(workLocation.getDataOwnerCode());

        List<PRSWORKLOCATIONDETAIL> prsWorkLocationDetail = prsWorkLocation.getPRSWORKLOCATIONDETAIL();
        List<WorkLocationDetailsAttribute> details = workLocation.getDetails();
        for (WorkLocationDetailsAttribute detail : details) {
            prsWorkLocationDetail.add(convertWorkLocationDetail(detail));
        }

        List<PRSWORKLOCATIONADDRESS> prsWorkLocationAddresses = prsWorkLocation.getPRSWORKLOCATIONADDRESS();
        List<AddressAttribute> addresses = workLocation.getAddresses();
        for (AddressAttribute address : addresses) {
            prsWorkLocationAddresses.add(convertWorkLocationAddress(address));
        }

        List<PRSWORKLOCATIONELECTRONICADDRESS> prsWorkLocationElectronicAddresses = prsWorkLocation.getPRSWORKLOCATIONELECTRONICADDRESS();
        List<EmailAttribute> emailAddresses = workLocation.getEmailAddresses();
        for (EmailAttribute emailAddress : emailAddresses) {
            prsWorkLocationElectronicAddresses.add(convertWorkLocationElectronicAddress(emailAddress));
        }

        List<PRSWORKLOCATIONTELEPHONE> prsWorkLocationTelephones = prsWorkLocation.getPRSWORKLOCATIONTELEPHONE();
        List<PhoneAttribute> phoneNumbers = workLocation.getPhoneNumbers();
        for (PhoneAttribute phoneNumber : phoneNumbers) {
            prsWorkLocationTelephones.add(convertWorkLocationTelephone(phoneNumber));
        }

        List<PRSWORKLOCATIONINFORMATIONROUTE> prsWorkLocationInformationRoutes = prsWorkLocation.getPRSWORKLOCATIONINFORMATIONROUTE();
        List<InformationRouteAttribute> informationRoutes = workLocation.getInformationRoutes();
        for (InformationRouteAttribute informationRoute : informationRoutes) {
            prsWorkLocationInformationRoutes.add(convertWorkLocationInformationRoute(informationRoute));
        }

        return prsWorkLocation;
    }

    private static PRSWORKLOCATIONDETAIL convertWorkLocationDetail(WorkLocationDetailsAttribute detail) {
        PRSWORKLOCATIONDETAIL prsWorkLocationDetail = new PRSWORKLOCATIONDETAIL();
        prsWorkLocationDetail.setWORKLOCATIONNAMETXT(detail.getName());
        prsWorkLocationDetail.setADDITIONALADDRESSEEINFOTXT(detail.getAdditionalAddresseeInfo());
        prsWorkLocationDetail.setDEFAULTFLAG(convertToFlag(detail.isDefaulted()));
        prsWorkLocationDetail.setWORKLOCATIONTYPECODE(detail.getTypeCode());

        prsWorkLocationDetail.setEFFECTIVESTARTDATE(dateToPLRDateString(detail.getStartDate()));
        prsWorkLocationDetail.setEFFECTIVEENDDATE(expiryDateToPLRDateString(detail.getExpiryDate()));
        prsWorkLocationDetail.setENDREASONCODE(detail.getEndReasonCode());
        return prsWorkLocationDetail;
    }

    private static PRSPROVRURELN convertRegistryUserRelationships(ProviderRelationshipAttribute providerRelationship) {
        PRSPROVRURELN prsRegistryUserRelationship = new PRSPROVRURELN();

        prsRegistryUserRelationship.setRURELATIONSHIPTYPECODE(providerRelationship.getRelationshipWithProviderType());
        prsRegistryUserRelationship.setEFFECTIVESTARTDATE(dateToPLRDateString(providerRelationship.getStartDate()));
        prsRegistryUserRelationship.setEFFECTIVEENDDATE(expiryDateToPLRDateString(providerRelationship.getExpiryDate()));
        prsRegistryUserRelationship.setENDREASONCODE(providerRelationship.getEndReasonCode());
        prsRegistryUserRelationship.setDATAOWNERCODE(providerRelationship.getSource());

        List<GRSRELATEDRU> grsRelatedRus = prsRegistryUserRelationship.getGRSRELATEDRU();
        GRSRELATEDRU grsRelatedRu = new GRSRELATEDRU();
        grsRelatedRu.setREGISTRYUSERORGCHID(providerRelationship.getRelationshipWithProviderCollegeId());
        grsRelatedRu.setRUTYPECODE(providerRelationship.getRelationshipTypeCode());
        grsRelatedRus.add(grsRelatedRu);

        return prsRegistryUserRelationship;
    }

    private static PRSPROVIDERRELATIONSHIP convertProviderRelationships(ProviderRelationshipAttribute providerRelationship) {
        PRSPROVIDERRELATIONSHIP prsProviderRelationship = new PRSPROVIDERRELATIONSHIP();
        prsProviderRelationship.setEFFECTIVESTARTDATE(dateToPLRDateString(providerRelationship.getStartDate()));
        prsProviderRelationship.setEFFECTIVEENDDATE(expiryDateToPLRDateString(providerRelationship.getExpiryDate()));
        prsProviderRelationship.setENDREASONCODE(providerRelationship.getEndReasonCode());
        prsProviderRelationship.setDATAOWNERCODE(providerRelationship.getSource());
        prsProviderRelationship.setPROVRELATIONSHIPTYPECODE(providerRelationship.getRelationshipTypeCode());
        prsProviderRelationship.setTARGETPROVRELNTYPECODE(providerRelationship.getTargetRelationshipTypeCode());

        List<GRSRELATEDIDENTIFIER> grsReleatedIdentifiers = prsProviderRelationship.getGRSRELATEDIDENTIFIER();
        GRSRELATEDIDENTIFIER grsReleatedIdentifier = new GRSRELATEDIDENTIFIER();
        grsReleatedIdentifier.setPROVIDERCHID(providerRelationship.getRelationshipWithProviderCollegeId());
        grsReleatedIdentifier.setIDENTIFIERTYPECODE(providerRelationship.getRelationshipWithProviderType());
        grsReleatedIdentifiers.add(grsReleatedIdentifier);

        return prsProviderRelationship;
    }

    private static PRSWORKLOCATIONADDRESS convertWorkLocationAddress(AddressAttribute address) {
        GRSADDRESS grsAddress = convertAddress(address);
        PRSWORKLOCATIONADDRESS prsWorkLocationAddress = new PRSWORKLOCATIONADDRESS();

        try {
            BeanUtils.copyProperties(prsWorkLocationAddress, grsAddress);
        } catch (IllegalAccessException | InvocationTargetException ex) {
            throw new RuntimeException(ex);
        }

        return prsWorkLocationAddress;
    }

    private static PRSWORKLOCATIONELECTRONICADDRESS convertWorkLocationElectronicAddress(EmailAttribute emailAddress) {
        GRSELECTRONICADDRESS grsElectronicAddress = convertElectronicAddress(emailAddress);
        PRSWORKLOCATIONELECTRONICADDRESS prsWorkLocationElectronicAddress = new PRSWORKLOCATIONELECTRONICADDRESS();

        try {
            BeanUtils.copyProperties(prsWorkLocationElectronicAddress, grsElectronicAddress);
        } catch (IllegalAccessException | InvocationTargetException ex) {
            throw new RuntimeException(ex);
        }

        return prsWorkLocationElectronicAddress;
    }

    private static PRSWORKLOCATIONTELEPHONE convertWorkLocationTelephone(PhoneAttribute phoneNumber) {
        GRSTELEPHONE grsTelephone = convertTelephone(phoneNumber);
        PRSWORKLOCATIONTELEPHONE prsWorkLocationTelephone = new PRSWORKLOCATIONTELEPHONE();

        try {
            BeanUtils.copyProperties(prsWorkLocationTelephone, grsTelephone);
        } catch (IllegalAccessException | InvocationTargetException ex) {
            throw new RuntimeException(ex);
        }

        return prsWorkLocationTelephone;
    }

    private static PRSWORKLOCATIONINFORMATIONROUTE convertWorkLocationInformationRoute(InformationRouteAttribute informationRoute) {
        PRSINFORMATIONROUTE prsInformationRoute = convertInformationRoute(informationRoute);
        PRSWORKLOCATIONINFORMATIONROUTE prsWorkLocationInformationRoute = new PRSWORKLOCATIONINFORMATIONROUTE();

        try {
            BeanUtils.copyProperties(prsWorkLocationInformationRoute, prsInformationRoute);
        } catch (IllegalAccessException | InvocationTargetException ex) {
            throw new RuntimeException(ex);
        }

        return prsWorkLocationInformationRoute;
    }

    private static String dateToPLRDateString(final Date date) {
        return ConverterUtils.convertFromDateToPLRString(date);
    }

    private static String expiryDateToPLRDateString(final Date date) {
        return ConverterUtils.convertExpiryDateToPLRString(date);
    }

    private static String convertToFlag(boolean booleanFlag) {
        return ConverterUtils.convertToFlag(booleanFlag);
    }

    private static String convertLongToString(Long longValue) {
        if (longValue == null) {
            return null;
        }

        return String.valueOf(longValue);
    }

}
