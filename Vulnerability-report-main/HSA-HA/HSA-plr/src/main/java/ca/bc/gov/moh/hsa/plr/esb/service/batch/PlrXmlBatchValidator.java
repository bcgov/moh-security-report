/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.esb.service.batch;

import java.io.StringReader;
import java.util.regex.Pattern;
import javax.xml.XMLConstants;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Source;
import javax.xml.transform.sax.SAXSource;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.springframework.stereotype.Component;
import org.xml.sax.InputSource;

/**
 *
 * @author greg.perkins
 */
@Component
public class PlrXmlBatchValidator implements Processor {

    private Validator validator;
    private static final Pattern PATTERN_GRSMESSAGES = Pattern.compile("<GRS_MESSAGES.*?>");
    private static final Pattern PATTERN_GRSMESSAGE = Pattern.compile("<GRS_MESSAGE\\s.*?>");

    static final String SCHEMA_PATH = "/schema/prs/Batch.xsd";

    public PlrXmlBatchValidator() {
        try {

            // Need to set the SystemID on the StreamSource so that referenced XSD files with relative paths can be found.
            Source schemaFile = new StreamSource(getClass().getResourceAsStream(SCHEMA_PATH),
                    getClass().getResource(SCHEMA_PATH).toString());

            SchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
            Schema schema = schemaFactory.newSchema(schemaFile);

            validator = schema.newValidator();

        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Processes the exchange: Validates the wrapper message, and each of the
     * wrapped messages individually
     *
     * @param exchange Exchange - the input message
     * @throws java.lang.Exception
     */
    @Override
    public synchronized void process(Exchange exchange) throws Exception {
        String message = exchange.getIn().getBody(String.class);
        message = fixNamespace(message);
        validateMessage(message);
        exchange.getIn().setBody(message);
    }

    private String fixNamespace(String message) {
        // PLR-2182 If the GRS_MESSAGES node doesn't have namespace, add it
        message = PATTERN_GRSMESSAGES.matcher(message).replaceFirst("<GRS_MESSAGES xmlns=\"http://org.whic.prs2\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">");
        // PLR-2189 If the GRS_MESSAGE is using an invalid namespace (probably from College of Dental Surgeons), remove it
        message = PATTERN_GRSMESSAGE.matcher(message).replaceAll("<GRS_MESSAGE>");
        return message;
    }

    private void validateMessage(String message) throws Exception {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setValidating(false);
        SAXSource source = new SAXSource(new InputSource(new StringReader(message)));
        validator.validate(source);
    }
}
