package ca.bc.gov.moh.hsa.plr.converter.hl7todto40;

import ca.bc.gov.moh.hsa.entity.CommunicationFunction;
import ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser;
import ca.bc.gov.moh.hsa.plr.entity.transaction.MaintainProviderRequestEntity;
import java.util.List;
import javax.xml.bind.JAXBElement;
import org.apache.cxf.common.util.CollectionUtils;
import org.apache.cxf.common.util.StringUtils;
import org.hl7.v3.m4_0.EN;
import org.hl7.v3.m4_0.II;
import org.hl7.v3.m4_0.MCCIMT000100Agent;
import org.hl7.v3.m4_0.MCCIMT000100Device;
import org.hl7.v3.m4_0.MCCIMT000100Organization;
import org.hl7.v3.m4_0.MCCIMT000100Receiver;
import org.hl7.v3.m4_0.MCCIMT000100Sender;
import ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils;
import org.hl7.v3.m4_0.CS;
import org.hl7.v3.m4_0.HL7RequestMessage;
import org.hl7.v3.m4_0.TEL;
import org.hl7.v3.m4_0.TS;
import org.slf4j.LoggerFactory;

/**
 *
 * @author conrad.gustafson
 */
public abstract class HL7_40_ToEntityConverter implements OidsUser {

    protected static final String PERFORMER_TYPE_CODE = "PRF";
    protected static final String AUTHOR_TYPE_CODE = "AUT";
    protected static final String TS_TIME_LABEL_LOW = "low";
    protected static final String TS_TIME_LABEL_HIGH = "high";
    protected static final String PRIVILEGE_CATEGORIZATION_CODE = "PrivilegeCategorization";
    protected static final String STATUS_CLASS_CODE = "LIC";

    private final org.slf4j.Logger logger = LoggerFactory.getLogger(HL7_40_ToEntityConverter.class);

    protected MaintainProviderRequestEntity convertHL7RequestMessage(HL7RequestMessage requestMessage) {
        MaintainProviderRequestEntity requestEntity = new MaintainProviderRequestEntity();

        setCreationTime(requestMessage, requestEntity);
        setMessageId(requestMessage, requestEntity);

        setInteractionType(requestMessage, requestEntity);
        setVersionCode(requestMessage, requestEntity);

        setSenderFields(requestMessage, requestEntity);
        setReceiverFields(requestMessage, requestEntity);

        return requestEntity;
    }

    public void setReceiverFields(HL7RequestMessage providerMessage, MaintainProviderRequestEntity requestEntity) {
        CommunicationFunction communicationFunction = null;

        List<MCCIMT000100Receiver> receivers = providerMessage.getReceiver();
        if (receivers != null && !CollectionUtils.isEmpty(receivers)) {
            MCCIMT000100Receiver hl7Receiver = receivers.get(0);
            if (hl7Receiver != null) {
                List<CommunicationFunction> communicationFunctionList = requestEntity.getReceiver();
                if (communicationFunctionList != null && !communicationFunctionList.isEmpty()) {
                    communicationFunction = communicationFunctionList.get(0);

                    JAXBElement<TEL> telecomElement = hl7Receiver.getTelecom();
                    if (telecomElement == null) {
                        return;
                    }

                    TEL telecom = telecomElement.getValue();
                    if (telecom != null) {
                        String telecomValue = telecom.getValue();
                        if (!StringUtils.isEmpty(telecomValue)) {
                            communicationFunction.setNetworkAddress(telecomValue);
                        }
                    }

                    MCCIMT000100Device device = hl7Receiver.getDevice();
                    if (device != null) {

                        List<II> ids = device.getId();

                        String environment = ConverterUtils.findIdForOid40(ids, RECEIVER_ENVIRONMENT_OID);
                        communicationFunction.setEnvironment(environment);

                        String facilityId = ConverterUtils.findIdForOid40(ids, RECEIVER_FACILITY_OID);
                        communicationFunction.setFacilityId(facilityId);

                        List<EN> nameList = device.getName();
                        if (nameList != null && !CollectionUtils.isEmpty(nameList)) {
                            EN name = nameList.get(0);
                            communicationFunction.setSystemName(name.getText());
                        }
                    }

                    JAXBElement<MCCIMT000100Agent> agencyFor = device.getAgencyFor();
                    if (agencyFor != null) {
                        MCCIMT000100Agent agencyForValue = agencyFor.getValue();
                        JAXBElement<MCCIMT000100Organization> representedOrganization = agencyForValue.getRepresentedOrganization();
                        if (representedOrganization != null) {
                            MCCIMT000100Organization representedOrganizationValue = representedOrganization.getValue();
                            List<II> ids = representedOrganizationValue.getId();
                            if (ids != null && !CollectionUtils.isEmpty(ids)) {
                                II representedOrganizationId = ids.get(0);
                                if (representedOrganizationId != null) {
                                    communicationFunction.setOrganizationId(representedOrganizationId.getExtension());
                                }
                            }
                        }
                    }
                }
            }
        }

    }

    public void setSenderFields(HL7RequestMessage providerMessage, MaintainProviderRequestEntity requestEntity) {
        MCCIMT000100Sender hl7Sender = providerMessage.getSender();
        if (hl7Sender != null) {
            CommunicationFunction communicationFunction = requestEntity.getSender();

            JAXBElement<TEL> telecomElement = hl7Sender.getTelecom();
            if (telecomElement != null) {
                TEL telecom = telecomElement.getValue();
                if (telecom != null) {
                    String telecomValue = telecom.getValue();
                    if (!StringUtils.isEmpty(telecomValue)) {
                        communicationFunction.setNetworkAddress(telecomValue);
                    }
                }
            }

            MCCIMT000100Device device = hl7Sender.getDevice();
            if (device != null) {

                List<II> ids = device.getId();

                String environment = ConverterUtils.findIdForOid40(ids, SENDER_ENVIRONMENT_OID);
                communicationFunction.setEnvironment(environment);

                String facilityId = ConverterUtils.findIdForOid40(ids, SENDER_FACILITY_OID);
                communicationFunction.setFacilityId(facilityId);

                List<EN> nameList = device.getName();
                if (!CollectionUtils.isEmpty(nameList)) {
                    final EN name = nameList.get(0);
                    if (name != null) {
                        communicationFunction.setSystemName(name.getText());
                    }
                }

                JAXBElement<MCCIMT000100Agent> agencyFor = device.getAgencyFor();
                if (agencyFor != null) {
                    MCCIMT000100Agent agencyForValue = agencyFor.getValue();
                    JAXBElement<MCCIMT000100Organization> representedOrganization = agencyForValue.getRepresentedOrganization();
                    if (representedOrganization != null) {
                        MCCIMT000100Organization representedOrganizationValue = representedOrganization.getValue();
                        List<II> idList = representedOrganizationValue.getId();
                        if (!CollectionUtils.isEmpty(idList)) {
                            II representedOrganizationId = idList.get(0);
                            if (representedOrganizationId != null) {
                                communicationFunction.setOrganizationId(representedOrganizationId.getExtension());
                            }
                        }
                    }
                }
            }
        }

    }

    public void setCreationTime(HL7RequestMessage providerMessage, MaintainProviderRequestEntity requestEntity) {
        TS creationTime = providerMessage.getCreationTime();
        if (creationTime != null) {
            requestEntity.setCreationTime(ConverterUtils.convertFromHL7StringToDate(creationTime.getValue()));
        }
    }

    public void setMessageId(HL7RequestMessage providerMessage, MaintainProviderRequestEntity requestEntity) {
        final II id = providerMessage.getId();
        String idRoot = id.getRoot();
        if (!StringUtils.isEmpty(idRoot) && MESSAGE_OID.equals(idRoot)) {
            requestEntity.setMessageId(id.getExtension());
        }
    }

    private void setInteractionType(HL7RequestMessage requestMessage, MaintainProviderRequestEntity requestEntity) {
        II interactionId = requestMessage.getInteractionId();
        if (interactionId != null) {
            requestEntity.setInteractionId(interactionId.getExtension());
        }
    }

    private void setVersionCode(HL7RequestMessage requestMessage, MaintainProviderRequestEntity requestEntity) {
        JAXBElement<CS> versionCS = requestMessage.getVersionCode();
        if (versionCS != null) {
            requestEntity.setVersionNumber(versionCS.getValue().getCode());
        }
    }

}
