package ca.bc.gov.moh.hsa.plr.converter.hl7todto416;

import ca.bc.gov.moh.hsa.entity.AddressAttribute;
import ca.bc.gov.moh.hsa.entity.CommunicationFunction;
import ca.bc.gov.moh.hsa.entity.GenderAttribute;
import ca.bc.gov.moh.hsa.entity.IdentifierAttribute;
import ca.bc.gov.moh.hsa.entity.Person;
import ca.bc.gov.moh.hsa.entity.PersonNameAttribute;
import ca.bc.gov.moh.hsa.plr.converter.hl7todto.AuditInfo;
import ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils;
import ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ExpertiseAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.QueryRequestEntity;
import java.io.Serializable;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.xml.bind.JAXBElement;
import org.apache.cxf.common.util.CollectionUtils;
import org.apache.cxf.common.util.StringUtils;
import org.hl7.v3.m4_16.AD;
import org.hl7.v3.m4_16.ANY;
import org.hl7.v3.m4_16.AdxpCity;
import org.hl7.v3.m4_16.AdxpCountry;
import org.hl7.v3.m4_16.AdxpPostalCode;
import org.hl7.v3.m4_16.AdxpState;
import org.hl7.v3.m4_16.AdxpStreetAddressLine;
import org.hl7.v3.m4_16.COCTMT090100BCAssignedPerson;
import org.hl7.v3.m4_16.EN;
import org.hl7.v3.m4_16.EnFamily;
import org.hl7.v3.m4_16.EnGiven;
import org.hl7.v3.m4_16.EnPrefix;
import org.hl7.v3.m4_16.EnSuffix;
import org.hl7.v3.m4_16.II;
import org.hl7.v3.m4_16.IVLTS;
import org.hl7.v3.m4_16.IVXBTS;
import org.hl7.v3.m4_16.MCCIMT000100BCAgent;
import org.hl7.v3.m4_16.MCCIMT000100BCDevice;
import org.hl7.v3.m4_16.MCCIMT000100BCOrganization;
import org.hl7.v3.m4_16.MCCIMT000100BCReceiver;
import org.hl7.v3.m4_16.MCCIMT000100BCSender;
import org.hl7.v3.m4_16.PN;
import org.hl7.v3.m4_16.QTY;
import org.hl7.v3.m4_16.TEL;
import org.hl7.v3.m4_16.TS;
import org.hl7.v3.m4_16.PRPMIN306010;
import org.hl7.v3.m4_16.PRPMMT306010BCHistory;
import org.hl7.v3.m4_16.PRPMMT306010BCQualification;
import org.hl7.v3.m4_16.PRPMMT306010BCQueryByParameterPayload;
import org.hl7.v3.m4_16.QUQIMT021001BCPerformer;
import org.hl7.v3.m4_16.ST;

/**
 *
 * @author conrad.gustafson
 */
public class HL7_416_ToEntityConverter implements OidsUser {

    protected static final String TS_TIME_LABEL_LOW = "low";
    protected static final String TS_TIME_LABEL_HIGH = "high";

    public QueryRequestEntity convertQueryRequestMessageToQueryRequestEntity(PRPMIN306010 queryRequestMessage) {
        QueryRequestEntity queryRequestEntity = new QueryRequestEntity();
        queryRequestEntity.setMessageType("PRPM_IN306010");
        queryRequestEntity.setProvider(new ProviderAttribute());
        queryRequestEntity.getProvider().setCollegeIdentifiers(new ArrayList<IdentifierAttribute>());
        queryRequestEntity.getProvider().setRegistryIdentifiers(new ArrayList<IdentifierAttribute>());

        setCreationTime(queryRequestMessage, queryRequestEntity);

        setSenderFields(queryRequestMessage, queryRequestEntity);
        setReceiverFields(queryRequestMessage, queryRequestEntity);

        II ii = findAssignedPersonIdByOid(queryRequestMessage, RESPONSIBLE_PERSON_USER_OID);
        queryRequestEntity.setResponsibleUserId(ii.getExtension());

        setQueryFields(queryRequestMessage, queryRequestEntity);

        return queryRequestEntity;
    }

    public void setReceiverFields(PRPMIN306010 providerMessage, QueryRequestEntity requestEntity) {
        CommunicationFunction communicationFunction = null;

        MCCIMT000100BCReceiver hl7Receiver = providerMessage.getReceiver();
        if (hl7Receiver != null) {
            List<CommunicationFunction> communicationFunctionList = requestEntity.getReceiver();
            if (communicationFunctionList != null && !communicationFunctionList.isEmpty()) {
                communicationFunction = communicationFunctionList.get(0);

                TEL telecom = hl7Receiver.getTelecom();
                if (telecom != null) {
                    String telecomValue = telecom.getValue();
                    if (!StringUtils.isEmpty(telecomValue)) {
                        communicationFunction.setNetworkAddress(telecomValue);
                    }
                }

                MCCIMT000100BCDevice device = hl7Receiver.getDevice();
                if (device != null) {

                    List<II> ids = device.getId();

                    String environment = ConverterUtils.findIdForOid416(ids, RECEIVER_ENVIRONMENT_OID);
                    communicationFunction.setEnvironment(environment);

                    String facilityId = ConverterUtils.findIdForOid416(ids, RECEIVER_FACILITY_OID);
                    communicationFunction.setFacilityId(facilityId);

                    ST name = device.getName();
                    if (name != null) {
                        communicationFunction.setSystemName(name.getText());
                    }

                    String representedOrganizationName = getRepresentedOrganizationNameFromDevice(device);
                    communicationFunction.setOrganizationId(representedOrganizationName);
                }

            }
        }

    }

    public void setSenderFields(PRPMIN306010 providerMessage, QueryRequestEntity requestEntity) {
        MCCIMT000100BCSender hl7Sender = providerMessage.getSender();
        if (hl7Sender != null) {
            CommunicationFunction communicationFunction = requestEntity.getSender();

            TEL telecom = hl7Sender.getTelecom();
            if (telecom != null) {
                String telecomValue = telecom.getValue();
                if (!StringUtils.isEmpty(telecomValue)) {
                    communicationFunction.setNetworkAddress(telecomValue);
                }
            }

            MCCIMT000100BCDevice device = hl7Sender.getDevice();
            if (device != null) {

                List<II> ids = device.getId();

                String environment = ConverterUtils.findIdForOid416(ids, SENDER_ENVIRONMENT_OID);
                communicationFunction.setEnvironment(environment);

                String facilityId = ConverterUtils.findIdForOid416(ids, SENDER_FACILITY_OID);
                communicationFunction.setFacilityId(facilityId);

                final ST name = device.getName();
                if (name != null) {
                    communicationFunction.setSystemName(name.getText());
                }

                String representedOrganizationName = getRepresentedOrganizationNameFromDevice(device);
                communicationFunction.setOrganizationId(representedOrganizationName);
            }
        }

        String registryUserOrgId = getSourceUserId(providerMessage);
        requestEntity.getSender().setUserId(registryUserOrgId);

        String jurisdictionCode = getSourceJurisdiction(providerMessage);
        requestEntity.getSender().setJurisdiction(jurisdictionCode);

    }

    public String getRepresentedOrganizationNameFromDevice(MCCIMT000100BCDevice device) {
        String representedOrganizationName = null;

        JAXBElement<MCCIMT000100BCAgent> agencyFor = device.getAsAgent();
        if (agencyFor != null) {
            MCCIMT000100BCAgent agencyForValue = agencyFor.getValue();
            JAXBElement<MCCIMT000100BCOrganization> representedOrganization = agencyForValue.getRepresentedOrganization();
            if (representedOrganization != null) {
                MCCIMT000100BCOrganization representedOrganizationValue = representedOrganization.getValue();
                if (representedOrganizationValue != null) {
                    II agentId = representedOrganizationValue.getId();
                    if (agentId != null) {
                        representedOrganizationName = agentId.getExtension();
                    }
                }
            }
        }
        return representedOrganizationName;
    }

    public void setCreationTime(PRPMIN306010 providerMessage, QueryRequestEntity requestEntity) {
        TS creationTime = providerMessage.getCreationTime();
        if (creationTime != null) {
            requestEntity.setCreationTime(ConverterUtils.convertFromHL7StringToDate(creationTime.getValue()));
        }
    }

    public void setMessageId(PRPMIN306010 providerMessage, QueryRequestEntity requestEntity) {
        final II id = providerMessage.getId();
        String idRoot = id.getRoot();
        if (!StringUtils.isEmpty(idRoot) && MESSAGE_OID.equals(idRoot)) {
            requestEntity.setMessageId(id.getExtension());
        }
    }

    protected boolean convertToBoolean(String flag) {
        return "Y".equals(flag);
    }

    public Long stringToLong(String longString) throws ParseException {
        if (StringUtils.isEmpty(longString)) {
            return null;
        }

        return Long.valueOf(longString);
    }

    protected String getResponsiblePersonUserId(PRPMIN306010 providerMessage) {

        String responsiblePersonOID = RESPONSIBLE_PERSON_USER_OID;
        II relaventID = findAssignedPersonIdByOid(providerMessage, responsiblePersonOID);
        String responsiblePersonUserId = null;

        if (relaventID != null) {
            responsiblePersonUserId = relaventID.getExtension();
        }

        return responsiblePersonUserId;
    }

    protected String getSourceUserId(PRPMIN306010 providerMessage) {

        String sourceJurisdictionOid = SOURCE_USER_OID;
        II relaventID = findAssignedPersonIdByOid(providerMessage, sourceJurisdictionOid);
        String sourceUserId = null;

        if (relaventID != null) {
            sourceUserId = relaventID.getExtension();
        }

        return sourceUserId;
    }

    protected String getSourceJurisdiction(PRPMIN306010 providerMessage) {
        String sourceJurisdictionOid = SOURCE_USER_OID;
        String sourceJurisdiction = null;

        II relaventID = findAssignedPersonIdByOid(providerMessage, sourceJurisdictionOid);

        if (relaventID != null) {
            sourceJurisdiction = relaventID.getAssigningAuthorityName();
        }
        return sourceJurisdiction;
    }

    private II findAssignedPersonIdByOid(PRPMIN306010 providerMessage, String oid) {

        II foundId = null;
        List<QUQIMT021001BCPerformer> authorsOrPerformers = null;
        try {
            authorsOrPerformers = providerMessage.getControlActProcess().getAuthorOrPerformer();
        } catch (NullPointerException npe) {
            return null;
        }
        if (!CollectionUtils.isEmpty(authorsOrPerformers)) {
            for (QUQIMT021001BCPerformer authorOrPerformer : authorsOrPerformers) {
                COCTMT090100BCAssignedPerson assignedPerson = authorOrPerformer.getAssignedPerson();
                II assignedPersonId = assignedPerson.getId();
                String foundOid = assignedPersonId.getRoot();

                if (oid.equals(foundOid)) {
                    foundId = assignedPersonId;
                }
            }
        }
        return foundId;
    }

    protected PersonNameAttribute convertToNameAttribute(EN pn) {
        PersonNameAttribute personNameAttribute = new PersonNameAttribute();

        List<Serializable> content = pn.getContent();
        for (Serializable serializable : content) {
            if (serializable instanceof JAXBElement) {
                convertNameAttributeContent(personNameAttribute, (JAXBElement) serializable);
            }
        }

        return personNameAttribute;
    }

    private void convertNameAttributeContent(PersonNameAttribute personNameAttribute, JAXBElement jaxbElement) {
        Class declaredType = jaxbElement.getDeclaredType();
        ANY value = (ANY) jaxbElement.getValue();

        if (EnFamily.class
                .equals(declaredType)) {
            personNameAttribute.setLastName(value.getText());
        } else if (EnGiven.class.equals(declaredType)
                && !((EnGiven) value).getQualifier().contains("CL")) {
            if (org.apache.commons.lang.StringUtils.isEmpty(personNameAttribute.getFirstName())) {
                personNameAttribute.setFirstName(value.getText());
            } else if (org.apache.commons.lang.StringUtils.isEmpty(personNameAttribute.getMiddleName())) {
                personNameAttribute.setMiddleName(value.getText());
            } else if (org.apache.commons.lang.StringUtils.isEmpty(personNameAttribute.getSecondMiddleName())) {
                personNameAttribute.setSecondMiddleName(value.getText());
            }
        } else if (EnSuffix.class
                .equals(declaredType)) {
            personNameAttribute.setSuffix(value.getText());
        } else if (EnPrefix.class
                .equals(declaredType)) {
            personNameAttribute.setPrefix(value.getText());
        }

    }

    protected void convertAddressAttributeContent(AddressAttribute addressAttribute, JAXBElement jaxbElement) {
        Class declaredType = jaxbElement.getDeclaredType();
        ANY value = (ANY) jaxbElement.getValue();

        final String text = value.getText();

        if (AdxpCity.class
                .equals(declaredType)) {
            addressAttribute.setCity(text);
        } else if (AdxpState.class
                .equals(declaredType)) {
            addressAttribute.setProvince(text);
        } else if (AdxpCountry.class
                .equals(declaredType)) {
            addressAttribute.setCountry(text);
        } else if (AdxpPostalCode.class
                .equals(declaredType)) {
            addressAttribute.setPostalCode(text);
        } else if (AdxpStreetAddressLine.class
                .equals(declaredType)) {
            List<String> streetAddressLines = addressAttribute.getStreetAddressLines();
            if (streetAddressLines
                    == null) {
                streetAddressLines = new ArrayList<String>();
                addressAttribute.setStreetAddressLines(streetAddressLines);
            }

            streetAddressLines.add(text);
        }
    }

    protected void populateAuditInfoTimesFromContent(AuditInfo auditInfo, List<Serializable> content) {
        for (Serializable serializable : content) {
            if (serializable instanceof JAXBElement) {

                JAXBElement jaxbElement = (JAXBElement) serializable;
                ANY value = (ANY) jaxbElement.getValue();

                if (value instanceof TS) {
                    populateAuditInfoFromValidTime(auditInfo, (TS) value);
                }
            }
        }
    }

    protected void populateAuditInfoFromValidTime(AuditInfo auditInfo, TS validTime) {
        auditInfo.setStartDate(getLowTime(validTime));
        auditInfo.setExpiryDate(getHighTime(validTime));
    }

    protected Date getLowTime(TS validTime) {
        return getTimeFromTS(validTime, TS_TIME_LABEL_LOW);
    }

    protected Date getHighTime(TS validTime) {
        return getTimeFromTS(validTime, TS_TIME_LABEL_HIGH);
    }

    protected Date getTimeFromTS(TS validTime, String label) {
        if (validTime != null) {
            if (!(validTime instanceof IVLTS)) {
                return null;
            }
            IVLTS validTimeIVLTS = (IVLTS) validTime;
            List<JAXBElement<? extends QTY>> rests = validTimeIVLTS.getRest();

            for (JAXBElement<? extends QTY> rest : rests) {
                QTY value = rest.getValue();

                if (value instanceof IVXBTS) {
                    String timeLabel = rest.getName().getLocalPart();

                    if (label.equals(timeLabel)) {
                        IVXBTS ivlts = (IVXBTS) value;
                        String timeValue = ivlts.getValue();
                        return ConverterUtils.convertFromHL7StringToDate(timeValue);
                    }
                }
            }
        }
        return null;
    }

//    protected void createPhoneOrEmailAttribute(TEL tel, List<PhoneAttribute> phoneAttributeList, List<EmailAttribute> emailAttributeList, PRPMIN306010 requestMessage) {
//        String value = tel.getValue();
//        List<String> use = tel.getUse();
//        String purpose = ConverterUtils.convertPurpose(use);
//        Attribute attribute = null;
//        try {
//            URI telecom = new URI(value);
//            String scheme = telecom.getScheme();
//            String type = ConverterUtils.convertTelecomType(scheme);
//            if (ConverterUtils.SCHEME_MODEM.equals(scheme)
//                    || ConverterUtils.SCHEME_FAX.equals(scheme)
//                    || ConverterUtils.SCHEME_TEL.equals(scheme)) {
//                PhoneAttribute phoneAttribute = new PhoneAttribute();
//                attribute = phoneAttribute;
//                phoneAttribute.setUncodedType(type);
//                phoneAttribute.setCommunicationPurposeCode(purpose);
//
//                String phoneNumber = telecom.getSchemeSpecificPart();
//                phoneAttribute.setRawValue(phoneNumber);
//                phoneNumber = org.apache.commons.lang.StringUtils.remove(phoneNumber, " ");
//                phoneNumber = org.apache.commons.lang.StringUtils.remove(phoneNumber, "-");
//
//                if (phoneNumber.length() == 7) {
//                    phoneAttribute.setNumber(phoneNumber);
//                } else if (phoneNumber.length() == 10) {
//                    phoneAttribute.setAreaCode(phoneNumber.substring(0, 3));
//                    phoneAttribute.setNumber(phoneNumber.substring(3));
//                }
//                phoneAttributeList.add(phoneAttribute);
//            } else if (ConverterUtils.SCHEME_HTTP.equals(scheme)
//                    || ConverterUtils.SCHEME_FTP.equals(scheme)
//                    || ConverterUtils.SCHEME_EMAIL.equals(scheme)) {
//                String emailAddress = telecom.getSchemeSpecificPart();
//                EmailAttribute emailAttribute = new EmailAttribute();
//                attribute = emailAttribute;
//                emailAttribute.setUncodedType(type);
//                emailAttribute.setCommunicationPurposeCode(purpose);
//                emailAttribute.setAddress(emailAddress);
//                emailAttributeList.add(emailAttribute);
//            } else {
//                // only support phone and email
//                return;
//            }
//        } catch (URISyntaxException ex) {
//            logger.error("unrecognized telecom value", ex);
//        }
//        if (attribute != null) {
//            II controlActReferenceId = null;
//            boolean isUpdateMode = false;
//            TS validTime = null;
//            if (tel instanceof PRPMMT301010HealthCareProviderTelecom) {
//                final PRPMMT301010HealthCareProviderTelecom typedTel = (PRPMMT301010HealthCareProviderTelecom) tel;
//                controlActReferenceId = typedTel.getControlActReferenceId();
//                isUpdateMode = typedTel.getUpdateMode() != null;
//                validTime = typedTel.getValidTime();
//            } else if (tel instanceof PRPMMT301010ServiceDeliveryLocationTelecom) {
//                final PRPMMT301010ServiceDeliveryLocationTelecom typedTel = (PRPMMT301010ServiceDeliveryLocationTelecom) tel;
//                controlActReferenceId = typedTel.getControlActReferenceId();
//                isUpdateMode = typedTel.getUpdateMode() != null;
//                validTime = typedTel.getValidTime();
//            }
//
//            AuditInfo auditInfo = getAuditInfo(controlActReferenceId, requestMessage);
//            attribute.setSource(auditInfo.getDataOwner());
//            if (isUpdateMode) {
//                attribute.setEndReasonCode(auditInfo.getReasonCode());
//            }
//            populateAuditInfoFromValidTime(auditInfo, validTime);
//            attribute.setStartDate(auditInfo.getStartDate());
//            attribute.setExpiryDate(auditInfo.getExpiryDate());
//        }
//    }
    private void setQueryFields(PRPMIN306010 queryRequestMessage, QueryRequestEntity queryRequestEntity) {
        boolean isHistory = false;

        PRPMMT306010BCQueryByParameterPayload queryByParameterPayload = null;
        try {
            queryByParameterPayload = queryRequestMessage.getControlActProcess().getQueryByParameterPayload().getValue();
        } catch (NullPointerException npe) {
            // no query parameters
            return;
        }
        if (queryByParameterPayload == null) {
            return;
        }

        try {
            JAXBElement<PRPMMT306010BCHistory> historyJaxbElement = queryByParameterPayload.getHistory();
            PRPMMT306010BCHistory history = historyJaxbElement.getValue();
            isHistory = history.getValue().isValue().booleanValue();
        } catch (NullPointerException npe) {

        }

        final ProviderAttribute provider = queryRequestEntity.getProvider();

        try {
            II providerId = queryByParameterPayload.getProviderID().getValue().getValue();
            String providerIdRoot = providerId.getRoot();
            String providerIdExtension = providerId.getExtension();

            String idType = ConverterUtils.getOidValue(providerIdRoot);

            IdentifierAttribute identifierAttribute = new IdentifierAttribute();
            identifierAttribute.setUncodedType(idType);
            identifierAttribute.setValue(providerIdExtension);

            List<IdentifierAttribute> collegeIdentifiers = provider.getCollegeIdentifiers();
            List<IdentifierAttribute> registryIdentifiers = provider.getRegistryIdentifiers();

            if (ConverterUtils.isRegistryIdType(providerIdRoot)) {
                registryIdentifiers.add(identifierAttribute);
            } else {
                collegeIdentifiers.add(identifierAttribute);
            }

        } catch (NullPointerException npe) {

        }

        try {
            PN providerNameElement = queryByParameterPayload.getProviderName().getValue().getValue();
            if (provider.getPersonNames()==null){
                provider.setPersonNames(new ArrayList<PersonNameAttribute>());
            }
            List<PersonNameAttribute> providerNames = provider.getPersonNames();
            PersonNameAttribute providerName = convertToNameAttribute(providerNameElement);
            providerNames.add(providerName);
        } catch (NullPointerException npe) {

        }

        try {
            AD providerAddress = queryByParameterPayload.getProviderAddress().getValue().getValue();
            List<AddressAttribute> providerAddresses = provider.getAddresses();
            if (providerAddresses==null){
                providerAddresses = new ArrayList<AddressAttribute>();
                provider.setAddresses(providerAddresses);
            }
            AddressAttribute addressAttribute = convertToAddressAttribute(providerAddress);
            providerAddresses.add(addressAttribute);

        } catch (NullPointerException npe) {

        }

        try {
            String roleCode = queryByParameterPayload.getRoleType().getValue().getValue().getCode();
            queryRequestEntity.setProviderRoleTypeCode(roleCode);
        } catch (NullPointerException npe) {

        }
        
        //PLR-1779 - map gender
        if (queryByParameterPayload.getAdministrativeGender()!=null){
            try{
                if (provider.getDemographicDetails()==null){
                    provider.setDemographicDetails(new ArrayList<Person>());
                }
                if (provider.getDemographicDetails().isEmpty()){
                    provider.getDemographicDetails().add(new Person());
                }
                Person details = provider.getDemographicDetails().get(0);
                details.setGender(new GenderAttribute(queryByParameterPayload.getAdministrativeGender().getValue().getValue().getCode()));
            }catch(NullPointerException npe){
                
            }
        }
        
        //PLR-1779 - map qualifications 
        if (queryByParameterPayload.getQualification()!=null && !queryByParameterPayload.getQualification().isEmpty()){
            if (queryRequestEntity.getProvider().getExpertises()==null){
                queryRequestEntity.getProvider().setExpertises(new ArrayList<ExpertiseAttribute>());
            }
            for (PRPMMT306010BCQualification qualification: queryByParameterPayload.getQualification()){
                ExpertiseAttribute expertise = new ExpertiseAttribute();
                expertise.setUncodedType(qualification.getValue().getCode());
                queryRequestEntity.getProvider().getExpertises().add(expertise);
            }
        }
        

        queryRequestEntity.setIsHistory(isHistory);
    }

    protected AddressAttribute convertToAddressAttribute(org.hl7.v3.m4_16.AD address) {
        AddressAttribute addressAttribute;
        addressAttribute = new AddressAttribute();
        List<Serializable> content = address.getContent();
        for (Serializable serializable : content) {
            if (serializable instanceof JAXBElement) {
                convertAddressAttributeContent(addressAttribute, (JAXBElement) serializable);
            }
        }
        return addressAttribute;
    }
}
