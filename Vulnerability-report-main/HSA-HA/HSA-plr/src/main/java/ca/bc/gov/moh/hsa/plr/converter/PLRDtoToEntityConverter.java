package ca.bc.gov.moh.hsa.plr.converter;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.EsbMessage;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ConditionsDto;
import ca.bc.gov.health.plr.dto.provider.esb.ConfidentialityIndicatorDto;
import ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DisciplinaryActionDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.esb.NoteDto;
import ca.bc.gov.health.plr.dto.provider.esb.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.RegistryIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.RegistryUserRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto;
import ca.bc.gov.moh.hsa.entity.AddressAttribute;
import ca.bc.gov.moh.hsa.entity.CommunicationFunction;
import ca.bc.gov.moh.hsa.entity.ConfidentialityMaskAttribute;
import ca.bc.gov.moh.hsa.entity.DateAttribute;
import ca.bc.gov.moh.hsa.entity.EmailAttribute;
import ca.bc.gov.moh.hsa.entity.GenderAttribute;
import ca.bc.gov.moh.hsa.entity.IdentifierAttribute;
import ca.bc.gov.moh.hsa.entity.OrganizationNameAttribute;
import ca.bc.gov.moh.hsa.entity.Person;
import ca.bc.gov.moh.hsa.entity.PersonNameAttribute;
import ca.bc.gov.moh.hsa.entity.PhoneAttribute;
import ca.bc.gov.moh.hsa.entity.RequestMessage;
import ca.bc.gov.moh.hsa.plr.entity.transaction.AcknowledgementEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ConditionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.CredentialAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.DisciplinaryActionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ExpertiseAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.InformationRouteAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.NoteAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderRelationshipAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.StatusAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.WorkLocationAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.WorkLocationDetailsAttribute;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.logging.Logger;
import org.springframework.util.StringUtils;

/**
 *
 * @author greg.perkins
 */
public class PLRDtoToEntityConverter {

    private static final String CLASSNAME = PLRDtoToEntityConverter.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    public static void convertHeader(EsbMessage in, RequestMessage out) {
        out.setMessageId(in.getUniqueMessageId());
        out.setCreationTime(in.getMessageCreationTime());
        out.setOriginalEventTime(in.getOriginalEventDate());
        out.setVersionNumber(in.getVersion());
        out.setInteractionId(in.getMessageInteractionId());
        out.setRelease(in.getRelease());
        out.setProcessModeCode(in.getProcessModeCode());
        out.setProcessingCode(in.getProcessingCode());
        out.setAcceptAckCode(in.getAcceptAckCode());
        out.setResponsibleUserId(in.getResponsiblePersonUserId());

    }

    public static void convertTarget(EsbMessage in, RequestMessage out) {
        CommunicationFunction target = out.getReceiver().get(0);
        if (target == null) {
            target = new CommunicationFunction();
            out.getReceiver().add(target);
        }

        target.setNetworkAddress(in.getTargetNetworkAddressChid());
        target.setEnvironment(in.getTargetEnvironment());
        target.setFacilityId(in.getTargetFacilityId());
        target.setSystemName(in.getTargetServer());
        target.setOrganizationId(in.getTargetOrganizationChid());
        // Greg, I added this here
        target.setJurisdiction(in.getTargetJurisdiction());
    }

    public static void convertSource(EsbMessage in, RequestMessage out) {
        CommunicationFunction source = out.getSender();
        source.setNetworkAddress(in.getSourceNetworkAddressChid());
        source.setFacilityId(in.getSourceFacilityId());
        source.setSystemName(in.getSourceServer());
        source.setOrganizationId(in.getSourceOrganizationChid());
        source.setJurisdiction(in.getSourceJurisdiction());
        source.setUserId(in.getSourceUserId());
        source.setEnvironment(in.getSourceEnvironment());
    }

    public static void convertProvider(ProviderDetails in, ProviderAttribute out) throws IllegalAccessException, InvocationTargetException {
        out.setPartyType(in.getProviderType());
        out.setHptCode(in.getType());

        for (CollegeIdentifierDto id : in.getIdentifiers()) {
            out.getCollegeIdentifiers().add(convertIdentifier(id));
        }

        for (RegistryIdentifierDto registryIdentifier : in.getRegistryIdentifiers()) {
            out.getRegistryIdentifiers().add(convertRegistryIdentifier(registryIdentifier));
        }

        for (AddressDto addr : in.getAddresses()) {
            out.getAddresses().add(convertAddress(addr));
        }
        for (PersonNameDto name : in.getIndNames()) {
            out.getPersonNames().add(convertName(name));
        }

        for (OrgNameDto orgName : in.getOrgNames()) {
            out.getOrganizationNames().add(convertOrgName(orgName));
        }
        for (TelecommunicationDto tel : in.getTelecommunication()) {
            out.getPhones().add(convertTelecommunication(tel));
        }
        for (ElectronicAddressDto elec : in.getElectronicAddresses()) {
            out.getEmails().add(convertElectronicAddress(elec));
        }
        for (StatusDto status : in.getStatuses()) {
            out.getStatuses().add(convertStatus(status));
        }
        for (DemographicDetailsDto demo : in.getDemographicDetails()) {
            out.getDemographicDetails().add(convertDemographics(demo));
        }
        for (ConfidentialityIndicatorDto conf : in.getConfidentialityIndicators()) {
            lazyInitDemographicDetails(out);
            out.getDemographicDetails().get(0).getConfidentialityMask().add(convertConfidentiality(conf));
        }
        for (DisciplinaryActionDto dis : in.getDisciplinaryActions()) {
            out.getDisciplinaryActions().add(convertDisciplinaryAction(dis));
        }
        for (ConditionsDto condition : in.getConditions()) {
            out.getConditions().add(convertCondition(condition));
        }
        for (WorkLocationDto wl : in.getWorkLocationList()) {
            out.getWorkLocations().add(convertWorkLocation(wl));
        }
        for (CredentialsDto cred : in.getCredentials()) {
            out.getCredentials().add(convertCredential(cred));
        }
        for (ExpertiseDto exp : in.getExpertise()) {
            out.getExpertises().add(convertExpertise(exp));
        }
        for (ProviderRelationshipDto rel : in.getProviderRelationships()) {
            out.getProviderRelationships().add(convertProviderRelationship(rel));
        }

        for (InformationRouteDto informationRoute : in.getInformationRoutes()) {
            out.getInformationRoutes().add(convertInformationRoute(informationRoute));
        }

        for (NoteDto note : in.getNotes()) {
            out.getNotes().add(convertNote(note));
        }

        for (RegistryUserRelationshipDto registryUserRelationship : in.getRegistryUserRelationships()) {
            out.getRegistryUserRelationships().add(convertRegistryUserRelationship(registryUserRelationship));
        }

    }

    private static void lazyInitDemographicDetails(ProviderAttribute out) {
        if (out.getDemographicDetails() == null) {
            out.setDemographicDetails(new ArrayList<Person>());
        }
        if (out.getDemographicDetails().isEmpty()) {
            out.getDemographicDetails().add(new Person());
        }
        if (out.getDemographicDetails().get(0).getConfidentialityMask() == null) {
            out.getDemographicDetails().get(0).setConfidentialityMask(new ArrayList<ConfidentialityMaskAttribute>());
        }
    }

    private static ConfidentialityMaskAttribute convertConfidentiality(ConfidentialityIndicatorDto conf) {
        ConfidentialityMaskAttribute ma = new ConfidentialityMaskAttribute();
        ma.setMasked(conf.isConfidential());
        ma.setStartDate(conf.getEffectiveStartDate());
        ma.setExpiryDate(conf.getEffectiveEndDate());
        ma.setEndReasonCode(conf.getEndReasonCode());
        ma.setSource(conf.getDataOwnerCode());
        return ma;
    }

    public static AddressAttribute convertAddress(AddressDto in) {
        AddressAttribute out = new AddressAttribute();
        out.setUncodedType(in.getTypeCode());
        out.setCommunicationPurposeCode(in.getCommunicationPurposeCode());
        List<String> lines = new ArrayList<>();
        if (!StringUtils.isEmpty(in.getAddressLineOne())) {
            lines.add(in.getAddressLineOne());
        }
        if (!StringUtils.isEmpty(in.getAddressLineTwo())) {
            lines.add(in.getAddressLineTwo());
        }
        if (!StringUtils.isEmpty(in.getAddressLineThree())) {
            lines.add(in.getAddressLineThree());
        }
        if (!StringUtils.isEmpty(in.getAddressLineFour())) {
            lines.add(in.getAddressLineFour());
        }
        out.setStreetAddressLines(lines);
        out.setCity(in.getCity());
        out.setProvince(in.getProvinceOrStateTxt());
        out.setPostalCode(in.getPostalCode());
        out.setCountry(in.getCountryCode());
        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setSource(in.getDataOwnerCode());
        out.setEndReasonCode(in.getEndReasonCode());
        return out;
    }

    public static PersonNameAttribute convertName(PersonNameDto in) {
        PersonNameAttribute out = new PersonNameAttribute();
        out.setUncodedType(in.getTypeCode());
        out.setLastName(in.getLastName());
        out.setFirstName(in.getFirstName());
        out.setMiddleName(in.getSecondName());
        out.setSecondMiddleName(in.getThirdName());
        out.setSuffix(in.getSuffix());
        out.setPrefix(in.getPrefix());
        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setEndReasonCode(in.getEndReasonCode());
        out.setSource(in.getDataOwnerCode());
        out.setPreferred(in.isPreferred());
        return out;
    }

    public static OrganizationNameAttribute convertOrgName(OrgNameDto in) {
        OrganizationNameAttribute out = new OrganizationNameAttribute();
        out.setUncodedType(in.getTypeCode());
        out.setLongName(in.getLongName());
        out.setName(in.getName());
        out.setPreferred(in.isPreferred());
        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setEndReasonCode(in.getEndReasonCode());
        out.setSource(in.getDataOwnerCode());
        out.setPreferred(in.isPreferred());
        return out;
    }

    public static IdentifierAttribute convertIdentifier(CollegeIdentifierDto in) {
        IdentifierAttribute out = new IdentifierAttribute();
        out.setValue(in.getIdentifier());
        // Greg, I changed this because we can't depend on the typecodes being known or not changing
        out.setUncodedType(in.getTypeCode());
        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setEndReasonCode(in.getEndReasonCode());
        out.setSource(in.getDataOwnerCode());
        return out;
    }

    public static IdentifierAttribute convertRegistryIdentifier(RegistryIdentifierDto in) {
        IdentifierAttribute out = new IdentifierAttribute();
        out.setValue(in.getIdentifier());
        // Greg, I changed this because we can't depend on the typecodes being known or not changing
        out.setUncodedType(in.getTypeCode());
        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setEndReasonCode(in.getEndReasonCode());
        out.setSource(in.getDataOwnerCode());
        return out;
    }

    public static PhoneAttribute convertTelecommunication(TelecommunicationDto in) {
        PhoneAttribute out = new PhoneAttribute();
        out.setCommunicationPurposeCode(in.getCommunicationPurposeCode());
        out.setUncodedType(in.getTypeCode());
        out.setAreaCode(in.getAreaCode());
        out.setNumber(in.getNumber());
        out.setExtension(in.getExtension());
        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setEndReasonCode(in.getEndReasonCode());
        out.setSource(in.getDataOwnerCode());
        return out;
    }

    public static EmailAttribute convertElectronicAddress(ElectronicAddressDto in) {
        EmailAttribute out = new EmailAttribute();
        out.setUncodedType(in.getTypeCode());
        out.setCommunicationPurposeCode(in.getCommunicationPurposeCode());
        out.setAddress(in.getAddress());
        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setEndReasonCode(in.getEndReasonCode());
        out.setSource(in.getDataOwnerCode());
        return out;
    }

    public static WorkLocationDetailsAttribute convertWorkLocationDetails(WorkLocationDetailsDto in) {
        WorkLocationDetailsAttribute out = new WorkLocationDetailsAttribute();
        out.setName(in.getName());
        out.setAdditionalAddresseeInfo(in.getAdditionalAddresseeInfo());
        out.setDefaulted(in.isDefaultFlag());
        out.setTypeCode(in.getTypeCode());
        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setSource(in.getDataOwnerCode());
        out.setEndReasonCode(in.getEndReasonCode());
        return out;
    }

    public static Person convertDemographics(DemographicDetailsDto in) {
        Person out = new Person();
        out.setGender(new GenderAttribute(in.getGenderCode()));
        out.setBirthDate(new DateAttribute(in.getBirthDate()));
        out.setDeathDate(new DateAttribute(in.getDeathDate()));
        out.setBirthProvinceCode(in.getBirthProvState());
        out.setBirthCountryCode(in.getBirthCountryCode());
        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setEndReasonCode(in.getEndReasonCode());
        out.setSource(in.getDataOwnerCode());
        return out;
    }

    public static DisciplinaryActionAttribute convertDisciplinaryAction(DisciplinaryActionDto in) {
        DisciplinaryActionAttribute out = new DisciplinaryActionAttribute();
        out.setIdentifier(in.getIdentifier());
        out.setDescription(in.getDescription());
        out.setDisplay(in.isDisplayFlag());
        out.setArchiveDate(in.getArchiveDate());
        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setEndReasonCode(in.getEndReasonCode());
        out.setSource(in.getDataOwnerCode());
        return out;
    }

    private static InformationRouteAttribute convertInformationRoute(InformationRouteDto in) {
        InformationRouteAttribute out = new InformationRouteAttribute();

        out.setDocumentTypeCode(in.getDocumentTypeCode());
        //out.setMechanismTypeCode(in.getMechanismTypeCode());
        out.setDefaulted(in.isDefaultFlag());

        final AddressDto addressDto = in.getAddressDto();
        final TelecommunicationDto telecommunicationDto = in.getTelecommunicationDto();
        final ElectronicAddressDto electronicAddressDto = in.getElectronicAddressDto();

        if (addressDto != null) {
            AddressAttribute addressAttribute = new AddressAttribute();
            addressAttribute.setUncodedType(addressDto.getTypeCode());
            addressAttribute.setEndReasonCode(addressDto.getEndReasonCode());
            addressAttribute.setStartDate(addressDto.getEffectiveStartDate());
            addressAttribute.setExpiryDate(addressDto.getEffectiveEndDate());
            out.setAddressAttribute(addressAttribute);
        }

        if (telecommunicationDto != null) {
            PhoneAttribute phoneAttribute = new PhoneAttribute();
            phoneAttribute.setUncodedType(telecommunicationDto.getTypeCode());
            phoneAttribute.setEndReasonCode(telecommunicationDto.getEndReasonCode());
            out.setPhoneAttribute(phoneAttribute);
        }

        if (electronicAddressDto != null) {
            EmailAttribute emailAttribute = new EmailAttribute();
            emailAttribute.setUncodedType(electronicAddressDto.getTypeCode());
            emailAttribute.setEndReasonCode(electronicAddressDto.getEndReasonCode());
            out.setEmailAttribute(emailAttribute);
        }

        out.setCommunicationPurposeCode(in.getCommunicationPurposeCode());
        out.setCommunicationDataOwnerCode(in.getCommunicationDataOwnerCode());

        out.setWorkLocationIdentifier(in.getWorkLocationIdentifier());
        out.setWorkLocationOwnerCode(in.getWorkLocationDataOwnerCode());

        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setEndReasonCode(in.getEndReasonCode());
        out.setSource(in.getDataOwnerCode());

        return out;
    }

    private static NoteAttribute convertNote(NoteDto in) {
        NoteAttribute out = new NoteAttribute();

        out.setIdentifier(in.getIdentifier());
        out.setText(in.getNoteText());
        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setEndReasonCode(in.getEndReasonCode());
        out.setSource(in.getDataOwnerCode());

        return out;
    }

    private static ProviderRelationshipAttribute convertRegistryUserRelationship(RegistryUserRelationshipDto in) {
        ProviderRelationshipAttribute out = new ProviderRelationshipAttribute();
        out.setRelationshipTypeCode(in.getRegUserTypeCode());
        out.setRelationshipWithProviderType(in.getTypeCode());
        out.setRelationshipWithProviderCollegeId(in.getRegistryUserChid());
        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setEndReasonCode(in.getEndReasonCode());
        out.setSource(in.getDataOwnerCode());

        return out;
    }

    public static ConditionAttribute convertCondition(ConditionsDto in) {
        ConditionAttribute out = new ConditionAttribute();
        out.setId(in.getIdentifier());
        out.setUncodedType(in.getTypeCode());
        out.setRestrictionExplanationText(in.getRestrictionExplanationText());
        out.setRestricted(in.isRestrictionFlag());
        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setEndReasonCode(in.getEndReasonCode());
        out.setSource(in.getDataOwnerCode());
        return out;
    }

    public static CredentialAttribute convertCredential(CredentialsDto in) {
        CredentialAttribute out = new CredentialAttribute();
        out.setUncodedType(in.getTypeCode());
        out.setDesignation(in.getDesignation());
        out.setRegistrationNumber(in.getRegistrationNumber());
        out.setGrantingInstitution(in.getGrantingInstitution());
        out.setInstitutionCity(in.getInstitutionCity());
        out.setInstitutionProvStateCode(in.getInstitutionProvStateCode());
        out.setInstitutionCountryCode(in.getInstitutionCountryCode());
        out.setEquivalent(in.isEquivalencyFlag());
        out.setYearIssued(in.getYearIssued());
        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setEndReasonCode(in.getEndReasonCode());
        out.setSource(in.getDataOwnerCode());
        return out;
    }

    public static StatusAttribute convertStatus(StatusDto in) {
        StatusAttribute out = new StatusAttribute();
        out.setUncodedType(in.getTypeCode());
        out.setClassCode(in.getClassCode());
        out.setReasonCode(in.getReasonCode());
        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setEndReasonCode(in.getEndReasonCode());
        out.setSource(in.getDataOwnerCode());
        return out;
    }

    public static ExpertiseAttribute convertExpertise(ExpertiseDto in) {
        ExpertiseAttribute out = new ExpertiseAttribute();
        out.setRoleCode(in.getRoleTypeCode());
        out.setUncodedType(in.getTypeCode());
        out.setSourceCode(in.getSourcesCode());
        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setEndReasonCode(in.getEndReasonCode());
        out.setSource(in.getDataOwnerCode());
        return out;
    }

    public static ProviderRelationshipAttribute convertProviderRelationship(ProviderRelationshipDto in) {
        ProviderRelationshipAttribute out = new ProviderRelationshipAttribute();

        out.setStartDate(in.getEffectiveStartDate());
        out.setExpiryDate(in.getEffectiveEndDate());
        out.setEndReasonCode(in.getEndReasonCode());
        out.setSource(in.getDataOwnerCode());
        out.setRelationshipWithProviderType(in.getIdentifierTypeCode());
        out.setRelationshipWithProviderCollegeId(String.valueOf(in.getIdentifier()));
        out.setRelationshipTypeCode(in.getRelationshipTypeCode());
        out.setTargetRelationshipTypeCode(in.getTargetRelationshipTypeCode());
        out.setRelationshipWithProviderName(in.getRelationshipWithProviderName());
        return out;
    }

    public static WorkLocationAttribute convertWorkLocation(WorkLocationDto in) {

        WorkLocationAttribute out = new WorkLocationAttribute();

        out.setIdentifier(convertLongToString(in.getIdentifier()));
        out.setDataOwnerCode(in.getDataOwnerCode());

        if (in.getPrimaryWorkLocationDetails() != null) {
            out.setName(in.getPrimaryWorkLocationDetails().getName());
            out.setStartDate(in.getPrimaryWorkLocationDetails().getEffectiveStartDate());
            out.setExpiryDate(in.getPrimaryWorkLocationDetails().getEffectiveEndDate());
        }

        for (WorkLocationDetailsDto details : in.getWorkLocationDetails()) {
            out.getDetails().add(convertWorkLocationDetails(details));
        }

        for (AddressDto addr : in.getAddresses()) {
            out.getAddresses().add(convertAddress(addr));
        }

        for (TelecommunicationDto tel : in.getTelecommunications()) {
            out.getPhoneNumbers().add(convertTelecommunication(tel));
        }

        for (ElectronicAddressDto elec : in.getElectronicAddresses()) {
            out.getEmailAddresses().add(convertElectronicAddress(elec));
        }

        for (InformationRouteDto informationRoute : in.getInformationRoutes()) {
            out.getInformationRoutes().add(convertInformationRoute(informationRoute));
        }

        return out;
    }

    public static void initialize(ProviderAttribute provider) {
        provider.setCollegeIdentifiers(new ArrayList<IdentifierAttribute>());
        provider.setRegistryIdentifiers(new ArrayList<IdentifierAttribute>());
        provider.setPersonNames(new ArrayList<PersonNameAttribute>());
        provider.setOrganizationNames(new ArrayList<OrganizationNameAttribute>());
        provider.setAddresses(new ArrayList<AddressAttribute>());
        provider.setPhones(new ArrayList<PhoneAttribute>());
        provider.setEmails(new ArrayList<EmailAttribute>());
        provider.setConditions(new ArrayList<ConditionAttribute>());
        provider.setDemographicDetails(new ArrayList<Person>());
        provider.setDisciplinaryActions(new ArrayList<DisciplinaryActionAttribute>());
        provider.setInformationRoutes(new ArrayList<InformationRouteAttribute>());
        provider.setNotes(new ArrayList<NoteAttribute>());
        provider.setCredentials(new ArrayList<CredentialAttribute>());
        provider.setStatuses(new ArrayList<StatusAttribute>());
        provider.setExpertises(new ArrayList<ExpertiseAttribute>());
        provider.setProviderRelationships(new ArrayList<ProviderRelationshipAttribute>());
        provider.setRegistryUserRelationships(new ArrayList<ProviderRelationshipAttribute>());
        provider.setWorkLocations(new ArrayList<WorkLocationAttribute>());
    }

    private static String convertLongToString(Long longToConvert) {
        if (longToConvert == null) {
            return null;
        }
        return String.valueOf(longToConvert);
    }

    public static Collection<AcknowledgementEntity> convertAcknowledgements(Collection<Acknowledgment> acknowledgements) {
        Collection<AcknowledgementEntity> acknowledgementEntities = new ArrayList<>();
        for (Acknowledgment acknowledgement : acknowledgements) {
            acknowledgementEntities.add(convertToAcknowledgementEntity(acknowledgement));
        }
        return acknowledgementEntities;
    }

    private static AcknowledgementEntity convertToAcknowledgementEntity(Acknowledgment acknowledgement) {
        AcknowledgementEntity acknowledgementEntity = new AcknowledgementEntity();
        acknowledgementEntity.setTypeCode(acknowledgement.getTypeCode());
        acknowledgementEntity.setText(acknowledgement.getMsgText());
        acknowledgementEntity.setCode(acknowledgement.getMsgCode());
        acknowledgementEntity.setTargetMessageID(acknowledgement.getTargetMessageID());
        acknowledgementEntity.setMessagesWaitingNumber(acknowledgement.getMessagesWaitingNumber());
        return acknowledgementEntity;
    }

}
