/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir;

import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ConditionsDto;
import ca.bc.gov.health.plr.dto.provider.esb.ConfidentialityIndicatorDto;
import ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DisciplinaryActionDto;
import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.NoteDto;
import ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.*;
import ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils;
import ca.uhn.fhir.parser.DataFormatException;
import ca.uhn.fhir.validation.SingleValidationMessage;
import ca.uhn.fhir.validation.ValidationResult;
import java.io.Serializable;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Class for mapping components between PLR Individual Provider and FHIR
 * BCPractitioner profile resource.
 *
 * @author dan.stepanov
 */
public class MapIndivProviderToBCPractitionerFhir implements ProviderFhirConstants, Serializable {

    private static final String CLASSNAME = MapIndivProviderToBCPractitionerFhir.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    ProviderDetails indivProviderDetails = new ProviderDetails();

    // provider notes/address/demographics
    List<NoteDto> providerNotes = new ArrayList<>();
    List<AddressDto> providerAddress = indivProviderDetails.getAddresses();
    List<DemographicDetailsDto> providerDemographicDetails = indivProviderDetails.getDemographicDetails();
    List<PersonNameDto> indProviderNames = indivProviderDetails.getIndNames();
    List<CollegeIdentifierDto> collegeIdentifiers = indivProviderDetails.getIdentifiers();
    List<ExpertiseDto> indivProviderExpertise = indivProviderDetails.getExpertise();
    List<CredentialsDto> indivProviderCredentials = indivProviderDetails.getCredentials();
    List<DisciplinaryActionDto> providerDisciplinaryActions = indivProviderDetails.getDisciplinaryActions();
    List<ConditionsDto> indivProviderConditions = indivProviderDetails.getConditions();
    List<ConfidentialityIndicatorDto> indivProviderConfidentialities = indivProviderDetails.getConfidentialityIndicators();
    List<ProviderRelationshipDto> indivProviderRelationships = indivProviderDetails.getProviderRelationships();

    private static final SimpleDateFormat QUALIF_DATE_FORMAT_OJDK11 = new SimpleDateFormat("yyyy");

    static {
        QUALIF_DATE_FORMAT_OJDK11.setLenient(false);
    }

    public static void addProviderNameToBCPractitioner(FHIRFactory factory, List<PersonNameDto> indProviderNames, Object bcPractitionerFhir) {

        List<Object> bcNamesFhir = new ArrayList<>();
        if (!indProviderNames.isEmpty()) {

            for (PersonNameDto providerNameDto : indProviderNames) {

                // create human name types for FHIR model
                Object bcPractitionerNameFhir = factory.newBCHumanName();

                commonBCHumanName(factory, bcNamesFhir, bcPractitionerNameFhir, providerNameDto, factory.newPeriod(), providerNameDto.getTypeCode());

            }

            // SetPractitionerAttributes w/names
            for (Object pracName : bcNamesFhir) {
                factory.getSetPractitionerAttributes().setPractitionerHumanName(bcPractitionerFhir, pracName);
            }

            // json parse encoded BcPractitioner
            String jsonParsedBCPractitionerFhir = factory.parseEncodedBcPractitioner(bcPractitionerFhir);

//            LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir addProviderNameToBCPractitioner jsonParsedBCPractitionerFhir: {0}.",
//                    new Object[]{jsonParsedBCPractitionerFhir});
            // validate new BCPractitioner resource w/name structure
            Object fhirValidator = factory.initializeFhirValidator();
            validateBcPractitionerFhir(factory, fhirValidator, jsonParsedBCPractitionerFhir);
        }
    }

    public static void addProviderIdentifiersToBCPractitioner(FHIRFactory factory, List<CollegeIdentifierDto> collegeIdentifiers, Object bcPractitionerFhir) {

        List<Object> bcIdentifiersProviderFhir = new ArrayList<>();
        if (!collegeIdentifiers.isEmpty()) {

            for (CollegeIdentifierDto providerIdentifierDto : collegeIdentifiers) {

                // create provider identifier types for FHIR model
                Object bcPractitionerIdentifierFhir = factory.newBCIdentifier();

                if (!providerIdentifierDto.getTypeCode().isEmpty() && !providerIdentifierDto.getTypeCode().equalsIgnoreCase(ORGANIZATION_IDENTIFIER_PLR)) {
                    commonBCIdentifier(factory, bcIdentifiersProviderFhir, bcPractitionerIdentifierFhir, providerIdentifierDto, factory.newPeriod(), factory.identifierTypeMapperPLRtoToFHIR(providerIdentifierDto.getTypeCode()));
                }
            }

            // SetPractitionerAttributes w/bc identifiers
            for (Object pracId : bcIdentifiersProviderFhir) {
                factory.getSetPractitionerAttributes().addPractitionerBCIdentifier(bcPractitionerFhir, pracId);
            }

            // json parse encoded BcPractitioner
            String jsonParsedBCPractitionerFhir = factory.parseEncodedBcPractitioner(bcPractitionerFhir);

//            LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir addProviderIdentifiersToBCPractitioner jsonParsedBCPractitionerFhir: {0}.",
//                    new Object[]{jsonParsedBCPractitionerFhir});
            // validate new BCPractitioner resource w/identifier structure
            Object fhirValidator = factory.initializeFhirValidator();
            validateBcPractitionerFhir(factory, fhirValidator, jsonParsedBCPractitionerFhir);
        }
    }

    public static void addProviderDemographicDetailsToBCPractitioner(FHIRFactory factory, List<DemographicDetailsDto> providerDemographicDetails, Object bcPractitionerFhir) {

//        bcPractitionerFhir = factory.newBCPractitioner();
        if (!providerDemographicDetails.isEmpty()) {

            for (DemographicDetailsDto providerDemographicDetailsDto : providerDemographicDetails) {

                // create BC BirthTime custom extensions FHIR model and set dob
                if (providerDemographicDetailsDto.getBirthDate() != null) {
                    factory.getSetPractitionerAttributes().setPractitionerBirthTime(bcPractitionerFhir, providerDemographicDetailsDto.getBirthDate());
                }

                // create BC death date custom extensions FHIR model and set deathdate
                if (providerDemographicDetailsDto.getDeathDate() != null) {
                    factory.getSetPractitionerAttributes().setPractitionerDeathDate(bcPractitionerFhir, providerDemographicDetailsDto.getDeathDate());
                }

                // set gender values w/genderCodeMapper in FHIR factory model
                if (providerDemographicDetailsDto.getTypeCode() != null) {
                    factory.getSetPractitionerAttributes().setPractitionerGender(bcPractitionerFhir, factory.genderMapperPLRDtoToFHIR(providerDemographicDetailsDto.getTypeCode()));
                }

                // create BC birthplace custom extension FHIR model
                // get birthplace prov state/country values from the providerDemographicDetailsDto and setBC birthplace custom extension string type values
                Object birthplaceAddress = factory.newAddress();
                if (providerDemographicDetailsDto.getBirthProvState() != null && !providerDemographicDetailsDto.getBirthProvState().isEmpty()) {
                    factory.getSetAddressAttributes().setAddressProvOrState(birthplaceAddress, providerDemographicDetailsDto.getBirthProvState());
                }
                if (providerDemographicDetailsDto.getBirthCountry() != null && !providerDemographicDetailsDto.getBirthCountry().isEmpty()) {
                    factory.getSetAddressAttributes().setAddressCountry(birthplaceAddress, providerDemographicDetailsDto.getBirthCountry());
                }
                factory.getSetPractitionerAttributes().setPractitionerBirthplaceAddress(bcPractitionerFhir, birthplaceAddress);

                // add new End reason code and owner code
                factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(bcPractitionerFhir, providerDemographicDetailsDto.getEndReasonCode(), providerDemographicDetailsDto.getDataOwnerCode());

                // effective dates
                factory.getSetPractitionerAttributes().addPractitionerBCPeriod(bcPractitionerFhir, providerDemographicDetailsDto.getEffectiveStartDate(), providerDemographicDetailsDto.getEffectiveEndDate());

                // json parse encoded BcPractitioner(
                String jsonParsedBCPractitionerFhir = factory.parseEncodedBcPractitioner(bcPractitionerFhir);

                LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir addProviderDemographicDetailsToBCPractitioner jsonParsedBCPractitionerFhir: {0}.",
                        new Object[]{jsonParsedBCPractitionerFhir});
                // validate new BCPractitioner resource w/demographic structure
                Object fhirValidator = factory.initializeFhirValidator();
                validateBcPractitionerFhir(factory, fhirValidator, jsonParsedBCPractitionerFhir);
            }
        }
    }

    public static void addProviderAddressToBCPractitioner(FHIRFactory factory, List<AddressDto> providerAddress, Object bcPractitionerFhir) {

        List<Object> bcAddressFhir = new ArrayList<>();
        if (!providerAddress.isEmpty()) {

            for (AddressDto providerAddressDto : providerAddress) {

                // create address types for FHIR model
                Object bcPractitionerAddressFhir = factory.newBCAddress();

                commonBCAddress(factory, bcAddressFhir, bcPractitionerAddressFhir, providerAddressDto, factory.newPeriod(), factory.addressTypeMapperPLRtoToFHIR(providerAddressDto.getTypeCode()));

            }

            // SetPractitionerAttributes w/address mail/physical and purpose codes will need extensions
            for (Object pracAddress : bcAddressFhir) {
                factory.getSetPractitionerAttributes().setPractitionerBCAddress(bcPractitionerFhir, pracAddress);
            }

            // json parse encoded BcPractitioner
            String jsonParsedBCPractitionerFhir = factory.parseEncodedBcPractitioner(bcPractitionerFhir);

//            LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir addProviderAddressToBCPractitionerAddress jsonParsedBCPractitionerFhir: {0}.",
//                    new Object[]{jsonParsedBCPractitionerFhir});
            // validate new BCPractitioner resource w/address structure
            Object fhirValidator = factory.initializeFhirValidator();
            validateBcPractitionerFhir(factory, fhirValidator, jsonParsedBCPractitionerFhir);
        }
    }

    public static void addProviderTelecomToBCPractitioner(FHIRFactory factory, List<TelecommunicationDto> providerTelecoms, Object bcPractitionerFhir) {
        List<Object> bcPractitionerTelecomsFhir = new ArrayList<>();

        if (!providerTelecoms.isEmpty()) {
            for (TelecommunicationDto providerTelecomDto : providerTelecoms) {

                // create telecom types for FHIR model
                Object bcPractitionerTelecomFhir = factory.newBCContactPoint();

                // telecom type code phone/fax/pager/modem
                commonTelecomBcContactPoint(factory, bcPractitionerTelecomsFhir, bcPractitionerTelecomFhir, providerTelecomDto, factory.newPeriod(), providerTelecomDto.getTypeCode());

            }
        }

        //add phone/fax/pager/mobile to BCPractitioner telecom list and set telecom list to FHIR BCPractitioner
        for (Object telecom : bcPractitionerTelecomsFhir) {
            factory.getSetPractitionerAttributes().setPractitionerTelecom(bcPractitionerFhir, telecom);
        }

        // json parse encoded BcPractitioner
        String jsonParsedBCPractitionerFhir = factory.parseEncodedBcPractitioner(bcPractitionerFhir);

        LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir addProviderTelecomToBCPractitioner jsonParsedBCPractitionerFhir: {0}.",
                new Object[]{jsonParsedBCPractitionerFhir});
        // validate new BCPractitioner resource w/telecom structure
        Object fhirValidator = factory.initializeFhirValidator();
        validateBcPractitionerFhir(factory, fhirValidator, jsonParsedBCPractitionerFhir);
    }

    private static void commonTelecomBcContactPoint(FHIRFactory factory, List<Object> pracTelecomsFhir, Object telecomFhir, TelecommunicationDto providerTelecomDto, Object fhirPeriodTelephone, String telecomContactSystem) {
        // get phone values from the TelecommunicationDto and set contact system point code
        factory.getSetContactPointAttributes().setContactPointSystem(telecomFhir, factory.telecomTypeMapperPLRDtoToFHIR(telecomContactSystem));

        // populate the three parts of the telephone in the contact point
        factory.getSetContactPointAttributes().setContactPointTelephone(telecomFhir, providerTelecomDto.getAreaCode(), providerTelecomDto.getNumber(), providerTelecomDto.getExtension());

        // add new End reason code and owner code
        factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(telecomFhir, providerTelecomDto.getEndReasonCode(), providerTelecomDto.getDataOwnerCode());

        // communication purpose codes from PLR mapped to BC extension for communication purpose codes i.e. MC/OC/BC
        if (providerTelecomDto.getCommunicationPurposeCode() != null && !providerTelecomDto.getCommunicationPurposeCode().isEmpty()) {
            Object cc = factory.newCodeableConcept();
            Object coding = factory.newCoding();
            factory.getSetCodingAttributes().setCodingSystem(coding, BC_COMM_PURPOSE_CODING_SYSTEM_LINK);
            factory.getSetCodingAttributes().setCodingCode(coding, providerTelecomDto.getCommunicationPurposeCode());
            factory.getSetCodeableConceptAttributes().setCoding(cc, coding);
            factory.getSetPurposeCodeAttributes().setPurposeCoding(telecomFhir, cc);
        }

        // set FHIR period start/end date w/effective start/end dates from telecom
        factory.getSetPeriodAttributes().addPeriod(telecomFhir, providerTelecomDto.getEffectiveStartDate(), providerTelecomDto.getEffectiveEndDate());

        pracTelecomsFhir.add(telecomFhir);
    }

    public static void addProviderElectronicAddressToBCPractitioner(FHIRFactory factory, List<ElectronicAddressDto> providerElectronicAddressDtos, Object bcPractitionerFhir) {

        List<Object> bcPracElectronicAddressTelecomsFhir = new ArrayList<>();

        if (!providerElectronicAddressDtos.isEmpty()) {

            for (ElectronicAddressDto providerElectronicAddressDto : providerElectronicAddressDtos) {

                // telecom type code email/ftp/http
                commonEAddressBcContactPoint(factory, bcPracElectronicAddressTelecomsFhir, factory.newBCContactPoint(), providerElectronicAddressDto, factory.newPeriod(), providerElectronicAddressDto.getTypeCode());

            }
        }

        // telecom purpose codes will need extensions for telecom specific email/ftp/http
        for (Object electronicAddress : bcPracElectronicAddressTelecomsFhir) {
            factory.getSetPractitionerAttributes().setPractitionerTelecom(bcPractitionerFhir, electronicAddress);
        }

        // json parse encoded BcPractitioner
        String jsonParsedBCPractitionerFhir = factory.parseEncodedBcPractitioner(bcPractitionerFhir);

        LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir addProviderElectronicAddressToBCPractitioner jsonParsedBCPractitionerFhir: {0}.",
                new Object[]{jsonParsedBCPractitionerFhir});
        // validate new BCPractitioner resource w/telecom structure
        Object fhirValidator = factory.initializeFhirValidator();
        validateBcPractitionerFhir(factory, fhirValidator, jsonParsedBCPractitionerFhir);
    }

    private static void commonEAddressBcContactPoint(FHIRFactory factory, List<Object> pracElectronicAddressTelecomsFhir, Object eAddrFhir, ElectronicAddressDto providerElectronicAddressDto, Object fhirPeriodEmail, String telecomContactSystem) {

        factory.getSetContactPointAttributes().setContactPointSystem(eAddrFhir, factory.telecomTypeMapperPLRDtoToFHIR(telecomContactSystem));

        // add new End reason code and owner code
        factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(eAddrFhir, providerElectronicAddressDto.getEndReasonCode(), providerElectronicAddressDto.getDataOwnerCode());

        // set email/ftp/http FHIR value
        if (providerElectronicAddressDto.getAddress() != null && !providerElectronicAddressDto.getAddress().isEmpty()) {
            factory.getSetContactPointAttributes().setContactPointValue(eAddrFhir, providerElectronicAddressDto.getAddress());
        }

        // communication purpose codes from PLR mapped to BC extension for communication purpose codes i.e. MC/OC/BC
        if (providerElectronicAddressDto.getCommunicationPurposeCode() != null && !providerElectronicAddressDto.getCommunicationPurposeCode().isEmpty()) {
            Object cc = factory.newCodeableConcept();
            Object coding = factory.newCoding();
            factory.getSetCodingAttributes().setCodingSystem(coding, BC_COMM_PURPOSE_CODING_SYSTEM_LINK);
            factory.getSetCodingAttributes().setCodingCode(coding, providerElectronicAddressDto.getCommunicationPurposeCode());
            factory.getSetCodeableConceptAttributes().setCoding(cc, coding);
            factory.getSetPurposeCodeAttributes().setPurposeCoding(eAddrFhir, cc);
        }

        // set FHIR period start/end date w/effective start/end dates from electronic address telecom
        factory.getSetPeriodAttributes().addPeriod(eAddrFhir, providerElectronicAddressDto.getEffectiveStartDate(), providerElectronicAddressDto.getEffectiveEndDate());

        pracElectronicAddressTelecomsFhir.add(eAddrFhir);
    }

    private static void commonBCAddress(FHIRFactory factory, List<Object> providerAddressFhir, Object bcAddressFhir, AddressDto providerAddressDto, Object fhirPeriodAddress, FHIRFactory.AddressType addressType) {

        factory.getSetAddressAttributes().setAddressType(bcAddressFhir, addressType);

        // set BC Full Address FHIR value
//        if (providerAddressDto.getFullAddress() != null && !providerAddressDto.getFullAddress().isEmpty()) {
//            factory.getSetAddressAttributes().setContactPointValue(bcAddressFhir, providerAddressDto.getFullAddress());
//        }
        factory.getSetAddressAttributes().setAddressCityStateCountry(bcAddressFhir, providerAddressDto.getCity(), providerAddressDto.getProvinceOrStateTxt(), providerAddressDto.getCountryCode());
        factory.getSetAddressAttributes().setAddressPostalCode(bcAddressFhir, providerAddressDto.getPostalCode());
        factory.getSetAddressAttributes().setAddressLines(bcAddressFhir, providerAddressDto.getAddressLineOne(), providerAddressDto.getAddressLineTwo(), providerAddressDto.getAddressLineThree());

        // set FHIR period start/end date w/effective start/end dates from address
        factory.getSetAddressAttributes().addAddressPeriod(bcAddressFhir, providerAddressDto.getEffectiveStartDate(), providerAddressDto.getEffectiveEndDate());

        // communication purpose codes from PLR mapped to BC extension for communication purpose codes i.e. MC/OC/BC
        if (providerAddressDto.getCommunicationPurposeCode() != null && !providerAddressDto.getCommunicationPurposeCode().isEmpty()) {
            Object cc = factory.newCodeableConcept();
            Object coding = factory.newCoding();
            factory.getSetCodingAttributes().setCodingSystem(coding, BC_COMM_PURPOSE_CODING_SYSTEM_LINK);
            factory.getSetCodingAttributes().setCodingCode(coding, providerAddressDto.getCommunicationPurposeCode());
            factory.getSetCodeableConceptAttributes().setCoding(cc, coding);
//            factory.getSetCodeableConceptAttributes().setCodeableConceptText(cc, providerAddressDto.getCommunicationPurposeCode());
            factory.getSetPurposeCodeAttributes().setPurposeCoding(bcAddressFhir, cc);
//            factory.getSetAddressAttributes().setAddressPurposeCode(bcAddressFhir, bcPurposeCodeExtension);
        }
        factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(bcAddressFhir, providerAddressDto.getEndReasonCode(), providerAddressDto.getDataOwnerCode());

        providerAddressFhir.add(bcAddressFhir);
    }

    private static void commonBCHumanName(FHIRFactory factory, List<Object> providerNameFhir, Object bcNameFhir, PersonNameDto personNameDto, Object fhirPeriodName, String nameUse) {

        factory.getSetNameAttributes().setNameUse(bcNameFhir, factory.nameTypeMapperPLRtoToFHIR(nameUse));

        // set family/given/full names and prefix/suffix
        if (personNameDto.getLastName() != null && !personNameDto.getLastName().isEmpty()) {
            factory.getSetNameAttributes().setNameFamily(bcNameFhir, personNameDto.getLastName());
        }
        factory.getSetNameAttributes().setNameGiven(bcNameFhir, personNameDto.getFirstName(), personNameDto.getSecondName(), personNameDto.getThirdName());
        if (personNameDto.getPrefix() != null && !personNameDto.getPrefix().isEmpty()) {
            factory.getSetNameAttributes().setNamePrefix(bcNameFhir, personNameDto.getPrefix());
        }
        if (personNameDto.getSuffix() != null && !personNameDto.getSuffix().isEmpty()) {
            factory.getSetNameAttributes().setNameSuffix(bcNameFhir, personNameDto.getSuffix());
        }

        // set FHIR period start/end date w/effective start/end dates from person name
        factory.getSetNameAttributes().setNamePeriod(bcNameFhir, personNameDto.getEffectiveStartDate(), personNameDto.getEffectiveEndDate());

        factory.getSetNameAttributes().setNameERCOwner(bcNameFhir, personNameDto.getEndReasonCode(), personNameDto.getDataOwnerCode());

        providerNameFhir.add(bcNameFhir);
    }

    private static void commonBCIdentifier(FHIRFactory factory, List<Object> providerIdentifierFhir, Object bcPracIdentifierFhir, CollegeIdentifierDto collegeIdentifierDto, Object fhirPeriodName, FHIRFactory.IdentifierUse identifUse) {

        factory.getSetIdentifierAttributes().setIdentifierUse(bcPracIdentifierFhir, identifUse);

        // set the identifier
        factory.getSetIdentifierAttributes().addBCIdentifierTypeResource(bcPracIdentifierFhir, collegeIdentifierDto.getTypeCode(), collegeIdentifierDto.getIdentifier(), collegeIdentifierDto.getEffectiveStartDate(), collegeIdentifierDto.getEffectiveEndDate());

        // owner and erc
        factory.getSetIdentifierAttributes().setIdentifierERCOwner(bcPracIdentifierFhir, collegeIdentifierDto.getEndReasonCode(), collegeIdentifierDto.getDataOwnerCode());

        providerIdentifierFhir.add(bcPracIdentifierFhir);
    }

    public static void addProviderNotesToBCPractitioner(FHIRFactory factory, List<NoteDto> providerNotes, Object bcPractitionerFhir) {

//        providerNotes = getProviderNotes();
        if (!providerNotes.isEmpty()) {

            for (NoteDto providerNoteDto : providerNotes) {

                // create BC Note custom extensions FHIR model
                Object bcNoteExtFhir = factory.newBCNoteExtension();

                // create BC Note custom text extension FHIR model
                // get note text values from the facilityNoteDto and set BC note text custom extension string type values
                if (providerNoteDto.getNoteText() != null && !providerNoteDto.getNoteText().isEmpty()) {
                    factory.getSetNoteAttributes().setNoteText(bcNoteExtFhir, providerNoteDto.getNoteText());
                }

                // get note identifier values from the providerNoteDto and set BC note identifier custom extension Identifier type values
                //Identifier identifierTypeNote = new Identifier();
                Object identifierTypeNote = factory.newIdentifier();
//                factory.getSetIdentifierAttributes().setIdentifierUse(identifierTypeNote, FHIRFactory.IdentifierUse.USUAL); // might remove IdentifierUse and instead set Identifier id/system TODO
                factory.getSetIdentifierAttributes().setIdentifierValue(identifierTypeNote, providerNoteDto.getIdentifier());
                factory.getSetIdentifierAttributes().setIdentifierSystem(identifierTypeNote, ProviderFhirConstants.BC_NOTE_CODING_SYSTEM_LINK);

                factory.getSetNoteAttributes().setNoteIdentifier(bcNoteExtFhir, identifierTypeNote);

                // get period time for BC Note extension
                factory.getSetPeriodAttributes().addPeriod(bcNoteExtFhir, providerNoteDto.getEffectiveStartDate(), providerNoteDto.getEffectiveEndDate());

                // add new End reason code and owner code
                factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(bcNoteExtFhir, providerNoteDto.getEndReasonCode(), providerNoteDto.getDataOwnerCode());

                factory.getSetPractitionerAttributes().setPractitionerNote(bcPractitionerFhir, bcNoteExtFhir);

                // json parse encoded BcPractitioner(
                String jsonParsedBCPractitionerFhir = factory.parseEncodedBcPractitioner(bcPractitionerFhir);

                LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir addProviderNotesToBCPractitioner jsonParsedBCPractitionerFhir: {0}.",
                        new Object[]{jsonParsedBCPractitionerFhir});
                // validate new BCPractitioner resource w/note structure
                Object fhirValidator = factory.initializeFhirValidator();
                validateBcPractitionerFhir(factory, fhirValidator, jsonParsedBCPractitionerFhir);
            }
        }
    }

    public static void addProviderLicenseStatusToBCPractitioner(FHIRFactory factory, List<StatusDto> providerStatus, Object bcPractitionerFhir) {

//        bcPractitionerFhir = factory.newBCPractitioner();
        if (!providerStatus.isEmpty()) {

            for (StatusDto providerStatusDto : providerStatus) {

                // create BC LicenseStatus (ACTIVE/SUSPENDED/TERMINATED/..) custom extensions FHIR model
                Object bcLicenseStatusExtFhir = factory.newBCLicenseStatus();

                // create BC LicenseStatus custom extensions FHIR model and set status/reason/class codes
                if (providerStatusDto.getTypeCode() != null) {
                    Object ccStatusCode = factory.newCodeableConcept();
                    Object licenceStatusCodeCoding = factory.newCoding();
                    // setCodingSystem
                    factory.getSetCodingAttributes().setCodingSystem(licenceStatusCodeCoding, BC_LICENSE_STATUS_CODE_CODING_SYSTEM_LINK);
                    // setCodingCode
                    factory.getSetCodingAttributes().setCodingCode(licenceStatusCodeCoding, providerStatusDto.getTypeCode());
                    factory.getSetCodeableConceptAttributes().setCoding(ccStatusCode, licenceStatusCodeCoding);
                    // set codeable concept
                    factory.getSetLicenseStatusAttributes().setLicenseStatusCode(bcLicenseStatusExtFhir, ccStatusCode);
                }

                if (providerStatusDto.getReasonCode() != null) {
                    Object ccReasonCode = factory.newCodeableConcept();
                    Object licenceReasonCodeCoding = factory.newCoding();
                    // setCodingSystem
                    factory.getSetCodingAttributes().setCodingSystem(licenceReasonCodeCoding, BC_LICENSE_STATUS_REASON_CODE_CODING_SYSTEM_LINK);
                    // setCodingCode
                    factory.getSetCodingAttributes().setCodingCode(licenceReasonCodeCoding, providerStatusDto.getReasonCode());
                    factory.getSetCodeableConceptAttributes().setCoding(ccReasonCode, licenceReasonCodeCoding);
                    // set codeable concept
                    factory.getSetLicenseStatusAttributes().setLicenseStatusReasonCode(bcLicenseStatusExtFhir, ccReasonCode);
                }

                if (providerStatusDto.getClassCode() != null) {
                    Object ccClassCode = factory.newCodeableConcept();
                    Object licenceClassCodeCoding = factory.newCoding();
                    // setCodingSystem
                    factory.getSetCodingAttributes().setCodingSystem(licenceClassCodeCoding, BC_LICENSE_STATUS_CLASS_CODE_CODING_SYSTEM_LINK);
                    // setCodingCode
                    factory.getSetCodingAttributes().setCodingCode(licenceClassCodeCoding, providerStatusDto.getClassCode());
                    factory.getSetCodeableConceptAttributes().setCoding(ccClassCode, licenceClassCodeCoding);
                    // set codeable concept                   
                    factory.getSetLicenseStatusAttributes().setLicenseStatusClassCode(bcLicenseStatusExtFhir, ccClassCode);
                }

                // add new End reason code and owner code
                factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(bcLicenseStatusExtFhir, providerStatusDto.getEndReasonCode(), providerStatusDto.getDataOwnerCode());

                // effective dates
                factory.getSetPeriodAttributes().addPeriod(bcLicenseStatusExtFhir, providerStatusDto.getEffectiveStartDate(), providerStatusDto.getEffectiveEndDate());

                // set BC Practitioner w/bcLicenseStatusExtension FHIR
                factory.getSetPractitionerAttributes().setPractitionerLicenseStatus(bcPractitionerFhir, bcLicenseStatusExtFhir);

                // json parse encoded BcPractitioner
                String jsonParsedBCPractitionerFhir = factory.parseEncodedBcPractitioner(bcPractitionerFhir);

                LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir addProviderLicenseStatusToBCPractitioner jsonParsedBCPractitionerFhir: {0}.",
                        new Object[]{jsonParsedBCPractitionerFhir});
                // validate new BCPractitioner resource w/LicenseStatus structure
                Object fhirValidator = factory.initializeFhirValidator();
                validateBcPractitionerFhir(factory, fhirValidator, jsonParsedBCPractitionerFhir);
            }
        }
    }

    public static void addProviderExpertiseLangToBCPractitionerComm(FHIRFactory factory, List<ExpertiseDto> indivProviderExpertise, Object bcPractitionerFhir) {

//        bcPractitionerFhir = factory.newBCPractitioner();
        if (!indivProviderExpertise.isEmpty()) {

            for (ExpertiseDto providerExpertiseLangDto : indivProviderExpertise) {

                // get Communication language components for each expertise from individ provider values from the ExpertiseDto
                if (providerExpertiseLangDto.getRoleTypeCode() != null && providerExpertiseLangDto.getRoleTypeCode().equalsIgnoreCase(EXPERTISE_LANGUAGE_CODE)) {

                    // create new BC communication FHIR model
                    Object bcCommCodeableConceptFhir = factory.newBCCommunicationCodeableConcept();

                    // create BC Expertise custom fields FHIR model
                    // get expertise lang values from the ExpertiseDto and set BC SpecialtyCodeableConcept custom coding type code values
                    if (providerExpertiseLangDto.getTypeCode() != null && !providerExpertiseLangDto.getTypeCode().isEmpty()) {
                        Object coding = factory.newCoding();
                        factory.getSetCodingAttributes().setCodingCode(coding, providerExpertiseLangDto.getTypeCode());
                        factory.getSetCodingAttributes().setCodingSystem(coding, ProviderFhirConstants.BC_PRACTITIONER_COMM_LANG_CODING_SYSTEM_LINK);

                        factory.getSetCodeableConceptAttributes().setCoding(bcCommCodeableConceptFhir, coding);
                    }

                    // get period time for BC Specialty CodeableConcept
                    factory.getSetPeriodAttributes().addPeriod(bcCommCodeableConceptFhir, providerExpertiseLangDto.getEffectiveStartDate(), providerExpertiseLangDto.getEffectiveEndDate());

                    // add new End reason code and owner code
                    factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(bcCommCodeableConceptFhir, providerExpertiseLangDto.getEndReasonCode(), providerExpertiseLangDto.getDataOwnerCode());

                    // get expertise source values from the ExpertiseDto and set BC SpecialtyCodeableConcept custom extension Identifier type values
                    // set BC SpecialtySource extension
                    if (providerExpertiseLangDto.getSourcesCode() != null && !providerExpertiseLangDto.getSourcesCode().isEmpty()) {
                        factory.getSetSpecialtyCodeableConceptAttributes().setExpertiseSource(bcCommCodeableConceptFhir, providerExpertiseLangDto.getSourcesCode());
                    }

                    factory.getSetPractitionerAttributes().setPractitionerCommunication(bcPractitionerFhir, bcCommCodeableConceptFhir);

                    // json parse encoded BcPractitioner
                    String jsonParsedBCPractitionerFhir = factory.parseEncodedBcPractitioner(bcPractitionerFhir);

                    LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir addProviderExpertiseLangToBCPractitionerComm jsonParsedBCPractitionerFhir: {0}.",
                            new Object[]{jsonParsedBCPractitionerFhir});
                    // validate new BCPractitioner resource w/expertise structure
                    Object fhirValidator = factory.initializeFhirValidator();
                    validateBcPractitionerFhir(factory, fhirValidator, jsonParsedBCPractitionerFhir);
                }
            }
        }
    }

    public static void addProviderActiveStatusToBCPractitioner(FHIRFactory factory, ProviderDetails indivProviderDetails, Object bcPractitionerFhir) {

//        bcPractitionerFhir = factory.newBCPractitioner();
        if (indivProviderDetails != null) {
            // set BC Practitioner w/active status flag = true in FHIR
            factory.getSetPractitionerAttributes().setPractitionerActiveStatus(bcPractitionerFhir, true);

            // json parse encoded BcPractitioner
            String jsonParsedBCPractitionerFhir = factory.parseEncodedBcPractitioner(bcPractitionerFhir);

//            LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir addProviderActiveStatusToBCPractitioner jsonParsedBCPractitionerFhir: {0}.",
//                    new Object[]{jsonParsedBCPractitionerFhir});
            // validate new BCPractitioner resource w/active status structure
            Object fhirValidator = factory.initializeFhirValidator();
            validateBcPractitionerFhir(factory, fhirValidator, jsonParsedBCPractitionerFhir);
        }
    }

    public static void addProviderCredentialToBCPractitionerQualif(FHIRFactory factory, List<CredentialsDto> indivProviderCredentials, Object bcPractitionerFhir) {

//        bcPractitionerFhir = factory.newBCPractitioner();
        if (!indivProviderCredentials.isEmpty()) {

            int institutionCounter = 1;
            for (CredentialsDto credentialDto : indivProviderCredentials) {

                // get credential TypeCode components for each credentials from individ provider values from the CredentialsDto
                if (credentialDto.getTypeCode() != null && !credentialDto.getTypeCode().isEmpty()) {

                    // create BC Qualification FHIR model
//                    Object bcPracQualificationFhir = factory.newBCQualification();
                    Object bcPracQualificationFhir = factory.newBCPractitionerQualificationComponent();

                    // create BC Qualification custom fields FHIR model
                    // get credentials specific values from the CredentialsDto and set BCQualification custom code values
                    if (credentialDto.getTypeCode() != null && !credentialDto.getTypeCode().isEmpty()) {

                        Object cc = factory.newCodeableConcept();
                        Object coding = factory.newCoding();
                        factory.getSetCodingAttributes().setCodingCode(coding, credentialDto.getTypeCode());
                        factory.getSetCodingAttributes().setCodingSystem(coding, ProviderFhirConstants.BC_PRACTITIONER_QUALIF_CODE_CODING_SYSTEM_LINK);

                        factory.getSetCodeableConceptAttributes().setCoding(cc, coding);

                        factory.getSetQualificationAttributes().setQualificationTypeCode(bcPracQualificationFhir, cc);
                    }

                    // get designation/registration number/equivalency flag/year for for BC Qualification extension
                    Object bcQualificationExtension = factory.newBCPractitionerQualificationExtension();
                    // set BC Qualification extension
                    if (credentialDto.getDesignation() != null && !credentialDto.getDesignation().isEmpty()) {
                        factory.getSetPracQualifExtAttributes().setQualification_Designation(bcQualificationExtension, credentialDto.getDesignation());
                    }
                    if (credentialDto.getRegistrationNumber() != null && !credentialDto.getRegistrationNumber().isEmpty()) {
                        factory.getSetPracQualifExtAttributes().setQualification_RegistrationNumber(bcQualificationExtension, credentialDto.getRegistrationNumber());
                    }
                    if (credentialDto.getYearIssued() != null) {
                        // convert year issued to date
                        Date year = ConverterUtils.convertStringToDate(credentialDto.getYearIssued(), QUALIF_DATE_FORMAT_OJDK11);
                        factory.getSetPracQualifExtAttributes().setQualification_YearIssued(bcQualificationExtension, year);
                    }
                    factory.getSetPracQualifExtAttributes().setQualification_EquivalencyFlag(bcQualificationExtension, credentialDto.isEquivalencyFlag());
                    // set BC Qualification extension
                    factory.getSetQualificationAttributes().setQualificationExtension(bcPracQualificationFhir, bcQualificationExtension);

                    // get period time for BC Qualification
                    factory.getSetPeriodAttributes().addPeriod(bcPracQualificationFhir, credentialDto.getEffectiveStartDate(), credentialDto.getEffectiveEndDate());

                    factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(bcPracQualificationFhir, credentialDto.getEndReasonCode(), credentialDto.getDataOwnerCode());

                    // add Qualification extension to BC Practitioner                   
//                    factory.getSetPractitionerAttributes().setPractitionerQualificationOrganization(bcPractitionerFhir, bcPracQualificationFhir);
                    // granting institution/REference /BCOrganization/address
                    Object qualificationOrganization = factory.newBCOrganization();
                    // add Granting Institution to org name
                    if (credentialDto.getGrantingInstitution() != null && !credentialDto.getGrantingInstitution().isEmpty()) {
                        Object bcOrgNameFhir = factory.newBCName();
                        factory.getSetNameAttributes().setNameValue(bcOrgNameFhir, credentialDto.getGrantingInstitution());
                        factory.getSetOrganizationAttributes().setOrganizationName(qualificationOrganization, bcOrgNameFhir);
                    }
                    // add org address
                    // create address types for FHIR model
                    Object bcOrgAddressFhir = factory.newBCAddress();
                    factory.getSetAddressAttributes().setAddressCityStateCountry(bcOrgAddressFhir, credentialDto.getInstitutionCity(), credentialDto.getInstitutionProvStateCode(), credentialDto.getInstitutionCountryCode());
                    factory.getSetOrganizationAttributes().setOrganizationAddress(qualificationOrganization, bcOrgAddressFhir);
                    // generate the ID to link the grantingInstitution with the contained resource type BCOrganization record eg grantingInstitution-institutionCounter#
                    String grantInstitution = "grantingInstitution-" + institutionCounter;
                    institutionCounter++;
                    factory.getSetOrganizationAttributes().setOrganizationId(qualificationOrganization, grantInstitution);
                    factory.getSetOrganizationAttributes().setOrganizationResourceType(bcPractitionerFhir, qualificationOrganization);
                    // then add qualificationOrganization to Practitioner.contained
//                    factory.getSetPractitionerAttributes().setPractitionerQualificationOrganization(bcPractitionerFhir, bcPracQualificationFhir);

                    Object qualifIssuerReference = factory.newReference();
                    // set issuer.reference id to above e.g #grantingInstitution-institutionCounter#
                    String grantInstitutionRef = "#" + grantInstitution;
                    factory.getSetReferenceAttributes().setReferenceValue(qualifIssuerReference, grantInstitutionRef);

                    // set Qualification Issuer w/reference
//                    Object bcPracQualificationIssuerFhir = factory.newBCPractitionerQualificationComponent();
                    factory.getSetQualificationAttributes().setQualificationIssuer(bcPracQualificationFhir, qualifIssuerReference);
                    // then add Qualification issuer to Practitioner                   
//                    factory.getSetPractitionerAttributes().setPractitionerQualificationIssuer(bcPractitionerFhir, bcPracQualificationFhir);
                    factory.getSetPractitionerAttributes().setPractitionerQualification(bcPractitionerFhir, bcPracQualificationFhir);

                    // json parse encoded BcPractitioner
                    String jsonParsedBCPractitionerFhir = factory.parseEncodedBcPractitioner(bcPractitionerFhir);

//                    LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir addProviderCredentialToBCPractitionerQualif jsonParsedBCPractitionerFhir: {0}.",
//                            new Object[]{jsonParsedBCPractitionerFhir});
                    // validate new BCPractitioner resource w/qualification structure
                    Object fhirValidator = factory.initializeFhirValidator();
                    validateBcPractitionerFhir(factory, fhirValidator, jsonParsedBCPractitionerFhir);
                }
            }
        }
    }

    public static void addProviderDisciplinaryActionToBCPractitioner(FHIRFactory factory, List<DisciplinaryActionDto> providerDisciplinaryActions, Object bcPractitionerFhir) {

        if (!providerDisciplinaryActions.isEmpty()) {

            for (DisciplinaryActionDto providerDisciplinaryActionDto : providerDisciplinaryActions) {

                // create BC Disciplinary Action custom extensions FHIR model
                Object bcDisciplinaryActionExtFhir = factory.newDisciplinaryAction();

                // create BC Disciplinary Action custom description extension FHIR model
                // get Disciplinary description values from the providerDisciplinaryActionDto and set BC DisciplinaryAction description custom extension string type values
                if (providerDisciplinaryActionDto.getDescription() != null && !providerDisciplinaryActionDto.getDescription().isEmpty()) {
                    factory.getSetDisciplinaryActionAttributes().setDisciplinaryDescription(bcDisciplinaryActionExtFhir, providerDisciplinaryActionDto.getDescription());
                }
                // get Disciplinary identifier values from the providerDisciplinaryActionDto and set BC Disciplinary  identifier custom extension Identifier type values
                Object identifierTypeDisciplinaryAction = factory.newIdentifier();
                if (providerDisciplinaryActionDto.getIdentifier() != null && !providerDisciplinaryActionDto.getIdentifier().isEmpty()) {
                    factory.getSetIdentifierAttributes().setIdentifierValue(identifierTypeDisciplinaryAction, providerDisciplinaryActionDto.getIdentifier());
                }
                factory.getSetIdentifierAttributes().setIdentifierSystem(identifierTypeDisciplinaryAction, ProviderFhirConstants.BC_DISCIPLINARY_ACTION_CODING_SYSTEM_LINK);

                factory.getSetDisciplinaryActionAttributes().setDisciplinaryIdentifier(bcDisciplinaryActionExtFhir, identifierTypeDisciplinaryAction);

                // get period time for BC Disciplinary extension
                factory.getSetPeriodAttributes().addPeriod(bcDisciplinaryActionExtFhir, providerDisciplinaryActionDto.getEffectiveStartDate(), providerDisciplinaryActionDto.getEffectiveEndDate());

                // add new End reason code and owner code
                factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(bcDisciplinaryActionExtFhir, providerDisciplinaryActionDto.getEndReasonCode(), providerDisciplinaryActionDto.getDataOwnerCode());

                // set display flag
                factory.getSetDisciplinaryActionAttributes().setDisplayFlag(bcDisciplinaryActionExtFhir, providerDisciplinaryActionDto.isDisplayFlag());

                // set archive date
                factory.getSetDisciplinaryActionAttributes().setDisciplinaryArchiveDate(bcDisciplinaryActionExtFhir, providerDisciplinaryActionDto.getArchiveDate());

                factory.getSetPractitionerAttributes().setPractitionerDisciplinaryAction(bcPractitionerFhir, bcDisciplinaryActionExtFhir);

                // json parse encoded BcPractitioner(
                String jsonParsedBCPractitionerFhir = factory.parseEncodedBcPractitioner(bcPractitionerFhir);

                LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir addProviderDisciplinaryActionToBCPractitioner jsonParsedBCPractitionerFhir: {0}.",
                        new Object[]{jsonParsedBCPractitionerFhir});
                // validate new BCPractitioner resource w/disciplinary structure
                Object fhirValidator = factory.initializeFhirValidator();
                validateBcPractitionerFhir(factory, fhirValidator, jsonParsedBCPractitionerFhir);
            }
        }
    }

    public static void addProviderConditionToBCPractitioner(FHIRFactory factory, List<ConditionsDto> indivProviderConditions, Object bcPractitionerFhir) {

        if (!indivProviderConditions.isEmpty()) {

            for (ConditionsDto providerConditionDto : indivProviderConditions) {

                // create BC Prac Conditions custom extensions FHIR model
                Object bcConditionExtFhir = factory.newBCConditionExtension();

                // create BC Condition custom restriction text extension FHIR model
                // get getRestriction Explanation Text values from the providerConditionDto and set BC Condition Restriction custom extension string type values
                factory.getSetConditionAttributes().setConditionRestrictionText(bcConditionExtFhir, providerConditionDto.getRestrictionExplanationText());

                // get Condition identifier values from the providerConditionDto and set BC Condition identifier custom extension Identifier type values
                Object identifierTypeCondition = factory.newIdentifier();
                if (providerConditionDto.getIdentifier() != null && !providerConditionDto.getIdentifier().isEmpty()) {
                    factory.getSetIdentifierAttributes().setIdentifierValue(identifierTypeCondition, providerConditionDto.getIdentifier());
                }

//                factory.getSetIdentifierAttributes().setIdentifierSystem(identifierTypeCondition, ProviderFhirConstants.BC_CONDITION_CODING_SYSTEM_LINK);
                factory.getSetConditionAttributes().setConditionIdentifier(bcConditionExtFhir, identifierTypeCondition);

                // get period time for BC Condition extension
                factory.getSetPeriodAttributes().addPeriod(bcConditionExtFhir, providerConditionDto.getEffectiveStartDate(), providerConditionDto.getEffectiveEndDate());

                // add new End reason code and owner code
                factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(bcConditionExtFhir, providerConditionDto.getEndReasonCode(), providerConditionDto.getDataOwnerCode());

                // set restriction flag
                factory.getSetConditionAttributes().setConditionRestrictionFlag(bcConditionExtFhir, providerConditionDto.isRestrictionFlag());

                // create new codeable concept extensions FHIR model and set condition codes
                if (providerConditionDto.getTypeCode() != null) {
                    Object ccConditionCode = factory.newCodeableConcept();
                    Object conditionCodeCoding = factory.newCoding();
                    // setCodingSystem
                    factory.getSetCodingAttributes().setCodingSystem(conditionCodeCoding, BC_CONDITION_CODING_SYSTEM_LINK);
                    // setCodingCode
                    factory.getSetCodingAttributes().setCodingCode(conditionCodeCoding, providerConditionDto.getTypeCode());
                    factory.getSetCodeableConceptAttributes().setCoding(ccConditionCode, conditionCodeCoding);
                    // set codeable concept
                    factory.getSetConditionAttributes().setConditionCodeableConcept(bcConditionExtFhir, ccConditionCode);
                }

                factory.getSetPractitionerAttributes().setPractitionerCondition(bcPractitionerFhir, bcConditionExtFhir);

                // json parse encoded BcPractitioner(
                String jsonParsedBCPractitionerFhir = factory.parseEncodedBcPractitioner(bcPractitionerFhir);

                LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir addProviderConditionToBCPractitioner jsonParsedBCPractitionerFhir: {0}.",
                        new Object[]{jsonParsedBCPractitionerFhir});
                // validate new BCPractitioner resource w/disciplinary structure
                Object fhirValidator = factory.initializeFhirValidator();
                validateBcPractitionerFhir(factory, fhirValidator, jsonParsedBCPractitionerFhir);
            }
        }
    }

    public static void addProviderConfidentialityToBCPractitioner(FHIRFactory factory, List<ConfidentialityIndicatorDto> indivProviderConfidentialities, Object bcPractitionerFhir) {

        if (!indivProviderConfidentialities.isEmpty()) {

            for (ConfidentialityIndicatorDto providerConfidentialityDto : indivProviderConfidentialities) {

                // create BC Prac Confidentiality custom extensions FHIR model
                Object bcConfidentialityExtFhir = factory.newBCConfidentialityExtension();

                // create BC Confidentiality custom restriction text extension FHIR model
                // get period time for BC Confidentiality extension
                factory.getSetPeriodAttributes().addPeriod(bcConfidentialityExtFhir, providerConfidentialityDto.getEffectiveStartDate(), providerConfidentialityDto.getEffectiveEndDate());

                // add new End reason code and owner code
                factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(bcConfidentialityExtFhir, providerConfidentialityDto.getEndReasonCode(), providerConfidentialityDto.getDataOwnerCode());

                // create new codeable concept extensions FHIR model and set confidentiality codes
//                if (providerConfidentialityDto.getTypeCode() != null) {
                Object ccConditionCode = factory.newCodeableConcept();
                Object conditionCodeCoding = factory.newCoding();
                // setCodingSystem
                factory.getSetCodingAttributes().setCodingSystem(conditionCodeCoding, CONFIDENTIALITY_CODING_SYSTEM_LINK);
                // setCodingCode for confidentiality to N/R 
                factory.getSetCodingAttributes().setCodingCode(conditionCodeCoding, factory.confidentialityMapperPLRDtoToFHIR(providerConfidentialityDto.isConfidential()));
                factory.getSetCodeableConceptAttributes().setCoding(ccConditionCode, conditionCodeCoding);
                // set codeable concept
                factory.getSetConfidentialityAttributes().setConfidentialityCodeableConcept(bcConfidentialityExtFhir, ccConditionCode);
//                }

                factory.getSetPractitionerAttributes().setPractitionerConfidentiality(bcPractitionerFhir, bcConfidentialityExtFhir);

                // json parse encoded BcPractitioner(
                String jsonParsedBCPractitionerFhir = factory.parseEncodedBcPractitioner(bcPractitionerFhir);

                LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir addProviderConfidentialityToBCPractitioner jsonParsedBCPractitionerFhir: {0}.",
                        new Object[]{jsonParsedBCPractitionerFhir});
                // validate new BCPractitioner resource w/disciplinary structure
                Object fhirValidator = factory.initializeFhirValidator();
                validateBcPractitionerFhir(factory, fhirValidator, jsonParsedBCPractitionerFhir);
            }
        }
    }

    public static void addProviderRelationshipToBCPractitioner(FHIRFactory factory, List<ProviderRelationshipDto> indivProviderRelationships, Object bcPractitionerFhir) {

        if (!indivProviderRelationships.isEmpty()) {

            for (ProviderRelationshipDto providerRelationshipDto : indivProviderRelationships) {

                if (!providerRelationshipDto.getIdentifierTypeCode().equalsIgnoreCase(ORGANIZATION_IDENTIFIER_PLR)) {

                    // create BC Practitioner to Practitioner Relationship custom extensions FHIR model
                    Object bcPractRelationshipExtFhir = factory.newBCPractitionerRelationshipExtension();

                    // create BC Practitioner Relationship custom extension FHIR model
                    // get period time for BC Practitioner Relationship extension
                    factory.getSetPeriodAttributes().addPeriod(bcPractRelationshipExtFhir, providerRelationshipDto.getEffectiveStartDate(), providerRelationshipDto.getEffectiveEndDate());

                    // add new End reason code and owner code
                    factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(bcPractRelationshipExtFhir, providerRelationshipDto.getEndReasonCode(), providerRelationshipDto.getDataOwnerCode());

                    // create new codeable concept extensions FHIR model and set Practitioner Relationship type codes
                    if (providerRelationshipDto.getRelationshipTypeCode() != null && !providerRelationshipDto.getRelationshipTypeCode().isEmpty()) {
                        Object ccRelationshipType = factory.newCodeableConcept();
                        Object relationshipTypeCoding = factory.newCoding();
                        // setCodingSystem
                        factory.getSetCodingAttributes().setCodingSystem(relationshipTypeCoding, PROVIDER_RELANTIONSHIP_TYPE_CODING_SYSTEM_LINK);
                        // setCodingCode for relationship Type 
                        factory.getSetCodingAttributes().setCodingCode(relationshipTypeCoding, providerRelationshipDto.getRelationshipTypeCode());
                        factory.getSetCodeableConceptAttributes().setCoding(ccRelationshipType, relationshipTypeCoding);
                        // set codeable concept
                        factory.getSetPractitionerRelationshipAttributes().setPractitionerRelationshipTypeCodeableConcept(bcPractRelationshipExtFhir, ccRelationshipType);
                    }

                    // create new Reference extension and set practioner value of extension
                    Object bcPractRelationshipReference = factory.newReference();
                    // set practioner.reference w/IPC identifier code/value
                    if (providerRelationshipDto.getIdentifierTypeCode() != null && providerRelationshipDto.getIdentifierTypeCode().equalsIgnoreCase(INTERNAL_PROVIDER_CODE)) {
                        if (providerRelationshipDto.getIdentifier() != null && !providerRelationshipDto.getIdentifier().isEmpty()) {
                            String bcPractitionerRef = "Practitioner/" + providerRelationshipDto.getIdentifier() + "/$entityQuery"; // i.e. "Practitioner/IPC.00115916.BC.PRS/$entityQuery"
                            factory.getSetReferenceAttributes().setReferenceValue(bcPractRelationshipReference, bcPractitionerRef);
                        }
                    }

                    // set Practitioner Relationship extension w/reference Practitioner
                    factory.getSetPractitionerRelationshipAttributes().setPractitionerRelationshipReference(bcPractRelationshipExtFhir, bcPractRelationshipReference);

                    factory.getSetPractitionerAttributes().setPractitionerRelationship(bcPractitionerFhir, bcPractRelationshipExtFhir);

                    // json parse encoded BcPractitioner(
                    String jsonParsedBCPractitionerFhir = factory.parseEncodedBcPractitioner(bcPractitionerFhir);

                    LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir addProviderRelationshipToBCPractitioner jsonParsedBCPractitionerFhir: {0}.",
                            new Object[]{jsonParsedBCPractitionerFhir});
                    // validate new BCPractitioner resource w/disciplinary structure
                    Object fhirValidator = factory.initializeFhirValidator();
                    validateBcPractitionerFhir(factory, fhirValidator, jsonParsedBCPractitionerFhir);
                }
            }
        }
    }

    public List<NoteDto> getProviderNotes() {
        return providerNotes;
    }

    public void setProviderNotes(List<NoteDto> providerNotes) {
        this.providerNotes = providerNotes;
    }

    public static boolean validateBcPractitionerFhir(FHIRFactory factory, Object fhirValidator, String parsedPractitionerFhir) throws DataFormatException {
        // Validate
        ValidationResult validResult = null;
        boolean isPractResultValid = false;
        try {
            validResult = factory.initializeFhirValidationResult(parsedPractitionerFhir);
        } catch (DataFormatException dfe) {
            LOG.log(Level.SEVERE, "MapIndivProviderToBCPractitionerFhir encountered a data format error while validate Practitioner Fhir.");
        } catch (Exception ex) {
            LOG.log(Level.SEVERE, "MapIndivProviderToBCPractitionerFhir encountered an error while validating Practitioner Fhir.");
        }
        if (validResult != null && validResult.isSuccessful()) {
            isPractResultValid = true;
        } else if (validResult != null && !validResult.isSuccessful()) {
            // display the validation issues
            for (SingleValidationMessage validMsg : validResult.getMessages()) {

//                LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir validation issue severity is: {0} and location is: {1} and message is: {2}.",
//                        new Object[]{validMsg.getSeverity(), validMsg.getLocationString(), validMsg.getMessage()});
            }
        }

//        LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerFhir validatePractitionerFhir isPractResultValid is: {0}.",
//                new Object[]{isPractResultValid});
        return isPractResultValid;
    }

}
