package ca.bc.gov.moh.hsa.plr.converter.plr;

import ca.bc.gov.moh.hsa.entity.AddressAttribute;
import ca.bc.gov.moh.hsa.entity.CommunicationFunction;
import ca.bc.gov.moh.hsa.entity.DateAttribute;
import ca.bc.gov.moh.hsa.entity.EmailAttribute;
import ca.bc.gov.moh.hsa.entity.IdentifierAttribute;
import ca.bc.gov.moh.hsa.entity.Person;
import ca.bc.gov.moh.hsa.entity.PersonNameAttribute;
import ca.bc.gov.moh.hsa.entity.PhoneAttribute;
import ca.bc.gov.moh.hsa.plr.converter.dtotohl7.HL740Constants;
import static ca.bc.gov.moh.hsa.plr.converter.plr.UpdateDistributionEntityToHl7Converter.effectiveTime;
import ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils;
import static ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils.PROVIDER_TYPE_ORG;
import ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser;
import static ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser.MESSAGE_INTERACTION_ROOT_OID;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ConditionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.CredentialAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.DisciplinaryActionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.DistributionRequestEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ExpertiseAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderRelationshipAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.StatusAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.WorkLocationAttribute;
import java.io.Serializable;
import java.lang.reflect.InvocationTargetException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import javax.xml.bind.JAXBElement;
import org.apache.camel.Converter;
import org.apache.commons.collections.CollectionUtils;
import org.apache.cxf.common.util.StringUtils;
import org.hl7.v3.m4_16.AD;
import org.hl7.v3.m4_16.AdxpCity;
import org.hl7.v3.m4_16.AdxpCountry;
import org.hl7.v3.m4_16.AdxpState;
import org.hl7.v3.m4_16.CE;
import org.hl7.v3.m4_16.COCTMT090003BCAssignedEntity;
import org.hl7.v3.m4_16.COCTMT090100BCAssignedPerson;
import org.hl7.v3.m4_16.COCTMT090100BCOrganization;
import org.hl7.v3.m4_16.CV;
import org.hl7.v3.m4_16.ObjectFactory;
import org.hl7.v3.m4_16.CommunicationFunctionType;
import org.hl7.v3.m4_16.ED;
import org.hl7.v3.m4_16.II;
import org.hl7.v3.m4_16.MCCIMT000100BCReceiver;
import org.hl7.v3.m4_16.MCCIMT000100BCSender;
import org.hl7.v3.m4_16.MFMIMT700701BCAuthorOrPerformer;
import org.hl7.v3.m4_16.PRPMIN301030CA;
import org.hl7.v3.m4_16.PRPMIN301030CAMFMIMT700701BCControlActProcess;
import org.hl7.v3.m4_16.PRPMIN301030CAMFMIMT700701BCRegistrationEvent;
import org.hl7.v3.m4_16.PRPMIN301030CAMFMIMT700701BCSubject4;
import org.hl7.v3.m4_16.PN;
import org.hl7.v3.m4_16.MCCIMT000100BCAgent;
import org.hl7.v3.m4_16.MCCIMT000100BCDevice;
import org.hl7.v3.m4_16.MCCIMT000100BCOrganization;
import org.hl7.v3.m4_16.MFMIMT700701BCAuthor;
import org.hl7.v3.m4_16.MFMIMT700701BCCustodian;
import org.hl7.v3.m4_16.PRPMIN301030CAMCCIMT000100BCMessage;
import org.hl7.v3.m4_16.PRPMIN301030CAMFMIMT700701BCSubject2;
import org.hl7.v3.m4_16.PRPMMT301010BCHealthCareProvider;
import org.hl7.v3.m4_16.PRPMMT301010BCActDefinitionOrEvent;
import org.hl7.v3.m4_16.PRPMMT301010BCAssignedEntity;
import org.hl7.v3.m4_16.PRPMMT301010BCBirthplace;
import org.hl7.v3.m4_16.PRPMMT301010BCControlActEvent;
import org.hl7.v3.m4_16.PRPMMT301010BCDisciplinaryAction;
import org.hl7.v3.m4_16.PRPMMT301010BCHealthCareProviderStatusCode;
import org.hl7.v3.m4_16.PRPMMT301010BCJurisdiction;
import org.hl7.v3.m4_16.PRPMMT301010BCLocation;
import org.hl7.v3.m4_16.PRPMMT301010BCOrganization;
import org.hl7.v3.m4_16.PRPMMT301010BCPlace;
import org.hl7.v3.m4_16.PRPMMT301010BCPrimaryPerformer;
import org.hl7.v3.m4_16.PRPMMT301010BCPrincipalPerson;
import org.hl7.v3.m4_16.PRPMMT301010BCPrivilege;
import org.hl7.v3.m4_16.PRPMMT301010BCQualifiedEntity;
import org.hl7.v3.m4_16.PRPMMT301010BCRelatedTo;
import org.hl7.v3.m4_16.PRPMMT301010BCResponsibleParty;
import org.hl7.v3.m4_16.PRPMMT301010BCRoleActivation;
import org.hl7.v3.m4_16.PRPMMT301010BCServiceDeliveryLocation;
import org.hl7.v3.m4_16.PRPMMT301010BCSubject2;
import org.hl7.v3.m4_16.PRPMMT301010BCSubject3;
import org.hl7.v3.m4_16.PRPMMT301010BCSubject4;
import org.hl7.v3.m4_16.PRPMMT301010BCTerritorialAuthority;
import org.hl7.v3.m4_16.TEL;
import static ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils.MESSAGE_INTERACTION_EXTENSION_DIST_ORG_ADD;

/**
 * Converts a distribution message from the entity format into the HL7 format
 * ready to be converted to XML and sent off to distribution clients.
 *
 * @see UpdateDistributionEntityToHl7Converter
 *
 * @author greg.perkins
 */
@Converter
public class AddDistributionEntityToHl7Converter extends UpdateDistributionEntityToHl7Converter {

    /**
     * Converts a DistributionRequestEntity object into a PRPMIN301030CA jaxb
     * object
     *
     * @param in DistributionRequestEntity
     * @return PRPMIN301030CA
     * @throws IllegalAccessException
     * @throws InvocationTargetException
     */
    @Converter
    public static PRPMIN301030CA convertToPRPMIN301030CA(DistributionRequestEntity in)
            throws IllegalAccessException, InvocationTargetException {
        PRPMIN301030CA out = new PRPMIN301030CA();
        out.setITSVersion("XML_1.0");
        convert(out, in);
        return out;
    }

    private static PRPMIN301030CAMCCIMT000100BCMessage convert(PRPMIN301030CAMCCIMT000100BCMessage out, DistributionRequestEntity in)
            throws IllegalAccessException, InvocationTargetException {
        ProviderAttribute providerDetails = in.getProvider();

        out.setReceiver(new MCCIMT000100BCReceiver());
        out.setSender(new MCCIMT000100BCSender());
        convertHeaderFields(out, in);
        convertReceiver(out, in);
        convertSender(out, in);

        PRPMIN301030CAMFMIMT700701BCControlActProcess controlActProcess = new PRPMIN301030CAMFMIMT700701BCControlActProcess();
        out.setControlActProcess(controlActProcess);
        controlActProcess.setPriorityCode(cs("R"));
        convertAuthor(in, controlActProcess);

        controlActProcess.setSubject(new PRPMIN301030CAMFMIMT700701BCSubject2());
        PRPMIN301030CAMFMIMT700701BCRegistrationEvent registrationEvent = new PRPMIN301030CAMFMIMT700701BCRegistrationEvent();
        registrationEvent.setStatusCode(cs("active"));
        controlActProcess.getSubject().setRegistrationEvent(registrationEvent);

        //set the valud of typeCode, this is required by conformance
        List<String> subjectTypeCodeList = new ArrayList<>();
        subjectTypeCodeList.add(HL740Constants.TYPE_CODE_SUBJ);
        controlActProcess.getSubject().setTypeCode(subjectTypeCodeList);

        //Don't include IDs
        PRPMIN301030CAMFMIMT700701BCSubject4 subject = new PRPMIN301030CAMFMIMT700701BCSubject4();
        registrationEvent.setSubject1(subject);
        PRPMMT301010BCHealthCareProvider healthCareProvider = new PRPMMT301010BCHealthCareProvider();
        subject.setHealthCareProvider(healthCareProvider);

        //set the value of typeCode, this is required by conformance
        List<String> subject1TypeCodeList = new ArrayList<>();
        subject1TypeCodeList.add(HL740Constants.TYPE_CODE_SBJ);
        subject.setTypeCode(subject1TypeCodeList);

        healthCareProvider.getClassCode().add("PROV");

        CE healthCareProviderCode = ce(providerDetails.getHptCode());
        healthCareProviderCode.setCodeSystemName(HL740Constants.HPT_CODE_SYSTEM_NAME);
        healthCareProvider.setCode(healthCareProviderCode);

        for (IdentifierAttribute id : providerDetails.getCollegeIdentifiers()) {
            healthCareProvider.getId().add(convertIdentifier(id));
        }

        for (AddressAttribute addr : providerDetails.getAddresses()) {
            healthCareProvider.getAddr().add(convertAddressToAD(addr));
        }

        // added logic for ORG provider type  
        // if this is an ORG, add ORG name, long name to firstname and surname
        if (out.getInteractionId().getRoot().equalsIgnoreCase(MESSAGE_INTERACTION_ROOT_OID)
                && out.getInteractionId().getExtension().equalsIgnoreCase(MESSAGE_INTERACTION_EXTENSION_DIST_ORG_ADD)) {

            if (providerDetails.getPartyType() != null && (!providerDetails.getPartyType().isEmpty()
                    && providerDetails.getPartyType().equalsIgnoreCase(PROVIDER_TYPE_ORG))) {

                populatePersonNamesFromOrgNames(providerDetails);

            }
        }

        for (PersonNameAttribute name : providerDetails.getPersonNames()) {
            convertName(name, healthCareProvider);
        }

        addNamesIfNotPresentToPassSchemaValidation(healthCareProvider);

        for (PhoneAttribute phone : providerDetails.getPhones()) {
            healthCareProvider.getTelecom().add(convertTelecommunicationToTEL(phone));
        }

        for (EmailAttribute email : providerDetails.getEmails()) {
            healthCareProvider.getTelecom().add(convertElectronicAddressToTEL(email));
        }

        int statusCounter = 1;
        for (StatusAttribute status : providerDetails.getStatuses()) {
            healthCareProvider.setStatusCode(convertStatusForAdd(status));
            // PLR-2188: Do not include endDate.
            healthCareProvider.setEffectiveTime(effectiveTime(status.getStartDate(), null));
            //Generate the ID to link the status with the subjectOf2 record
            String ext = "status" + statusCounter;
            statusCounter++;
            //Set the ID on the status
            healthCareProvider.getStatusCode().setControlActReferenceId(new II());
            healthCareProvider.getStatusCode().getControlActReferenceId().setExtension(ext);
            healthCareProvider.getStatusCode().getControlActReferenceId().setRoot("2.16.840.1.113883.3.40.1.12");

            //Generate SubjectOf2 with reason code
            PRPMMT301010BCSubject3 subject2 = new PRPMMT301010BCSubject3();
            CE ce = new CE();
            ce.setCode(status.getReasonCode());
            subject2.setRoleActivation(new PRPMMT301010BCRoleActivation());
            subject2.getRoleActivation().setReasonCode(ce);
            List<String> classCodeList = new ArrayList<>();
            classCodeList.add(HL740Constants.CLASS_CODE_CACT);
            subject2.getRoleActivation().setClassCode(classCodeList);
            PRPMMT301010BCControlActEvent controlActEvent = new PRPMMT301010BCControlActEvent();
            II ii = new II();
            ii.setExtension(ext);
            ii.setRoot("2.16.840.1.113883.3.40.1.12");
            controlActEvent.setId(ii);
            PRPMMT301010BCSubject4 subject3 = new PRPMMT301010BCSubject4();
            subject3.setControlActEvent(controlActEvent);

            //set typeCode, this is required by conformance
            List<String> subjectInSubjectOf2TypeCodeList = new ArrayList<>();
            subjectInSubjectOf2TypeCodeList.add(HL740Constants.TYPE_CODE_SUBJ);
            subject3.setTypeCode(subjectInSubjectOf2TypeCodeList);

            subject2.getRoleActivation().getSubjectOf().add(subject3);

            //set typeCode, this is required by conformance
            List<String> subjectOf2TypeCodeList = new ArrayList<>();
            subjectOf2TypeCodeList.add(HL740Constants.TYPE_CODE_SBJ);
            subject2.setTypeCode(subjectOf2TypeCodeList);

            //Add SubjectOf2 to the provider.
            healthCareProvider.getSubjectOf2().add(subject2);
        }

        PRPMMT301010BCOrganization org = new PRPMMT301010BCOrganization();
        PRPMMT301010BCTerritorialAuthority territory = new PRPMMT301010BCTerritorialAuthority();
        territory.setCode(cs("Province"));
        territory.getClassCode().add("TERR");
        PRPMMT301010BCJurisdiction t = new PRPMMT301010BCJurisdiction();
        territory.setTerritory(factory.createPRPMMT301010BCTerritorialAuthorityTerritory(t));
        t.getClassCode().add("PLC");
        t.setDeterminerCode("INSTANCE");
        t.setCode(cs("BC"));
        org.setTerritorialAuthority(factory.createPRPMMT301010BCOrganizationTerritorialAuthority(territory));
        healthCareProvider.setIssuingOrganization(factory.createPRPMMT301010BCHealthCareProviderIssuingOrganization(org));
        healthCareProvider.getIssuingOrganization().getValue().getClassCode().add("ORG");
        healthCareProvider.getIssuingOrganization().getValue().setDeterminerCode("INSTANCE");

        //healthCarePrincipalPerson?
        for (DisciplinaryActionAttribute disciplinaryAction : providerDetails.getDisciplinaryActions()) {
            subject.getHealthCareProvider().getSubjectOf1().add(convertDisciplinaryActionForAdd(disciplinaryAction));
        }

        for (ConditionAttribute condition : providerDetails.getConditions()) {
            healthCareProvider.getResponsibleFor().add(convertConditionForAdd(condition));
        }

        for (WorkLocationAttribute workLocation : providerDetails.getWorkLocations()) {
            healthCareProvider.getRelatedTo().add(convertWorkLocationForAdd(workLocation));
        }

        for (CredentialAttribute cred : providerDetails.getCredentials()) {
            healthCareProvider.getRelatedTo().add(convertCredentialForAdd(cred));
        }

        for (ExpertiseAttribute expertise : providerDetails.getExpertises()) {
            healthCareProvider.getRelatedTo().add(convertExpertiseForAdd(expertise));
        }

        for (ProviderRelationshipAttribute rel : providerDetails.getProviderRelationships()) {
            healthCareProvider.getRelatedTo().add(convertRelationshipForAdd(rel));
        }

        for (Person person : providerDetails.getDemographicDetails()) {
            convertDemographics(person, providerDetails.getPersonNames(), healthCareProvider);
        }

        MFMIMT700701BCAuthor author = new MFMIMT700701BCAuthor();
        author.setAssignedEntity(new COCTMT090003BCAssignedEntity());
        registrationEvent.setAuthor(factory.createPRPMIN301030CAMFMIMT700701BCRegistrationEventAuthor(author));
        registrationEvent.getAuthor().getValue().getAssignedEntity().getId().add(ii(in.getRegistryOrgUserId(), "2.16.840.1.113883.3.40.3.3"));
        MFMIMT700701BCCustodian custodian = new MFMIMT700701BCCustodian();
        custodian.setAssignedEntity(new COCTMT090003BCAssignedEntity());
        registrationEvent.setCustodian(custodian);
        registrationEvent.getCustodian().getAssignedEntity().getId().add(ii(in.getSourceOrganizationChid(), "2.16.840.1.113883.3.40.4.2"));

        return out;
    }

    /**
     * Add empty "name" elements if there are no names.
     *
     * The "name" element is required in order to pass schema validation.
     */
    private static void addNamesIfNotPresentToPassSchemaValidation(PRPMMT301010BCHealthCareProvider healthCareProvider) {
        if (healthCareProvider.getName().isEmpty()) {
            healthCareProvider.getName().add(new PN());
        }
        if (healthCareProvider.getHealthCarePrincipalPerson() == null) {
            PRPMMT301010BCPrincipalPerson healthCarePrincipalPerson = new PRPMMT301010BCPrincipalPerson();
            healthCareProvider.setHealthCarePrincipalPerson(healthCarePrincipalPerson);
        }
        if (healthCareProvider.getHealthCarePrincipalPerson().getName().isEmpty()) {
            healthCareProvider.getHealthCarePrincipalPerson().getName().add(new PN());
        }
    }

    private static void convertName(PersonNameAttribute name, PRPMMT301010BCHealthCareProvider healthCareProvider) {

        PN pn = convertPersonNameToPN(name);
        if (CollectionUtils.isNotEmpty(pn.getUse()) && pn.getUse().get(0) != null) {
            String use = pn.getUse().get(0);
            if (use.equalsIgnoreCase(HL740Constants.USE_C)) {
                healthCareProvider.getName().add(pn);
            }
            if (use.equalsIgnoreCase(HL740Constants.USE_L)) {
                PRPMMT301010BCPrincipalPerson healthCarePrincipalPerson = healthCareProvider.getHealthCarePrincipalPerson();
                if (healthCarePrincipalPerson == null) {
                    healthCarePrincipalPerson = new PRPMMT301010BCPrincipalPerson();
                    healthCareProvider.setHealthCarePrincipalPerson(healthCarePrincipalPerson);
                }
                healthCarePrincipalPerson.getName().add(pn);
            }
        }
    }

    private static void convertDemographics(Person person, List<PersonNameAttribute> personNameList, PRPMMT301010BCHealthCareProvider healthCareProvider) {
        PRPMMT301010BCPrincipalPerson healthCarePrincipalPerson = healthCareProvider.getHealthCarePrincipalPerson();
        if (healthCarePrincipalPerson == null) {
            healthCarePrincipalPerson = new PRPMMT301010BCPrincipalPerson();
            healthCareProvider.setHealthCarePrincipalPerson(healthCarePrincipalPerson);
        }

        if (person.getGender() != null && person.getGender().getValue() != null) {
            String genderValue = person.getGender().getValue();
            healthCarePrincipalPerson.setAdministrativeGenderCode(cs(genderValue));
        }

        DateAttribute birthDate = person.getBirthDate();
        DateAttribute deathDate = person.getDeathDate();
        String birthCountryCode = person.getBirthCountryCode();
        String birthProvinceCode = person.getBirthProvinceCode();

        if (birthDate != null && birthDate.getValue() != null) {
            healthCarePrincipalPerson.setBirthTime(convertToTS(birthDate.getValue()));
        }

        if (deathDate != null && deathDate.getValue() != null) {
            healthCarePrincipalPerson.setDeceasedTime(convertToTS(deathDate.getValue()));
        }

        ObjectFactory objectFactory = new ObjectFactory();

        if (!StringUtils.isEmpty(birthProvinceCode) || !StringUtils.isEmpty(birthCountryCode)) {

            PRPMMT301010BCBirthplace birthPlace = new PRPMMT301010BCBirthplace();

            JAXBElement<PRPMMT301010BCBirthplace> birthPlaceJaxb = objectFactory.createPRPMMT301010BCPrincipalPersonBirthplace(birthPlace);
            AD addr = objectFactory.createAD();
            birthPlaceJaxb.getValue().setAddr(addr);
            List<String> classCodeList = new ArrayList<>();
            classCodeList.add(HL740Constants.CLASS_CODE_BIRTHPL);
            birthPlaceJaxb.getValue().setClassCode(classCodeList);
            List<Serializable> content = addr.getContent();
            if (!StringUtils.isEmpty(birthProvinceCode)) {
                AdxpState provinceCodeValue = new AdxpState();
                provinceCodeValue.setText(birthProvinceCode);
                JAXBElement<AdxpState> provinceElement = objectFactory.createADState(provinceCodeValue);
                content.add(provinceElement);
            }
            if (!StringUtils.isEmpty(birthCountryCode)) {
                AdxpCountry countryValue = new AdxpCountry();
                countryValue.setText(birthCountryCode);
                JAXBElement<AdxpCountry> CountryElement = objectFactory.createADCountry(countryValue);
                content.add(CountryElement);
            }
            healthCarePrincipalPerson.setBirthplace(birthPlaceJaxb);
        }

        //Add classCode and determinerCode attribute to <healthCarePrincipalPerson> element
        //This is required by conformance.
        List<String> classCodeList = new ArrayList<>();
        classCodeList.add(HL740Constants.CLASS_CODE_PSN);
        healthCarePrincipalPerson.setClassCode(classCodeList);
        healthCarePrincipalPerson.setDeterminerCode(HL740Constants.DETERMINER_CODE_INSTANCE);

    }

    public static PRPMMT301010BCHealthCareProviderStatusCode convertStatusForAdd(StatusAttribute status) {
        PRPMMT301010BCHealthCareProviderStatusCode code = new PRPMMT301010BCHealthCareProviderStatusCode();
        code.setCode(status.getUncodedType());
        code.setValidTime(effectiveTime(status.getStartDate(), status.getExpiryDate()));
        return code;
    }

    public static PRPMMT301010BCRelatedTo convertRelationshipForAdd(ProviderRelationshipAttribute rel) {
        PRPMMT301010BCRelatedTo relatedTo = new PRPMMT301010BCRelatedTo();
        relatedTo.setTypeCode(HL740Constants.TYPE_CODE_REL);
        PRPMMT301010BCHealthCareProvider relatedProvider = new PRPMMT301010BCHealthCareProvider();
        relatedProvider.getId().add(ii(rel.getRelationshipWithProviderCollegeId(), ConverterUtils.getOid(rel.getRelationshipWithProviderType())));
        relatedTo.setHealthCareProvider(factory.createPRPMMT301010BCRelatedToHealthCareProvider(relatedProvider));
        relatedProvider.setTypeId(ii(rel.getRelationshipWithProviderCollegeId(), rel.getRelationshipWithProviderType()));
        relatedProvider.setCode(cs(rel.getRelationshipTypeCode()));
        relatedProvider.setEffectiveTime(effectiveTime(rel.getStartDate(), rel.getExpiryDate()));
        // "name", "status", "addr", and "telecom" elements are required in order to pass schema validation.
        relatedProvider.getName().add(new PN());
        relatedProvider.setStatusCode(new PRPMMT301010BCHealthCareProviderStatusCode());
        relatedProvider.getAddr().add(new AD());
        relatedProvider.getTelecom().add(new TEL());
        return relatedTo;
    }

    public static PRPMMT301010BCRelatedTo convertExpertiseForAdd(ExpertiseAttribute expertise) {
        PRPMMT301010BCRelatedTo relatedTo = new PRPMMT301010BCRelatedTo();
        relatedTo.setTypeCode(HL740Constants.TYPE_CODE_REL);
        PRPMMT301010BCQualifiedEntity qualifiedEntity = new PRPMMT301010BCQualifiedEntity();
        relatedTo.setQualifiedEntity(factory.createPRPMMT301010BCRelatedToQualifiedEntity(qualifiedEntity));
        qualifiedEntity.setCode(new CV());
        qualifiedEntity.getCode().setCode(expertise.getUncodedType());
        qualifiedEntity.getCode().setOriginalText(ed(expertise.getSourceCode()));
        qualifiedEntity.setEffectiveTime(effectiveTime(expertise.getStartDate(), expertise.getExpiryDate()));
        List<String> classCodeList = new ArrayList<>();
        classCodeList.add(HL740Constants.CLASS_CODE_QUAL);
        qualifiedEntity.setClassCode(classCodeList);
        return relatedTo;
    }

    public static PRPMMT301010BCRelatedTo convertCredentialForAdd(CredentialAttribute cred) {
        PRPMMT301010BCRelatedTo relatedTo = new PRPMMT301010BCRelatedTo();
        relatedTo.setTypeCode(HL740Constants.TYPE_CODE_REL);
        relatedTo.setQualifiedEntity(factory.createPRPMMT301010BCRelatedToQualifiedEntity(new PRPMMT301010BCQualifiedEntity()));
        PRPMMT301010BCQualifiedEntity qualifiedEntity = relatedTo.getQualifiedEntity().getValue();
        List<String> classCodeList = new ArrayList<>();
        classCodeList.add(HL740Constants.CLASS_CODE_QUAL);
        qualifiedEntity.setClassCode(classCodeList);
        qualifiedEntity.setId(ii(cred.getRegistrationNumber(), "2.16.840.1.113883.3.40.1.2"));

        CE code = new CE();
        code.setCode(cred.getUncodedType());

        // Set Equivalency Flag - REMOVED as schema doesn't allow it
//        CD value = new CD();
//        value.setCode(String.valueOf(cred.isEquivalent()));
//        code.getTranslation().add(value);
        // Set Designation
        TEL tel = new TEL();
        tel.setValue(cred.getDesignation());

        JAXBElement<TEL> createEDReference = new ObjectFactory().createEDReference(tel);
        ED originalText = new ED();
        originalText.getContent().add(createEDReference);
        code.setOriginalText(originalText);

        qualifiedEntity.setCode(code);

        qualifiedEntity.setEffectiveTime(effectiveTime(cred.getStartDate(), cred.getExpiryDate()));
        qualifiedEntity.setQualificationGrantingOrganization(factory.createPRPMMT301010BCQualifiedEntityQualificationGrantingOrganization(new PRPMMT301010BCOrganization()));
        PRPMMT301010BCOrganization grantingOrg = qualifiedEntity.getQualificationGrantingOrganization().getValue();
        grantingOrg.setName(st(cred.getGrantingInstitution()));
        AD addr = new AD();
        grantingOrg.setAddr(addr);
        AdxpCountry country = new AdxpCountry();
        country.getContent().add(cred.getInstitutionCountryCode());
        AdxpState state = new AdxpState();
        state.getContent().add(cred.getInstitutionProvStateCode());
        AdxpCity city = new AdxpCity();
        city.getContent().add(cred.getInstitutionCity());
        addr.getContent().add(city);
        addr.getContent().add(state);
        addr.getContent().add(country);
        return relatedTo;
    }

    public static PRPMMT301010BCRelatedTo convertWorkLocationForAdd(WorkLocationAttribute workLocation) {
        PRPMMT301010BCRelatedTo relatedTo = new PRPMMT301010BCRelatedTo();
        relatedTo.setTypeCode(HL740Constants.TYPE_CODE_REL);
        PRPMMT301010BCAssignedEntity assignedEntity = new PRPMMT301010BCAssignedEntity();
        PRPMMT301010BCPrimaryPerformer performer = new PRPMMT301010BCPrimaryPerformer();
        PRPMMT301010BCActDefinitionOrEvent event = new PRPMMT301010BCActDefinitionOrEvent();
        PRPMMT301010BCLocation location = new PRPMMT301010BCLocation();
        PRPMMT301010BCServiceDeliveryLocation sdl = new PRPMMT301010BCServiceDeliveryLocation();
        PRPMMT301010BCPlace place = new PRPMMT301010BCPlace();
        sdl.setLocation(factory.createPRPMMT301010BCServiceDeliveryLocationLocation(place));
        location.setServiceDeliveryLocation(sdl);
        event.setLocation(factory.createPRPMMT301010BCActDefinitionOrEventLocation(location));
        performer.setActDefinitionOrEvent(event);
        assignedEntity.setPerformance(factory.createPRPMMT301010BCAssignedEntityPerformance(performer));
        relatedTo.setAssignedEntity(factory.createPRPMMT301010BCRelatedToAssignedEntity(assignedEntity));

        sdl.setId(ii(workLocation.getIdentifier(), "2.16.840.1.113883.3.40.1.10"));
        if (CollectionUtils.isNotEmpty(workLocation.getDetails())) {
            sdl.setCode(cs(workLocation.getDetails().get(0).getTypeCode()));
            sdl.setEffectiveTime(effectiveTime(workLocation.getDetails().get(0).getStartDate(), workLocation.getDetails().get(0).getExpiryDate()));
            place.setName(en(workLocation.getDetails().get(0).getName())); //Check mapping - doesn't have primaryWorkLocationDetails
            // work location details default flag
            boolean workLocationDetailsDefaultFlag = workLocation.getDetails().get(0).isDefaulted();
            location.setSequenceNumber(INT(workLocationDetailsDefaultFlag ? 1 : 0));
        }

        if (workLocation.getAddresses() != null) {
            for (AddressAttribute address : workLocation.getAddresses()) {
                sdl.getAddr().add(convertAddressToAD(address));
            }
        }
        if (workLocation.getPhoneNumbers() != null) {
            for (PhoneAttribute tele : workLocation.getPhoneNumbers()) {
                sdl.getTelecom().add(convertTelecommunicationToTEL(tele));
            }
        }
        if (workLocation.getEmailAddresses() != null) {
            for (EmailAttribute elec : workLocation.getEmailAddresses()) {
                sdl.getTelecom().add(convertElectronicAddressToTEL(elec));
            }
        }

        return relatedTo;
    }

    /**
     * JIRA-5497 condition code to be included on add distribution message
     */
    public static PRPMMT301010BCResponsibleParty convertConditionForAdd(ConditionAttribute condition) {
        PRPMMT301010BCResponsibleParty responsibleFor = new PRPMMT301010BCResponsibleParty();
        PRPMMT301010BCPrivilege priv = new PRPMMT301010BCPrivilege();
        responsibleFor.setPrivilege(priv);
        priv.setId(ii(condition.getId(), OidsUser.CONDITION_OID));
        priv.setCode(cs(condition.getUncodedType()));
        priv.setEffectiveTime(effectiveTime(condition.getStartDate(), condition.getExpiryDate()));
        priv.setConfidentialityCode(new CV());
        priv.getConfidentialityCode().setCode(condition.isRestricted() ? "R" : "N");
        priv.getConfidentialityCode().setOriginalText(ed(condition.getRestrictionExplanationText()));
        priv.setMoodCode("DEF");
        return responsibleFor;
    }

    public static void convertAuthor(DistributionRequestEntity in, PRPMIN301030CAMFMIMT700701BCControlActProcess controlActProcess) {
        MFMIMT700701BCAuthorOrPerformer author = new MFMIMT700701BCAuthorOrPerformer();
        author.setTypeCode("PRF");
        author.setAssignedPerson(new COCTMT090100BCAssignedPerson());
        author.getAssignedPerson().setId(ii(in.getSender().getUserId(), "2.16.840.1.113883.3.40.6.2"));
        if (author.getAssignedPerson().getRepresentedOrganization() == null) {
            COCTMT090100BCOrganization representedOrganization = new COCTMT090100BCOrganization();
            org.hl7.v3.m4_16.ST name = new org.hl7.v3.m4_16.ST();
            name.setText(in.getSender().getJurisdiction());
            representedOrganization.setName(name);
            author.getAssignedPerson().setRepresentedOrganization(factory.createCOCTMT090100BCAssignedPersonRepresentedOrganization(representedOrganization));
        }
        controlActProcess.getAuthorOrPerformer().add(author);
        author = new MFMIMT700701BCAuthorOrPerformer();
        author.setTypeCode("PRF");
        author.setAssignedPerson(new COCTMT090100BCAssignedPerson());
        author.getAssignedPerson().setId(ii(in.getResponsibleUserId(), "2.16.840.1.113883.3.40.6.1"));
        controlActProcess.getAuthorOrPerformer().add(author);
    }

    public static void convertSender(PRPMIN301030CAMCCIMT000100BCMessage out, DistributionRequestEntity in) {
        MCCIMT000100BCSender sender = out.getSender();
        sender.setTypeCode(CommunicationFunctionType.SND);
        sender.setTelecom(new TEL());
        sender.getTelecom().setValue(in.getSender().getNetworkAddress());
        sender.setDevice(new MCCIMT000100BCDevice());
        sender.getDevice().getId().add(ii(in.getSender().getFacilityId(), "2.16.840.1.113883.3.40.5.2"));
        sender.getDevice().setName(st(in.getSender().getSystemName()));
        MCCIMT000100BCAgent agent = new MCCIMT000100BCAgent();
        agent.setRepresentedOrganization(factory.createMCCIMT000100BCAgentRepresentedOrganization(new MCCIMT000100BCOrganization()));
        sender.getDevice().setAsAgent(factory.createMCCIMT000100BCDeviceAsAgent(agent));
        sender.getDevice().getAsAgent().getValue().getRepresentedOrganization().getValue().setId(ii(in.getSourceOrganizationChid(), "2.16.840.1.113883.3.40.4.2"));
    }

    public static void convertReceiver(PRPMIN301030CAMCCIMT000100BCMessage out, DistributionRequestEntity in) {
        MCCIMT000100BCReceiver receiver = out.getReceiver();
        receiver.setTypeCode(CommunicationFunctionType.RCV);
        receiver.setTelecom(new TEL());
        CommunicationFunction cf = in.getReceiver().get(0);
        receiver.getTelecom().setValue(cf.getNetworkAddress());
        receiver.setDevice(new MCCIMT000100BCDevice());
        receiver.getDevice().getId().add(ii(cf.getEnvironment(), "2.16.840.1.113883.3.40.1.14"));
        receiver.getDevice().getId().add(ii(cf.getFacilityId(), "2.16.840.1.113883.3.40.5.1"));
        receiver.getDevice().setName(st(cf.getSystemName()));
        MCCIMT000100BCAgent agent = new MCCIMT000100BCAgent();
        agent.setRepresentedOrganization(factory.createMCCIMT000100BCAgentRepresentedOrganization(new MCCIMT000100BCOrganization()));
        receiver.getDevice().setAsAgent(factory.createMCCIMT000100BCDeviceAsAgent(agent));
        receiver.getDevice().getAsAgent().getValue().getRepresentedOrganization().getValue().setId(ii(cf.getOrganizationId(), "2.16.840.1.113883.3.40.4.1"));
    }

    public static void convertHeaderFields(PRPMIN301030CAMCCIMT000100BCMessage out, DistributionRequestEntity in) {
        out.setId(ii(UUID.randomUUID().toString(), "2.16.840.1.113883.3.40.1.5"));
        out.setCreationTime(convertToTS(in.getCreationTime()));
        out.setVersionCode(cs(in.getVersionNumber()));
        out.setInteractionId(ii(in.getInteractionId(), "2.16.840.1.113883.3.40.3.1"));
        out.getProfileId().add(ii(in.getRelease(), "2.16.840.1.113883.3.40.1.7"));
        out.setProcessingCode(cs("T"));
        out.setProcessingModeCode(cs("T"));
        out.setAcceptAckCode(cs("NE"));
    }

    public static PRPMMT301010BCSubject2 convertDisciplinaryActionForAdd(DisciplinaryActionAttribute disciplinaryAction) {
        PRPMMT301010BCSubject2 subjectOf1 = new PRPMMT301010BCSubject2();
        PRPMMT301010BCDisciplinaryAction da = new PRPMMT301010BCDisciplinaryAction();
        subjectOf1.setDisciplinaryAction(da);
        da.setId(ii(disciplinaryAction.getIdentifier(), "2.16.840.1.113883.3.40.1.4"));
        da.setText(ed(disciplinaryAction.getDescription()));
        da.setEffectiveTime(effectiveTime(disciplinaryAction.getStartDate(), disciplinaryAction.getExpiryDate()));
        da.setConfidentialityCode(new CV());
        da.getConfidentialityCode().setCode(disciplinaryAction.isDisplay() ? "R" : "N");
        da.getClassCode().add("DISPACT");
        da.getMoodCode().add("EVN");
        return subjectOf1;
    }

}
