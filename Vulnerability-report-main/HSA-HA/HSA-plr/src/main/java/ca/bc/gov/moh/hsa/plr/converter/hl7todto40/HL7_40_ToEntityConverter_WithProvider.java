package ca.bc.gov.moh.hsa.plr.converter.hl7todto40;

import ca.bc.gov.moh.hsa.entity.AddressAttribute;
import ca.bc.gov.moh.hsa.entity.Attribute;
import ca.bc.gov.moh.hsa.entity.EmailAttribute;
import ca.bc.gov.moh.hsa.entity.PersonNameAttribute;
import ca.bc.gov.moh.hsa.entity.PhoneAttribute;
import ca.bc.gov.moh.hsa.plr.converter.hl7todto.AuditInfo;
import static ca.bc.gov.moh.hsa.plr.converter.hl7todto40.HL7_40_ToEntityConverter.AUTHOR_TYPE_CODE;
import ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils;
import ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser;
import static ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser.SOURCE_USER_OID;
import ca.bc.gov.moh.hsa.plr.entity.transaction.MaintainProviderRequestEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderAttribute;
import java.io.Serializable;
import java.net.URI;
import java.net.URISyntaxException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.xml.bind.JAXBElement;
import org.apache.commons.lang.StringUtils;
import org.apache.cxf.common.util.CollectionUtils;
import org.hl7.v3.m4_0.AD;
import org.hl7.v3.m4_0.ANY;
import org.hl7.v3.m4_0.AdxpCity;
import org.hl7.v3.m4_0.AdxpCountry;
import org.hl7.v3.m4_0.AdxpPostalCode;
import org.hl7.v3.m4_0.AdxpState;
import org.hl7.v3.m4_0.AdxpStreetAddressLine;
import org.hl7.v3.m4_0.CE;
import org.hl7.v3.m4_0.COCTMT090100AssignedPerson;
import org.hl7.v3.m4_0.COCTMT150000Organization;
import org.hl7.v3.m4_0.EN;
import org.hl7.v3.m4_0.EnFamily;
import org.hl7.v3.m4_0.EnGiven;
import org.hl7.v3.m4_0.EnPrefix;
import org.hl7.v3.m4_0.EnSuffix;
import org.hl7.v3.m4_0.HL7ControlActProcess;
import org.hl7.v3.m4_0.HL7HealthCareProvider;
import org.hl7.v3.m4_0.HL7RequestMessage;
import org.hl7.v3.m4_0.II;
import org.hl7.v3.m4_0.IVLTS;
import org.hl7.v3.m4_0.IVXBTS;
import org.hl7.v3.m4_0.MFMIMT700701AuthorOrPerformer;
import org.hl7.v3.m4_0.ON;
import org.hl7.v3.m4_0.PRPMMT301010AssignedEntityAddr;
import org.hl7.v3.m4_0.PRPMMT301010HealthCareProviderAddr;
import org.hl7.v3.m4_0.PRPMMT301010HealthCareProviderTelecom;
import org.hl7.v3.m4_0.PRPMMT301010PrincipalOrganizationName;
import org.hl7.v3.m4_0.PRPMMT301010PrincipalPersonName;
import org.hl7.v3.m4_0.PRPMMT301010ServiceDeliveryLocationAddr;
import org.hl7.v3.m4_0.PRPMMT301010ServiceDeliveryLocationTelecom;
import org.hl7.v3.m4_0.PRPMMT303010HealthCareProviderAddr;
import org.hl7.v3.m4_0.PRPMMT303010PrincipalOrganizationName;
import org.hl7.v3.m4_0.PRPMMT303010PrincipalPersonName;
import org.hl7.v3.m4_0.PRPMMT303010ServiceDeliveryLocationAddr;
import org.hl7.v3.m4_0.PRPMMT303010ServiceDeliveryLocationTelecom;
import org.hl7.v3.m4_0.PRPMMT303010HealthCareProviderTelecom;
import org.hl7.v3.m4_0.PRPMMT309000PrincipalPersonName;
import org.hl7.v3.m4_0.QTY;
import org.hl7.v3.m4_0.TEL;
import org.hl7.v3.m4_0.TS;
import org.slf4j.LoggerFactory;

/**
 *
 * @author conrad.gustafson
 */
public abstract class HL7_40_ToEntityConverter_WithProvider extends HL7_40_ToEntityConverter {

    private final org.slf4j.Logger logger = LoggerFactory.getLogger(HL7_40_ToEntityConverter_WithProvider.class);
    
    public static final String PARTY_TYPE_CODE_IND = "IND";
    
    @Override
    protected MaintainProviderRequestEntity convertHL7RequestMessage(HL7RequestMessage requestMessage) {
        MaintainProviderRequestEntity requestEntity = super.convertHL7RequestMessage(requestMessage);

        setAuthorOrPerformer(requestMessage, requestEntity);
        setProvider(requestMessage, requestEntity);

        final ProviderAttribute providerAttribute = requestEntity.getProvider();
        HL7HealthCareProvider healthCareProvider = getHealthCareProvider(requestMessage);

        if (healthCareProvider != null) {
            setIdentifiers(requestMessage, providerAttribute, healthCareProvider);
            setNames(requestMessage, providerAttribute, healthCareProvider);
            setAddresses(requestMessage, providerAttribute, healthCareProvider);
            setPhonesAndEmail(requestMessage, providerAttribute, healthCareProvider);
            // call setDemographicDetails before setConditions!
            // setConditions calls setConfidentiality which depends on demographics.
            setDemographicDetails(requestMessage, providerAttribute, healthCareProvider);
            setConditions(requestMessage, providerAttribute, healthCareProvider);
            processRelatedToBlocks(requestMessage, providerAttribute, healthCareProvider);
            setStatuses(requestMessage, providerAttribute, healthCareProvider);
            setNotes(requestMessage, providerAttribute, healthCareProvider);
            setDisciplinaryActions(requestMessage, providerAttribute, healthCareProvider);
        }

        return requestEntity;
    }

    public void setAuthorOrPerformer(HL7RequestMessage requestMessage, MaintainProviderRequestEntity requestEntity) {
        MFMIMT700701AuthorOrPerformer author = getAuthorOrPerformer(requestMessage, PERFORMER_TYPE_CODE);
        if (author != null) {
            JAXBElement<COCTMT090100AssignedPerson> assignedPersonElement = author.getAssignedPerson();
            if (assignedPersonElement != null) {
                COCTMT090100AssignedPerson assignedPerson = assignedPersonElement.getValue();
                if (assignedPerson != null) {
                    List<II> ids = assignedPerson.getId();
                    if (ids != null && !CollectionUtils.isEmpty(ids)) {
                        for (II id : ids) {
                            if (AUTHOR_OID.equals(id.getRoot())) {
                                String userId = id.getExtension();
                                requestEntity.setResponsibleUserId(userId);
                                break;
                            }
                        }
                    }
                }
            }
        }
    }

    public void setProvider(HL7RequestMessage requestMessage, MaintainProviderRequestEntity requestEntity) {
        final ProviderAttribute providerAttribute = new ProviderAttribute();
        requestEntity.setProvider(providerAttribute);

        // set source user id
        MFMIMT700701AuthorOrPerformer performer = getPerformer(requestMessage);
        if (performer != null) {
            JAXBElement<COCTMT090100AssignedPerson> assignedPersonElement = performer.getAssignedPerson();
            if (assignedPersonElement != null) {
                COCTMT090100AssignedPerson assignedPerson = assignedPersonElement.getValue();
                if (assignedPerson != null) {
                    List<II> ids = assignedPerson.getId();
                    if (ids != null) {
                        for (II id : ids) {
                            if (SOURCE_USER_OID.equals(id.getRoot())) {
                                String userId = id.getExtension();
                                providerAttribute.setUserId(userId);
                                requestEntity.getSender().setUserId(userId);
                                break;
                            }
                        }
                    }
                }

                // set provider type
                HL7HealthCareProvider healthCareProvider = getHealthCareProvider(requestMessage);
                if (healthCareProvider != null) {
                    CE code = healthCareProvider.getCode();
                    if (code != null) {
                        providerAttribute.setHptCode(code.getCode());
                    }
                    providerAttribute.setJurisdiction(getJurisdictionFromHealthCareProvider(healthCareProvider));
                }
                
                //Hardcode to IND for 301010
                providerAttribute.setPartyType(PARTY_TYPE_CODE_IND);
                
            }
        }
    }

    public abstract String getJurisdictionFromHealthCareProvider(HL7HealthCareProvider healthCareProvider);

    protected MFMIMT700701AuthorOrPerformer getPerformer(HL7RequestMessage providerMessage) {
        return getAuthorOrPerformer(providerMessage, PERFORMER_TYPE_CODE);
    }

    protected MFMIMT700701AuthorOrPerformer getAuthor(HL7RequestMessage providerMessage) {
        return getAuthorOrPerformer(providerMessage, AUTHOR_TYPE_CODE);
    }

    protected MFMIMT700701AuthorOrPerformer getAuthorOrPerformer(HL7RequestMessage providerMessage, String type) {
        List<MFMIMT700701AuthorOrPerformer> authorsOrPerformers = null;
        try {
            authorsOrPerformers = providerMessage.getControlActProcess().getAuthorOrPerformer();
        } catch (NullPointerException npe) {
            return null;
        }
        if (!CollectionUtils.isEmpty(authorsOrPerformers)) {
            for (MFMIMT700701AuthorOrPerformer authorOrPerformer : authorsOrPerformers) {
                String typeCode = authorOrPerformer.getTypeCode();
                if (type.equals(typeCode)) {
                    return authorOrPerformer;
                }
            }
        }
        return null;
    }

    @Override
    public void setReceiverFields(HL7RequestMessage providerMessage, MaintainProviderRequestEntity requestEntity) {
        super.setReceiverFields(providerMessage, requestEntity);

        HL7HealthCareProvider healthCareProvider = getHealthCareProvider(providerMessage);
        String jurisdiction = getJurisdictionFromHealthCareProvider(healthCareProvider);
        requestEntity.getReceiver().get(0).setJurisdiction(jurisdiction);
    }

    @Override
    public void setSenderFields(HL7RequestMessage providerMessage, MaintainProviderRequestEntity requestEntity) {
        super.setSenderFields(providerMessage, requestEntity);

        MFMIMT700701AuthorOrPerformer performer = getPerformer(providerMessage);
        if (performer != null) {
            String jurisdictionCode = null;
            try {
                final JAXBElement<COCTMT090100AssignedPerson> assignedPersonElement = performer.getAssignedPerson();
                if (assignedPersonElement != null) {
                    COCTMT090100AssignedPerson assignedPerson = assignedPersonElement.getValue();
                    COCTMT150000Organization organization = assignedPerson.getRepresentedOrganization().getValue();
                    List<ON> nameList = organization.getName();
                    if (!CollectionUtils.isEmpty(nameList)) {
                        jurisdictionCode = nameList.get(0).getText();
                    }
                }

            } catch (NullPointerException npe) {

            }
            requestEntity.getSender().setJurisdiction(jurisdictionCode);
        }

        List<II> id = null;
        boolean foundId = true;
        try {
            final HL7ControlActProcess controlActProcess = providerMessage.getControlActProcess();
            id = getControlActProcessSubjectId(controlActProcess);
        } catch (NullPointerException npe) {
            foundId = false;
        }
        if (id == null) {
            foundId = false;
        }
        if (foundId) {
            String registryUserOrgId = ConverterUtils.findIdForOid40(id, SOURCE_USER_OID);
            if (!StringUtils.isEmpty(registryUserOrgId)) {
                requestEntity.getSender().setUserId(registryUserOrgId);
            }
        }
    }

    protected abstract HL7HealthCareProvider getHealthCareProvider(HL7RequestMessage requestMessage);

    protected abstract void setIdentifiers(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider healthCareProvider);

    protected abstract void setNames(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider healthCareProvider);

    protected abstract void setAddresses(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider healthCareProvider);

    protected abstract void setPhonesAndEmail(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider healthCareProvider);

    protected abstract void setConditions(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider healthCareProvider);

    protected abstract void setDemographicDetails(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider healthCareProvider);

    protected abstract void processRelatedToBlocks(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider healthCareProvider);

    protected abstract void setStatuses(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider healthCareProvider);

    protected abstract void setNotes(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider healthCareProvider);

    protected abstract void setDisciplinaryActions(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider healthCareProvider);

    public abstract List<II> getControlActProcessSubjectId(final HL7ControlActProcess controlActProcess);

    protected boolean convertToBoolean(String flag) {
        return "Y".equals(flag);
    }

    public Long stringToLong(String longString) throws ParseException {
        if (org.apache.cxf.common.util.StringUtils.isEmpty(longString)) {
            return null;
        }

        return Long.valueOf(longString);
    }

    protected PersonNameAttribute convertToNameAttribute(EN pn) {
        PersonNameAttribute personNameAttribute = new PersonNameAttribute();

        personNameAttribute.setUncodedType(ConverterUtils.mapPersonNameUse(pn.getUse()));

        List<Serializable> content = pn.getContent();
        for (Serializable serializable : content) {
            if (serializable instanceof JAXBElement) {
                convertNameAttributeContent(personNameAttribute, (JAXBElement) serializable);
            }
        }

        return personNameAttribute;
    }

    private void convertNameAttributeContent(PersonNameAttribute personNameAttribute, JAXBElement jaxbElement) {
        Class declaredType = jaxbElement.getDeclaredType();
        ANY value = (ANY) jaxbElement.getValue();

        if (EnFamily.class
                .equals(declaredType)) {
            personNameAttribute.setLastName(value.getText());
        } else if (EnGiven.class.equals(declaredType)
                //Defect 37 - Do not include Preferred Names
                && !((EnGiven) value).getQualifier().contains("CL")) {
            if (org.apache.commons.lang.StringUtils.isEmpty(personNameAttribute.getFirstName())) {
                personNameAttribute.setFirstName(value.getText());
            } else if (org.apache.commons.lang.StringUtils.isEmpty(personNameAttribute.getMiddleName())) {
                personNameAttribute.setMiddleName(value.getText());
            } else if (org.apache.commons.lang.StringUtils.isEmpty(personNameAttribute.getSecondMiddleName())) {
                personNameAttribute.setSecondMiddleName(value.getText());
            }
        } else if (EnSuffix.class
                .equals(declaredType)) {
            personNameAttribute.setSuffix(value.getText());
        } else if (EnPrefix.class
                .equals(declaredType)) {
            personNameAttribute.setPrefix(value.getText());
        }

    }

    protected void convertAddressAttributeContent(AddressAttribute addressAttribute, JAXBElement jaxbElement) {
        Class declaredType = jaxbElement.getDeclaredType();
        ANY value = (ANY) jaxbElement.getValue();

        final String text = value.getText();

        if (AdxpCity.class
                .equals(declaredType)) {
            addressAttribute.setCity(text);
        } else if (AdxpState.class
                .equals(declaredType)) {
            addressAttribute.setProvince(text);
        } else if (AdxpCountry.class
                .equals(declaredType)) {
            addressAttribute.setCountry(text);
        } else if (AdxpPostalCode.class
                .equals(declaredType)) {
            addressAttribute.setPostalCode(text);
        } else if (AdxpStreetAddressLine.class
                .equals(declaredType)) {
            List<String> streetAddressLines = addressAttribute.getStreetAddressLines();
            if (streetAddressLines
                    == null) {
                streetAddressLines = new ArrayList<String>();
                addressAttribute.setStreetAddressLines(streetAddressLines);
            }

            streetAddressLines.add(text);
        }
    }

    protected void populateAuditInfoTimesFromContent(AuditInfo auditInfo, List<Serializable> content) {
        for (Serializable serializable : content) {
            if (serializable instanceof JAXBElement) {

                JAXBElement jaxbElement = (JAXBElement) serializable;
                ANY value = (ANY) jaxbElement.getValue();

                if (value instanceof TS) {
                    populateAuditInfoFromValidTime(auditInfo, (TS) value);
                }
            }
        }
    }

    protected void populateAuditInfoFromValidTime(AuditInfo auditInfo, TS validTime) {
        auditInfo.setStartDate(getLowTime(validTime));
        auditInfo.setExpiryDate(getHighTime(validTime));
    }

    protected AddressAttribute createAddressAttributeFromHL7Address(AD address, HL7RequestMessage requestMessage) {
        AddressAttribute addressAttribute;
        addressAttribute = new AddressAttribute();
        addressAttribute.setUncodedType(ConverterUtils.convertAddressUse(address.getUse()));
        addressAttribute.setCommunicationPurposeCode(ConverterUtils.convertPurpose(address.getUse()));
        List<Serializable> content = address.getContent();
        for (Serializable serializable : content) {
            if (serializable instanceof JAXBElement) {
                convertAddressAttributeContent(addressAttribute, (JAXBElement) serializable);
            }
        }
        II controlActReferenceId = getControlActReferenceIdFromSerializableList(content);
        AuditInfo auditInfo = getAuditInfo(controlActReferenceId, requestMessage);
        addressAttribute.setSource(auditInfo.getDataOwner());

        boolean isUpdateMode = false;
        if (address instanceof PRPMMT301010AssignedEntityAddr) {
            isUpdateMode = ((PRPMMT301010AssignedEntityAddr) address).getUpdateMode() != null;
        }
        if (address instanceof PRPMMT303010ServiceDeliveryLocationAddr) {
            isUpdateMode = ((PRPMMT303010ServiceDeliveryLocationAddr) address).getUpdateMode() != null;
        }
        if (address instanceof PRPMMT303010HealthCareProviderAddr) {
            isUpdateMode = ((PRPMMT303010HealthCareProviderAddr) address).getUpdateMode() != null;
        }
        if (address instanceof PRPMMT301010ServiceDeliveryLocationAddr) {
            isUpdateMode = ((PRPMMT301010ServiceDeliveryLocationAddr) address).getUpdateMode() != null;
        }
        if (address instanceof PRPMMT301010HealthCareProviderAddr) {
            isUpdateMode = ((PRPMMT301010HealthCareProviderAddr) address).getUpdateMode() != null;
        }
        if (isUpdateMode) {
            addressAttribute.setEndReasonCode(auditInfo.getReasonCode());
        }

        populateAuditInfoTimesFromContent(auditInfo, content);
        addressAttribute.setStartDate(auditInfo.getStartDate());
        addressAttribute.setExpiryDate(auditInfo.getExpiryDate());
        return addressAttribute;
    }

    protected abstract AuditInfo getAuditInfo(II controlActReferenceId, HL7RequestMessage requestMessage);

    protected List<PersonNameAttribute> createPersonNameAttributesFromHL7Names(List<EN> names, HL7RequestMessage requestMessage) {
        List<PersonNameAttribute> personNameAttributes = null;
        if (!CollectionUtils.isEmpty(names)) {
            personNameAttributes = new ArrayList<PersonNameAttribute>();

            boolean firstNameFound = true;
            for (EN name : names) {
                final PersonNameAttribute nameAttribute = convertToNameAttribute(name);
                nameAttribute.setPreferred(firstNameFound);
                personNameAttributes.add(nameAttribute);
                firstNameFound = false;

                II controlActReferenceId = getControlActReferenceIdFromSerializableList(name.getContent());
                AuditInfo auditInfo = getAuditInfo(controlActReferenceId, requestMessage);

                nameAttribute.setSource(auditInfo.getDataOwner());
//                 Not sure what the type is here -- probably have to debug it

                boolean isUpdateMode = false;

                if (name instanceof PRPMMT303010PrincipalOrganizationName) {
                    isUpdateMode = ((PRPMMT303010PrincipalOrganizationName) name).getUpdateMode() != null;
                }
                if (name instanceof PRPMMT303010PrincipalPersonName) {
                    isUpdateMode = ((PRPMMT303010PrincipalPersonName) name).getUpdateMode() != null;
                }
                if (name instanceof PRPMMT301010PrincipalOrganizationName) {
                    isUpdateMode = ((PRPMMT301010PrincipalOrganizationName) name).getUpdateMode() != null;
                }
                if (name instanceof PRPMMT301010PrincipalPersonName) {
                    isUpdateMode = ((PRPMMT301010PrincipalPersonName) name).getUpdateMode() != null;
                }
                if (name instanceof PRPMMT309000PrincipalPersonName) {
                    isUpdateMode = ((PRPMMT309000PrincipalPersonName) name).getUpdateMode() != null;
                }
                if (isUpdateMode) {
                    nameAttribute.setEndReasonCode(auditInfo.getReasonCode());
                }
                List<Serializable> content = name.getContent();
                populateAuditInfoTimesFromContent(auditInfo, content);
                nameAttribute.setStartDate(auditInfo.getStartDate());
                nameAttribute.setExpiryDate(auditInfo.getExpiryDate());
            }
        }
        return personNameAttributes;
    }

    protected static Date getLowTime(TS validTime) {
        return getTimeFromTS(validTime, TS_TIME_LABEL_LOW);
    }

    protected static Date getHighTime(TS validTime) {
        return getTimeFromTS(validTime, TS_TIME_LABEL_HIGH);
    }

    protected static Date getTimeFromTS(TS validTime, String label) {
        if (validTime != null) {
            if (!(validTime instanceof IVLTS)) {
                return null;
            }
            IVLTS validTimeIVLTS = (IVLTS) validTime;
            List<JAXBElement<? extends QTY>> rests = validTimeIVLTS.getRest();

            for (JAXBElement<? extends QTY> rest : rests) {
                QTY value = rest.getValue();

                if (value instanceof IVXBTS) {
                    String timeLabel = rest.getName().getLocalPart();

                    if (label.equals(timeLabel)) {
                        IVXBTS ivlts = (IVXBTS) value;
                        String timeValue = ivlts.getValue();
                        return ConverterUtils.convertFromHL7StringToDate(timeValue);
                    }
                }
            }
        }
        return null;
    }

    static II getControlActReferenceIdFromSerializableList(List<Serializable> namesAuditContent) {
        II controlActReferenceId = null;
        for (Serializable serializable : namesAuditContent) {
            if (serializable instanceof JAXBElement) {

                JAXBElement jaxbElement = (JAXBElement) serializable;
                ANY value = (ANY) jaxbElement.getValue();

                if ("controlActReferenceId".equals(jaxbElement.getName().getLocalPart())) {
                    if (value instanceof II) {
                        II tempControlActReferenceId = (II) value;

                        if (OidsUser.AUDIT_INFO_POINTER_OID.equals(tempControlActReferenceId.getRoot())) {
                            controlActReferenceId = tempControlActReferenceId;
                            break;
                        }
                    }
                }
            }
        }
        return controlActReferenceId;
    }

    protected void createPhoneOrEmailAttribute(TEL tel, List<PhoneAttribute> phoneAttributeList, List<EmailAttribute> emailAttributeList, HL7RequestMessage requestMessage) {
        String value = tel.getValue();
        List<String> use = tel.getUse();
        String purpose = ConverterUtils.convertPurpose(use);
        URI uri = null;
        String scheme = null;
        String schemeSpecificPart = null;
        if (!StringUtils.isEmpty(value)) {
            try {
                uri = new URI(value);
            } catch (URISyntaxException ex) {
                throw new IllegalArgumentException(ex);
            }
            scheme = uri.getScheme();
            schemeSpecificPart = uri.getSchemeSpecificPart();
        }
        String type = ConverterUtils.convertToPlrType(scheme, use);
        if (isPhoneType(scheme)) {
            PhoneAttribute phoneAttribute = new PhoneAttribute();
            phoneAttribute.setUncodedType(type);
            phoneAttribute.setCommunicationPurposeCode(purpose);
            
            String phoneNumber = schemeSpecificPart;
            phoneAttribute.setRawValue(phoneNumber);
            if (phoneNumber != null) {

                int phoneNumberLength = phoneNumber.length();
                if (phoneNumberLength <= 3) {
                    phoneAttribute.setAreaCode(phoneNumber);
                } else {
                    phoneAttribute.setAreaCode(phoneNumber.substring(0, 3));
                    if (phoneNumberLength <= 10) {
                        phoneAttribute.setNumber(phoneNumber.substring(3));
                    } else if (phoneNumberLength > 10) {
                        phoneAttribute.setNumber(phoneNumber.substring(3, 10));
                        phoneAttribute.setExtension(phoneNumber.substring(10));
                    }
                }
            }
            phoneAttributeList.add(phoneAttribute);
            setCommonAttributeProperties(phoneAttribute, tel, requestMessage);
        } else if (isElectronicType(scheme)) {
            EmailAttribute emailAttribute = new EmailAttribute();
            emailAttribute.setUncodedType(type);
            emailAttribute.setCommunicationPurposeCode(purpose);
            emailAttribute.setAddress(schemeSpecificPart);
            emailAttributeList.add(emailAttribute);
            setCommonAttributeProperties(emailAttribute, tel, requestMessage);
        } else {
            // If scheme is not recognized, pass-through data as email attribute.
            EmailAttribute emailAttribute = new EmailAttribute();
            emailAttribute.setCommunicationPurposeCode(purpose);
            emailAttribute.setAddress(schemeSpecificPart);
            emailAttributeList.add(emailAttribute);
            setCommonAttributeProperties(emailAttribute, tel, requestMessage);
        }
    }

    private static boolean isElectronicType(String scheme) {
        return ConverterUtils.SCHEME_HTTP.equals(scheme)
                || ConverterUtils.SCHEME_FTP.equals(scheme)
                || ConverterUtils.SCHEME_EMAIL.equals(scheme);
    }

    private static boolean isPhoneType(String scheme) {
        return ConverterUtils.SCHEME_MODEM.equals(scheme)
                || ConverterUtils.SCHEME_FAX.equals(scheme)
                || ConverterUtils.SCHEME_TEL.equals(scheme);
    }

    private void setCommonAttributeProperties(Attribute attribute, TEL tel, HL7RequestMessage requestMessage) {
        if (attribute != null) {
            TelAdapter telAdapter = new TelAdapter(tel);

            AuditInfo auditInfo = getAuditInfo(telAdapter.controlActReferenceId, requestMessage);
            attribute.setSource(auditInfo.getDataOwner());
            if (telAdapter.isUpdateMode) {
                attribute.setEndReasonCode(auditInfo.getReasonCode());
            }
            populateAuditInfoFromValidTime(auditInfo, telAdapter.validTime);
            attribute.setStartDate(auditInfo.getStartDate());
            attribute.setExpiryDate(auditInfo.getExpiryDate());
        }
    }
    
    /**
     * PRPMMT301010HealthCareProviderTelecom etc. are generated classes that
     * shouldn't be refactored, so this adapts them to a common interface.
     *
     * @author david.sharpe
     */
    private static final class TelAdapter {

        II controlActReferenceId;
        boolean isUpdateMode;
        TS validTime;

        public TelAdapter(TEL tel) {
            if (tel instanceof PRPMMT301010HealthCareProviderTelecom) {
                PRPMMT301010HealthCareProviderTelecom typedTel = (PRPMMT301010HealthCareProviderTelecom) tel;
                init(typedTel.getControlActReferenceId(), typedTel.getUpdateMode() != null, typedTel.getValidTime());
            } else if (tel instanceof PRPMMT301010ServiceDeliveryLocationTelecom) {
                PRPMMT301010ServiceDeliveryLocationTelecom typedTel = (PRPMMT301010ServiceDeliveryLocationTelecom) tel;
                init(typedTel.getControlActReferenceId(), typedTel.getUpdateMode() != null, typedTel.getValidTime());
            } else if (tel instanceof PRPMMT303010HealthCareProviderTelecom) {
                PRPMMT303010HealthCareProviderTelecom typedTel = (PRPMMT303010HealthCareProviderTelecom) tel;
                init(typedTel.getControlActReferenceId(), typedTel.getUpdateMode() != null, typedTel.getValidTime());
            } else if (tel instanceof PRPMMT303010ServiceDeliveryLocationTelecom) {
                PRPMMT303010ServiceDeliveryLocationTelecom typedTel = (PRPMMT303010ServiceDeliveryLocationTelecom) tel;
                init(typedTel.getControlActReferenceId(), typedTel.getUpdateMode() != null, typedTel.getValidTime());
            } else {
                throw new IllegalArgumentException(String.format("unsupported class: '%s'", tel));
            }
        }

        private void init(II ii, boolean isUpdateMode, TS ts) {
            this.controlActReferenceId = ii;
            this.isUpdateMode = isUpdateMode;
            this.validTime = ts;
        }
    }
}

