/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.facilitytofhir;

import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import ca.bc.gov.health.plr.dto.facility.esb.CivicAddressDto;
import ca.bc.gov.health.plr.dto.facility.esb.FacilityDetailsDto;
import ca.bc.gov.health.plr.dto.facility.esb.FacilityDto;
import ca.bc.gov.health.plr.dto.facility.esb.FacilityIdentifierDto;
import ca.bc.gov.health.plr.dto.facility.esb.FacilityNameDto;
import ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.FhirContextFactory;
import ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants;
import ca.uhn.fhir.parser.DataFormatException;
import ca.uhn.fhir.parser.IParser;
import ca.uhn.fhir.validation.FhirValidator;
import ca.uhn.fhir.validation.SingleValidationMessage;
import ca.uhn.fhir.validation.ValidationResult;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hl7.fhir.r4bc1.model.BCLocation;
import org.hl7.fhir.r4.model.Period;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.TELECOM_TYPE_EMAIL;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.TELECOM_TYPE_FAX;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.TELECOM_TYPE_FTP;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.TELECOM_TYPE_HTTP;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.TELECOM_TYPE_MOBILE;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.TELECOM_TYPE_MODEM;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.TELECOM_TYPE_PAGER;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.TELECOM_TYPE_TELEPHONE;
import ca.uhn.fhir.validation.ValidationOptions;

/**
 * Class for mapping components between PLR Facility and FHIR BCLocation
 * resource.
 *
 * @author dan.stepanov
 */
public class MapFacilityToBCLocationFhir implements ProviderFhirConstants, Serializable {

    private static final String CLASSNAME = MapFacilityToBCLocationFhir.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    FacilityDto facilityDetails = new FacilityDto();

    public static void addFacilityCivicAddressToBCLocation(FHIRFactory factory, CivicAddressDto facilityCivicAddressDto, Object bcLocationFhir) {

        // create address types civic FHIR model
        Object bcLocationCivicAddressFhir = factory.newBCAddress();

        factory.getSetCivicAddressAttributes().addCivicAddressPeriod(bcLocationCivicAddressFhir, facilityCivicAddressDto.getEffectiveStartDate(), facilityCivicAddressDto.getEffectiveEndDate());
        factory.getSetLocationAttributes().setLocationLatLong(bcLocationFhir, facilityCivicAddressDto.getLatitude(), facilityCivicAddressDto.getLongitude());
        factory.getSetCivicAddressAttributes().setCivicAddressCityStateCountry(bcLocationCivicAddressFhir, facilityCivicAddressDto.getCity(), facilityCivicAddressDto.getProvinceOrStateTxt(), facilityCivicAddressDto.getCountryCode());
        factory.getSetCivicAddressAttributes().setCivicAddressType(bcLocationCivicAddressFhir);
        factory.getSetCivicAddressAttributes().setCivicAddressAddressLines(bcLocationCivicAddressFhir, facilityCivicAddressDto.getAddressLineOne(), facilityCivicAddressDto.getAddressLineTwo(), facilityCivicAddressDto.getAddressLineThree());
        factory.getSetCivicAddressAttributes().setCivicAddressUse(bcLocationCivicAddressFhir);
        factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(bcLocationCivicAddressFhir, facilityCivicAddressDto.getEndReasonCode(), facilityCivicAddressDto.getDataOwnerCode());
        Object CHSAExtension = factory.newCHSAExtension();
        factory.getSetCHSAExtensionAttributes().setCHSAExtensionCode(CHSAExtension, facilityCivicAddressDto.getChsaHealthAreaCode());
        factory.getSetLocationAttributes().setLocationCHSAExtension(bcLocationFhir, CHSAExtension);
        factory.getSetLocationAttributes().setLocationCivicAddress(bcLocationFhir, bcLocationCivicAddressFhir);
    }

    public static void addFacilityNameToBCLocation(FHIRFactory factory, FacilityNameDto facilityNameDto, Object bcLocationFhir) {

        Object name = factory.newBCName();
        factory.getSetNameAttributes().setNameValue(name, facilityNameDto.getName());
        factory.getSetNameAttributes().setNameERCOwner(name, facilityNameDto.getEndReasonCode(), facilityNameDto.getDataOwnerCode());
        factory.getSetNameAttributes().setNamePeriod(name, facilityNameDto.getEffectiveStartDate(), facilityNameDto.getEffectiveEndDate());

        // get facility description from the facilityNameDto and add alias value in FHIR BCLocation alias
        factory.getSetLocationAttributes().addLocationAlias(bcLocationFhir, facilityNameDto.getDescription());

        factory.getSetLocationAttributes().setLocationName(bcLocationFhir, name);

        String jsonParsedBCLocationFhir = factory.parseEncodedBcLocation(bcLocationFhir);

        LOG.log(Level.INFO, "MapFacilityToBCLocationFhir addFacilityNameToBCLocation jsonParsedBCLocationFhir: {0}.",
                new Object[]{jsonParsedBCLocationFhir});

    }

    public static void addFacilityIdentifiersToBCLocation(FHIRFactory factory, List<FacilityIdentifierDto> facilityIdentifiers, Object bcLocationFhir) {

        // get period time for each identifier FID/CFN
        Period bcLocationIdentifierPeriod = new Period();

        List<Object> bcLocationIdentifiers = new ArrayList<>();

        if (!facilityIdentifiers.isEmpty()) {

            for (FacilityIdentifierDto facilityIdentifierDto : facilityIdentifiers) {

                // set the identifier
                Object identifier = factory.getSetIdentifierAttributes().addBCIdentifier(bcLocationFhir, "http://hl7.org/fhir/ca-bc/provider/identifier/" + facilityIdentifierDto.getIdentifierTypeCode(), facilityIdentifierDto.getIdentifier(), facilityIdentifierDto.getEffectiveStartDate(), facilityIdentifierDto.getEffectiveEndDate(), FHIRFactory.IdentifierUse.OFFICIAL);

                // owner and erc
                factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(identifier, facilityIdentifierDto.getEndReasonCode(), facilityIdentifierDto.getDataOwnerCode());
            }
        }

    }

    public static void addFacilityMailAddressToBCLocationAddress(FHIRFactory factory, AddressDto facilityMailAddress, Object bcLocationFhir) {

        // create address types civic FHIR model
        Object bcLocationMailingAddressFhir = factory.newBCAddress();

        factory.getSetAddressAttributes().addAddressPeriod(bcLocationMailingAddressFhir, facilityMailAddress.getEffectiveStartDate(), facilityMailAddress.getEffectiveEndDate());
        factory.getSetAddressAttributes().setAddressCityStateCountry(bcLocationMailingAddressFhir, facilityMailAddress.getCity(), facilityMailAddress.getProvinceOrStateTxt(), facilityMailAddress.getCountryCode());
        factory.getSetAddressAttributes().setAddressType(bcLocationMailingAddressFhir, FHIRFactory.AddressType.POSTAL);
        factory.getSetAddressAttributes().setAddressLines(bcLocationMailingAddressFhir, facilityMailAddress.getAddressLineOne(), facilityMailAddress.getAddressLineTwo(), facilityMailAddress.getAddressLineThree());

        // add BC (business contact) to all Facilities/Locations as use/purpose
        Object cc = factory.newCodeableConcept();
        Object coding = factory.newCoding();
        factory.getSetCodingAttributes().setCodingSystem(coding, BC_COMM_PURPOSE_CODING_SYSTEM_LINK);
        factory.getSetCodingAttributes().setCodingCode(coding, "BC");
        factory.getSetCodeableConceptAttributes().setCoding(cc, coding);
        factory.getSetPurposeCodeAttributes().setPurposeCoding(bcLocationMailingAddressFhir, cc);

        factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(bcLocationMailingAddressFhir, facilityMailAddress.getEndReasonCode(), facilityMailAddress.getDataOwnerCode());

        factory.getSetLocationAttributes().setLocationAddress(bcLocationFhir, bcLocationMailingAddressFhir);

    }

    public static void addFacilityDetailsToBCLocation(FHIRFactory factory, FacilityDetailsDto facilityDetailsDto, Object bcLocationFhir) {

        factory.getSetLocationAttributes().setLocationDescription(bcLocationFhir, facilityDetailsDto.getAdditionalInfo());
        factory.getSetLocationAttributes().setLocationType(bcLocationFhir, facilityDetailsDto.getTypeCode());
        factory.getSetLocationAttributes().setLocationPhysicalType(bcLocationFhir, facilityDetailsDto.getPurposeCode());
        Object detailsExt = factory.newBCFacilityDetailsExtension();
        factory.getSetFacilityDetailsAttributes().setDetailsMisc(detailsExt, facilityDetailsDto.getCampusOfCare(), facilityDetailsDto.getContactName(), facilityDetailsDto.getOperatorName(), facilityDetailsDto.getOwnerName());
        factory.getSetFacilityDetailsAttributes().addDetailsPeriod(detailsExt, facilityDetailsDto.getEffectiveStartDate(), facilityDetailsDto.getEffectiveEndDate());
        factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(detailsExt, facilityDetailsDto.getEndReasonCode(), facilityDetailsDto.getDataOwnerCode());
        factory.getSetLocationAttributes().setLocationDetails(bcLocationFhir, detailsExt);
    }

    public static void addFacilityTelecomToBCLocation(FHIRFactory factory, List<TelecommunicationDto> facilityTelecoms, Object bcLocationFhir) {
        List<Object> locationTelecomsFhir = new ArrayList<>();

        if (!facilityTelecoms.isEmpty()) {
            for (TelecommunicationDto facilityTelecomDto : facilityTelecoms) {
                // telecom type code phone
                if (facilityTelecomDto.getTypeCode().contains(TELECOM_TYPE_TELEPHONE)) {
                    commonTelecomCode(factory, locationTelecomsFhir, factory.newBCContactPoint(), facilityTelecomDto, factory.newPeriod(), FHIRFactory.ContactPointSystem.PHONE, facilityTelecomDto.getCommunicationPurposeCode());
                }

                // telecom type code fax
                if (facilityTelecomDto.getTypeCode().contains(TELECOM_TYPE_FAX)) {
                    commonTelecomCode(factory, locationTelecomsFhir, factory.newBCContactPoint(), facilityTelecomDto, factory.newPeriod(), FHIRFactory.ContactPointSystem.FAX, facilityTelecomDto.getCommunicationPurposeCode());
                }

                // telecom type code pager
                if (facilityTelecomDto.getTypeCode().contains(TELECOM_TYPE_PAGER)) {
                    commonTelecomCode(factory, locationTelecomsFhir, factory.newBCContactPoint(), facilityTelecomDto, factory.newPeriod(), FHIRFactory.ContactPointSystem.PAGER, facilityTelecomDto.getCommunicationPurposeCode());
                }

                // telecom type code modem
                if (facilityTelecomDto.getTypeCode().equalsIgnoreCase(TELECOM_TYPE_MODEM)) {
                    commonTelecomCode(factory, locationTelecomsFhir, factory.newBCContactPoint(), facilityTelecomDto, factory.newPeriod(), FHIRFactory.ContactPointSystem.OTHER, facilityTelecomDto.getCommunicationPurposeCode());
                }

                // telecom type code mobile
                if (facilityTelecomDto.getTypeCode().equalsIgnoreCase(TELECOM_TYPE_MOBILE)) {
                    commonTelecomCode(factory, locationTelecomsFhir, factory.newBCContactPoint(), facilityTelecomDto, factory.newPeriod(), FHIRFactory.ContactPointSystem.PHONE, facilityTelecomDto.getCommunicationPurposeCode());
                }
            }
        }

        //add phone/fax/pager/mobile to BCLocation telecom list and set telecom list to FHIR BCLocation
        for (Object cp : locationTelecomsFhir) {
            factory.getSetLocationAttributes().addLocationTelecom(bcLocationFhir, cp);
        }
    }

    private static void commonTelecomCode(FHIRFactory factory, List<Object> locationTelecomsFhir, Object telecomFhir, TelecommunicationDto facilityTelecomDto, Object fhirPeriodTelephone, FHIRFactory.ContactPointSystem system, String use) {
        // get phone values from the TelecommunicationDto and set contact system point code
        factory.getSetContactPointAttributes().setContactPointSystem(telecomFhir, system);

        // populate the three parts of the telephone in the contact point
        factory.getSetContactPointAttributes().setContactPointTelephone(telecomFhir, facilityTelecomDto.getAreaCode(), facilityTelecomDto.getNumber(), facilityTelecomDto.getExtension());

        Object ercOwnerExtension = factory.newBCEndReasonCode_OwnerCodeExtension();
        if (facilityTelecomDto.getEndReasonCode() != null) {
            Object cc = factory.newCodeableConcept();
            factory.getSetCodeableConceptAttributes().setCodeableConceptText(cc, facilityTelecomDto.getEndReasonCode());
            factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().setERCOwner_EndReasonCode(ercOwnerExtension, cc);
        }

        if (facilityTelecomDto.getDataOwnerCode() != null) {
            Object ownerIdentifier = factory.newIdentifier();
            factory.getSetIdentifierAttributes().setIdentifierAssigner(ownerIdentifier, facilityTelecomDto.getDataOwnerCode());
            factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().setERCOwner_Custodian(ercOwnerExtension, ownerIdentifier);
        }

        factory.getSetContactPointAttributes().setContactPointERCOwner(telecomFhir, ercOwnerExtension);

        // add phone FHIR use - purpose of this contact point -- TEMP!
        // we need to add extensions to map communication purpose codes i.e. MC/OC/BC/HC etc...
        // add use/purpose
        Object cc = factory.newCodeableConcept();
        Object coding = factory.newCoding();
        factory.getSetCodingAttributes().setCodingSystem(coding, BC_COMM_PURPOSE_CODING_SYSTEM_LINK);
        factory.getSetCodingAttributes().setCodingCode(coding, use);
        factory.getSetCodeableConceptAttributes().setCoding(cc, coding);
        factory.getSetPurposeCodeAttributes().setPurposeCoding(telecomFhir, cc);

        // set FHIR period start/end date w/effective start/end dates from telecom
        factory.getSetPeriodAttributes().addPeriod(telecomFhir, facilityTelecomDto.getEffectiveStartDate(), facilityTelecomDto.getEffectiveEndDate());

        locationTelecomsFhir.add(telecomFhir);
    }

//    public String mapFacilityElectronicAddressToBCLocationTelecom(FacilityDto bcFacilityDetails) throws Exception {
//
//        List<ElectronicAddressDto> facilityElectronicAddressDtos = new ArrayList<>();
//        facilityElectronicAddressDtos = bcFacilityDetails.getElectronicAddresses();
//
//        BCLocation bcLocationFhir = new BCLocation();
//        String jsonParsedBCLocationFhir = null;
//
//        addFacilityElectronicAddressToBCLocation(facilityElectronicAddressDtos, bcLocationFhir);
//
//        jsonParsedBCLocationFhir = parseEncodedBCLocation(bcLocationFhir);
//
//        // validate new BCLocation resource w/identifier structure
//        validateBCLocationFhir(initializeFhirValidator(), jsonParsedBCLocationFhir);
//
//        return jsonParsedBCLocationFhir;
//    }
    public static void addFacilityElectronicAddressToBCLocation(FHIRFactory factory, List<ElectronicAddressDto> facilityElectronicAddressDtos, Object bcLocationFhir) {

        List<Object> locationElectronicAddressTelecomsFhir = new ArrayList<Object>();

        if (!facilityElectronicAddressDtos.isEmpty()) {

            for (ElectronicAddressDto locationElectronicAddressDto : facilityElectronicAddressDtos) {
                // telecom type code email
                if (locationElectronicAddressDto.getTypeCode().contains(TELECOM_TYPE_EMAIL)) {
                    commonEAddress(factory, locationElectronicAddressTelecomsFhir, factory.newBCContactPoint(), locationElectronicAddressDto, factory.newPeriod(), FHIRFactory.ContactPointSystem.EMAIL, locationElectronicAddressDto.getCommunicationPurposeCode());
                }

                // telecom type code ftp
                if (locationElectronicAddressDto.getTypeCode().contains(TELECOM_TYPE_FTP)) {
                    commonEAddress(factory, locationElectronicAddressTelecomsFhir, factory.newBCContactPoint(), locationElectronicAddressDto, factory.newPeriod(), FHIRFactory.ContactPointSystem.URL, locationElectronicAddressDto.getCommunicationPurposeCode());
                }

                // telecom type code http
                if (locationElectronicAddressDto.getTypeCode().contains(TELECOM_TYPE_HTTP)) {
                    commonEAddress(factory, locationElectronicAddressTelecomsFhir, factory.newBCContactPoint(), locationElectronicAddressDto, factory.newPeriod(), FHIRFactory.ContactPointSystem.URL, locationElectronicAddressDto.getCommunicationPurposeCode());
                }

            }
        }

        // end reason code - will need an extension TODO!
        // data owner code/name - check if we need extensions - TODO!
        // telecom purpose codes will need extensions for telecom specific email/ftp/http
        for (Object cp : locationElectronicAddressTelecomsFhir) {
            factory.getSetLocationAttributes().addLocationTelecom(bcLocationFhir, cp);
        }
    }

    private static void commonEAddress(FHIRFactory factory, List<Object> locationElectronicAddressTelecomsFhir, Object eAddrFhir, ElectronicAddressDto locationElectronicAddressDto, Object fhirPeriodEmail, FHIRFactory.ContactPointSystem system, String use) {

        factory.getSetContactPointAttributes().setContactPointSystem(eAddrFhir, system);

        Object ercOwnerExtension = factory.newBCEndReasonCode_OwnerCodeExtension();
        if (locationElectronicAddressDto.getEndReasonCode() != null) {
            Object cc = factory.newCodeableConcept();
            factory.getSetCodeableConceptAttributes().setCodeableConceptText(cc, locationElectronicAddressDto.getEndReasonCode());
            factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().setERCOwner_EndReasonCode(ercOwnerExtension, cc);
        }

        if (locationElectronicAddressDto.getDataOwnerCode() != null) {
            Object ownerIdentifier = factory.newIdentifier();
            factory.getSetIdentifierAttributes().setIdentifierAssigner(ownerIdentifier, locationElectronicAddressDto.getDataOwnerCode());
            factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().setERCOwner_Custodian(ercOwnerExtension, ownerIdentifier);
        }

        factory.getSetContactPointAttributes().setContactPointERCOwner(eAddrFhir, ercOwnerExtension);

        // set email FHIR value
        if (locationElectronicAddressDto.getAddress() != null && !locationElectronicAddressDto.getAddress().isEmpty()) {
            factory.getSetContactPointAttributes().setContactPointValue(eAddrFhir, locationElectronicAddressDto.getAddress());
        }

        // add email FHIR use - work purpose of this contact point -- TEMP!
        // we need to add extensions to map communication purpose codes i.e. MC/OC/BC/HC etc...
        // add use/purpose
        Object cc = factory.newCodeableConcept();
        Object coding = factory.newCoding();
        factory.getSetCodingAttributes().setCodingSystem(coding, BC_COMM_PURPOSE_CODING_SYSTEM_LINK);
        factory.getSetCodingAttributes().setCodingCode(coding, use);
        factory.getSetCodeableConceptAttributes().setCoding(cc, coding);
        factory.getSetPurposeCodeAttributes().setPurposeCoding(eAddrFhir, cc);

        // set FHIR period start/end date w/effective start/end dates from telecom
        factory.getSetPeriodAttributes().addPeriod(eAddrFhir, locationElectronicAddressDto.getEffectiveStartDate(), locationElectronicAddressDto.getEffectiveEndDate());

        locationElectronicAddressTelecomsFhir.add(eAddrFhir);
    }

    public String parseEncodedBCLocation(BCLocation bcLocation) throws DataFormatException {
        // Instantiate a new JSON parser
        IParser jparser = FhirContextFactory.forR4().newJsonParser();

        // Serialize it
        String serializedBCLocation = jparser.encodeResourceToString(bcLocation);

        LOG.log(Level.INFO, "MapFacilityToBCLocationFhir parseEncodedBCLocation serializedPrac is: {0}.", new Object[]{serializedBCLocation});

        return serializedBCLocation;
    }

    public FhirValidator initializeFhirValidator() {
        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator validator = FhirContextFactory.forR4().newValidator();
        /*
        * set FHIR validator to validate against standard schema during validation
         */
        validator.setValidateAgainstStandardSchema(true);
        return validator;
    }

    public boolean validateBCLocationFhir(FhirValidator validator, String parsedBCLocationFhir) throws DataFormatException {
        // Validate
        ValidationResult validResult = null;
        boolean isLocationResultValid = false;
        try {
            validResult = validator.validateWithResult(parsedBCLocationFhir, new ValidationOptions().addProfile(BC_LOCATION_PROFILE_URL));
        } catch (DataFormatException dfe) {
            LOG.log(Level.SEVERE, "MapFacilityToBCLocationFhir encountered a data format error while validate BCLocation Fhir.");
        } catch (Exception ex) {
            LOG.log(Level.SEVERE, "MapFacilityToBCLocationFhir encountered an error while validating BCLocation Fhir.");
        }
        if (validResult != null && validResult.isSuccessful()) {
            isLocationResultValid = true;
        } else if (validResult != null && !validResult.isSuccessful()) {
            // display the validation issues
            for (SingleValidationMessage validMsg : validResult.getMessages()) {

                LOG.log(Level.INFO, "MapFacilityToBCLocationFhir validation issue severity is: {0} and location is: {1} and message is: {2}.",
                        new Object[]{validMsg.getSeverity(), validMsg.getLocationString(), validMsg.getMessage()});
            }
        }

        LOG.log(Level.INFO, "MapFacilityToBCLocationFhir validateBCLocationFhir isLocationResultValid is: {0}.",
                new Object[]{isLocationResultValid});

        return isLocationResultValid;
    }

}
