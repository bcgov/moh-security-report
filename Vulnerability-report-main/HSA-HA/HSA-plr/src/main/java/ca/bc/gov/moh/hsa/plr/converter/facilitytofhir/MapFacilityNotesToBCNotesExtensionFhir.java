/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.facilitytofhir;

import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import ca.bc.gov.health.plr.dto.facility.esb.FacilityDto;
import ca.bc.gov.health.plr.dto.provider.esb.NoteDto;
import ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.FhirContextFactory;
import ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.BC_LOCATION_PROFILE_URL;
import ca.uhn.fhir.model.api.annotation.Extension;
import ca.uhn.fhir.parser.DataFormatException;
import ca.uhn.fhir.parser.IParser;
import ca.uhn.fhir.validation.FhirValidator;
import ca.uhn.fhir.validation.SingleValidationMessage;
import ca.uhn.fhir.validation.ValidationOptions;
import ca.uhn.fhir.validation.ValidationResult;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Class for mapping components between PLR Facility Notes and BC Notes Custom
 * extension part of BCLocation resource.
 *
 * @author dan.stepanov
 */
public class MapFacilityNotesToBCNotesExtensionFhir implements ProviderFhirConstants, Serializable {

    private static final String CLASSNAME = MapFacilityNotesToBCNotesExtensionFhir.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    FacilityDto facilityDetails = new FacilityDto();

//    public String mapFacilityNotesToBCLocationNotesExt(FacilityDto bcFacilityDetails) throws Exception {
//
//        List<NoteDto> facilityNotes = bcFacilityDetails.getNotes();
//
//        BCLocation bcLocationFhir = new BCLocation();
//
//        String jsonParsedBCLocationFhir = null;
//
//        addFacilityNotesToBCLocation(facilityNotes, bcLocationFhir);
//
//        // add all Facility notes to BCLocation notes custom extension
//        bcNoteExtFhir.setExtension(bcNoteExtensions);
//        bcLocationFhir.setBcNoteExtension(bcNoteExtFhir);
//        // data owner code/name - check if we need extensions - TODO!
//        jsonParsedBCLocationFhir = parseEncodedBCLocation(bcLocationFhir);
//
//        // validate new BCLocation resource w/address structure
//        validateBCLocationFhir(initializeFhirValidator(), jsonParsedBCLocationFhir);
//
//        return jsonParsedBCLocationFhir;
//    }

    public static void addFacilityNotesToBCLocation(FHIRFactory factory, List<NoteDto> facilityNotes, Object bcLocationFhir) {

        if (!facilityNotes.isEmpty()) {

            for (NoteDto facilityNoteDto : facilityNotes) {

                // create BC Note custom extensions FHIR model
                Object bcNoteExtFhir = factory.newBCNoteExtension();

                // create BC Note custom text extension FHIR model
                // get note text values from the facilityNoteDto and set BC note text custom extension string type values
                factory.getSetNoteAttributes().setNoteText(bcNoteExtFhir, facilityNoteDto.getNoteText());

                // get note identifier values from the facilityNoteDto and set BC note identifier custom extension Identifier type values
                //Identifier identifierTypeNote = new Identifier();
                Object identifierTypeNote = factory.newIdentifier();
                factory.getSetIdentifierAttributes().setIdentifierUse(identifierTypeNote, FHIRFactory.IdentifierUse.USUAL);
                factory.getSetIdentifierAttributes().setIdentifierValue(identifierTypeNote, facilityNoteDto.getIdentifier());
                factory.getSetNoteAttributes().setNoteIdentifier(bcNoteExtFhir, identifierTypeNote);

                // get period time for BC Note extension
                factory.getSetPeriodAttributes().addPeriod(bcNoteExtFhir, facilityNoteDto.getEffectiveStartDate(), facilityNoteDto.getEffectiveEndDate());

                Object ercOwnerExtension = factory.newBCEndReasonCode_OwnerCodeExtension();
                if (facilityNoteDto.getEndReasonCode() != null) {
                    Object cc = factory.newCodeableConcept();
                    factory.getSetCodeableConceptAttributes().setCodeableConceptText(cc, facilityNoteDto.getEndReasonCode());
                    factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().setERCOwner_EndReasonCode(ercOwnerExtension, cc);
                }

                if (facilityNoteDto.getDataOwnerCode() != null) {
                    Object ownerIdentifier = factory.newIdentifier();
                    factory.getSetIdentifierAttributes().setIdentifierAssigner(ownerIdentifier, facilityNoteDto.getDataOwnerCode());
                    factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().setERCOwner_Custodian(ercOwnerExtension, ownerIdentifier);
                }

                factory.getSetNoteAttributes().setNoteERCOwner(bcNoteExtFhir, ercOwnerExtension);
                factory.getSetLocationAttributes().setLocationNote(bcLocationFhir, bcNoteExtFhir);
            }
        }
    }

//    public String parseEncodedBCLocation(BCLocation bcLocation) throws DataFormatException {
//        // Instantiate a new JSON parser
//        IParser jparser = FhirContextFactory.forR4().newJsonParser();
//
//        // Serialize it
//        String serializedBCLocation = jparser.encodeResourceToString(bcLocation);
//
//        LOG.log(Level.INFO, "MapFacilityNotesToBCNotesExtensionFhir parseEncodedBCLocation serializedPrac is: {0}.", new Object[]{serializedBCLocation});
//
//        return serializedBCLocation;
//    }

    public FhirValidator initializeFhirValidator() {
        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator validator = FhirContextFactory.forR4().newValidator();
        /*
        * set FHIR validator to validate against standard schema during validation
         */
        validator.setValidateAgainstStandardSchema(true);
        return validator;
    }

    public boolean validateBCLocationFhir(FhirValidator validator, String parsedBCLocationFhir) throws DataFormatException {
        // Validate
        ValidationResult validResult = null;
        boolean isLocationResultValid = false;
        try {
            validResult = validator.validateWithResult(parsedBCLocationFhir, new ValidationOptions().addProfile(BC_LOCATION_PROFILE_URL));
        } catch (DataFormatException dfe) {
            LOG.log(Level.SEVERE, "MapFacilityNotesToBCNotesExtensionFhir encountered a data format error while validate BCLocation Fhir.");
        } catch (Exception ex) {
            LOG.log(Level.SEVERE, "MapFacilityNotesToBCNotesExtensionFhir encountered an error while validating BCLocation Fhir.");
        }
        if (validResult != null && validResult.isSuccessful()) {
            isLocationResultValid = true;
        } else if (validResult != null && !validResult.isSuccessful()) {
            // display the validation issues
            for (SingleValidationMessage validMsg : validResult.getMessages()) {

                LOG.log(Level.INFO, "MapFacilityNotesToBCNotesExtensionFhir validation issue severity is: {0} and location is: {1} and message is: {2}.",
                        new Object[]{validMsg.getSeverity(), validMsg.getLocationString(), validMsg.getMessage()});
            }
        }

        LOG.log(Level.INFO, "MapFacilityNotesToBCNotesExtensionFhir validateBCLocationFhir isLocationResultValid is: {0}.",
                new Object[]{isLocationResultValid});

        return isLocationResultValid;
    }

}
