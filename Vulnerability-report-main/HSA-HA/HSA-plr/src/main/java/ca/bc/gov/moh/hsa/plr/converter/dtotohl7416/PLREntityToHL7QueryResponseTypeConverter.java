package ca.bc.gov.moh.hsa.plr.converter.dtotohl7416;

import ca.bc.gov.moh.hsa.entity.AddressAttribute;
import ca.bc.gov.moh.hsa.entity.CommunicationFunction;
import ca.bc.gov.moh.hsa.entity.DateAttribute;
import ca.bc.gov.moh.hsa.entity.EmailAttribute;
import ca.bc.gov.moh.hsa.entity.IdentifierAttribute;
import ca.bc.gov.moh.hsa.entity.Person;
import ca.bc.gov.moh.hsa.entity.PersonNameAttribute;
import ca.bc.gov.moh.hsa.entity.PhoneAttribute;
import ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils;
import ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser;
import ca.bc.gov.moh.hsa.plr.entity.transaction.AcknowledgementEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ConditionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.CredentialAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.DisciplinaryActionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ExpertiseAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderRelationshipAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.QueryResponseEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.StatusAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.WorkLocationAttribute;
import java.io.Serializable;
import java.math.BigInteger;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.xml.bind.JAXBElement;
import org.apache.camel.Converter;
import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;

import org.hl7.v3.m4_16.ED;
import org.hl7.v3.m4_16.EN;
import org.hl7.v3.m4_16.II;
import org.hl7.v3.m4_16.INT;
import org.hl7.v3.m4_16.IVLTS;
import org.hl7.v3.m4_16.TS;
import org.hl7.v3.m4_16.CE;
import org.hl7.v3.m4_16.AD;
import org.hl7.v3.m4_16.AdxpCity;
import org.hl7.v3.m4_16.AdxpCountry;
import org.hl7.v3.m4_16.AdxpPostalCode;
import org.hl7.v3.m4_16.AdxpState;
import org.hl7.v3.m4_16.AdxpStreetAddressLine;
import org.hl7.v3.m4_16.CD;
import org.hl7.v3.m4_16.COCTMT090003BCAssignedEntity;
import org.hl7.v3.m4_16.COCTMT090100BCAssignedPerson;
import org.hl7.v3.m4_16.CR;
import org.hl7.v3.m4_16.CS;
import org.hl7.v3.m4_16.CV;
import org.hl7.v3.m4_16.CommunicationFunctionType;
import org.hl7.v3.m4_16.EnFamily;
import org.hl7.v3.m4_16.EnGiven;
import org.hl7.v3.m4_16.EnPrefix;
import org.hl7.v3.m4_16.EnSuffix;
import org.hl7.v3.m4_16.IVXBTS;
import org.hl7.v3.m4_16.MCCIMT000300BCAcknowledgement;
import org.hl7.v3.m4_16.MCCIMT000300BCAcknowledgementDetail;
import org.hl7.v3.m4_16.PN;
import org.hl7.v3.m4_16.MCCIMT000300BCAgent;
import org.hl7.v3.m4_16.MCCIMT000300BCDevice;
import org.hl7.v3.m4_16.MCCIMT000300BCOrganization;
import org.hl7.v3.m4_16.MCCIMT000300BCReceiver;
import org.hl7.v3.m4_16.MCCIMT000300BCSender;
import org.hl7.v3.m4_16.MCCIMT000300BCTargetMessage;
import org.hl7.v3.m4_16.MFMIMT700711BCAuthor;
import org.hl7.v3.m4_16.MFMIMT700711BCCustodian;
import org.hl7.v3.m4_16.MFMIMT700711BCParticipant;
import org.hl7.v3.m4_16.MFMIMT700711BCQueryAck;
import org.hl7.v3.m4_16.ObjectFactory;
import org.hl7.v3.m4_16.PRPMIN306011UV01;
import org.hl7.v3.m4_16.PRPMIN306011UV01MFMIMT700711BCControlActProcess;
import org.hl7.v3.m4_16.PRPMIN306011UV01MFMIMT700711BCRegistrationEvent;
import org.hl7.v3.m4_16.PRPMIN306011UV01MFMIMT700711BCSubject2;
import org.hl7.v3.m4_16.PRPMIN306011UV01MFMIMT700711BCSubject4;
import org.hl7.v3.m4_16.PRPMMT306011BCActDefinitionOrEvent;
import org.hl7.v3.m4_16.PRPMMT306011BCAssignedEntity;
import org.hl7.v3.m4_16.PRPMMT306011BCBirthplace;
import org.hl7.v3.m4_16.PRPMMT306011BCDisciplinaryAction;
import org.hl7.v3.m4_16.PRPMMT306011BCHealthCareProvider;
import org.hl7.v3.m4_16.PRPMMT306011BCHealthCareProviderStatusCode;
import org.hl7.v3.m4_16.PRPMMT306011BCLocation;
import org.hl7.v3.m4_16.PRPMMT306011BCOrganization;
import org.hl7.v3.m4_16.PRPMMT306011BCPlace;
import org.hl7.v3.m4_16.PRPMMT306011BCPrimaryPerformer;
import org.hl7.v3.m4_16.PRPMMT306011BCPrincipalPerson;
import org.hl7.v3.m4_16.PRPMMT306011BCPrivilege;
import org.hl7.v3.m4_16.PRPMMT306011BCQualifiedEntity;
import org.hl7.v3.m4_16.PRPMMT306011BCRelatedTo;
import org.hl7.v3.m4_16.PRPMMT306011BCResponsibleParty;
import org.hl7.v3.m4_16.PRPMMT306011BCServiceDeliveryLocation;
import org.hl7.v3.m4_16.PRPMMT306011BCSubject2;
import org.hl7.v3.m4_16.PRPMMT306011BCTerritorialAuthority;
import org.hl7.v3.m4_16.ST;
import org.hl7.v3.m4_16.SXCMTS;
import org.hl7.v3.m4_16.TEL;

/**
 * Converts a distribution message from the entity format into the HL7 format
 * ready to be converted to XML and sent off to distribution clients.
 *
 * @author greg.perkins
 */
@Converter
public class PLREntityToHL7QueryResponseTypeConverter {

    protected static final ObjectFactory objectFactory = new ObjectFactory();

    /**
     * Address purpose mapping values
     */
    private final static Map<String, String> addressPurposeMap = new HashMap<>();

    /**
     * Object factory for creating JAXB objects
     */
    protected final static ObjectFactory factory = new ObjectFactory();

    /**
     * Initialize mappings with specified values. Maybe this should be
     * externalized?
     */
    static {
        addressPurposeMap.put("M BC", "PST WP");
        addressPurposeMap.put("P BC", "PHYS WP");

        addressPurposeMap.put("M HC", "PST H");
        addressPurposeMap.put("P HC", "PHYS H");

        addressPurposeMap.put("M OC", "PST OTH");
        addressPurposeMap.put("P OC", "PHYS OTH");

        addressPurposeMap.put("M CC", "PST CC");
        addressPurposeMap.put("P CC", "PHYS CC");

        addressPurposeMap.put("M DC", "PST DC");
        addressPurposeMap.put("P DC", "PHYS DC");

        addressPurposeMap.put("M MC", "PST MNC");
        addressPurposeMap.put("P MC", "PHYS MNC");

        addressPurposeMap.put("M EC", "PST EC");
        addressPurposeMap.put("P EC", "PHYS EC");
    }

    public static final SimpleDateFormat YEAR_MONTH_DAY_FORMAT = new SimpleDateFormat("yyyyMMdd");
    public static final SimpleDateFormat DATE_TIME_FORMAT = new SimpleDateFormat("yyyyMMddHHmmss");

    /**
     * By Default SimpleDateFormat objects use Lenient parsing, which will
     * convert invalid dates (such as 2000-01-00) into valid ones (1999-12-31).
     * Turn off lenient mode to enforce strict parsing
     */
    static {
        YEAR_MONTH_DAY_FORMAT.setLenient(false);
        DATE_TIME_FORMAT.setLenient(false);
    }

    public static PRPMIN306011UV01 convertQueryResponseEntityToHL7(QueryResponseEntity in) {
        PRPMIN306011UV01 out = new PRPMIN306011UV01();
        out.setITSVersion("XML_1.0");

        out.setReceiver(new MCCIMT000300BCReceiver());
        out.setSender(new MCCIMT000300BCSender());
        convertHeaderFields(out, in);
        convertReceiver(out, in);
        convertSender(out, in);

        convertAcknowledgements(out, in);

        PRPMIN306011UV01MFMIMT700711BCControlActProcess controlActProcess = new PRPMIN306011UV01MFMIMT700711BCControlActProcess();
        controlActProcess.setPriorityCode(new CV());
        controlActProcess.getPriorityCode().setCode("R");
        out.setControlActProcess(controlActProcess);
        convertAuthor(in, controlActProcess);

        MFMIMT700711BCQueryAck queryAck = new MFMIMT700711BCQueryAck();
        controlActProcess.setQueryAck(queryAck);

        CS queryAckStatusCode = new CS();
        queryAckStatusCode.setCode(in.getStatusCode());
        queryAck.setStatusCode(queryAckStatusCode);

        CS queryResponseCode = new CS();
        queryResponseCode.setCode(in.getResponseCode());
        queryAck.setQueryResponseCode(queryResponseCode);

        List<PRPMIN306011UV01MFMIMT700711BCSubject2> controlActProcessSubjectList = controlActProcess.getSubject();

        Collection<ProviderAttribute> providerDetails = in.getProviderDetails();
        if (!CollectionUtils.isEmpty(providerDetails)) {
            for (ProviderAttribute providerDetail : providerDetails) {
                PRPMIN306011UV01MFMIMT700711BCSubject2 controlActProcessSubject = convertProviderDetails(providerDetail, in.getRegistryOrgUserId(), in.getSourceOrganizationChid());
                controlActProcessSubjectList.add(controlActProcessSubject);
            }
        }

        return out;
    }

    private static void convertAcknowledgements(PRPMIN306011UV01 out, QueryResponseEntity in) {
        List<MCCIMT000300BCAcknowledgement> acks = convertAcknowledgements(in);
        if (!acks.isEmpty()) {
            out.setAcknowledgement(objectFactory.createPRPMIN306011UV01MCCIMT000300BCMessageAcknowledgement(acks.get(0)));
            // If there is more than one ack, add the rest as "details" because the schema supports only one ack.
            for (int i = 1; i < acks.size(); i++) {
                MCCIMT000300BCAcknowledgement ack = acks.get(i);
                out.getAcknowledgement().getValue().getAcknowledgementDetail().add(ack.getAcknowledgementDetail().get(0));
            }
            for (int i = 0; i < acks.size(); i++) {
                if (acks.get(i).getTypeCode() != null && StringUtils.isNotEmpty(acks.get(i).getTypeCode().getCode())) {
                    // There is room in the schema for only one ack.typeCode, so just use the first available and ignore the rest.
                    out.getAcknowledgement().getValue().setTypeCode(acks.get(i).getTypeCode());
                    break;
                }
            }
            if (out.getAcknowledgement().getValue().getTypeCode() == null) {
                // ack.typeCode is mandatory for schema validation.
                out.getAcknowledgement().getValue().setTypeCode(new CS());
            }
        }
    }

    private static List<MCCIMT000300BCAcknowledgement> convertAcknowledgements(QueryResponseEntity entity) {
        List<MCCIMT000300BCAcknowledgement> convertedAcknowledgmentList = new ArrayList<>();
        Collection<AcknowledgementEntity> acknowledgementEntities = entity.getAcknowledgmentAttributes();
        for (AcknowledgementEntity acknowledgementEntity : acknowledgementEntities) {
            MCCIMT000300BCAcknowledgement hl7Acknowledgement = new MCCIMT000300BCAcknowledgement();
            List<MCCIMT000300BCAcknowledgementDetail> acknowledgementDetails = hl7Acknowledgement.getAcknowledgementDetail();

            final String typeCode = acknowledgementEntity.getTypeCode();
            if (!StringUtils.isEmpty(typeCode)) {
                CS typeCodeCS = new CS();
                typeCodeCS.setCode(typeCode);
                hl7Acknowledgement.setTypeCode(typeCodeCS);
            }

            final String messagesWaitingNumber = acknowledgementEntity.getMessagesWaitingNumber();
            if (!StringUtils.isEmpty(messagesWaitingNumber)) {
                INT messagesWaitingElement = new INT();
                messagesWaitingElement.setValue(new BigInteger(messagesWaitingNumber));
                hl7Acknowledgement.setMessageWaitingNumber(messagesWaitingElement);
            }

            MCCIMT000300BCAcknowledgementDetail acknowledgementDetail = new MCCIMT000300BCAcknowledgementDetail();
            acknowledgementDetails.add(acknowledgementDetail);

            final String code = acknowledgementEntity.getCode();
            if (!StringUtils.isEmpty(code)) {
                CE detailCode = new CE();
                detailCode.setCode(code);
                acknowledgementDetail.setCode(detailCode);
            }

            final String text = acknowledgementEntity.getText();
            if (!StringUtils.isEmpty(text)) {
                ST ackDetailTextElement = new ST();
                ackDetailTextElement.setText(text);
                acknowledgementDetail.setText(ackDetailTextElement);
            }

            final String targetMessageID = acknowledgementEntity.getTargetMessageID();
            if (!StringUtils.isEmpty(targetMessageID)) {
                MCCIMT000300BCTargetMessage targetMessageElement = new MCCIMT000300BCTargetMessage();
                hl7Acknowledgement.setTargetMessage(targetMessageElement);

                II targetMessageId = new II();
                targetMessageId.setRoot(OidsUser.ACKNOWLEDGEMENT_OID);
                targetMessageId.setExtension(targetMessageID);
                targetMessageElement.setId(targetMessageId);
            }

            convertedAcknowledgmentList.add(hl7Acknowledgement);
        }
        return convertedAcknowledgmentList;
    }

    private static PRPMIN306011UV01MFMIMT700711BCSubject2 convertProviderDetails(ProviderAttribute providerDetails, String registryOrgUserId, String sourceOrganizationChid) {

        PRPMIN306011UV01MFMIMT700711BCSubject2 controlActProcessSubject = new PRPMIN306011UV01MFMIMT700711BCSubject2();
        PRPMIN306011UV01MFMIMT700711BCRegistrationEvent registrationEvent = new PRPMIN306011UV01MFMIMT700711BCRegistrationEvent();
        controlActProcessSubject.setRegistrationEvent(registrationEvent);
        registrationEvent.setStatusCode(new CS());
        PRPMIN306011UV01MFMIMT700711BCSubject4 subject = new PRPMIN306011UV01MFMIMT700711BCSubject4();
        registrationEvent.setSubject1(subject);
        PRPMMT306011BCHealthCareProvider healthCareProvider = new PRPMMT306011BCHealthCareProvider();
        subject.setHealthCareProvider(healthCareProvider);

        for (IdentifierAttribute id : providerDetails.getCollegeIdentifiers()) {
            healthCareProvider.getId().add(convertIdentifier(id));
        }
        
        // PLR-2154: Schema validation requires 1+ IDs.
        if (healthCareProvider.getId().isEmpty()) {
            healthCareProvider.getId().add(new II());
        }
        
        CE providerPartyType = new CE();
        providerPartyType.setCode(providerDetails.getHptCode());
        providerPartyType.setCodeSystemName("WHICProviderType");
        healthCareProvider.setCode(providerPartyType);        

        for (AddressAttribute addr : providerDetails.getAddresses()) {
            healthCareProvider.getAddr().add(convertAddressToAD(addr));
        }

        for (PhoneAttribute phone : providerDetails.getPhones()) {
            healthCareProvider.getTelecom().add(convertTelecommunicationToTEL(phone));
        }

        for (EmailAttribute email : providerDetails.getEmails()) {
            healthCareProvider.getTelecom().add(convertElectronicAddressToTEL(email));
        }

        for (StatusAttribute status : providerDetails.getStatuses()) {
            if (status.getExpiryDate() == null || status.getExpiryDate().after(new Date())) {
                healthCareProvider.setStatusCode(convertStatusForAdd(status));
            }
        }

        PRPMMT306011BCOrganization issuingOrganization = new PRPMMT306011BCOrganization();
        healthCareProvider.setIssuingOrganization(factory.createPRPMMT306011BCHealthCareProviderIssuingOrganization(issuingOrganization));

        PRPMMT306011BCTerritorialAuthority territory = new PRPMMT306011BCTerritorialAuthority();
        territory.setCode(cv("BC"));

        JAXBElement<PRPMMT306011BCTerritorialAuthority> territorialAuthority = factory.createPRPMMT306011BCOrganizationTerritorialAuthority(territory);
        issuingOrganization.setTerritorialAuthority(territorialAuthority);

        for (DisciplinaryActionAttribute disciplinaryAction : providerDetails.getDisciplinaryActions()) {
            healthCareProvider.getSubjectOf2().add(convertDisciplinaryActionForAdd(disciplinaryAction));
        }
        
        for (ConditionAttribute condition : providerDetails.getConditions()) {
            PRPMMT306011BCResponsibleParty responsibleFor = convertConditionForAdd(condition);
            healthCareProvider.getResponsibleFor().add(responsibleFor);
        }

        for (WorkLocationAttribute workLocation : providerDetails.getWorkLocations()) {
            healthCareProvider.getRelatedTo().add(convertWorkLocationForAdd(workLocation));
        }

        for (CredentialAttribute cred : providerDetails.getCredentials()) {
            healthCareProvider.getRelatedTo().add(convertCredentialForAdd(cred));
        }

        for (ExpertiseAttribute expertise : providerDetails.getExpertises()) {
            healthCareProvider.getRelatedTo().add(convertExpertiseForAdd(expertise));
        }

        for (ProviderRelationshipAttribute rel : providerDetails.getProviderRelationships()) {
            PRPMMT306011BCRelatedTo relatedTo = convertRelationshipForAdd(rel);
            healthCareProvider.getRelatedTo().add(relatedTo);
        }

        if (healthCareProvider.getHealthCarePrincipalPerson() == null) {
            healthCareProvider.setHealthCarePrincipalPerson(objectFactory.createPRPMMT306011BCPrincipalPerson());
        }

        if (!providerDetails.getDemographicDetails().isEmpty()) {
            convertDemographics(providerDetails.getDemographicDetails().get(0),healthCareProvider);
        }
        
        for (PersonNameAttribute name : providerDetails.getPersonNames()) {
            PRPMMT306011BCPrincipalPerson healthCarePrincipalPerson = healthCareProvider.getHealthCarePrincipalPerson();
            healthCarePrincipalPerson.getName().add(convertPersonNameToPN(name));
        }
        
        // PLR-2154: Schema validation requires 1+ names.
        if (healthCareProvider.getHealthCarePrincipalPerson().getName().isEmpty()) {
            healthCareProvider.getHealthCarePrincipalPerson().getName().add(new PN());
        }

        MFMIMT700711BCAuthor author = new MFMIMT700711BCAuthor();
        JAXBElement<MFMIMT700711BCAuthor> authorJaxbElement = factory.createPRPMIN306011UV01MFMIMT700711BCRegistrationEventAuthor(author);
        author.setAssignedEntity(new COCTMT090003BCAssignedEntity());
        registrationEvent.setAuthor(authorJaxbElement);

        registrationEvent.getAuthor()
                .getValue().getAssignedEntity().getId().add(ii(registryOrgUserId, "2.16.840.1.113883.3.40.3.3"));

        MFMIMT700711BCCustodian custodian = new MFMIMT700711BCCustodian();
        custodian.setAssignedEntity(new COCTMT090003BCAssignedEntity());
        registrationEvent.setCustodian(custodian);

        registrationEvent.getCustodian()
                .getAssignedEntity().getId().add(ii(sourceOrganizationChid, "2.16.840.1.113883.3.40.4.2"));
        return controlActProcessSubject;
    }

    public static PRPMMT306011BCHealthCareProviderStatusCode convertStatusForAdd(StatusAttribute status) {
        PRPMMT306011BCHealthCareProviderStatusCode code = new PRPMMT306011BCHealthCareProviderStatusCode();
        code.setCode(status.getUncodedType());
        code.setValidTime(effectiveTime(status.getStartDate(), status.getExpiryDate()));
        return code;
    }

    public static PRPMMT306011BCRelatedTo convertRelationshipForAdd(ProviderRelationshipAttribute rel) {
        PRPMMT306011BCRelatedTo relatedTo = new PRPMMT306011BCRelatedTo();
        PRPMMT306011BCHealthCareProvider relatedProvider = new PRPMMT306011BCHealthCareProvider();
        relatedTo.setHealthCareProvider(factory.createPRPMMT306011BCRelatedToHealthCareProvider(relatedProvider));
        String providerTypeOid = ConverterUtils.getOid(rel.getRelationshipWithProviderType());
        relatedProvider.getId().add(ii(rel.getRelationshipWithProviderCollegeId(), providerTypeOid));
        relatedProvider.setCode(ce(rel.getRelationshipTypeCode()));
        PN pn = new PN();
        pn.getContent().add(rel.getRelationshipWithProviderName());
        relatedProvider.getName().add(pn);
        relatedProvider.setEffectiveTime(effectiveTime(rel.getStartDate(), rel.getExpiryDate()));
        return relatedTo;
    }

    public static PRPMMT306011BCRelatedTo convertExpertiseForAdd(ExpertiseAttribute expertise) {
        PRPMMT306011BCRelatedTo relatedTo = new PRPMMT306011BCRelatedTo();
        PRPMMT306011BCQualifiedEntity qualifiedEntity = new PRPMMT306011BCQualifiedEntity();
        relatedTo.setQualifiedEntity(factory.createPRPMMT306011BCRelatedToQualifiedEntity(qualifiedEntity));
        qualifiedEntity.setCode(ce(expertise.getUncodedType()));
        qualifiedEntity.getCode().setOriginalText(ed(expertise.getSourceCode()));
        qualifiedEntity.setEffectiveTime(effectiveTime(expertise.getStartDate(), expertise.getExpiryDate()));
        return relatedTo;
    }

    public static PRPMMT306011BCRelatedTo convertCredentialForAdd(CredentialAttribute cred) {
        PRPMMT306011BCRelatedTo relatedTo = new PRPMMT306011BCRelatedTo();
        PRPMMT306011BCQualifiedEntity qualifiedEntity = new PRPMMT306011BCQualifiedEntity();
        relatedTo.setQualifiedEntity(factory.createPRPMMT306011BCRelatedToQualifiedEntity(qualifiedEntity));
        qualifiedEntity.setId(ii(cred.getRegistrationNumber(), "2.16.840.1.113883.3.40.1.2"));
        
        CE code = ce(cred.getUncodedType());
        
        // Set Equivalency Flag
        CD value = new CD();
        value.setCode(String.valueOf(cred.isEquivalent()));
        CR qualifier = new CR();
        qualifier.setValue(value);
        //There is a bug in the 4.1.6 schema that prohibits the use of this field, so don't include it.
        //code.getQualifier().add(qualifier);
        
        // Set Designation
        TEL tel = new TEL();
        tel.setValue(cred.getDesignation());
        JAXBElement<TEL> createEDReference = objectFactory.createEDReference(tel);
        ED originalText = new ED();
        originalText.getContent().add(createEDReference);
        code.setOriginalText(originalText);
        
        qualifiedEntity.setCode(code);
        qualifiedEntity.setEffectiveTime(effectiveTime(cred.getStartDate(), cred.getExpiryDate()));
        PRPMMT306011BCOrganization grantingOrg = new PRPMMT306011BCOrganization();
        qualifiedEntity.setQualificationGrantingOrganization(factory.createPRPMMT306011BCQualifiedEntityQualificationGrantingOrganization(grantingOrg));
        grantingOrg.setName(st(cred.getGrantingInstitution()));
        AD addr = new AD();
        grantingOrg.setAddr(addr);
        AdxpCity city = new AdxpCity();
        city.setText(cred.getInstitutionCity());
        addr.getContent().add(city);
        AdxpState state = new AdxpState();
        state.setText(cred.getInstitutionProvStateCode());
        addr.getContent().add(state);
        AdxpCountry country = new AdxpCountry();
        country.setText(cred.getInstitutionCountryCode());
        addr.getContent().add(country);
        return relatedTo;
    }

    public static PRPMMT306011BCRelatedTo convertWorkLocationForAdd(WorkLocationAttribute workLocation) {
        PRPMMT306011BCRelatedTo relatedTo = new PRPMMT306011BCRelatedTo();
        PRPMMT306011BCAssignedEntity assignedEntity = new PRPMMT306011BCAssignedEntity();
        PRPMMT306011BCPrimaryPerformer performer = new PRPMMT306011BCPrimaryPerformer();
        JAXBElement<PRPMMT306011BCPrimaryPerformer> performerJaxbEntity = factory.createPRPMMT306011BCAssignedEntityPerformance(performer);
        PRPMMT306011BCActDefinitionOrEvent event = new PRPMMT306011BCActDefinitionOrEvent();
        PRPMMT306011BCLocation location = new PRPMMT306011BCLocation();
        JAXBElement<PRPMMT306011BCLocation> locationJaxbElement = factory.createPRPMMT306011BCActDefinitionOrEventLocation(location);
        PRPMMT306011BCServiceDeliveryLocation sdl = new PRPMMT306011BCServiceDeliveryLocation();
        PRPMMT306011BCPlace place = new PRPMMT306011BCPlace();
        JAXBElement<PRPMMT306011BCPlace> placeJaxbElement = factory.createPRPMMT306011BCServiceDeliveryLocationLocation(place);
        sdl.setLocation(placeJaxbElement);
        location.setServiceDeliveryLocation(sdl);
        event.setLocation(locationJaxbElement);
        performer.setActDefinitionOrEvent(event);
        assignedEntity.setPerformance(performerJaxbEntity);
        JAXBElement<PRPMMT306011BCAssignedEntity> assignedEntityJaxbElement = factory.createPRPMMT306011BCRelatedToAssignedEntity(assignedEntity);
        relatedTo.setAssignedEntity(assignedEntityJaxbElement);

        boolean defaultFlag = workLocation.isDefaultFlag();
        location.setSequenceNumber(INT(defaultFlag ? 1 : 0));

        sdl.setId(ii(workLocation.getIdentifier(), "2.16.840.1.113883.3.40.1.10"));
        if (CollectionUtils.isNotEmpty(workLocation.getDetails())) {
            sdl.setCode(cv(workLocation.getDetails().get(0).getTypeCode()));
        }
        sdl.setEffectiveTime(effectiveTime(workLocation.getStartDate(), workLocation.getExpiryDate()));

        place.setName(st(workLocation.getName())); //Check mapping - doesn't have primaryWorkLocationDetails
        if (workLocation.getAddresses() != null) {
            for (AddressAttribute address : workLocation.getAddresses()) {
                sdl.getAddr().add(convertAddressToAD(address));
            }
        }
        if (workLocation.getPhoneNumbers() != null) {
            for (PhoneAttribute tele : workLocation.getPhoneNumbers()) {
                sdl.getTelecom().add(convertTelecommunicationToTEL(tele));
            }
        }
        if (workLocation.getEmailAddresses() != null) {
            for (EmailAttribute elec : workLocation.getEmailAddresses()) {
                sdl.getTelecom().add(convertElectronicAddressToTEL(elec));
            }
        }

        return relatedTo;
    }

    /**
     * JIRA-5497 condition code to be included on query response message
     */
    public static PRPMMT306011BCResponsibleParty convertConditionForAdd(ConditionAttribute condition) {
        PRPMMT306011BCResponsibleParty responsibleFor = new PRPMMT306011BCResponsibleParty();
        PRPMMT306011BCPrivilege priv = new PRPMMT306011BCPrivilege();
        responsibleFor.setPrivilege(priv);
        priv.setMoodCode("PERM");
        priv.setId(ii(condition.getId(), OidsUser.CONDITION_OID));
        priv.setCode(cv(condition.getUncodedType()));
        priv.setEffectiveTime(effectiveTime(condition.getStartDate(), condition.getExpiryDate()));
        priv.setConfidentialityCode(cv("R"));
        priv.getConfidentialityCode().setOriginalText(ed(condition.getRestrictionExplanationText()));
        return responsibleFor;
    }

    public static void convertAuthor(QueryResponseEntity in, PRPMIN306011UV01MFMIMT700711BCControlActProcess controlActProcess) {
        MFMIMT700711BCParticipant author = new MFMIMT700711BCParticipant();
        author.setAssignedPerson(new COCTMT090100BCAssignedPerson());
        author.getAssignedPerson().setId(ii(in.getSender().getUserId(), OidsUser.SOURCE_USER_OID));
        author.getAssignedPerson().getId().setAssigningAuthorityName(in.getSender().getJurisdiction());
        author.setTypeCode("PRF");
        controlActProcess.getAuthorOrPerformer().add(author);
        author = new MFMIMT700711BCParticipant();
        author.setAssignedPerson(new COCTMT090100BCAssignedPerson());
        author.getAssignedPerson().setId(ii(in.getResponsibleUserId(), OidsUser.RESPONSIBLE_PERSON_USER_OID));
        author.setTypeCode("AUT");
        controlActProcess.getAuthorOrPerformer().add(author);
    }

    public static void convertSender(PRPMIN306011UV01 out, QueryResponseEntity in) {
        MCCIMT000300BCSender sender = out.getSender();
        sender.setTypeCode(CommunicationFunctionType.SND);
        sender.setTelecom(new TEL());
        sender.getTelecom().setValue(in.getSender().getNetworkAddress());
        sender.setDevice(new MCCIMT000300BCDevice());
        sender.getDevice().getId().add(ii(in.getSender().getFacilityId(), "2.16.840.1.113883.3.40.4.1"));
        sender.getDevice().setName(st(in.getSender().getSystemName()));
        MCCIMT000300BCAgent agent = new MCCIMT000300BCAgent();
        agent.setRepresentedOrganization(factory.createMCCIMT000300BCAgentRepresentedOrganization(new MCCIMT000300BCOrganization()));
        sender.getDevice().setAsAgent(factory.createMCCIMT000300BCDeviceAsAgent(agent));
        sender.getDevice().getAsAgent().getValue().getRepresentedOrganization().getValue().setId(ii(in.getSourceOrganizationChid(), "2.16.840.1.113883.3.40.4.2"));
    }

    public static void convertReceiver(PRPMIN306011UV01 out, QueryResponseEntity in) {
        MCCIMT000300BCReceiver receiver = out.getReceiver();
        receiver.setTypeCode(CommunicationFunctionType.RCV);
        receiver.setTelecom(new TEL());
        CommunicationFunction cf = in.getReceiver().get(0);
        receiver.getTelecom().setValue(cf.getNetworkAddress());
        receiver.setDevice(new MCCIMT000300BCDevice());
        receiver.getDevice().getId().add(ii(cf.getEnvironment(), "2.16.840.1.113883.3.40.1.14"));
        receiver.getDevice().getId().add(ii(cf.getFacilityId(), "2.16.840.1.113883.3.40.5.1"));
        receiver.getDevice().setName(st(cf.getSystemName()));
        MCCIMT000300BCAgent agent = new MCCIMT000300BCAgent();
        agent.setRepresentedOrganization(factory.createMCCIMT000300BCAgentRepresentedOrganization(new MCCIMT000300BCOrganization()));
        receiver.getDevice().setAsAgent(factory.createMCCIMT000300BCDeviceAsAgent(agent));
        receiver.getDevice().getAsAgent().getValue().getRepresentedOrganization().getValue().setId(ii(cf.getOrganizationId(), "2.16.840.1.113883.3.40.4.1"));
    }

    public static void convertHeaderFields(PRPMIN306011UV01 out, QueryResponseEntity in) {
        out.setId(ii(in.getMessageId(), "2.16.840.1.113883.3.40.1.5"));
        final Date creationTime = in.getCreationTime();
        if (creationTime != null) {
            out.setCreationTime(convertToTS(creationTime));
        }
        out.setVersionCode(cs(in.getVersionNumber()));
        out.setInteractionId(ii(in.getInteractionId(), "2.16.840.1.113883.3.40.3.1"));
        out.getProfileId().add(ii(in.getRelease(), "2.16.840.1.113883.3.40.1.7"));
        out.setProcessingCode(cs("P"));
        out.setProcessingModeCode(cs("T"));
        out.setAcceptAckCode(cs("AA"));
    }

    public static PRPMMT306011BCSubject2 convertDisciplinaryActionForAdd(DisciplinaryActionAttribute disciplinaryAction) {
        PRPMMT306011BCSubject2 subjectOf2 = new PRPMMT306011BCSubject2();
        PRPMMT306011BCDisciplinaryAction da = new PRPMMT306011BCDisciplinaryAction();
        subjectOf2.setDisciplinaryAction(da);
        da.setId(ii(disciplinaryAction.getIdentifier(), "2.16.840.1.113883.3.40.1.4"));
        da.setText(ed(disciplinaryAction.getDescription()));
        da.setEffectiveTime(effectiveTime(disciplinaryAction.getStartDate(), disciplinaryAction.getExpiryDate()));
        da.setConfidentialityCode(cv(disciplinaryAction.isDisplay() ? "R" : "N"));
        return subjectOf2;
    }
    
    public static AD convertAddressToAD(AddressAttribute addr) {
        AD ad = new AD();
        convertTypeAndPurpose(ad, addr);
        for (String line: addr.getStreetAddressLines()){
            AdxpStreetAddressLine street = new AdxpStreetAddressLine();
            street.setText(line);
            ad.getContent().add(street);
        }
        if (addr.getCity()!=null){
            AdxpCity city = new AdxpCity();
            city.setText(addr.getCity());
            ad.getContent().add(city);
        }
        if (addr.getProvince()!=null){
            AdxpState state = new AdxpState();
            state.setText(addr.getProvince());
            ad.getContent().add(state);
        }
        if (addr.getCountry()!=null){
            AdxpCountry country = new AdxpCountry();
            country.setText(addr.getCountry());
            ad.getContent().add(country);
        }
        if (addr.getPostalCode()!=null){
            AdxpPostalCode postal = new AdxpPostalCode();
            postal.setText(addr.getPostalCode());
            ad.getContent().add(postal);
        }
        
        if (addr.getStartDate() != null && addr.getExpiryDate() != null) {
            ad.getContent().add(useablePeriod(addr.getStartDate(), addr.getExpiryDate()));
        }
        
        return ad;
    }
    
    protected static JAXBElement<SXCMTS> useablePeriod(Date effectiveStartDate, Date effectiveEndDate) {
        return objectFactory.createADUseablePeriod(effectiveTime(effectiveStartDate,effectiveEndDate));
    }

    public static void convertTypeAndPurpose(AD ad, AddressAttribute addr) {
        String typeAndPurpose = addressPurposeMap.get(addr.getUncodedType() + " " + addr.getCommunicationPurposeCode());
        if (typeAndPurpose != null) {
            ad.getUse().add(typeAndPurpose);
        }
    }

    public static PN convertPersonNameToPN(PersonNameAttribute name) {
        PN pn = new PN();
        pn.getUse().add(ConverterUtils.reverseMapPersonNameUse(name.getUncodedType()));
        if (name.getLastName()!=null){
            EnFamily family = new EnFamily();
            family.setText(name.getLastName());
            pn.getContent().add(family);
        }
        if (name.getFirstName()!=null){
            EnGiven first = new EnGiven();
            first.setText(name.getFirstName());
            pn.getContent().add(first);
        }
        if (name.getMiddleName()!=null){
            EnGiven given = new EnGiven();
            given.setText(name.getMiddleName());
            pn.getContent().add(given);
        }
        if (name.getSecondMiddleName()!=null){
            EnGiven given = new EnGiven();
            given.setText(name.getSecondMiddleName());
            pn.getContent().add(given);
        } 
        
        if (name.getSuffix()!=null){
            EnSuffix suffix = new EnSuffix();
            suffix.setText(name.getSuffix());
            pn.getContent().add(suffix);
        } 
        if (name.getPrefix()!=null){
            EnPrefix prefix = new EnPrefix();
            prefix.setText(name.getPrefix());
            pn.getContent().add(prefix);
        }
        if (name.getStartDate()!=null && name.getExpiryDate()!=null){
            
            pn.getContent().add(effectiveTime(name.getStartDate(),name.getExpiryDate()));
        }
        return pn;
    }

    public static TEL convertTelecommunicationToTEL(PhoneAttribute phone) {
        TEL tel = new TEL(); 
        String use = ConverterUtils.convertToHl7Use(phone.getCommunicationPurposeCode(), phone.getUncodedType());
        tel.getUse().add(use);
        String scheme = ConverterUtils.convertPlrTypeToHl7Scheme(phone.getUncodedType());
        StringBuilder output = new StringBuilder();
        if (scheme != null) {
            output.append(scheme);
        }
        if (phone.getAreaCode() != null) {
            output.append(phone.getAreaCode());
        }
        if (phone.getNumber() != null) {
            output.append(phone.getNumber());
        }
        if (phone.getExtension() != null) {
            output.append(phone.getExtension());
        }
        tel.setValue(output.toString());
        tel.getUseablePeriod().add(effectiveTime(phone.getStartDate(), phone.getExpiryDate()));
        return tel;
    }

    public static TEL convertElectronicAddressToTEL(EmailAttribute email) {
        TEL tel = new TEL();
        String use = ConverterUtils.convertToHl7Use(email.getCommunicationPurposeCode(), email.getUncodedType());
        tel.getUse().add(use);
        String scheme = ConverterUtils.convertPlrTypeToHl7Scheme(email.getUncodedType());
        tel.setValue(scheme + email.getAddress());
        tel.getUseablePeriod().add(effectiveTime(email.getStartDate(), email.getExpiryDate()));
        return tel;
    }

    protected static ST st(String value) {
        ST st = new ST();
        st.setText(value);
        return st;
    }

    protected static II ii(String value, String oid) {
        II ii = new II();
        ii.setExtension(value);
        ii.setRoot(oid);
        return ii;
    }

    protected static ED ed(String value) {
        ED ed = new ED();
        ed.setText(value);
        return ed;
    }

    protected static INT INT(int i) {
        INT in = new INT();
        in.setValue(BigInteger.valueOf(i));
        return in;
    }

    protected static EN en(String value) {
        EN en = new EN();
        en.getContent().add(value);
        return en;
    }

    protected static IVLTS effectiveTime(Date effectiveStartDate, Date effectiveEndDate) {
        IVLTS ivlts = new IVLTS();

        synchronized (DATE_TIME_FORMAT) {
            IVXBTS ts1 = new IVXBTS();
            ts1.setValue(effectiveStartDate == null ? null : DATE_TIME_FORMAT.format(effectiveStartDate));
            IVXBTS ts2 = new IVXBTS();
            if(effectiveEndDate == null) {
                ts2.setValue(null);
            } else if(ConverterUtils.isYearExpiryDateDefaultYear(effectiveEndDate)) {
                ts2.setValue("");
            } else {
                ts2.setValue(DATE_TIME_FORMAT.format(effectiveEndDate));
            }
            ivlts.getRest().add(factory.createIVLTSLow(ts1));
            if (ts2.getValue()!=null && ts2.getValue().length()>0){
                ivlts.getRest().add(factory.createIVLTSHigh(ts2));
            }
        }
        return ivlts;
    }
    
    protected static CE ce(String value) {
        CE ce = new CE();
        ce.setCode(value);
        return ce;
    }    
    
    protected static CV cv(String value) {
        CV cv = new CV();
        cv.setCode(value);
        return cv;
    }

    protected static CS cs(String value) {
        CS cs = new CS();
        cs.setCode(value);
        return cs;
    }

    public static TS convertToTS(Date value) {
        synchronized (DATE_TIME_FORMAT) {
            TS ts = new TS();
            ts.setValue(DATE_TIME_FORMAT.format(value));
            return ts;
        }
    }

    public static String convertToDateTS(Date value) {
        synchronized (YEAR_MONTH_DAY_FORMAT) {
            return YEAR_MONTH_DAY_FORMAT.format(value);
        }
    }

    public static II convertIdentifier(IdentifierAttribute id) {
        String oid = ConverterUtils.getOid(id.getUncodedType());
        II hcpId = ii(id.getValue(), oid);
        return hcpId;
    }

    private static void convertDemographics(Person person, PRPMMT306011BCHealthCareProvider healthCareProvider) {
        healthCareProvider.setEffectiveTime(effectiveTime(person.getStartDate(), person.getExpiryDate()));
        PRPMMT306011BCPrincipalPerson healthCarePrincipalPerson = healthCareProvider.getHealthCarePrincipalPerson();
        String genderValue = person.getGender().getValue();
        healthCarePrincipalPerson.setAdministrativeGenderCode(cv(genderValue));
        
        DateAttribute birthDate = person.getBirthDate();
        DateAttribute deathDate = person.getDeathDate();
        String birthCountryCode = person.getBirthCountryCode();
        String birthProvinceCode = person.getBirthProvinceCode();

        if (birthDate != null && birthDate.getValue()!=null) {
            healthCarePrincipalPerson.setBirthTime(convertToTS(birthDate.getValue()));
        }

        if (deathDate != null && deathDate.getValue()!=null) {
            healthCarePrincipalPerson.setDeceasedTime(convertToTS(deathDate.getValue()));
        }

        if (!StringUtils.isEmpty(birthProvinceCode) || !StringUtils.isEmpty(birthCountryCode)) {
            
            PRPMMT306011BCBirthplace birthPlace = objectFactory.createPRPMMT306011BCBirthplace();
            
            JAXBElement<PRPMMT306011BCBirthplace> birthPlaceJaxb = objectFactory.createPRPMMT306011BCPrincipalPersonBirthplace(birthPlace);
            AD addr = objectFactory.createAD();
            birthPlaceJaxb.getValue().setAddr(addr);
            List<Serializable> content = addr.getContent();
            if (!StringUtils.isEmpty(birthProvinceCode)) {
                AdxpState provinceCodeValue = new AdxpState();
                provinceCodeValue.setText(birthProvinceCode);
                JAXBElement<AdxpState> provinceElement = objectFactory.createADState(provinceCodeValue);
                content.add(provinceElement);
            }
            if (!StringUtils.isEmpty(birthCountryCode)) {
                AdxpCountry countryValue = new AdxpCountry();
                countryValue.setText(birthCountryCode);
                JAXBElement<AdxpCountry> CountryElement = objectFactory.createADCountry(countryValue);
                content.add(CountryElement);
            }
            healthCarePrincipalPerson.setBirthplace(birthPlaceJaxb);
        }

    }

}
