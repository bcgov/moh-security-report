/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir;

import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.EXPERTISE_LANGUAGE_CODE;
import ca.uhn.fhir.parser.DataFormatException;
import ca.uhn.fhir.parser.IParser;
import ca.uhn.fhir.validation.FhirValidator;
import ca.uhn.fhir.validation.SingleValidationMessage;
import ca.uhn.fhir.validation.ValidationResult;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.hl7.fhir.r4.model.CodeableConcept;
import org.hl7.fhir.r4.model.Coding;
import org.hl7.fhir.r4.model.PractitionerRole;

/**
 * Class for mapping components between PLR Provider and FHIR PractitionerRole
 * resource.
 *
 * @author dan.stepanov
 */
public class MapProviderToPractitionerRoleFhir implements ProviderFhirConstants, Serializable {

    private static final String CLASSNAME = MapProviderToPractitionerRoleFhir.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    ProviderDetails indivProviderDetails = new ProviderDetails();

    public String mapIndProviderExpertiseToPractSpecialty(ProviderDetails indivProviderDetails) throws Exception {

        List<ExpertiseDto> indivPersonExpertise = indivProviderDetails.getExpertise();

        PractitionerRole practitionerRoleFhir = new PractitionerRole();
        String jsonParsedPractitionerRoleFhir = null;

        List<CodeableConcept> practSpecialtyCodes = new ArrayList<>();

        for (ExpertiseDto personExpertiseDto : indivPersonExpertise) {

            // create pract Specialty component FHIR model
            CodeableConcept specialtyCodeConcept = new CodeableConcept();

            List<Coding> specialtyCodes = new ArrayList<>();
            // map specialty code type
            // get Specialty component for each expertise from individ provider values from the ExpertiseDto
            if (!personExpertiseDto.getRoleTypeCode().equalsIgnoreCase(EXPERTISE_LANGUAGE_CODE)) {
                // TODO to verify if all the expertise codes from PLR provider match w/Specialty codes from FHIR
                // PRS_CT_PROV_EXPERTISE_TYPES where PROV_ROLE_TYPE not in 'LANG' has 333 expertise speciality codes
                // FHIR value set includes codes from the canada infoway -- see https://tgateway.infoway-inforoute.ca/mtw.html?id=2.16.840.1.113883.2.20.3.97&versionid=20160311
                // PLR specialty codes from expertise to check if match the FHIR speciality for Canada/BC
                Coding specialtyCode = new Coding();               
                specialtyCode.setCode(personExpertiseDto.getTypeCode());
                specialtyCode.setSystem("http://snomed.info/sct");
                specialtyCode.setDisplay(personExpertiseDto.getType());

                specialtyCodes.add(specialtyCode);
                specialtyCodeConcept.setCoding(specialtyCodes);

                //add specialty Code Conceptd Fhir to Practitioner specialty code list
                practSpecialtyCodes.add(specialtyCodeConcept);
            }

        }

        // end reason code - will need an extension TODO!
        // data owner code/name - check if we need extensions - TODO!
        // missing start/end dates for specialty/expertise code - will need an extension TODO!
        // set specialty codes list to FHIR Practitioner
        practitionerRoleFhir.setSpecialty(practSpecialtyCodes);

        jsonParsedPractitionerRoleFhir = parseEncodedPractitionerRole(practitionerRoleFhir);

        // validate new PractitionerRole resource w/specialty structure
        validatePractitionerRoleFhir(initializeFhirValidator(), jsonParsedPractitionerRoleFhir);

        return jsonParsedPractitionerRoleFhir;
    }

    public String mapIndProviderRoleTypeToPractRoleCode(ProviderDetails indivProviderDetails) throws Exception {

        String indivProviderRoleType = indivProviderDetails.getType();

        PractitionerRole practitionerRoleFhir = new PractitionerRole();
        String jsonParsedPractitionerRoleFhir = null;

        List<CodeableConcept> practRoleCodes = new ArrayList<>();

        // create pract role code component FHIR model
        CodeableConcept practRoleCodeConcept = new CodeableConcept();

        List<Coding> roleTypeCodes = new ArrayList<>();
        // map pract role code type
        if (!indivProviderRoleType.equalsIgnoreCase(ORG_PROVIDER_ROLE_TYPE)) {
            // TODO to verify if all the provider role codes from PLR provider match w/Pract role codes from FHIR
            // PRS_CT_PROVIDER_ROLE_TYPES where CTL_NAME_CODE not in 'ORG' 
            // FHIR value set includes codes from the canada infoway -- see https://tgateway.infoway-inforoute.ca/mtw.html?id=2.16.840.1.113883.2.20.3.97&versionid=20160311
            // PLR role type codes to check if match the FHIR pract role for Canada/BC
            Coding roleTypeCode = new Coding();
            roleTypeCode.setCode(indivProviderRoleType);
            // TODO check if we need to change ProviderDetails and get other info from PrsCtProviderRoleTypes getHptCode()
            roleTypeCode.setDisplay("Dentist");
            roleTypeCode.setSystem(INDIV_PROV_ROLE_SYSTEM_LINK); // TODO w/updated link from infoway

            roleTypeCodes.add(roleTypeCode);
            practRoleCodeConcept.setCoding(roleTypeCodes);

            //add pract Code Conceptd Fhir to Practitioner role code list
            practRoleCodes.add(practRoleCodeConcept);
        }

        // end reason code - will need an extension TODO!
        // data owner code/name - check if we need extensions - TODO!
        // check for effective start/end dates for prac role code - will need an extension TODO!
        // set specialty codes list to FHIR Practitioner
        practitionerRoleFhir.setCode(practRoleCodes);

        jsonParsedPractitionerRoleFhir = parseEncodedPractitionerRole(practitionerRoleFhir);

        // validate new PractitionerRole resource w/specialty structure
        validatePractitionerRoleFhir(initializeFhirValidator(), jsonParsedPractitionerRoleFhir);

        return jsonParsedPractitionerRoleFhir;
    }

    public String parseEncodedPractitionerRole(PractitionerRole practitionerRoleFhir) throws DataFormatException {
        // Instantiate a new JSON parser
        IParser jparser = FhirContextFactory.forR4().newJsonParser();

        // Serialize it
        String serializedPracRole = jparser.encodeResourceToString(practitionerRoleFhir);

        LOG.log(Level.INFO, "MapProviderToPractitionerRoleFhir parseEncodedPractitionerRole serializedPracRole is: {0}.", new Object[]{serializedPracRole});

        return serializedPracRole;
    }

    public FhirValidator initializeFhirValidator() {
        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator validator = FhirContextFactory.forR4().newValidator();
        /*
        * set FHIR validator to validate against standard schema during validation
         */
        validator.setValidateAgainstStandardSchema(true);
        return validator;
    }

    public boolean validatePractitionerRoleFhir(FhirValidator validator, String parsedPractitionerRoleFhir) throws DataFormatException {
        // Validate
        ValidationResult validResult = null;
        boolean isPractRoleResultValid = false;
        try {
            validResult = validator.validateWithResult(parsedPractitionerRoleFhir);
        } catch (DataFormatException dfe) {
            LOG.log(Level.SEVERE, "MapProviderToPractitionerRoleFhir encountered a data format error while validate PractitionerRole Fhir.");
        } catch (Exception ex) {
            LOG.log(Level.SEVERE, "MapProviderToPractitionerRoleFhir encountered an error while validating PractitionerRole Fhir.");
        }
        if (validResult != null && validResult.isSuccessful()) {
            isPractRoleResultValid = true;
        } else if (validResult != null && !validResult.isSuccessful()) {
            // display the validation issues
            for (SingleValidationMessage validMsg : validResult.getMessages()) {

                LOG.log(Level.INFO, "MapProviderToPractitionerRoleFhir validation issue severity is: {0} and location is: {1} and message is: {2}.",
                        new Object[]{validMsg.getSeverity(), validMsg.getLocationString(), validMsg.getMessage()});
            }
        }

        LOG.log(Level.INFO, "MapProviderToPractitionerRoleFhir validatePractitionerRoleFhir isPractRoleResultValid is: {0}.",
                new Object[]{isPractRoleResultValid});

        return isPractRoleResultValid;
    }

}
