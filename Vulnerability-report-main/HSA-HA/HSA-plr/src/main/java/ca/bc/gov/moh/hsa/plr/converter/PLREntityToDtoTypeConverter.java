package ca.bc.gov.moh.hsa.plr.converter;

import ca.bc.gov.health.plr.dto.esb.BatchRequest;
import ca.bc.gov.health.plr.dto.esb.EsbMessage;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.QueryParameters;
import ca.bc.gov.health.plr.dto.esb.QueryRequest;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ConditionsDto;
import ca.bc.gov.health.plr.dto.provider.esb.ConfidentialityIndicatorDto;
import ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DisciplinaryActionDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.esb.JurisdictionNameCodeDto;
import ca.bc.gov.health.plr.dto.provider.esb.NoteDto;
import ca.bc.gov.health.plr.dto.provider.esb.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.RegistryIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.RegistryUserRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto;
import ca.bc.gov.moh.hsa.entity.AddressAttribute;
import ca.bc.gov.moh.hsa.entity.CommunicationFunction;
import ca.bc.gov.moh.hsa.entity.ConfidentialityMaskAttribute;
import ca.bc.gov.moh.hsa.entity.DateAttribute;
import ca.bc.gov.moh.hsa.entity.EmailAttribute;
import ca.bc.gov.moh.hsa.entity.GenderAttribute;
import ca.bc.gov.moh.hsa.entity.IdentifierAttribute;
import ca.bc.gov.moh.hsa.entity.OrganizationNameAttribute;
import ca.bc.gov.moh.hsa.entity.Person;
import ca.bc.gov.moh.hsa.entity.PersonNameAttribute;
import ca.bc.gov.moh.hsa.entity.PhoneAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.BatchRequestEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ConditionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.CredentialAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.DisciplinaryActionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ExpertiseAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.InformationRouteAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.MaintainProviderRequestEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.NoteAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderRelationshipAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.QueryRequestEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.RequestMessageWithProvider;
import ca.bc.gov.moh.hsa.plr.entity.transaction.StatusAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.WorkLocationAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.WorkLocationDetailsAttribute;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import org.apache.commons.collections.CollectionUtils;
import org.springframework.util.StringUtils;

/**
 *
 * @author conrad.gustafson
 */
public class PLREntityToDtoTypeConverter {

    public static final String PROVIDER_PARTY_TYPE_ORG = "ORG";
    public static final String PROVIDER_PARTY_TYPE_IND = "IND";

    public static BatchRequest convertBatchRequestEntityToDTO(BatchRequestEntity batchRequestEntity) {
        BatchRequest batchRequest = new BatchRequest();
        Collection<MaintainProviderRequest> maintainProviderRequests = new ArrayList<>();

        batchRequest.setFormatContentCode(batchRequestEntity.getResponseFormatCode());
        batchRequest.setResponseContentCode(batchRequestEntity.getResponseContentCode());

        List<MaintainProviderRequestEntity> maintainProviderRequestEntities = batchRequestEntity.getMaintainProviderRequestEntities();
        for (MaintainProviderRequestEntity maintainProviderRequestEntity : maintainProviderRequestEntities) {
            MaintainProviderRequest maintainProviderRequest = convertMaintainProviderTransactionRequestToDTO(maintainProviderRequestEntity);
            maintainProviderRequests.add(maintainProviderRequest);
        }

        batchRequest.setMaintainProviderRequests(maintainProviderRequests);

        return batchRequest;
    }

    static QueryRequest convertQueryRequestEntityToDTO(QueryRequestEntity queryRequestEntity) {
        QueryRequest queryRequest = new QueryRequest();
        convertEsbRequest(queryRequestEntity, queryRequest);
        setQueryParameters(queryRequestEntity, queryRequest);

        return queryRequest;
    }

    public static MaintainProviderRequest convertMaintainProviderTransactionRequestToDTO(RequestMessageWithProvider transactionRequest) {
        MaintainProviderRequest maintainProviderRequest = new MaintainProviderRequest();
        convertEsbRequest(transactionRequest, maintainProviderRequest);
        setProviderDetails(transactionRequest, maintainProviderRequest);
        String messageType = "";
        return maintainProviderRequest;
    }

    public static void convertEsbRequest(RequestMessageWithProvider transactionRequest, EsbMessage maintainProviderRequest) {
        final CommunicationFunction sender = transactionRequest.getSender();
        final CommunicationFunction receiver = transactionRequest.getReceiver().get(0);

        // Mapping
        maintainProviderRequest.setUniqueMessageId(transactionRequest.getMessageId());

        maintainProviderRequest.setSourceFacilityId(sender.getFacilityId());
        maintainProviderRequest.setTargetFacilityId(receiver.getFacilityId());

        maintainProviderRequest.setSourceServer(sender.getSystemName());
        maintainProviderRequest.setTargetServer(receiver.getSystemName());

        maintainProviderRequest.setSourceOrganizationChid(sender.getOrganizationId());
        maintainProviderRequest.setTargetOrganizationChid(receiver.getOrganizationId());

        maintainProviderRequest.setSourceJurisdiction(sender.getJurisdiction());
        maintainProviderRequest.setTargetJurisdiction(receiver.getJurisdiction());

        maintainProviderRequest.setMessageInteractionId(transactionRequest.getInteractionId());

        maintainProviderRequest.setTargetEnvironment(receiver.getEnvironment());
        maintainProviderRequest.setSourceEnvironment(sender.getEnvironment());

        maintainProviderRequest.setVersion(transactionRequest.getVersionNumber());

        maintainProviderRequest.setSourceNetworkAddressChid(sender.getNetworkAddress());
        maintainProviderRequest.setTargetNetworkAddressChid(receiver.getNetworkAddress());

        maintainProviderRequest.setMessageCreationTime(transactionRequest.getCreationTime());
        maintainProviderRequest.setOriginalEventDate(transactionRequest.getOriginalEventTime());

        maintainProviderRequest.setResponsiblePersonUserId(transactionRequest.getResponsibleUserId());

        maintainProviderRequest.setRegistryUserOrgId(sender.getUserId());
        
        maintainProviderRequest.setMessageType(transactionRequest.getMessageType());
        
        maintainProviderRequest.setSourceUserId(sender.getUserId());
    }

    public static void setProviderDetails(RequestMessageWithProvider transactionRequest, MaintainProviderRequest maintainProviderRequest) {
        ProviderAttribute provider = transactionRequest.getProvider();
        if (provider != null) {

            maintainProviderRequest.setSourceUserId(provider.getUserId());

            ProviderDetails providerDetails = new ProviderDetails();

            maintainProviderRequest.setProviderDetails(providerDetails);

            String partyType = provider.getPartyType();
            providerDetails.setProviderType(partyType);
            providerDetails.setType(provider.getHptCode());
            JurisdictionNameCodeDto jurisdiction = new JurisdictionNameCodeDto();
            jurisdiction.setJurisdicationNameCode(provider.getJurisdiction());
            providerDetails.setJurisdiction(jurisdiction);
            

            setCollegeIdentifiers(provider, providerDetails);
            setRegistryIdentifiers(provider, providerDetails);
            setNames(provider, providerDetails);
            setOrganizationNames(provider, providerDetails);
            setAddresses(provider, providerDetails);
            setPhones(provider, providerDetails);
            setEmails(provider, providerDetails);
            setConditions(provider, providerDetails);
            setDemographicDetails(provider, providerDetails);
            setDisciplinaryActions(provider, providerDetails);
            setInformationRoutes(provider, providerDetails);
            setNotes(provider, providerDetails);
            setRegistryUserRelationships(provider, providerDetails);
            setProviderRelationships(provider, providerDetails);
            setCredentials(provider, providerDetails);
            setExpertises(provider, providerDetails);
            setStatuses(provider, providerDetails);
            setWorkLocations(provider, providerDetails);
        }
    }

    public static void setCollegeIdentifiers(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<IdentifierAttribute> originalCollegeIdentifiers = provider.getCollegeIdentifiers();
        if (!CollectionUtils.isEmpty(originalCollegeIdentifiers)) {
            List<CollegeIdentifierDto> mappedCollegeIdentifiers = new ArrayList<CollegeIdentifierDto>();
            providerDetails.setIdentifiers(mappedCollegeIdentifiers);

            for (IdentifierAttribute originalCollegeIdentifier : originalCollegeIdentifiers) {
                CollegeIdentifierDto collegeIdentifierDto = new CollegeIdentifierDto();
                collegeIdentifierDto.setIdentifier(originalCollegeIdentifier.getValue());
                collegeIdentifierDto.setTypeCode(originalCollegeIdentifier.getUncodedType());
                collegeIdentifierDto.setEffectiveStartDate(originalCollegeIdentifier.getStartDate());
                collegeIdentifierDto.setEffectiveEndDate(originalCollegeIdentifier.getExpiryDate());
                collegeIdentifierDto.setEndReasonCode(originalCollegeIdentifier.getEndReasonCode());
                collegeIdentifierDto.setDataOwnerCode(originalCollegeIdentifier.getSource());

                mappedCollegeIdentifiers.add(collegeIdentifierDto);
            }
        }
    }

    public static void setRegistryIdentifiers(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<IdentifierAttribute> originalRegistryIdentifiers = provider.getRegistryIdentifiers();
        if (!CollectionUtils.isEmpty(originalRegistryIdentifiers)) {
            List<RegistryIdentifierDto> mappedRegistryIdentifiers = new ArrayList<>();
            providerDetails.setRegistryIdentifiers(mappedRegistryIdentifiers);

            for (IdentifierAttribute registry : originalRegistryIdentifiers) {
                RegistryIdentifierDto registryIdentifierDto = new RegistryIdentifierDto();
                registryIdentifierDto.setIdentifier(registry.getValue());
                registryIdentifierDto.setTypeCode(registry.getUncodedType());
                registryIdentifierDto.setEffectiveStartDate(registry.getStartDate());
                registryIdentifierDto.setEffectiveEndDate(registry.getExpiryDate());
                registryIdentifierDto.setEndReasonCode(registry.getEndReasonCode());
                registryIdentifierDto.setDataOwnerCode(registry.getSource());

                mappedRegistryIdentifiers.add(registryIdentifierDto);
            }
        }
    }

    public static void setNames(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<PersonNameAttribute> originalPersonalNames = provider.getPersonNames();
        if (!CollectionUtils.isEmpty(originalPersonalNames)) {
            List<PersonNameDto> indNames = new ArrayList<PersonNameDto>();
            providerDetails.setIndNames(indNames);

            for (PersonNameAttribute originalPersonalNameAttribute : originalPersonalNames) {
                PersonNameDto personalNameDto = new PersonNameDto();

                personalNameDto.setTypeCode(originalPersonalNameAttribute.getUncodedType());
                personalNameDto.setPreferred(originalPersonalNameAttribute.isPreferred());
                personalNameDto.setLastName(originalPersonalNameAttribute.getLastName());
                personalNameDto.setFirstName(originalPersonalNameAttribute.getFirstName());
                personalNameDto.setSecondName(originalPersonalNameAttribute.getMiddleName());
                personalNameDto.setThirdName(originalPersonalNameAttribute.getSecondMiddleName());
                personalNameDto.setSuffix(originalPersonalNameAttribute.getSuffix());
                personalNameDto.setPrefix(originalPersonalNameAttribute.getPrefix());

                personalNameDto.setEffectiveStartDate(originalPersonalNameAttribute.getStartDate());
                personalNameDto.setEffectiveEndDate(originalPersonalNameAttribute.getExpiryDate());
                personalNameDto.setEndReasonCode(originalPersonalNameAttribute.getEndReasonCode());
                personalNameDto.setDataOwnerCode(originalPersonalNameAttribute.getSource());

                indNames.add(personalNameDto);
            }
        }
    }
    
    public static void setOrganizationNames(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<OrganizationNameAttribute> organizationNameAttributes = provider.getOrganizationNames();
        if (!CollectionUtils.isEmpty(organizationNameAttributes)) {
            List<OrgNameDto> orgNames = new ArrayList<>();
            providerDetails.setOrgNames(orgNames);

            for (OrganizationNameAttribute organizationNameAttribute : organizationNameAttributes) {
                OrgNameDto orgNameDto = new OrgNameDto();

                orgNameDto.setTypeCode(organizationNameAttribute.getUncodedType());
                orgNameDto.setPreferred(organizationNameAttribute.isPreferred());
                orgNameDto.setName(organizationNameAttribute.getName());
                orgNameDto.setLongName(organizationNameAttribute.getLongname());

                orgNameDto.setEffectiveStartDate(organizationNameAttribute.getStartDate());
                orgNameDto.setEffectiveEndDate(organizationNameAttribute.getExpiryDate());
                orgNameDto.setEndReasonCode(organizationNameAttribute.getEndReasonCode());
                orgNameDto.setDataOwnerCode(organizationNameAttribute.getSource());

                orgNames.add(orgNameDto);
            }
        }
    }

    public static void setAddresses(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<AddressAttribute> originalAddresses = provider.getAddresses();
        if (!CollectionUtils.isEmpty(originalAddresses)) {
            List<AddressDto> addresses = new ArrayList<AddressDto>();
            providerDetails.setAddresses(addresses);

            for (AddressAttribute originalAddress : originalAddresses) {
                AddressDto addressDto = new AddressDto();

                addressDto.setCommunicationPurposeCode(originalAddress.getCommunicationPurposeCode());
                addressDto.setTypeCode(originalAddress.getUncodedType());

                List<String> streetAddressLines = originalAddress.getStreetAddressLines();
                if (!CollectionUtils.isEmpty(streetAddressLines)) {
                    int lineNumber = 1;
                    for (String streetAddressLine : streetAddressLines) {
                        switch (lineNumber) {
                            case 1:
                                addressDto.setAddressLineOne(streetAddressLine);
                                break;
                            case 2:
                                addressDto.setAddressLineTwo(streetAddressLine);
                                break;
                            case 3:
                                addressDto.setAddressLineThree(streetAddressLine);
                                break;
                            case 4:
                                addressDto.setAddressLineFour(streetAddressLine);
                                break;
                        }

                        lineNumber++;
                    }
                }
                addressDto.setCity(originalAddress.getCity());
                addressDto.setProvinceOrStateTxt(originalAddress.getProvince());
                addressDto.setPostalCode(originalAddress.getPostalCode());
                addressDto.setCountryCode(originalAddress.getCountry());

                addressDto.setEffectiveStartDate(originalAddress.getStartDate());
                addressDto.setEffectiveEndDate(originalAddress.getExpiryDate());
                addressDto.setEndReasonCode(originalAddress.getEndReasonCode());
                addressDto.setDataOwnerCode(originalAddress.getSource());

                addresses.add(addressDto);
            }
        }
    }

    public static void setPhones(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<PhoneAttribute> originalPhones = provider.getPhones();
        if (!CollectionUtils.isEmpty(originalPhones)) {
            List<TelecommunicationDto> phones = new ArrayList<TelecommunicationDto>();
            providerDetails.setTelecommunication(phones);

            for (PhoneAttribute originalPhoneAttribute : originalPhones) {
                TelecommunicationDto phoneDto = new TelecommunicationDto();

                phoneDto.setCommunicationPurposeCode(originalPhoneAttribute.getCommunicationPurposeCode());
                phoneDto.setTypeCode(originalPhoneAttribute.getUncodedType());
                phoneDto.setAreaCode(originalPhoneAttribute.getAreaCode());
                phoneDto.setNumber(originalPhoneAttribute.getNumber());
                phoneDto.setExtension(originalPhoneAttribute.getExtension());

                phoneDto.setEffectiveStartDate(originalPhoneAttribute.getStartDate());
                phoneDto.setEffectiveEndDate(originalPhoneAttribute.getExpiryDate());
                phoneDto.setEndReasonCode(originalPhoneAttribute.getEndReasonCode());
                phoneDto.setDataOwnerCode(originalPhoneAttribute.getSource());

                phones.add(phoneDto);
            }
        }
    }

    public static void setEmails(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<EmailAttribute> originalEmails = provider.getEmails();
        if (!CollectionUtils.isEmpty(originalEmails)) {
            List<ElectronicAddressDto> emails = new ArrayList<ElectronicAddressDto>();
            providerDetails.setElectronicAddresses(emails);

            for (EmailAttribute originalEmailAttribute : originalEmails) {
                ElectronicAddressDto emailDto = new ElectronicAddressDto();

                emailDto.setCommunicationPurposeCode(originalEmailAttribute.getCommunicationPurposeCode());
                emailDto.setTypeCode(originalEmailAttribute.getUncodedType());
                emailDto.setAddress(originalEmailAttribute.getAddress());
                emailDto.setEffectiveStartDate(originalEmailAttribute.getStartDate());
                emailDto.setEffectiveEndDate(originalEmailAttribute.getExpiryDate());
                emailDto.setEndReasonCode(originalEmailAttribute.getEndReasonCode());
                emailDto.setDataOwnerCode(originalEmailAttribute.getSource());

                emails.add(emailDto);
            }
        }
    }

    public static void setConditions(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<ConditionAttribute> originalConditions = provider.getConditions();
        if (!CollectionUtils.isEmpty(originalConditions)) {
            List<ConditionsDto> conditions = new ArrayList<ConditionsDto>();
            providerDetails.setConditions(conditions);

            for (ConditionAttribute originalConditionAttribute : originalConditions) {
                ConditionsDto conditionDto = new ConditionsDto();

                conditionDto.setIdentifier(originalConditionAttribute.getId());
                conditionDto.setTypeCode(originalConditionAttribute.getUncodedType());
                conditionDto.setRestrictionFlag(originalConditionAttribute.isRestricted());
                conditionDto.setRestrictionExplanationText(originalConditionAttribute.getRestrictionExplanationText());
                conditionDto.setEffectiveStartDate(originalConditionAttribute.getStartDate());
                conditionDto.setEffectiveEndDate(originalConditionAttribute.getExpiryDate());
                conditionDto.setEndReasonCode(originalConditionAttribute.getEndReasonCode());
                conditionDto.setDataOwnerCode(originalConditionAttribute.getSource());

                conditions.add(conditionDto);
            }

        }
    }

    public static void setDemographicDetails(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<Person> originalDemographicDetails = provider.getDemographicDetails();
        if (!CollectionUtils.isEmpty(originalDemographicDetails)) {
            List<DemographicDetailsDto> demographicDetailsDtos = new ArrayList<>();
            providerDetails.setDemographicDetails(demographicDetailsDtos);

            for (Person originalDemographicDetail : originalDemographicDetails) {
                // PLR-2179 Add confidentiality indicators as the first step, if the demographics details are empty then we still need the confidentiality added under demographics.
                if (CollectionUtils.isNotEmpty(originalDemographicDetail.getConfidentialityMask())) {
                    for (ConfidentialityMaskAttribute mask : originalDemographicDetail.getConfidentialityMask()) {
                        ConfidentialityIndicatorDto confidentialityIndicatorDto = new ConfidentialityIndicatorDto();
                        confidentialityIndicatorDto.setConfidential(mask.getMasked());
                        confidentialityIndicatorDto.setEffectiveStartDate(mask.getStartDate());
                        confidentialityIndicatorDto.setEffectiveEndDate(mask.getExpiryDate());
                        confidentialityIndicatorDto.setEndReasonCode(mask.getEndReasonCode());
                        confidentialityIndicatorDto.setDataOwnerCode(mask.getSource());
                        providerDetails.getConfidentialityIndicators().add(confidentialityIndicatorDto);
                    }
                }

                // PLR-2179 : XML to Entity conversion adds an empty demographic details if confidentiality indicator comes through;
                // as the confidentiality mask attribute is a child of Person.
                // If the Person object is empty, then ignore and continue.
                if (demographicElementsAreEmpty(originalDemographicDetail)) {
                    continue;
                }

                DemographicDetailsDto demographicDetailsDto = new DemographicDetailsDto();

                final DateAttribute birthDate = originalDemographicDetail.getBirthDate();
                if (birthDate != null) {
                    demographicDetailsDto.setBirthDate(birthDate.getValue());
                }
                final DateAttribute deathDate = originalDemographicDetail.getDeathDate();
                if (deathDate != null) {
                    demographicDetailsDto.setDeathDate(deathDate.getValue());
                }
                demographicDetailsDto.setBirthCountryCode(originalDemographicDetail.getBirthCountryCode());
                demographicDetailsDto.setBirthProvState(originalDemographicDetail.getBirthProvinceCode());
                final GenderAttribute gender = originalDemographicDetail.getGender();
                if (gender != null) {
                    demographicDetailsDto.setGenderCode(gender.getValue());
                }

                demographicDetailsDto.setEffectiveStartDate(originalDemographicDetail.getStartDate());
                demographicDetailsDto.setEffectiveEndDate(originalDemographicDetail.getExpiryDate());
                demographicDetailsDto.setEndReasonCode(originalDemographicDetail.getEndReasonCode());
                demographicDetailsDto.setDataOwnerCode(originalDemographicDetail.getSource());
                demographicDetailsDtos.add(demographicDetailsDto);
            }

        }
    }

    public static void setDisciplinaryActions(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<DisciplinaryActionAttribute> originalDisciplinaryActionAttributes = provider.getDisciplinaryActions();
        if (!CollectionUtils.isEmpty(originalDisciplinaryActionAttributes)) {
            List<DisciplinaryActionDto> disciplinaryActionDtos = new ArrayList<DisciplinaryActionDto>();
            providerDetails.setDisciplinaryActions(disciplinaryActionDtos);

            for (DisciplinaryActionAttribute originalDisciplinaryActionAttribute : originalDisciplinaryActionAttributes) {
                DisciplinaryActionDto disciplinaryActionDto = new DisciplinaryActionDto();

                disciplinaryActionDto.setIdentifier(originalDisciplinaryActionAttribute.getIdentifier());
                disciplinaryActionDto.setDisplayFlag(originalDisciplinaryActionAttribute.isDisplay());
                disciplinaryActionDto.setDescription(originalDisciplinaryActionAttribute.getDescription());
                disciplinaryActionDto.setArchiveDate(originalDisciplinaryActionAttribute.getArchiveDate());
                disciplinaryActionDto.setEffectiveStartDate(originalDisciplinaryActionAttribute.getStartDate());
                disciplinaryActionDto.setEffectiveEndDate(originalDisciplinaryActionAttribute.getExpiryDate());
                disciplinaryActionDto.setEndReasonCode(originalDisciplinaryActionAttribute.getEndReasonCode());
                disciplinaryActionDto.setDataOwnerCode(originalDisciplinaryActionAttribute.getSource());

                disciplinaryActionDtos.add(disciplinaryActionDto);
            }

        }
    }

    public static void setInformationRoutes(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<InformationRouteAttribute> originalInformationRouteAttributes = provider.getInformationRoutes();
        if (!CollectionUtils.isEmpty(originalInformationRouteAttributes)) {
            List<InformationRouteDto> informationRouteDtos = new ArrayList<InformationRouteDto>();
            providerDetails.setInformationRoutes(informationRouteDtos);

            for (InformationRouteAttribute originalInformationRouteAttribute : originalInformationRouteAttributes) {
                InformationRouteDto informationRouteDto = new InformationRouteDto();

                informationRouteDto.setDocumentTypeCode(originalInformationRouteAttribute.getDocumentTypeCode());
                //informationRouteDto.setMechanismTypeCode(originalInformationRouteAttribute.getMechanismTypeCode());
                informationRouteDto.setDefaultFlag(originalInformationRouteAttribute.isDefaulted());

                AddressAttribute addressAttribute = originalInformationRouteAttribute.getAddressAttribute();
                EmailAttribute emailAttribute = originalInformationRouteAttribute.getEmailAttribute();
                PhoneAttribute phoneAttribute = originalInformationRouteAttribute.getPhoneAttribute();

                if (addressAttribute != null) {
                    final AddressDto addressDto = new AddressDto();
                    addressDto.setTypeCode(addressAttribute.getUncodedType());
                    informationRouteDto.setAddressDto(addressDto);
                }
                
                if (emailAttribute != null) {
                    final ElectronicAddressDto electronicAddressDto = new ElectronicAddressDto();
                    electronicAddressDto.setTypeCode(emailAttribute.getUncodedType());
                    informationRouteDto.setElectronicAddressDto(electronicAddressDto);
                } 
                
                if (phoneAttribute != null) {
                    final TelecommunicationDto telecommunicationDto = new TelecommunicationDto();
                    telecommunicationDto.setTypeCode(phoneAttribute.getUncodedType());
                    informationRouteDto.setTelecommunicationDto(telecommunicationDto);
                }
                
                informationRouteDto.setCommunicationPurposeCode(originalInformationRouteAttribute.getCommunicationPurposeCode());
                informationRouteDto.setCommunicationDataOwnerCode(originalInformationRouteAttribute.getCommunicationDataOwnerCode());

                informationRouteDto.setWorkLocationIdentifier(originalInformationRouteAttribute.getWorkLocationIdentifier());
                informationRouteDto.setWorkLocationDataOwnerCode(originalInformationRouteAttribute.getWorkLocationOwnerCode());

                informationRouteDto.setEffectiveStartDate(originalInformationRouteAttribute.getStartDate());
                informationRouteDto.setEffectiveEndDate(originalInformationRouteAttribute.getExpiryDate());
                informationRouteDto.setEndReasonCode(originalInformationRouteAttribute.getEndReasonCode());
                informationRouteDto.setDataOwnerCode(originalInformationRouteAttribute.getSource());
                informationRouteDto.setWorkLocationDataOwnerCode(originalInformationRouteAttribute.getWorkLocationOwnerCode());

                informationRouteDtos.add(informationRouteDto);
            }
        }
    }

    public static void setNotes(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<NoteAttribute> originalNotes = provider.getNotes();
        if (!CollectionUtils.isEmpty(originalNotes)) {
            List<NoteDto> noteDtos = new ArrayList<>();
            providerDetails.setNotes(noteDtos);

            for (NoteAttribute originalNoteDto : originalNotes) {
                NoteDto noteDto = new NoteDto();

                noteDto.setIdentifier(originalNoteDto.getIdentifier());
                noteDto.setNoteText(originalNoteDto.getText());

                noteDto.setEffectiveStartDate(originalNoteDto.getStartDate());
                noteDto.setEffectiveEndDate(originalNoteDto.getExpiryDate());
                noteDto.setEndReasonCode(originalNoteDto.getEndReasonCode());
                noteDto.setDataOwnerCode(originalNoteDto.getSource());

                noteDtos.add(noteDto);
            }
        }
    }

    public static void setCredentials(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<CredentialAttribute> originalCredentialAttributes = provider.getCredentials();
        if (!CollectionUtils.isEmpty(originalCredentialAttributes)) {
            List<CredentialsDto> credentialDtos = new ArrayList<>();
            providerDetails.setCredentials(credentialDtos);

            for (CredentialAttribute originalCredentialAttribute : originalCredentialAttributes) {
                CredentialsDto credentialDto = new CredentialsDto();

                credentialDto.setTypeCode(originalCredentialAttribute.getUncodedType());
                credentialDto.setDesignation(originalCredentialAttribute.getDesignation());
                credentialDto.setRegistrationNumber(originalCredentialAttribute.getRegistrationNumber());
                credentialDto.setGrantingInstitution(originalCredentialAttribute.getGrantingInstitution());
                credentialDto.setInstitutionCity(originalCredentialAttribute.getInstitutionCity());
                credentialDto.setInstitutionProvStateCode(originalCredentialAttribute.getInstitutionProvStateCode());
                credentialDto.setInstitutionCountryCode(originalCredentialAttribute.getInstitutionCountryCode());
                credentialDto.setEquivalencyFlag(originalCredentialAttribute.isEquivalent());
                credentialDto.setYearIssued(originalCredentialAttribute.getYearIssued());

                credentialDto.setEffectiveStartDate(originalCredentialAttribute.getStartDate());
                credentialDto.setEffectiveEndDate(originalCredentialAttribute.getExpiryDate());
                credentialDto.setEndReasonCode(originalCredentialAttribute.getEndReasonCode());
                credentialDto.setDataOwnerCode(originalCredentialAttribute.getSource());

                credentialDtos.add(credentialDto);
            }
        }
    }

    public static void setExpertises(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<ExpertiseAttribute> originalExpertiseAttributes = provider.getExpertises();
        if (!CollectionUtils.isEmpty(originalExpertiseAttributes)) {
            List<ExpertiseDto> expertiseDtos = new ArrayList<>();
            providerDetails.setExpertise(expertiseDtos);

            for (ExpertiseAttribute originalExpertiseAttribute : originalExpertiseAttributes) {
                ExpertiseDto credentialDto = new ExpertiseDto();

                credentialDto.setRoleTypeCode(originalExpertiseAttribute.getRoleCode());
                credentialDto.setTypeCode(originalExpertiseAttribute.getUncodedType());
                credentialDto.setSourcesCode(originalExpertiseAttribute.getSourceCode());

                credentialDto.setEffectiveStartDate(originalExpertiseAttribute.getStartDate());
                credentialDto.setEffectiveEndDate(originalExpertiseAttribute.getExpiryDate());
                credentialDto.setEndReasonCode(originalExpertiseAttribute.getEndReasonCode());
                credentialDto.setDataOwnerCode(originalExpertiseAttribute.getSource());

                expertiseDtos.add(credentialDto);
            }
        }
    }

    public static void setStatuses(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<StatusAttribute> originalstatusAttributes = provider.getStatuses();
        if (!CollectionUtils.isEmpty(originalstatusAttributes)) {
            List<StatusDto> statusDtos = new ArrayList<>();
            providerDetails.setStatuses(statusDtos);

            for (StatusAttribute originalStatusAttribute : originalstatusAttributes) {
                StatusDto statusDto = new StatusDto();

                statusDto.setTypeCode(originalStatusAttribute.getUncodedType());
                statusDto.setClassCode(originalStatusAttribute.getClassCode());
                statusDto.setReasonCode(originalStatusAttribute.getReasonCode());

                statusDto.setEffectiveStartDate(originalStatusAttribute.getStartDate());
                statusDto.setEffectiveEndDate(originalStatusAttribute.getExpiryDate());
                statusDto.setEndReasonCode(originalStatusAttribute.getEndReasonCode());
                statusDto.setDataOwnerCode(originalStatusAttribute.getSource());

                statusDtos.add(statusDto);
            }
        }
    }

    public static void setWorkLocations(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<WorkLocationAttribute> workLocationEntities = provider.getWorkLocations();
        if (!CollectionUtils.isEmpty(workLocationEntities)) {
            List<WorkLocationDto> workLocationDtos = new ArrayList<>();
            providerDetails.setWorkLocationList(workLocationDtos);

            for (WorkLocationAttribute originalWorkLocationAttribute : workLocationEntities) {
                WorkLocationDto workLocationDto = new WorkLocationDto();

                workLocationDto.setIdentifier(stringToLong(originalWorkLocationAttribute.getIdentifier()));
                workLocationDto.setDataOwnerCode(originalWorkLocationAttribute.getDataOwnerCode());

                setWorkLocationDetails(originalWorkLocationAttribute, workLocationDto);
                setWorkLocationAddresses(originalWorkLocationAttribute, workLocationDto);
                setWorkLocationElectronicAddresses(originalWorkLocationAttribute, workLocationDto);
                setWorkLocationPhones(originalWorkLocationAttribute, workLocationDto);
                setWorkLocationInformationRoutes(originalWorkLocationAttribute, workLocationDto);

                workLocationDtos.add(workLocationDto);
            }
        }
    }

    private static void setWorkLocationDetails(WorkLocationAttribute originalWorkLocationAttribute, WorkLocationDto workLocationDto) {
        List<WorkLocationDetailsAttribute> workLocationDetailsEntities = originalWorkLocationAttribute.getDetails();
        if (!CollectionUtils.isEmpty(workLocationDetailsEntities)) {
            List<WorkLocationDetailsDto> workLocationDetailsDtos = new ArrayList<>();
            workLocationDto.setWorkLocationDetails(workLocationDetailsDtos);

            for (WorkLocationDetailsAttribute originalWorkLocationDetailsAttribute : workLocationDetailsEntities) {
                WorkLocationDetailsDto workLocationDetailsDto = new WorkLocationDetailsDto();

                workLocationDetailsDto.setName(originalWorkLocationDetailsAttribute.getName());
                workLocationDetailsDto.setAdditionalAddresseeInfo(originalWorkLocationDetailsAttribute.getAdditionalAddresseeInfo());
                workLocationDetailsDto.setDefaultFlag(originalWorkLocationDetailsAttribute.isDefaulted());
                workLocationDetailsDto.setTypeCode(originalWorkLocationDetailsAttribute.getTypeCode());

                workLocationDetailsDto.setEffectiveStartDate(originalWorkLocationDetailsAttribute.getStartDate());
                workLocationDetailsDto.setEffectiveEndDate(originalWorkLocationDetailsAttribute.getExpiryDate());
                workLocationDetailsDto.setEndReasonCode(originalWorkLocationDetailsAttribute.getEndReasonCode());

                workLocationDetailsDtos.add(workLocationDetailsDto);
            }
        }
    }

    private static void setWorkLocationAddresses(WorkLocationAttribute originalWorkLocationAttribute, WorkLocationDto workLocationDto) {
        List<AddressAttribute> originalAddresses = originalWorkLocationAttribute.getAddresses();
        if (!CollectionUtils.isEmpty(originalAddresses)) {
            List<AddressDto> addresses = new ArrayList<AddressDto>();
            workLocationDto.setAddresses(addresses);

            for (AddressAttribute originalAddress : originalAddresses) {
                AddressDto addressDto = new AddressDto();

                addressDto.setCommunicationPurposeCode(originalAddress.getCommunicationPurposeCode());
                addressDto.setTypeCode(originalAddress.getUncodedType());

                List<String> streetAddressLines = originalAddress.getStreetAddressLines();
                if (!CollectionUtils.isEmpty(streetAddressLines)) {
                    int lineNumber = 1;
                    for (String streetAddressLine : streetAddressLines) {
                        switch (lineNumber) {
                            case 1:
                                addressDto.setAddressLineOne(streetAddressLine);
                                break;
                            case 2:
                                addressDto.setAddressLineTwo(streetAddressLine);
                                break;
                            case 3:
                                addressDto.setAddressLineThree(streetAddressLine);
                                break;
                            case 4:
                                addressDto.setAddressLineFour(streetAddressLine);
                                break;
                        }

                        lineNumber++;
                    }
                }
                addressDto.setCity(originalAddress.getCity());
                addressDto.setProvinceOrStateTxt(originalAddress.getProvince());
                addressDto.setPostalCode(originalAddress.getPostalCode());
                addressDto.setCountryCode(originalAddress.getCountry());

                addressDto.setEffectiveStartDate(originalAddress.getStartDate());
                addressDto.setEffectiveEndDate(originalAddress.getExpiryDate());
                addressDto.setEndReasonCode(originalAddress.getEndReasonCode());
                addressDto.setDataOwnerCode(originalAddress.getSource());

                addresses.add(addressDto);
            }
        }
    }

    private static void setWorkLocationElectronicAddresses(WorkLocationAttribute originalWorkLocationAttribute, WorkLocationDto workLocationDto) {
        List<EmailAttribute> originalEmails = originalWorkLocationAttribute.getEmailAddresses();
        if (!CollectionUtils.isEmpty(originalEmails)) {
            List<ElectronicAddressDto> emails = new ArrayList<ElectronicAddressDto>();
            workLocationDto.setElectronicAddresses(emails);

            for (EmailAttribute originalEmailAttribute : originalEmails) {
                ElectronicAddressDto emailDto = new ElectronicAddressDto();

                emailDto.setCommunicationPurposeCode(originalEmailAttribute.getCommunicationPurposeCode());
                emailDto.setTypeCode(originalEmailAttribute.getUncodedType());
                emailDto.setAddress(originalEmailAttribute.getAddress());
                emailDto.setEffectiveStartDate(originalEmailAttribute.getStartDate());
                emailDto.setEffectiveEndDate(originalEmailAttribute.getExpiryDate());
                emailDto.setEndReasonCode(originalEmailAttribute.getEndReasonCode());
                emailDto.setDataOwnerCode(originalEmailAttribute.getSource());

                emails.add(emailDto);
            }
        }
    }

    private static void setWorkLocationPhones(WorkLocationAttribute originalWorkLocationAttribute, WorkLocationDto workLocationDto) {
        List<PhoneAttribute> originalPhones = originalWorkLocationAttribute.getPhoneNumbers();
        if (!CollectionUtils.isEmpty(originalPhones)) {
            List<TelecommunicationDto> phones = new ArrayList<TelecommunicationDto>();
            workLocationDto.setTelecommunications(phones);

            for (PhoneAttribute originalPhoneAttribute : originalPhones) {
                TelecommunicationDto phoneDto = new TelecommunicationDto();

                phoneDto.setCommunicationPurposeCode(originalPhoneAttribute.getCommunicationPurposeCode());
                phoneDto.setTypeCode(originalPhoneAttribute.getUncodedType());
                phoneDto.setAreaCode(originalPhoneAttribute.getAreaCode());
                phoneDto.setNumber(originalPhoneAttribute.getNumber());
                phoneDto.setExtension(originalPhoneAttribute.getExtension());

                phoneDto.setEffectiveStartDate(originalPhoneAttribute.getStartDate());
                phoneDto.setEffectiveEndDate(originalPhoneAttribute.getExpiryDate());
                phoneDto.setEndReasonCode(originalPhoneAttribute.getEndReasonCode());
                phoneDto.setDataOwnerCode(originalPhoneAttribute.getSource());

                phones.add(phoneDto);
            }
        }
    }

    private static void setWorkLocationInformationRoutes(WorkLocationAttribute originalWorkLocationAttribute, WorkLocationDto workLocationDto) {
        List<InformationRouteAttribute> originalInformationRouteAttributes = originalWorkLocationAttribute.getInformationRoutes();
        if (!CollectionUtils.isEmpty(originalInformationRouteAttributes)) {
            List<InformationRouteDto> informationRouteDtos = new ArrayList<InformationRouteDto>();
            workLocationDto.setInformationRoutes(informationRouteDtos);

            for (InformationRouteAttribute originalInformationRouteAttribute : originalInformationRouteAttributes) {
                InformationRouteDto informationRouteDto = new InformationRouteDto();

                informationRouteDto.setDocumentTypeCode(originalInformationRouteAttribute.getDocumentTypeCode());
                //informationRouteDto.setMechanismTypeCode(originalInformationRouteAttribute.getMechanismTypeCode());
                informationRouteDto.setDefaultFlag(originalInformationRouteAttribute.isDefaulted());

                AddressAttribute addressAttribute = originalInformationRouteAttribute.getAddressAttribute();
                EmailAttribute emailAttribute = originalInformationRouteAttribute.getEmailAttribute();
                PhoneAttribute phoneAttribute = originalInformationRouteAttribute.getPhoneAttribute();

                if (addressAttribute != null) {
                    final AddressDto addressDto = new AddressDto();
                    addressDto.setTypeCode(addressAttribute.getUncodedType());
                    informationRouteDto.setAddressDto(addressDto);
                }
                
                if (emailAttribute != null) {
                    final ElectronicAddressDto electronicAddressDto = new ElectronicAddressDto();
                    electronicAddressDto.setTypeCode(emailAttribute.getUncodedType());
                    informationRouteDto.setElectronicAddressDto(electronicAddressDto);
                } 
                
                if (phoneAttribute != null) {
                    final TelecommunicationDto telecommunicationDto = new TelecommunicationDto();
                    telecommunicationDto.setTypeCode(phoneAttribute.getUncodedType());
                    informationRouteDto.setTelecommunicationDto(telecommunicationDto);
                }
                
                informationRouteDto.setCommunicationPurposeCode(originalInformationRouteAttribute.getCommunicationPurposeCode());
                informationRouteDto.setCommunicationDataOwnerCode(originalInformationRouteAttribute.getCommunicationDataOwnerCode());

                informationRouteDto.setWorkLocationIdentifier(originalInformationRouteAttribute.getWorkLocationIdentifier());
                informationRouteDto.setWorkLocationDataOwnerCode(originalInformationRouteAttribute.getWorkLocationOwnerCode());

                informationRouteDto.setEffectiveStartDate(originalInformationRouteAttribute.getStartDate());
                informationRouteDto.setEffectiveEndDate(originalInformationRouteAttribute.getExpiryDate());
                informationRouteDto.setEndReasonCode(originalInformationRouteAttribute.getEndReasonCode());
                informationRouteDto.setDataOwnerCode(originalInformationRouteAttribute.getSource());

                informationRouteDtos.add(informationRouteDto);
            }
        }
    }

    public static void setRegistryUserRelationships(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<ProviderRelationshipAttribute> registryUserRelationships = provider.getRegistryUserRelationships();
        if (!CollectionUtils.isEmpty(registryUserRelationships)) {
            List<RegistryUserRelationshipDto> registryUserRelationshipDtos = new ArrayList<>();
            providerDetails.setRegistryUserRelationships(registryUserRelationshipDtos);

            for (ProviderRelationshipAttribute providerRelationship : registryUserRelationships) {
                RegistryUserRelationshipDto registryUserRelationshipDto = new RegistryUserRelationshipDto();

                registryUserRelationshipDto.setTypeCode(providerRelationship.getRelationshipWithProviderType());
                registryUserRelationshipDto.setEffectiveStartDate(providerRelationship.getStartDate());
                registryUserRelationshipDto.setEffectiveEndDate(providerRelationship.getExpiryDate());
                registryUserRelationshipDto.setEndReasonCode(providerRelationship.getEndReasonCode());
                registryUserRelationshipDto.setDataOwnerCode(providerRelationship.getSource());
                registryUserRelationshipDto.setRegistryUserChid(providerRelationship.getRelationshipWithProviderCollegeId());
                registryUserRelationshipDto.setRegUserTypeCode(providerRelationship.getRelationshipTypeCode());
                registryUserRelationshipDtos.add(registryUserRelationshipDto);
            }
        }
    }

    public static void setProviderRelationships(ProviderAttribute provider, ProviderDetails providerDetails) {
        List<ProviderRelationshipAttribute> originalProviderRelationships = provider.getProviderRelationships();
        if (!CollectionUtils.isEmpty(originalProviderRelationships)) {
            List<ProviderRelationshipDto> providerRelationshipDtos = new ArrayList<>();
            providerDetails.setProviderRelationships(providerRelationshipDtos);

            for (ProviderRelationshipAttribute providerRelationship : originalProviderRelationships) {
                ProviderRelationshipDto providerRelationshipDto = new ProviderRelationshipDto();

                providerRelationshipDto.setIdentifier(providerRelationship.getRelationshipWithProviderCollegeId());
                providerRelationshipDto.setIdentifierTypeCode(providerRelationship.getRelationshipWithProviderType());
                providerRelationshipDto.setRelationshipTypeCode(providerRelationship.getRelationshipTypeCode());
                providerRelationshipDto.setEffectiveStartDate(providerRelationship.getStartDate());
                providerRelationshipDto.setEffectiveEndDate(providerRelationship.getExpiryDate());
                providerRelationshipDto.setEndReasonCode(providerRelationship.getEndReasonCode());
                providerRelationshipDto.setDataOwnerCode(providerRelationship.getSource());
                providerRelationshipDto.setRelationshipWithProviderName(providerRelationship.getRelationshipWithProviderName());

                providerRelationshipDtos.add(providerRelationshipDto);
            }
        }
    }

    public static Long stringToLong(String longString) {
        if (StringUtils.isEmpty(longString)) {
            return null;
        }

        return Long.valueOf(longString);
    }

    private static void setQueryParameters(QueryRequestEntity queryRequestEntity, QueryRequest queryRequest) {
        QueryParameters queryParameters = new QueryParameters();
        queryRequest.setQueryParameters(queryParameters);

        queryParameters.setHistoryFlag(queryRequestEntity.isIsHistory());
        queryParameters.setProviderRoleTypeCode(queryRequestEntity.getProviderRoleTypeCode());

        // There should really only be one identifier as that's all that can be passed in
        List<IdentifierAttribute> identifiers = queryRequestEntity.getAuditableIdentifiers();
        if (!CollectionUtils.isEmpty(identifiers)) {
            IdentifierAttribute identifierAttribute = identifiers.get(0);
            queryParameters.setIdentifier(identifierAttribute.getValue());
            queryParameters.setIdentifierTypeCode(identifierAttribute.getUncodedType());
        }

        ProviderAttribute provider = queryRequestEntity.getProvider();

        if (provider != null) {
            if (!CollectionUtils.isEmpty(provider.getPersonNames())) {
                PersonNameAttribute personNameAttribute = provider.getPersonNames().get(0);
                queryParameters.setFirstName(personNameAttribute.getFirstName());
                queryParameters.setLastName(personNameAttribute.getLastName());
            }

            if (!CollectionUtils.isEmpty(provider.getAddresses())) {
                AddressAttribute address = provider.getAddresses().get(0);
                queryParameters.setCity(address.getCity());
            }
                        
            if (!CollectionUtils.isEmpty(provider.getDemographicDetails())) {
                queryParameters.setGender(provider.getDemographicDetails().get(0).getGender().getValue());
            }
            
            if (!CollectionUtils.isEmpty(provider.getExpertises())) {
                List<String> qualifications = new ArrayList<>();
                for (ExpertiseAttribute expertise : provider.getExpertises()) {
                    qualifications.add(expertise.getUncodedType());
                }
                queryParameters.setQualifications(qualifications);
            }
        }
    }
    
    private static boolean demographicElementsAreEmpty(Person originalDemographicDetail) {
        return originalDemographicDetail.getBirthDate() == null
                && originalDemographicDetail.getDeathDate() == null
                && originalDemographicDetail.getBirthCountryCode() == null
                && originalDemographicDetail.getBirthProvinceCode() == null
                && originalDemographicDetail.getGender() == null
                && originalDemographicDetail.getStartDate() == null
                && originalDemographicDetail.getExpiryDate() == null
                && originalDemographicDetail.getEndReasonCode() == null
                && originalDemographicDetail.getSource() == null;
    }

}
