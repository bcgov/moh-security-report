/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.facilitytofhir;

import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import java.util.Date;

/**
 *
 * @author jonathan.wiebe
 */
public class SetAddressAttributes extends SetAttributesCommon {

    public SetAddressAttributes(FHIRFactory theFactory) {
        super(theFactory);
    }

    public void addAddressPeriod(Object address, Date start, Date end) {
        factory.getSetPeriodAttributes().addPeriod(address, start, end);
    }

    public void setAddressCityStateCountry(Object address, String city, String provinceOrStateTxt, String countryCode) {
        if (city != null && !city.isEmpty()) {
            factory.callMethod(address, "setCity", city);
        }
        if (provinceOrStateTxt != null && !provinceOrStateTxt.isEmpty()) {
            factory.callMethod(address, "setState", provinceOrStateTxt);
        }
        if (countryCode != null && !countryCode.isEmpty()) {
            factory.callMethod(address, "setCountry", countryCode);
        }
    }

    public void setAddressType(Object addressType, FHIRFactory.AddressType addressTypeSystem) {
        factory.callMethod(addressType, "setType", toAddressTypeSystemR4(addressTypeSystem));
    }

    public void setAddressLines(Object address, String addressLineOne, String addressLineTwo, String addressLineThree) {
        StringBuilder fullText = new StringBuilder();
        if (addressLineOne != null && !addressLineOne.isEmpty()) {
            factory.callMethod(address, "addLine", addressLineOne);
            fullText.append(addressLineOne + " ");
        }
        if (addressLineTwo != null && !addressLineTwo.isEmpty()) {
            factory.callMethod(address, "addLine", addressLineTwo);
            fullText.append(addressLineTwo + " ");
        }
        if (addressLineThree != null && !addressLineThree.isEmpty()) {
            factory.callMethod(address, "addLine", addressLineThree);
            fullText.append(addressLineThree);
        }
        factory.callMethod(address, "setText", fullText.toString().trim());
    }

    public void setAddressPurposeCode(Object address, Object purposeCode) {
        factory.getSetPurposeCodeAttributes().setPurposeCoding(address, purposeCode);
    }

    public void setAddressPostalCode(Object address, String postalCode) {
        if (postalCode != null && !postalCode.isEmpty()) {
            factory.callMethod(address, "setPostalCode", postalCode);
        }
    }

    private Object toAddressTypeSystemR4(FHIRFactory.AddressType system) {
        switch (system) {
            case POSTAL: {
                return org.hl7.fhir.r4.model.Address.AddressType.POSTAL;
            }
            case PHYSICAL: {
                return org.hl7.fhir.r4.model.Address.AddressType.PHYSICAL;
            }
            case BOTH: {
                return org.hl7.fhir.r4.model.Address.AddressType.BOTH;
            }
            default:
                return org.hl7.fhir.r4.model.Address.AddressType.NULL;
        }
    }


    public void setAddressProvOrState(Object address, String provinceOrStateTxt) {
        factory.callMethod(address, "setState", provinceOrStateTxt);
    }

    public void setAddressCountry(Object address, String countryCode) {
        factory.callMethod(address, "setCountry", countryCode);
    }

}
