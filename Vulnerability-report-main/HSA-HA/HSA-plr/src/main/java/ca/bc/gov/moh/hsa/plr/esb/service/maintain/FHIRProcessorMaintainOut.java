/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.esb.service.maintain;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.esb.QueryResponse;
import ca.uhn.fhir.context.FhirContext;
import ca.uhn.fhir.parser.IParser;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.hl7.fhir.r4.model.Bundle;
import org.hl7.fhir.r4.model.CodeableConcept;
import org.hl7.fhir.r4.model.Coding;
import org.hl7.fhir.r4.model.OperationOutcome;

/**
 *
 * @author jonathan.wiebe
 */
public class FHIRProcessorMaintainOut implements Processor {

    FhirContext ctx = FhirContext.forR4();

    @Override
    public void process(Exchange exchng) throws Exception {
        IParser jparser = ctx.newJsonParser();
        IParser xparser = ctx.newXmlParser();
        Bundle bundle = new Bundle();
        MaintainProviderResponse response = exchng.getIn().getBody(MaintainProviderResponse.class);
        
        bundle.setType(Bundle.BundleType.TRANSACTIONRESPONSE);
        populateAck(response, bundle);
        
        String contentType = exchng.getIn().getHeader("contentType", String.class);
        String bString = "not ok";
        if (contentType != null) {
            if (contentType.contains("xml")) {
                bString = xparser.setPrettyPrint(true).encodeResourceToString(bundle);
            } else {
                bString = jparser.setPrettyPrint(true).encodeResourceToString(bundle);
            }
        }
        exchng.getOut().setBody(bString, String.class);
    }

    private void populateAck(MaintainProviderResponse response, Bundle bundle) {
        for (Acknowledgment ack : response.getAcknowledgments()) {
            OperationOutcome oo = new OperationOutcome();
            OperationOutcome.OperationOutcomeIssueComponent ooic = new OperationOutcome.OperationOutcomeIssueComponent();
            ooic.setDetails(codeCon(ack.getMsgCode(), ack.getMsgText()));
            oo.getIssue().add(ooic);
            if (ack.getMsgCode().contains("7067")) {
                ooic.setCode(OperationOutcome.IssueType.BUSINESSRULE);
                ooic.setSeverity(OperationOutcome.IssueSeverity.INFORMATION);
            } else {
                ooic.setCode(OperationOutcome.IssueType.EXCEPTION);
                ooic.setSeverity(OperationOutcome.IssueSeverity.ERROR);
            }

            Bundle.BundleEntryComponent bec = new Bundle.BundleEntryComponent();
            bec.setResource(oo);
            bundle.getEntry().add(bec);

        }
    }

    private CodeableConcept codeCon(String code, String msg) {
        CodeableConcept cc = codeCon(code);
        cc.setText(msg);
        return cc;
    }

    private CodeableConcept codeCon(String code) {
        CodeableConcept cc = new CodeableConcept();
        Coding c = new Coding();
        cc.getCoding().add(c);
        c.setCode(code);
        return cc;
    }

}
