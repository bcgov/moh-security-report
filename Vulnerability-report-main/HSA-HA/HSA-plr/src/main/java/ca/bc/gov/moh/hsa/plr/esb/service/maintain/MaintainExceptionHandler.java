/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.esb.service.maintain;

import ca.bc.gov.moh.hsa.entity.CommunicationFunction;
import ca.bc.gov.moh.hsa.plr.converter.dtotohl7.PLREntityToHL7AddTypeConverter;
import ca.bc.gov.moh.hsa.plr.converter.dtotohl7.PLREntityToHL7UpdateTypeConverter;
import ca.bc.gov.moh.hsa.plr.converter.hl7todto40.HL7_40_ToEntityConverter;
import ca.bc.gov.moh.hsa.plr.entity.transaction.AcknowledgementEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.MaintainProviderResponseEntity;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import javax.validation.ConstraintViolation;
import org.apache.camel.Exchange;
import org.apache.camel.Processor;
import org.apache.camel.component.bean.validator.BeanValidationException;
import org.hl7.v3.m4_0.HL7RequestMessage;
import org.hl7.v3.m4_0.MCCIMT000300Receiver;
import org.hl7.v3.m4_0.PRPMIN301011MCCIMT000300Message;
import org.hl7.v3.m4_0.PRPMIN303011MCCIMT000300Message;
import org.springframework.stereotype.Component;

/**
 * Handles exceptions thrown during the MaintainProvider process
 * @author greg.perkins
 */
@Component
public class MaintainExceptionHandler implements Processor {

    @Override
    public void process(Exchange exchange) throws Exception {
        Throwable caused = exchange.getProperty(Exchange.EXCEPTION_CAUGHT, Throwable.class);
        if (caused != null) {
            caused.printStackTrace();
            while (caused.getCause() != null) {
                caused = caused.getCause();
            }
        }
        String errorMessage = buildMessage(caused);
        MaintainProviderResponseEntity res = new MaintainProviderResponseEntity();
        res.setCreationTime(new Date());
        res.setMessageId(UUID.randomUUID().toString());
        
        Object in = exchange.getIn().getBody();
        String incomingMessageId = "";
        if (in instanceof HL7RequestMessage){
            HL7RequestMessage hl7 = (HL7RequestMessage)in;
            incomingMessageId = hl7.getId().getExtension();
            res.setInteractionId(hl7.getInteractionId().getExtension());
            HL7_40_ToEntityConverter converter = new HL7_40_ToEntityConverter(){};
            converter.setSenderFields(hl7, res);
            converter.setReceiverFields(hl7, res);
            CommunicationFunction sender = res.getSender();
            CommunicationFunction receiver = res.getReceiver().get(0);
            res.setSender(receiver);
            res.getReceiver().set(0,sender);
        } 
        AcknowledgementEntity nack = new AcknowledgementEntity();
        nack.setCode("MSG.PRV.MAN.1.0.1000");
        nack.setText(errorMessage);
        nack.setTypeCode("AE");
        nack.setTargetMessageID(incomingMessageId);
        res.getAcknowledgements().add(nack);
        
        if (exchange.getIn().getHeader("SOAPAction", String.class).equals("PRPM_IN301010")){
            PRPMIN301011MCCIMT000300Message response = PLREntityToHL7AddTypeConverter.convertMaintainProviderResponseEntityToAdd40(res);
            exchange.getIn().setBody(response);
        } else {
            PRPMIN303011MCCIMT000300Message response = PLREntityToHL7UpdateTypeConverter.convertMaintainProviderResponseEntityToUpdate40(res);
            exchange.getIn().setBody(response);
        }  
    }

    /**
     * Generates an error message based on the exception thrown
     *
     * @param caused Throwable - The exception thrown
     * @return String - Human Readable error
     */
    private String buildMessage(Throwable caused) {
        if (caused == null) {
            return "Unidentified Error";
        }
        StringBuilder buff = new StringBuilder();
        if (caused instanceof BeanValidationException) {
            Set<ConstraintViolation<Object>> constraintViolations = ((BeanValidationException) caused).getConstraintViolations();
            for (ConstraintViolation<Object> constraintViolation : constraintViolations) {
                if (buff.length() > 0) {
                    buff.append(", ");
                }
                buff.append(constraintViolation.getMessage());
            }
        } else {
            buff.append(caused.getClass().getSimpleName());
            buff.append(": ");
            buff.append(caused.getMessage());
        }
        return buff.toString();
    }

}
