/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir;

import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto;
import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import java.io.Serializable;
import java.util.logging.Logger;

/**
 * Class for mapping components between PLR Individual Provider and FHIR
 * BCPractitionerBundle profile resource.
 *
 * @author dan.stepanov
 */
public class MapIndivProviderToBCPractitionerBundle implements ProviderFhirConstants, Serializable {

    private static final String CLASSNAME = MapIndivProviderToBCPractitionerBundle.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    public static ProviderDetails indivProviderDetails = new ProviderDetails();

    public static void addProviderToBCPractitionerBundle(FHIRFactory factory, ProviderDetails indivProviderDetails, Object bcPractitionerBundleFhir) {

        // create BCPractitioner/BCPractitionerRole types for FHIR model
        Object bcPractitionerFhir = factory.newBCPractitioner();
        Object bcPractitionerRoleFhir = factory.newBCPractitionerRole();

        MapIndivProviderToBCPractitionerFhir.addProviderActiveStatusToBCPractitioner(factory, indivProviderDetails, bcPractitionerFhir);
        if (indivProviderDetails.getAddresses() != null) {
            MapIndivProviderToBCPractitionerFhir.addProviderAddressToBCPractitioner(factory, indivProviderDetails.getAddresses(), bcPractitionerFhir);
        }
        if (indivProviderDetails.getConditions() != null) {
            MapIndivProviderToBCPractitionerFhir.addProviderConditionToBCPractitioner(factory, indivProviderDetails.getConditions(), bcPractitionerFhir);
        }
        if (indivProviderDetails.getConfidentialityIndicators() != null) {
            MapIndivProviderToBCPractitionerFhir.addProviderConfidentialityToBCPractitioner(factory, indivProviderDetails.getConfidentialityIndicators(), bcPractitionerFhir);
        }
        if (indivProviderDetails.getCredentials() != null) {
            MapIndivProviderToBCPractitionerFhir.addProviderCredentialToBCPractitionerQualif(factory, indivProviderDetails.getCredentials(), bcPractitionerFhir);
        }
        if (indivProviderDetails.getDemographicDetails() != null) {
            MapIndivProviderToBCPractitionerFhir.addProviderDemographicDetailsToBCPractitioner(factory, indivProviderDetails.getDemographicDetails(), bcPractitionerFhir);
        }
        if (indivProviderDetails.getDisciplinaryActions() != null) {
            MapIndivProviderToBCPractitionerFhir.addProviderDisciplinaryActionToBCPractitioner(factory, indivProviderDetails.getDisciplinaryActions(), bcPractitionerFhir);
        }
        if (indivProviderDetails.getElectronicAddresses() != null) {
            MapIndivProviderToBCPractitionerFhir.addProviderElectronicAddressToBCPractitioner(factory, indivProviderDetails.getElectronicAddresses(), bcPractitionerFhir);
        }
        if (indivProviderDetails.getExpertise() != null) {
            MapIndivProviderToBCPractitionerFhir.addProviderExpertiseLangToBCPractitionerComm(factory, indivProviderDetails.getExpertise(), bcPractitionerFhir);
        }
        if (indivProviderDetails.getIdentifiers() != null) {
            MapIndivProviderToBCPractitionerFhir.addProviderIdentifiersToBCPractitioner(factory, indivProviderDetails.getIdentifiers(), bcPractitionerFhir);
        }
        if (indivProviderDetails.getStatuses() != null) {
            MapIndivProviderToBCPractitionerFhir.addProviderLicenseStatusToBCPractitioner(factory, indivProviderDetails.getStatuses(), bcPractitionerFhir);
        }
        if (indivProviderDetails.getIndNames() != null) {
            MapIndivProviderToBCPractitionerFhir.addProviderNameToBCPractitioner(factory, indivProviderDetails.getIndNames(), bcPractitionerFhir);
        }
        if (indivProviderDetails.getNotes() != null) {
            MapIndivProviderToBCPractitionerFhir.addProviderNotesToBCPractitioner(factory, indivProviderDetails.getNotes(), bcPractitionerFhir);
        }
        if (indivProviderDetails.getProviderRelationships() != null) {
            MapIndivProviderToBCPractitionerFhir.addProviderRelationshipToBCPractitioner(factory, indivProviderDetails.getProviderRelationships(), bcPractitionerFhir);
        }
        if (indivProviderDetails.getTelecommunication() != null) {
            MapIndivProviderToBCPractitionerFhir.addProviderTelecomToBCPractitioner(factory, indivProviderDetails.getTelecommunication(), bcPractitionerFhir);
        }

        // logic for BCPractitionerRole w/BCPractitioner reference that has an IPC
        // check for indiv Provider identifiers 
        if (indivProviderDetails.getIdentifiers() != null && !indivProviderDetails.getIdentifiers().isEmpty()) {
            // loop through those identifiers for the indivProvider IPC - IND individual type Provider
            for (CollegeIdentifierDto indivProviderIdentifier : indivProviderDetails.getIdentifiers()) {
                if (!indivProviderIdentifier.getTypeCode().isEmpty() && indivProviderIdentifier.getTypeCode().equalsIgnoreCase(INTERNAL_PROVIDER_CODE)) {
                    // add role type/specialty/ to BCPractitionerRole  
                    // indivProviderDetails.getProviderType() is 'IND' and we need the indivProvider role type DEN/RN/MD...
                    if (indivProviderDetails.getType() != null && indivProviderDetails.getProviderType() != null) {
                        MapIndivProviderToBCPractitionerRoleFhir.addProviderRoleTypeToBCPractitionerRoleCode(factory, indivProviderDetails.getType(), bcPractitionerRoleFhir, indivProviderIdentifier.getIdentifier());
                    }
                    if (indivProviderDetails.getExpertise() != null && !indivProviderDetails.getExpertise().isEmpty()) {
                        MapIndivProviderToBCPractitionerRoleFhir.addProviderExpertiseToBCPractitionerRoleSpecialty(factory, indivProviderDetails.getExpertise(), bcPractitionerRoleFhir);
                    }
                    // SetPractitionerBundleAttributes w/BCPractitionerRole profile
                    factory.getSetPractitionerBundleAttributes().setPractitionerRole(bcPractitionerBundleFhir, bcPractitionerRoleFhir);
                    // check if there is any provider to organization relationships 
                    // add org relationships to new BCPractitionerRole
                    if (indivProviderDetails.getProviderRelationships() != null && !indivProviderDetails.getProviderRelationships().isEmpty()) {
                        // loop through providerRelationship identifiers for the org Provider ORGID
                        for (ProviderRelationshipDto providerRelationshipDto : indivProviderDetails.getProviderRelationships()) {
                            if (providerRelationshipDto.getIdentifierTypeCode().equalsIgnoreCase(ORGANIZATION_IDENTIFIER_PLR)) {
                                // create new PractRole for each indiv provider to Org Relationship 
                                Object bcPractRoleOrgRelationshipFhir = factory.newBCPractitionerRole();
                                MapIndivProviderToBCPractitionerRoleFhir.addProviderRelationshipToBCPractitionerRole(factory, providerRelationshipDto, bcPractRoleOrgRelationshipFhir, indivProviderIdentifier.getIdentifier());
                                // set Pract bundle w/PractRole that has an indiv provider to Org Relationship 
                                factory.getSetPractitionerBundleAttributes().setPractitionerRole(bcPractitionerBundleFhir, bcPractRoleOrgRelationshipFhir);
                            }
                        }
                    }
                }
            }
        }
        // TODO check for provider to location relationships

        // SetPractitionerBundleAttributes w/BCPractitioner profile
        factory.getSetPractitionerBundleAttributes().setPractitioner(bcPractitionerBundleFhir, bcPractitionerFhir);
        
        // set Practitioner bundle type to BundleType.TRANSACTION  
//        factory.getSetBundleAttributes().setBundleType(bcPractitionerFhir, FHIRFactory.BundleType.TRANSACTION);

    }

}
