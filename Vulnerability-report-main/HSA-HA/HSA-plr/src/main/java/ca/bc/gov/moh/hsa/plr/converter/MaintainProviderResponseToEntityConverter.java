package ca.bc.gov.moh.hsa.plr.converter;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import static ca.bc.gov.moh.hsa.plr.converter.PLRDtoToEntityConverter.convertHeader;
import static ca.bc.gov.moh.hsa.plr.converter.PLRDtoToEntityConverter.convertSource;
import static ca.bc.gov.moh.hsa.plr.converter.PLRDtoToEntityConverter.convertTarget;
import ca.bc.gov.moh.hsa.plr.entity.transaction.AcknowledgementEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.MaintainProviderResponseEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderAttribute;
import java.lang.reflect.InvocationTargetException;
import java.util.Collection;

/**
 *
 * @author conrad.gustafson
 */
public class MaintainProviderResponseToEntityConverter extends PLRDtoToEntityConverter {

    static MaintainProviderResponseEntity convertMaintainProviderResponseMessageToEntity(MaintainProviderResponse maintainProviderResponse)
            throws IllegalAccessException, InvocationTargetException {

        MaintainProviderResponseEntity out = new MaintainProviderResponseEntity();
        convertHeader(maintainProviderResponse, out);
        convertTarget(maintainProviderResponse, out);
        convertSource(maintainProviderResponse, out);

        Collection<Acknowledgment> acknowledgements = maintainProviderResponse.getAcknowledgments();
        Collection<AcknowledgementEntity> newAcknowledgementEntities = convertAcknowledgements(acknowledgements);
        out.getAcknowledgements().addAll(newAcknowledgementEntities);

        ProviderAttribute provider = new ProviderAttribute();
        initialize(provider);
        out.setProvider(provider);
        if (maintainProviderResponse.getProviderDetails() != null) {
            convertProvider(maintainProviderResponse.getProviderDetails(), out.getProvider());
        }
        provider.setUserId(maintainProviderResponse.getSourceUserId());

        return out;
    }

}
