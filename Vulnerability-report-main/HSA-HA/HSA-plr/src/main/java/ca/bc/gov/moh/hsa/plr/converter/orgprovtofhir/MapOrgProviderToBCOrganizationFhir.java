/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.orgprovtofhir;

import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.NoteDto;
import ca.bc.gov.health.plr.dto.provider.esb.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants;
import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import ca.uhn.fhir.parser.DataFormatException;
import ca.uhn.fhir.validation.SingleValidationMessage;
import ca.uhn.fhir.validation.ValidationResult;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Class for mapping components between PLR Organization Provider and FHIR
 * BCOrganization profile resource.
 *
 *
 * @author dan.stepanov
 */
public class MapOrgProviderToBCOrganizationFhir implements ProviderFhirConstants, Serializable {

    private static final String CLASSNAME = MapOrgProviderToBCOrganizationFhir.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    ProviderDetails orgProviderDetails = new ProviderDetails();

    // provider identifiers/notes/address/names/telecoms
    List<NoteDto> orgProviderNotes = orgProviderDetails.getNotes();
    List<AddressDto> orgProviderAddress = orgProviderDetails.getAddresses();
    List<OrgNameDto> orgProviderNames = orgProviderDetails.getOrgNames();
    List<CollegeIdentifierDto> orgProviderIdentifiers = orgProviderDetails.getIdentifiers();
    List<StatusDto> orgLicenseStatuses = orgProviderDetails.getStatuses();
    List<TelecommunicationDto> providerTelecoms = orgProviderDetails.getTelecommunication();
    List<ElectronicAddressDto> orgElectronicAddresses = orgProviderDetails.getElectronicAddresses();

    public static void addOrgProviderIdentifiersToBCOrganization(FHIRFactory factory, List<CollegeIdentifierDto> orgIdentifiers, Object bcOrganizationFhir) {

        List<Object> bcIdentifiersOrgProviderFhir = new ArrayList<>();
        if (!orgIdentifiers.isEmpty()) {

            for (CollegeIdentifierDto orgIdentifierDto : orgIdentifiers) {

                // create org provider identifier types for FHIR model
                Object bcOrganizationIdentifierFhir = factory.newBCIdentifier();

                // filter for ORGID/IPC/CPN ids
                if (!orgIdentifierDto.getTypeCode().isEmpty()
                        && (orgIdentifierDto.getTypeCode().equalsIgnoreCase(ORGANIZATION_IDENTIFIER_PLR)
                        || orgIdentifierDto.getTypeCode().equalsIgnoreCase(INTERNAL_PROVIDER_CODE)
                        || orgIdentifierDto.getTypeCode().equalsIgnoreCase(COMMON_PROVIDER_NUMBER))) {
                    commonBCIdentifier(factory, bcIdentifiersOrgProviderFhir, bcOrganizationIdentifierFhir, orgIdentifierDto, factory.newPeriod(), factory.identifierTypeMapperPLRtoToFHIR(orgIdentifierDto.getTypeCode()));
                }
            }

            // SetOrganizationAttributes w/bc identifiers
            for (Object orgId : bcIdentifiersOrgProviderFhir) {
                factory.getSetOrganizationAttributes().addOrganizationBCIdentifier(bcOrganizationFhir, orgId);
            }

            // json parse encoded BcOrganization
            String jsonParsedBCOrganizationFhir = factory.parseEncodedBcOrganization(bcOrganizationFhir);

            LOG.log(Level.INFO, "MapOrgProviderToBCOrganizationFhir addOrgProviderIdentifiersToBCOrganization jsonParsedBCOrganizationFhir: {0}.",
                    new Object[]{jsonParsedBCOrganizationFhir});
            // validate new BCOrganization resource w/identifier structure
            Object fhirValidator = factory.initializeFhirValidator();
            validateBcOrganizationFhir(factory, fhirValidator, jsonParsedBCOrganizationFhir);
        }
    }

    private static void commonBCIdentifier(FHIRFactory factory, List<Object> orgProviderIdentifierFhir, Object bcOrgIdentifierFhir, CollegeIdentifierDto collegeIdentifierDto, Object fhirPeriodName, FHIRFactory.IdentifierUse identifUse) {

        factory.getSetIdentifierAttributes().setIdentifierUse(bcOrgIdentifierFhir, identifUse);

        // set the identifier
        factory.getSetIdentifierAttributes().addBCIdentifierTypeResource(bcOrgIdentifierFhir, collegeIdentifierDto.getTypeCode(), collegeIdentifierDto.getIdentifier(), collegeIdentifierDto.getEffectiveStartDate(), collegeIdentifierDto.getEffectiveEndDate());

        // owner and erc
        factory.getSetIdentifierAttributes().setIdentifierERCOwner(bcOrgIdentifierFhir, collegeIdentifierDto.getEndReasonCode(), collegeIdentifierDto.getDataOwnerCode());

        orgProviderIdentifierFhir.add(bcOrgIdentifierFhir);
    }

    public static void addOrgProviderNameToBCOrganization(FHIRFactory factory, List<OrgNameDto> orgProviderNames, Object bcOrganizationFhir) {

        if (!orgProviderNames.isEmpty()) {

            for (OrgNameDto orgNameDto : orgProviderNames) {

                // create org name and custom extensions types for FHIR model
                factory.getSetOrganizationAttributes().setOrganizationCustomNameElement(bcOrganizationFhir,
                        factory.nameTypeMapperPLRtoToFHIR(orgNameDto.getTypeCode()), orgNameDto.getName(),
                        orgNameDto.getEffectiveStartDate(), orgNameDto.getEffectiveEndDate(),
                        orgNameDto.getEndReasonCode(), orgNameDto.getDataOwnerCode());

                // create name alias for org long name aka description
                factory.getSetOrganizationAttributes().setOrganizationTextAlias(bcOrganizationFhir, orgNameDto.getLongName());
            }

            // json parse encoded BcOrganization
            String jsonParsedBCOrganizationFhir = factory.parseEncodedBcOrganization(bcOrganizationFhir);

            LOG.log(Level.INFO, "MapOrgProviderToBCOrganizationFhir addProviderNameToBCOrganization jsonParsedBCOrganizationFhir: {0}.",
                    new Object[]{jsonParsedBCOrganizationFhir});
            // validate new BCOrganization resource w/name structure
            Object fhirValidator = factory.initializeFhirValidator();
            validateBcOrganizationFhir(factory, fhirValidator, jsonParsedBCOrganizationFhir);
        }
    }

    public static void addOrgProviderLicenseStatusToBCOrganization(FHIRFactory factory, List<StatusDto> orgProviderStatus, Object bcOrganizationFhir) {

        if (!orgProviderStatus.isEmpty()) {

            for (StatusDto orgProviderStatusDto : orgProviderStatus) {

                // create BC LicenseStatus (ACTIVE/SUSPENDED/TERMINATED/..) custom extensions FHIR model
                Object bcLicenseStatusExtFhir = factory.newBCLicenseStatus();

                // create BC LicenseStatus custom extensions FHIR model and set status/reason/class codes
                if (orgProviderStatusDto.getTypeCode() != null) {
                    Object ccStatusCode = factory.newCodeableConcept();
                    Object licenceStatusCodeCoding = factory.newCoding();
                    // setCodingSystem
                    factory.getSetCodingAttributes().setCodingSystem(licenceStatusCodeCoding, BC_LICENSE_STATUS_CODE_CODING_SYSTEM_LINK);
                    // setCodingCode
                    factory.getSetCodingAttributes().setCodingCode(licenceStatusCodeCoding, orgProviderStatusDto.getTypeCode());
                    factory.getSetCodeableConceptAttributes().setCoding(ccStatusCode, licenceStatusCodeCoding);
                    // set codeable concept
                    factory.getSetLicenseStatusAttributes().setLicenseStatusCode(bcLicenseStatusExtFhir, ccStatusCode);
                }

                if (orgProviderStatusDto.getReasonCode() != null) {
                    Object ccReasonCode = factory.newCodeableConcept();
                    Object licenceReasonCodeCoding = factory.newCoding();
                    // setCodingSystem
                    factory.getSetCodingAttributes().setCodingSystem(licenceReasonCodeCoding, BC_LICENSE_STATUS_REASON_CODE_CODING_SYSTEM_LINK);
                    // setCodingCode
                    factory.getSetCodingAttributes().setCodingCode(licenceReasonCodeCoding, orgProviderStatusDto.getReasonCode());
                    factory.getSetCodeableConceptAttributes().setCoding(ccReasonCode, licenceReasonCodeCoding);
                    // set codeable concept
                    factory.getSetLicenseStatusAttributes().setLicenseStatusReasonCode(bcLicenseStatusExtFhir, ccReasonCode);
                }

                if (orgProviderStatusDto.getClassCode() != null) {
                    Object ccClassCode = factory.newCodeableConcept();
                    Object licenceClassCodeCoding = factory.newCoding();
                    // setCodingSystem
                    factory.getSetCodingAttributes().setCodingSystem(licenceClassCodeCoding, BC_LICENSE_STATUS_CLASS_CODE_CODING_SYSTEM_LINK);
                    // setCodingCode
                    factory.getSetCodingAttributes().setCodingCode(licenceClassCodeCoding, orgProviderStatusDto.getClassCode());
                    factory.getSetCodeableConceptAttributes().setCoding(ccClassCode, licenceClassCodeCoding);
                    // set codeable concept                   
                    factory.getSetLicenseStatusAttributes().setLicenseStatusClassCode(bcLicenseStatusExtFhir, ccClassCode);
                }

                // add new End reason code and owner code
                factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(bcLicenseStatusExtFhir, orgProviderStatusDto.getEndReasonCode(), orgProviderStatusDto.getDataOwnerCode());

                // effective start/end dates
                factory.getSetPeriodAttributes().addPeriod(bcLicenseStatusExtFhir, orgProviderStatusDto.getEffectiveStartDate(), orgProviderStatusDto.getEffectiveEndDate());

                // set BC Organization w/bcLicenseStatusExtension FHIR
                factory.getSetOrganizationAttributes().setOrganizationLicenseStatus(bcOrganizationFhir, bcLicenseStatusExtFhir);

                // json parse encoded BcOrganization
                String jsonParsedBCOrganizationFhir = factory.parseEncodedBcOrganization(bcOrganizationFhir);

                LOG.log(Level.INFO, "MapOrgProviderToBCOrganizationFhir addOrgProviderLicenseStatusToBCOrganization jsonParsedBCOrganizationFhir: {0}.",
                        new Object[]{jsonParsedBCOrganizationFhir});
                // validate new BCOrganization resource w/LicenseStatus structure
                Object fhirValidator = factory.initializeFhirValidator();
                validateBcOrganizationFhir(factory, fhirValidator, jsonParsedBCOrganizationFhir);
            }
        }
    }

    public static void addOrgProviderAddressToBCOrganizationAddress(FHIRFactory factory, List<AddressDto> orgProviderAddress, Object bcOrganizationFhir) {

        List<Object> bcAddressOrgProviderFhir = new ArrayList<>();
        if (!orgProviderAddress.isEmpty()) {

            for (AddressDto orgAddressDto : orgProviderAddress) {

                // create org provider bc address types for FHIR model
                Object bcOrganizationAddressFhir = factory.newBCAddress();

                commonOrgBCAddress(factory, bcAddressOrgProviderFhir, bcOrganizationAddressFhir, orgAddressDto, factory.addressTypeMapperPLRtoToFHIR(orgAddressDto.getTypeCode()));
            }

            // SetOrganizationAttributes w/bc address
            for (Object orgAddress : bcAddressOrgProviderFhir) {
                factory.getSetOrganizationAttributes().setOrganizationAddress(bcOrganizationFhir, orgAddress);
            }

            // json parse encoded BcOrganization
            String jsonParsedBCOrganizationFhir = factory.parseEncodedBcOrganization(bcOrganizationFhir);

            LOG.log(Level.INFO, "MapOrgProviderToBCOrganizationFhir addOrgProviderAddressToBCOrganizationAddress jsonParsedBCOrganizationFhir: {0}.",
                    new Object[]{jsonParsedBCOrganizationFhir});
            // validate new BCOrganization resource w/identifier structure
            Object fhirValidator = factory.initializeFhirValidator();
            validateBcOrganizationFhir(factory, fhirValidator, jsonParsedBCOrganizationFhir);
        }
    }

    private static void commonOrgBCAddress(FHIRFactory factory, List<Object> bcAddressOrgProviderFhir, Object orgBcAddressFhir, AddressDto orgAddressDto, FHIRFactory.AddressType addressType) {

        factory.getSetAddressAttributes().setAddressType(orgBcAddressFhir, addressType);

        // set BC Address FHIR values from orgAddressDto
        factory.getSetAddressAttributes().setAddressCityStateCountry(orgBcAddressFhir, orgAddressDto.getCity(), orgAddressDto.getProvinceOrStateTxt(), orgAddressDto.getCountryCode());
        factory.getSetAddressAttributes().setAddressPostalCode(orgBcAddressFhir, orgAddressDto.getPostalCode());
        factory.getSetAddressAttributes().setAddressLines(orgBcAddressFhir, orgAddressDto.getAddressLineOne(), orgAddressDto.getAddressLineTwo(), orgAddressDto.getAddressLineThree());

        // set FHIR period start/end date w/effective start/end dates from address
        factory.getSetAddressAttributes().addAddressPeriod(orgBcAddressFhir, orgAddressDto.getEffectiveStartDate(), orgAddressDto.getEffectiveEndDate());

        // communication purpose codes from PLR mapped to BC extension for communication purpose codes i.e. MC/OC/BC
        if (orgAddressDto.getCommunicationPurposeCode() != null && !orgAddressDto.getCommunicationPurposeCode().isEmpty()) {
            Object cc = factory.newCodeableConcept();
            Object coding = factory.newCoding();
            factory.getSetCodingAttributes().setCodingSystem(coding, BC_COMM_PURPOSE_CODING_SYSTEM_LINK);
            factory.getSetCodingAttributes().setCodingCode(coding, orgAddressDto.getCommunicationPurposeCode());
            factory.getSetCodeableConceptAttributes().setCoding(cc, coding);
            factory.getSetPurposeCodeAttributes().setPurposeCoding(orgBcAddressFhir, cc);
        }
        factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(orgBcAddressFhir, orgAddressDto.getEndReasonCode(), orgAddressDto.getDataOwnerCode());

        bcAddressOrgProviderFhir.add(orgBcAddressFhir);
    }

    public static void addOrgProviderTelecomToBCOrganizationTelecom(FHIRFactory factory, List<TelecommunicationDto> orgTelecoms, Object bcOrganizationFhir) {

        List<Object> bcOrgTelecomsProviderFhir = new ArrayList<>();
        if (!orgTelecoms.isEmpty()) {

            for (TelecommunicationDto orgTelecomDto : orgTelecoms) {

                // create org provider bc telecom types for FHIR model
                Object bcOrgTelecomFhir = factory.newBCContactPoint();

                // org telecom type code phone/fax/pager/modem
                commonOrgTelecomBcContactPoint(factory, bcOrgTelecomsProviderFhir, bcOrgTelecomFhir, orgTelecomDto, factory.telecomTypeMapperPLRDtoToFHIR(orgTelecomDto.getTypeCode()));
            }

            // SetOrganizationAttributes w/bc telecoms
            for (Object orgTelecom : bcOrgTelecomsProviderFhir) {
                factory.getSetOrganizationAttributes().addOrganizationTelecom(bcOrganizationFhir, orgTelecom);
            }

            // json parse encoded BcOrganization
            String jsonParsedBCOrganizationFhir = factory.parseEncodedBcOrganization(bcOrganizationFhir);

            LOG.log(Level.INFO, "MapOrgProviderToBCOrganizationFhir addOrgProviderTelecomToBCOrganizationTelecom jsonParsedBCOrganizationFhir: {0}.",
                    new Object[]{jsonParsedBCOrganizationFhir});
            // validate new BCOrganization resource w/identifier structure
            Object fhirValidator = factory.initializeFhirValidator();
            validateBcOrganizationFhir(factory, fhirValidator, jsonParsedBCOrganizationFhir);
        }
    }

    private static void commonOrgTelecomBcContactPoint(FHIRFactory factory, List<Object> orgTelecomsFhir, Object telecomFhir, TelecommunicationDto orgTelecomDto, FHIRFactory.ContactPointSystem telecomContactSystem) {
        // get phone values from the TelecommunicationDto and set contact system point code
        factory.getSetContactPointAttributes().setContactPointSystem(telecomFhir, telecomContactSystem);

        // populate the three parts of the telephone in the contact point
        factory.getSetContactPointAttributes().setContactPointTelephone(telecomFhir, orgTelecomDto.getAreaCode(), orgTelecomDto.getNumber(), orgTelecomDto.getExtension());

        // add new End reason code and owner code
        factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(telecomFhir, orgTelecomDto.getEndReasonCode(), orgTelecomDto.getDataOwnerCode());

        // communication purpose codes from PLR mapped to BC extension for communication purpose codes i.e. MC/OC/BC
        if (orgTelecomDto.getCommunicationPurposeCode() != null && !orgTelecomDto.getCommunicationPurposeCode().isEmpty()) {
            Object cc = factory.newCodeableConcept();
            Object coding = factory.newCoding();
            factory.getSetCodingAttributes().setCodingSystem(coding, BC_COMM_PURPOSE_CODING_SYSTEM_LINK);
            factory.getSetCodingAttributes().setCodingCode(coding, orgTelecomDto.getCommunicationPurposeCode());
            factory.getSetCodeableConceptAttributes().setCoding(cc, coding);
            factory.getSetPurposeCodeAttributes().setPurposeCoding(telecomFhir, cc);
        }

        // set FHIR period start/end date w/effective start/end dates from telecom
        factory.getSetPeriodAttributes().addPeriod(telecomFhir, orgTelecomDto.getEffectiveStartDate(), orgTelecomDto.getEffectiveEndDate());

        orgTelecomsFhir.add(telecomFhir);
    }

    public static void addOrgProviderActiveStatusToBCOrganization(FHIRFactory factory, ProviderDetails orgProviderDetails, Object bcOrganizationFhir) {

        if (orgProviderDetails != null) {
            // set BC Organization w/active status flag = true in FHIR
            factory.getSetOrganizationAttributes().setOrganizationActiveStatus(bcOrganizationFhir, true);

            // json parse encoded BcOrganization
            String jsonParsedBCOrganizationFhir = factory.parseEncodedBcOrganization(bcOrganizationFhir);

            LOG.log(Level.INFO, "MapOrgProviderToBCOrganizationFhir addOrgProviderActiveStatusToBCOrganization jsonParsedBCOrganizationFhir: {0}.",
                    new Object[]{jsonParsedBCOrganizationFhir});
            // validate new BCOrganization resource w/identifier structure
            Object fhirValidator = factory.initializeFhirValidator();
            validateBcOrganizationFhir(factory, fhirValidator, jsonParsedBCOrganizationFhir);
        }
    }

    public static void addOrgProviderElectronicAddressToBCOrganizationTelecom(FHIRFactory factory, List<ElectronicAddressDto> orgElectronicAddresses, Object bcOrganizationFhir) {

        List<Object> bcOrgTelecomsProviderFhir = new ArrayList<>();
        if (!orgElectronicAddresses.isEmpty()) {

            for (ElectronicAddressDto orgElectronicAddressDto : orgElectronicAddresses) {

                // create org provider bc telecom types for FHIR model
                Object bcOrgTelecomFhir = factory.newBCContactPoint();

                // org telecom type code type code email/ftp/http
                commonOrgElecAddressBcContactPoint(factory, bcOrgTelecomsProviderFhir, bcOrgTelecomFhir, orgElectronicAddressDto, factory.telecomTypeMapperPLRDtoToFHIR(orgElectronicAddressDto.getTypeCode()));
            }

            // SetOrganizationAttributes w/bc telecoms
            for (Object orgTelecom : bcOrgTelecomsProviderFhir) {
                factory.getSetOrganizationAttributes().addOrganizationTelecom(bcOrganizationFhir, orgTelecom);
            }

            // json parse encoded BcOrganization
            String jsonParsedBCOrganizationFhir = factory.parseEncodedBcOrganization(bcOrganizationFhir);

            LOG.log(Level.INFO, "MapOrgProviderToBCOrganizationFhir addOrgProviderElectronicAddressToBCOrganizationTelecom jsonParsedBCOrganizationFhir: {0}.",
                    new Object[]{jsonParsedBCOrganizationFhir});
            // validate new BCOrganization resource w/identifier structure
            Object fhirValidator = factory.initializeFhirValidator();
            validateBcOrganizationFhir(factory, fhirValidator, jsonParsedBCOrganizationFhir);
        }
    }

    private static void commonOrgElecAddressBcContactPoint(FHIRFactory factory, List<Object> orgTelecomsFhir, Object elecAddressTelecomFhir, ElectronicAddressDto orgElectronicAddressDto, FHIRFactory.ContactPointSystem telecomContactSystem) {
        // get ElectronicAddress values from the ElectronicAddressDto and set contact system point code
        factory.getSetContactPointAttributes().setContactPointSystem(elecAddressTelecomFhir, telecomContactSystem);

        // set email/ftp/http FHIR value
        if (orgElectronicAddressDto.getAddress() != null && !orgElectronicAddressDto.getAddress().isEmpty()) {
            factory.getSetContactPointAttributes().setContactPointValue(elecAddressTelecomFhir, orgElectronicAddressDto.getAddress());
        }

        // add new End reason code and owner code
        factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(elecAddressTelecomFhir, orgElectronicAddressDto.getEndReasonCode(), orgElectronicAddressDto.getDataOwnerCode());

        // communication purpose codes from PLR mapped to BC extension for communication purpose codes i.e. MC/OC/BC
        if (orgElectronicAddressDto.getCommunicationPurposeCode() != null && !orgElectronicAddressDto.getCommunicationPurposeCode().isEmpty()) {
            Object cc = factory.newCodeableConcept();
            Object coding = factory.newCoding();
            factory.getSetCodingAttributes().setCodingSystem(coding, BC_COMM_PURPOSE_CODING_SYSTEM_LINK);
            factory.getSetCodingAttributes().setCodingCode(coding, orgElectronicAddressDto.getCommunicationPurposeCode());
            factory.getSetCodeableConceptAttributes().setCoding(cc, coding);
            factory.getSetPurposeCodeAttributes().setPurposeCoding(elecAddressTelecomFhir, cc);
        }

        // set FHIR period start/end date w/effective start/end dates from telecom
        factory.getSetPeriodAttributes().addPeriod(elecAddressTelecomFhir, orgElectronicAddressDto.getEffectiveStartDate(), orgElectronicAddressDto.getEffectiveEndDate());

        orgTelecomsFhir.add(elecAddressTelecomFhir);
    }

    public static void addOrgProviderNoteToBCOrganization(FHIRFactory factory, List<NoteDto> orgProviderNotes, Object bcOrganizationFhir) {

        if (!orgProviderNotes.isEmpty()) {

            for (NoteDto orgProviderNoteDto : orgProviderNotes) {

                // create BC Note custom extensions FHIR model
                Object bcNoteExtFhir = factory.newBCNoteExtension();

                // create BC Note custom text extension FHIR model
                // get note text values from the facilityNoteDto and set BC note text custom extension string type values
                if (orgProviderNoteDto.getNoteText() != null && !orgProviderNoteDto.getNoteText().isEmpty()) {
                    factory.getSetNoteAttributes().setNoteText(bcNoteExtFhir, orgProviderNoteDto.getNoteText());
                }

                // get note identifier values from the orgProviderNoteDto and set BC note identifier custom extension Identifier type values
                Object identifierTypeNote = factory.newIdentifier();
                factory.getSetIdentifierAttributes().setIdentifierValue(identifierTypeNote, orgProviderNoteDto.getIdentifier());
                factory.getSetIdentifierAttributes().setIdentifierSystem(identifierTypeNote, ProviderFhirConstants.BC_NOTE_CODING_SYSTEM_LINK);

                factory.getSetNoteAttributes().setNoteIdentifier(bcNoteExtFhir, identifierTypeNote);

                // get period time for BC Note extension
                factory.getSetPeriodAttributes().addPeriod(bcNoteExtFhir, orgProviderNoteDto.getEffectiveStartDate(), orgProviderNoteDto.getEffectiveEndDate());

                // add new End reason code and owner code
                factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().addERCOwner(bcNoteExtFhir, orgProviderNoteDto.getEndReasonCode(), orgProviderNoteDto.getDataOwnerCode());

                // set BC Organization w/bcNoteExtension FHIR
                factory.getSetOrganizationAttributes().setOrganizationNote(bcOrganizationFhir, bcNoteExtFhir);

                // json parse encoded BcOrganization
                String jsonParsedBCOrganizationFhir = factory.parseEncodedBcOrganization(bcOrganizationFhir);

                LOG.log(Level.INFO, "MapOrgProviderToBCOrganizationFhir addOrgProviderLicenseStatusToBCOrganization jsonParsedBCOrganizationFhir: {0}.",
                        new Object[]{jsonParsedBCOrganizationFhir});
                // validate new BCOrganization resource w/bcNote structure
                Object fhirValidator = factory.initializeFhirValidator();
                validateBcOrganizationFhir(factory, fhirValidator, jsonParsedBCOrganizationFhir);
            }
        }
    }

    public static boolean validateBcOrganizationFhir(FHIRFactory factory, Object fhirValidator, String parsedOrganizationFhir) throws DataFormatException {
        // Validate
        ValidationResult validResult = null;
        boolean isOrganizationResultValid = false;
        try {
            validResult = factory.initializeFhirValidationResult(parsedOrganizationFhir);
        } catch (DataFormatException dfe) {
            LOG.log(Level.SEVERE, "MapOrgProviderToBCOrganizationFhir encountered a data format error while validate Organization Fhir.");
        } catch (Exception ex) {
            LOG.log(Level.SEVERE, "MapOrgProviderToBCOrganizationFhir encountered an error while validating Organization Fhir.");
        }
        if (validResult != null && validResult.isSuccessful()) {
            isOrganizationResultValid = true;
        } else if (validResult != null && !validResult.isSuccessful()) {
            // display the validation issues
            for (SingleValidationMessage validMsg : validResult.getMessages()) {

//                LOG.log(Level.INFO, "MapOrgProviderToBCOrganizationFhir validation issue severity is: {0} and location is: {1} and message is: {2}.",
//                        new Object[]{validMsg.getSeverity(), validMsg.getLocationString(), validMsg.getMessage()});
            }
        }

//        LOG.log(Level.INFO, "MapOrgProviderToBCOrganizationFhir validateOrganizationFhir isOrganizationResultValid is: {0}.",
//                new Object[]{isOrganizationResultValid});
        return isOrganizationResultValid;
    }

}
