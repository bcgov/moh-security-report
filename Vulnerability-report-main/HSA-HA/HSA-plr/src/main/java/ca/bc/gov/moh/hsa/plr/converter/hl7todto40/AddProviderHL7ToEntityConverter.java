package ca.bc.gov.moh.hsa.plr.converter.hl7todto40;

import ca.bc.gov.moh.hsa.entity.AddressAttribute;
import ca.bc.gov.moh.hsa.entity.Attribute;
import ca.bc.gov.moh.hsa.entity.ConfidentialityMaskAttribute;
import ca.bc.gov.moh.hsa.entity.DateAttribute;
import ca.bc.gov.moh.hsa.entity.EmailAttribute;
import ca.bc.gov.moh.hsa.entity.GenderAttribute;
import ca.bc.gov.moh.hsa.entity.IdentifierAttribute;
import ca.bc.gov.moh.hsa.entity.Person;
import ca.bc.gov.moh.hsa.entity.PersonNameAttribute;
import ca.bc.gov.moh.hsa.entity.PhoneAttribute;
import ca.bc.gov.moh.hsa.plr.converter.hl7todto.AuditInfo;
import static ca.bc.gov.moh.hsa.plr.converter.hl7todto40.HL7_40_ToEntityConverter.PRIVILEGE_CATEGORIZATION_CODE;
import static ca.bc.gov.moh.hsa.plr.converter.hl7todto40.HL7_40_ToEntityConverter.STATUS_CLASS_CODE;
import ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils;
import static ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser.AUDIT_INFO_POINTER_OID;
import static ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser.AUDIT_INFO_TARGET_OID;
import static ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser.CONDITION_OID;
import static ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser.CREDENTIAL_OID;
import static ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser.DATA_OWNER_OID;
import static ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser.DISCIPLINARYACTION_OID;
import static ca.bc.gov.moh.hsa.plr.converter.utils.OidsUser.WORKLOCATION_OID;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ConditionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.CredentialAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.DisciplinaryActionAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ExpertiseAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.InformationRouteAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.MaintainProviderRequestEntity;
import ca.bc.gov.moh.hsa.plr.entity.transaction.NoteAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.ProviderRelationshipAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.StatusAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.WorkLocationAttribute;
import ca.bc.gov.moh.hsa.plr.entity.transaction.WorkLocationDetailsAttribute;
import java.io.Serializable;
import java.math.BigInteger;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.xml.bind.JAXBElement;
import org.apache.cxf.common.util.CollectionUtils;
import org.apache.cxf.common.util.StringUtils;
import org.hl7.v3.m4_0.AD;
import org.hl7.v3.m4_0.CD;
import org.hl7.v3.m4_0.CE;
import org.hl7.v3.m4_0.CR;
import org.hl7.v3.m4_0.ED;
import org.hl7.v3.m4_0.EN;
import org.hl7.v3.m4_0.HL7ControlActProcess;
import org.hl7.v3.m4_0.HL7HealthCareProvider;
import org.hl7.v3.m4_0.HL7RequestMessage;
import org.hl7.v3.m4_0.II;
import org.hl7.v3.m4_0.INT;
import org.hl7.v3.m4_0.IVLTS;
import org.hl7.v3.m4_0.MFMIMT700701Author2;
import org.hl7.v3.m4_0.ON;
import org.hl7.v3.m4_0.PRPMIN301010MCCIMT000100Message;
import org.hl7.v3.m4_0.PRPMIN301010MFMIMT700701ControlActProcess;
import org.hl7.v3.m4_0.PRPMIN301010MFMIMT700701Subject1;
import org.hl7.v3.m4_0.PRPMMT301010ActDefinitionOrEvent;
import org.hl7.v3.m4_0.PRPMMT301010ActDefinitionOrEventLocation;
import org.hl7.v3.m4_0.PRPMMT301010ActDefinitionOrEventSequel;
import org.hl7.v3.m4_0.PRPMMT301010AssignedEntity;
import org.hl7.v3.m4_0.PRPMMT301010ControlActEvent;
import org.hl7.v3.m4_0.PRPMMT301010Custodian;
import org.hl7.v3.m4_0.PRPMMT301010DisciplinaryAction;
import org.hl7.v3.m4_0.PRPMMT301010HealthCareProvider;
import org.hl7.v3.m4_0.PRPMMT301010HealthCareProviderAddr;
import org.hl7.v3.m4_0.PRPMMT301010HealthCareProviderId;
import org.hl7.v3.m4_0.PRPMMT301010HealthCareProviderRelatedTo;
import org.hl7.v3.m4_0.PRPMMT301010HealthCareProviderResponsibleFor;
import org.hl7.v3.m4_0.PRPMMT301010HealthCareProviderStatusCode;
import org.hl7.v3.m4_0.PRPMMT301010HealthCareProviderSubjectOf1;
import org.hl7.v3.m4_0.PRPMMT301010HealthCareProviderSubjectOf4;
import org.hl7.v3.m4_0.PRPMMT301010HealthCareProviderTelecom;
import org.hl7.v3.m4_0.PRPMMT301010InformDefinition;
import org.hl7.v3.m4_0.PRPMMT301010InformRequest;
import org.hl7.v3.m4_0.PRPMMT301010InformRequestIndirectTarget;
import org.hl7.v3.m4_0.PRPMMT301010InformRequestSubject;
import org.hl7.v3.m4_0.PRPMMT301010Note;
import org.hl7.v3.m4_0.PRPMMT301010Organization;
import org.hl7.v3.m4_0.PRPMMT301010Place;
import org.hl7.v3.m4_0.PRPMMT301010PrimaryPerformer3;
import org.hl7.v3.m4_0.PRPMMT301010PrincipalPerson;
import org.hl7.v3.m4_0.PRPMMT301010PrincipalPersonAdministrativeGenderCode;
import org.hl7.v3.m4_0.PRPMMT301010PrincipalPersonBirthTime;
import org.hl7.v3.m4_0.PRPMMT301010PrincipalPersonBirthplace;
import org.hl7.v3.m4_0.PRPMMT301010PrincipalPersonDeceasedTime;
import org.hl7.v3.m4_0.PRPMMT301010PrincipalPersonName;
import org.hl7.v3.m4_0.PRPMMT301010Privilege;
import org.hl7.v3.m4_0.PRPMMT301010PrivilegeCategorization;
import org.hl7.v3.m4_0.PRPMMT301010QualifiedEntity;
import org.hl7.v3.m4_0.PRPMMT301010RoleActivation;
import org.hl7.v3.m4_0.PRPMMT301010ServiceDeliveryLocation;
import org.hl7.v3.m4_0.PRPMMT301010ServiceDeliveryLocationAddr;
import org.hl7.v3.m4_0.PRPMMT301010ServiceDeliveryLocationTelecom;
import org.hl7.v3.m4_0.PRPMMT301010Subject3;
import org.hl7.v3.m4_0.PRPMMT301010Subject4;
import org.hl7.v3.m4_0.PRPMMT301010Subject6;
import org.hl7.v3.m4_0.PRPMMT301010TerritorialAuthority;
import org.hl7.v3.m4_0.ST;
import org.hl7.v3.m4_0.TEL;
import org.hl7.v3.m4_0.TS;

/**
 * Converts HL7 Add Provider Messages to internal ESB DTOs.
 * 
 * Note that AddProviderHL7ToEntityConverter and UpdateProviderHL7ToEntityConverter 
 * should be identical except where the mapping rules are different. At the time
 * of this writing, they differ only in the setDemographicDetails method for
 * setting birthday and gender.
 * 
 * @see UpdateProviderHL7ToEntityConverter
 *
 * @author conrad.gustafson
 */
public class AddProviderHL7ToEntityConverter extends HL7_40_ToEntityConverter_WithProvider {

    public MaintainProviderRequestEntity convertPRPMIN301010ToEntity(PRPMIN301010MCCIMT000100Message requestMessage) throws URISyntaxException {
        final MaintainProviderRequestEntity hl7RequestMessage = convertHL7RequestMessage(requestMessage);
        hl7RequestMessage.setMessageType("PRPM_IN301010");
        hl7RequestMessage.setMessageId(requestMessage.getId().getExtension());
        hl7RequestMessage.setInteractionId(requestMessage.getInteractionId().getExtension());
        return hl7RequestMessage;
    }

    @Override
    public HL7HealthCareProvider getHealthCareProvider(HL7RequestMessage providerMessage) {
        PRPMIN301010MCCIMT000100Message addRequestMessage = (PRPMIN301010MCCIMT000100Message) providerMessage;

        PRPMMT301010HealthCareProvider healthCareProvider = null;
        try {
            JAXBElement<PRPMMT301010HealthCareProvider> healthCareProviderElement = addRequestMessage.getControlActProcess().getSubject().get(0).getRegistrationEvent().getSubject1().getHealthCareProvider();
            if (healthCareProviderElement != null) {
                healthCareProvider = healthCareProviderElement.getValue();
            }
        } catch (NullPointerException npe) {
            // Nothing to do here
        }
        return healthCareProvider;
    }

    @Override
    protected void setNames(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider untypedHealthCareProvider) {
        PRPMMT301010HealthCareProvider healthCareProvider = (PRPMMT301010HealthCareProvider) untypedHealthCareProvider;
        
        List<PRPMMT301010PrincipalPersonName> names;
        try {
            names = healthCareProvider.getHealthCarePrincipalPerson().getValue().getName();
        } catch (NullPointerException npe) {
            return;
        }

        List<EN> namesAsENList = new ArrayList<>();
        namesAsENList.addAll(names);
        List<PersonNameAttribute> personNameAttributes = createPersonNameAttributesFromHL7Names(namesAsENList, requestMessage);
        providerAttribute.setPersonNames(personNameAttributes);
    }

    @Override
    protected void setAddresses(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider untypedHealthCareProvider) {
        PRPMMT301010HealthCareProvider healthCareProvider = (PRPMMT301010HealthCareProvider) untypedHealthCareProvider;
        
        List<PRPMMT301010HealthCareProviderAddr> addressList = healthCareProvider.getAddr();

        if (!CollectionUtils.isEmpty(addressList)) {
            List<AddressAttribute> addressAttributes = new ArrayList<>();
            providerAttribute.setAddresses(addressAttributes);

            for (PRPMMT301010HealthCareProviderAddr address : addressList) {
                AddressAttribute addressAttribute = createAddressAttributeFromHL7Address(address, requestMessage);
                addressAttributes.add(addressAttribute);
            }
        }

    }
    
    @Override
    protected void setPhonesAndEmail(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider untypedHealthCareProvider) {
        PRPMMT301010HealthCareProvider healthCareProvider = (PRPMMT301010HealthCareProvider) untypedHealthCareProvider;
        
        List<PRPMMT301010HealthCareProviderTelecom> telecomList = healthCareProvider.getTelecom();

        if (!CollectionUtils.isEmpty(telecomList)) {
            List<PhoneAttribute> phoneAttributeList = new ArrayList<>();
            providerAttribute.setPhones(phoneAttributeList);

            List<EmailAttribute> emailAttributeList = new ArrayList<>();
            providerAttribute.setEmails(emailAttributeList);

            for (PRPMMT301010HealthCareProviderTelecom tel : telecomList) {
                createPhoneOrEmailAttribute(tel, phoneAttributeList, emailAttributeList, requestMessage);
            }
        }
    }

    protected void setConfidentiality(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider untypedHealthCareProvider){
         PRPMMT301010HealthCareProvider healthCareProvider = (PRPMMT301010HealthCareProvider) untypedHealthCareProvider;
        // Confidentiality flag
        if (healthCareProvider.getSubjectOf3()!=null && healthCareProvider.getSubjectOf3().getValue()!=null){
            PRPMMT301010InformDefinition informDefinition = healthCareProvider.getSubjectOf3().getValue().getInformDefinition();
            if (informDefinition!=null){
                ConfidentialityMaskAttribute ma = new ConfidentialityMaskAttribute();
                ma.setMasked(informDefinition.isNegationInd());
                ma.setStartDate(getLowTime(informDefinition.getEffectiveTime()));
                ma.setExpiryDate(getHighTime(informDefinition.getEffectiveTime()));
                // Please Note that the empty demographic block created from here will be removed later in PLREntityToDtoTypeConverter::setDemographicDetails
                if (providerAttribute.getDemographicDetails()==null){
                    providerAttribute.setDemographicDetails(new ArrayList<Person>());
                }
                if (providerAttribute.getDemographicDetails().isEmpty()){
                    providerAttribute.getDemographicDetails().add(new Person());
                }
                if (providerAttribute.getDemographicDetails().get(0).getConfidentialityMask()==null){
                    providerAttribute.getDemographicDetails().get(0).setConfidentialityMask(new ArrayList<ConfidentialityMaskAttribute>());
                }
                providerAttribute.getDemographicDetails().get(0).getConfidentialityMask().add(ma);
            }
        }
    }
    
    @Override
    protected void setConditions(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider untypedHealthCareProvider) {
        setConfidentiality(requestMessage, providerAttribute, untypedHealthCareProvider);
        
        PRPMMT301010HealthCareProvider healthCareProvider = (PRPMMT301010HealthCareProvider) untypedHealthCareProvider;

        List<ConditionAttribute> conditionAttributes = new ArrayList<>();
        providerAttribute.setConditions(conditionAttributes);
        
        List<PRPMMT301010HealthCareProviderResponsibleFor> responsibleForList = healthCareProvider.getResponsibleFor();

        if (!CollectionUtils.isEmpty(responsibleForList)) {
            for (PRPMMT301010HealthCareProviderResponsibleFor responsibleFor : responsibleForList) {

                ConditionAttribute conditionAttribute = new ConditionAttribute();

                final II controlActReferenceId = responsibleFor.getControlActReferenceId();
                AuditInfo auditInfo = getAuditInfo(controlActReferenceId, requestMessage);
                conditionAttribute.setSource(auditInfo.getDataOwner());
                if (responsibleFor.getUpdateMode() != null) {
                    conditionAttribute.setEndReasonCode(auditInfo.getReasonCode());
                }

                final PRPMMT301010Privilege privilege = responsibleFor.getPrivilege();
                if (privilege != null) {
                    List<II> idList = privilege.getId();
                    for (II id : idList) {
                        if (CONDITION_OID.equals(id.getRoot())) {
                            conditionAttribute.setId(id.getExtension());
                        }
                    }

                    final List<PRPMMT301010Subject4> subjectOfList = privilege.getSubjectOf();
                    if (!CollectionUtils.isEmpty(subjectOfList)) {
                        for (PRPMMT301010Subject4 subjectOf : subjectOfList) {
                            PRPMMT301010PrivilegeCategorization privilegeCategorization = subjectOf.getPrivilegeCategorization();
                            CD code = privilegeCategorization.getCode();
                            if (code != null && PRIVILEGE_CATEGORIZATION_CODE.equals(code.getCode())) {
                                CE value = privilegeCategorization.getValue();
                                if (value != null) {
                                    conditionAttribute.setUncodedType(value.getCode());
                                }
                            }
                        }
                    }
                    
                    if (privilege.getConfidentialityCode() != null 
                            && privilege.getConfidentialityCode().getValue() != null) {
                        
                        CE confidentialityCode = privilege.getConfidentialityCode().getValue();
                        
                        conditionAttribute.setRestricted("R".equals(confidentialityCode.getCode()));
                        
                        if (confidentialityCode.getOriginalText() != null) {
                            conditionAttribute.setRestrictionExplanationText(confidentialityCode.getOriginalText().getText());
                        }
                    }
                    
                    populateAuditInfoFromValidTime(auditInfo, privilege.getEffectiveTime());
                    conditionAttribute.setStartDate(auditInfo.getStartDate());
                    conditionAttribute.setExpiryDate(auditInfo.getExpiryDate());
                } else {
                    continue;
                }

                conditionAttributes.add(conditionAttribute);
            }
        }
    }

    @Override
    protected void setDemographicDetails(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider untypedHealthCareProvider) {
        PRPMMT301010HealthCareProvider healthCareProvider = (PRPMMT301010HealthCareProvider) untypedHealthCareProvider;
        JAXBElement<PRPMMT301010PrincipalPerson> healthCarePrincipalPerson = healthCareProvider.getHealthCarePrincipalPerson();
        if (healthCarePrincipalPerson == null) {
            return;
        }
        PRPMMT301010PrincipalPerson hl7Person = healthCarePrincipalPerson.getValue();
        List<PRPMMT301010PrincipalPersonAdministrativeGenderCode> administrativeGenderCodeList = hl7Person.getAdministrativeGenderCode();
        List<PRPMMT301010PrincipalPersonBirthTime> birthTimeList = hl7Person.getBirthTime();
        JAXBElement<PRPMMT301010PrincipalPersonDeceasedTime> deceasedTimeElement = hl7Person.getDeceasedTime();
        List<PRPMMT301010PrincipalPersonBirthplace> birthplaceList = hl7Person.getBirthplace();
        if (demographicElementsAreEmpty(administrativeGenderCodeList, birthTimeList, deceasedTimeElement, birthplaceList)) {
            return;
        }

        if (providerAttribute.getDemographicDetails() == null) {
            providerAttribute.setDemographicDetails(new ArrayList<Person>());
        }
        List<Person> demographicDetails = providerAttribute.getDemographicDetails();
        Person personAttribute = new Person();
        demographicDetails.add(personAttribute);

        PRPMMT301010PrincipalPersonAdministrativeGenderCode administrativeGenderCode = null;
        if (!CollectionUtils.isEmpty(administrativeGenderCodeList)) {
            administrativeGenderCode = administrativeGenderCodeList.get(0);
            if (administrativeGenderCode != null) {
                personAttribute.setGender(new GenderAttribute(administrativeGenderCode.getCode()));
            }
        }

        PRPMMT301010PrincipalPersonBirthTime birthTime = null;
        if (!CollectionUtils.isEmpty(birthTimeList)) {
            birthTime = birthTimeList.get(0);
            if (birthTime != null) {
                personAttribute.setBirthDate(new DateAttribute(ConverterUtils.convertFromHL7StringToDate(birthTime.getValue())));
            }
        }
        PRPMMT301010PrincipalPersonDeceasedTime deceasedTime = null;
        if (deceasedTimeElement != null) {
            deceasedTime = deceasedTimeElement.getValue();
            if (deceasedTime != null) {
                personAttribute.setDeathDate(new DateAttribute(ConverterUtils.convertFromHL7StringToDate(deceasedTime.getValue())));
            }
        }

        PRPMMT301010PrincipalPersonBirthplace birthplace = null;
        if (!CollectionUtils.isEmpty(birthplaceList)) {
            birthplace = birthplaceList.get(0);
            AD addr = birthplace.getAddr();
            if (addr != null) {
                AddressAttribute createAddressAttributeFromHL7Address = createAddressAttributeFromHL7Address(addr, requestMessage);
                personAttribute.setBirthCountryCode(createAddressAttributeFromHL7Address.getCountry());
                personAttribute.setBirthProvinceCode(createAddressAttributeFromHL7Address.getProvince());
                List<AddressAttribute> addresses = new ArrayList<>();
                addresses.add(createAddressAttributeFromHL7Address);
                personAttribute.setAddress(addresses);
            }
        }

       List<TimeAndAuditAdapter> timeAndAuditElements = Arrays.asList(
                        new TimeAndAuditAdapter(administrativeGenderCode),
                        new TimeAndAuditAdapter(deceasedTime),
                        new TimeAndAuditAdapter(birthTime),
                        new TimeAndAuditAdapter(birthplace));
        mapFirstAvailableAudit(timeAndAuditElements, requestMessage, personAttribute);
        mapFirstAvailableTime(timeAndAuditElements, personAttribute);
    }

    private boolean demographicElementsAreEmpty(List<PRPMMT301010PrincipalPersonAdministrativeGenderCode> administrativeGenderCodeList, List<PRPMMT301010PrincipalPersonBirthTime> birthTimeList, JAXBElement<PRPMMT301010PrincipalPersonDeceasedTime> deceasedTimeElement, List<PRPMMT301010PrincipalPersonBirthplace> birthplaceList) {
        return (administrativeGenderCodeList == null || administrativeGenderCodeList.isEmpty() || administrativeGenderCodeList.get(0) == null)
                && (birthTimeList == null || birthTimeList.isEmpty() || birthTimeList.get(0) == null)
                && (deceasedTimeElement == null || deceasedTimeElement.getValue() == null)
                && (birthplaceList == null || birthplaceList.isEmpty() || birthplaceList.get(0).getAddr() == null);
    }

    private void mapFirstAvailableAudit(List<TimeAndAuditAdapter> timeAndAuditElements, HL7RequestMessage requestMessage, Person personAttribute) {
        for (TimeAndAuditAdapter l : timeAndAuditElements) {
            if (l.getControlActReferenceId() != null) {
                AuditInfo auditInfo = getAuditInfo(l.getControlActReferenceId(), requestMessage);
                personAttribute.setSource(auditInfo.getDataOwner());
                personAttribute.setEndReasonCode(auditInfo.getReasonCode());
                return;
            }
        }
    }

    private void mapFirstAvailableTime(List<TimeAndAuditAdapter> timeAndAuditElements, Person personAttribute) {
        for (TimeAndAuditAdapter l : timeAndAuditElements) {
            if (l.getValidTime() != null) {
                personAttribute.setStartDate(getLowTime(l.getValidTime()));
                personAttribute.setExpiryDate(getHighTime(l.getValidTime()));
                return;
            }
        }
    }

    @Override
    protected void processRelatedToBlocks(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider untypedHealthCareProvider) {
        PRPMMT301010HealthCareProvider healthCareProvider = (PRPMMT301010HealthCareProvider) untypedHealthCareProvider;
        List<PRPMMT301010HealthCareProviderRelatedTo> relatedToList = healthCareProvider.getRelatedTo();
        if (CollectionUtils.isEmpty(relatedToList)) {
            return;
        }
        List<ExpertiseAttribute> expertiseAttributeList = new ArrayList<>();
        providerAttribute.setExpertises(expertiseAttributeList);
        List<CredentialAttribute> credentialAttributeList = new ArrayList<>();
        providerAttribute.setCredentials(credentialAttributeList);
        List<ProviderRelationshipAttribute> providerRelationshipAttributeList = new ArrayList<>();
        providerAttribute.setProviderRelationships(providerRelationshipAttributeList);
        List<WorkLocationAttribute> workLocationAttributeList = new ArrayList<>();
        providerAttribute.setWorkLocations(workLocationAttributeList);
        List<InformationRouteAttribute> informationRouteAttributeList = new ArrayList<>();
        providerAttribute.setInformationRoutes(informationRouteAttributeList);

        for (PRPMMT301010HealthCareProviderRelatedTo relatedTo : relatedToList) {

            JAXBElement<PRPMMT301010HealthCareProvider> relatedToHealthCareProviderElement = relatedTo.getHealthCareProvider();
            if (relatedToHealthCareProviderElement != null) {
                final PRPMMT301010HealthCareProvider relatedToHealthCareProvider = relatedToHealthCareProviderElement.getValue();
                if (relatedToHealthCareProvider != null) {
                    // This is a provider relationship
                    providerRelationshipAttributeList.add(
                            createProviderRelationship(relatedToHealthCareProvider,
                                    relatedTo.getControlActReferenceId(),
                                    relatedTo.getValidTime(), requestMessage, relatedTo));
                }
                continue;
            }

            // Not mapped by HL7
//            expertiseAttribute.setRoleCode(???);
            JAXBElement<PRPMMT301010QualifiedEntity> qualifiedEntityElement = relatedTo.getQualifiedEntity();
            if (qualifiedEntityElement != null) {
                PRPMMT301010QualifiedEntity qualifiedEntity = qualifiedEntityElement.getValue();
                if (qualifiedEntity != null) {
                    createExpertiseOrCredential(qualifiedEntity, expertiseAttributeList, credentialAttributeList, relatedTo, requestMessage);
                }
            }

            // Need to create work locations first, information routes after
            JAXBElement<PRPMMT301010AssignedEntity> assignedEntityElement = relatedTo.getAssignedEntity();
            if (assignedEntityElement != null) {
                PRPMMT301010AssignedEntity assignedEntity = assignedEntityElement.getValue();
                if (assignedEntity != null) {
                    createWorkLocationIfPossible(assignedEntity, workLocationAttributeList, requestMessage);
                }
            }
        }

        // Need to create information routes after work locations because they reference each other
        for (PRPMMT301010HealthCareProviderRelatedTo relatedTo : relatedToList) {

            JAXBElement<PRPMMT301010AssignedEntity> assignedEntityElement = relatedTo.getAssignedEntity();
            if (assignedEntityElement != null) {
                PRPMMT301010AssignedEntity assignedEntity = assignedEntityElement.getValue();
                if (assignedEntity != null) {
                    createInformationRouteIfPossible(assignedEntity, workLocationAttributeList, informationRouteAttributeList, requestMessage);
                }
            }
        }
    }

    public void createExpertiseOrCredential(PRPMMT301010QualifiedEntity qualifiedEntity, List<ExpertiseAttribute> expertiseAttributeList, List<CredentialAttribute> credentialAttributeList, PRPMMT301010HealthCareProviderRelatedTo relatedTo, HL7RequestMessage requestMessage) {
        ExpertiseAttribute expertiseAttribute = null;
        CredentialAttribute credentialAttribute = null;
        Attribute attribute = null;

        // Assume it is an expertise unless you get this weird combo
        boolean isExpertise = true;
        boolean isCredential = false;

        CD code = qualifiedEntity.getCode();
        if (code != null) {
            ED originalText = code.getOriginalText();
            if (originalText != null) {
                TEL reference = originalText.getReference();
                if (reference != null) {
                    String value = reference.getValue();
                    if (!StringUtils.isEmpty(value)) {
                        isCredential = true;
                        isExpertise = false;
                    }
                }
            }
        }

        if (isCredential) {
            credentialAttribute = new CredentialAttribute();
            attribute = credentialAttribute;
        } else {
            expertiseAttribute = new ExpertiseAttribute();
            attribute = expertiseAttribute;
        }

        if (isExpertise) {
            if (code != null) {
                expertiseAttribute.setUncodedType(code.getCode());
                ED originalText = code.getOriginalText();
                if (originalText != null) {
                    expertiseAttribute.setSourceCode(originalText.getText());
                }
            }
            expertiseAttributeList.add(expertiseAttribute);
        }

        if (isCredential) {
            setCredentialSpecificInformation(qualifiedEntity, credentialAttribute, requestMessage, code);
            credentialAttributeList.add(credentialAttribute);
        }

        IVLTS effectiveTime = qualifiedEntity.getEffectiveTime();
        if (effectiveTime != null) {
            attribute.setStartDate(getLowTime(effectiveTime));
            attribute.setExpiryDate(getHighTime(effectiveTime));
        }

        II controlActReferenceId = relatedTo.getControlActReferenceId();
        if (controlActReferenceId != null) {
            AuditInfo auditInfo = getAuditInfo(controlActReferenceId, requestMessage);
            attribute.setSource(auditInfo.getDataOwner());
            if (relatedTo.getUpdateMode() != null) {
                attribute.setEndReasonCode(auditInfo.getReasonCode());
            }
        }
    }

    public void setCredentialSpecificInformation(PRPMMT301010QualifiedEntity qualifiedEntity, CredentialAttribute credentialAttribute, HL7RequestMessage requestMessage, CD code) {
        List<II> idList = qualifiedEntity.getId();
        String id = ConverterUtils.findIdForOid40(idList, CREDENTIAL_OID);
        if (id != null) {
            credentialAttribute.setRegistrationNumber(id);
        }

        CD credentialCode = qualifiedEntity.getCode();
        if (credentialCode != null) {
            credentialAttribute.setUncodedType(credentialCode.getCode());

            ED originalText = credentialCode.getOriginalText();
            if (originalText != null) {
                TEL reference = originalText.getReference();
                if (reference != null) {
                    credentialAttribute.setDesignation(reference.getValue());
                }
            }
        }

        JAXBElement<PRPMMT301010Organization> qualificationGrantingOrganizationEntity = qualifiedEntity.getQualificationGrantingOrganization();
        if (qualificationGrantingOrganizationEntity != null) {
            PRPMMT301010Organization qualificationGrantingOrganization = qualificationGrantingOrganizationEntity.getValue();

            if (qualificationGrantingOrganization != null) {
                List<ON> nameList = qualificationGrantingOrganization.getName();
                if (!CollectionUtils.isEmpty(nameList)) {
                    // There can only be one
                    final ON name = nameList.get(0);
                    if (name != null) {
                        credentialAttribute.setGrantingInstitution(name.getText());
                    }
                }

                List<AD> addrList = qualificationGrantingOrganization.getAddr();
                //PLR-2157
                if (!CollectionUtils.isEmpty(addrList)) {
                    // There can only be one
                    AddressAttribute address = createAddressAttributeFromHL7Address(addrList.get(0), requestMessage);
                    if (address != null) {
                        credentialAttribute.setInstitutionCity(address.getCity());
                        credentialAttribute.setInstitutionProvStateCode(address.getProvince());
                        credentialAttribute.setInstitutionCountryCode(address.getCountry());
                    }
                }

            }

            List<PRPMMT301010Subject3> subjectOf2List = qualifiedEntity.getSubjectOf2();
            if (!CollectionUtils.isEmpty(subjectOf2List)) {
                PRPMMT301010Subject3 subjectOf2 = subjectOf2List.get(0);
                if (subjectOf2 != null) {
                    PRPMMT301010RoleActivation roleActivation = subjectOf2.getRoleActivation();
                    if (roleActivation != null) {
                        JAXBElement<ST> textElement = roleActivation.getText();
                        if (textElement != null) {
                            ST value = textElement.getValue();
                            if (value != null) {
                                credentialAttribute.setYearIssued(value.getText());
                                value.getText();
                            }
                        }
                    }
                }
            }
        }

        List<CR> qualifierList = code.getQualifier();
        if (!CollectionUtils.isEmpty(qualifierList)) {
            CR qualifier = qualifierList.get(0);
            CD value = qualifier.getValue();
            if (value != null) {
                credentialAttribute.setEquivalent(Boolean.valueOf(value.getCode()));
            }
        }
    }

    @Override
    protected void setStatuses(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider untypedHealthCareProvider) {
        PRPMMT301010HealthCareProvider healthCareProvider = (PRPMMT301010HealthCareProvider) untypedHealthCareProvider;
        JAXBElement<PRPMMT301010HealthCareProviderStatusCode> statusCodeElement = healthCareProvider.getStatusCode();
        if (statusCodeElement == null) {
            return;
        }
        PRPMMT301010HealthCareProviderStatusCode statusCode = statusCodeElement.getValue();
        if (statusCode != null) {
            List<StatusAttribute> statusAttributeList = new ArrayList<>();
            providerAttribute.setStatuses(statusAttributeList);

            StatusAttribute statusAttribute = new StatusAttribute();

            statusAttribute.setUncodedType(statusCode.getCode());

            // Hard-coded in HL7
            statusAttribute.setClassCode(STATUS_CLASS_CODE);

            AuditInfo auditInfo = getAuditInfo(statusCode.getControlActReferenceId(), requestMessage);
            statusAttribute.setSource(auditInfo.getDataOwner());
            try{
                String ext = healthCareProvider.getStatusCode().getValue().getControlActReferenceId().getExtension();
                for (PRPMMT301010Subject3 subjectOf2:healthCareProvider.getSubjectOf2()){
                    if (subjectOf2.getRoleActivation().getSubjectOf().get(0).getControlActEvent().getId().getExtension().equals(ext)){
                        statusAttribute.setReasonCode(subjectOf2.getRoleActivation().getReasonCode().getValue().getCode());
                    }
                }
            } catch (Exception e) {}
            if (statusCode.getUpdateMode() != null) {
                statusAttribute.setEndReasonCode(auditInfo.getReasonCode());
            }
            populateAuditInfoFromValidTime(auditInfo, statusCode.getValidTime());
            statusAttribute.setStartDate(auditInfo.getStartDate());
            statusAttribute.setExpiryDate(auditInfo.getExpiryDate());

            statusAttributeList.add(statusAttribute);
        }
    }

    @Override
    protected void setNotes(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider untypedHealthCareProvider) {
        PRPMMT301010HealthCareProvider healthCareProvider = (PRPMMT301010HealthCareProvider) untypedHealthCareProvider;
        List<NoteAttribute> noteAttributeList = new ArrayList<>();
        providerAttribute.setNotes(noteAttributeList);

        List<PRPMMT301010HealthCareProviderSubjectOf4> subjectOf4List = healthCareProvider.getSubjectOf4();
        for (PRPMMT301010HealthCareProviderSubjectOf4 subjectOf4 : subjectOf4List) {

            NoteAttribute noteAttribute = new NoteAttribute();

            final PRPMMT301010Note note = subjectOf4.getNote();
            if (note != null) {
                JAXBElement<II> idElement = note.getId();
                if (idElement != null && idElement.getValue() != null) {
                    noteAttribute.setIdentifier(idElement.getValue().getExtension());
                }
                final ST text = note.getText();
                if (text != null) {
                    noteAttribute.setText(text.getText());
                }

                noteAttributeList.add(noteAttribute);
                AuditInfo auditInfo = getAuditInfo(subjectOf4.getControlActReferenceId(), requestMessage);
                noteAttribute.setSource(auditInfo.getDataOwner());
                if (subjectOf4.getUpdateMode() != null) {
                    noteAttribute.setEndReasonCode(auditInfo.getReasonCode());
                }
                populateAuditInfoFromValidTime(auditInfo, subjectOf4.getValidTime());
                noteAttribute.setStartDate(getLowTime(note.getEffectiveTime()));
                noteAttribute.setExpiryDate(getHighTime(note.getEffectiveTime()));
            }
        }
    }

    @Override
    protected void setDisciplinaryActions(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider untypedHealthCareProvider) {
        PRPMMT301010HealthCareProvider healthCareProvider = (PRPMMT301010HealthCareProvider) untypedHealthCareProvider;
        List<DisciplinaryActionAttribute> attributeList = new ArrayList<>();

        providerAttribute.setDisciplinaryActions(attributeList);

        List<PRPMMT301010HealthCareProviderSubjectOf1> subjectOf1List = healthCareProvider.getSubjectOf1();
        for (PRPMMT301010HealthCareProviderSubjectOf1 subjectOf1 : subjectOf1List) {

            PRPMMT301010DisciplinaryAction disciplinaryAction = subjectOf1.getDisciplinaryAction();
            if (disciplinaryAction != null) {
                DisciplinaryActionAttribute attribute = new DisciplinaryActionAttribute();

                JAXBElement<II> idElement = disciplinaryAction.getId();
                if (idElement != null) {
                    II id = idElement.getValue();

                    if (id != null && DISCIPLINARYACTION_OID.equals(id.getRoot())) {
                        attribute.setIdentifier(id.getExtension());
                    }
                }

                JAXBElement<ST> textElement = disciplinaryAction.getText();
                if (textElement != null) {
                    ST value = textElement.getValue();
                    if (value != null) {
                        attribute.setDescription(value.getText());
                    }
                }

                JAXBElement<TS> availabilityTimeElement = disciplinaryAction.getAvailabilityTime();
                if (availabilityTimeElement != null) {
                    TS value = availabilityTimeElement.getValue();
                    if (value != null) {
                        attribute.setArchiveDate(ConverterUtils.convertFromHL7StringToDate(value.getValue()));
                    }
                }

                JAXBElement<CE> confidentialityCodeElement = disciplinaryAction.getConfidentialityCode();
                if (confidentialityCodeElement != null) {
                    CE value = confidentialityCodeElement.getValue();
                    if (value != null) {
                        attribute.setDisplay(convertToBoolean(value.getCode()));
                    }
                }

                AuditInfo auditInfo = getAuditInfo(subjectOf1.getControlActReferenceId(), requestMessage);
                attribute.setSource(auditInfo.getDataOwner());
                if (subjectOf1.getUpdateMode() != null) {
                    attribute.setEndReasonCode(auditInfo.getReasonCode());
                }
                populateAuditInfoFromValidTime(auditInfo, disciplinaryAction.getEffectiveTime());
                attribute.setStartDate(auditInfo.getStartDate());
                attribute.setExpiryDate(auditInfo.getExpiryDate());

                attributeList.add(attribute);
            }
        }
    }

    private void createWorkLocationIfPossible(PRPMMT301010AssignedEntity assignedEntity,
            List<WorkLocationAttribute> workLocationAttributeList,
            HL7RequestMessage requestMessage) {

        AuditInfoRequirements_40 auditInfoRequirements = new AuditInfoRequirements_40();

        // Test to see if it is a work location or information route
        
        PRPMMT301010ActDefinitionOrEvent actDefinitionOrEvent = null;
        List<PRPMMT301010PrimaryPerformer3> performanceEntityList = assignedEntity.getPerformance();
        if (!CollectionUtils.isEmpty(performanceEntityList)) {
            actDefinitionOrEvent = performanceEntityList.get(0).getActDefinitionOrEvent();
        }
        if (actDefinitionOrEvent == null) {
            return;
        }
        List<PRPMMT301010ActDefinitionOrEventLocation> locationList = actDefinitionOrEvent.getLocation();
        if (!CollectionUtils.isEmpty(locationList)) {

            WorkLocationAttribute workLocationAttribute = new WorkLocationAttribute();
            auditInfoRequirements.setAuditInfoAttribute(workLocationAttribute);

            setWorkLocationSpecificFields(locationList, auditInfoRequirements, workLocationAttribute, requestMessage, workLocationAttributeList);

            Attribute auditInfoAttribute = auditInfoRequirements.getAuditInfoAttribute();
            if (auditInfoAttribute != null) {
                auditInfoAttribute.setStartDate(getLowTime(auditInfoRequirements.getEffectiveTime()));
                auditInfoAttribute.setExpiryDate(getHighTime(auditInfoRequirements.getEffectiveTime()));
                AuditInfo auditInfo = getAuditInfo(auditInfoRequirements.getControlActReferenceId(), requestMessage);
                workLocationAttribute.setDataOwnerCode(auditInfo.getDataOwner());
                if (auditInfoRequirements.isIsUpdateMode()) {
                    auditInfoAttribute.setEndReasonCode(auditInfo.getReasonCode());
                }
            }
        }
    }

    private void createInformationRouteIfPossible(PRPMMT301010AssignedEntity assignedEntity,
            List<WorkLocationAttribute> workLocationAttributeList,
            List<InformationRouteAttribute> informationRouteAttributeList,
            HL7RequestMessage requestMessage) {

        // Test to see if it is an information route
        PRPMMT301010ActDefinitionOrEvent actDefinitionOrEvent = null;
        if (!CollectionUtils.isEmpty(assignedEntity.getPerformance())) {
            actDefinitionOrEvent = assignedEntity.getPerformance().get(0).getActDefinitionOrEvent();
        }
        if (actDefinitionOrEvent == null) {
            return;
        }

        if (!CollectionUtils.isEmpty(actDefinitionOrEvent.getSequel())) {
            setInformationRouteSpecificFields(actDefinitionOrEvent.getSequel(),
                    informationRouteAttributeList,
                    workLocationAttributeList,
                    requestMessage);
        }

    }

    private void setInformationRouteSpecificFields(
            List<PRPMMT301010ActDefinitionOrEventSequel> sequelList,
            List<InformationRouteAttribute> informationRouteAttributeList,
            List<WorkLocationAttribute> workLocationAttributeList,
            HL7RequestMessage requestMessage) {

        InformationRouteAttribute informationRouteAttribute = new InformationRouteAttribute();
        PRPMMT301010ActDefinitionOrEventSequel sequel = sequelList.get(0);

        PRPMMT301010InformRequest informRequest = sequel.getInformRequest();
        if (informRequest != null) {
            CD code = informRequest.getCode();
            if (code != null) {
                informationRouteAttribute.setDocumentTypeCode(code.getCode());
            }

            JAXBElement<PRPMMT301010InformRequestSubject> subjectElement = informRequest.getSubject();
            if (subjectElement != null) {
                PRPMMT301010InformRequestSubject subject = subjectElement.getValue();
                CE modeCode = subject.getModeCode();
                if (modeCode != null) {
                    informationRouteAttribute.setMechanismTypeCode(modeCode.getCode());
                }

                // Check to see if this information route belongs to a work location
                String workLocationChid = getWorkLocationChid(subject.getServiceDeliveryLocation());
                if (!StringUtils.isEmpty(workLocationChid)) {
                    boolean matchingWorkLocationFound = false;
                    BigInteger workLocationChidNumber = new BigInteger(workLocationChid);
                    for (WorkLocationAttribute workLocationAttribute : workLocationAttributeList) {
                        if (workLocationChidNumber.equals(workLocationAttribute.getSequenceNumber())) {
                            workLocationAttribute.getInformationRoutes().add(informationRouteAttribute);
                            matchingWorkLocationFound = true;
                            break;
                        }
                    }
                    if (!matchingWorkLocationFound) {
                        WorkLocationAttribute workLocationAttribute = new WorkLocationAttribute();
                        workLocationAttribute.setIdentifier(workLocationChid);
                        workLocationAttribute.getInformationRoutes().add(informationRouteAttribute);
                        workLocationAttributeList.add(workLocationAttribute);
                    }
                } else {
                    // Add the information route to the Provider if it does not belong to a Work Location
                    informationRouteAttributeList.add(informationRouteAttribute);
                }
            }

            
            
            PRPMMT301010InformRequestIndirectTarget indirectTarget = informRequest.getIndirectTarget();
            if (indirectTarget != null) {
                II controlActReferenceId = indirectTarget.getControlActReferenceId();
                String controlActReferenceIdExtentsion = "";
                if (controlActReferenceId != null) {
                    controlActReferenceIdExtentsion = controlActReferenceId.getExtension();
                }
                JAXBElement<PRPMMT301010HealthCareProvider> healthCareProvider = indirectTarget.getHealthCareProvider();
                if (healthCareProvider != null && healthCareProvider.getValue() != null) {
                    List<PRPMMT301010HealthCareProviderAddr> addrs = healthCareProvider.getValue().getAddr();
                    if (!CollectionUtils.isEmpty(addrs)) {
                        AddressAttribute addressAttribute = createAddressAttributeFromHL7Address(addrs.get(0), requestMessage);
                        informationRouteAttribute.setAddressAttribute(addressAttribute);
                        informationRouteAttribute.setCommunicationDataOwnerCode(addressAttribute.getSource());
                        informationRouteAttribute.setCommunicationPurposeCode(addressAttribute.getCommunicationPurposeCode());
                        //Find the controlActReferenceId
                        for (Serializable obj : addrs.get(0).getContent()) {
                            if (obj instanceof JAXBElement && ((JAXBElement) obj).getDeclaredType().equals(II.class)) {
                                controlActReferenceIdExtentsion = ((II) ((JAXBElement) obj).getValue()).getExtension();
                            }
                        }
                    }
                    List<PRPMMT301010HealthCareProviderTelecom> telecoms = healthCareProvider.getValue().getTelecom();
                    if (!CollectionUtils.isEmpty(telecoms)) {
                        List<PhoneAttribute> phoneAtts = new ArrayList<>();
                        List<EmailAttribute> emailAtts = new ArrayList<>();
                        createPhoneOrEmailAttribute(telecoms.get(0), phoneAtts, emailAtts, requestMessage);
                        if (phoneAtts.size() > 0) {
                            informationRouteAttribute.setPhoneAttribute(phoneAtts.get(0));
                            informationRouteAttribute.setCommunicationDataOwnerCode(phoneAtts.get(0).getSource());
                            informationRouteAttribute.setCommunicationPurposeCode(phoneAtts.get(0).getCommunicationPurposeCode());
                        } else if (emailAtts.size() > 0) {
                            informationRouteAttribute.setEmailAttribute(emailAtts.get(0));
                            informationRouteAttribute.setCommunicationDataOwnerCode(emailAtts.get(0).getSource());
                            informationRouteAttribute.setCommunicationPurposeCode(emailAtts.get(0).getCommunicationPurposeCode());
                        }
                        //Find the controlActReferenceId
                        controlActReferenceIdExtentsion = telecoms.get(0).getControlActReferenceId().getExtension();
                    }
                }
                
                JAXBElement<PRPMMT301010ServiceDeliveryLocation> serviceDeliveryLocationElement = indirectTarget.getServiceDeliveryLocation();
                if (serviceDeliveryLocationElement != null) {
                    PRPMMT301010ServiceDeliveryLocation serviceDeliveryLocation = serviceDeliveryLocationElement.getValue();
                                        
                    List<PRPMMT301010ServiceDeliveryLocationAddr> addrList = serviceDeliveryLocation.getAddr();
                    if (!CollectionUtils.isEmpty(addrList)) {
                        PRPMMT301010ServiceDeliveryLocationAddr addr = addrList.get(0);
                        AddressAttribute addressAttribute = createAddressAttributeFromHL7Address(addr, requestMessage);
                        informationRouteAttribute.setAddressAttribute(addressAttribute);
                        informationRouteAttribute.setCommunicationDataOwnerCode(addressAttribute.getSource());
                        informationRouteAttribute.setCommunicationPurposeCode(addressAttribute.getCommunicationPurposeCode());
                    }
                    
                    List<PRPMMT301010ServiceDeliveryLocationTelecom> telecoms = serviceDeliveryLocation.getTelecom();
                   if (!CollectionUtils.isEmpty(telecoms)){
                       List<PhoneAttribute> phoneAtts = new ArrayList<>();
                       List<EmailAttribute> emailAtts = new ArrayList<>();
                       createPhoneOrEmailAttribute(telecoms.get(0), phoneAtts , emailAtts, requestMessage);
                       if (phoneAtts.size() > 0){
                           informationRouteAttribute.setPhoneAttribute(phoneAtts.get(0));
                           informationRouteAttribute.setCommunicationDataOwnerCode(phoneAtts.get(0).getSource());
                           informationRouteAttribute.setCommunicationPurposeCode(phoneAtts.get(0).getCommunicationPurposeCode());
                       }else if (emailAtts.size() > 0){
                           informationRouteAttribute.setEmailAttribute(emailAtts.get(0));
                           informationRouteAttribute.setCommunicationDataOwnerCode(emailAtts.get(0).getSource());
                           informationRouteAttribute.setCommunicationPurposeCode(emailAtts.get(0).getCommunicationPurposeCode());
                       }
                   }

                    //Get the work location id
                    JAXBElement<II> idElement = serviceDeliveryLocation.getId();
                    if (idElement != null) {
                        II value = idElement.getValue();
                        informationRouteAttribute.setWorkLocationIdentifier(Long.valueOf(value.getExtension()));
                    }
                    
                    //Get WL data owner code
                    PRPMMT301010HealthCareProvider provider = ((PRPMIN301010MCCIMT000100Message)requestMessage).getControlActProcess().getSubject().get(0).getRegistrationEvent().getSubject1().getHealthCareProvider().getValue();
                    List<PRPMMT301010Subject3> subjects = provider.getSubjectOf2();
                    for (PRPMMT301010Subject3 subject : subjects) {
                        List<PRPMMT301010Subject6> subjectOf6s = subject.getRoleActivation().getSubjectOf();
                        if (!CollectionUtils.isEmpty(subjectOf6s)) {
                            PRPMMT301010Subject6 subjectOf6 = subjectOf6s.get(0);
                            II id = subjectOf6.getControlActEvent().getId(); 
                            if (AUDIT_INFO_TARGET_OID.equals(id.getRoot()) && controlActReferenceIdExtentsion.equals(id.getExtension())) {
                                List<PRPMMT301010Custodian> custodians = subjectOf6.getControlActEvent().getCustodian();
                                if (!CollectionUtils.isEmpty(custodians)) {
                                    List<II> iis = custodians.get(0).getAssignedEntity().getId();
                                    if (!CollectionUtils.isEmpty(iis)) {
                                        String owner = iis.get(0).getExtension();
                                        informationRouteAttribute.setWorkLocationOwnerCode(owner);
                                        informationRouteAttribute.setSource(owner);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        informationRouteAttribute.setStartDate(getLowTime(sequel.getValidTime()));
        informationRouteAttribute.setExpiryDate(getHighTime(sequel.getValidTime()));
        informationRouteAttribute.setDefaulted(CollectionUtils.isEmpty(informationRouteAttributeList));
    }

    /**
     * Get the Work Location ID. If the given parameter is not a work location
     * or if the work location ID is not present (null or blank), return null.
     */
    private static String getWorkLocationChid(PRPMMT301010ServiceDeliveryLocation serviceDeliveryLocation) {
        if (serviceDeliveryLocation != null
                && serviceDeliveryLocation.getId() != null
                && serviceDeliveryLocation.getId().getValue() != null
                && WORKLOCATION_OID.equals(serviceDeliveryLocation.getId().getValue().getRoot())
                && !StringUtils.isEmpty(serviceDeliveryLocation.getId().getValue().getExtension())) {
            return serviceDeliveryLocation.getId().getValue().getExtension();
        }
        return null;
    }

    private void setWorkLocationSpecificFields(List<PRPMMT301010ActDefinitionOrEventLocation> locationList, AuditInfoRequirements_40 auditInfoRequirements, WorkLocationAttribute workLocationAttribute, HL7RequestMessage requestMessage, List<WorkLocationAttribute> workLocationAttributeList) {
        WorkLocationDetailsAttribute workLocationDetailsAttribute = null;
        PRPMMT301010ActDefinitionOrEventLocation location = locationList.get(0);
        final II controlActReferenceId = location.getControlActReferenceId();

        JAXBElement<INT> sequenceNumberElement = location.getSequenceNumber();
        if (sequenceNumberElement != null) {
            INT sequenceValue = sequenceNumberElement.getValue();
            workLocationAttribute.setSequenceNumber(sequenceValue.getValue());
        }

        auditInfoRequirements.setControlActReferenceId(controlActReferenceId);
        auditInfoRequirements.setIsUpdateMode(location.getUpdateMode() != null);
        PRPMMT301010ServiceDeliveryLocation serviceDeliveryLocation = location.getServiceDeliveryLocation();
        
        if (serviceDeliveryLocation != null) {
            JAXBElement<II> idElement = serviceDeliveryLocation.getId();
            if (idElement != null) {
                II ii = idElement.getValue();
                if (WORKLOCATION_OID.equals(ii.getRoot())) {
                    workLocationAttribute.setIdentifier(ii.getExtension());
                }
            }
        
            TS effectiveTime = serviceDeliveryLocation.getEffectiveTime();
            auditInfoRequirements.setEffectiveTime(effectiveTime);
            if (effectiveTime != null) {
                List<WorkLocationDetailsAttribute> details = workLocationAttribute.getDetails();
                if (CollectionUtils.isEmpty(details)) {
                    workLocationDetailsAttribute = new WorkLocationDetailsAttribute();
                    details.add(workLocationDetailsAttribute);
                } else {
                    workLocationDetailsAttribute = details.get(0);
                }
                auditInfoRequirements.setAuditInfoAttribute(workLocationDetailsAttribute);
            }

            // Set work location name
            JAXBElement<PRPMMT301010Place> serviceDeliveryLocationLocation = serviceDeliveryLocation.getLocation();
            if (serviceDeliveryLocationLocation != null) {
                PRPMMT301010Place locationValue = serviceDeliveryLocationLocation.getValue();
                if (locationValue != null) {
                    EN name = locationValue.getName();
                    if (name != null) {
                        PersonNameAttribute nameAttribute = convertToNameAttribute(name);
                        if (workLocationDetailsAttribute != null && nameAttribute != null) {
                            workLocationDetailsAttribute.setName(nameAttribute.getFirstName());
                        }
                    }
                }
            }

            // Set work location type
            CE code = serviceDeliveryLocation.getCode();
            if (workLocationDetailsAttribute != null && code != null) {
                workLocationDetailsAttribute.setTypeCode(code.getCode());
            }

            // Set work location addresses
            List<PRPMMT301010ServiceDeliveryLocationAddr> addrList = serviceDeliveryLocation.getAddr();
            if (!CollectionUtils.isEmpty(addrList)) {
                List<AddressAttribute> workLocationAddressAttributeList = new ArrayList<>();
                workLocationAttribute.setAddresses(workLocationAddressAttributeList);
                for (PRPMMT301010ServiceDeliveryLocationAddr addr : addrList) {
                    AddressAttribute addressAttribute = createAddressAttributeFromHL7Address(addr, requestMessage);
                    workLocationAddressAttributeList.add(addressAttribute);
                }
            }

            // Set work location emails and phone numbers
            List<PRPMMT301010ServiceDeliveryLocationTelecom> telecomList = serviceDeliveryLocation.getTelecom();
            if (!CollectionUtils.isEmpty(telecomList)) {
                List<EmailAttribute> emailAttributeList = new ArrayList<>();
                workLocationAttribute.setEmailAddresses(emailAttributeList);

                List<PhoneAttribute> phoneAttributeList = new ArrayList<>();
                workLocationAttribute.setPhoneNumbers(phoneAttributeList);

                for (PRPMMT301010ServiceDeliveryLocationTelecom tel : telecomList) {
                    createPhoneOrEmailAttribute(tel, phoneAttributeList, emailAttributeList, requestMessage);
                }
            }
        }
        boolean defaultFlag = false;
        if(workLocationAttribute.getSequenceNumber()!=null && workLocationAttribute.getSequenceNumber().compareTo(BigInteger.ONE)==0) {
            defaultFlag = true;
        }
        workLocationDetailsAttribute.setDefaulted(defaultFlag);
        workLocationAttributeList.add(workLocationAttribute);
    }

    private ProviderRelationshipAttribute createProviderRelationship(
            PRPMMT301010HealthCareProvider hl7HealthCareProvider,
            II controlActReferenceId,
            TS validTime,
            HL7RequestMessage requestMessage,
            PRPMMT301010HealthCareProviderRelatedTo relatedTo) {
        ProviderRelationshipAttribute attribute = new ProviderRelationshipAttribute();

        List<PRPMMT301010HealthCareProviderId> ids = hl7HealthCareProvider.getId();
        if (!CollectionUtils.isEmpty(ids)) {
            // There can only be one type. If there are more provided, we don't know what to do with them.
            PRPMMT301010HealthCareProviderId id = ids.get(0);
            attribute.setRelationshipWithProviderType(ConverterUtils.getOidValue(id.getRoot()));
            attribute.setRelationshipWithProviderCollegeId(id.getExtension());
        }

        CE code = hl7HealthCareProvider.getCode();
        if (code != null) {
            String codeValue = code.getCode();
            attribute.setRelationshipTypeCode(codeValue);
        }

        List<EN> names = hl7HealthCareProvider.getName();
        if (!CollectionUtils.isEmpty(names)) {
            EN name = names.get(0);
            String nameText = name.getText();
            attribute.setRelationshipWithProviderName(nameText);
        }

        AuditInfo auditInfo = getAuditInfo(controlActReferenceId, requestMessage);
        attribute.setSource(auditInfo.getDataOwner());
        if (relatedTo.getUpdateMode() != null) {
            attribute.setEndReasonCode(auditInfo.getReasonCode());
        }
        populateAuditInfoFromValidTime(auditInfo, validTime);
        attribute.setStartDate(auditInfo.getStartDate());
        attribute.setExpiryDate(auditInfo.getExpiryDate());

        return attribute;
    }

    @Override
    protected void setIdentifiers(HL7RequestMessage requestMessage, ProviderAttribute providerAttribute, HL7HealthCareProvider healthCareProvider) {
        PRPMMT301010HealthCareProvider typedHealthCarePRovider = (PRPMMT301010HealthCareProvider) healthCareProvider;
        
        List<PRPMMT301010HealthCareProviderId> ids = typedHealthCarePRovider.getId();
        if (!ids.isEmpty()) {
            List<IdentifierAttribute> mappedCollegeIdentifiers = new ArrayList<>();
            providerAttribute.setCollegeIdentifiers(mappedCollegeIdentifiers);
            List<IdentifierAttribute> mappedRegistryIdentifiers = new ArrayList<>();
            providerAttribute.setRegistryIdentifiers(mappedRegistryIdentifiers);
            for (PRPMMT301010HealthCareProviderId id : ids) {
                IdentifierAttribute mappedIdentifier = new IdentifierAttribute();

                mappedIdentifier.setValue(id.getExtension());

                String idRoot = id.getRoot();
                mappedIdentifier.setUncodedType(ConverterUtils.getOidValue(idRoot));

                TS validTime = id.getValidTime();
                mappedIdentifier.setStartDate(getLowTime(validTime));
                mappedIdentifier.setExpiryDate(getHighTime(validTime));

                AuditInfo auditInfo = getAuditInfo(id.getControlActReferenceId(), requestMessage);
                mappedIdentifier.setSource(auditInfo.getDataOwner());
                if (id.getUpdateMode() != null) {
                    mappedIdentifier.setEndReasonCode(auditInfo.getReasonCode());
                }

                if (ConverterUtils.isRegistryIdType(idRoot)) {
                    mappedRegistryIdentifiers.add(mappedIdentifier);
                } else {
                    mappedCollegeIdentifiers.add(mappedIdentifier);
                }
            }
        }
    }

    @Override
    public String getJurisdictionFromHealthCareProvider(HL7HealthCareProvider healthCareProvider) {

        PRPMMT301010HealthCareProvider typedHealthCareProvider = (PRPMMT301010HealthCareProvider) healthCareProvider;

        String jurisdiction = null;
        try {
            List<PRPMMT301010TerritorialAuthority> territorialAuthorityList = typedHealthCareProvider.getRepresentedOrganization().getValue().getTerritorialAuthority();
            if (territorialAuthorityList != null && !CollectionUtils.isEmpty(territorialAuthorityList)) {
                jurisdiction = territorialAuthorityList.get(0).getTerritory().getValue().getCode().getCode();
            }
        } catch (NullPointerException npe) {
            // nothing to do here
        }
        return jurisdiction;
    }

    @Override
    protected AuditInfo getAuditInfo(II controlActReferenceId, HL7RequestMessage requestMessage) {
        AuditInfo auditInfo = new AuditInfo();
        if (controlActReferenceId == null) {
            return auditInfo;
        }
        String subjectOf2Id;
        if (AUDIT_INFO_POINTER_OID.equals(controlActReferenceId.getRoot())) {
            subjectOf2Id = controlActReferenceId.getExtension();
        } else {
            return auditInfo;
        }
        final PRPMIN301010MFMIMT700701ControlActProcess typedControlActProcess = (PRPMIN301010MFMIMT700701ControlActProcess) requestMessage.getControlActProcess();

        List<PRPMMT301010Subject3> subjectOf2List = typedControlActProcess.getSubject().get(0).getRegistrationEvent().getSubject1().getHealthCareProvider().getValue().getSubjectOf2();
        for (PRPMMT301010Subject3 subjectOf2 : subjectOf2List) {
            try {
                List<PRPMMT301010Subject6> subjectOfList = subjectOf2.getRoleActivation().getSubjectOf();
                for (PRPMMT301010Subject6 subjectOf : subjectOfList) {
                    try {
                        PRPMMT301010ControlActEvent controlActEvent = subjectOf.getControlActEvent();
                        II id = controlActEvent.getId();
                        if (AUDIT_INFO_TARGET_OID.equals(id.getRoot()) && subjectOf2Id.equals(id.getExtension())) {
                            List<CE> reasonCodes = controlActEvent.getReasonCode();
                            if (reasonCodes != null && !reasonCodes.isEmpty()) {
                                String reason = reasonCodes.get(0).getCode();
                                auditInfo.setReasonCode(reason);
                            }
                            List<II> dataOwnerIds = controlActEvent.getCustodian().get(0).getAssignedEntity().getId();
                            if (!CollectionUtils.isEmpty(dataOwnerIds)) {
                                II dataOwnerId = dataOwnerIds.get(0);
                                if (DATA_OWNER_OID.equals(dataOwnerId.getRoot())) {
                                    auditInfo.setDataOwner(dataOwnerId.getExtension());
                                }
                            }
                        }
                    } catch (NullPointerException | IndexOutOfBoundsException npe) {
                    }
                }
            } catch (NullPointerException | IndexOutOfBoundsException npe) {
            }
        }
        return auditInfo;

    }

    @Override
    public List<II> getControlActProcessSubjectId(final HL7ControlActProcess controlActProcess) {
        PRPMIN301010MFMIMT700701ControlActProcess typedControlActProcess = (PRPMIN301010MFMIMT700701ControlActProcess) controlActProcess;

        List<II> id = null;
        final List<PRPMIN301010MFMIMT700701Subject1> subjectList = typedControlActProcess.getSubject();
        if (!CollectionUtils.isEmpty(subjectList)) {
            final JAXBElement<MFMIMT700701Author2> authorElement = subjectList.get(0).getRegistrationEvent().getAuthor();
            id = authorElement.getValue().getAssignedEntity().getId();
        }
        return id;
    }
    
    /**
     * Adapts some JAXB annotated classes to a common interface.
     * 
     * The JAXB classes are generated, so we do not want to edit them directly.
     */
    private static class TimeAndAuditAdapter {

        TS validTime;
        II controlActReferenceId;

        TimeAndAuditAdapter(PRPMMT301010PrincipalPersonBirthplace birthplace) {
            if (birthplace != null) {
                validTime = birthplace.getValidTime();
                controlActReferenceId = birthplace.getControlActReferenceId();
            }
        }

        TimeAndAuditAdapter(PRPMMT301010PrincipalPersonAdministrativeGenderCode administrativeGenderCode) {
            if (administrativeGenderCode != null) {
                validTime = administrativeGenderCode.getValidTime();
                controlActReferenceId = administrativeGenderCode.getControlActReferenceId();
            }
        }

        TimeAndAuditAdapter(PRPMMT301010PrincipalPersonBirthTime birthTime) {
            if (birthTime != null) {
                validTime = birthTime.getValidTime();
                controlActReferenceId = birthTime.getControlActReferenceId();
            }
        }

        TimeAndAuditAdapter(PRPMMT301010PrincipalPersonDeceasedTime deceasedTime) {
            if (deceasedTime != null) {
                validTime = deceasedTime.getValidTime();
                controlActReferenceId = deceasedTime.getControlActReferenceId();
            }
        }

        TS getValidTime() {
            return validTime;
        }

        II getControlActReferenceId() {
            return controlActReferenceId;
        }
    }
}
