package ca.bc.gov.moh.hsa.plr.esb.service.batch;

import ca.bc.gov.health.plr.dto.esb.BatchRequest;
import ca.bc.gov.moh.hsa.plr.esb.service.maintain.MessageIdExtractor;
import ca.bc.gov.moh.hsa.plr.esb.service.util.SetTransportLayerSecurity;
import org.apache.camel.builder.RouteBuilder;
import org.apache.camel.builder.xml.Namespaces;
import org.apache.camel.converter.jaxb.JaxbDataFormat;
import org.apache.velocity.tools.generic.DateTool;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import ca.bc.gov.moh.hsa.util.audit.AuditProcessor;
import ca.bc.gov.moh.hsa.util.audit.entity.dao.TransactionDAO;
import org.apache.camel.ExchangePattern;
import org.springframework.beans.factory.annotation.Autowired;

/**
 * This component builds the routes required to process incoming batch files
 * over SFTP
 *
 * It works with other routes that are configured in plrEnvironmentSpecific.xml
 * which need to be configurable outside the build. The route customRoutes2 in
 * that file is referred to by applicationContext.xml (which is a configuration
 * file).
 *
 * @author conrad.gustafson
 */
@Component
public class BatchServiceRouteBuilder extends RouteBuilder {

    
    public static final String RESPONSE_CONTENT_CODE_KEY = "RESPONSE_CONTENT_CODE";
    public static final String RESPONSE_FORMAT_CODE_KEY = "RESPONSE_FORMAT_CODE";

    @Value("${environment_code}")
    private String environmentCode;
    
    @Value("${batchRequestRetryCount}")
    private int batchRequestRetryCount;
    
    @Value("${batchRequestRetryInterval}")
    private int batchRequestRetryInterval;
    
    @Value("${batchResponseRetryCount}")
    private int batchResponseRetryCount;
    
    @Value("${batchResponseRetryInterval}")
    private int batchResponseRetryInterval;
    
    @Value("${batchMaxFileLength}")
    private int batchMaxFileLength;   
    
    @Value("${batchMaxMessageCount}")
    private int batchMaxCount;
    
    //Expose as static to allow converters to access this value
    public static int BATCH_MAX_MESSAGE_COUNT;     
    
    @Autowired
    private TransactionDAO dao;
    
    /**
     * Creates the route that camel will use to listen for and process new batch
     * files on the SFTP server
     */
    @Override
    public void configure() throws Exception {
        
        //Set the https to use TLSv1.2
        SetTransportLayerSecurity.getRegistry();
        
        //Set static var on startup
        BATCH_MAX_MESSAGE_COUNT = batchMaxCount;
        
        DateTool dateTool = new DateTool();
        JaxbDataFormat plrJaxbFormat = new JaxbDataFormat("prs2.whic.org");
        plrJaxbFormat.setPrettyPrint(true);
        JaxbDataFormat plrJaxbFormat_response = new JaxbDataFormat("prs2.whic.org.response");
        plrJaxbFormat_response.setPrettyPrint(true);
        JaxbDataFormat hl740JaxbFormat = new JaxbDataFormat("org.hl7.v3.m4_0");
        hl740JaxbFormat.setPrettyPrint(true);

        Namespaces ns = new Namespaces("hl7", "urn:hl7-org:v3");
        ns.add("grs", "http://org.whic.prs2");
        
        AuditProcessor auditProcessor = new AuditProcessor("REDELIVERY", "ERROR", null, null);
        auditProcessor.setDao(dao);

      
        from("direct:inboundBatch")
                .routeId("direct:inboundBatch")
                .log("The ${routeId} route is processing a file named '${header.CamelFileName}'")
                .onException(Exception.class)
                    .handled(true)
                    .to("direct:reportBatchRequestFailure")
                .end()
                .choice()
                .when(simple("${header.CamelFileLength} > "+batchMaxFileLength))
                    .throwException(new IllegalArgumentException("Batch file size cannot exceed "+batchMaxFileLength+" bytes"))
                .otherwise()
                .convertBodyTo(String.class)
                .to("audit:RECEIVE?transactionType=BATCHPROVIDER&level=INFO")
                .wireTap("direct:reportBatchWaiting")
                .to("messagedrop:RECEIVE")
                .choice()
                    .when().xpath("/hl7:MCCI_IN200100", ns)
                        .setHeader("hl7", constant("true"))
                        .to("direct:inboundBatchHL7XML")
                    .otherwise()
                        .setHeader("hl7", constant("false"))
                        .to("direct:inboundBatchPLRXML")
                .end()
                .wireTap("direct:reportBatchParsed")
                .to(ExchangePattern.InOnly, "direct:plrBatchRequestQueue");
        
        from("direct:plrBatchRequestQueue")
                .routeId("direct:plrBatchRequestQueue")
                .errorHandler(deadLetterChannel("direct:reportBatchRequestFailure")
                    .maximumRedeliveries(batchRequestRetryCount)
                    .redeliveryDelay(batchRequestRetryInterval)
                    .logStackTrace(true)
                    .onRedelivery(auditProcessor))
                .to("audit:REQUEST_QUEUE?transactionType=BATCHPROVIDER&level=INFO")
                .bean(MessageIdExtractor.class)
                .convertBodyTo(BatchRequest.class)
                .to("direct:plrBatch");

        from("direct:inboundBatchPLRXML")
                .routeId("direct:inboundBatchPLRXML")
                .onException(Throwable.class)
                    .to("direct:reportBatchRequestFailure")
                    .handled(true)
                .end()
                //.to("validator:schema/prs/Batch.xsd")
                .to("bean:plrXmlBatchValidator")
                .unmarshal(plrJaxbFormat)
                .convertBodyTo(BatchRequest.class);

        from("direct:inboundBatchHL7XML")
                .routeId("direct:inboundBatchHL7XML")
                .onException(Throwable.class)
                    .to("direct:reportBatchRequestFailure")
                    .handled(true)
                .end()
                .convertBodyTo(String.class)
                .to("bean:batchMessageValidator").id("batchMessageValidator")
                .unmarshal(hl740JaxbFormat)
                .convertBodyTo(BatchRequest.class);
                

        from("direct:PLRXMLRejection")
                .routeId("direct:PLRXMLRejection")
                .to("audit:PLRXML_REJECTION?transactionType=BATCHPROVIDER&level=INFO")
                .errorHandler(noErrorHandler())
                .setHeader("date", constant(dateTool))
                .setHeader("environmentCode", constant(environmentCode))
                .setHeader("hl7", constant("false"))
                //.to("velocity:template/PLRBatchErrorResponse.vm")
                .to("bean:batchExceptionHandler")
                .marshal(plrJaxbFormat_response)
                .convertBodyTo(String.class)
                .to(ExchangePattern.InOnly, "direct:plrBatchResponseQueue");

        from("direct:HL7XMLRejection")
                .routeId("direct:HL7XMLRejection")
                .to("audit:HL7_REJECTION?transactionType=BATCHPROVIDER&level=INFO")
                .errorHandler(noErrorHandler())
                .setHeader("date", constant(dateTool))
                .setHeader("environmentCode", constant(environmentCode))
                .setHeader("hl7", constant("true"))
                .to("bean:batchExceptionHandler")
                .marshal(hl740JaxbFormat)
                .convertBodyTo(String.class)
                .to(ExchangePattern.InOnly, "direct:plrBatchResponseQueue");
        
        from("direct:plrBatchResponseQueue")
              .routeId("direct:plrBatchResponseQueue")
              .errorHandler(deadLetterChannel("direct:reportBatchResponseFailure")
                    .maximumRedeliveries(batchResponseRetryCount)
                    .redeliveryDelay(batchResponseRetryInterval)
                    .logStackTrace(true)
                    .onRedelivery(auditProcessor))
                .to("audit:RESPOND?transactionType=BATCHPROVIDER&level=INFO")
                .to("messagedrop:RESPOND")
                .to("direct:batchResponse");

        from("direct:reportBatchResponseFailure")
                .routeId("direct:reportBatchResponseFailure")
                .to("audit:RESPONSE_FAIL?transactionType=BATCHPROVIDER&level=INFO")
                .wireTap("direct:reportBatchFailedResponseDelivery");
        
        from("direct:reportBatchRequestFailure")
                .routeId("direct:reportBatchRequestFailure")
                .to("audit:REQUEST_FAIL?transactionType=BATCHPROVIDER&level=INFO")
                .choice()
                    .when().simple("${headers.hl7} == null or ${headers.hl7} == 'true'")
                        .to("direct:HL7XMLRejection")
                    .otherwise()
                        .to("direct:PLRXMLRejection")
                .end()
                .wireTap("direct:reportBatchFailedToParse");
        
        from("direct:reportBatchWaiting")
                .routeId("reportBatchWaiting")
                .bean(BatchStatusReporter.class, "process(*, ${type:ca.bc.gov.health.plr.dto.provider.esb.BatchStatus.WAITING})")
                .to("direct:plrBatchStatus");    
        
        from("direct:reportBatchParsed")
                .routeId("direct:reportBatchParsed")
                .bean(BatchStatusReporter.class, "process(*, ${type:ca.bc.gov.health.plr.dto.provider.esb.BatchStatus.PARSED})")
                .to("direct:plrBatchStatus");    
        
        from("direct:reportBatchFailedToParse")
                .routeId("direct:reportBatchFailedToParse")
                .bean(BatchStatusReporter.class, "process(*, ${type:ca.bc.gov.health.plr.dto.provider.esb.BatchStatus.FAILED_TO_PARSE})")
                .to("direct:plrBatchStatus");
        
        from("direct:reportBatchFailedResponseDelivery")
                .routeId("direct:reportBatchFailedResponseDelivery")
                .bean(BatchStatusReporter.class, "process(*, ${type:ca.bc.gov.health.plr.dto.provider.esb.BatchStatus.FAILED_RESPONSE_DELIVERY})")
                .to("direct:plrBatchStatus");
    }

}
