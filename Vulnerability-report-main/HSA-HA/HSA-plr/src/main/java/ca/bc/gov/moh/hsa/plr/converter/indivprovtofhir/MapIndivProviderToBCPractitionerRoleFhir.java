/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir;

import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto;
import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.*;
import ca.uhn.fhir.parser.DataFormatException;
import ca.uhn.fhir.validation.FhirValidator;
import ca.uhn.fhir.validation.SingleValidationMessage;
import ca.uhn.fhir.validation.ValidationResult;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author dan.stepanov
 */
public class MapIndivProviderToBCPractitionerRoleFhir {

    private static final String CLASSNAME = MapIndivProviderToBCPractitionerRoleFhir.class.getSimpleName();
    private static final Logger LOG = Logger.getLogger(CLASSNAME);

    // search flow logic -- 
    // create searchset bundle this is top level bundle
    // add operation outome to searchset bundle
        // for each provider returned by query
            // create provider bundle
            // add practioner to provider bundle
            // add practitionerRole for role+specialty to provider bundle
            // for each indiv to org reln
                // add a new practitionerRole with organization referrence to provider bundle
            // for each indiv to location reln
                // add a new practitionerRole with location referrnce to provider bundle 

    ProviderDetails indivProviderDetails = new ProviderDetails();

    List<ExpertiseDto> indivPersonExpertise = indivProviderDetails.getExpertise();
    List<ProviderRelationshipDto> indivProviderRelationships = indivProviderDetails.getProviderRelationships();

    public static void addProviderExpertiseToBCPractitionerRoleSpecialty(FHIRFactory factory, List<ExpertiseDto> providerExpertise, Object bcPractitionerRoleFhir) {

        if (!providerExpertise.isEmpty()) {

            for (ExpertiseDto providerExpertiseSpecialtyDto : providerExpertise) {

                // get Specialty components for each expertise from individ provider values from the ExpertiseDto
                if (!providerExpertiseSpecialtyDto.getRoleTypeCode().equalsIgnoreCase(EXPERTISE_LANGUAGE_CODE)) {

                    // create BC SpecialtyCodeableConcept FHIR model
                    Object bcSpecialtyCodeableConceptFhir = factory.newSpecialty();

                    // create BC Expertise custom fields FHIR model
                    // get expertise Specialty values from the ExpertiseDto and set BC SpecialtyCodeableConcept custom coding type code values
                    if (providerExpertiseSpecialtyDto.getTypeCode() != null && !providerExpertiseSpecialtyDto.getTypeCode().isEmpty()) {
                        Object coding = factory.newCoding();
                        factory.getSetCodingAttributes().setCodingCode(coding, providerExpertiseSpecialtyDto.getTypeCode());
                        factory.getSetCodingAttributes().setCodingSystem(coding, ProviderFhirConstants.BC_PRACTITIONER_ROLE_TYPECODE_CODING_SYSTEM_LINK);

                        factory.getSetCodeableConceptAttributes().setCoding(bcSpecialtyCodeableConceptFhir, coding);
                    }

                    // get period time for BC Specialty CodeableConcept
                    factory.getSetPeriodAttributes().addPeriod(bcSpecialtyCodeableConceptFhir, providerExpertiseSpecialtyDto.getEffectiveStartDate(), providerExpertiseSpecialtyDto.getEffectiveEndDate());

                    Object ercOwnerExtension = factory.newBCEndReasonCode_OwnerCodeExtension();
                    if (providerExpertiseSpecialtyDto.getEndReasonCode() != null) {
                        Object cc = factory.newCodeableConcept();
                        Object coding = factory.newCoding();
                        factory.getSetCodingAttributes().setCodingCode(coding, providerExpertiseSpecialtyDto.getEndReasonCode());
                        factory.getSetCodingAttributes().setCodingSystem(coding, ProviderFhirConstants.BC_END_REASON_CODING_SYSTEM_LINK);

                        factory.getSetCodeableConceptAttributes().setCoding(cc, coding);
                        factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().setERCOwner_EndReasonCode(ercOwnerExtension, cc);
                    }

                    if (providerExpertiseSpecialtyDto.getDataOwnerCode() != null) {
                        Object ownerIdentifier = factory.newIdentifier();
                        factory.getSetIdentifierAttributes().setIdentifierAssigner(ownerIdentifier, providerExpertiseSpecialtyDto.getDataOwnerCode());
                        factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().setERCOwner_Custodian(ercOwnerExtension, ownerIdentifier);
                    }
                    factory.getSetSpecialtyCodeableConceptAttributes().setExpertiseERCOwner(bcSpecialtyCodeableConceptFhir, ercOwnerExtension);

                    // get expertise source values from the ExpertiseDto and set BC SpecialtyCodeableConcept custom extension Identifier type values
//                    Object specialtySourceExtension = factory.BCSpecialtySourceExtension();
//                    // set BC SpecialtySource extension
                    if (providerExpertiseSpecialtyDto.getSourcesCode() != null && !providerExpertiseSpecialtyDto.getSourcesCode().isEmpty()) {
//                        factory.getSetSpecialtyCodeableConceptAttributes().setExpertiseSourceValue(specialtySourceExtension, providerExpertiseSpecialtyDto.getSourcesCode());
                        factory.getSetSpecialtyCodeableConceptAttributes().setExpertiseSource(bcSpecialtyCodeableConceptFhir, providerExpertiseSpecialtyDto.getSourcesCode());
                    }

                    factory.getSetPractitionerRoleAttributes().setPractitionerRoleSpecialty(bcPractitionerRoleFhir, bcSpecialtyCodeableConceptFhir);

                    // json parse encoded BcPractitioner
                    String jsonParsedBCPractitionerRoleFhir = factory.parseEncodedBcPractitionerRole(bcPractitionerRoleFhir);

//                    LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerRoleFhir addProviderExpertiseToBCPractitionerRoleSpecialty jsonParsedBCPractitionerRoleFhir: {0}.",
//                            new Object[]{jsonParsedBCPractitionerRoleFhir});
                    // validate new BCPractitionerRole resource w/role code structure
                    Object fhirValidator = factory.initializeFhirValidator();
                    validateBcPractitionerRoleFhir(factory, fhirValidator, jsonParsedBCPractitionerRoleFhir);
                }
            }
        }
    }

    public static void addProviderRoleTypeToBCPractitionerRoleCode(FHIRFactory factory, String indivProviderRoleType, Object bcPractitionerRoleFhir, String plrIPCIdentifier) {

        if (indivProviderRoleType != null && !indivProviderRoleType.isEmpty()) {

            // filter indiv provider role type that are not an ORG type value
            if (!indivProviderRoleType.equalsIgnoreCase(ORG_PROVIDER_ROLE_TYPE)) {

                // create BC Prac Role CodeableConcept FHIR model
                Object bcPracRoleCodeCodeableConceptFhir = factory.newCodeableConcept();

                // create coding custom fields FHIR model
                Object coding = factory.newCoding();
                factory.getSetCodingAttributes().setCodingCode(coding, indivProviderRoleType);
                factory.getSetCodingAttributes().setCodingSystem(coding, ProviderFhirConstants.BC_PRACTITIONER_ROLE_CODE_CODING_SYSTEM_LINK);

                // set CodeableConcept w/coding attributes
                factory.getSetCodeableConceptAttributes().setCoding(bcPracRoleCodeCodeableConceptFhir, coding);

                factory.getSetPractitionerRoleAttributes().setPractitionerRoleCode(bcPractitionerRoleFhir, bcPracRoleCodeCodeableConceptFhir);
                
                // create new BC Prac Reference and set practionerrole prac value 
                Object bcPractReference = factory.newReference();

                // set practioner.reference w/IPC identifier code/value
                if (plrIPCIdentifier != null && !plrIPCIdentifier.isEmpty()) {
                    String bcPractitionerRef = "Practitioner/" + plrIPCIdentifier + "/$entityQuery"; // i.e. "Practitioner/IPC.00115916.BC.PRS/$entityQuery"
                    factory.getSetReferenceAttributes().setReferenceValue(bcPractReference, bcPractitionerRef);
                }

                // set PractitionerRole Relationship extension w/reference bcPractitionerRef
                factory.getSetPractitionerRoleAttributes().setPractitionerReference(bcPractitionerRoleFhir, bcPractReference);

                // json parse encoded BcPractitionerRole
                String jsonParsedBCPractitionerRoleFhir = factory.parseEncodedBcPractitionerRole(bcPractitionerRoleFhir);

//                LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerRoleFhir addProviderRoleTypeToBCPractitionerRoleCode jsonParsedBCPractitionerRoleFhir: {0}.",
//                        new Object[]{jsonParsedBCPractitionerRoleFhir});
                // validate new BCPractitionerRole resource w/role code structure
                Object fhirValidator = factory.initializeFhirValidator();
                validateBcPractitionerRoleFhir(factory, fhirValidator, jsonParsedBCPractitionerRoleFhir);
            }
        }
    }

    public static void addProviderRelationshipToBCPractitionerRole(FHIRFactory factory, ProviderRelationshipDto providerRelationshipDto, Object bcPractitionerRoleFhir, String plrIPCIdentifier) {

        // check if IdentifierTypeCode is ORGID// ORG instead TODO
        if (providerRelationshipDto.getIdentifierTypeCode().equalsIgnoreCase(ORGANIZATION_IDENTIFIER_PLR)) {

            // create BC Practitioner Relationship custom FHIR model
            // get period time for BC PractitionerRole ref from effective dates
            factory.getSetPeriodAttributes().addPeriod(bcPractitionerRoleFhir, providerRelationshipDto.getEffectiveStartDate(), providerRelationshipDto.getEffectiveEndDate());

            // create new org Reference and set practionerrole org value of extensions
            Object bcPractRoleOrgReference = factory.newBCReference();
            // set practioner.reference w/IPC identifier code/value
//            if (providerRelationshipDto.getIdentifierTypeCode() != null && providerRelationshipDto.getIdentifierTypeCode().equalsIgnoreCase(INTERNAL_PROVIDER_CODE)) {
            if (providerRelationshipDto.getIdentifierTypeCode() != null && providerRelationshipDto.getIdentifierTypeCode().equalsIgnoreCase(ORGANIZATION_IDENTIFIER_PLR)) {
                if (providerRelationshipDto.getIdentifier() != null && !providerRelationshipDto.getIdentifier().isEmpty()) {
                    String bcPractitionerRef = "Organization/" + providerRelationshipDto.getIdentifier() + "/$entityQuery"; // i.e. "Organization/IPC.00115916.BC.PRS/$entityQuery"
                    factory.getSetReferenceAttributes().setReferenceValue(bcPractRoleOrgReference, bcPractitionerRef);
                }
            }

            // set ercOwnerExtension in the org Reference
            Object ercOwnerExtension = factory.newBCEndReasonCode_OwnerCodeExtension();
            if (providerRelationshipDto.getEndReasonCode() != null) {
                Object cc = factory.newCodeableConcept();
                Object coding = factory.newCoding();
                factory.getSetCodingAttributes().setCodingCode(coding, providerRelationshipDto.getEndReasonCode());
                factory.getSetCodingAttributes().setCodingSystem(coding, ProviderFhirConstants.BC_END_REASON_CODING_SYSTEM_LINK);

                factory.getSetCodeableConceptAttributes().setCoding(cc, coding);
                factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().setERCOwner_EndReasonCode(ercOwnerExtension, cc);
            }

            if (providerRelationshipDto.getDataOwnerCode() != null) {
                Object ownerIdentifier = factory.newIdentifier();
                factory.getSetIdentifierAttributes().setIdentifierAssigner(ownerIdentifier, providerRelationshipDto.getDataOwnerCode());
                factory.getSetEndReasonCode_OwnerCodeExtensionAttributes().setERCOwner_Custodian(ercOwnerExtension, ownerIdentifier);
            }

            factory.getSetReferenceAttributes().setReferenceOrganizationERCOwner(bcPractRoleOrgReference, ercOwnerExtension);

            // create new codeable concept extensions FHIR model and set Org relationship type codes
            if (providerRelationshipDto.getRelationshipTypeCode() != null) {
                Object ccRelationshipType = factory.newCodeableConcept();
                Object relationshipTypeCoding = factory.newCoding();
                // setCodingSystem
                factory.getSetCodingAttributes().setCodingSystem(relationshipTypeCoding, PROVIDER_RELANTIONSHIP_TYPE_CODING_SYSTEM_LINK);
                // setCodingCode for relationship Type 
                factory.getSetCodingAttributes().setCodingCode(relationshipTypeCoding, providerRelationshipDto.getRelationshipTypeCode());
                factory.getSetCodeableConceptAttributes().setCoding(ccRelationshipType, relationshipTypeCoding);
                // set reference org codeable concept 
                factory.getSetReferenceAttributes().setReferenceOrganizationRelationshipExt(bcPractRoleOrgReference, ccRelationshipType);
            }

            // set PractitionerRole Relationship extension w/reference Org
            factory.getSetPractitionerRoleAttributes().setPractitionerRoleOrganizationReference(bcPractitionerRoleFhir, bcPractRoleOrgReference);

            // create new BC Prac Reference and set practionerrole prac value 
            Object bcPractReference = factory.newReference();
            
            // set practioner.reference w/IPC identifier code/value
            String bcPractitionerRef = "Practitioner/" + plrIPCIdentifier + "/$entityQuery"; // i.e. "Practitioner/IPC.00115916.BC.PRS/$entityQuery"
            factory.getSetReferenceAttributes().setReferenceValue(bcPractReference, bcPractitionerRef);
            
            // set PractitionerRole Relationship extension w/reference bcPractitionerRef
            factory.getSetPractitionerRoleAttributes().setPractitionerReference(bcPractitionerRoleFhir, bcPractReference);

            // json parse encoded BcPractitionerRole
            String jsonParsedBCPractitionerRoleFhir = factory.parseEncodedBcPractitionerRole(bcPractitionerRoleFhir);

//            LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerRoleFhir addProviderRelationshipToBCPractitionerRole jsonParsedBCPractitionerRoleFhir: {0}.",
//                    new Object[]{jsonParsedBCPractitionerRoleFhir});
            // validate new BCPractitionerRole resource w/role code structure
            Object fhirValidator = factory.initializeFhirValidator();
            validateBcPractitionerRoleFhir(factory, fhirValidator, jsonParsedBCPractitionerRoleFhir);

        }
    }

    public FhirValidator initializeFhirValidator() {
        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator validator = FhirContextFactory.forR4().newValidator();
        /*
        * set FHIR validator to validate against standard schema during validation
         */
        validator.setValidateAgainstStandardSchema(true);
        return validator;
    }

    public static boolean validateBcPractitionerRoleFhir(FHIRFactory factory, Object fhirValidator, String parsedPractitionerRoleFhir) throws DataFormatException {
        // Validate
        ValidationResult validResult = null;
        boolean isPractRoleResultValid = false;
        try {
            validResult = factory.initializeFhirValidationResult(parsedPractitionerRoleFhir);
        } catch (DataFormatException dfe) {
            LOG.log(Level.SEVERE, "MapIndivProviderToBCPractitionerRoleFhir encountered a data format error while validate PractitionerRole Fhir.");
        } catch (Exception ex) {
            LOG.log(Level.SEVERE, "MapIndivProviderToBCPractitionerRoleFhir encountered an error while validating PractitionerRole Fhir.");
        }
        if (validResult != null && validResult.isSuccessful()) {
            isPractRoleResultValid = true;
        } else if (validResult != null && !validResult.isSuccessful()) {
            // display the validation issues
            for (SingleValidationMessage validMsg : validResult.getMessages()) {

//                LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerRoleFhir validation issue severity is: {0} and location is: {1} and message is: {2}.",
//                        new Object[]{validMsg.getSeverity(), validMsg.getLocationString(), validMsg.getMessage()});
            }
        }

//        LOG.log(Level.INFO, "MapIndivProviderToBCPractitionerRoleFhir validateBcPractitionerRoleFhir isPractRoleResultValid is: {0}.",
//                new Object[]{isPractRoleResultValid});

        return isPractRoleResultValid;
    }

}
