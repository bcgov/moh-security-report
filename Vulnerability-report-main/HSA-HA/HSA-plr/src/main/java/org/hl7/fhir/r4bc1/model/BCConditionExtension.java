/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.hl7.fhir.r4bc1.model;

import ca.uhn.fhir.model.api.annotation.Block;
import ca.uhn.fhir.model.api.annotation.Child;
import ca.uhn.fhir.model.api.annotation.Description;
import ca.uhn.fhir.model.api.annotation.Extension;
import ca.uhn.fhir.util.ElementUtil;
import org.hl7.fhir.r4.model.BooleanType;
import org.hl7.fhir.r4.model.CodeableConcept;
import org.hl7.fhir.r4.model.Identifier;
import org.hl7.fhir.r4.model.Period;
import org.hl7.fhir.r4.model.StringType;

/**
 * Custom extension BC Conditions for the BC Practitioner profile resources for
 * use in the BC Provider Registry project.
 *
 * @author dan.stepanov
 */
@Block
public class BCConditionExtension extends BCCommonExtensions {

    @Child(name = "conditionIdentifier")
    @Extension(url = "identifier", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "condition identifier")
    private Identifier conditionIdentifier;

    @Child(name = "restrictionText")
    @Extension(url = "restrictionText", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "restriction text description")
    private StringType restrictionText;

    @Child(name = "restrictionFlag")
    @Extension(url = "restriction", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "restriction flag")
    private BooleanType restrictionFlag;

    @Child(name = "conditionCode")
    @Extension(url = "code", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "condition code")
    private CodeableConcept conditionCode;

    public Identifier getConditionIdentifier() {
        if (conditionIdentifier == null) {
            conditionIdentifier = new Identifier();
        }
        return conditionIdentifier;
    }

    public StringType getRestrictionText() {
        if (restrictionText == null) {
            restrictionText = new StringType("");
        }
        return restrictionText;
    }

    public BooleanType getRestrictionFlag() {
        return restrictionFlag;
    }

    public CodeableConcept getConditionCode() {
        if (conditionCode == null) {
            conditionCode = new CodeableConcept();
        }
        return conditionCode;
    }

    public void setConditionIdentifier(Identifier theIdentifier) {
        conditionIdentifier = theIdentifier;
    }

    public void setRestrictionText(StringType theRestrictionText) {
        restrictionText = theRestrictionText;
    }

    public void setRestrictionFlag(BooleanType theRestrictionFlag) {
        restrictionFlag = theRestrictionFlag;
    }

    public void setConditionCode(CodeableConcept theConditionCode) {
        conditionCode = theConditionCode;
    }

    @Child(name = "period")
    @Extension(url = "http://hl7.org/fhir/ca-bc/provider/StructureDefinition/bc-period-extension", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "Effective dates")
    protected Period period;

    public Period getPeriod() {
        if (period == null) {
            period = new Period();
        }
        return period;
    }

    public void setPeriod(Period thePeriod) {
        period = thePeriod;
    }

    @Override
    public BCConditionExtension copy() {
        BCConditionExtension copy = new BCConditionExtension();
        copy.conditionIdentifier = conditionIdentifier;
        copy.restrictionText = restrictionText;
        copy.restrictionFlag = restrictionFlag;
        copy.conditionCode = conditionCode;
        copy.period = period;
        return copy;
    }

    @Override
    public boolean isEmpty() {
        return super.isEmpty() && ElementUtil.isEmpty(conditionIdentifier, restrictionText, restrictionFlag, conditionCode, period);
    }

}
