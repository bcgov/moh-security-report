/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.hl7.fhir.r4bc1.model;

import ca.uhn.fhir.model.api.annotation.Block;
import ca.uhn.fhir.model.api.annotation.Child;
import ca.uhn.fhir.model.api.annotation.Description;
import ca.uhn.fhir.model.api.annotation.Extension;
import ca.uhn.fhir.util.ElementUtil;
import org.hl7.fhir.r4.model.CodeableConcept;
import org.hl7.fhir.r4.model.Period;

/**
 * Custom extension BC Confidentiality for the BC Practitioner profile resources
 * for use in the BC Provider Registry project.
 *
 * @author dan.stepanov
 */
@Block
public class BCConfidentialityExtension extends BCCommonExtensions {

    @Child(name = "conditionCode")
    @Extension(url = "code", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "condition code")
    private CodeableConcept confidentialityCode;

    public CodeableConcept getConfidentialityCode() {
        if (confidentialityCode == null) {
            confidentialityCode = new CodeableConcept();
        }
        return confidentialityCode;
    }

    public void setConfidentialityCode(CodeableConcept theConfidentialityCode) {
        confidentialityCode = theConfidentialityCode;
    }

    @Child(name = "period")
    @Extension(url = "http://hl7.org/fhir/ca-bc/provider/StructureDefinition/bc-period-extension", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "Effective dates")
    protected Period period;

    public Period getPeriod() {
        if (period == null) {
            period = new Period();
        }
        return period;
    }

    public void setPeriod(Period thePeriod) {
        period = thePeriod;
    }

    @Override
    public BCConfidentialityExtension copy() {
        BCConfidentialityExtension copy = new BCConfidentialityExtension();
        copy.confidentialityCode = confidentialityCode;
        copy.period = period;
        return copy;
    }

    @Override
    public boolean isEmpty() {
        return super.isEmpty() && ElementUtil.isEmpty(confidentialityCode, period);
    }

}
