/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.hl7.fhir.r4bc1.model;

import ca.uhn.fhir.model.api.annotation.Block;
import ca.uhn.fhir.model.api.annotation.Child;
import ca.uhn.fhir.model.api.annotation.Description;
import ca.uhn.fhir.util.ElementUtil;
import org.hl7.fhir.r4.model.BackboneElement;
import org.hl7.fhir.r4.model.Period;
import org.hl7.fhir.r4.model.StringType;

/**
 *
 * @author jonathan.wiebe
 */
@Block
public class BCFacilityDetailsExtension  extends BCCommonExtensions {

    @Child(name = "campusOfCare")
    @ca.uhn.fhir.model.api.annotation.Extension(url = "campusOfCare", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "Campus of care")
    protected StringType campusOfCare;

    @Child(name = "operatorName")
    @ca.uhn.fhir.model.api.annotation.Extension(url = "operatorName", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "Operator name")
    protected StringType operatorName;

    @Child(name = "ownerName")
    @ca.uhn.fhir.model.api.annotation.Extension(url = "ownerName", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "Owner name")
    protected StringType ownerName;

    @Child(name = "contactName")
    @ca.uhn.fhir.model.api.annotation.Extension(url = "contactName", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "Constact name")
    protected StringType contactName;
    
    @Override
    public BackboneElement copy() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Child(name = "period")
    @ca.uhn.fhir.model.api.annotation.Extension(url = "http://hl7.org/fhir/ca-bc/provider/StructureDefinition/bc-period-extension", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "Effective dates")
    protected Period period;

    public Period getPeriod() {
        if (period == null) {
            period = new Period();
        }
        return period;
    }

    public void setPeriod(Period thePeriod) {
        period = thePeriod;
    }

    @Override
    public boolean isEmpty() {
        return super.isEmpty() && ElementUtil.isEmpty(period, campusOfCare, operatorName, ownerName, contactName);
    }
    
    public StringType getOperatorName() {
        if(operatorName == null) {
            operatorName = new StringType();
        }
        return operatorName;
    }

    public void setOperatorName(StringType operatorName) {
        this.operatorName = operatorName;
    }
    
    public StringType getCampusOfCare() {
        if(campusOfCare == null) {
            campusOfCare = new StringType();
        }
        return campusOfCare;
    }

    public void setCampusOfCare(StringType campusOfCare) {
        this.campusOfCare = campusOfCare;
    }

    public StringType getOwnerName() {
        if(ownerName == null) {
            ownerName = new StringType();
        }
        return ownerName;
    }

    public void setOwnerName(StringType ownerName) {
        this.ownerName = ownerName;
    }

    public StringType getContactName() {
        if(contactName == null) {
            contactName = new StringType();
        }
        return contactName;
    }

    public void setContactName(StringType contactName) {
        this.contactName = contactName;
    }
}
