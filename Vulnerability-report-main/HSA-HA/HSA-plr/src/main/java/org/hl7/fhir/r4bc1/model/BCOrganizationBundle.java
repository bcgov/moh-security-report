/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.hl7.fhir.r4bc1.model;

import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.BC_ORGANIZATION_BUNDLE_PROFILE_URL;
import ca.uhn.fhir.model.api.annotation.Child;
import ca.uhn.fhir.model.api.annotation.Description;
import ca.uhn.fhir.model.api.annotation.ResourceDef;
import ca.uhn.fhir.util.ElementUtil;
import org.hl7.fhir.r4.model.Bundle;
import org.hl7.fhir.r4.model.Resource;

/**
 * General constraints on the BCOrganizationBundle - this profile sets the
 * minimum expectations for a Bundle resource that submits Organization and
 * PractitionerRole information for use in the BC Provider Registry project.
 *
 * @author greg.perkins
 */
@ResourceDef(name = "BCOrganizationBundle", profile = BC_ORGANIZATION_BUNDLE_PROFILE_URL, id = "bc-organization-bundle")
public class BCOrganizationBundle extends Bundle {

    @Child(name = "bcOrganization", type = {BCOrganization.class})
    @Description(shortDefinition = "BCOrganization", formalDefinition = "BCOrganization")
    protected BCOrganization bcOrganization;

    public BCOrganization getBcOrganization() {
        return bcOrganization;
    }

    public void setBcOrganization(BCOrganization bcOrganization) {
        this.bcOrganization = bcOrganization;
    }
    
    public void addBcOrganizationAffiliation(Resource bcOrganizationAffiliation) {
        this.addEntry().setResource(bcOrganizationAffiliation);
    }
    
    public void addBcPractitionerRole(BCPractitionerRole bcPractitionerRole) {
        this.addEntry().setResource(bcPractitionerRole);
    }

    protected BundleType bcPractitionerBundleType;

    public BundleType getBcPractitionerBundleType() {
        return bcPractitionerBundleType.TRANSACTION;
    }

    /**
     * It is important to override the isEmpty() method, adding a check for any
     * newly added fields.
     *
     * @return boolean
     */
    @Override
    public boolean isEmpty() {
        return super.isEmpty() && ElementUtil.isEmpty(bcOrganization, bcPractitionerBundleType);
    }

    @Override
    public BCOrganizationBundle copy() {
        BCOrganizationBundle copy = new BCOrganizationBundle();
        copy.bcPractitionerBundleType = bcPractitionerBundleType;
        copy.bcOrganization = bcOrganization;
        return copy;
    }

}
