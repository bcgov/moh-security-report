/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.hl7.fhir.r4bc1.model;

import ca.uhn.fhir.model.api.annotation.Block;
import ca.uhn.fhir.model.api.annotation.Child;
import ca.uhn.fhir.model.api.annotation.Description;
import ca.uhn.fhir.model.api.annotation.Extension;
import ca.uhn.fhir.util.ElementUtil;
import org.hl7.fhir.r4.model.CodeableConcept;
import org.hl7.fhir.r4.model.Period;

/**
 * Custom extension BC LicenseStatus for the BCPractitioner/BCOrganization
 * profile resources for use in the BC Provider Registry project.
 *
 * @author dan.stepanov
 */
@Block
public class BCLicenseStatusExtension extends BCCommonExtensions {

    @Child(name = "statusCode")
    @Extension(url = "statusCode", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "Status code")
    private CodeableConcept statusCode;
    
    @Child(name = "statusReasonCode")
    @Extension(url = "statusReasonCode", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "Status reason code")
    private CodeableConcept statusReasonCode;
    
    @Child(name = "period")
    @Extension(url = "http://hl7.org/fhir/ca-bc/provider/StructureDefinition/bc-period-extension", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "Effective dates")
    protected Period period;
    
    @Child(name = "statusClassCode")
    @Extension(url = "statusClassCode", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "Status class code")
    private CodeableConcept statusClassCode;

    public CodeableConcept getStatusReasonCode() {
        if (statusReasonCode == null) {
            statusReasonCode = new CodeableConcept();
        }
        return statusReasonCode;
    }

    public void setStatusReasonCode(CodeableConcept theReason) {
        statusReasonCode = theReason;
    }

    public CodeableConcept getStatusCode() {
        if (statusCode == null) {
            statusCode = new CodeableConcept();
        }
        return statusCode;
    }

    public void setStatusCode(CodeableConcept theStatusCode) {
        statusCode = theStatusCode;
    }
    
    public Period getPeriod() {
        if (period == null) {
            period = new Period();
        }
        return period;
    }

    public void setPeriod(Period thePeriod) {
        period = thePeriod;
    }
    
    public CodeableConcept getStatusClassCode() {
        if (statusClassCode == null) {
            statusClassCode = new CodeableConcept();
        }
        return statusClassCode;
    }

    public void setStatusClassCode(CodeableConcept theClass) {
        statusClassCode = theClass;
    }

    @Override
    public BCLicenseStatusExtension copy() {
        BCLicenseStatusExtension copy = new BCLicenseStatusExtension();
        copy.statusCode = statusCode;
        copy.statusReasonCode = statusReasonCode;
        copy.statusClassCode = statusClassCode;
        copy.period = period;
        return copy;
    }

    @Override
    public boolean isEmpty() {
        return super.isEmpty() && ElementUtil.isEmpty(statusCode, statusReasonCode, statusClassCode, period);
    }

}
