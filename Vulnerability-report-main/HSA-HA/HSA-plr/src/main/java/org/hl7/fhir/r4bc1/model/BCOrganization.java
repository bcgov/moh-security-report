/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.hl7.fhir.r4bc1.model;

import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.*;
import ca.uhn.fhir.model.api.annotation.Child;
import ca.uhn.fhir.model.api.annotation.Description;
import ca.uhn.fhir.model.api.annotation.ResourceDef;
import ca.uhn.fhir.util.ElementUtil;
import ca.uhn.fhir.model.api.annotation.Extension;
import java.util.ArrayList;
import java.util.List;
import org.hl7.fhir.r4.model.Organization;
import org.hl7.fhir.r4.model.Period;

/**
 * General constraints on the BC Organization resource for use in the BC
 * Provider Registry project.
 *
 * @author dan.stepanov
 */
@ResourceDef(name = "BCOrganization", profile = BC_ORGANIZATION_PROFILE_URL, id = "bc-organization")
public class BCOrganization extends Organization {
    
    @Child(name = "bcContactPoint", type = {BCContactPoint.class}, min = 0, max = 1, modifier = false, summary = false)
    @Description(shortDefinition = "Adds an end reason and extra contact information", formalDefinition = "Telecom contact info for BCOrganization.")
    protected List<BCContactPoint> bcContactPoint;

    public List<BCContactPoint> getBcContactPoint() {
        return bcContactPoint;
    }

    public void setBcContactPoint(List<BCContactPoint> bcContactPoint) {
        this.bcContactPoint = bcContactPoint;
    }

    public void addBcContactPoint(BCContactPoint contactPoint) {
        this.getBcContactPoint().add(contactPoint);
    }

    /**
     * A custom complex extension for BC Notes Extension with @Extension
     * annotation
     */
    @Child(name = "bc-note-extension", min = 0, max = -1)
    @Extension(url = "http://hl7.org/fhir/ca-bc/provider/StructureDefinition/bc-note-extension", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "BC Note extension", formalDefinition = "BC Notes")
    protected List<BCNoteExtension> bcNoteExtension;

    public List<BCNoteExtension> getBcNoteExtension() {
        if (bcNoteExtension == null) {
            bcNoteExtension = new ArrayList<>();
        }
        return bcNoteExtension;
    }

    public void addBcNoteExtension(BCNoteExtension note) {
        this.getBcNoteExtension().add(note);
    }

    public void setBcNoteExtension(List<BCNoteExtension> myBcNoteExtension) {
        bcNoteExtension = myBcNoteExtension;
    }

    @Child(name = "period")
    @Extension(url = "http://hl7.org/fhir/ca-bc/provider/StructureDefinition/bc-period-extension", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "Effective dates")
    protected Period period;

    public Period getPeriod() {
        if (period == null) {
            period = new Period();
        }
        return period;
    }

    public void setPeriod(Period thePeriod) {
        period = thePeriod;
    }
    
    /**
     * A custom complex extension for BC License Status Extension with
     *
     * @Extension annotation
     */
    @Child(name = "bc-license-status-extension", min = 0, max = -1)
    @Extension(url = "http://hl7.org/fhir/ca-bc/provider/StructureDefinition/bc-license-status-extension", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "BC License Status Extension")
    protected List<BCLicenseStatusExtension> bcLicenseStatusExtension;

    public List<BCLicenseStatusExtension> getBcLicenseStatusExtension() {
        if (bcLicenseStatusExtension == null) {
            bcLicenseStatusExtension = new ArrayList<>();
        }
        return bcLicenseStatusExtension;
    }

    public void setBcLicenseStatusExtension(List<BCLicenseStatusExtension> myBCLicenseStatusExtension) {
        bcLicenseStatusExtension = myBCLicenseStatusExtension;
    }

    public void addBcLicenseStatusExtension(BCLicenseStatusExtension bcLicenseStatus) {
        this.getBcLicenseStatusExtension().add(bcLicenseStatus);
    }
    
//    @Child(name = "bcName", type = {BCName.class}, min = 0, max = 1, modifier = false, summary = false)
//    @Description(shortDefinition = "bc specific org name")
//    protected BCName bcName;
//
//
//    public BCName getBcName() {
//        return bcName;
//    }
//
//    public void setBcName(BCName bcName) {
//        this.bcName = bcName;
//    }

    /**
     * It is important to override the isEmpty() method, adding a check for any
     * newly added fields.
     */
    @Override
    public boolean isEmpty() {
        return super.isEmpty() && ElementUtil.isEmpty(active, bcNoteExtension, bcLicenseStatusExtension, bcContactPoint, contained, id, period);
    }

    @Override
    public BCOrganization copy() {
        BCOrganization copy = new BCOrganization();
        copy.active = active;
        copy.bcLicenseStatusExtension = bcLicenseStatusExtension;
        copy.bcNoteExtension = bcNoteExtension;
        copy.period = period;
        copy.bcContactPoint = bcContactPoint;
        copy.contained = contained;
        copy.id = id;
        return copy;
    }

}
