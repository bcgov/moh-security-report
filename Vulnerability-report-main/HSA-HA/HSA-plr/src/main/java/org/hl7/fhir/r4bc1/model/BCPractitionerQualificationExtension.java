/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.hl7.fhir.r4bc1.model;

import ca.uhn.fhir.model.api.annotation.Block;
import ca.uhn.fhir.model.api.annotation.Child;
import ca.uhn.fhir.model.api.annotation.Description;
import ca.uhn.fhir.model.api.annotation.Extension;
import ca.uhn.fhir.util.ElementUtil;
import org.hl7.fhir.r4.model.BackboneElement;
import org.hl7.fhir.r4.model.BooleanType;
import org.hl7.fhir.r4.model.DateType;
import org.hl7.fhir.r4.model.StringType;

/**
 * Custom extension BC PractitionerQualification for the BCPractitioner profile
 * resources for use in the BC Provider Registry project.
 *
 * @author dan.stepanov
 */
@Block
public class BCPractitionerQualificationExtension extends BackboneElement {

    @Child(name = "designation")
    @Extension(url = "designation", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "designation")
    private StringType designation;

    @Child(name = "registrationNumber")
    @Extension(url = "registrationNumber", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "registrationNumber")
    private StringType registrationNumber;

    @Child(name = "equivalencyFlag")
    @Extension(url = "equivalencyFlag", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "equivalencyFlag")
    private BooleanType equivalencyFlag;

    @Child(name = "issuedDate")
    @Extension(url = "issuedDate", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "issued date")
    protected DateType issuedDate;

    public DateType getIssuedDate() {
        return issuedDate;
    }

    public void setIssuedDate(DateType theIssuedDate) {
        issuedDate = theIssuedDate;
    }

    public StringType getDesignation() {
        if (designation == null) {
            designation = new StringType();
        }
        return designation;
    }

    public void setDesignation(StringType theDesignation) {
        designation = theDesignation;
    }

    public StringType getRegistrationNumber() {
        if (registrationNumber == null) {
            registrationNumber = new StringType();
        }
        return registrationNumber;
    }

    public void setRegistrationNumber(StringType theRegistrationNumber) {
        registrationNumber = theRegistrationNumber;
    }

    public BooleanType getQualificationEquivalencyFlag() {
        return equivalencyFlag;
    }

    public void setEquivalencyFlag(BooleanType theEquivalencyFlag) {
        equivalencyFlag = theEquivalencyFlag;
    }

    @Override
    public BCPractitionerQualificationExtension copy() {
        BCPractitionerQualificationExtension copy = new BCPractitionerQualificationExtension();
        copy.designation = designation;
        copy.registrationNumber = registrationNumber;
        copy.equivalencyFlag = equivalencyFlag;
        copy.issuedDate = issuedDate;
        return copy;
    }

    @Override
    public boolean isEmpty() {
        return super.isEmpty() && ElementUtil.isEmpty(designation, registrationNumber, equivalencyFlag, issuedDate);
    }

}
