/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.hl7.fhir.r4bc1.model;

import ca.uhn.fhir.model.api.annotation.Block;
import ca.uhn.fhir.model.api.annotation.Child;
import ca.uhn.fhir.model.api.annotation.Description;
import ca.uhn.fhir.model.api.annotation.Extension;
import ca.uhn.fhir.util.ElementUtil;
import org.hl7.fhir.r4.model.CodeableConcept;
import org.hl7.fhir.r4.model.Identifier;
import org.hl7.fhir.r4.model.Period;
import org.hl7.fhir.r4.model.StringType;

/**
 * Custom extension BC Status for the Practitioner/Location/Organization BC
 * profile resources and other custom BC extensions for use in the BC Provider
 * Registry project.
 *
 * @author dan.stepanov
 */
@Block
public class BCStatusExtension extends BCCommonExtensions {

    @Child(name = "statusReason")
    @Extension(url = "http://hl7.org/fhir/ca-bc/provider/StructureDefinition/bc-status-statusReasonCode-extension", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "Status reason code")
    private CodeableConcept statusReason;

    public CodeableConcept getStatusReason() {
        if (statusReason == null) {
            statusReason = new CodeableConcept();
        }
        return statusReason;
    }

    public void setStatusReason(CodeableConcept theReason) {
        statusReason = theReason;
    }

    @Child(name = "statusCode")
    @Extension(url = "http://hl7.org/fhir/ca-bc/provider/StructureDefinition/bc-status-statusCode-extension", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "Status code")
    private StringType statusCode;

    public StringType getStatusCode() {
        if (statusCode == null) {
            statusCode = new StringType("");
        }
        return statusCode;
    }

    public void setStatusCode(StringType theCode) {
        statusCode = theCode;
    }

    @Child(name = "eventId")
    @Extension(url = "http://hl7.org/fhir/ca-bc/provider/StructureDefinition/bc-status-eventId-extension", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "Event Id code")
    private Identifier eventId;

    public Identifier getEventId() {
        if (eventId == null) {
            eventId = new Identifier();
        }
        return eventId;
    }

    public void setEventId(Identifier theEventId) {
        eventId = theEventId;
    }

    @Child(name = "custodianId")
    @Extension(url = "http://hl7.org/fhir/ca-bc/provider/StructureDefinition/bc-status-custodianId-extension", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "custodian Id code")
    private Identifier custodianId;

    public Identifier getCustodianId() {
        if (custodianId == null) {
            custodianId = new Identifier();
        }
        return custodianId;
    }

    public void setCustodianId(Identifier theCustodianId) {
        custodianId = theCustodianId;
    }

    @Child(name = "statusPeriod")
    @Extension(url = "http://hl7.org/fhir/ca-bc/provider/StructureDefinition/bc-status-period-extension", definedLocally = false, isModifier = false)
    @Description(shortDefinition = "Period for status created invalidated dates")
    private Period statusPeriod;

    public Period getStatusPeriod() {
        if (statusPeriod == null) {
            statusPeriod = new Period();
        }
        return statusPeriod;
    }

    public void setStatusPeriodd(Period theStatusPeriod) {
        statusPeriod = theStatusPeriod;
    }

    @Override
    public BCStatusExtension copy() {
        BCStatusExtension copy = new BCStatusExtension();
        copy.statusReason = statusReason;
        copy.statusCode = statusCode;
        copy.eventId = eventId;
        copy.custodianId = custodianId;
        copy.statusPeriod = statusPeriod;
        return copy;
    }

    @Override
    public boolean isEmpty() {
        return super.isEmpty() && ElementUtil.isEmpty(statusReason, statusCode, eventId, custodianId, statusPeriod);
    }

}
