/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.hl7ToDto;

import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ConditionsDto;
import ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DisciplinaryActionDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.esb.NoteDto;
import ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.RegistryIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.RegistryUserRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto;
import ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import org.junit.Assert;

/**
 *
 * @author conrad.gustafson
 */
public class HL7XMLToMaintainProviderRequestOutputAsserter implements PLRTypeConverterTestConstants {

    public static void assertFields(MaintainProviderRequest dto, boolean isAdd) {
        assertMessageFields(dto);
        assertPRSProvider(dto, isAdd);
    }
    
    public static void assertMessageFields(MaintainProviderRequest dto) {
        Assert.assertEquals(UNIQUEMESSAGECHID, dto.getUniqueMessageId());
        final Date messageCreationTime = dto.getMessageCreationTime();
        Assert.assertEquals(MESSAGEDTM, dateToPLRDateString(messageCreationTime));

        Assert.assertEquals(SENDINGFACILITYCHID, dto.getSourceFacilityId());
        Assert.assertEquals(SENDINGAPPLICATIONCHID, dto.getSourceServer());
        Assert.assertEquals(SENDINGORGANISATIONCHID, dto.getSourceOrganizationChid());
        Assert.assertEquals(SENDINGJURISDICTIONCODE, dto.getSourceJurisdiction());
        Assert.assertEquals(SENDINGNETWORKADDRESSCHID, dto.getSourceNetworkAddressChid());

        Assert.assertEquals(RECEIVINGNETWORKADDRESSCHID, dto.getTargetNetworkAddressChid());
        Assert.assertEquals(ENVIRONMENTCODE, dto.getTargetEnvironment());
        Assert.assertEquals(RECEIVINGFACILITYCHID, dto.getTargetFacilityId());
        Assert.assertEquals(RECEIVINGAPPLICATIONCHID, dto.getTargetServer());
        Assert.assertEquals(RECEIVINGORGANISATIONCHID, dto.getTargetOrganizationChid());
        Assert.assertEquals(RECEIVINGJURISDICTIONCODE, dto.getTargetJurisdiction());

        Assert.assertEquals(RESPONSIBLEUSERCHID, dto.getResponsiblePersonUserId());
        Assert.assertEquals(SENDINGUSERCHID, dto.getRegistryUserOrgId());
        Assert.assertEquals(SOURCEUSERID, dto.getSourceUserId());

        Assert.assertEquals(INTERACTIONTYPECODE, dto.getMessageInteractionId());
        Assert.assertEquals(VERSIONNUMBERCODE, dto.getVersion());
        // Not mapped from HL7
//        final Date originalEventDate = dto.getOriginalEventDate();
//        Assert.assertEquals(ORIGINALEVENTDTM, dateToPLRDateString(originalEventDate));
    }

    public static void assertPRSProvider(MaintainProviderRequest dto, boolean isAdd) {
        ProviderDetails providerOutput = dto.getProviderDetails();

        Assert.assertEquals(PROVIDER_HPTCODE, providerOutput.getType());

        // not mapped by hl7
//        Assert.assertEquals(PROVIDER_PARTYTYPECODE, providerOutput.getProviderType());
        assertProviderIdentifiers(providerOutput);
        assertProviderNames(providerOutput);
        assertProviderAddresses(providerOutput);
        assertProviderPhones(providerOutput);
        assertElectronicAddresses(providerOutput);
        assertPrsConditions(providerOutput);
        assertDemographicDetails(providerOutput);
        assertCredentials(providerOutput);
        assertExpertises(providerOutput);
        assertStatuses(providerOutput);

        assertWorkLocations(providerOutput, isAdd);
        // not mapped by hl7 update
        if (isAdd) {
            assertDisciplinaryAction(providerOutput);
            assertNote(providerOutput);
            assertInformationRoute(providerOutput);
            assertProviderRelationships(providerOutput);
        }

        // not mapped by hl7
//        assertRegistryUserRelationships(providerOutput);
    }

    public static void assertProviderIdentifiers(ProviderDetails providerOutput) {
        List<CollegeIdentifierDto> collegeIdentifiers = providerOutput.getIdentifiers();
        Assert.assertTrue(collegeIdentifiers.size() == 1);
        CollegeIdentifierDto collegeIdentifier = collegeIdentifiers.get(0);

        Assert.assertEquals(IDENTIFIER_PROVIDERCHID, collegeIdentifier.getIdentifier());
        Assert.assertEquals(IDENTIFIER_IDENTIFIERTYPECODE, collegeIdentifier.getTypeCode());
        Assert.assertEquals(IDENTIFIER_EFFECTIVESTARTDATE, dateToPLRDateString(collegeIdentifier.getEffectiveStartDate()));
        Assert.assertEquals(IDENTIFIER_EFFECTIVEENDDATE, dateToPLRDateString(collegeIdentifier.getEffectiveEndDate()));
        Assert.assertEquals(IDENTIFIER_ENDREASONCODE, collegeIdentifier.getEndReasonCode());
        Assert.assertEquals(IDENTIFIER_DATAOWNERCODE, collegeIdentifier.getDataOwnerCode());

        List<RegistryIdentifierDto> registryIdentifiers = providerOutput.getRegistryIdentifiers();
        Assert.assertTrue(registryIdentifiers.size() == 1);
        RegistryIdentifierDto registryIdentifier = registryIdentifiers.get(0);

        Assert.assertEquals(REGISTRYIDENTIFIER_PROVIDERCHID, registryIdentifier.getIdentifier());
        Assert.assertEquals(REGISTRYIDENTIFIER_IDENTIFIERTYPECODE, registryIdentifier.getTypeCode());
        Assert.assertEquals(REGISTRYIDENTIFIER_EFFECTIVESTARTDATE, dateToPLRDateString(registryIdentifier.getEffectiveStartDate()));
        Assert.assertEquals(REGISTRYIDENTIFIER_EFFECTIVEENDDATE, dateToPLRDateString(registryIdentifier.getEffectiveEndDate()));
        Assert.assertEquals(REGISTRYIDENTIFIER_ENDREASONCODE, registryIdentifier.getEndReasonCode());
        Assert.assertEquals(REGISTRYIDENTIFIER_DATAOWNERCODE, registryIdentifier.getDataOwnerCode());
    }

    public static void assertProviderNames(ProviderDetails providerOutput) {
        List<PersonNameDto> indNames = providerOutput.getIndNames();
        Assert.assertTrue(indNames.size() == 1);
        PersonNameDto personalNameDto = indNames.get(0);

        Assert.assertEquals(NAME_NAMETYPECODE, personalNameDto.getTypeCode());
        Assert.assertEquals(NAME_PNAMEPREFERREDFLAG, convertToFlag(personalNameDto.isPreferred()));
        Assert.assertEquals(NAME_PRSNSURNAMETXT, personalNameDto.getLastName());
        Assert.assertEquals(NAME_PRSNFIRSTGIVENNAMETXT, personalNameDto.getFirstName());
        Assert.assertEquals(NAME_PRSNSECONDGIVENNAMETXT, personalNameDto.getSecondName());
        Assert.assertEquals(NAME_PRSNTHIRDGIVENNAMETXT, personalNameDto.getThirdName());
        Assert.assertEquals(NAME_PRSNSUFFIXTXT, personalNameDto.getSuffix());
        Assert.assertEquals(NAME_PRSNPREFIXTXT, personalNameDto.getPrefix());
        Assert.assertEquals(NAME_ENDREASONCODE, personalNameDto.getEndReasonCode());
        Assert.assertEquals(NAME_DATAOWNERCODE, personalNameDto.getDataOwnerCode());
        Assert.assertEquals(NAME_EFFECTIVESTARTDATE, dateToPLRDateString(personalNameDto.getEffectiveStartDate()));
        Assert.assertEquals(NAME_EFFECTIVEENDDATE, dateToPLRDateString(personalNameDto.getEffectiveEndDate()));
    }

    public static void assertProviderAddresses(ProviderDetails providerOutput) {
        List<AddressDto> addressDtos = providerOutput.getAddresses();
        Assert.assertTrue(addressDtos.size() == 1);
        AddressDto personalNameDto = addressDtos.get(0);

        Assert.assertEquals(ADDRESS_CMNCTNPRPSTYPCD, personalNameDto.getCommunicationPurposeCode());
        Assert.assertEquals(ADDRESS_ADDRESSTYPECODE, personalNameDto.getTypeCode());
        Assert.assertEquals(ADDRESS_ADDRESSLINE1TXT, personalNameDto.getAddressLineOne());
        Assert.assertEquals(ADDRESS_ADDRESSLINE2TXT, personalNameDto.getAddressLineTwo());
        Assert.assertEquals(ADDRESS_ADDRESSLINE3TXT, personalNameDto.getAddressLineThree());
        Assert.assertEquals(ADDRESS_ADDRESSLINE4TXT, personalNameDto.getAddressLineFour());
        Assert.assertEquals(ADDRESS_CITYTXT, personalNameDto.getCity());
        Assert.assertEquals(ADDRESS_PROVINCEORSTATETXT, personalNameDto.getProvinceOrStateTxt());
        Assert.assertEquals(ADDRESS_POSTALCODEORZIPTXT, personalNameDto.getPostalCode());
        Assert.assertEquals(ADDRESS_COUNTRYCODE, personalNameDto.getCountryCode());
        Assert.assertEquals(ADDRESS_EFFECTIVESTARTDATE, dateToPLRDateString(personalNameDto.getEffectiveStartDate()));
        Assert.assertEquals(ADDRESS_EFFECTIVEENDDATE, dateToPLRDateString(personalNameDto.getEffectiveEndDate()));
        Assert.assertEquals(ADDRESS_ENDREASONCODE, personalNameDto.getEndReasonCode());
        Assert.assertEquals(ADDRESS_DATAOWNERCODE, personalNameDto.getDataOwnerCode());

    }

    public static void assertProviderPhones(ProviderDetails providerOutput) {
        List<TelecommunicationDto> telecommunicationDtos = providerOutput.getTelecommunication();
        Assert.assertTrue(telecommunicationDtos.size() == 1);
        TelecommunicationDto telecommunicationDto = telecommunicationDtos.get(0);

        Assert.assertEquals(PHONE_CMNCTNPRPSTYPCD, telecommunicationDto.getCommunicationPurposeCode());
        Assert.assertEquals(PHONE_TLCMNCTNNMBRTYPCD, telecommunicationDto.getTypeCode());
        Assert.assertEquals(PHONE_AREACODENUM, telecommunicationDto.getAreaCode());
        Assert.assertEquals(PHONE_TELECOMMUNICATIONNMBRNUM, telecommunicationDto.getNumber());

        // Extension not mapped in HL7
//        Assert.assertEquals(PHONE_EXTENSIONNUM, telecommunicationDto.getExtension());
        Assert.assertEquals(PHONE_EFFECTIVESTARTDATE, dateToPLRDateString(telecommunicationDto.getEffectiveStartDate()));
        Assert.assertEquals(PHONE_EFFECTIVEENDDATE, dateToPLRDateString(telecommunicationDto.getEffectiveEndDate()));
        Assert.assertEquals(PHONE_ENDREASONCODE, telecommunicationDto.getEndReasonCode());
        Assert.assertEquals(PHONE_DATAOWNERCODE, telecommunicationDto.getDataOwnerCode());
    }

    public static void assertElectronicAddresses(ProviderDetails providerOutput) {
        List<ElectronicAddressDto> electronicAddressDtos = providerOutput.getElectronicAddresses();
        Assert.assertTrue(electronicAddressDtos.size() == 1);
        ElectronicAddressDto electronicAddressDto = electronicAddressDtos.get(0);

        Assert.assertEquals(EMAIL_CMNCTNPRPSTYPCD, electronicAddressDto.getCommunicationPurposeCode());
        Assert.assertEquals(EMAIL_ELECTRONICADDRESSTYPECODE, electronicAddressDto.getTypeCode());
        Assert.assertEquals(EMAIL_ELECTRONICADDRESSTXT, electronicAddressDto.getAddress());

        Assert.assertEquals(EMAIL_EFFECTIVESTARTDATE, dateToPLRDateString(electronicAddressDto.getEffectiveStartDate()));
        Assert.assertEquals(EMAIL_EFFECTIVEENDDATE, dateToPLRDateString(electronicAddressDto.getEffectiveEndDate()));
        Assert.assertEquals(EMAIL_ENDREASONCODE, electronicAddressDto.getEndReasonCode());
        Assert.assertEquals(EMAIL_DATAOWNERCODE, electronicAddressDto.getDataOwnerCode());
    }

    public static void assertPrsConditions(ProviderDetails providerOutput) {
        List<ConditionsDto> conditionDtos = providerOutput.getConditions();
        Assert.assertTrue(conditionDtos.size() == 1);
        ConditionsDto conditionDto = conditionDtos.get(0);

        Assert.assertEquals(CONDITION_CONDITIONCHID, conditionDto.getIdentifier());
        Assert.assertEquals(CONDITION_CONDITIONTYPECODE, conditionDto.getTypeCode());
        Assert.assertEquals(CONDITION_RESTRICTIONFLAG, convertToFlag(conditionDto.isRestrictionFlag()));
        Assert.assertEquals(CONDITION_RESTRICTIONEXPLANATIONTXT, conditionDto.getRestrictionExplanationText());
        Assert.assertEquals(CONDITION_EFFECTIVESTARTDATE, dateToPLRDateString(conditionDto.getEffectiveStartDate()));
        Assert.assertEquals(CONDITION_EFFECTIVEENDDATE, dateToPLRDateString(conditionDto.getEffectiveEndDate()));
        Assert.assertEquals(CONDITION_ENDREASONCODE, conditionDto.getEndReasonCode());
        Assert.assertEquals(CONDITION_DATAOWNERCODE, conditionDto.getDataOwnerCode());
    }

    public static void assertDemographicDetails(ProviderDetails providerOutput) {
        List<DemographicDetailsDto> demographicDetailsDtos = providerOutput.getDemographicDetails();
        Assert.assertTrue(demographicDetailsDtos.size() == 1);
        DemographicDetailsDto demographicsDetailDto = demographicDetailsDtos.get(0);

        Assert.assertEquals(DEMOGRAPHICS_DATEOFBIRTHDATE, dateToPLRDateString(demographicsDetailDto.getBirthDate()));
        Assert.assertEquals(DEMOGRAPHICS_DATEOFDEATHDATE, dateToPLRDateString(demographicsDetailDto.getDeathDate()));
        Assert.assertEquals(DEMOGRAPHICS_COUNTRYOFBIRTHCODE, demographicsDetailDto.getBirthCountryCode());
        Assert.assertEquals(DEMOGRAPHICS_PROVORSTATEOFBIRTHTXT, demographicsDetailDto.getBirthProvState());
        Assert.assertEquals(DEMOGRAPHICS_GENDERCODE, demographicsDetailDto.getGenderCode());
        Assert.assertEquals(DEMOGRAPHICS_EFFECTIVESTARTDATE, dateToPLRDateString(demographicsDetailDto.getEffectiveStartDate()));
        Assert.assertEquals(DEMOGRAPHICS_EFFECTIVEENDDATE, dateToPLRDateString(demographicsDetailDto.getEffectiveEndDate()));
        Assert.assertEquals(DEMOGRAPHICS_ENDREASONCODE, demographicsDetailDto.getEndReasonCode());
        Assert.assertEquals(DEMOGRAPHICS_DATAOWNERCODE, demographicsDetailDto.getDataOwnerCode());
    }

    public static void assertDisciplinaryAction(ProviderDetails providerOutput) {
        List<DisciplinaryActionDto> DisciplinaryActionDtos = providerOutput.getDisciplinaryActions();
        Assert.assertTrue(DisciplinaryActionDtos.size() == 1);
        DisciplinaryActionDto disciplinaryActionDto = DisciplinaryActionDtos.get(0);

        Assert.assertEquals(DISCIPLINARYACTION_DISCIPLINARYACTIONCHID, disciplinaryActionDto.getIdentifier());
        Assert.assertEquals(DISCIPLINARYACTION_DISPLAYFLAG, convertToFlag(disciplinaryActionDto.isDisplayFlag()));
        Assert.assertEquals(DISCIPLINARYACTION_DESCRIPTIONTXT, disciplinaryActionDto.getDescription());
        Assert.assertEquals(DISCIPLINARYACTION_ARCHIVEDATE, dateToPLRDateString(disciplinaryActionDto.getArchiveDate()));

        Assert.assertEquals(DISCIPLINARYACTION_EFFECTIVESTARTDATE, dateToPLRDateString(disciplinaryActionDto.getEffectiveStartDate()));
        Assert.assertEquals(DISCIPLINARYACTION_EFFECTIVEENDDATE, dateToPLRDateString(disciplinaryActionDto.getEffectiveEndDate()));
        Assert.assertEquals(DISCIPLINARYACTION_ENDREASONCODE, disciplinaryActionDto.getEndReasonCode());
        Assert.assertEquals(DISCIPLINARYACTION_DATAOWNERCODE, disciplinaryActionDto.getDataOwnerCode());
    }

    public static void assertInformationRoute(ProviderDetails providerOutput) {
        List<InformationRouteDto> informationRouteDtos = providerOutput.getInformationRoutes();
        Assert.assertTrue(informationRouteDtos.size() == 2);
        InformationRouteDto informationRouteDto = informationRouteDtos.get(0);

        Assert.assertEquals(INFORMATIONROUTE_DOCUMENTTYPECODE, informationRouteDto.getDocumentTypeCode());
       // Assert.assertEquals(INFORMATIONROUTE_MECHANISMTYPECODE, informationRouteDto.getMechanismTypeCode());
        Assert.assertEquals(INFORMATIONROUTE_DEFAULTFLAG, convertToFlag(informationRouteDto.isDefaultFlag()));
        final String addressTypeCode = INFORMATIONROUTE_ADDRESSTYPECODE;
        final AddressDto addressDto = informationRouteDto.getAddressDto();
        if (addressTypeCode != null) {
            Assert.assertEquals(addressTypeCode, addressDto.getTypeCode());
            Assert.assertEquals(ADDRESS_CMNCTNPRPSTYPCD, addressDto.getCommunicationPurposeCode());
            Assert.assertEquals(ADDRESS_DATAOWNERCODE, addressDto.getDataOwnerCode());
        } else {
            Assert.assertNull(addressDto.getTypeCode());
        }
//        final String phoneTypeCode = INFORMATIONROUTE_TLCMNCTNNMBRTYPCD;
//        final TelecommunicationDto phoneDto = informationRouteDto.getTelecommunicationDto();
//        if (phoneTypeCode != null) {
//            Assert.assertEquals(phoneTypeCode, phoneDto.getTypeCode());
//            Assert.assertEquals(INFORMATIONROUTE_CMNCTNPRPSTYPCD, phoneDto.getCommunicationPurposeCode());
//            Assert.assertEquals(INFORMATIONROUTE_CMNCTNDATAOWNERCODE, phoneDto.getDataOwnerCode());
//        } else {
//            Assert.assertNull(phoneDto.getTypeCode());
//        }
//        final String electronicAddressTypeCode = INFORMATIONROUTE_ELECTRONICADDRESSTYPECODE;
//        final ElectronicAddressDto electronicAddressDto = informationRouteDto.getElectronicAddressDto();
//        if (electronicAddressTypeCode != null) {
//            Assert.assertEquals(electronicAddressTypeCode, electronicAddressDto.getTypeCode());
//            Assert.assertEquals(INFORMATIONROUTE_CMNCTNPRPSTYPCD, electronicAddressDto.getCommunicationPurposeCode());
//            Assert.assertEquals(INFORMATIONROUTE_CMNCTNDATAOWNERCODE, electronicAddressDto.getDataOwnerCode());
//        } else {
//            Assert.assertNull(electronicAddressDto.getTypeCode());
//        }
        
        // Just for testing we have a work location and information route pointing at each other
        Assert.assertEquals(WORKLOCATION_WORKLOCATIONCHID, String.valueOf(informationRouteDto.getWorkLocationIdentifier()));
        Assert.assertEquals(WORKLOCATION_DATAOWNERCODE, informationRouteDto.getWorkLocationDataOwnerCode());
        
        Assert.assertEquals(INFORMATIONROUTE_EFFECTIVESTARTDATE, dateToPLRDateString(informationRouteDto.getEffectiveStartDate()));
        Assert.assertEquals(INFORMATIONROUTE_EFFECTIVEENDDATE, dateToPLRDateString(informationRouteDto.getEffectiveEndDate()));
        Assert.assertEquals(INFORMATIONROUTE_ENDREASONCODE, informationRouteDto.getEndReasonCode());
        Assert.assertEquals(INFORMATIONROUTE_DATAOWNERCODE, informationRouteDto.getDataOwnerCode());
    }

    public static void assertNote(ProviderDetails providerOutput) {
        List<NoteDto> noteDtos = providerOutput.getNotes();
        Assert.assertTrue(noteDtos.size() == 1);
        NoteDto noteDto = noteDtos.get(0);

        Assert.assertEquals(NOTE_NOTECHID, noteDto.getIdentifier());
        Assert.assertEquals(NOTE_NOTETEXT, noteDto.getNoteText());

        Assert.assertEquals(NOTE_EFFECTIVESTARTDATE, dateToPLRDateString(noteDto.getEffectiveStartDate()));
        Assert.assertEquals(NOTE_EFFECTIVEENDDATE, dateToPLRDateString(noteDto.getEffectiveEndDate()));
        Assert.assertEquals(NOTE_ENDREASONCODE, noteDto.getEndReasonCode());
        Assert.assertEquals(NOTE_DATAOWNERCODE, noteDto.getDataOwnerCode());
    }

    public static void assertRegistryUserRelationships(ProviderDetails providerOutput) {
        List<RegistryUserRelationshipDto> registryUserRelationshipDtos = providerOutput.getRegistryUserRelationships();
        Assert.assertTrue(registryUserRelationshipDtos.size() == 1);
        RegistryUserRelationshipDto registryUserRelationshipDto = registryUserRelationshipDtos.get(0);

        Assert.assertEquals(REGISTRYUSERRELATIONSHIP_RURELATIONSHIPTYPECODE, registryUserRelationshipDto.getTypeCode());
        Assert.assertEquals(REGISTRYUSERRELATIONSHIP_EFFECTIVESTARTDATE, dateToPLRDateString(registryUserRelationshipDto.getEffectiveStartDate()));
        Assert.assertEquals(REGISTRYUSERRELATIONSHIP_EFFECTIVEENDDATE, dateToPLRDateString(registryUserRelationshipDto.getEffectiveEndDate()));
        Assert.assertEquals(REGISTRYUSERRELATIONSHIP_ENDREASONCODE, registryUserRelationshipDto.getEndReasonCode());
        Assert.assertEquals(REGISTRYUSERRELATIONSHIP_DATAOWNERCODE, registryUserRelationshipDto.getDataOwnerCode());
        Assert.assertEquals(REGISTRYUSERRELATIONSHIP_RELATEDUSERCHID, registryUserRelationshipDto.getRegistryUserChid());
    }

    public static void assertCredentials(ProviderDetails providerOutput) {
        List<CredentialsDto> credentialDtos = providerOutput.getCredentials();
        Assert.assertTrue(credentialDtos.size() == 1);
        CredentialsDto credentialDto = credentialDtos.get(0);

        Assert.assertEquals(CREDENTIAL_PROVIDERCREDENTIALTYPECODE, credentialDto.getTypeCode());
        Assert.assertEquals(CREDENTIAL_CREDENTIALDESIGNATIONTXT, credentialDto.getDesignation());
        Assert.assertEquals(CREDENTIAL_REGISTRATIONNUMBERTXT, credentialDto.getRegistrationNumber());
        Assert.assertEquals(CREDENTIAL_CREDENTIALGRANTINGINSTTXT, credentialDto.getGrantingInstitution());
        Assert.assertEquals(CREDENTIAL_INSTITUTIONCITYTXT, credentialDto.getInstitutionCity());
        Assert.assertEquals(CREDENTIAL_INSTITUTIONPROVINCECODE, credentialDto.getInstitutionProvStateCode());
        Assert.assertEquals(CREDENTIAL_INSTITUTIONCOUNTRYCODE, credentialDto.getInstitutionCountryCode());
        Assert.assertEquals(CREDENTIAL_EQUIVALENCYFLAG, convertToFlag(credentialDto.isEquivalencyFlag()));
        Assert.assertEquals(CREDENTIAL_YEARCREDENTIALISSUEDTXT, credentialDto.getYearIssued());
        Assert.assertEquals(CREDENTIAL_EFFECTIVESTARTDATE, dateToPLRDateString(credentialDto.getEffectiveStartDate()));
        Assert.assertEquals(CREDENTIAL_EFFECTIVEENDDATE, dateToPLRDateString(credentialDto.getEffectiveEndDate()));
        Assert.assertEquals(CREDENTIAL_ENDREASONCODE, credentialDto.getEndReasonCode());
        Assert.assertEquals(CREDENTIAL_DATAOWNERCODE, credentialDto.getDataOwnerCode());

    }

    private static void assertExpertises(ProviderDetails providerOutput) {
        List<ExpertiseDto> expertiseDtos = providerOutput.getExpertise();
        Assert.assertTrue(expertiseDtos.size() == 1);
        ExpertiseDto expertiseDto = expertiseDtos.get(0);

        // Not mapped by HL7
//        Assert.assertEquals(EXPERTISE_PROVEXPERTISEROLETYPECODE, expertiseDto.getRoleTypeCode());
        Assert.assertEquals(EXPERTISE_PROVIDEREXPERTISETYPECODE, expertiseDto.getTypeCode());
        Assert.assertEquals(EXPERTISE_ORIGINALSOURCEPROVIDERCODE, expertiseDto.getSourcesCode());

        Assert.assertEquals(EXPERTISE_EFFECTIVESTARTDATE, dateToPLRDateString(expertiseDto.getEffectiveStartDate()));
        Assert.assertEquals(EXPERTISE_EFFECTIVEENDDATE, dateToPLRDateString(expertiseDto.getEffectiveEndDate()));
        Assert.assertEquals(EXPERTISE_ENDREASONCODE, expertiseDto.getEndReasonCode());
        Assert.assertEquals(EXPERTISE_DATAOWNERCODE, expertiseDto.getDataOwnerCode());
    }

    private static void assertStatuses(ProviderDetails providerOutput) {
        List<StatusDto> statusDtos = providerOutput.getStatuses();
        Assert.assertTrue(statusDtos.size() == 1);
        StatusDto status = statusDtos.get(0);

        Assert.assertEquals(STATUS_STATUSTYPECODE, status.getTypeCode());
        Assert.assertEquals(STATUS_STATUSCLASSCODE, status.getClassCode());

        // Not mapped by HL7
//        Assert.assertEquals(STATUS_STATUSREASONCODE, status.getReasonCode());
        Assert.assertEquals(STATUS_EFFECTIVESTARTDATE, dateToPLRDateString(status.getEffectiveStartDate()));
        Assert.assertEquals(STATUS_EFFECTIVEENDDATE, dateToPLRDateString(status.getEffectiveEndDate()));
        Assert.assertEquals(STATUS_ENDREASONCODE, status.getEndReasonCode());
        Assert.assertEquals(STATUS_DATAOWNERCODE, status.getDataOwnerCode());
    }

    private static void assertWorkLocations(ProviderDetails providerOutput, boolean isAdd) {
        List<WorkLocationDto> workLocationDtos = providerOutput.getWorkLocationList();
        Assert.assertTrue(workLocationDtos.size() == 1);
        WorkLocationDto workLocation = workLocationDtos.get(0);

        Assert.assertEquals(Long.valueOf(WORKLOCATION_WORKLOCATIONCHID), workLocation.getIdentifier());
        Assert.assertEquals(WORKLOCATION_DATAOWNERCODE, workLocation.getDataOwnerCode());

        assertWorkLocationDetails(workLocation);
        assertWorkLocationAddresses(workLocation);
        assertWorkLocationElectronicAddresses(workLocation);
        assertWorkLocationTelephones(workLocation);

        if (isAdd) {
            assertWorkLocationInformationRoutes(workLocation);
        }

    }

    private static void assertWorkLocationDetails(WorkLocationDto workLocation) {
        workLocation.getPrimaryWorkLocationDetails();

        List<WorkLocationDetailsDto> workLocationDetailsDtos = workLocation.getWorkLocationDetails();
        Assert.assertTrue(workLocationDetailsDtos.size() == 1);
        WorkLocationDetailsDto workLocationDetailsDto = workLocationDetailsDtos.get(0);

        Assert.assertEquals(WORKLOCATIONDETAILS_WORKLOCATIONNAMETXT, workLocationDetailsDto.getName());
        // Not mapped by HL7
//        Assert.assertEquals(WORKLOCATIONDETAILS_ADDITIONALADDRESSEEINFOTXT, workLocationDetailsDto.getAdditionalAddresseeInfo());
        Assert.assertEquals(WORKLOCATIONDETAILS_DEFAULTFLAG, convertToFlag(workLocationDetailsDto.isDefaultFlag()));
        Assert.assertEquals(WORKLOCATIONDETAILS_WORKLOCATIONTYPECODE, workLocationDetailsDto.getTypeCode());
        Assert.assertEquals(WORKLOCATIONDETAILS_EFFECTIVESTARTDATE, dateToPLRDateString(workLocationDetailsDto.getEffectiveStartDate()));
        Assert.assertEquals(WORKLOCATIONDETAILS_EFFECTIVEENDDATE, dateToPLRDateString(workLocationDetailsDto.getEffectiveEndDate()));
        Assert.assertEquals(WORKLOCATIONDETAILS_ENDREASONCODE, workLocationDetailsDto.getEndReasonCode());
    }

    public static String dateToPLRDateString(final Date date) {
        if (date == null) {
            return null;
        }
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss");
        return dateFormat.format(date);
    }

    private static String convertToFlag(boolean flag) {
        return flag ? "Y" : "N";
    }

    private static void assertWorkLocationAddresses(WorkLocationDto workLocation) {
        List<AddressDto> addressDtos = workLocation.getAddresses();
        Assert.assertTrue(addressDtos.size() == 1);
        AddressDto personalNameDto = addressDtos.get(0);

        Assert.assertEquals(ADDRESS_CMNCTNPRPSTYPCD, personalNameDto.getCommunicationPurposeCode());
        Assert.assertEquals(ADDRESS_ADDRESSTYPECODE, personalNameDto.getTypeCode());
        Assert.assertEquals(ADDRESS_ADDRESSLINE1TXT, personalNameDto.getAddressLineOne());
        Assert.assertEquals(ADDRESS_ADDRESSLINE2TXT, personalNameDto.getAddressLineTwo());
        Assert.assertEquals(ADDRESS_ADDRESSLINE3TXT, personalNameDto.getAddressLineThree());
        Assert.assertEquals(ADDRESS_ADDRESSLINE4TXT, personalNameDto.getAddressLineFour());
        Assert.assertEquals(ADDRESS_CITYTXT, personalNameDto.getCity());
        Assert.assertEquals(ADDRESS_PROVINCEORSTATETXT, personalNameDto.getProvinceOrStateTxt());
        Assert.assertEquals(ADDRESS_POSTALCODEORZIPTXT, personalNameDto.getPostalCode());
        Assert.assertEquals(ADDRESS_COUNTRYCODE, personalNameDto.getCountryCode());
        Assert.assertEquals(WORKLOCATIONDETAILS_EFFECTIVESTARTDATE, dateToPLRDateString(personalNameDto.getEffectiveStartDate()));
        Assert.assertEquals(WORKLOCATIONDETAILS_EFFECTIVEENDDATE, dateToPLRDateString(personalNameDto.getEffectiveEndDate()));
        Assert.assertEquals(WORKLOCATIONDETAILS_ENDREASONCODE, personalNameDto.getEndReasonCode());
        Assert.assertEquals(ADDRESS_DATAOWNERCODE, personalNameDto.getDataOwnerCode());
    }

    private static void assertWorkLocationElectronicAddresses(WorkLocationDto workLocation) {
        List<ElectronicAddressDto> electronicAddressDtos = workLocation.getElectronicAddresses();
        Assert.assertTrue(electronicAddressDtos.size() == 1);
        ElectronicAddressDto electronicAddressDto = electronicAddressDtos.get(0);

        Assert.assertEquals(EMAIL_CMNCTNPRPSTYPCD, electronicAddressDto.getCommunicationPurposeCode());
        Assert.assertEquals(EMAIL_ELECTRONICADDRESSTYPECODE, electronicAddressDto.getTypeCode());
        Assert.assertEquals(EMAIL_ELECTRONICADDRESSTXT, electronicAddressDto.getAddress());
        Assert.assertEquals(EMAIL_EFFECTIVESTARTDATE, dateToPLRDateString(electronicAddressDto.getEffectiveStartDate()));
        Assert.assertEquals(EMAIL_EFFECTIVEENDDATE, dateToPLRDateString(electronicAddressDto.getEffectiveEndDate()));
        Assert.assertEquals(EMAIL_ENDREASONCODE, electronicAddressDto.getEndReasonCode());
        Assert.assertEquals(EMAIL_DATAOWNERCODE, electronicAddressDto.getDataOwnerCode());
    }

    private static void assertWorkLocationTelephones(WorkLocationDto workLocation) {
        List<TelecommunicationDto> telecommunicationDtos = workLocation.getTelecommunications();
        Assert.assertTrue(telecommunicationDtos.size() == 1);
        TelecommunicationDto telecommunicationDto = telecommunicationDtos.get(0);

        Assert.assertEquals(PHONE_CMNCTNPRPSTYPCD, telecommunicationDto.getCommunicationPurposeCode());
        Assert.assertEquals(PHONE_TLCMNCTNNMBRTYPCD, telecommunicationDto.getTypeCode());
        Assert.assertEquals(PHONE_AREACODENUM, telecommunicationDto.getAreaCode());
        Assert.assertEquals(PHONE_TELECOMMUNICATIONNMBRNUM, telecommunicationDto.getNumber());
        // Extension not mapped in HL7
//        Assert.assertEquals(PHONE_EXTENSIONNUM, telecommunicationDto.getExtension());
        Assert.assertEquals(PHONE_EFFECTIVESTARTDATE, dateToPLRDateString(telecommunicationDto.getEffectiveStartDate()));
        Assert.assertEquals(PHONE_EFFECTIVEENDDATE, dateToPLRDateString(telecommunicationDto.getEffectiveEndDate()));
        Assert.assertEquals(PHONE_ENDREASONCODE, telecommunicationDto.getEndReasonCode());
        Assert.assertEquals(PHONE_DATAOWNERCODE, telecommunicationDto.getDataOwnerCode());
    }

    private static void assertWorkLocationInformationRoutes(WorkLocationDto workLocation) {
        List<InformationRouteDto> informationRouteDtos = workLocation.getInformationRoutes();
        Assert.assertTrue(informationRouteDtos.size() == 1);
        InformationRouteDto informationRouteDto = informationRouteDtos.get(0);

        Assert.assertEquals(INFORMATIONROUTE_DOCUMENTTYPECODE, informationRouteDto.getDocumentTypeCode());
        //Assert.assertEquals(INFORMATIONROUTE_MECHANISMTYPECODE, informationRouteDto.getMechanismTypeCode());
        Assert.assertEquals(INFORMATIONROUTE_DEFAULTFLAG, convertToFlag(informationRouteDto.isDefaultFlag()));

        final String addressTypeCode = INFORMATIONROUTE_ADDRESSTYPECODE;
        final AddressDto addressDto = informationRouteDto.getAddressDto();
        if (addressTypeCode != null) {
            Assert.assertEquals(addressTypeCode, addressDto.getTypeCode());
            Assert.assertEquals(ADDRESS_CMNCTNPRPSTYPCD, addressDto.getCommunicationPurposeCode());
            Assert.assertEquals(ADDRESS_DATAOWNERCODE, addressDto.getDataOwnerCode());
        } else {
            Assert.assertNull(addressDto.getTypeCode());
        }
//
//        final String phoneTypeCode = INFORMATIONROUTE_TLCMNCTNNMBRTYPCD;
//        final TelecommunicationDto phoneDto = informationRouteDto.getTelecommunicationDto();
//        if (phoneTypeCode != null) {
//            Assert.assertEquals(phoneTypeCode, phoneDto.getTypeCode());
//            Assert.assertEquals(INFORMATIONROUTE_CMNCTNPRPSTYPCD, phoneDto.getCommunicationPurposeCode());
//            Assert.assertEquals(INFORMATIONROUTE_CMNCTNDATAOWNERCODE, phoneDto.getDataOwnerCode());
//        } else {
//            Assert.assertNull(phoneDto.getTypeCode());
//        }
//
//        final String electronicAddressTypeCode = INFORMATIONROUTE_ELECTRONICADDRESSTYPECODE;
//        final ElectronicAddressDto electronicAddressDto = informationRouteDto.getElectronicAddressDto();
//        if (electronicAddressTypeCode != null) {
//            Assert.assertEquals(electronicAddressTypeCode, electronicAddressDto.getTypeCode());
//            Assert.assertEquals(INFORMATIONROUTE_CMNCTNPRPSTYPCD, electronicAddressDto.getCommunicationPurposeCode());
//            Assert.assertEquals(INFORMATIONROUTE_CMNCTNDATAOWNERCODE, electronicAddressDto.getDataOwnerCode());
//        } else {
//            Assert.assertNull(electronicAddressDto.getTypeCode());
//        }
//
//        Assert.assertEquals(INFORMATIONROUTE_WORKLOCATIONCHID, String.valueOf(informationRouteDto.getWorkLocationIdentifier()));
//        Assert.assertEquals(INFORMATIONROUTE_WORKLOCATIONDATAOWNERCODE, informationRouteDto.getWorkLocationDataOwnerCode());

        Assert.assertEquals(INFORMATIONROUTE_EFFECTIVESTARTDATE, dateToPLRDateString(informationRouteDto.getEffectiveStartDate()));
        Assert.assertEquals(INFORMATIONROUTE_EFFECTIVEENDDATE, dateToPLRDateString(informationRouteDto.getEffectiveEndDate()));
        Assert.assertEquals(INFORMATIONROUTE_ENDREASONCODE, informationRouteDto.getEndReasonCode());
        Assert.assertEquals(INFORMATIONROUTE_DATAOWNERCODE, informationRouteDto.getDataOwnerCode());
    }

    private static void assertProviderRelationships(ProviderDetails providerOutput) {
        List<ProviderRelationshipDto> providerRelationshipDtos = providerOutput.getProviderRelationships();
        Assert.assertTrue(providerRelationshipDtos.size() == 1);
        ProviderRelationshipDto providerRelationshipDto = providerRelationshipDtos.get(0);

        Assert.assertEquals(PROVIDERRELATIONSHIP_RELATIONSHIPWITHPROVIDERTYPE, providerRelationshipDto.getTargetRelationshipTypeCode());
        Assert.assertEquals(PROVIDERRELATIONSHIP_RELATIONSHIPWITHPROVIDERCOLLEGEID, String.valueOf(providerRelationshipDto.getRelationshipTypeId()));
        Assert.assertEquals(PROVIDERRELATIONSHIP_RELATIONSHIPTYPECODE, providerRelationshipDto.getRelationshipTypeCode());
        
        // Only mapped by HL7
        Assert.assertEquals(PROVIDERRELATIONSHIP_RELATIONSHIPWITHPROVIDERNAME, String.valueOf(providerRelationshipDto.getTargetRelationshipTypeId()));
        
        Assert.assertEquals(PROVIDERRELATIONSHIP_EFFECTIVESTARTDATE, dateToPLRDateString(providerRelationshipDto.getEffectiveStartDate()));
        Assert.assertEquals(PROVIDERRELATIONSHIP_EFFECTIVEENDDATE, dateToPLRDateString(providerRelationshipDto.getEffectiveEndDate()));
        Assert.assertEquals(PROVIDERRELATIONSHIP_ENDREASONCODE, providerRelationshipDto.getEndReasonCode());
        Assert.assertEquals(PROVIDERRELATIONSHIP_DATAOWNERCODE, providerRelationshipDto.getDataOwnerCode());
    }

}
