/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir;

import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.uhn.fhir.parser.DataFormatException;
import ca.uhn.fhir.validation.FhirValidator;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import org.junit.Test;

/**
 *
 * @author dan.stepanov
 */
public class IndidualProviderToPractitionerRoleFhirTest {

    @Test
    public void testProviderDetailsDataBuilderToPractRoleSpecialty() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerRoleFhir indivProviderToPractRoleFhir = new MapProviderToPractitionerRoleFhir();

        String  testJsonParsedSpecialtyFhir = null;
        testJsonParsedSpecialtyFhir = indivProviderToPractRoleFhir.mapIndProviderExpertiseToPractSpecialty(providerDetailsTest);

        String specialtyParsedExpectedResult = "{\"resourceType\":\"PractitionerRole\",\"specialty\":[{\"coding\":[{\"system\":\"http://snomed.info/sct\",\"code\":\"NUTRX\",\"display\":\"Test Type Speciality Nutrition Pharma\"}]},{\"coding\":[{\"system\":\"http://snomed.info/sct\",\"code\":\"A160\",\"display\":\"Test Type Speciality Family Medicine\"}]}]}";
        assertNotNull(testJsonParsedSpecialtyFhir);
        assertEquals(specialtyParsedExpectedResult, testJsonParsedSpecialtyFhir);
        

        // json format pract role specialty in FHIR result is:
//        {
//                "resourceType": "PractitionerRole",
//                "specialty": [
//                        {
//                                "coding": [
//                                        {
//                                                "code": "NUTRX",
//                                                "display": "Test Type Speciality Nutrition Pharma"
//                                        }
//                                ]
//                        },
//                        {
//                                "coding": [
//                                        {
//                                                "code": "A160",
//                                                "display": "Test Type Speciality Family Medicine"
//                                        }
//                                ]
//                        }
//                ]
//        }
    }

    @Test
    public void testProviderDetailsDataBuilderToPractSpecialtyValid() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerRoleFhir indivProviderToPractRoleFhir = new MapProviderToPractitionerRoleFhir();
        boolean testJsonParsedTwoSpecialtyFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoSpecialty = indivProviderToPractRoleFhir.mapIndProviderExpertiseToPractSpecialty(providerDetailsTest);
        testJsonParsedTwoSpecialtyFhirValid = indivProviderToPractRoleFhir.validatePractitionerRoleFhir(fhirValidator, parsedEncodedPractTwoSpecialty);

        assertNotNull(testJsonParsedTwoSpecialtyFhirValid);
        assertTrue(testJsonParsedTwoSpecialtyFhirValid);
    }

    @Test
    public void testProviderDetailsDataBuilderToPractSpecialtyInvalid() throws Exception, DataFormatException {

        MapProviderToPractitionerRoleFhir indivProviderToPractRoleFhir = new MapProviderToPractitionerRoleFhir();
        boolean testJsonParsedTwoSpecialtyFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoSpecialtyInvalid = "{\"resourceType\":\"PractitionerRole_spec\",\"specialty aa\":[{\"coding\":[{\"code\":\"NUTRX\",\"display\":\"Test Type Speciality Nutrition Pharma\"}]},{\"coding\":[{\"code\":\"A160\",\"display\":\"Test Type Speciality Family Medicine\"}]}]}";
        testJsonParsedTwoSpecialtyFhirValid = indivProviderToPractRoleFhir.validatePractitionerRoleFhir(fhirValidator, parsedEncodedPractTwoSpecialtyInvalid);

        assertNotNull(testJsonParsedTwoSpecialtyFhirValid);
        assertFalse(testJsonParsedTwoSpecialtyFhirValid);
    }

    @Test
    public void testProviderDetailsDataBuilderToPractRoleCode() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerRoleFhir indivProviderToPractRoleFhir = new MapProviderToPractitionerRoleFhir();

        String testJsonParsedPractRoleFhir = null;
        testJsonParsedPractRoleFhir = indivProviderToPractRoleFhir.mapIndProviderRoleTypeToPractRoleCode(providerDetailsTest);

        String practRoleCodeParsedExpectedResult = "{\"resourceType\":\"PractitionerRole\",\"code\":[{\"coding\":[{\"system\":\"http://tgateway.infoway-inforoute.ca/sample_pract_role/CodeSystem\",\"code\":\"DEN\",\"display\":\"Dentist\"}]}]}";
        assertNotNull(testJsonParsedPractRoleFhir);
        assertEquals(practRoleCodeParsedExpectedResult, testJsonParsedPractRoleFhir);

        // json format pract role code in FHIR result is:
//        {
//                "resourceType": "PractitionerRole",
//                "code": [
//                        {
//                                "coding": [
//                                        {
//                                                "system": "http://tgateway.infoway-inforoute.ca/sample_pract_role/CodeSystem",
//                                                "code": "DEN",
//                                                "display": "Dentist"
//                                        }
//                                ]
//                        }
//                ]
//        }
    }

    @Test
    public void testProviderDetailsDataBuilderToPractRoleCodeValid() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerRoleFhir indivProviderToPractRoleFhir = new MapProviderToPractitionerRoleFhir();
        boolean testJsonParsedRoleCodeFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractRoleCode = indivProviderToPractRoleFhir.mapIndProviderRoleTypeToPractRoleCode(providerDetailsTest);
        testJsonParsedRoleCodeFhirValid = indivProviderToPractRoleFhir.validatePractitionerRoleFhir(fhirValidator, parsedEncodedPractRoleCode);

        assertNotNull(testJsonParsedRoleCodeFhirValid);
        assertTrue(testJsonParsedRoleCodeFhirValid);
    }

    @Test
    public void testProviderDetailsDataBuilderToPractRoleCodeInvalid() throws Exception, DataFormatException {

        MapProviderToPractitionerRoleFhir indivProviderToPractRoleFhir = new MapProviderToPractitionerRoleFhir();
        boolean testJsonParsedPractRoleCodeFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractRoleCodeInvalid = "{\"resourceType\":\"PractitionerRole Cd\",\"code cc\":[{\"coding\":[{\"system\":\"http://tgateway.infoway-inforoute.ca/sample_pract_role/CodeSystem\",\"code\":\"DEN\",\"display\":\"Dentist\"}]}]}";
        testJsonParsedPractRoleCodeFhirValid = indivProviderToPractRoleFhir.validatePractitionerRoleFhir(fhirValidator, parsedEncodedPractRoleCodeInvalid);

        assertNotNull(testJsonParsedPractRoleCodeFhirValid);
        assertFalse(testJsonParsedPractRoleCodeFhirValid);
    }

}
