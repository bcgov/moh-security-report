/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir;

import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ConditionsDto;
import ca.bc.gov.health.plr.dto.provider.esb.ConfidentialityIndicatorDto;
import ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DisciplinaryActionDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.NoteDto;
import ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderDataBuilderFhirTest.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import static org.junit.Assert.assertEquals;
import org.junit.Test;

/**
 *
 * @author dan.stepanov
 */
public class IndividualProviderToBCPractitionerFhirTest {

    @Test
    public void testSomething() {
        FHIRFactory factory = new FHIRFactory("R4BC1");
        Object topBundle = factory.newBundle();
        Object bundleEntry = factory.newBundleEntryComponent();
        Object operationOutcomeResource = factory.newOperationOutcome();
        
    }
    
    @Test
    public void addProviderNotesToBCPractitionerTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<NoteDto> providerNotes = new ArrayList<>();
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        NoteDto note1 = new NoteDto();
        note1.setDataOwnerCode("Owner");
        note1.setEndReasonCode("ERC");

        note1.setEffectiveStartDate(start);
        note1.setEffectiveEndDate(end);
        note1.setIdentifier("theNoteID");
        note1.setNoteText("theNoteText");
        providerNotes.add(note1);

        Object practitioner = factory.newBCPractitioner();
        MapIndivProviderToBCPractitionerFhir.addProviderNotesToBCPractitioner(factory, providerNotes, practitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcNoteExtension().size(), 1);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcNoteExtension().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "Owner");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcNoteExtension().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), "ERC");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcNoteExtension().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcNoteExtension().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcNoteExtension().get(0)).getNoteIdentifier().getValue(), "theNoteID");
//        assertEquals(((org.hl7.fhir.r4.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcNoteExtension().get(0)).getNoteIdentifier().getUse(), org.hl7.fhir.r4.model.Identifier.IdentifierUse.USUAL);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcNoteExtension().get(0)).getNoteText().getValue(), "theNoteText");

        Date start2 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end2 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        NoteDto note2 = new NoteDto();
        note2.setDataOwnerCode("Owner2");
        note2.setEndReasonCode("ERC2");
        note2.setEffectiveStartDate(start2);
        note2.setEffectiveEndDate(end2);
        note2.setIdentifier("theNoteID2");
        note2.setNoteText("theNoteText2");
        providerNotes.add(note2);

        MapIndivProviderToBCPractitionerFhir.addProviderNotesToBCPractitioner(factory, providerNotes, practitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcNoteExtension().size(), 3);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcNoteExtension().get(2)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "Owner2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcNoteExtension().get(2)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), "ERC2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcNoteExtension().get(2)).getPeriod().getStart(), start2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcNoteExtension().get(2)).getPeriod().getEnd(), end2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcNoteExtension().get(2)).getNoteIdentifier().getValue(), "theNoteID2");
//        assertEquals(((org.hl7.fhir.r4.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcNoteExtension().get(2)).getNoteIdentifier().getUse(), org.hl7.fhir.r4.model.Identifier.IdentifierUse.USUAL);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcNoteExtension().get(2)).getNoteText().getValue(), "theNoteText2");
    }

    @Test
    public void addProviderAddressMailToBCPractitionerAddress() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<AddressDto> providerAddress = new ArrayList<>();
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        AddressDto addressTypeMail = new AddressDto();
        addressTypeMail.setDataOwnerCode("OwnerRNA");
        addressTypeMail.setEndReasonCode("ERC");

        addressTypeMail.setEffectiveStartDate(start);
        addressTypeMail.setEffectiveEndDate(end);
        addressTypeMail.setActive(true);
        addressTypeMail.setCreatedDate(new Date());

        addressTypeMail.setGenerationNum(1L);
        addressTypeMail.setInvalidatedDate(null);
        addressTypeMail.setType("Test Address mail Type");
        addressTypeMail.setTypeCode("M");
        addressTypeMail.setTypeId(2838l);  ///address type code Mailing
        addressTypeMail.setUserChid("Test User Chid JUNIT");

        addressTypeMail.setAddressLineOne("Address Line One Mail");
        addressTypeMail.setAddressLineTwo("Address Line Two Mail");
        addressTypeMail.setAddressLineThree("Address Line Three Mail");
        addressTypeMail.setCity("Victoria");
        addressTypeMail.setPostalCode("V9V 9V9");
        addressTypeMail.setFullAddress("Full Address Test Mail Sample 1");
        addressTypeMail.setCommunicationPurpose("Communication Purpose");
        addressTypeMail.setCommunicationPurposeCode("BC");
        addressTypeMail.setCommunicationPurposeId(2802l);
        addressTypeMail.setCountry("Canada");
        addressTypeMail.setCountryCode("CA");
        addressTypeMail.setCountryId(1239l);
        addressTypeMail.setProvinceOrStateTxt("British Columbia (BC)");

        providerAddress.add(addressTypeMail);

        Object bcPractitioner = factory.newBCPractitioner();

        MapIndivProviderToBCPractitionerFhir.addProviderAddressToBCPractitioner(factory, providerAddress, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getAddress().size(), 1);

    }

    @Test
    public void addProviderAddressPhysicalToBCPractitionerAddress() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<AddressDto> providerAddress = new ArrayList<>();

        Date start2 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end2 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        AddressDto addressTypePhysical = new AddressDto();
        addressTypePhysical.setDataOwnerCode("OwnerDEN");
        addressTypePhysical.setEndReasonCode("ERC2");

        addressTypePhysical.setEffectiveStartDate(start2);
        addressTypePhysical.setEffectiveEndDate(end2);
        addressTypePhysical.setActive(true);
        addressTypePhysical.setCreatedDate(new Date());

        addressTypePhysical.setGenerationNum(1L);
        addressTypePhysical.setInvalidatedDate(null);
        addressTypePhysical.setType("Test Address physical Type");
        addressTypePhysical.setTypeCode("P");
        addressTypePhysical.setTypeId(2939l);  ///address type code physical
        addressTypePhysical.setUserChid("Test User Chid JUNIT");

        addressTypePhysical.setAddressLineOne("Address Line One Physical");
        addressTypePhysical.setAddressLineTwo("Address Line Two Physical");
        addressTypePhysical.setAddressLineThree("Address Line Three Physical");
        addressTypePhysical.setCity("Duncan");
        addressTypePhysical.setPostalCode("V5V 5V5");
        addressTypePhysical.setFullAddress("Full Address Test physical Sample 1");
        addressTypePhysical.setCommunicationPurpose("Communication Purpose");
        addressTypePhysical.setCommunicationPurposeCode("MC");
        addressTypePhysical.setCommunicationPurposeId(2902l);
        addressTypePhysical.setCountry("Canada");
        addressTypePhysical.setCountryCode("CA");
        addressTypePhysical.setCountryId(1239l);
        addressTypePhysical.setProvinceOrStateTxt("British Columbia (BC)");

        providerAddress.add(addressTypePhysical);

        Object bcPractitioner = factory.newBCPractitioner();

        MapIndivProviderToBCPractitionerFhir.addProviderAddressToBCPractitioner(factory, providerAddress, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getAddress().size(), 1);

    }

    @Test
    public void addProviderDemographicsToBCPractitionerGenderExtensions() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<DemographicDetailsDto> demographicDetails = new ArrayList<>();

        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        DemographicDetailsDto demoDetailsDto = new DemographicDetailsDto();
        demoDetailsDto.setActive(true);
        demoDetailsDto.setCreatedDate(new Date());;
        demoDetailsDto.setDataOwnerCode("OwnerMOH");
        demoDetailsDto.setEndReasonCode("ERC");
        demoDetailsDto.setEffectiveEndDate(end);
        demoDetailsDto.setEffectiveStartDate(start);
        demoDetailsDto.setGenerationNum(1L);
        demoDetailsDto.setInvalidatedDate(null);
        demoDetailsDto.setType("Test Type Gender Male");
        demoDetailsDto.setTypeCode("M");
        demoDetailsDto.setUserChid("Test User Chiid");

        demoDetailsDto.setBirthCountry("Canada");
        demoDetailsDto.setBirthCountryCode("CA");
        demoDetailsDto.setBirthDate(getEffectiveStartDate(1980, 0, 10));
        demoDetailsDto.setBirthProvState("BC");
        demoDetailsDto.setDeathDate(getEffectiveEndDate(2021, 5, 20));
        demoDetailsDto.setGender("Male");
        demoDetailsDto.setGenderCode("M");
        demoDetailsDto.setGenderId(2332l);

        demographicDetails.add(demoDetailsDto);

        Object bcPractitioner = factory.newBCPractitioner();

        MapIndivProviderToBCPractitionerFhir.addProviderDemographicDetailsToBCPractitioner(factory, demographicDetails, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBirthDateElement().getExtension().size(), 1);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), demoDetailsDto.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), demoDetailsDto.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcBirthplaceExtension().isEmpty(), false);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcBirthplaceExtension().getCountry(), demoDetailsDto.getBirthCountry());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcBirthplaceExtension().getState(), demoDetailsDto.getBirthProvState());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getPeriod().isEmpty(), false);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getPeriod().getStart(), demoDetailsDto.getEffectiveStartDate());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getGender().getDisplay(), demoDetailsDto.getGender());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcDeathDateExtension().isEmpty(), false);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcDeathDateExtension().getValue(), demoDetailsDto.getDeathDate());
    }

    @Test
    public void testBirthdateTemp() {

        FHIRFactory factory = new FHIRFactory("R4BC1");

        Object prac = factory.newBCPractitioner();
        Date d = getEffectiveStartDate(1980, 3, 10);
        Object dt = factory.newDateType();
        factory.callMethod(prac, "setBirthDateElement", dt);
        Object ex = factory.newExtension();
        factory.callMethod(ex, "setUrl", "URL");
        factory.callMethod(ex, "setValue", factory.newDateTimeType(d));
        factory.callMethod(dt, "addExtension", ex);
        String p = factory.parseEncodedBcPractitioner(prac);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) prac).getBirthDateElement().getExtension().size(), 1);
//        System.out.println(" json = " + p);
    }

    @Test
    public void addProviderNameToBCPractitionerHumanNameOfficial() {

        // We will only be using usual (CURRENT) and official (CREDENTIALED)
        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<PersonNameDto> providerNames = new ArrayList<>();

        Date start2 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end2 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        PersonNameDto nameDto = new PersonNameDto();
        nameDto.setActive(true);
        nameDto.setCreatedDate(new Date());
        nameDto.setDataOwnerCode("MOH");
        nameDto.setEndReasonCode("ERC2");
        nameDto.setEffectiveEndDate(end2);
        nameDto.setEffectiveStartDate(start2);
        nameDto.setGenerationNum(1L);
        nameDto.setInvalidatedDate(null);
        nameDto.setType("Test Type Official");
        nameDto.setTypeCode("CRED");
        nameDto.setTypeId(1147l);//official name
        nameDto.setUserChid("Test User Official Chid JUNIT");

        nameDto.setFirstName("First Name Official");
        nameDto.setLastName("Last Name Official");
        nameDto.setPreferred(true);
        nameDto.setSecondName("Second Name Official");
        nameDto.setThirdName("Third Name Official");
        nameDto.setSuffix("Suffix Official");
        nameDto.setPrefix("Prefix Official");
        nameDto.setFullName("Person Full Name Official Test One");

        providerNames.add(nameDto);

        Object bcPractitioner = factory.newBCPractitioner();

        MapIndivProviderToBCPractitionerFhir.addProviderNameToBCPractitioner(factory, providerNames, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getName().size(), 1);
    }

    @Test
    public void addProviderNameToBCPractitionerHumanNameUsual() {

        // We will only be using usual (CURRENT) and official (CREDENTIALED)
        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<PersonNameDto> providerNames = new ArrayList<>();

        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        PersonNameDto nameDto = new PersonNameDto();
        nameDto.setActive(true);
        nameDto.setCreatedDate(new Date());
        nameDto.setDataOwnerCode("MOH_A");
        nameDto.setEndReasonCode("ERC");
        nameDto.setEffectiveEndDate(end);
        nameDto.setEffectiveStartDate(start);
        nameDto.setGenerationNum(1L);
        nameDto.setInvalidatedDate(null);
        nameDto.setType("Test Type Usual");
        nameDto.setTypeCode("CURR");
        nameDto.setTypeId(997l);
        nameDto.setUserChid("Test User Chid JUNIT");

        nameDto.setFirstName("First Name Usual");
        nameDto.setLastName("Last Name Usual");
        nameDto.setPreferred(true);
        nameDto.setSecondName("Second Name Usual");
        nameDto.setThirdName("Third Name Usual");
        nameDto.setSuffix("Suffix Usual");
        nameDto.setPrefix("Prefix Usual");
        nameDto.setFullName("Person Full Name Official Test Two");

        providerNames.add(nameDto);

        Object bcPractitioner = factory.newBCPractitioner();

        MapIndivProviderToBCPractitionerFhir.addProviderNameToBCPractitioner(factory, providerNames, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getName().size(), 1);
    }

    @Test
    public void addProviderPhoneToBCPractitionerTelecom() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<TelecommunicationDto> providerTelecoms = new ArrayList<>();

        Date start2 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end2 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        TelecommunicationDto telecomDto = new TelecommunicationDto();
        telecomDto.setActive(true);
        telecomDto.setCreatedDate(new Date());
        telecomDto.setDataOwnerCode("MOH");
        telecomDto.setEndReasonCode("ERC2");
        telecomDto.setEffectiveEndDate(end2);
        telecomDto.setEffectiveStartDate(start2);
        telecomDto.setGenerationNum(1L);
        telecomDto.setInvalidatedDate(null);
        telecomDto.setType("Test Type");
        telecomDto.setTypeCode("T");
        telecomDto.setTypeId(1161l);
        telecomDto.setUserChid("Test User Chiid JUNIT");

        telecomDto.setAreaCode("250 ");
        telecomDto.setCommunicationPurpose("Communication Purpose");
        telecomDto.setCommunicationPurposeCode("HC");
        telecomDto.setCommunicationPurposeId(2802l);
        telecomDto.setExtension("ext. 5555");
        telecomDto.setNumber("345-1111");

        providerTelecoms.add(telecomDto);

        Object bcPractitioner = factory.newBCPractitioner();

        MapIndivProviderToBCPractitionerFhir.addProviderTelecomToBCPractitioner(factory, providerTelecoms, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getTelecom().size(), 1);
    }

    @Test
    public void addProviderFaxToBCPractitionerTelecom() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<TelecommunicationDto> providerTelecoms = new ArrayList<>();

        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        TelecommunicationDto telecomDto = new TelecommunicationDto();
        telecomDto.setActive(true);
        telecomDto.setCreatedDate(new Date());
        telecomDto.setDataOwnerCode("MOH_F");
        telecomDto.setEndReasonCode("ERC_F");
        telecomDto.setEffectiveEndDate(end);
        telecomDto.setEffectiveStartDate(start);
        telecomDto.setGenerationNum(1L);
        telecomDto.setInvalidatedDate(null);
        telecomDto.setType("Test Type");
        telecomDto.setTypeCode("FAX");
        telecomDto.setTypeId(1161l);
        telecomDto.setUserChid("Test User Chiid JUNIT");

        telecomDto.setAreaCode("254 ");
        telecomDto.setCommunicationPurpose("Communication Purpose");
        telecomDto.setCommunicationPurposeCode("BC");
        telecomDto.setCommunicationPurposeId(4241l);
        telecomDto.setExtension("ext. 2222");
        telecomDto.setNumber("567-7777");

        providerTelecoms.add(telecomDto);

        Object bcPractitioner = factory.newBCPractitioner();

        MapIndivProviderToBCPractitionerFhir.addProviderTelecomToBCPractitioner(factory, providerTelecoms, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getTelecom().size(), 1);
    }

    @Test
    public void addProviderEmailToBCPractitionerTelecom() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<ElectronicAddressDto> providerElectAddresses = new ArrayList<>();

        Date start2 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end2 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        ElectronicAddressDto electronicAddressDto = new ElectronicAddressDto();

        electronicAddressDto.setActive(true);
        electronicAddressDto.setCreatedDate(new Date());
        electronicAddressDto.setEffectiveEndDate(end2);
        electronicAddressDto.setEffectiveStartDate(start2);
        electronicAddressDto.setDataOwnerCode("MOH_E");
        electronicAddressDto.setEndReasonCode("ERC_E");
        electronicAddressDto.setGenerationNum(999L);
        electronicAddressDto.setInvalidatedDate(null);
        electronicAddressDto.setCommunicationPurpose("Communication Purpose");
        electronicAddressDto.setCommunicationPurposeCode("HC");
        electronicAddressDto.setCommunicationPurposeId(2802l);

        electronicAddressDto.setType("Test electronicAddress Type");
        electronicAddressDto.setTypeCode("E");
        electronicAddressDto.setTypeId(2048l);

        electronicAddressDto.setAddress("unit_test1@cgi.com");

        providerElectAddresses.add(electronicAddressDto);

        Object bcPractitioner = factory.newBCPractitioner();

        MapIndivProviderToBCPractitionerFhir.addProviderElectronicAddressToBCPractitioner(factory, providerElectAddresses, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getTelecom().size(), 1);
    }

    @Test
    public void addProviderDisciplinaryActionsToBCPractitionerTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<DisciplinaryActionDto> providerDisciplinaryActions = new ArrayList<>();
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        DisciplinaryActionDto disciplinaryAction1 = new DisciplinaryActionDto();
        disciplinaryAction1.setDataOwnerCode("Owner");
        disciplinaryAction1.setEndReasonCode("ERC");

        disciplinaryAction1.setEffectiveStartDate(start);
        disciplinaryAction1.setEffectiveEndDate(end);
        disciplinaryAction1.setIdentifier("theDisciplinaryActionID1");
        disciplinaryAction1.setDescription("theDisciplinaryAction1_desc");
        disciplinaryAction1.setArchiveDate(getEffectiveEndDate(2022, 1, 10));
        disciplinaryAction1.setDisplayFlag(true);

        providerDisciplinaryActions.add(disciplinaryAction1);

        Object practitioner = factory.newBCPractitioner();
        MapIndivProviderToBCPractitionerFhir.addProviderDisciplinaryActionToBCPractitioner(factory, providerDisciplinaryActions, practitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().size(), 1);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCDisciplinaryActionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "Owner");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCDisciplinaryActionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), "ERC");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCDisciplinaryActionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCDisciplinaryActionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCDisciplinaryActionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().get(0)).getDisciplinaryIdentifier().getValue(), "theDisciplinaryActionID1");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCDisciplinaryActionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().get(0)).getDisciplinaryDescription().getValue(), "theDisciplinaryAction1_desc");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCDisciplinaryActionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().get(0)).getArchiveDate().getValue(), disciplinaryAction1.getArchiveDate());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCDisciplinaryActionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().get(0)).getDisplayFlag().getValue(), disciplinaryAction1.isDisplayFlag());

        Date start2 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end2 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        DisciplinaryActionDto disciplinaryAction2 = new DisciplinaryActionDto();
        disciplinaryAction2.setDataOwnerCode("Owner2");
        disciplinaryAction2.setEndReasonCode("ERC2");
        disciplinaryAction2.setEffectiveStartDate(start2);
        disciplinaryAction2.setEffectiveEndDate(end2);
        disciplinaryAction2.setIdentifier("theDisciplinaryActionID2");
        disciplinaryAction2.setDescription("theDisciplinaryAction2_desc");
        disciplinaryAction2.setArchiveDate(getEffectiveEndDate(2022, 1, 15));
        disciplinaryAction2.setDisplayFlag(false);

        providerDisciplinaryActions.add(disciplinaryAction2);

        MapIndivProviderToBCPractitionerFhir.addProviderDisciplinaryActionToBCPractitioner(factory, providerDisciplinaryActions, practitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().size(), 3);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCDisciplinaryActionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().get(2)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "Owner2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCDisciplinaryActionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().get(2)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), "ERC2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCDisciplinaryActionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().get(2)).getPeriod().getStart(), start2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCDisciplinaryActionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().get(2)).getPeriod().getEnd(), end2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCDisciplinaryActionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().get(2)).getDisciplinaryIdentifier().getValue(), "theDisciplinaryActionID2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCDisciplinaryActionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().get(2)).getDisciplinaryDescription().getValue(), "theDisciplinaryAction2_desc");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCDisciplinaryActionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().get(2)).getArchiveDate().getValue(), disciplinaryAction2.getArchiveDate());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCDisciplinaryActionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) practitioner).getBcDisciplinaryActionExtension().get(2)).getDisplayFlag().getValue(), disciplinaryAction2.isDisplayFlag());
    }

    @Test
    public void addProviderCredentialToBCPractitionerQualifTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<CredentialsDto> providerCredentials = new ArrayList<>();

        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        CredentialsDto credentialDto1 = new CredentialsDto();
        credentialDto1.setDataOwnerCode("Owner");
        credentialDto1.setEndReasonCode("ERC");

        credentialDto1.setEffectiveStartDate(start);
        credentialDto1.setEffectiveEndDate(end);
        credentialDto1.setEquivalencyFlag(true);
        credentialDto1.setYearIssued("2020");

        credentialDto1.setType("Test Type BD");
        credentialDto1.setTypeCode("BD");
        credentialDto1.setTypeId(1430l);
        credentialDto1.setUserChid("Test User Chiid");

        credentialDto1.setDesignation("BSc. in credentialDto Test");
        credentialDto1.setRegistrationNumber("Reg Number 555 for BD");
        credentialDto1.setGrantingInstitution("UVIC");
        credentialDto1.setInstitutionCity("Victoria");
        credentialDto1.setInstitutionCountry("Canada");
        credentialDto1.setInstitutionCountryCode("CA");
        credentialDto1.setInstitutionProvState("British Columbia");
        credentialDto1.setInstitutionProvStateCode("BC");

        providerCredentials.add(credentialDto1);

        Object bcPractitioner = factory.newBCPractitioner();
        MapIndivProviderToBCPractitionerFhir.addProviderCredentialToBCPractitionerQualif(factory, providerCredentials, bcPractitioner);

        // contained resource tests 
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getContained().size(), 1);        
        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getContained().get(0)).getResourceType().name(), "Organization");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getContained().get(0)).getId(), "#grantingInstitution-1");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getContained().get(0)).getName(), credentialDto1.getGrantingInstitution());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getContained().get(0)).getAddress().get(0).getCity(), credentialDto1.getInstitutionCity());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getContained().get(0)).getAddress().get(0).getState(), credentialDto1.getInstitutionProvStateCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getContained().get(0)).getAddress().get(0).getCountry(), credentialDto1.getInstitutionCountryCode());

        // qualification tests
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getQualification().size(), 1); 
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerQualificationComponent) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getQualification().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerQualificationComponent) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getQualification().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerQualificationComponent) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getQualification().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "Owner");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerQualificationComponent) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getQualification().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), "ERC");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerQualificationComponent) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getQualification().get(0)).getBcQualificationExtension().getDesignation().getValue(), credentialDto1.getDesignation());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerQualificationComponent) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getQualification().get(0)).getBcQualificationExtension().getRegistrationNumber().getValue(), credentialDto1.getRegistrationNumber());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerQualificationComponent) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getQualification().get(0)).getBcQualificationExtension().getQualificationEquivalencyFlag().booleanValue(), credentialDto1.isEquivalencyFlag());
//        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerQualificationComponent) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getQualification().get(0)).getBcQualificationExtension().getIssuedDate().getValueAsString(), credentialDto1.getYearIssued());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerQualificationComponent) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getQualification().get(0)).getCode().getCoding().get(0).getCode(), credentialDto1.getTypeCode());
    }
    
    @Test
    public void addProviderActiveToBCPractitionerStatus() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<StatusDto> providerStatus = new ArrayList<>();
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        
        StatusDto activeStatusDto = new StatusDto();
        activeStatusDto.setDataOwnerCode("OwnerRNA");
        activeStatusDto.setEndReasonCode("ERC");

        activeStatusDto.setEffectiveStartDate(start);
        activeStatusDto.setEffectiveEndDate(end);
        activeStatusDto.setActive(true);
        activeStatusDto.setCreatedDate(new Date());

        activeStatusDto.setGenerationNum(1L);
        activeStatusDto.setInvalidatedDate(null);
        activeStatusDto.setType("Test active status");


        providerStatus.add(activeStatusDto);
        ProviderDetails indivProviderDetails = new ProviderDetails();
        indivProviderDetails.setStatuses(providerStatus);

        Object bcPractitioner = factory.newBCPractitioner();

        MapIndivProviderToBCPractitionerFhir.addProviderActiveStatusToBCPractitioner(factory, indivProviderDetails, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getActiveElement().getValue(), activeStatusDto.isActive());
    }
    
    @Test
    public void addProviderIdentifierToBCPractitionerIdentifTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<CollegeIdentifierDto> providerIds = new ArrayList<>();
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        CollegeIdentifierDto indivProviderIdentifier = new CollegeIdentifierDto();
        indivProviderIdentifier.setDataOwnerCode("OwnerRNA");
        indivProviderIdentifier.setEndReasonCode("ERC");

        indivProviderIdentifier.setEffectiveStartDate(start);
        indivProviderIdentifier.setEffectiveEndDate(end);
        indivProviderIdentifier.setActive(true);
        indivProviderIdentifier.setCreatedDate(new Date());

        indivProviderIdentifier.setGenerationNum(1L);
        indivProviderIdentifier.setInvalidatedDate(null);
        indivProviderIdentifier.setType("Test IPC Type");
        indivProviderIdentifier.setTypeCode("IPC");
        indivProviderIdentifier.setIdentifier("IPC.00000005.BC.PRS");
        indivProviderIdentifier.setUserChid("Test User Chid IPC");

        providerIds.add(indivProviderIdentifier);

        Object bcPractitioner = factory.newBCPractitioner();

        MapIndivProviderToBCPractitionerFhir.addProviderIdentifiersToBCPractitioner(factory, providerIds, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getIdentifier().size(), 1);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getIdentifier().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "OwnerRNA");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getIdentifier().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), "ERC");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getIdentifier().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getIdentifier().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getIdentifier().get(0)).getValue(), indivProviderIdentifier.getIdentifier());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getIdentifier().get(0)).getType().getCoding().get(0).getCode(), indivProviderIdentifier.getTypeCode());
        
        Date start2 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end2 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        CollegeIdentifierDto indivProviderIdentifier2 = new CollegeIdentifierDto();
        indivProviderIdentifier2.setDataOwnerCode("Owner2");
        indivProviderIdentifier2.setEndReasonCode("ERC2");
        indivProviderIdentifier2.setEffectiveStartDate(start2);
        indivProviderIdentifier2.setEffectiveEndDate(end2);
        indivProviderIdentifier2.setActive(true);
        indivProviderIdentifier2.setCreatedDate(new Date());

        indivProviderIdentifier2.setGenerationNum(1L);
        indivProviderIdentifier2.setInvalidatedDate(null);
        indivProviderIdentifier2.setType("Test CPN Type");
        indivProviderIdentifier2.setTypeCode("CPN");
        indivProviderIdentifier2.setIdentifier("CPN.00000008.BC.PRS");
        indivProviderIdentifier2.setUserChid("Test User Chid CPN");

        providerIds.add(indivProviderIdentifier2);

        MapIndivProviderToBCPractitionerFhir.addProviderIdentifiersToBCPractitioner(factory, providerIds, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getIdentifier().size(), 3);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getIdentifier().get(2)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "Owner2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getIdentifier().get(2)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), "ERC2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getIdentifier().get(2)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getIdentifier().get(2)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getIdentifier().get(2)).getValue(), indivProviderIdentifier2.getIdentifier());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getIdentifier().get(2)).getType().getCoding().get(0).getCode(), indivProviderIdentifier2.getTypeCode());
    }
    
    @Test
    public void addProviderLicenseStatusToBCPractitionerTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<StatusDto> licenceStatuses = new ArrayList<>();
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        
        StatusDto licenseStatusDto = new StatusDto();
        licenseStatusDto.setDataOwnerCode("OwnerRNA");
        licenseStatusDto.setEndReasonCode("ERC");

        licenseStatusDto.setEffectiveStartDate(start);
        licenseStatusDto.setEffectiveEndDate(end);
        licenseStatusDto.setCreatedDate(new Date());

        licenseStatusDto.setGenerationNum(1L);
        licenseStatusDto.setInvalidatedDate(null);
        licenseStatusDto.setType("Test license status");
        licenseStatusDto.setTypeCode("SUSPENDED");
        licenseStatusDto.setReasonCode("SUSPENDED_REASON_A");
        licenseStatusDto.setReason("Test license status reason");
        licenseStatusDto.setClassTxt("Test license status class");
        licenseStatusDto.setClassCode("LIC_SUSPENDED");

        licenceStatuses.add(licenseStatusDto);

        Object bcPractitioner = factory.newBCPractitioner();

        MapIndivProviderToBCPractitionerFhir.addProviderLicenseStatusToBCPractitioner(factory, licenceStatuses, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcLicenseStatusExtension().size(), 1);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLicenseStatusExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcLicenseStatusExtension().get(0)).getStatusCode().getCoding().get(0).getCode(), licenseStatusDto.getTypeCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLicenseStatusExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcLicenseStatusExtension().get(0)).getStatusReasonCode().getCoding().get(0).getCode(), licenseStatusDto.getReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLicenseStatusExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcLicenseStatusExtension().get(0)).getStatusClassCode().getCoding().get(0).getCode(), licenseStatusDto.getClassCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLicenseStatusExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcLicenseStatusExtension().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "OwnerRNA");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLicenseStatusExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcLicenseStatusExtension().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), "ERC");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLicenseStatusExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcLicenseStatusExtension().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLicenseStatusExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcLicenseStatusExtension().get(0)).getPeriod().getEnd(), end);
    }
    
    @Test
    public void addProviderExpertiseLangToBCPractitionerCommTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<ExpertiseDto> providerExpertiseLangs = new ArrayList<>();

        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        ExpertiseDto expertiseLangItalianDto = new ExpertiseDto();
        expertiseLangItalianDto.setDataOwnerCode("Owner_MOH");
        expertiseLangItalianDto.setEndReasonCode("ERC_MOH");

        expertiseLangItalianDto.setEffectiveStartDate(start);
        expertiseLangItalianDto.setEffectiveEndDate(end);

        expertiseLangItalianDto.setType("Italian");
        expertiseLangItalianDto.setTypeCode("I21");  
        expertiseLangItalianDto.setUserChid("Test expertise lang Chiid");

        expertiseLangItalianDto.setRoleType("Role Type");
        expertiseLangItalianDto.setRoleTypeCode("LANG");
        expertiseLangItalianDto.setSourcesCode("Language Source Code");

        providerExpertiseLangs.add(expertiseLangItalianDto);

        Object bcPractitioner = factory.newBCPractitioner();
        MapIndivProviderToBCPractitionerFhir.addProviderExpertiseLangToBCPractitionerComm(factory, providerExpertiseLangs, bcPractitioner);

        // communication lang tests
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getCommunication().size(), 1); 
        assertEquals(((org.hl7.fhir.r4bc1.model.BCCommunicationCodeableConcept) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getCommunication().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCCommunicationCodeableConcept) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getCommunication().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCCommunicationCodeableConcept) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getCommunication().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "Owner_MOH");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCCommunicationCodeableConcept) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getCommunication().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), "ERC_MOH");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCCommunicationCodeableConcept) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getCommunication().get(0)).getBcSpecialtySourceExtension().getValue(), expertiseLangItalianDto.getSourcesCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCCommunicationCodeableConcept) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getCommunication().get(0)).getCoding().get(0).getCode(), expertiseLangItalianDto.getTypeCode());
    }
    
    @Test
    public void addProviderConditionToBCPractitionerConditionExtTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<ConditionsDto> providerConditions = new ArrayList<>();
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        ConditionsDto condition1 = new ConditionsDto();
        condition1.setDataOwnerCode("Owner");
        condition1.setEndReasonCode("ERC");

        condition1.setEffectiveStartDate(start);
        condition1.setEffectiveEndDate(end);
        condition1.setIdentifier("theConditionID1");
        condition1.setRestrictionExplanationText("theRestrictionExplanation_Text1");
        condition1.setRestrictionFlag(true);
        condition1.setTypeCode("EXP");

        providerConditions.add(condition1);

        Object bcPractitioner = factory.newBCPractitioner();
        
        MapIndivProviderToBCPractitionerFhir.addProviderConditionToBCPractitioner(factory, providerConditions, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().size(), 1);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConditionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), condition1.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConditionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), condition1.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConditionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConditionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConditionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().get(0)).getConditionIdentifier().getValue(), condition1.getIdentifier());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConditionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().get(0)).getRestrictionText().getValue(), condition1.getRestrictionExplanationText());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConditionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().get(0)).getConditionCode().getCoding().get(0).getCode(), condition1.getTypeCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConditionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().get(0)).getRestrictionFlag().getValue(), condition1.isRestrictionFlag());

        Date start2 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end2 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);
        
        ConditionsDto condition2 = new ConditionsDto();
        condition2.setDataOwnerCode("Owner2");
        condition2.setEndReasonCode("ERC2");

        condition2.setEffectiveStartDate(start2);
        condition2.setEffectiveEndDate(end2);
        condition2.setIdentifier("theConditionID2");
        condition2.setRestrictionExplanationText("theRestrictionExplanation_Text2");
        condition2.setRestrictionFlag(false);
        condition2.setTypeCode("EXP2");

        providerConditions.add(condition2);

        MapIndivProviderToBCPractitionerFhir.addProviderConditionToBCPractitioner(factory, providerConditions, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().size(), 3);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConditionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().get(2)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), condition2.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConditionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().get(2)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), condition2.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConditionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().get(2)).getPeriod().getStart(), start2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConditionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().get(2)).getPeriod().getEnd(), end2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConditionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().get(2)).getConditionIdentifier().getValue(), condition2.getIdentifier());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConditionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().get(2)).getRestrictionText().getValue(), condition2.getRestrictionExplanationText());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConditionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().get(2)).getConditionCode().getCoding().get(0).getCode(), condition2.getTypeCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConditionExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConditionExtension().get(2)).getRestrictionFlag().getValue(), condition2.isRestrictionFlag());

    }
    
    @Test
    public void addProviderConfidentialityToBCPractitionerConfidentialityExtTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<ConfidentialityIndicatorDto> providerConfidents = new ArrayList<>();
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        ConfidentialityIndicatorDto confidentiality1 = new ConfidentialityIndicatorDto();
        confidentiality1.setDataOwnerCode("Owner");
        confidentiality1.setEndReasonCode("ERC");

        confidentiality1.setEffectiveStartDate(start);
        confidentiality1.setEffectiveEndDate(end);
        confidentiality1.setTypeCode("CONFIDENTIAL_TYPE_N");
        confidentiality1.setConfidential(false);

        providerConfidents.add(confidentiality1);

        Object bcPractitioner = factory.newBCPractitioner();
        
        MapIndivProviderToBCPractitionerFhir.addProviderConfidentialityToBCPractitioner(factory, providerConfidents, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConfidentialityExtension().size(), 1);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConfidentialityExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConfidentialityExtension().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), confidentiality1.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConfidentialityExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConfidentialityExtension().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), confidentiality1.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConfidentialityExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConfidentialityExtension().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConfidentialityExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConfidentialityExtension().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConfidentialityExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConfidentialityExtension().get(0)).getConfidentialityCode().getCoding().get(0).getCode(), factory.confidentialityMapperPLRDtoToFHIR(confidentiality1.isConfidential()));
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConfidentialityExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConfidentialityExtension().get(0)).getConfidentialityCode().getCoding().get(0).getSystem(), "http://terminology.hl7.org/CodeSystem/v3-Confidentiality");

        Date start2 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end2 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);
        
        ConfidentialityIndicatorDto confidentiality2 = new ConfidentialityIndicatorDto();
        confidentiality2.setDataOwnerCode("Owner2");
        confidentiality2.setEndReasonCode("ERC2");

        confidentiality2.setEffectiveStartDate(start2);
        confidentiality2.setEffectiveEndDate(end2);
        confidentiality2.setTypeCode("CONFIDENTIAL_TYPE_R");
        confidentiality2.setConfidential(true);

        providerConfidents.add(confidentiality2);

        MapIndivProviderToBCPractitionerFhir.addProviderConfidentialityToBCPractitioner(factory, providerConfidents, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConfidentialityExtension().size(), 3);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConfidentialityExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConfidentialityExtension().get(2)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), confidentiality2.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConfidentialityExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConfidentialityExtension().get(2)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), confidentiality2.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConfidentialityExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConfidentialityExtension().get(2)).getPeriod().getStart(), start2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConfidentialityExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConfidentialityExtension().get(2)).getPeriod().getEnd(), end2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConfidentialityExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConfidentialityExtension().get(2)).getConfidentialityCode().getCoding().get(0).getCode(), factory.confidentialityMapperPLRDtoToFHIR(confidentiality2.isConfidential()));
        assertEquals(((org.hl7.fhir.r4bc1.model.BCConfidentialityExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcConfidentialityExtension().get(2)).getConfidentialityCode().getCoding().get(0).getSystem(), "http://terminology.hl7.org/CodeSystem/v3-Confidentiality");

    }
    
    @Test
    public void addProviderRelationshipToBCPractitionerRelationshipExtTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<ProviderRelationshipDto> providerRelationships = new ArrayList<>();
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        ProviderRelationshipDto providerRelationship1 = new ProviderRelationshipDto();
        providerRelationship1.setDataOwnerCode("Owner");
        providerRelationship1.setEndReasonCode("ERC");

        providerRelationship1.setEffectiveStartDate(start);
        providerRelationship1.setEffectiveEndDate(end);
        providerRelationship1.setRelationshipTypeCode("LOC");
        
        providerRelationship1.setType("Test Provider Rel IPC Type");
        providerRelationship1.setIdentifierTypeCode("IPC");
        providerRelationship1.setIdentifier("IPC.00000885.BC.PRS");

        providerRelationships.add(providerRelationship1);

        Object bcPractitioner = factory.newBCPractitioner();
        
        MapIndivProviderToBCPractitionerFhir.addProviderRelationshipToBCPractitioner(factory, providerRelationships, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcPractitionerRelationshipExtension().size(), 1);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRelationshipExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcPractitionerRelationshipExtension().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), providerRelationship1.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRelationshipExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcPractitionerRelationshipExtension().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), providerRelationship1.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRelationshipExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcPractitionerRelationshipExtension().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRelationshipExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcPractitionerRelationshipExtension().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRelationshipExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcPractitionerRelationshipExtension().get(0)).getRelationshipType().getCoding().get(0).getCode(), providerRelationship1.getRelationshipTypeCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRelationshipExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcPractitionerRelationshipExtension().get(0)).getBcPractitionerRef().getReference(), "Practitioner/IPC.00000885.BC.PRS/$entityQuery");
    
        Date start2 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end2 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);
        
        ProviderRelationshipDto providerRelationship2 = new ProviderRelationshipDto();
        providerRelationship2.setDataOwnerCode("Owner2");
        providerRelationship2.setEndReasonCode("ERC2");

        providerRelationship2.setEffectiveStartDate(start2);
        providerRelationship2.setEffectiveEndDate(end2);
        providerRelationship2.setRelationshipTypeCode("EE");
        
        providerRelationship2.setType("Test Provider Rel IPC Type");
        providerRelationship2.setIdentifierTypeCode("IPC");
        providerRelationship2.setIdentifier("IPC.00000447.BC.PRS");

        providerRelationships.add(providerRelationship2);

        MapIndivProviderToBCPractitionerFhir.addProviderRelationshipToBCPractitioner(factory, providerRelationships, bcPractitioner);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcPractitionerRelationshipExtension().size(), 3);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRelationshipExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcPractitionerRelationshipExtension().get(2)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), providerRelationship2.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRelationshipExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcPractitionerRelationshipExtension().get(2)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), providerRelationship2.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRelationshipExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcPractitionerRelationshipExtension().get(2)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRelationshipExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcPractitionerRelationshipExtension().get(2)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRelationshipExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcPractitionerRelationshipExtension().get(2)).getRelationshipType().getCoding().get(0).getCode(), providerRelationship2.getRelationshipTypeCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRelationshipExtension) ((org.hl7.fhir.r4bc1.model.BCPractitioner) bcPractitioner).getBcPractitionerRelationshipExtension().get(2)).getBcPractitionerRef().getReference(), "Practitioner/IPC.00000447.BC.PRS/$entityQuery");
    
    }
    
}
