package ca.bc.gov.moh.hsa.plr.converter.hl7ToDto;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import ca.uhn.hl7v2.HL7Exception;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.nio.charset.Charset;
import javax.xml.bind.JAXBException;
import org.apache.camel.CamelContext;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.spring.CamelSpringDelegatingTestContextLoader;
import org.apache.camel.test.spring.CamelSpringJUnit4ClassRunner;
import org.apache.camel.test.spring.CamelSpringTestHelper;
import org.apache.camel.test.spring.MockEndpoints;
import org.apache.commons.io.IOUtils;
import org.hl7.v3.m4_0.MCCIMT200100Batch;
import org.hl7.v3.m4_0.PRPMIN301010MCCIMT000100Message;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;

// Really need to mock out the SFTP server and the EJB endpoint for a more consistent test
@RunWith(CamelSpringJUnit4ClassRunner.class)
@ContextConfiguration(
        loader = CamelSpringDelegatingTestContextLoader.class, locations = {"classpath:/plrTestApplicationContext.xml"}
)
@MockEndpoints
public class UnmarshalBatchHL7RouteBuilderTest {

    MockEndpoint HL740JaxbMockEndpoint;

    public UnmarshalBatchHL7RouteBuilderTest() {
    }

    @BeforeClass
    public static void fixTestClassProblem() throws Exception {
        // For some reason the test class wasn't being set automagically
        CamelSpringTestHelper.setTestClass(UnmarshalBatchHL7RouteBuilderTest.class);
    }

    @Before
    public void resolveMockEndpoints() {
        HL740JaxbMockEndpoint = (MockEndpoint) context.getEndpoint("mock:direct:readbatchhl7file");
    }

    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(UnmarshalBatchHL7RouteBuilderTest.class);

    @Produce(uri = "direct:readbatchhl7file")
    protected ProducerTemplate testProducer;

    @Autowired
    protected CamelContext context;

    @Test
    @DirtiesContext
    public void testUnmarshallBatchHL7() throws InterruptedException, IOException, JAXBException, HL7Exception, Exception {
        String content = getFileContents("HL7_T1_update_Nurse_DG_2.xml");
        HL740JaxbMockEndpoint.expectedMessageCount(1);
        Object requestBody = testProducer.requestBody(content);
        MockEndpoint.assertIsSatisfied(context);
        Assert.assertTrue(requestBody instanceof MCCIMT200100Batch);
    }

    @Test
    @DirtiesContext
    public void testUnmarshallAddProviderHL7() throws InterruptedException, IOException, JAXBException, HL7Exception, Exception {
        String content = getFileContents("JUnitAddProviderBatch.xml");
        HL740JaxbMockEndpoint.expectedMessageCount(1);
        Object requestBody = testProducer.requestBody(content);
        MockEndpoint.assertIsSatisfied(context);
        Assert.assertTrue(requestBody instanceof PRPMIN301010MCCIMT000100Message);
    }

    public static String getFileContents(String fileName) throws IOException {
        InputStream resourceAsStream = getFileInputStream(fileName);
        StringWriter writer = new StringWriter();
        IOUtils.copy(resourceAsStream, writer, Charset.defaultCharset());
        String fileContents = writer.toString();
        return fileContents;
    }

    private static InputStream getFileInputStream(String fileName) {
        String resourceName = "samples/" + fileName;
        return UnmarshalBatchHL7RouteBuilderTest.class.getClassLoader().getResourceAsStream(resourceName);
    }

}
