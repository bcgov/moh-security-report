/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.orgprovtofhir;

import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.NoteDto;
import ca.bc.gov.health.plr.dto.provider.esb.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants.*;
import static ca.bc.gov.moh.hsa.plr.converter.orgprovtofhir.OrgProviderDataBuilderFhirTest.*;
import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import static org.junit.Assert.assertEquals;
import org.junit.Test;

/**
 *
 * @author dan.stepanov
 */
public class OrgProviderPlrToBCOrganizationFhirTest {

    @Test
    public void addOrgProviderIdentifierToBCOrganizationIdentifTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<CollegeIdentifierDto> orgProviderIds = new ArrayList<>();

        // org identifier = IPC
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        CollegeIdentifierDto orgProviderIdentifier = new CollegeIdentifierDto();
        orgProviderIdentifier.setDataOwnerCode("OwnerRNA");
        orgProviderIdentifier.setEndReasonCode("ERC");

        orgProviderIdentifier.setEffectiveStartDate(start);
        orgProviderIdentifier.setEffectiveEndDate(end);
        orgProviderIdentifier.setActive(true);
        orgProviderIdentifier.setCreatedDate(new Date());

        orgProviderIdentifier.setGenerationNum(1L);
        orgProviderIdentifier.setInvalidatedDate(null);
        orgProviderIdentifier.setType("Test IPC Type");
        orgProviderIdentifier.setTypeCode("IPC");
        orgProviderIdentifier.setIdentifier("IPC.00000009.BC.PRS");
        orgProviderIdentifier.setUserChid("Test User Chid IPC");

        orgProviderIds.add(orgProviderIdentifier);

        // org identifier = CPN
        Date start2 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR - 2, CAL_EFF_START_DATE_MONTH + 2, CAL_EFF_START_DATE_DAY + 2);
        Date end2 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR - 2, CAL_EFF_END_DATE_MONTH - 2, CAL_EFF_END_DATE_DAY - 2);

        CollegeIdentifierDto orgProviderIdentifier2 = new CollegeIdentifierDto();
        orgProviderIdentifier2.setDataOwnerCode("Owner2");
        orgProviderIdentifier2.setEndReasonCode("ERC2");
        orgProviderIdentifier2.setEffectiveStartDate(start2);
        orgProviderIdentifier2.setEffectiveEndDate(end2);
        orgProviderIdentifier2.setActive(true);
        orgProviderIdentifier2.setCreatedDate(new Date());

        orgProviderIdentifier2.setGenerationNum(1L);
        orgProviderIdentifier2.setInvalidatedDate(null);
        orgProviderIdentifier2.setType("Test CPN Type");
        orgProviderIdentifier2.setTypeCode("CPN");
        orgProviderIdentifier2.setIdentifier("CPN.00000018.BC.PRS");
        orgProviderIdentifier2.setUserChid("Test User Chid CPN");

        orgProviderIds.add(orgProviderIdentifier2);

        // org identifier = ORGID
        Date start3 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR - 3, CAL_EFF_START_DATE_MONTH + 3, CAL_EFF_START_DATE_DAY + 3);
        Date end3 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR - 3, CAL_EFF_END_DATE_MONTH - 3, CAL_EFF_END_DATE_DAY - 3);

        CollegeIdentifierDto orgProviderIdentifier3 = new CollegeIdentifierDto();
        orgProviderIdentifier3.setDataOwnerCode("Owner3");
        orgProviderIdentifier3.setEndReasonCode("ERC3");

        orgProviderIdentifier3.setEffectiveStartDate(start3);
        orgProviderIdentifier3.setEffectiveEndDate(end3);
        orgProviderIdentifier3.setActive(true);
        orgProviderIdentifier3.setCreatedDate(new Date());

        orgProviderIdentifier3.setGenerationNum(1L);
        orgProviderIdentifier3.setInvalidatedDate(null);
        orgProviderIdentifier3.setType("Test ORGID Type");
        orgProviderIdentifier3.setTypeCode("ORGID");
        orgProviderIdentifier3.setIdentifier("ORGID_333");
        orgProviderIdentifier3.setUserChid("Test User Chid ORGID");

        orgProviderIds.add(orgProviderIdentifier3);

        Object bcOrganization = factory.newBCOrganization();

        MapOrgProviderToBCOrganizationFhir.addOrgProviderIdentifiersToBCOrganization(factory, orgProviderIds, bcOrganization);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().size(), 3);

        // IPC tests
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), orgProviderIdentifier.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), orgProviderIdentifier.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(0)).getValue(), orgProviderIdentifier.getIdentifier());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(0)).getType().getCoding().get(0).getCode(), orgProviderIdentifier.getTypeCode());

        // CPN tests
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(1)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), orgProviderIdentifier2.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(1)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), orgProviderIdentifier2.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(1)).getPeriod().getStart(), start2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(1)).getPeriod().getEnd(), end2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(1)).getValue(), orgProviderIdentifier2.getIdentifier());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(1)).getType().getCoding().get(0).getCode(), orgProviderIdentifier2.getTypeCode());

        // ORGID tests
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(2)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), orgProviderIdentifier3.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(2)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), orgProviderIdentifier3.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(2)).getPeriod().getStart(), start3);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(2)).getPeriod().getEnd(), end3);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(2)).getValue(), orgProviderIdentifier3.getIdentifier());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getIdentifier().get(2)).getType().getCoding().get(0).getCode(), orgProviderIdentifier3.getTypeCode());

    }

    @Test
    public void addOrgProviderNameToBCOrganizationNameTestOfficial() {

        // We will only be using usual (CURRENT) and official (CREDENTIALED)
        // ORGs are defaulted to CURR -> usual in FHIR 
        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<OrgNameDto> orgNames = new ArrayList<>();

        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        OrgNameDto orgNameDto = new OrgNameDto();
        orgNameDto.setActive(true);
        orgNameDto.setCreatedDate(new Date());
        orgNameDto.setDataOwnerCode("MOH");
        orgNameDto.setEndReasonCode("ERC");
        orgNameDto.setEffectiveEndDate(end);
        orgNameDto.setEffectiveStartDate(start);
        orgNameDto.setInvalidatedDate(null);
        orgNameDto.setType("Test Type Org Official");
        orgNameDto.setTypeCode("CRED");
        orgNameDto.setTypeId(1147l);//official name
        orgNameDto.setUserChid("Test User Official Chid JUNIT");

        orgNameDto.setName("Short Org Name Official");
        orgNameDto.setLongName("Long ORG Name Official");
        orgNameDto.setPreferred(true);

        orgNames.add(orgNameDto);

        Object bcOrganization = factory.newBCOrganization();

        MapOrgProviderToBCOrganizationFhir.addOrgProviderNameToBCOrganization(factory, orgNames, bcOrganization);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getName(), orgNameDto.getName());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getNameElement().getExtension().size(), 3);
        assertEquals(((org.hl7.fhir.r4.model.Extension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getNameElement().getExtensionByUrl(BC_NAME_PERIOND_EXTENSION_URL)).getUrl(), BC_NAME_PERIOND_EXTENSION_URL);
        assertEquals(((org.hl7.fhir.r4.model.Extension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getNameElement().getExtensionByUrl(BC_NAME_USE_EXTENSION_URL)).getUrl(), BC_NAME_USE_EXTENSION_URL);
        assertEquals(((org.hl7.fhir.r4.model.Extension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getNameElement().getExtensionByUrl(BC_END_REASON_OWNER_CODE_EXTENSION_URL)).getUrl(), BC_END_REASON_OWNER_CODE_EXTENSION_URL);
//        assertEquals((org.hl7.fhir.r4.model.StringType)((org.hl7.fhir.r4.model.Extension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getNameElement().getExtensionByUrl(BC_NAME_USE_EXTENSION_URL)).getValue(), factory.newStringType("OFFICIAL"));  
    }

    @Test
    public void addOrgProviderLicenseStatusToBCOrganizationTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<StatusDto> licenceStatuses = new ArrayList<>();
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        StatusDto licenseStatusDto = new StatusDto();
        licenseStatusDto.setDataOwnerCode("OwnerRNA");
        licenseStatusDto.setEndReasonCode("ERC");
        licenseStatusDto.setActive(true);
        licenseStatusDto.setCreatedDate(new Date());
        licenseStatusDto.setEffectiveEndDate(end);
        licenseStatusDto.setEffectiveStartDate(start);
        licenseStatusDto.setInvalidatedDate(null);

        licenseStatusDto.setType("Test license status");
        licenseStatusDto.setTypeCode("SUSPENDED");
        licenseStatusDto.setReasonCode("SUSPENDED_REASON_ORG");
        licenseStatusDto.setReason("Test license status reason");
        licenseStatusDto.setClassTxt("Test license status class");
        licenseStatusDto.setClassCode("LIC_SUSPENDED");

        licenceStatuses.add(licenseStatusDto);

        Object bcOrganization = factory.newBCOrganization();

        MapOrgProviderToBCOrganizationFhir.addOrgProviderLicenseStatusToBCOrganization(factory, licenceStatuses, bcOrganization);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcLicenseStatusExtension().size(), 1);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLicenseStatusExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcLicenseStatusExtension().get(0)).getStatusCode().getCoding().get(0).getCode(), licenseStatusDto.getTypeCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLicenseStatusExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcLicenseStatusExtension().get(0)).getStatusReasonCode().getCoding().get(0).getCode(), licenseStatusDto.getReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLicenseStatusExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcLicenseStatusExtension().get(0)).getStatusClassCode().getCoding().get(0).getCode(), licenseStatusDto.getClassCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLicenseStatusExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcLicenseStatusExtension().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), licenseStatusDto.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLicenseStatusExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcLicenseStatusExtension().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), licenseStatusDto.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLicenseStatusExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcLicenseStatusExtension().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLicenseStatusExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcLicenseStatusExtension().get(0)).getPeriod().getEnd(), end);

    }

    @Test
    public void addOrgProviderAddressMailToBCOrganizationAddressPostalTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<AddressDto> orgAddresses = new ArrayList<>();
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        AddressDto addressTypeMail = new AddressDto();
        addressTypeMail.setDataOwnerCode("OwnerRNA");
        addressTypeMail.setEndReasonCode("ERC");

        addressTypeMail.setEffectiveStartDate(start);
        addressTypeMail.setEffectiveEndDate(end);
        addressTypeMail.setActive(true);
        addressTypeMail.setCreatedDate(new Date());

        addressTypeMail.setGenerationNum(1L);
        addressTypeMail.setInvalidatedDate(null);
        addressTypeMail.setType("Test ORG Address mail Type");
        addressTypeMail.setTypeCode("M");
        addressTypeMail.setTypeId(2838l);  ///address type code Mailing
        addressTypeMail.setUserChid("Test ORG User Chid JUNIT");

        addressTypeMail.setAddressLineOne("Address Line One Mail for ORG");
        addressTypeMail.setAddressLineTwo("Address Line Two Mail for ORG");
        addressTypeMail.setAddressLineThree("Address Line Three Mail for ORG");
        addressTypeMail.setCity("Victoria ORG");
        addressTypeMail.setPostalCode("V5V 5V5");
        addressTypeMail.setFullAddress("Full ORG Address Test Mail Sample 1");
        addressTypeMail.setCommunicationPurpose("Communication Purpose");
        addressTypeMail.setCommunicationPurposeCode("BC");
        addressTypeMail.setCommunicationPurposeId(2802l);
        addressTypeMail.setCountry("Canada");
        addressTypeMail.setCountryCode("CA");
        addressTypeMail.setCountryId(1239l);
        addressTypeMail.setProvinceOrStateTxt("British Columbia (BC)");

        orgAddresses.add(addressTypeMail);

        Object bcOrganization = factory.newBCOrganization();

        MapOrgProviderToBCOrganizationFhir.addOrgProviderAddressToBCOrganizationAddress(factory, orgAddresses, bcOrganization);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().size(), 1);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), addressTypeMail.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), addressTypeMail.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getBcPurposeCodeExtension().getCoding().get(0).getCode(), addressTypeMail.getCommunicationPurposeCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getLine().get(0).getValue(), addressTypeMail.getAddressLineOne());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getLine().get(1).getValue(), addressTypeMail.getAddressLineTwo());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getLine().get(2).getValue(), addressTypeMail.getAddressLineThree());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getCity(), addressTypeMail.getCity());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getPostalCode(), addressTypeMail.getPostalCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getCountry(), addressTypeMail.getCountryCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getState(), addressTypeMail.getProvinceOrStateTxt());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getType().getDisplay(), "Postal");
    }

    @Test
    public void addOrgProviderAddressPhysicalToBCOrganizationAddressPhysicalTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<AddressDto> orgAddresses = new ArrayList<>();
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        AddressDto addressTypePhysical = new AddressDto();
        addressTypePhysical.setDataOwnerCode("OwnerMOH");
        addressTypePhysical.setEndReasonCode("ERC2");

        addressTypePhysical.setEffectiveStartDate(start);
        addressTypePhysical.setEffectiveEndDate(end);
        addressTypePhysical.setActive(true);
        addressTypePhysical.setCreatedDate(new Date());

        addressTypePhysical.setGenerationNum(1L);
        addressTypePhysical.setInvalidatedDate(null);
        addressTypePhysical.setType("Test ORG Address Physical Type");
        addressTypePhysical.setTypeCode("P");
        addressTypePhysical.setTypeId(2939l);  ///address type code Physical
        addressTypePhysical.setUserChid("Test ORG User Chid JUNIT");

        addressTypePhysical.setAddressLineOne("Address Line One Physical for ORG");
        addressTypePhysical.setAddressLineTwo("Address Line Two Physical for ORG");
        addressTypePhysical.setAddressLineThree("Address Line Three Physical for ORG");
        addressTypePhysical.setCity("Vernon ORG");
        addressTypePhysical.setPostalCode("V7V 7V7");
        addressTypePhysical.setFullAddress("Full ORG Address Test Physical Sample 2");
        addressTypePhysical.setCommunicationPurpose("Communication Purpose");
        addressTypePhysical.setCommunicationPurposeCode("OC");
        addressTypePhysical.setCommunicationPurposeId(2802l);
        addressTypePhysical.setCountry("Canada");
        addressTypePhysical.setCountryCode("CA");
        addressTypePhysical.setCountryId(1239l);
        addressTypePhysical.setProvinceOrStateTxt("British Columbia (BC)");

        orgAddresses.add(addressTypePhysical);

        Object bcOrganization = factory.newBCOrganization();

        MapOrgProviderToBCOrganizationFhir.addOrgProviderAddressToBCOrganizationAddress(factory, orgAddresses, bcOrganization);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().size(), 1);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), addressTypePhysical.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), addressTypePhysical.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getBcPurposeCodeExtension().getCoding().get(0).getCode(), addressTypePhysical.getCommunicationPurposeCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getLine().get(0).getValue(), addressTypePhysical.getAddressLineOne());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getLine().get(1).getValue(), addressTypePhysical.getAddressLineTwo());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getLine().get(2).getValue(), addressTypePhysical.getAddressLineThree());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getCity(), addressTypePhysical.getCity());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getPostalCode(), addressTypePhysical.getPostalCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getCountry(), addressTypePhysical.getCountryCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getState(), addressTypePhysical.getProvinceOrStateTxt());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCAddress) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getAddress().get(0)).getType().getDisplay(), "Physical");
    }

    @Test
    public void addOrgProviderPhoneToBCOrganizationTelecom() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<TelecommunicationDto> orgTelecoms = new ArrayList<>();

        Date start2 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end2 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        TelecommunicationDto telecomDto = new TelecommunicationDto();
        telecomDto.setActive(true);
        telecomDto.setCreatedDate(new Date());
        telecomDto.setDataOwnerCode("MOH");
        telecomDto.setEndReasonCode("ERC2");
        telecomDto.setEffectiveEndDate(end2);
        telecomDto.setEffectiveStartDate(start2);
        telecomDto.setGenerationNum(1L);
        telecomDto.setInvalidatedDate(null);
        telecomDto.setType("Test Telephone Type");
        telecomDto.setTypeCode("T");
        telecomDto.setTypeId(1161l);
        telecomDto.setUserChid("Test User Chiid JUNIT");

        // there is no country in PLR telecomDto
        telecomDto.setAreaCode("257 ");
        telecomDto.setCommunicationPurpose("Communication Purpose");
        telecomDto.setCommunicationPurposeCode("HC");
        telecomDto.setCommunicationPurposeId(2802l);
        telecomDto.setExtension("ext. 8755"); // tested w/empty extension telecomDto.setExtension("");
        telecomDto.setNumber("345-4444");

        orgTelecoms.add(telecomDto);

        Object bcOrganization = factory.newBCOrganization();

        MapOrgProviderToBCOrganizationFhir.addOrgProviderTelecomToBCOrganizationTelecom(factory, orgTelecoms, bcOrganization);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().size(), 1);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), telecomDto.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), telecomDto.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getPeriod().getStart(), start2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getPeriod().getEnd(), end2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getBcPurposeCodeExtension().getCoding().get(0).getCode(), telecomDto.getCommunicationPurposeCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getAreaCode().getValue(), telecomDto.getAreaCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getLocalNumber().getValue(), telecomDto.getNumber());
        if (telecomDto.getExtension() != null && !telecomDto.getExtension().isEmpty()) {
            assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getNumberExtension().getValue(), telecomDto.getExtension());
        }
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getValue(), telecomDto.getAreaCode() + telecomDto.getNumber() + telecomDto.getExtension());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getSystem().PHONE.toCode(), "phone");
    }

    @Test
    public void addOrgProviderFaxMobileToBCOrganizationTelecom() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<TelecommunicationDto> orgFaxMobileTelecoms = new ArrayList<>();

        Date start3 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end3 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        TelecommunicationDto telecomFaxDto = new TelecommunicationDto();
        telecomFaxDto.setActive(true);
        telecomFaxDto.setCreatedDate(new Date());
        telecomFaxDto.setDataOwnerCode("MOH3");
        telecomFaxDto.setEndReasonCode("ERC3");
        telecomFaxDto.setEffectiveEndDate(end3);
        telecomFaxDto.setEffectiveStartDate(start3);
        telecomFaxDto.setGenerationNum(1L);
        telecomFaxDto.setInvalidatedDate(null);
        telecomFaxDto.setType("Test Fax Type");
        telecomFaxDto.setTypeCode("FAX");
        telecomFaxDto.setTypeId(1161l);
        telecomFaxDto.setUserChid("Test User Chiid JUNIT");

        telecomFaxDto.setAreaCode("209 ");
        telecomFaxDto.setCommunicationPurpose("Communication Purpose");
        telecomFaxDto.setCommunicationPurposeCode("MC");
        telecomFaxDto.setCommunicationPurposeId(2802l);
        telecomFaxDto.setExtension(" ext 1234"); // tested w/empty extension telecomFaxDto.setExtension("");
        telecomFaxDto.setNumber("231-8576");

        orgFaxMobileTelecoms.add(telecomFaxDto);

        Date start4 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR + 1, CAL_EFF_START_DATE_MONTH + 1, CAL_EFF_START_DATE_DAY + 1);
        Date end4 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR - 1, CAL_EFF_END_DATE_MONTH - 1, CAL_EFF_END_DATE_DAY - 1);

        TelecommunicationDto telecomMobileDto = new TelecommunicationDto();
        telecomMobileDto.setActive(true);
        telecomMobileDto.setCreatedDate(new Date());
        telecomMobileDto.setDataOwnerCode("MOH4");
        telecomMobileDto.setEndReasonCode("ERC4");
        telecomMobileDto.setEffectiveEndDate(end4);
        telecomMobileDto.setEffectiveStartDate(start4);
        telecomMobileDto.setGenerationNum(1L);
        telecomMobileDto.setInvalidatedDate(null);
        telecomMobileDto.setType("Test Mobile Type");
        telecomMobileDto.setTypeCode("MB");
        telecomMobileDto.setTypeId(1161l);

        telecomMobileDto.setAreaCode("579 ");
        telecomMobileDto.setCommunicationPurpose("Communication Purpose");
        telecomMobileDto.setCommunicationPurposeCode("DC");
        telecomMobileDto.setCommunicationPurposeId(2802l);
        telecomMobileDto.setExtension(""); //
        telecomMobileDto.setNumber("231-8576");

        orgFaxMobileTelecoms.add(telecomMobileDto);

        Object bcOrganization = factory.newBCOrganization();

        MapOrgProviderToBCOrganizationFhir.addOrgProviderTelecomToBCOrganizationTelecom(factory, orgFaxMobileTelecoms, bcOrganization);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().size(), 2);
        // fax type
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), telecomFaxDto.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), telecomFaxDto.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getPeriod().getStart(), start3);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getPeriod().getEnd(), end3);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getBcPurposeCodeExtension().getCoding().get(0).getCode(), telecomFaxDto.getCommunicationPurposeCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getAreaCode().getValue(), telecomFaxDto.getAreaCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getLocalNumber().getValue(), telecomFaxDto.getNumber());
        if (telecomFaxDto.getExtension() != null && !telecomFaxDto.getExtension().isEmpty()) {
            assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getNumberExtension().getValue(), telecomFaxDto.getExtension());
        }
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getValue(), telecomFaxDto.getAreaCode() + telecomFaxDto.getNumber() + telecomFaxDto.getExtension());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getSystem().FAX.toCode(), "fax");
        // mobile type
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), telecomMobileDto.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), telecomMobileDto.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getPeriod().getStart(), start4);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getPeriod().getEnd(), end4);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getBcPurposeCodeExtension().getCoding().get(0).getCode(), telecomMobileDto.getCommunicationPurposeCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getAreaCode().getValue(), telecomMobileDto.getAreaCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getLocalNumber().getValue(), telecomMobileDto.getNumber());
        if (telecomMobileDto.getExtension() != null && !telecomMobileDto.getExtension().isEmpty()) {
            assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getNumberExtension().getValue(), telecomMobileDto.getExtension());
        }
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getValue(), telecomMobileDto.getAreaCode() + telecomMobileDto.getNumber() + telecomMobileDto.getExtension());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getSystem().SMS.toCode(), "sms");
    }

    @Test
    public void addOrgProviderActiveToBCOrganizationStatusTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<StatusDto> providerStatus = new ArrayList<>();
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        StatusDto activeStatusDto = new StatusDto();
        activeStatusDto.setDataOwnerCode("OwnerRNA");
        activeStatusDto.setEndReasonCode("ERC");

        activeStatusDto.setEffectiveStartDate(start);
        activeStatusDto.setEffectiveEndDate(end);
        activeStatusDto.setActive(true);
        activeStatusDto.setCreatedDate(new Date());

        activeStatusDto.setGenerationNum(1L);
        activeStatusDto.setInvalidatedDate(null);
        activeStatusDto.setType("Test org active status");

        providerStatus.add(activeStatusDto);
        ProviderDetails orgProviderDetails = new ProviderDetails();
        orgProviderDetails.setStatuses(providerStatus);

        Object bcOrganization = factory.newBCOrganization();

        MapOrgProviderToBCOrganizationFhir.addOrgProviderActiveStatusToBCOrganization(factory, orgProviderDetails, bcOrganization);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getActiveElement().getValue(), activeStatusDto.isActive());
    }

    @Test
    public void addOrgProviderEmailFtpToBCOrganizationTelecomTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<ElectronicAddressDto> orgElectAddresses = new ArrayList<>();

        // email type
        ElectronicAddressDto electronicAddressEmailDto = new ElectronicAddressDto();

        Date start2 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end2 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        electronicAddressEmailDto.setActive(true);
        electronicAddressEmailDto.setCreatedDate(new Date());
        electronicAddressEmailDto.setEffectiveStartDate(start2);
        electronicAddressEmailDto.setEffectiveEndDate(end2);
        electronicAddressEmailDto.setDataOwnerCode("MOH_E");
        electronicAddressEmailDto.setEndReasonCode("ERC_E");
        electronicAddressEmailDto.setGenerationNum(999L);
        electronicAddressEmailDto.setInvalidatedDate(null);
        electronicAddressEmailDto.setCommunicationPurpose("Communication Purpose");
        electronicAddressEmailDto.setCommunicationPurposeCode("MC");
        electronicAddressEmailDto.setCommunicationPurposeId(2802l);

        electronicAddressEmailDto.setType("Test org electronicAddress email Type");
        electronicAddressEmailDto.setTypeCode("E");
        electronicAddressEmailDto.setTypeId(2048l);

        electronicAddressEmailDto.setAddress("unit_orgtest1@testing.com");

        orgElectAddresses.add(electronicAddressEmailDto);

        // FTP type
        ElectronicAddressDto electronicAddressFtpDto = new ElectronicAddressDto();

        Date start3 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR + 1, CAL_EFF_START_DATE_MONTH + 1, CAL_EFF_START_DATE_DAY + 1);
        Date end3 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR - 1, CAL_EFF_END_DATE_MONTH - 1, CAL_EFF_END_DATE_DAY - 1);

        electronicAddressFtpDto.setActive(true);
        electronicAddressFtpDto.setCreatedDate(new Date());
        electronicAddressFtpDto.setEffectiveStartDate(start3);
        electronicAddressFtpDto.setEffectiveEndDate(end3);
        electronicAddressFtpDto.setDataOwnerCode("MOH_F");
        electronicAddressFtpDto.setEndReasonCode("ERC_F");
        electronicAddressFtpDto.setGenerationNum(9995L);
        electronicAddressFtpDto.setInvalidatedDate(null);
        electronicAddressFtpDto.setCommunicationPurpose("Communication Purpose");
        electronicAddressFtpDto.setCommunicationPurposeCode("OC");
        electronicAddressFtpDto.setCommunicationPurposeId(2802l);

        electronicAddressFtpDto.setType("Test org electronicAddress FTP Type");
        electronicAddressFtpDto.setTypeCode("F");
        electronicAddressFtpDto.setTypeId(2048l);

        electronicAddressFtpDto.setAddress("local_sftp_ttt@143.19.0.1175");

        orgElectAddresses.add(electronicAddressFtpDto);

        Object bcOrganization = factory.newBCOrganization();

        MapOrgProviderToBCOrganizationFhir.addOrgProviderElectronicAddressToBCOrganizationTelecom(factory, orgElectAddresses, bcOrganization);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().size(), 2);
        // email
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), electronicAddressEmailDto.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), electronicAddressEmailDto.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getPeriod().getStart(), start2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getPeriod().getEnd(), end2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getBcPurposeCodeExtension().getCoding().get(0).getCode(), electronicAddressEmailDto.getCommunicationPurposeCode());
        if (electronicAddressEmailDto.getAddress() != null && !electronicAddressEmailDto.getAddress().isEmpty()) {
            assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getValue(), electronicAddressEmailDto.getAddress());
        }
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(0)).getSystem().EMAIL.toCode(), "email");
        // ftp
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), electronicAddressFtpDto.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), electronicAddressFtpDto.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getPeriod().getStart(), start3);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getPeriod().getEnd(), end3);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getBcPurposeCodeExtension().getCoding().get(0).getCode(), electronicAddressFtpDto.getCommunicationPurposeCode());
        if (electronicAddressEmailDto.getAddress() != null && !electronicAddressEmailDto.getAddress().isEmpty()) {
            assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getValue(), electronicAddressFtpDto.getAddress());
        }
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getTelecom().get(1)).getSystem().URL.toCode(), "url");
    }

    @Test
    public void addOrgProviderNoteToBCOrganizationTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<NoteDto> orgProviderNotes = new ArrayList<>();
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        // first note
        NoteDto noteOne = new NoteDto();
        noteOne.setCreatedDate(new Date());
        noteOne.setDataOwnerCode("Owner_note1");
        noteOne.setEndReasonCode("ERC_note1");

        noteOne.setEffectiveStartDate(start);
        noteOne.setEffectiveEndDate(end);
        noteOne.setIdentifier("theNoteIDOrg01");
        noteOne.setNoteText("theNoteText for organizationOne");

        orgProviderNotes.add(noteOne);

        // second note
        Date start2 = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR + 1, CAL_EFF_START_DATE_MONTH + 1, CAL_EFF_START_DATE_DAY + 1);
        Date end2 = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR - 1, CAL_EFF_END_DATE_MONTH - 1, CAL_EFF_END_DATE_DAY - 1);

        NoteDto noteTwo = new NoteDto();

        noteTwo.setCreatedDate(new Date());
        noteTwo.setDataOwnerCode("Owner_note2");
        noteTwo.setEndReasonCode("ERC_note2");

        noteTwo.setEffectiveStartDate(start2);
        noteTwo.setEffectiveEndDate(end2);
        noteTwo.setIdentifier("theNoteIDOrg02");
        noteTwo.setNoteText("theNoteText for organizationTwo");

        orgProviderNotes.add(noteTwo);

        Object bcOrganization = factory.newBCOrganization();

        MapOrgProviderToBCOrganizationFhir.addOrgProviderNoteToBCOrganization(factory, orgProviderNotes, bcOrganization);

        assertEquals(((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcNoteExtension().size(), 2);
        // test note One
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcNoteExtension().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), noteOne.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcNoteExtension().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), noteOne.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcNoteExtension().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcNoteExtension().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcNoteExtension().get(0)).getNoteIdentifier().getValue(), noteOne.getIdentifier());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcNoteExtension().get(0)).getNoteText().getValue(), noteOne.getNoteText());
        // test note Two
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcNoteExtension().get(1)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), noteTwo.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcNoteExtension().get(1)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), noteTwo.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcNoteExtension().get(1)).getPeriod().getStart(), start2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcNoteExtension().get(1)).getPeriod().getEnd(), end2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcNoteExtension().get(1)).getNoteIdentifier().getValue(), noteTwo.getIdentifier());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCOrganization) bcOrganization).getBcNoteExtension().get(1)).getNoteText().getValue(), noteTwo.getNoteText());
    }
}
