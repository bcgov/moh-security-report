/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir;

import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto;
import static ca.bc.gov.moh.hsa.plr.converter.facilitytofhir.FacilityDataBuilderFhirTest.CAL_EFF_END_DATE_DAY;
import static ca.bc.gov.moh.hsa.plr.converter.facilitytofhir.FacilityDataBuilderFhirTest.CAL_EFF_END_DATE_MONTH;
import static ca.bc.gov.moh.hsa.plr.converter.facilitytofhir.FacilityDataBuilderFhirTest.CAL_EFF_END_DATE_YEAR;
import static ca.bc.gov.moh.hsa.plr.converter.facilitytofhir.FacilityDataBuilderFhirTest.CAL_EFF_START_DATE_DAY;
import static ca.bc.gov.moh.hsa.plr.converter.facilitytofhir.FacilityDataBuilderFhirTest.CAL_EFF_START_DATE_MONTH;
import static ca.bc.gov.moh.hsa.plr.converter.facilitytofhir.FacilityDataBuilderFhirTest.CAL_EFF_START_DATE_YEAR;
import static ca.bc.gov.moh.hsa.plr.converter.facilitytofhir.FacilityDataBuilderFhirTest.getEffectiveEndDate;
import static ca.bc.gov.moh.hsa.plr.converter.facilitytofhir.FacilityDataBuilderFhirTest.getEffectiveStartDate;
import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import static org.junit.Assert.assertEquals;
import org.junit.Test;

/**
 *
 * @author dan.stepanov
 */
public class IndividProviderToBCPractitionerRoleFhirTest {
    
    @Test
    public void addProviderExpertiseToBCPractitionerRoleSpecialtyTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<ExpertiseDto> providerExpertiseSpecialty = new ArrayList<>();

        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        ExpertiseDto expertiseSpecialityDto = new ExpertiseDto();
        expertiseSpecialityDto.setDataOwnerCode("Owner_RNA");
        expertiseSpecialityDto.setEndReasonCode("ERC_RNA");

        expertiseSpecialityDto.setEffectiveStartDate(start);
        expertiseSpecialityDto.setEffectiveEndDate(end);

        expertiseSpecialityDto.setType("Test Type Speciality Family Medicine");
        expertiseSpecialityDto.setTypeCode("A160");  
        expertiseSpecialityDto.setUserChid("Test expertise MD Chiid");

        expertiseSpecialityDto.setRoleType("Role Type medical doctor");
        expertiseSpecialityDto.setRoleTypeCode("MD");
        expertiseSpecialityDto.setSourcesCode("Expertise Source Code");

        providerExpertiseSpecialty.add(expertiseSpecialityDto);

        Object bcPractitionerRole = factory.newBCPractitionerRole();
        
        MapIndivProviderToBCPractitionerRoleFhir.addProviderExpertiseToBCPractitionerRoleSpecialty(factory, providerExpertiseSpecialty, bcPractitionerRole);

        // specialty prac role tests
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole).getSpecialty().size(), 1); 
        assertEquals(((org.hl7.fhir.r4bc1.model.BCSpecialtyCodeableConcept) ((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole).getSpecialty().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCSpecialtyCodeableConcept) ((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole).getSpecialty().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCSpecialtyCodeableConcept) ((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole).getSpecialty().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), expertiseSpecialityDto.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCSpecialtyCodeableConcept) ((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole).getSpecialty().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), expertiseSpecialityDto.getEndReasonCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCSpecialtyCodeableConcept) ((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole).getSpecialty().get(0)).getBcSpecialtySourceExtension().getValue(), expertiseSpecialityDto.getSourcesCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCSpecialtyCodeableConcept) ((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole).getSpecialty().get(0)).getCoding().get(0).getCode(), expertiseSpecialityDto.getTypeCode());
    }
    
    @Test
    public void addProviderRoleTypeToBCPractitionerRoleCodeTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        ProviderDetails indivProviderDetails = new ProviderDetails();

        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        indivProviderDetails.setPauthId(10L);
        indivProviderDetails.setType("MD");
        indivProviderDetails.setTypeId(150L);
        indivProviderDetails.setProviderType("IND");
        
        String indivProviderRoleType = indivProviderDetails.getType();
        String systemDisplayLink = "https://fhir.infoway-inforoute.ca/CodeSystem/scptype";
        
        CollegeIdentifierDto indivProviderIdentifier = new CollegeIdentifierDto();
        indivProviderIdentifier.setDataOwnerCode("OwnerRNA");
        indivProviderIdentifier.setEndReasonCode("ERC");

        indivProviderIdentifier.setEffectiveStartDate(start);
        indivProviderIdentifier.setEffectiveEndDate(end);
        indivProviderIdentifier.setActive(true);
        indivProviderIdentifier.setCreatedDate(new Date());

        indivProviderIdentifier.setGenerationNum(1L);
        indivProviderIdentifier.setInvalidatedDate(null);
        indivProviderIdentifier.setType("Test IPC Type");
        indivProviderIdentifier.setTypeCode("IPC");
        indivProviderIdentifier.setIdentifier("IPC.00009985.BC.PRS");
        indivProviderIdentifier.setUserChid("Test User Chid IPC");

        Object bcPractitionerRole = factory.newBCPractitionerRole();
        
        MapIndivProviderToBCPractitionerRoleFhir.addProviderRoleTypeToBCPractitionerRoleCode(factory, indivProviderRoleType, bcPractitionerRole, indivProviderIdentifier.getIdentifier());

        // specialty prac role tests
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole).getCode().size(), 1); 
        assertEquals(((org.hl7.fhir.r4.model.CodeableConcept) ((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole).getCode().get(0)).getCoding().get(0).getCode(), indivProviderRoleType);
        assertEquals(((org.hl7.fhir.r4.model.CodeableConcept) ((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole).getCode().get(0)).getCoding().get(0).getSystem(), systemDisplayLink);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole).getPractitioner().getReference(), "Practitioner/IPC.00009985.BC.PRS/$entityQuery");
    }
    
    @Test
    public void addProviderRelationToBCPractitionerRoleOrgRefTest() {

        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<ProviderRelationshipDto> providerRelationships = new ArrayList<>();
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        ProviderRelationshipDto providerOrgRelationship1 = new ProviderRelationshipDto();
        providerOrgRelationship1.setDataOwnerCode("Owner_RNA");
        providerOrgRelationship1.setEndReasonCode("ERC_RNA");

        providerOrgRelationship1.setEffectiveStartDate(start);
        providerOrgRelationship1.setEffectiveEndDate(end);
        providerOrgRelationship1.setRelationshipTypeCode("LOC");
        
        providerOrgRelationship1.setType("Test Provider Rel ORGID Type");
        providerOrgRelationship1.setIdentifierTypeCode("ORGID");
        providerOrgRelationship1.setIdentifier("ORGID_01");
        
        ProviderDetails orgProviderType = new ProviderDetails();
        orgProviderType.setProviderType("ORG");
        
        ProviderRelationshipDto providerOrgRelationship2 = new ProviderRelationshipDto();
        providerOrgRelationship2.setType("Test Provider Rel IPC Type");
        providerOrgRelationship2.setIdentifierTypeCode("IPC");
        providerOrgRelationship2.setIdentifier("IPC.00000337.BC.PRS");

        providerRelationships.add(providerOrgRelationship1);

        Object bcPractitionerRole = factory.newBCPractitionerRole();
        
        MapIndivProviderToBCPractitionerRoleFhir.addProviderRelationshipToBCPractitionerRole(factory, providerOrgRelationship1, bcPractitionerRole, providerOrgRelationship2.getIdentifier());

        // prac role org relationships tests
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole).getOrganization().getReference(), "Organization/ORGID_01/$entityQuery");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole).getPractitioner().getReference(), "Practitioner/IPC.00000337.BC.PRS/$entityQuery");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCReference) ((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole).getOrganization()).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), providerOrgRelationship1.getDataOwnerCode());
        assertEquals(((org.hl7.fhir.r4bc1.model.BCReference) ((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole).getOrganization()).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), providerOrgRelationship1.getEndReasonCode());
        assertEquals((((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole)).getPeriod().getStart(), start);
        assertEquals((((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCReference) ((org.hl7.fhir.r4bc1.model.BCPractitionerRole) bcPractitionerRole).getOrganization()).getRelationshipType().getCoding().get(0).getCode(), providerOrgRelationship1.getRelationshipTypeCode());
    }
    
}
