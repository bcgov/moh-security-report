/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.orgprovtofhir;

import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.uhn.fhir.parser.DataFormatException;
import ca.uhn.fhir.validation.FhirValidator;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import org.junit.Test;

/**
 *
 * @author dan.stepanov
 */
public class OrgProviderToOrganizationFhirTest {

    @Test
    public void testOrgProviderDetailsDataBuilderToOrganizationAddress() throws Exception {

        ProviderDetails orgProviderDetailsTest = OrgProviderDataBuilderFhirTest.getOrgProviderDetails();

        MapOrgProviderToOrganizationFhir orgProviderToPractFhir = new MapOrgProviderToOrganizationFhir();

        String testJsonParsedTwoOrgAddressFhir = null;
        testJsonParsedTwoOrgAddressFhir = orgProviderToPractFhir.mapOrgProviderAddressToOrganizationAddress(orgProviderDetailsTest);

        String orgAddressParsedExpectedResult = "{\"resourceType\":\"Organization\",\"address\":[{\"use\":\"work\",\"text\":\"Full Org Address Test Mail Sample 1\",\"line\":[\"Org Address Line One Mail\",\"Org Address Line Two Mail\",\"Org Address Line Three Mail\"],\"city\":\"Duncan\",\"state\":\"British Columbia (BC)\",\"postalCode\":\"V5V 5V5\",\"country\":\"CA\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\",\"end\":\"2040-11-30T00:00:00-08:00\"}},{\"use\":\"work\",\"text\":\"Full Org Address Test Physical Sample 2\",\"line\":[\"Org Address Line One Physical\",\"Org Address Line Two Physical\",\"Org Address Line Three Physical\"],\"city\":\"Vancouver\",\"state\":\"British Columbia (BC)\",\"postalCode\":\"V4V 4V4\",\"country\":\"CA\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\",\"end\":\"2040-11-30T00:00:00-08:00\"}}]}";
        
        assertNotNull(testJsonParsedTwoOrgAddressFhir);
        assertEquals(orgAddressParsedExpectedResult, testJsonParsedTwoOrgAddressFhir);

        // json format org address in FHIR result is:
//        {
//                "resourceType": "Organization",
//                "address": [
//                        {
//                                "use": "work",
//                                "text": "Full Org Address Test Mail Sample 1",
//                                "line": [
//                                        "Org Address Line One Mail",
//                                        "Org Address Line Two Mail",
//                                        "Org Address Line Three Mail"
//                                ],
//                                "city": "Duncan",
//                                "state": "British Columbia (BC)",
//                                "postalCode": "V5V 5V5",
//                                "country": "CA",
//                                "period": {
//                                        "start": "2019-02-04T00:00:00-08:00",
//                                        "end": "2040-11-30T00:00:00-08:00"
//                                }
//                        },
//                        {
//                                "use": "work",
//                                "text": "Full Org Address Test Physical Sample 2",
//                                "line": [
//                                        "Org Address Line One Physical",
//                                        "Org Address Line Two Physical",
//                                        "Org Address Line Three Physical"
//                                ],
//                                "city": "Vancouver",
//                                "state": "British Columbia (BC)",
//                                "postalCode": "V4V 4V4",
//                                "country": "CA",
//                                "period": {
//                                        "start": "2019-02-04T00:00:00-08:00",
//                                        "end": "2040-11-30T00:00:00-08:00"
//                                }
//                        }
//                ]
//        }
    }

    @Test
    public void testOrgProviderDetailsDataBuilderToOrganizationAddressValid() throws Exception {
        
        ProviderDetails orgProviderDetailsTest = OrgProviderDataBuilderFhirTest.getOrgProviderDetails();

        MapOrgProviderToOrganizationFhir orgProviderToOrganizationFhir = new MapOrgProviderToOrganizationFhir();
        boolean testJsonParsedTwoOrgAddressFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = OrgProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoOrgAddress = orgProviderToOrganizationFhir.mapOrgProviderAddressToOrganizationAddress(orgProviderDetailsTest);
        testJsonParsedTwoOrgAddressFhirValid = orgProviderToOrganizationFhir.validateOrgPractitionerFhir(fhirValidator, parsedEncodedPractTwoOrgAddress);

        assertNotNull(testJsonParsedTwoOrgAddressFhirValid);
        assertTrue(testJsonParsedTwoOrgAddressFhirValid);
    }

    @Test
    public void testOrgProvDataBuilderToOrganizationAddressInvalid() throws Exception, DataFormatException {

        MapOrgProviderToOrganizationFhir orgProviderToOrganizationFhir = new MapOrgProviderToOrganizationFhir();
        boolean testJsonParsedTwoOrgAddressFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = OrgProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoOrgAddressInvalid = "{\"resourceType\":\"Organization_AD\",\"address aaa\":[{\"use\":\"work\",\"text\":\"Full Org Address Test Mail Sample 1\",\"line\":[\"Org Address Line One Mail\",\"Org Address Line Two Mail\",\"Org Address Line Three Mail\"],\"city\":\"Duncan\",\"state\":\"British Columbia (BC)\",\"postalCode\":\"V5V 5V5\",\"country\":\"CA\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\",\"end\":\"2040-11-30T00:00:00-08:00\"}},{\"use\":\"work\",\"text\":\"Full Org Address Test Physical Sample 2\",\"line\":[\"Org Address Line One Physical\",\"Org Address Line Two Physical\",\"Org Address Line Three Physical\"],\"city\":\"Vancouver\",\"state\":\"British Columbia (BC)\",\"postalCode\":\"V4V 4V4\",\"country\":\"CA\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\",\"end\":\"2040-11-30T00:00:00-08:00\"}}]}";
        
        testJsonParsedTwoOrgAddressFhirValid = orgProviderToOrganizationFhir.validateOrgPractitionerFhir(fhirValidator, parsedEncodedPractTwoOrgAddressInvalid);

        assertNotNull(testJsonParsedTwoOrgAddressFhirValid);
        assertFalse(testJsonParsedTwoOrgAddressFhirValid);
    }
    
    @Test
    public void testOrgProviderElectronicAddressToOrganizationTelecom() throws Exception {

        ProviderDetails orgProviderDetailsTest = OrgProviderDataBuilderFhirTest.getOrgProviderDetails();

        MapOrgProviderToOrganizationFhir orgProviderToPractFhir = new MapOrgProviderToOrganizationFhir();

        String testJsonParsedTwoOrgTelecomFhir = null;
        testJsonParsedTwoOrgTelecomFhir = orgProviderToPractFhir.mapOrgProviderElectronicAddressToOrgTelecom(orgProviderDetailsTest);

        String orgTelecomParsedExpectedResult = "{\"resourceType\":\"Organization\",\"telecom\":[{\"system\":\"email\",\"value\":\"unittestorg1@testing.com\",\"use\":\"work\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\",\"end\":\"2040-11-30T00:00:00-08:00\"}},{\"system\":\"other\",\"value\":\"ftp://public.ftp-servers.test_example.com/mytestdir/mytestfile.txt\",\"use\":\"work\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\"}}]}";        
        assertNotNull(testJsonParsedTwoOrgTelecomFhir);
        assertEquals(orgTelecomParsedExpectedResult, testJsonParsedTwoOrgTelecomFhir);

        // json format org telecom in FHIR result is:
//        {
//                "resourceType": "Organization",
//                "telecom": [
//                        {
//                                "system": "email",
//                                "value": "unittestorg1@testing.com",
//                                "use": "work",
//                                "period": {
//                                        "start": "2019-02-04T00:00:00-08:00",
//                                        "end": "2040-11-30T00:00:00-08:00"
//                                }
//                        },
//                        {
//                                "system": "other",
//                                "value": "ftp://public.ftp-servers.test_example.com/mytestdir/mytestfile.txt",
//                                "use": "work",
//                                "period": {
//                                        "start": "2019-02-04T00:00:00-08:00"
//                                }
//                        }
//                ]
//        }
    }
    
    @Test
    public void testOrgProviderElectronicAddressToOrganizationTelecomValid() throws Exception {
        
        ProviderDetails orgProviderDetailsTest = OrgProviderDataBuilderFhirTest.getOrgProviderDetails();

        MapOrgProviderToOrganizationFhir orgProviderToOrganizationFhir = new MapOrgProviderToOrganizationFhir();
        boolean testJsonParsedTwoOrgTelecomFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = OrgProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoOrgTelecom = orgProviderToOrganizationFhir.mapOrgProviderElectronicAddressToOrgTelecom(orgProviderDetailsTest);
//        String parseXml = orgProviderToOrganizationFhir.mapOrgProviderElectronicAddressToOrgTelecom(orgProviderDetailsTest);
//        String parsedEncodedPractTwoOrgTelecom = "{\"resourceType\":\"Organization\",\"telecom\":[{\"system\":\"email\",\"value\":\"unittestorg1@testing.com\",\"use\":\"work\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\",\"end\":\"2040-11-30T00:00:00-08:00\"}},{\"system\":\"other\",\"value\":\"ftp://public.ftp-servers.test_example.com/mytestdir/mytestfile.txt\",\"use\":\"work\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\"}}]}";
        testJsonParsedTwoOrgTelecomFhirValid = orgProviderToOrganizationFhir.validateOrgPractitionerFhir(fhirValidator, parsedEncodedPractTwoOrgTelecom);

        assertNotNull(testJsonParsedTwoOrgTelecomFhirValid);
        assertTrue(testJsonParsedTwoOrgTelecomFhirValid);
    }

    @Test
    public void testOrgProviderElectronicAddressToOrganizationTelecomInvalid() throws Exception, DataFormatException {

        MapOrgProviderToOrganizationFhir orgProviderToOrganizationFhir = new MapOrgProviderToOrganizationFhir();
        boolean testJsonParsedTwoOrgTelecomFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = OrgProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoTelecomAddressInvalid = "{\"resourceType\":\"Organization TT\",\"telecom t1\":[{\"system\":\"email\",\"value\":\"unittestorg1@testing.com\",\"use\":\"work\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\",\"end\":\"2040-11-30T00:00:00-08:00\"}},{\"system\":\"other\",\"value\":\"ftp://public.ftp-servers.test_example.com/mytestdir/mytestfile.txt\",\"use\":\"work\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\"}}]}";        
        
        testJsonParsedTwoOrgTelecomFhirValid = orgProviderToOrganizationFhir.validateOrgPractitionerFhir(fhirValidator, parsedEncodedPractTwoTelecomAddressInvalid);

        assertNotNull(testJsonParsedTwoOrgTelecomFhirValid);
        assertFalse(testJsonParsedTwoOrgTelecomFhirValid);
    }
    
    @Test
    public void testOrgProviderDetailsDataBuilderToOrganizationIdentifiers() throws Exception {
        ProviderDetails orgProviderDetailsTest = OrgProviderDataBuilderFhirTest.getOrgProviderDetails();

        MapOrgProviderToOrganizationFhir orgProviderToPractFhir = new MapOrgProviderToOrganizationFhir();

        String testJsonParsedTwoOrgIdentifierFhir = null;
        testJsonParsedTwoOrgIdentifierFhir = orgProviderToPractFhir.mapOrgProviderIdentifiersToOrgIdentifier(orgProviderDetailsTest);

        String orgIdentifierParsedExpectedResult = "{\"resourceType\":\"Organization\",\"identifier\":[{\"use\":\"usual\",\"type\":{\"text\":\"ORGID\"},\"value\":\"ORGID_123456\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\",\"end\":\"2040-11-30T00:00:00-08:00\"}},{\"use\":\"usual\",\"type\":{\"text\":\"CPN\"},\"value\":\"CPN.00000009.BC.PRS\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\",\"end\":\"2040-11-30T00:00:00-08:00\"}}]}";        assertNotNull(testJsonParsedTwoOrgIdentifierFhir);
        assertEquals(orgIdentifierParsedExpectedResult, testJsonParsedTwoOrgIdentifierFhir);

        // json format pract identifiers in FHIR result is:
//        {
//                "resourceType": "Organization",
//                "identifier": [
//                        {
//                                "use": "usual",
//                                "type": {
//                                        "text": "ORGID"
//                                },
//                                "value": "ORGID_123456",
//                                "period": {
//                                        "start": "2019-02-04T00:00:00-08:00",
//                                        "end": "2040-11-30T00:00:00-08:00"
//                                }
//                        },
//                        {
//                                "use": "usual",
//                                "type": {
//                                        "text": "CPN"
//                                },
//                                "value": "CPN.00000009.BC.PRS",
//                                "period": {
//                                        "start": "2019-02-04T00:00:00-08:00",
//                                        "end": "2040-11-30T00:00:00-08:00"
//                                }
//                        }
//                ]
//        }
    }
    
    @Test
    public void testOrgProviderDetailsDataBuilderToOrganizationIdentifierValid() throws Exception {
        
        ProviderDetails orgProviderDetailsTest = OrgProviderDataBuilderFhirTest.getOrgProviderDetails();

        MapOrgProviderToOrganizationFhir orgProviderToOrganizationFhir = new MapOrgProviderToOrganizationFhir();
        boolean testJsonParsedTwoOrgIdentifFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = OrgProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedOrgTwoOrgIdentifier = orgProviderToOrganizationFhir.mapOrgProviderIdentifiersToOrgIdentifier(orgProviderDetailsTest);
        testJsonParsedTwoOrgIdentifFhirValid = orgProviderToOrganizationFhir.validateOrgPractitionerFhir(fhirValidator, parsedEncodedOrgTwoOrgIdentifier);

        assertNotNull(testJsonParsedTwoOrgIdentifFhirValid);
        assertTrue(testJsonParsedTwoOrgIdentifFhirValid);
    }

    @Test
    public void testOrgProvDataBuilderToOrganizationIdentifierInvalid() throws Exception, DataFormatException {

        MapOrgProviderToOrganizationFhir orgProviderToOrganizationFhir = new MapOrgProviderToOrganizationFhir();
        boolean testJsonParsedTwoOrgAddressFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = OrgProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedOrgTwoOrgIdsInvalid = "{\"resourceType\":\"Organization ID\",\"identifier\":[{\"use ids\":\"temp\",\"type\":{\"text\":\"ORGID\"},\"value\":\"ORGID_123456\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\",\"end\":\"2040-11-30T00:00:00-08:00\"}},{\"use\":\"secondary\",\"type\":{\"text\":\"CPN\"},\"value\":\"CPN.00000009.BC.PRS\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\",\"end\":\"2040-11-30T00:00:00-08:00\"}}]}";        
        testJsonParsedTwoOrgAddressFhirValid = orgProviderToOrganizationFhir.validateOrgPractitionerFhir(fhirValidator, parsedEncodedOrgTwoOrgIdsInvalid);

        assertNotNull(testJsonParsedTwoOrgAddressFhirValid);
        assertFalse(testJsonParsedTwoOrgAddressFhirValid);
    }
    
    @Test
    public void testOrgProviderDetailsToOrganizationName_Alias() throws Exception {

        ProviderDetails orgProviderDetailsTest = OrgProviderDataBuilderFhirTest.getOrgProviderDetails();

        MapOrgProviderToOrganizationFhir orgProviderToPractFhir = new MapOrgProviderToOrganizationFhir();

        String testJsonParsedTwoOrgNameAliasFhir = null;
        testJsonParsedTwoOrgNameAliasFhir = orgProviderToPractFhir.mapOrgProviderNamesActiveToOrgNameAliasActive(orgProviderDetailsTest);

        String orgNameAliasParsedExpectedResult = "{\"resourceType\":\"Organization\",\"active\":true,\"name\":\"Short Org Name Official\",\"alias\":[\"Long ORG Name Official\"]}";
        
        assertNotNull(testJsonParsedTwoOrgNameAliasFhir);
        assertEquals(orgNameAliasParsedExpectedResult, testJsonParsedTwoOrgNameAliasFhir);

        // json format org name/alias in FHIR result is:
//        {
//                "resourceType": "Organization",
//                "active": true,
//                "name": "Short Org Name Official",
//                "alias": [
//                        "Long ORG Name Official"
//                ]
//        }
    }
    
    @Test
    public void testOrgProviderDetailsToOrganizationNameValid() throws Exception {
        
        ProviderDetails orgProviderDetailsTest = OrgProviderDataBuilderFhirTest.getOrgProviderDetails();

        MapOrgProviderToOrganizationFhir orgProviderToOrganizationFhir = new MapOrgProviderToOrganizationFhir();
        boolean testJsonParsedOrgNameAliasFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = OrgProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedOrgNameAlias = orgProviderToOrganizationFhir.mapOrgProviderNamesActiveToOrgNameAliasActive(orgProviderDetailsTest);
        testJsonParsedOrgNameAliasFhirValid = orgProviderToOrganizationFhir.validateOrgPractitionerFhir(fhirValidator, parsedEncodedOrgNameAlias);

        assertNotNull(testJsonParsedOrgNameAliasFhirValid);
        assertTrue(testJsonParsedOrgNameAliasFhirValid);
    }

    @Test
    public void testOrgProviderDetailsToOrganizationNameInvalid() throws Exception, DataFormatException {

        MapOrgProviderToOrganizationFhir orgProviderToOrganizationFhir = new MapOrgProviderToOrganizationFhir();
        boolean testJsonParsedTwoOrgAddressFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = OrgProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedOrgNameInvalid = "{\"resourceType\":\"Organization NN\",\"active\":true,\"name n1\":\"Short Org Name Official\",\"alias\":[\"Long ORG Name Official\"]}";        
        testJsonParsedTwoOrgAddressFhirValid = orgProviderToOrganizationFhir.validateOrgPractitionerFhir(fhirValidator, parsedEncodedOrgNameInvalid);

        assertNotNull(testJsonParsedTwoOrgAddressFhirValid);
        assertFalse(testJsonParsedTwoOrgAddressFhirValid);
    }
    
    @Test
    public void testOrgProviderTelecomDetailsToOrganizationTelecom() throws Exception {

        ProviderDetails orgProviderDetailsTest = OrgProviderDataBuilderFhirTest.getOrgProviderDetails();

        MapOrgProviderToOrganizationFhir orgProviderToPractFhir = new MapOrgProviderToOrganizationFhir();

        String testJsonParsedTwoOrgTelecomFhir = null;
        testJsonParsedTwoOrgTelecomFhir = orgProviderToPractFhir.mapOrgProviderTelecomToOrgTelecom(orgProviderDetailsTest);

        String orgTelecomParsedExpectedResult = "{\"resourceType\":\"Organization\",\"telecom\":[{\"system\":\"phone\",\"value\":\"257 321-7777 \",\"use\":\"work\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\",\"end\":\"2040-11-30T00:00:00-08:00\"}},{\"system\":\"fax\",\"value\":\"250 234-9999 ext. 12348\",\"use\":\"work\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\",\"end\":\"2040-11-30T00:00:00-08:00\"}}]}";        
        assertNotNull(testJsonParsedTwoOrgTelecomFhir);
        assertEquals(orgTelecomParsedExpectedResult, testJsonParsedTwoOrgTelecomFhir);

        // json format org telecoms in FHIR result is:
//        {
//                "resourceType": "Organization",
//                "telecom": [
//                        {
//                                "system": "phone",
//                                "value": "257 321-7777 ",
//                                "use": "work",
//                                "period": {
//                                        "start": "2019-02-04T00:00:00-08:00",
//                                        "end": "2040-11-30T00:00:00-08:00"
//                                }
//                        },
//                        {
//                                "system": "fax",
//                                "value": "250 234-9999 ext. 12348",
//                                "use": "work",
//                                "period": {
//                                        "start": "2019-02-04T00:00:00-08:00",
//                                        "end": "2040-11-30T00:00:00-08:00"
//                                }
//                        }
//                ]
//        }
    }
    
    @Test
    public void testOrgProviderTelecomDetailsToOrganizationTelecomValid() throws Exception {
        
        ProviderDetails orgProviderDetailsTest = OrgProviderDataBuilderFhirTest.getOrgProviderDetails();

        MapOrgProviderToOrganizationFhir orgProviderToOrganizationFhir = new MapOrgProviderToOrganizationFhir();
        boolean testJsonParsedOrgTwoTelecomFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = OrgProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedOrgTwoTelecoms = orgProviderToOrganizationFhir.mapOrgProviderTelecomToOrgTelecom(orgProviderDetailsTest);
        testJsonParsedOrgTwoTelecomFhirValid = orgProviderToOrganizationFhir.validateOrgPractitionerFhir(fhirValidator, parsedEncodedOrgTwoTelecoms);

        assertNotNull(testJsonParsedOrgTwoTelecomFhirValid);
        assertTrue(testJsonParsedOrgTwoTelecomFhirValid);
    }
    
    @Test
    public void testOrgProviderTelecomDetailsToOrganizationTelecomInvalid() throws Exception, DataFormatException {

        MapOrgProviderToOrganizationFhir orgProviderToOrganizationFhir = new MapOrgProviderToOrganizationFhir();
        boolean testJsonParsedTwoOrgTelecomFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = OrgProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedOrgTwoTelecomInvalid = "{\"resourceType\":\"Organization TEL\",\"telecom\":[{\"system\":\"phone\",\"value\":\"257 321-7777 \",\"use\":\"work\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\",\"end\":\"2040-11-30T00:00:00-08:00\"}},{\"system\":\"fax\",\"value\":\"250 234-9999 ext. 12348\",\"use\":\"work\",\"period\":{\"start\":\"2019-02-04T00:00:00-08:00\",\"end\":\"2040-11-30T00:00:00-08:00\"}}]}";        
        testJsonParsedTwoOrgTelecomFhirValid = orgProviderToOrganizationFhir.validateOrgPractitionerFhir(fhirValidator, parsedEncodedOrgTwoTelecomInvalid);

        assertNotNull(testJsonParsedTwoOrgTelecomFhirValid);
        assertFalse(testJsonParsedTwoOrgTelecomFhirValid);
    }

}
