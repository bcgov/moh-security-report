/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.orgprovtofhir;

import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ConditionsDto;
import ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DisciplinaryActionDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.esb.JurisdictionNameCodeDto;
import ca.bc.gov.health.plr.dto.provider.esb.NoteDto;
import ca.bc.gov.health.plr.dto.provider.esb.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.RegistryIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.RegistryUserRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto;
import ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.FhirContextFactory;
import ca.uhn.fhir.context.FhirContext;
import ca.uhn.fhir.validation.FhirValidator;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 *
 * @author dan.stepanov
 */
public class OrgProviderDataBuilderFhirTest {
    
    public static int CAL_EFF_START_DATE_YEAR = 2019;
    public static int CAL_EFF_START_DATE_MONTH = 1;
    public static int CAL_EFF_START_DATE_DAY = 4;
    public static int CAL_EFF_END_DATE_YEAR = 2040;
    public static int CAL_EFF_END_DATE_MONTH = 10;
    public static int CAL_EFF_END_DATE_DAY = 30;
    public static final Date SYSTEM_START_DATE__NULL_FHIR = null;

    public static FhirValidator initFhirValidatorTest() {
        FhirContext ctx = FhirContextFactory.forR4();
        
        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ctx.newValidator();
        fhirValidator.setValidateAgainstStandardSchema(true);
        return fhirValidator;
    }
    
    private static ProviderDetails initFullOrgProvider() {
        ProviderDetails result = new ProviderDetails();
        result.setPauthId(10L);
        result.setType("ORG");

        result.setJurisdiction(new JurisdictionNameCodeDto());
        result.getJurisdiction().setJurisdicationNameCode("jurisdictionNameCode");

        List<AddressDto> orgAddresses = new ArrayList<>();
        orgAddresses.add(getOrgAddressMail());
        orgAddresses.add(getOrgAddressPhysical());
        result.setAddresses(orgAddresses);

        List<ConditionsDto> conditions = new ArrayList<>();
        result.setConditions(conditions);

        List<CredentialsDto> credentials = new ArrayList<>();
        credentials.add(getCredentialsBD());
        credentials.add(getCredentialsMD());
        result.setCredentials(credentials);

        List<DemographicDetailsDto> demographicDetails = new ArrayList<>();
        demographicDetails.add(getDemographicDetails());
        result.setDemographicDetails(demographicDetails);

        List<DisciplinaryActionDto> disciplinaryActions = new ArrayList<>();
        result.setDisciplinaryActions(disciplinaryActions);

        List<ElectronicAddressDto> electronicAddress = new ArrayList<>();
        electronicAddress.add(getElectronicAddressEmail());
        electronicAddress.add(getElectronicAddressFtp());
        result.setElectronicAddresses(electronicAddress);

        List<ExpertiseDto> expertise = new ArrayList<>();
        expertise.add(getExpertiseLanguageFrench());
        expertise.add(getExpertiseLanguageItalian());
        expertise.add(getExpertiseSpecialityPharma());
        expertise.add(getExpertiseSpecialityFamMedicine());
        result.setExpertise(expertise);

        List<CollegeIdentifierDto> identifier = new ArrayList<>();
        identifier.add(getIdentifierOrgId());
        identifier.add(getIdentifierCPN());
        result.setIdentifiers(identifier);

        List<InformationRouteDto> informationRoute = new ArrayList<>();
        result.setInformationRoutes(informationRoute);

        List<OrgNameDto> orgNames = new ArrayList<>();
//        orgNames.add(getOrgNameUsual());
        orgNames.add(getOrgNameOfficial());        
        result.setOrgNames(orgNames);

        List<NoteDto> note = new ArrayList<>();
        result.setNotes(note);

        List<ProviderRelationshipDto> providerRelationship = new ArrayList<>();
        result.setProviderRelationships(providerRelationship);

        List<RegistryIdentifierDto> registryIdentifier = new ArrayList<>();
        result.setRegistryIdentifiers(registryIdentifier);

        List<RegistryUserRelationshipDto> registryUserRelationship = new ArrayList<>();
        result.setRegistryUserRelationships(registryUserRelationship);

        List<StatusDto> status = new ArrayList<>();
        result.setStatuses(status);

        List<TelecommunicationDto> telecommunication = new ArrayList<>();
        telecommunication.add(getTelecommunicationPhone());
        telecommunication.add(getTelecommunicationFax());
        result.setTelecommunication(telecommunication);

        List<WorkLocationDto> workLocations = new ArrayList<>();
        result.setWorkLocationList(workLocations);

        return result;
    }

    public static ProviderDetails getOrgProviderDetails() {
        ProviderDetails result = initFullOrgProvider();
        result.setConfidential(false);

        return result;
    }

    public static CollegeIdentifierDto getIdentifierCPN() {
        CollegeIdentifierDto result = new CollegeIdentifierDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("HA3");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setIdentifier("CPN.00000009.BC.PRS");
        result.setInvalidatedDate(null);
        result.setType("Test Type Org CPN");
        result.setTypeCode("CPN");
        result.setUserChid("Test User Chiid CPN");
        return result;
    }
    
    public static CollegeIdentifierDto getIdentifierOrgId() {
        CollegeIdentifierDto result = new CollegeIdentifierDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("PHSA4");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setIdentifier("ORGID_123456");
        result.setInvalidatedDate(null);
        result.setType("Test Type Org ORGID");
        result.setTypeCode("ORGID");
        result.setUserChid("Test User Chiid org id");
        return result;
    }
    
    
    public static OrgNameDto getOrgNameUsual() {
        OrgNameDto result = new OrgNameDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setType("Test Type Org Usual");
        result.setTypeCode("CRED");
        result.setTypeId(997l);//credential name
        result.setUserChid("Test User Chiid JUNIT");

        result.setName("Short Org Name Usual");
        result.setLongName("Long ORG Name Usual");
        result.setPreferred(true);

        return result;
    }
    
    public static OrgNameDto getOrgNameOfficial() {
        OrgNameDto result = new OrgNameDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setType("Test Type Org Official");
        result.setTypeCode("CURR");
        result.setTypeId(1147l);//legal/official name
        result.setUserChid("Test User Chiid JUNIT");

        result.setName("Short Org Name Official");
        result.setLongName("Long ORG Name Official");
        result.setPreferred(true);

        return result;
    }

    public static DemographicDetailsDto getDemographicDetails() {
        DemographicDetailsDto result = new DemographicDetailsDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("Test Type Gender Male");
        result.setTypeCode("M");
        result.setUserChid("Test User Chiid");

        result.setBirthCountry("Canada");
        result.setBirthCountryCode("CA");
        result.setBirthDate(getEffectiveStartDate(1980, 0, 10));
        result.setBirthProvState("BC");
        result.setDeathDate(null);
        result.setGender("Male");
        result.setGenderCode("M");
        result.setGenderId(2332l);

        return result;
    }

    public static AddressDto getOrgAddressMail() {
        AddressDto result = new AddressDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("Test Type");
        result.setTypeCode("M");
        result.setTypeId(2838l);  ///address type code Mailing

        result.setUserChid("Test User Chid JUNIT");

        result.setAddressLineOne("Org Address Line One Mail");
        result.setAddressLineTwo("Org Address Line Two Mail");
        result.setAddressLineThree("Org Address Line Three Mail");
        result.setCity("Duncan");
        result.setPostalCode("V5V 5V5");
        result.setFullAddress("Full Org Address Test Mail Sample 1");
        result.setCommunicationPurpose("Communication Purpose");
        result.setCommunicationPurposeCode("BC");
        result.setCommunicationPurposeId(2802l);
        result.setCountry("Canada");
        result.setCountryCode("CA");
        result.setCountryId(1239l);
        result.setProvinceOrStateTxt("British Columbia (BC)");

        return result;
    }
    
    public static AddressDto getOrgAddressPhysical() {
        AddressDto result = new AddressDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("Test Physical Type");
        result.setTypeCode("P");
        result.setTypeId(2839l);  ///address type code Physical

        result.setUserChid("Test User Chid JUNIT");

        result.setAddressLineOne("Org Address Line One Physical");
        result.setAddressLineTwo("Org Address Line Two Physical");
        result.setAddressLineThree("Org Address Line Three Physical");
        result.setCity("Vancouver");
        result.setPostalCode("V4V 4V4");
        result.setFullAddress("Full Org Address Test Physical Sample 2");
        result.setCommunicationPurpose("Communication Purpose");
        result.setCommunicationPurposeCode("BC");
        result.setCommunicationPurposeId(2802l);
        result.setCountry("Canada");
        result.setCountryCode("CA");
        result.setCountryId(1239l);
        result.setProvinceOrStateTxt("British Columbia (BC)");

        return result;
    }

    public static TelecommunicationDto getTelecommunicationFax() {
        TelecommunicationDto result = new TelecommunicationDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("Test Type");
        result.setTypeCode("FAX");
        result.setTypeId(2412l);
        result.setUserChid("Test User Chiid JUNIT");

        result.setAreaCode("250 ");
        result.setCommunicationPurpose("Communication Purpose");
        result.setCommunicationPurposeCode("BC");
        result.setCommunicationPurposeId(4241l);
        result.setExtension("ext. 12348");
        result.setNumber("234-9999 ");

        return result;
    }
    
    public static TelecommunicationDto getTelecommunicationPhone() {
        TelecommunicationDto result = new TelecommunicationDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("Test Type");
        result.setTypeCode("T");
        result.setTypeId(1161l);
        result.setUserChid("Test User Chiid JUNIT");

        result.setAreaCode("257 ");
        result.setCommunicationPurpose("Communication Purpose");
        result.setCommunicationPurposeCode("HC");
        result.setCommunicationPurposeId(2802l);
        result.setExtension("");
        result.setNumber("321-7777 ");

        return result;
    }

    public static ElectronicAddressDto getElectronicAddressEmail() {
        ElectronicAddressDto result = new ElectronicAddressDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        //result.setDataOwnerCode("JUNIT");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(999L);
        result.setInvalidatedDate(null);
        result.setCommunicationPurposeId(2802l);
        result.setTypeId(2049l);
        result.setTypeCode("E");
        result.setUserChid("TODO");
        result.setDataOwnerCode("MOH");
        result.setAddress("unittestorg1@testing.com");
        return result;
    }
    
    public static ElectronicAddressDto getElectronicAddressFtp() {
        ElectronicAddressDto result = new ElectronicAddressDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        //result.setDataOwnerCode("JUNIT");
        result.setEffectiveEndDate(SYSTEM_START_DATE__NULL_FHIR);
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(999L);
        result.setInvalidatedDate(null);
        result.setCommunicationPurposeId(1465l);
        result.setTypeId(2048l);
        result.setTypeCode("F");
        result.setUserChid("TODO");
        result.setDataOwnerCode("MOH");
        result.setAddress("ftp://public.ftp-servers.test_example.com/mytestdir/mytestfile.txt");
        return result;
    }

    public static ExpertiseDto getExpertiseLanguageFrench() {
        ExpertiseDto result = new ExpertiseDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("French");
        result.setTypeCode("F16");
        result.setUserChid("Test User Chiid");

        result.setRoleType("Role Type");
        result.setRoleTypeCode("LANG");
        result.setSourcesCode("Sources Code");

        return result;
    }
    
    public static ExpertiseDto getExpertiseLanguageItalian() {
        ExpertiseDto result = new ExpertiseDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("Italian");
        result.setTypeCode("I21");
        result.setUserChid("Test User Chiid");

        result.setRoleType("Role Type");
        result.setRoleTypeCode("LANG");
        result.setSourcesCode("Sources Code");

        return result;
    }
    
    public static ExpertiseDto getExpertiseSpecialityPharma() {
        ExpertiseDto result = new ExpertiseDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("Test Type Speciality Nutrition Pharma");
        result.setTypeCode("NUTRX");
        result.setUserChid("Test User Chiid");

        result.setRoleType("Role Type");
        result.setRoleTypeCode("PHARM");
        result.setSourcesCode("Sources Code Pharm");

        return result;
    }

    public static ExpertiseDto getExpertiseSpecialityFamMedicine() {
        ExpertiseDto result = new ExpertiseDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("Test Type Speciality Family Medicine");
        result.setTypeCode("A160");
        result.setUserChid("Test User Chiid");

        result.setRoleType("Role Type");
        result.setRoleTypeCode("MD");
        result.setSourcesCode("Sources Code Med");

        return result;
    }
    
    public static CredentialsDto getCredentialsBD() {
        CredentialsDto result = new CredentialsDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("Test Type BD");
        result.setTypeCode("BD");
        result.setTypeId(1430l);
        result.setUserChid("Test User Chiid");

        result.setDesignation("BSc. in Fantastic Test");
        result.setGrantingInstitution("Queen's");
        result.setInstitutionCity("Victoria");
        result.setInstitutionCountry("Canada");
        result.setInstitutionCountryCode("CA");
        result.setInstitutionProvState("British Columbia");
        result.setInstitutionProvStateCode("BC");
        result.setRegistrationNumber("Reg Number 555 for BD");
        result.setYearIssued("2000");
        result.setEquivalencyFlag(true);

        result.setId(-1l);

        return result;
    }
    
    public static CredentialsDto getCredentialsMD() {
        CredentialsDto result = new CredentialsDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("Test Type MD");
        result.setTypeCode("MD");
        result.setTypeId(1311l);
        result.setUserChid("Test User Chiid");

        result.setDesignation("Medical Degree in Hospital Test");
        result.setGrantingInstitution("UBC");
        result.setInstitutionCity("Vancouver");
        result.setInstitutionCountry("Canada");
        result.setInstitutionCountryCode("CA");
        result.setInstitutionProvState("British Columbia");
        result.setInstitutionProvStateCode("BC");
        result.setRegistrationNumber("Reg Number 222 for MD");
        result.setYearIssued("2005");
        result.setEquivalencyFlag(true);

        result.setId(-1l);

        return result;
    }

    /**
     * Creates an effective start date instance
     *
     * @param yearStart
     * @param monthStart
     * @param dayStart
     * @return Date instance for start time
     */
    public static Date getEffectiveStartDate(int yearStart, int monthStart, int dayStart) {
        Calendar cal = Calendar.getInstance();
        cal.clear();
        cal.set(yearStart, monthStart, dayStart);
        truncateTime(cal);

        return cal.getTime();
    }

    /**
     * Creates an effective end date instance
     *
     * @param yearEnd
     * @param monthEnd
     * @param dayEnd
     * @return Date instance for end time
     */
    public static Date getEffectiveEndDate(int yearEnd, int monthEnd, int dayEnd) {
        Calendar cal = Calendar.getInstance();
        cal.clear();
        cal.set(yearEnd, monthEnd, dayEnd);        
        truncateTime(cal);

        return cal.getTime();
    }
    
    /**
     * Truncates time part of a Calendar object
     * @param cal 
     */
    public static void truncateTime(Calendar cal) {
        
        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);
    }
    
}
