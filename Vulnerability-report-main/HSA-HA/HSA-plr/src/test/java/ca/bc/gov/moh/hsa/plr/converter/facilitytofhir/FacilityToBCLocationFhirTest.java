/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.facilitytofhir;

import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import ca.bc.gov.health.plr.dto.facility.esb.CivicAddressDto;
import ca.bc.gov.health.plr.dto.facility.esb.FacilityDetailsDto;
import ca.bc.gov.health.plr.dto.facility.esb.FacilityDto;
import ca.bc.gov.health.plr.dto.facility.esb.FacilityIdentifierDto;
import ca.bc.gov.health.plr.dto.facility.esb.FacilityNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.NoteDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.ProviderFhirConstants;
import ca.bc.gov.moh.hsa.plr.esb.service.util.GetFacilityIFC;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;
import org.junit.Ignore;
import org.junit.Test;

/**
 *
 * @author dan.stepanov
 */
public class FacilityToBCLocationFhirTest {

    @Test
    public void fullFacilityTest() {
        FacilityDto dto = FacilityDataBuilderFhirTest.getFacilityLocationDetails();
        FHIRFactory factory = new FHIRFactory("R4");

        Object bundle = factory.newBundle();
        factory.getSetBundleAttributes().setBundleType(bundle, FHIRFactory.BundleType.TRANSACTION);
        factory.getSetBundleAttributes().setBundleId(bundle, "TODO Distrib Event Item id");
        factory.getSetBundleAttributes().setBundleTimeStamp(bundle, Calendar.getInstance().getTime());

        // add the location resource request (PUT or add Location)
        Object request = factory.newBundleEntryRequestComponent();
        factory.getSetBundleAttributes().setBundleEntryRequestComponentMethod(request, FHIRFactory.HttpMethod.POST);
        factory.getSetBundleAttributes().setBundleEntryRequestComponentURL(request, "/Location/" + GetFacilityIFC.getFacilityIFC(dto));

        // add location resource
        Object location = factory.newBCLocation();
        factory.getSetLocationAttributes().setLocationId(location, GetFacilityIFC.getFacilityIFC(dto));
        factory.getSetBundleAttributes().addBundleEntry(bundle, location, ProviderFhirConstants.FHIR_URL + "/Location/" + GetFacilityIFC.getFacilityIFC(dto), request);
        
        // add identifiers to location
        DistributionNoticationToFHIRConverter_ForLocation.addFacilityIdentifiers(factory, location, dto);
        DistributionNoticationToFHIRConverter_ForLocation.addFacilityName(factory, location, dto);
        DistributionNoticationToFHIRConverter_ForLocation.addFacilityCivicAddress(factory, location, dto);
        DistributionNoticationToFHIRConverter_ForLocation.addFacilityDetail(factory, location, dto);
        DistributionNoticationToFHIRConverter_ForLocation.addFacilityAddress(factory, location, dto);
        DistributionNoticationToFHIRConverter_ForLocation.addFacilityTelephone(factory, location, dto);
        DistributionNoticationToFHIRConverter_ForLocation.addFacilityElectronicAddress(factory, location, dto);
        DistributionNoticationToFHIRConverter_ForLocation.addFacilityNote(factory, location, dto);

        System.out.println(factory.encodeToString(bundle));
    }

    @Test
    public void BCNameTest() {
        FHIRFactory factory = new FHIRFactory("R4BC1");
        Object name = factory.newBCName();
        factory.getSetNameAttributes().setNameValue(name, "Bob");
        Date start = Calendar.getInstance().getTime();
        Date end = Calendar.getInstance().getTime();
        factory.getSetNameAttributes().setNamePeriod(name, start, end);
        factory.getSetNameAttributes().setNameERCOwner(name, "erc", "owner");
        assertEquals(((org.hl7.fhir.r4.model.StringType)name).getValue(), "Bob");
        org.hl7.fhir.r4bc1.model.BCName n = (org.hl7.fhir.r4bc1.model.BCName)name;
        org.hl7.fhir.r4.model.Period p = (org.hl7.fhir.r4.model.Period)n.getPeriod();
        assertEquals(p.getStart(), start);
        assertEquals(p.getEnd(), end);
        org.hl7.fhir.r4bc1.model.BCEndReasonCode_OwnerCodeExtension ercO = (org.hl7.fhir.r4bc1.model.BCEndReasonCode_OwnerCodeExtension)n.getEndReason_OwnerCode();
        assertEquals(ercO.getEndReasonCode().getCoding().get(0).getCode(), "erc");
        assertEquals(ercO.getCustodianId().getAssigner().getDisplay(), "owner");
        assertEquals(ercO.getEndReasonCode().getCoding().get(0).getSystem(), ProviderFhirConstants.BC_END_REASON_CODING_SYSTEM_LINK);    }
    
    @Test
    public void addFacilityDetailsToBCLocationTest() {
        FHIRFactory factory = new FHIRFactory("R4BC1");
        Date start = Calendar.getInstance().getTime();
        Date end = Calendar.getInstance().getTime();
        FacilityDetailsDto fDto = new FacilityDetailsDto();
        fDto.setEndReasonCode("erc");
        fDto.setDataOwnerCode("owner");
        fDto.setEffectiveStartDate(start);
        fDto.setEffectiveEndDate(end);
        fDto.setCampusOfCare("campus");
        fDto.setContactName("contact");
        fDto.setOperatorName("operator");
        fDto.setOwnerName("owner");
        fDto.setTypeCode("type");
        fDto.setPurposeCode("purpose");
        fDto.setAdditionalInfo("additional");
        Object location = factory.newBCLocation();
        MapFacilityToBCLocationFhir.addFacilityDetailsToBCLocation(factory, fDto, location);
        org.hl7.fhir.r4bc1.model.BCLocation BCLocation = (org.hl7.fhir.r4bc1.model.BCLocation)location;
        org.hl7.fhir.r4bc1.model.BCFacilityDetailsExtension fExtension = ((org.hl7.fhir.r4bc1.model.BCLocation)location).getBcFacilityDetailsExtension();
        org.hl7.fhir.r4bc1.model.BCEndReasonCode_OwnerCodeExtension BCERCOwner = fExtension.getEndReason_OwnerCode();
        assertEquals(BCERCOwner.getCustodianId().getAssigner().getDisplay(), "owner");
        assertEquals(BCERCOwner.getEndReasonCode().getCoding().get(0).getCode(), "erc");
        assertEquals(fExtension.getPeriod().getStart(), start);
        assertEquals(fExtension.getPeriod().getEnd(), end);
        assertEquals(fExtension.getCampusOfCare().getValue(), "campus");
        assertEquals(fExtension.getContactName().getValue(), "contact");
        assertEquals(fExtension.getOperatorName().getValue(), "operator");
        assertEquals(fExtension.getOwnerName().getValue(), "owner");
        assertEquals(BCLocation.getType().get(0).getText(), "type");
        assertEquals(BCLocation.getPhysicalType().getText(), "purpose");
        assertEquals(BCLocation.getDescription(), "additional");
    }
    
    @Test
    public void addFacilityCivicAddressToBCLocationTest() {
        FHIRFactory factory = new FHIRFactory("R4BC1");
        Date start = Calendar.getInstance().getTime();
        Date end = Calendar.getInstance().getTime();
        CivicAddressDto civicDto = new CivicAddressDto();
        civicDto.setEffectiveEndDate(end);
        civicDto.setEffectiveStartDate(start);
        civicDto.setAddressLineOne("line one");
        civicDto.setAddressLineTwo("line two");
        civicDto.setAddressLineThree("line three");
        civicDto.setCity("city");
        civicDto.setProvinceOrStateTxt("state");
        civicDto.setCountryCode("CA");
        civicDto.setLatitude(new BigDecimal(100));
        civicDto.setLongitude(new BigDecimal(101));
        civicDto.setChsaHealthAreaCode(123l);
        civicDto.setEndReasonCode("erc");
        civicDto.setDataOwnerCode("owner");
        Object location = factory.newBCLocation();
        MapFacilityToBCLocationFhir.addFacilityCivicAddressToBCLocation(factory, civicDto, location);
        org.hl7.fhir.r4bc1.model.BCLocation BCLocation = (org.hl7.fhir.r4bc1.model.BCLocation)location;
        org.hl7.fhir.r4bc1.model.BCAddress BCAddress = (org.hl7.fhir.r4bc1.model.BCAddress)BCLocation.getAddress();
        org.hl7.fhir.r4bc1.model.BCEndReasonCode_OwnerCodeExtension BCERCOwner = (org.hl7.fhir.r4bc1.model.BCEndReasonCode_OwnerCodeExtension)BCAddress.getEndReason_OwnerCode();
        org.hl7.fhir.r4.model.Period period = BCAddress.getPeriod();
        org.hl7.fhir.r4bc1.model.BCFacilityCHSAExtension chsa = BCLocation.getBcFacilityCHSAExtension();
        assertEquals(chsa.getFacilityCHSACode().getText(), "123");
        assertEquals(BCERCOwner.getCustodianId().getAssigner().getDisplay(), "owner");
        assertEquals(BCERCOwner.getEndReasonCode().getCoding().get(0).getCode(), "erc");
        assertEquals(period.getStart(), start);
        assertEquals(period.getEnd(), end);
        assertEquals(BCAddress.getText(), "line one line two line three");
        assertEquals(BCAddress.getLine().get(0).getValue(), "line one");
        assertEquals(BCAddress.getLine().get(1).getValue(), "line two");
        assertEquals(BCAddress.getLine().get(2).getValue(), "line three");
        assertEquals(BCAddress.getCity(), "city");
        assertEquals(BCAddress.getState(), "state");
        assertEquals(BCAddress.getCountry(), "CA");
        assertEquals(BCLocation.getPosition().getLatitude(), new BigDecimal(100));
        assertEquals(BCLocation.getPosition().getLongitude(), new BigDecimal(101));
        assertEquals(BCAddress.getType(), org.hl7.fhir.r4.model.Address.AddressType.PHYSICAL);
        assertEquals(BCAddress.getBcPurposeCodeExtension().getCoding().get(0).getCode(), "BC");
    }
    
    @Test
    public void addFacilityMailingAddressToBCLocationTest() {
        FHIRFactory factory = new FHIRFactory("R4BC1");
        Date start = Calendar.getInstance().getTime();
        Date end = Calendar.getInstance().getTime();
        AddressDto addrDto = new AddressDto();
        addrDto.setEffectiveEndDate(end);
        addrDto.setEffectiveStartDate(start);
        addrDto.setAddressLineOne("line one");
        addrDto.setAddressLineTwo("line two");
        addrDto.setAddressLineThree("line three");
        addrDto.setCity("city");
        addrDto.setProvinceOrStateTxt("state");
        addrDto.setCountryCode("CA");
        addrDto.setEndReasonCode("erc");
        addrDto.setDataOwnerCode("owner");
        Object location = factory.newBCLocation();
        MapFacilityToBCLocationFhir.addFacilityMailAddressToBCLocationAddress(factory, addrDto, location);
        org.hl7.fhir.r4bc1.model.BCLocation BCLocation = (org.hl7.fhir.r4bc1.model.BCLocation)location;
        org.hl7.fhir.r4bc1.model.BCAddress BCAddress = (org.hl7.fhir.r4bc1.model.BCAddress)BCLocation.getBcAddress();
        org.hl7.fhir.r4bc1.model.BCEndReasonCode_OwnerCodeExtension BCERCOwner = (org.hl7.fhir.r4bc1.model.BCEndReasonCode_OwnerCodeExtension)BCAddress.getEndReason_OwnerCode();
        org.hl7.fhir.r4.model.Period period = BCAddress.getPeriod();
        assertEquals(BCERCOwner.getCustodianId().getAssigner().getDisplay(), "owner");
        assertEquals(BCERCOwner.getEndReasonCode().getCoding().get(0).getCode(), "erc");
        assertEquals(period.getStart(), start);
        assertEquals(period.getEnd(), end);
        assertEquals(BCAddress.getText(), "line one line two line three");
        assertEquals(BCAddress.getLine().get(0).getValue(), "line one");
        assertEquals(BCAddress.getLine().get(1).getValue(), "line two");
        assertEquals(BCAddress.getLine().get(2).getValue(), "line three");
        assertEquals(BCAddress.getCity(), "city");
        assertEquals(BCAddress.getState(), "state");
        assertEquals(BCAddress.getCountry(), "CA");
        assertEquals(BCAddress.getType(), org.hl7.fhir.r4.model.Address.AddressType.POSTAL);
        assertEquals(BCAddress.getBcPurposeCodeExtension().getCoding().get(0).getCode(), "BC");
    }
 

    @Test
    public void addFacilityNameToBCLocationTest() {
        FHIRFactory factory = new FHIRFactory("R4BC1");
        Date start = Calendar.getInstance().getTime();
        Date end = Calendar.getInstance().getTime();
        FacilityNameDto nameDto = new FacilityNameDto();
        nameDto.setDescription("alias");
        nameDto.setName("name");
        nameDto.setDataOwnerCode("owner");
        nameDto.setEffectiveStartDate(start);
        nameDto.setEffectiveEndDate(end);
        nameDto.setEndReasonCode("erc");
        Object location = factory.newBCLocation();
        MapFacilityToBCLocationFhir.addFacilityNameToBCLocation(factory, nameDto, location);
        org.hl7.fhir.r4bc1.model.BCLocation bcLocation = (org.hl7.fhir.r4bc1.model.BCLocation) location;
        assertEquals(bcLocation.getAlias().get(0).getValue(), "alias");
        assertEquals(bcLocation.getNameElement().getValue(), "name");
        org.hl7.fhir.r4bc1.model.BCName name = (org.hl7.fhir.r4bc1.model.BCName)bcLocation.getNameElement();
        org.hl7.fhir.r4bc1.model.BCEndReasonCode_OwnerCodeExtension ercO = name.getEndReason_OwnerCode();
        assertEquals(ercO.getCustodianId().getAssigner().getDisplay(), "owner");
//        assertEquals(ercO.getEndReasonCode().getText(), "erc");
        org.hl7.fhir.r4.model.Period period = (org.hl7.fhir.r4.model.Period)name.getPeriod();
        assertEquals(period.getStart(), start);
        assertEquals(period.getEnd(), end);
    }
    
    @Ignore
    @Test
    public void addFacilityIdentifiersToBCLocationTest() {
        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<FacilityIdentifierDto> facilityIdentifiers = new ArrayList();
        Date start = Calendar.getInstance().getTime();
        Date end = Calendar.getInstance().getTime();
        FacilityIdentifierDto id = new FacilityIdentifierDto();
        id.setDataOwnerCode("Owner");
        id.setEndReasonCode("ERC");
        id.setEffectiveStartDate(start);
        id.setEffectiveEndDate(end);
        id.setIdentifier("theID");
        id.setIdentifierTypeCode("theType");
        facilityIdentifiers.add(id);
        Object location = factory.newBCLocation();
        MapFacilityToBCLocationFhir.addFacilityIdentifiersToBCLocation(factory, facilityIdentifiers, location);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLocation) location).getIdentifier().size(), 1);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getIdentifier().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "Owner");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getIdentifier().get(0)).getEndReason_OwnerCode().getEndReasonCode().getText(), "ERC");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getIdentifier().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getIdentifier().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getIdentifier().get(0)).getValue(), "theID");
        assertTrue(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getIdentifier().get(0)).getSystem().contains("theType"));

        Date start2 = Calendar.getInstance().getTime();
        Date end2 = Calendar.getInstance().getTime();
        FacilityIdentifierDto id2 = new FacilityIdentifierDto();
        id2.setDataOwnerCode("Owner2");
        id2.setEndReasonCode("ERC2");
        id2.setEffectiveStartDate(start2);
        id2.setEffectiveEndDate(end2);
        id2.setIdentifier("theID2");
        id2.setIdentifierTypeCode("theType2");
        facilityIdentifiers.add(id2);
        MapFacilityToBCLocationFhir.addFacilityIdentifiersToBCLocation(factory, facilityIdentifiers, location);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLocation) location).getIdentifier().size(), 3);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getIdentifier().get(2)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "Owner2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getIdentifier().get(2)).getEndReason_OwnerCode().getEndReasonCode().getText(), "ERC2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getIdentifier().get(2)).getPeriod().getStart(), start2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getIdentifier().get(2)).getPeriod().getEnd(), end2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getIdentifier().get(2)).getValue(), "theID2");
        assertTrue(((org.hl7.fhir.r4bc1.model.BCIdentifier) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getIdentifier().get(2)).getSystem().contains("theType2"));
    }

    @Ignore
    @Test
    public void addFacilityNotesToBCLocationTest() {
        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<NoteDto> facilityNotes = new ArrayList();
        Date start = Calendar.getInstance().getTime();
        Date end = Calendar.getInstance().getTime();
        NoteDto note = new NoteDto();
        note.setDataOwnerCode("Owner");
        note.setEndReasonCode("ERC");
        note.setEffectiveStartDate(start);
        note.setEffectiveEndDate(end);
        note.setIdentifier("theNoteID");
        note.setNoteText("theNoteText");
        facilityNotes.add(note);
        Object location = factory.newBCLocation();
        MapFacilityNotesToBCNotesExtensionFhir.addFacilityNotesToBCLocation(factory, facilityNotes, location);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLocation) location).getBcNoteExtension().size(), 1);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getBcNoteExtension().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "Owner");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getBcNoteExtension().get(0)).getEndReason_OwnerCode().getEndReasonCode().getCoding().get(0).getCode(), "ERC");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getBcNoteExtension().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getBcNoteExtension().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getBcNoteExtension().get(0)).getNoteIdentifier().getValue(), "theNoteID");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getBcNoteExtension().get(0)).getNoteIdentifier().getUse().toCode(), org.hl7.fhir.r4.model.Identifier.IdentifierUse.USUAL);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getBcNoteExtension().get(0)).getNoteText().getValue(), "theNoteText");

        Date start2 = Calendar.getInstance().getTime();
        Date end2 = Calendar.getInstance().getTime();
        NoteDto note2 = new NoteDto();
        note2.setDataOwnerCode("Owner2");
        note2.setEndReasonCode("ERC2");
        note2.setEffectiveStartDate(start2);
        note2.setEffectiveEndDate(end2);
        note2.setIdentifier("theNoteID2");
        note2.setNoteText("theNoteText2");
        facilityNotes.add(note2);
        MapFacilityNotesToBCNotesExtensionFhir.addFacilityNotesToBCLocation(factory, facilityNotes, location);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLocation) location).getBcNoteExtension().size(), 3);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getBcNoteExtension().get(2)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "Owner2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getBcNoteExtension().get(2)).getEndReason_OwnerCode().getEndReasonCode().getText(), "ERC2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getBcNoteExtension().get(2)).getPeriod().getStart(), start2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getBcNoteExtension().get(2)).getPeriod().getEnd(), end2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getBcNoteExtension().get(2)).getNoteIdentifier().getValue(), "theNoteID2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getBcNoteExtension().get(2)).getNoteIdentifier().getUse(), org.hl7.fhir.r4.model.Identifier.IdentifierUse.USUAL);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCNoteExtension) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getBcNoteExtension().get(2)).getNoteText().getValue(), "theNoteText2");
    }

    @Test
    public void addFacilityEAddressToBCLocationTest() {
        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<ElectronicAddressDto> eAddresses = new ArrayList();
        Date start = Calendar.getInstance().getTime();
        Date end = Calendar.getInstance().getTime();
        ElectronicAddressDto elec = new ElectronicAddressDto();
        elec.setDataOwnerCode("Owner");
        elec.setEndReasonCode("ERC");
        elec.setEffectiveStartDate(start);
        elec.setEffectiveEndDate(end);
        elec.setAddress("email@email.com");
        elec.setCommunicationPurposeCode("HC");
        elec.setTypeCode("EMAIL");
        eAddresses.add(elec);
        Object location = factory.newBCLocation();
        MapFacilityToBCLocationFhir.addFacilityElectronicAddressToBCLocation(factory, eAddresses, location);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().size(), 1);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "Owner");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getEndReason_OwnerCode().getEndReasonCode().getText(), "ERC");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getValue(), "email@email.com");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getBcPurposeCodeExtension().getCoding().get(0).getCode(), "HC");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getSystem(), org.hl7.fhir.r4.model.ContactPoint.ContactPointSystem.EMAIL);

        Date start2 = Calendar.getInstance().getTime();
        Date end2 = Calendar.getInstance().getTime();
        ElectronicAddressDto elec2 = new ElectronicAddressDto();
        elec2.setDataOwnerCode("Owner2");
        elec2.setEndReasonCode("ERC2");
        elec2.setEffectiveStartDate(start2);
        elec2.setEffectiveEndDate(end2);
        elec2.setAddress("email@email2.com");
        elec2.setCommunicationPurposeCode("BC");
        elec2.setTypeCode("H");
        eAddresses.add(elec2);
        MapFacilityToBCLocationFhir.addFacilityElectronicAddressToBCLocation(factory, eAddresses, location);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().size(), 3);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "Owner2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getEndReason_OwnerCode().getEndReasonCode().getText(), "ERC2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getPeriod().getStart(), start2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getPeriod().getEnd(), end2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getValue(), "email@email2.com");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getBcPurposeCodeExtension().getCoding().get(0).getCode(), "BC");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getSystem(), org.hl7.fhir.r4.model.ContactPoint.ContactPointSystem.URL);
    }

    @Test
    public void addFacilityTelecomToBCLocationTest() {
        FHIRFactory factory = new FHIRFactory("R4BC1");
        List<TelecommunicationDto> telecoms = new ArrayList();
        Date start = Calendar.getInstance().getTime();
        Date end = Calendar.getInstance().getTime();
        TelecommunicationDto tele = new TelecommunicationDto();
        tele.setDataOwnerCode("Owner");
        tele.setEndReasonCode("ERC");
        tele.setEffectiveStartDate(start);
        tele.setEffectiveEndDate(end);
        tele.setAreaCode("255");
        tele.setNumber("2345678");
        tele.setExtension("x2");
        tele.setCommunicationPurposeCode("HC");
        tele.setTypeCode("T");
        telecoms.add(tele);
        Object location = factory.newBCLocation();
        MapFacilityToBCLocationFhir.addFacilityTelecomToBCLocation(factory, telecoms, location);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().size(), 1);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "Owner");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getEndReason_OwnerCode().getEndReasonCode().getText(), "ERC");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getPeriod().getStart(), start);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getPeriod().getEnd(), end);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getValue(), "2552345678x2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getAreaCode().getValue(), "255");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getLocalNumber().getValue(), "2345678");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getNumberExtension().getValue(), "x2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getBcPurposeCodeExtension().getCoding().get(0).getCode(), "HC");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(0)).getSystem(), org.hl7.fhir.r4.model.ContactPoint.ContactPointSystem.PHONE);

        Date start2 = Calendar.getInstance().getTime();
        Date end2 = Calendar.getInstance().getTime();
        TelecommunicationDto tele2 = new TelecommunicationDto();
        tele2.setDataOwnerCode("Owner2");
        tele2.setEndReasonCode("ERC2");
        tele2.setEffectiveStartDate(start2);
        tele2.setEffectiveEndDate(end2);
        tele2.setAreaCode("222");
        tele2.setNumber("2345622");
        tele2.setExtension("x3");
        tele2.setCommunicationPurposeCode("BC");
        tele2.setTypeCode("FAX");
        telecoms.add(tele2);
        MapFacilityToBCLocationFhir.addFacilityTelecomToBCLocation(factory, telecoms, location);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().size(), 3);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getEndReason_OwnerCode().getCustodianId().getAssigner().getDisplay(), "Owner2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getEndReason_OwnerCode().getEndReasonCode().getText(), "ERC2");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getPeriod().getStart(), start2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getPeriod().getEnd(), end2);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getValue(), "2222345622x3");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getAreaCode().getValue(), "222");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getLocalNumber().getValue(), "2345622");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getNumberExtension().getValue(), "x3");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getBcPurposeCodeExtension().getCoding().get(0).getCode(), "BC");
        assertEquals(((org.hl7.fhir.r4bc1.model.BCContactPoint) ((org.hl7.fhir.r4bc1.model.BCLocation) location).getTelecom().get(2)).getSystem(), org.hl7.fhir.r4.model.ContactPoint.ContactPointSystem.FAX);
    }

}
