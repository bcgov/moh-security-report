/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.dtoToPrsxml;

import ca.bc.gov.moh.hsa.plr.converter.util.NullsTypeConverterTestConstants;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.SENDINGUSERCHID;
import java.util.List;
import org.junit.Assert;
import prs2.whic.org.GRSADDRESS;
import prs2.whic.org.GRSELECTRONICADDRESS;
import prs2.whic.org.GRSIDENTIFIER;
import prs2.whic.org.GRSMESSAGE;
import prs2.whic.org.GRSPERSONALNAME;
import prs2.whic.org.GRSRELATEDRU;
import prs2.whic.org.GRSTELEPHONE;
import prs2.whic.org.PRSCONDITION;
import prs2.whic.org.PRSDEMOGRAPHICDETAIL;
import prs2.whic.org.PRSDISCIPLINARYACTION;
import prs2.whic.org.PRSINFORMATIONROUTE;
import prs2.whic.org.PRSNOTE;
import prs2.whic.org.PRSPROVIDER;
import prs2.whic.org.PRSPROVIDERCREDENTIAL;
import prs2.whic.org.PRSPROVIDEREXPERTISE;
import prs2.whic.org.PRSPROVRURELN;
import prs2.whic.org.PRSSTATUS;
import prs2.whic.org.PRSWORKLOCATION;
import prs2.whic.org.PRSWORKLOCATIONADDRESS;
import prs2.whic.org.PRSWORKLOCATIONDETAIL;
import prs2.whic.org.PRSWORKLOCATIONELECTRONICADDRESS;
import prs2.whic.org.PRSWORKLOCATIONINFORMATIONROUTE;
import prs2.whic.org.PRSWORKLOCATIONTELEPHONE;

/**
 *
 * @author conrad.gustafson
 */
public class NullsMaintainProviderResponseToPLRXMLOutputAsserter implements NullsTypeConverterTestConstants {

    public static void assertFields(GRSMESSAGE output) {
        assertGRSMessageFields(output);
        assertPRSProvider(output.getGRSPAYLOAD().getPRSPROVIDER().get(0));
    }

    public static void assertGRSMessageFields(GRSMESSAGE grsMessage) {
        Assert.assertEquals(UNIQUEMESSAGECHID, grsMessage.getUNIQUEMESSAGECHID());

        Assert.assertEquals(SENDINGFACILITYCHID, grsMessage.getSENDINGFACILITYCHID());
        Assert.assertEquals(RECEIVINGFACILITYCHID, grsMessage.getRECEIVINGFACILITYCHID());

        Assert.assertEquals(SENDINGAPPLICATIONCHID, grsMessage.getSENDINGAPPLICATIONCHID());
        Assert.assertEquals(RECEIVINGAPPLICATIONCHID, grsMessage.getRECEIVINGAPPLICATIONCHID());

        Assert.assertEquals(SENDINGORGANISATIONCHID, grsMessage.getSENDINGORGANISATIONCHID());
        Assert.assertEquals(RECEIVINGORGANISATIONCHID, grsMessage.getRECEIVINGORGANISATIONCHID());

        Assert.assertEquals(SENDINGJURISDICTIONCODE, grsMessage.getSENDINGJURISDICTIONCODE());
        Assert.assertEquals(RECEIVINGJURISDICTIONCODE, grsMessage.getGRSPAYLOAD().getPRSPROVIDER().get(0).getJURISDICTIONCODE());

        Assert.assertEquals(INTERACTIONTYPECODE, grsMessage.getINTERACTIONTYPECODE());
        Assert.assertEquals(ENVIRONMENTCODE, grsMessage.getENVIRONMENTCODE());
        Assert.assertEquals(VERSIONNUMBERCODE, grsMessage.getVERSIONNUMBERCODE());

        Assert.assertEquals(RECEIVINGNETWORKADDRESSCHID, grsMessage.getRECEIVINGNETWORKADDRESSCHID());
        Assert.assertEquals(SENDINGNETWORKADDRESSCHID, grsMessage.getSENDINGNETWORKADDRESSCHID());

        Assert.assertEquals(MESSAGEDTM, grsMessage.getMESSAGEDTM());
        Assert.assertEquals(ORIGINALEVENTDTM, grsMessage.getORIGINALEVENTDTM());

        Assert.assertEquals(RESPONSIBLEUSERCHID, grsMessage.getRESPONSIBLEUSERCHID());

        Assert.assertEquals(SOURCEUSERID, grsMessage.getGRSPAYLOAD().getPRSPROVIDER().get(0).getREGISTRYUSERORGCHID());
        Assert.assertEquals(SENDINGUSERCHID, grsMessage.getSENDINGUSERCHID());
    }

    public static void assertPRSProvider(PRSPROVIDER prsProvider) {

        Assert.assertEquals(PROVIDER_PARTYTYPECODE, prsProvider.getPARTYTYPECODE());
        Assert.assertEquals(PROVIDER_HPTCODE, prsProvider.getHPTCODE());

        assertProviderIdentifiers(prsProvider);
        assertProviderNames(prsProvider);
        assertProviderAddresses(prsProvider);
        assertProviderPhones(prsProvider);
        assertElectronicAddresses(prsProvider);
        assertPrsConditions(prsProvider);
        assertDemographicDetails(prsProvider);
        assertDisciplinaryAction(prsProvider);
        assertInformationRoute(prsProvider);
        assertNote(prsProvider);
        assertRegistryUserRelationships(prsProvider);
        assertCredentials(prsProvider);
        assertExpertises(prsProvider);
        assertStatuses(prsProvider);
        assertWorkLocations(prsProvider);

    }

    public static void assertProviderIdentifiers(PRSPROVIDER providerOutput) {
        List<GRSIDENTIFIER> grsIdentifiers = providerOutput.getGRSIDENTIFIER();
        Assert.assertTrue(grsIdentifiers.size() == 1);
        GRSIDENTIFIER grsIdentifier = grsIdentifiers.get(0);

        Assert.assertEquals(IDENTIFIER_PROVIDERCHID, grsIdentifier.getPROVIDERCHID());
        Assert.assertEquals(IDENTIFIER_IDENTIFIERTYPECODE, grsIdentifier.getIDENTIFIERTYPECODE());
        Assert.assertEquals(IDENTIFIER_EFFECTIVESTARTDATE, grsIdentifier.getEFFECTIVESTARTDATE());
        Assert.assertEquals(IDENTIFIER_EFFECTIVEENDDATE, grsIdentifier.getEFFECTIVEENDDATE());
        Assert.assertEquals(IDENTIFIER_ENDREASONCODE, grsIdentifier.getENDREASONCODE());
        Assert.assertEquals(IDENTIFIER_DATAOWNERCODE, grsIdentifier.getDATAOWNERCODE());
    }

    public static void assertProviderNames(PRSPROVIDER providerOutput) {
        List<GRSPERSONALNAME> grsPersonalNames = providerOutput.getGRSPERSONALNAME();
        Assert.assertTrue(grsPersonalNames.size() == 1);
        GRSPERSONALNAME grsPersonalName = grsPersonalNames.get(0);

        Assert.assertEquals(NAME_NAMETYPECODE, grsPersonalName.getNAMETYPECODE());
        // Since it comes in as boolean, it can't really be null
        Assert.assertEquals("N", grsPersonalName.getPNAMEPREFERREDFLAG());
        Assert.assertEquals(NAME_PRSNSURNAMETXT, grsPersonalName.getPRSNSURNAMETXT());
        Assert.assertEquals(NAME_PRSNFIRSTGIVENNAMETXT, grsPersonalName.getPRSNFIRSTGIVENNAMETXT());
        Assert.assertEquals(NAME_PRSNSECONDGIVENNAMETXT, grsPersonalName.getPRSNSECONDGIVENNAMETXT());
        Assert.assertEquals(NAME_PRSNTHIRDGIVENNAMETXT, grsPersonalName.getPRSNTHIRDGIVENNAMETXT());
        Assert.assertEquals(NAME_PRSNSUFFIXTXT, grsPersonalName.getPRSNSUFFIXTXT());
        Assert.assertEquals(NAME_PRSNPREFIXTXT, grsPersonalName.getPRSNPREFIXTXT());
        Assert.assertEquals(NAME_EFFECTIVESTARTDATE, grsPersonalName.getEFFECTIVESTARTDATE());
        Assert.assertEquals(NAME_EFFECTIVEENDDATE, grsPersonalName.getEFFECTIVEENDDATE());
        Assert.assertEquals(NAME_ENDREASONCODE, grsPersonalName.getENDREASONCODE());
        Assert.assertEquals(NAME_DATAOWNERCODE, grsPersonalName.getDATAOWNERCODE());
    }

    public static void assertProviderAddresses(PRSPROVIDER providerOutput) {
        List<GRSADDRESS> grsAddresses = providerOutput.getGRSADDRESS();
        Assert.assertTrue(grsAddresses.size() == 1);
        GRSADDRESS grsAddress = grsAddresses.get(0);

        Assert.assertEquals(ADDRESS_CMNCTNPRPSTYPCD, grsAddress.getCMNCTNPRPSTYPCD());
        Assert.assertEquals(ADDRESS_ADDRESSTYPECODE, grsAddress.getADDRESSTYPECODE());
        Assert.assertEquals(ADDRESS_ADDRESSLINE1TXT, grsAddress.getADDRESSLINE1TXT());
        Assert.assertEquals(ADDRESS_ADDRESSLINE2TXT, grsAddress.getADDRESSLINE2TXT());
        Assert.assertEquals(ADDRESS_ADDRESSLINE3TXT, grsAddress.getADDRESSLINE3TXT());
        Assert.assertEquals(ADDRESS_ADDRESSLINE4TXT, grsAddress.getADDRESSLINE4TXT());
        Assert.assertEquals(ADDRESS_CITYTXT, grsAddress.getCITYTXT());
        Assert.assertEquals(ADDRESS_PROVINCEORSTATETXT, grsAddress.getPROVINCEORSTATETXT());
        Assert.assertEquals(ADDRESS_POSTALCODEORZIPTXT, grsAddress.getPOSTALCODEORZIPTXT());
        Assert.assertEquals(ADDRESS_COUNTRYCODE, grsAddress.getCOUNTRYCODE());
        Assert.assertEquals(ADDRESS_EFFECTIVESTARTDATE, grsAddress.getEFFECTIVESTARTDATE());
        Assert.assertEquals(ADDRESS_EFFECTIVEENDDATE, grsAddress.getEFFECTIVEENDDATE());
        Assert.assertEquals(ADDRESS_ENDREASONCODE, grsAddress.getENDREASONCODE());
        Assert.assertEquals(ADDRESS_DATAOWNERCODE, grsAddress.getDATAOWNERCODE());

    }

    public static void assertProviderPhones(PRSPROVIDER providerOutput) {
        List<GRSTELEPHONE> grsTelephones = providerOutput.getGRSTELEPHONE();
        Assert.assertTrue(grsTelephones.size() == 1);
        GRSTELEPHONE grsTelephone = grsTelephones.get(0);

        Assert.assertEquals(PHONE_CMNCTNPRPSTYPCD, grsTelephone.getCMNCTNPRPSTYPCD());
        Assert.assertEquals(PHONE_TLCMNCTNNMBRTYPCD, grsTelephone.getTLCMNCTNNMBRTYPCD());
        Assert.assertEquals(PHONE_AREACODENUM, grsTelephone.getAREACODENUM());
        Assert.assertEquals(PHONE_TELECOMMUNICATIONNMBRNUM, grsTelephone.getTELECOMMUNICATIONNMBRNUM());
        Assert.assertEquals(PHONE_EXTENSIONNUM, grsTelephone.getEXTENSIONNUM());
        Assert.assertEquals(PHONE_EFFECTIVESTARTDATE, grsTelephone.getEFFECTIVESTARTDATE());
        Assert.assertEquals(PHONE_EFFECTIVEENDDATE, grsTelephone.getEFFECTIVEENDDATE());
        Assert.assertEquals(PHONE_ENDREASONCODE, grsTelephone.getENDREASONCODE());
        Assert.assertEquals(PHONE_DATAOWNERCODE, grsTelephone.getDATAOWNERCODE());
    }

    public static void assertElectronicAddresses(PRSPROVIDER providerOutput) {
        List<GRSELECTRONICADDRESS> grsElectronicAddresses = providerOutput.getGRSELECTRONICADDRESS();
        Assert.assertTrue(grsElectronicAddresses.size() == 1);
        GRSELECTRONICADDRESS grsElectronicAddress = grsElectronicAddresses.get(0);

        Assert.assertEquals(EMAIL_CMNCTNPRPSTYPCD, grsElectronicAddress.getCMNCTNPRPSTYPCD());
        Assert.assertEquals(EMAIL_ELECTRONICADDRESSTYPECODE, grsElectronicAddress.getELECTRONICADDRESSTYPECODE());
        Assert.assertEquals(EMAIL_ELECTRONICADDRESSTXT, grsElectronicAddress.getELECTRONICADDRESSTXT());
        Assert.assertEquals(EMAIL_EFFECTIVESTARTDATE, grsElectronicAddress.getEFFECTIVESTARTDATE());
        Assert.assertEquals(EMAIL_EFFECTIVEENDDATE, grsElectronicAddress.getEFFECTIVEENDDATE());
        Assert.assertEquals(EMAIL_ENDREASONCODE, grsElectronicAddress.getENDREASONCODE());
        Assert.assertEquals(EMAIL_DATAOWNERCODE, grsElectronicAddress.getDATAOWNERCODE());
    }

    public static void assertPrsConditions(PRSPROVIDER providerOutput) {
        List<PRSCONDITION> prsConditions = providerOutput.getPRSCONDITION();
        Assert.assertTrue(prsConditions.size() == 1);
        PRSCONDITION prsCondition = prsConditions.get(0);

        Assert.assertEquals(CONDITION_CONDITIONCHID, prsCondition.getCONDITIONCHID());
        Assert.assertEquals(CONDITION_CONDITIONTYPECODE, prsCondition.getCONDITIONTYPECODE());
        // Since it comes in as boolean, it can't really be null
        Assert.assertEquals("N", prsCondition.getRESTRICTIONFLAG());
        Assert.assertEquals(CONDITION_RESTRICTIONEXPLANATIONTXT, prsCondition.getRESTRICTIONEXPLANATIONTXT());
        Assert.assertEquals(CONDITION_EFFECTIVESTARTDATE, prsCondition.getEFFECTIVESTARTDATE());
        Assert.assertEquals(CONDITION_EFFECTIVEENDDATE, prsCondition.getEFFECTIVEENDDATE());
        Assert.assertEquals(CONDITION_ENDREASONCODE, prsCondition.getENDREASONCODE());
        Assert.assertEquals(CONDITION_DATAOWNERCODE, prsCondition.getDATAOWNERCODE());
    }

    public static void assertDemographicDetails(PRSPROVIDER providerOutput) {
        List<PRSDEMOGRAPHICDETAIL> prsDemographicDetails = providerOutput.getPRSDEMOGRAPHICDETAIL();
        Assert.assertTrue(prsDemographicDetails.size() == 1);
        PRSDEMOGRAPHICDETAIL prsDemographicDetail = prsDemographicDetails.get(0);

        Assert.assertEquals(DEMOGRAPHICS_DATEOFBIRTHDATE, prsDemographicDetail.getDATEOFBIRTHDATE());
        Assert.assertEquals(DEMOGRAPHICS_DATEOFDEATHDATE, prsDemographicDetail.getDATEOFDEATHDATE());
        Assert.assertEquals(DEMOGRAPHICS_COUNTRYOFBIRTHCODE, prsDemographicDetail.getCOUNTRYOFBIRTHCODE());
        Assert.assertEquals(DEMOGRAPHICS_PROVORSTATEOFBIRTHTXT, prsDemographicDetail.getPROVORSTATEOFBIRTHTXT());
        // If it starts as null, it ends up as U
        Assert.assertEquals("U", prsDemographicDetail.getGENDERCODE());
        Assert.assertEquals(DEMOGRAPHICS_EFFECTIVESTARTDATE, prsDemographicDetail.getEFFECTIVESTARTDATE());
        Assert.assertEquals(DEMOGRAPHICS_EFFECTIVEENDDATE, prsDemographicDetail.getEFFECTIVEENDDATE());
        Assert.assertEquals(DEMOGRAPHICS_ENDREASONCODE, prsDemographicDetail.getENDREASONCODE());
        Assert.assertEquals(DEMOGRAPHICS_DATAOWNERCODE, prsDemographicDetail.getDATAOWNERCODE());
    }

    public static void assertDisciplinaryAction(PRSPROVIDER providerOutput) {
        List<PRSDISCIPLINARYACTION> prsDisciplinaryActions = providerOutput.getPRSDISCIPLINARYACTION();
        Assert.assertTrue(prsDisciplinaryActions.size() == 1);
        PRSDISCIPLINARYACTION prsDisciplinaryAction = prsDisciplinaryActions.get(0);

        Assert.assertEquals(DISCIPLINARYACTION_DISCIPLINARYACTIONCHID, prsDisciplinaryAction.getDISCIPLINARYACTIONCHID());
        // If it starts as null, it ends up as N
        Assert.assertEquals("N", prsDisciplinaryAction.getDISPLAYFLAG());
        Assert.assertEquals(DISCIPLINARYACTION_DESCRIPTIONTXT, prsDisciplinaryAction.getDESCRIPTIONTXT());
        Assert.assertEquals(DISCIPLINARYACTION_ARCHIVEDATE, prsDisciplinaryAction.getARCHIVEDATE());

        Assert.assertEquals(DISCIPLINARYACTION_EFFECTIVESTARTDATE, prsDisciplinaryAction.getEFFECTIVESTARTDATE());
        Assert.assertEquals(DISCIPLINARYACTION_EFFECTIVEENDDATE, prsDisciplinaryAction.getEFFECTIVEENDDATE());
        Assert.assertEquals(DISCIPLINARYACTION_ENDREASONCODE, prsDisciplinaryAction.getENDREASONCODE());
        Assert.assertEquals(DISCIPLINARYACTION_DATAOWNERCODE, prsDisciplinaryAction.getDATAOWNERCODE());
    }

    public static void assertInformationRoute(PRSPROVIDER providerOutput) {
        List<PRSINFORMATIONROUTE> prsInformationRoutes = providerOutput.getPRSINFORMATIONROUTE();
        Assert.assertTrue(prsInformationRoutes.size() == 1);
        PRSINFORMATIONROUTE prsInformationRoute = prsInformationRoutes.get(0);

        Assert.assertEquals(INFORMATIONROUTE_DOCUMENTTYPECODE, prsInformationRoute.getDOCUMENTTYPECODE());
        Assert.assertEquals(INFORMATIONROUTE_MECHANISMTYPECODE, prsInformationRoute.getMECHANISMTYPECODE());
        // If it starts as null, it ends up as N
        Assert.assertEquals("N", prsInformationRoute.getDEFAULTFLAG());

        Assert.assertEquals(INFORMATIONROUTE_ADDRESSTYPECODE, prsInformationRoute.getADDRESSTYPECODE());
        Assert.assertEquals(INFORMATIONROUTE_TLCMNCTNNMBRTYPCD, prsInformationRoute.getTLCMNCTNNMBRTYPCD());
        Assert.assertEquals(INFORMATIONROUTE_ELECTRONICADDRESSTYPECODE, prsInformationRoute.getELECTRONICADDRESSTYPECODE());
        Assert.assertEquals(INFORMATIONROUTE_CMNCTNPRPSTYPCD, prsInformationRoute.getCMNCTNPRPSTYPCD());
        Assert.assertEquals(INFORMATIONROUTE_CMNCTNDATAOWNERCODE, prsInformationRoute.getCMNCTNDATAOWNERCODE());

        Assert.assertNull(prsInformationRoute.getWORKLOCATIONCHID());
        Assert.assertEquals(INFORMATIONROUTE_WORKLOCATIONDATAOWNERCODE, prsInformationRoute.getWORKLOCATIONDATAOWNERCODE());

        Assert.assertEquals(INFORMATIONROUTE_EFFECTIVESTARTDATE, prsInformationRoute.getEFFECTIVESTARTDATE());
        Assert.assertEquals(INFORMATIONROUTE_EFFECTIVEENDDATE, prsInformationRoute.getEFFECTIVEENDDATE());
        Assert.assertEquals(INFORMATIONROUTE_ENDREASONCODE, prsInformationRoute.getENDREASONCODE());
        Assert.assertEquals(INFORMATIONROUTE_DATAOWNERCODE, prsInformationRoute.getDATAOWNERCODE());
    }

    public static void assertNote(PRSPROVIDER providerOutput) {
        List<PRSNOTE> prsNotes = providerOutput.getPRSNOTE();
        Assert.assertTrue(prsNotes.size() == 1);
        PRSNOTE prsNote = prsNotes.get(0);

        Assert.assertEquals(NOTE_NOTECHID, prsNote.getNOTECHID());
        Assert.assertEquals(NOTE_NOTETEXT, prsNote.getNOTETEXT());

        Assert.assertEquals(NOTE_EFFECTIVESTARTDATE, prsNote.getEFFECTIVESTARTDATE());
        Assert.assertEquals(NOTE_EFFECTIVEENDDATE, prsNote.getEFFECTIVEENDDATE());
        Assert.assertEquals(NOTE_ENDREASONCODE, prsNote.getENDREASONCODE());
        Assert.assertEquals(NOTE_DATAOWNERCODE, prsNote.getDATAOWNERCODE());
    }

    public static void assertRegistryUserRelationships(PRSPROVIDER providerOutput) {
        List<PRSPROVRURELN> prsProviderRelationships = providerOutput.getPRSPROVRURELN();
        Assert.assertTrue(prsProviderRelationships.size() == 1);
        PRSPROVRURELN prsProviderRelationship = prsProviderRelationships.get(0);

        Assert.assertEquals(REGISTRYUSERRELATIONSHIP_RURELATIONSHIPTYPECODE, prsProviderRelationship.getRURELATIONSHIPTYPECODE());
        Assert.assertEquals(REGISTRYUSERRELATIONSHIP_EFFECTIVESTARTDATE, prsProviderRelationship.getEFFECTIVESTARTDATE());
        Assert.assertEquals(REGISTRYUSERRELATIONSHIP_EFFECTIVEENDDATE, prsProviderRelationship.getEFFECTIVEENDDATE());
        Assert.assertEquals(REGISTRYUSERRELATIONSHIP_ENDREASONCODE, prsProviderRelationship.getENDREASONCODE());
        Assert.assertEquals(REGISTRYUSERRELATIONSHIP_DATAOWNERCODE, prsProviderRelationship.getDATAOWNERCODE());
        
        List<GRSRELATEDRU> grsRelatedRus = prsProviderRelationship.getGRSRELATEDRU();
        Assert.assertTrue(grsRelatedRus.size() == 1);
        GRSRELATEDRU grsRelatedRu = grsRelatedRus.get(0);
        Assert.assertEquals(REGISTRYUSERRELATIONSHIP_RELATEDUSERCHID, grsRelatedRu.getREGISTRYUSERORGCHID());
    }

    public static void assertCredentials(PRSPROVIDER providerOutput) {
        List<PRSPROVIDERCREDENTIAL> prsProviderCredentials = providerOutput.getPRSPROVIDERCREDENTIAL();
        Assert.assertTrue(prsProviderCredentials.size() == 1);
        PRSPROVIDERCREDENTIAL prsProviderCredential = prsProviderCredentials.get(0);

        Assert.assertEquals(CREDENTIAL_PROVIDERCREDENTIALTYPECODE, prsProviderCredential.getPROVIDERCREDENTIALTYPECODE());
        Assert.assertEquals(CREDENTIAL_CREDENTIALDESIGNATIONTXT, prsProviderCredential.getCREDENTIALDESIGNATIONTXT());
        Assert.assertEquals(CREDENTIAL_REGISTRATIONNUMBERTXT, prsProviderCredential.getREGISTRATIONNUMBERTXT());
        Assert.assertEquals(CREDENTIAL_CREDENTIALGRANTINGINSTTXT, prsProviderCredential.getCREDENTIALGRANTINGINSTTXT());
        Assert.assertEquals(CREDENTIAL_INSTITUTIONCITYTXT, prsProviderCredential.getINSTITUTIONCITYTXT());
        Assert.assertEquals(CREDENTIAL_INSTITUTIONPROVINCECODE, prsProviderCredential.getINSTITUTIONPROVINCECODE());
        Assert.assertEquals(CREDENTIAL_INSTITUTIONCOUNTRYCODE, prsProviderCredential.getINSTITUTIONCOUNTRYCODE());
        // If it starts as null, it ends up as N
        Assert.assertEquals("N", prsProviderCredential.getEQUIVALENCYFLAG());
        Assert.assertEquals(CREDENTIAL_YEARCREDENTIALISSUEDTXT, prsProviderCredential.getYEARCREDENTIALISSUEDTXT());

        Assert.assertEquals(CREDENTIAL_EFFECTIVESTARTDATE, prsProviderCredential.getEFFECTIVESTARTDATE());
        Assert.assertEquals(CREDENTIAL_EFFECTIVEENDDATE, prsProviderCredential.getEFFECTIVEENDDATE());
        Assert.assertEquals(CREDENTIAL_ENDREASONCODE, prsProviderCredential.getENDREASONCODE());
        Assert.assertEquals(CREDENTIAL_DATAOWNERCODE, prsProviderCredential.getDATAOWNERCODE());
    }

    private static void assertExpertises(PRSPROVIDER providerOutput) {
        List<PRSPROVIDEREXPERTISE> prsProviderExpertises = providerOutput.getPRSPROVIDEREXPERTISE();
        Assert.assertTrue(prsProviderExpertises.size() == 1);
        PRSPROVIDEREXPERTISE prsProviderExpertise = prsProviderExpertises.get(0);

        Assert.assertEquals(EXPERTISE_PROVEXPERTISEROLETYPECODE, prsProviderExpertise.getPROVEXPERTISEROLETYPECODE());
        Assert.assertEquals(EXPERTISE_PROVIDEREXPERTISETYPECODE, prsProviderExpertise.getPROVIDEREXPERTISETYPECODE());
        Assert.assertEquals(EXPERTISE_ORIGINALSOURCEPROVIDERCODE, prsProviderExpertise.getORIGINALSOURCEPROVIDERCODE());

        Assert.assertEquals(EXPERTISE_EFFECTIVESTARTDATE, prsProviderExpertise.getEFFECTIVESTARTDATE());
        Assert.assertEquals(EXPERTISE_EFFECTIVEENDDATE, prsProviderExpertise.getEFFECTIVEENDDATE());
        Assert.assertEquals(EXPERTISE_ENDREASONCODE, prsProviderExpertise.getENDREASONCODE());
        Assert.assertEquals(EXPERTISE_DATAOWNERCODE, prsProviderExpertise.getDATAOWNERCODE());
    }

    private static void assertStatuses(PRSPROVIDER providerOutput) {
        List<PRSSTATUS> prsStatus = providerOutput.getPRSSTATUS();
        Assert.assertTrue(prsStatus.size() == 1);
        PRSSTATUS status = prsStatus.get(0);

        Assert.assertEquals(STATUS_STATUSTYPECODE, status.getSTATUSTYPECODE());
        Assert.assertEquals(STATUS_STATUSCLASSCODE, status.getSTATUSCLASSCODE());
        Assert.assertEquals(STATUS_STATUSREASONCODE, status.getSTATUSREASONCODE());

        Assert.assertEquals(STATUS_EFFECTIVESTARTDATE, status.getEFFECTIVESTARTDATE());
        Assert.assertEquals(STATUS_EFFECTIVEENDDATE, status.getEFFECTIVEENDDATE());
        Assert.assertEquals(STATUS_ENDREASONCODE, status.getENDREASONCODE());
        Assert.assertEquals(STATUS_DATAOWNERCODE, status.getDATAOWNERCODE());
    }

    private static void assertWorkLocations(PRSPROVIDER providerOutput) {
        List<PRSWORKLOCATION> prsWorkLocations = providerOutput.getPRSWORKLOCATION();
        Assert.assertTrue(prsWorkLocations.size() == 1);
        PRSWORKLOCATION prsWorkLocation = prsWorkLocations.get(0);

        Assert.assertNull(prsWorkLocation.getWORKLOCATIONCHID());
        Assert.assertEquals(WORKLOCATION_DATAOWNERCODE, prsWorkLocation.getDATAOWNERCODE());

        assertWorkLocationDetails(prsWorkLocation);
        assertWorkLocationAddresses(prsWorkLocation);
        assertWorkLocationElectronicAddresses(prsWorkLocation);
        assertWorkLocationTelephones(prsWorkLocation);
        assertWorkLocationInformationRoutes(prsWorkLocation);

    }

    private static void assertWorkLocationDetails(PRSWORKLOCATION prsWorkLocation) {
        List<PRSWORKLOCATIONDETAIL> prsWorkLocationDetails = prsWorkLocation.getPRSWORKLOCATIONDETAIL();
        Assert.assertTrue(prsWorkLocationDetails.size() == 1);
        PRSWORKLOCATIONDETAIL prsWorkLocationDetail = prsWorkLocationDetails.get(0);

        Assert.assertEquals(WORKLOCATIONDETAILS_WORKLOCATIONNAMETXT, prsWorkLocationDetail.getWORKLOCATIONNAMETXT());
        Assert.assertEquals(WORKLOCATIONDETAILS_ADDITIONALADDRESSEEINFOTXT, prsWorkLocationDetail.getADDITIONALADDRESSEEINFOTXT());
        // If it starts as null, it ends up as N
        Assert.assertEquals("N", prsWorkLocationDetail.getDEFAULTFLAG());
        Assert.assertEquals(WORKLOCATIONDETAILS_WORKLOCATIONTYPECODE, prsWorkLocationDetail.getWORKLOCATIONTYPECODE());

        Assert.assertEquals(WORKLOCATIONDETAILS_EFFECTIVESTARTDATE, prsWorkLocationDetail.getEFFECTIVESTARTDATE());
        Assert.assertEquals(WORKLOCATIONDETAILS_EFFECTIVEENDDATE, prsWorkLocationDetail.getEFFECTIVEENDDATE());
        Assert.assertEquals(WORKLOCATIONDETAILS_ENDREASONCODE, prsWorkLocationDetail.getENDREASONCODE());
    }

    private static void assertWorkLocationAddresses(PRSWORKLOCATION prsWorkLocation) {
        List<PRSWORKLOCATIONADDRESS> prsWorkLocationAddresses = prsWorkLocation.getPRSWORKLOCATIONADDRESS();
        Assert.assertTrue(prsWorkLocationAddresses.size() == 1);
        PRSWORKLOCATIONADDRESS prsWorkLocationAddress = prsWorkLocationAddresses.get(0);

        Assert.assertEquals(ADDRESS_CMNCTNPRPSTYPCD, prsWorkLocationAddress.getCMNCTNPRPSTYPCD());
        Assert.assertEquals(ADDRESS_ADDRESSTYPECODE, prsWorkLocationAddress.getADDRESSTYPECODE());
        Assert.assertEquals(ADDRESS_ADDRESSLINE1TXT, prsWorkLocationAddress.getADDRESSLINE1TXT());
        Assert.assertEquals(ADDRESS_ADDRESSLINE2TXT, prsWorkLocationAddress.getADDRESSLINE2TXT());
        Assert.assertEquals(ADDRESS_ADDRESSLINE3TXT, prsWorkLocationAddress.getADDRESSLINE3TXT());
        Assert.assertEquals(ADDRESS_ADDRESSLINE4TXT, prsWorkLocationAddress.getADDRESSLINE4TXT());
        Assert.assertEquals(ADDRESS_CITYTXT, prsWorkLocationAddress.getCITYTXT());
        Assert.assertEquals(ADDRESS_PROVINCEORSTATETXT, prsWorkLocationAddress.getPROVINCEORSTATETXT());
        Assert.assertEquals(ADDRESS_POSTALCODEORZIPTXT, prsWorkLocationAddress.getPOSTALCODEORZIPTXT());
        Assert.assertEquals(ADDRESS_COUNTRYCODE, prsWorkLocationAddress.getCOUNTRYCODE());
        Assert.assertEquals(ADDRESS_EFFECTIVESTARTDATE, prsWorkLocationAddress.getEFFECTIVESTARTDATE());
        Assert.assertEquals(ADDRESS_EFFECTIVEENDDATE, prsWorkLocationAddress.getEFFECTIVEENDDATE());
        Assert.assertEquals(ADDRESS_ENDREASONCODE, prsWorkLocationAddress.getENDREASONCODE());
        Assert.assertEquals(ADDRESS_DATAOWNERCODE, prsWorkLocationAddress.getDATAOWNERCODE());
    }

    private static void assertWorkLocationElectronicAddresses(PRSWORKLOCATION prsWorkLocation) {
        List<PRSWORKLOCATIONELECTRONICADDRESS> prsWorkLocationElectronicAddress = prsWorkLocation.getPRSWORKLOCATIONELECTRONICADDRESS();
        Assert.assertTrue(prsWorkLocationElectronicAddress.size() == 1);
        PRSWORKLOCATIONELECTRONICADDRESS prsElectronicAddress = prsWorkLocationElectronicAddress.get(0);

        Assert.assertEquals(EMAIL_CMNCTNPRPSTYPCD, prsElectronicAddress.getCMNCTNPRPSTYPCD());
        Assert.assertEquals(EMAIL_ELECTRONICADDRESSTYPECODE, prsElectronicAddress.getELECTRONICADDRESSTYPECODE());
        Assert.assertEquals(EMAIL_ELECTRONICADDRESSTXT, prsElectronicAddress.getELECTRONICADDRESSTXT());
        Assert.assertEquals(EMAIL_EFFECTIVESTARTDATE, prsElectronicAddress.getEFFECTIVESTARTDATE());
        Assert.assertEquals(EMAIL_EFFECTIVEENDDATE, prsElectronicAddress.getEFFECTIVEENDDATE());
        Assert.assertEquals(EMAIL_ENDREASONCODE, prsElectronicAddress.getENDREASONCODE());
        Assert.assertEquals(EMAIL_DATAOWNERCODE, prsElectronicAddress.getDATAOWNERCODE());
    }

    private static void assertWorkLocationTelephones(PRSWORKLOCATION prsWorkLocation) {
        List<PRSWORKLOCATIONTELEPHONE> prsWorkLocationTelephones = prsWorkLocation.getPRSWORKLOCATIONTELEPHONE();
        Assert.assertTrue(prsWorkLocationTelephones.size() == 1);
        PRSWORKLOCATIONTELEPHONE prsWorkLocationTelephone = prsWorkLocationTelephones.get(0);

        Assert.assertEquals(PHONE_CMNCTNPRPSTYPCD, prsWorkLocationTelephone.getCMNCTNPRPSTYPCD());
        Assert.assertEquals(PHONE_TLCMNCTNNMBRTYPCD, prsWorkLocationTelephone.getTLCMNCTNNMBRTYPCD());
        Assert.assertEquals(PHONE_AREACODENUM, prsWorkLocationTelephone.getAREACODENUM());
        Assert.assertEquals(PHONE_TELECOMMUNICATIONNMBRNUM, prsWorkLocationTelephone.getTELECOMMUNICATIONNMBRNUM());
        Assert.assertEquals(PHONE_EXTENSIONNUM, prsWorkLocationTelephone.getEXTENSIONNUM());
        Assert.assertEquals(PHONE_EFFECTIVESTARTDATE, prsWorkLocationTelephone.getEFFECTIVESTARTDATE());
        Assert.assertEquals(PHONE_EFFECTIVEENDDATE, prsWorkLocationTelephone.getEFFECTIVEENDDATE());
        Assert.assertEquals(PHONE_ENDREASONCODE, prsWorkLocationTelephone.getENDREASONCODE());
        Assert.assertEquals(PHONE_DATAOWNERCODE, prsWorkLocationTelephone.getDATAOWNERCODE());
    }

    private static void assertWorkLocationInformationRoutes(PRSWORKLOCATION prsWorkLocation) {
        List<PRSWORKLOCATIONINFORMATIONROUTE> prsWorkLocationInformationRoutes = prsWorkLocation.getPRSWORKLOCATIONINFORMATIONROUTE();
        Assert.assertTrue(prsWorkLocationInformationRoutes.size() == 1);
        PRSWORKLOCATIONINFORMATIONROUTE prsWorkLocationInformationRoute = prsWorkLocationInformationRoutes.get(0);

        Assert.assertEquals(INFORMATIONROUTE_DOCUMENTTYPECODE, prsWorkLocationInformationRoute.getDOCUMENTTYPECODE());
        Assert.assertEquals(INFORMATIONROUTE_MECHANISMTYPECODE, prsWorkLocationInformationRoute.getMECHANISMTYPECODE());
        // If it starts as null, it ends up as N
        Assert.assertEquals("N", prsWorkLocationInformationRoute.getDEFAULTFLAG());

        Assert.assertEquals(INFORMATIONROUTE_ADDRESSTYPECODE, prsWorkLocationInformationRoute.getADDRESSTYPECODE());
        Assert.assertEquals(INFORMATIONROUTE_TLCMNCTNNMBRTYPCD, prsWorkLocationInformationRoute.getTLCMNCTNNMBRTYPCD());
        Assert.assertEquals(INFORMATIONROUTE_ELECTRONICADDRESSTYPECODE, prsWorkLocationInformationRoute.getELECTRONICADDRESSTYPECODE());
        Assert.assertEquals(INFORMATIONROUTE_CMNCTNPRPSTYPCD, prsWorkLocationInformationRoute.getCMNCTNPRPSTYPCD());
        Assert.assertEquals(INFORMATIONROUTE_CMNCTNDATAOWNERCODE, prsWorkLocationInformationRoute.getCMNCTNDATAOWNERCODE());

        Assert.assertEquals(INFORMATIONROUTE_WORKLOCATIONCHID, prsWorkLocationInformationRoute.getWORKLOCATIONCHID());
        Assert.assertEquals(INFORMATIONROUTE_WORKLOCATIONDATAOWNERCODE, prsWorkLocationInformationRoute.getWORKLOCATIONDATAOWNERCODE());

        Assert.assertEquals(INFORMATIONROUTE_EFFECTIVESTARTDATE, prsWorkLocationInformationRoute.getEFFECTIVESTARTDATE());
        Assert.assertEquals(INFORMATIONROUTE_EFFECTIVEENDDATE, prsWorkLocationInformationRoute.getEFFECTIVEENDDATE());
        Assert.assertEquals(INFORMATIONROUTE_ENDREASONCODE, prsWorkLocationInformationRoute.getENDREASONCODE());
        Assert.assertEquals(INFORMATIONROUTE_DATAOWNERCODE, prsWorkLocationInformationRoute.getDATAOWNERCODE());
    }

}
