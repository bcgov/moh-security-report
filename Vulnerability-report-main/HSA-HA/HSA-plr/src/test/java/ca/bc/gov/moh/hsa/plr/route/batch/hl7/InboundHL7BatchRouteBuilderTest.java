package ca.bc.gov.moh.hsa.plr.route.batch.hl7;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

import ca.bc.gov.moh.hsa.plr.route.batch.prsxml.*;
import ca.bc.gov.moh.hsa.plr.misc.*;
import ca.bc.gov.health.plr.dto.esb.BatchRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.uhn.hl7v2.HL7Exception;
import java.io.IOException;
import java.io.InputStream;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.List;
import javax.xml.bind.JAXBException;
import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.spring.CamelSpringDelegatingTestContextLoader;
import org.apache.camel.test.spring.CamelSpringJUnit4ClassRunner;
import org.apache.camel.test.spring.CamelSpringTestHelper;
import org.apache.camel.test.spring.MockEndpoints;
import org.apache.commons.io.IOUtils;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;

// Really need to mock out the SFTP server and the EJB endpoint for a more consistent test
@RunWith(CamelSpringJUnit4ClassRunner.class)
@ContextConfiguration(
        loader = CamelSpringDelegatingTestContextLoader.class, locations = {"classpath:/plrTestApplicationContext.xml"}
)
@MockEndpoints
public class InboundHL7BatchRouteBuilderTest {

    MockEndpoint inboundBatchMockEndpoint;
    MockEndpoint inboundPLRMockEndpoint;
    MockEndpoint inboundHL7MockEndpoint;
    MockEndpoint callBatchEJBMockEndpoint;
//    MockEndpoint handleHL7_MESSAGEMockEndpoint;
    MockEndpoint HL7XMLRejectionMockEndpoint;
    MockEndpoint PLRXMLRejectionMockEndpoint;
    MockEndpoint batchResponseMockEndpoint;

    public InboundHL7BatchRouteBuilderTest() {
    }

    @BeforeClass
    public static void fixTestClassProblem() throws Exception {
        // For some reason the test class wasn't being set automagically
        CamelSpringTestHelper.setTestClass(InboundHL7BatchRouteBuilderTest.class);
    }

    @Before
    public void resolveMockEndpoints() {
        inboundBatchMockEndpoint = (MockEndpoint) context.getEndpoint("mock:direct:inboundBatch");
        inboundPLRMockEndpoint = (MockEndpoint) context.getEndpoint("mock:direct:inboundBatchPLRXML");
        inboundHL7MockEndpoint = (MockEndpoint) context.getEndpoint("mock:direct:inboundBatchHL7XML");
        callBatchEJBMockEndpoint = (MockEndpoint) context.getEndpoint("mock:direct:ejbRouteBatch");
        HL7XMLRejectionMockEndpoint = (MockEndpoint) context.getEndpoint("mock:direct:HL7XMLRejection");
        PLRXMLRejectionMockEndpoint = (MockEndpoint) context.getEndpoint("mock:direct:PLRXMLRejection");
        batchResponseMockEndpoint = (MockEndpoint) context.getEndpoint("mock:direct:batchResponse");
    }

    private static final org.slf4j.Logger logger = LoggerFactory.getLogger(InboundHL7BatchRouteBuilderTest.class);

    @Produce(uri = "direct:inboundBatch")
    protected ProducerTemplate testProducer;

    @Autowired
    protected CamelContext context;

    public void assertNumberOfMaintainDTOsSentToEJB(int numberOfExpectedDTOs) {
        List<Exchange> receivedExchanges = callBatchEJBMockEndpoint.getReceivedExchanges();
        Assert.assertEquals(1, receivedExchanges.size());
        BatchRequest batchRequest = receivedExchanges.get(0).getIn().getBody(BatchRequest.class);
        Collection<MaintainProviderRequest> maintainMessages = batchRequest.getMaintainProviderRequests();
        Assert.assertEquals(numberOfExpectedDTOs, maintainMessages.size());
    }

    @Test
    @DirtiesContext
    public void testBatchRouteHL7XML() throws InterruptedException, IOException, JAXBException, HL7Exception, Exception {
        final String fileName = "HL7_T1_update_Nurse_DG_2.xml";

        String content = getFileContents(fileName);

        inboundBatchMockEndpoint.expectedMessageCount(1);
        inboundPLRMockEndpoint.expectedMessageCount(0);
        inboundHL7MockEndpoint.expectedMessageCount(1);
        HL7XMLRejectionMockEndpoint.expectedMessageCount(0);
        PLRXMLRejectionMockEndpoint.expectedMessageCount(0);
        batchResponseMockEndpoint.expectedMessageCount(1);

        
        String header = "client";
        String headerValue = "A";
       testProducer.sendBodyAndHeader(content, header, headerValue);

        MockEndpoint.assertIsSatisfied(context);
        assertNumberOfMaintainDTOsSentToEJB(8);
    }

    @Test
    @DirtiesContext
    public void testBatchRouteHL7XML_Invalid() throws InterruptedException, IOException, JAXBException, HL7Exception, Exception {

        String content = getFileContents("HL7_T1_update_Nurse_DG_2_invalid.xml");

        inboundHL7MockEndpoint.expectedMessageCount(1);
        callBatchEJBMockEndpoint.expectedMessageCount(0);
        PLRXMLRejectionMockEndpoint.expectedMessageCount(0);
        HL7XMLRejectionMockEndpoint.expectedMessageCount(1);
        batchResponseMockEndpoint.expectedMessageCount(1);

        testProducer.sendBody(content);

        MockEndpoint.assertIsSatisfied(context);
    }

    @Test
    @DirtiesContext
    public void testBatchRouteHL7XML_Invalid_Transmission() throws InterruptedException, IOException, JAXBException, HL7Exception, Exception {

        String content = getFileContents("HL7_T1_update_Nurse_DG_2_invalid_transmission.xml");

        inboundHL7MockEndpoint.expectedMessageCount(1);
        HL7XMLRejectionMockEndpoint.expectedMessageCount(1);
        PLRXMLRejectionMockEndpoint.expectedMessageCount(0);
        callBatchEJBMockEndpoint.expectedMessageCount(0);
        batchResponseMockEndpoint.expectedMessageCount(1);

        testProducer.sendBody(content);

        MockEndpoint.assertIsSatisfied(context);
    }

    public static String getFileContents(String fileName) throws IOException {
        InputStream resourceAsStream = getFileInputStream(fileName);
        StringWriter writer = new StringWriter();
        IOUtils.copy(resourceAsStream, writer, Charset.defaultCharset());
        String fileContents = writer.toString();
        return fileContents;
    }

    private static InputStream getFileInputStream(String fileName) {
        String resourceName = "samples/" + fileName;
        return InboundHL7BatchRouteBuilderTest.class.getClassLoader().getResourceAsStream(resourceName);
    }

}
