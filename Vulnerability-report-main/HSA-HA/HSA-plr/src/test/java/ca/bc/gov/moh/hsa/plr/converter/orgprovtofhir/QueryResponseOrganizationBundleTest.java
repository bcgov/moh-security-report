/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.orgprovtofhir;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.QueryResponse;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.NoteDto;
import ca.bc.gov.health.plr.dto.provider.esb.OrgNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import static ca.bc.gov.moh.hsa.plr.converter.orgprovtofhir.MapOrgProviderToBCQueryResponseBundle.addOrganizationsToBCQueryResponseBundle;
import static ca.bc.gov.moh.hsa.plr.converter.orgprovtofhir.OrgProviderDataBuilderFhirTest.*;
import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import org.hl7.fhir.r4bc1.model.BCQueryResponseBundle;
import static org.junit.Assert.assertEquals;
import org.junit.Test;

/**
 *
 * Unit tests for mapping Query Response Organization metadata
 *
 * @author dan.stepanov
 */
public class QueryResponseOrganizationBundleTest {

    @Test
    public void addOrgProviderToBCQueryResponseOrganizationTest() {

        QueryResponse qr = new QueryResponse();
        Collection<ProviderDetails> orgProviders = new ArrayList<>();
        FHIRFactory factory = new FHIRFactory("R4BC1");
        ProviderDetails orgProviderDetails = new ProviderDetails();

        orgProviderDetails.setPauthId(12L);
        orgProviderDetails.setProviderType("ORGID");
        orgProviderDetails.setType("ORG");

        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        List<CollegeIdentifierDto> orgProviderIds = setOrgProviderIdentifiers(start, end);
        List<AddressDto> orgProviderAddress = setOrgProviderAddressTypeMail(start, end);
        List<StatusDto> orgLicenceStatuses = setOrgProviderLicenseStatus(start, end);
        List<OrgNameDto> orgProviderNames = setOrgProviderNames(start, end);
        List<TelecommunicationDto> orgProviderTelecoms = setOrgProviderTelecoms(start, end);
        List<ProviderRelationshipDto> orgProviderRelationships = setOrgProviderRelantionshipsOrg(start, end);
        List<ElectronicAddressDto> orgProviderElectronicAddresses = setOrgProviderElectronicAddresses(start, end);
        List<NoteDto> orgNotes = setOrgProviderNotes(start, end);

        orgProviderDetails.setIdentifiers(orgProviderIds);
        orgProviderDetails.setAddresses(orgProviderAddress);
        orgProviderDetails.setStatuses(orgLicenceStatuses);
        orgProviderDetails.setOrgNames(orgProviderNames);
        orgProviderDetails.setTelecommunication(orgProviderTelecoms);
        orgProviderDetails.setProviderRelationships(orgProviderRelationships);
        orgProviderDetails.setElectronicAddresses(orgProviderElectronicAddresses);
        orgProviderDetails.setNotes(orgNotes);

        orgProviders.add(orgProviderDetails);
        qr.setProviderDetails(orgProviders);

        Acknowledgment ack = new Acknowledgment("GRS.SYS.UNK.QRY.0.0.7067", "Query was OK");
        qr.addAcknowledgement(ack);

        BCQueryResponseBundle bcQueryResponseOrganizationBundle = (BCQueryResponseBundle) addOrganizationsToBCQueryResponseBundle(factory, qr, null);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCQueryResponseBundle) bcQueryResponseOrganizationBundle).getEntry().size(), 2);

    }

    public List<ProviderRelationshipDto> setOrgProviderRelantionshipsOrg(Date start, Date end) {
        List<ProviderRelationshipDto> providerRelationships = new ArrayList<>();
        // provider org relantionships
        ProviderRelationshipDto providerOrgRelationship1 = new ProviderRelationshipDto();
        providerOrgRelationship1.setDataOwnerCode("Owner_RNA");
        providerOrgRelationship1.setEndReasonCode("ERC_RNA");
        providerOrgRelationship1.setEffectiveStartDate(start);
        providerOrgRelationship1.setEffectiveEndDate(end);
        providerOrgRelationship1.setRelationshipTypeCode("LOC");
        providerOrgRelationship1.setType("Test Provider Rel ORGID Type");
        providerOrgRelationship1.setIdentifierTypeCode("ORGID");
        providerOrgRelationship1.setIdentifier("ORGID_01");
        ProviderDetails orgProviderType = new ProviderDetails();
        orgProviderType.setProviderType("ORG");
        providerRelationships.add(providerOrgRelationship1);
        return providerRelationships;
    }

    public List<OrgNameDto> setOrgProviderNames(Date start, Date end) {
        // names
        List<OrgNameDto> orgNames = new ArrayList<>();

        OrgNameDto orgNameDto = new OrgNameDto();
        orgNameDto.setActive(true);
        orgNameDto.setCreatedDate(new Date());
        orgNameDto.setDataOwnerCode("MOH_A");
        orgNameDto.setEndReasonCode("ERC");
        orgNameDto.setEffectiveStartDate(start);
        orgNameDto.setEffectiveEndDate(end);
        orgNameDto.setGenerationNum(1L);
        orgNameDto.setInvalidatedDate(null);
        orgNameDto.setType("Test Type Org Official");
        orgNameDto.setTypeCode("CRED");
        orgNameDto.setTypeId(1147l);//official name
        orgNameDto.setUserChid("Test User Official Chid JUNIT");

        orgNameDto.setName("The Org Name Official");
        orgNameDto.setLongName("The Long ORG Name Official");

        orgNameDto.setPreferred(true);

        orgNames.add(orgNameDto);

        return orgNames;
    }

    public List<StatusDto> setOrgProviderLicenseStatus(Date start, Date end) {
        // license status
        List<StatusDto> licenceStatuses = new ArrayList<>();
        StatusDto licenseStatusDto = new StatusDto();
        licenseStatusDto.setDataOwnerCode("OwnerRNA");
        licenseStatusDto.setEndReasonCode("ERC");
        licenseStatusDto.setEffectiveStartDate(start);
        licenseStatusDto.setEffectiveEndDate(end);
        licenseStatusDto.setCreatedDate(new Date());
        licenseStatusDto.setGenerationNum(1L);
        licenseStatusDto.setInvalidatedDate(null);
        licenseStatusDto.setType("Test license status");
        licenseStatusDto.setTypeCode("SUSPENDED");
        licenseStatusDto.setReasonCode("HON");
        licenseStatusDto.setReason("Test Honorary status reason");
        licenseStatusDto.setClassTxt("Test license status class Assigned Entity");
        licenseStatusDto.setClassCode("AE");
        licenceStatuses.add(licenseStatusDto);

        return licenceStatuses;
    }

    public List<AddressDto> setOrgProviderAddressTypeMail(Date start, Date end) {
        // address
        List<AddressDto> providerAddress = new ArrayList<>();
        AddressDto addressTypeMail = new AddressDto();
        addressTypeMail.setDataOwnerCode("OwnerRNA");
        addressTypeMail.setEndReasonCode("ERC");
        addressTypeMail.setEffectiveStartDate(start);
        addressTypeMail.setEffectiveEndDate(end);
        addressTypeMail.setActive(true);
        addressTypeMail.setCreatedDate(new Date());
        addressTypeMail.setGenerationNum(1L);
        addressTypeMail.setInvalidatedDate(null);
        addressTypeMail.setType("Test Address mail Type");
        addressTypeMail.setTypeCode("M");
        addressTypeMail.setTypeId(2838l);  ///address type code Mailing
        addressTypeMail.setUserChid("Test User Chid JUNIT");
        addressTypeMail.setAddressLineOne("Address Line One Mail");
        addressTypeMail.setAddressLineTwo("Address Line Two Mail");
        addressTypeMail.setAddressLineThree("Address Line Three Mail");
        addressTypeMail.setCity("Victoria");
        addressTypeMail.setPostalCode("V9V 9V9");
        addressTypeMail.setFullAddress("Full Address Test Mail Sample 1");
        addressTypeMail.setCommunicationPurpose("Communication Purpose");
        addressTypeMail.setCommunicationPurposeCode("BC");
        addressTypeMail.setCommunicationPurposeId(2802l);
        addressTypeMail.setCountry("Canada");
        addressTypeMail.setCountryCode("CA");
        addressTypeMail.setCountryId(1239l);
        addressTypeMail.setProvinceOrStateTxt("British Columbia (BC)");
        providerAddress.add(addressTypeMail);

        return providerAddress;
    }

    public List<CollegeIdentifierDto> setOrgProviderIdentifiers(Date start, Date end) {
        // IPC identifiers
        List<CollegeIdentifierDto> providerIds = new ArrayList<>();
        CollegeIdentifierDto orgProviderIdentifierIPC = new CollegeIdentifierDto();
        orgProviderIdentifierIPC.setDataOwnerCode("OwnerMOH");
        orgProviderIdentifierIPC.setEndReasonCode("ERCI");
        orgProviderIdentifierIPC.setEffectiveStartDate(start);
        orgProviderIdentifierIPC.setEffectiveEndDate(end);
        orgProviderIdentifierIPC.setActive(true);
        orgProviderIdentifierIPC.setCreatedDate(new Date());
        orgProviderIdentifierIPC.setGenerationNum(1L);
        orgProviderIdentifierIPC.setInvalidatedDate(null);
        orgProviderIdentifierIPC.setType("Test IPC Type");
        orgProviderIdentifierIPC.setTypeCode("IPC");
        orgProviderIdentifierIPC.setIdentifier("IPC.00000040.BC.PRS");
        orgProviderIdentifierIPC.setUserChid("Test User Chid IPC");
        providerIds.add(orgProviderIdentifierIPC);

        // org identifier
        CollegeIdentifierDto orgProviderIdentifierOrgid = new CollegeIdentifierDto();
        orgProviderIdentifierOrgid.setDataOwnerCode("Owner_ORG");
        orgProviderIdentifierOrgid.setEndReasonCode("ERC_ORG");
        orgProviderIdentifierOrgid.setEffectiveStartDate(start);
        orgProviderIdentifierOrgid.setEffectiveEndDate(end);
        orgProviderIdentifierOrgid.setActive(true);
        orgProviderIdentifierOrgid.setCreatedDate(new Date());
        orgProviderIdentifierOrgid.setGenerationNum(1L);
        orgProviderIdentifierOrgid.setInvalidatedDate(null);
        orgProviderIdentifierOrgid.setType("Test ORG Type");
        orgProviderIdentifierOrgid.setTypeCode("ORGID");
        orgProviderIdentifierOrgid.setIdentifier("ORGID_01");
        orgProviderIdentifierOrgid.setUserChid("Test User Chid ORGID");
        providerIds.add(orgProviderIdentifierOrgid);

        return providerIds;
    }

    public List<TelecommunicationDto> setOrgProviderTelecoms(Date start, Date end) {

        List<TelecommunicationDto> orgProviderTelecoms = new ArrayList<>();
        // fax type
        TelecommunicationDto telecomFaxDto = new TelecommunicationDto();
        telecomFaxDto.setActive(true);
        telecomFaxDto.setCreatedDate(new Date());
        telecomFaxDto.setDataOwnerCode("MOH");
        telecomFaxDto.setEndReasonCode("ERC");
        telecomFaxDto.setEffectiveStartDate(start);
        telecomFaxDto.setEffectiveEndDate(end);
        telecomFaxDto.setGenerationNum(1L);
        telecomFaxDto.setInvalidatedDate(null);
        telecomFaxDto.setType("Test Fax Type");
        telecomFaxDto.setTypeCode("FAX");
        telecomFaxDto.setTypeId(1161l);

        telecomFaxDto.setAreaCode("875 ");
        telecomFaxDto.setCommunicationPurpose("Communication Purpose");
        telecomFaxDto.setCommunicationPurposeCode("MC");
        telecomFaxDto.setCommunicationPurposeId(2802l);
        telecomFaxDto.setExtension(""); // tested w/empty extension telecomFaxDto.setExtension("");
        telecomFaxDto.setNumber("523-9316");

        orgProviderTelecoms.add(telecomFaxDto);

        // phone type
        TelecommunicationDto telecomPhoneDto = new TelecommunicationDto();
        telecomPhoneDto.setActive(true);
        telecomPhoneDto.setCreatedDate(new Date());
        telecomPhoneDto.setDataOwnerCode("MOH2");
        telecomPhoneDto.setEndReasonCode("ERC2");
        telecomPhoneDto.setEffectiveEndDate(end);
        telecomPhoneDto.setEffectiveStartDate(start);
        telecomPhoneDto.setGenerationNum(1L);
        telecomPhoneDto.setInvalidatedDate(null);
        telecomPhoneDto.setType("Test Telephone Type");
        telecomPhoneDto.setTypeCode("T");
        telecomPhoneDto.setTypeId(1161l);
        telecomPhoneDto.setUserChid("Test User Chiid JUNIT");

        // there is no country in PLR telecomPhoneDto
        telecomPhoneDto.setAreaCode("457 ");
        telecomPhoneDto.setCommunicationPurpose("Communication Purpose");
        telecomPhoneDto.setCommunicationPurposeCode("HC");
        telecomPhoneDto.setCommunicationPurposeId(2802l);
        telecomPhoneDto.setExtension("ext. 8722"); // tested w/empty extension telecomPhoneDto.setExtension("");
        telecomPhoneDto.setNumber("345-8888");

        orgProviderTelecoms.add(telecomPhoneDto);

        return orgProviderTelecoms;
    }

    public List<ElectronicAddressDto> setOrgProviderElectronicAddresses(Date start, Date end) {

        List<ElectronicAddressDto> orgProviderElectronicAddresses = new ArrayList<>();
        // email type
        ElectronicAddressDto emailDto = new ElectronicAddressDto();
        emailDto.setActive(true);
        emailDto.setCreatedDate(new Date());
        emailDto.setDataOwnerCode("MOH");
        emailDto.setEndReasonCode("ERC");
        emailDto.setEffectiveStartDate(start);
        emailDto.setEffectiveEndDate(end);
        emailDto.setGenerationNum(1L);
        emailDto.setInvalidatedDate(null);

        emailDto.setType("Test org electronicAddress email Type");
        emailDto.setTypeCode("E");
        emailDto.setTypeId(2048l);

        emailDto.setAddress("unit_orgbundle1@testing.com");

        orgProviderElectronicAddresses.add(emailDto);

        // http type
        ElectronicAddressDto httpTypeDto = new ElectronicAddressDto();
        httpTypeDto.setActive(true);
        httpTypeDto.setCreatedDate(new Date());
        httpTypeDto.setDataOwnerCode("MOH2");
        httpTypeDto.setEndReasonCode("ERC2");
        httpTypeDto.setEffectiveStartDate(start);
        httpTypeDto.setEffectiveEndDate(end);
        httpTypeDto.setGenerationNum(1L);
        httpTypeDto.setInvalidatedDate(null);

        httpTypeDto.setType("Test org electronicAddress http Type");
        httpTypeDto.setTypeCode("H");
        httpTypeDto.setTypeId(1165l);

        httpTypeDto.setAddress("http://myplrtesting.fhir.org/ttt/aaa");

        orgProviderElectronicAddresses.add(httpTypeDto);

        return orgProviderElectronicAddresses;
    }

    public List<NoteDto> setOrgProviderNotes(Date start, Date end) {
        // org note
        List<NoteDto> orgNotes = new ArrayList<>();

        NoteDto orgNoteDto = new NoteDto();
        orgNoteDto.setDataOwnerCode("OwnerNote");
        orgNoteDto.setEndReasonCode("ERC_note");
        orgNoteDto.setEffectiveStartDate(start);
        orgNoteDto.setEffectiveEndDate(end);
        orgNoteDto.setCreatedDate(new Date());
        orgNoteDto.setGenerationNum(1L);
        orgNoteDto.setInvalidatedDate(null);

        orgNoteDto.setIdentifier("mynoteIDOrg01");
        orgNoteDto.setNoteText("my first NoteText for bundle organizationOne");

        orgNotes.add(orgNoteDto);

        return orgNotes;
    }

}
