/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.util;

import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ConditionsDto;
import ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DisciplinaryActionDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.InformationRouteDto;
import ca.bc.gov.health.plr.dto.provider.esb.NoteDto;
import ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.RegistryIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.RegistryUserRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.ADDRESS_ADDRESSLINE1TXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.ADDRESS_ADDRESSLINE2TXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.ADDRESS_ADDRESSLINE3TXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.ADDRESS_ADDRESSLINE4TXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.ADDRESS_ADDRESSTYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.ADDRESS_CITYTXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.ADDRESS_CMNCTNPRPSTYPCD;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.ADDRESS_COUNTRYCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.ADDRESS_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.ADDRESS_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.ADDRESS_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.ADDRESS_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.ADDRESS_POSTALCODEORZIPTXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.ADDRESS_PROVINCEORSTATETXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CONDITION_CONDITIONCHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CONDITION_CONDITIONTYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CONDITION_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CONDITION_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CONDITION_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CONDITION_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CONDITION_RESTRICTIONEXPLANATIONTXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CONDITION_RESTRICTIONFLAG;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CREDENTIAL_CREDENTIALDESIGNATIONTXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CREDENTIAL_CREDENTIALGRANTINGINSTTXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CREDENTIAL_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CREDENTIAL_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CREDENTIAL_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CREDENTIAL_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CREDENTIAL_EQUIVALENCYFLAG;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CREDENTIAL_INSTITUTIONCITYTXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CREDENTIAL_INSTITUTIONCOUNTRYCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CREDENTIAL_INSTITUTIONPROVINCECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CREDENTIAL_PROVIDERCREDENTIALTYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CREDENTIAL_REGISTRATIONNUMBERTXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.CREDENTIAL_YEARCREDENTIALISSUEDTXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DEMOGRAPHICS_COUNTRYOFBIRTHCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DEMOGRAPHICS_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DEMOGRAPHICS_DATEOFBIRTHDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DEMOGRAPHICS_DATEOFDEATHDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DEMOGRAPHICS_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DEMOGRAPHICS_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DEMOGRAPHICS_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DEMOGRAPHICS_GENDERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DEMOGRAPHICS_PROVORSTATEOFBIRTHTXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DISCIPLINARYACTION_ARCHIVEDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DISCIPLINARYACTION_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DISCIPLINARYACTION_DESCRIPTIONTXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DISCIPLINARYACTION_DISCIPLINARYACTIONCHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DISCIPLINARYACTION_DISPLAYFLAG;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DISCIPLINARYACTION_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DISCIPLINARYACTION_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.DISCIPLINARYACTION_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.EMAIL_CMNCTNPRPSTYPCD;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.EMAIL_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.EMAIL_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.EMAIL_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.EMAIL_ELECTRONICADDRESSTXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.EMAIL_ELECTRONICADDRESSTYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.EMAIL_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.ENVIRONMENTCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.EXPERTISE_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.EXPERTISE_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.EXPERTISE_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.EXPERTISE_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.EXPERTISE_ORIGINALSOURCEPROVIDERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.EXPERTISE_PROVEXPERTISEROLETYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.EXPERTISE_PROVIDEREXPERTISETYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.IDENTIFIER_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.IDENTIFIER_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.IDENTIFIER_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.IDENTIFIER_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.IDENTIFIER_IDENTIFIERTYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.IDENTIFIER_PROVIDERCHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.INFORMATIONROUTE_ADDRESSTYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.INFORMATIONROUTE_CMNCTNDATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.INFORMATIONROUTE_CMNCTNPRPSTYPCD;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.INFORMATIONROUTE_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.INFORMATIONROUTE_DEFAULTFLAG;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.INFORMATIONROUTE_DOCUMENTTYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.INFORMATIONROUTE_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.INFORMATIONROUTE_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.INFORMATIONROUTE_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.INFORMATIONROUTE_MECHANISMTYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.INFORMATIONROUTE_WORKLOCATIONCHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.INFORMATIONROUTE_WORKLOCATIONDATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.INTERACTIONTYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.MESSAGEDTM;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NAME_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NAME_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NAME_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NAME_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NAME_NAMETYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NAME_PNAMEPREFERREDFLAG;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NAME_PRSNFIRSTGIVENNAMETXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NAME_PRSNPREFIXTXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NAME_PRSNSECONDGIVENNAMETXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NAME_PRSNSUFFIXTXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NAME_PRSNSURNAMETXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NAME_PRSNTHIRDGIVENNAMETXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NOTE_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NOTE_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NOTE_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NOTE_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NOTE_NOTECHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.NOTE_NOTETEXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.ORIGINALEVENTDTM;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PHONE_AREACODENUM;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PHONE_CMNCTNPRPSTYPCD;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PHONE_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PHONE_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PHONE_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PHONE_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PHONE_EXTENSIONNUM;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PHONE_TELECOMMUNICATIONNMBRNUM;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PHONE_TLCMNCTNNMBRTYPCD;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PROVIDERRELATIONSHIP_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PROVIDERRELATIONSHIP_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PROVIDERRELATIONSHIP_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PROVIDERRELATIONSHIP_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PROVIDERRELATIONSHIP_RELATIONSHIPTYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PROVIDERRELATIONSHIP_RELATIONSHIPWITHPROVIDERCOLLEGEID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PROVIDERRELATIONSHIP_RELATIONSHIPWITHPROVIDERNAME;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PROVIDERRELATIONSHIP_RELATIONSHIPWITHPROVIDERTYPE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PROVIDER_HPTCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.PROVIDER_PARTYTYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.RECEIVINGAPPLICATIONCHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.RECEIVINGFACILITYCHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.RECEIVINGJURISDICTIONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.RECEIVINGNETWORKADDRESSCHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.RECEIVINGORGANISATIONCHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.REGISTRYIDENTIFIER_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.REGISTRYIDENTIFIER_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.REGISTRYIDENTIFIER_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.REGISTRYIDENTIFIER_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.REGISTRYIDENTIFIER_IDENTIFIERTYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.REGISTRYIDENTIFIER_PROVIDERCHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.REGISTRYUSERRELATIONSHIP_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.REGISTRYUSERRELATIONSHIP_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.REGISTRYUSERRELATIONSHIP_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.REGISTRYUSERRELATIONSHIP_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.REGISTRYUSERRELATIONSHIP_RELATEDUSERCHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.REGISTRYUSERRELATIONSHIP_RURELATIONSHIPTYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.RESPONSIBLEUSERCHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.SENDINGAPPLICATIONCHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.SENDINGFACILITYCHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.SENDINGJURISDICTIONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.SENDINGNETWORKADDRESSCHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.SENDINGORGANISATIONCHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.SENDINGUSERCHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.SOURCEENVIRONMENT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.SOURCEUSERID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.STATUS_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.STATUS_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.STATUS_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.STATUS_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.STATUS_STATUSCLASSCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.STATUS_STATUSREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.STATUS_STATUSTYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.UNIQUEMESSAGECHID;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.VERSIONNUMBERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.WORKLOCATIONDETAILS_ADDITIONALADDRESSEEINFOTXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.WORKLOCATIONDETAILS_DEFAULTFLAG;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.WORKLOCATIONDETAILS_EFFECTIVEENDDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.WORKLOCATIONDETAILS_EFFECTIVESTARTDATE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.WORKLOCATIONDETAILS_ENDREASONCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.WORKLOCATIONDETAILS_WORKLOCATIONNAMETXT;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.WORKLOCATIONDETAILS_WORKLOCATIONTYPECODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.WORKLOCATION_DATAOWNERCODE;
import static ca.bc.gov.moh.hsa.plr.converter.util.PLRTypeConverterTestConstants.WORKLOCATION_WORKLOCATIONCHID;
import ca.bc.gov.moh.hsa.plr.converter.utils.ConverterUtils;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 *
 * @author conrad.gustafson
 */
public class MaintainProviderResponseCreator implements PLRTypeConverterTestConstants {

    public static MaintainProviderResponse setupMaintainProviderResponse() throws ParseException {
        MaintainProviderResponse dto = new MaintainProviderResponse();

        dto.setUniqueMessageId(UNIQUEMESSAGECHID);

        dto.setSourceFacilityId(SENDINGFACILITYCHID);
        dto.setTargetFacilityId(RECEIVINGFACILITYCHID);

        dto.setSourceServer(SENDINGAPPLICATIONCHID);
        dto.setTargetServer(RECEIVINGAPPLICATIONCHID);

        dto.setSourceOrganizationChid(SENDINGORGANISATIONCHID);
        dto.setTargetOrganizationChid(RECEIVINGORGANISATIONCHID);

        dto.setSourceJurisdiction(SENDINGJURISDICTIONCODE);
        dto.setTargetJurisdiction(RECEIVINGJURISDICTIONCODE);

        dto.setMessageInteractionId(INTERACTIONTYPECODE);
        dto.setTargetEnvironment(ENVIRONMENTCODE);
        dto.setSourceEnvironment(SOURCEENVIRONMENT);
        dto.setVersion(VERSIONNUMBERCODE);

        dto.setTargetNetworkAddressChid(RECEIVINGNETWORKADDRESSCHID);
        dto.setSourceNetworkAddressChid(SENDINGNETWORKADDRESSCHID);

        dto.setMessageCreationTime(ConverterUtils.convertFromPLRStringToDate(MESSAGEDTM));
        dto.setOriginalEventDate(ConverterUtils.convertFromPLRStringToDate(ORIGINALEVENTDTM));

        dto.setResponsiblePersonUserId(RESPONSIBLEUSERCHID);

        dto.setSourceUserId(SOURCEUSERID);

        dto.setRegistryUserOrgId(SENDINGUSERCHID);

        setupProvider(dto);

        return dto;
    }

    private static void setupProvider(MaintainProviderResponse dto) throws ParseException {
        ProviderDetails providerDto = new ProviderDetails();
        dto.setProviderDetails(providerDto);

        providerDto.setProviderType(PROVIDER_PARTYTYPECODE);
        providerDto.setType(PROVIDER_HPTCODE);

        setupProviderIdentifiers(providerDto);
        setupProviderNames(providerDto);
        setupProviderAddresses(providerDto);
        setupProviderPhones(providerDto);
        setupElectronicAddresses(providerDto);
        setupPrsConditions(providerDto);
        setupDemographicDetails(providerDto);
        setupDisciplinaryAction(providerDto);
        setupInformationRoute(providerDto);
        setupNote(providerDto);
        setupProviderRelationships(providerDto);

        // Not mapped by HL7
        setupRegistryUserRelationships(providerDto);
        
        setupCredentials(providerDto);
        setupExpertises(providerDto);
        setupStatuses(providerDto);
        setupWorkLocations(providerDto);
    }

    public static void setupProviderRelationships(ProviderDetails providerDto) throws ParseException {
        List<ProviderRelationshipDto> providerRelationships = new ArrayList<>();
        ProviderRelationshipDto providerRelationship = new ProviderRelationshipDto();
        providerRelationships.add(providerRelationship);
        providerDto.setProviderRelationships(providerRelationships);

        providerRelationship.setTargetRelationshipTypeCode(PROVIDERRELATIONSHIP_RELATIONSHIPWITHPROVIDERTYPE);
        providerRelationship.setRelationshipTypeId(Long.valueOf(PROVIDERRELATIONSHIP_RELATIONSHIPWITHPROVIDERCOLLEGEID));
        providerRelationship.setRelationshipTypeCode(PROVIDERRELATIONSHIP_RELATIONSHIPTYPECODE);
        providerRelationship.setTargetRelationshipTypeId(Long.valueOf(PROVIDERRELATIONSHIP_RELATIONSHIPWITHPROVIDERNAME));

        providerRelationship.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(PROVIDERRELATIONSHIP_EFFECTIVESTARTDATE));
        providerRelationship.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(PROVIDERRELATIONSHIP_EFFECTIVEENDDATE));
        providerRelationship.setEndReasonCode(PROVIDERRELATIONSHIP_ENDREASONCODE);
        providerRelationship.setDataOwnerCode(PROVIDERRELATIONSHIP_DATAOWNERCODE);

    }

    public static void setupProviderIdentifiers(ProviderDetails providerDto) throws ParseException {
        List<CollegeIdentifierDto> identifiers = new ArrayList<>();
        CollegeIdentifierDto identifier = new CollegeIdentifierDto();
        identifiers.add(identifier);
        providerDto.setIdentifiers(identifiers);

        identifier.setIdentifier(IDENTIFIER_PROVIDERCHID);
        identifier.setTypeCode(IDENTIFIER_IDENTIFIERTYPECODE);
        identifier.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(IDENTIFIER_EFFECTIVESTARTDATE));
        identifier.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(IDENTIFIER_EFFECTIVEENDDATE));
        identifier.setEndReasonCode(IDENTIFIER_ENDREASONCODE);
        identifier.setDataOwnerCode(IDENTIFIER_DATAOWNERCODE);

        List<RegistryIdentifierDto> registryIdentifiers = new ArrayList<>();
        RegistryIdentifierDto registryIdentifier = new RegistryIdentifierDto();
        registryIdentifiers.add(registryIdentifier);
        providerDto.setRegistryIdentifiers(registryIdentifiers);

        registryIdentifier.setIdentifier(REGISTRYIDENTIFIER_PROVIDERCHID);
        registryIdentifier.setTypeCode(REGISTRYIDENTIFIER_IDENTIFIERTYPECODE);
        registryIdentifier.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(REGISTRYIDENTIFIER_EFFECTIVESTARTDATE));
        registryIdentifier.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(REGISTRYIDENTIFIER_EFFECTIVEENDDATE));
        registryIdentifier.setEndReasonCode(REGISTRYIDENTIFIER_ENDREASONCODE);
        registryIdentifier.setDataOwnerCode(REGISTRYIDENTIFIER_DATAOWNERCODE);
    }

    public static void setupProviderNames(ProviderDetails providerDto) throws ParseException {
        List<PersonNameDto> nameDtos = new ArrayList<>();
        PersonNameDto nameDto = new PersonNameDto();
        nameDtos.add(nameDto);
        providerDto.setIndNames(nameDtos);

        nameDto.setTypeCode(NAME_NAMETYPECODE);
        nameDto.setPreferred(convertFlagToBoolean(NAME_PNAMEPREFERREDFLAG));
        nameDto.setLastName(NAME_PRSNSURNAMETXT);
        nameDto.setFirstName(NAME_PRSNFIRSTGIVENNAMETXT);
        nameDto.setSecondName(NAME_PRSNSECONDGIVENNAMETXT);
        nameDto.setThirdName(NAME_PRSNTHIRDGIVENNAMETXT);
        nameDto.setSuffix(NAME_PRSNSUFFIXTXT);
        nameDto.setPrefix(NAME_PRSNPREFIXTXT);
        nameDto.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(NAME_EFFECTIVESTARTDATE));
        nameDto.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(NAME_EFFECTIVEENDDATE));
        nameDto.setEndReasonCode(NAME_ENDREASONCODE);
        nameDto.setDataOwnerCode(NAME_DATAOWNERCODE);
    }

    public static void setupProviderAddresses(ProviderDetails providerDto) throws ParseException {
        List<AddressDto> addresses = new ArrayList<>();
        AddressDto address = new AddressDto();
        addresses.add(address);
        providerDto.setAddresses(addresses);

        address.setCommunicationPurposeCode(ADDRESS_CMNCTNPRPSTYPCD);
        address.setTypeCode(ADDRESS_ADDRESSTYPECODE);
        address.setAddressLineOne(ADDRESS_ADDRESSLINE1TXT);
        address.setAddressLineTwo(ADDRESS_ADDRESSLINE2TXT);
        address.setAddressLineThree(ADDRESS_ADDRESSLINE3TXT);
        address.setAddressLineFour(ADDRESS_ADDRESSLINE4TXT);
        address.setCity(ADDRESS_CITYTXT);
        address.setProvinceOrStateTxt(ADDRESS_PROVINCEORSTATETXT);
        address.setPostalCode(ADDRESS_POSTALCODEORZIPTXT);
        address.setCountryCode(ADDRESS_COUNTRYCODE);
        address.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(ADDRESS_EFFECTIVESTARTDATE));
        address.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(ADDRESS_EFFECTIVEENDDATE));
        address.setEndReasonCode(ADDRESS_ENDREASONCODE);
        address.setDataOwnerCode(ADDRESS_DATAOWNERCODE);

    }

    public static void setupProviderPhones(ProviderDetails providerDto) throws ParseException {
        List<TelecommunicationDto> telecommunicationDtos = new ArrayList<>();
        TelecommunicationDto telecommunicationDto = new TelecommunicationDto();
        telecommunicationDtos.add(telecommunicationDto);
        providerDto.setTelecommunication(telecommunicationDtos);

        telecommunicationDto.setCommunicationPurposeCode(PHONE_CMNCTNPRPSTYPCD);
        telecommunicationDto.setTypeCode(PHONE_TLCMNCTNNMBRTYPCD);
        telecommunicationDto.setAreaCode(PHONE_AREACODENUM);
        telecommunicationDto.setNumber(PHONE_TELECOMMUNICATIONNMBRNUM);
        telecommunicationDto.setExtension(PHONE_EXTENSIONNUM);
        telecommunicationDto.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(PHONE_EFFECTIVESTARTDATE));
        telecommunicationDto.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(PHONE_EFFECTIVEENDDATE));
        telecommunicationDto.setEndReasonCode(PHONE_ENDREASONCODE);
        telecommunicationDto.setDataOwnerCode(PHONE_DATAOWNERCODE);
    }

    public static void setupElectronicAddresses(ProviderDetails providerDto) throws ParseException {
        List<ElectronicAddressDto> electronicAddresses = new ArrayList<>();
        ElectronicAddressDto electronicAddress = new ElectronicAddressDto();
        electronicAddresses.add(electronicAddress);
        providerDto.setElectronicAddresses(electronicAddresses);

        electronicAddress.setCommunicationPurposeCode(EMAIL_CMNCTNPRPSTYPCD);
        electronicAddress.setTypeCode(EMAIL_ELECTRONICADDRESSTYPECODE);
        electronicAddress.setAddress(EMAIL_ELECTRONICADDRESSTXT);
        electronicAddress.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(EMAIL_EFFECTIVESTARTDATE));
        electronicAddress.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(EMAIL_EFFECTIVEENDDATE));
        electronicAddress.setEndReasonCode(EMAIL_ENDREASONCODE);
        electronicAddress.setDataOwnerCode(EMAIL_DATAOWNERCODE);
    }

    public static void setupPrsConditions(ProviderDetails providerDto) throws ParseException {
        List<ConditionsDto> conditions = new ArrayList<>();
        ConditionsDto condition = new ConditionsDto();
        conditions.add(condition);
        providerDto.setConditions(conditions);

        condition.setIdentifier(CONDITION_CONDITIONCHID);
        condition.setTypeCode(CONDITION_CONDITIONTYPECODE);
        condition.setRestrictionFlag(convertFlagToBoolean(CONDITION_RESTRICTIONFLAG));
        condition.setRestrictionExplanationText(CONDITION_RESTRICTIONEXPLANATIONTXT);
        condition.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(CONDITION_EFFECTIVESTARTDATE));
        condition.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(CONDITION_EFFECTIVEENDDATE));
        condition.setEndReasonCode(CONDITION_ENDREASONCODE);
        condition.setDataOwnerCode(CONDITION_DATAOWNERCODE);
    }

    public static void setupDemographicDetails(ProviderDetails providerDto) throws ParseException {
        List<DemographicDetailsDto> demographicDetails = new ArrayList<>();
        DemographicDetailsDto demographicDetail = new DemographicDetailsDto();
        demographicDetails.add(demographicDetail);
        providerDto.setDemographicDetails(demographicDetails);

        demographicDetail.setBirthDate(ConverterUtils.convertFromPLRStringToDate(DEMOGRAPHICS_DATEOFBIRTHDATE));
        demographicDetail.setDeathDate(ConverterUtils.convertFromPLRStringToDate(DEMOGRAPHICS_DATEOFDEATHDATE));
        demographicDetail.setBirthCountry(DEMOGRAPHICS_COUNTRYOFBIRTHCODE);
        demographicDetail.setBirthProvState(DEMOGRAPHICS_PROVORSTATEOFBIRTHTXT);
        demographicDetail.setGenderCode(DEMOGRAPHICS_GENDERCODE);
        demographicDetail.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(DEMOGRAPHICS_EFFECTIVESTARTDATE));
        demographicDetail.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(DEMOGRAPHICS_EFFECTIVEENDDATE));
        demographicDetail.setEndReasonCode(DEMOGRAPHICS_ENDREASONCODE);
        demographicDetail.setDataOwnerCode(DEMOGRAPHICS_DATAOWNERCODE);
    }

    public static void setupDisciplinaryAction(ProviderDetails providerDto) throws ParseException {
        List<DisciplinaryActionDto> disciplinaryActions = new ArrayList<>();
        DisciplinaryActionDto disciplinaryAction = new DisciplinaryActionDto();
        disciplinaryActions.add(disciplinaryAction);
        providerDto.setDisciplinaryActions(disciplinaryActions);

        disciplinaryAction.setIdentifier(DISCIPLINARYACTION_DISCIPLINARYACTIONCHID);
        disciplinaryAction.setDisplayFlag(convertFlagToBoolean(DISCIPLINARYACTION_DISPLAYFLAG));
        disciplinaryAction.setDescription(DISCIPLINARYACTION_DESCRIPTIONTXT);
        disciplinaryAction.setArchiveDate(ConverterUtils.convertFromPLRStringToDate(DISCIPLINARYACTION_ARCHIVEDATE));

        disciplinaryAction.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(DISCIPLINARYACTION_EFFECTIVESTARTDATE));
        disciplinaryAction.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(DISCIPLINARYACTION_EFFECTIVEENDDATE));
        disciplinaryAction.setEndReasonCode(DISCIPLINARYACTION_ENDREASONCODE);
        disciplinaryAction.setDataOwnerCode(DISCIPLINARYACTION_DATAOWNERCODE);
    }

    public static void setupInformationRoute(ProviderDetails providerDto) throws ParseException {
        List<InformationRouteDto> informationRoutes = new ArrayList<>();
        InformationRouteDto informationRoute = new InformationRouteDto();
        informationRoutes.add(informationRoute);
        providerDto.setInformationRoutes(informationRoutes);

        informationRoute.setDocumentTypeCode(INFORMATIONROUTE_DOCUMENTTYPECODE);
        //informationRoute.setMechanismTypeCode(INFORMATIONROUTE_MECHANISMTYPECODE);
        informationRoute.setDefaultFlag(convertFlagToBoolean(INFORMATIONROUTE_DEFAULTFLAG));

        AddressDto addressDto = new AddressDto();
        informationRoute.setAddressDto(addressDto);
        addressDto.setTypeCode(ADDRESS_ADDRESSTYPECODE);
        addressDto.setCommunicationPurposeCode(ADDRESS_CMNCTNPRPSTYPCD);
        addressDto.setDataOwnerCode(ADDRESS_DATAOWNERCODE);
        addressDto.setEndReasonCode(ADDRESS_ENDREASONCODE);
        addressDto.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(ADDRESS_EFFECTIVESTARTDATE));
        addressDto.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(ADDRESS_EFFECTIVEENDDATE));
        informationRoute.setElectronicAddressDto(null);
        informationRoute.setTelecommunicationDto(null);

        informationRoute.setWorkLocationIdentifier(Long.valueOf(INFORMATIONROUTE_WORKLOCATIONCHID));
        informationRoute.setWorkLocationDataOwnerCode(INFORMATIONROUTE_WORKLOCATIONDATAOWNERCODE);

        informationRoute.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(INFORMATIONROUTE_EFFECTIVESTARTDATE));
        informationRoute.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(INFORMATIONROUTE_EFFECTIVEENDDATE));
        informationRoute.setEndReasonCode(INFORMATIONROUTE_ENDREASONCODE);
        informationRoute.setDataOwnerCode(INFORMATIONROUTE_DATAOWNERCODE);
    }

    public static void setupNote(ProviderDetails providerDto) throws ParseException {
        List<NoteDto> notes = new ArrayList<>();
        NoteDto note = new NoteDto();
        notes.add(note);
        providerDto.setNotes(notes);

        note.setIdentifier(NOTE_NOTECHID);
        note.setNoteText(NOTE_NOTETEXT);

        note.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(NOTE_EFFECTIVESTARTDATE));
        note.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(NOTE_EFFECTIVEENDDATE));
        note.setEndReasonCode(NOTE_ENDREASONCODE);
        note.setDataOwnerCode(NOTE_DATAOWNERCODE);
    }

    public static void setupRegistryUserRelationships(ProviderDetails providerDto) throws ParseException {
        List<RegistryUserRelationshipDto> registryUserRelationships = new ArrayList<>();
        RegistryUserRelationshipDto registryUserRelationship = new RegistryUserRelationshipDto();
        registryUserRelationships.add(registryUserRelationship);
        providerDto.setRegistryUserRelationships(registryUserRelationships);

        registryUserRelationship.setRegUserTypeCode(REGISTRYUSERRELATIONSHIP_RURELATIONSHIPTYPECODE);
        registryUserRelationship.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(REGISTRYUSERRELATIONSHIP_EFFECTIVESTARTDATE));
        registryUserRelationship.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(REGISTRYUSERRELATIONSHIP_EFFECTIVEENDDATE));
        registryUserRelationship.setEndReasonCode(REGISTRYUSERRELATIONSHIP_ENDREASONCODE);
        registryUserRelationship.setDataOwnerCode(REGISTRYUSERRELATIONSHIP_DATAOWNERCODE);
        registryUserRelationship.setRegistryUserChid(REGISTRYUSERRELATIONSHIP_RELATEDUSERCHID);
    }

    public static void setupCredentials(ProviderDetails providerDto) throws ParseException {
        List<CredentialsDto> credentials = new ArrayList<>();
        CredentialsDto credential = new CredentialsDto();
        credentials.add(credential);
        providerDto.setCredentials(credentials);

        credential.setTypeCode(CREDENTIAL_PROVIDERCREDENTIALTYPECODE);
        credential.setDesignation(CREDENTIAL_CREDENTIALDESIGNATIONTXT);
        credential.setRegistrationNumber(CREDENTIAL_REGISTRATIONNUMBERTXT);
        credential.setGrantingInstitution(CREDENTIAL_CREDENTIALGRANTINGINSTTXT);
        credential.setInstitutionCity(CREDENTIAL_INSTITUTIONCITYTXT);
        credential.setInstitutionProvStateCode(CREDENTIAL_INSTITUTIONPROVINCECODE);
        credential.setInstitutionCountryCode(CREDENTIAL_INSTITUTIONCOUNTRYCODE);
        credential.setEquivalencyFlag(convertFlagToBoolean(CREDENTIAL_EQUIVALENCYFLAG));
        credential.setYearIssued(CREDENTIAL_YEARCREDENTIALISSUEDTXT);

        credential.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(CREDENTIAL_EFFECTIVESTARTDATE));
        credential.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(CREDENTIAL_EFFECTIVEENDDATE));
        credential.setEndReasonCode(CREDENTIAL_ENDREASONCODE);
        credential.setDataOwnerCode(CREDENTIAL_DATAOWNERCODE);
    }

    private static void setupExpertises(ProviderDetails providerDto) throws ParseException {
        List<ExpertiseDto> expertises = new ArrayList<>();
        ExpertiseDto expertise = new ExpertiseDto();
        expertises.add(expertise);
        providerDto.setExpertise(expertises);

        expertise.setRoleTypeCode(EXPERTISE_PROVEXPERTISEROLETYPECODE);
        expertise.setTypeCode(EXPERTISE_PROVIDEREXPERTISETYPECODE);
        expertise.setSourcesCode(EXPERTISE_ORIGINALSOURCEPROVIDERCODE);

        expertise.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(EXPERTISE_EFFECTIVESTARTDATE));
        expertise.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(EXPERTISE_EFFECTIVEENDDATE));
        expertise.setEndReasonCode(EXPERTISE_ENDREASONCODE);
        expertise.setDataOwnerCode(EXPERTISE_DATAOWNERCODE);
    }

    private static void setupStatuses(ProviderDetails providerDto) throws ParseException {
        List<StatusDto> statuses = new ArrayList<>();
        StatusDto status = new StatusDto();
        statuses.add(status);
        providerDto.setStatuses(statuses);

        status.setTypeCode(STATUS_STATUSTYPECODE);
        status.setClassCode(STATUS_STATUSCLASSCODE);
        status.setReasonCode(STATUS_STATUSREASONCODE);

        status.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(STATUS_EFFECTIVESTARTDATE));
        status.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(STATUS_EFFECTIVEENDDATE));
        status.setEndReasonCode(STATUS_ENDREASONCODE);
        status.setDataOwnerCode(STATUS_DATAOWNERCODE);
    }

    private static void setupWorkLocations(ProviderDetails providerDto) throws ParseException {
        List<WorkLocationDto> workLocations = new ArrayList<>();
        WorkLocationDto workLocationDto = new WorkLocationDto();
        workLocations.add(workLocationDto);
        providerDto.setWorkLocationList(workLocations);

        workLocationDto.setIdentifier(Long.valueOf(WORKLOCATION_WORKLOCATIONCHID));
        
        // This seems to be somewhat redundant
        workLocationDto.setDataOwnerCode(WORKLOCATION_DATAOWNERCODE);

        setupWorkLocationDetails(workLocationDto);
        setupWorkLocationAddresses(workLocationDto);
        setupWorkLocationElectronicAddresses(workLocationDto);
        setupWorkLocationTelephones(workLocationDto);
        setupWorkLocationInformationRoutes(workLocationDto);
    }

    private static void setupWorkLocationDetails(WorkLocationDto workLocationDto) throws ParseException {
        List<WorkLocationDetailsDto> workLocationDetails = new ArrayList<>();
        WorkLocationDetailsDto detail = new WorkLocationDetailsDto();
        workLocationDetails.add(detail);
        workLocationDto.setWorkLocationDetails(workLocationDetails);

        detail.setName(WORKLOCATIONDETAILS_WORKLOCATIONNAMETXT);
        detail.setAdditionalAddresseeInfo(WORKLOCATIONDETAILS_ADDITIONALADDRESSEEINFOTXT);
        detail.setDefaultFlag(convertFlagToBoolean(WORKLOCATIONDETAILS_DEFAULTFLAG));
        detail.setTypeCode(WORKLOCATIONDETAILS_WORKLOCATIONTYPECODE);

        detail.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(WORKLOCATIONDETAILS_EFFECTIVESTARTDATE));
        detail.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(WORKLOCATIONDETAILS_EFFECTIVEENDDATE));
        detail.setEndReasonCode(WORKLOCATIONDETAILS_ENDREASONCODE);
        detail.setDataOwnerCode(WORKLOCATION_DATAOWNERCODE);
    }

    private static void setupWorkLocationAddresses(WorkLocationDto workLocationDto) throws ParseException {
        List<AddressDto> addresses = new ArrayList<>();
        AddressDto address = new AddressDto();
        addresses.add(address);
        workLocationDto.setAddresses(addresses);

        address.setCommunicationPurposeCode(ADDRESS_CMNCTNPRPSTYPCD);
        address.setTypeCode(ADDRESS_ADDRESSTYPECODE);
        address.setAddressLineOne(ADDRESS_ADDRESSLINE1TXT);
        address.setAddressLineTwo(ADDRESS_ADDRESSLINE2TXT);
        address.setAddressLineThree(ADDRESS_ADDRESSLINE3TXT);
        address.setAddressLineFour(ADDRESS_ADDRESSLINE4TXT);
        address.setCity(ADDRESS_CITYTXT);
        address.setProvinceOrStateTxt(ADDRESS_PROVINCEORSTATETXT);
        address.setPostalCode(ADDRESS_POSTALCODEORZIPTXT);
        address.setCountryCode(ADDRESS_COUNTRYCODE);
        address.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(ADDRESS_EFFECTIVESTARTDATE));
        address.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(ADDRESS_EFFECTIVEENDDATE));
        address.setEndReasonCode(ADDRESS_ENDREASONCODE);
        address.setDataOwnerCode(ADDRESS_DATAOWNERCODE);
    }

    private static void setupWorkLocationElectronicAddresses(WorkLocationDto workLocationDto) throws ParseException {
        List<ElectronicAddressDto> electronicAddresses = new ArrayList<>();
        ElectronicAddressDto electronicAddress = new ElectronicAddressDto();
        electronicAddresses.add(electronicAddress);
        workLocationDto.setElectronicAddresses(electronicAddresses);

        electronicAddress.setCommunicationPurposeCode(EMAIL_CMNCTNPRPSTYPCD);
        electronicAddress.setTypeCode(EMAIL_ELECTRONICADDRESSTYPECODE);
        electronicAddress.setAddress(EMAIL_ELECTRONICADDRESSTXT);
        electronicAddress.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(EMAIL_EFFECTIVESTARTDATE));
        electronicAddress.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(EMAIL_EFFECTIVEENDDATE));
        electronicAddress.setEndReasonCode(EMAIL_ENDREASONCODE);
        electronicAddress.setDataOwnerCode(EMAIL_DATAOWNERCODE);
    }

    private static void setupWorkLocationTelephones(WorkLocationDto workLocationDto) throws ParseException {
        List<TelecommunicationDto> telecommunicationDtos = new ArrayList<>();
        TelecommunicationDto telecommunicationDto = new TelecommunicationDto();
        telecommunicationDtos.add(telecommunicationDto);
        workLocationDto.setTelecommunications(telecommunicationDtos);

        telecommunicationDto.setCommunicationPurposeCode(PHONE_CMNCTNPRPSTYPCD);
        telecommunicationDto.setTypeCode(PHONE_TLCMNCTNNMBRTYPCD);
        telecommunicationDto.setAreaCode(PHONE_AREACODENUM);
        telecommunicationDto.setNumber(PHONE_TELECOMMUNICATIONNMBRNUM);
        telecommunicationDto.setExtension(PHONE_EXTENSIONNUM);
        telecommunicationDto.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(PHONE_EFFECTIVESTARTDATE));
        telecommunicationDto.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(PHONE_EFFECTIVEENDDATE));
        telecommunicationDto.setEndReasonCode(PHONE_ENDREASONCODE);
        telecommunicationDto.setDataOwnerCode(PHONE_DATAOWNERCODE);
    }

    private static void setupWorkLocationInformationRoutes(WorkLocationDto workLocationDto) throws ParseException {
        List<InformationRouteDto> informationRoutes = new ArrayList<>();
        InformationRouteDto informationRoute = new InformationRouteDto();
        informationRoutes.add(informationRoute);
        workLocationDto.setInformationRoutes(informationRoutes);

        informationRoute.setDocumentTypeCode(INFORMATIONROUTE_DOCUMENTTYPECODE);
        //informationRoute.setMechanismTypeCode(INFORMATIONROUTE_MECHANISMTYPECODE);
        informationRoute.setDefaultFlag(convertFlagToBoolean(INFORMATIONROUTE_DEFAULTFLAG));

        AddressDto addressDto = new AddressDto();
        informationRoute.setAddressDto(addressDto);
        addressDto.setTypeCode(ADDRESS_ADDRESSTYPECODE);
        addressDto.setCommunicationPurposeCode(ADDRESS_CMNCTNPRPSTYPCD);
        addressDto.setDataOwnerCode(ADDRESS_DATAOWNERCODE);
        addressDto.setEndReasonCode(ADDRESS_ENDREASONCODE);
        addressDto.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(ADDRESS_EFFECTIVESTARTDATE));
        addressDto.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(ADDRESS_EFFECTIVEENDDATE));
        
        informationRoute.setElectronicAddressDto(null);
        informationRoute.setTelecommunicationDto(null);

        informationRoute.setWorkLocationIdentifier(Long.valueOf(INFORMATIONROUTE_WORKLOCATIONCHID));
        informationRoute.setWorkLocationDataOwnerCode(INFORMATIONROUTE_WORKLOCATIONDATAOWNERCODE);

        informationRoute.setEffectiveStartDate(ConverterUtils.convertFromPLRStringToDate(INFORMATIONROUTE_EFFECTIVESTARTDATE));
        informationRoute.setEffectiveEndDate(ConverterUtils.convertFromPLRStringToDate(INFORMATIONROUTE_EFFECTIVEENDDATE));
        informationRoute.setEndReasonCode(INFORMATIONROUTE_ENDREASONCODE);
        informationRoute.setDataOwnerCode(INFORMATIONROUTE_DATAOWNERCODE);
    }

    private static boolean convertFlagToBoolean(String flag) {
        return "Y".equals(flag);
    }

}
