/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.QueryResponse;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import static ca.bc.gov.moh.hsa.plr.converter.facilitytofhir.FacilityDataBuilderFhirTest.*;
import static ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.MapIndivProviderToBCQueryResponseBundle.addProviderToBCQueryResponseBundle;
import ca.bc.gov.moh.hsa.plr.esb.fhir.common.FHIRFactory;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import org.hl7.fhir.r4.model.OperationOutcome;
import org.hl7.fhir.r4bc1.model.BCQueryResponseBundle;
import static org.junit.Assert.assertEquals;
import org.junit.Test;

/**
 * Unit tests for mapping Query Response metadata
 *
 * @author greg.perkins
 */
public class QueryResponseBundleTest {

    @Test
    public void testInfoMessage() {
        QueryResponse qr = new QueryResponse();
        qr.setProviderDetails(new ArrayList<>());
        Acknowledgment ack = new Acknowledgment("GRS.SYS.UNK.QRY.0.0.7067", "Query was OK");
        qr.addAcknowledgement(ack);
        FHIRFactory factory = new FHIRFactory("R4BC1");
        BCQueryResponseBundle response = (BCQueryResponseBundle) addProviderToBCQueryResponseBundle(factory, qr);
        OperationOutcome oo = (OperationOutcome)response.getEntry().get(0).getResource();
        assertEquals(oo.getIssue().get(0).getSeverity(),OperationOutcome.IssueSeverity.INFORMATION);
    }

    @Test
    public void testWarnMessage() {
        QueryResponse qr = new QueryResponse();
        qr.setProviderDetails(new ArrayList<>());
        Acknowledgment ack = new Acknowledgment("GRS.SYS.UNK.QRY.2.0.7067", "Query was WARN");
        qr.addAcknowledgement(ack);
        FHIRFactory factory = new FHIRFactory("R4BC1");
        BCQueryResponseBundle response = (BCQueryResponseBundle) addProviderToBCQueryResponseBundle(factory, qr);
        OperationOutcome oo = (OperationOutcome)response.getEntry().get(0).getResource();
        assertEquals(oo.getIssue().get(0).getSeverity(),OperationOutcome.IssueSeverity.WARNING);
    }

    @Test
    public void testErrorMessage() {
        QueryResponse qr = new QueryResponse();
        qr.setProviderDetails(new ArrayList<>());
        Acknowledgment ack = new Acknowledgment("GRS.SYS.UNK.QRY.1.0.7067", "Query was ERROR");
        qr.addAcknowledgement(ack);
        FHIRFactory factory = new FHIRFactory("R4BC1");
        BCQueryResponseBundle response = (BCQueryResponseBundle) addProviderToBCQueryResponseBundle(factory, qr);
        OperationOutcome oo = (OperationOutcome)response.getEntry().get(0).getResource();
        assertEquals(oo.getIssue().get(0).getSeverity(),OperationOutcome.IssueSeverity.ERROR);
    }

    @Test
    public void testCode() {
        QueryResponse qr = new QueryResponse();
        qr.setProviderDetails(new ArrayList<>());
        Acknowledgment ack = new Acknowledgment("GRS.SYS.UNK.QRY.0.0.7067", "Query was OK");
        qr.addAcknowledgement(ack);
        FHIRFactory factory = new FHIRFactory("R4BC1");
        BCQueryResponseBundle response = (BCQueryResponseBundle) addProviderToBCQueryResponseBundle(factory, qr);
        OperationOutcome oo = (OperationOutcome)response.getEntry().get(0).getResource();
        assertEquals(oo.getIssue().get(0).getDetails().getCodingFirstRep().getCode(), "GRS.SYS.UNK.QRY.0.0.7067");
    }

    @Test
    public void testDetails() {
        QueryResponse qr = new QueryResponse();
        qr.setProviderDetails(new ArrayList<>());
        Acknowledgment ack = new Acknowledgment("GRS.SYS.UNK.QRY.0.0.7067", "Query was OK");
        qr.addAcknowledgement(ack);
        FHIRFactory factory = new FHIRFactory("R4BC1");
        BCQueryResponseBundle response = (BCQueryResponseBundle) addProviderToBCQueryResponseBundle(factory, qr);
        OperationOutcome oo = (OperationOutcome)response.getEntry().get(0).getResource();
        assertEquals(oo.getIssue().get(0).getDetails().getText(),"Query was OK");
    }

    @Test
    public void testQueryResponseBundlePractitioner() {
        QueryResponse qr = new QueryResponse();
        Collection<ProviderDetails> providers = new ArrayList<>();
        FHIRFactory factory = new FHIRFactory("R4BC1");
        ProviderDetails providerDetails = new ProviderDetails();
        providerDetails.setPauthId(12L);
        providerDetails.setProviderType("DEN");
        providerDetails.setType("IND");
        
        Date start = getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY);
        Date end = getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY);

        List<CollegeIdentifierDto> providerIds = setIndivProviderIdentifiers(start, end);
        List<AddressDto> providerAddress = setIndivProviderAddressTypeMail(start, end);
        List<DemographicDetailsDto> demographicDetails = setIndivProviderDemographics(end, start);
        List<StatusDto> licenceStatuses = setIndivProviderLicenseStatus(start, end);
        List<PersonNameDto> providerNames = setIndivProviderNames(end, start);
        List<ProviderRelationshipDto> providerRelationships = setIndivProviderRelantionshipsOrg(start, end);

        providerDetails.setIdentifiers(providerIds);
        providerDetails.setAddresses(providerAddress);
        providerDetails.setDemographicDetails(demographicDetails);
        providerDetails.setStatuses(licenceStatuses);
        providerDetails.setIndNames(providerNames);
        providerDetails.setProviderRelationships(providerRelationships);

        providers.add(providerDetails);
        qr.setProviderDetails(providers);
        Acknowledgment ack = new Acknowledgment("GRS.SYS.UNK.QRY.0.0.7067", "Query was OK");
        qr.addAcknowledgement(ack);

        BCQueryResponseBundle bcQueryResponseBundle = (BCQueryResponseBundle) addProviderToBCQueryResponseBundle(factory, qr);
        assertEquals(((org.hl7.fhir.r4bc1.model.BCQueryResponseBundle) bcQueryResponseBundle).getEntry().size(), 2);
        
    }

    public List<ProviderRelationshipDto> setIndivProviderRelantionshipsOrg(Date start, Date end) {
        List<ProviderRelationshipDto> providerRelationships = new ArrayList<>();
        // provider org relantionships
        ProviderRelationshipDto providerOrgRelationship1 = new ProviderRelationshipDto();
        providerOrgRelationship1.setDataOwnerCode("Owner_RNA");
        providerOrgRelationship1.setEndReasonCode("ERC_RNA");
        providerOrgRelationship1.setEffectiveStartDate(start);
        providerOrgRelationship1.setEffectiveEndDate(end);
        providerOrgRelationship1.setRelationshipTypeCode("LOC");
        providerOrgRelationship1.setType("Test Provider Rel ORGID Type");
        providerOrgRelationship1.setIdentifierTypeCode("ORGID");
        providerOrgRelationship1.setIdentifier("ORGID_01");
        ProviderDetails orgProviderType = new ProviderDetails();
        orgProviderType.setProviderType("ORG");
        providerRelationships.add(providerOrgRelationship1);
        return providerRelationships;
    }

    public List<PersonNameDto> setIndivProviderNames(Date end, Date start) {
        // names
        List<PersonNameDto> providerNames = new ArrayList<>();
        PersonNameDto nameDto = new PersonNameDto();
        nameDto.setActive(true);
        nameDto.setCreatedDate(new Date());
        nameDto.setDataOwnerCode("MOH_A");
        nameDto.setEndReasonCode("ERC");
        nameDto.setEffectiveEndDate(end);
        nameDto.setEffectiveStartDate(start);
        nameDto.setGenerationNum(1L);
        nameDto.setInvalidatedDate(null);
        nameDto.setType("Test Type Usual");
        nameDto.setTypeCode("CURR");
        nameDto.setTypeId(997l);
        nameDto.setUserChid("Test User Chid JUNIT");
        nameDto.setFirstName("First Name Usual");
        nameDto.setLastName("Last Name Usual");
        nameDto.setPreferred(true);
        nameDto.setSecondName("Second Name Usual");
        nameDto.setThirdName("Third Name Usual");
        nameDto.setSuffix("Suffix Usual");
        nameDto.setPrefix("Prefix Usual");
        nameDto.setFullName("Person Full Name Official Test Two");
        providerNames.add(nameDto);
        return providerNames;
    }

    public List<StatusDto> setIndivProviderLicenseStatus(Date start, Date end) {
        // license status
        List<StatusDto> licenceStatuses = new ArrayList<>();
        StatusDto licenseStatusDto = new StatusDto();
        licenseStatusDto.setDataOwnerCode("OwnerRNA");
        licenseStatusDto.setEndReasonCode("ERC");
        licenseStatusDto.setEffectiveStartDate(start);
        licenseStatusDto.setEffectiveEndDate(end);
        licenseStatusDto.setCreatedDate(new Date());
        licenseStatusDto.setGenerationNum(1L);
        licenseStatusDto.setInvalidatedDate(null);
        licenseStatusDto.setType("Test license status");
        licenseStatusDto.setTypeCode("SUSPENDED");
        licenseStatusDto.setReasonCode("SUSPENDED_REASON_A");
        licenseStatusDto.setReason("Test license status reason");
        licenseStatusDto.setClassTxt("Test license status class");
        licenseStatusDto.setClassCode("LIC_SUSPENDED");
        licenceStatuses.add(licenseStatusDto);
        return licenceStatuses;
    }

    public List<DemographicDetailsDto> setIndivProviderDemographics(Date end, Date start) {
        // DemographicDetails
        List<DemographicDetailsDto> demographicDetails = new ArrayList<>();
        DemographicDetailsDto demoDetailsDto = new DemographicDetailsDto();
        demoDetailsDto.setActive(true);
        demoDetailsDto.setCreatedDate(new Date());
        ;
        demoDetailsDto.setDataOwnerCode("OwnerMOH");
        demoDetailsDto.setEndReasonCode("ERC");
        demoDetailsDto.setEffectiveEndDate(end);
        demoDetailsDto.setEffectiveStartDate(start);
        demoDetailsDto.setGenerationNum(1L);
        demoDetailsDto.setInvalidatedDate(null);
        demoDetailsDto.setType("Test Type Gender Male");
        demoDetailsDto.setTypeCode("M");
        demoDetailsDto.setUserChid("Test User Chiid");
        demoDetailsDto.setBirthCountry("Canada");
        demoDetailsDto.setBirthCountryCode("CA");
        demoDetailsDto.setBirthDate(getEffectiveStartDate(1980, 0, 10));
        demoDetailsDto.setBirthProvState("BC");
        demoDetailsDto.setDeathDate(getEffectiveEndDate(2021, 5, 20));
        demoDetailsDto.setGender("Male");
        demoDetailsDto.setGenderCode("M");
        demoDetailsDto.setGenderId(2332l);
        demographicDetails.add(demoDetailsDto);
        return demographicDetails;
    }

    public List<AddressDto> setIndivProviderAddressTypeMail(Date start, Date end) {
        // address
        List<AddressDto> providerAddress = new ArrayList<>();
        AddressDto addressTypeMail = new AddressDto();
        addressTypeMail.setDataOwnerCode("OwnerRNA");
        addressTypeMail.setEndReasonCode("ERC");
        addressTypeMail.setEffectiveStartDate(start);
        addressTypeMail.setEffectiveEndDate(end);
        addressTypeMail.setActive(true);
        addressTypeMail.setCreatedDate(new Date());
        addressTypeMail.setGenerationNum(1L);
        addressTypeMail.setInvalidatedDate(null);
        addressTypeMail.setType("Test Address mail Type");
        addressTypeMail.setTypeCode("M");
        addressTypeMail.setTypeId(2838l);  ///address type code Mailing
        addressTypeMail.setUserChid("Test User Chid JUNIT");
        addressTypeMail.setAddressLineOne("Address Line One Mail");
        addressTypeMail.setAddressLineTwo("Address Line Two Mail");
        addressTypeMail.setAddressLineThree("Address Line Three Mail");
        addressTypeMail.setCity("Victoria");
        addressTypeMail.setPostalCode("V9V 9V9");
        addressTypeMail.setFullAddress("Full Address Test Mail Sample 1");
        addressTypeMail.setCommunicationPurpose("Communication Purpose");
        addressTypeMail.setCommunicationPurposeCode("BC");
        addressTypeMail.setCommunicationPurposeId(2802l);
        addressTypeMail.setCountry("Canada");
        addressTypeMail.setCountryCode("CA");
        addressTypeMail.setCountryId(1239l);
        addressTypeMail.setProvinceOrStateTxt("British Columbia (BC)");
        providerAddress.add(addressTypeMail);
        return providerAddress;
    }

    public List<CollegeIdentifierDto> setIndivProviderIdentifiers(Date start, Date end) {
        // identifiers
        List<CollegeIdentifierDto> providerIds = new ArrayList<>();
        CollegeIdentifierDto indivProviderIdentifier = new CollegeIdentifierDto();
        indivProviderIdentifier.setDataOwnerCode("OwnerRNA");
        indivProviderIdentifier.setEndReasonCode("ERC");
        indivProviderIdentifier.setEffectiveStartDate(start);
        indivProviderIdentifier.setEffectiveEndDate(end);
        indivProviderIdentifier.setActive(true);
        indivProviderIdentifier.setCreatedDate(new Date());
        indivProviderIdentifier.setGenerationNum(1L);
        indivProviderIdentifier.setInvalidatedDate(null);
        indivProviderIdentifier.setType("Test IPC Type");
        indivProviderIdentifier.setTypeCode("IPC");
        indivProviderIdentifier.setIdentifier("IPC.00000005.BC.PRS");
        indivProviderIdentifier.setUserChid("Test User Chid IPC");
        providerIds.add(indivProviderIdentifier);
        
        // org identifier
        CollegeIdentifierDto indivProviderIdentifierOrg = new CollegeIdentifierDto();
        indivProviderIdentifierOrg.setDataOwnerCode("Owner_ORG");
        indivProviderIdentifierOrg.setEndReasonCode("ERC_ORG");
        indivProviderIdentifierOrg.setEffectiveStartDate(start);
        indivProviderIdentifierOrg.setEffectiveEndDate(end);
        indivProviderIdentifierOrg.setActive(true);
        indivProviderIdentifierOrg.setCreatedDate(new Date());
        indivProviderIdentifierOrg.setGenerationNum(1L);
        indivProviderIdentifierOrg.setInvalidatedDate(null);
        indivProviderIdentifierOrg.setType("Test ORG Type");
        indivProviderIdentifierOrg.setTypeCode("ORGID");
        indivProviderIdentifierOrg.setIdentifier("ORGID_01");
        indivProviderIdentifierOrg.setUserChid("Test User Chid ORGID");
        providerIds.add(indivProviderIdentifierOrg);
        return providerIds;
    }

}
