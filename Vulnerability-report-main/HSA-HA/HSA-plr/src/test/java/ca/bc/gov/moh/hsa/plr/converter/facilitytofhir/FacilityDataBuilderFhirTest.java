/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.facilitytofhir;

import ca.bc.gov.health.plr.dto.facility.esb.CivicAddressDto;
import ca.bc.gov.health.plr.dto.facility.esb.FacilityDetailsDto;
import ca.bc.gov.health.plr.dto.facility.esb.FacilityDto;
import ca.bc.gov.health.plr.dto.facility.esb.FacilityIdentifierDto;
import ca.bc.gov.health.plr.dto.facility.esb.FacilityNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.DemographicDetailsDto;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.NoteDto;
import ca.bc.gov.health.plr.dto.provider.esb.RegistryIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir.FhirContextFactory;
import ca.uhn.fhir.context.FhirContext;
import ca.uhn.fhir.validation.FhirValidator;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

/**
 *
 * @author dan.stepanov
 */
public class FacilityDataBuilderFhirTest {

    public static int CAL_EFF_START_DATE_YEAR = 2020;
    public static int CAL_EFF_START_DATE_MONTH = 0;
    public static int CAL_EFF_START_DATE_DAY = 5;
    public static int CAL_EFF_END_DATE_YEAR = 2050;
    public static int CAL_EFF_END_DATE_MONTH = 11;
    public static int CAL_EFF_END_DATE_DAY = 30;
    public static final Date SYSTEM_START_DATE__NULL_FHIR = null;
    public static int PERIOD_START_DATE_YEAR = 2020;
    public static int PERIOD_START_DATE_MONTH = 7;
    public static int PERIOD_START_DATE_DAY = 20;
    public static int PERIOD_END_DATE_YEAR = 2040;
    public static int PERIOD_END_DATE_MONTH = 9;
    public static int PERIOD_END_DATE_DAY = 15;

    public static FhirValidator initFhirValidatorTest() {
        FhirContext ctx = FhirContextFactory.forR4();

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ctx.newValidator();
        fhirValidator.setValidateAgainstStandardSchema(true);
        return fhirValidator;
    }

    public static FacilityDto getFacilityLocationDetails() {
        FacilityDto facility = initFullFacility();

        return facility;
    }

    private static FacilityDto initFullFacility() {

        FacilityDto facilityDetails = new FacilityDto();
        
        facilityDetails.setFacilityId(20L);

        List<AddressDto> addresses = new ArrayList<>();
        addresses.add(getAddressMailBusinessContact());
//        addresses.add(getAddressMailDoctorContact());
        facilityDetails.setAddresses(addresses);

        facilityDetails.setCivicAddresses(getFacilityCivicAddress());

        List<ElectronicAddressDto> electronicAddress = new ArrayList<>();
        electronicAddress.add(getElectronicAddressEmail());
        electronicAddress.add(getElectronicAddressFtp());
        facilityDetails.setElectronicAddresses(electronicAddress);

        List<FacilityIdentifierDto> facilityIdentifiers = new ArrayList<>();
        facilityIdentifiers.add(getIdentifierIFC());
        facilityIdentifiers.add(getIdentifierCFN());
        facilityDetails.setFacilityIdentifiers(facilityIdentifiers);

        facilityDetails.setFacilityNames(getFacilityNameOfficial());

        List<NoteDto> facilityNotes = new ArrayList<>();
        facilityNotes.add(getFacilityNotesTest());
        facilityDetails.setNotes(facilityNotes);

        List<RegistryIdentifierDto> registryIdentifier = new ArrayList<>();
        facilityDetails.setRegistryIdentifiers(registryIdentifier);

        List<TelecommunicationDto> telecommunication = new ArrayList<>();
        telecommunication.add(getTelecommunicationPhone());
        telecommunication.add(getTelecommunicationFax());
        facilityDetails.setTelecommunication(telecommunication);

        facilityDetails.setFacilityDetails(getFacilityDetailsAddtionalInfo());

        return facilityDetails;
    }

    // create new FHIR identifiers for Facility CFN
    public static FacilityIdentifierDto getIdentifierCFN() {
        FacilityIdentifierDto facilityIdentifierCFN = new FacilityIdentifierDto();
        facilityIdentifierCFN.setActive(true);
        facilityIdentifierCFN.setCreatedDate(new Date());
        facilityIdentifierCFN.setDataOwnerCode("HA7");
        facilityIdentifierCFN.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        facilityIdentifierCFN.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        facilityIdentifierCFN.setEndReasonCode(null);
        facilityIdentifierCFN.setGenerationNum(1L);
        facilityIdentifierCFN.setIdentifier("CFN.00000014.BC.PRS");
        facilityIdentifierCFN.setInvalidatedDate(null);
        facilityIdentifierCFN.setType("Test Facility Type CFN");
        facilityIdentifierCFN.setTypeCode("CFN");
        facilityIdentifierCFN.setUserChid("Test Facility User Chiid");
        return facilityIdentifierCFN;
    }

    // create new FHIR identifiers for Facility IFC
    public static FacilityIdentifierDto getIdentifierIFC() {
        FacilityIdentifierDto facilityIdentifierIFC = new FacilityIdentifierDto();
        facilityIdentifierIFC.setActive(true);
        facilityIdentifierIFC.setCreatedDate(new Date());
        facilityIdentifierIFC.setDataOwnerCode("HA7");
        facilityIdentifierIFC.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        facilityIdentifierIFC.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        facilityIdentifierIFC.setEndReasonCode(null);
        facilityIdentifierIFC.setGenerationNum(1L);
        facilityIdentifierIFC.setIdentifier("IFC.00000015.BC.PRS");
        facilityIdentifierIFC.setInvalidatedDate(null);
        facilityIdentifierIFC.setType("Test Facility Type IFC");
        facilityIdentifierIFC.setTypeCode("IFC");
        facilityIdentifierIFC.setUserChid("Test Facility User Chiid");
        return facilityIdentifierIFC;
    }

    public static List<FacilityNameDto> getFacilityNameOfficial() {
        List<FacilityNameDto> facilityNames = new ArrayList<>();
        FacilityNameDto facilityName = new FacilityNameDto();
        facilityName.setActive(true);
        facilityName.setCreatedDate(new Date());
        facilityName.setDataOwnerCode("MOH");
        facilityName.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        facilityName.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        facilityName.setEndReasonCode(null);
        facilityName.setGenerationNum(1L);
        facilityName.setInvalidatedDate(null);
        facilityName.setType("Test Type Official");
        facilityName.setTypeCode("CURR");
        facilityName.setTypeId(1147l);//legal/official name
        facilityName.setUserChid("Test User Chid JUNIT");

        facilityName.setName("Facility Official Name");
        facilityName.setDescription("Facility Alias description Name");
        
        facilityNames.add(facilityName);

        return facilityNames;
    }

    public static AddressDto getAddressMailBusinessContact() {
        AddressDto result = new AddressDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("Test Type");
        result.setTypeCode("M");
        result.setTypeId(2838l);  ///address type code Mailing

        result.setUserChid("Test User Chid JUNIT");

        result.setAddressLineOne("Address Line One Mail Business Contact");
        result.setAddressLineTwo("Address Line Two Mail Business Contact");
        result.setAddressLineThree("Address Line Three Mail Business Contact");
        result.setCity("Victoria");
        result.setPostalCode("V9V 9V9");
        result.setFullAddress("Full Address Test Mail Business Contact Sample 1");
        result.setCommunicationPurpose("Communication Purpose");
        result.setCommunicationPurposeCode("BC");
        result.setCommunicationPurposeId(2802l);
        result.setCountry("Canada");
        result.setCountryCode("CA");
        result.setCountryId(1239l);
        result.setProvinceOrStateTxt("British Columbia (BC)");

        return result;
    }

    public static AddressDto getAddressMailDoctorContact() {
        AddressDto result = new AddressDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("RNA");
        result.setEffectiveEndDate(SYSTEM_START_DATE__NULL_FHIR);
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("Test Type");
        result.setTypeCode("M");
        result.setTypeId(2838l);  ///address type code Mailing

        result.setUserChid("Test User Chid JUNIT");

        result.setAddressLineOne("Address Line One Mail Doctor Contact");
        result.setAddressLineTwo("Address Line Two Mail Doctor Contact");
        result.setAddressLineThree("Address Line Three Mail Doctor Contact");
        result.setCity("Vernon");
        result.setPostalCode("V5V 5V5");
        result.setFullAddress("Full Address Test Mail Doctor Contact Sample 2");
        result.setCommunicationPurpose("Communication Purpose");
        result.setCommunicationPurposeCode("DC");
        result.setCommunicationPurposeId(4241l);
        result.setCountry("Canada");
        result.setCountryCode("CA");
        result.setCountryId(1239l);
        result.setProvinceOrStateTxt("British Columbia (BC)");

        return result;
    }

    public static AddressDto getAddressPhysical() {
        AddressDto result = new AddressDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("RNA");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("Test Physical Type");
        result.setTypeCode("P");
        result.setTypeId(2839l);  ///address type code Physical

        result.setUserChid("Test User Chid JUNIT");

        result.setAddressLineOne("Address Line One Physical");
        result.setAddressLineTwo("Address Line Two Physical");
        result.setAddressLineThree("Address Line Three Physical");
        result.setCity("Vernon");
        result.setPostalCode("V9V 9V7");
        result.setFullAddress("Full Address Test Physical Sample 1");
        result.setCommunicationPurpose("Communication Purpose");
        result.setCommunicationPurposeCode("BC");
        result.setCommunicationPurposeId(2802l);
        result.setCountry("Canada");
        result.setCountryCode("CA");
        result.setCountryId(1239l);
        result.setProvinceOrStateTxt("British Columbia (BC)");

        return result;
    }

    public static List<CivicAddressDto> getFacilityCivicAddress() {
        
        List<CivicAddressDto> facilityCivicAddresses = new ArrayList<>();
        
        CivicAddressDto civicAddressFacility = new CivicAddressDto();
        civicAddressFacility.setActive(true);
        civicAddressFacility.setCreatedDate(new Date());
        civicAddressFacility.setDataOwnerCode("MOH");
        civicAddressFacility.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        civicAddressFacility.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        civicAddressFacility.setEndReasonCode(null);
        civicAddressFacility.setGenerationNum(1L);
        civicAddressFacility.setInvalidatedDate(null);
        civicAddressFacility.setType("Test Civic Address Type");
        civicAddressFacility.setTypeCode("P");
        civicAddressFacility.setTypeId(2839l);  ///address type code Physical

        civicAddressFacility.setUserChid("Test Civic Address User Chid JUNIT");

        civicAddressFacility.setAddressLineOne("Civic Address Line One Physical");
        civicAddressFacility.setAddressLineTwo("Civic Address Line Two Physical");
        civicAddressFacility.setAddressLineThree("Civic Address Line Three Physical");
        civicAddressFacility.setCity("Vancouver");

//        facilityNote.setCommunicationPurpose("Communication Purpose");
//        facilityNote.setCommunicationPurposeCode("BC");
//        facilityNote.setCommunicationPurposeId(2802l);
        civicAddressFacility.setCountryCode("CA");
        civicAddressFacility.setProvinceOrStateTxt("British Columbia (BC)");

        // set latid/longit
        civicAddressFacility.setLatitude(new BigDecimal(53.726669));
        civicAddressFacility.setLongitude(new BigDecimal(-127.647621));
        
        // set CHSA code name
        civicAddressFacility.setChsaNameCode("CHSA name code test AAA");
        
        facilityCivicAddresses.add(civicAddressFacility);

        return facilityCivicAddresses;
    }

    public static TelecommunicationDto getTelecommunicationFax() {
        TelecommunicationDto result = new TelecommunicationDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("Test Type");
        result.setTypeCode("FAX");
        result.setTypeId(2412l);
        result.setUserChid("Test User Chiid JUNIT");

        result.setAreaCode("250 ");
        result.setCommunicationPurpose("Communication Purpose");
        result.setCommunicationPurposeCode("BC");
        result.setCommunicationPurposeId(4241l);
        result.setExtension("ext. 1234");
        result.setNumber("555-1234 ");

        return result;
    }

    public static TelecommunicationDto getTelecommunicationPhone() {
        TelecommunicationDto result = new TelecommunicationDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        result.setDataOwnerCode("MOH");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(1L);
        result.setInvalidatedDate(null);
        result.setType("Test Type");
        result.setTypeCode("T");
        result.setTypeId(1161l);
        result.setUserChid("Test User Chiid JUNIT");

        result.setAreaCode("250 ");
        result.setCommunicationPurpose("Communication Purpose");
        result.setCommunicationPurposeCode("HC");
        result.setCommunicationPurposeId(2802l);
        result.setExtension("");
        result.setNumber("345-1111 ");

        return result;
    }

    public static ElectronicAddressDto getElectronicAddressEmail() {
        ElectronicAddressDto result = new ElectronicAddressDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        //result.setDataOwnerCode("JUNIT");
        result.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(999L);
        result.setInvalidatedDate(null);
        result.setCommunicationPurposeId(2802l);
        result.setCommunicationPurposeCode("BC");
        result.setCommunicationPurpose("BC");
        result.setTypeId(2049l);
        result.setTypeCode("E");
        result.setUserChid("TODO");
        result.setDataOwnerCode("MOH");
        result.setAddress("facilityemail04@testing.com");
        return result;
    }

    public static ElectronicAddressDto getElectronicAddressFtp() {
        ElectronicAddressDto result = new ElectronicAddressDto();
        result.setActive(true);
        result.setCreatedDate(new Date());
        //result.setDataOwnerCode("JUNIT");
        result.setEffectiveEndDate(SYSTEM_START_DATE__NULL_FHIR);
        result.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        result.setEndReasonCode(null);
        result.setGenerationNum(999L);
        result.setInvalidatedDate(null);
        result.setCommunicationPurposeId(1465l);
        result.setCommunicationPurposeCode("BC");
        result.setCommunicationPurpose("BC");
        result.setTypeId(2048l);
        result.setTypeCode("F");
        result.setUserChid("TODO");
        result.setDataOwnerCode("MOH");
        result.setAddress("ftp://public.ftp-servers.test_example.com/mytestdir/mytestfacility.txt");
        return result;
    }

    public static List<FacilityDetailsDto> getFacilityDetailsAddtionalInfo() {
        
        List<FacilityDetailsDto> facilityDetailsDtos = new ArrayList<>();
        
        FacilityDetailsDto facilityDetails = new FacilityDetailsDto();
        facilityDetails.setActive(true);
        facilityDetails.setCreatedDate(new Date());
        facilityDetails.setDataOwnerCode("MOH");
        facilityDetails.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        facilityDetails.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        facilityDetails.setEndReasonCode(null);
        facilityDetails.setGenerationNum(1L);
        facilityDetails.setInvalidatedDate(null);
        facilityDetails.setType("Test Facility Details Type");
//        facilityNote.setTypeCode("P");
//        facilityNote.setTypeId(2839l);  ///address type code Physical
        facilityDetails.setUserChid("Test Facility Details User Chid JUNIT");

        facilityDetails.setAdditionalInfo("Facility Details additional info notes");
        
        facilityDetailsDtos.add(facilityDetails);

        return facilityDetailsDtos;
    }
    
    public static NoteDto getFacilityNotesTest () {
        NoteDto facilityNote = new NoteDto();
        facilityNote.setActive(true);
        facilityNote.setCreatedDate(getEffectiveStartDate(PERIOD_START_DATE_YEAR, PERIOD_START_DATE_MONTH, PERIOD_START_DATE_DAY));
        facilityNote.setDataOwnerCode("MOH");
        facilityNote.setDataOwnerName("Ministry of Health");
        facilityNote.setEffectiveEndDate(getEffectiveEndDate(CAL_EFF_END_DATE_YEAR, CAL_EFF_END_DATE_MONTH, CAL_EFF_END_DATE_DAY));
        facilityNote.setEffectiveStartDate(getEffectiveStartDate(CAL_EFF_START_DATE_YEAR, CAL_EFF_START_DATE_MONTH, CAL_EFF_START_DATE_DAY));
        facilityNote.setEndReasonCode("CHG");
        facilityNote.setEndReasonCodeId(820l);
        facilityNote.setGenerationNum(1L);
        facilityNote.setInvalidatedDate(getEffectiveEndDate(PERIOD_END_DATE_YEAR, PERIOD_END_DATE_MONTH, PERIOD_END_DATE_DAY));
        facilityNote.setType("Test Facility Note Type");
        facilityNote.setUserChid("Test Facility Note User Chid JUNIT");
        
        facilityNote.setNoteText("BC Note text 001 for FHIR custom extension");
        facilityNote.setIdentifier("BC Note identifier 1 for FHIR custom extension");      
        
        return facilityNote;
    }

    /**
     * Creates an effective start date instance
     *
     * @param yearStart
     * @param monthStart
     * @param dayStart
     * @return Date instance for start time
     */
    public static Date getEffectiveStartDate(int yearStart, int monthStart, int dayStart) {
        Calendar cal = Calendar.getInstance();
        cal.clear();
        cal.set(yearStart, monthStart, dayStart);
        truncateTime(cal);

        return cal.getTime();
    }

    /**
     * Creates an effective end date instance
     *
     * @param yearEnd
     * @param monthEnd
     * @param dayEnd
     * @return Date instance for end time
     */
    public static Date getEffectiveEndDate(int yearEnd, int monthEnd, int dayEnd) {
        Calendar cal = Calendar.getInstance();
        cal.clear();
        cal.set(yearEnd, monthEnd, dayEnd);
        truncateTime(cal);

        return cal.getTime();
    }

    /**
     * Truncates time part of a Calendar object
     *
     * @param cal
     */
    public static void truncateTime(Calendar cal) {

        cal.set(Calendar.HOUR_OF_DAY, 0);
        cal.set(Calendar.MINUTE, 0);
        cal.set(Calendar.SECOND, 0);
        cal.set(Calendar.MILLISECOND, 0);
    }

}
