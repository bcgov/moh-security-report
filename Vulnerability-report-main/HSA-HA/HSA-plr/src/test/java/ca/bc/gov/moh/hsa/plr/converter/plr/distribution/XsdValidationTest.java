/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.plr.distribution;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.DistributionNotification;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.esb.QueryResponse;
import ca.bc.gov.health.plr.dto.provider.esb.DistributionChangeType;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.moh.hsa.plr.converter.PLRTypeConverter;
import ca.bc.gov.moh.hsa.plr.converter.plr.DistributionDtoToEntityConverter;
import ca.bc.gov.moh.hsa.plr.converter.plr.UpdateDistributionEntityToHl7Converter;
import java.io.StringWriter;
import java.util.Arrays;
import java.util.Date;
import javax.xml.XMLConstants;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Marshaller;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;
import org.hl7.v3.m4_0.PRPMIN301011MCCIMT000300Message;
import org.hl7.v3.m4_0.PRPMIN303011MCCIMT000300Message;
import org.hl7.v3.m4_16.PRPMIN303030CA;
import org.hl7.v3.m4_16.PRPMIN306011UV01;
import static org.junit.Assert.assertNotNull;
import org.junit.Test;
import org.springframework.xml.transform.StringSource;

/**
 *
 * @author greg.perkins
 */
public class XsdValidationTest {

    @Test
    public void testConvertAndValidateAdd() throws Exception {
        PRPMIN301011MCCIMT000300Message result = PLRTypeConverter.convertMaintainProviderRequestDTOToAdd40(createMaintainResponse());
        StringWriter writer = new StringWriter();
        JAXBContext context = JAXBContext.newInstance(PRPMIN301011MCCIMT000300Message.class);
        Marshaller m = context.createMarshaller();
        m.marshal(result, writer);

        Source schemaFile = new StreamSource(this.getClass().getResourceAsStream("/schema/hl7v3_4.0/PRPM_IN301011.xsd"), this.getClass().getResource("/schema/hl7v3_4.0/PRPM_IN301011.xsd").toString());
        Source xmlFile = new StringSource(writer.toString());
        SchemaFactory schemaFactory = SchemaFactory
                .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
        Schema schema = schemaFactory.newSchema(schemaFile);

        Validator validator = schema.newValidator();
        validator.validate(xmlFile);
    }

    @Test
    public void testConvertAndValidateUpdate() throws Exception {
        PRPMIN303011MCCIMT000300Message result = PLRTypeConverter.convertMaintainProviderRequestDTOToUpdate40(createMaintainResponse());
        StringWriter writer = new StringWriter();
        JAXBContext context = JAXBContext.newInstance(PRPMIN303011MCCIMT000300Message.class);
        Marshaller m = context.createMarshaller();
        m.marshal(result, writer);

        Source schemaFile = new StreamSource(this.getClass().getResourceAsStream("/schema/hl7v3_4.0/PRPM_IN303011.xsd"), this.getClass().getResource("/schema/hl7v3_4.0/PRPM_IN303011.xsd").toString());
        Source xmlFile = new StringSource(writer.toString());
        SchemaFactory schemaFactory = SchemaFactory
                .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
        Schema schema = schemaFactory.newSchema(schemaFile);

        Validator validator = schema.newValidator();
        validator.validate(xmlFile);
    }

    @Test
    public void testConvertAndValidateDistribution() throws Exception {
        ProviderDetails details = ProviderTestDataBuilder.getPublicProviderDetails();
        DistributionNotification in = createNotification(details);
        PRPMIN303030CA result = UpdateDistributionEntityToHl7Converter.convertToPRPMIN303030CA(DistributionDtoToEntityConverter.convert(in));
        assertNotNull(result);
        StringWriter writer = new StringWriter();
        JAXBContext context = JAXBContext.newInstance(PRPMIN303030CA.class);
        Marshaller m = context.createMarshaller();
        m.marshal(result, writer);

        Source schemaFile = new StreamSource(this.getClass().getResourceAsStream("/schema/hl7v3_4.1.6/PRPM_IN303030CA.xsd"), this.getClass().getResource("/schema/hl7v3_4.1.6/PRPM_IN303030CA.xsd").toString());
        Source xmlFile = new StringSource(writer.toString());
        SchemaFactory schemaFactory = SchemaFactory
                .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
        Schema schema = schemaFactory.newSchema(schemaFile);

        Validator validator = schema.newValidator();
        validator.validate(xmlFile);
    }

    @Test
    public void testConvertAndValidateQueryResponse() throws Exception {

        PRPMIN306011UV01 result = PLRTypeConverter.convertQueryResponseToPRPMIN306011UV01(createQueryResponse());

        StringWriter writer = new StringWriter();
        JAXBContext context = JAXBContext.newInstance(PRPMIN306011UV01.class);
        Marshaller m = context.createMarshaller();
        m.marshal(result, writer);
        Source schemaFile = new StreamSource(this.getClass().getResourceAsStream("/schema/hl7v3_4.1.6/PRPM_IN306011UV01.xsd"), this.getClass().getResource("/schema/hl7v3_4.1.6/PRPM_IN306011UV01.xsd").toString());
        Source xmlFile = new StringSource(writer.toString());
        SchemaFactory schemaFactory = SchemaFactory
                .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
        Schema schema = schemaFactory.newSchema(schemaFile);
        Validator validator = schema.newValidator();

        validator.validate(xmlFile);
    }

    private MaintainProviderResponse createMaintainResponse() {
        ProviderDetails details = ProviderTestDataBuilder.getPublicProviderDetails();
        MaintainProviderResponse response = new MaintainProviderResponse();
        response.setProviderDetails(details);
        Acknowledgment ack = new Acknowledgment("ok", "ok");
        ack.setTypeCode("AA");
        response.addAcknowledgment(ack);
        response.setUniqueMessageId("987654321");
        response.setAcceptAckCode("acceptAckCode");
        response.setMessageCreationTime(new Date());
        response.setMessageInteractionId("interactionId");
        response.setOriginalEventDate(new Date());
        response.setProcessModeCode("processModeCode");
        response.setProcessingCode("processingCode");
        response.setRegistryUserOrgId("registryUserOrgId");
        response.setRelease("release");
        response.setResponsiblePersonUserId("responsiblePersonUserId");
        response.setSecurityText("securityText");
        response.setSourceEnvironment("sourceEnvironment");
        response.setSourceFacilityId("facilityId");
        response.setSourceJurisdiction("sourceJurisdiction");
        response.setSourceNetworkAddressChid("sourceNetworkAddressChid");
        response.setSourceOrganizationChid("sourceOrganizationChid");
        response.setSourceRegistryUserId("sourceRegistryUserId");
        response.setSourceServer("sourceServer");
        response.setSourceUserId("sourceUserId");
        response.setTargetEnvironment("targetEnvironment");
        response.setTargetFacilityId("targetFacilityid");
        response.setTargetJurisdiction("targetJurisdiction");
        response.setTargetNetworkAddressChid("targetNetworkAccessChid");
        response.setTargetOrganizationChid("targetOrganizationChid");
        response.setTargetRegistryUserId("targetRegistryUserId");
        response.setTargetServer("targetServer");
        response.setUniqueMessageId("messageId");
        response.setVersion("version");
        return response;
    }

    private QueryResponse createQueryResponse() {
        ProviderDetails details = ProviderTestDataBuilder.getPublicProviderDetails();
        QueryResponse qr = new QueryResponse();
        qr.addProviderDetails(details);
        qr.addAcknowledgement(new Acknowledgment("ok", "ok"));
        qr.getAcknowledgments().get(0).setTypeCode("AA");
        qr.setUniqueMessageId("987654321");
        qr.setAcceptAckCode("acceptAckCode");
        qr.setMessageCreationTime(new Date());
        qr.setMessageInteractionId("interactionId");
        qr.setOriginalEventDate(new Date());
        qr.setProcessModeCode("processModeCode");
        qr.setProcessingCode("processingCode");
        qr.setRegistryUserOrgId("registryUserOrgId");
        qr.setRelease("release");
        qr.setResponsiblePersonUserId("responsiblePersonUserId");
        qr.setSecurityText("securityText");
        qr.setSourceEnvironment("sourceEnvironment");
        qr.setSourceFacilityId("facilityId");
        qr.setSourceJurisdiction("sourceJurisdiction");
        qr.setSourceNetworkAddressChid("sourceNetworkAddressChid");
        qr.setSourceOrganizationChid("sourceOrganizationChid");
        qr.setSourceRegistryUserId("sourceRegistryUserId");
        qr.setSourceServer("sourceServer");
        qr.setSourceUserId("sourceUserId");
        qr.setTargetEnvironment("targetEnvironment");
        qr.setTargetFacilityId("targetFacilityid");
        qr.setTargetJurisdiction("targetJurisdiction");
        qr.setTargetNetworkAddressChid("targetNetworkAccessChid");
        qr.setTargetOrganizationChid("targetOrganizationChid");
        qr.setTargetRegistryUserId("targetRegistryUserId");
        qr.setTargetServer("targetServer");
        qr.setUniqueMessageId("messageId");
        qr.setVersion("version");
        return qr;
    }

    private DistributionNotification createNotification(ProviderDetails details) {
        DistributionNotification in = new DistributionNotification("1");
        in.setUniqueMessageId("987654321");
        in.setAcceptAckCode("acceptAckCode");
        in.setChangeType(DistributionChangeType.UPDATE);
        in.setDestinationAddress("destinationAddress");
        in.setIsHail(true);
        in.setMessageCreationTime(new Date());
        in.setMessageInteractionId("interactionId");
        in.setOriginalEventDate(new Date());
        in.setProviderDetails(details);
        in.setProcessModeCode("processModeCode");
        in.setProcessingCode("processingCode");
        in.setRegistryUserOrgId("registryUserOrgId");
        in.setRelease("release");
        in.setResponsiblePersonUserId("responsiblePersonUserId");
        in.setSecurityText("securityText");
        in.setSourceEnvironment("sourceEnvironment");
        in.setSourceFacilityId("facilityId");
        in.setSourceJurisdiction("sourceJurisdiction");
        in.setSourceNetworkAddressChid("sourceNetworkAddressChid");
        in.setSourceOrganizationChid("sourceOrganizationChid");
        in.setSourceRegistryUserId("sourceRegistryUserId");
        in.setSourceServer("sourceServer");
        in.setSourceUserId("sourceUserId");
        in.setTargetEnvironment("targetEnvironment");
        in.setTargetFacilityId("targetFacilityid");
        in.setTargetJurisdiction("targetJurisdiction");
        in.setTargetNetworkAddressChid("targetNetworkAccessChid");
        in.setTargetOrganizationChid("targetOrganizationChid");
        in.setTargetRegistryUserId("targetRegistryUserId");
        in.setTargetServer("targetServer");
        in.setTransactionType(Arrays.asList(new String[]{"transactionType"}));
        in.setUniqueMessageId("messageId");
        in.setVersion("version");
        return in;
    }
}
