/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.indivprovtofhir;

import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.uhn.fhir.parser.DataFormatException;
import ca.uhn.fhir.validation.FhirValidator;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;
import org.junit.Test;

/**
 *
 * @author dan.stepanov
 */
public class IndividProviderToPractitionerFhirTest {

    @Test
    public void testProviderDetailsDataBuilderToPractAddress() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();

        String testJsonParsedTwoAddressFhir = null;
        testJsonParsedTwoAddressFhir = indivProviderToPractFhir.mapIndProviderAddressToPractAddress(providerDetailsTest);

        String addressParsedExpectedResult = "{\"resourceType\":\"Practitioner\",\"address\":[{\"use\":\"temp\",\"text\":\"Full Address Test Mail Sample 1\",\"line\":[\"Address Line One Mail\",\"Address Line Two Mail\",\"Address Line Three Mail\"],\"city\":\"Victoria\",\"state\":\"British Columbia (BC)\",\"postalCode\":\"V9V 9V9\",\"country\":\"CA\",\"period\":{\"start\":\"2020-01-05T11:45:15-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}},{\"use\":\"temp\",\"text\":\"Full Address Test Physical Sample 1\",\"line\":[\"Address Line One Physical\",\"Address Line Two Physical\",\"Address Line Three Physical\"],\"city\":\"Vernon\",\"state\":\"British Columbia (BC)\",\"postalCode\":\"V9V 9V7\",\"country\":\"CA\",\"period\":{\"start\":\"2020-01-05T11:45:15-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}}]}";

        assertNotNull(testJsonParsedTwoAddressFhir);
        assertEquals(addressParsedExpectedResult, testJsonParsedTwoAddressFhir);
        

        // json format pract address in FHIR result is:
//        {
//                "resourceType": "Practitioner",
//                "address": [
//                        {
//                                "use": "temp",
//                                "text": "Full Address Test Mail Sample 1",
//                                "line": [
//                                        "Address Line One Mail",
//                                        "Address Line Two Mail",
//                                        "Address Line Three Mail"
//                                ],
//                                "city": "Victoria",
//                                "state": "British Columbia (BC)",
//                                "postalCode": "V9V 9V9",
//                                "country": "CA",
//                                "period": {
//                                        "start": "2020-01-05T00:00:00-08:00",
//                                        "end": "2050-12-30T00:00:00-08:00"
//                                }
//                        },
//                        {
//                                "use": "temp",
//                                "text": "Full Address Test Physical Sample 1",
//                                "line": [
//                                        "Address Line One Physical",
//                                        "Address Line Two Physical",
//                                        "Address Line Three Physical"
//                                ],
//                                "city": "Vernon",
//                                "state": "British Columbia (BC)",
//                                "postalCode": "V9V 9V7",
//                                "country": "CA",
//                                "period": {
//                                        "start": "2020-01-05T00:00:00-08:00",
//                                        "end": "2050-12-30T00:00:00-08:00"
//                                }
//                        }
//                ]
//        }
    }

    @Test
    public void testProviderDetailsDataBuilderToPractAddressValid() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();
        boolean testJsonParsedTwoAddressFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoAddress = indivProviderToPractFhir.mapIndProviderAddressToPractAddress(providerDetailsTest);
        testJsonParsedTwoAddressFhirValid = indivProviderToPractFhir.validatePractitionerFhir(fhirValidator, parsedEncodedPractTwoAddress);

        assertNotNull(testJsonParsedTwoAddressFhirValid);
        assertTrue(testJsonParsedTwoAddressFhirValid);
    }

    @Test
    public void testProviderDetailsDataBuilderToPractAddressInvalid() throws Exception, DataFormatException {

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();
        boolean testJsonParsedTwoAddressFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoAddressInvalid = "{\"resourceType\":\"PractitionerA\",\"address\":[{\"use\":\"temp\",\"textA\":\"Full Address Test Mail Sample 1\",\"line\":[\"Address Line One Mail\",\"Address Line Two Mail\",\"Address Line Three Mail\"],\"city\":\"Victoria\",\"state\":\"British Columbia (BC)\",\"postalCode\":\"V9V 9V9\",\"country\":\"CA\",\"period\":{\"start\":\"2020-01-05T00:00:00-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}},{\"use\":\"temp\",\"text\":\"Full Address Test Physical Sample 1\",\"line\":[\"Address Line One Physical\",\"Address Line Two Physical\",\"Address Line Three Physical\"],\"city\":\"Vernon\",\"state\":\"British Columbia (BC)\",\"postalCode\":\"V9V 9V7\",\"country\":\"CA\",\"period\":{\"start\":\"2020-01-05T00:00:00-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}}]}";
        testJsonParsedTwoAddressFhirValid = indivProviderToPractFhir.validatePractitionerFhir(fhirValidator, parsedEncodedPractTwoAddressInvalid);

        assertNotNull(testJsonParsedTwoAddressFhirValid);
        assertFalse(testJsonParsedTwoAddressFhirValid);
    }

    @Test
    public void testProviderDetailsDataBuilderToPractName() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();
        String testJsonParsedTwoNameFhir = null;
        testJsonParsedTwoNameFhir = indivProviderToPractFhir.mapIndProviderNameToPractName(providerDetailsTest);
        String nameParsedExpectedResult = "{\"resourceType\":\"Practitioner\",\"name\":[{\"use\":\"official\",\"text\":\"Person Full Name Official Test Two\",\"family\":\"Last Name Official\",\"given\":[\"First Name Official\",\"Second Name Official\",\"Third Name Official\"],\"prefix\":[\"Prefix Official\"],\"suffix\":[\"Suffix Official\"],\"period\":{\"start\":\"2020-01-05T11:45:15-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}},{\"use\":\"usual\",\"text\":\"Person Full Name Usual Test One\",\"family\":\"Last Name Usual\",\"given\":[\"First Name Usual\",\"Second Name Usual\",\"Third Name Usual\"],\"prefix\":[\"Prefix Usual\"],\"suffix\":[\"Suffix Usual\"],\"period\":{\"start\":\"2020-01-05T11:45:15-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}}]}";

        assertNotNull(testJsonParsedTwoNameFhir);
        assertEquals(nameParsedExpectedResult, testJsonParsedTwoNameFhir);

        // json format pract name in FHIR result is:
//        {
//                "resourceType": "Practitioner",
//                "name": [
//                        {
//                                "use": "official",
//                                "text": "Person Full Name Official Test Two",
//                                "family": "Last Name Official",
//                                "given": [
//                                        "First Name Official",
//                                        "Second Name Official",
//                                        "Third Name Official"
//                                ],
//                                "prefix": [
//                                        "Prefix Official"
//                                ],
//                                "suffix": [
//                                        "Suffix Official"
//                                ],
//                                "period": {
//                                        "start": "2020-01-05T00:00:00-08:00",
//                                        "end": "2050-12-30T00:00:00-08:00"
//                                }
//                        },
//                        {
//                                "use": "usual",
//                                "text": "Person Full Name Usual Test One",
//                                "family": "Last Name Usual",
//                                "given": [
//                                        "First Name Usual",
//                                        "Second Name Usual",
//                                        "Third Name Usual"
//                                ],
//                                "prefix": [
//                                        "Prefix Usual"
//                                ],
//                                "suffix": [
//                                        "Suffix Usual"
//                                ],
//                                "period": {
//                                        "start": "2020-01-05T00:00:00-08:00",
//                                        "end": "2050-12-30T00:00:00-08:00"
//                                }
//                        }
//                ]
//        } 
    }

    @Test
    public void testProviderDetailsDataBuilderToPractNameValid() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();
        boolean testJsonParsedTwoNameFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoName = indivProviderToPractFhir.mapIndProviderNameToPractName(providerDetailsTest);
        testJsonParsedTwoNameFhirValid = indivProviderToPractFhir.validatePractitionerFhir(fhirValidator, parsedEncodedPractTwoName);

        assertNotNull(testJsonParsedTwoNameFhirValid);
        assertTrue(testJsonParsedTwoNameFhirValid);
    }

    @Test
    public void testProviderDetailsDataBuilderToPractNameInvalid() throws Exception, DataFormatException {

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();
        boolean testJsonParsedTwoNameFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoNameInvalid = "{\"resourceType\":\"PractitionerMytest\",\"name\":[{\"useMyTest\":\"official\",\"text\":\"Person Full Name Official Test Two\",\"family\":\"Last Name Official\",\"given\":[\"First Name Official\",\"Second Name Official\",\"Third Name Official\"],\"prefix\":[\"Prefix Official\"],\"suffix\":[\"Suffix Official\"],\"period\":{\"start\":\"2020-01-05T00:00:00-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}},{\"use\":\"usual\",\"text\":\"Person Full Name Usual Test One\",\"family\":\"Last Name Usual\",\"given\":[\"First Name Usual\",\"Second Name Usual\",\"Third Name Usual\"],\"prefix\":[\"Prefix Usual\"],\"suffix\":[\"Suffix Usual\"],\"period\":{\"start\":\"2020-01-05T00:00:00-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}}]}";
        testJsonParsedTwoNameFhirValid = indivProviderToPractFhir.validatePractitionerFhir(fhirValidator, parsedEncodedPractTwoNameInvalid);

        assertNotNull(testJsonParsedTwoNameFhirValid);
        assertFalse(testJsonParsedTwoNameFhirValid);
    }

    @Test
    public void testProviderDetailsDataBuilderToPractTelecom() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();

        String testJsonParsedTwoTelecomFhir = null;
        testJsonParsedTwoTelecomFhir = indivProviderToPractFhir.mapIndProviderTelecomToPractTelecom(providerDetailsTest);
        String telecomParsedExpectedResult = "{\"resourceType\":\"Practitioner\",\"telecom\":[{\"system\":\"phone\",\"value\":\"250 345-1111 \",\"use\":\"home\",\"period\":{\"start\":\"2020-01-05T11:45:15-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}},{\"system\":\"fax\",\"value\":\"250 555-1234 ext. 1234\",\"use\":\"work\",\"period\":{\"start\":\"2020-01-05T11:45:15-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}}]}";

        assertNotNull(testJsonParsedTwoTelecomFhir);
        assertEquals(telecomParsedExpectedResult, testJsonParsedTwoTelecomFhir);

        // json format pract telecom in FHIR result is:
//        {
//                "resourceType": "Practitioner",
//                "telecom": [
//                        {
//                                "system": "phone",
//                                "value": "250 345-1111 ",
//                                "use": "home",
//                                "period": {
//                                        "start": "2020-01-05T00:00:00-08:00",
//                                        "end": "2050-12-30T00:00:00-08:00"
//                                }
//                        },
//                        {
//                                "system": "fax",
//                                "value": "250 555-1234 ext. 1234",
//                                "use": "work",
//                                "period": {
//                                        "start": "2020-01-05T00:00:00-08:00",
//                                        "end": "2050-12-30T00:00:00-08:00"
//                                }
//                        }
//                ]
//        }
    }

    @Test
    public void testProviderDetailsDataBuilderToPractTelecomValid() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();
        boolean testJsonParsedTwoTelecomFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoTelecom = indivProviderToPractFhir.mapIndProviderTelecomToPractTelecom(providerDetailsTest);
        testJsonParsedTwoTelecomFhirValid = indivProviderToPractFhir.validatePractitionerFhir(fhirValidator, parsedEncodedPractTwoTelecom);

        assertNotNull(testJsonParsedTwoTelecomFhirValid);
        assertTrue(testJsonParsedTwoTelecomFhirValid);
    }

    @Test
    public void testProviderDetailsDataBuilderToPractTelecomInvalid() throws Exception, DataFormatException {

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();
        boolean testJsonParsedTwoTelecomFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoTelecomInvalid = "{\"resourceType\":\"PractitionerF\",\"telecom\":[{\"systemA\":\"phoneA\",\"value\":\"250 345-1111 \",\"use\":\"home\",\"period\":{\"start\":\"2020-01-05T00:00:00-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}},{\"system\":\"fax\",\"value\":\"250 555-1234 ext. 1234\",\"use\":\"work\",\"period\":{\"start\":\"2020-01-05T00:00:00-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}}]}";
        testJsonParsedTwoTelecomFhirValid = indivProviderToPractFhir.validatePractitionerFhir(fhirValidator, parsedEncodedPractTwoTelecomInvalid);

        assertNotNull(testJsonParsedTwoTelecomFhirValid);
        assertFalse(testJsonParsedTwoTelecomFhirValid);
    }

    @Test
    public void testProviderDetailsDataBuilderToPractIdentifiers() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();

        String testJsonParsedTwoPractIdentifierFhir = null;
        testJsonParsedTwoPractIdentifierFhir = indivProviderToPractFhir.mapIndProviderIdentifiersToPractIdentifier(providerDetailsTest);

        String practIdentifParsedExpectedResult = "{\"resourceType\":\"Practitioner\",\"identifier\":[{\"use\":\"temp\",\"type\":{\"text\":\"IPC\"},\"value\":\"IPC.00000005.BC.PRS\",\"period\":{\"start\":\"2020-01-05T11:45:15-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}},{\"use\":\"secondary\",\"type\":{\"text\":\"CPN\"},\"value\":\"CPN.00000008.BC.PRS\",\"period\":{\"start\":\"2020-01-05T11:45:15-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}}]}";

        assertNotNull(testJsonParsedTwoPractIdentifierFhir);
        assertEquals(practIdentifParsedExpectedResult, testJsonParsedTwoPractIdentifierFhir);

        // json format pract identifiers in FHIR result is:
//        {
//                "resourceType": "Practitioner",
//                "identifier": [
//                        {
//                                "use": "temp",
//                                "type": {
//                                        "text": "IPC"
//                                },
//                                "value": "IPC.00000005.BC.PRS",
//                                "period": {
//                                        "start": "2020-01-05T00:00:00-08:00",
//                                        "end": "2050-12-30T00:00:00-08:00"
//                                }
//                        },
//                        {
//                                "use": "secondary",
//                                "type": {
//                                        "text": "CPN"
//                                },
//                                "value": "CPN.00000008.BC.PRS",
//                                "period": {
//                                        "start": "2020-01-05T00:00:00-08:00",
//                                        "end": "2050-12-30T00:00:00-08:00"
//                                }
//                        }
//                ]
//        }
    }

    @Test
    public void testProviderDetailsDataBuilderToPractIdentifiersValid() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();
        boolean testJsonParsedTwoIdentifFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoIdentif = indivProviderToPractFhir.mapIndProviderIdentifiersToPractIdentifier(providerDetailsTest);
        testJsonParsedTwoIdentifFhirValid = indivProviderToPractFhir.validatePractitionerFhir(fhirValidator, parsedEncodedPractTwoIdentif);

        assertNotNull(testJsonParsedTwoIdentifFhirValid);
        assertTrue(testJsonParsedTwoIdentifFhirValid);
    }

    @Test
    public void testProviderDetailsDataBuilderToPractIdentifiersInvalid() throws Exception, DataFormatException {

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();
        boolean testJsonParsedTwoIdentifFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoIdentifInvalid = "{\"resourceType\":\"Practitioner_I\",\"identifier I\":[{\"use_identif\":\"temp\",\"type\":{\"text\":\"IPC\"},\"value\":\"IPC.00000005.BC.PRS\",\"period\":{\"start\":\"2020-01-05T00:00:00-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}},{\"use\":\"secondary\",\"type\":{\"text\":\"CPN\"},\"value\":\"CPN.00000008.BC.PRS\",\"period\":{\"start\":\"2020-01-05T00:00:00-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}}]}";
        testJsonParsedTwoIdentifFhirValid = indivProviderToPractFhir.validatePractitionerFhir(fhirValidator, parsedEncodedPractTwoIdentifInvalid);

        assertNotNull(testJsonParsedTwoIdentifFhirValid);
        assertFalse(testJsonParsedTwoIdentifFhirValid);
    }

    @Test
    public void testProviderDetailsDataBuilderToPractBirthdateGender() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();

        String testJsonParsedBirthdateGenderFhir = null;
        testJsonParsedBirthdateGenderFhir = indivProviderToPractFhir.mapIndProviderDemographicDetailsToFhir(providerDetailsTest);

        String birthdateGenderParsedExpectedResult = "{\"resourceType\":\"Practitioner\",\"gender\":\"male\",\"birthDate\":\"1980-01-10\"}";

        assertNotNull(testJsonParsedBirthdateGenderFhir);
        assertEquals(birthdateGenderParsedExpectedResult, testJsonParsedBirthdateGenderFhir);
        
        // json format pract birthdate/gender in FHIR result is:
//        {
//                "resourceType": "Practitioner",
//                "gender": "male",
//                "birthDate": "1980-01-10"
//        }
    }
    
    @Test
    public void testProviderDetailsDataBuilderToPractBirthdateGenderValid() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();
        boolean testJsonParsedBirthdateGenderFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractBirthdateGender = indivProviderToPractFhir.mapIndProviderDemographicDetailsToFhir(providerDetailsTest);
        testJsonParsedBirthdateGenderFhirValid = indivProviderToPractFhir.validatePractitionerFhir(fhirValidator, parsedEncodedPractBirthdateGender);

        assertNotNull(testJsonParsedBirthdateGenderFhirValid);
        assertTrue(testJsonParsedBirthdateGenderFhirValid);
    }
    
    @Test
    public void testProviderDetailsDataBuilderToPractBirthdateGenderInvalid() throws Exception, DataFormatException {

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();
        boolean testJsonParsedBirthdateGenderFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractBirthdateGenderInvalid = "{\"resourceType\":\"PractitionerG\",\"gender\":\"male\",\"birthDate\":\"1980-01-10\"}}";
        testJsonParsedBirthdateGenderFhirValid = indivProviderToPractFhir.validatePractitionerFhir(fhirValidator, parsedEncodedPractBirthdateGenderInvalid);

        assertNotNull(testJsonParsedBirthdateGenderFhirValid);
        assertFalse(testJsonParsedBirthdateGenderFhirValid);
    }
    
    @Test
    public void testProviderDetailsDataBuilderToPractQualification() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();

        String testJsonParsedQualificFhir = null;
        testJsonParsedQualificFhir = indivProviderToPractFhir.mapIndProviderCredentialsToPractQualification(providerDetailsTest);
        String qualificParsedExpectedResult = "{\"resourceType\":\"Practitioner\",\"qualification\":[{\"identifier\":[{\"value\":\"Reg Number 555 for BD\"}],\"code\":{\"coding\":[{\"code\":\"BD\"}]},\"period\":{\"start\":\"2020-01-05T11:45:15-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}},{\"identifier\":[{\"value\":\"Reg Number 222 for MD\"}],\"code\":{\"coding\":[{\"code\":\"MD\"}]},\"period\":{\"start\":\"2020-01-05T11:45:15-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}}]}";
        assertNotNull(testJsonParsedQualificFhir);
        assertEquals(qualificParsedExpectedResult, testJsonParsedQualificFhir);
        // json format pract qualification in FHIR result is:
//        {
//                "resourceType": "Practitioner",
//                "qualification": [
//                        {
//                                "identifier": [
//                                        {
//                                                "value": "Reg Number 555 for BD"
//                                        }
//                                ],
//                                "code": {
//                                        "coding": [
//                                                {
//                                                        "code": "BD"
//                                                }
//                                        ]
//                                },
//                                "period": {
//                                        "start": "2020-01-05T00:00:00-08:00",
//                                        "end": "2050-12-30T00:00:00-08:00"
//                                }
//                        },
//                        {
//                                "identifier": [
//                                        {
//                                                "value": "Reg Number 222 for MD"
//                                        }
//                                ],
//                                "code": {
//                                        "coding": [
//                                                {
//                                                        "code": "MD"
//                                                }
//                                        ]
//                                },
//                                "period": {
//                                        "start": "2020-01-05T00:00:00-08:00",
//                                        "end": "2050-12-30T00:00:00-08:00"
//                                }
//                        }
//                ]
//        }
    }
    
    @Test
    public void testProviderDetailsDataBuilderToPractQualifValid() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();
        boolean testJsonParsedTwoQualifFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoQualific = indivProviderToPractFhir.mapIndProviderCredentialsToPractQualification(providerDetailsTest);
        testJsonParsedTwoQualifFhirValid = indivProviderToPractFhir.validatePractitionerFhir(fhirValidator, parsedEncodedPractTwoQualific);

        assertNotNull(testJsonParsedTwoQualifFhirValid);
        assertTrue(testJsonParsedTwoQualifFhirValid);
    }
    
    @Test
    public void testProviderDetailsDataBuilderToPractQualificInvalid() throws Exception, DataFormatException {

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();
        boolean testJsonParsedTwoQualificFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoQualificInvalid = "{\"resourceType\":\"PractitionerQ\",\"qualification_qq\":[{\"identifier\":[{\"value\":\"Reg Number 555 for BD\"}],\"code\":{\"coding\":[{\"code\":\"BD\"}]},\"period\":{\"start\":\"2020-01-05T00:00:00-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}},{\"identifier\":[{\"value\":\"Reg Number 222 for MD\"}],\"code\":{\"coding\":[{\"code\":\"MD\"}]},\"period\":{\"start\":\"2020-01-05T00:00:00-08:00\",\"end\":\"2050-12-30T00:00:00-08:00\"}}]}";
        testJsonParsedTwoQualificFhirValid = indivProviderToPractFhir.validatePractitionerFhir(fhirValidator, parsedEncodedPractTwoQualificInvalid);

        assertNotNull(testJsonParsedTwoQualificFhirValid);
        assertFalse(testJsonParsedTwoQualificFhirValid);
    }
    
    @Test
    public void testProviderDetailsDataBuilderToPractLanguage() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();

        String testJsonParsedLanguageFhir = null;
        testJsonParsedLanguageFhir = indivProviderToPractFhir.mapIndProviderExpertiseToPractLanguage(providerDetailsTest);

        String languageParsedExpectedResult = "{\"resourceType\":\"Practitioner\",\"communication\":[{\"coding\":[{\"code\":\"F16\",\"display\":\"French\"}]},{\"coding\":[{\"code\":\"I21\",\"display\":\"Italian\"}]}]}";
        assertNotNull(testJsonParsedLanguageFhir);
        assertEquals(languageParsedExpectedResult, testJsonParsedLanguageFhir);
        // json format pract languages in FHIR result is:
//        {
//                "resourceType": "Practitioner",
//                "communication": [
//                        {
//                                "coding": [
//                                        {
//                                                "code": "F16",
//                                                "display": "French"
//                                        }
//                                ]
//                        },
//                        {
//                                "coding": [
//                                        {
//                                                "code": "I21",
//                                                "display": "Italian"
//                                        }
//                                ]
//                        }
//                ]
//        }
    }
    
    @Test
    public void testProviderDetailsDataBuilderToPractLanguageValid() throws Exception {
        ProviderDetails providerDetailsTest = ProviderDataBuilderFhirTest.getIndividualProviderDetails();

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();
        boolean testJsonParsedTwoLangFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoQualific = indivProviderToPractFhir.mapIndProviderExpertiseToPractLanguage(providerDetailsTest);
        testJsonParsedTwoLangFhirValid = indivProviderToPractFhir.validatePractitionerFhir(fhirValidator, parsedEncodedPractTwoQualific);

        assertNotNull(testJsonParsedTwoLangFhirValid);
        assertTrue(testJsonParsedTwoLangFhirValid);
    }
    
    @Test
    public void testProviderDetailsDataBuilderToPractLanguageInvalid() throws Exception, DataFormatException {

        MapProviderToPractitionerFhir indivProviderToPractFhir = new MapProviderToPractitionerFhir();
        boolean testJsonParsedTwoLangFhirValid = false;

        // Create a FhirInstanceValidator and register it to a validator
        FhirValidator fhirValidator = ProviderDataBuilderFhirTest.initFhirValidatorTest();

        String parsedEncodedPractTwoLangInvalid = "{\"resourceType\":\"PractitionerLL\",\"communication_lang\":[{\"coding\":[{\"code\":\"F16\",\"display\":\"French\"}]},{\"coding\":[{\"code\":\"I21\",\"display\":\"Italian\"}]}]}";
        testJsonParsedTwoLangFhirValid = indivProviderToPractFhir.validatePractitionerFhir(fhirValidator, parsedEncodedPractTwoLangInvalid);

        assertNotNull(testJsonParsedTwoLangFhirValid);
        assertFalse(testJsonParsedTwoLangFhirValid);
    }
    


}
