/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.fhirtoplr;

import ca.bc.gov.health.plr.dto.esb.QueryRequest;
import java.util.HashMap;
import java.util.Map;
import org.apache.camel.Exchange;
import org.junit.Test;

/**
 * Unit tests for provider query mapping
 * @author greg.perkins
 */
public class ProviderQueryMappingTest {
    
    private static final String FHIR_PRACTITIONER = "fhirPractitioner/$entityQuery";
    private static final String FHIR_PRACTITIONER_EXTENDED = "fhirPractitioner/$extendedQuery";
    private static final String FHIR_ORGANIZATION = "fhirOrganization/$entityQuery";
    private static final String FHIR_ORGANIZATION_EXTENDED = "fhirOrganization/$extendedQuery";
    
    @Test
    public void testPractitionerQueryExtended(){
        Map<String,Object> params = new HashMap<>();
        params.put(Exchange.HTTP_URI, FHIR_PRACTITIONER_EXTENDED);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(!request.getQueryParameters().isOrganizationFlag());
        assert(request.getQueryParameters().isHistoryFlag());
    }
    
    @Test
    public void testPractitionerQueryById(){
        Map<String,Object> params = new HashMap<>();
        params.put("_id","1234");
        params.put(Exchange.HTTP_URI, FHIR_PRACTITIONER);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(!request.getQueryParameters().isOrganizationFlag());
        assert(request.getQueryParameters().getIdentifier().equals("1234"));
    }
    
    @Test
    public void testPractitionerQueryNoId(){
        Map<String,Object> params = new HashMap<>();
        params.put("foo","1234");
        params.put(Exchange.HTTP_URI, FHIR_PRACTITIONER);        
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(!request.getQueryParameters().isOrganizationFlag());
        assert(request.getQueryParameters().getIdentifier()==null);
    }
    
    @Test
    public void testPractitionerQueryNoParams(){
        Map<String,Object> params = new HashMap<>();
        params.put(Exchange.HTTP_URI, FHIR_PRACTITIONER);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(!request.getQueryParameters().isOrganizationFlag());
        assert(request.getQueryParameters().getIdentifier()==null);
    }
    
    @Test
    public void testPractitionerQueryFirstName(){
        String param = "John";
        Map<String,Object> params = new HashMap<>();
        params.put("given-name",param);
        params.put(Exchange.HTTP_URI, FHIR_PRACTITIONER);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(!request.getQueryParameters().isOrganizationFlag());
        assert(param.equals(request.getQueryParameters().getFirstName()));
    }
    
    @Test
    public void testPractitionerQueryLastName(){
        String param = "Doe";
        Map<String,Object> params = new HashMap<>();
        params.put("surname",param);
        params.put(Exchange.HTTP_URI, FHIR_PRACTITIONER);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(!request.getQueryParameters().isOrganizationFlag());
        assert(param.equals(request.getQueryParameters().getLastName()));
    }
    
    @Test
    public void testPractitionerQueryRole(){
        String param = "ARole";
        Map<String,Object> params = new HashMap<>();
        params.put("role",param);
        params.put(Exchange.HTTP_URI, FHIR_PRACTITIONER);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(!request.getQueryParameters().isOrganizationFlag());
        assert(param.equals(request.getQueryParameters().getProviderRoleTypeCode()));
    }
    
    @Test
    public void testPractitionerQueryGender(){
        String param = "M";
        Map<String,Object> params = new HashMap<>();
        params.put("gender",param);
        params.put(Exchange.HTTP_URI, FHIR_PRACTITIONER);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(!request.getQueryParameters().isOrganizationFlag());
        assert(param.equals(request.getQueryParameters().getGender()));
    }
    
    @Test
    public void testPractitionerQueryLanguage(){
        String param = "English";
        Map<String,Object> params = new HashMap<>();
        params.put("language",param);
        params.put(Exchange.HTTP_URI, FHIR_PRACTITIONER);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(!request.getQueryParameters().isOrganizationFlag());
        assert(param.equals(request.getQueryParameters().getQualifications().get(0)));
    }
    
    @Test
    public void testPractitionerQueryExpertise(){
        String param = "pediatrics";
        Map<String,Object> params = new HashMap<>();
        params.put("expertise",param);
        params.put(Exchange.HTTP_URI, FHIR_PRACTITIONER);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(!request.getQueryParameters().isOrganizationFlag());
        assert(param.equals(request.getQueryParameters().getQualifications().get(0)));
    }
    
    @Test
    public void testPractitionerQueryStatus(){
        String param = "suspended";
        Map<String,Object> params = new HashMap<>();
        params.put("status",param);
        params.put(Exchange.HTTP_URI, FHIR_PRACTITIONER);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(!request.getQueryParameters().isOrganizationFlag());
        assert(param.equals(request.getQueryParameters().getLicenseStatus()));
    }
    
    @Test
    public void testPractitionerQueryStatusReason(){
        String param = "sus";
        Map<String,Object> params = new HashMap<>();
        params.put("status-reason",param);
        params.put(Exchange.HTTP_URI, FHIR_PRACTITIONER);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(!request.getQueryParameters().isOrganizationFlag());
        assert(param.equals(request.getQueryParameters().getLicenseStatusReason()));
    }
    
    @Test
    public void testPractitionerQueryCity(){
        String param = "victoria";
        Map<String,Object> params = new HashMap<>();
        params.put("address-city",param);
        params.put(Exchange.HTTP_URI, FHIR_PRACTITIONER);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(!request.getQueryParameters().isOrganizationFlag());
        assert(param.equals(request.getQueryParameters().getCity()));
    }
    
    @Test
    public void testPractitionerQueryIdentifier(){
        String param = "1234";
        Map<String,Object> params = new HashMap<>();
        params.put("identifier",param);
        params.put(Exchange.HTTP_URI, FHIR_PRACTITIONER);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(!request.getQueryParameters().isOrganizationFlag());
        assert(param.equals(request.getQueryParameters().getIdentifier()));
    }
    
    @Test
    public void testPractitionerQueryIdentifierType(){
        String param = "CPN";
        Map<String,Object> params = new HashMap<>();
        params.put("identifier-type",param);
        params.put(Exchange.HTTP_URI, FHIR_PRACTITIONER);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(!request.getQueryParameters().isOrganizationFlag());
        assert(param.equals(request.getQueryParameters().getIdentifierTypeCode()));
    }
    
    /*
     * Org query tests 
     */
    
    @Test
    public void testOrganizationQueryExtended(){
        Map<String,Object> params = new HashMap<>();
        params.put(Exchange.HTTP_URI, FHIR_ORGANIZATION_EXTENDED);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(request.getQueryParameters().isOrganizationFlag());
        assert(request.getQueryParameters().isHistoryFlag());
    }
        
    @Test
    public void testOrganizationQueryById(){
        Map<String,Object> params = new HashMap<>();
        params.put("_id","1234");
        params.put(Exchange.HTTP_URI, FHIR_ORGANIZATION);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(request.getQueryParameters().isOrganizationFlag());
        assert(request.getQueryParameters().getIdentifier().equals("1234"));
    }
    
    @Test
    public void testOrganizationQueryNoId(){
        Map<String,Object> params = new HashMap<>();
        params.put("foo","1234");
        params.put(Exchange.HTTP_URI, FHIR_ORGANIZATION);        
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(request.getQueryParameters().isOrganizationFlag());
        assert(request.getQueryParameters().getIdentifier()==null);
    }
    
    @Test
    public void testOrganizationQueryNoParams(){
        Map<String,Object> params = new HashMap<>();
        params.put(Exchange.HTTP_URI, FHIR_ORGANIZATION);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(request.getQueryParameters().isOrganizationFlag());
        assert(request.getQueryParameters().getIdentifier()==null);
    }
    
    @Test
    public void testOrganizationQueryName(){
        String param = "Some Org";
        Map<String,Object> params = new HashMap<>();
        params.put("name",param);
        params.put(Exchange.HTTP_URI, FHIR_ORGANIZATION);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(request.getQueryParameters().isOrganizationFlag());
        assert(param.equals(request.getQueryParameters().getOrganizationProviderName()));
    }
    
    @Test
    public void testOrganizationQueryCity(){
        String param = "victoria";
        Map<String,Object> params = new HashMap<>();
        params.put("address-city",param);
        params.put(Exchange.HTTP_URI, FHIR_ORGANIZATION);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(request.getQueryParameters().isOrganizationFlag());
        assert(param.equals(request.getQueryParameters().getCity()));
    }
    
    @Test
    public void testOrganizationQueryIdentifier(){
        String param = "1234";
        Map<String,Object> params = new HashMap<>();
        params.put("identifier",param);
        params.put(Exchange.HTTP_URI, FHIR_ORGANIZATION);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(request.getQueryParameters().isOrganizationFlag());
        assert(param.equals(request.getQueryParameters().getIdentifier()));
    }
    
    @Test
    public void testOrganizationQueryIdentifierType(){
        String param = "CPN";
        Map<String,Object> params = new HashMap<>();
        params.put("identifier-type",param);
        params.put(Exchange.HTTP_URI, FHIR_ORGANIZATION);
        QueryRequest request = FhirQueryToPlrQueryConverter.convertFhirQueryToPlrQueryRequest(params);
        assert(request.getQueryParameters().isOrganizationFlag());
        assert(param.equals(request.getQueryParameters().getIdentifierTypeCode()));
    }
}
