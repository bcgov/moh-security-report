/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.dtoToHl7;

import org.custommonkey.xmlunit.DetailedDiff;
import org.custommonkey.xmlunit.Diff;
import org.custommonkey.xmlunit.Difference;
import org.custommonkey.xmlunit.DifferenceConstants;

/**
 *
 * @author conrad.gustafson
 */
public class CustomDifferenceListener extends DetailedDiff {
    
    public static final String XPATH_ROOT_PRPM_IN301010 = "/PRPM_IN301010";

//    private String xpathRootElement;
    
    public CustomDifferenceListener(Diff prototype) {
        super(prototype);
    }
    
//    public CustomDifferenceListener(Diff prototype, String xpathRootElement) {
//        super(prototype);
////        this.xpathRootElement = xpathRootElement;
//    }

//    private static final int[] IGNORE = new int[]{
//        DifferenceConstants.ATTR_NAME_NOT_FOUND_ID
//    };
//
//    static {
//        Arrays.sort(IGNORE);
//    }
    @Override
    public int differenceFound(Difference difference) {

//        String queryParameterValueXpath = xpathRootElement + "/controlActProcess[1]/queryByParameter[1]/queryByParameterPayload[1]/person.id[1]/value[1]";
//        String processingModeCodeValueXpath = xpathRootElement + "/processingModeCode[1]/@code";
//        String effectiveTimestampXpath = XPATH_ROOT_REVISE_PERSON + "/controlActProcess[1]/effectiveTime[1]/@value";
//        String effectiveTimestampIndividualXpath = XPATH_ROOT_REVISE_PERSON + "/controlActProcess[1]/subject[1]/registrationEvent[1]/subject1[1]/identifiedPerson[1]/effectiveDate[1]/@value";
//        String lastNameXpath = XPATH_ROOT_REVISE_PERSON + "/controlActProcess[1]/subject[1]/registrationEvent[1]/subject1[1]/identifiedPerson[1]/identifiedPerson[1]/name[1]/family[1]/text()[1]";
//        String givenNameXpath = XPATH_ROOT_REVISE_PERSON + "/controlActProcess[1]/subject[1]/registrationEvent[1]/subject1[1]/identifiedPerson[1]/identifiedPerson[1]/name[1]/given[1]/text()[1]";
//        //merge person ignore fields
//        String effectiveTimestampMergeXpath = XPATH_ROOT_MERGE_PERSON + "/controlActProcess[1]/effectiveTime[1]/@value";
//        String effectiveTimestampIndividualMergeXpath = XPATH_ROOT_MERGE_PERSON + "/controlActProcess[1]/subject[1]/registrationEvent[1]/subject1[1]/identifiedPerson[1]/effectiveDate[1]/@value";
//        String lastNameMergeXpath = XPATH_ROOT_MERGE_PERSON + "/controlActProcess[1]/subject[1]/registrationEvent[1]/subject1[1]/identifiedPerson[1]/identifiedPerson[1]/name[1]/family[1]/text()[1]";
//        String givenNameMergeXpath = XPATH_ROOT_MERGE_PERSON + "/controlActProcess[1]/subject[1]/registrationEvent[1]/subject1[1]/identifiedPerson[1]/identifiedPerson[1]/name[1]/given[1]/text()[1]";
//        String otherIdTagNameMergeXpath = "playedOtherIDs";
//        
//        // ignore the fact that PHSA doesn't supply the assigningAuthorityName
//        if (DifferenceConstants.ATTR_NAME_NOT_FOUND_ID == difference.getId()) {
//            String xpathLocation = difference.getTestNodeDetail().getXpathLocation();
//            boolean isQueryParameterAssigningAuthorityMissing = queryParameterValueXpath.equals(xpathLocation)
//                    && "assigningAuthorityName".equals(difference.getTestNodeDetail().getValue());
//            if (isQueryParameterAssigningAuthorityMissing) {
//                return RETURN_IGNORE_DIFFERENCE_NODES_SIMILAR;
//            }
//        }
//        
//        // ignore the fact that PHSA doesn't supply the assigningAuthorityName
//        if (DifferenceConstants.ELEMENT_NUM_ATTRIBUTES_ID == difference.getId()) {
//            String actualNumAttributes = difference.getTestNodeDetail().getValue();
//            String expectedNumAttributes = difference.getControlNodeDetail().getValue();
//            
//            String xpathLocation = difference.getTestNodeDetail().getXpathLocation();
//            boolean isQueryParameterAssigningAuthorityMissing = queryParameterValueXpath.equals(xpathLocation)
//                    && "3".equals(expectedNumAttributes)
//                    && "4".equals(actualNumAttributes);
//            if (isQueryParameterAssigningAuthorityMissing) {
//                return RETURN_IGNORE_DIFFERENCE_NODES_SIMILAR;
//            }
//        }
//        
//        // ignore the processing mode code. We don't map it, as we should always send "I"
//        if (DifferenceConstants.ATTR_VALUE_ID == difference.getId()) {
//            String xpathLocation = difference.getTestNodeDetail().getXpathLocation();
//            boolean isProcessingModeCodeIncorrect = processingModeCodeValueXpath.equals(xpathLocation);
//            if (isProcessingModeCodeIncorrect) {
//                return RETURN_IGNORE_DIFFERENCE_NODES_SIMILAR;
//            }
//        }
//        
//        // ignore the server timestamp. We always pass through the timestamp from Cerner
//        if (DifferenceConstants.ATTR_VALUE_ID == difference.getId()) {
//            String xpathLocation = difference.getTestNodeDetail().getXpathLocation();
//            boolean isEffectiveTimestampIncorrect = effectiveTimestampXpath.equals(xpathLocation);
//            if (isEffectiveTimestampIncorrect) {
//                return RETURN_IGNORE_DIFFERENCE_NODES_SIMILAR;
//            }
//        }
//        
//                
//        // ignore the server timestamp for a change to an individual. We always pass through the timestamp from Cerner
//        if (DifferenceConstants.ATTR_VALUE_ID == difference.getId()) {
//            String xpathLocation = difference.getTestNodeDetail().getXpathLocation();
//            boolean iseffectiveTimestampIndividualIncorrect = effectiveTimestampIndividualXpath.equals(xpathLocation);
//            if (iseffectiveTimestampIndividualIncorrect) {
//                return RETURN_IGNORE_DIFFERENCE_NODES_SIMILAR;
//            }
//        }
//        
//        // ignore case for the last name from Cerner
//        if (DifferenceConstants.TEXT_VALUE_ID == difference.getId()) {
//            String xpathLocation = difference.getTestNodeDetail().getXpathLocation();
//            boolean isUpperCaseLastName = lastNameXpath.equalsIgnoreCase(xpathLocation);
//            if (isUpperCaseLastName) {
//                return RETURN_IGNORE_DIFFERENCE_NODES_SIMILAR;
//            }
//        }
//        
//        // ignore case for the given name from Cerner
//        if (DifferenceConstants.TEXT_VALUE_ID == difference.getId()) {
//            String xpathLocation = difference.getTestNodeDetail().getXpathLocation();
//            boolean isUpperCaseGivenName = givenNameXpath.equalsIgnoreCase(xpathLocation);
//            if (isUpperCaseGivenName) {
//                return RETURN_IGNORE_DIFFERENCE_NODES_SIMILAR;
//            }
//        }
//        
//        //ignore differences from merge person
//        // ignore the server timestamp. We always pass through the timestamp from Cerner
//        if (DifferenceConstants.ATTR_VALUE_ID == difference.getId()) {
//            String xpathLocation = difference.getTestNodeDetail().getXpathLocation();
//            boolean isEffectiveTimestampIncorrect = effectiveTimestampMergeXpath.equals(xpathLocation);
//            if (isEffectiveTimestampIncorrect) {
//                return RETURN_IGNORE_DIFFERENCE_NODES_SIMILAR;
//            }
//        }
//        
//                
//        // ignore the server timestamp for a change to an individual. We always pass through the timestamp from Cerner
//        if (DifferenceConstants.ATTR_VALUE_ID == difference.getId()) {
//            String xpathLocation = difference.getTestNodeDetail().getXpathLocation();
//            boolean iseffectiveTimestampIndividualIncorrect = effectiveTimestampIndividualMergeXpath.equals(xpathLocation);
//            if (iseffectiveTimestampIndividualIncorrect) {
//                return RETURN_IGNORE_DIFFERENCE_NODES_SIMILAR;
//            }
//        }
//        
//        // ignore case for the last name from Cerner
//        if (DifferenceConstants.TEXT_VALUE_ID == difference.getId()) {
//            String xpathLocation = difference.getTestNodeDetail().getXpathLocation();
//            boolean isUpperCaseLastName = lastNameMergeXpath.equalsIgnoreCase(xpathLocation);
//            if (isUpperCaseLastName) {
//                return RETURN_IGNORE_DIFFERENCE_NODES_SIMILAR;
//            }
//        }
//        
//        // ignore case for the given name from Cerner
//        if (DifferenceConstants.TEXT_VALUE_ID == difference.getId()) {
//            String xpathLocation = difference.getTestNodeDetail().getXpathLocation();
//            boolean isUpperCaseGivenName = givenNameMergeXpath.equalsIgnoreCase(xpathLocation);
//            if (isUpperCaseGivenName) {
//                return RETURN_IGNORE_DIFFERENCE_NODES_SIMILAR;
//            }
//        }
//        
//        // ignore tag name for playedOtherIDs/asOtherIDs element from Cerner
//        if (DifferenceConstants.ELEMENT_TAG_NAME_ID == difference.getId()) {
//            String xpathLocation = difference.getTestNodeDetail().getNode().getNodeName();
//            boolean isTagElementName = otherIdTagNameMergeXpath.equalsIgnoreCase(xpathLocation);
//            if (!isTagElementName) {
//                return RETURN_IGNORE_DIFFERENCE_NODES_SIMILAR;
//            }
//        }

        return super.differenceFound(difference);
//        return Arrays.binarySearch(IGNORE, difference.getId()) >= 0
//                ? RETURN_IGNORE_DIFFERENCE_NODES_IDENTICAL
//                : super.differenceFound(difference);

    }

}
