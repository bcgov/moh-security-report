/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.plr.distribution;

import ca.bc.gov.health.plr.dto.esb.DistributionNotification;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ConditionsDto;
import ca.bc.gov.health.plr.dto.provider.esb.CredentialsDto;
import ca.bc.gov.health.plr.dto.provider.esb.DisciplinaryActionDto;
import ca.bc.gov.health.plr.dto.provider.esb.DistributionChangeType;
import ca.bc.gov.health.plr.dto.provider.esb.ElectronicAddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.ExpertiseDto;
import ca.bc.gov.health.plr.dto.provider.esb.PersonNameDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderRelationshipDto;
import ca.bc.gov.health.plr.dto.provider.esb.StatusDto;
import ca.bc.gov.health.plr.dto.provider.esb.TelecommunicationDto;
import ca.bc.gov.health.plr.dto.provider.esb.WorkLocationDto;
import ca.bc.gov.moh.hsa.plr.converter.plr.DistributionDtoToEntityConverter;
import ca.bc.gov.moh.hsa.plr.converter.plr.UpdateDistributionEntityToHl7Converter;
import java.io.Serializable;
import java.io.StringWriter;
import java.lang.reflect.InvocationTargetException;
import java.util.Arrays;
import java.util.Date;

import java.util.List;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;

import org.hl7.v3.m4_16.AD;
import org.hl7.v3.m4_16.II;
import org.hl7.v3.m4_16.IVLTS;
import org.hl7.v3.m4_16.PN;
import org.hl7.v3.m4_16.PRPMIN303030CA;
import org.hl7.v3.m4_16.PRPMMT303010BCHealthCareProviderStatusCode;
import org.hl7.v3.m4_16.PRPMMT303010BCOrganization;
import org.hl7.v3.m4_16.PRPMMT303010BCQualifiedEntity;
import org.hl7.v3.m4_16.PRPMMT303010BCRelatedTo;
import org.hl7.v3.m4_16.PRPMMT303010BCResponsibleParty;
import org.hl7.v3.m4_16.PRPMMT303010BCServiceDeliveryLocation;
import org.hl7.v3.m4_16.PRPMMT303010BCSubject1;
import org.hl7.v3.m4_16.TEL;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 * Test cases for Dto -> Entity -> HL7 conversions
 *
 * @author greg.perkins
 */
public class DistributionEntityToJaxbConverterTest {

    public DistributionEntityToJaxbConverterTest() {
    }

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

    /**
     * Test of convert method, of class DistributionEntityToJaxbConverter.
     */
    @Test
    public void testConvert() throws JAXBException, IllegalAccessException, 
            InvocationTargetException {
        ProviderDetails details = ProviderTestDataBuilder.getPublicProviderDetails();
        DistributionNotification in = createNotification(details);
        PRPMIN303030CA result = UpdateDistributionEntityToHl7Converter.convertToPRPMIN303030CA(DistributionDtoToEntityConverter.convert(in));
        assertNotNull(result);
        StringWriter writer = new StringWriter();
        JAXBContext context = JAXBContext.newInstance(PRPMIN303030CA.class);
        Marshaller m = context.createMarshaller();
        m.marshal(result, writer);
        System.out.println(writer.toString());
    }

    private DistributionNotification createNotification(ProviderDetails details) {
        DistributionNotification in = new DistributionNotification("1");
        in.setUniqueMessageId("987654321");
        in.setAcceptAckCode("acceptAckCode");
        in.setChangeType(DistributionChangeType.UPDATE);
        in.setDestinationAddress("destinationAddress");
        in.setIsHail(true);
        in.setMessageCreationTime(new Date());
        in.setMessageInteractionId("interactionId");
        in.setOriginalEventDate(new Date());
        in.setProviderDetails(details);
        in.setProcessModeCode("processModeCode");
        in.setProcessingCode("processingCode");
        in.setRegistryUserOrgId("registryUserOrgId");
        in.setRelease("release");
        in.setResponsiblePersonUserId("responsiblePersonUserId");
        in.setSecurityText("securityText");
        in.setSourceEnvironment("sourceEnvironment");
        in.setSourceFacilityId("facilityId");
        in.setSourceJurisdiction("sourceJurisdiction");
        in.setSourceNetworkAddressChid("sourceNetworkAddressChid");
        in.setSourceOrganizationChid("sourceOrganizationChid");
        in.setSourceRegistryUserId("sourceRegistryUserId");
        in.setSourceServer("sourceServer");
        in.setSourceUserId("sourceUserId");
        in.setTargetEnvironment("targetEnvironment");
        in.setTargetFacilityId("targetFacilityid");
        in.setTargetJurisdiction("targetJurisdiction");
        in.setTargetNetworkAddressChid("targetNetworkAccessChid");
        in.setTargetOrganizationChid("targetOrganizationChid");
        in.setTargetRegistryUserId("targetRegistryUserId");
        in.setTargetServer("targetServer");
        in.setTransactionType(Arrays.asList(new String[]{"transactionType"}));
        in.setUniqueMessageId("messageId");
        in.setVersion("version");
        return in;
    }

    /**
     * Test of convertRelationship method, of class
     * DistributionEntityToJaxbConverter.
     */
    @Test
    public void testConvertRelationship() {
        ProviderRelationshipDto rel = ProviderTestDataBuilder.getProviderRelationship();
        PRPMMT303010BCRelatedTo result = UpdateDistributionEntityToHl7Converter.convertRelationship(DistributionDtoToEntityConverter.convertProviderRelationship(rel));
        assertNotNull(result);
        assertNotNull(result.getHealthCareProvider().getValue().getCode().getCode());
        assertNotNull(result.getHealthCareProvider().getValue().getEffectiveTime());
        assertEquals(result.getHealthCareProvider().getValue().getCode().getCode(), rel.getRelationshipTypeCode());
    }

    /**
     * Test of convertExpertise method, of class
     * DistributionEntityToJaxbConverter.
     */
    @Test
    public void testConvertExpertise() {
        ExpertiseDto expertise = ProviderTestDataBuilder.getExpertise();

        PRPMMT303010BCRelatedTo result = UpdateDistributionEntityToHl7Converter.convertExpertise(DistributionDtoToEntityConverter.convertExpertise(expertise));
        assertNotNull(result);
        PRPMMT303010BCQualifiedEntity qe = result.getQualifiedEntity().getValue();
        assertNotNull(qe);
        assertNotNull(qe.getCode().getCode());
        assertNotNull(qe.getCode().getOriginalText());
        assertNotNull(qe.getEffectiveTime());

        assertEquals(qe.getCode().getCode(), expertise.getTypeCode());
        assertEquals(qe.getCode().getOriginalText().getText(), expertise.getSourcesCode());

    }

    /**
     * Test of convertCredential method, of class
     * DistributionEntityToJaxbConverter.
     */
    @Test
    public void testConvertCredential() {
        CredentialsDto cred = ProviderTestDataBuilder.getCredentials();
        PRPMMT303010BCRelatedTo result = UpdateDistributionEntityToHl7Converter.convertCredential(DistributionDtoToEntityConverter.convertCredential(cred));
        assertNotNull(result);
        PRPMMT303010BCQualifiedEntity qe = result.getQualifiedEntity().getValue();
        assertNotNull(qe);
        assertNotNull(qe.getCode().getCode());
        assertNotNull(qe.getEffectiveTime());
        PRPMMT303010BCOrganization org = qe.getQualificationGrantingOrganization().getValue();
        assertNotNull(org);
        assertNotNull(org.getName());
        assertNotNull(org.getAddr());

        assertEquals(qe.getId().getExtension(), cred.getRegistrationNumber());
        assertEquals(qe.getCode().getCode(), cred.getTypeCode());
        assertEquals(qe.getQualificationGrantingOrganization().getValue().getName().getText(), cred.getGrantingInstitution());
        AD ad = qe.getQualificationGrantingOrganization().getValue().getAddr();
        assertEquals(ad.getContent().size(), 3);

    }

    /**
     * Test of convertWorkLocation method, of class
     * DistributionEntityToJaxbConverter.
     */
    @Test
    public void testConvertWorkLocation() {
        WorkLocationDto workLocation = ProviderTestDataBuilder.getWorkLocation();
        PRPMMT303010BCRelatedTo result = UpdateDistributionEntityToHl7Converter.convertWorkLocation(DistributionDtoToEntityConverter.convertWorkLocation(workLocation));

        assertNotNull(result);
        PRPMMT303010BCServiceDeliveryLocation sdl = result.getAssignedEntity().getValue().getPerformance().getValue().getActDefinitionOrEvent().getLocation().getValue().getServiceDeliveryLocation();
        assertEquals(workLocation.getIdentifier().toString(), sdl.getId().getExtension());
    }

    /**
     * Test of convertCondition method, of class
     * DistributionEntityToJaxbConverter.
     */
    @Test
    public void testConvertCondition() {
        ConditionsDto condition = ProviderTestDataBuilder.getConditions();
        PRPMMT303010BCResponsibleParty party = UpdateDistributionEntityToHl7Converter.convertCondition(DistributionDtoToEntityConverter.convertCondition(condition));
        assertNotNull(party);
        assertEquals(party.getPrivilege().getId().getExtension(), condition.getIdentifier());
        assertEquals(party.getPrivilege().getCode().getCode(), condition.getTypeCode());
        assertEquals(party.getPrivilege().getConfidentialityCode().getCode(), "R");
        assertEquals(party.getPrivilege().getConfidentialityCode().getOriginalText().getText(), condition.getRestrictionExplanationText());
        assertEquals(party.getPrivilege().getEffectiveTime().getClass(), IVLTS.class);
    }

    //Demographics
    /**
     * Test of convertIdentifier method, of class
     * DistributionEntityToJaxbConverter.
     */
    @Test
    public void testConvertIdentifier() {
        CollegeIdentifierDto id = ProviderTestDataBuilder.getIdentifier();
        II result = UpdateDistributionEntityToHl7Converter.convertIdentifier(DistributionDtoToEntityConverter.convertIdentifier(id));
        assertNotNull(result);
        assertEquals(result.getExtension(), id.getIdentifier());
    }

    /**
     * Test of convertStatus method, of class DistributionEntityToJaxbConverter.
     */
    @Test
    public void testConvertStatus() {
        StatusDto status = ProviderTestDataBuilder.getStatus();
        PRPMMT303010BCHealthCareProviderStatusCode result = UpdateDistributionEntityToHl7Converter.convertStatus(DistributionDtoToEntityConverter.convertStatus(status));
        assertNotNull(result);
        assertEquals(result.getCode(), status.getTypeCode());

    }

    /**
     * Test of convertDisciplinaryAction method, of class
     * DistributionEntityToJaxbConverter.
     */
    @Test
    public void testConvertDisciplinaryAction() {
        DisciplinaryActionDto disciplinaryAction = ProviderTestDataBuilder.getDisciplinaryAction();
        PRPMMT303010BCSubject1 result = UpdateDistributionEntityToHl7Converter.convertDisciplinaryAction(DistributionDtoToEntityConverter.convertDisciplinaryAction(disciplinaryAction));
        assertNotNull(result);
        assertNotNull(result.getDisciplinaryAction());
        assertEquals(result.getDisciplinaryAction().getText().getText(), disciplinaryAction.getDescription());
        assertEquals(result.getDisciplinaryAction().getEffectiveTime().getClass(), IVLTS.class);
        assertEquals(result.getDisciplinaryAction().getConfidentialityCode().getCode(), disciplinaryAction.isDisplayFlag() ? "R" : "N");
    }

    /**
     * Test of convertAddressToAD method, of class
     * DistributionEntityToJaxbConverter.
     */
    @Test
    public void testConvertAddressToAD() {
        AddressDto addr = ProviderTestDataBuilder.getAddress();
        AD result = UpdateDistributionEntityToHl7Converter.convertAddressToAD(DistributionDtoToEntityConverter.convertAddress(addr));
        assertNotNull(result);
        assertNotNull(result.getUse());
        assertNotNull(result.getContent());
        assertEquals(result.getContent().size(),8);
    }

    /**
     * Test of convertPersonNameToPN method, of class
     * DistributionEntityToJaxbConverter.
     */
    @Test
    public void testConvertPersonNameToPN() {
        PersonNameDto name = ProviderTestDataBuilder.getPersonName();
        PN result = UpdateDistributionEntityToHl7Converter.convertPersonNameToPN(DistributionDtoToEntityConverter.convertName(name));
        assertNotNull(result);

        assertNotNull(result.getContent());
        List<Serializable> parts = result.getContent();
        assertEquals(6,parts.size());
        assertEquals(parts.get(parts.size()-1).getClass(), IVLTS.class);

        assertNotNull(result.getUse());

    }

    /**
     * Test of convertTelecommunicationToTEL method, of class
     * DistributionEntityToJaxbConverter.
     */
    @Test
    public void testConvertTelecommunicationToTEL() {
        TelecommunicationDto phone = ProviderTestDataBuilder.getTelecommunication();
        TEL result = UpdateDistributionEntityToHl7Converter.convertTelecommunicationToTEL(DistributionDtoToEntityConverter.convertTelecommunication(phone));
        assertNotNull(result);

        phone.setCommunicationPurposeCode("HC");
        phone.setTypeCode("T");
        result = UpdateDistributionEntityToHl7Converter.convertTelecommunicationToTEL(DistributionDtoToEntityConverter.convertTelecommunication(phone));
        assertEquals(result.getUse().get(0), "H");
        assertTrue(result.getValue().startsWith("tel:"));

        phone.setCommunicationPurposeCode("BC");
        phone.setTypeCode("PG");
        result = UpdateDistributionEntityToHl7Converter.convertTelecommunicationToTEL(DistributionDtoToEntityConverter.convertTelecommunication(phone));
        assertEquals(result.getUse().get(0), "WP PG");
        assertTrue(result.getValue().startsWith("tel:"));

        phone.setCommunicationPurposeCode("BC");
        phone.setTypeCode("MB");
        result = UpdateDistributionEntityToHl7Converter.convertTelecommunicationToTEL(DistributionDtoToEntityConverter.convertTelecommunication(phone));
        assertEquals(result.getUse().get(0), "WP MC");
        assertTrue(result.getValue().startsWith("tel:"));
    }

    /**
     * Test of convertElectronicAddressToTEL method, of class
     * DistributionEntityToJaxbConverter.
     */
    @Test
    public void testConvertElectronicAddressToTEL() {
        ElectronicAddressDto phone = ProviderTestDataBuilder.getElectronicAddress();
        TEL result = UpdateDistributionEntityToHl7Converter.convertElectronicAddressToTEL(DistributionDtoToEntityConverter.convertElectronicAddress(phone));
        assertNotNull(result);

        phone.setCommunicationPurposeCode("BC");
        phone.setTypeCode("H");
        result = UpdateDistributionEntityToHl7Converter.convertElectronicAddressToTEL(DistributionDtoToEntityConverter.convertElectronicAddress(phone));
        assertEquals(result.getUse().get(0), "WP");
        assertTrue(result.getValue().startsWith("http:"));

        phone.setCommunicationPurposeCode("BC");
        phone.setTypeCode("F");
        result = UpdateDistributionEntityToHl7Converter.convertElectronicAddressToTEL(DistributionDtoToEntityConverter.convertElectronicAddress(phone));
        assertEquals(result.getUse().get(0), "WP");
        assertTrue(result.getValue().startsWith("ftp:"));

        phone.setCommunicationPurposeCode("BC");
        phone.setTypeCode("E");
        result = UpdateDistributionEntityToHl7Converter.convertElectronicAddressToTEL(DistributionDtoToEntityConverter.convertElectronicAddress(phone));
        assertEquals(result.getUse().get(0), "WP");
        assertTrue(result.getValue().startsWith("mailto:"));
    }

}
