/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.moh.hsa.plr.converter.dtoToHl7;

import com.sun.xml.bind.marshaller.NamespacePrefixMapper;
import java.io.IOException;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.net.URL;
import java.util.List;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.PropertyException;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.util.JAXBSource;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import org.custommonkey.xmlunit.Diff;
import org.custommonkey.xmlunit.Difference;
import org.custommonkey.xmlunit.XMLConstants;
import org.custommonkey.xmlunit.XMLUnit;
import org.hl7.v3.m4_0.PRPMIN301011MCCIMT000300Message;
import org.hl7.v3.m4_16.PRPMIN303030CA;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.w3c.dom.Document;
import org.w3c.dom.Node;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

public class HL7TypeConverterTest {
    
    public static final String SCHEMA_ADD_40_SCHEMA = "/schema/hl7v3_4.0/PRPM_IN301011.xsd";
//    public static final String SCHEMA_ADD_40_SCHEMA = "/schema/hl7v3_4.0/PRPM_AR300004.xsd";
//    public static final String SCHEMA_UPDATE_404_SCHEMA = "/schema/hl7v3_4.0.4/PRPM_IN303011.xsd";
    public static final String SCHEMA_UPDATE_404_SCHEMA = "/schema/hl7v3_4.0.4/PRPM_AR300004.xsd";
//    public static final String SCHEMA_ADD_416_SCHEMA = "/schema/hl7v3_4.1.6/PRPM_IN301030CA.xsd";
//    public static final String SCHEMA_UPDATE_416_SCHEMA = "/schema/hl7v3_4.1.6/PRPM_IN303030CA.xsd";
    public static final String SCHEMA_ADD_40_XML_HEADER = "urn:hl7-org:v3 file:///C:/Users/Conrad.Gustafson.CA257_MOH/Documents/NetBeansProjects/HSA-PLRDev/HSA-plr/src/main/resources/schema/hl7v3_4.0/PRPM_IN301011.xsd";
    public static final String SCHEMA_UPDATE_404_XML_HEADER = "urn:hl7-org:v3 file:///C:/Users/Conrad.Gustafson.CA257_MOH/Documents/NetBeansProjects/HSA-PLRDev/HSA-plr/src/main/resources/schema/hl7v3_4.0.4/PRPM_IN303011.xsd";
//    public static final String SCHEMA_ADD_416_XML_HEADER = "urn:hl7-org:v3 file:///C:/Users/Conrad.Gustafson.CA257_MOH/Documents/NetBeansProjects/HSA-PLRDev/HSA-plr/src/main/resources/schema/hl7v3_4.1.6/PRPM_IN301030CA.xsd";
//    public static final String SCHEMA_UPDATE_416_XML_HEADER = "urn:hl7-org:v3 file:///C:/Users/Conrad.Gustafson.CA257_MOH/Documents/NetBeansProjects/HSA-PLRDev/HSA-plr/src/main/resources/schema/hl7v3_4.1.6/PRPM_IN303030CA.xsd";

    @BeforeClass
    public static void setUpClass() {
    }

    @AfterClass
    public static void tearDownClass() {
    }

    @Before
    public void setUp() {
    }

    @After
    public void tearDown() {
    }

//    @Test
//    public void testConvertMaintainProviderDTOToHL7Update_v416() throws ParseException, JAXBException, IllegalAccessException, ParserConfigurationException, SAXException, IOException {
//
//        // setup
//        MaintainProviderResponse response = MaintainProviderResponseCreator.setupMaintainProviderResponse();
//
//        // execute
//        PRPMIN303030CA hl7Message = PLRTypeConverter.convertMaintainProviderRequestDTOToUpdate416(response);
//
//        
//        // assert 
//        // Assert that the output is valid
//        Document testDocument = marshalUpdate416(hl7Message);
//        validateMessage(testDocument, SCHEMA_UPDATE_416_SCHEMA);
//
//        // compare the reference document with the result
////        Document referenceDocument = marshal(HL7AddProviderMessageCreator.setupAddProviderMessage());
////        assertXMLDocumentsSimilar(referenceDocument, testDocument);
//    }

    
    // PRPMIN301030CA has not be jaxbed yet
//    @Test
//    public void testConvertMaintainProviderDTOToHL7Add_v416() throws ParseException, JAXBException, IllegalAccessException, ParserConfigurationException, SAXException, IOException {
//
//        // setup
//        MaintainProviderResponse response = MaintainProviderResponseCreator.setupMaintainProviderResponse();
//
//        // execute
//        PRPMIN301030CA hl7Message = PLRTypeConverter.convertMaintainProviderRequestDTOToAdd416(response);
//
//        
//        // assert 
//        // Assert that the output is valid
//        Document testDocument = marshalAdd416(hl7Message);
//        validateMessage(testDocument, SCHEMA_ADD_416_SCHEMA);
//
//        // compare the reference document with the result
////        Document referenceDocument = marshal(HL7AddProviderMessageCreator.setupAddProviderMessage());
////        assertXMLDocumentsSimilar(referenceDocument, testDocument);
//    }

    public Document marshalAdd40(PRPMIN301011MCCIMT000300Message hl7Message) throws JAXBException, PropertyException, ParserConfigurationException {
        return marshall(hl7Message, PRPMIN301011MCCIMT000300Message.class, SCHEMA_ADD_40_XML_HEADER);
    }

//    public Document marshalUpdate404(PRPMIN303011 hl7Message) throws JAXBException, PropertyException, ParserConfigurationException {
//        return marshall(hl7Message, PRPMIN303011.class, SCHEMA_UPDATE_404_XML_HEADER);
//    }

//    public Document marshalUpdate416(PRPMIN303030CA hl7Message) throws JAXBException, PropertyException, ParserConfigurationException {
//        return marshall(hl7Message, PRPMIN303030CA.class, SCHEMA_UPDATE_416_XML_HEADER);
//    }

    public Document marshall(Object hl7Message, Class clazz, String schemaHeader) throws PropertyException, ParserConfigurationException, JAXBException {
        JAXBContext jaxbContext = JAXBContext.newInstance(clazz);
        
        Marshaller jaxbMarshaller = jaxbContext.createMarshaller();
        jaxbMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
        jaxbMarshaller.setProperty(Marshaller.JAXB_SCHEMA_LOCATION, schemaHeader);
        jaxbMarshaller.setProperty("com.sun.xml.bind.namespacePrefixMapper", new MyNamespacePrefixMapper());

        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        Document document = db.newDocument();
        jaxbMarshaller.marshal(hl7Message, document);
        return document;
    }
    
    public PRPMIN303030CA unmarshalUpdate416(Document hl7Document) throws JAXBException {
        JAXBContext jaxbContext = JAXBContext.newInstance(PRPMIN303030CA.class);
        Unmarshaller jaxbUnmarshaller = jaxbContext.createUnmarshaller();
        
        Object object = jaxbUnmarshaller.unmarshal(hl7Document);
        
        return (PRPMIN303030CA) object;
    }

    public void validateStream(String stream, String schemaLocation) throws IOException, SAXException, JAXBException {
        // assert that the reference document is valid
        SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
        URL schemaURL = this.getClass().getResource(schemaLocation);
        Schema schema = sf.newSchema(schemaURL);
        javax.xml.validation.Validator validator = schema.newValidator();
        
        StreamSource source = new StreamSource(new StringReader(stream));
        
        validator.validate(source);
    }

    public void validateJaxbObject(Object object, Class clazz, String schemaLocation) throws IOException, SAXException, JAXBException {
        // assert that the reference document is valid
        SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
        URL schemaURL = this.getClass().getResource(schemaLocation);
        Schema schema = sf.newSchema(schemaURL);
        javax.xml.validation.Validator validator = schema.newValidator();
        
        JAXBContext jaxbContext = JAXBContext.newInstance(clazz);
        JAXBSource source = new JAXBSource(jaxbContext, object);
        
        validator.validate(source);
    }

    public void validateDocument(Document document, String schemaLocation) throws IOException, SAXException {
        // assert that the reference document is valid
        SchemaFactory sf = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
        
        URL schemaURL = this.getClass().getResource(schemaLocation);
        Schema schema = sf.newSchema(schemaURL);

        javax.xml.validation.Validator validator = schema.newValidator();
        
        DOMSource source = new DOMSource(document);
        validator.validate(source);
    }

    public static void assertXMLDocumentsSimilar(Document expectedRequestXML, Document resultRequestXML) {
//    public static void assertXMLDocumentsSimilar(Document expectedRequestXML, Document resultRequestXML, String xpathRootElement) {
        XMLUnit.setIgnoreComments(true);
        XMLUnit.setIgnoreWhitespace(true);
        XMLUnit.setIgnoreAttributeOrder(true);
        XMLUnit.setIgnoreDiffBetweenTextAndCDATA(true);

        Diff myDiff = new Diff(expectedRequestXML, resultRequestXML);

        CustomDifferenceListener dd = new CustomDifferenceListener(myDiff);
//        CustomDifferenceListener dd = new CustomDifferenceListener(myDiff, xpathRootElement);

        List allDifferences = dd.getAllDifferences();

        int unrecoverableDifferencesCount = 0;
        for (Object object : allDifferences) {
            Difference difference = (Difference) object;
            if (!difference.isRecoverable()) {
                System.out.println(difference.getId() + ":" + difference);
                unrecoverableDifferencesCount++;
            }
        }

        if (unrecoverableDifferencesCount > 0) {
            System.out.println("Number of unrecoverable differences: " + unrecoverableDifferencesCount);
        }
        Assert.assertTrue("Conversion worked as expected", dd.similar());
    }

    public static String convertNodeToString(Node node) {

        try {
            Transformer transformer = TransformerFactory.newInstance().newTransformer();
            transformer.setOutputProperty(OutputKeys.ENCODING, "UTF-8");
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
            DOMSource source = new DOMSource(node);
            Writer stringWriter = new StringWriter();
            StreamResult streamResult = new StreamResult(stringWriter);
            transformer.transform(source, streamResult);
            return stringWriter.toString();
        } catch (TransformerConfigurationException ex) {
            throw new RuntimeException(ex);
        } catch (TransformerException ex) {
            throw new RuntimeException(ex);
        }
    }

    public static Document convertStringToDocument(String xmlStr) {
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
        factory.setNamespaceAware(true);
        factory.setXIncludeAware(true);
        DocumentBuilder builder;
        try {
            builder = factory.newDocumentBuilder();
            Document doc = builder.parse(new InputSource(new StringReader(xmlStr)));
            return doc;
        } catch (Exception e) {
            e.printStackTrace();
        }
        return null;
    }
    
    static class MyNamespacePrefixMapper extends NamespacePrefixMapper {

        @Override
        public String getPreferredPrefix(String namespaceUri, String suggestion, boolean requirePrefix) {
            if ("urn:hl7-org:v3".equals(namespaceUri)) {
                return null;
            } else {
                return suggestion;
            }
        }
        
    }
}
