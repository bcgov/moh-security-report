package ca.bc.gov.moh.hsa.plr.misc;

import ca.bc.gov.health.plr.dto.esb.Acknowledgment;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderRequest;
import ca.bc.gov.health.plr.dto.esb.MaintainProviderResponse;
import ca.bc.gov.health.plr.dto.provider.esb.AddressDto;
import ca.bc.gov.health.plr.dto.provider.esb.CollegeIdentifierDto;
import ca.bc.gov.health.plr.dto.provider.esb.ProviderDetails;
import ca.bc.gov.health.plr.dto.esb.BatchRequest;
import ca.bc.gov.health.plr.dto.esb.BatchResponse;
import ca.bc.gov.health.plr.dto.esb.BatchTransactionStatusRequest;
import ca.bc.gov.health.plr.dto.esb.QueryParameters;
import ca.bc.gov.health.plr.dto.esb.QueryRequest;
import ca.bc.gov.health.plr.dto.provider.esb.BatchStatus;
import ca.uhn.hl7v2.HL7Exception;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import javax.xml.bind.JAXBException;
import org.apache.camel.CamelContext;
import org.apache.camel.Exchange;
import org.apache.camel.Produce;
import org.apache.camel.ProducerTemplate;
import org.apache.camel.component.mock.MockEndpoint;
import org.apache.camel.test.spring.CamelSpringDelegatingTestContextLoader;
import org.apache.camel.test.spring.CamelSpringJUnit4ClassRunner;
import org.apache.camel.test.spring.CamelSpringTestHelper;
import org.apache.camel.test.spring.MockEndpoints;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ContextConfiguration;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author conrad.gustafson
 */
//@RunWith(JUnit4ClassRunner.class)
@RunWith(CamelSpringJUnit4ClassRunner.class)
@ContextConfiguration(
        loader = CamelSpringDelegatingTestContextLoader.class, locations = {"classpath:/plrTestApplicationContext.xml"}
)
@MockEndpoints
public class EJBConnectionTest {

    MockEndpoint ejbRouteMockEndpoint;
    MockEndpoint ejbRouteBatchMockEndpoint;
    MockEndpoint ejbRouteResultMockEndpoint;
    MockEndpoint ejbRouteBatchStatusMockEndpoint;
    MockEndpoint ejbRouteQueryMockEndpoint;

    @BeforeClass
    public static void fixTestClassProblem() throws Exception {
        CamelSpringTestHelper.setTestClass(InboundBatchRouteBuilderTest.class);
    }

    @Before
    public void resolveMockEndpoints() {
        ejbRouteMockEndpoint = (MockEndpoint) context.getEndpoint("mock:direct:ejbRouteMaintain");
        ejbRouteBatchMockEndpoint = (MockEndpoint) context.getEndpoint("mock:direct:ejbRouteBatch");
        ejbRouteBatchStatusMockEndpoint = (MockEndpoint) context.getEndpoint("mock:direct:ejbRouteBatchStatus");
        ejbRouteQueryMockEndpoint = (MockEndpoint) context.getEndpoint("mock:direct:ejbRouteQuery");
        ejbRouteResultMockEndpoint = (MockEndpoint) context.getEndpoint("mock:direct:ejbRouteResult");
    }

    @Produce(uri = "direct:ejbRouteMaintain")
    protected ProducerTemplate testProducer;

    @Produce(uri = "direct:ejbRouteBatch")
    protected ProducerTemplate testProducerBatch;

    @Produce(uri = "direct:ejbRouteBatchStatus")
    protected ProducerTemplate testProducerBatchStatus;

    @Produce(uri = "direct:ejbRouteQuery")
    protected ProducerTemplate testProducerQuery;

    @Autowired
    protected CamelContext context;

    @Test
    @DirtiesContext
    public void testEJBConnection() throws InterruptedException, IOException, JAXBException, HL7Exception, Exception {
        ejbRouteMockEndpoint.expectedMessageCount(1);

        MaintainProviderRequest request = createRequest();
        testProducer.sendBody(request);

        MockEndpoint.assertIsSatisfied(context);
        assertEJBCallCompleted();
    }

    @Test
    @DirtiesContext
    public void testEJBConnectionBatch() throws InterruptedException, IOException, JAXBException, HL7Exception, Exception {
        ejbRouteBatchMockEndpoint.expectedMessageCount(1);

        MaintainProviderRequest request = createRequest();
        BatchRequest batchRequest = new BatchRequest();
        batchRequest.setMaintainProviderRequests(new ArrayList<MaintainProviderRequest>());
        batchRequest.getMaintainProviderRequests().add(request);
        batchRequest.setUniqueMessageId("lsklksjfd");
        testProducerBatch.sendBody(batchRequest);

        MockEndpoint.assertIsSatisfied(context);
        assertBatchEJBCallCompleted();

    }

    @Test
    @DirtiesContext
    public void testEJBConnectionQuery() throws InterruptedException, IOException, JAXBException, HL7Exception, Exception {
        ejbRouteQueryMockEndpoint.expectedMessageCount(1);

        QueryRequest queryRequest = new QueryRequest();
        queryRequest.setRegistryUserOrgId("plr-reg-admin");
        QueryParameters queryParameters = new QueryParameters();
        queryRequest.setQueryParameters(queryParameters);

        // set query parameters
//        set registryUserOrgId
        testProducerQuery.sendBody(queryRequest);

        MockEndpoint.assertIsSatisfied(context);
        List<Exchange> receivedExchanges = ejbRouteResultMockEndpoint.getReceivedExchanges();
        Assert.assertNotNull(receivedExchanges);
        Assert.assertEquals(1, receivedExchanges.size());
    }

    @Test
    @DirtiesContext
    public void testEJBConnectionBatchStatus() throws InterruptedException, IOException, JAXBException, HL7Exception, Exception {
        ejbRouteBatchStatusMockEndpoint.expectedMessageCount(1);

        BatchTransactionStatusRequest batchStatusRequest = new BatchTransactionStatusRequest();
        batchStatusRequest.setRegistryUserOrgId("plr-reg-admin");
        batchStatusRequest.setStatus(BatchStatus.PARSED);
        String uniqueMessageId = "lkjsdlfkjsdk";
        batchStatusRequest.setUniqueMessageId(uniqueMessageId);

        testProducerBatchStatus.sendBody(batchStatusRequest);

        MockEndpoint.assertIsSatisfied(context);
        List<Exchange> receivedExchanges = ejbRouteResultMockEndpoint.getReceivedExchanges();
        Assert.assertNotNull(receivedExchanges);
        Assert.assertEquals(1, receivedExchanges.size());

    }

    public void assertEJBCallCompleted() {
        List<Exchange> receivedExchanges = ejbRouteResultMockEndpoint.getReceivedExchanges();
        Assert.assertNotNull(receivedExchanges);
        Assert.assertEquals(1, receivedExchanges.size());
        MaintainProviderResponse response = receivedExchanges.get(0).getIn().getBody(MaintainProviderResponse.class);
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        Assert.assertTrue(acknowledgments.size() == 1);
    }

    public void assertBatchEJBCallCompleted() {
        List<Exchange> receivedExchanges = ejbRouteResultMockEndpoint.getReceivedExchanges();
        Assert.assertNotNull(receivedExchanges);
        Assert.assertEquals(1, receivedExchanges.size());
        BatchResponse batchResponse = receivedExchanges.get(0).getIn().getBody(BatchResponse.class);
        Collection<MaintainProviderResponse> maintainProviderResponses = batchResponse.getMaintainProviderResponses();
        Assert.assertTrue(maintainProviderResponses.size() == 1);
        MaintainProviderResponse[] responses = maintainProviderResponses.toArray(new MaintainProviderResponse[]{});
        MaintainProviderResponse response = responses[0];
        Collection<Acknowledgment> acknowledgments = response.getAcknowledgments();
        Assert.assertTrue(acknowledgments.size() == 1);
    }

    private MaintainProviderRequest createRequest() {
        MaintainProviderRequest request = new MaintainProviderRequest();
// Authorized user
        request.setRegistryUserOrgId("plr-reg-admin");
        request.setProviderDetails(new ProviderDetails());
        request.getProviderDetails().setIdentifiers(new ArrayList<CollegeIdentifierDto>());

// Identify the Provider to update
        CollegeIdentifierDto collegeDto = new CollegeIdentifierDto();
        collegeDto.setIdentifier("some valid college identifier");
        collegeDto.setTypeCode("DENID");
        request.getProviderDetails().getIdentifiers().add(collegeDto);

// Add an Address to add
        AddressDto address = new AddressDto();
        address.setCity("Narnia");
        address.setAddressLineOne("The Yellow Brick Road");
        address.setEffectiveStartDate(new Date());
        address.setCommunicationPurposeCode("BC");
        address.setTypeCode("M");
        request.getProviderDetails().getAddresses().add(address);

        return request;

    }

}
