package ca.bc.gov.health.importfile;

import ca.bc.gov.health.database.ejb.ClaimTypesFacade;
import ca.bc.gov.health.database.ejb.ResidencyTypesFacade;
import ca.bc.gov.health.database.entity.ApplicationUsers;
import ca.bc.gov.health.database.entity.ClaimTypes;
import ca.bc.gov.health.database.entity.ResidencyTypes;
import ca.bc.gov.health.service.ClaimService;
import ca.bc.gov.health.service.viewmodel.ClaimViewModel;
import jakarta.enterprise.inject.Instance;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.List;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

public class HopsitalClaimCreatorTest {

  HopsitalClaimCreator claimCreator = new HopsitalClaimCreator();

  private static final String INPATIENT_LINE =
      "  8025480    Shbartest         Yanny       7419 97 Ave NW                                    Calgary                  ABt3b1w8417836920   1957/08/09F     procaccide2010/08/242010/09/0815  1162.00017430.00Nnotes go here                 aaa0624 bbb0625 ccc0626 1BAA000042580T741                    20300630  ";

  private static final String OUTPATIENT_LINE =
      "  107AB477300000   Catlin            ABC         1936/01/02M2009/05/2801238.00 1001881CA                     CA203945    2009/12/31diagcodproccod  ";

  @BeforeEach
  public void setUp() {
    claimCreator.claimTypesFacade =
        new ClaimTypesFacade() {
          @Override
          public ClaimTypes getInpatientType() {
            ClaimTypes type = new ClaimTypes();
            type.setClaimType("INPATIENT");
            return type;
          }

          @Override
          public ClaimTypes getOutpatientType() {
            ClaimTypes type = new ClaimTypes();
            type.setClaimType("OUTPATIENT");
            return type;
          }
        };
    claimCreator.residencyTypesFacade =
        new ResidencyTypesFacade() {
          @Override
          public ResidencyTypes findByType(String typeCode) {
            return new ResidencyTypes(null, "NRES", null, null);
          }
        };
    claimCreator.claimService = Mockito.mock(ClaimService.class);
    claimCreator.user = Mockito.mock(Instance.class);
    ApplicationUsers applicationUser = new ApplicationUsers();
    applicationUser.setApplicationUserid("junit");
    Mockito.when(claimCreator.user.get()).thenReturn(applicationUser);
  }

  @Test
  public void testConvertInpatientClaim_emptyWardRate() {
    String inpatientLine =
        "  8025480    Shbartest         Yanny       7419 97 Ave NW                                    Calgary                  ABt3b1w8417836920   1957/08/09F     procaccide2010/08/242010/09/0815         017430.00Nnotes go here                 aaa0624 bbb0625 ccc0626 1BAA000042580T741                    20300630  ";

    ClaimViewModel claimViewModel =
        claimCreator.convertInpatientClaim("somefilename", inpatientLine, 0);

    assertNotNull(claimViewModel.getAdmission());
    assertEquals(null, claimViewModel.getAdmission().getWardRate());
  }

  @Test
  public void testConvertInpatientClaim() {
    ClaimViewModel claimViewModel =
        claimCreator.convertInpatientClaim("somefilename", INPATIENT_LINE, 0);

    assertNotNull(claimViewModel);

    assertNotNull(claimViewModel.getClaimType());
    assertEquals("INPATIENT", claimViewModel.getClaimType().getClaimType());

    LocalDate expectedDate =
        LocalDate.parse("1957/08/09", DateTimeFormatter.ofPattern("yyyy/MM/dd"));
    assertNotNull(claimViewModel.getPatient());
    assertEquals(expectedDate, claimViewModel.getPatient().getBirthDate());

    expectedDate = LocalDate.parse("2010/08/24", DateTimeFormatter.ofPattern("yyyy/MM/dd"));
    assertNotNull(claimViewModel.getAdmission());
    assertEquals(expectedDate, claimViewModel.getAdmission().getAdmissionDate());

    expectedDate = LocalDate.parse("2010/09/08", DateTimeFormatter.ofPattern("yyyy/MM/dd"));
    assertNotNull(claimViewModel.getAdmission());
    assertEquals(expectedDate, claimViewModel.getAdmission().getDischargeDate());

    expectedDate = LocalDate.parse("2011/06/24", DateTimeFormatter.ofPattern("yyyy/MM/dd"));
    assertNotNull(claimViewModel.getHighCostProcedures());
    assertEquals(expectedDate, claimViewModel.getHighCostProcedures()[0].getProcedureDate());

    expectedDate = LocalDate.parse("2011/06/25", DateTimeFormatter.ofPattern("yyyy/MM/dd"));
    assertNotNull(claimViewModel.getHighCostProcedures());
    assertEquals(expectedDate, claimViewModel.getHighCostProcedures()[1].getProcedureDate());

    expectedDate = LocalDate.parse("2011/06/26", DateTimeFormatter.ofPattern("yyyy/MM/dd"));
    assertNotNull(claimViewModel.getHighCostProcedures());
    assertEquals(expectedDate, claimViewModel.getHighCostProcedures()[2].getProcedureDate());

    expectedDate = LocalDate.parse("2030/06/30", DateTimeFormatter.ofPattern("yyyy/MM/dd"));
    assertNotNull(claimViewModel.getPatient());
    assertEquals(expectedDate, claimViewModel.getPatient().getCardExpiryDate());

    assertEquals(null, claimViewModel.getBillingPeriod());

    assertEquals("802", claimViewModel.getHospitalNumber());

    assertNotNull(claimViewModel.getAdmission());
    assertEquals("5480", claimViewModel.getAdmission().getAdmissionNumber());

    assertNotNull(claimViewModel.getPatient());
    assertEquals("Shbartest", claimViewModel.getPatient().getLastName());
    assertEquals("Yanny", claimViewModel.getPatient().getFirstName());
    // skip a bunch of String properties

    assertNotNull(claimViewModel.getAdmission());
    assertEquals(Integer.valueOf(15), claimViewModel.getAdmission().getTotalDaysStay());
    assertEquals(Integer.valueOf(1162), claimViewModel.getAdmission().getWardRate());

    assertEquals(0, BigDecimal.valueOf(17430).compareTo(claimViewModel.getTotalAmountClaimed()));

    assertNotNull(claimViewModel.getPatient());
    assertEquals("N", claimViewModel.getPatient().getDeceasedFlag());

    assertEquals("notes go here", claimViewModel.getHospitalNotes());

    assertEquals("aaa", claimViewModel.getHighCostProcedures()[0].getCodeValue());
    assertEquals("bbb", claimViewModel.getHighCostProcedures()[1].getCodeValue());
    assertEquals("ccc", claimViewModel.getHighCostProcedures()[2].getCodeValue());

    assertEquals("1", claimViewModel.getReasonInBC());

    assertEquals(null, claimViewModel.getProvincialClaimId());

    assertEquals("BAA000042580", claimViewModel.getHospitalClaimNumber());

    assertEquals("T741", claimViewModel.getDiagnosisCodes()[0]);

    assertEquals("proc", claimViewModel.getProcedureCodes()[0]);

    assertEquals("accide", claimViewModel.getAccidentCode());

    assertEquals("somefilename", claimViewModel.getImportFileName());

    assertEquals(0, claimViewModel.getImportRowNum());

    assertEquals("IMPORT", claimViewModel.getClaimSource());

    assertEquals("BC", claimViewModel.getTreatingProvince());

    assertEquals("junit", claimViewModel.getUserId());

    assertEquals("ICD10", claimViewModel.getIcdCodingScheme());

    assertEquals("NRES", claimViewModel.getResidencyType().getTypeCode());

    assertEquals("PENDING", claimViewModel.getStatusCode());
  }

  @Test
  public void testCreator_inpatient_multipleLines() throws Exception {
    List<String> fileLines =
        Files.readAllLines(
            Paths.get("src", "test", "resources", "claim_import", "IN1105011.HA1.txt"));
    claimCreator.createClaims("IN1105011.HA1.txt", fileLines);
    Mockito.verify(claimCreator.claimService, Mockito.times(fileLines.size()))
        .createClaim(Mockito.any());
  }

  @Test
  public void testCreator_outpatient_multipleLines() throws Exception {
    List<String> fileLines =
        Files.readAllLines(Paths.get("src", "test", "resources", "claim_import", "H091025.HA6"));
    claimCreator.createClaims("H091025.HA6", fileLines);
    Mockito.verify(claimCreator.claimService, Mockito.times(fileLines.size()))
        .createClaim(Mockito.any());
  }

  @Test
  public void testCreator_outpatient_badfilename_throwException() throws Exception {
    List<String> fileLines =
        Files.readAllLines(Paths.get("src", "test", "resources", "claim_import", "H091025.HA6"));
    IllegalArgumentException exception =
        assertThrows(
            IllegalArgumentException.class,
            () -> {
              claimCreator.createClaims("bad", fileLines);
            });
    assertTrue(exception.getMessage().contains("Filename must start with"));
    Mockito.verify(claimCreator.claimService, Mockito.times(0)).createClaim(Mockito.any());
  }

  @Test
  public void convertOutpatientClaim() {
    ClaimViewModel claimViewModel =
        claimCreator.convertOutpatientClaim("somefilename", OUTPATIENT_LINE, 0);

    assertNotNull(claimViewModel);

    LocalDate expectedDate =
        LocalDate.parse("1936/01/02", DateTimeFormatter.ofPattern("yyyy/MM/dd"));
    assertNotNull(claimViewModel.getPatient());
    assertEquals(expectedDate, claimViewModel.getPatient().getBirthDate());

    expectedDate = LocalDate.parse("2009/05/28", DateTimeFormatter.ofPattern("yyyy/MM/dd"));
    assertEquals(expectedDate, claimViewModel.getServiceDate());

    expectedDate = LocalDate.parse("2009/12/31", DateTimeFormatter.ofPattern("yyyy/MM/dd"));
    assertNotNull(claimViewModel.getPatient());
    assertEquals(expectedDate, claimViewModel.getPatient().getCardExpiryDate());

    assertEquals(null, claimViewModel.getBillingPeriod());

    assertEquals("107", claimViewModel.getHospitalNumber());

    assertNotNull(claimViewModel.getPatient());
    assertEquals("AB", claimViewModel.getPatient().getProvince());

    assertNotNull(claimViewModel.getPatient());
    assertEquals("477300000", claimViewModel.getPatient().getInsuranceCardNumber());

    assertNotNull(claimViewModel.getPatient());
    assertEquals("Catlin", claimViewModel.getPatient().getLastName());
    assertEquals("ABC", claimViewModel.getPatient().getFirstName());
    assertEquals("M", claimViewModel.getPatient().getSexCode());

    assertEquals("01", claimViewModel.getServiceCodeValue());

    assertEquals(
        0,
        BigDecimal.valueOf(238).compareTo(claimViewModel.getTotalAmountClaimed()),
        String.format("Expected 238.00 was '%s'", claimViewModel.getTotalAmountClaimed()));

    assertEquals("1001881CA", claimViewModel.getHospitalNotes());

    assertEquals("CA203945", claimViewModel.getHospitalClaimNumber());

    assertEquals("diagcod", claimViewModel.getDiagnosisCodes()[0]);

    assertEquals("proccod", claimViewModel.getProcedureCodes()[0]);
  }
}
