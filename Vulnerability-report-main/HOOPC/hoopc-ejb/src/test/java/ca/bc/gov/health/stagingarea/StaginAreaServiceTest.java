package ca.bc.gov.health.stagingarea;

import ca.bc.gov.health.database.entity.SaSubmissionDetails;
import ca.bc.gov.health.database.entity.SaSubmissions;
import ca.bc.gov.health.service.HoopcAppService;
import ca.bc.gov.health.service.HoopcSessionBean;
import ca.bc.gov.health.staging.StagingAreaService;
import ca.bc.gov.health.staging.StagingAreaServiceDao;
import ca.bc.gov.health.staging.SubmissionViewModel;
import ca.bc.gov.health.validation.ValidationError;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;
import org.mockito.MockitoAnnotations;

/** The Class StaginAreaServiceTest. */
public class StaginAreaServiceTest {

  @InjectMocks private StagingAreaService stagingAreaService;

  @Mock private HoopcAppService appService;

  @Mock private StagingAreaServiceDao serviceDao;

  @Mock HoopcSessionBean session;

  /** Inits the mocks. */
  @BeforeEach
  public void initMocks() {
    MockitoAnnotations.initMocks(this);
  }

  /**
   * Load submissions test.<br>
   * <br>
   * This unit test verify that the loadSubmissions method ordering is working correctly. <br>
   * Mock with id 1 should appear first after reordering because it's the smallest date. <br>
   * Mock with id 2 should be second because submitted date is higher than id 1 and equals to id 3
   * but rejectFlag is N. <br>
   * Mock with id 3 will normally appear third because submitted date is equals to id 2 but reject
   * Flag is Y.
   */
  @Test
  public void loadSubmissionsTest() {
    // GIVEN
    List<SaSubmissions> mock = new ArrayList<>();

    mock.add(0, new SaSubmissions());
    mock.get(0).setId(new BigDecimal("2"));
    mock.get(0).setDateSubmitted("20190601");
    mock.get(0).setTreatingProvince("ON");
    mock.get(0).setTotalNumberDetails("32");
    mock.get(0).setStatus("IN PROGRESS");
    mock.get(0).setApproveFlag("N");
    mock.get(0).setResetFlag("N");
    mock.get(0).setRejectFlag("N");
    mock.get(0).setSaSubmissionDetailsList(new ArrayList<SaSubmissionDetails>());
    mock.get(0).getSaSubmissionDetailsList().add(0, new SaSubmissionDetails());
    mock.get(0).getSaSubmissionDetailsList().get(0).setDisabledFlag("N");
    mock.get(0).getSaSubmissionDetailsList().get(0).setAdjFlag("Y");
    mock.get(0).getSaSubmissionDetailsList().get(0).setReviewFlag("Y");
    mock.get(0).getSaSubmissionDetailsList().get(0).setValidFlag("Y");
    mock.get(0).getSaSubmissionDetailsList().add(1, new SaSubmissionDetails());
    mock.get(0).getSaSubmissionDetailsList().get(1).setDisabledFlag("N");
    mock.get(0).getSaSubmissionDetailsList().get(1).setAdjFlag("Y");
    mock.get(0).getSaSubmissionDetailsList().get(1).setReviewFlag("Y");
    mock.get(0).getSaSubmissionDetailsList().get(1).setValidFlag("Y");

    mock.add(1, new SaSubmissions());
    mock.get(1).setId(new BigDecimal("1"));
    mock.get(1).setDateSubmitted("20160601");
    mock.get(1).setTreatingProvince("ON");
    mock.get(1).setTotalNumberDetails("32");
    mock.get(0).setStatus("IN PROGRESS");
    mock.get(0).setApproveFlag("N");
    mock.get(0).setResetFlag("N");
    mock.get(0).setRejectFlag("N");
    mock.get(1).setSaSubmissionDetailsList(new ArrayList<SaSubmissionDetails>());
    mock.get(1).getSaSubmissionDetailsList().add(new SaSubmissionDetails());
    mock.get(1).getSaSubmissionDetailsList().get(0).setDisabledFlag("Y");
    mock.get(1).getSaSubmissionDetailsList().get(0).setAdjFlag("Y");
    mock.get(1).getSaSubmissionDetailsList().get(0).setReviewFlag("Y");
    mock.get(1).getSaSubmissionDetailsList().get(0).setValidFlag("Y");

    mock.add(2, new SaSubmissions());
    mock.get(2).setId(new BigDecimal("3"));
    mock.get(2).setDateSubmitted("20190601");
    mock.get(2).setRejectFlag("N");
    mock.get(2).setTreatingProvince("ON");
    mock.get(2).setTotalNumberDetails("32");
    mock.get(2).setSaSubmissionDetailsList(new ArrayList<SaSubmissionDetails>());
    mock.get(2).getSaSubmissionDetailsList().add(0, new SaSubmissionDetails());
    mock.get(2).getSaSubmissionDetailsList().get(0).setDisabledFlag("N");
    mock.get(2).getSaSubmissionDetailsList().get(0).setAdjFlag("Y");
    mock.get(2).getSaSubmissionDetailsList().get(0).setReviewFlag("Y");
    mock.get(2).getSaSubmissionDetailsList().get(0).setValidFlag("Y");

    when(serviceDao.getAllSubmissions()).thenReturn(mock);

    // WHEN
    List<SubmissionViewModel> submissions = stagingAreaService.loadSubmissions();

    // THEN
    assertNotNull(submissions);
    assertNotNull(submissions.get(0));
    assertNotNull(submissions.get(1));
    assertNotNull(submissions.get(2));
    assertEquals(0, new BigDecimal("1").compareTo(submissions.get(0).getSubmission().getId()));
    assertEquals(0, new BigDecimal("2").compareTo(submissions.get(1).getSubmission().getId()));
    assertEquals(0, new BigDecimal("3").compareTo(submissions.get(2).getSubmission().getId()));

    verify(serviceDao).getAllSubmissions();
    verifyNoMoreInteractions(serviceDao);
  }

  /** This unit test valid that the submission approval is done correctly. */
  @Test
  public void approveSubmissionNoErrorTest() {
    // GIVEN
    SaSubmissions submission = new SaSubmissions();
    submission.setId(new BigDecimal("1"));
    submission.setValidFlag("Y");
    submission.setTotalNumberDetails("1");
    submission.setStatus("IN PROGRESS");
    submission.setApproveFlag("N");
    submission.setResetFlag("N");
    submission.setRejectFlag("N");
    submission.setSaSubmissionDetailsList(new ArrayList<SaSubmissionDetails>());
    submission.getSaSubmissionDetailsList().add(0, new SaSubmissionDetails());
    submission.getSaSubmissionDetailsList().get(0).setDisabledFlag("N");
    submission.getSaSubmissionDetailsList().get(0).setAdjFlag("Y");
    submission.getSaSubmissionDetailsList().get(0).setReviewFlag("Y");
    submission.getSaSubmissionDetailsList().get(0).setValidFlag("Y");
    SubmissionViewModel selectedSubmission = new SubmissionViewModel(submission);
    Mockito.doNothing().when(serviceDao).updateSubmission(Mockito.any());

    // WHEN
    List<ValidationError> errors = stagingAreaService.approveSubmission(selectedSubmission);

    // THEN
    assertEquals(new ArrayList<ValidationError>(), errors);
    assertEquals("Y", selectedSubmission.getSubmission().getApproveFlag());
    assertEquals("N", selectedSubmission.getSubmission().getRejectFlag());
    assertEquals("N", selectedSubmission.getSubmission().getResetFlag());
    assertNotNull(selectedSubmission);
    assertNotNull(selectedSubmission.getSubmission());
    assertNotNull(selectedSubmission.getSubmission().getSaSubmissionDetailsList());
  }

  /** This unit test validates the error handling of the approval method. */
  @Test
  public void approveSubmissionWithErrorTest() {
    // GIVEN
    SaSubmissions submission = new SaSubmissions();
    submission.setId(new BigDecimal("1"));
    submission.setValidFlag("N");
    submission.setTotalNumberDetails("1");
    submission.setStatus("IN PROGRESS");
    submission.setApproveFlag("N");
    submission.setResetFlag("N");
    submission.setRejectFlag("N");
    submission.setSaSubmissionDetailsList(new ArrayList<SaSubmissionDetails>());
    submission.getSaSubmissionDetailsList().add(0, new SaSubmissionDetails());
    submission.getSaSubmissionDetailsList().get(0).setDisabledFlag("N");
    submission.getSaSubmissionDetailsList().get(0).setAdjFlag("Y");
    submission.getSaSubmissionDetailsList().get(0).setReviewFlag("Y");
    submission.getSaSubmissionDetailsList().get(0).setValidFlag("Y");
    SubmissionViewModel selectedSubmission = new SubmissionViewModel(submission);
    Mockito.doNothing().when(serviceDao).updateSubmission(Mockito.any());

    // WHEN
    List<ValidationError> errors = stagingAreaService.approveSubmission(selectedSubmission);

    // THEN
    assertNotNull(errors);
    assertTrue(errors.size() > 0);
    assertEquals("N", selectedSubmission.getSubmission().getApproveFlag());
    assertEquals("N", selectedSubmission.getSubmission().getRejectFlag());
    assertEquals("N", selectedSubmission.getSubmission().getResetFlag());
    assertEquals("IN PROGRESS", selectedSubmission.getSubmission().getStatus());
    assertEquals("Only valid submissions can be approved.", errors.get(0).getMessage());
  }

  /** This unit test valid that the submission rejection is done correctly. */
  @Test
  public void rejectSubmissionNoErrorTest() {
    // GIVEN
    SaSubmissions submission = new SaSubmissions();
    submission.setId(new BigDecimal("1"));
    submission.setValidFlag("Y");
    submission.setTotalNumberDetails("1");
    submission.setStatus("IN PROGRESS");
    submission.setApproveFlag("N");
    submission.setResetFlag("N");
    submission.setRejectFlag("N");
    submission.setSaSubmissionDetailsList(new ArrayList<SaSubmissionDetails>());
    submission.getSaSubmissionDetailsList().add(0, new SaSubmissionDetails());
    submission.getSaSubmissionDetailsList().get(0).setDisabledFlag("N");
    submission.getSaSubmissionDetailsList().get(0).setAdjFlag("Y");
    submission.getSaSubmissionDetailsList().get(0).setReviewFlag("Y");
    submission.getSaSubmissionDetailsList().get(0).setValidFlag("Y");
    SubmissionViewModel selectedSubmission = new SubmissionViewModel(submission);
    Mockito.doNothing().when(serviceDao).updateSubmission(Mockito.any());

    // WHEN
    List<ValidationError> errors = stagingAreaService.rejectSubmission(selectedSubmission);

    // THEN
    assertEquals(new ArrayList<ValidationError>(), errors);
    assertEquals("N", selectedSubmission.getSubmission().getApproveFlag());
    assertEquals("Y", selectedSubmission.getSubmission().getRejectFlag());
    assertEquals("N", selectedSubmission.getSubmission().getResetFlag());
    assertEquals("IN PROGRESS", selectedSubmission.getSubmission().getStatus());
    assertNotNull(selectedSubmission);
    assertNotNull(selectedSubmission.getSubmission());
    assertNotNull(selectedSubmission.getSubmission().getSaSubmissionDetailsList());
    for (SaSubmissionDetails d : selectedSubmission.getSubmission().getSaSubmissionDetailsList()) {
      assertEquals("N", d.getStatus());
    }
  }
}
