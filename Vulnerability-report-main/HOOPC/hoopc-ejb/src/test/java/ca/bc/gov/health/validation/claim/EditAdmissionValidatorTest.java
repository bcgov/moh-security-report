package ca.bc.gov.health.validation.claim;

import ca.bc.gov.health.service.HoopcAppService;
import ca.bc.gov.health.service.viewmodel.AdmissionsViewModel;
import ca.bc.gov.health.service.viewmodel.ClaimViewModel;
import ca.bc.gov.health.service.viewmodel.PatientsViewModel;
import ca.bc.gov.health.validation.ValidationError;
import ca.bc.gov.health.validation.rule.ValidationRuleType;
import java.time.LocalDate;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** Test Validation rules for EDITADMISSIONINFO in InsertRIClaimValidator.editAdmissionRules() */
public class EditAdmissionValidatorTest {

  // TODO: Setup debug logger
  private static Logger log = LoggerFactory.getLogger(EditDiagnosticValidatorTest.class);

  @InjectMocks private InsertRIClaimValidator validator;

  @InjectMocks private ClaimValidatorComplexRules complexRules;

  @Mock private HoopcAppService appService;

  @Mock private ClaimValidatorHelper helper;

  @BeforeEach
  public void initMocks() {
    MockitoAnnotations.initMocks(this);
    validator.setComplexRules(complexRules);
  }

  private ClaimViewModel emptyClaim() {
    ClaimViewModel claim = new ClaimViewModel();
    claim.setPatient(new PatientsViewModel());
    claim.setAdmission(new AdmissionsViewModel());
    claim.setDiagnosisCodes(new String[] {"", "", ""});
    return claim;
  }

  // ===========================================================================================
  // Admission rules
  // ===========================================================================================
  @Test
  public void admissionDate_Mandatory() {
    ClaimViewModel claim = emptyClaim();
    claim.setPatient(new PatientsViewModel());

    // Negative test
    claim.getAdmission().setAdmissionDate(null);
    List<ValidationError> errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect one mandatory error
    ValidationError error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Admission Date"))
            .filter(e -> e.getRule().getType().equals(ValidationRuleType.MANDATORY_VALUE))
            .findFirst()
            .orElse(null);
    assertNotNull(error);
    log.info(error.getMessage());

    // Positive test
    claim.getAdmission().setAdmissionDate(LocalDate.now());
    errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect no error
    error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Admission Date"))
            .findFirst()
            .orElse(null);
    assertNull(error);

    Mockito.verifyNoMoreInteractions(appService);
  }

  @Test
  public void admissionDate_InRange() {
    ClaimViewModel claim = emptyClaim();
    claim.setPatient(new PatientsViewModel());

    // Negative test
    claim.getAdmission().setAdmissionDate(LocalDate.now());
    claim.getAdmission().setDischargeDate(LocalDate.now().minusDays(1));
    List<ValidationError> errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect one mandatory error
    ValidationError error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Admission Date"))
            .filter(e -> e.getRule().getType().equals(ValidationRuleType.IN_RANGE))
            .findFirst()
            .orElse(null);
    assertNotNull(error);
    log.info(error.getMessage());

    // Positive test
    claim.getAdmission().setAdmissionDate(LocalDate.now());
    claim.getAdmission().setDischargeDate(LocalDate.now().plusDays(1));
    errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect no error
    error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Admission Date"))
            .findFirst()
            .orElse(null);
    assertNull(error);

    Mockito.verifyNoMoreInteractions(appService);
  }

  @Test
  public void dischargeDate_Mandatory() {
    ClaimViewModel claim = emptyClaim();
    claim.setPatient(new PatientsViewModel());

    // Negative test
    claim.getAdmission().setDischargeDate(null);
    List<ValidationError> errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect one mandatory error
    ValidationError error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Discharge Date"))
            .filter(e -> e.getRule().getType().equals(ValidationRuleType.MANDATORY_VALUE))
            .findFirst()
            .orElse(null);
    assertNotNull(error);
    log.info(error.getMessage());

    // Positive test
    claim.getAdmission().setDischargeDate(LocalDate.now());
    errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect no error
    error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Discharge Date"))
            .findFirst()
            .orElse(null);
    assertNull(error);

    Mockito.verifyNoMoreInteractions(appService);
  }

  @Test
  public void totalDaysStay_Mandatory() {
    ClaimViewModel claim = emptyClaim();
    claim.setPatient(new PatientsViewModel());

    // Negative test
    claim.getAdmission().setTotalDaysStay(null);
    List<ValidationError> errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect one mandatory error
    ValidationError error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Total Days Stay"))
            .filter(e -> e.getRule().getType().equals(ValidationRuleType.MANDATORY_VALUE))
            .findFirst()
            .orElse(null);
    assertNotNull(error);
    log.info(error.getMessage());

    // Positive test
    claim.getAdmission().setTotalDaysStay(1);
    errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect no error
    error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Total Days Stay"))
            .findFirst()
            .orElse(null);
    assertNull(error);

    Mockito.verifyNoMoreInteractions(appService);
  }

  @Test
  public void totalDaysStay_checkTotalDaysStay() {
    ClaimViewModel claim = emptyClaim();
    claim.setPatient(new PatientsViewModel());

    // Negative test
    claim.getAdmission().setAdmissionDate(LocalDate.now());
    claim.getAdmission().setDischargeDate(LocalDate.now().plusDays(2));
    claim.getAdmission().setTotalDaysStay(1);
    List<ValidationError> errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect one error
    ValidationError error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Total Days Stay"))
            .filter(e -> e.getRule().getType().equals(ValidationRuleType.COMPLEX))
            .findFirst()
            .orElse(null);
    assertNotNull(error);
    log.info(error.getMessage());

    // Positive test
    claim.getAdmission().setAdmissionDate(LocalDate.now());
    claim.getAdmission().setDischargeDate(LocalDate.now().plusDays(1));
    claim.getAdmission().setTotalDaysStay(1);
    errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect no error
    error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Total Days Stay"))
            .findFirst()
            .orElse(null);
    assertNull(error);

    Mockito.verifyNoMoreInteractions(appService);
  }

  @Test
  public void longTermStayInd_checkLongTermIndicator() {
    ClaimViewModel claim = emptyClaim();
    claim.setPatient(new PatientsViewModel());

    // Negative test
    claim.getAdmission().setAdmissionDate(LocalDate.now());
    claim.getAdmission().setDischargeDate(LocalDate.now().plusDays(30));
    claim.getAdmission().setLongTermStayInd(null);
    List<ValidationError> errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect one error
    ValidationError error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Long Term Stay Indicator"))
            .filter(e -> e.getRule().getType().equals(ValidationRuleType.COMPLEX))
            .findFirst()
            .orElse(null);
    assertNotNull(error);
    log.info(error.getMessage());

    // Negative test 2
    claim.getAdmission().setAdmissionDate(LocalDate.now());
    claim.getAdmission().setDischargeDate(LocalDate.now().plusDays(29));
    claim.getAdmission().setLongTermStayInd("Y");
    errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect one error
    error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Long Term Stay Indicator"))
            .filter(e -> e.getRule().getType().equals(ValidationRuleType.COMPLEX))
            .findFirst()
            .orElse(null);
    assertNotNull(error);
    log.info(error.getMessage());

    // Positive test
    claim.getAdmission().setAdmissionDate(LocalDate.now());
    claim.getAdmission().setDischargeDate(LocalDate.now().plusDays(30));
    claim.getAdmission().setLongTermStayInd("Y");
    errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect no error
    error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Long Term Stay Indicator"))
            .findFirst()
            .orElse(null);
    assertNull(error);

    Mockito.verifyNoMoreInteractions(appService);
  }

  @Test
  public void perDiemRate_Mandatory() {
    ClaimViewModel claim = emptyClaim();
    claim.setPatient(new PatientsViewModel());

    // Negative test
    claim.getAdmission().setWardRate(null);
    List<ValidationError> errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect one mandatory error
    ValidationError error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Per Diem Rate"))
            .filter(e -> e.getRule().getType().equals(ValidationRuleType.MANDATORY_VALUE))
            .findFirst()
            .orElse(null);
    assertNotNull(error);
    log.info(error.getMessage());

    // Positive test
    claim.getAdmission().setWardRate(1);
    errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect no error
    error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Per Diem Rate"))
            .findFirst()
            .orElse(null);
    assertNull(error);

    Mockito.verifyNoMoreInteractions(appService);
  }
}
