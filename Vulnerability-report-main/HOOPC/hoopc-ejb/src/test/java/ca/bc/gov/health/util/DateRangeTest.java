package ca.bc.gov.health.util;

import java.time.LocalDate;
import java.util.logging.Logger;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;

public class DateRangeTest {
  @Test
  public void constructor() {
    LocalDate testDate1 = LocalDate.now();
    LocalDate testDate2 = LocalDate.now().plusDays(2);

    // Invalid range
    assertThrows(Throwable.class, () -> new DateRange(testDate2, testDate1));

    DateRange typicalRange = new DateRange(testDate1, testDate2);
    assertEquals(testDate1, typicalRange.getStartDate());
    assertEquals(testDate2, typicalRange.getEndDate());

    DateRange sameDayRange = new DateRange(testDate1, testDate1);
    assertEquals(testDate1, sameDayRange.getStartDate());
    assertEquals(testDate1, sameDayRange.getEndDate());

    DateRange nullStartRange = new DateRange(null, testDate2);
    assertEquals(LocalDate.MIN, nullStartRange.getStartDate());
    assertEquals(testDate2, nullStartRange.getEndDate());

    DateRange nullEndRange = new DateRange(testDate1, null);
    assertEquals(testDate1, nullEndRange.getStartDate());
    assertEquals(LocalDate.MAX, nullEndRange.getEndDate());
  }

  @Test
  public void constains() {
    DateRange range1 = new DateRange(LocalDate.of(2019, 1, 1), LocalDate.of(2019, 1, 10));
    DateRange range2 = new DateRange(LocalDate.of(2019, 1, 2), LocalDate.of(2019, 1, 9));
    DateRange range3 = new DateRange(LocalDate.of(2019, 1, 2), LocalDate.of(2019, 1, 11));

    assertTrue(range1.contains(range2));
    assertFalse(range2.contains(range1));
    assertFalse(range1.contains(range3));
  }

  @Test
  public void intersect() {
    DateRange range1 = new DateRange(LocalDate.of(2019, 1, 1), LocalDate.of(2019, 1, 10));
    DateRange range2 = new DateRange(LocalDate.of(2019, 1, 2), LocalDate.of(2019, 1, 9));
    DateRange range3 = new DateRange(LocalDate.of(2019, 1, 2), LocalDate.of(2019, 1, 11));

    DateRange range12 = range1.intersection(range2);
    assertEquals(range2.getStartDate(), range12.getStartDate());
    assertEquals(range2.getEndDate(), range12.getEndDate());

    DateRange range21 = range2.intersection(range1);
    assertEquals(range2.getStartDate(), range21.getStartDate());
    assertEquals(range2.getEndDate(), range21.getEndDate());

    DateRange range13 = range1.intersection(range3);
    assertEquals(range3.getStartDate(), range13.getStartDate());
    assertEquals(range1.getEndDate(), range13.getEndDate());
  }

  @Test
  public void stream() {
    DateRange range1 = new DateRange(LocalDate.of(2019, 1, 1), LocalDate.of(2019, 1, 10));

    range1.stream().forEach(d -> Logger.getAnonymousLogger().info(d.toString()));

    assertEquals(10, range1.stream().count());
  }
}
