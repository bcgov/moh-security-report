package ca.bc.gov.health.validation.rule;

import ca.bc.gov.health.validation.ValidationError;
import java.time.LocalDate;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;

public class InDateRangeRuleTest {

  private static String FIELD_NAME = "FieldName";
  private static LocalDate testDate = LocalDate.of(2019, 1, 10);

  @Test
  public void InRange_OK_min_max() {
    TestObject obj =
        new TestObject() {
          {
            setDateValue(testDate);
          }
        };

    ValidationRule<TestObject> rule =
        new InDateRangeRule<TestObject, LocalDate>(
            FIELD_NAME, TestObject::getDateValue, testDate.minusDays(1), testDate.plusDays(1));

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InRange_OK_inclusive() {
    TestObject obj =
        new TestObject() {
          {
            setDateValue(testDate);
          }
        };

    ValidationRule<TestObject> rule =
        new InDateRangeRule<TestObject, LocalDate>(
            FIELD_NAME, TestObject::getDateValue, testDate, testDate);

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InRange_OK_max() {
    TestObject obj =
        new TestObject() {
          {
            setDateValue(testDate);
          }
        };

    ValidationRule<TestObject> rule =
        new InDateRangeRule<TestObject, LocalDate>(
            FIELD_NAME, TestObject::getDateValue, null, testDate.plusDays(1));

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InRange_OK_min() {
    TestObject obj =
        new TestObject() {
          {
            setDateValue(testDate);
          }
        };

    ValidationRule<TestObject> rule =
        new InDateRangeRule<TestObject, LocalDate>(
            FIELD_NAME, TestObject::getDateValue, testDate.minusDays(1), null);

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InRange_OK_min_max_func() {
    TestObject obj =
        new TestObject() {
          {
            setDateValue(testDate);
            setMinDateValue(testDate.minusDays(1));
            setMaxDateValue(testDate.plusDays(1));
          }
        };

    ValidationRule<TestObject> rule =
        new InDateRangeRule<TestObject, LocalDate>(
            FIELD_NAME,
            TestObject::getDateValue,
            TestObject::getMinDateValue,
            TestObject::getMaxDateValue);

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InRange_OK_max_func() {
    TestObject obj =
        new TestObject() {
          {
            setDateValue(testDate);
            setMinDateValue(null);
            setMaxDateValue(testDate.plusDays(1));
          }
        };

    ValidationRule<TestObject> rule =
        new InDateRangeRule<TestObject, LocalDate>(
            FIELD_NAME,
            TestObject::getDateValue,
            TestObject::getMinDateValue,
            TestObject::getMaxDateValue);

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InRange_OK_min_func() {
    TestObject obj =
        new TestObject() {
          {
            setDateValue(testDate);
            setMinDateValue(testDate);
            setMaxDateValue(null);
          }
        };

    ValidationRule<TestObject> rule =
        new InDateRangeRule<TestObject, LocalDate>(
            FIELD_NAME,
            TestObject::getDateValue,
            TestObject::getMinDateValue,
            TestObject::getMaxDateValue);

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InRange_Null() {
    TestObject obj = new TestObject();

    ValidationRule<TestObject> rule =
        new InDateRangeRule<TestObject, LocalDate>(
            FIELD_NAME, TestObject::getDateValue, testDate.minusDays(1), testDate.plusDays(1));

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InRange_error_min_max() {
    TestObject obj =
        new TestObject() {
          {
            setDateValue(testDate);
          }
        };

    ValidationRule<TestObject> rule =
        new InDateRangeRule<TestObject, LocalDate>(
            FIELD_NAME, TestObject::getDateValue, testDate.plusDays(1), testDate.plusDays(2));

    ValidationError error = rule.validate(obj);

    assertNotNull(error);
    assertEquals(FIELD_NAME, error.getRule().getRuleIdentifier());
    assertEquals(ValidationRuleType.IN_RANGE, error.getRule().getType());
    assertNotNull(error.getMessage());
    assertEquals(
        "FieldName 2019-01-10 must be between 2019-01-11 and 2019-01-12", error.getMessage());
  }

  @Test
  public void InRange_error_min() {
    TestObject obj =
        new TestObject() {
          {
            setDateValue(testDate);
          }
        };

    ValidationRule<TestObject> rule =
        new InDateRangeRule<TestObject, LocalDate>(
            FIELD_NAME, TestObject::getDateValue, testDate.plusDays(1), null);

    ValidationError error = rule.validate(obj);

    assertNotNull(error);
    assertEquals(FIELD_NAME, error.getRule().getRuleIdentifier());
    assertEquals(ValidationRuleType.IN_RANGE, error.getRule().getType());
    assertNotNull(error.getMessage());
    assertEquals("FieldName 2019-01-10 is less than 2019-01-11", error.getMessage());
  }

  @Test
  public void InRange_error_max() {
    TestObject obj =
        new TestObject() {
          {
            setDateValue(testDate.plusDays(3));
          }
        };

    ValidationRule<TestObject> rule =
        new InDateRangeRule<TestObject, LocalDate>(
            FIELD_NAME, TestObject::getDateValue, null, testDate.plusDays(1));

    ValidationError error = rule.validate(obj);

    assertNotNull(error);
    assertEquals(FIELD_NAME, error.getRule().getRuleIdentifier());
    assertEquals(ValidationRuleType.IN_RANGE, error.getRule().getType());
    assertNotNull(error.getMessage());
    assertEquals("FieldName 2019-01-13 is greater than 2019-01-11", error.getMessage());
  }
}
