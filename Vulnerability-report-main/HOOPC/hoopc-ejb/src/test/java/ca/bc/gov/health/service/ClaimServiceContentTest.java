package ca.bc.gov.health.service;

import ca.bc.gov.health.constants.ClaimContentContext;
import ca.bc.gov.health.constants.ClaimDetailCodePurpose;
import ca.bc.gov.health.constants.ClaimDetailCodeType;
import ca.bc.gov.health.database.entity.ClaimContents;
import ca.bc.gov.health.database.entity.ClaimDetailCodes;
import ca.bc.gov.health.database.entity.HospitalOopClaims;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.service.viewmodel.ClaimViewModel;
import ca.bc.gov.health.transformer.ClaimModelTransformerTestHelper;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.mockito.ArgumentMatchers.any;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.mockito.Mockito.atLeast;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.verifyNoMoreInteractions;
import static org.mockito.Mockito.when;
import org.mockito.MockitoAnnotations;

public class ClaimServiceContentTest {

  @InjectMocks private ClaimService claimService;

  @Mock private HoopcAppService appService;

  @Mock private ClaimServiceDao serviceDao;

  @BeforeEach
  public void initMocks() {
    MockitoAnnotations.initMocks(this);
  }

  private ClaimViewModel createTestClaim(Long testId) {
    ClaimViewModel claim = ClaimModelTransformerTestHelper.createViewModel();
    claim.setClaimId(testId);
    return claim;
  }

  private ClaimDetailCodes createServiceCode(String codeValue) {
    return new ClaimDetailCodes() {
      {
        {
          setCodeValue(codeValue);
          setCodePurpose(ClaimDetailCodePurpose.SERVICE.toString());
          setCodeType(ClaimDetailCodeType.SERVICE.toString());
        }
      }
    };
  }

  private ClaimDetailCodes createDiagnosticCode(String codeValue) {
    return new ClaimDetailCodes() {
      {
        {
          setCodeValue(codeValue);
          setCodePurpose(ClaimDetailCodePurpose.DIAGNOSTIC.toString());
          setCodeType(ClaimDetailCodeType.ICD10.toString());
        }
      }
    };
  }

  private List<ClaimContents> createContentList(String... codes) {
    ArrayList<ClaimContents> ret = new ArrayList<ClaimContents>();
    long seq = 1;
    for (String code : codes) {
      long newseq = ++seq;
      ret.add(
          new ClaimContents() {
            {
              setCdcId(createDiagnosticCode(code));
              setSequenceNum(newseq);
              setContext(ClaimContentContext.DIAGNOSTIC.toString());
              setCodeType(ClaimDetailCodeType.ICD10.toString());
            }
          });
    }
    return ret;
  }

  @Test
  public void saveServiceCode_noCode() throws HoopcException {
    // GIVEN
    Long testId = 123L;
    ClaimViewModel claimView = createTestClaim(testId);
    claimView.setServiceCodeValue("");
    HospitalOopClaims claim = new HospitalOopClaims();

    // WHEN
    claimService.saveServiceCode(claimView, claim);

    // THEN
    ClaimContents contentEntity =
        claim.getClaimContentsList().stream()
            .filter(c -> ClaimContentContext.SERVICE.toString().equals(c.getContext()))
            .findFirst()
            .orElse(null);
    assertNull(contentEntity);

    verifyNoMoreInteractions(serviceDao);
  }

  @Test
  public void saveServiceCode_newCode() throws HoopcException {
    // GIVEN
    Long testId = 123L;
    ClaimViewModel claimView = createTestClaim(testId);
    String code = "CODE";
    claimView.setServiceCodeValue(code);
    HospitalOopClaims claim = new HospitalOopClaims();
    ClaimDetailCodes cdc = createServiceCode(code);
    when(appService.getServiceCode(code)).thenReturn(cdc);

    // WHEN
    claimService.saveServiceCode(claimView, claim);

    // THEN
    verify(appService).getServiceCode(code);
    verify(serviceDao).add(any(ClaimContents.class));
    verifyNoMoreInteractions(serviceDao, appService);

    ClaimContents contentEntity =
        claim.getClaimContentsList().stream()
            .filter(c -> ClaimContentContext.SERVICE.toString().equals(c.getContext()))
            .findFirst()
            .orElse(null);
    assertNotNull(contentEntity);
    assertEquals(cdc, contentEntity.getCdcId());
  }

  @Test
  public void saveServiceCode_updateCode() throws HoopcException {
    // GIVEN
    Long testId = 123L;
    // Create view model with new code
    ClaimViewModel claimView = createTestClaim(testId);
    String newCode = "CODE1";
    claimView.setServiceCodeValue(newCode);
    ClaimDetailCodes newCdc = createServiceCode(newCode);

    // Create claim with existing service Code
    HospitalOopClaims claim = new HospitalOopClaims();
    String oldCode = "CODE";
    ClaimDetailCodes oldCdc = createServiceCode(oldCode);
    ClaimContents serviceContent =
        new ClaimContents(oldCdc, claim) {
          {
            setContext(ClaimContentContext.SERVICE.toString());
          }
        };
    claim.getClaimContentsList().add(serviceContent);

    when(appService.getServiceCode(newCode)).thenReturn(newCdc);

    // WHEN
    claimService.saveServiceCode(claimView, claim);

    // THEN
    verify(appService).getServiceCode(newCode);
    verifyNoMoreInteractions(serviceDao, appService);

    ClaimContents contentEntity =
        claim.getClaimContentsList().stream()
            .filter(c -> ClaimContentContext.SERVICE.toString().equals(c.getContext()))
            .findFirst()
            .orElse(null);
    assertNotNull(contentEntity);
    assertEquals(newCdc, contentEntity.getCdcId());
  }

  @Test
  public void saveServiceCode_deleteCode() throws HoopcException {
    // GIVEN
    Long testId = 123L;
    // Create view model with no code
    ClaimViewModel claimView = createTestClaim(testId);
    String newCode = "";
    claimView.setServiceCodeValue(newCode);
    // Create claim with existing service Code
    HospitalOopClaims claim = new HospitalOopClaims();
    String oldCode = "CODE";
    ClaimDetailCodes oldCdc = createServiceCode(oldCode);
    ClaimContents serviceContent =
        new ClaimContents(oldCdc, claim) {
          {
            setContext(ClaimContentContext.SERVICE.toString());
          }
        };
    claim.getClaimContentsList().add(serviceContent);

    when(appService.getServiceCode(newCode)).thenReturn(null);

    // WHEN
    claimService.saveServiceCode(claimView, claim);

    // THEN
    verify(appService).getServiceCode(newCode);
    verify(serviceDao).remove(serviceContent);
    verifyNoMoreInteractions(serviceDao, appService);

    ClaimContents contentEntity =
        claim.getClaimContentsList().stream()
            .filter(c -> ClaimContentContext.SERVICE.toString().equals(c.getContext()))
            .findFirst()
            .orElse(null);
    assertNull(contentEntity);
  }

  @Test
  public void saveAccidentCode_noCode() throws HoopcException {
    // GIVEN
    Long testId = 123L;
    ClaimViewModel claimView = createTestClaim(testId);
    claimView.setAccidentCode("");
    HospitalOopClaims claim = new HospitalOopClaims();

    // WHEN
    claimService.saveAccidentCode(claimView, claim);

    // THEN
    ClaimContents contentEntity =
        claim.getClaimContentsList().stream()
            .filter(c -> ClaimContentContext.SERVICE.toString().equals(c.getContext()))
            .findFirst()
            .orElse(null);
    assertNull(contentEntity);

    verifyNoMoreInteractions(serviceDao);
  }

  @Test
  public void saveAccidentCode_newCode() throws HoopcException {
    // GIVEN
    Long testId = 123L;
    ClaimViewModel claimView = createTestClaim(testId);
    String code = "CODE";
    claimView.setAccidentCode(code);
    HospitalOopClaims claim = new HospitalOopClaims();
    ClaimDetailCodes cdc = createDiagnosticCode(code);
    when(appService.getDiagnosticCode(code)).thenReturn(cdc);

    // WHEN
    claimService.saveAccidentCode(claimView, claim);

    // THEN
    verify(appService).getDiagnosticCode(code);
    verify(serviceDao).add(any(ClaimContents.class));
    verifyNoMoreInteractions(serviceDao, appService);

    ClaimContents contentEntity =
        claim.getClaimContentsList().stream()
            .filter(c -> ClaimContentContext.ACCIDENT.toString().equals(c.getContext()))
            .findFirst()
            .orElse(null);
    assertNotNull(contentEntity);
    assertEquals(cdc, contentEntity.getCdcId());
  }

  @Test
  public void saveAccidentCode_updateCode() throws HoopcException {
    // GIVEN
    Long testId = 123L;
    // Create view model with new code
    ClaimViewModel claimView = createTestClaim(testId);
    String newCode = "CODE1";
    claimView.setAccidentCode(newCode);
    ClaimDetailCodes newCdc = createDiagnosticCode(newCode);

    // Create claim with existing accident Code
    HospitalOopClaims claim = new HospitalOopClaims();
    String oldCode = "CODE";
    ClaimDetailCodes oldCdc = createDiagnosticCode(oldCode);

    ClaimContents accidentContent =
        new ClaimContents(oldCdc, claim) {
          {
            setContext(ClaimContentContext.ACCIDENT.toString());
          }
        };
    claim.getClaimContentsList().add(accidentContent);

    when(appService.getDiagnosticCode(newCode)).thenReturn(newCdc);

    // WHEN
    claimService.saveAccidentCode(claimView, claim);

    // THEN
    verify(appService).getDiagnosticCode(newCode);
    verifyNoMoreInteractions(serviceDao, appService);

    ClaimContents contentEntity =
        claim.getClaimContentsList().stream()
            .filter(c -> ClaimContentContext.ACCIDENT.toString().equals(c.getContext()))
            .findFirst()
            .orElse(null);
    assertNotNull(contentEntity);
    assertEquals(newCdc, contentEntity.getCdcId());
  }

  @Test
  public void saveAccidentCode_deleteCode() throws HoopcException {
    // GIVEN
    Long testId = 123L;
    // Create view model with no code
    ClaimViewModel claimView = createTestClaim(testId);
    String newCode = "";
    claimView.setAccidentCode(newCode);
    // Create claim with existing service Code
    HospitalOopClaims claim = new HospitalOopClaims();
    String oldCode = "CODE";
    ClaimDetailCodes oldCdc = createDiagnosticCode(oldCode);

    ClaimContents serviceContent =
        new ClaimContents(oldCdc, claim) {
          {
            setContext(ClaimContentContext.ACCIDENT.toString());
          }
        };
    claim.getClaimContentsList().add(serviceContent);

    when(appService.getDiagnosticCode(newCode)).thenReturn(null);

    // WHEN
    claimService.saveAccidentCode(claimView, claim);

    // THEN
    verify(appService).getDiagnosticCode(newCode);
    verify(serviceDao).remove(serviceContent);
    verifyNoMoreInteractions(serviceDao, appService);

    ClaimContents contentEntity =
        claim.getClaimContentsList().stream()
            .filter(c -> ClaimContentContext.ACCIDENT.toString().equals(c.getContext()))
            .findFirst()
            .orElse(null);
    assertNull(contentEntity);
  }

  @Test
  public void saveClaimContents_noContent() {
    // GIVEN
    // Create view model
    // Empty model
    String[] diagnostics = new String[] {new String()};

    // Create existing state
    // No existing diagnostics
    HospitalOopClaims claim = new HospitalOopClaims();

    // WHEN
    claimService.saveClaimContents(ClaimContentContext.DIAGNOSTIC, diagnostics, claim);

    // THEN
    assertNotNull(claim.getClaimContentsList());
    assertEquals(0, claim.getClaimContentsList().size());
  }

  @Test
  public void saveClaimContents_newContent() {
    // GIVEN
    String codeValue = "CODE";

    // Create view model
    // new content (only the code is provided
    String[] diagnostics = new String[] {codeValue};

    // Create existing state
    // No existing diagnostics
    HospitalOopClaims claim = new HospitalOopClaims();

    ClaimDetailCodes newCdc = createDiagnosticCode(codeValue);
    when(appService.getClaimDetailCode(codeValue, ClaimContentContext.DIAGNOSTIC))
        .thenReturn(newCdc);

    // WHEN
    claimService.saveClaimContents(ClaimContentContext.DIAGNOSTIC, diagnostics, claim);

    // THEN
    assertNotNull(claim.getClaimContentsList());
    assertEquals(1, claim.getClaimContentsList().size());
    ClaimContents diag1 = claim.getClaimContentsList().get(0);
    assertNotNull(diag1);
    assertEquals(newCdc, diag1.getCdcId());
    assertEquals(ClaimContentContext.DIAGNOSTIC.toString(), diag1.getContext());
    assertEquals(ClaimDetailCodeType.ICD10.toString(), diag1.getCodeType());
    assertNotNull(diag1.getSequenceNum());

    verify(appService).getClaimDetailCode(codeValue, ClaimContentContext.DIAGNOSTIC);
    verify(serviceDao).add(diag1);
    verifyNoMoreInteractions(appService, serviceDao);
  }

  @Test
  public void saveClaimContents_newContent2() {
    // GIVEN

    // Create view model
    String codeValue1 = "CODE";
    String codeValue2 = "CODE2";
    // new content (only the code is provided
    String[] diagnostics = new String[] {codeValue1, codeValue2};

    // Create existing state
    // No existing diagnostics
    HospitalOopClaims claim = new HospitalOopClaims();

    ClaimDetailCodes newCdc1 = createDiagnosticCode(codeValue1);
    ClaimDetailCodes newCdc2 = createDiagnosticCode(codeValue2);
    when(appService.getClaimDetailCode(codeValue1, ClaimContentContext.DIAGNOSTIC))
        .thenReturn(newCdc1);
    when(appService.getClaimDetailCode(codeValue2, ClaimContentContext.DIAGNOSTIC))
        .thenReturn(newCdc2);

    // WHEN
    claimService.saveClaimContents(ClaimContentContext.DIAGNOSTIC, diagnostics, claim);

    // THEN
    assertNotNull(claim.getClaimContentsList());
    assertEquals(2, claim.getClaimContentsList().size());
    ClaimContents diag1 = claim.getClaimContentsList().get(0);
    assertNotNull(diag1);
    assertEquals(newCdc1, diag1.getCdcId());
    assertEquals(ClaimContentContext.DIAGNOSTIC.toString(), diag1.getContext());
    assertEquals(ClaimDetailCodeType.ICD10.toString(), diag1.getCodeType());
    assertNotNull(diag1.getSequenceNum());
    ClaimContents diag2 = claim.getClaimContentsList().get(1);
    assertNotNull(diag2);
    assertEquals(newCdc2, diag2.getCdcId());
    assertEquals(ClaimContentContext.DIAGNOSTIC.toString(), diag2.getContext());
    assertEquals(ClaimDetailCodeType.ICD10.toString(), diag2.getCodeType());
    assertNotNull(diag2.getSequenceNum());
    assertTrue(diag1.getSequenceNum().compareTo(diag2.getSequenceNum()) < 0);

    verify(appService).getClaimDetailCode(codeValue1, ClaimContentContext.DIAGNOSTIC);
    verify(appService).getClaimDetailCode(codeValue2, ClaimContentContext.DIAGNOSTIC);
    verify(serviceDao, times(2)).add(any(ClaimContents.class));
    verifyNoMoreInteractions(appService, serviceDao);
  }

  @Test
  public void saveClaimContents_editContent2() {
    // GIVEN
    String oldCodeValue1 = "CODE";
    String newCodeValue1 = "NEW";
    String codeValue2 = "CODE2";

    // Create view model
    String[] diagnostics = new String[] {newCodeValue1, codeValue2};
    // Create existing state
    // existing diagnostics
    HospitalOopClaims claim = new HospitalOopClaims();
    ClaimDetailCodes newCdc1 = createDiagnosticCode(oldCodeValue1);
    ClaimDetailCodes newCdc2 = createDiagnosticCode(codeValue2);
    claim.setClaimContentsList(createContentList(oldCodeValue1, codeValue2));

    when(appService.getClaimDetailCode(newCodeValue1, ClaimContentContext.DIAGNOSTIC))
        .thenReturn(newCdc1);
    when(appService.getClaimDetailCode(codeValue2, ClaimContentContext.DIAGNOSTIC))
        .thenReturn(newCdc2);

    // WHEN
    claimService.saveClaimContents(ClaimContentContext.DIAGNOSTIC, diagnostics, claim);

    // THEN
    assertNotNull(claim.getClaimContentsList());
    assertEquals(2, claim.getClaimContentsList().size());
    ClaimContents diag1 = claim.getClaimContentsList().get(0);
    assertNotNull(diag1);
    assertEquals(newCdc1, diag1.getCdcId());
    assertEquals(ClaimContentContext.DIAGNOSTIC.toString(), diag1.getContext());
    assertEquals(ClaimDetailCodeType.ICD10.toString(), diag1.getCodeType());
    assertNotNull(diag1.getSequenceNum());
    ClaimContents diag2 = claim.getClaimContentsList().get(1);
    assertNotNull(diag2);
    assertEquals(newCdc2, diag2.getCdcId());
    assertEquals(ClaimContentContext.DIAGNOSTIC.toString(), diag2.getContext());
    assertEquals(ClaimDetailCodeType.ICD10.toString(), diag2.getCodeType());
    assertNotNull(diag2.getSequenceNum());
    assertTrue(diag1.getSequenceNum().compareTo(diag2.getSequenceNum()) < 0);

    verify(appService).getClaimDetailCode(newCodeValue1, ClaimContentContext.DIAGNOSTIC);
    verifyNoMoreInteractions(appService, serviceDao);
  }

  @Test
  public void saveClaimContents_editAndAddContent() {
    // GIVEN
    String oldCodeValue1 = "CODE";
    String newCodeValue1 = "CODE1";
    String codeValue2 = "CODE2";
    String newCodeValue3 = "CODE3";

    // Create view model
    String[] diagnostics = new String[] {newCodeValue1, codeValue2, newCodeValue3};
    // Create existing state
    // existing diagnostics
    HospitalOopClaims claim = new HospitalOopClaims();
    ClaimDetailCodes newCdc1 = createDiagnosticCode(oldCodeValue1);
    ClaimDetailCodes newCdc2 = createDiagnosticCode(codeValue2);
    ClaimDetailCodes newCdc3 = createDiagnosticCode(newCodeValue3);
    claim.setClaimContentsList(createContentList(oldCodeValue1, codeValue2));

    when(appService.getClaimDetailCode(newCodeValue1, ClaimContentContext.DIAGNOSTIC))
        .thenReturn(newCdc1);
    when(appService.getClaimDetailCode(codeValue2, ClaimContentContext.DIAGNOSTIC))
        .thenReturn(newCdc2);
    when(appService.getClaimDetailCode(newCodeValue3, ClaimContentContext.DIAGNOSTIC))
        .thenReturn(newCdc3);

    // WHEN
    claimService.saveClaimContents(ClaimContentContext.DIAGNOSTIC, diagnostics, claim);

    // THEN
    assertNotNull(claim.getClaimContentsList());
    assertEquals(3, claim.getClaimContentsList().size());
    ClaimContents diag1 = claim.getClaimContentsList().get(0);
    assertNotNull(diag1);
    assertEquals(newCdc1, diag1.getCdcId());
    assertEquals(ClaimContentContext.DIAGNOSTIC.toString(), diag1.getContext());
    assertEquals(ClaimDetailCodeType.ICD10.toString(), diag1.getCodeType());
    assertNotNull(diag1.getSequenceNum());
    ClaimContents diag2 = claim.getClaimContentsList().get(1);
    assertNotNull(diag2);
    assertEquals(newCdc2, diag2.getCdcId());
    assertEquals(ClaimContentContext.DIAGNOSTIC.toString(), diag2.getContext());
    assertEquals(ClaimDetailCodeType.ICD10.toString(), diag2.getCodeType());
    assertNotNull(diag2.getSequenceNum());
    assertTrue(diag1.getSequenceNum().compareTo(diag2.getSequenceNum()) < 0);
    ClaimContents diag3 = claim.getClaimContentsList().get(2);
    assertNotNull(diag3);
    assertEquals(newCdc3, diag3.getCdcId());
    assertEquals(ClaimContentContext.DIAGNOSTIC.toString(), diag3.getContext());
    assertEquals(ClaimDetailCodeType.ICD10.toString(), diag3.getCodeType());
    assertNotNull(diag3.getSequenceNum());
    assertTrue(diag2.getSequenceNum().compareTo(diag3.getSequenceNum()) < 0);

    verify(appService).getClaimDetailCode(newCodeValue1, ClaimContentContext.DIAGNOSTIC);
    verify(appService).getClaimDetailCode(newCodeValue3, ClaimContentContext.DIAGNOSTIC);
    verify(serviceDao).add(any(ClaimContents.class));
    verifyNoMoreInteractions(appService, serviceDao);
  }

  @Test
  public void saveClaimContents_delete() {
    // GIVEN
    String codeValue1 = "CODE1";
    String codeValue2 = "CODE2";
    String codeValue3 = "CODE3";

    // Create view model
    // delete the middle one
    String[] diagnostics = new String[] {codeValue1, "", codeValue3};
    // Create existing state
    // existing diagnostics
    HospitalOopClaims claim = new HospitalOopClaims();
    ClaimDetailCodes newCdc1 = createDiagnosticCode(codeValue1);
    ClaimDetailCodes newCdc3 = createDiagnosticCode(codeValue3);
    claim.setClaimContentsList(createContentList(codeValue1, codeValue2, codeValue3));

    // WHEN
    claimService.saveClaimContents(ClaimContentContext.DIAGNOSTIC, diagnostics, claim);

    // THEN
    assertNotNull(claim.getClaimContentsList());
    assertEquals(2, claim.getClaimContentsList().size());
    ClaimContents diag1 = claim.getClaimContentsList().get(0);
    assertNotNull(diag1);
    assertEquals(newCdc1, diag1.getCdcId());
    assertEquals(ClaimContentContext.DIAGNOSTIC.toString(), diag1.getContext());
    assertEquals(ClaimDetailCodeType.ICD10.toString(), diag1.getCodeType());
    assertNotNull(diag1.getSequenceNum());
    ClaimContents diag2 = claim.getClaimContentsList().get(1);
    assertNotNull(diag2);
    assertEquals(newCdc3, diag2.getCdcId());
    assertEquals(ClaimContentContext.DIAGNOSTIC.toString(), diag2.getContext());
    assertEquals(ClaimDetailCodeType.ICD10.toString(), diag2.getCodeType());
    assertNotNull(diag2.getSequenceNum());
    assertTrue(diag1.getSequenceNum().compareTo(diag2.getSequenceNum()) < 0);
    assertTrue(diag1.getSequenceNum().compareTo(diag2.getSequenceNum()) < 0);

    verify(serviceDao).remove(any(ClaimContents.class));
    verifyNoMoreInteractions(appService, serviceDao);
  }

  @Test
  public void saveClaimContents_SwitchOrder() {
    // GIVEN
    String codeValue1 = "CODE1";
    String codeValue2 = "CODE2";
    String codeValue3 = "CODE3";

    // Create view model
    // delete the middle one
    String[] diagnostics = new String[] {codeValue3, codeValue2, codeValue1};
    // Create existing state
    // existing diagnostics
    HospitalOopClaims claim = new HospitalOopClaims();
    ClaimDetailCodes newCdc1 = createDiagnosticCode(codeValue1);
    ClaimDetailCodes newCdc2 = createDiagnosticCode(codeValue2);
    ClaimDetailCodes newCdc3 = createDiagnosticCode(codeValue3);
    claim.setClaimContentsList(createContentList(codeValue1, codeValue2, codeValue3));

    // WHEN
    claimService.saveClaimContents(ClaimContentContext.DIAGNOSTIC, diagnostics, claim);

    // THEN
    assertNotNull(claim.getClaimContentsList());
    assertEquals(3, claim.getClaimContentsList().size());
    ClaimContents diag1 = claim.getClaimContentsList().get(0);
    assertNotNull(diag1);
    assertEquals(newCdc3, diag1.getCdcId());
    assertEquals(ClaimContentContext.DIAGNOSTIC.toString(), diag1.getContext());
    assertEquals(ClaimDetailCodeType.ICD10.toString(), diag1.getCodeType());
    assertNotNull(diag1.getSequenceNum());
    ClaimContents diag2 = claim.getClaimContentsList().get(1);
    assertNotNull(diag2);
    assertEquals(newCdc2, diag2.getCdcId());
    assertEquals(ClaimContentContext.DIAGNOSTIC.toString(), diag2.getContext());
    assertEquals(ClaimDetailCodeType.ICD10.toString(), diag2.getCodeType());
    assertNotNull(diag2.getSequenceNum());
    assertTrue(diag1.getSequenceNum().compareTo(diag2.getSequenceNum()) < 0);
    assertTrue(diag1.getSequenceNum().compareTo(diag2.getSequenceNum()) < 0);
    ClaimContents diag3 = claim.getClaimContentsList().get(2);
    assertNotNull(diag3);
    assertEquals(newCdc1, diag3.getCdcId());
    assertEquals(ClaimContentContext.DIAGNOSTIC.toString(), diag3.getContext());
    assertEquals(ClaimDetailCodeType.ICD10.toString(), diag3.getCodeType());
    assertNotNull(diag3.getSequenceNum());
    assertTrue(diag2.getSequenceNum().compareTo(diag3.getSequenceNum()) < 0);

    verify(appService, atLeast(0)).getClaimDetailCode(any(), any());
    verifyNoMoreInteractions(appService, serviceDao);
  }
}
