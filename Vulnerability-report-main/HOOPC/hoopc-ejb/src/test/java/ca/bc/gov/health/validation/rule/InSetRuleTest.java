package ca.bc.gov.health.validation.rule;

import ca.bc.gov.health.validation.ValidationError;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;

public class InSetRuleTest {

  private static String FIELD_NAME = "FieldName";
  private static String OK_VALUE = "OK";

  public static boolean InSetFunction(String value) {
    return OK_VALUE.equals(value);
  }

  @Test
  public void InSet_OK() {
    TestObject obj =
        new TestObject() {
          {
            setStringValue(OK_VALUE);
          }
        };

    ValidationRule<TestObject> rule =
        new InSetRule<TestObject, String>(
            FIELD_NAME, TestObject::getStringValue, "value1", "value2", OK_VALUE);

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InSet_Null() {
    TestObject obj = new TestObject();

    ValidationRule<TestObject> rule =
        new InSetRule<TestObject, String>(
            FIELD_NAME, TestObject::getStringValue, "value1", "value2", OK_VALUE);

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InSet_Error_OneVal() {
    TestObject obj =
        new TestObject() {
          {
            setStringValue("NOTOK");
          }
        };

    ValidationRule<TestObject> rule =
        new InSetRule<TestObject, String>(FIELD_NAME, TestObject::getStringValue, OK_VALUE);

    ValidationError error = rule.validate(obj);

    assertNotNull(error);
    assertEquals(FIELD_NAME, error.getRule().getRuleIdentifier());
    assertEquals(ValidationRuleType.IN_SET, error.getRule().getType());
    assertNotNull(error.getMessage());
    assertEquals(
        "Incorrect value NOTOK supplied for FieldName. FieldName must be OK", error.getMessage());
  }

  @Test
  public void InSet_Error_MultiVal() {
    TestObject obj =
        new TestObject() {
          {
            setStringValue("NOTOK");
          }
        };

    ValidationRule<TestObject> rule =
        new InSetRule<TestObject, String>(
            FIELD_NAME, TestObject::getStringValue, "value1", "value2", OK_VALUE);

    ValidationError error = rule.validate(obj);

    assertNotNull(error);
    assertEquals(FIELD_NAME, error.getRule().getRuleIdentifier());
    assertEquals(ValidationRuleType.IN_SET, error.getRule().getType());
    assertNotNull(error.getMessage());
    assertEquals(
        "Incorrect value NOTOK supplied for FieldName. FieldName must be one of value1,value2,OK",
        error.getMessage());
  }
}
