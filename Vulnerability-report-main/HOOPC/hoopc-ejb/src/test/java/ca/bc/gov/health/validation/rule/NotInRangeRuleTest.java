package ca.bc.gov.health.validation.rule;

import ca.bc.gov.health.database.entity.MainEntity;
import ca.bc.gov.health.validation.ValidationError;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.util.Set;
import org.apache.commons.lang3.Range;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;

public class NotInRangeRuleTest {

  private static String FIELD_NAME = "FieldName";
  private static LocalDate testDate = LocalDate.of(2019, 1, 10);

  @Test
  public void NotInRange_OK() {
    MainEntity obj =
        new MainEntity() {
          private static final long serialVersionUID = -6718083801352440799L;

          {
            getRanges().clear();
            getRanges().add(Range.is(testDate));
            getRanges().add(Range.between(testDate.minusDays(2), testDate.minusDays(1)));
          }
        };

    ValidationRule<MainEntity> rule =
        new NotInRangeRule<MainEntity, Set<Range<ChronoLocalDate>>>(FIELD_NAME, obj.getRanges());

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void NotInRange_NotOK() {
    MainEntity obj =
        new MainEntity() {
          private static final long serialVersionUID = -6718083801352440799L;

          {
            getRanges().clear();
            getRanges().add(Range.is(testDate));
            getRanges().add(Range.between(testDate.minusDays(1), testDate.plusDays(1)));
          }
        };

    ValidationRule<MainEntity> rule =
        new NotInRangeRule<MainEntity, Set<Range<ChronoLocalDate>>>(FIELD_NAME, obj.getRanges());

    ValidationError error = rule.validate(obj);

    assertNotNull(error);
    assertEquals(FIELD_NAME, error.getRule().getRuleIdentifier());
    assertEquals(ValidationRuleType.IN_RANGE, error.getRule().getType());
    assertNotNull(error.getMessage());
    assertEquals("One or more of the rate periods overlap", error.getMessage());
  }
}
