/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.service;

import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.database.entity.ClaimTypes;
import ca.bc.gov.health.registry.service.HealthRegistry;
import ca.bc.gov.health.registry.service.HealthRegistryException;
import ca.bc.gov.health.registry.v2.model.E45Response;
import ca.bc.gov.health.registry.v3.model.GetDemographicsResponse;
import ca.bc.gov.health.registry.v3.model.Person;
import ca.bc.gov.health.service.viewmodel.AdmissionsViewModel;
import ca.bc.gov.health.service.viewmodel.ClaimViewModel;
import ca.bc.gov.health.service.viewmodel.PatientsViewModel;
import ca.bc.gov.health.validation.ValidationError;
import jakarta.ejb.SessionContext;
import jakarta.security.enterprise.CallerPrincipal;
import java.text.MessageFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentMatchers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import static org.mockito.Mockito.when;
import org.mockito.MockitoAnnotations;

/** @author trevor.schiavone */
public class ClaimEligibilityServiceTest {

  @InjectMocks private ClaimEligibilityService claimService;

  @Mock private SessionContext context;
  @Mock private CallerPrincipal callerPrincipalMock;
  @Mock private HealthRegistry healthRegistry;

  private ClaimViewModel claim;
  private PatientsViewModel patient;
  private List<ValidationError> validationErrors;
  private E45Response e45Response;
  private GetDemographicsResponse getDemoResponse;
  private ClaimEligibilityService claimEligibilityService;

  @BeforeEach
  public void initMocks() {

    MockitoAnnotations.initMocks(this);
    when(context.getCallerPrincipal()).thenReturn(callerPrincipalMock);
    when(context.getCallerPrincipal().getName()).thenReturn("train96");

    claim = new ClaimViewModel();
    claim.setClaimType(new ClaimTypes());
    patient = new PatientsViewModel();
    validationErrors = new ArrayList<>();
    e45Response = new E45Response();
    getDemoResponse = new GetDemographicsResponse();
    getDemoResponse.setPerson(new Person());
    claimEligibilityService = new ClaimEligibilityService();
  }

  @Test
  public void validateEligibility_NoBirthdate() {

    // Given
    patient.setInsuranceCardNumber("9890609106");
    claim.setPatient(patient);

    // When
    validationErrors = claimService.validateClaimEligiblityAndDemographics(claim);

    // Then
    String expectedError =
        MessageFormat.format(
            GlobalConstants.NOT_ELIGIBLE_MESSAGE, patient.getInsuranceCardNumber());
    assertEquals(1, validationErrors.size());
    assertEquals(expectedError, validationErrors.get(0).getMessage());
  }

  @Test
  public void validateEligibility_InvalidPhn() {
    // Given
    patient.setInsuranceCardNumber("9890609107");
    patient.setBirthDate(LocalDate.now());
    claim.setPatient(patient);

    // When
    validationErrors = claimService.validateClaimEligiblityAndDemographics(claim);

    // Then
    String expectedError =
        MessageFormat.format(
            GlobalConstants.NOT_ELIGIBLE_MESSAGE, patient.getInsuranceCardNumber());
    assertEquals(1, validationErrors.size());
    assertEquals(expectedError, validationErrors.get(0).getMessage());
  }

  @Test
  @Disabled
  public void validateEligibility_BirthdateDoesNotMatchCRS() throws HealthRegistryException {
    // Given
    patient.setInsuranceCardNumber("9890609106");
    patient.setBirthDate(LocalDate.now());
    claim.setServiceDate(LocalDate.now());
    claim.setPatient(patient);
    e45Response.setResponseCode("AE");
    e45Response.setResponseMesssage(
        "0000003827,01,0,N,00014,D,142.34.172.148 ,2020/06/26,13:39:31.646,13:39:33.393\n"
            + "BT2CBC01000030          20200626133931+0800     ,0000000327,\n"
            + "B02DBC00001013          20200626133931+0800     ,0000000458,\n"
            + "MSH|^~\\&|HNWeb|BC01000030|RAIELG-CNFRM|BC00001013|20200626133931|10-jianzhu|E45|20200626133931|D|2.4||\n"
            + "HDR|||HNAIADMINISTRATION\n"
            + "SFT|1.0||^^0000077^^^CANBC^XX^MOH|1.0|HNWeb\n"
            + "QPD|E45^^HNET0471|1|^^00000010^^^CANBC^XX^MOH|^^00000010^^^CANBC^XX^MOH|^^00000754^^^CANBC^XX^MOH|9300625822^^^CANBC^JHN^MOH||19850915||||||20200201\n"
            + "RCP|I\n"
            + "MSH|^~\\&|RAIELG-CNFRM|BC00001013|HNWeb|BC01000030|20200626163933|10-jianzhu|E45|20200626133931|D|2.4||\n"
            + "MSA|AE|20200626133931|HJMB140EBIRTHDATES DO NOT MATCH\n"
            + "ERR|^^^HJMB140E&BIRTHDATES DO NOT MATCH\n"
            + "QAK|1|AE|E45^^HNET0471\n"
            + "QPD|E45^^HNET0471|1|^^00000010^^^CANBC^XX^MOH|^^00000010^^^CANBC^XX^MOH|^^00000754^^^CANBC^XX^MOH|9300625822^^^CANBC^JHN^MOH||19850915||||||20200201\n"
            + "PID|||9300625822||^^^^^^L||19850915|\n"
            + "IN1|||00000754^^^CANBC^XX^MOH||||||||||||||||||||||");
    getDemoResponse.getPerson().getDeclaredName().setFirstGivenName("billy");
    getDemoResponse.getPerson().getDeclaredName().setSurname("bob");
    getDemoResponse.getPerson().getPhysicalAddress().setCity("Victoria");
    getDemoResponse.getPerson().getPhysicalAddress().setPostalCode("V8X0Z0");

    when(healthRegistry.getEligibility(ArgumentMatchers.any())).thenReturn(e45Response);
    when(healthRegistry.getDemographics(ArgumentMatchers.any(), ArgumentMatchers.any()))
        .thenReturn(getDemoResponse);

    // When
    validationErrors = claimService.validateClaimEligiblityAndDemographics(claim);

    // Then
    String expectedError =
        MessageFormat.format(GlobalConstants.BIRTHDATE_MISMATCH_MESSAGE, patient.getBirthDate());
    assertEquals(1, validationErrors.size());
    assertEquals(expectedError, validationErrors.get(0).getMessage());
  }

  @Test
  public void validateEligibility_ErrorResponse() throws HealthRegistryException {

    // Given
    patient.setInsuranceCardNumber("9890609106");
    patient.setBirthDate(LocalDate.now());
    claim.setServiceDate(LocalDate.now());
    claim.setPatient(patient);
    e45Response.setResponseCode("AE");
    e45Response.setResponseMesssage(
        "0000002625,01,0,N,00014,D,142.34.172.148 ,2020/06/03,16:44:17.140,16:44:17.388\n"
            + "BT2CBC01000030          20200603164417+0800     ,0000000183,\n"
            + "B02DBC00001013          20200603164417+0800     ,0000000212,\n"
            + "MSH|^~\\&|HNWeb|BC01000030|RAIGT-PRSN-DMGR|BC00001013|20200603164417|train96|R03|20200603164417|D|2.4||\n"
            + "ZHD|20200603164417|^^00000010|HNAIADMINISTRATION||||2.4\n"
            + "PID||9379477922^^^BC^PH\n"
            + "MSH|^~\\&|RAIGT-PRSN-DMGR|BC00001013|HNWeb|BC01000030|20200603164417|train96|R03|1888240|D|2.4\n"
            + "MSA|AE|20200603164417|HNHR512E- CLIENT DOES NOT EXIST ON REGISTRY\n"
            + "ERR|^^^HNHR512E&- CLIENT DOES NOT EXIST ON REGISTRY");

    getDemoResponse.getPerson().getDeclaredName().setFirstGivenName("billy");
    getDemoResponse.getPerson().getDeclaredName().setSurname("bob");
    getDemoResponse.getPerson().getPhysicalAddress().setCity("Victoria");
    getDemoResponse.getPerson().getPhysicalAddress().setPostalCode("V8X0Z0");

    when(healthRegistry.getEligibility(ArgumentMatchers.any())).thenReturn(e45Response);
    when(healthRegistry.getDemographics(ArgumentMatchers.any(), ArgumentMatchers.any()))
        .thenReturn(getDemoResponse);

    // When
    validationErrors = claimService.validateClaimEligiblityAndDemographics(claim);

    // Then
    String expectedError =
        MessageFormat.format(
            GlobalConstants.NOT_ELIGIBLE_ON_DATE_MESSAGE,
            patient.getInsuranceCardNumber(),
            claim.getServiceDate());
    assertEquals(1, validationErrors.size());
    assertEquals(expectedError, validationErrors.get(0).getMessage());
  }

  @Test
  public void validateEligibility_PatientIneligibile_NameAndAddressNull()
      throws HealthRegistryException {
    // Given
    patient.setInsuranceCardNumber("9890609106");
    patient.setBirthDate(LocalDate.now());
    claim.setServiceDate(LocalDate.now());
    claim.setPatient(patient);
    e45Response.setResponseCode("AE");
    e45Response.setResponseMesssage("HNHR025E");
    getDemoResponse.getPerson().getDeclaredName().setFirstGivenName("billy");
    getDemoResponse.getPerson().getDeclaredName().setSurname("bob");
    getDemoResponse.getPerson().getPhysicalAddress().setCity("Victoria");
    getDemoResponse.getPerson().getPhysicalAddress().setPostalCode("V8X0Z0");

    when(healthRegistry.getEligibility(ArgumentMatchers.any())).thenReturn(e45Response);
    when(healthRegistry.getDemographics(ArgumentMatchers.any(), ArgumentMatchers.any()))
        .thenReturn(getDemoResponse);

    // When
    validationErrors = claimService.validateClaimEligiblityAndDemographics(claim);

    // Then
    String expectedError =
        MessageFormat.format(
            GlobalConstants.NOT_ELIGIBLE_ON_DATE_MESSAGE,
            patient.getInsuranceCardNumber(),
            claim.getServiceDate());
    assertEquals(1, validationErrors.size());
    assertEquals(expectedError, validationErrors.get(0).getMessage());
    assertEquals("billy", patient.getFirstName());
    assertEquals("bob", patient.getLastName());
    assertEquals("Victoria", patient.getCity());
    assertEquals("V8X0Z0", patient.getPostalCode());
  }

  @Test
  public void validateEligibility_Eligible_InvalidNameAndAddress() throws HealthRegistryException {

    // Given
    patient.setInsuranceCardNumber("9890609106");
    patient.setBirthDate(LocalDate.now());
    claim.setServiceDate(LocalDate.now());
    claim.setPatient(patient);
    claim.getClaimType().setClaimType(GlobalConstants.OUTPATIENT_CLAIM_TYPE);
    e45Response.setResponseCode("AA");
    e45Response.setResponseMesssage("");
    patient.setFirstName("jimmy");
    patient.setLastName("john");
    patient.setCity("Saskatoon");
    patient.setPostalCode("V9Y9C9");
    getDemoResponse.getPerson().getDeclaredName().setFirstGivenName("billy");
    getDemoResponse.getPerson().getDeclaredName().setSurname("bob");
    getDemoResponse.getPerson().getPhysicalAddress().setCity("Victoria");
    getDemoResponse.getPerson().getPhysicalAddress().setPostalCode("V8X0Z0");

    when(healthRegistry.getEligibility(ArgumentMatchers.any())).thenReturn(e45Response);
    when(healthRegistry.getDemographics(ArgumentMatchers.any(), ArgumentMatchers.any()))
        .thenReturn(getDemoResponse);

    // When
    validationErrors = claimService.validateClaimEligiblityAndDemographics(claim);

    // Then
    String firstNameError =
        MessageFormat.format(
            GlobalConstants.NO_MATCHING_VALUES_MESSAGE,
            "first name",
            patient.getFirstName(),
            getDemoResponse.getPerson().getDeclaredName().getFirstGivenName());
    String lastNameError =
        MessageFormat.format(
            GlobalConstants.NO_MATCHING_VALUES_MESSAGE,
            "last name",
            patient.getLastName(),
            getDemoResponse.getPerson().getDeclaredName().getSurname());
    String cityError =
        MessageFormat.format(
            GlobalConstants.NO_MATCHING_VALUES_MESSAGE,
            "city",
            patient.getCity(),
            getDemoResponse.getPerson().getPhysicalAddress().getCity());
    String postalCodeError =
        MessageFormat.format(
            GlobalConstants.NO_MATCHING_VALUES_MESSAGE,
            "postal code",
            patient.getPostalCode(),
            getDemoResponse.getPerson().getPhysicalAddress().getPostalCode());
    String expectedError =
        MessageFormat.format(
            GlobalConstants.NOT_ELIGIBLE_ON_DATE_MESSAGE,
            patient.getInsuranceCardNumber(),
            claim.getServiceDate());
    assertEquals(5, validationErrors.size());
    assertEquals(expectedError, validationErrors.get(0).getMessage());
    assertEquals(firstNameError, validationErrors.get(1).getMessage());
    assertEquals(lastNameError, validationErrors.get(2).getMessage());
    assertEquals(cityError, validationErrors.get(3).getMessage());
    assertEquals(postalCodeError, validationErrors.get(4).getMessage());
  }

  @Test
  public void validateEligibility_NonEligibleInRange() throws HealthRegistryException {

    // Given
    patient.setInsuranceCardNumber("9890609106");
    patient.setBirthDate(LocalDate.now());
    claim.setServiceDate(LocalDate.now().minusDays(1));
    claim.setAdmission(new AdmissionsViewModel());
    claim.getAdmission().setDischargeDate(LocalDate.now());
    claim.setPatient(patient);
    claim.getClaimType().setClaimType(GlobalConstants.INPATIENT_CLAIM_TYPE);

    e45Response.setResponseCode("AA");
    e45Response.setResponseMesssage(
        "0000000589,01,0,N,00014,D,142.34.172.148 ,2020/03/18,11:36:04.091,11:36:04.760\n"
            + "BT2CBC01000030          20200318113604+0800     ,0000000367,\n"
            + "B02DBC00001013          20200318113604+0800     ,0000000714,\n"
            + "MSH|^~\\&|HNWeb|BC01000030|RAIELG-CNFRM|BC00001013|20200318113603|train96|E45|20200318113603|D|2.4||\n"
            + "HDR|||HNAIADMINISTRATION\n"
            + "SFT|1.0||^^0000077^^^CANBC^XX^MOH|1.0|HNWeb\n"
            + "QPD|E45^^HNET0471|1|^^00000010^^^CANBC^XX^MOH|^^00000010^^^CANBC^XX^MOH|^^00000754^^^CANBC^XX^MOH|9151210417^^^CANBC^JHN^MOH||19591128||||||20200318||PVC^^HNET9909~EYE^^HNET9909~PRS^^HNET9909\n"
            + "RCP|I\n"
            + "MSH|^~\\&|RAIELG-CNFRM|BC00001013|HNWeb|BC01000030|20200318113604|train96|E45|1878828|D|2.4\n"
            + "MSA|AA|20200318113603|HJMB001ISUCCESSFULLY COMPLETED\n"
            + "ERR|^^^HJMB001I&SUCCESSFULLY COMPLETED\n"
            + "QAK|1|OK|E45^^HNET0471\n"
            + "QPD|E45^^HNET0471|1|^^00000010^^^CANBC^XX^MOH|^^00000010^^^CANBC^XX^MOH|^^00000754^^^CANBC^XX^MOH|9151210417^^^CANBC^JHN^MOH||19591128||||||20200318||PVC^^HNET9909~EYE^^HNET9909~PRS^^HNET9909\n"
            + "PID|||9151210417^^^CANBC^JHN^MOH||BURNHAM^RICHARD^GERD^^^^L||19591128|M\n"
            + "IN1|||00000754^^^CANBC^XX^MOH||||||||||||||||||||||Y\n"
            + "ADJ|1|IN|||PVC^^HNET9908|N\n"
            + "ADJ|2|IN|||CCARD^^HNET9908|THIS PERSON HAS REQUESTED A REPLACEMENT CARECARD. PLEASE CONFIRM IDENTITY\n"
            + "ADJ|3|IN|||EYE^^HNET9908|2016-01-01\n"
            + "ADJ|4|IN|||PRS^^HNET9908|N");
    E45Response secondResponse = new E45Response();
    secondResponse.setResponseCode("AE");
    secondResponse.setResponseMesssage(
        "0000000591,01,0,N,00014,D,142.34.172.148 ,2020/03/18,12:32:22.053,12:32:38.996\n"
            + "BT2CBC01000030          20200318123222+0800     ,0000000318,\n"
            + "B02DBC00001013          20200318123222+0800     ,0000000627,\n"
            + "MSH|^~\\&|TTUWEB|BC01000030|RAIELG-CNFRM|BC00001013|20200318123221|TTUm0101|E45|20200318123221|D|2.3||\n"
            + "HDR|||admin.user\n"
            + "SFT|1.0||^^0000077^^^CANBC^XX^MOH|1.0|HNWeb\n"
            + "QPD|E45^^HNET0471|1|^^00001424^^^CANBC^XX^MOH|^^00001424^^^CANBC^XX^MOH|^^00000754^^^CANBC^XX^MOH|9151247483^^^CANBC^JHN^MOH||19741000||||||20200318\n"
            + "RCP|I\n"
            + "MSH|^~\\&|RAIELG-CNFRM|BC00001013|TTUWEB|BC01000030|20200318123238|TTUm0101|E45|1878832|D|2.3\n"
            + "MSA|AA|20200318123221|HNHR511WINPUT PHN WAS MERGED\n"
            + "ERR|^^^HNHR511W&INPUT PHN WAS MERGED\n"
            + "QAK|1|AE|E45^^HNET0471\n"
            + "QPD|E45^^HNET0471|1|^^00001424^^^CANBC^XX^MOH|^^00001424^^^CANBC^XX^MOH|^^00000754^^^CANBC^XX^MOH|9151247483^^^CANBC^JHN^MOH||19741000||||||20200318\n"
            + "PID|||9151247509^^^CANBC^JHN^MOH||WHALEN^MELISSA^GIRARD^^^^L||19741002|F\n"
            + "IN1|||00000754^^^CANBC^XX^MOH||||||||||19921201||||||||||||N\n"
            + "ADJ|1|IN|||ENDRSN^^HNET9908|LOSC\n"
            + "ADJ|2|IN|||CINST^^HNET9908|IN ORDER TO RE-ESTABLISH ELIGIBILITY, THIS PERSON MUST CONTACT MSP IMMEDIATELY.");

    getDemoResponse.getPerson().getDeclaredName().setFirstGivenName("billy");
    getDemoResponse.getPerson().getDeclaredName().setSurname("bob");
    getDemoResponse.getPerson().getPhysicalAddress().setCity("Victoria");
    getDemoResponse.getPerson().getPhysicalAddress().setPostalCode("V8X0Z0");

    when(healthRegistry.getEligibility(ArgumentMatchers.any()))
        .thenReturn(e45Response, secondResponse);
    when(healthRegistry.getDemographics(ArgumentMatchers.any(), ArgumentMatchers.any()))
        .thenReturn(getDemoResponse);

    // When
    validationErrors = claimService.validateClaimEligiblityAndDemographics(claim);

    // Then
    String expectedError =
        MessageFormat.format(
            GlobalConstants.NOT_ELIGIBLE_ON_RANGE_MESSAGE,
            patient.getInsuranceCardNumber(),
            claim.getServiceDate(),
            claim.getAdmission().getAdmissionDate());
    assertEquals(1, validationErrors.size());
    assertEquals(expectedError, validationErrors.get(0).getMessage());
    assertEquals("billy", patient.getFirstName());
    assertEquals("bob", patient.getLastName());
    assertEquals("Victoria", patient.getCity());
    assertEquals("V8X0Z0", patient.getPostalCode());
  }

  @Test
  public void validateEligibility_EligibleInRange() throws HealthRegistryException {

    // Given
    patient.setInsuranceCardNumber("9890609106");
    patient.setBirthDate(LocalDate.now());
    claim.setServiceDate(LocalDate.now().minusDays(1));
    claim.setAdmission(new AdmissionsViewModel());
    claim.getAdmission().setDischargeDate(LocalDate.now());
    claim.setPatient(patient);
    claim.getClaimType().setClaimType(GlobalConstants.INPATIENT_CLAIM_TYPE);

    e45Response.setResponseCode("AA");
    e45Response.setResponseMesssage(
        "0000000589,01,0,N,00014,D,142.34.172.148 ,2020/03/18,11:36:04.091,11:36:04.760\n"
            + "BT2CBC01000030          20200318113604+0800     ,0000000367,\n"
            + "B02DBC00001013          20200318113604+0800     ,0000000714,\n"
            + "MSH|^~\\&|HNWeb|BC01000030|RAIELG-CNFRM|BC00001013|20200318113603|train96|E45|20200318113603|D|2.4||\n"
            + "HDR|||HNAIADMINISTRATION\n"
            + "SFT|1.0||^^0000077^^^CANBC^XX^MOH|1.0|HNWeb\n"
            + "QPD|E45^^HNET0471|1|^^00000010^^^CANBC^XX^MOH|^^00000010^^^CANBC^XX^MOH|^^00000754^^^CANBC^XX^MOH|9151210417^^^CANBC^JHN^MOH||19591128||||||20200318||PVC^^HNET9909~EYE^^HNET9909~PRS^^HNET9909\n"
            + "RCP|I\n"
            + "MSH|^~\\&|RAIELG-CNFRM|BC00001013|HNWeb|BC01000030|20200318113604|train96|E45|1878828|D|2.4\n"
            + "MSA|AA|20200318113603|HJMB001ISUCCESSFULLY COMPLETED\n"
            + "ERR|^^^HJMB001I&SUCCESSFULLY COMPLETED\n"
            + "QAK|1|OK|E45^^HNET0471\n"
            + "QPD|E45^^HNET0471|1|^^00000010^^^CANBC^XX^MOH|^^00000010^^^CANBC^XX^MOH|^^00000754^^^CANBC^XX^MOH|9151210417^^^CANBC^JHN^MOH||19591128||||||20200318||PVC^^HNET9909~EYE^^HNET9909~PRS^^HNET9909\n"
            + "PID|||9151210417^^^CANBC^JHN^MOH||BURNHAM^RICHARD^GERD^^^^L||19591128|M\n"
            + "IN1|||00000754^^^CANBC^XX^MOH||||||||||||||||||||||Y\n"
            + "ADJ|1|IN|||PVC^^HNET9908|N\n"
            + "ADJ|2|IN|||CCARD^^HNET9908|THIS PERSON HAS REQUESTED A REPLACEMENT CARECARD. PLEASE CONFIRM IDENTITY\n"
            + "ADJ|3|IN|||EYE^^HNET9908|2016-01-01\n"
            + "ADJ|4|IN|||PRS^^HNET9908|N");
    E45Response secondResponse = new E45Response();
    secondResponse.setResponseCode("AA");
    secondResponse.setResponseMesssage(
        "0000000589,01,0,N,00014,D,142.34.172.148 ,2020/03/18,11:36:04.091,11:36:04.760\n"
            + "BT2CBC01000030          20200318113604+0800     ,0000000367,\n"
            + "B02DBC00001013          20200318113604+0800     ,0000000714,\n"
            + "MSH|^~\\&|HNWeb|BC01000030|RAIELG-CNFRM|BC00001013|20200318113603|train96|E45|20200318113603|D|2.4||\n"
            + "HDR|||HNAIADMINISTRATION\n"
            + "SFT|1.0||^^0000077^^^CANBC^XX^MOH|1.0|HNWeb\n"
            + "QPD|E45^^HNET0471|1|^^00000010^^^CANBC^XX^MOH|^^00000010^^^CANBC^XX^MOH|^^00000754^^^CANBC^XX^MOH|9151210417^^^CANBC^JHN^MOH||19591128||||||20200318||PVC^^HNET9909~EYE^^HNET9909~PRS^^HNET9909\n"
            + "RCP|I\n"
            + "MSH|^~\\&|RAIELG-CNFRM|BC00001013|HNWeb|BC01000030|20200318113604|train96|E45|1878828|D|2.4\n"
            + "MSA|AA|20200318113603|HJMB001ISUCCESSFULLY COMPLETED\n"
            + "ERR|^^^HJMB001I&SUCCESSFULLY COMPLETED\n"
            + "QAK|1|OK|E45^^HNET0471\n"
            + "QPD|E45^^HNET0471|1|^^00000010^^^CANBC^XX^MOH|^^00000010^^^CANBC^XX^MOH|^^00000754^^^CANBC^XX^MOH|9151210417^^^CANBC^JHN^MOH||19591128||||||20200318||PVC^^HNET9909~EYE^^HNET9909~PRS^^HNET9909\n"
            + "PID|||9151210417^^^CANBC^JHN^MOH||BURNHAM^RICHARD^GERD^^^^L||19591128|M\n"
            + "IN1|||00000754^^^CANBC^XX^MOH||||||||||||||||||||||Y\n"
            + "ADJ|1|IN|||PVC^^HNET9908|N\n"
            + "ADJ|2|IN|||CCARD^^HNET9908|THIS PERSON HAS REQUESTED A REPLACEMENT CARECARD. PLEASE CONFIRM IDENTITY\n"
            + "ADJ|3|IN|||EYE^^HNET9908|2016-01-01\n"
            + "ADJ|4|IN|||PRS^^HNET9908|N");

    getDemoResponse.getPerson().getDeclaredName().setFirstGivenName("billy");
    getDemoResponse.getPerson().getDeclaredName().setSurname("bob");
    getDemoResponse.getPerson().getPhysicalAddress().setCity("Victoria");
    getDemoResponse.getPerson().getPhysicalAddress().setPostalCode("V8X0Z0");

    when(healthRegistry.getEligibility(ArgumentMatchers.any()))
        .thenReturn(e45Response, secondResponse);
    when(healthRegistry.getDemographics(ArgumentMatchers.any(), ArgumentMatchers.any()))
        .thenReturn(getDemoResponse);

    // When
    validationErrors = claimService.validateClaimEligiblityAndDemographics(claim);

    // Then
    String expectedError =
        MessageFormat.format(
            GlobalConstants.NOT_ELIGIBLE_ON_RANGE_MESSAGE,
            patient.getInsuranceCardNumber(),
            claim.getServiceDate(),
            claim.getAdmission().getAdmissionDate());
    assertEquals(0, validationErrors.size());
  
  }

  @Test
  public void validateEligibility_NotEligible2() throws HealthRegistryException {
    // Given
    patient.setInsuranceCardNumber("9890609106");
    patient.setBirthDate(LocalDate.now());
    claim.setServiceDate(LocalDate.now().minusDays(1));
    claim.setAdmission(new AdmissionsViewModel());
    claim.getAdmission().setDischargeDate(LocalDate.now());
    claim.setPatient(patient);
    claim.getClaimType().setClaimType(GlobalConstants.INPATIENT_CLAIM_TYPE);

    e45Response.setResponseCode("AE");
    e45Response.setResponseMesssage(
        "MSH|^~\\&|RAIELG-CNFRM|BC00001013|HOOPC2|BC01000033|20200717121612|HPC.Ministry1|E45|20200717091611|D|2.4||\n" +
        "MSA|AE|20200717091611|ELIG0010PERSON PHN DOES NOT EXIST\n" +
        "ERR|^^^ELIG0010&PERSON PHN DOES NOT EXIST\n" +
        "QAK|1|AE|E45^^HNET0471\n" +
        "QPD|E45^^HNET0471|1|^^00000010^^^CANBC^XX^MOH|^^00000010^^^CANBC^XX^MOH|^^00000754^^^CANBC^XX^MOH|9874751077^^^CANBC^JHN^MOH||19600519||||||20200701\n" +
        "PID|||9874751077||^^^^^^L||19600519|\n" +
        "IN1|||00000754^^^CANBC^XX^MOH||||||||||||||||||||||\n" +
        "\n" +
        "");
    E45Response secondResponse = new E45Response();
    secondResponse.setResponseCode("AE");
    secondResponse.setResponseMesssage(
        "MSH|^~\\&|RAIELG-CNFRM|BC00001013|HOOPC2|BC01000033|20200717121612|HPC.Ministry1|E45|20200717091611|D|2.4||\n" +
        "MSA|AE|20200717091611|ELIG0010PERSON PHN DOES NOT EXIST\n" +
        "ERR|^^^ELIG0010&PERSON PHN DOES NOT EXIST\n" +
        "QAK|1|AE|E45^^HNET0471\n" +
        "QPD|E45^^HNET0471|1|^^00000010^^^CANBC^XX^MOH|^^00000010^^^CANBC^XX^MOH|^^00000754^^^CANBC^XX^MOH|9874751077^^^CANBC^JHN^MOH||19600519||||||20200701\n" +
        "PID|||9874751077||^^^^^^L||19600519|\n" +
        "IN1|||00000754^^^CANBC^XX^MOH||||||||||||||||||||||\n" +
        "\n" +
        "");

    getDemoResponse.getPerson().getDeclaredName().setFirstGivenName("billy");
    getDemoResponse.getPerson().getDeclaredName().setSurname("bob");
    getDemoResponse.getPerson().getPhysicalAddress().setCity("Victoria");
    getDemoResponse.getPerson().getPhysicalAddress().setPostalCode("V8X0Z0");

    when(healthRegistry.getEligibility(ArgumentMatchers.any()))
        .thenReturn(e45Response, secondResponse);
    when(healthRegistry.getDemographics(ArgumentMatchers.any(), ArgumentMatchers.any()))
        .thenReturn(getDemoResponse);

    // When
    validationErrors = claimService.validateClaimEligiblityAndDemographics(claim);

    // Then
    String expectedError = GlobalConstants.PHN_NOT_EXIST;
    assertEquals(1, validationErrors.size());
    assertEquals(expectedError, validationErrors.get(0).getMessage());
  }
 
}
