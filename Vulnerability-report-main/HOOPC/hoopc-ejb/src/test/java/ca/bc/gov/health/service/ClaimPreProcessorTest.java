/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.service;

import ca.bc.gov.health.database.entity.HighcostProcedureCodes;
import ca.bc.gov.health.database.entity.HighcostProcedureRate;
import ca.bc.gov.health.service.viewmodel.ClaimViewModel;
import ca.bc.gov.health.service.viewmodel.HighcostViewModel;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentMatchers;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.when;
import org.mockito.MockitoAnnotations;

/** @author trevor.schiavone */
public class ClaimPreProcessorTest {

  @InjectMocks private ClaimPreProcessor preProcessor;

  @Mock private HoopcAppService appService;

  private ClaimViewModel claim;

  @BeforeEach
  public void initMocks() {
    MockitoAnnotations.initMocks(this);

    claim = new ClaimViewModel();
  }

  @Test
  public void updateHighCostRate_MissingCode() {

    // Given
    HighcostViewModel[] highCostProcedures = claim.getHighCostProcedures();
    highCostProcedures[0].setProcedureDate(LocalDate.now());

    // When
    preProcessor.updateHighCostRate(claim);

    // Then the cost isn't updated
    Mockito.verify(appService, never()).getHighcostCode(ArgumentMatchers.any());
    assertNull(highCostProcedures[0].getProcedureCost());
  }

  @Test
  public void updateHighCostCode_MissingDate() {

    // Given
    HighcostViewModel[] highCostProcedures = claim.getHighCostProcedures();
    highCostProcedures[0].setCodeValue("123");

    // When
    preProcessor.updateHighCostRate(claim);

    // Then the cost isn't updated
    Mockito.verify(appService, never()).getHighcostCode(ArgumentMatchers.any());
    assertNull(highCostProcedures[0].getProcedureCost());
  }

  @Test
  public void updateHighCostCode_RateAlreadySet() {

    // Given
    HighcostViewModel[] highCostProcedures = claim.getHighCostProcedures();
    highCostProcedures[0].setCodeValue("123");
    highCostProcedures[0].setProcedureDate(LocalDate.now());
    highCostProcedures[0].setProcedureCost(new BigDecimal(22));

    // When
    preProcessor.updateHighCostRate(claim);

    // Then the cost isn't updated
    Mockito.verify(appService, never()).getHighcostCode(ArgumentMatchers.any());
    assertEquals(new BigDecimal(22), highCostProcedures[0].getProcedureCost());
  }

  @Test
  public void updateHighCostCode_CorrectInput_DateNotInRateRange() {

    // Given
    HighcostViewModel[] highCostProcedures = claim.getHighCostProcedures();
    highCostProcedures[0].setCodeValue("123");
    highCostProcedures[0].setProcedureDate(LocalDate.now());

    HighcostProcedureRate highCostRate = new HighcostProcedureRate();
    highCostRate.setEffectiveDate(LocalDate.now().plusDays(5));
    highCostRate.setBasicBlockRateAmount(BigDecimal.TEN);

    HighcostProcedureCodes highCostProcedureCode = new HighcostProcedureCodes();
    highCostProcedureCode.setHighcostProcedureRateList(new ArrayList<>());
    highCostProcedureCode.getHighcostProcedureRateList().add(highCostRate);

    when(appService.getHighcostCode(ArgumentMatchers.any())).thenReturn(highCostProcedureCode);

    // When
    preProcessor.updateHighCostRate(claim);

    // Then
    assertNull(highCostProcedures[0].getProcedureCost());
  }

  @Test
  public void updateHighCostCode_CorrectInput_DateInRateRange() {
    // Given
    HighcostViewModel[] highCostProcedures = claim.getHighCostProcedures();
    highCostProcedures[0].setCodeValue("123");
    highCostProcedures[0].setProcedureDate(LocalDate.now());

    HighcostProcedureRate highCostRate = new HighcostProcedureRate();
    highCostRate.setEffectiveDate(LocalDate.now().minusDays(5));
    highCostRate.setBasicBlockRateAmount(BigDecimal.TEN);

    HighcostProcedureCodes highCostProcedureCode = new HighcostProcedureCodes();
    highCostProcedureCode.setHighcostProcedureRateList(new ArrayList<>());
    highCostProcedureCode.getHighcostProcedureRateList().add(highCostRate);

    when(appService.getHighcostCode(ArgumentMatchers.any())).thenReturn(highCostProcedureCode);

    // When
    preProcessor.updateHighCostRate(claim);

    // Then
    assertEquals(BigDecimal.TEN, highCostProcedures[0].getProcedureCost());
  }
}
