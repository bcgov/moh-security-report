package ca.bc.gov.health.importfile;

import ca.bc.gov.health.database.entity.ProvincesTerritories;
import static ca.bc.gov.health.importfile.HOOPC2Properties.FAILURE;
import static ca.bc.gov.health.importfile.HOOPC2Properties.SUCCESS;
import ca.bc.gov.health.service.HoopcAppService;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.jupiter.api.AfterEach;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;

public class HospitalClaimValidatorTest {

  private static final Logger LOG = Logger.getLogger(HospitalClaimValidatorTest.class.getName());

  HospitalClaimValidator hospClaimValidate;

  @BeforeEach
  public void beforeEach() {
    List<ProvincesTerritories> provinces = new ArrayList<>();
    for (String provinceCode :
        new String[] {"AB", "SK", "MB", "ON", "YT", "QC", "NB", "NL", "PE", "NT", "NU", "NS"}) {
      ProvincesTerritories province = new ProvincesTerritories();
      province.setProvinceCode(provinceCode);
      provinces.add(province);
    }
    List<String> allowedHosptialNumbers =
        Arrays.asList("801", "107", "655", "803", "804", "654", "753", "409", "755");
    hospClaimValidate = new HospitalClaimValidator(provinces, allowedHosptialNumbers);
    
    hospClaimValidate.appService =        
        new HoopcAppService() {
          @Override
          public LocalDate getCutOffDateNewCodes() {
            return LocalDate.parse("20210331", DateTimeFormatter.ofPattern("yyyyMMdd"));
          }
        };
  }

  @AfterEach
  public void afterEach() {
    try {
      LOG.info(hospClaimValidate.getErrors().getErrors().toString());
    } catch (Exception e) {
      LOG.log(Level.SEVERE, null, e);
    }
  }

  @ParameterizedTest
  @ValueSource(
      strings = {
        "H090629.HA6",
        "H090708.HA6",
        "H090717.HA6",
        "H091025.HA6",
        "H091026.HA6",
        "H091027.HA6",
        "H1105011.HA1.txt",
        "IN1105011.HA1",
        "IN1105011.HA1.txt"
      })
  public void testAllFiles(String filename) throws Exception {
    LOG.log(Level.INFO, "testAllFiles with {0}", filename);
    Path path = Paths.get("src", "test", "resources", "claim_import", filename);
    List<String> fileLines = Files.readAllLines(path);

    int validateImportFile = hospClaimValidate.validateImportFile(filename, fileLines);

    assertEquals(SUCCESS, validateImportFile);
    assertFalse(hospClaimValidate.getErrors().hasErrors());
  }

  @Test
  public void testInpatient_Valid() throws Exception {
    Path path = Paths.get("src", "test", "resources", "claim_import", "IN1105011.HA1.txt");
    List<String> fileLines = Files.readAllLines(path);

    int validateImportFile = hospClaimValidate.validateImportFile("IN1105011.HA1.txt", fileLines);

    assertEquals(SUCCESS, validateImportFile);
    assertFalse(hospClaimValidate.getErrors().hasErrors());
  }

  @Test
  public void testInpatient_NotAuthorizedForHospital() throws Exception {
    // User is authorized for "801, not 802".
    List<String> fileLines =
        Arrays.asList(
            "  8025480    Shbartest         Yanny       7419 97 Ave NW                                    Calgary                  ABt3b1w8417836920   1957/08/09F               2010/08/242010/09/0815  1162.00017430.00N                                                      1BAA000042580T741                              ");

    int validateImportFile = hospClaimValidate.validateImportFile("IN1105011.HA1.txt", fileLines);

    assertEquals(FAILURE, validateImportFile);
    assertTrue(hospClaimValidate.getErrors().hasErrors());
    assertEquals(hospClaimValidate.getErrors().getErrors().size(), 1);
    assertTrue(
        ((String) hospClaimValidate.getErrors().getErrors().get(0))
            .contains("Claims for unauthorized hospitals"));
  }

  @Test
  public void testInpatient_InvalidProvince() throws Exception {
    // Province "DS" does not exist.
    List<String> fileLines =
        Arrays.asList(
            "  8015480    Shbartest         Yanny       7419 97 Ave NW                                    Calgary                  DSt3b1w8417836920   1957/08/09F               2010/08/242010/09/0815  1162.00017430.00N                                                      1BAA000042580T741                              ");

    int validateImportFile = hospClaimValidate.validateImportFile("IN1105011.HA1.txt", fileLines);

    assertEquals(FAILURE, validateImportFile);
    assertTrue(hospClaimValidate.getErrors().hasErrors());
    assertEquals(hospClaimValidate.getErrors().getErrors().size(), 1);
    assertTrue(
        ((FieldError) hospClaimValidate.getErrors().getErrors().get(0))
            .toString()
            .contains("The following lines have an invalid Province Code"));
  }

  @Test
  public void testInpatient_InvalidBirthdate() throws Exception {
    // "year" is not a valid birthdate year.
    List<String> fileLines =
        Arrays.asList(
            "  8015480    Shbartest         Yanny       7419 97 Ave NW                                    Calgary                  ABt3b1w8417836920   year/08/09F               2010/08/242010/09/0815  1162.00017430.00N                                                      1BAA000042580T741                              ");

    int validateImportFile = hospClaimValidate.validateImportFile("IN1105011.HA1.txt", fileLines);

    assertEquals(FAILURE, validateImportFile);
    assertTrue(hospClaimValidate.getErrors().hasErrors());
    assertEquals(hospClaimValidate.getErrors().getErrors().size(), 1);
    assertTrue(
        ((FieldError) hospClaimValidate.getErrors().getErrors().get(0))
            .toString()
            .contains("The following lines have an invalid Birth Date"));
  }

  @Test
  public void testInpatient_InvalidAdmissionDate() throws Exception {
    // "meer" is not a valid admission date year.
    List<String> fileLines =
        Arrays.asList(
            "  8015480    Shbartest         Yanny       7419 97 Ave NW                                    Calgary                  ABt3b1w8417836920   1976/08/09F               meer/08/242010/09/0815  1162.00017430.00N                                                      1BAA000042580T741                              ");

    int validateImportFile = hospClaimValidate.validateImportFile("IN1105011.HA1.txt", fileLines);

    assertEquals(FAILURE, validateImportFile);
    assertTrue(hospClaimValidate.getErrors().hasErrors());
    assertEquals(hospClaimValidate.getErrors().getErrors().size(), 1);
    assertTrue(
        ((FieldError) hospClaimValidate.getErrors().getErrors().get(0))
            .toString()
            .contains("The following lines have an invalid Admission Date"));
  }

  @Test
  public void testOutpatient_Valid() throws Exception {
    Path path = Paths.get("src", "test", "resources", "claim_import", "H091025.HA6");
    List<String> fileLines = Files.readAllLines(path);

    int validateImportFile = hospClaimValidate.validateImportFile("H091025.HA6", fileLines);

    assertEquals(SUCCESS, validateImportFile);
    assertFalse(hospClaimValidate.getErrors().hasErrors());
  }

  @Test
  public void testEmptyFile() throws Exception {
    int validateImportFile = hospClaimValidate.validateImportFile("H091025.HA6", new ArrayList<>());

    assertEquals(FAILURE, validateImportFile);
    assertTrue(hospClaimValidate.getErrors().hasErrors());
    assertEquals(hospClaimValidate.getErrors().getErrors().size(), 1);
    assertTrue(
        ((String) hospClaimValidate.getErrors().getErrors().get(0))
            .contains("No claims were found in the file."));
  }
}
