package ca.bc.gov.health.report.transformer;

import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.report.StoredProcQueryParams;
import ca.bc.gov.health.report.model.ClaimReportViewModel;
import jakarta.persistence.ParameterMode;
import java.time.LocalDate;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import org.junit.jupiter.api.Test;

public class ClaimReportPLSQLTransformerTest {
  private static final LocalDate TEST_DATE = LocalDate.of(2019, 1, 1);

  @Test
  public void transformToStoreProcParam0006_HA_Test() throws HoopcException {
    ClaimReportViewModel v = fillInpatientClaimReportViewModel();
    List<StoredProcQueryParams> result =
        ClaimReportPLSQLTransformer.transformToStoreProcParam0006(v);
    assertInpatientClaimReport(result);
    assertParamStringIn("pv_residencyType", "RES", result);
    assertParamStringIn("pv_populationType", "HA", result);
    assertParamStringIn("pv_populationID", "02", result);
  }

  @Test
  public void transformToStoreProcParam0006_PROV_Test() throws HoopcException {
    ClaimReportViewModel v = fillInpatientClaimReportViewModel();
    v.setHealthAuthority(null);
    v.setProvince("01");
    List<StoredProcQueryParams> result =
        ClaimReportPLSQLTransformer.transformToStoreProcParam0006(v);
    assertInpatientClaimReport(result);
    assertParamStringIn("pv_residencyType", "RES", result);
    assertParamStringIn("pv_populationType", "PROV", result);
    assertParamStringIn("pv_populationID", "01", result);
  }

  @Test
  public void transformToStoreProcParam0006_RES_Hospital_Test() throws HoopcException {
    ClaimReportViewModel v = fillInpatientClaimReportViewModel();
    v.setHealthAuthority(null);
    v.setHospital("(AB) 041-MISERICORDIA COMMUNITY HOSPITAL");
    List<StoredProcQueryParams> result =
        ClaimReportPLSQLTransformer.transformToStoreProcParam0006(v);
    assertInpatientClaimReport(result);
    assertParamStringIn("pv_residencyType", "RES", result);
    assertParamStringIn("pv_populationType", "HOSP", result);
    assertParamStringIn("pv_populationID", "AB|041", result);
  }

  @Test
  public void transformToStoreProcParam0006_NRES_Hospital_Test() throws HoopcException {
    ClaimReportViewModel v = fillInpatientClaimReportViewModel();
    v.setResidencyType("NRES");
    v.setHealthAuthority(null);
    v.setHospital("041-MISERICORDIA COMMUNITY HOSPITAL");
    List<StoredProcQueryParams> result =
        ClaimReportPLSQLTransformer.transformToStoreProcParam0006(v);
    assertInpatientClaimReport(result);
    assertParamStringIn("pv_residencyType", "NRES", result);
    assertParamStringIn("pv_populationType", "HOSP", result);
    assertParamStringIn("pv_populationID", "041", result);
  }

  @Test
  public void transformToStoreProcParam0007_HA_Test() throws HoopcException {
    ClaimReportViewModel v = fillOutpatientClaimReportViewModel();
    List<StoredProcQueryParams> result =
        ClaimReportPLSQLTransformer.transformToStoreProcParam0007(v);
    assertOutpatientClaimReport(result);
    assertParamStringIn("pv_residencyType", "RES", result);
    assertParamStringIn("pv_populationType", "HA", result);
    assertParamStringIn("pv_populationID", "02", result);
  }

  @Test
  public void transformToStoreProcParam0007_PROV_Test() throws HoopcException {
    ClaimReportViewModel v = fillOutpatientClaimReportViewModel();
    v.setHealthAuthority(null);
    v.setProvince("01");
    List<StoredProcQueryParams> result =
        ClaimReportPLSQLTransformer.transformToStoreProcParam0007(v);
    assertOutpatientClaimReport(result);
    assertParamStringIn("pv_residencyType", "RES", result);
    assertParamStringIn("pv_populationType", "PROV", result);
    assertParamStringIn("pv_populationID", "01", result);
  }

  @Test
  public void transformToStoreProcParam0007_RES_Hospital_Test() throws HoopcException {
    ClaimReportViewModel v = fillOutpatientClaimReportViewModel();
    v.setHealthAuthority(null);
    v.setHospital("(AB) 041-MISERICORDIA COMMUNITY HOSPITAL");
    List<StoredProcQueryParams> result =
        ClaimReportPLSQLTransformer.transformToStoreProcParam0007(v);
    assertOutpatientClaimReport(result);
    assertParamStringIn("pv_residencyType", "RES", result);
    assertParamStringIn("pv_populationType", "HOSP", result);
    assertParamStringIn("pv_populationID", "AB|041", result);
  }

  @Test
  public void transformToStoreProcParam0007_NRES_Hospital_Test() throws HoopcException {
    ClaimReportViewModel v = fillOutpatientClaimReportViewModel();
    v.setResidencyType("NRES");
    v.setHealthAuthority(null);
    v.setHospital("041-MISERICORDIA COMMUNITY HOSPITAL");
    List<StoredProcQueryParams> result =
        ClaimReportPLSQLTransformer.transformToStoreProcParam0007(v);
    assertOutpatientClaimReport(result);
    assertParamStringIn("pv_residencyType", "NRES", result);
    assertParamStringIn("pv_populationType", "HOSP", result);
    assertParamStringIn("pv_populationID", "041", result);
  }

  @Test
  public void transformToStoreProcParam0013_HA_Test() throws HoopcException {
    ClaimReportViewModel v = fillInpatientClaimReportViewModel();
    List<StoredProcQueryParams> result =
        ClaimReportPLSQLTransformer.transformToStoreProcParam0013(v);
    assertInpatientClaimReport(result);
    assertParamStringIn("pv_residencyType", "RES", result);
    assertParamStringIn("pv_populationType", "HA", result);
    assertParamStringIn("pv_populationID", "02", result);
  }

  @Test
  public void transformToStoreProcParam0013_PROV_Test() throws HoopcException {
    ClaimReportViewModel v = fillInpatientClaimReportViewModel();
    v.setHealthAuthority(null);
    v.setProvince("01");
    List<StoredProcQueryParams> result =
        ClaimReportPLSQLTransformer.transformToStoreProcParam0013(v);
    assertInpatientClaimReport(result);
    assertParamStringIn("pv_residencyType", "RES", result);
    assertParamStringIn("pv_populationType", "PROV", result);
    assertParamStringIn("pv_populationID", "01", result);
  }

  @Test
  public void transformToStoreProcParam0013_RES_Hospital_Test() throws HoopcException {
    ClaimReportViewModel v = fillInpatientClaimReportViewModel();
    v.setHealthAuthority(null);
    v.setHospital("(AB) 041-MISERICORDIA COMMUNITY HOSPITAL");
    List<StoredProcQueryParams> result =
        ClaimReportPLSQLTransformer.transformToStoreProcParam0013(v);
    assertInpatientClaimReport(result);
    assertParamStringIn("pv_residencyType", "RES", result);
    assertParamStringIn("pv_populationType", "HOSP", result);
    assertParamStringIn("pv_populationID", "AB|041", result);
  }

  @Test
  public void transformToStoreProcParam0013_NRES_Hospital_Test() throws HoopcException {
    ClaimReportViewModel v = fillInpatientClaimReportViewModel();
    v.setResidencyType("NRES");
    v.setHealthAuthority(null);
    v.setHospital("041-MISERICORDIA COMMUNITY HOSPITAL");
    List<StoredProcQueryParams> result =
        ClaimReportPLSQLTransformer.transformToStoreProcParam0013(v);
    assertInpatientClaimReport(result);
    assertParamStringIn("pv_residencyType", "NRES", result);
    assertParamStringIn("pv_populationType", "HOSP", result);
    assertParamStringIn("pv_populationID", "041", result);
  }

  @Test
  public void transformToStoreProcParam0014_HA_Test() throws HoopcException {
    ClaimReportViewModel v = fillOutpatientClaimReportViewModel();
    List<StoredProcQueryParams> result =
        ClaimReportPLSQLTransformer.transformToStoreProcParam0014(v);
    assertOutpatientClaimReport(result);
    assertParamStringIn("pv_residencyType", "RES", result);
    assertParamStringIn("pv_populationType", "HA", result);
    assertParamStringIn("pv_populationID", "02", result);
  }

  @Test
  public void transformToStoreProcParam0014_PROV_Test() throws HoopcException {
    ClaimReportViewModel v = fillOutpatientClaimReportViewModel();
    v.setHealthAuthority(null);
    v.setProvince("01");
    List<StoredProcQueryParams> result =
        ClaimReportPLSQLTransformer.transformToStoreProcParam0014(v);
    assertOutpatientClaimReport(result);
    assertParamStringIn("pv_residencyType", "RES", result);
    assertParamStringIn("pv_populationType", "PROV", result);
    assertParamStringIn("pv_populationID", "01", result);
  }

  @Test
  public void transformToStoreProcParam0014_RES_Hospital_Test() throws HoopcException {
    ClaimReportViewModel v = fillOutpatientClaimReportViewModel();
    v.setHealthAuthority(null);
    v.setHospital("(AB) 041-MISERICORDIA COMMUNITY HOSPITAL");
    List<StoredProcQueryParams> result =
        ClaimReportPLSQLTransformer.transformToStoreProcParam0014(v);
    assertOutpatientClaimReport(result);
    assertParamStringIn("pv_residencyType", "RES", result);
    assertParamStringIn("pv_populationType", "HOSP", result);
    assertParamStringIn("pv_populationID", "AB|041", result);
  }

  @Test
  public void transformToStoreProcParam0014_NRES_Hospital_Test() throws HoopcException {
    ClaimReportViewModel v = fillOutpatientClaimReportViewModel();
    v.setResidencyType("NRES");
    v.setHealthAuthority(null);
    v.setHospital("041-MISERICORDIA COMMUNITY HOSPITAL");
    List<StoredProcQueryParams> result =
        ClaimReportPLSQLTransformer.transformToStoreProcParam0014(v);
    assertOutpatientClaimReport(result);
    assertParamStringIn("pv_residencyType", "NRES", result);
    assertParamStringIn("pv_populationType", "HOSP", result);
    assertParamStringIn("pv_populationID", "041", result);
  }

  private void assertParamStringIn(String name, String value, List<StoredProcQueryParams> result) {
    StoredProcQueryParams p = getStoredProcQueryParams(name, result);
    assertNotNull(p);
    assertEquals(value, p.getParamValue());
    assertTrue(ParameterMode.IN.equals(p.getParamMode()));
  }

  private void assertParamStringOut(String name, String value, List<StoredProcQueryParams> result) {
    StoredProcQueryParams p = getStoredProcQueryParams(name, result);
    assertNotNull(p);
    assertEquals(value, p.getParamValue());
    assertTrue(ParameterMode.OUT.equals(p.getParamMode()));
  }

  private void assertParamLocalDateIn(String name, List<StoredProcQueryParams> result) {
    StoredProcQueryParams p = getStoredProcQueryParams(name, result);
    assertNotNull(p);
    assertTrue(TEST_DATE.toString().equals(((LocalDate) p.getParamValue()).toString()));
    assertTrue(p.getParamClass().equals(LocalDate.class));
    assertTrue(ParameterMode.IN.equals(p.getParamMode()));
  }

  private StoredProcQueryParams getStoredProcQueryParams(
      String name, List<StoredProcQueryParams> result) {
    return result.stream().filter(r -> r.getParamName().equals(name)).findFirst().orElse(null);
  }

  private ClaimReportViewModel fillInpatientClaimReportViewModel() {
    ClaimReportViewModel v = new ClaimReportViewModel();
    v.setResidencyType("RES");
    v.setHealthAuthority("02");
    v.setClaimStatus("VALID");
    v.setOverrideStatus("APPROVED");
    v.setAdjustmentStatus("DENIED");
    v.setSubmissionStartDate(TEST_DATE);
    v.setSubmissionEndDate(TEST_DATE);
    v.setProcessingStartDate(TEST_DATE);
    v.setProcessingEndDate(TEST_DATE);
    v.setAdmissionServiceStartDate(TEST_DATE);
    v.setAdmissionServiceEndDate(TEST_DATE);
    v.setDischargeStartDate(TEST_DATE);
    v.setDischargeEndDate(TEST_DATE);
    v.setAdjustmentReqStartDate(TEST_DATE);
    v.setAdjustmentReqEndDate(TEST_DATE);
    v.setAdjustmentProcStartDate(TEST_DATE);
    v.setAdjustmentProcEndDate(TEST_DATE);
    v.setDiagnosticCode("1234");
    v.setProcedureCode("5678");
    v.setAccidentCode("02");
    v.setHighcostProcedureCode("A011");
    v.setAdHocFlag("Y");
    v.setLongTermIndicator("Y");
    v.setUserID("userID");
    v.setSessionID("sessionID");
    return v;
  }

  private ClaimReportViewModel fillOutpatientClaimReportViewModel() {
    ClaimReportViewModel v = new ClaimReportViewModel();
    v.setResidencyType("RES");
    v.setHealthAuthority("02");
    v.setClaimStatus("VALID");
    v.setOverrideStatus("APPROVED");
    v.setAdjustmentStatus("DENIED");
    v.setSubmissionStartDate(TEST_DATE);
    v.setSubmissionEndDate(TEST_DATE);
    v.setProcessingStartDate(TEST_DATE);
    v.setProcessingEndDate(TEST_DATE);
    v.setAdmissionServiceStartDate(TEST_DATE);
    v.setAdmissionServiceEndDate(TEST_DATE);
    v.setAdjustmentReqStartDate(TEST_DATE);
    v.setAdjustmentReqEndDate(TEST_DATE);
    v.setAdjustmentProcStartDate(TEST_DATE);
    v.setAdjustmentProcEndDate(TEST_DATE);
    v.setDiagnosticCode("1234");
    v.setProcedureCode("5678");
    v.setAdHocFlag("Y");
    v.setUserID("userID");
    v.setSessionID("sessionID");
    v.setServiceCode("02");
    return v;
  }

  private void assertInpatientClaimReport(List<StoredProcQueryParams> result) {
    assertParamStringIn("pv_claimStatus", "VALID", result);
    assertParamStringIn("pv_overrideStatus", "APPROVED", result);
    assertParamStringIn("pv_adjustmentStatus", "DENIED", result);
    assertParamLocalDateIn("pv_submissionStartDate", result);
    assertParamLocalDateIn("pv_submissionEndDate", result);
    assertParamLocalDateIn("pv_processingStartDate", result);
    assertParamLocalDateIn("pv_processingEndDate", result);
    assertParamLocalDateIn("pv_admissionStartDate", result);
    assertParamLocalDateIn("pv_admissionEndDate", result);
    assertParamLocalDateIn("pv_dischargeStartDate", result);
    assertParamLocalDateIn("pv_dischargeEndDate", result);
    assertParamLocalDateIn("pv_adjustmentReqStartDate", result);
    assertParamLocalDateIn("pv_adjustmentReqEndDate", result);
    assertParamLocalDateIn("pv_adjustmentProcStartDate", result);
    assertParamLocalDateIn("pv_adjustmentProcEndDate", result);
    assertParamStringIn("pv_diagnosisCode", "1234", result);
    assertParamStringIn("pv_procedureCode", "5678", result);
    assertParamStringIn("pv_accidentCode", "02", result);
    assertParamStringIn("pv_highCostProcCode", "A011", result);
    assertParamStringIn("pv_declRequestCode", null, result);
    assertParamStringIn("pv_claimReviewFlag", null, result);
    assertParamStringIn("pv_claimChangedFlag", null, result);
    assertParamStringIn("pv_reportFormat", null, result);
    assertParamStringIn("pv_adHocFlag", "Y", result);
    assertParamStringIn("pv_userID", "userID", result);
    assertParamStringIn("pv_sessionID", "sessionID", result);
    assertParamStringIn("pv_longTermIndicator", "Y", result);
    assertParamStringOut("pv_reportReqID", null, result);
    assertParamStringOut("pv_ReportFileName", null, result);
    assertParamStringOut("pn_resultCode", null, result);
    assertParamStringOut("pv_message", null, result);
  }

  private void assertOutpatientClaimReport(List<StoredProcQueryParams> result) {
    assertParamStringIn("pv_claimStatus", "VALID", result);
    assertParamStringIn("pv_overrideStatus", "APPROVED", result);
    assertParamStringIn("pv_adjustmentStatus", "DENIED", result);
    assertParamLocalDateIn("pv_submissionStartDate", result);
    assertParamLocalDateIn("pv_submissionEndDate", result);
    assertParamLocalDateIn("pv_processingStartDate", result);
    assertParamLocalDateIn("pv_processingEndDate", result);
    assertParamLocalDateIn("pv_serviceStartDate", result);
    assertParamLocalDateIn("pv_serviceEndDate", result);
    assertParamLocalDateIn("pv_adjustmentReqStartDate", result);
    assertParamLocalDateIn("pv_adjustmentReqEndDate", result);
    assertParamLocalDateIn("pv_adjustmentProcStartDate", result);
    assertParamLocalDateIn("pv_adjustmentProcEndDate", result);
    assertParamStringIn("pv_diagnosisCode", "1234", result);
    assertParamStringIn("pv_procedureCode", "5678", result);
    assertParamStringIn("pv_declRequestCode", null, result);
    assertParamStringIn("pv_claimReviewFlag", null, result);
    assertParamStringIn("pv_claimChangedFlag", null, result);
    assertParamStringIn("pv_reportFormat", null, result);
    assertParamStringIn("pv_adHocFlag", "Y", result);
    assertParamStringIn("pv_userID", "userID", result);
    assertParamStringIn("pv_sessionID", "sessionID", result);
    assertParamStringIn("pv_serviceCode", "02", result);
    assertParamStringOut("pv_reportReqID", null, result);
    assertParamStringOut("pv_ReportFileName", null, result);
    assertParamStringOut("pn_resultCode", null, result);
    assertParamStringOut("pv_message", null, result);
  }
}
