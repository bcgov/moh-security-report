package ca.bc.gov.health.validation.claim;

import ca.bc.gov.health.service.HoopcAppService;
import static ca.bc.gov.health.validation.claim.PHNHelper.PHN_ERROR_CHECKSUM;
import static ca.bc.gov.health.validation.claim.PHNHelper.PHN_ERROR_FORMAT;
import static ca.bc.gov.health.validation.claim.PHNHelper.PHN_ERROR_NONE;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;
import java.util.Properties;
import org.eclipse.persistence.config.PersistenceUnitProperties;
import org.junit.jupiter.api.AfterAll;
import static org.junit.jupiter.api.Assertions.assertEquals;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

@TestInstance(Lifecycle.PER_CLASS)
public class PHNHelperTest {

  @Mock HoopcAppService appService;

  @InjectMocks private PHNHelper helper;

  @BeforeAll
  public void beforeAll() {
    MockitoAnnotations.initMocks(this);
    Properties pros = new Properties();
    pros.setProperty(
        PersistenceUnitProperties.ECLIPSELINK_PERSISTENCE_XML, "META-INF/persistence-test.xml");
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("hoopc-junit", pros);
    helper.em = emf.createEntityManager();
    // Begin the transaction so that em.unrap(Connection.class) doesn't return null in checkXXPHN.
    helper.em.getTransaction().begin();
  }

  @AfterAll
  public void afterAll() {
    helper.em.close();
  }

  @Test
  public void checkON() {
    assertEquals(PHN_ERROR_FORMAT, helper.checkPHN("ON", "123456789"));
    assertEquals(PHN_ERROR_CHECKSUM, helper.checkPHN("ON", "1234567890"));
    assertEquals(PHN_ERROR_NONE, helper.checkPHN("ON", "1048573578"));
  }

  @Test
  public void checkAB() {
    assertEquals(PHN_ERROR_FORMAT, helper.checkPHN("AB", "12345678"));
    assertEquals(PHN_ERROR_CHECKSUM, helper.checkPHN("AB", "123456789"));
    assertEquals(PHN_ERROR_NONE, helper.checkPHN("AB", "861290880"));
  }

  @Test
  public void checkSK() {
    assertEquals(PHN_ERROR_FORMAT, helper.checkPHN("SK", "12345678"));
    assertEquals(PHN_ERROR_CHECKSUM, helper.checkPHN("SK", "111111111"));
    assertEquals(PHN_ERROR_NONE, helper.checkPHN("SK", "700238409"));
  }

  @Test
  public void checkYT() {
    assertEquals(PHN_ERROR_FORMAT, helper.checkPHN("YT", "123456789"));
    assertEquals(PHN_ERROR_CHECKSUM, helper.checkPHN("YT", "002456789"));
    assertEquals(PHN_ERROR_NONE, helper.checkPHN("YT", "002349876"));
  }

  @Test
  public void checkPE() {
    assertEquals(PHN_ERROR_FORMAT, helper.checkPHN("PE", "1234567"));
    assertEquals(PHN_ERROR_CHECKSUM, helper.checkPHN("PE", "12345678"));
    assertEquals(PHN_ERROR_NONE, helper.checkPHN("PE", "00307827"));
  }

  @Test
  public void checkNB() {
    assertEquals(PHN_ERROR_FORMAT, helper.checkPHN("NB", "12345678"));
    assertEquals(PHN_ERROR_CHECKSUM, helper.checkPHN("NB", "123456789"));
    assertEquals(PHN_ERROR_NONE, helper.checkPHN("NB", "921382925"));
  }

  @Test
  public void checkNS() {
    assertEquals(PHN_ERROR_FORMAT, helper.checkPHN("NS", "123456789"));
    assertEquals(PHN_ERROR_CHECKSUM, helper.checkPHN("NS", "1234567890"));
    assertEquals(PHN_ERROR_NONE, helper.checkPHN("NS", "0008648347"));
  }

  @Test
  public void checkMB() {
    assertEquals(PHN_ERROR_FORMAT, helper.checkPHN("MB", "12345678"));
    assertEquals(PHN_ERROR_CHECKSUM, helper.checkPHN("MB", "123456789"));
    assertEquals(PHN_ERROR_NONE, helper.checkPHN("MB", "101164100"));
  }

  @Test
  public void checkNU() {
    assertEquals(PHN_ERROR_FORMAT, helper.checkPHN("NU", "1234567"));
    assertEquals(PHN_ERROR_CHECKSUM, helper.checkPHN("NU", "12345678"));
    assertEquals(PHN_ERROR_NONE, helper.checkPHN("NU", "12345676"));
  }

  @Test
  public void checkNT() {
    assertEquals(PHN_ERROR_FORMAT, helper.checkPHN("NT", "12345678"));
    assertEquals(PHN_ERROR_CHECKSUM, helper.checkPHN("NT", "D2345678"));
    assertEquals(PHN_ERROR_NONE, helper.checkPHN("NT", "D2345676"));
  }

  @Test
  public void checkNL() {
    assertEquals(PHN_ERROR_FORMAT, helper.checkPHN("NL", "12345678901"));
    assertEquals(PHN_ERROR_CHECKSUM, helper.checkPHN("NL", "123456789012"));
    assertEquals(PHN_ERROR_NONE, helper.checkPHN("NL", "123456789015"));
  }

  @Test
  public void checkQC() {
    assertEquals(PHN_ERROR_FORMAT, helper.checkPHN("QC", "123456789012", "M"));
    assertEquals(PHN_ERROR_FORMAT, helper.checkPHN("QC", "ABCD5678901", "M"));
    assertEquals(PHN_ERROR_FORMAT, helper.checkPHN("QC", "ABCDE6789012", "M"));
    assertEquals(PHN_ERROR_CHECKSUM, helper.checkPHN("QC", "ABCD80010101", "M"));
    assertEquals(PHN_ERROR_NONE, helper.checkPHN("QC", "ABCD80010100", "M"));
    assertEquals(PHN_ERROR_FORMAT, helper.checkPHN("QC", "ABCD80010100", "F"));
    assertEquals(PHN_ERROR_CHECKSUM, helper.checkPHN("QC", "ABCD80510101", "F"));
    assertEquals(PHN_ERROR_NONE, helper.checkPHN("QC", "ABCD80510104", "F"));
    assertEquals(PHN_ERROR_FORMAT, helper.checkPHN("QC", "ABCD80510104", "M"));
  }
}
