package ca.bc.gov.health.validation.rule;

import ca.bc.gov.health.validation.ValidationError;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.Test;

public class InRangeRuleTest {

  private static String FIELD_NAME = "FieldName";

  @Test
  public void InRange_OK_min_max() {
    TestObject obj =
        new TestObject() {
          {
            setLongValue(1L);
          }
        };

    ValidationRule<TestObject> rule =
        new InRangeRule<TestObject, Long>(FIELD_NAME, TestObject::getLongValue, 0L, 2L);

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InRange_OK_inclusive() {
    TestObject obj =
        new TestObject() {
          {
            setLongValue(1L);
          }
        };

    ValidationRule<TestObject> rule =
        new InRangeRule<TestObject, Long>(FIELD_NAME, TestObject::getLongValue, 1L, 1L);

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InRange_OK_max() {
    TestObject obj =
        new TestObject() {
          {
            setLongValue(1L);
          }
        };

    ValidationRule<TestObject> rule =
        new InRangeRule<TestObject, Long>(FIELD_NAME, TestObject::getLongValue, null, 2L);

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InRange_OK_min() {
    TestObject obj =
        new TestObject() {
          {
            setLongValue(1L);
          }
        };

    ValidationRule<TestObject> rule =
        new InRangeRule<TestObject, Long>(FIELD_NAME, TestObject::getLongValue, 0L, null);

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InRange_OK_min_max_func() {
    TestObject obj =
        new TestObject() {
          {
            setLongValue(1L);
            setMinLongValue(0L);
            setMaxLongValue(2L);
          }
        };

    ValidationRule<TestObject> rule =
        new InRangeRule<TestObject, Long>(
            FIELD_NAME,
            TestObject::getLongValue,
            TestObject::getMinLongValue,
            TestObject::getMaxLongValue);

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InRange_OK_max_func() {
    TestObject obj =
        new TestObject() {
          {
            setLongValue(1L);
            setMinLongValue(null);
            setMaxLongValue(2L);
          }
        };

    ValidationRule<TestObject> rule =
        new InRangeRule<TestObject, Long>(
            FIELD_NAME,
            TestObject::getLongValue,
            TestObject::getMinLongValue,
            TestObject::getMaxLongValue);

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InRange_OK_min_func() {
    TestObject obj =
        new TestObject() {
          {
            setLongValue(1L);
            setMinLongValue(1L);
            setMaxLongValue(null);
          }
        };

    ValidationRule<TestObject> rule =
        new InRangeRule<TestObject, Long>(
            FIELD_NAME,
            TestObject::getLongValue,
            TestObject::getMinLongValue,
            TestObject::getMaxLongValue);

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InRange_Null() {
    TestObject obj = new TestObject();

    ValidationRule<TestObject> rule =
        new InRangeRule<TestObject, Long>(FIELD_NAME, TestObject::getLongValue, 0L, 2L);

    ValidationError error = rule.validate(obj);

    assertNull(error);
  }

  @Test
  public void InRange_error_min_max() {
    TestObject obj =
        new TestObject() {
          {
            setLongValue(1L);
          }
        };

    ValidationRule<TestObject> rule =
        new InRangeRule<TestObject, Long>(FIELD_NAME, TestObject::getLongValue, 2L, 4L);

    ValidationError error = rule.validate(obj);

    assertNotNull(error);
    assertEquals(FIELD_NAME, error.getRule().getRuleIdentifier());
    assertEquals(ValidationRuleType.IN_RANGE, error.getRule().getType());
    assertNotNull(error.getMessage());
    assertEquals("FieldName 1 must be between 2 and 4", error.getMessage());
  }

  @Test
  public void InRange_error_min_max_with_names() {
    TestObject obj =
        new TestObject() {
          {
            setLongValue(1L);
          }
        };

    ValidationRule<TestObject> rule =
        new InRangeRule<TestObject, Long>(
            FIELD_NAME, TestObject::getLongValue, 2L, 4L, "MinVal", "MaxVal");

    ValidationError error = rule.validate(obj);

    assertNotNull(error);
    assertEquals(FIELD_NAME, error.getRule().getRuleIdentifier());
    assertEquals(ValidationRuleType.IN_RANGE, error.getRule().getType());
    assertNotNull(error.getMessage());
    assertEquals("FieldName 1 must be between MinVal 2 and MaxVal 4", error.getMessage());
  }

  @Test
  public void InRange_error_min() {
    TestObject obj =
        new TestObject() {
          {
            setLongValue(1L);
          }
        };

    ValidationRule<TestObject> rule =
        new InRangeRule<TestObject, Long>(FIELD_NAME, TestObject::getLongValue, 2L, null);

    ValidationError error = rule.validate(obj);

    assertNotNull(error);
    assertEquals(FIELD_NAME, error.getRule().getRuleIdentifier());
    assertEquals(ValidationRuleType.IN_RANGE, error.getRule().getType());
    assertNotNull(error.getMessage());
    assertEquals("FieldName 1 is less than 2", error.getMessage());
  }

  @Test
  public void InRange_error_min_with_names() {
    TestObject obj =
        new TestObject() {
          {
            setLongValue(1L);
          }
        };

    ValidationRule<TestObject> rule =
        new InRangeRule<TestObject, Long>(
            FIELD_NAME, TestObject::getLongValue, 2L, null, "MinValue", "MaxValue");

    ValidationError error = rule.validate(obj);

    assertNotNull(error);
    assertEquals(FIELD_NAME, error.getRule().getRuleIdentifier());
    assertEquals(ValidationRuleType.IN_RANGE, error.getRule().getType());
    assertNotNull(error.getMessage());
    assertEquals("FieldName 1 is less than MinValue 2", error.getMessage());
  }

  @Test
  public void InRange_error_max() {
    TestObject obj =
        new TestObject() {
          {
            setLongValue(3L);
          }
        };

    ValidationRule<TestObject> rule =
        new InRangeRule<TestObject, Long>(FIELD_NAME, TestObject::getLongValue, null, 2L);

    ValidationError error = rule.validate(obj);

    assertNotNull(error);
    assertEquals(FIELD_NAME, error.getRule().getRuleIdentifier());
    assertEquals(ValidationRuleType.IN_RANGE, error.getRule().getType());
    assertNotNull(error.getMessage());
    assertEquals("FieldName 3 is greater than 2", error.getMessage());
  }

  @Test
  public void InRange_error_max_with_names() {
    TestObject obj =
        new TestObject() {
          {
            setLongValue(3L);
          }
        };

    ValidationRule<TestObject> rule =
        new InRangeRule<TestObject, Long>(
            FIELD_NAME, TestObject::getLongValue, null, 2L, null, "MaxValue");

    ValidationError error = rule.validate(obj);

    assertNotNull(error);
    assertEquals(FIELD_NAME, error.getRule().getRuleIdentifier());
    assertEquals(ValidationRuleType.IN_RANGE, error.getRule().getType());
    assertNotNull(error.getMessage());
    assertEquals("FieldName 3 is greater than MaxValue 2", error.getMessage());
  }
}
