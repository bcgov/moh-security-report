package ca.bc.gov.health.monthend;

import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.database.entity.MonthendStatusCodes;
import ca.bc.gov.health.database.entity.ProvinceMonthendStatus;
import ca.bc.gov.health.database.entity.ProvincesTerritories;
import ca.bc.gov.health.report.BaseReportBuilder;
import ca.bc.gov.health.report.model.MEBalRptProcessorViewModel;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.ParameterMode;
import jakarta.persistence.Persistence;
import jakarta.persistence.Query;
import jakarta.persistence.StoredProcedureQuery;
import jakarta.persistence.TypedQuery;
import java.nio.file.Files;
import java.nio.file.Path;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.stream.Collectors;
import moh.hoopc.util.PDFHelper;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import org.eclipse.persistence.config.PersistenceUnitProperties;
import org.junit.jupiter.api.AfterEach;
import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.MockitoAnnotations;

public class GetMonthEndStatusesITTest {

  private EntityManager em;

  @BeforeEach
  public void initEm() {
    MockitoAnnotations.initMocks(this);
    Properties pros = new Properties();
    pros.setProperty(
        PersistenceUnitProperties.ECLIPSELINK_PERSISTENCE_XML, "META-INF/persistence-test.xml");
    EntityManagerFactory emf = Persistence.createEntityManagerFactory("hoopc-junit", pros);
    em = emf.createEntityManager();
  }

  @AfterEach
  public void closeEm() {
    em.close();
  }

  @Test
  public void testGetMonthEndStatuses() {

    StoredProcedureQuery query =
        em.createStoredProcedureQuery("HOOPC2_MONTHEND.GetMonthEndStatuses");
    query.registerStoredProcedureParameter("pv_userID", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_sessionID", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter(
        "pc_monthEndStatuses", void.class, ParameterMode.REF_CURSOR);
    query.registerStoredProcedureParameter("pn_resultCode", Integer.class, ParameterMode.OUT);
    query.registerStoredProcedureParameter("pv_message", String.class, ParameterMode.OUT);

    query.execute();
    System.out.println("pn_resultCode: " + query.getOutputParameterValue("pn_resultCode"));
    System.out.println("pv_message: " + query.getOutputParameterValue("pv_message"));

    List<Object[]> resultList = query.getResultList();
    Map<String, String> map =
        resultList.stream().collect(Collectors.toMap(t -> t[0].toString(), t -> t[1].toString()));

    assertEquals(12, resultList.size());
    assertEquals(12, map.size());

    System.out.println("resultList.size: " + resultList.size());
    System.out.println("map: " + map);
  }

  @Test
  public void testBalanceReport() throws Exception {

    StoredProcedureQuery query = em.createStoredProcedureQuery("HOOPC2_REPORTS.PreProcessRep0001");
    query.registerStoredProcedureParameter("pv_provincesList", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_mustBalanceFlag", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_userID", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_sessionID", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_reportReqID", Integer.class, ParameterMode.OUT);
    query.registerStoredProcedureParameter("pv_ReportFileName", String.class, ParameterMode.OUT);
    query.registerStoredProcedureParameter("pn_resultCode", Integer.class, ParameterMode.OUT);
    query.registerStoredProcedureParameter("pv_message", String.class, ParameterMode.OUT);

    query.setParameter("pv_userID", "JUnitTest");
    query.setParameter("pv_provincesList", "AB,BC,ON");

    query.execute();
    System.out.println("pn_resultCode: " + query.getOutputParameterValue("pn_resultCode"));
    System.out.println("pv_message: " + query.getOutputParameterValue("pv_message"));
    System.out.println("pv_reportReqID: " + query.getOutputParameterValue("pv_reportReqID"));
    System.out.println("pv_ReportFileName: " + query.getOutputParameterValue("pv_ReportFileName"));

    List<MEBalRptProcessorViewModel> resultList =
        em.createNamedQuery(
                "DummyMonthEndReportEntity.fetchRecordsMEBalRptProcessor",
                MEBalRptProcessorViewModel.class)
            .setParameter(1, query.getOutputParameterValue("pv_reportReqID"))
            .getResultList();
    System.out.println("resultList: " + resultList);

    // You can mock data if you just want to test the report and not the PL/SQL.
    //    List<MEBalRptProcessorViewModel> resultList = new ArrayList<>();
    //    resultList.add(new MEBalRptProcessorViewModel(new Date(), new Date(), "province",
    // BigInteger.TEN, BigInteger.ZERO, BigInteger.ONE, BigInteger.ZERO));
    //    resultList.add(new MEBalRptProcessorViewModel(new Date(), new Date(), "province",
    // BigInteger.TEN, BigInteger.ZERO, BigInteger.ONE, BigInteger.ZERO));
    byte[] pdfData = createPdfReport(resultList);
    assertTrue(new String(pdfData).contains("PDF"));

//    Path path = Files.createTempFile("testBalanceReport", ".pdf");
//    Files.write(path, pdfData);
//    Process p = Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + path);
//    p.waitFor();
  }

  @Test
  public void queryTest() {
    Query query =
        em.createQuery(
            "SELECT t FROM MonthendStatusTransitions t WHERE t.fromMesId.statusCode = :currentStatus AND t.toMesId.statusCode = :targetStatus AND t.rtsId.typeCode = :rts");
    query.setParameter("currentStatus", "NOTSTARTED");
    query.setParameter("targetStatus", "SCHEDULED");
    query.setParameter("rts", "RES");
    for (Object object : query.getResultList()) {
      System.out.println(object);
    }
  }

  @Test
  public void queryTest2() {
    TypedQuery<ProvinceMonthendStatus> query =
        em.createQuery(
            "SELECT s FROM ProvinceMonthendStatus s WHERE s.rtsId.typeCode = :rts AND s.pteId.provinceCode IN :selectedProvinces",
            ProvinceMonthendStatus.class);
    query.setParameter("rts", "RES");
    query.setParameter("selectedProvinces", Arrays.asList("MB", "AB"));
    List<ProvinceMonthendStatus> resultList = query.getResultList();
    System.out.println(resultList);
  }

  @Test
  public void queryTest3() {
    TypedQuery<ProvinceMonthendStatus> namedQuery =
        em.createNamedQuery("ProvinceMonthendStatus.findByRts", ProvinceMonthendStatus.class);
    namedQuery.setParameter("rtsTypeCode", "RES");
    List<ProvinceMonthendStatus> resultList = namedQuery.getResultList();
    Map<ProvincesTerritories, MonthendStatusCodes> temp = new HashMap<>();
    for (ProvinceMonthendStatus status : resultList) {
      temp.put(status.getPteId(), status.getMesId());
    }
    System.out.println(temp);
  }

  @Test
  public void queryTest4() throws Exception {
    StoredProcedureQuery query =
        em.createStoredProcedureQuery("HOOPC2_REPREPOS.getProvReportRequests");
    query.registerStoredProcedureParameter("pv_ReportIDCode", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_ResidencyType", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_ProvinceList", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_BillingPeriodCode", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter(
        "pc_ReportRequests", void.class, ParameterMode.REF_CURSOR);
    query.registerStoredProcedureParameter("pv_userID", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_sessionID", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pn_resultCode", Integer.class, ParameterMode.OUT);
    query.registerStoredProcedureParameter("pv_message", String.class, ParameterMode.OUT);

    query.setParameter("pv_ReportIDCode", "HOOPCR0004");
    query.setParameter("pv_ResidencyType", "RES");
    query.setParameter("pv_ProvinceList", "MB,NB");
    query.setParameter("pv_BillingPeriodCode", "202103");

    query.execute();
    System.out.println("pn_resultCode: " + query.getOutputParameterValue("pn_resultCode"));
    System.out.println("pv_message: " + query.getOutputParameterValue("pv_message"));

    List<Object[]> resultList = query.getResultList();
    for (Object[] object : resultList) {
      System.out.println(Arrays.toString(object));
    }
    List<byte[]> reportData = new ArrayList<byte[]>();
    for (Object[] request : resultList) {
      StoredProcedureQuery query2 = em.createStoredProcedureQuery("HOOPC2_REPREPOS.RetrieveReport");
      query2.registerStoredProcedureParameter(
          "pn_reportRequestID", Integer.class, ParameterMode.IN);
      query2.registerStoredProcedureParameter("pv_dataFormat", String.class, ParameterMode.IN);
      query2.registerStoredProcedureParameter("pv_userID", String.class, ParameterMode.IN);
      query2.registerStoredProcedureParameter("pv_sessionID", String.class, ParameterMode.IN);
      query2.registerStoredProcedureParameter("pn_lockSeqNum", Integer.class, ParameterMode.OUT);
      query2.registerStoredProcedureParameter("ph_reportBlob", byte[].class, ParameterMode.OUT);
      query2.registerStoredProcedureParameter("pn_resultCode", Integer.class, ParameterMode.OUT);
      query2.registerStoredProcedureParameter("pv_message", String.class, ParameterMode.OUT);

      query2.setParameter("pn_reportRequestID", request[0]);
      query2.setParameter("pv_dataFormat", "PDF");
      query2.setParameter("pv_userID", "JUnitTest");
      query2.setParameter("pv_sessionID", "");

      query2.execute();

      byte[] pdfData = (byte[]) query2.getOutputParameterValue("ph_reportBlob");
      reportData.add(pdfData);
    }

    byte[] lOutputBytes;
    if (reportData.size() > 1) {
      lOutputBytes = PDFHelper.mergePDFDocs(reportData);
    } else {
      lOutputBytes = (byte[]) reportData.get(0);
    }

//    Path path = Files.createTempFile("queryTest4", ".pdf");
//    Files.write(path, lOutputBytes);
//    Process p = Runtime.getRuntime().exec("rundll32 url.dll,FileProtocolHandler " + path);
//    p.waitFor();
  }

  @Test
  public void testAdvanceMonthEndStatus() {
    StoredProcedureQuery query =
        em.createStoredProcedureQuery("HOOPC2_MONTHEND.AdvanceMonthEndStatus");
    query.registerStoredProcedureParameter("pv_provinceCode", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_currentStatus", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_transitionCause", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_userID", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_sessionID", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pn_resultCode", Integer.class, ParameterMode.OUT);
    query.registerStoredProcedureParameter("pv_message", String.class, ParameterMode.OUT);

    query.setParameter("pv_provinceCode", "MB");
    query.setParameter("pv_currentStatus", "BATCHDONE");
    query.setParameter("pv_transitionCause", "SUCCESS");

    query.execute();
    System.out.println("pn_resultCode: " + query.getOutputParameterValue("pn_resultCode"));
    System.out.println("pv_message: " + query.getOutputParameterValue("pv_message"));
  }

  byte[] createPdfReport(List<MEBalRptProcessorViewModel> balanceInvoiceClaims) {
    Map<String, Object> parameters = new HashMap<>();
    if (!balanceInvoiceClaims.isEmpty()) {
      parameters.put("startPeriod", balanceInvoiceClaims.get(0).getStartDate());
      parameters.put("endPeriod", balanceInvoiceClaims.get(0).getEndDate());
    }

    parameters.put("noRecordFound", "");
    return invokeJasper(balanceInvoiceClaims, parameters, "hoopcr0001");
  }

  public static byte[] invokeJasper(
      List<?> data, Map<String, Object> parameters, String reportFilename) {
    try {
      JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(data);
      JasperDesign jasDesign =
          JRXmlLoader.load(
              BaseReportBuilder.class
                  .getClassLoader()
                  .getResourceAsStream(
                      MessageFormat.format(GlobalConstants.REPORT_TEMPLATE, reportFilename)));
      JasperReport jasReport = JasperCompileManager.compileReport(jasDesign);
      JasperPrint jprint = JasperFillManager.fillReport(jasReport, parameters, dataSource);
      return JasperExportManager.exportReportToPdf(jprint);
    } catch (JRException ex) {
      throw new IllegalStateException(ex);
    }
  }
}
