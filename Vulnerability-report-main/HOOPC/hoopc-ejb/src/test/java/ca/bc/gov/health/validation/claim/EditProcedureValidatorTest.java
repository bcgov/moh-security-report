package ca.bc.gov.health.validation.claim;

import ca.bc.gov.health.constants.ClaimDetailCodePurpose;
import ca.bc.gov.health.constants.ClaimDetailCodeType;
import ca.bc.gov.health.database.entity.ClaimDetailCodes;
import ca.bc.gov.health.service.HoopcAppService;
import ca.bc.gov.health.service.viewmodel.AdmissionsViewModel;
import ca.bc.gov.health.service.viewmodel.ClaimViewModel;
import ca.bc.gov.health.service.viewmodel.PatientsViewModel;
import ca.bc.gov.health.validation.ValidationError;
import ca.bc.gov.health.validation.rule.ValidationRuleType;
import java.util.ArrayList;
import java.util.List;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertNull;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Test Validation rules for EDITPROCEDUREINFO in InsertRIClaimValidator.editProcedureInfoRules()
 */
public class EditProcedureValidatorTest {

  // TODO: Setup debug logger
  private static Logger log = LoggerFactory.getLogger(EditProcedureValidatorTest.class);

  @InjectMocks private InsertRIClaimValidator validator;

  @InjectMocks private ClaimValidatorComplexRules complexRules;

  @Mock private HoopcAppService appService;

  @Mock private ClaimValidatorHelper helper;

  @BeforeEach
  public void initMocks() {
    MockitoAnnotations.initMocks(this);
    validator.setComplexRules(complexRules);
  }

  private ClaimViewModel emptyClaim() {
    ClaimViewModel claim = new ClaimViewModel();
    claim.setPatient(new PatientsViewModel());
    claim.setAdmission(new AdmissionsViewModel());
    claim.setProcedureCodes(new String[] {"", "", ""});
    return claim;
  }

  // ===========================================================================================
  // Edit Procedure Info rules # 1
  // ===========================================================================================
  @Test
  public void procedureCode1_Lookup() {
    ClaimViewModel claim = emptyClaim();

    // Negative test
    claim.getProcedureCodes()[0] = "XXX";
    Mockito.when(appService.getClaimDetailCodes("XXX", ClaimDetailCodePurpose.PROCEDURE))
        .thenReturn(new ArrayList<>());
    List<ValidationError> errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect one lookup error
    ValidationError error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Procedure Code #1"))
            .filter(e -> e.getRule().getType().equals(ValidationRuleType.LOOKUP_VALUE))
            .findFirst()
            .orElse(null);
    assertNotNull(error);
    log.info(error.getMessage());

    // Positive test
    claim.getProcedureCodes()[0] = "1512";
    Mockito.when(appService.getClaimDetailCodes("1512", ClaimDetailCodePurpose.PROCEDURE))
        .thenReturn(
            new ArrayList<ClaimDetailCodes>() {
              {
                add(new ClaimDetailCodes());
              }
            });

    errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect no error
    error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Procedure Code #1"))
            .findFirst()
            .orElse(null);
    assertNull(error);
  }

  @Test
  public void procedureCode1_CheckCodingScheme() {
    ClaimViewModel claim = emptyClaim();

    // Negative test
    claim.setIcdCodingScheme("ICD10");
    claim.getProcedureCodes()[0] = "1512";
    Mockito.when(appService.getClaimDetailCodeAnyScheme("1512", ClaimDetailCodePurpose.PROCEDURE))
        .thenReturn(
            new ClaimDetailCodes() {
              {
                setCodeValue("1512");
                setCodeType(ClaimDetailCodeType.ICD09.toString());
              }
            });
    List<ValidationError> errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect one complex error
    ValidationError error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Check Coding Scheme"))
            .filter(e -> e.getRule().getType().equals(ValidationRuleType.COMPLEX))
            .findFirst()
            .orElse(null);
    assertNotNull(error);
    log.info(error.getMessage());

    // Positive test
    claim.setIcdCodingScheme("ICD10");
    claim.getProcedureCodes()[0] = "1AA13HAC2";
    Mockito.when(
            appService.getClaimDetailCodeAnyScheme("1AA13HAC2", ClaimDetailCodePurpose.PROCEDURE))
        .thenReturn(
            new ClaimDetailCodes() {
              {
                setCodeValue("1AA13HAC2");
                setCodeType(ClaimDetailCodeType.ICD10.toString());
              }
            });

    errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect no error
    error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Check Coding Scheme"))
            .findFirst()
            .orElse(null);
    assertNull(error);
  }

  // ===========================================================================================
  // Edit Procedure Info rules # 2
  // ===========================================================================================
  @Test
  public void procedureCode2_Optionnal() {
    ClaimViewModel claim = emptyClaim();

    // Negative test
    claim.getProcedureCodes()[1] = null;
    List<ValidationError> errors = validator.validate(claim);

    // Expect no mandatory error
    ValidationError error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Procedure Code #2"))
            .filter(e -> e.getRule().getType().equals(ValidationRuleType.MANDATORY_VALUE))
            .findFirst()
            .orElse(null);
    assertNull(error);
  }

  @Test
  public void procedureCode2_Lookup() {
    ClaimViewModel claim = emptyClaim();

    // Negative test
    claim.getProcedureCodes()[1] = "XXX";
    Mockito.when(appService.getClaimDetailCodes("XXX", ClaimDetailCodePurpose.PROCEDURE))
        .thenReturn(new ArrayList<>());
    List<ValidationError> errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect one lookup error
    ValidationError error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Procedure Code #2"))
            .filter(e -> e.getRule().getType().equals(ValidationRuleType.LOOKUP_VALUE))
            .findFirst()
            .orElse(null);
    assertNotNull(error);
    log.info(error.getMessage());

    // Positive test
    claim.getProcedureCodes()[1] = "1512";
    Mockito.when(appService.getClaimDetailCodes("1512", ClaimDetailCodePurpose.PROCEDURE))
        .thenReturn(
            new ArrayList<ClaimDetailCodes>() {
              {
                add(new ClaimDetailCodes());
              }
            });

    errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect no error
    error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Procedure Code #2"))
            .findFirst()
            .orElse(null);
    assertNull(error);
  }

  @Test
  public void procedureCode2_CheckCodingScheme() {
    ClaimViewModel claim = emptyClaim();

    // Negative test
    claim.setIcdCodingScheme("ICD10");
    claim.getProcedureCodes()[1] = "1512";
    Mockito.when(appService.getClaimDetailCodeAnyScheme("1512", ClaimDetailCodePurpose.PROCEDURE))
        .thenReturn(
            new ClaimDetailCodes() {
              {
                setCodeValue("1512");
                setCodeType(ClaimDetailCodeType.ICD09.toString());
              }
            });
    List<ValidationError> errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect one complex error
    ValidationError error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Check Coding Scheme"))
            .filter(e -> e.getRule().getType().equals(ValidationRuleType.COMPLEX))
            .findFirst()
            .orElse(null);
    assertNotNull(error);
    log.info(error.getMessage());

    // Positive test
    claim.setIcdCodingScheme("ICD10");
    claim.getProcedureCodes()[1] = "1AA13HAC2";
    Mockito.when(
            appService.getClaimDetailCodeAnyScheme("1AA13HAC2", ClaimDetailCodePurpose.PROCEDURE))
        .thenReturn(
            new ClaimDetailCodes() {
              {
                setCodeValue("1AA13HAC2");
                setCodeType(ClaimDetailCodeType.ICD10.toString());
              }
            });

    errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect no error
    error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Check Coding Scheme"))
            .findFirst()
            .orElse(null);
    assertNull(error);
  }

  // ===========================================================================================
  // Edit Procedure Info rules # 3
  // ===========================================================================================
  @Test
  public void procedureCode3_Optionnal() {
    ClaimViewModel claim = emptyClaim();

    // Negative test
    claim.getProcedureCodes()[2] = null;
    List<ValidationError> errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect no mandatory error
    ValidationError error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Procedure Code #3"))
            .filter(e -> e.getRule().getType().equals(ValidationRuleType.MANDATORY_VALUE))
            .findFirst()
            .orElse(null);
    assertNull(error);
  }

  @Test
  public void procedureCode3_Lookup() {
    ClaimViewModel claim = emptyClaim();

    // Negative test
    claim.getProcedureCodes()[2] = "XXX";
    Mockito.when(appService.getClaimDetailCodes("XXX", ClaimDetailCodePurpose.PROCEDURE))
        .thenReturn(new ArrayList<>());
    List<ValidationError> errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect one lookup error
    ValidationError error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Procedure Code #3"))
            .filter(e -> e.getRule().getType().equals(ValidationRuleType.LOOKUP_VALUE))
            .findFirst()
            .orElse(null);
    assertNotNull(error);
    log.info(error.getMessage());

    // Positive test
    claim.getProcedureCodes()[2] = "1512";
    Mockito.when(appService.getClaimDetailCodes("1512", ClaimDetailCodePurpose.PROCEDURE))
        .thenReturn(
            new ArrayList<ClaimDetailCodes>() {
              {
                add(new ClaimDetailCodes());
              }
            });

    errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect no error
    error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Procedure Code #3"))
            .findFirst()
            .orElse(null);
    assertNull(error);
  }

  @Test
  public void procedureCode3_CheckCodingScheme() {
    ClaimViewModel claim = emptyClaim();

    // Negative test
    claim.setIcdCodingScheme("ICD10");
    claim.getProcedureCodes()[2] = "1512";
    Mockito.when(appService.getClaimDetailCodeAnyScheme("1512", ClaimDetailCodePurpose.PROCEDURE))
        .thenReturn(
            new ClaimDetailCodes() {
              {
                setCodeValue("1512");
                setCodeType(ClaimDetailCodeType.ICD09.toString());
              }
            });
    List<ValidationError> errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect one complex error
    ValidationError error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Check Coding Scheme"))
            .filter(e -> e.getRule().getType().equals(ValidationRuleType.COMPLEX))
            .findFirst()
            .orElse(null);
    assertNotNull(error);
    log.info(error.getMessage());

    // Positive test
    claim.setIcdCodingScheme("ICD10");
    claim.getProcedureCodes()[2] = "1AA13HAC2";
    Mockito.when(
            appService.getClaimDetailCodeAnyScheme("1AA13HAC2", ClaimDetailCodePurpose.PROCEDURE))
        .thenReturn(
            new ClaimDetailCodes() {
              {
                setCodeValue("1AA13HAC2");
                setCodeType(ClaimDetailCodeType.ICD10.toString());
              }
            });

    errors = validator.validate(claim);
    assertNotNull(errors);

    // Expect no error
    error =
        errors.stream()
            .filter(e -> e.getRule().getRuleIdentifier().equals("Check Coding Scheme"))
            .findFirst()
            .orElse(null);
    assertNull(error);
  }
}
