package moh.hoopc.util;

import com.lowagie.text.*;
import com.lowagie.text.pdf.*;
import java.io.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/*
 * Example:
 * ArrayList<byte[]> lDocs = new ArrayList();
 * lDocs.add(new byte[]);
 * lDocs.add(new byte[]);
 * byte[] lOutputBytes = moh.hoopc.util.PDFHelper.mergePDFDocs(lDocs);
 */

public class PDFHelper {

  private static Logger logger = LoggerFactory.getLogger(PDFHelper.class.getName());

  // compress an array of in-memory PDF docs into one document
  public static byte[] mergePDFDocs(java.util.List aPDFFiles) throws Exception {
    ByteArrayOutputStream lOutputBytes = new ByteArrayOutputStream();
    byte[] lReturnedBytes = null;
    Document lOutputDoc = null;
    PdfCopy lWriter = null;
    try {
      for (int i = 0; i < aPDFFiles.size(); i++) {
        PdfReader lReader = new PdfReader((byte[]) aPDFFiles.get(i));
        lReader.consolidateNamedDestinations();
        // we set output document format based on the first doc coming in
        if (i == 0) {
          // step 1: creation of a document-object
          lOutputDoc = new Document(lReader.getPageSizeWithRotation(1));
          // step 2: we create a writer that listens to the document
          lWriter = new PdfCopy(lOutputDoc, lOutputBytes);
          // step 3: we open the document
          lOutputDoc.open();
        }
        int lNumberOfPages = lReader.getNumberOfPages();
        logger.debug("Document " + i + " pages " + lNumberOfPages);
        // copy the each page from this doc to the output doc
        PdfImportedPage lTempPage;
        for (int j = 0; j < lNumberOfPages; ) {
          ++j;
          lTempPage = lWriter.getImportedPage(lReader, j);
          lWriter.addPage(lTempPage);
        }
        // if there is form info, copy that too!
        PRAcroForm lForm = lReader.getAcroForm();
        if (lForm != null) lWriter.copyAcroForm(lReader);
      }
      // merge complete, close the document
      lOutputDoc.close();
      lReturnedBytes = lOutputBytes.toByteArray();
    } catch (Exception e) {
      throw e;
    } finally {
      if (lOutputBytes != null) lOutputBytes.close();
      if (lWriter != null) lWriter.close();
      if (lOutputDoc != null) lOutputDoc.close();
    }
    return lReturnedBytes;
  }

  // merge a View into a PDF document and return it in-memory
  public static byte[] createPDFReport(String aPDFFileName, IDataSource aDataSource)
      throws Throwable {
    logger.info("createPDFReport - start");

    ByteArrayOutputStream lOutputBytes = new ByteArrayOutputStream();
    byte[] lReturnedBytes = null;

    PdfReader lPDFReader = new PdfReader(aPDFFileName);
    PdfStamper lStamper = new PdfStamper(lPDFReader, lOutputBytes);

    AcroFields lAcroFields = lStamper.getAcroFields();
    java.util.HashMap lFieldSet = lAcroFields.getFields();

    try {
      if (aDataSource != null) {
        // get a list of all fields on the form,
        // call our datasource to get the value for the field,
        // then put into the PDF form
        for (java.util.Iterator e = lFieldSet.keySet().iterator(); e.hasNext(); ) {

          String lFieldName = (String) e.next();
          logger.debug(" Set field=" + lFieldName);

          String lValue = aDataSource.getStringValue(lFieldName);

          if (lValue != null) {
            // logger.debug(" Set field=" + lFieldName + " to "+lValue);
            lAcroFields.setField(lFieldName, lValue);
          } else {
            logger.debug(" field " + lFieldName + " is null -ignore");
          }
        }
      }

      lStamper.setFormFlattening(true);
      lStamper.close();
      lReturnedBytes = lOutputBytes.toByteArray();

    } catch (Exception e) {
      e.printStackTrace(System.err);
      throw new Exception("Error creating PDF form '" + aPDFFileName + "': \n " + e);
    } finally {
      if (lStamper != null) lStamper.close();
      if (lOutputBytes != null) lOutputBytes.close();
    }

    logger.debug("		lStamper output bytes " + lOutputBytes.size());
    return lReturnedBytes;
  }
}
