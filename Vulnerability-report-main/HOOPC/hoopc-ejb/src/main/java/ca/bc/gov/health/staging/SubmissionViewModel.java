package ca.bc.gov.health.staging;

import ca.bc.gov.health.database.entity.SaSubmissionDetails;
import ca.bc.gov.health.database.entity.SaSubmissions;
import java.io.Serializable;
import java.util.List;
import java.util.stream.Collectors;

/** The Class SubmissionViewModel. */
public class SubmissionViewModel implements Serializable {
  private static final long serialVersionUID = 5922227066725850966L;

  private SaSubmissions submission;
  private Long totalRecords;
  private Long totalClaims;
  private Long totalAdjs;
  private Long totalReviews;
  private Long totalInvalid;
  private Long totalDisabled;

  /** Instantiates a new submission view model. */
  public SubmissionViewModel() {}

  /**
   * Instantiates a new submission view model.
   *
   * @param submission the submission
   */
  public SubmissionViewModel(SaSubmissions submission) {
    super();
    this.submission = submission;
    this.calcTotals();
  }

  /**
   * Fill the calculated fields. See HPC.HOOPC2_Staging_Area.get_submissions_list stored proc in old
   * HOOPC for logic.
   */
  protected void calcTotals() {
    // totalRecours is detail count
    totalRecords = Long.valueOf(submission.getTotalNumberDetails());

    // totalDisabled is number of disabled records
    totalDisabled =
        submission.getSaSubmissionDetailsList().stream()
            .filter(d -> d.getDisabledFlag().equals("Y"))
            .count();

    List<SaSubmissionDetails> enabledDetails =
        submission.getSaSubmissionDetailsList().stream()
            .filter(d -> d.getDisabledFlag().equals("N"))
            .collect(Collectors.toList());

    // totalClaims is number of claims with no adjustments
    totalClaims = enabledDetails.stream().filter(s -> s.getAdjFlag().equals("N")).count();

    // totalAdjs is number of claims with adjustments
    totalAdjs = enabledDetails.stream().filter(s -> s.getAdjFlag().equals("Y")).count();

    // totalReviews is number of claims with reviews
    totalReviews = enabledDetails.stream().filter(s -> s.getReviewFlag().equals("Y")).count();

    // totalInvalid is number of claims without valid flag
    totalInvalid = enabledDetails.stream().filter(s -> !s.getValidFlag().equals("Y")).count();
  }

  public SaSubmissions getSubmission() {
    return submission;
  }

  public Long getTotalRecords() {
    return totalRecords;
  }

  public Long getTotalClaims() {
    return totalClaims;
  }

  public Long getTotalAdjs() {
    return totalAdjs;
  }

  public Long getTotalReviews() {
    return totalReviews;
  }

  public Long getTotalInvalid() {
    return totalInvalid;
  }

  public Long getTotalDisabled() {
    return totalDisabled;
  }

  public Boolean getApproveFlag() {
    return submission != null ? "Y".equals(submission.getApproveFlag()) : null;
  }

  public void setApproveFlag(Boolean approveFlag) {
    if (submission != null) {
      submission.setApproveFlag(approveFlag ? "Y" : "N");
    }
  }

  public Boolean getRejectFlag() {
    return submission != null ? "Y".equals(submission.getRejectFlag()) : null;
  }

  public void setRejectFlag(Boolean rejectFlag) {
    if (submission != null) {
      submission.setRejectFlag(rejectFlag ? "Y" : "N");
    }
  }

  public Boolean getResetFlag() {
    return submission != null ? "Y".equals(submission.getResetFlag()) : null;
  }

  public void setResetFlag(Boolean resetFlag) {
    if (submission != null) {
      submission.setResetFlag(resetFlag ? "Y" : "N");
    }
  }

  public Boolean getValidFlag() {
    return submission != null ? "Y".equals(submission.getValidFlag()) : null;
  }
}
