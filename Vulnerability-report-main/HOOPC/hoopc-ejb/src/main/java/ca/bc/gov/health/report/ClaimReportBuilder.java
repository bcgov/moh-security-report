package ca.bc.gov.health.report;

import ca.bc.gov.health.constants.GlobalConstants;
import static ca.bc.gov.health.constants.GlobalConstants.NRES_RESIDENCY_TYPE;
import static ca.bc.gov.health.constants.GlobalConstants.RES_RESIDENCY_TYPE;
import ca.bc.gov.health.database.entity.ProvincesTerritories;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.exception.HoopcRuntimeException;
import ca.bc.gov.health.report.model.ClaimReportModel;
import ca.bc.gov.health.report.model.ClaimReportViewModel;
import jakarta.inject.Named;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.Serializable;
import java.text.MessageFormat;
import java.util.List;
import org.apache.pdfbox.io.MemoryUsageSetting;
import org.apache.pdfbox.multipdf.PDFMergerUtility;

/** The Class ClaimReportBuilder. */
@Named("ClaimReportBuilder")
public class ClaimReportBuilder extends BaseReportBuilder<ClaimReportModel>
    implements Serializable {

  private static final long serialVersionUID = -3254125310388772428L;

  /**
   * Builds the report.
   *
   * @param viewModel the view model
   * @return the byte[]
   * @throws HoopcException the hoopc exception
   */
  private byte[] buildReport(ClaimReportViewModel viewModel) throws HoopcException {
    viewModel.setReportName(reportTemplate);

    if (viewModel.getReportFormat().equals("CSV")) {
      List<String> reportDataSource = reportService.loadDataCSV(viewModel);
      return buildCSV(reportDataSource);

    } else { // PDF
      List<ClaimReportModel> reportDataSource = reportService.loadData(viewModel);
      setDefaultReportParameters(viewModel, reportDataSource);
      return buildPDF(reportDataSource);
    }
  }

  /**
   * Generate report.
   *
   * @param viewModel the view model
   * @return the byte[]
   * @throws HoopcException the hoopc exception
   */
  public byte[] generateReport(ClaimReportViewModel viewModel) throws HoopcException {
    if (viewModel.getReportType().equals(GlobalConstants.REPORT_ABBREVIATED)) {
      viewModel.setAdHocFlag("Y");
    }

    if (viewModel.getReportType().equals(GlobalConstants.REPORT_DETAILED)) {
      return buildDetailledReport(viewModel);

    } else if (viewModel.getReportType().equals(GlobalConstants.REPORT_ABBREVIATED)) {
      return buildAbbreviatedReport(viewModel);
    }
    return new byte[0];
  }

  private byte[] buildAbbreviatedReport(ClaimReportViewModel viewModel) throws HoopcException {
    if (viewModel.getResidencyType().equals(RES_RESIDENCY_TYPE)) {
      if (viewModel.getClaimType().equals(GlobalConstants.REPORT_INPATIENT)) {
        return buildAbbreviatedResInpatientClaimReport(viewModel);

      } else if (viewModel.getClaimType().equals(GlobalConstants.REPORT_OUTPATIENT)) {
        return buildAbbreviatedResOutpatientClaimReport(viewModel);

      } else if (viewModel.getClaimType().equals(GlobalConstants.REPORT_BOTH)) {
        byte[] outpatReport = buildAbbreviatedResInpatientClaimReport(viewModel);
        byte[] inpatReport = buildAbbreviatedResOutpatientClaimReport(viewModel);
        viewModel.setClaimType(GlobalConstants.REPORT_BOTH);
        return mergeByteArrays(viewModel, outpatReport, inpatReport);
      }
    } else if (viewModel.getResidencyType().equals(NRES_RESIDENCY_TYPE)) {
      if (viewModel.getClaimType().equals(GlobalConstants.REPORT_INPATIENT)) {
        return buildAbbreviatedNonResInpatientClaimReport(viewModel);

      } else if (viewModel.getClaimType().equals(GlobalConstants.REPORT_OUTPATIENT)) {
        return buildAbbreviatedNonResOutpatientClaimReport(viewModel);

      } else if (viewModel.getClaimType().equals(GlobalConstants.REPORT_BOTH)) {
        byte[] outpatReport = buildAbbreviatedNonResInpatientClaimReport(viewModel);
        byte[] inpatReport = buildAbbreviatedNonResOutpatientClaimReport(viewModel);
        viewModel.setClaimType(GlobalConstants.REPORT_BOTH);
        return mergeByteArrays(viewModel, outpatReport, inpatReport);
      }
    }
    return new byte[0];
  }

  private byte[] buildDetailledReport(ClaimReportViewModel viewModel) throws HoopcException {
    if (viewModel.getResidencyType().equals(RES_RESIDENCY_TYPE)) {
      if (viewModel.getClaimType().equals(GlobalConstants.REPORT_INPATIENT)) {
        return buildDetailedResInpatientClaimReport(viewModel);

      } else if (viewModel.getClaimType().equals(GlobalConstants.REPORT_OUTPATIENT)) {
        return buildDetailedOutpatientClaimReport(viewModel);

      } else if (viewModel.getClaimType().equals(GlobalConstants.REPORT_BOTH)) {
        byte[] outpatReport = buildDetailedOutpatientClaimReport(viewModel);
        byte[] inpatReport = buildDetailedResInpatientClaimReport(viewModel);
        viewModel.setClaimType(GlobalConstants.REPORT_BOTH);
        return mergeByteArrays(viewModel, outpatReport, inpatReport);
      }
    } else if (viewModel.getResidencyType().equals(NRES_RESIDENCY_TYPE)) {
      if (viewModel.getClaimType().equals(GlobalConstants.REPORT_INPATIENT)) {
        return buildDetailedNonResInpatientClaimReport(viewModel);

      } else if (viewModel.getClaimType().equals(GlobalConstants.REPORT_OUTPATIENT)) {
        return buildDetailedOutpatientClaimReport(viewModel);

      } else if (viewModel.getClaimType().equals(GlobalConstants.REPORT_BOTH)) {
        byte[] outpatReport = buildDetailedOutpatientClaimReport(viewModel);
        byte[] inpatReport = buildDetailedNonResInpatientClaimReport(viewModel);
        viewModel.setClaimType(GlobalConstants.REPORT_BOTH);
        return mergeByteArrays(viewModel, outpatReport, inpatReport);
      }
    }
    return new byte[0];
  }

  private byte[] mergeByteArrays(
      ClaimReportViewModel viewModel, byte[] outpatReport, byte[] inpatReport) {
    if (viewModel.getReportFormat().equals("CSV")) {
      return mergeCSVs(inpatReport, outpatReport);
    } else {
      return mergePDFs(inpatReport, outpatReport);
    }
  }

  /**
   * Combines 2 or more pdf files (in byte[]) and returns a merged pdf (in byte[]);
   *
   * @param pdfs
   * @return
   */
  private byte[] mergePDFs(byte[]... pdfs) {
    PDFMergerUtility merger = new PDFMergerUtility();

    for (byte[] pdf : pdfs) {
      merger.addSource(new ByteArrayInputStream(pdf));
    }

    ByteArrayOutputStream out = new ByteArrayOutputStream();
    merger.setDestinationStream(out);
    try {
      merger.mergeDocuments(MemoryUsageSetting.setupMainMemoryOnly());
    } catch (IOException e) {
      throw new HoopcRuntimeException("Error while merging pdfs", e);
    }

    return out.toByteArray();
  }

  private byte[] mergeCSVs(byte[]... csv) {
    ByteArrayOutputStream myStream = new ByteArrayOutputStream();
    if (csv != null && csv.length > 0) {
      for (int i = 0; i < csv.length; i++) {
        try {
          myStream.write(csv[i]);
        } catch (IOException e) {
          throw new HoopcRuntimeException("Error while merging csvs", e);
        }
      }
      return myStream.toByteArray();
    }
    return new byte[0];
  }

  /**
   * Builds the detailed non res inpatient claim report.
   *
   * @param viewModel the view model
   * @return the byte[]
   * @throws HoopcException the hoopc exception
   */
  private byte[] buildDetailedNonResInpatientClaimReport(ClaimReportViewModel viewModel)
      throws HoopcException {
    viewModel.setClaimType(GlobalConstants.REPORT_INPATIENT);
    reportTemplate = "hoopcr0006ah";
    return buildReport(viewModel);
  }

  /**
   * Builds the detailed res inpatient claim report.
   *
   * @param viewModel the view model
   * @return the byte[]
   * @throws HoopcException the hoopc exception
   */
  private byte[] buildDetailedResInpatientClaimReport(ClaimReportViewModel viewModel)
      throws HoopcException {
    viewModel.setClaimType(GlobalConstants.REPORT_INPATIENT);
    reportTemplate = "hoopcr0016ah";
    return buildReport(viewModel);
  }

  /**
   * Builds the detailed outpatient claim report.
   *
   * @param viewModel the view model
   * @return the byte[]
   * @throws HoopcException the hoopc exception
   */
  private byte[] buildDetailedOutpatientClaimReport(ClaimReportViewModel viewModel)
      throws HoopcException {
    viewModel.setClaimType(GlobalConstants.REPORT_OUTPATIENT);
    reportTemplate = "hoopcr0007ah";
    return buildReport(viewModel);
  }

  /**
   * Builds the abbreviated non res inpatient claim report.
   *
   * @param viewModel the view model
   * @return the byte[]
   * @throws HoopcException the hoopc exception
   */
  public byte[] buildAbbreviatedNonResInpatientClaimReport(ClaimReportViewModel viewModel)
      throws HoopcException {
    viewModel.setClaimType(GlobalConstants.REPORT_INPATIENT);
    reportTemplate = "hoopcr0013ah";
    return buildReport(viewModel);
  }

  /**
   * Builds the abbreviated non res outpatient claim report.
   *
   * @param viewModel the view model
   * @return the byte[]
   * @throws HoopcException the hoopc exception
   */
  private byte[] buildAbbreviatedNonResOutpatientClaimReport(ClaimReportViewModel viewModel)
      throws HoopcException {
    viewModel.setClaimType(GlobalConstants.REPORT_OUTPATIENT);
    reportTemplate = "hoopcr0014ah";
    return buildReport(viewModel);
  }

  /**
   * Builds the abbreviated res inpatient claim report.
   *
   * @param viewModel the view model
   * @return the byte[]
   * @throws HoopcException the hoopc exception
   */
  private byte[] buildAbbreviatedResInpatientClaimReport(ClaimReportViewModel viewModel)
      throws HoopcException {
    viewModel.setClaimType(GlobalConstants.REPORT_INPATIENT);
    reportTemplate = "hoopcr0018ah";
    return buildReport(viewModel);
  }

  /**
   * Builds the abbreviated res outpatient claim report.
   *
   * @param viewModel the view model
   * @return the byte[]
   * @throws HoopcException the hoopc exception
   */
  private byte[] buildAbbreviatedResOutpatientClaimReport(ClaimReportViewModel viewModel)
      throws HoopcException {
    viewModel.setClaimType(GlobalConstants.REPORT_OUTPATIENT);
    reportTemplate = "hoopcr0019ah";
    return buildReport(viewModel);
  }

  private void setDefaultReportParameters(
      ClaimReportViewModel viewModel, List<ClaimReportModel> reportDataSource) {
    reportParameters.put(
        GlobalConstants.REPORT_PARAM_CLAIM_TYPE, ucfirst(viewModel.getClaimType()));

    // Set residency type to jasper parameters
    if (viewModel.getResidencyType().equals(NRES_RESIDENCY_TYPE)) {
      reportParameters.put(
          GlobalConstants.REPORT_PARAM_RESIDENCY_TYPE,
          GlobalConstants.LCASE_NONRESIDENT_RESIDENCY_TYPE);
    } else if (viewModel.getResidencyType().equals(RES_RESIDENCY_TYPE)) {
      reportParameters.put(
          GlobalConstants.REPORT_PARAM_RESIDENCY_TYPE,
          GlobalConstants.LCASE_RESIDENT_RESIDENCY_TYPE);
    }

    // Set subtitle if health authority is not empty
    if (viewModel.getHealthAuthority() != null && !viewModel.getHealthAuthority().isEmpty()) {
      if (viewModel.getHealthAuthority() != null) {
        reportParameters.put(
            GlobalConstants.REPORT_PARAM_TREATMENT_ENTITY,
            MessageFormat.format(
                GlobalConstants.REPORT_PROV_HA_SUBTITLE_ENTITY, "ALL Health Authority"));
      } else {
        reportParameters.put(
            GlobalConstants.REPORT_PARAM_TREATMENT_ENTITY,
            MessageFormat.format(
                GlobalConstants.REPORT_PROV_HA_SUBTITLE_ENTITY,
                appService.getHealthAuthoritiesByNumber(viewModel.getHealthAuthority()).getName()));
      }
      // Set subtitle if hospital is not empty
    } else if (viewModel.getHospital() != null) {
      if (viewModel.getHospital() != null) {
        reportParameters.put(
            GlobalConstants.REPORT_PARAM_TREATMENT_ENTITY,
            MessageFormat.format(GlobalConstants.REPORT_PROV_HA_SUBTITLE_ENTITY, "ALL Hospitals"));
      } else {
        reportParameters.put(
            GlobalConstants.REPORT_PARAM_TREATMENT_ENTITY,
            MessageFormat.format(
                GlobalConstants.REPORT_PROV_HA_SUBTITLE_ENTITY,
                viewModel.getHospital().replaceFirst(".*\\-", "")));
      }
      // Set subtitle if province is not empty
    } else if (viewModel.getProvince() != null) {
      String treatmentEntity = "";
      ProvincesTerritories province = appService.getProvince(viewModel.getProvince());
      // We found a province
      if (province != null) {
        // In case the report is for residents of BC
        if (viewModel.getResidencyType().equals(RES_RESIDENCY_TYPE)) {
          treatmentEntity =
              MessageFormat.format(GlobalConstants.REPORT_RES_SUBTITLE_ENTITY, province.getName());
          // Or else if it's for non-resident
        } else if (viewModel.getResidencyType().equals(NRES_RESIDENCY_TYPE)) {
          treatmentEntity =
              MessageFormat.format(GlobalConstants.REPORT_NRES_SUBTITLE_ENTITY, province.getName());
        }
      }
      // Then set the subtitle into the parameters
      reportParameters.put(GlobalConstants.REPORT_PARAM_TREATMENT_ENTITY, treatmentEntity);
    }

    // Fill the no result parameter
    if (reportDataSource != null
        && reportDataSource.isEmpty()
        && reportDataSource.get(0).getProvince().isEmpty()) {
      reportParameters.put(
          GlobalConstants.REPORT_PARAM_NO_RECORD,
          reportResourceBundle.getString("report.returns.no.data"));
      // Or else keep the no result label empty
    } else {
      reportParameters.put(GlobalConstants.REPORT_PARAM_NO_RECORD, "");
    }
  }
}
