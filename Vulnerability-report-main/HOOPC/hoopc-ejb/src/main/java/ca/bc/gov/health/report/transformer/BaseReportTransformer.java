package ca.bc.gov.health.report.transformer;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.chrono.ChronoLocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Locale;
import java.util.Map;

/** The Class BaseReportTransformer. */
public class BaseReportTransformer {

  /** Instantiates a new base report transformer. */
  protected BaseReportTransformer() {
    // avoid class instance
  }

  static String datePattern = "yyyy/MM/dd";

  /**
   * Format date.
   *
   * @param format the format
   * @param date the date
   * @return the string
   */
  protected static final String formatDate(String format, ChronoLocalDate date) {
    if (date == null) {
      return "";
    }
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(format, Locale.ENGLISH);
    return formatter.format(date);
  }

  /**
   * Read string.
   *
   * @param record the record
   * @param fieldName the field name
   * @return the string
   */
  protected static String readString(Map<String, Object> record, String fieldName) {
    if (record.get(fieldName) != null) {
      return (String) record.get(fieldName);
    }
    return null;
  }

  /**
   * Read timestamp.
   *
   * @param record the record
   * @param fieldName the field name
   * @return the string
   */
  protected static String readTimestamp(Map<String, Object> record, String fieldName) {
    return readTimestamp(record, fieldName, datePattern);
  }

  /**
   * Read timestamp.
   *
   * @param record the record
   * @param fieldName the field name
   * @param pattern the pattern
   * @return the string
   */
  protected static String readTimestamp(
      Map<String, Object> record, String fieldName, String pattern) {
    if (record.get(fieldName) != null) {
      LocalDate val = ((Timestamp) record.get(fieldName)).toLocalDateTime().toLocalDate();
      return BaseReportTransformer.formatDate(pattern, val);
    }
    return null;
  }

  /**
   * Read big decimal as string.
   *
   * @param record the record
   * @param fieldName the field name
   * @param scale the scale
   * @return the string
   */
  protected static String readBigDecimalAsString(
      Map<String, Object> record, String fieldName, int scale) {
    if (record.get(fieldName) != null) {
      BigDecimal val = (BigDecimal) record.get(fieldName);
      val = val.setScale(scale, RoundingMode.HALF_EVEN);
      return val.toString();
    }
    return null;
  }

  /**
   * Read big decimal.
   *
   * @param record the record
   * @param fieldName the field name
   * @param scale the scale
   * @return the big decimal
   */
  protected static BigDecimal readBigDecimal(
      Map<String, Object> record, String fieldName, int scale) {
    if (record.get(fieldName) != null) {
      BigDecimal val = (BigDecimal) record.get(fieldName);
      return val.setScale(scale, RoundingMode.HALF_EVEN);
    }
    return null;
  }
}
