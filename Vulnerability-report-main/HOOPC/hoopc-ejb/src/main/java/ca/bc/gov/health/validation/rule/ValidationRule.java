package ca.bc.gov.health.validation.rule;

import ca.bc.gov.health.validation.ValidationError;
import java.text.MessageFormat;
import java.util.MissingResourceException;
import java.util.ResourceBundle;
import java.util.function.Function;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Base class for Validation Rule. Those validation are deferred (i.e a rule is first initialized
 * with necessary parameters than they are applied to one T object). Rule parameters must be either
 * lambda functions to access validated object data or fixed constant values.
 *
 * @param <T> Type of object to execute the validation.
 */
public abstract class ValidationRule<T> {
  private static Logger log = LoggerFactory.getLogger(ValidationRule.class);

  // TODO: Inject this
  private static ResourceBundle bundle = ResourceBundle.getBundle("messages");

  protected ValidationRuleType type;
  protected String ruleIdentifier;

  /**
   * Construct a validation rule. Must be called by subclasses constructors.
   *
   * @param type Must be one ValidationRuleType
   * @param ruleIdentifier Can be fieldName for simple rules or ruleName for complex rules.
   */
  public ValidationRule(ValidationRuleType type, String ruleIdentifier) {
    super();
    this.type = type;
    this.ruleIdentifier = ruleIdentifier;
  }

  /**
   * Rule implementation.
   *
   * <p>Per convention, implementers should only return ValidationError if all required data for the
   * rule execution is provided. Should not return ValidationError if mandatory data not provided.
   * <br>
   * Example (LookupRule):
   * <li>Calling lookup(v) if v getter returns a value not found returns a ValidationError.
   * <li>Calling lookup(v) if v getter returns null does not return a ValidationError. A
   *     corresponding MandatoryRule can be used to validate the null value.
   *
   * @param object Object to validate.
   * @return Validation error or null if no errors or if validation not applicable.
   */
  public abstract ValidationError validate(T object);

  /**
   * Utility function to get error messages from properties file.
   *
   * @param key the key
   * @return the message
   */
  public String getMessage(String key) {
    try {
      return bundle.getString(key);
    } catch (MissingResourceException e) {
      String errorText = MessageFormat.format("[{0}] key not found in properties file.", key);
      log.error(errorText);
      return errorText;
    }
  }

  /**
   * NullSafe Generic value getter. Use this in validators for consistent access.
   * <P>
   * This is a pimped version of <code>getter.apply(object)<code> that also:
   * <li>transform blank string as null values</li>
   * <li>provides null safe access: return null instead of throwing NullPointerException does not if
   * any null values encountered in multilevel getter</li>
   * </P>
   *
   * @param <T> the generic type
   * @param <R> Type of return value
   * @param getter getter function
   * @param object instance to execute getter.
   * @return the value
   */
  public static <T, R extends Object> R getValue(Function<T, R> getter, T object) {
    try {
      R value = getter.apply(object);
      if (value instanceof String && StringUtils.isBlank((String) value)) {
        // If string && blank
        return null;
      }
      return value;
    } catch (NullPointerException e) {
      // NullSafe access
      // Will act as if value is null
      return null;
    } catch (Exception e) {
      // Other exceptions are considered programming errors
      log.error("Error calling lambda getter in rule", e);
      // Will act as if value is null
      return null;
    }
  }

  public String getRuleIdentifier() {
    return ruleIdentifier;
  }

  public ValidationRuleType getType() {
    return type;
  }
}
