package ca.bc.gov.health.importfile;

import ca.bc.gov.health.database.ejb.ClaimTypesFacade;
import ca.bc.gov.health.database.ejb.ResidencyTypesFacadeLocal;
import ca.bc.gov.health.database.entity.ApplicationUsers;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.service.ClaimServiceLocal;
import ca.bc.gov.health.service.CurrentUser;
import ca.bc.gov.health.service.viewmodel.AdmissionsViewModel;
import ca.bc.gov.health.service.viewmodel.ClaimViewModel;
import ca.bc.gov.health.service.viewmodel.PatientsViewModel;
import jakarta.ejb.EJB;
import jakarta.ejb.Stateless;
import jakarta.enterprise.inject.Instance;
import jakarta.inject.Inject;
import java.math.BigDecimal;
import java.text.MessageFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import moh.common.business.services.utils.Helper;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Stateless
public class HopsitalClaimCreator {

  @EJB ClaimServiceLocal claimService;

  @EJB ClaimTypesFacade claimTypesFacade;

  @EJB ResidencyTypesFacadeLocal residencyTypesFacade;

  @Inject @CurrentUser Instance<ApplicationUsers> user;

  private static final Logger LOGGER = LoggerFactory.getLogger(HopsitalClaimCreator.class);

  public void createClaims(String filename, List<String> lines) throws HoopcException {
    for (int i = 0; i < lines.size(); i++) {
      String fileType = determineFileType(filename);
      ClaimViewModel claim = null;
      if (fileType.equals(HICInp.fnInpCode)) {
        claim = convertInpatientClaim(filename, lines.get(i), i);
      } else if (fileType.equals(HICOutp.fnOutpCode)) {
        claim = convertOutpatientClaim(filename, lines.get(i), i);
      } else {
        throw new IllegalStateException("File type must be one of IN or OUT.");
      }
      claimService.createClaim(claim);
    }
  }

  private String determineFileType(String filename) throws IllegalArgumentException {
    String fileType = null;
    if (filename
        .substring(HICOutp.fnStrt, HICOutp.fnEnd + 1)
        .equalsIgnoreCase(HICOutp.fnOutpCode)) {

      fileType = HICOutp.fnOutpCode.toUpperCase();

    } else if (filename
        .substring(HICInp.fnStrt, HICInp.fnEnd + 1)
        .equalsIgnoreCase(HICInp.fnInpCode)) {

      fileType = HICInp.fnInpCode.toUpperCase();

    } else {
      throw new IllegalArgumentException(
          MessageFormat.format("Filename must start with 'H' or 'IN' but was '{0}'.", filename));
    }
    return fileType;
  }

  ClaimViewModel convertOutpatientClaim(String filename, String inputLine, int lineCnt) {
    String tmpDate;
    ClaimViewModel claim;

    claim = new ClaimViewModel();
    PatientsViewModel patientsViewModel = new PatientsViewModel();
    claim.setPatient(patientsViewModel);
    claim.setResidencyType(residencyTypesFacade.findByType("NRES"));
    claim.setClaimType(claimTypesFacade.getOutpatientType());
    claim.setStatusCode("INVALID");

    try {

      // ************
      // * Birth Date
      // ************
      tmpDate = (inputLine.substring(HICOutp.ColStrt_06, HICOutp.ColEnd_06 + 1)).trim();
      claim
          .getPatient()
          .setBirthDate(
              dateToLocalDate(
                  convertToDate(
                      tmpDate, HICOutp.BIRTH_DATE_FORMAT, HICOutp.ColName_06, null, false)));

      // **************
      // * Service Date
      // **************
      tmpDate = (inputLine.substring(HICOutp.ColStrt_08, HICOutp.ColEnd_08 + 1)).trim();
      claim.setServiceDate(
          dateToLocalDate(
              convertToDate(
                  tmpDate, HICOutp.SERVICE_DATE_FORMAT, HICOutp.ColName_08, null, false)));

      // ***********************
      // * Insurance Expiry Date
      // ***********************
      try {
        tmpDate = (inputLine.substring(HICOutp.ColStrt_13, HICOutp.ColEnd_13 + 1)).trim();
        if (tmpDate.trim().length() != 0) {
          claim
              .getPatient()
              .setCardExpiryDate(
                  dateToLocalDate(
                      convertToDate(
                          tmpDate,
                          HICOutp.PHN_EXPIRY_DATE_FORMAT,
                          HICOutp.ColName_13,
                          null,
                          false)));
        } else if ((tmpDate.trim().length() == 0)) {
          claim
              .getPatient()
              .setCardExpiryDate(
                  dateToLocalDate(convertToDate(tmpDate, null, HICOutp.ColName_13, null, false)));
        }
      } catch (IndexOutOfBoundsException ioub1) {
        claim.getPatient().setCardExpiryDate(null);
      }

      claim.setHospitalNumberAndName(
          inputLine.substring(HICOutp.ColStrt_01, HICOutp.ColEnd_01 + 1).trim());
      claim
          .getPatient()
          .setProvince(inputLine.substring(HICOutp.ColStrt_02, HICOutp.ColEnd_02 + 1).trim());
      claim
          .getPatient()
          .setInsuranceCardNumber(
              inputLine.substring(HICOutp.ColStrt_03, HICOutp.ColEnd_03 + 1).trim());
      claim
          .getPatient()
          .setLastName(inputLine.substring(HICOutp.ColStrt_04, HICOutp.ColEnd_04 + 1).trim());
      claim
          .getPatient()
          .setFirstName(inputLine.substring(HICOutp.ColStrt_05, HICOutp.ColEnd_05 + 1).trim());
      claim
          .getPatient()
          .setSexCode(inputLine.substring(HICOutp.ColStrt_07, HICOutp.ColEnd_07 + 1).trim().toUpperCase());
      claim.setServiceCodeValue(
          inputLine.substring(HICOutp.ColStrt_09, HICOutp.ColEnd_09 + 1).trim());
      claim.setTotalAmountClaimed(
          convertToBigDecimal(
              inputLine.substring(HICOutp.ColStrt_10, HICOutp.ColEnd_10 + 1).trim()));

      try {
        claim.setHospitalNotes(
            inputLine.substring(HICOutp.ColStrt_11, HICOutp.ColEnd_11 + 1).trim());
      } catch (IndexOutOfBoundsException iobe) {
        claim.setHospitalNotes("");
      }

      // *************************************************************
      // Claim Number and all fields past in in the record can be null
      // *************************************************************
      try {
        claim.setHospitalClaimNumber(
            inputLine.substring(HICOutp.ColStrt_12, HICOutp.ColEnd_12 + 1).trim());
      } catch (IndexOutOfBoundsException iobe) {
        claim.setHospitalClaimNumber("");
      }

      // ***********************************************************
      // Diagnosis1 and all fields past in in the record can be null
      // ***********************************************************
      try {
        claim.getDiagnosisCodes()[0] =
            inputLine.substring(HICOutp.ColStrt_14, HICOutp.ColEnd_14 + 1).trim();
      } catch (IndexOutOfBoundsException iobe) {
        claim.getDiagnosisCodes()[0] = "";
      }

      // ************************************************************
      // Procedure code 1 is at the end of the record and there is no
      // guarantee it will be padded out to the end of the line
      // ************************************************************
      try {
        String tmpStr = inputLine.substring(HICOutp.ColStrt_15).trim();
        if (tmpStr.length() > HICOutp.ColSize_15) {
          tmpStr = tmpStr.substring(0, HICOutp.ColSize_15);
        }

        claim.getProcedureCodes()[0] = tmpStr;
      } catch (IndexOutOfBoundsException ioub1) {
        claim.getProcedureCodes()[0] = "";
      }

      claim.setImportFileName(filename);
      claim.setImportRowNum(lineCnt);
      claim.setClaimSource("IMPORT");
      claim.setTreatingProvince("BC");
      claim.setUserId(user.get().getApplicationUserid());
      claim.setIcdCodingScheme("ICD10");

    } catch (StringIndexOutOfBoundsException sioobe) {
      LOGGER.error(
          "Record is too short. It must be in a fixed format and hence must be padded out.."
              + sioobe);
      throw new IllegalArgumentException(
          "Record is too short. It must be in a fixed format and hence must be padded out.."
              + sioobe);
    }

    return claim;
  }

  ClaimViewModel convertInpatientClaim(String filename, String inputLine, int lineCnt) {
    String tmpDate;
    String tmpString;
    String tmpAdDate;
    ClaimViewModel claim;

    claim = new ClaimViewModel();
    PatientsViewModel patientsViewModel = new PatientsViewModel();
    claim.setPatient(patientsViewModel);
    AdmissionsViewModel admissionsViewModel = new AdmissionsViewModel();
    claim.setAdmission(admissionsViewModel);
    claim.setResidencyType(residencyTypesFacade.findByType("NRES"));
    claim.setClaimType(claimTypesFacade.getInpatientType());
    claim.setStatusCode("PENDING");

    try {

      // ************
      // * Birth Date
      // ************
      tmpDate = (inputLine.substring(HICInp.ColStrt_11, HICInp.ColEnd_11 + 1)).trim();
      patientsViewModel.setBirthDate(
          dateToLocalDate(
              convertToDate(tmpDate, HICInp.BIRTH_DATE_FORMAT, HICInp.ColName_11, null, false)));

      // ****************
      // * Admission Date
      // ****************
      tmpDate = tmpAdDate = (inputLine.substring(HICInp.ColStrt_16, HICInp.ColEnd_16 + 1)).trim();
      claim
          .getAdmission()
          .setAdmissionDate(
              dateToLocalDate(
                  convertToDate(
                      tmpDate, HICInp.ADMISSION_DATE_FORMAT, HICInp.ColName_16, null, false)));

      // ****************
      // * Discharge Date
      // ****************
      tmpDate = (inputLine.substring(HICInp.ColStrt_17, HICInp.ColEnd_17 + 1)).trim();
      claim
          .getAdmission()
          .setDischargeDate(
              dateToLocalDate(
                  convertToDate(
                      tmpDate, HICInp.DISCHARGE_DATE_FORMAT, HICInp.ColName_17, null, false)));

      // ****************************
      // * High Cost Procedure Date 1
      // ****************************
      tmpDate = (inputLine.substring(HICInp.ColStrt_24, HICInp.ColEnd_24 + 1)).trim();
      claim.getHighCostProcedures()[0].setProcedureDate(
          dateToLocalDate(
              convertToDate(
                  tmpDate,
                  HICInp.HIGH_COST_PROC_DATE_FORMAT1,
                  HICInp.ColName_24,
                  tmpAdDate,
                  true)));

      // ****************************
      // * High Cost Procedure Date 2
      // ****************************
      tmpDate = (inputLine.substring(HICInp.ColStrt_26, HICInp.ColEnd_26 + 1)).trim();
      claim.getHighCostProcedures()[1].setProcedureDate(
          dateToLocalDate(
              convertToDate(
                  tmpDate,
                  HICInp.HIGH_COST_PROC_DATE_FORMAT2,
                  HICInp.ColName_26,
                  tmpAdDate,
                  true)));

      // ****************************
      // * High Cost Procedure Date 3
      // ****************************
      tmpDate = (inputLine.substring(HICInp.ColStrt_28, HICInp.ColEnd_28 + 1)).trim();
      claim.getHighCostProcedures()[2].setProcedureDate(
          dateToLocalDate(
              convertToDate(
                  tmpDate,
                  HICInp.HIGH_COST_PROC_DATE_FORMAT3,
                  HICInp.ColName_28,
                  tmpAdDate,
                  true)));

      // ************************************************************
      // Insurance Expiry Date is at the end of the record and there is no
      // guarantee it will be padded out to the end of the line
      // ************************************************************
      try {
        tmpDate = (inputLine.substring(HICInp.ColStrt_34)).trim();
        if (tmpDate.length() > HICInp.ColSize_34) {
          tmpDate = tmpDate.substring(0, HICInp.ColSize_34);
        }
        if ((tmpDate.trim().length() != 0)) {
          claim
              .getPatient()
              .setCardExpiryDate(
                  dateToLocalDate(
                      convertToDate(
                          tmpDate, HICInp.PHN_EXPIRY_DATE_FORMAT, HICInp.ColName_34, null, false)));
        } else if ((tmpDate.trim().length() == 0)) {
          claim.getPatient().setCardExpiryDate(null);
        }
      } catch (IndexOutOfBoundsException ioub1) {
        claim.getPatient().setCardExpiryDate(null);
      }

      claim.setHospitalNumberAndName(
          inputLine.substring(HICInp.ColStrt_01, HICInp.ColEnd_01 + 1).trim());
      claim
          .getAdmission()
          .setAdmissionNumber(inputLine.substring(HICInp.ColStrt_02, HICInp.ColEnd_02 + 1).trim());
      claim
          .getPatient()
          .setLastName(inputLine.substring(HICInp.ColStrt_03, HICInp.ColEnd_03 + 1).trim());
      claim
          .getPatient()
          .setFirstName(inputLine.substring(HICInp.ColStrt_04, HICInp.ColEnd_04 + 1).trim());
      claim
          .getPatient()
          .setAddress1(inputLine.substring(HICInp.ColStrt_05, HICInp.ColEnd_05 + 1).trim());
      claim
          .getPatient()
          .setAddress2(inputLine.substring(HICInp.ColStrt_06, HICInp.ColEnd_06 + 1).trim());
      claim
          .getPatient()
          .setCity(inputLine.substring(HICInp.ColStrt_07, HICInp.ColEnd_07 + 1).trim());
      claim
          .getPatient()
          .setProvince(inputLine.substring(HICInp.ColStrt_08, HICInp.ColEnd_08 + 1).trim());
      claim
          .getPatient()
          .setPostalCode(inputLine.substring(HICInp.ColStrt_09, HICInp.ColEnd_09 + 1).trim());
      claim
          .getPatient()
          .setInsuranceCardNumber(
              inputLine.substring(HICInp.ColStrt_10, HICInp.ColEnd_10 + 1).trim());
      claim
          .getPatient()
          .setSexCode(
              inputLine.substring(HICInp.ColStrt_12, HICInp.ColEnd_12 + 1).trim().toUpperCase());

      claim
          .getAdmission()
          .setTotalDaysStay(
              convertToInteger(
                  inputLine.substring(HICInp.ColStrt_18, HICInp.ColEnd_18 + 1).trim()));
      claim
          .getAdmission()
          .setWardRate(
              convertToInteger(
                  convertToDouble(
                      inputLine.substring(HICInp.ColStrt_19, HICInp.ColEnd_19 + 1).trim())));
      claim.setTotalAmountClaimed(
          convertToBigDecimal(inputLine.substring(HICInp.ColStrt_20, HICInp.ColEnd_20 + 1).trim()));
      claim
          .getPatient()
          .setDeceasedFlag(inputLine.substring(HICInp.ColStrt_21, HICInp.ColEnd_21 + 1).trim());
      claim.setHospitalNotes(inputLine.substring(HICInp.ColStrt_22, HICInp.ColEnd_22 + 1).trim());
      claim.getHighCostProcedures()[0].setCodeValue(
          inputLine.substring(HICInp.ColStrt_23, HICInp.ColEnd_23 + 1).trim());
      claim.getHighCostProcedures()[1].setCodeValue(
          inputLine.substring(HICInp.ColStrt_25, HICInp.ColEnd_25 + 1).trim());
      claim.getHighCostProcedures()[2].setCodeValue(
          inputLine.substring(HICInp.ColStrt_27, HICInp.ColEnd_27 + 1).trim());

      claim.setReasonInBC(inputLine.substring(HICInp.ColStrt_29, HICInp.ColEnd_29 + 1).trim());
      claim.setHospitalClaimNumber(
          inputLine.substring(HICInp.ColStrt_30, HICInp.ColEnd_30 + 1).trim());

      // ********************************************************
      // Use Diagnostic Code ICD10 if exists otherwise use ICD09
      // ********************************************************
      tmpString = inputLine.substring(HICInp.ColStrt_31, HICInp.ColEnd_31 + 1).trim();
      if (tmpString.trim().length() != 0) {
        claim.getDiagnosisCodes()[0] = tmpString;
      } else {
        claim.getDiagnosisCodes()[0] =
            inputLine.substring(HICInp.ColStrt_13, HICInp.ColEnd_13 + 1).trim();
      }

      // *******************************************************
      // Use Procedure Code ICD10 if exists otherwise use ICD09
      // *******************************************************
      try {
        tmpString = inputLine.substring(HICInp.ColStrt_32, HICInp.ColEnd_32 + 1).trim();
        if (tmpString.trim().length() != 0) {
          claim.getProcedureCodes()[0] = tmpString;
        } else {
          claim.getProcedureCodes()[0] =
              inputLine.substring(HICInp.ColStrt_14, HICInp.ColEnd_14 + 1).trim();
        }
      } catch (IndexOutOfBoundsException iobe) {
        claim.getProcedureCodes()[0] =
            inputLine.substring(HICInp.ColStrt_14, HICInp.ColEnd_14 + 1).trim();
      }

      // *******************************************************
      // Use Accident Code ICD10 if exists otherwise use ICD09
      // *******************************************************
      try {
        tmpString = inputLine.substring(HICInp.ColStrt_33, HICInp.ColEnd_33 + 1).trim();
        if (tmpString.trim().length() != 0) {
          claim.setAccidentCode(tmpString);
        } else {
          claim.setAccidentCode(
              inputLine.substring(HICInp.ColStrt_15, HICInp.ColEnd_15 + 1).trim());
        }
      } catch (IndexOutOfBoundsException iobe) {
        claim.setAccidentCode(inputLine.substring(HICInp.ColStrt_15, HICInp.ColEnd_15 + 1).trim());
      }

      claim.setImportFileName(filename);
      claim.setImportRowNum(lineCnt);
      claim.setClaimSource("IMPORT");
      claim.setTreatingProvince("BC");
      claim.setUserId(user.get().getApplicationUserid());
      claim.setIcdCodingScheme("ICD10");

    } catch (StringIndexOutOfBoundsException sioobe) {
      LOGGER.error(
          "Record is too short. It must be in a fixed format and hence must be padded out.."
              + sioobe);
      throw new IllegalArgumentException(
          "Record is too short. It must be in a fixed format and hence must be padded out.."
              + sioobe);
    }

    return claim;
  }

  private static LocalDate dateToLocalDate(Date birthDate) {
    return birthDate == null
        ? null
        : birthDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
  }

  /**
   * Takes a date string in the YYYYMMDD format and changes it to a date
   *
   * @param dateStr Date value as a string type. If the string is empty a null is returned
   * @param dtFormat The format the field is be in.
   * @param fieldName The name of the field being checked.
   * @param baseDt For date comparison purchases. If a date with a mmdd format is passed this
   *     process will use the baseDt to determine a year for the mmdd date.
   * @param mustBeOlder Flag to be used with the baseDt. Determines whether a passed in date must be
   *     greater or less than the baseDt.
   * @return java.util.Date Passed in string convereted to a date.
   * @throws ProcessException
   */
  private static java.util.Date convertToDate(
      String dateStr, String dateFormat, String dateName, String baseDt, boolean mustBeOlder) {
    LOGGER.debug("Calling convertToDate() started.");
    if (dateStr == null || dateStr.equals("")) {
      return null;
    }

    String year, month, day;

    if (dateFormat.equals(HOOPC2Properties.DEFAULT_DATE_FORMAT1)) {
      if (dateStr.matches("^[0-9]{4}[-/]?[0-9]{2}[-/]?[0-9]{2}$")) {
        dateStr = dateStr.replaceAll("[-/]", "");
        year = dateStr.substring(0, 4);
        month = dateStr.substring(4, 6);
        day = dateStr.substring(6, 8);
      } else {
        throw new IllegalArgumentException(
            "Invalid date \"" + dateStr + "\"" + "for field " + dateName);
      }
    } else if (dateFormat.equals(HOOPC2Properties.DEFAULT_DATE_FORMAT2)) {
      if (dateStr.matches("^[0-9]{4}[-/]?[0-9]{2}$")) {
        dateStr = dateStr.replaceAll("[-/]", "");
        year = dateStr.substring(0, 4);
        month = dateStr.substring(4, 6);
        day = "1";
      } else {
        throw new IllegalArgumentException(
            "Invalid date \"" + dateStr + "\"" + "for field " + dateName);
      }
    } else if (dateFormat.equals(HOOPC2Properties.DEFAULT_DATE_FORMAT3)) {
      if ((dateStr.matches("^[0-9]{2}[-/]?[0-9]{2}$"))
          && (baseDt.matches("^[0-9]{4}[-/]?[0-9]{2}[-/]?[0-9]{2}$"))) {
        dateStr = dateStr.replaceAll("[-/]", "");
        String strDt2 = baseDt.replaceAll("[-/]", "");
        year = null;
        month = dateStr.substring(0, 2);
        day = dateStr.substring(2, 4);
        String tmpDate = strDt2.substring(0, 4) + month + day;

        if (mustBeOlder) {
          if ((Integer.parseInt(tmpDate)) < (Integer.parseInt(strDt2))) {
            year = Integer.toString(Integer.parseInt(strDt2.substring(0, 4)) + 1);
          } else {
            year = strDt2.substring(0, 4);
          }
        }
      } else {
        throw new IllegalArgumentException(
            "Invalid date \"" + dateStr + "\"" + "for field " + dateName);
      }
    } else {
      throw new IllegalArgumentException(
          "Invalid date \"" + dateStr + "\"" + "for field " + dateName);
    }

    return Helper.getDate(year, month, day);
  }

  private static Integer convertToInteger(String s) {
    return s == null || s.equals("") ? null : Integer.valueOf(s);
  }

  private static Integer convertToInteger(Double d) {
    return d == null ? null : d.intValue();
  }

  private static Double convertToDouble(String s) {
    return s == null || s.equals("") ? null : Double.valueOf(s);
  }

  private static BigDecimal convertToBigDecimal(String s) {
    return s == null || s.equals("") ? null : BigDecimal.valueOf(Double.valueOf(s));
  }
}
