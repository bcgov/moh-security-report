package ca.bc.gov.health.database.ejb;

import ca.bc.gov.health.database.entity.ApplicationUsers;
import ca.bc.gov.health.database.entity.Hospitals;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.importfile.AllowedHospitalNumbers;
import ca.bc.gov.health.service.CurrentUser;
import jakarta.ejb.Stateless;
import jakarta.enterprise.inject.Instance;
import jakarta.enterprise.inject.Produces;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class HospitalsFacade.
 *
 * @author je.tremblay
 */
@Stateless
public class HospitalsFacade extends AbstractFacade<Hospitals> {

  private static final Logger log = LoggerFactory.getLogger(HospitalsFacade.class.getName());

  @PersistenceContext(unitName = "hoopc-ejb_pu")
  private EntityManager em;

  @Inject @CurrentUser Instance<ApplicationUsers> user;

  @Override
  protected EntityManager getEntityManager() {
    return em;
  }

  /** Instantiates a new hospitals facade. */
  public HospitalsFacade() {
    super(Hospitals.class);
  }

  /* (non-Javadoc)
   * @see ca.bc.gov.health.database.ejb.HospitalsFacadeLocal#findByProvince(java.lang.String)
   */
  @SuppressWarnings("unchecked")
  public List<Hospitals> findByProvince(String provinceCode) throws HoopcException {
    try {
      Query query = em.createNamedQuery("Hospitals.searchHospitalByProvince", Hospitals.class);
      query.setParameter("provinceCode", provinceCode);
      return query.getResultList();
    } catch (RuntimeException e) {
      HoopcException exception = new HoopcException("Error in HospitalsFacade.findByProvince()", e);
      log.error("Error in HospitalsFacade.findByProvince({})", exception);
      throw exception;
    }
  }

  /**
   * Returns the HOSPITALS.HOSPITAL_NUMBERS that the current user is authorized for.
   *
   * @return HOSPITAL_NUMBERs, e.g. ["832", "801", ...].
   */
  @Produces
  @AllowedHospitalNumbers
  public List<String> getAllowedHospitalNumbers() {
    String applicationRole = user.get().getApplicationRole();
    switch (applicationRole) {
      case "MINISTRY":
        // MINISTRY users have permission on all active hospitals.
        return em.createNamedQuery("Hospitals.findAllNumbers").getResultList();
      case "HOSPITAL":
        Query query = em.createNamedQuery("Hospitals.findAllowedNumbers");
        query.setParameter("applicationUserid", user.get().getApplicationUserid());
        return query.getResultList();
      default:
        throw new IllegalStateException(
            "User role is not MINISTRY or HOSPITAL -- should be impossible.");
    }
  }
}
