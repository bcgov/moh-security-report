package ca.bc.gov.health.report;

import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.service.HoopcAppService;
import jakarta.ejb.EJB;
import jakarta.inject.Inject;
import java.io.ByteArrayOutputStream;
import java.text.MessageFormat;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class BaseReportBuilder.
 *
 * @param <T> the generic type
 */
public class BaseReportBuilder<T> {

  @EJB protected ReportService reportService;
  @Inject protected HoopcAppService appService;

  protected static Logger logger = LoggerFactory.getLogger(BaseReportBuilder.class);

  protected static ResourceBundle reportResourceBundle =
      ResourceBundle.getBundle("reports/report_resource_bundle");

  protected String reportTemplate;
  protected Map<String, Object> reportParameters = new HashMap<>();

  /**
   * Builds the PDF.
   *
   * @param reportList the report list
   * @return the byte[]
   * @throws HoopcException the hoopc exception
   */
  protected byte[] buildPDF(List<T> reportList) throws HoopcException {
    try {
      JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(reportList);
      JasperDesign jasDesign =
          JRXmlLoader.load(
              this.getClass()
                  .getClassLoader()
                  .getResourceAsStream(
                      MessageFormat.format(GlobalConstants.REPORT_TEMPLATE, reportTemplate)));
      JasperReport jasReport = JasperCompileManager.compileReport(jasDesign);
      JasperPrint jprint = JasperFillManager.fillReport(jasReport, reportParameters, dataSource);

      logger.info("Generated PDF report" + reportTemplate);
      return JasperExportManager.exportReportToPdf(jprint);
    } catch (Exception e) {
      String msg = MessageFormat.format(GlobalConstants.REPORT_ERROR_GENERATING, reportTemplate);
      throw new HoopcException(msg, e);
    }
  }

  /**
   * Builds the CSV.
   *
   * @param reportList the report list
   * @return the byte[]
   * @throws HoopcException the hoopc exception
   */
  protected byte[] buildCSV(List<String> reportList) throws HoopcException {
    if (reportList == null) {
      throw new HoopcException();
    }
    ByteArrayOutputStream out = new ByteArrayOutputStream();
    try {
      for (String row : reportList) {
        out.write((row + "\n").getBytes());
      }
    } catch (Exception e) {
      String msg = MessageFormat.format(GlobalConstants.REPORT_ERROR_GENERATING, reportTemplate);
      throw new HoopcException(msg, e);
    }

    logger.info("Generated CSV report {0}", reportTemplate);
    return out.toByteArray();
  }

  /**
   * Ucfirst.
   *
   * @param subject the subject
   * @return the string
   */
  protected static final String ucfirst(String subject) {
    return Character.toUpperCase(subject.charAt(0)) + subject.substring(1).toLowerCase();
  }
}
