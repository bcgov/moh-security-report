package ca.bc.gov.health.report.transformer;

import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.exception.HoopcValidationException;
import ca.bc.gov.health.report.StoredProcQueryParams;
import ca.bc.gov.health.report.model.ClaimReportViewModel;
import jakarta.persistence.ParameterMode;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

/** The Class ClaimReportPLSQLTransformer. */
public class ClaimReportPLSQLTransformer {

  private static final String PV_MESSAGE = "pv_message";
  private static final String PN_RESULT_CODE = "pn_resultCode";
  private static final String PV_REPORT_FILE_NAME = "pv_ReportFileName";
  private static final String PV_REPORT_REQ_ID = "pv_reportReqID";
  private static final String PV_SESSION_ID = "pv_sessionID";
  private static final String PV_USER_ID = "pv_userID";
  private static final String PV_AD_HOC_FLAG = "pv_adHocFlag";
  private static final String PV_REPORT_FORMAT = "pv_reportFormat";
  private static final String PV_CLAIM_CHANGED_FLAG = "pv_claimChangedFlag";
  private static final String PV_CLAIM_REVIEW_FLAG = "pv_claimReviewFlag";
  private static final String PV_DECL_REQUEST_CODE = "pv_declRequestCode";
  private static final String PV_PROCEDURE_CODE = "pv_procedureCode";
  private static final String PV_DIAGNOSIS_CODE = "pv_diagnosisCode";
  private static final String PV_ADJUSTMENT_PROC_END_DATE = "pv_adjustmentProcEndDate";
  private static final String PV_ADJUSTMENT_PROC_START_DATE = "pv_adjustmentProcStartDate";
  private static final String PV_ADJUSTMENT_REQ_END_DATE = "pv_adjustmentReqEndDate";
  private static final String PV_ADJUSTMENT_REQ_START_DATE = "pv_adjustmentReqStartDate";
  private static final String PV_PROCESSING_END_DATE = "pv_processingEndDate";
  private static final String PV_PROCESSING_START_DATE = "pv_processingStartDate";
  private static final String PV_SUBMISSION_END_DATE = "pv_submissionEndDate";
  private static final String REGEX_REMOVE_HOSPITAL_NAME = "\\-.*";
  private static final String PV_SUBMISSION_START_DATE = "pv_submissionStartDate";
  private static final String PV_ADJUSTMENT_STATUS = "pv_adjustmentStatus";
  private static final String PV_OVERRIDE_STATUS = "pv_overrideStatus";
  private static final String PV_CLAIM_STATUS = "pv_claimStatus";
  private static final String PV_POPULATION_ID = "pv_populationID";
  private static final String PV_POPULATION_TYPE = "pv_populationType";
  private static final String PV_RESIDENCY_TYPE = "pv_residencyType";

  private static final String ALL_SELECTION = "ALL";

  private ClaimReportPLSQLTransformer() {
    // to avoid instantiation because everything is static here
  }

  /**
   * Transform to store proc param 0006.
   *
   * @param viewModel the view model
   * @return the list
   * @throws HoopcException the hoopc exception
   */
  public static List<StoredProcQueryParams> transformToStoreProcParam0006(
      ClaimReportViewModel viewModel) throws HoopcException {

    return construct0013And0006(viewModel);
  }

  /**
   * Transform to store proc param 0007.
   *
   * @param viewModel the view model
   * @return the list
   * @throws HoopcException the hoopc exception
   */
  public static List<StoredProcQueryParams> transformToStoreProcParam0007(
      ClaimReportViewModel viewModel) throws HoopcException {

    return construct0007And0014(viewModel);
  }

  /**
   * Transform to store proc param 0013.
   *
   * @param viewModel the view model
   * @return the list
   * @throws HoopcException the hoopc exception
   */
  public static List<StoredProcQueryParams> transformToStoreProcParam0013(
      ClaimReportViewModel viewModel) throws HoopcException {
    return construct0013And0006(viewModel);
  }

  private static List<StoredProcQueryParams> construct0013And0006(ClaimReportViewModel viewModel) {
    List<StoredProcQueryParams> parameters = new ArrayList<>();

    parameters.add(new StoredProcQueryParams(PV_RESIDENCY_TYPE, viewModel.getResidencyType()));
    if (viewModel.getHealthAuthority() != null) {
      if (ALL_SELECTION.equals(viewModel.getHealthAuthority())) {
        parameters.add(new StoredProcQueryParams(PV_POPULATION_TYPE, "HA"));
        parameters.add(new StoredProcQueryParams(PV_POPULATION_ID, null));
      } else {
        parameters.add(new StoredProcQueryParams(PV_POPULATION_TYPE, "HA"));
        parameters.add(new StoredProcQueryParams(PV_POPULATION_ID, viewModel.getHealthAuthority()));
      }
    } else if (viewModel.getHospital() != null) {
      if (ALL_SELECTION.equals(viewModel.getHospital())) {
        parameters.add(new StoredProcQueryParams(PV_POPULATION_TYPE, "HOSP"));
        parameters.add(new StoredProcQueryParams(PV_POPULATION_ID, null));
      } else {

        parameters.add(new StoredProcQueryParams(PV_POPULATION_TYPE, "HOSP"));
        // If resident then the province code is passed, followed by pipe and then the hospital
        // number AB|041
        if (viewModel.getResidencyType().equals(GlobalConstants.RES_RESIDENCY_TYPE)) {
          // Remove the dash the name after the dash then replace the province "(AB) " by "AB|"
          String hospital =
              viewModel
                  .getHospital()
                  .replaceFirst("-.*", "")
                  .replaceFirst("\\(", "")
                  .replaceFirst("\\) ", "|");
          parameters.add(new StoredProcQueryParams(PV_POPULATION_ID, hospital));
        } else if (viewModel.getResidencyType().equals(GlobalConstants.NRES_RESIDENCY_TYPE)) {
          parameters.add(
              new StoredProcQueryParams(
                  PV_POPULATION_ID,
                  viewModel.getHospital().replaceFirst(REGEX_REMOVE_HOSPITAL_NAME, "")));
        }
      }
    } else if (viewModel.getProvince() != null) {
      parameters.add(new StoredProcQueryParams(PV_POPULATION_TYPE, "PROV"));
      parameters.add(new StoredProcQueryParams(PV_POPULATION_ID, viewModel.getProvince()));
    } else {
      throw new HoopcValidationException(GlobalConstants.REPORT_POPULATION_TYPE_ERROR);
    }
    parameters.add(new StoredProcQueryParams(PV_CLAIM_STATUS, viewModel.getClaimStatus()));
    parameters.add(new StoredProcQueryParams(PV_OVERRIDE_STATUS, viewModel.getOverrideStatus()));
    parameters.add(
        new StoredProcQueryParams(PV_ADJUSTMENT_STATUS, viewModel.getAdjustmentStatus()));
    parameters.add(
        new StoredProcQueryParams(
            PV_SUBMISSION_START_DATE, viewModel.getSubmissionStartDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            PV_SUBMISSION_END_DATE, viewModel.getSubmissionEndDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            PV_PROCESSING_START_DATE, viewModel.getProcessingStartDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            PV_PROCESSING_END_DATE, viewModel.getProcessingEndDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            "pv_admissionStartDate", viewModel.getAdmissionServiceStartDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            "pv_admissionEndDate", viewModel.getAdmissionServiceEndDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            "pv_dischargeStartDate", viewModel.getDischargeStartDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            "pv_dischargeEndDate", viewModel.getDischargeEndDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            PV_ADJUSTMENT_REQ_START_DATE, viewModel.getAdjustmentReqStartDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            PV_ADJUSTMENT_REQ_END_DATE, viewModel.getAdjustmentReqEndDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            PV_ADJUSTMENT_PROC_START_DATE,
            viewModel.getAdjustmentProcStartDate(),
            LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            PV_ADJUSTMENT_PROC_END_DATE, viewModel.getAdjustmentProcEndDate(), LocalDate.class));
    parameters.add(new StoredProcQueryParams(PV_DIAGNOSIS_CODE, viewModel.getDiagnosticCode()));
    parameters.add(new StoredProcQueryParams(PV_PROCEDURE_CODE, viewModel.getProcedureCode()));
    parameters.add(new StoredProcQueryParams("pv_accidentCode", viewModel.getAccidentCode()));
    parameters.add(
        new StoredProcQueryParams("pv_highCostProcCode", viewModel.getHighcostProcedureCode()));
    parameters.add(new StoredProcQueryParams(PV_DECL_REQUEST_CODE, null));
    parameters.add(new StoredProcQueryParams(PV_CLAIM_REVIEW_FLAG, null));
    parameters.add(new StoredProcQueryParams(PV_CLAIM_CHANGED_FLAG, null));
    parameters.add(new StoredProcQueryParams(PV_REPORT_FORMAT, null));
    parameters.add(new StoredProcQueryParams(PV_AD_HOC_FLAG, viewModel.getAdHocFlag()));
    parameters.add(new StoredProcQueryParams(PV_USER_ID, viewModel.getUserID()));
    parameters.add(new StoredProcQueryParams(PV_SESSION_ID, viewModel.getSessionID()));
    parameters.add(
        new StoredProcQueryParams("pv_longTermIndicator", viewModel.getLongTermIndicator()));
    parameters.add(new StoredProcQueryParams(PV_REPORT_REQ_ID, Integer.class, ParameterMode.OUT));
    parameters.add(new StoredProcQueryParams(PV_REPORT_FILE_NAME, String.class, ParameterMode.OUT));
    parameters.add(new StoredProcQueryParams(PN_RESULT_CODE, Integer.class, ParameterMode.OUT));
    parameters.add(new StoredProcQueryParams(PV_MESSAGE, String.class, ParameterMode.OUT));

    return parameters;
  }

  /**
   * Transform to store proc param 0014.
   *
   * @param viewModel the view model
   * @return the list
   * @throws HoopcException the hoopc exception
   */
  public static List<StoredProcQueryParams> transformToStoreProcParam0014(
      ClaimReportViewModel viewModel) throws HoopcException {
    return construct0007And0014(viewModel);
  }

  private static List<StoredProcQueryParams> construct0007And0014(ClaimReportViewModel viewModel) {
    List<StoredProcQueryParams> parameters = new ArrayList<>();

    parameters.add(new StoredProcQueryParams(PV_RESIDENCY_TYPE, viewModel.getResidencyType()));
    if (viewModel.getHealthAuthority() != null) {
      if (ALL_SELECTION.equals(viewModel.getHealthAuthority())) {
        parameters.add(new StoredProcQueryParams(PV_POPULATION_TYPE, "HA"));
        parameters.add(new StoredProcQueryParams(PV_POPULATION_ID, null));
      } else {
        parameters.add(new StoredProcQueryParams(PV_POPULATION_TYPE, "HA"));
        parameters.add(new StoredProcQueryParams(PV_POPULATION_ID, viewModel.getHealthAuthority()));
      }
    } else if (viewModel.getHospital() != null) {
      if (ALL_SELECTION.equals(viewModel.getHospital())) {
        parameters.add(new StoredProcQueryParams(PV_POPULATION_TYPE, "HOSP"));
        parameters.add(new StoredProcQueryParams(PV_POPULATION_ID, null));
      } else {
        parameters.add(new StoredProcQueryParams(PV_POPULATION_TYPE, "HOSP"));
        // If resident then the province code is passed, followed by pipe and then the hospital
        // number AB|041
        if (viewModel.getResidencyType().equals(GlobalConstants.RES_RESIDENCY_TYPE)) {
          // Remove the dash the name after the dash then replace the province "(AB) " by "AB|"
          String hospital =
              viewModel
                  .getHospital()
                  .replaceFirst("-.*", "")
                  .replaceFirst("\\(", "")
                  .replaceFirst("\\) ", "|");
          parameters.add(new StoredProcQueryParams(PV_POPULATION_ID, hospital));
        } else if (viewModel.getResidencyType().equals(GlobalConstants.NRES_RESIDENCY_TYPE)) {
          parameters.add(
              new StoredProcQueryParams(
                  PV_POPULATION_ID,
                  viewModel.getHospital().replaceFirst(REGEX_REMOVE_HOSPITAL_NAME, "")));
        }
      }
    } else if (viewModel.getProvince() != null) {
      parameters.add(new StoredProcQueryParams(PV_POPULATION_TYPE, "PROV"));
      parameters.add(new StoredProcQueryParams(PV_POPULATION_ID, viewModel.getProvince()));
    } else {
      throw new HoopcValidationException(
          "At least one of the following is mandatory : Treating Health Authority, Treating Hospital, Residential Province");
    }
    parameters.add(new StoredProcQueryParams(PV_CLAIM_STATUS, viewModel.getClaimStatus()));
    parameters.add(new StoredProcQueryParams(PV_OVERRIDE_STATUS, viewModel.getOverrideStatus()));
    parameters.add(
        new StoredProcQueryParams(PV_ADJUSTMENT_STATUS, viewModel.getAdjustmentStatus()));
    parameters.add(
        new StoredProcQueryParams(
            PV_SUBMISSION_START_DATE, viewModel.getSubmissionStartDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            PV_SUBMISSION_END_DATE, viewModel.getSubmissionEndDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            PV_PROCESSING_START_DATE, viewModel.getProcessingStartDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            PV_PROCESSING_END_DATE, viewModel.getProcessingEndDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            "pv_serviceStartDate", viewModel.getAdmissionServiceStartDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            "pv_serviceEndDate", viewModel.getAdmissionServiceEndDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            PV_ADJUSTMENT_REQ_START_DATE, viewModel.getAdjustmentReqStartDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            PV_ADJUSTMENT_REQ_END_DATE, viewModel.getAdjustmentReqEndDate(), LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            PV_ADJUSTMENT_PROC_START_DATE,
            viewModel.getAdjustmentProcStartDate(),
            LocalDate.class));
    parameters.add(
        new StoredProcQueryParams(
            PV_ADJUSTMENT_PROC_END_DATE, viewModel.getAdjustmentProcEndDate(), LocalDate.class));
    parameters.add(new StoredProcQueryParams(PV_DIAGNOSIS_CODE, viewModel.getDiagnosticCode()));
    parameters.add(new StoredProcQueryParams(PV_PROCEDURE_CODE, viewModel.getProcedureCode()));
    parameters.add(new StoredProcQueryParams(PV_DECL_REQUEST_CODE, null));
    parameters.add(new StoredProcQueryParams(PV_CLAIM_REVIEW_FLAG, null));
    parameters.add(new StoredProcQueryParams(PV_CLAIM_CHANGED_FLAG, null));
    parameters.add(new StoredProcQueryParams(PV_REPORT_FORMAT, null));
    parameters.add(new StoredProcQueryParams(PV_AD_HOC_FLAG, viewModel.getAdHocFlag()));
    parameters.add(new StoredProcQueryParams(PV_USER_ID, viewModel.getUserID()));
    parameters.add(new StoredProcQueryParams(PV_SESSION_ID, viewModel.getSessionID()));
    parameters.add(new StoredProcQueryParams("pv_serviceCode", viewModel.getServiceCode()));
    parameters.add(new StoredProcQueryParams(PV_REPORT_REQ_ID, Integer.class, ParameterMode.OUT));
    parameters.add(new StoredProcQueryParams(PV_REPORT_FILE_NAME, String.class, ParameterMode.OUT));
    parameters.add(new StoredProcQueryParams(PN_RESULT_CODE, Integer.class, ParameterMode.OUT));
    parameters.add(new StoredProcQueryParams(PV_MESSAGE, String.class, ParameterMode.OUT));

    return parameters;
  }
}
