package ca.bc.gov.health.service;

import ca.bc.gov.health.database.entity.HospitalOopClaims;
import jakarta.annotation.PostConstruct;
import jakarta.inject.Named;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.criteria.CriteriaBuilder;
import jakarta.persistence.criteria.CriteriaQuery;
import jakarta.persistence.criteria.Expression;
import jakarta.persistence.criteria.Path;
import jakarta.persistence.criteria.Predicate;
import jakarta.persistence.criteria.Subquery;
import java.text.MessageFormat;
import java.time.LocalDate;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** Utility class used to create criteria predicates. Mocked by tests and used for debug logging. */
@Named
public class CriteriaBuilderWrapper {

  private static Logger log = LoggerFactory.getLogger(CriteriaBuilderWrapper.class);

  @PersistenceContext(unitName = "hoopc-ejb_pu")
  private EntityManager em;

  private CriteriaBuilder criteriaBuilder;

  /** Post construct. */
  @PostConstruct
  private void postConstruct() {
    criteriaBuilder = em.getCriteriaBuilder();
  }

  /**
   * Wrapper around createQuery.
   *
   * @param resultClass the result class
   * @return the criteria query
   */
  public CriteriaQuery<Long> createCountQuery(Class<Long> resultClass) {
    log.debug(MessageFormat.format("createQuery({0})", resultClass.getName()));
    return criteriaBuilder.createQuery(resultClass);
  }

  /**
   * Wrapper around createQuery.
   *
   * @param resultClass the result class
   * @return the criteria query
   */
  public CriteriaQuery<HospitalOopClaims> createQuery(Class<HospitalOopClaims> resultClass) {
    log.debug(MessageFormat.format("createQuery({0})", resultClass.getName()));
    return criteriaBuilder.createQuery(resultClass);
  }

  /**
   * Creates an equal predicate. Trim the value if string type.
   *
   * @param x the x
   * @param value the value
   * @return the predicate
   */
  @SuppressWarnings("squid:S1221")
  public Predicate equal(Expression<?> x, Object value) {
    if (value instanceof String) {
      value = ((String) value).trim();
    }
    log.debug(MessageFormat.format("equal({0}, {1})", x.toString(), value.toString()));
    return criteriaBuilder.equal(x, value);
  }

  /**
   * Creates an equal predicate.
   *
   * @param x the x
   * @param y the y
   * @return the predicate
   */
  @SuppressWarnings("squid:S1221")
  public Predicate equal(Expression<?> x, Expression<?> y) {
    log.debug(MessageFormat.format("equal({0}, {1})", x.toString(), y.toString()));
    return criteriaBuilder.equal(x, y);
  }

  /**
   * Creates an equal predicate for strings ignoring case (converts toLower).
   *
   * @param path the path
   * @param value the value
   * @return the predicate
   */
  public Predicate equalIgnoreCase(Path<String> path, String value) {
    log.debug(MessageFormat.format("equalIgnoreCase({0}, {1})", path.toString(), value));
    return criteriaBuilder.equal(criteriaBuilder.lower(path), value.toLowerCase().trim());
  }

  /**
   * Creates a like predicate for strings ignoring case (converts toLower).
   *
   * @param path the path
   * @param value the value
   * @return the predicate
   */
  public Predicate containsIgnoreCase(Path<String> path, String value) {
    log.debug(MessageFormat.format("containsIgnoreCase({0}, {1})", path.toString(), value));
    return criteriaBuilder.like(
        criteriaBuilder.lower(path), "%" + value.toLowerCase().trim() + "%");
  }

  /**
   * Creates a greaterThanOrEqualTo predicate for dates.
   *
   * @param path the path
   * @param value the value
   * @return the predicate
   */
  public Predicate greaterThanOrEqualTo(Path<LocalDate> path, LocalDate value) {
    log.debug(MessageFormat.format("greaterThanOrEqualTo({0}, {1})", path.toString(), value));
    return criteriaBuilder.greaterThanOrEqualTo(path, value);
  }

  /**
   * Creates a lessThanOrEqualTo predicate for dates.
   *
   * @param path the path
   * @param value the value
   * @return the predicate
   */
  public Predicate lessThanOrEqualTo(Path<LocalDate> path, LocalDate value) {
    log.debug(MessageFormat.format("lessThanOrEqualTo({0}, {1})", path.toString(), value));
    return criteriaBuilder.lessThanOrEqualTo(path, value);
  }

  /**
   * Creates an exists predicate for subqueries.
   *
   * @param subquery the subquery
   * @return the predicate
   */
  public Predicate exists(Subquery<?> subquery) {
    log.debug(MessageFormat.format("exists({0})", subquery));
    return criteriaBuilder.exists(subquery);
  }

  /**
   * Creates a literal predicate.
   *
   * @param <T> the generic type
   * @param value the value
   * @return the expression
   */
  public <T> Expression<T> literal(T value) {
    log.debug(MessageFormat.format("literal({0})", value));
    return criteriaBuilder.literal(value);
  }

  /**
   * Creates an and predicate.
   *
   * @param x the x
   * @param y the y
   * @return the predicate
   */
  public Predicate and(Expression<Boolean> x, Expression<Boolean> y) {
    log.debug(MessageFormat.format("and({0}, {1})", x, y));
    return criteriaBuilder.and(x, y);
  }

  public CriteriaBuilder getCriteriaBuilder() {
    return criteriaBuilder;
  }
}
