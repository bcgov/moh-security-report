package ca.bc.gov.health.service;

import ca.bc.gov.health.database.entity.ClaimErrors;
import ca.bc.gov.health.database.entity.ClaimTypes;
import ca.bc.gov.health.database.entity.HospitalOopClaims;
import ca.bc.gov.health.database.entity.ResidencyTypes;
import jakarta.inject.Named;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.persistence.criteria.CriteriaQuery;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;

/** The Class ClaimServiceDao. */
@Named("ClaimServiceDao")
public class ClaimServiceDao {

  @PersistenceContext(unitName = "hoopc-ejb_pu")
  private EntityManager em;

  /**
   * Find by claim id.
   *
   * @param id the id
   * @return the hospital oop claims
   */
  protected HospitalOopClaims findByClaimId(Long id) {
    return em.find(HospitalOopClaims.class, id);
  }

  /**
   * Adds the claim.
   *
   * @param claim the claim
   * @return the long
   */
  protected Long addClaim(HospitalOopClaims claim) {
    em.persist(claim);
    return claim.getId();
  }

  /**
   * Adds the.
   *
   * @param entity the entity
   */
  public void add(Object entity) {
    em.persist(entity);
  }

  /**
   * Save.
   *
   * @param entity the entity
   */
  public void save(Object entity) {
    em.flush();
  }

  /**
   * Removes the.
   *
   * @param entity the entity
   */
  public void remove(Object entity) {
    em.remove(entity);
  }

  public Long runCountQuery(CriteriaQuery<Long> query) {
    return em.createQuery(query).getSingleResult();
  }

  /**
   * Run query.
   *
   * @param query the query
   * @return the list
   */
  public List<HospitalOopClaims> runQuery(CriteriaQuery<HospitalOopClaims> query) {
    return runQuery(query, 0, 0);
  }

  public List<HospitalOopClaims> runQuery(
      CriteriaQuery<HospitalOopClaims> query, int firstResult, int maxResult) {
    TypedQuery<HospitalOopClaims> q = em.createQuery(query);
    // limit query size
    if (firstResult > 0) {
      q.setFirstResult(firstResult);
    }
    if (maxResult > 0) {
      q.setMaxResults(maxResult);
    }

    return q.getResultList();
  }

  /**
   * Gets the claim errors.
   *
   * @param claimid the claimid
   * @return the claim errors
   */
  public List<ClaimErrors> getClaimErrors(Long claimid) {
    return em.createNamedQuery("ClaimErrors.findByClaim", ClaimErrors.class)
        .setParameter("claimId", claimid)
        .getResultList();
  }

  /**
   * Merge.
   *
   * @param entity the entity
   */
  public void merge(Object entity) {
    em.merge(entity);
  }

  /** Flush cache. */
  public void flushCache() {
    em.getEntityManagerFactory().getCache().evictAll();
  }

  public Long findMatchingClaim(ClaimTypes claimType, ResidencyTypes resType,
      String insuranceNumber, LocalDate birthDate, String hospitalNumber, LocalDate serviceDate,
      BigDecimal totalAmount) {
    try {
      return em.createNamedQuery("HospitalOopClaims.findMatchingClaim", Long.class)
          .setParameter("claimType", claimType)
          .setParameter("resType", resType)
          .setParameter("insuranceNumber", insuranceNumber)
          .setParameter("birthDate", birthDate)
          .setParameter("hospitalNumber", hospitalNumber)
          .setParameter("serviceDate", serviceDate)
          .setParameter("totalAmount", totalAmount)
          .getSingleResult();
    } catch (NoResultException e) {
      return null;
    }
  }
}
