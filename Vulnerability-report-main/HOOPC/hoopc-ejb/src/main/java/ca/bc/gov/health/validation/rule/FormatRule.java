package ca.bc.gov.health.validation.rule;

import ca.bc.gov.health.validation.ValidationError;
import java.text.MessageFormat;
import java.util.function.Function;
import org.apache.commons.lang3.StringUtils;

/**
 * Validation rule for String format.
 *
 * <p>Generates a validation error if value does not matches the provided regex expression.
 *
 * @param <T> Type of object
 */
public class FormatRule<T> extends ValidationRule<T> {
  private Function<T, String> getter;
  private String regex;

  /**
   * Creates a Format rule. Example usage:
   *
   * <p><code>
   * new FormatRule<ClaimViewModel>("Postal Code", c -> c.getPatient().getPostalCode(),
   * "^[A-Za-z]\\d[A-Za-z][ ]*\\d[A-Za-z]\\d$");
   *  </code>
   *
   * @param fieldName Field name to use for error message.
   * @param getter Function to get the value of field
   * @param regex regex expression
   */
  public FormatRule(String fieldName, Function<T, String> getter, String regex) {
    super(ValidationRuleType.FORMAT, fieldName);
    this.getter = getter;
    this.regex = regex;
  }

  /**
   * Returns a ValidationError if value does not match regex expression.
   *
   * @param object the object
   * @return the validation error
   */
  @Override
  public ValidationError validate(T object) {
    // Get the value
    String value = getValue(getter, object);
    if (!StringUtils.isBlank(value) && !value.matches(regex)) {
      String errorMsg =
          MessageFormat.format(getMessage("claim.validation.format"), getRuleIdentifier());
      return new ValidationError(this, errorMsg, value);
    }
    return null;
  }
}
