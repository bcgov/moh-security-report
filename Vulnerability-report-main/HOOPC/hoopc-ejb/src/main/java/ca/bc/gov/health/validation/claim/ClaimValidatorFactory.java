package ca.bc.gov.health.validation.claim;

import static ca.bc.gov.health.constants.GlobalConstants.INPATIENT_CLAIM_TYPE;
import static ca.bc.gov.health.constants.GlobalConstants.NRES_RESIDENCY_TYPE;
import static ca.bc.gov.health.constants.GlobalConstants.OUTPATIENT_CLAIM_TYPE;
import static ca.bc.gov.health.constants.GlobalConstants.RES_RESIDENCY_TYPE;
import ca.bc.gov.health.service.viewmodel.ClaimViewModel;
import ca.bc.gov.health.validation.Validator;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import org.apache.commons.lang3.StringUtils;

/** A factory for creating ClaimValidator objects. */
@Named("ClaimValidatorFactory")
public class ClaimValidatorFactory {
  @Inject()
  @Named("InsertRIClaimValidator")
  private transient InsertRIClaimValidator insertRI;

  @Inject()
  @Named("InsertROClaimValidator")
  private transient InsertROClaimValidator insertRO;

  @Inject()
  @Named("InsertNRIClaimValidator")
  private transient InsertNRIClaimValidator insertNRI;

  @Inject()
  @Named("InsertNROClaimValidator")
  private transient InsertNROClaimValidator insertNRO;

  @Inject()
  @Named("EditRIClaimValidator")
  private transient EditRIClaimValidator editRI;

  @Inject()
  @Named("EditROClaimValidator")
  private transient EditROClaimValidator editRO;

  @Inject()
  @Named("EditNRIClaimValidator")
  private transient EditNRIClaimValidator editNRI;

  @Inject()
  @Named("EditNROClaimValidator")
  private transient EditNROClaimValidator editNRO;

  /**
   * Creates a new ClaimValidator object.
   *
   * @param claimType the claim type
   * @param residencyType the residency type
   * @return the validator< claim view model>
   */
  public Validator<ClaimViewModel> createInsertValidator(String claimType, String residencyType) {
    if (StringUtils.isBlank(claimType) || StringUtils.isBlank(residencyType)) {
      throw new IllegalArgumentException();
    }
    if (INPATIENT_CLAIM_TYPE.equals(claimType) && RES_RESIDENCY_TYPE.equals(residencyType)) {
      return insertRI;
    } else if (INPATIENT_CLAIM_TYPE.equals(claimType)
        && NRES_RESIDENCY_TYPE.equals(residencyType)) {
      return insertNRI;
    } else if (OUTPATIENT_CLAIM_TYPE.equals(claimType)
        && RES_RESIDENCY_TYPE.equals(residencyType)) {
      return insertRO;
    } else if (OUTPATIENT_CLAIM_TYPE.equals(claimType)
        && NRES_RESIDENCY_TYPE.equals(residencyType)) {
      return insertNRO;
    } else {
      throw new IllegalArgumentException();
    }
  }

  /**
   * Creates a new ClaimValidator object.
   *
   * @param claimType the claim type
   * @param residencyType the residency type
   * @return the validator< claim view model>
   */
  public Validator<ClaimViewModel> createEditValidator(String claimType, String residencyType) {
    if (StringUtils.isBlank(claimType) || StringUtils.isBlank(residencyType)) {
      throw new IllegalArgumentException();
    }
    if (INPATIENT_CLAIM_TYPE.equals(claimType) && RES_RESIDENCY_TYPE.equals(residencyType)) {
      return editRI;
    } else if (INPATIENT_CLAIM_TYPE.equals(claimType)
        && NRES_RESIDENCY_TYPE.equals(residencyType)) {
      return editNRI;
    } else if (OUTPATIENT_CLAIM_TYPE.equals(claimType)
        && RES_RESIDENCY_TYPE.equals(residencyType)) {
      return editRO;
    } else if (OUTPATIENT_CLAIM_TYPE.equals(claimType)
        && NRES_RESIDENCY_TYPE.equals(residencyType)) {
      return editNRO;
    } else {
      throw new IllegalArgumentException();
    }
  }
}
