/*
 * To change this license header, choose License Headers in Project Properties. To change this
 * template file, choose Tools | Templates and open the template in the editor.
 */
package ca.bc.gov.health.transformer;

import ca.bc.gov.health.constants.ClaimContentContext;
import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.database.entity.AdjustmentReasons;
import ca.bc.gov.health.database.entity.Admissions;
import ca.bc.gov.health.database.entity.ClaimAdjustments;
import ca.bc.gov.health.database.entity.ClaimContents;
import ca.bc.gov.health.database.entity.ClaimErrors;
import ca.bc.gov.health.database.entity.HighcostProcedurePerformed;
import ca.bc.gov.health.database.entity.HospitalOopClaims;
import ca.bc.gov.health.database.entity.Patients;
import ca.bc.gov.health.service.HoopcAppService;
import ca.bc.gov.health.service.viewmodel.ClaimOverridesViewModel;
import ca.bc.gov.health.service.viewmodel.ClaimViewModel;
import ca.bc.gov.health.service.viewmodel.HighcostViewModel;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import org.apache.commons.lang3.StringUtils;

/**
 * The Class ClaimModelTransformer.
 *
 * @author Trevor.Schiavone
 */
@Named("ClaimModelTransformer")
public class ClaimModelTransformer {

  @Inject private HoopcAppService appService;

  /**
   * Convert claim view model to entity.
   *
   * @param claimView the claim view
   * @param claim the claim
   */
  public void claimViewToEntity(ClaimViewModel claimView, HospitalOopClaims claim) {

    claim.setCtsId(claimView.getClaimType());
    claim.setRtsId(claimView.getResidencyType());
    claim.setCsId(appService.getByStatusCode(claimView.getStatusCode()));

    claim.setServiceDate(claimView.getServiceDate());
    claim.setSubmissionDate(claimView.getSubmissionDate());
    claim.setProcessedDate(claimView.getProcessedDate());

    claim.setClaimSource(claimView.getClaimSource());
    claim.setProvincialClaimId(claimView.getProvincialClaimId());
    claim.setHospitalClaimNumber(claimView.getHospitalClaimNumber());

    if (!StringUtils.isBlank(claimView.getReasonInBC())) {
      claim.setRipId(appService.getReasonInProvCodes(claimView.getReasonInBC()));
    }

    claim.setTreatingPteId(appService.getProvince(claimView.getTreatingProvince()));
    claim.setReceivingPteId(appService.getProvince(claimView.getReceivingProvince()));

    if (!StringUtils.isBlank(claimView.getHospitalNumberAndName())) {
      claim.setHspId(
          appService.getHospital(claimView.getTreatingProvince(), claimView.getHospitalNumber()));
    }

    // TODO Don't know if we need to delete this record in table when everything is empty
    ClaimOverridesTransformer.transform(claimView.getClaimOverride(), claim);

    // Patient info
    if (claim.getPatId() == null) {
      // Create a new Patient
      claim.setPatId(new Patients());
    }
    PatientsTransformer.transform(claim.getPatId(), claimView.getPatient());

    // Admission info
    if (claimView.getAdmission() != null) {
      if (claim.getAdmissionsList() == null) {
        claim.setAdmissionsList(new ArrayList<>());
      }
      if (claim.getAdmissionsList().isEmpty()) {
        // Create a new Admission
        Admissions newAdmin = new Admissions();
        newAdmin.setHocId(claim);
        claim.getAdmissionsList().add(newAdmin);
      }
      AdmissionsTransformer.transform(claim.getAdmissionsList().get(0), claimView.getAdmission());
    }

    claim.setTotalAmountClaimed(claimView.getTotalAmountClaimed());

    // Service date
    claim.setServiceDate(claimView.getServiceDate());

    // for inpatient claims, copy the admission date to service date
    if (GlobalConstants.INPATIENT_CLAIM_TYPE.equals(claimView.getClaimType().getClaimType())) {
      claim.setServiceDate((claimView.getAdmission().getAdmissionDate()));
    }

    // ICD codes and accidents
    claim.setIcdCodingScheme(claimView.getIcdCodingScheme());
    claim.setAccidentInd(claimView.getAccidentIndicator());

    // Notes
    claim.setHospitalNotes(claimView.getHospitalNotes());
    claim.setReviewNotes(claimView.getReviewNotes());
    claim.setClaimToBeReviewedInd(claimView.getReviewFlag());

    // TODO: Don't use this entity (claimView.getDeclaration()) create new ones from view.
    // Declaration request
    // if (claimView.getDeclaration() != null
    // && claimView.getDeclaration().getDeclarationRequest() != null) {
    // claimView.getDeclaration().setHocId(claim);
    // claim.getClaimDeclarationsList().add(claimView.getDeclaration());
    // }

  }

  /**
   * Convert entity to claim view model.
   *
   * @param claim the claim
   * @return the claim view model
   */
  public ClaimViewModel claimEntityToView(HospitalOopClaims claim) {
    ClaimViewModel claimView = new ClaimViewModel();

    claimView.setClaimId(claim.getId());
    claimView.setClaimType(claim.getCtsId());
    claimView.setResidencyType(claim.getRtsId());
    claimView.setStatusCode(claim.getCsId().getStatusCode());
    claimView.setClaimSource(claim.getClaimSource());
    claimView.setProvincialClaimId(claim.getProvincialClaimId());
    claimView.setHospitalClaimNumber(claim.getHospitalClaimNumber());

    claimView.setSubmissionDate(claim.getSubmissionDate());
    claimView.setProcessedDate(claim.getProcessedDate());

    if (claim.getRipId() != null) {
      claimView.setReasonInBC(claim.getRipId().getReasonCode());
    }

    // Treatment Province and Hospital
    if (claim.getTreatingPteId() != null) {
      claimView.setTreatingProvince(claim.getTreatingPteId().getProvinceCode());
    }
    if (claim.getReceivingPteId() != null) {
      claimView.setReceivingProvince(claim.getReceivingPteId().getProvinceCode());
    }
    if (claim.getHspId() != null) {
      claimView.setHospitalNumberAndName(
          claim.getHspId().getHospitalNumber(), claim.getHspId().getName());
    }

    // Claim Overrides info
    if (claim.getClaimOverrides() != null) {
      claimView.setClaimOverride(ClaimOverridesTransformer.transform(claim.getClaimOverrides()));
    } else {
      claimView.setClaimOverride(new ClaimOverridesViewModel());
    }

    // Patient info
    claimView.setPatient(PatientsTransformer.transform(claim.getPatId()));

    // Admission info + amount claimed
    if (claim.getAdmissionsList() != null && !claim.getAdmissionsList().isEmpty()) {
      claimView.setAdmission(AdmissionsTransformer.transform(claim.getAdmissionsList().get(0)));
    }
    claimView.setTotalAmountClaimed(claim.getTotalAmountClaimed());
    claimView.setServiceDate(claim.getServiceDate());

    // ICD codes and accidents
    claimView.setIcdCodingScheme(claim.getIcdCodingScheme());
    // TODO: Temporary arbitrary value (because field is mandatory for Inpatient claims
    claimView.setAccidentIndicator(claim.getAccidentInd());

    // Diagnosis and procedure and service codes
    claimContentsEntityToView(ClaimContentContext.DIAGNOSTIC, claim, claimView.getDiagnosisCodes());
    claimContentsEntityToView(ClaimContentContext.PROCEDURE, claim, claimView.getProcedureCodes());

    // Service code
    claimView.setServiceCodeValue(claimContentsEntityToView(ClaimContentContext.SERVICE, claim));

    // Accident code
    String accidentCode = claimContentsEntityToView(ClaimContentContext.ACCIDENT, claim);
    claimView.setAccidentCode(accidentCode);

    highcostEntityToView(claim, claimView.getHighCostProcedures());

    // Notes
    claimView.setHospitalNotes(claim.getHospitalNotes());
    claimView.setReviewNotes(claim.getReviewNotes());
    claimView.setReviewFlag(claim.getClaimToBeReviewedInd());

    claimAjustmentsEntityToView(claim, claimView);

    claimErrorsEntityToViewModel(claim, claimView);

    if (claim.getIbpId() != null) {
      claimView.setBillingPeriod(claim.getIbpId().getPeriodCode());
    }

    return claimView;
  }

  private void claimAjustmentsEntityToView(HospitalOopClaims claim, ClaimViewModel claimView) {

    // Assign reasons to the adjustment request
    if (claim.getClaimAdjustmentsList() != null && !claim.getClaimAdjustmentsList().isEmpty()) {
      for (ClaimAdjustments adj : claim.getClaimAdjustmentsList()) {
        // Assign adjustment request and reasons
        if (adj.getAdjustmentType().equals(GlobalConstants.CLAIM_ADJ_REQ_TYPE)) {
          claimView.setClaimAdjustmentsRequest(adj);
          claimView.getClaimAdjustmentsRequest().setAmount(claim.getTotalAmountClaimed());
          claimView.setAdjRequestReasons(fillReasonArray(adj.getAdjustmentReasonsList()));

          // Assign adjustment decision and reasons
        } else if (adj.getAdjustmentType().equals(GlobalConstants.CLAIM_ADJ_DEC_TYPE)) {
          claimView.setClaimAdjustmentsDecision(adj);
          claimView.setAdjDecisionReasons(fillReasonArray(adj.getAdjustmentReasonsList()));
        }
      }
    }

    if (claimView.getClaimAdjustmentsRequest().getAmount() == null) {

      claimView.getClaimAdjustmentsRequest().setAmount(claim.getTotalAmountClaimed());
    }
    if (claimView.getClaimAdjustmentsRequest().getAdjustmentDate() == null) {
      claimView.getClaimAdjustmentsRequest().setAdjustmentDate(LocalDate.now());
    }
    if (claimView.getClaimAdjustmentsDecision().getAmount() == null) {
      claimView.getClaimAdjustmentsDecision().setAmount(claim.getTotalAmountClaimed());
    }
    if (claimView.getClaimAdjustmentsDecision().getAdjustmentDate() == null) {
      claimView.getClaimAdjustmentsDecision().setAdjustmentDate(LocalDate.now());
    }
  }

  private void claimErrorsEntityToViewModel(HospitalOopClaims claim, ClaimViewModel claimView) {

    List<String> listMessages = claimErrorsToList(claim.getClaimErrorsList());
    claimView.setValidationErrors(listMessages);
  }

  /**
   * Claim errors to list.
   *
   * @param errorList the error list
   * @return the list
   */
  public List<String> claimErrorsToList(List<ClaimErrors> errorList) {
    return errorList.stream()
        // Sort by ID
        .sorted((e1, e2) -> e1.getId().compareTo(e2.getId()))
        // Get only the text
        .map(e -> e.getErrorText())
        .collect(Collectors.toList());
  }

  /**
   * A reason array must be 2 items long for the view. If less that 2 items in entity, fill with
   * empty values.
   *
   * @param adjustmentReasonsList the adjustment reasons list
   * @return the adjustment reasons[]
   */
  private AdjustmentReasons[] fillReasonArray(List<AdjustmentReasons> adjustmentReasonsList) {

    AdjustmentReasons[] retArray = new AdjustmentReasons[2];

    // Order by sequence
    List<AdjustmentReasons> sorted =
        adjustmentReasonsList.stream()
            .sorted(Comparator.comparing(AdjustmentReasons::getSequenceNum))
            .collect(Collectors.toList());

    for (int i = 0; i < 2; i++) {
      if (sorted.size() > i) {
        retArray[i] = sorted.get(i);
      } else {
        retArray[i] = new AdjustmentReasons(null, (long) i + 1, null, null);
      }
    }
    return retArray;
  }

  private void claimContentsEntityToView(
      ClaimContentContext context, HospitalOopClaims claim, String[] claimContentsView) {

    // Get ClaimContents for specific context ordered by seqNum from the claim Entity
    List<ClaimContents> contentList =
        claim.getClaimContentsList().stream()
            .filter(c -> c.getContext().equals(context.toString()))
            .sorted((c1, c2) -> c1.getSequenceNum().compareTo(c2.getSequenceNum()))
            .collect(Collectors.toList());

    // Fill the view array
    IntStream.range(0, claimContentsView.length)
        .forEach(
            i ->
                claimContentsView[i] =
                    (contentList.size() > i) ? contentList.get(i).getCdcId().getCodeValue() : null);
  }

  private String claimContentsEntityToView(ClaimContentContext context, HospitalOopClaims claim) {
    // Get ClaimContents for specific context ordered by seqNum from the claim Entity
    ClaimContents content =
        claim.getClaimContentsList().stream()
            .filter(c -> c.getContext().equals(context.toString()))
            .sorted((c1, c2) -> c1.getSequenceNum().compareTo(c2.getSequenceNum()))
            .findFirst()
            .orElse(null);
    if (content != null) {
      return content.getCdcId().getCodeValue();
    }
    return null;
  }

  private void highcostEntityToView(
      HospitalOopClaims claim, HighcostViewModel[] highCostProcedures) {

    // Get ClaimContents for specific context ordered by seqNum from the claim Entity
    List<HighcostProcedurePerformed> contentList =
        claim.getHighcostProcedurePerformedList().stream()
            .sorted((c1, c2) -> c1.getSequenceNum().compareTo(c2.getSequenceNum()))
            .collect(Collectors.toList());

    // Fill the view array
    IntStream.range(0, highCostProcedures.length)
        .forEach(
            i ->
                highCostProcedures[i] =
                    (contentList.size() > i)
                        ? new HighcostViewModel(contentList.get(i))
                        : new HighcostViewModel());
  }
}
