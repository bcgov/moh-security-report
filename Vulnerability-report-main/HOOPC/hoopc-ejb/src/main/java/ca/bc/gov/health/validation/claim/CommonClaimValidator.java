package ca.bc.gov.health.validation.claim;

import ca.bc.gov.health.constants.ClaimDetailCodePurpose;
import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.service.HoopcAppService;
import ca.bc.gov.health.service.viewmodel.ClaimViewModel;
import ca.bc.gov.health.validation.ValidatorBase;
import ca.bc.gov.health.validation.rule.ComplexRule;
import ca.bc.gov.health.validation.rule.InDateRangeRule;
import ca.bc.gov.health.validation.rule.LookupRule;
import ca.bc.gov.health.validation.rule.MandatoryRule;
import ca.bc.gov.health.validation.rule.ValidationRule;
import jakarta.inject.Inject;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;

/** The Class CommonClaimValidator. */
public abstract class CommonClaimValidator extends ValidatorBase<ClaimViewModel> {

  private static final String DISCHARGE_DATE = "Discharge Date";

  private static final String ADMISSION_DATE = "Admission Date";

  @Inject protected HoopcAppService appService;

  @Inject protected ClaimValidatorComplexRules complexRules;

  /**
   * Create validation rules for EDITADMISSIONINFO.
   *
   * @return the list
   */
  protected List<ValidationRule<ClaimViewModel>> editAdmissionRules() {
    // Assumes claimView.getAdmission() not null
    List<ValidationRule<ClaimViewModel>> rules = new ArrayList<>();

    // Admission Date PD_ADMISSION_DATE
    rules.add(
        new MandatoryRule<ClaimViewModel, LocalDate>(
            ADMISSION_DATE, c -> c.getAdmission().getAdmissionDate()));
    // Admission Date <= Discharge Date
    rules.add(
        new InDateRangeRule<ClaimViewModel, LocalDate>(
            ADMISSION_DATE,
            c -> c.getAdmission().getAdmissionDate(),
            null,
            c -> c.getAdmission().getDischargeDate(),
            null,
            DISCHARGE_DATE));

    // Discharge Date PD_DISCHARGE_DATE
    rules.add(
        new MandatoryRule<ClaimViewModel, LocalDate>(
            DISCHARGE_DATE, c -> c.getAdmission().getDischargeDate()));

    // Total Days Stay PN_TOTAL_DAYS_STAY
    rules.add(
        new MandatoryRule<ClaimViewModel, Integer>(
            "Total Days Stay", c -> c.getAdmission().getTotalDaysStay()));
    rules.add(
        new ComplexRule<ClaimViewModel>(
            "Total Days Stay", c -> complexRules.checkTotalDaysStay(c)));

    // Long Term Stay Indicator PV_LONG_TERM_STAY_IND
    rules.add(
        new ComplexRule<ClaimViewModel>(
            "Long Term Stay Indicator", c -> complexRules.checkLongTermIndicator(c)));

    // Per Diem Rate (Ward Rate) PN_PER_DIEM_RATE
    rules.add(
        new MandatoryRule<ClaimViewModel, Integer>(
            "Per Diem Rate", c -> c.getAdmission().getWardRate()));

    return rules;
  }

  /**
   * Create validation rules for EDITHIGHCOSTPROCEDUREINFO.
   *
   * @return the list
   */
  protected List<ValidationRule<ClaimViewModel>> editHighCostProcedureRules() {
    List<ValidationRule<ClaimViewModel>> rules = new ArrayList<>();

    for (int index = 1; index <= GlobalConstants.INPATIENT_NB_CODING; index++) {
      int i = index;

      // MANDATORYVALUE - PV_HIGH_COST_CODE & PD_HIGH_COST_DATE & PN_HIGH_COST_AMOUNT
      rules.add(
          new ComplexRule<ClaimViewModel>(
              "HighCostProcedureCode Mandatory",
              c ->
                  complexRules.checkHighcostMandatory(
                      c.getHighCostProcedures()[i - 1], "Code", i)));
      rules.add(
          new ComplexRule<ClaimViewModel>(
              "HighCostProcedureDate Mandatory",
              c ->
                  complexRules.checkHighcostMandatory(
                      c.getHighCostProcedures()[i - 1], "Date", i)));
      rules.add(
          new ComplexRule<ClaimViewModel>(
              "HighCostProcedureAmount Mandatory",
              c ->
                  complexRules.checkHighcostMandatory(
                      c.getHighCostProcedures()[i - 1], "Amount", i)));

      String fieldPrefix = "High Cost #" + i + " ";
      // LOOKUPCODEID - HIGH_COST_PROCEDURE_CODE
      rules.add(
          new LookupRule<ClaimViewModel, String>(
              fieldPrefix + "Code",
              c -> c.getHighCostProcedures()[i - 1].getCodeValue(),
              c -> appService.findHighcostProcedureByCode((Short.valueOf(c))) != null));

      // DATEINRANGE - PD_HIGH_COST_DATE
      rules.add(
          new InDateRangeRule<ClaimViewModel, LocalDate>(
              fieldPrefix + "Date",
              c -> c.getHighCostProcedures()[i - 1].getProcedureDate(),
              c -> c.getAdmission().getAdmissionDate(),
              c -> c.getAdmission().getDischargeDate(),
              ADMISSION_DATE,
              DISCHARGE_DATE));

      // CHECKHIGHCOSTPROCAMOUNT
      rules.add(
          new ComplexRule<ClaimViewModel>(
              fieldPrefix + "Amount",
              c -> complexRules.checkHighCostProcAmount(c.getHighCostProcedures()[i - 1])));
    }

    return rules;
  }

  /**
   * Create validation rules for EDITPROCEDUREINFO.
   *
   * @return the list
   */
  protected List<ValidationRule<ClaimViewModel>> editProcedureInfoRules() {
    // Assumes claimView.getProcedureCodes() not null
    List<ValidationRule<ClaimViewModel>> rules = new ArrayList<>();

    // For procedure codes 1 to 3
    for (int i = 1; i <= GlobalConstants.INPATIENT_NB_CODING; i++) {
      String fieldName = "Procedure Code #" + i;

      int index = i - 1;
      // PV_PROCEDURE_CODE
      rules.add(
          new LookupRule<ClaimViewModel, String>(
              fieldName,
              c -> c.getProcedureCodes()[index],
              c -> !appService.getClaimDetailCodes(c, ClaimDetailCodePurpose.PROCEDURE).isEmpty()));

      // CHECKCODINGSCHEME
      rules.add(
          new ComplexRule<ClaimViewModel>(
              "Check Coding Scheme",
              c ->
                  complexRules.checkCodingScheme(
                      c,
                      fieldName,
                      ClaimDetailCodePurpose.PROCEDURE,
                      v -> v.getProcedureCodes()[index])));
    }

    return rules;
  }

  /**
   * Create validation rules for EDITDIAGNOSTICINFO.
   *
   * @return the list
   */
  protected List<ValidationRule<ClaimViewModel>> editDiagnosticRules() {
    // Assumes claimView.getDiagnostic() not null
    List<ValidationRule<ClaimViewModel>> rules = new ArrayList<>();

    // Only Diagnostic code #1 is mandatory
    rules.add(
        new MandatoryRule<ClaimViewModel, String>(
            "Diagnostic Code #1", c -> c.getMainDiagnosisCode()));

    // For diagnostic codes 1 to 3
    for (int i = 1; i <= GlobalConstants.INPATIENT_NB_CODING; i++) {
      String fieldName = "Diagnostic Code #" + i;

      int index = i - 1;
      // PV_DIAGNOSTIC_CODE
      rules.add(
          new LookupRule<ClaimViewModel, String>(
              fieldName,
              c -> c.getDiagnosisCodes()[index],
              c ->
                  !appService.getClaimDetailCodes(c, ClaimDetailCodePurpose.DIAGNOSTIC).isEmpty()));

      // CHECKCODINGSCHEME
      rules.add(
          new ComplexRule<ClaimViewModel>(
              "Check Coding Scheme",
              c ->
                  complexRules.checkCodingScheme(
                      c,
                      fieldName,
                      ClaimDetailCodePurpose.DIAGNOSTIC,
                      v -> v.getDiagnosisCodes()[index])));
    }

    return rules;
  }

  // TODO: Used for Validator junits tests only because Mockito doesn't inject
  protected void setComplexRules(ClaimValidatorComplexRules complexRules) {
    this.complexRules = complexRules;
  }
}
