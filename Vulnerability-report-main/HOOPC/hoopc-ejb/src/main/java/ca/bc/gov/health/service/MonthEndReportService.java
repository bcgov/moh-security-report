package ca.bc.gov.health.service;

import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.database.entity.ProvinceMonthendStatus;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.report.BaseReportBuilder;
import ca.bc.gov.health.report.model.ErrorRptInViewModel;
import ca.bc.gov.health.report.model.ErrorRptOutViewModel;
import ca.bc.gov.health.report.model.MEBalRptProcessorViewModel;
import ca.bc.gov.health.report.model.MEClaimsFileProcessorViewModel;
import ca.bc.gov.health.report.model.MEFinRptViewModel;
import ca.bc.gov.health.report.model.MEInpDtlRptProcessorViewModel;
import ca.bc.gov.health.report.model.MEInpRejRptViewModel;
import ca.bc.gov.health.report.model.MEInvLetterViewModel;
import ca.bc.gov.health.report.model.MEOutDtlRptProcessorViewModel;
import ca.bc.gov.health.report.model.MEOutRejRptViewModel;
import ca.bc.gov.health.report.model.MEReimburseRptViewModel;
import ca.bc.gov.health.report.model.MEReqRptProcessorViewModel;
import ca.bc.gov.health.report.model.MESumServiceReportModel;
import ca.bc.gov.health.report.model.MESumServiceViewModel;
import ca.bc.gov.health.report.model.PayReqReportViewModel;
import ca.bc.gov.health.report.transformer.MESumServiceViewToReportFormat;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.persistence.ParameterMode;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.StoredProcedureQuery;
import jakarta.persistence.TypedQuery;
import jakarta.security.enterprise.SecurityContext;
import java.sql.Blob;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import moh.hoopc.util.ExcelHelper;
import moh.hoopc.util.PDFHelper;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperExportManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.data.JRBeanCollectionDataSource;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.xml.JRXmlLoader;
import org.apache.commons.io.IOUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Stateless
public class MonthEndReportService {

  private static final String PC_REPORT_REQUESTS_CONST = "pc_ReportRequests";

  private static final String PN_RESULT_CODE_CONST = "pn_resultCode";

  private static final String PV_BILLING_PERIOD_CODE_CONST = "pv_BillingPeriodCode";

  private static final String PV_REPORT_ID_CODE_CONST = "pv_ReportIDCode";

  private static final String PV_HA_LIST_CONST = "pv_HAList";

  private static final String PV_RESIDENCY_TYPE_CONST = "pv_ResidencyType";

  private static final String PV_MESSAGE_CONST = "pv_message";

  private static final String PV_SESSION_ID_CONST = "pv_sessionID";

  private static final String PV_USER_ID_CONST = "pv_userID";

  @PersistenceContext(unitName = "hoopc-ejb_pu")
  private EntityManager em;

  @Inject SecurityContext securityContext;
  @Inject HoopcAppService appService;
  @Inject MonthEndService meService;

  private static final Logger logger = LoggerFactory.getLogger("MonthEndReportService");

  public List<MEReqRptProcessorViewModel> queryMEReqRptProcessor(long seqId) {
    return em.createNamedQuery(
            "DummyMonthEndReportEntity.fetchRecordsMEReqRptProcessor",
            MEReqRptProcessorViewModel.class)
        .setParameter(1, seqId)
        .getResultList();
  }

  public String queryMEReqRptProcessorNoDataHeading(long seqId) {
    List<String> noDataHeadings =
        em.createNativeQuery("select NO_DATA_HEADING from V_IN_ADJ_OR_DECL_TITLE where SEQ_ID = ?")
            .setParameter(1, seqId)
            .getResultList();
    if (noDataHeadings.size() == 1) {
      return noDataHeadings.get(0);
    } else {
      logger.warn(
          "NO_DATA_HEADING query did not return exactly one result. seqId = '{}', results: '{}'",
          seqId,
          noDataHeadings);
      return "";
    }
  }

  public List<MEBalRptProcessorViewModel> queryMEBalRptProcessor(long seqId) {
    return em.createNamedQuery(
            "DummyMonthEndReportEntity.fetchRecordsMEBalRptProcessor",
            MEBalRptProcessorViewModel.class)
        .setParameter(1, seqId)
        .getResultList();
  }

  public List<MEInpDtlRptProcessorViewModel> queryMEInpDtlRptProcessor(long seqId) {
    TypedQuery<MEInpDtlRptProcessorViewModel> namedQuery =
        em.createNamedQuery(
                "DummyMonthEndReportEntity.fetchRecordsMEInpDtlRptProcessor",
                MEInpDtlRptProcessorViewModel.class)
            .setParameter(1, seqId);
    return namedQuery.getResultList();
  }

  public List<MEInpDtlRptProcessorViewModel> queryMENResInpDtlRptProcessor(long seqId) {
    TypedQuery<MEInpDtlRptProcessorViewModel> namedQuery =
        em.createNamedQuery(
                "DummyMonthEndReportEntity.fetchRecordsMENResInpDtlRptProcessor",
                MEInpDtlRptProcessorViewModel.class)
            .setParameter(1, seqId);
    return namedQuery.getResultList();
  }

  public List<MEOutDtlRptProcessorViewModel> queryMEOutDtlRptProcessor(long seqId) {
    TypedQuery<MEOutDtlRptProcessorViewModel> namedQuery =
        em.createNamedQuery(
                "DummyMonthEndReportEntity.fetchRecordsMEOutDtlRptProcessor",
                MEOutDtlRptProcessorViewModel.class)
            .setParameter(1, seqId);
    return namedQuery.getResultList();
  }

  public List<MEOutDtlRptProcessorViewModel> queryMENonResOutDtlRptProcessor(long seqId) {
    TypedQuery<MEOutDtlRptProcessorViewModel> namedQuery =
        em.createNamedQuery(
                "DummyMonthEndReportEntity.fetchRecordsMENonResOutDtlRptProcessor",
                MEOutDtlRptProcessorViewModel.class)
            .setParameter(1, seqId);
    return namedQuery.getResultList();
  }

  public List<PayReqReportViewModel> queryPayReqProcessor(long seqId) {
    TypedQuery<PayReqReportViewModel> namedQuery =
        em.createNamedQuery(
                "DummyMonthEndReportEntity.fetchRecordsPayReqProcessor",
                PayReqReportViewModel.class)
            .setParameter(1, seqId);
    return namedQuery.getResultList();
  }

  public List<MEFinRptViewModel> queryMEFinRptProcessor(long seqId) {
    TypedQuery<MEFinRptViewModel> namedQuery =
        em.createNamedQuery(
                "DummyMonthEndReportEntity.fetchRecordsMEFinRptProcessor", MEFinRptViewModel.class)
            .setParameter(1, seqId);
    return namedQuery.getResultList();
  }

  public List<MEReimburseRptViewModel> queryMEReimburseRptProcessor(long seqId) {
    TypedQuery<MEReimburseRptViewModel> namedQuery =
        em.createNamedQuery(
                "DummyMonthEndReportEntity.fetchRecordsMEReimburseRptProcessor",
                MEReimburseRptViewModel.class)
            .setParameter(1, seqId);
    return namedQuery.getResultList();
  }

  public List<MEInpRejRptViewModel> queryMEInpRejRptProcessor(long seqId) {
    TypedQuery<MEInpRejRptViewModel> namedQuery =
        em.createNamedQuery(
                "DummyMonthEndReportEntity.fetchRecordsMEInpRejRptProcessor",
                MEInpRejRptViewModel.class)
            .setParameter(1, seqId);
    return namedQuery.getResultList();
  }

  public List<MEOutRejRptViewModel> queryMEOutRejRptPreProcessor(long seqId) {
    TypedQuery<MEOutRejRptViewModel> namedQuery =
        em.createNamedQuery(
                "DummyMonthEndReportEntity.fetchRecordsMEOutRejRptPreProcessor",
                MEOutRejRptViewModel.class)
            .setParameter(1, seqId);
    return namedQuery.getResultList();
  }

  public List<MEInvLetterViewModel> queryRecordsMEInvLetterRptProcessor(long seqId) {
    TypedQuery<MEInvLetterViewModel> namedQuery =
        em.createNamedQuery(
                "DummyMonthEndReportEntity.fetchRecordsMEInvLetterRptProcessor",
                MEInvLetterViewModel.class)
            .setParameter(1, seqId);
    return namedQuery.getResultList();
  }

  public List<MESumServiceReportModel> queryRecordsMESumServiceRptProcessor(long seqId) {
    TypedQuery<MESumServiceViewModel> namedQuery =
        em.createNamedQuery(
                "DummyMonthEndReportEntity.fetchRecordsMESumServiceRptProcessor",
                MESumServiceViewModel.class)
            .setParameter(1, seqId);
    List<MESumServiceViewModel> queryResult = namedQuery.getResultList();

    return MESumServiceViewToReportFormat.transformSumServiceViewToReport(queryResult);
  }

  public List<MEClaimsFileProcessorViewModel> queryRecordsMEClaimsFileProcessor(
      long seqId, String provinceCode) {
    TypedQuery<MEClaimsFileProcessorViewModel> namedQuery =
        em.createNamedQuery(
                "DummyMonthEndReportEntity.fetchMEClaimsFileProcessor",
                MEClaimsFileProcessorViewModel.class)
            .setParameter(1, seqId);
    TypedQuery<MEClaimsFileProcessorViewModel> namedQueryON =
        em.createNamedQuery(
                "DummyMonthEndReportEntity.fetchMEClaimsFileProcessorON",
                MEClaimsFileProcessorViewModel.class)
            .setParameter(1, seqId);
    if (provinceCode.equals("ON")) {
      return namedQueryON.getResultList();
    } else {
      return namedQuery.getResultList();
    }
  }

//Start code BCMOHAD-9621 Automatically generate the error reports for the Alberta and Ontario files **
  public List<ErrorRptInViewModel> queryRecordsErrorInRptProcessor(String period, String prov) {
    TypedQuery<ErrorRptInViewModel> namedQuery =
        em.createNamedQuery(
                "DummyMonthEndReportEntity.fetchRecordsErrorInRptProcessor",
                ErrorRptInViewModel.class)
            .setParameter(1, period)
            .setParameter(2, prov);
    return namedQuery.getResultList();
  }

  public List<ErrorRptOutViewModel> queryRecordsErrorOutRptProcessor(String period, String prov) {
    TypedQuery<ErrorRptOutViewModel> namedQuery =
        em.createNamedQuery("DummyMonthEndReportEntity.fetchRecordsErrorOutRptProcessor",
                ErrorRptOutViewModel.class)
            .setParameter(1, period)
            .setParameter(2, prov);
    return namedQuery.getResultList();
  }
//End code BCMOHAD-9621 Automatically generate the error reports for the Alberta and Ontario files **
  
  /**
   * Generates a PDF Resident Balance Report (hoopcr0001) for the specified provinces.
   *
   * <p>Note that if the Province list is empty, the PL/SQL procedure used by this method generates
   * a balance report for all provinces.
   *
   * @param provinces a list of province codes ("AB", "ON", ...).
   * @return a PDF Balance Report.
   */
  public byte[] generateBalanceReport(List<String> provinces) {

    StoredProcedureQuery query = em.createStoredProcedureQuery("HOOPC2_REPORTS.PreProcessRep0001");
    query.registerStoredProcedureParameter("pv_provincesList", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_mustBalanceFlag", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter(PV_USER_ID_CONST, String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter(PV_SESSION_ID_CONST, String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_reportReqID", Integer.class, ParameterMode.OUT);
    query.registerStoredProcedureParameter("pv_ReportFileName", String.class, ParameterMode.OUT);
    query.registerStoredProcedureParameter(PN_RESULT_CODE_CONST, Integer.class, ParameterMode.OUT);
    query.registerStoredProcedureParameter(PV_MESSAGE_CONST, String.class, ParameterMode.OUT);

    query.setParameter(PV_USER_ID_CONST, securityContext.getCallerPrincipal().getName());
    query.setParameter("pv_provincesList", String.join(",", provinces));

    query.execute();

    return createPdfReport(
        queryMEBalRptProcessor((Integer) query.getOutputParameterValue("pv_reportReqID")));
  }

  private byte[] createPdfReport(List<MEBalRptProcessorViewModel> balanceInvoiceClaims) {
    Map<String, Object> parameters = new HashMap<>();
    if (!balanceInvoiceClaims.isEmpty()) {
      parameters.put("startPeriod", balanceInvoiceClaims.get(0).getStartDate());
      parameters.put("endPeriod", balanceInvoiceClaims.get(0).getEndDate());
    }
    parameters.put("noRecordFound", "");
    return invokeJasper(balanceInvoiceClaims, parameters, "hoopcr0001");
  }

  private static byte[] invokeJasper(
      List<?> data, Map<String, Object> parameters, String reportFilename) {
    try {
      JRBeanCollectionDataSource dataSource = new JRBeanCollectionDataSource(data);
      JasperDesign jasDesign =
          JRXmlLoader.load(
              BaseReportBuilder.class
                  .getClassLoader()
                  .getResourceAsStream(
                      MessageFormat.format(GlobalConstants.REPORT_TEMPLATE, reportFilename)));
      JasperReport jasReport = JasperCompileManager.compileReport(jasDesign);
      JasperPrint jprint = JasperFillManager.fillReport(jasReport, parameters, dataSource);
      return JasperExportManager.exportReportToPdf(jprint);
    } catch (JRException ex) {
      throw new IllegalStateException(ex);
    }
  }

  /**
   * Prints the complete MonthEnd non resident report. The report is a composite of:
   *
   * <p>by Health Authority
   * <li>HOOPCR0009-Reimbursement Summary
   *
   *     <p>by Hospitals
   * <li>HOOPCR0006-Detail Listing Of Inpatient Claims
   * <li>HOOPCR0007-Detail Listing Of Outpatient Claims
   * <li>HOOPCR0020-Detail Rejected Inpatient Claims
   * <li>HOOPCR0021-Detail Rejected Outpatient Claims
   *
   *     <p>by Provinces (other than BC)
   * <li>HOOPCR0005-Invoice Letter
   * <li>HOOPCR0006-Detail Listing Of Inpatient Claims
   * <li>HOOPCR0007-Detail Listing Of Outpatient Claims
   * <li>HOOPCR0008-Summary of Outpatient Services and Costs
   *
   * @param selectedProvinces
   * @return
   * @throws Exception
   */
  @SuppressWarnings("squid:S3776")
  public byte[] retrieveAllMonthEndNonResReports(List<String> selectedProvinces) throws Exception {
    List<ProvinceMonthendStatus> statuses =
        meService.getMonthEndStatuses(GlobalConstants.NRES_RESIDENCY_TYPE, selectedProvinces);
    // Make sure BC is first that other provinces in alphabetical order, assumes
    // getMonthEndStatuses() returns provinces in alphabetical order.
    List<byte[]> reportData = new ArrayList<>();
    List<byte[]> reportDataOthers = new ArrayList<>();
    for (ProvinceMonthendStatus status : statuses) {
      if (!meService.isElectronicProvinces(status.getPteId().getProvinceCode())) {
        if (status.getPteId().getProvinceCode().equals("BC")) {
          byte[] file = retrieveReportsNonRes("HOOPCR0009");
          if (file != null) {
            reportData.add(file);
          }
          byte[] file2 =
              retrieveHospReports(
                  null,
                  GlobalConstants.NRES_RESIDENCY_TYPE,
                  "HOOPCR0006,HOOPCR0007,HOOPCR0020,HOOPCR0021",
                  null);
          if (file2 != null) {
            reportData.add(file2);
          }
        } else {
          byte[] file =
              retrieveReports(
                  Arrays.asList(status.getPteId().getProvinceCode()),
                  GlobalConstants.NRES_RESIDENCY_TYPE,
                  "HOOPCR0005,HOOPCR0006,HOOPCR0007,HOOPCR0008");
          if (file != null) {
            reportDataOthers.add(file);
          }
        }
      }
    }
    // Make sure BC is first that other provinces in alphabetical order
    reportData.addAll(reportDataOthers);

    byte[] lOutputBytes = null;
    if (reportData.size() > 1) {
      try {
        lOutputBytes = PDFHelper.mergePDFDocs(reportData);
      } catch (Exception ex) {
        throw new IllegalStateException(ex);
      }
    } else if (!reportData.isEmpty()) {
      lOutputBytes = (byte[]) reportData.get(0);
    }
    return lOutputBytes;
  }

  public byte[] retrieveHaReports(
      List<String> haList, String residencyType, String reportList, String billingPeriod)
      throws HoopcException {
    StoredProcedureQuery query;
    try {
      query = em.createStoredProcedureQuery("HOOPC2_REPREPOS.getHAReportRequests");
      query.registerStoredProcedureParameter(
          PV_REPORT_ID_CODE_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(
          PV_RESIDENCY_TYPE_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(PV_HA_LIST_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(
          PV_BILLING_PERIOD_CODE_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(
          PC_REPORT_REQUESTS_CONST, void.class, ParameterMode.REF_CURSOR);
      query.registerStoredProcedureParameter(PV_USER_ID_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(PV_SESSION_ID_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(
          PN_RESULT_CODE_CONST, Integer.class, ParameterMode.OUT);
      query.registerStoredProcedureParameter(PV_MESSAGE_CONST, String.class, ParameterMode.OUT);

      query.setParameter(PV_REPORT_ID_CODE_CONST, reportList);
      query.setParameter(PV_RESIDENCY_TYPE_CONST, residencyType);
      query.setParameter(PV_HA_LIST_CONST, haList == null ? null : String.join(",", haList));
      // If pv_BillingPeriodCode == null, PL/SQL procedures uses current billing period.
      query.setParameter(PV_BILLING_PERIOD_CODE_CONST, billingPeriod);
      query.setParameter(PV_USER_ID_CONST, securityContext.getCallerPrincipal().getName());
      query.setParameter(PV_SESSION_ID_CONST, "");

      query.execute();
      return mergeReports(query.getResultList());

    } catch (Throwable e) {
      HoopcException he = new HoopcException("Error in retrieveHaReports()", e);
      logger.error("Error in retrieveHaReports()", e);
      throw he;
    }
  }

  public byte[] retrieveHospReports(
      List<String> hospList, String residencyType, String reportList, String billingPeriod)
      throws HoopcException {
    try {
      StoredProcedureQuery query =
          em.createStoredProcedureQuery("HOOPC2_REPREPOS.GetHospReportRequests");
      query.registerStoredProcedureParameter(
          PV_REPORT_ID_CODE_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(
          PV_RESIDENCY_TYPE_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter("pv_HospitalList", String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(
          PV_BILLING_PERIOD_CODE_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(
          PC_REPORT_REQUESTS_CONST, void.class, ParameterMode.REF_CURSOR);
      query.registerStoredProcedureParameter(PV_USER_ID_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(PV_SESSION_ID_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(
          PN_RESULT_CODE_CONST, Integer.class, ParameterMode.OUT);
      query.registerStoredProcedureParameter(PV_MESSAGE_CONST, String.class, ParameterMode.OUT);

      query.setParameter(PV_REPORT_ID_CODE_CONST, reportList);
      query.setParameter(PV_RESIDENCY_TYPE_CONST, residencyType);
      query.setParameter("pv_HospitalList", hospList == null ? null : String.join(",", hospList));
      if (StringUtils.isBlank(billingPeriod)) {
        billingPeriod = meService.getProcessingMonth(residencyType);
      }
      query.setParameter(PV_BILLING_PERIOD_CODE_CONST, billingPeriod);
      query.setParameter(PV_USER_ID_CONST, securityContext.getCallerPrincipal().getName());
      query.setParameter(PV_SESSION_ID_CONST, "");

      query.execute();

      return mergeReports(query.getResultList());
    } catch (Throwable e) {
      HoopcException he = new HoopcException("Error in retrieveHaReports()", e);
      logger.error("Error in retrieveHaReports()", e);
      throw he;
    }
  }

  @SuppressWarnings("squid:S00112")
  public byte[] retrieveReportsNonRes(String reportList) throws HoopcException {
    try {
      StoredProcedureQuery query =
          em.createStoredProcedureQuery("HOOPC2_REPREPOS.GETHAREPORTREQUESTS");
      query.registerStoredProcedureParameter(
          PV_REPORT_ID_CODE_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(
          PV_RESIDENCY_TYPE_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(PV_HA_LIST_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(
          PV_BILLING_PERIOD_CODE_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(
          PC_REPORT_REQUESTS_CONST, void.class, ParameterMode.REF_CURSOR);
      query.registerStoredProcedureParameter(PV_USER_ID_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(PV_SESSION_ID_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(
          PN_RESULT_CODE_CONST, Integer.class, ParameterMode.OUT);
      query.registerStoredProcedureParameter(PV_MESSAGE_CONST, String.class, ParameterMode.OUT);

      query.setParameter(PV_REPORT_ID_CODE_CONST, reportList);
      query.setParameter(PV_RESIDENCY_TYPE_CONST, GlobalConstants.NRES_RESIDENCY_TYPE);
      query.setParameter(PV_HA_LIST_CONST, null);
      // If pv_BillingPeriodCode == null, PL/SQL procedures uses current billing period.
      query.setParameter(
          PV_BILLING_PERIOD_CODE_CONST,
          meService.getProcessingMonth(GlobalConstants.NRES_RESIDENCY_TYPE));
      query.setParameter(PV_USER_ID_CONST, securityContext.getCallerPrincipal().getName());
      query.setParameter(PV_SESSION_ID_CONST, "");

      query.execute();
      List<Object[]> resultList = query.getResultList();
      return mergeReports(resultList);
    } catch (Throwable e) {
      HoopcException he = new HoopcException("Error in retrieveHaReports()", e);
      logger.error("Error in retrieveHaReports()", e);
      throw he;
    }
  }

  // PDF reports, current (null) billing date
  public byte[] retrieveReports(
      List<String> selectedProvinces, String residencyType, String reportList) throws Exception {
    return retrieveReports(selectedProvinces, residencyType, reportList, null, "PDF");
  }

  // PDF reports, user set billing date
  public byte[] retrieveReports(
      List<String> selectedProvinces, String residencyType, String reportList, String billingPeriod)
      throws Exception {
    return retrieveReports(selectedProvinces, residencyType, reportList, billingPeriod, "PDF");
  }

  // Overloaded to allow setting all parameters
  // TODO - Rename to retrieveProvReports ??
  public byte[] retrieveReports(
      List<String> selectedProvinces,
      String residencyType,
      String reportList,
      String billingPeriod,
      String dataFormat)
      throws HoopcException {
    try {
      StoredProcedureQuery query =
          em.createStoredProcedureQuery("HOOPC2_REPREPOS.getProvReportRequests");
      query.registerStoredProcedureParameter(
          PV_REPORT_ID_CODE_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(
          PV_RESIDENCY_TYPE_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter("pv_ProvinceList", String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(
          PV_BILLING_PERIOD_CODE_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(
          PC_REPORT_REQUESTS_CONST, void.class, ParameterMode.REF_CURSOR);
      query.registerStoredProcedureParameter(PV_USER_ID_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(PV_SESSION_ID_CONST, String.class, ParameterMode.IN);
      query.registerStoredProcedureParameter(
          PN_RESULT_CODE_CONST, Integer.class, ParameterMode.OUT);
      query.registerStoredProcedureParameter(PV_MESSAGE_CONST, String.class, ParameterMode.OUT);

      query.setParameter(PV_REPORT_ID_CODE_CONST, reportList);
      query.setParameter(PV_RESIDENCY_TYPE_CONST, residencyType);
      query.setParameter("pv_ProvinceList", String.join(",", selectedProvinces));
      if (StringUtils.isBlank(billingPeriod)) {
        billingPeriod = meService.getProcessingMonth(residencyType);
      }
      query.setParameter(PV_BILLING_PERIOD_CODE_CONST, billingPeriod);

      query.execute();

      return mergeReports(query.getResultList(), dataFormat);
    } catch (Throwable e) {
      HoopcException he = new HoopcException("Error in retrieveHaReports()", e);
      logger.error("Error in retrieveHaReports()", e);
      throw he;
    }
  }

  // Default to PDF format when not set to allow backward compatibility with pre-existing methods
  // TODO - refactor calling methods to use the method that takes dataFormat as a parameter
  private byte[] mergeReports(List<Object[]> resultList) throws HoopcException {
    String dataFormat = "PDF";
    return mergeReports(resultList, dataFormat);
  }

  private byte[] mergeReports(List<Object[]> resultList, String dataFormat) throws HoopcException {

    List<byte[]> reportData = new ArrayList<>();

    try {
      if (resultList != null) {

        for (Object[] request : resultList) {
          StoredProcedureQuery query =
              em.createStoredProcedureQuery("HOOPC2_REPREPOS.RetrieveReport");
          query.registerStoredProcedureParameter(
              "pn_reportRequestID", Integer.class, ParameterMode.IN);
          query.registerStoredProcedureParameter("pv_dataFormat", String.class, ParameterMode.IN);
          query.registerStoredProcedureParameter(PV_USER_ID_CONST, String.class, ParameterMode.IN);
          query.registerStoredProcedureParameter(
              PV_SESSION_ID_CONST, String.class, ParameterMode.IN);
          query.registerStoredProcedureParameter("pn_lockSeqNum", Integer.class, ParameterMode.OUT);
          query.registerStoredProcedureParameter("ph_reportBlob", Blob.class, ParameterMode.OUT);
          query.registerStoredProcedureParameter(
              PN_RESULT_CODE_CONST, Integer.class, ParameterMode.OUT);
          query.registerStoredProcedureParameter(PV_MESSAGE_CONST, String.class, ParameterMode.OUT);

          query.setParameter("pn_reportRequestID", request[0]);
          query.setParameter("pv_dataFormat", dataFormat);
          query.setParameter(PV_USER_ID_CONST, securityContext.getCallerPrincipal().getName());
          query.setParameter(PV_SESSION_ID_CONST, "");

          query.execute();
          Blob blob = (Blob) query.getOutputParameterValue("ph_reportBlob");
          byte[] data = IOUtils.toByteArray(blob.getBinaryStream());

          if (data != null) {
            reportData.add(data);
          }
        }
      }
    } catch (Throwable e) {
      HoopcException he = new HoopcException("Error in retrieveHaReports()", e);
      logger.error("Error in retrieveHaReports()", e);
      throw he;
    }

    byte[] lOutputBytes = null;
    if (reportData.size() > 1) {
      try {
        if (dataFormat.equals("PDF")) {
          lOutputBytes = PDFHelper.mergePDFDocs(reportData);
        } else if (dataFormat.equals("DELIMITEDDATA")) {
          lOutputBytes = ExcelHelper.mergeExcelDocs(reportData);
        }
      } catch (Exception ex) {
        throw new IllegalStateException(ex);
      }
    } else if (!reportData.isEmpty()) {
      lOutputBytes = (byte[]) reportData.get(0);
    }
    return lOutputBytes;
  }
}
