package ca.bc.gov.health.validation.claim;

import ca.bc.gov.health.exception.HoopcRuntimeException;
import jakarta.inject.Named;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.text.MessageFormat;
import org.apache.commons.lang3.StringUtils;

/** The Class PHNHelper. */
@Named("PHNHelper")
public class PHNHelper {

  public static final int PHN_ERROR_NONE = 0;
  public static final int PHN_ERROR_FORMAT = 80;
  public static final int PHN_ERROR_CHECKSUM = 100;

  @PersistenceContext(unitName = "hoopc-ejb_pu")
  transient EntityManager em;

  /**
   * Validate and insuranceNumber for Province and Territories other than QC.
   *
   * @param provinceCode the province code
   * @param insuranceNumber Insurance number to validate
   * @return PHN_ERROR_NONE, PHN_ERROR_FORMAT, PHN_ERROR_CHECKSUM
   * @throws HoopcRuntimeException the hoopc runtime exception
   */
  public int checkPHN(String provinceCode, String insuranceNumber) {
    return checkPHN(provinceCode, insuranceNumber, null);
  }

  /**
   * Validate and insuranceNumber for QC.
   *
   * @param provinceCode the province code
   * @param insuranceNumber the insurance number
   * @param sexCode the sex code
   * @return the int
   */
  public int checkPHN(String provinceCode, String insuranceNumber, String sexCode) {
    if (StringUtils.equalsIgnoreCase("QC", provinceCode)) {
      return checkXXPHN(provinceCode, insuranceNumber, sexCode);
    } else {
      return checkXXPHN(provinceCode, insuranceNumber, null);
    }
  }

  /**
   * Validate insuranceNumber for Province.
   *
   * @param provinceCode the province code
   * @param insuranceNumber Insurance number to validate
   * @param sexCode the sex code
   * @return PHN_ERROR_NONE, PHN_ERROR_FORMAT, PHN_ERROR_CHECKSUM
   * @throws HoopcRuntimeException the hoopc runtime exception
   */
  private int checkXXPHN(String provinceCode, String insuranceNumber, String sexCode) {
    /*
    There is a different stored procedure for each Province. They all use two
    parameters (one IN and one OUT), but Quebec uses three (two INs and one OUT).
    */
    String spName;
    spName =
        MessageFormat.format("'{' call HOOPC2_InsuranceNums2.Check{0}PHN(?, ?) '}'", provinceCode);
    if (provinceCode.equalsIgnoreCase("QC")) {
      spName =
          MessageFormat.format(
              "'{' call HOOPC2_InsuranceNums2.checkqcphn(?, ?, ?) '}'", provinceCode);
    }

    /*
    Use the raw JDBC API here because EclipseLink 2.7.1 (Payara's JPA implementation)
    isn't closing the Statement used by jakarta.persistence.StoredProcedureQuery
    and the JPA API doesn't let us close it manually. This results in a Statement
    leak detectable by Payara's "statement leak detection" feature, which
    results in an "ORA-01000: maximum open cursors exceeded" error when
    processing lots of claims in a single transaction, for example when importing
    a big claims file on the ImportClaims.xhtml page.

    See also: https://github.com/eclipse-ee4j/jpa-api/issues/162
     */
    Connection connection = em.unwrap(Connection.class);
    try (CallableStatement callableStatement = connection.prepareCall(spName)) {
      callableStatement.setString("pv_insuranceNumber", insuranceNumber);
      callableStatement.registerOutParameter("pn_resultCode", java.sql.Types.INTEGER);
      if (!StringUtils.isBlank(sexCode)) {
        // Only Quebec uses this parameter.
        callableStatement.setString("pv_sexcode", sexCode);
      }
      callableStatement.execute();
      return callableStatement.getInt("pn_resultCode");
    } catch (Exception e) {
      String errMsg = MessageFormat.format("Oracle error in {0}", spName);
      throw new HoopcRuntimeException(errMsg, e);
    }
  }
}
