package ca.bc.gov.health.validation.rule;

import ca.bc.gov.health.validation.ValidationError;
import java.text.MessageFormat;
import java.util.function.Function;
import org.apache.commons.lang3.Range;

/**
 * Validation rule for InRange.
 *
 * <p>Generates a validation error if value is not found in a given range of values. The range is
 * inclusive. Can also be used to compare with one value if min or max is null;
 * <li>min <= value <= max when min and max not null
 * <li>min <= value when max null
 * <li>value <= max when min null
 *
 * @param <T> Type of object
 * @param <R> Type of field
 */
public class InRangeRule<T, R extends Comparable<R>> extends ValidationRule<T> {
  protected Function<T, R> getter;
  protected R min;
  protected R max;
  protected Function<T, R> minGetter;
  protected Function<T, R> maxGetter;
  protected String minName;
  protected String maxName;

  /**
   * Creates a InRange rule with fixed min and/or max values. Example usage:
   *
   * <p><code>
   * new InRangeRule<ClaimViewModel, Long>("Long Value", c -> c.getLongValue(), 0L, 100L);
   * new InRangeRule<ClaimViewModel, Long>("Long Value", c -> c.getLongValue(), null, 100L);
   * new InRangeRule<ClaimViewModel, Long>("Long Value", c -> c.getLongValue(), 0L, null);
   *  </code>
   *
   * @param fieldName Field name to use for error message.
   * @param getter Function to get the value of field
   * @param min min value or null
   * @param max max value or null
   */
  public InRangeRule(String fieldName, Function<T, R> getter, R min, R max) {
    super(ValidationRuleType.IN_RANGE, fieldName);
    this.getter = getter;
    this.min = min;
    this.max = max;
  }

  /**
   * Creates a InRange rule with fixed min and/or max values and min/max names. Example usage:
   *
   * <p><code>
   * new InRangeRule<ClaimViewModel, Long>("Long Value", c -> c.getLongValue(), 0L, 100L, "Min Value", "Max Value");
   *  </code>
   *
   * @param fieldName Field name to use for error message.
   * @param getter Function to get the value of field
   * @param min min value or null
   * @param max max value or null
   * @param minName Name of min value
   * @param maxName Name of max value
   */
  public InRangeRule(
      String fieldName, Function<T, R> getter, R min, R max, String minName, String maxName) {
    this(fieldName, getter, min, max);
    this.minName = minName;
    this.maxName = maxName;
  }

  /**
   * Creates a InRange rule with getters for min and/or max values. Example usage:
   *
   * <p><code>
   * new InRangeRule<ClaimViewModel, Long>("Long Value", c -> c.getLongValue(), c -> c.getMinValue(), c -> c.getMaxValue());
   *  </code>
   *
   * @param fieldName Field name to use for error message.
   * @param getter Function to get the value of field
   * @param min Function to get the value of min or null
   * @param max Function to get the value of max or null
   */
  public InRangeRule(
      String fieldName, Function<T, R> getter, Function<T, R> min, Function<T, R> max) {
    super(ValidationRuleType.IN_RANGE, fieldName);
    this.getter = getter;
    this.minGetter = min;
    this.maxGetter = max;
  }

  /**
   * Creates a InRange rule with getters for min and/or max values and min/max names. Example usage:
   *
   * <p><code>
   * new InRangeRule<ClaimViewModel, Long>("Long Value", c -> c.getLongValue(), c -> c.getMinValue(), c -> c.getMaxValue(), "Min Value", "Max Value");
   *  </code>
   *
   * @param fieldName Field name to use for error message.
   * @param getter Function to get the value of field
   * @param min Function to get the value of min or null
   * @param max Function to get the value of max or null
   * @param minName the min name
   * @param maxName the max name
   */
  public InRangeRule(
      String fieldName,
      Function<T, R> getter,
      Function<T, R> min,
      Function<T, R> max,
      String minName,
      String maxName) {
    this(fieldName, getter, min, max);
    this.minName = minName;
    this.maxName = maxName;
  }

  /**
   * Returns a ValidationError if value not in range.
   *
   * @param object the object
   * @return the validation error
   */
  @Override
  public ValidationError validate(T object) {
    // Get the value
    R value = getValue(getter, object);
    R minVal = getMin(object);
    R maxVal = getMax(object);
    if (value != null) {
      if (minVal == null && maxVal == null) {
        // TODO: Error or not? throw new InvalidParameterException("min and max can not be both
        // null");
      } else if (minVal == null) {
        if (value.compareTo(maxVal) > 0) {
          String errorMsg = buildErrorMsg(getRuleIdentifier(), value, minVal, maxVal);
          return new ValidationError(this, errorMsg, value);
        }
      } else if (maxVal == null) {
        if (value.compareTo(minVal) < 0) {
          String errorMsg = buildErrorMsg(getRuleIdentifier(), value, minVal, maxVal);
          return new ValidationError(this, errorMsg, value);
        }
      } else if (!Range.between(minVal, maxVal).contains(value)) {
        String errorMsg = buildErrorMsg(getRuleIdentifier(), value, minVal, maxVal);
        return new ValidationError(this, errorMsg, value);
      }
    }
    return null;
  }

  private R getMin(T object) {
    if (min != null) {
      // use min is provided
      return min;
    } else if (minGetter != null) {
      // Otherwise try the getter
      return getValue(minGetter, object);
    }
    return null;
  }

  private R getMax(T object) {
    if (max != null) {
      // use max is provided
      return max;
    } else if (maxGetter != null) {
      // Otherwise try the getter
      return getValue(maxGetter, object);
    }
    return null;
  }

  /**
   * Construct the error message. TODO: Add min and max field names to error msg
   *
   * @param fieldName the field name
   * @param value the value
   * @param min the min
   * @param max the max
   * @return the string
   */
  protected String buildErrorMsg(String fieldName, R value, R min, R max) {
    if (max == null) {
      // if max is null
      if (minName == null) {
        return MessageFormat.format(
            getMessage("claim.validation.inrange1"), fieldName, value.toString(), min.toString());
      } else {
        return MessageFormat.format(
            getMessage("claim.validation.inrange1a"),
            fieldName,
            value.toString(),
            minName,
            min.toString());
      }
    } else if (min == null) {
      // if min is null
      if (maxName == null) {
        return MessageFormat.format(
            getMessage("claim.validation.inrange2"), fieldName, value.toString(), max.toString());
      } else {
        return MessageFormat.format(
            getMessage("claim.validation.inrange2a"),
            fieldName,
            value.toString(),
            maxName,
            max.toString());
      }
    } else {
      // if min and max not null
      if (minName == null || maxName == null) {
        return MessageFormat.format(
            getMessage("claim.validation.inrange3"),
            fieldName,
            value.toString(),
            min.toString(),
            max.toString());
      } else {
        return MessageFormat.format(
            getMessage("claim.validation.inrange3a"),
            fieldName,
            value.toString(),
            minName,
            min.toString(),
            maxName,
            max.toString());
      }
    }
  }
}
