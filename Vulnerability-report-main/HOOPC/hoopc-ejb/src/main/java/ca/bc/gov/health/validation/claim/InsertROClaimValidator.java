package ca.bc.gov.health.validation.claim;

import ca.bc.gov.health.service.viewmodel.ClaimViewModel;
import ca.bc.gov.health.validation.rule.ComplexRule;
import ca.bc.gov.health.validation.rule.InDateRangeRule;
import ca.bc.gov.health.validation.rule.InSetRule;
import ca.bc.gov.health.validation.rule.LookupRule;
import ca.bc.gov.health.validation.rule.MandatoryRule;
import ca.bc.gov.health.validation.rule.NotInSetRule;
import ca.bc.gov.health.validation.rule.ValidationRule;
import jakarta.annotation.PostConstruct;
import jakarta.inject.Named;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** Validation rules for Create resident outpatient claims. */
@Named("InsertROClaimValidator")
public class InsertROClaimValidator extends CommonClaimValidator {
  private static final String SERVICE_DATE = "Service Date";
  private static final String TREATING_PROVINCE = "Treating Province";
  private static Logger log = LoggerFactory.getLogger(InsertROClaimValidator.class);

  /** Post construct. */
  @PostConstruct
  private void postConstruct() {
    log.info("InsertROClaimValidator");
  }

  /* (non-Javadoc)
   * @see ca.bc.gov.health.validation.ValidatorBase#getRules(java.lang.Object)
   */
  @Override
  public List<ValidationRule<ClaimViewModel>> getRules(ClaimViewModel claimView) {

    List<ValidationRule<ClaimViewModel>> rules = new ArrayList<>();
    rules.addAll(insertROClaimRules());
    rules.addAll(insertROPatientRules());
    return rules;
  }

  /**
   * Insert RO claim rules.
   *
   * @return the list
   */
  protected List<ValidationRule<ClaimViewModel>> insertROClaimRules() {
    List<ValidationRule<ClaimViewModel>> rules = new ArrayList<>();

    // Treating Province PV_TREATING_PROVINCE
    rules.add(
        new MandatoryRule<ClaimViewModel, String>(
            TREATING_PROVINCE, ClaimViewModel::getTreatingProvince));
    rules.add(
        new LookupRule<ClaimViewModel, String>(
            TREATING_PROVINCE,
            ClaimViewModel::getTreatingProvince,
            (v) -> appService.getProvince(v) != null));
    rules.add(
        new NotInSetRule<ClaimViewModel, String>(
            TREATING_PROVINCE, ClaimViewModel::getTreatingProvince, "BC"));

    // Hospital Number PV_HOSPITAL_NUMBER
    rules.add(
        new MandatoryRule<ClaimViewModel, String>(
            "Hospital Number & Name", ClaimViewModel::getHospitalNumber));

    // Hospital Name PV_HOSPITAL_NAME
    rules.add(
        new ComplexRule<ClaimViewModel>("Hospital Name", c -> complexRules.checkValidHospital(c)));
    // CHECKHOSPITALACTIVERANGE
    rules.add(
        new ComplexRule<ClaimViewModel>(
            "Check Hospital Active", c -> complexRules.checkHospitalActiveDate(c)));

    // Total Amount Claimed PN_TOTAL_AMOUNT_CLAIMED
    rules.add(
        new MandatoryRule<ClaimViewModel, BigDecimal>(
            "Total Amount Claimed", ClaimViewModel::getTotalAmountClaimed));

    // CHECKOUTPATIENTTOTALAMT
    rules.add(
        new ComplexRule<ClaimViewModel>(
            "Check Total Amout", c -> complexRules.checkOutPatientTotalAmout(c)));

    // Claim Source PV_CLAIM_SOURCE
    rules.add(
        new MandatoryRule<ClaimViewModel, String>("Claim Source", ClaimViewModel::getClaimSource));
    rules.add(
        new InSetRule<ClaimViewModel, String>(
            "Claim Source", ClaimViewModel::getClaimSource, "MANUAL", "IMPORT"));

    // Coding Scheme SV_CODING_SCHEME
    // NOTE: Those 2 rules replaces the documented rule for coding scheme to reflect what was coded
    // in HoopcV1 (not as documented).
    // Will give an error if coding scheme is not 'ICD10'
    rules.add(
        new MandatoryRule<ClaimViewModel, String>(
            "Coding Scheme", ClaimViewModel::getIcdCodingScheme));
    rules.add(
        new InSetRule<ClaimViewModel, String>(
            "Coding Scheme", ClaimViewModel::getIcdCodingScheme, "ICD10"));

    // Service Code PV_SERVICE_CODE
    rules.add(
        new MandatoryRule<ClaimViewModel, String>(
            "Service Code", ClaimViewModel::getServiceCodeValue));
    rules.add(
        new LookupRule<ClaimViewModel, String>(
            "Service Code",
            ClaimViewModel::getServiceCodeValue,
            (v) -> appService.getServiceCode(v) != null));
    rules.add(
        new ComplexRule<ClaimViewModel>(
            "Check Service Code Active", c -> complexRules.checkServiceCodeActive(c)));
    rules.add(
        new ComplexRule<ClaimViewModel>(
            "Check Diagnostic Code Exist", c -> complexRules.checkExistingDiagnosticCode(c)));
    rules.add(
        new ComplexRule<ClaimViewModel>(
            "Check Procedure Code Exist", c -> complexRules.checkExistingProcedureCode(c)));
    rules.add(
        new ComplexRule<ClaimViewModel>(
            "Check Procedure Code Outpatient", c -> complexRules.checkProcedureCodeOutpatient(c)));
    rules.add(
        new ComplexRule<ClaimViewModel>(
            "Check Diagnostic Code Outpatient",
            c -> complexRules.checkDiagnosticCodeOutpatient(c)));

    rules.add(
        new ComplexRule<ClaimViewModel>(
            "Check Service Code Province",
            c -> complexRules.checkProvinceRestrictedCode(c)));

    rules.add(
        new ComplexRule<ClaimViewModel>(
            "Check Service Code Expiration",
            c -> complexRules.checkExpiredServiceCode(c)));
    
    rules.add(
        new ComplexRule<ClaimViewModel>(
            "Check Procedure Code For Service Code",
            c -> complexRules.checkServiceCodeLevelProcedure(c)));
    
    // Service Date PV_SERVICE_DATE
    rules.add(
        new MandatoryRule<ClaimViewModel, LocalDate>(SERVICE_DATE, ClaimViewModel::getServiceDate));

    // Submission Date SD_SUBMISSION_DATE
    rules.add(
        new InDateRangeRule<ClaimViewModel, LocalDate>(
            SERVICE_DATE,
            ClaimViewModel::getServiceDate,
            null,
            ClaimViewModel::getSubmissionDate,
            null,
            "Submission Date"));
    rules.add(
        new ComplexRule<ClaimViewModel>(
            "Submission Date", c -> complexRules.checkYearOldOutpatientClaim(c)));

    return rules;
  }

  /**
   * Insert RO patient rules.
   *
   * @return the list
   */
  protected List<ValidationRule<ClaimViewModel>> insertROPatientRules() {

    // Assumes claimView.getPatient() not null
    List<ValidationRule<ClaimViewModel>> rules = new ArrayList<>();

    // Insurance Card Number PV_INSURANCE_NUMBER
    rules.add(
        new MandatoryRule<ClaimViewModel, String>(
            "Insurance Number", c -> c.getPatient().getInsuranceCardNumber()));
    // CHECKOUTPATDUPLICATE
    rules.add(
        new ComplexRule<ClaimViewModel>(
            "Check Patient Duplicate", c -> complexRules.checkOutPatientDuplicate(c)));
    // CHECKOUTPATCONFLICT
    rules.add(
        new ComplexRule<ClaimViewModel>(
            "Check Patient Conflict", c -> complexRules.checkOutPatientConflict(c)));

    // Last Name PV_LAST_NAME
    rules.add(
        new MandatoryRule<ClaimViewModel, String>("Last Name", c -> c.getPatient().getLastName()));

    // First Name PV_FIRST_NAME
    rules.add(
        new MandatoryRule<ClaimViewModel, String>(
            "First Name", c -> c.getPatient().getFirstName()));

    // Province PV_PROVINCE
    rules.add(
        new MandatoryRule<ClaimViewModel, String>("Province", c -> c.getPatient().getProvince()));
    rules.add(
        new InSetRule<ClaimViewModel, String>("Province", c -> c.getPatient().getProvince(), "BC"));

    // CHECKPOSTALCODEFORMAT
    rules.add(
        new ComplexRule<ClaimViewModel>(
            "checkPostalCodeFormat", c -> complexRules.checkPostalCodeFormat(c)));
    // CHECKPOSTALCODEPREFIX
    rules.add(
        new ComplexRule<ClaimViewModel>(
            "checkPostalCodePrefix", c -> complexRules.checkPostalCodePrefix(c)));

    // Birth Date PD_BIRTH_DATE
    rules.add(
        new MandatoryRule<ClaimViewModel, LocalDate>(
            "Birth Date", c -> c.getPatient().getBirthDate()));
    // Birth date must be <= serviceDate
    rules.add(
        new InDateRangeRule<ClaimViewModel, LocalDate>(
            "Birth Date",
            c -> c.getPatient().getBirthDate(),
            null,
            c -> c.getServiceDate(),
            null,
            SERVICE_DATE));

    // Sex PV_SEX_CODE
    rules.add(new MandatoryRule<ClaimViewModel, String>("Sex", c -> c.getPatient().getSexCode()));

    return rules;
  }
}
