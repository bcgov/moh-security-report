package ca.bc.gov.health.service;

import static ca.bc.gov.health.constants.GlobalConstants.ROLE_UNAUTHORIZED;
import ca.bc.gov.health.database.entity.ApplicationUsers;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.Stateful;
import jakarta.enterprise.context.SessionScoped;
import jakarta.enterprise.inject.Produces;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.persistence.NonUniqueResultException;
import jakarta.persistence.PersistenceContext;
import jakarta.security.enterprise.SecurityContext;
import jakarta.servlet.http.HttpSession;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;

@SessionScoped
@Stateful
public class HoopcSessionBean implements Serializable {

  private static final long serialVersionUID = 2820762570514354920L;

  @PersistenceContext(unitName = "hoopc-ejb_pu")
  private transient EntityManager em;

  private ApplicationUsers currentUser = null;

  @Inject transient SecurityContext securityContext;

  private List<Long> lastSearchResult;

  @PostConstruct
  public void init() {

    if (securityContext.getCallerPrincipal() != null) {

      String applicationUserid = securityContext.getCallerPrincipal().getName();

      try {
        currentUser
              = em.createNamedQuery("ApplicationUsers.findByUserId", ApplicationUsers.class)
                  .setParameter("applicationUserid", applicationUserid)
                  .getSingleResult();
      } catch (NoResultException | NonUniqueResultException ex) {
        /* No more than one ApplicationUsers record per applicationUserid */
        currentUser = new ApplicationUsers();
        currentUser.setApplicationUserid(applicationUserid);
        currentUser.setApplicationRole(ROLE_UNAUTHORIZED);
      }
    }
  }

  @CurrentUser
  @Produces
  @SessionScoped
  public ApplicationUsers getCurrentUser() {
    return currentUser;
  }

  public String getSessionID() {
    return ((HttpSession) FacesContext.getCurrentInstance().getExternalContext().getSession(false))
        .getId();
  }

  public List<Long> getLastSearchResult() {
    return lastSearchResult;
  }

  public void setLastSearchResult(List<Long> lastSearchResult) {
    this.lastSearchResult = lastSearchResult;
  }

  public void clearSearchResult() {
    this.lastSearchResult = new ArrayList<>();
  }
}
