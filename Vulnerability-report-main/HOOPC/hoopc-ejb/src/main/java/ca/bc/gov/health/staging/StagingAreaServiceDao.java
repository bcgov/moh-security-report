package ca.bc.gov.health.staging;

import ca.bc.gov.health.database.entity.SaSubmissions;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.report.StoredProcQueryParams;
import jakarta.inject.Named;
import jakarta.persistence.EntityManager;
import jakarta.persistence.ParameterMode;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.Query;
import jakarta.persistence.StoredProcedureQuery;
import jakarta.persistence.TypedQuery;
import java.math.BigDecimal;
import java.text.MessageFormat;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** @author christian.hudon */
@Named("StagingAreaServiceDao")
public class StagingAreaServiceDao {

  @PersistenceContext(unitName = "hoopc-ejb_pu")
  private transient EntityManager em;

  private static Logger log = LoggerFactory.getLogger(StagingAreaServiceDao.class);

  public SaSubmissions getSubmissionById(BigDecimal id) {
    TypedQuery<SaSubmissions> query =
        em.createNamedQuery("SaSubmissions.findById", SaSubmissions.class);
    query.setParameter("id", id);
    return query.getResultList().get(0);
  }

  public List<SaSubmissions> getAllSubmissions() {
    em.getEntityManagerFactory().getCache().evictAll();
    TypedQuery<SaSubmissions> query =
        em.createNamedQuery("SaSubmissions.findAll", SaSubmissions.class);
    return query.getResultList();
  }

  public void updateSubmission(SaSubmissions sub) {
    em.merge(sub);
    sub.getSaSubmissionDetailsList().stream().forEach(d -> em.merge(d));
    em.flush();
  }

  /**
   * Delete all history records with seq>0 for a given submission
   *
   * @param subId
   * @return
   */
  public int resetSubmissionHistory(Long subId) {
    Query query =
        em.createNamedQuery("SaHistory.resetHistory", SaSubmissions.class)
            .setParameter("subId", subId);
    return query.executeUpdate();
  }

  public int deleteValidationResults(Long subId) {
    Query query =
        em.createNamedQuery("SaHistory.resetHistory", SaSubmissions.class)
            .setParameter("subId", subId);
    return query.executeUpdate();
  }

  public StoredProcedureQuery executeStroredProc(
      String spName, List<StoredProcQueryParams> parameters) throws HoopcException {

    log.info("Calling {}", spName);

    String message = null;
    String sql = MessageFormat.format("HOOPC2_Staging_Area.{0}", spName);

    try {
      StoredProcedureQuery query = em.createStoredProcedureQuery(sql);
      for (StoredProcQueryParams param : parameters) {
        if (param.getPosition() != 0) {
          query.registerStoredProcedureParameter(
              param.getPosition(), param.getParamClass(), param.getParamMode());
        } else {
          query.registerStoredProcedureParameter(
              param.getParamName(), param.getParamClass(), param.getParamMode());
        }
        if (param.getParamMode().equals(ParameterMode.IN)
            || param.getParamMode().equals(ParameterMode.INOUT)) {
          if (param.getPosition() != 0) {
            query.setParameter(param.getPosition(), param.getParamValue());
          } else {
            query.setParameter(param.getParamName(), param.getParamValue());
          }
        }
      }
      query.execute();
      return query;
    } catch (Exception e) {
      throw new HoopcException(e);
    }
  }

  /** Flush cache. */
  public void flushCache() {
    em.getEntityManagerFactory().getCache().evictAll();
  }
}
