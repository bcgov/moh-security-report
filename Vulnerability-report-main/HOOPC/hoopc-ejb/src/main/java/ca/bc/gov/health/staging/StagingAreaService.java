package ca.bc.gov.health.staging;

import ca.bc.gov.health.database.entity.SaSubmissionDetails;
import ca.bc.gov.health.database.entity.SaSubmissions;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.report.StoredProcQueryParams;
import ca.bc.gov.health.service.HoopcSessionBean;
import ca.bc.gov.health.validation.ValidationError;
import jakarta.ejb.Local;
import jakarta.ejb.LocalBean;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.persistence.ParameterMode;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.StoredProcedureQuery;
import jakarta.transaction.Transactional;
import java.math.BigDecimal;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import org.apache.commons.lang3.builder.CompareToBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/** Service for StagingArea. */
@Stateless
@Local(StagingAreaServiceLocal.class)
@LocalBean
public class StagingAreaService implements StagingAreaServiceLocal {

  @Inject private transient StagingAreaServiceDao serviceDao;
  @Inject HoopcSessionBean session;

  @PersistenceContext(unitName = "hoopc-ejb_pu")
  private EntityManager em;

  private static Logger log = LoggerFactory.getLogger(StagingAreaService.class);

  @Override
  public SubmissionViewModel loadSubmission(BigDecimal id) {
    SubmissionViewModel submission = toView(serviceDao.getSubmissionById(id));
    return submission;
  }

  /**
   * Returns a list of all staging area submissions.
   *
   * @return the list
   */
  @Override
  @Transactional
  public List<SubmissionViewModel> loadSubmissions() {

    List<SaSubmissions> saSubList = serviceDao.getAllSubmissions();

    List<SubmissionViewModel> subList =
        saSubList.stream()
            // Sort by dateSubmitted, rejectFlag, treatingProvince
            .sorted((s1, s2) -> compare(s1, s2))
            // Convert to SubmissionViewModel, calculate totals and assign recordNumber
            .map(s -> toView(s))
            .collect(Collectors.toList());

    return subList;
  }

  /**
   * Saves the submission header. See HOOPC2_Staging_Area.save_header stored proc for original
   * implementation..
   */
  @Override
  @Transactional
  public List<ValidationError> approveSubmission(SubmissionViewModel selectedSubmission) {
    List<ValidationError> errors = new ArrayList<ValidationError>();

    if (selectedSubmission.getValidFlag()) {
      selectedSubmission.getSubmission().setApproveFlag("Y");
      selectedSubmission.getSubmission().setRejectFlag("N");
      selectedSubmission.getSubmission().setResetFlag("N");

      // Set submission to approved
      selectedSubmission.getSubmission().setStatus("APPROVED");
      // Set all submission details to approved
      selectedSubmission.getSubmission().getSaSubmissionDetailsList().stream()
          .forEach(d -> d.setStatus("Y"));
    } else {
      // TODO: messages.properties
      errors.add(new ValidationError("Only valid submissions can be approved."));
    }

    if (errors.isEmpty()) {
      serviceDao.updateSubmission(selectedSubmission.getSubmission());
    }

    return errors;
  }

  /**
   * Saves the submission header. See HOOPC2_Staging_Area.save_header stored proc for original
   * implementation..
   */
  @Override
  @Transactional
  public List<ValidationError> rejectSubmission(SubmissionViewModel selectedSubmission) {
    List<ValidationError> errors = new ArrayList<>();

    selectedSubmission.getSubmission().setApproveFlag("N");
    selectedSubmission.getSubmission().setRejectFlag("Y");
    selectedSubmission.getSubmission().setResetFlag("N");

    // Set submission to rejected
    selectedSubmission.getSubmission().setStatus("IN PROGRESS");
    // Set all submission details to approved
    selectedSubmission.getSubmission().getSaSubmissionDetailsList().stream()
        .forEach(d -> d.setStatus("N"));

    if (errors.isEmpty()) {
      serviceDao.updateSubmission(selectedSubmission.getSubmission());
    }

    return errors;
  }

  /**
   * Saves the submission header. See HOOPC2_Staging_Area.save_header stored proc for original
   * implementation..
   *
   * @param selectedSubmission
   * @return
   * @throws ca.bc.gov.health.exception.HoopcException
   */
  @Override
  @Transactional
  public List<ValidationError> resetSubmission(SubmissionViewModel selectedSubmission)
      throws HoopcException {
    List<ValidationError> errors = new ArrayList<>();

    // ShortCut: call old sp
    try {
      List<StoredProcQueryParams> parameters = new ArrayList<>();
      parameters.add(
          new StoredProcQueryParams(
              "pn_subID", selectedSubmission.getSubmission().getId().toString()));
      parameters.add(new StoredProcQueryParams("pv_approveFlag", "N"));
      parameters.add(new StoredProcQueryParams("pv_rejectFlag", "N"));
      parameters.add(new StoredProcQueryParams("pv_resetFlag", "Y"));
      parameters.add(
          new StoredProcQueryParams("pv_userID", session.getCurrentUser().getApplicationUserid()));
      parameters.add(new StoredProcQueryParams("pv_sessionID", session.getSessionID()));
      parameters.add(new StoredProcQueryParams("pv_errorMessage", String.class, ParameterMode.OUT));
      parameters.add(new StoredProcQueryParams("pn_resultCode", String.class, ParameterMode.OUT));
      parameters.add(new StoredProcQueryParams("pv_message", String.class, ParameterMode.OUT));

      StoredProcedureQuery query = serviceDao.executeStroredProc("save_header", parameters);

      String msg = (String) query.getOutputParameterValue("pv_errorMessage");
      errors.add(new ValidationError(msg));
      serviceDao.flushCache();

    } catch (HoopcException e) {
      String msg =
          MessageFormat.format("Error in HOOPC2_Staging_Area.save_header(): {0}", e.getMessage());
      log.error(msg, e);
      throw new HoopcException(e);
    }

    return errors;
  }
  
  /**
   * BCMOHAD-9627-10Feb22: deletes selected submission by executing HOOPC2_Staging_Area.cleanup_staging_area stored proc.
   */
  @Override
  @Transactional
  public List<ValidationError> deleteSubmission(SubmissionViewModel selectedSubmission) throws HoopcException{
    List<ValidationError> errors = new ArrayList<ValidationError>();
  
    try {
      List<StoredProcQueryParams> parameters = new ArrayList<>();
      parameters.add(
          new StoredProcQueryParams(
              "pn_subID", selectedSubmission.getSubmission().getId().toString()));
      parameters.add(new StoredProcQueryParams("pn_cleanType", "A"));
      parameters.add(
          new StoredProcQueryParams("pv_userID", session.getCurrentUser().getApplicationUserid()));
      parameters.add(new StoredProcQueryParams("pv_sessionID", session.getSessionID()));
      parameters.add(new StoredProcQueryParams("pn_resultCode", String.class, ParameterMode.OUT));
      parameters.add(new StoredProcQueryParams("pv_message", String.class, ParameterMode.OUT));
      
      
      StoredProcedureQuery query = serviceDao.executeStroredProc("cleanup_staging_area", parameters);
      String msg = (String) query.getOutputParameterValue("pv_message");
      errors.add(new ValidationError(msg));
      serviceDao.flushCache();
    
      } catch (HoopcException e) {
      String msg =
          MessageFormat.format("Error in HOOPC2_Staging_Area.cleanup_staging_area(): {0}", e.getMessage());
      log.error(msg, e);
      throw new HoopcException(e);
    }

    return errors;
  }

  @Override
  public String saveSubmissionDetail(SaSubmissionDetails saSubmissionDetail) throws HoopcException {

    StoredProcedureQuery query = em.createStoredProcedureQuery("HOOPC2_Staging_Area.save_detail");
    query.registerStoredProcedureParameter("pn_id", Integer.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_patientBatch", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_recordType", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_hospitalNumber", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_hospitalName", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_treatingProvince", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter(
        "pv_insuranceCardNumber", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter(
        "pv_insuranceCardExpiryDate", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_lastName", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_firstName", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_address1", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_address2", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_city", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_province", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_postalCode", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_birthDate", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_sexCode", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_diagnosCode1", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_diagnosCode2", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_diagnosCode3", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_procedureCode1", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_procedureCode2", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_procedureCode3", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter(
        "pv_highCostProcedureCode1", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter(
        "pv_highCostProcedureDate1", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter(
        "pv_highCostProcedureCode2", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter(
        "pv_highCostProcedureDate2", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter(
        "pv_highCostProcedureCode3", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter(
        "pv_highCostProcedureDate3", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_admissionDate", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_dischargeDate", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_totalDaysStay", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_perDiemRate", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_totalAmountClaimed", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_deceasedFlag", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_longTermStayInd", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_accidentInd", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_accidentCode", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_provincialClaimId", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_adjFlag", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_notes", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_serviceCode", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_serviceDate", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_reviewFlag", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_disabledFlag", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_userId", String.class, ParameterMode.IN);
    query.registerStoredProcedureParameter("pv_sessionID", String.class, ParameterMode.OUT);
    query.registerStoredProcedureParameter("pv_Errors", String.class, ParameterMode.OUT);
    query.registerStoredProcedureParameter("pv_message", String.class, ParameterMode.OUT);
    query.registerStoredProcedureParameter("pn_resultCode", Integer.class, ParameterMode.OUT);

    query.setParameter("pn_id", saSubmissionDetail.getId().intValue());
    query.setParameter("pv_patientBatch", saSubmissionDetail.getPatientBatch());
    query.setParameter("pv_recordType", saSubmissionDetail.getRecordType());
    query.setParameter("pv_hospitalNumber", saSubmissionDetail.getHospitalNumber());
    query.setParameter("pv_hospitalName", saSubmissionDetail.getHospitalName());
    query.setParameter("pv_treatingProvince", saSubmissionDetail.getTreatingProvince());
    query.setParameter("pv_insuranceCardNumber", saSubmissionDetail.getInsuranceCardNumber());
    query.setParameter("pv_insuranceCardExpiryDate", saSubmissionDetail.getCardExpiryDate());
    query.setParameter("pv_lastName", saSubmissionDetail.getLastName());
    query.setParameter("pv_firstName", saSubmissionDetail.getFirstName());
    query.setParameter("pv_address1", saSubmissionDetail.getAddress1());
    query.setParameter("pv_address2", saSubmissionDetail.getAddress2());
    query.setParameter("pv_city", saSubmissionDetail.getCity());
    query.setParameter("pv_province", saSubmissionDetail.getProvince());
    query.setParameter("pv_postalCode", saSubmissionDetail.getPostalCode());
    query.setParameter("pv_birthDate", saSubmissionDetail.getBirthDate());
    query.setParameter("pv_sexCode", saSubmissionDetail.getSexCode());
    query.setParameter("pv_diagnosCode1", saSubmissionDetail.getDiagnosCode1());
    query.setParameter("pv_diagnosCode2", saSubmissionDetail.getDiagnosCode2());
    query.setParameter("pv_diagnosCode3", saSubmissionDetail.getDiagnosCode3());
    query.setParameter("pv_procedureCode1", saSubmissionDetail.getProcedureCode1());
    query.setParameter("pv_procedureCode2", saSubmissionDetail.getProcedureCode2());
    query.setParameter("pv_procedureCode3", saSubmissionDetail.getProcedureCode3());
    query.setParameter("pv_highCostProcedureCode1", saSubmissionDetail.getHighCostProcedureCode1());
    query.setParameter("pv_highCostProcedureDate1", saSubmissionDetail.getHighCostProcedureCode2());
    query.setParameter("pv_highCostProcedureCode2", saSubmissionDetail.getHighCostProcedureCode3());
    query.setParameter("pv_highCostProcedureDate2", saSubmissionDetail.getHighCostProcedureDate1());
    query.setParameter("pv_highCostProcedureCode3", saSubmissionDetail.getHighCostProcedureDate2());
    query.setParameter("pv_highCostProcedureDate3", saSubmissionDetail.getHighCostProcedureDate3());
    query.setParameter("pv_admissionDate", saSubmissionDetail.getAdmissionDate());
    query.setParameter("pv_dischargeDate", saSubmissionDetail.getDischargeDate());
    query.setParameter("pv_totalDaysStay", saSubmissionDetail.getTotalDaysStay());
    query.setParameter("pv_perDiemRate", saSubmissionDetail.getPerDiemRate());
    query.setParameter("pv_totalAmountClaimed", saSubmissionDetail.getTotalAmountClaimed());
    query.setParameter("pv_deceasedFlag", saSubmissionDetail.getDeceasedFlag());
    query.setParameter("pv_longTermStayInd", saSubmissionDetail.getLongTermStayInd());
    query.setParameter("pv_accidentInd", saSubmissionDetail.getAccidentInd());
    query.setParameter("pv_accidentCode", saSubmissionDetail.getAccidentCode());
    query.setParameter("pv_provincialClaimId", saSubmissionDetail.getProvincialClaimId());
    query.setParameter("pv_adjFlag", saSubmissionDetail.getAdjFlag());
    query.setParameter("pv_notes", saSubmissionDetail.getNotes());
    query.setParameter("pv_serviceCode", saSubmissionDetail.getServiceCode());
    query.setParameter("pv_serviceDate", saSubmissionDetail.getServiceDate());
    query.setParameter("pv_reviewFlag", saSubmissionDetail.getReviewFlag());
    query.setParameter("pv_disabledFlag", saSubmissionDetail.getDisabledFlag());
    query.setParameter("pv_userId", session.getCurrentUser().getApplicationUserid());
    query.setParameter("pv_sessionID", session.getSessionID());

    try {
      query.execute();
    } catch (Exception e) {
      throw new HoopcException(e);
    }
    String errors = (String) query.getOutputParameterValue("pv_Errors");
    em.getEntityManagerFactory().getCache().evictAll();

    return errors;
  }

  /**
   * Converts to SubmissionViewModel, assign recordNumber and calculate totals.
   *
   * @param saSub the sa sub
   * @param recordNumber the record number
   * @return the submission view model
   */
  protected SubmissionViewModel toView(SaSubmissions saSub) {
    return new SubmissionViewModel(saSub);
  }

  private int compare(SaSubmissions s1, SaSubmissions s2) {
    return new CompareToBuilder()
        .append(s1.getDateSubmitted(), s2.getDateSubmitted())
        .append(s1.getRejectFlag(), s2.getRejectFlag())
        .append(s1.getTreatingProvince(), s2.getTreatingProvince())
        .toComparison();
  }
}
