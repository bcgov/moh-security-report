package ca.bc.gov.health.validation.rule;

import ca.bc.gov.health.validation.ValidationError;
import java.text.MessageFormat;
import java.util.function.Function;

/**
 * Validation rule for lookup value.
 *
 * <p>Generates a validation error if value is not found by lookup function.
 *
 * @param <T> Type of object
 * @param <R> Type of field
 */
public class LookupRule<T, R> extends ValidationRule<T> {
  protected Function<T, R> getter;
  protected Function<R, Boolean> lookupFunction;

  /**
   * Creates a LookupRule. Example usage:
   *
   * <p><code>
   * new LookupRule<ClaimViewModel, String>("Treating Province",
   *     ClaimViewModel::getTreatingProvince, (v) -> appService.getProvince(v) != null);
   *  </code>
   *
   * @param fieldName Field name to use for error message.
   * @param getter Function to get the value of field
   * @param lookupFunction Function that returns true if field value is valid.
   */
  public LookupRule(String fieldName, Function<T, R> getter, Function<R, Boolean> lookupFunction) {
    super(ValidationRuleType.LOOKUP_VALUE, fieldName);
    this.getter = getter;
    this.lookupFunction = lookupFunction;
  }

  /**
   * Returns a ValidationError if lookup function returns false.
   *
   * @param object the object
   * @return the validation error
   */
  @Override
  public ValidationError validate(T object) {
    // Assumes that
    R value = getValue(getter, object);
    if (value != null) {
      // lookup value
      Boolean found = lookupFunction.apply(value);
      if (!found) {
        String errorMsg =
            MessageFormat.format(getMessage("claim.validation.lookup"), value, ruleIdentifier);
        return new ValidationError(this, errorMsg, value);
      }
    }
    return null;
  }
}
