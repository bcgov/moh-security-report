package ca.bc.gov.health.validation.rule;

import ca.bc.gov.health.validation.ValidationError;
import java.text.MessageFormat;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * Validation rule for InSet lookup.
 *
 * <p>Generates a validation error if value is not found in a given set of values. Can also be used
 * like "equals" when only one value in set. TODO: Could add a constructor to pass a lambda function
 * to get the set.
 *
 * @param <T> Type of object
 * @param <R> Type of field
 */
public class InSetRule<T, R> extends ValidationRule<T> {
  protected Function<T, R> getter;
  protected R[] values;

  /**
   * Creates a InSet rule. Example usage:
   *
   * <p><code>
   * new InSetRule<ClaimViewModel, String>("Province", c -> c.getPatient().getProvince(), "BC", "AB"));
   *  </code>
   *
   * @param fieldName Field name to use for error message.
   * @param getter Function to get the value of field
   * @param values list of values in the set
   */
  public InSetRule(
      String fieldName, Function<T, R> getter, @SuppressWarnings("unchecked") R... values) {
    super(ValidationRuleType.IN_SET, fieldName);
    this.getter = getter;
    this.values = values;
  }

  /**
   * Returns a ValidationError if value not in set.
   *
   * @param object the object
   * @return the validation error
   */
  @Override
  public ValidationError validate(T object) {
    // Get the value
    R value = getValue(getter, object);
    if (value != null) {
      // check if in set value
      boolean found = Stream.of(values).anyMatch(v -> v.equals(value));
      if (isError(found)) {
        return new ValidationError(this, buildErrorMsg(value), value);
      }
    }
    return null;
  }

  /**
   * Returns if the rule is in error according to found status. NOTE: Overridden in NotInSetRule
   *
   * @param found the found
   * @return true, if is error
   */
  protected boolean isError(boolean found) {
    return !found;
  }

  /**
   * Construct the error message.
   *
   * @param value the value
   * @return the string
   */
  protected String buildErrorMsg(R value) {
    if (values.length == 1) {
      // if single value in set
      return MessageFormat.format(
          getMessage(getBaseMessageKey() + "1"), value, getRuleIdentifier(), values[0]);
    } else {
      // if more than one value in set
      List<String> setString =
          Stream.of(values).map(v -> v.toString()).collect(Collectors.toList());
      String errorMsg =
          MessageFormat.format(
              getMessage(getBaseMessageKey() + "2"),
              value,
              getRuleIdentifier(),
              String.join(",", setString));
      return errorMsg;
    }
  }

  /**
   * Base key for error messages. NOTE: Overridden in NotInSetRule
   *
   * @return
   */
  protected String getBaseMessageKey() {
    return "claim.validation.inset";
  }
}
