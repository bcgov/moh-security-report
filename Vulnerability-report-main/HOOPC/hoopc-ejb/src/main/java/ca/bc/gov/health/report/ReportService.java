package ca.bc.gov.health.report;

import ca.bc.gov.health.constants.ClaimType;
import ca.bc.gov.health.constants.ReportType;
import ca.bc.gov.health.constants.ResidencyType;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.report.model.ClaimReportModel;
import ca.bc.gov.health.report.model.ClaimReportViewModel;
import ca.bc.gov.health.service.HoopcSessionBean;
import jakarta.ejb.LocalBean;
import jakarta.ejb.Stateless;
import jakarta.inject.Inject;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import jakarta.transaction.Transactional;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** The Class ReportService. */
@Stateless
@LocalBean
public class ReportService {
  private static Logger log = LoggerFactory.getLogger(ReportService.class);

  @PersistenceContext(unitName = "hoopc-ejb_pu")
  private transient EntityManager em;

  @Inject ReportProcessorFactory reportProcessorFactory;

  @Inject HoopcSessionBean session;

  /**
   * Load data.
   *
   * @param viewModel the view model
   * @return the list
   * @throws HoopcException the hoopc exception
   */
  @Transactional
  public List<ClaimReportModel> loadData(ClaimReportViewModel viewModel) throws HoopcException {
    ReportProcessor reportProcessor = createReportProcessor(viewModel);

    // TODO: error if null;
    return reportProcessor.process(viewModel);
  }

  /**
   * Load data CSV.
   *
   * @param viewModel the view model
   * @return the list
   * @throws HoopcException the hoopc exception
   */
  @Transactional
  public List<String> loadDataCSV(ClaimReportViewModel viewModel) throws HoopcException {
    ReportProcessor reportProcessor = createReportProcessor(viewModel);

    // TODO: error if null;
    return reportProcessor.processCSV(viewModel);
  }

  private ReportProcessor createReportProcessor(ClaimReportViewModel viewModel) {
    viewModel.setUserID(session.getCurrentUser().getApplicationUserid());
    viewModel.setSessionID(session.getSessionID());

    ReportProcessor reportProcessor =
        reportProcessorFactory.createReport(
            ReportType.valueOf(viewModel.getReportType()),
            ResidencyType.valueOf(viewModel.getResidencyType()),
            ClaimType.valueOf(viewModel.getClaimType()));
    return reportProcessor;
  }
}
