/* 
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Menu Navigation JS
 * Ensure parent stays active when a user hovers over expanded menu
 */
$(document).ready(function () {
    $('li.dropdown').mouseenter(function () {
        $(this).toggleClass('active-dropdown');
    });
    $('li.dropdown').mouseleave(function () {
        $(this).toggleClass('active-dropdown');
    });
});

/*
 * Fix a primefaces bug 
 * Clicking the scrollbar of an autocomplete dropdown closes the window
 */
$('body').on('mousedown', '.ui-autocomplete-panel', function (event) {
    event.stopImmediatePropagation();
});

/*
 * Add Red Asterisk to label of editNewRateAmount, editNewRateEffectiveDate, editPrevRateEndDate
 * for the hospital, highCostProcedure, serviceCode, and newborn code tables
 */
function addRequiredAsteriskToCodeTableRates(formId) {

    var requiredAsterisk = "<span class=required> *</span>";

    var newRateAmountLabel = $("label[for='" + $('#' + formId + '\\:editNewRateAmount').attr('id') + "']");
    var newRateEffectiveDateLabel = $("label[for='" + $('#' + formId + '\\:editNewRateEffectiveDate_input').attr('id') + "']");
    var prevRateEndDateLabel = $("label[for='" + $('#' + formId + '\\:editPrevRateEndDate_input').attr('id') + "']");

    if (($('#' + formId + '\\:editNewRateAmount').val() || $('#' + formId + '\\:editNewRateEffectiveDate_input').val())
            && !$(".required")[0]) {
        newRateAmountLabel.after(requiredAsterisk);
        newRateEffectiveDateLabel.after(requiredAsterisk);
        prevRateEndDateLabel.after(requiredAsterisk);
    } else if (!($('#' + formId + '\\:editNewRateAmount').val() || $('#' + formId + '\\:editNewRateEffectiveDate_input').val())) {
        $(".required").remove();
    }
}


/**
 * Listener to trigger modal close, when clicked on dialog mask.
 */
$(document).ready(function () {
    $("body").on("click", '.ui-dialog-mask', function () {
        var idModal = this.id;
        if (!(idModal === "statusModal_modal")) {
            idModal = idModal.replace("_modal", "");
            getWidgetVarById(idModal).hide();
        }

    })
});

/**
 * Returns the PrimefacesWidget from ID
 * @param id
 * @returns {*}
 */
function getWidgetVarById(id) {
    for (var propertyName in PrimeFaces.widgets) {
        var widget = PrimeFaces.widgets[propertyName];
        if (widget && widget.id === id) {
            return widget;
        }
    }
}

/**
 * Hides all Primefaces message box
 * @returns
 */
function clearMessages() {
    $('.ui-messages-close').each(function (i) {
        this.click();
    });
}

function confirmExit() {
    return confirm("Please confirm you want to sign out. \nThis will also end all other active Keycloak, PHSA, or SiteMinder sessions you have open.");
}

// Session Management
const TIMEOUT = 1920000; // 32 MINS slightly longer than KC session timeout, 1 minute less than timeout in web.xml
const ACTIVITY_CHECK_INTERVAL = 60000; // 1 min
const MAX_TIME_REMAINING_BEFORE_GROWL = 120000; // 2 min - growl will be shown when this much time is remaining in the session

$(document).ready(function() {
    $.active = false;
    $.growl = false;
    $.elapsed = 0;
    $('body').bind('click keypress', function() { $.active = true; });
    checkActivity();
    setInterval(checkActivity, ACTIVITY_CHECK_INTERVAL); // function, interval
});

function checkActivity() {
    if ($.active) {
        $.elapsed = 0;
        $.active = false;
        $.growl = false;
        PF('timeoutWarning').removeAll();
        extendSession(); // p:remoteCommand in gov30Template.xhtml
    }
    if ($.elapsed < TIMEOUT) {
        $.elapsed += ACTIVITY_CHECK_INTERVAL;

        if ($.elapsed > (TIMEOUT - MAX_TIME_REMAINING_BEFORE_GROWL) && $.growl === false) {
            PF('timeoutWarning').show([{
                "summary":"Your session is about to expire",
                "detail":"Please continue using the application to extend your session",
                "severity":"warn"}]);
            $.growl = true;
        }
    } else {
        endSession().then(() => location.reload());  
    }
}