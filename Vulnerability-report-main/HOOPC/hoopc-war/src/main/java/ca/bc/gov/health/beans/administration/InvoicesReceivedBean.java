/*
 * To change this license header, choose License Headers in Project Properties. To change this
 * template file, choose Tools | Templates and open the template in the editor.
 */
package ca.bc.gov.health.beans.administration;

import ca.bc.gov.health.beans.BaseBean;
import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.database.ejb.ClaimTypesFacade;
import ca.bc.gov.health.database.ejb.InvoiceBillingPeriodsFacadeLocal;
import ca.bc.gov.health.database.ejb.InvoiceStatusFacadeLocal;
import ca.bc.gov.health.database.ejb.PeriodEndInvoicesFacadeLocal;
import ca.bc.gov.health.database.ejb.ProvincesTerritoriesFacadeLocal;
import ca.bc.gov.health.database.entity.InvoiceBillingPeriods;
import ca.bc.gov.health.database.entity.InvoiceDetails;
import ca.bc.gov.health.database.entity.InvoiceParties;
import ca.bc.gov.health.database.entity.InvoiceStatus;
import ca.bc.gov.health.database.entity.PeriodEndInvoices;
import ca.bc.gov.health.database.entity.ProvincesTerritories;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.helper.InvoiceHelper;
import ca.bc.gov.health.service.HoopcAppService;
import ca.bc.gov.health.service.MonthEndService;
import ca.bc.gov.health.service.viewmodel.InvoiceViewModel;
import ca.bc.gov.health.validation.ValidationError;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.component.UIInput;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.primefaces.PrimeFaces;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** The Class InvoicesReceivedBean. */
@Named("InvoicesReceivedBean")
@ViewScoped
public class InvoicesReceivedBean extends BaseBean implements Serializable {

  private static final long serialVersionUID = -4763276211144077359L;
  private static final Logger log = LoggerFactory.getLogger(InvoicesReceivedBean.class);

  @Inject private HoopcAppService appService;
  @EJB private ProvincesTerritoriesFacadeLocal provincesTerritoriesFacade;
  @EJB private ClaimTypesFacade claimTypesFacade;
  @EJB private PeriodEndInvoicesFacadeLocal periodEndInvoicesFacade;
  @EJB private InvoiceBillingPeriodsFacadeLocal invoiceBillingPeriodsFacade;
  @EJB private InvoiceStatusFacadeLocal invoiceStatusFacade;
  @Inject MonthEndService meService;

  private List<InvoiceViewModel> allInvoices = new ArrayList<>();
  private InvoiceViewModel selectedItem = new InvoiceViewModel();
  private PeriodEndInvoices invoice = new PeriodEndInvoices();
  private ProvincesTerritories province = new ProvincesTerritories();
  private BigDecimal invoiceTotal;
  private BigDecimal provinceInvoiceTotal;

  /** Inits the. */
  @PostConstruct
  public void init() {
    clearInvoice();
  }

  /** On row select. */
  public void onRowSelect() {
    invoice = selectedItem.getInvoice();
    invoiceTotal =
        new BigDecimal(calculateTotalAmounts("invoiceTotal")).setScale(2, RoundingMode.HALF_EVEN);
  }

  /** Clear invoice. */
  public void clearInvoice() {
    invoice = new PeriodEndInvoices();
    invoice.getInvoiceDetailsList().add(new InvoiceDetails());
    invoice.getInvoiceDetailsList().add(new InvoiceDetails());
    invoiceTotal = new BigDecimal(0).setScale(2, RoundingMode.HALF_EVEN);
  }

  private String getProcessingMonth() {
    String period;
    try {
      period = meService.getProcessingMonth(GlobalConstants.RES_RESIDENCY_TYPE);
      return period;
    } catch (HoopcException e) {
      // TODO: Gobing exception is OK.
      log.error("Error in InInvoicesReceivedBean.getProcessingMonth()", e);
      return null;
    }
  }

  /** Load invoice list. */
  public void loadInvoiceList() {
    try {
      province = provincesTerritoriesFacade.findByProvinceCode(province.getProvinceCode());

      Map<String, Object> params = new HashMap<>();
      params.put("provinceCode", province.getProvinceCode());
      String processingMonth = getProcessingMonth();
      if (processingMonth != null) {
        params.put("period", processingMonth);
      } else {
        params.put("period", null);
      }
      List<PeriodEndInvoices> invoicesResult =
          periodEndInvoicesFacade.findByNamedQuery("PeriodEndInvoices.findByProvince", params);

      allInvoices.clear();
      if (invoicesResult != null && invoicesResult.size() > 0) {
        for (PeriodEndInvoices i : invoicesResult) {
          allInvoices.add(
              new InvoiceViewModel(
                  i.getId(),
                  i.getInvoice(),
                  InvoiceHelper.formatDate("MMMM dd, yyyy", i.getInvoiceDate()),
                  InvoiceHelper.formatDate("MMMM dd, yyyy", i.getInvoiceReceived()),
                  "$" + calculateTotalAmounts("invoiceTotal", i),
                  InvoiceHelper.formatDate("MMMM, yyyy", i.getProvincialBillingPeriod()),
                  InvoiceHelper.formulateInvoiceType(i.getInvoiceDetailsList()),
                  i));
        }
      }
      provinceInvoiceTotal = InvoiceHelper.calculateProvinceInvoiceTotal(invoicesResult);

    } catch (HoopcException e) {
      log.error(formatMessage(e));
      addMessage(e, false);
    }
  }

  /**
   * Calculate total amounts.
   *
   * @param calcType the calc type
   * @return the string
   */
  public String calculateTotalAmounts(String calcType) {
    return calculateTotalAmounts(calcType, invoice);
  }

  /**
   * Calculate total amounts.
   *
   * @param calcType the calc type
   * @param entity the entity
   * @return the string
   */
  public String calculateTotalAmounts(String calcType, PeriodEndInvoices entity) {
    return InvoiceHelper.calculateTotalAmounts(entity).get(calcType).toString();
  }

  /** Save invoice. */
  public void saveInvoice() {
    try {
      province = provincesTerritoriesFacade.findByProvinceCode(province.getProvinceCode());

      Map<String, Object> params = new HashMap<>();
      params.put("periodCode", invoice.getIbpId().getPeriodCode());
      List<InvoiceBillingPeriods> period =
          invoiceBillingPeriodsFacade.findByNamedQuery(
              "InvoiceBillingPeriods.findByPeriodCode", params);

      if (period != null && period.size() > 0) {
        invoice.setIbpId(period.get(0));
      }
      fillRecords();

      if (validateFields(period)) {
        if (invoice.getId() == null) {
          periodEndInvoicesFacade.create(invoice);
          addInfoMessage(GlobalConstants.INVOICE_CREATE_MESSAGE);
        } else {
          periodEndInvoicesFacade.edit(invoice);
          addInfoMessage(GlobalConstants.INVOICE_EDIT_MESSAGE);
        }
        loadInvoiceList();
        PrimeFaces.current().ajax().update("adminForm");
        PrimeFaces.current().ajax().update("listForm");
      }
    } catch (HoopcException ex) {
      log.error(formatMessage(ex));
      addMessage(ex);
    }
  }

  /**
   * Fill records.
   *
   * @param ibpId the ibp id
   * @throws HoopcException the hoopc exception
   */
  public void fillRecords() throws HoopcException {
    if (invoice.getId() == null) {
      invoice.getInvoiceDetailsList().get(0).setInvoiceItemNumber("1");
      invoice.getInvoiceDetailsList().get(0).setCtsId(appService.getClaimType("INPATIENT"));
      invoice.getInvoiceDetailsList().get(0).setPeiId(invoice);
      if (invoice.getInvoiceDetailsList().get(0).getInvoiceQuantity() == null) {
        invoice.getInvoiceDetailsList().get(0).setInvoiceQuantity(BigInteger.ZERO);
      }
      invoice.getInvoiceDetailsList().get(1).setInvoiceItemNumber("2");
      invoice.getInvoiceDetailsList().get(1).setCtsId(appService.getClaimType("OUTPATIENT"));
      invoice.getInvoiceDetailsList().get(1).setPeiId(invoice);
      if (invoice.getInvoiceDetailsList().get(1).getInvoiceQuantity() == null) {
        invoice.getInvoiceDetailsList().get(1).setInvoiceQuantity(BigInteger.ZERO);
      }

      InvoiceParties issuerParty = new InvoiceParties();
      issuerParty.setPteId(province);
      issuerParty.setParticipantType("ISSUER");
      issuerParty.setPeiId(invoice);

      InvoiceParties receiverParty = new InvoiceParties();
      receiverParty.setPteId(appService.getProvince("BC"));
      receiverParty.setParticipantType("RECEIVER");
      receiverParty.setPeiId(invoice);

      invoice.getInvoicePartiesList().clear();
      invoice.getInvoicePartiesList().add(issuerParty);
      invoice.getInvoicePartiesList().add(receiverParty);

      Map<String, Object> params = new HashMap<>();
      params.put("statusCode", "RECV");
      List<InvoiceStatus> invoiceStatus =
          invoiceStatusFacade.findByNamedQuery("InvoiceStatus.findByCode", params);
      if (invoiceStatus != null && invoiceStatus.size() > 0) {
        invoice.setIvsId(invoiceStatus.get(0));
      }
    }
  }

  /**
   * Validate fields.
   *
   * @param period the period
   * @return true, if successful
   * @throws HoopcException the hoopc exception
   */
  public boolean validateFields(List<InvoiceBillingPeriods> period) throws HoopcException {
    boolean noError = true;

    Map<String, Object> params = new HashMap<>();
    params.put("provinceCode", province.getProvinceCode());
    String processingMonth = getProcessingMonth();
    if (processingMonth != null) {
      params.put("period", processingMonth);
    } else {
      params.put("period", null);
    }
    List<PeriodEndInvoices> invoiceList =
        periodEndInvoicesFacade.findByNamedQuery("PeriodEndInvoices.findByProvince", params);

    List<ValidationError> totalFieldErrors = new ArrayList<>();

    if (InvoiceHelper.isNegativeProvinceInvoiceTotal(invoiceList, invoice)) {
      totalFieldErrors.add(new ValidationError(GlobalConstants.INVOICE_NEGATIVE_TOTAL_MESSAGE));
    }
    if (InvoiceHelper.isTotalDifferentWithCalculatedTotal(invoice, invoiceTotal)) {
      totalFieldErrors.add(
          new ValidationError(GlobalConstants.INVOICE_NOT_EQUALS_CALCULATED_TOTAL_MESSAGE));
    }

    // Validate invoice total
    if (totalFieldErrors.size() > 0) {
      addMessageValidationErrors(totalFieldErrors, false);
      UIInput uiInvoiceTotal =
          (UIInput)
              FacesContext.getCurrentInstance()
                  .getViewRoot()
                  .findComponent("adminForm:invoiceTotal");
      uiInvoiceTotal.setValid(false);
      noError = false;
    }

    // Validate billing period
    if (period == null || period.size() == 0) {
      addErrorMessage(GlobalConstants.INVOICE_BILLING_PERIOD_NOT_FOUND);
      UIInput uiBillingPeriod =
          (UIInput)
              FacesContext.getCurrentInstance()
                  .getViewRoot()
                  .findComponent("adminForm:billingPeriod");
      uiBillingPeriod.setValid(false);
      noError = false;
    }

    return noError;
  }

  /**
   * Removes the invoice. DO NOT DISPLAY ANY DELETE BUTTON IN THE HOSPITALS UI NEVER ONLY FOR
   * SELENIUM TESTS
   */
  public void removeInvoice() {
    try {
      // periodEndInvoicesFacade.remove(periodEndInvoicesFacade.find((long) 0));
      periodEndInvoicesFacade.remove(periodEndInvoicesFacade.find(invoice.getId()));
      addInfoMessage(GlobalConstants.INVOICE_DELETE_MESSAGE);
    } catch (HoopcException ex) {
      log.error(formatMessage(ex));
      addMessage(ex);
    }
    loadInvoiceList();
    PrimeFaces.current().ajax().update("adminForm");
    PrimeFaces.current().ajax().update("listForm");
  }

  /**
   * Gets the title.
   *
   * @return the title
   */
  public String getTitle() {
    return province.getName().toLowerCase() + "'s Invoices";
  }

  public HoopcAppService getAppService() {
    return appService;
  }

  public void setAppService(HoopcAppService appService) {
    this.appService = appService;
  }

  public ProvincesTerritoriesFacadeLocal getProvincesTerritoriesFacade() {
    return provincesTerritoriesFacade;
  }

  public void setProvincesTerritoriesFacade(
      ProvincesTerritoriesFacadeLocal provincesTerritoriesFacade) {
    this.provincesTerritoriesFacade = provincesTerritoriesFacade;
  }

  public PeriodEndInvoicesFacadeLocal getPeriodEndInvoicesFacade() {
    return periodEndInvoicesFacade;
  }

  public void setPeriodEndInvoicesFacade(PeriodEndInvoicesFacadeLocal periodEndInvoicesFacade) {
    this.periodEndInvoicesFacade = periodEndInvoicesFacade;
  }

  public List<InvoiceViewModel> getAllInvoices() {
    return allInvoices;
  }

  public void setAllInvoices(List<InvoiceViewModel> allInvoices) {
    this.allInvoices = allInvoices;
  }

  public InvoiceViewModel getSelectedItem() {
    return selectedItem;
  }

  public void setSelectedItem(InvoiceViewModel selectedItem) {
    this.selectedItem = selectedItem;
  }

  public PeriodEndInvoices getInvoice() {
    return invoice;
  }

  public void setInvoice(PeriodEndInvoices invoice) {
    this.invoice = invoice;
  }

  public ProvincesTerritories getProvince() {
    return province;
  }

  public void setProvince(ProvincesTerritories province) {
    this.province = province;
  }

  public BigDecimal getInvoiceTotal() {
    return invoiceTotal;
  }

  public void setInvoiceTotal(BigDecimal invoiceTotal) {
    this.invoiceTotal = invoiceTotal;
  }

  public ClaimTypesFacade getClaimTypesFacade() {
    return claimTypesFacade;
  }

  public void setClaimTypesFacade(ClaimTypesFacade claimTypesFacade) {
    this.claimTypesFacade = claimTypesFacade;
  }

  public InvoiceBillingPeriodsFacadeLocal getInvoiceBillingPeriodsFacade() {
    return invoiceBillingPeriodsFacade;
  }

  public void setInvoiceBillingPeriodsFacade(
      InvoiceBillingPeriodsFacadeLocal invoiceBillingPeriodsFacade) {
    this.invoiceBillingPeriodsFacade = invoiceBillingPeriodsFacade;
  }

  public InvoiceStatusFacadeLocal getInvoiceStatusFacade() {
    return invoiceStatusFacade;
  }

  public void setInvoiceStatusFacade(InvoiceStatusFacadeLocal invoiceStatusFacade) {
    this.invoiceStatusFacade = invoiceStatusFacade;
  }

  public BigDecimal getProvinceInvoiceTotal() {
    return provinceInvoiceTotal;
  }

  public void setProvinceInvoiceTotal(BigDecimal provinceInvoiceTotal) {
    this.provinceInvoiceTotal = provinceInvoiceTotal;
  }
}
