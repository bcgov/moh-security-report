/*
 * To change this license header, choose License Headers in Project Properties. To change this
 * template file, choose Tools | Templates and open the template in the editor.
 */
package ca.bc.gov.health.beans.codes;

import ca.bc.gov.health.beans.BaseBean;
import ca.bc.gov.health.beans.claim.edit.EditClaim;
import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.database.ejb.HospitalOopClaimsFacadeLocal;
import ca.bc.gov.health.database.ejb.ReasonInProvCodesFacadeLocal;
import ca.bc.gov.health.database.entity.ReasonInProvCodes;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.service.HoopcAppService;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.apache.commons.lang3.StringUtils;
import org.primefaces.PrimeFaces;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** The Class ReasonInBC. */
@Named("ReasonInBC")
@ViewScoped
public class ReasonInBC extends BaseBean implements Serializable {

  private static final long serialVersionUID = 1409627608855947183L;

  @Inject private HoopcAppService appService;
  @EJB private ReasonInProvCodesFacadeLocal reasonInProvCodesFacade;
  @EJB private HospitalOopClaimsFacadeLocal hospitalOopClaimsFacade;

  private Map<String, String> params;
  private ReasonInProvCodes reasonInProvCodes = new ReasonInProvCodes();
  private ReasonInProvCodes selectedCode;
  private List<ReasonInProvCodes> codeResults;
  private boolean editMode = false;

  private static Logger log = LoggerFactory.getLogger(EditClaim.class);

  /** Inits the. */
  @PostConstruct
  public void init() {
    params = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();

    if (params.get("id") != null && StringUtils.isNumeric(params.get("id"))) {
      loadCode(Long.valueOf(params.get("id")));
      if (reasonInProvCodes != null) {
        editMode = true;
      } else {
        log.error("Code id not found");
        addMessage(
            FacesMessage.SEVERITY_ERROR, GlobalConstants.CODE_NOT_EXIST_MESSAGE_ERROR, false);
      }
    }

    loadCodeList();
    if (reasonInProvCodes == null && !codeResults.isEmpty()) {
      reasonInProvCodes = codeResults.get(0);
    }
  }

  /**
   * Load code.
   *
   * @param id the id
   */
  public void loadCode(Long id) {
    try {
      reasonInProvCodes = reasonInProvCodesFacade.find(id);
    } catch (HoopcException e) {
      addMessage(e, false);
    }
  }

  /** Load code list. */
  public void loadCodeList() {
    try {
      codeResults = reasonInProvCodesFacade.findAll();
    } catch (HoopcException e) {
      addMessage(e, false);
    }
  }

  /** Save code. */
  public void saveCode() {
    try {
      if (reasonInProvCodes.getId() == null) {

        reasonInProvCodes = reasonInProvCodesFacade.create(reasonInProvCodes);
        addMessage(FacesMessage.SEVERITY_INFO, GlobalConstants.CODE_CREATE_MESSAGE, false);

      } else {
        reasonInProvCodesFacade.edit(reasonInProvCodes);
        addMessage(FacesMessage.SEVERITY_INFO, GlobalConstants.CODE_EDIT_MESSAGE, false);
      }
      appService.initReasonInProvCodes();
      loadCodeList();
      editMode = false;
      PrimeFaces.current().ajax().update("codeForm");
      PrimeFaces.current().ajax().update("listForm");
    } catch (HoopcException e) {
      addMessage(e, false);
    }
  }

  /** Removes the code. */
  public void removeCode() {
    try {
      if (cannotDelete()) {
        addMessage(FacesMessage.SEVERITY_INFO, GlobalConstants.CODE_IN_USE_MESSAGE, false);
      } else {
        reasonInProvCodesFacade.remove(reasonInProvCodes);
        appService.initReasonInProvCodes();
        loadCodeList();
        addMessage(FacesMessage.SEVERITY_INFO, GlobalConstants.CODE_DELETE_MESSAGE, false);
      }
      editMode = false;
    } catch (HoopcException e) {
      addMessage(e, false);
    }
  }

  /** Empty code entity. */
  public void emptyCodeEntity() {
    reasonInProvCodes = new ReasonInProvCodes();
    editMode = true;
  }

  /**
   * Cannot delete.
   *
   * @return true, if successful
   * @throws HoopcException the hoopc exception
   */
  public boolean cannotDelete() throws HoopcException {
    Map<String, Object> criteria = new HashMap<>();
    criteria.put("ripId", reasonInProvCodes.getId());
    return !hospitalOopClaimsFacade
        .findByNamedQuery("HospitalOopClaims.findByRipId", criteria)
        .isEmpty();
  }

  public ReasonInProvCodesFacadeLocal getReasonInProvCodesFacade() {
    return reasonInProvCodesFacade;
  }

  public void setReasonInProvCodesFacade(ReasonInProvCodesFacadeLocal reasonInProvCodesFacade) {
    this.reasonInProvCodesFacade = reasonInProvCodesFacade;
  }

  public Map<String, String> getParams() {
    return params;
  }

  public void setParams(Map<String, String> params) {
    this.params = params;
  }

  public ReasonInProvCodes getReasonInProvCodes() {
    return reasonInProvCodes;
  }

  public void setReasonInProvCodes(ReasonInProvCodes reasonInProvCodes) {
    this.reasonInProvCodes = reasonInProvCodes;
  }

  public ReasonInProvCodes getSelectedCode() {
    return selectedCode;
  }

  public void setSelectedCode(ReasonInProvCodes selectedCode) {
    this.selectedCode = selectedCode;
  }

  public List<ReasonInProvCodes> getCodeResults() {
    return codeResults;
  }

  public void setCodeResults(List<ReasonInProvCodes> codeResults) {
    this.codeResults = codeResults;
  }

  public static Logger getLog() {
    return log;
  }

  public static void setLog(Logger log) {
    ReasonInBC.log = log;
  }

  public static long getSerialversionuid() {
    return serialVersionUID;
  }

  public boolean isEditMode() {
    return editMode;
  }

  public void setEditMode(boolean editMode) {
    this.editMode = editMode;
  }
}
