/*
 * To change this license header, choose License Headers in Project Properties. To change this
 * template file, choose Tools | Templates and open the template in the editor.
 */
package ca.bc.gov.health.monthend;

import ca.bc.gov.health.beans.BaseBean;
import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.database.ejb.InvoiceBillingPeriodsFacadeLocal;
import ca.bc.gov.health.database.entity.InvoiceBillingPeriods;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.exception.HoopcValidationException;
import ca.bc.gov.health.report.model.ErrorRptInViewModel;
import ca.bc.gov.health.report.model.ErrorRptOutViewModel;
import ca.bc.gov.health.service.MonthEndReportService;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Inject;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.text.MessageFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.ListIterator;
import java.util.stream.Collectors;
import org.primefaces.model.DefaultStreamedContent;

/**
 * @author trevor.schiavone
 */
public abstract class ReprintMonthEnd extends BaseBean {

  @Inject
  MonthEndReportService meReportService;
  @EJB
  InvoiceBillingPeriodsFacadeLocal invoiceBillingPeriodsFacade;

  protected Map<String, String> months = new LinkedHashMap<>();
  protected List<String> selectedProvinces = new ArrayList<>();
  protected boolean selectAllProvinces;

    
  
  
  protected byte[] reportFile;
  protected String reportTemplate;
  
    protected boolean hasAlberta = false;
  protected boolean hasOntario = false;
  protected String outputFileName = "";
  
  

  
  protected void init() throws HoopcException {
    List<InvoiceBillingPeriods> billingPeriods = invoiceBillingPeriodsFacade.findAll();
//Start code BCMOHAD-9621 Automatically generate the error reports for the Alberta and Ontario files **
    billingPeriods.stream()
            .filter(item2 -> item2.getPeriodStartDate().getYear() <= LocalDate.now().getYear())
            //End code BCMOHAD-9621 Automatically generate the error reports for the Alberta and Ontario files **
            .sorted(
                    (bp1, bp2)
                    -> Integer.valueOf(bp2.getPeriodCode())
                            .compareTo(Integer.valueOf(bp1.getPeriodCode())))
            .forEachOrdered(bp -> months.put(bp.getPeriodDescription(), bp.getPeriodCode()));
  }

  /**
   * Calls the report service to retrieve reports based on the parameters
   *
   * @param provList the list of provinces to process
   * @param residencyType RES or NRES
   * @param reports the list of comma seperated reports in a string
   * @param processMonth the month to process YYYYMM
   * @throws java.lang.Exception
   */
  public void retrieveProvReports(
          List<String> provList, String residencyType, String reports, String processMonth)
          throws Exception {

    reportFile = meReportService.retrieveReports(provList, residencyType, reports, processMonth);
    validateReportFile();
  }

  public void validateReportFile() {
    if (reportFile == null) {
      FacesContext.getCurrentInstance().validationFailed();
      addMessage(FacesMessage.SEVERITY_WARN, "No Reports Found", false);
    }
  }

//Start code BCMOHAD-9621 Automatically generate the error reports for the Alberta and Ontario files **
  
  
//Code refactored for BCMOHAM-21682, allow user to choose either Ontario or Alberta or both 
//colin.anderson@cgi.com 2/4/25
  
  protected DefaultStreamedContent buildErrorCSV(String period, List theProvinces) throws HoopcException {
    if (period == null) {
      FacesContext.getCurrentInstance().validationFailed();
      addMessage(FacesMessage.SEVERITY_WARN, "Please select a billing period to generate the error report.", false);
      throw new HoopcException();
    }
    
    hasAlberta = false;
    hasOntario = false;
    outputFileName ="";
    
    for (ListIterator<String> iter = theProvinces.listIterator(); iter.hasNext(); ) {
        String theValue= iter.next();
        
        if (theValue.equals("AB"))
        {
            hasAlberta=true;
        }
        if (theValue.equals("ON"))
        {
            hasOntario=true;
        }    
    }
    
    if (hasOntario == false && hasAlberta== false)
    {
      FacesContext.getCurrentInstance().validationFailed();
      addMessage(FacesMessage.SEVERITY_WARN, "You must select Alberta, Ontario or both provinces for this error report. The error report only works for Alberta and Ontario", false);
      throw new HoopcException();
    }
    
    if (hasAlberta == true)
    {
        outputFileName = "alberta-";
    }
    if (hasOntario == true )
    {
        outputFileName = outputFileName + "ontario-";
    }
    outputFileName = outputFileName + "error-report.csv";
    
    
    String headerInAl = "ALBERTA INPATIENT ERROR REPORT FOR BILLING PERIOD " + period.substring(0, 4) + "/" + period.substring(4);
    String headerInOn = "ONTARIO INPATIENT ERROR REPORT FOR BILLING PERIOD " + period.substring(0, 4) + "/" + period.substring(4);
    String headerInTitle = "PROVINCIAL_CLAIM_ID,HOSPITAL_NAME,PHN,LAST_NAME,FIRST_NAME,BIRTH_DATE,ADMISSION_DATE,DISCHARGE_DATE,TOTAL_AMOUNT_CLAIMED,ERROR_TEXT,ERROR_TYPE";
    String headerOutAl = "ALBERTA OUTPATIENT ERROR REPORT FOR BILLING PERIOD " + period.substring(0, 4) + "/" + period.substring(4);
    String headerOutOn = "ONTARIO OUTPATIENT ERROR REPORT FOR BILLING PERIOD " + period.substring(0, 4) + "/" + period.substring(4);
    //String headerOutTitle = "PROVINCIAL_CLAIM_ID,HOSPITAL_NAME,PHN,LAST_NAME,FIRST_NAME,BIRTH_DATE,SERVICE_DATE,SERVICE_CODE,TOTAL_AMOUNT_CLAIMED,ERROR_TEXT,ERROR_TYPE";

    List<ErrorRptInViewModel> inList = new ArrayList();
    List<ErrorRptOutViewModel> outList = new ArrayList();

    //Buffer all the CSV lines into a ByteArray
    
    ByteArrayOutputStream out = new ByteArrayOutputStream();

    try {
      Iterator<ErrorRptInViewModel> itemListI;
      Iterator<ErrorRptOutViewModel> itemListO;
    
      //Write CSV header
      
      out.write((headerInTitle + "\n").getBytes());
      
      if (hasAlberta == true)
      {
      //Alberta inpatient
      inList = meReportService.queryRecordsErrorInRptProcessor(period, "ALBERTA");
      out.write((headerInAl + "\n").getBytes());
      if (!inList.isEmpty()) {
        itemListI = inList.iterator();
        while (itemListI.hasNext()) {
          out.write((flatInItem(itemListI.next()) + "\n").getBytes());
        }
      } else {
        out.write(("NO RECORD FOUND\n\n").getBytes());
      }
     
      //Alberta outpatient
      
      outList = meReportService.queryRecordsErrorOutRptProcessor(period, "ALBERTA");
      out.write(("\n" + headerOutAl + "\n").getBytes());
      if (!outList.isEmpty()) {
        itemListO = outList.iterator();
        while (itemListO.hasNext()) {
          out.write((flatOutItem(itemListO.next()) + "\n").getBytes());
        }
      } else {
        out.write(("NO RECORD FOUND\n\n").getBytes());
      }
      }
      
      //Ontario inpatient
      
      if(hasOntario == true)
      {
      
      inList = meReportService.queryRecordsErrorInRptProcessor(period, "ONTARIO");
      out.write(("\n" + headerInOn + "\n").getBytes());
      if (!inList.isEmpty()) {
        itemListI = inList.iterator();
        while (itemListI.hasNext()) {
          out.write((flatInItem(itemListI.next()) + "\n").getBytes());
        }
      } else {
        out.write(("NO RECORD FOUND\n\n").getBytes());
      }
     
     //Ontario outpatient
      
      outList = meReportService.queryRecordsErrorOutRptProcessor(period, "ONTARIO");
      out.write(("\n" + headerOutOn + "\n").getBytes());
      if (!outList.isEmpty()) {
        itemListO = outList.iterator();
        while (itemListO.hasNext()) {
          out.write((flatOutItem(itemListO.next()) + "\n").getBytes());
        }
      } else {
        out.write(("NO RECORD FOUND\n\n").getBytes());
      }
      }
      InputStream is = new ByteArrayInputStream(out.toByteArray());
      
      //return the CSV to the calling method
      
      return DefaultStreamedContent.builder()
              .contentType("text/csv")
              .name(outputFileName)
              .stream(() -> is)
              .build();

    } catch (Exception e) {
      String msg = MessageFormat.format(GlobalConstants.REPORT_ERROR_GENERATING, reportTemplate);
      throw new HoopcException(msg, e);
    }
  }


  protected String flatInItem(ErrorRptInViewModel item) {
    String output = item.getProvincialClaimId() + ","
            + item.getHospitalName().replace(',', '.') + ","
            + item.getPhnNumber().replace(',', '.') + ","
            + item.getLastName().replace(',', '.') + ","
            + item.getFirstName().replace(',', '.') + ","
            + item.getBirthDate().replace(',', '.') + ","
            + item.getAdmissionDate().replace(',', '.') + ","
            + item.getDischargeDate().replace(',', '.') + ","
            + item.getTotalAmountClaimed().toString().replace(',', '.') + ","
            + item.getErrorText().replace(',', '.') + ","
            + item.getErrorType().replace(',', '.');
    return output;
  }

  protected String flatOutItem(ErrorRptOutViewModel item) {
    String output = item.getProvincialClaimId() + ","
            + item.getHospitalName().replace(',', '.') + ","
            + item.getPhnNumber().replace(',', '.') + ","
            + item.getLastName().replace(',', '.') + ","
            + item.getFirstName().replace(',', '.') + ","
            + item.getBirthDate().replace(',', '.') + ","
            + item.getServiceDate().replace(',', '.') + ","
            + item.getServiceCode().replace(',', '.') + ","
            + item.getTotalAmountClaimed().toString().replace(',', '.') + ","
            + item.getErrorText().replace(',', '.') + ","
            + item.getErrorType().replace(',', '.');
    return output;
  }
//End code BCMOHAD-9621 Automatically generate the error reports for the Alberta and Ontario files **

  /**
   * Generate the PDF from the byte[] reportFile
   *
   * @return the PDF
   */
  public DefaultStreamedContent generatePDF() {
    if (reportFile == null) {
      FacesContext.getCurrentInstance().validationFailed();
      addMessage(FacesMessage.SEVERITY_WARN, "No Reports Found", false);
      return null;
    }
    InputStream is = new ByteArrayInputStream(reportFile);
    return DefaultStreamedContent
            .builder()
            .contentType("application/pdf")
            .name("month_end_reports.pdf")
            .stream(() -> is)
            .build();
  }

  /* Getters and Setters */
  public List<String> getSelectedProvinces() {
    return selectedProvinces;
  }

  public void setSelectedProvinces(List<String> selectedProvinces) {
    this.selectedProvinces = selectedProvinces;
  }

  public boolean getSelectAllProvinces() {
    return selectAllProvinces;
  }

  public void setSelectAllProvinces(boolean selectAllProvinces) {
    this.selectAllProvinces = selectAllProvinces;
  }

  public Map<String, String> getMonths() {
    return months;
  }

  public void setMonths(Map<String, String> months) {
    this.months = months;
  }
}
