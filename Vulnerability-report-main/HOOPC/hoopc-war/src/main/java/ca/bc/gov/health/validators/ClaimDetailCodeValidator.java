/*
 * To change this license header, choose License Headers in Project Properties. To change this
 * template file, choose Tools | Templates and open the template in the editor.
 */
package ca.bc.gov.health.validators;

import ca.bc.gov.health.constants.ClaimDetailCodePurpose;
import ca.bc.gov.health.constants.ClaimDetailCodeType;
import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.database.ejb.ClaimDetailCodesFacadeLocal;
import ca.bc.gov.health.service.HoopcAppService;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.RequestScoped;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.component.UIComponent;
import jakarta.faces.component.UIInput;
import jakarta.faces.context.FacesContext;
import jakarta.faces.event.ComponentSystemEvent;
import jakarta.faces.validator.ValidatorException;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;

/** The Class ClaimDetailCodeValidator. */
@Named("ClaimDetailCodeValidator")
@RequestScoped
public class ClaimDetailCodeValidator extends MultipleInputValidators implements Serializable {

  private static final long serialVersionUID = 4106013272008452158L;

  private final String editNewRateId = "codeForm:editNewRateAmount";
  private final String editNewRateEffectiveDateId = "codeForm:editNewRateEffectiveDate";
  private final String editPrevRateEndDateId = "codeForm:editPrevRateEndDate";

  @Inject HoopcAppService appService;
  @EJB private ClaimDetailCodesFacadeLocal claimDetailCodesFacade;

  /**
   * Validate.
   *
   * @param event the event
   */
  public void validate(ComponentSystemEvent event) {

    FacesContext fc = FacesContext.getCurrentInstance();
    UIComponent panelComponent = event.getComponent();

    if (panelComponent.getId().equals("addDialogPanel")) {

      // TODO - add a check for effective date before end date

    } else if (panelComponent.getId().equals("editDialogPanel")) {

      UIInput uiRate = (UIInput) panelComponent.findComponent(editNewRateId);
      UIInput uiEffectiveDate = (UIInput) panelComponent.findComponent(editNewRateEffectiveDateId);
      UIInput uiPrevEndDate = (UIInput) panelComponent.findComponent(editPrevRateEndDateId);

      validateAddRateDateOverlap(uiEffectiveDate, uiPrevEndDate, fc);
      validateAddRateThreeInputRequired(uiRate, uiEffectiveDate, uiPrevEndDate, fc);
    }
  }

  /**
   * Validate duplicate.
   *
   * @param fc the fc
   * @param uic the uic
   * @param value the value
   * @throws ValidatorException the validator exception
   */
  public void validateDuplicate(FacesContext fc, UIComponent uic, Object value)
      throws ValidatorException {
    String viewId =
        FacesContext.getCurrentInstance().getViewRoot().getViewId().replace("/codes/", "");
    ClaimDetailCodeType codeType;
    ClaimDetailCodePurpose codePurpose;

    if (viewId.equals("newbornProcedure.xhtml")) {
      codeType = ClaimDetailCodeType.NEWBORN;
      codePurpose = ClaimDetailCodePurpose.DIAGNOSTIC;
    } else if (viewId.equals("serviceCode.xhtml")) {
      codeType = ClaimDetailCodeType.SERVICE;
      codePurpose = ClaimDetailCodePurpose.SERVICE;
    } else {
      return;
    }

    if (appService.getClaimDetailCode((String) value, codeType.toString(), codePurpose.toString())
        != null) {
      throw new ValidatorException(
          new FacesMessage(
              FacesMessage.SEVERITY_ERROR, GlobalConstants.CODE_DUPLICATE_MESSAGE, ""));
    }
  }
}
