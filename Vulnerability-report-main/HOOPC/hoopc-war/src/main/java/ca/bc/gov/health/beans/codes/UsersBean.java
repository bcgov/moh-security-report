/*
 * To change this license header, choose License Headers in Project Properties. To change this
 * template file, choose Tools | Templates and open the template in the editor.
 */
package ca.bc.gov.health.beans.codes;

import ca.bc.gov.health.beans.BaseBean;
import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.database.ejb.ApplicationUsersFacadeLocal;
import ca.bc.gov.health.database.entity.AppUserAuthorizations;
import ca.bc.gov.health.database.entity.ApplicationUsers;
import ca.bc.gov.health.exception.HoopcException;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.primefaces.PrimeFaces;
import org.slf4j.LoggerFactory;

/**
 * The Class UsersBean.
 *
 * @author Trevor.Schiavone
 */
@ViewScoped
@Named("UsersBean")
public class UsersBean extends BaseBean implements Serializable {

  private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(HospitalsBean.class);
  private static final long serialVersionUID = 1409627608855947183L;

  @EJB private ApplicationUsersFacadeLocal applicationUsersFacade;

  private ApplicationUsers user = new ApplicationUsers();
  private List<ApplicationUsers> allUsers;
  private boolean activeUsers;
  private AppUserAuthorizations userAuthorization = new AppUserAuthorizations();

  /** Inits the. */
  @PostConstruct
  public void init() {
    //BCMOHAD-10234-23Mar22: setting the default active users checkbox value as false.
    this.activeUsers = false;
    loadAllUsersList();
  }

  /** Load all users list. */
  public void loadAllUsersList() {
    try {
      allUsers = applicationUsersFacade.findAll();
    } catch (HoopcException e) {
      addMessage(e, false);
    }
  }

  /** Clear user. */
  public void clearUser() {
    user = new ApplicationUsers();
    userAuthorization = new AppUserAuthorizations();
  }

  /** Clear user auth. */
  public void clearUserAuth() {
    userAuthorization = new AppUserAuthorizations();
  }

  /** Edits the user. */
  public void editUser() {

    // If this is a new authorization we want to add it to the user to be persisted
    if (userAuthorization.getId() == null && userAuthorization.getEffectiveDate() != null) {
      user.getAppUserAuthorizationsList().add(0, userAuthorization);
      userAuthorization.setAurId(user);
    }

    try {
      applicationUsersFacade.edit(user);
      addMessage(FacesMessage.SEVERITY_INFO, GlobalConstants.USER_EDIT_MESSAGE, false);
      user = applicationUsersFacade.find(user.getId());
      clearUserAuth();
      PrimeFaces.current().ajax().update("usersForm");
    } catch (HoopcException ex) {
      LOG.error(formatMessage(ex));
      addMessage(ex);
    }
  }

  /** Adds the user. */
  public void addUser() {
    try {
      applicationUsersFacade.create(user);
      addMessage(FacesMessage.SEVERITY_INFO, GlobalConstants.USER_CREATE_MESSAGE, false);
      clearUser();
      loadAllUsersList();
      PrimeFaces.current().ajax().update("usersForm");

    } catch (HoopcException ex) {
      LOG.error(formatMessage(ex));
      addMessage(ex);
    }
  }

  /** Delete selenium test code. */
  /*
   * NEVER ACTUALLY USE THIS, IT'S JUST A TEMPORARY FIX TO DELETE THE CREATED CODE IN THE SELENIUM
   * TEST
   */
  public void deleteSeleniumTestCode() {

    String applicationUserId = "0-test-user";

    Map<String, Object> criteria = new HashMap<>();
    criteria.put("applicationUserid", applicationUserId);

    try {
      ApplicationUsers userToDelete =
          applicationUsersFacade.findByNamedQuery("ApplicationUsers.findByUserId", criteria).get(0);
      applicationUsersFacade.remove(userToDelete);
      loadAllUsersList();
    } catch (HoopcException ex) {
      LOG.error(ex.getMessage());
    }
  }

  public boolean isEffectiveDateReadOnly() {
    if (!LocalDate.now().isBefore(user.getAccessEffectiveDate())) {
      return true;
    }
    return false;
  }

  /* Getters and Setters */
  public ApplicationUsers getUser() {
    return user;
  }

  public void setUser(ApplicationUsers user) {
    this.user = user;
  }

  public List<ApplicationUsers> getAllUsers() {
    return allUsers;
  }

  public AppUserAuthorizations getUserAuthorization() {
    return userAuthorization;
  }

  public void setUserAuthorization(AppUserAuthorizations userAuthorizations) {
    this.userAuthorization = userAuthorizations;
  }

  //BCMOHAD-10234-23Mar22: setters and getters to capture the checkbox value.
  public boolean isActiveUsers() {
    return activeUsers;
  }

  public void setActiveUsers(boolean activeUsers) {
    this.activeUsers = activeUsers;
  }

  public boolean isUserExpired(LocalDate endDate) {
    if (endDate == null) {
        return false;
    }
        return endDate.isBefore(LocalDate.now());
  }
  
  /** BCMOHAD-10234-23Mar22:hides the expired user from the list to be displayed. */
  /* 
   * @params endDate
   * @params activeUsers
   * @returns styleclassname
   */
  public String hideExpiredUsers(boolean activeUsers, LocalDate endDate) {
      if (activeUsers) {
          if (isUserExpired(endDate)) {
              return "ui-helper-hidden";
          } else {
              return "ui-datatable-row";
          }
      } else {
          if (isUserExpired(endDate)) {
              return "ui-datatable-row userColors";
          } else {
              return "ui-datatable-row";
          }
      }
 }

}
