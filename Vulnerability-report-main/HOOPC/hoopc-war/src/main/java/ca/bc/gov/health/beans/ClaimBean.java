package ca.bc.gov.health.beans;

import ca.bc.gov.health.constants.ClaimType;
import ca.bc.gov.health.constants.ResidencyType;
import ca.bc.gov.health.service.ClaimServiceLocal;
import ca.bc.gov.health.service.viewmodel.ClaimViewModel;
import jakarta.ejb.EJB;
import jakarta.faces.event.AjaxBehaviorEvent;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.apache.commons.lang3.StringUtils;
import org.primefaces.PrimeFaces;
import org.primefaces.component.autocomplete.AutoComplete;

/** The Class ClaimBean. */
public abstract class ClaimBean extends BaseBean {

  @EJB protected ClaimServiceLocal claimService;

  /**
   * Url to redirect after create success.
   *
   * @param claimid the claimid
   * @return the edits the redirect url
   */
  public abstract String getEditRedirectUrl(Long claimid);

  protected ClaimViewModel claim;

  // Used to disable required inputs on the search pages
  protected boolean claimPageTypeSearch = false;

  /** Instantiates a new claim bean. */
  public ClaimBean() {
    // Do nothing
  }

  /**
   * Instantiates a new claim bean.
   *
   * @param claimPageTypeSearch the claim page type search
   */
  public ClaimBean(boolean claimPageTypeSearch) {
    this.claimPageTypeSearch = claimPageTypeSearch;
  }

  public ClaimViewModel getClaim() {
    return claim;
  }

  public void setClaim(ClaimViewModel claim) {
    this.claim = claim;
  }

  /**
   * If selection of highcost code is cleared, clear the associated amount and date fields.
   *
   * @param e the e
   */
  public void highcostCodeSelected(AjaxBehaviorEvent e) {
    String component = e.getComponent().getId();
    // get the index of the code.
    Integer index = extractComponentIndex(component);
    if (index != null
        && StringUtils.isBlank(claim.getHighCostProcedures()[index - 1].getCodeValue())) {
      claim.getHighCostProcedures()[index - 1].setProcedureDate(null);
      claim.getHighCostProcedures()[index - 1].setProcedureCost(null);
    }
  }

  private Integer extractComponentIndex(String componentName) {
    Pattern p = Pattern.compile("[0-9]+");
    Matcher m = p.matcher(componentName);
    if (m.find()) {
      return Integer.valueOf(m.group());
    }
    return null;
  }

  public boolean isClaimPageTypeSearch() {
    return claimPageTypeSearch;
  }

  public void setClaimPageTypeSearch(boolean claimPageTypeSearch) {
    this.claimPageTypeSearch = claimPageTypeSearch;
  }

  /**
   * Trim label.
   *
   * @param event the event
   */
  public void trimLabel(AjaxBehaviorEvent event) {
    if (event.getComponent() != null) {
      AutoComplete component = (AutoComplete) (event.getComponent());
      String fullValue = (String) component.getValue();
      if (fullValue != null) {
        String codeValue = fullValue.split("-")[0];
        component.setValue(codeValue);
      }
      PrimeFaces.current()
          .executeScript(
              "document.getElementById('claimForm:" + component.getId() + "_input').focus()");
    }
  }

  public boolean isHasValidationErrors() {
    return !claim.getValidationErrors().isEmpty();
  }

  public boolean isInpatient() {
    if (claim != null && claim.getClaimType() != null) {
      return ClaimType.INPATIENT.toString().equals(claim.getClaimType().getClaimType());
    }
    return false;
  }

  public boolean isResident() {
    if (claim != null && claim.getResidencyType() != null) {
      return ResidencyType.RES.toString().equals(claim.getResidencyType().getTypeCode());
    }
    return false;
  }
}
