/*
 * To change this license header, choose License Headers in Project Properties. To change this
 * template file, choose Tools | Templates and open the template in the editor.
 */
package ca.bc.gov.health.beans.codes;

import ca.bc.gov.health.beans.BaseBean;
import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.database.ejb.HighcostProcedureCodesFacadeLocal;
import ca.bc.gov.health.database.entity.HighcostProcedureCodes;
import ca.bc.gov.health.database.entity.HighcostProcedureRate;
import ca.bc.gov.health.database.entity.MainEntity;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.service.HoopcAppService;
import ca.bc.gov.health.validation.ValidationError;
import ca.bc.gov.health.validation.codes.RangeValidator;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.lang3.Range;
import org.primefaces.PrimeFaces;
import org.slf4j.LoggerFactory;

/**
 * The Class HighCostProcedureBean.
 *
 * @author trevor.schiavone
 */
@ViewScoped
@Named("HighCostProcedureBean")
public class HighCostProcedureBean extends BaseBean implements Serializable {

  private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(HospitalsBean.class);
  private static final long serialVersionUID = 1409627608855947183L;

  @EJB private HighcostProcedureCodesFacadeLocal highCostProcedureCodesFacade;
  @Inject private transient RangeValidator validator;
  @Inject private HoopcAppService appService;

  private List<HighcostProcedureCodes> allHighCostProcedureCodes;
  private HighcostProcedureRate highCostRate = new HighcostProcedureRate();
  private HighcostProcedureCodes highCostProcedure = new HighcostProcedureCodes();

  /** Inits the. */
  @PostConstruct
  public void init() {
    loadHighCostProcedureList();
  }

  /** Load high cost procedure list. */
  public void loadHighCostProcedureList() {
    try {
      allHighCostProcedureCodes = highCostProcedureCodesFacade.findAll();
    } catch (HoopcException e) {
      addMessage(e, false);
    }
  }

  /** On row select. */
  public void onRowSelect() {
    List<HighcostProcedureRate> rateList = highCostProcedure.getHighcostProcedureRateList();
    rateList.sort(
        Comparator.comparing(
            HighcostProcedureRate::getEffectiveDate,
            Comparator.nullsLast(Comparator.reverseOrder())));
  }

  /** Clear high cost procedure. */
  public void clearHighCostProcedure() {
    highCostProcedure = new HighcostProcedureCodes();
    highCostRate = new HighcostProcedureRate();
  }

  /** Save high cost procedure. */
  public void saveHighCostProcedure() {

    if (highCostRate.getEffectiveDate() != null) {
      highCostProcedure.getHighcostProcedureRateList().add(0, highCostRate);
      highCostRate.setHcpId(highCostProcedure);
    }

    List<ValidationError> validationErrors = validator.validate(addRanges());
    if (validationErrors.size() > 0) {
      if (highCostRate.getEffectiveDate() != null) {
        highCostProcedure.getHighcostProcedureRateList().remove(highCostRate);
      }
      addMessageValidationErrors(validationErrors, false);
      return;
    }

    try {
      addOrEditHighCostProcedure();
      loadHighCostProcedureList();
      clearHighCostProcedure();

    } catch (HoopcException ex) {
      LOG.error(formatMessage(ex));
      addMessage(ex);
    }
  }

  /**
   * Adds the or edit high cost procedure.
   *
   * @throws HoopcException the hoopc exception
   */
  public void addOrEditHighCostProcedure() throws HoopcException {

    if (highCostProcedure.getId() == null) {
      highCostProcedureCodesFacade.create(highCostProcedure);
      addMessage(
          FacesMessage.SEVERITY_INFO, GlobalConstants.HIGH_COST_PROCEDURE_CREATE_MESSAGE, false);
    } else {
      highCostProcedureCodesFacade.edit(highCostProcedure);
      addMessage(
          FacesMessage.SEVERITY_INFO, GlobalConstants.HIGH_COST_PROCEDURE_EDIT_MESSAGE, false);
    }
    appService.initHighcostCodes();
    PrimeFaces.current().ajax().update("highCostProcedureForm");
  }

  private MainEntity addRanges() {
    if (highCostProcedure.getHighcostProcedureRateList() != null) {
      highCostProcedure.getRanges().clear();
      highCostProcedure
          .getHighcostProcedureRateList()
          .forEach(
              item -> {
                if (item.getEndDate() == null) {
                  highCostProcedure.getRanges().add(Range.is(item.getEffectiveDate()));
                } else {
                  highCostProcedure
                      .getRanges()
                      .add(Range.between(item.getEffectiveDate(), item.getEndDate()));
                }
              });
      return highCostProcedure;
    }
    return null;
  }

  /** Delete selenium test code. */
  /*
   * NEVER ACTUALLY USE THIS, IT'S JUST A TEMPORARY FIX TO DELETE THE CREATED CODE IN THE SELENIUM
   * TEST
   */
  public void deleteSeleniumTestCode() {

    Short code = 0;

    Map<String, Object> criteria = new HashMap<>();
    criteria.put("highCostProcedureCode", code);

    try {
      HighcostProcedureCodes highCostProcedureToDelete =
          highCostProcedureCodesFacade
              .findByNamedQuery("HighcostProcedureCodes.findByCode", criteria)
              .get(0);
      highCostProcedureCodesFacade.remove(highCostProcedureToDelete);
      appService.initHighcostCodes();
      loadHighCostProcedureList();
    } catch (HoopcException ex) {
      Logger.getLogger(HighCostProcedureBean.class.getName()).log(Level.SEVERE, null, ex);
    }
  }

  /* Getters and Setters */
  public List<HighcostProcedureCodes> getAllHighCostProcedureCodes() {
    return allHighCostProcedureCodes;
  }

  public HighcostProcedureCodes getHighCostProcedure() {
    return highCostProcedure;
  }

  public void setHighCostProcedure(HighcostProcedureCodes highCostProcedure) {
    this.highCostProcedure = highCostProcedure;
  }

  public HighcostProcedureRate getHighCostRate() {
    return highCostRate;
  }
}
