/*
 * To change this license header, choose License Headers in Project Properties. To change this
 * template file, choose Tools | Templates and open the template in the editor.
 */
package ca.bc.gov.health.converters;

import jakarta.faces.application.FacesMessage;
import jakarta.faces.component.UIComponent;
import jakarta.faces.context.FacesContext;
import jakarta.faces.convert.Converter;
import jakarta.faces.convert.ConverterException;
import jakarta.faces.convert.FacesConverter;
import java.text.MessageFormat;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import org.apache.commons.lang3.StringUtils;
import org.primefaces.component.calendar.Calendar;

/**
 * The Class LocalDateConverter.
 *
 * @author je.tremblay
 */
@SuppressWarnings("rawtypes")
@FacesConverter(value = "localDateConverter")
public class LocalDateConverter implements Converter {

  /*
   * (non-Javadoc)
   *
   * @see jakarta.faces.convert.Converter#getAsObject(jakarta.faces.context.FacesContext,
   * jakarta.faces.component.UIComponent, java.lang.String)
   */
  @Override
  public Object getAsObject(FacesContext fc, UIComponent uic, String value)
      throws ConverterException {

    DateTimeFormatter formatter = DateTimeFormatter.ofPattern(extractPattern(uic));
    try {
      return LocalDate.parse(value, formatter);
    } catch (Exception e) {
      String message = MessageFormat.format("Invalid date format for {0}", uic.getId());
      throw new ConverterException(new FacesMessage(FacesMessage.SEVERITY_ERROR, message, message));
    }
  }

  /*
   * (non-Javadoc)
   *
   * @see jakarta.faces.convert.Converter#getAsString(jakarta.faces.context.FacesContext,
   * jakarta.faces.component.UIComponent, java.lang.Object)
   */
  @Override
  public String getAsString(FacesContext fc, UIComponent uic, Object value) {
    if (value == null || (value instanceof String && StringUtils.isBlank((String) value))) {
      return "";
    }
    if (value instanceof LocalDate) {
      DateTimeFormatter formatter = DateTimeFormatter.ofPattern(extractPattern(uic));
      return formatter.format((LocalDate) value);
    } else {
      // PATCH: JSF Calendar sometimes call the converter with a java.util.Date after an
      // ConverterException is thrown. This is to avoid a second exception.
      return null;
    }
  }

  private String extractPattern(UIComponent component) {
    // try to get infos from calendar component
    if (component instanceof Calendar) {
      Calendar calendarComponent = (Calendar) component;
      return calendarComponent.getPattern();
    }

    return "yyyyMMdd";
  }
}
