package ca.bc.gov.health.monthend;

import ca.bc.gov.health.constants.GlobalConstants;
import jakarta.annotation.PostConstruct;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.io.Serializable;
import org.apache.commons.lang3.StringUtils;

@Named("ReportNonResMonthEndBean")
@ViewScoped
public class ReportNonResMonthEndBean extends ReportMonthEndBaseBean implements Serializable {

  private static final long serialVersionUID = 8507832773165236343L;

  @PostConstruct
  public void init() {
    refreshMonthEndStatuses(GlobalConstants.NRES_RESIDENCY_TYPE);
    super.selectedProvinces.add("BC");
  }

  public void setApproval() {
    try {
      monthEndReports = meReportService.retrieveReportsNonRes("HOOPCR0004,HOOPCR0010");
      if (monthEndReports != null) {
        meService.advanceMonthEndStatusNonRes(GlobalConstants.TRANSITION_CAUSE_SUCCESS);
      } else {
        FacesContext.getCurrentInstance().validationFailed();
        addErrorMessage(REPORT_NOT_FOUND);
      }
    } catch (Exception e) {
      e.printStackTrace();
      String message = e.getMessage().replace("-UNDEFINED-", "").trim();
      FacesContext.getCurrentInstance().validationFailed();
      if (StringUtils.isBlank(message)) {
        message = REPORT_NOT_FOUND;
      }
      addErrorMessage(message);
    }
  }

  public void distributeMonthendReports() {
    try {
      monthEndReports = meReportService.retrieveAllMonthEndNonResReports(getAllProvinces());
      if (monthEndReports != null) {
        changeMonthEndStatusNonRes("DISTPENDNG", GlobalConstants.NRES_RESIDENCY_TYPE);
      } else {
        FacesContext.getCurrentInstance().validationFailed();
        addErrorMessage(REPORT_NOT_FOUND);
      }
    } catch (Exception e) {
      e.printStackTrace();
      String message = e.getMessage();
      FacesContext.getCurrentInstance().validationFailed();
      if (StringUtils.isBlank(message)) {
        message = REPORT_NOT_FOUND;
      }
      addErrorMessage(message);
    }
  }
}
