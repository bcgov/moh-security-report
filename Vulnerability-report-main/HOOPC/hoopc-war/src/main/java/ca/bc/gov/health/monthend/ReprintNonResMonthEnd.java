/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.monthend;

import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.exception.HoopcException;
import jakarta.annotation.PostConstruct;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.primefaces.model.DefaultStreamedContent;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @author trevor.schiavone
 */
@Named("ReprintNonResMonthEnd")
@ViewScoped
public class ReprintNonResMonthEnd extends ReprintMonthEnd implements Serializable {

  private static final long serialVersionUID = 2291236572538970324L;
  private static final Logger LOG = LoggerFactory.getLogger(ReprintNonResMonthEnd.class);

  private String haProcessMonth;
  private String hospProcessMonth;
  private String provProcessMonth;
  private List<String> selectedProvReports = new ArrayList<>();
  private List<String> selectedCsvReports = new ArrayList<>();
  private List<String> selectedTxtReports = new ArrayList<>(); //BCMOHAD-9617 Allow reprint of TXT file for MonthEnd Report
  private List<String> selectedHospReports = new ArrayList<>();
  private List<String> selectedHaReports = new ArrayList<>();
  private boolean selectAllProvReports;
  private boolean selectAllCsvReports;
  private boolean selectAllHospReports;
  private boolean selectAllHaReports;

  private static final String ONTARIO_PROV_CODE = "ON";
  private static final String ALBERTA_PROV_CODE = "AB";

  @PostConstruct
  @Override
  public void init() {
    try {
      super.init();
    } catch (HoopcException ex) {
      LOG.error(ex.getMessage());
    }
  }

  public void retrieveHaReports() {
    try {
      reportFile
              = meReportService.retrieveHaReports(
              null,
              GlobalConstants.NRES_RESIDENCY_TYPE,
              String.join(",", selectedHaReports),
              haProcessMonth);
      super.validateReportFile();
    } catch (HoopcException e) {
      reportFile = null;
      LOG.error(formatMessage(e));
      addMessage(e, false);
    }
  }

  public void retrieveHospReports() {
    try {
      reportFile
              = meReportService.retrieveHospReports(
              null,
              GlobalConstants.NRES_RESIDENCY_TYPE,
              String.join(",", selectedHospReports),
              hospProcessMonth);
      super.validateReportFile();
    } catch (HoopcException e) {
      reportFile = null;
      LOG.error(formatMessage(e));
      addMessage(e, false);
    }
  }

  public void retrieveProvReports() throws Exception {
    try {
      super.retrieveProvReports(
          super.selectedProvinces,
          GlobalConstants.NRES_RESIDENCY_TYPE,
          String.join(",", selectedProvReports),
          provProcessMonth);
    } catch (HoopcException e) {
      reportFile = null;
      LOG.error(formatMessage(e));
      addMessage(e, false);
    }
  }

  public void retrieveClaimsFiles() throws Exception {

    // Generally this should be in a validator but it won't work with the composite component
    if (super.selectedProvinces.size() > 1) {
      FacesContext.getCurrentInstance().validationFailed();
      addMessage(
          FacesMessage.SEVERITY_ERROR, "Only one province can be selected for CSV reports", false);
      return;
    }

    // ONTARIO report name adds ON after the 15 and before the I or O like: HOOPCR0015ONO
    List<String> csvReportsToQuery = new ArrayList<>();

    if (super.selectedProvinces.get(0).equals(ONTARIO_PROV_CODE)) {
      for (String selectedProvReport : selectedCsvReports) {
        csvReportsToQuery.add(
            selectedProvReport.substring(0, selectedProvReport.length() - 1)
                + ONTARIO_PROV_CODE
                + selectedProvReport.substring(selectedProvReport.length() - 1));
      }
    } else {
      csvReportsToQuery = selectedCsvReports;
    }

    reportFile
            = meReportService.retrieveReports(
            super.selectedProvinces,
            GlobalConstants.NRES_RESIDENCY_TYPE,
            String.join(",", csvReportsToQuery),
            provProcessMonth,
            "DELIMITEDDATA");

    validateReportFile();
  }
//Start BCMOHAD-9617 Allow reprint of TXT file for MonthEnd Report

  public void retrieveClaimsFilesTxt() throws Exception {

    // Generally this should be in a validator but it won't work with the composite component
    if (super.selectedProvinces.size() > 1 || !(super.selectedProvinces.get(0).equals(ONTARIO_PROV_CODE) || super.selectedProvinces.get(0).equals(ALBERTA_PROV_CODE))) {
      FacesContext.getCurrentInstance().validationFailed();
      addMessage(
              FacesMessage.SEVERITY_ERROR, "Only Ontario or Alberta can be selected for TXT reports", false);
      return;
    }

    List<String> txtReportsToQuery = new ArrayList<>();

    if (super.selectedProvinces.get(0).equals(ONTARIO_PROV_CODE)) {
      for (String selectedProvReport : selectedTxtReports) {
        txtReportsToQuery.add(
                selectedProvReport.substring(0, selectedProvReport.length() - 1)
                + ONTARIO_PROV_CODE
                + selectedProvReport.substring(selectedProvReport.length() - 1));
      }
    } else {
      txtReportsToQuery = selectedTxtReports;
    }

    reportFile
            = meReportService.retrieveReports(
                    super.selectedProvinces,
                    GlobalConstants.NRES_RESIDENCY_TYPE,
                    String.join(",", txtReportsToQuery),
                    provProcessMonth,
                    "DELIMITEDDATA");

    validateReportFile();
  }
//End BCMOHAD-9617 Allow reprint of TXT file for MonthEnd Report

  public DefaultStreamedContent generateCSV() {
    InputStream is = new ByteArrayInputStream(reportFile);
    return DefaultStreamedContent.builder().contentType("application/csv").name("nonresident_month_end_reports.csv").stream(() -> is).build();
  }

//Start BCMOHAD-9617 Allow reprint of TXT file for MonthEnd Report
  public DefaultStreamedContent generateTXT() {
    String fileName, inOrOut;
    if (selectedTxtReports == null || selectedTxtReports.isEmpty()) {
      FacesContext.getCurrentInstance().validationFailed();
      addMessage(
              FacesMessage.SEVERITY_ERROR, "Please select one report for TXT file production", false);
      return null;
    } else if (selectedTxtReports.size() > 1) {
      FacesContext.getCurrentInstance().validationFailed();
      addMessage(
              FacesMessage.SEVERITY_ERROR, "Only one TXT report can be selected", false);
      return null;
    }
    inOrOut = selectedTxtReports.get(0).substring(selectedTxtReports.get(0).length() - 1);
    if (super.selectedProvinces.get(0).equals(ONTARIO_PROV_CODE)) {
      fileName = "BCON" + provProcessMonth + "01." + inOrOut + ".txt";
    } else {
      if (inOrOut.equalsIgnoreCase("I")) {
        fileName = "ABInpClaimData" + provProcessMonth + "01." + ".txt";
      } else {
        fileName = "ABOutpClaimData" + provProcessMonth + "01." + ".txt";
      }
    }
    

    InputStream is = new ByteArrayInputStream(reportFile);

    return DefaultStreamedContent.builder().contentType("application/txt").name(fileName).stream(() -> is).build();
  }
//End BCMOHAD-9617 Allow reprint of TXT file for MonthEnd Report

  /* Getters and Setters */
  public String getHaProcessMonth() {
    return haProcessMonth;
  }

  public void setHaProcessMonth(String haProcessMonth) {
    this.haProcessMonth = haProcessMonth;
  }

  public String getHospProcessMonth() {
    return hospProcessMonth;
  }

  public void setHospProcessMonth(String hospProcessMonth) {
    this.hospProcessMonth = hospProcessMonth;
  }

  public String getProvProcessMonth() {
    return provProcessMonth;
  }

  public void setProvProcessMonth(String provProcessMonth) {
    this.provProcessMonth = provProcessMonth;
  }

  public List<String> getSelectedProvReports() {
    return selectedProvReports;
  }

  public void setSelectedProvReports(List<String> selectedProvReports) {
    this.selectedProvReports = selectedProvReports;
  }

  public List<String> getSelectedHospReports() {
    return selectedHospReports;
  }

  public void setSelectedHospReports(List<String> selectedHospReports) {
    this.selectedHospReports = selectedHospReports;
  }

  public List<String> getSelectedCsvReports() {
    return selectedCsvReports;
  }

  public void setSelectedCsvReports(List<String> selectedCsvReports) {
    this.selectedCsvReports = selectedCsvReports;
  }

//Start BCMOHAD-9617 Allow reprint of TXT file for MonthEnd Report
  public List<String> getSelectedTxtReports() {
    return selectedTxtReports;
  }

  public void setSelectedTxtReports(List<String> selectedTxtReports) {
    this.selectedTxtReports = selectedTxtReports;
  }
//End BCMOHAD-9617 Allow reprint of TXT file for MonthEnd Report

  public List<String> getSelectedHaReports() {
    return selectedHaReports;
  }

  public void setSelectedHaReports(List<String> selectedHaReports) {
    this.selectedHaReports = selectedHaReports;
  }
  
  public boolean getSelectAllProvReports() {
      return selectAllProvReports;
  }

  public void setSelectAllProvReports(boolean selectAllProvReports) {
    this.selectAllProvReports = selectAllProvReports;
  }
  
  public boolean getSelectAllCsvReports() {
      return selectAllCsvReports;
  }

  public void setSelectAllCsvReports(boolean selectAllCsvReports) {
    this.selectAllCsvReports = selectAllCsvReports;
  }
  
  public boolean getSelectAllHospReports() {
      return selectAllHospReports;
  }

  public void setSelectAllHospReports(boolean selectAllHospReports) {
    this.selectAllHospReports = selectAllHospReports;
  }
  
  public boolean getSelectAllHaReports() {
      return selectAllHaReports;
  }

  public void setSelectAllHaReports(boolean selectAllHaReports) {
    this.selectAllHaReports = selectAllHaReports;
  }
}
