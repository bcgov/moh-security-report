package ca.bc.gov.health.validators;

import jakarta.faces.application.FacesMessage;
import jakarta.faces.component.UIInput;
import jakarta.faces.context.FacesContext;
import java.math.BigDecimal;
import java.time.LocalDate;

/** The Class MultipleInputValidators. */
public class MultipleInputValidators extends BaseValidator {

  /** Instantiates a new multiple input validators. */
  public MultipleInputValidators() {
    // Nothing to do
  }

  /**
   * Validate effective before end date.
   *
   * @param uiEffectiveDate the ui effective date
   * @param uiEndDate the ui end date
   * @param fc the fc
   */
  protected void validateEffectiveBeforeEndDate(
      UIInput uiEffectiveDate, UIInput uiEndDate, FacesContext fc) {

    String errorMsg = "Effective date must be before the end date";

    LocalDate effectiveDate = (LocalDate) uiEffectiveDate.getValue();
    LocalDate endDate = (LocalDate) uiEndDate.getValue();

    if (endDate != null
        && effectiveDate != null
        && (!effectiveDate.isBefore(endDate) || effectiveDate.isEqual(endDate))) {
      uiEndDate.setValid(false);
      uiEffectiveDate.setValid(false);
      FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMsg, "");
      fc.addMessage(null, msg);
    }
  }

  /**
   * Validate add rate three input required.
   *
   * @param uiRate the ui rate
   * @param uiEffectiveDate the ui effective date
   * @param uiPrevEndDate the ui prev end date
   * @param fc the fc
   */
  protected void validateAddRateThreeInputRequired(
      UIInput uiRate, UIInput uiEffectiveDate, UIInput uiPrevEndDate, FacesContext fc) {

    String errorMessage =
        "Both Rate and Effective Date are required to add a new rate. The previous rate must also have an end date";

    BigDecimal rate = (BigDecimal) uiRate.getValue();
    LocalDate effectiveDate = (LocalDate) uiEffectiveDate.getValue();
    LocalDate prevEndDate = (LocalDate) uiPrevEndDate.getValue();

    if ((effectiveDate != null || rate != null)
        && (prevEndDate == null || effectiveDate == null || rate == null)) {
      uiRate.setValid(false);
      uiEffectiveDate.setValid(false);
      uiPrevEndDate.setValid(false);
      FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMessage, "");
      fc.addMessage(null, msg);
    }
  }

  /**
   * Validate add rate date overlap.
   *
   * @param uiEffectiveDate the ui effective date
   * @param uiPrevEndDate the ui prev end date
   * @param fc the fc
   */
  protected void validateAddRateDateOverlap(
      UIInput uiEffectiveDate, UIInput uiPrevEndDate, FacesContext fc) {

    String errorMessage =
        "The Effective Date of the New Rate must be after the Previous Rate's End Date";

    LocalDate effectiveDate = (LocalDate) uiEffectiveDate.getValue();
    LocalDate prevEndDate = (LocalDate) uiPrevEndDate.getValue();

    if ((prevEndDate != null && effectiveDate != null)
        && (effectiveDate.isBefore(prevEndDate) || effectiveDate.equals(prevEndDate))) {

      uiEffectiveDate.setValid(false);
      FacesMessage msg = new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMessage, "");
      fc.addMessage(null, msg);
    }
  }
}
