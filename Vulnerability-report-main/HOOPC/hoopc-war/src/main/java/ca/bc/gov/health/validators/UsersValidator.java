/*
 * To change this license header, choose License Headers in Project Properties. To change this
 * template file, choose Tools | Templates and open the template in the editor.
 */
package ca.bc.gov.health.validators;

import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.database.ejb.ApplicationUsersFacadeLocal;
import ca.bc.gov.health.database.entity.AppUserAuthorizations;
import ca.bc.gov.health.database.entity.ApplicationUsers;
import ca.bc.gov.health.database.entity.Hospitals;
import ca.bc.gov.health.exception.HoopcException;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.RequestScoped;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.component.UIComponent;
import jakarta.faces.component.UIInput;
import jakarta.faces.context.FacesContext;
import jakarta.faces.event.ComponentSystemEvent;
import jakarta.faces.validator.ValidatorException;
import jakarta.inject.Named;
import java.io.Serializable;
import java.text.MessageFormat;
import java.time.LocalDate;
import java.util.HashMap;
import java.util.Map;

/**
 * The Class UsersValidator.
 *
 * @author Trevor.Schiavone
 */
@Named("UsersValidator")
@RequestScoped
public class UsersValidator extends MultipleInputValidators implements Serializable {

  private static final long serialVersionUID = 4106013272008452158L;

  @EJB private ApplicationUsersFacadeLocal applicationUsersFacade;

  private final String addUserEffectiveDateId = "usersForm:effectiveDate";
  private final String addUserEndDateId = "usersForm:endDate";

  private final String editUserEffectiveDateId = "usersForm:editEffectiveDate";
  private final String editUserEndDateId = "usersForm:editEndDate";

  private final String userAuthEffectiveDateId = "usersForm:authEffectiveDate";
  private final String userAuthEndDateId = "usersForm:authEndDate";
  private final String addUserAuthUserId = "usersForm:authUserId";
  private final String addUserAuthHospitalName = "usersForm:authHospitalName";

  /**
   * Validate.
   *
   * @param event the event
   */
  /*
   * General Validation for the usersForm for validations that require multiple inputs to validate
   */
  public void validate(ComponentSystemEvent event) {

    FacesContext fc = FacesContext.getCurrentInstance();
    UIComponent panelComponent = event.getComponent();

    UIInput uiEffectiveDate;
    UIInput uiEndDate;

    switch (panelComponent.getId()) {
      case "addUserPanel":
        uiEffectiveDate = (UIInput) panelComponent.findComponent(addUserEffectiveDateId);
        uiEndDate = (UIInput) panelComponent.findComponent(addUserEndDateId);
        validateEffectiveDate(uiEffectiveDate, fc);
        break;
      case "userInfoPanel":
        uiEffectiveDate = (UIInput) panelComponent.findComponent(editUserEffectiveDateId);
        uiEndDate = (UIInput) panelComponent.findComponent(editUserEndDateId);
        break;
      case "authPanel":
        uiEffectiveDate = (UIInput) panelComponent.findComponent(userAuthEffectiveDateId);
        uiEndDate = (UIInput) panelComponent.findComponent(userAuthEndDateId);

        UIInput uiUserId = (UIInput) panelComponent.findComponent(addUserAuthUserId);
        UIInput uiHospital = (UIInput) panelComponent.findComponent(addUserAuthHospitalName);

        // Bit of a hack to simplify the ui - it's only required when we're doing the add, otherwise
        // it's disabled
        // Don't check the duplicate on the edit since it will find a duplicate of itself
        if (uiHospital.isRequired()) {
          validateDuplicateAuth(uiUserId, uiHospital, fc);
        }
        break;

      default:
        return;
    }
    validateEffectiveBeforeEndDate(uiEffectiveDate, uiEndDate, fc);
  }

  /**
   * Validate duplicate user.
   *
   * @param fc the fc
   * @param uic the uic
   * @param value the value
   * @throws ValidatorException the validator exception
   */
  /* Faces Validator to check for a duplicate User Id in the database */
  public void validateDuplicateUser(FacesContext fc, UIComponent uic, Object value)
      throws ValidatorException {

    try {
      String code = (String) value;

      Map<String, Object> criteria = new HashMap<>();
      criteria.put("applicationUserid", code);

      if (!applicationUsersFacade
          .findByNamedQuery("ApplicationUsers.findByUserId", criteria)
          .isEmpty()) {
        throw new ValidatorException(
            new FacesMessage(
                FacesMessage.SEVERITY_ERROR, GlobalConstants.USER_DUPLICATE_MESSAGE, ""));
      }

    } catch (HoopcException ex) {
      throw new ValidatorException(
          new FacesMessage(FacesMessage.SEVERITY_ERROR, ex.getMessage(), ""));
    }
  }

  private void validateEffectiveDate(UIInput uiEffectiveDate, FacesContext fc) {
    String invalidEffectiveDateErrorMsg =
        "Cannot create application user because {0} is not a valid access effective date. Acces cannot be granted to start in the past.";
    LocalDate effectiveDate = (LocalDate) uiEffectiveDate.getValue();

    if (effectiveDate != null && effectiveDate.isBefore(LocalDate.now())) {
      uiEffectiveDate.setValid(false);
      String msg = MessageFormat.format(invalidEffectiveDateErrorMsg, effectiveDate);
      fc.addMessage(
          uiEffectiveDate.getClientId(), new FacesMessage(FacesMessage.SEVERITY_ERROR, msg, null));
    }
  }

  /**
   * Validate duplicate auth.
   *
   * @param uiUserId the ui user id
   * @param uiHospital the ui hospital
   * @param fc the fc
   */
  /* Validator to check for a duplicate User Id in the database */
  public void validateDuplicateAuth(UIInput uiUserId, UIInput uiHospital, FacesContext fc) {

    String duplicateAuthErrorMsg = "User already has an authorization for this hospital";

    try {
      String userId = (String) uiUserId.getValue();
      Hospitals hospital = (Hospitals) uiHospital.getValue();

      Map<String, Object> criteria = new HashMap<>();
      criteria.put("applicationUserid", userId);

      ApplicationUsers user =
          applicationUsersFacade.findByNamedQuery("ApplicationUsers.findByUserId", criteria).get(0);

      for (AppUserAuthorizations auth : user.getAppUserAuthorizationsList()) {
        if (auth.getHspId().equals(hospital)) {
          uiHospital.setValid(false);
          FacesMessage msg =
              new FacesMessage(FacesMessage.SEVERITY_ERROR, duplicateAuthErrorMsg, null);
          fc.addMessage(null, msg);
          return;
        }
      }

    } catch (HoopcException ex) {
      throw new ValidatorException(
          new FacesMessage(FacesMessage.SEVERITY_ERROR, ex.getMessage(), ""));
    }
  }
}
