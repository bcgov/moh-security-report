package ca.bc.gov.health.beans.administration;

import ca.bc.gov.health.beans.BaseBean;
import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.database.entity.Hospitals;
import ca.bc.gov.health.database.entity.SaSubmissionDetails;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.service.HoopcAppService;
import ca.bc.gov.health.staging.StagingAreaServiceLocal;
import ca.bc.gov.health.staging.SubmissionViewModel;
import ca.bc.gov.health.validation.ValidationError;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.IOException;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


/** The Class StagingAreaBean. */
@Named("StagingAreaBean")
@ViewScoped
public class StagingAreaBean extends BaseBean implements Serializable {
  private static final long serialVersionUID = -9222749642073602851L;

  private static final Logger log = LoggerFactory.getLogger(StagingAreaBean.class);

  @EJB private StagingAreaServiceLocal saService;

  @Inject HoopcAppService appService;

  private final String inpatientDialog =
      "/WEB-INF/fragments/administration/stagingAreaClaimDetailInpatient.xhtml";
  private final String outpatientDialog =
      "/WEB-INF/fragments/administration/stagingAreaClaimDetailOutpatient.xhtml";

  private SubmissionViewModel selectedSubmission;
  private SaSubmissionDetails selectedClaim;

  private List<SubmissionViewModel> submissions = new ArrayList<>();

  private String searchHospital;
  private String searchPHN;
  private String searchSurname;
  private String searchGivenname;
  private LocalDate searchServiceDate;

  /** Inits the StagingAreaBean. */
  @PostConstruct
  public void init() {
    selectedSubmission = new SubmissionViewModel();
    loadSubmissionList();
  }

  public void saveSubmissionDetail() {

    try {
      String submissionErrors = saService.saveSubmissionDetail(selectedClaim);

      // Reload the submissoin
      selectedSubmission = saService.loadSubmission(selectedSubmission.getSubmission().getId());

      // Update message
      if (submissionErrors.equals("Y")) {
        addWarnMessage(GlobalConstants.STAGING_CLAIM_EDIT_WARNING_MESSAGE);
      } else {
        addInfoMessage(GlobalConstants.STAGING_CLAIM_EDIT_MESSAGE);
      }

    } catch (HoopcException ex) {
      log.error(ex.getMessage());
      addErrorMessage(GlobalConstants.STAGING_CLAIM_EDIT_ERROR_MESSAGE);
    }
  }

  /** Load submissions list. */
  public void loadSubmissionList() {
    submissions = saService.loadSubmissions();
  }

  public void rowSelect() throws IOException {
    // FacesContext.getCurrentInstance().getExternalContext().redirect(generateRedirectUrl());
  }

  /** Save header. */
  public void approve() {
    log.info("Approving submission header");
    List<ValidationError> errors = saService.approveSubmission(selectedSubmission);
    if (errors.isEmpty()) {
      addInfoMessage("Submission has been approved");
    } else {
      addMessageValidationErrors(errors, false);
    }
  }

  /** Save header. */
  public void reject() {
    log.info("Rejecting submission header");
    List<ValidationError> errors = saService.rejectSubmission(selectedSubmission);
    if (errors.isEmpty()) {
      addInfoMessage("Submission has been rejected");
    } else {
      addMessageValidationErrors(errors, false);
    }
  }

  /** Save header. */
  public void reset() {
    try {

      List<ValidationError> errors = saService.resetSubmission(selectedSubmission);
      // Reload the submissoin
      selectedSubmission = saService.loadSubmission(selectedSubmission.getSubmission().getId());

      // Update message
      if (errors.get(0).getMessage().equals("Submission has been reset.")) {
        addInfoMessage(errors.get(0).getMessage());
      } else { // There's more to the error list than just the success message (pl sql returns it as
        // one long string)
        addWarnMessage(errors.get(0).getMessage());
      }

    } catch (HoopcException e) {
      addErrorMessage("Error resetting submission");
    }
  }
  //BCMOHAD-9627-10Feb22: Bean function to delete a selected submission
  public void delete() {
    log.info("Deleting submission ");
    try {
       List<ValidationError> errors = saService.deleteSubmission(selectedSubmission);
        
       if (errors.isEmpty()) {
       addInfoMessage("Submission has been deleted successfully");
       } else {
         addMessageValidationErrors(errors, false);
       }
    } catch (HoopcException e) {
      addErrorMessage("Error deleting submission");
    }
  }  
  

  /** Search. */
  public void search() {
    log.info("Searching submission header");
  }

  public String getClaimDetailType() {

    if (selectedSubmission.getSubmission() != null
        && !selectedSubmission.getSubmission().getSaSubmissionDetailsList().isEmpty()) {
      if (selectedSubmission
          .getSubmission()
          .getSaSubmissionDetailsList()
          .get(0)
          .getPatientBatch()
          .equalsIgnoreCase("O")) {
        return outpatientDialog;
      } else if (selectedSubmission
          .getSubmission()
          .getSaSubmissionDetailsList()
          .get(0)
          .getPatientBatch()
          .equalsIgnoreCase("I")) {
        return inpatientDialog;
      }
    }
    return null;
  }

  /**
   * Full hospital.
   *
   * @param hospitalNumber the hospital number
   * @return the string
   */
  public String fullHospital(String hospitalNumber) {
    Hospitals hospital =
        appService.getHospital(
            selectedSubmission.getSubmission().getTreatingProvince(), hospitalNumber);
    return hospital.getHospitalNumber() + " - " + hospital.getName();
  }

  public SubmissionViewModel getSelectedSubmission() {
    return selectedSubmission;
  }

  public void setSelectedSubmission(SubmissionViewModel selectedSubmission) {
    this.selectedSubmission = selectedSubmission;
  }

  public List<SubmissionViewModel> getSubmissions() {
    return submissions;
  }

  public String getSearchHospital() {
    return searchHospital;
  }

  public void setSearchHospital(String searchHospital) {
    this.searchHospital = searchHospital;
  }

  public String getSearchPHN() {
    return searchPHN;
  }

  public void setSearchPHN(String searchPHN) {
    this.searchPHN = searchPHN;
  }

  public String getSearchSurname() {
    return searchSurname;
  }

  public void setSearchSurname(String searchSurname) {
    this.searchSurname = searchSurname;
  }

  public String getSearchGivenname() {
    return searchGivenname;
  }

  public void setSearchGivenname(String searchGivenname) {
    this.searchGivenname = searchGivenname;
  }

  public LocalDate getSearchServiceDate() {
    return searchServiceDate;
  }

  public void setSearchServiceDate(LocalDate searchServiceDate) {
    this.searchServiceDate = searchServiceDate;
  }

  public Integer getSubStatus() {
    if (selectedSubmission != null) {
      if (selectedSubmission.getApproveFlag()) {
        return 0;
      }
      if (selectedSubmission.getRejectFlag()) {
        return 1;
      }
      if (selectedSubmission.getResetFlag()) {
        return 2;
      }
    }
    return null;
  }

  public void setSubStatus(Integer subStatus) {
    selectedSubmission.setApproveFlag(false);
    selectedSubmission.setRejectFlag(false);
    selectedSubmission.setResetFlag(false);
    if (subStatus != null) {
      switch (subStatus) {
        case 0:
          selectedSubmission.setApproveFlag(true);
          break;
        case 1:
          selectedSubmission.setRejectFlag(true);
          break;
        case 2:
          selectedSubmission.setResetFlag(true);
          break;
      }
    }
  }

  public SaSubmissionDetails getSelectedClaim() {
    return selectedClaim;
  }

  public void setSelectedClaim(SaSubmissionDetails selectedClaim) {
    this.selectedClaim = selectedClaim;
  }
}
