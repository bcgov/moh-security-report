/*
 * To change this license header, choose License Headers in Project Properties. To change this
 * template file, choose Tools | Templates and open the template in the editor.
 */
package ca.bc.gov.health.validators;

import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.database.ejb.HealthAuthoritiesFacadeLocal;
import ca.bc.gov.health.database.ejb.HospitalsFacade;
import ca.bc.gov.health.database.entity.HealthAuthorities;
import ca.bc.gov.health.exception.HoopcException;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.RequestScoped;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.component.UIComponent;
import jakarta.faces.component.UIInput;
import jakarta.faces.component.UISelectOne;
import jakarta.faces.context.FacesContext;
import jakarta.faces.event.ComponentSystemEvent;
import jakarta.faces.validator.ValidatorException;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;
import org.apache.commons.lang3.StringUtils;

/** The Class HospitalValidator. */
@Named("HospitalValidator")
@RequestScoped
public class HospitalValidator extends MultipleInputValidators implements Serializable {

  private static final long serialVersionUID = 4106013272008452158L;

  @EJB private HospitalsFacade hospitalFacade;
  @EJB private HealthAuthoritiesFacadeLocal haFacade;

  private final String editNewRateId = "codeForm:editNewRateAmount";
  private final String editNewRateEffectiveDateId = "codeForm:editNewRateEffectiveDate";
  private final String editPrevRateEndDateId = "codeForm:editPrevRateEndDate";
  private final String hospitalNumberId = "codeForm:hospitalNumber";

  // General Validation for the hospitals code table for validations that require multiple inputs to
  /**
   * Validate.
   *
   * @param event the event
   */
  // validate
  public void validate(ComponentSystemEvent event) {

    FacesContext fc = FacesContext.getCurrentInstance();
    UIComponent panelComponent = event.getComponent();

    if (panelComponent.getId().equals("addDialogPanel")) {

      // TODO add validation for effective date before end date
      validateDuplicate(fc, panelComponent);

      UIInput uiHospitalNumber = (UIInput) panelComponent.findComponent(hospitalNumberId);
      String hospitalNumber = (String) uiHospitalNumber.getValue();
      if (!StringUtils.isNumeric(hospitalNumber)) {
        uiHospitalNumber.setValid(false);
        FacesMessage msg = new FacesMessage(GlobalConstants.HOSPITAL_NUMBER_NUMERIC);
        msg.setSeverity(FacesMessage.SEVERITY_ERROR);
        fc.addMessage(uiHospitalNumber.getClientId(), msg);
      }

    } else if (panelComponent.getId().equals("editDialogPanel")) {

      UIInput uiRate = (UIInput) panelComponent.findComponent(editNewRateId);
      UIInput uiEffectiveDate = (UIInput) panelComponent.findComponent(editNewRateEffectiveDateId);
      UIInput uiPrevEndDate = (UIInput) panelComponent.findComponent(editPrevRateEndDateId);

      validateAddRateDateOverlap(uiEffectiveDate, uiPrevEndDate, fc);
      validateAddRateThreeInputRequired(uiRate, uiEffectiveDate, uiPrevEndDate, fc);
    }
  }

  /**
   * Validate duplicate.
   *
   * @param fc the fc
   * @param components the components
   */
  // Validation method to check if the hospital already exists for the given province
  private void validateDuplicate(FacesContext fc, UIComponent components) {
    UISelectOne uiProvince = (UISelectOne) components.findComponent("codeForm:treatingProvince");
    UIInput uiCode = (UIInput) components.findComponent("codeForm:hospitalNumber");

    Map<String, Object> criteria = new HashMap<>();
    criteria.put("hospitalNumber", uiCode.getValue());
    criteria.put("provinceCode", uiProvince.getValue());

    try {
      if (!hospitalFacade
          .findByNamedQuery("Hospitals.checkDuplicateHospital", criteria)
          .isEmpty()) {
        uiCode.setValid(false);
        FacesMessage msg = new FacesMessage(GlobalConstants.HOSPITAL_DUPLICATE_MESSAGE);
        msg.setSeverity(FacesMessage.SEVERITY_ERROR);
        fc.addMessage(uiCode.getClientId(), msg);
      }
    } catch (HoopcException ex) {
      logError(ex, fc);
    }
  }

  /**
   * Validate valid ha.
   *
   * @param fc the fc
   * @param uic the uic
   * @param value the value
   * @throws ValidatorException the validator exception
   */
  /* Faces Validator to check that Health Authority is valid */
  public void validateValidHa(FacesContext fc, UIComponent uic, Object value)
      throws ValidatorException {

    String errorMessage = "The input Health Authority does not exist";

    String haNumber = (String) value;

    if (haNumber.isEmpty()) {
      return;
    }

    try {

      for (HealthAuthorities ha : haFacade.findAll()) {
        if (ha.getHaNumber().equals(haNumber)) {
          return; // The health authority exists
        }
      }
      throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMessage, ""));

    } catch (HoopcException ex) {
      logError(ex, fc);
    }
  }
}
