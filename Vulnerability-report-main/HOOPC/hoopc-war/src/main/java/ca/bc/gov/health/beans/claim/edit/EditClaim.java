/*
 * To change this license header, choose License Headers in Project Properties. To change this
 * template file, choose Tools | Templates and open the template in the editor.
 */
package ca.bc.gov.health.beans.claim.edit;

import ca.bc.gov.health.beans.ApplicationBean;
import ca.bc.gov.health.beans.ClaimBean;
import ca.bc.gov.health.constants.GlobalConstants;
import static ca.bc.gov.health.constants.GlobalConstants.CLAIM_EDIT_MESSAGE;
import static ca.bc.gov.health.constants.GlobalConstants.CLAIM_EDIT_MESSAGE_SOFT_ERROR;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.service.HoopcSessionBean;
import ca.bc.gov.health.service.viewmodel.ClaimViewModel;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Inject;
import java.io.IOException;
import java.io.Serializable;
import java.text.MessageFormat;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * The Class EditROClaim.
 *
 * @author je.tremblay
 */
public abstract class EditClaim extends ClaimBean implements Serializable {

  private static final long serialVersionUID = -1801665904487716264L;

  private static ResourceBundle bundle = ResourceBundle.getBundle("messages");

  @Inject protected ApplicationBean appBean;

  @Inject protected HoopcSessionBean session;

  protected Long claimId;

  protected abstract String getEditReturnUrl();

  protected abstract String getDeleteReturnUrl();

  private static Logger log = LoggerFactory.getLogger(EditClaim.class);

  /** Instantiates a new edits the claim. */
  public EditClaim() {
    super();
  }

  /** Post init. */
  public void postInit() {
    Map<String, String> params =
        FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
    if (params.get("claimId") != null) {
      claimId = Long.valueOf(params.get("claimId"));
      try {
        claim = claimService.loadClaim(claimId);
        if (claim == null) {
          log.error("Claim claimId not found");
          addMessage(
              FacesMessage.SEVERITY_ERROR, GlobalConstants.CLAIM_NOT_EXIST_MESSAGE_ERROR, false);
          claim = new ClaimViewModel();
        } else if (!appBean.isUserAuthorized(
            claim.getTreatingProvince(), claim.getHospitalNumber())) {
          // TODO: Should we show CLAIM_NOT_EXIST_MESSAGE_ERROR instead???
          log.error(
              "Unauthorized claim (id={0}) access (userId={1})",
              claim.getClaimId(), session.getCurrentUser().getApplicationUserid());
          addMessage(
              FacesMessage.SEVERITY_ERROR,
              formatHospitalAuthMessage(claim.getHospitalNumber()),
              false);
          claim = new ClaimViewModel();
        }
      } catch (HoopcException e) {
        addMessage(e);
      }
    } else {
      log.error("Claim claimId null");
      claim = new ClaimViewModel();
      addMessage(FacesMessage.SEVERITY_ERROR, GlobalConstants.CLAIM_NOT_EXIST_MESSAGE_ERROR, false);
    }
  }

  /** Save claim. */
  public void saveClaim() {

    try {
      if (!claimService.claimIsEditable(claimId)) {
        addMessage(
            new FacesMessage(
                FacesMessage.SEVERITY_ERROR,
                GlobalConstants.CLAIM_NOT_EDITABLE_EDIT_MESSAGE_ERROR,
                null));
      } else {
        claimService.saveClaim(claim);
        claim = claimService.loadClaim(claimId);

        if (claimService.getClaimErrors(claim.getClaimId()).isEmpty()) {
          addMessage(new FacesMessage(FacesMessage.SEVERITY_INFO, CLAIM_EDIT_MESSAGE, null));
        } else {
          addMessage(
              new FacesMessage(FacesMessage.SEVERITY_WARN, CLAIM_EDIT_MESSAGE_SOFT_ERROR, null));
        }
      }

    } catch (HoopcException e) {
      addMessage(e);

    } catch (Exception ex) {
      addMessage(
          new FacesMessage(
              FacesMessage.SEVERITY_ERROR,
              GlobalConstants.CLAIM_EDIT_MESSAGE_ERROR,
              ex.getMessage()));
    }
  }

  /**
   * Delete claim.
   *
   * @return the string
   */
  public String deleteClaim() {
    try {

      if (!claimService.claimIsEditable(claimId)) {
        addMessage(
            new FacesMessage(
                FacesMessage.SEVERITY_ERROR,
                GlobalConstants.CLAIM_NOT_EDITABLE_EDIT_MESSAGE_ERROR,
                null));
        return "";
      } else {
        claimService.deleteClaim(claimId);
        addMessage(
            new FacesMessage(
                FacesMessage.SEVERITY_INFO, GlobalConstants.CLAIM_DELETE_MESSAGE, null));
        return getDeleteReturnUrl();
      }

    } catch (HoopcException e) {
      addMessage(e);
      return "";
    } catch (Exception ex) {
      addMessage(
          new FacesMessage(
              FacesMessage.SEVERITY_ERROR,
              GlobalConstants.CLAIM_EDIT_MESSAGE_ERROR,
              ex.getMessage()));
      return "";
    }
  }

  /**
   * CHECKCLAIMSTATUS Validation rule<br>
   * <br>
   * Resident request add: Claim status = PENDING or PROCESSED<br>
   * Resident decision add: Claim status = PROCESSED or ADJUST REQ<br>
   * Non-resident request add: Claim status = PROCESSED<br>
   * Non-resident request update: Claim status = ADJUST REQ<br>
   * <br>
   * .
   *
   * @param adjType the adj type
   * @param claimView the claim view
   * @return String
   */
  public String checkClaimStatus(String adjType, ClaimViewModel claimView) {
      
    //BCMOHAD-9593-10Feb22: For both Res and NRES: allowing making adjustments even when claim is ADJST REQ and ADJUST APP
    if (claimView.getResidencyType().getTypeCode().equals("RES")) {
      if (adjType.equals("REQUEST")
          && !Arrays.asList(new String[] {"PENDING", "PROCESSED", "ADJUST REQ", "ADJUST APP"})
              .contains(claimView.getStatusCode())) {
        return formatAdjMessage(adjType, claimView, "PENDING,PROCESSED,ADJUST REQ,ADJUST APP");

      } else if (adjType.equals("DECISION")
          && !Arrays.asList(new String[] {"PROCESSED", "ADJUST REQ","ADJUST APP"})
              .contains(claimView.getStatusCode())) {
        return formatAdjMessage(adjType, claimView, "PROCESSED,ADJUST REQ,ADJUST APP");
      }
    } else if (claimView.getResidencyType().getTypeCode().equals("NRES")) {
      if (adjType.equals("REQUEST") 
          && !Arrays.asList(new String[] {"PROCESSED", "ADJUST REQ", "ADJUST APP"})
              .contains(claimView.getStatusCode())){
        return formatAdjMessage(adjType, claimView, "PROCESSED,ADJUST REQ,ADJUST APP");
      } else if (adjType.equals("DECISION") 
                 && !Arrays.asList(new String[] {"PROCESSED", "ADJUST REQ", "ADJUST APP"})
              .contains(claimView.getStatusCode())) {
        return formatAdjMessage(adjType, claimView, "PROCESSED,ADJUST REQ,ADJUST APP");
      }
    }
    return null;
  }

  private String formatAdjMessage(String adjType, ClaimViewModel claimView, String statusList) {
    return MessageFormat.format(
        bundle.getString("claim.adjustment.statusValidation"),
        claimView.getStatusCode(),
        claimView.getResidencyType().getTypeDesc().toLowerCase(),
        adjType.toLowerCase(),
        statusList);
  }

  private String formatHospitalAuthMessage(String hospitalNumber) {
    return MessageFormat.format(
        bundle.getString("claim.validation.checkHospitalAuth"),
        FacesContext.getCurrentInstance().getExternalContext().getUserPrincipal().getName(),
        hospitalNumber);
  }

  String formatClaimPageAndTypeMismatchMessage(String claimId, String pageExpectedClaimType) {
    return MessageFormat.format(
        bundle.getString("claim.validation.claimDoesNotMatchExpectedType"),
        claimId,
        pageExpectedClaimType);
  }

  /** Save claim adj request. */
  public void saveClaimAdjRequest() {
    try {

      String adjustmentError = checkClaimStatus("REQUEST", claim);
      if (adjustmentError != null) {
        addErrorMessage(adjustmentError);
      } else {
        claimService.saveClaimRequest(claim);
        claim = claimService.loadClaim(claimId);
        addMessage(
            new FacesMessage(
                FacesMessage.SEVERITY_INFO, GlobalConstants.CLAIM_ADJ_REQ_EDIT_MESSAGE, null));
      }

    } catch (HoopcException e) {
      addMessage(e);
    }
  }

  /** Delete claim adj request. */
  public void deleteClaimAdjRequest() {
    try {

      claimService.deleteClaimRequest(claimId);
      claim = claimService.loadClaim(claimId);
      addMessage(
          new FacesMessage(
              FacesMessage.SEVERITY_INFO, GlobalConstants.CLAIM_ADJ_REQ_DELETE_MESSAGE, null));

    } catch (HoopcException e) {
      addMessage(e);
    }
  }

  /** Save claim adj decision. */
  public void saveClaimAdjDecision() {
    try {

      String adjustmentError = checkClaimStatus("DECISION", claim);
      if (adjustmentError != null) {
        addErrorMessage(adjustmentError);
      } else {
        claimService.saveClaimDecision(claim);
        claim = claimService.loadClaim(claimId);
        addMessage(
            new FacesMessage(
                FacesMessage.SEVERITY_INFO, GlobalConstants.CLAIM_ADJ_DEC_EDIT_MESSAGE, null));
      }

    } catch (HoopcException e) {
      addMessage(e);
    }
  }

  /**
   * Delete claim adj decision.
   *
   * @return the string
   */
  public void deleteClaimAdjDecision() {
    try {

      claimService.deleteClaimDecision(claimId);
      claim = claimService.loadClaim(claimId);
      addMessage(
          new FacesMessage(
              FacesMessage.SEVERITY_INFO, GlobalConstants.CLAIM_ADJ_DEC_DELETE_MESSAGE, null));

    } catch (HoopcException e) {
      addMessage(e);
    }
  }

  public boolean isDeleteRequestDisabled() {
    return isHasDecision() || !isHasRequest();
  }

  public boolean isDeleteDecisionDisabled() {
    return !isHasDecision();
  }

  public boolean isHasDecision() {
    try {
      return claimService.claimHasDecision(claimId);
    } catch (HoopcException e) {
      log.error("Error in EditClaim.isHasDecision", e);
      return false;
    }
  }

  public boolean isHasRequest() {
    try {
      return claimService.claimHasRequest(claimId);
    } catch (HoopcException e) {
      log.error("Error in EditClaim.isHasRequest", e);
      return false;
    }
  }

  public Long getPreviousClaim() {
    List<Long> searchResults = session.getLastSearchResult();
    if (searchResults != null) {
      int pos = searchResults.indexOf(claimId);
      if (pos > 0) {
        return searchResults.get(pos - 1);
      }
    }
    return null;
  }

  public Long getNextClaim() {
    List<Long> searchResults = session.getLastSearchResult();
    if (searchResults != null) {
      int pos = searchResults.indexOf(claimId);
      if (pos < (searchResults.size() - 1)) {
        return searchResults.get(pos + 1);
      }
    }
    return null;
  }

  public String previous() {
    Long prev = getPreviousClaim();
    if (prev != null) {
      try {
        FacesContext.getCurrentInstance().getExternalContext().redirect(getEditRedirectUrl(prev));
      } catch (IOException e) {
        log.error("Error in EditClaim.previous", e);
      }
    }
    return "";
  }

  public String next() {
    Long next = getNextClaim();
    if (next != null) {
      try {
        FacesContext.getCurrentInstance().getExternalContext().redirect(getEditRedirectUrl(next));
      } catch (IOException e) {
        log.error("Error in EditClaim.next", e);
      }
    }
    return "";
  }

  public Long getTotalClaims() {
    List<Long> searchResults = session.getLastSearchResult();
    if (searchResults != null) {
      return Long.valueOf(searchResults.size());
    }
    return null;
  }

  public Long getIndexClaims() {
    List<Long> searchResults = session.getLastSearchResult();
    if (searchResults != null) {
      return searchResults.indexOf(claimId) + 1L;
    }
    return null;
  }

  public Long getClaimId() {
    return claimId;
  }

  public void setClaimId(Long claimId) {
    this.claimId = claimId;
  }
}
