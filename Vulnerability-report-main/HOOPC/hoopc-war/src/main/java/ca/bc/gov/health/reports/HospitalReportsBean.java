/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ca.bc.gov.health.reports;

import ca.bc.gov.health.database.entity.Hospitals;
import jakarta.annotation.PostConstruct;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import org.primefaces.model.DualListModel;

/** @author trevor.schiavone */
@Named("HospitalReportsBean")
@ViewScoped
public class HospitalReportsBean extends ReportsBean implements Serializable {

  private DualListModel<Hospitals> selectedHospitals;
  private String hospitalReportOrgType = "HOSP";

  @PostConstruct
  @Override
  public void init() {
    super.init();
    viewModel.setResidencyType("NRES");
    viewModel.setClaimType("INPATIENT");
    viewModel.setClaimStatus("PROCESSED");
    viewModel.setReportOrgType("HOSP");
    List<Hospitals> hospitalsList = appBean.getHospitalsListBC();
    selectedHospitals = new DualListModel<>(hospitalsList, new ArrayList<Hospitals>());
  }

  /** Run report PDF. */
  @Override
  public void runReportPDF() {
    String contentType = "application/pdf";
    String contentDisposition = "inline; filename=\"HPC.pdf\"";
    viewModel.setReportFormat("PDF");

    if (selectedHospitals != null
        && selectedHospitals.getTarget() != null
        && !selectedHospitals.getTarget().isEmpty()) {
      viewModel.setHospital(hspConverter(selectedHospitals.getTarget()));
    }

    handleReport(contentType, contentDisposition);
  }

  /** Run report CSV. */
  @Override
  public void runReportCSV() {
    String contentType = "text/csv";
    String contentDisposition = "inline; filename=\"HPC.csv\"";
    viewModel.setReportFormat("CSV");

    if (selectedHospitals != null
        && selectedHospitals.getTarget() != null
        && !selectedHospitals.getTarget().isEmpty()) {
      viewModel.setHospital(hspConverter(selectedHospitals.getTarget()));
    }

    handleReport(contentType, contentDisposition);
  }

  private String hspConverter(List<Hospitals> hospitals) {
    StringBuilder hspVal = new StringBuilder();
    if (hospitals != null) {
      for (Hospitals h : hospitals) {
        if (!hspVal.toString().isEmpty()) hspVal.append(",");
        hspVal.append(h.getHospitalNumber());
      }
    }
    return hspVal.toString();
  }

  public DualListModel<Hospitals> getSelectedHospitals() {
    return selectedHospitals;
  }

  public void setSelectedHospitals(DualListModel<Hospitals> selectedHospitals) {
    this.selectedHospitals = selectedHospitals;
  }

  public String getHospitalReportOrgType() {
    return hospitalReportOrgType;
  }

  public void setHospitalReportOrgType(String hospitalReportOrgType) {
    this.hospitalReportOrgType = hospitalReportOrgType;
  }
}
