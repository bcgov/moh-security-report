package ca.bc.gov.health.beans.codes;

import ca.bc.gov.health.beans.BaseBean;
import ca.bc.gov.health.constants.ClaimDetailCodePurpose;
import ca.bc.gov.health.constants.ClaimDetailCodeType;
import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.database.ejb.ClaimDetailCodesFacadeLocal;
import ca.bc.gov.health.database.ejb.ServiceRatesFacadeLocal;
import ca.bc.gov.health.database.entity.ClaimDetailCodes;
import ca.bc.gov.health.database.entity.MainEntity;
import ca.bc.gov.health.database.entity.ServiceRates;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.service.HoopcAppService;
import ca.bc.gov.health.validation.ValidationError;
import ca.bc.gov.health.validation.codes.RangeValidator;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.commons.lang3.Range;
import org.primefaces.PrimeFaces;
import org.slf4j.LoggerFactory;

/** The Class ClaimDetailCodeBean. */
@ViewScoped
@Named("ClaimDetailCodeBean")
public class ClaimDetailCodeBean extends BaseBean implements Serializable {

  private static final long serialVersionUID = -3774761444772307569L;
  private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(ClaimDetailCodeBean.class);

  @Inject private transient RangeValidator validator;
  @EJB private ClaimDetailCodesFacadeLocal claimDetailCodesFacade;
  @EJB private ServiceRatesFacadeLocal serviceRatesFacade;
  @Inject private HoopcAppService appService;
  private List<ClaimDetailCodes> allCodes;
  private ClaimDetailCodes claimDetailCode = new ClaimDetailCodes();
  private ServiceRates serviceRate = new ServiceRates();
  private ClaimDetailCodeType codeType;
  private ClaimDetailCodePurpose codePurpose;
  private String createMsg;
  private String editMsg;
  private String deleteMsg;
  private String viewId =
      FacesContext.getCurrentInstance().getViewRoot().getViewId().replace("/codes/", "");
  //BCMOHAD-10489-29Mar22: Capturing the checkbox value.
  private boolean activeServiceCodes;

  /** Inits the. */
  @PostConstruct
  public void init() {
    //BCMOHAD-10489-29Mar22: Marking the checkbox default value.
    this.activeServiceCodes = false;
    if (viewId.equals("newbornProcedure.xhtml")) {
      codeType = ClaimDetailCodeType.NEWBORN;
      codePurpose = ClaimDetailCodePurpose.DIAGNOSTIC;
      createMsg = GlobalConstants.NEW_BORN_PROCEDURE_CREATE_MESSAGE;
      editMsg = GlobalConstants.NEW_BORN_PROCEDURE_EDIT_MESSAGE;
      deleteMsg = GlobalConstants.NEW_BORN_PROCEDURE_DELETE_MESSAGE;
    } else if (viewId.equals("serviceCode.xhtml")) {
      codeType = ClaimDetailCodeType.SERVICE;
      codePurpose = ClaimDetailCodePurpose.SERVICE;
      createMsg = GlobalConstants.SERVICE_CODE_CREATE_MESSAGE;
      editMsg = GlobalConstants.SERVICE_CODE_EDIT_MESSAGE;
      deleteMsg = GlobalConstants.SERVICE_CODE_DELETE_MESSAGE;
    }
    loadList();
  }

  /** Load list. */
  public void loadList() {
    try {
      Map<String, Object> criteria = new HashMap<>();
      criteria.put("codeType", codeType.toString());
      criteria.put("codePurpose", codePurpose.toString());
      allCodes =
          claimDetailCodesFacade.findByNamedQuery("ClaimDetailCodes.findByTypePurpose", criteria);
    } catch (HoopcException e) {
      addMessage(e, false);
    }
  }

  /** On row select. */
  public void onRowSelect() {
    List<ServiceRates> rateList = claimDetailCode.getServiceRatesList();
    rateList.sort(
        Comparator.comparing(
            ServiceRates::getEffectiveDate, Comparator.nullsLast(Comparator.reverseOrder())));
  }

  /** Clear code. */
  public void clearCode() {
    serviceRate = new ServiceRates();
    claimDetailCode = new ClaimDetailCodes();
  }

  /** Save code. */
  public void saveCode() {
    if (serviceRate.getEffectiveDate() != null) {
      claimDetailCode.getServiceRatesList().add(0, serviceRate);
      serviceRate.setDcdId(claimDetailCode);
    }

    List<ValidationError> validationErrors = validator.validate(addRanges());
    if (validationErrors.size() > 0) {
      if (serviceRate.getEffectiveDate() != null) {
        claimDetailCode.getServiceRatesList().remove(serviceRate);
      }
      addMessageValidationErrors(validationErrors, false);
      return;
    }

    try {
      claimDetailCode.setCodeType(codeType.toString());
      claimDetailCode.setCodePurpose(codePurpose.toString());
      if (claimDetailCode.getId() == null) {
        claimDetailCodesFacade.create(claimDetailCode);
        addInfoMessage(createMsg);
      } else {
        claimDetailCodesFacade.edit(claimDetailCode);
        addInfoMessage(editMsg);
      }
      appService.initDetailCodes();
      appService.initServiceCodes();
      clearCode();
      loadList();
    } catch (HoopcException ex) {
      LOG.error(formatMessage(ex));
      addMessage(ex);
    }

    PrimeFaces.current().ajax().update("codeForm");
  }

  private MainEntity addRanges() {
    if (claimDetailCode.getServiceRatesList() != null) {
      claimDetailCode.getRanges().clear();
      claimDetailCode
          .getServiceRatesList()
          .forEach(
              item -> {
                if (item.getEndDate() == null) {
                  claimDetailCode.getRanges().add(Range.is(item.getEffectiveDate()));
                } else {
                  claimDetailCode
                      .getRanges()
                      .add(Range.between(item.getEffectiveDate(), item.getEndDate()));
                }
              });
      return claimDetailCode;
    }
    return null;
  }

  /** Delete selenium test code. */
  /*
   * NEVER ACTUALLY USE THIS, IT'S JUST A TEMPORARY FIX TO DELETE THE CREATED CODE IN THE SELENIUM
   * TEST
   */
  public void deleteSeleniumTestCode() {
    Map<String, Object> criteria = new HashMap<>();
    criteria.put("codeValue", "0");
    criteria.put("codeType", codeType.toString());
    criteria.put("codePurpose", codePurpose.toString());

    try {
      ClaimDetailCodes newbornToDelete =
          claimDetailCodesFacade
              .findByNamedQuery("ClaimDetailCodes.findByCodeTypePurpose", criteria)
              .get(0);
      claimDetailCodesFacade.remove(newbornToDelete);
      appService.initDetailCodes();
      appService.initServiceCodes();
      loadList();
      addInfoMessage(deleteMsg);
    } catch (HoopcException ex) {
      Logger.getLogger(this.getClass().getName()).log(Level.SEVERE, null, ex);
      addMessage(ex);
    }
    PrimeFaces.current().ajax().update("codeForm");
  }

  public boolean isServiceCodeExpired(String endDate) {
     LocalDate expiredDate = null;
        if (endDate.isBlank()) {
            return false;
        } else {
           expiredDate = LocalDate.parse(endDate);
           return expiredDate.isBefore(LocalDate.now());
        }
  }
  
  /** BCMOHAD-10489-29Mar22:hides the expired code rates which are not active from the code table */
  /* 
   * @params endDate
   * @params activeServiceCodes
   * @returns styleclassname
   */
  public String hideExpiredCodes(boolean activeServiceCodes, String endDate) {
      if (activeServiceCodes) {
          if (isServiceCodeExpired(endDate)) {
              return "ui-helper-hidden";
          } else {
              return "ui-datatable-row";
          }
      } else {
          if (isServiceCodeExpired(endDate)) {
              return "ui-datatable-row userColors";
          } else {
              return "ui-datatable-row";
          }
      }
 }
  
  /** BCMOHAD-10489-30Mar22: Retrieving the newly added columns with most recent values */
  /* 
   * @params endDate
   * @params activeServiceCodes
   * @returns styleclassname
   */
  public String mostRecentRatesNDates(List<ServiceRates> ratesList, String fieldName)
  {
      ratesList.sort(
              Comparator.comparing(
                      ServiceRates::getEffectiveDate,
                      Comparator.nullsLast(Comparator.reverseOrder())));
      

      if (ratesList.size() > 0) {
          if (fieldName.equals("CURRENT RATE")) {
              return ratesList.get(0).getRateAmount().toString();
          } else if (fieldName.equals("EFFECTIVE DATE")) {
              return ratesList.get(0).getEffectiveDate().toString();
          }
          return (ratesList.get(0).getEndDate() != null ? ratesList.get(0).getEndDate().toString() : "");
      } 
          return "";
  }

  public RangeValidator getValidator() {
    return validator;
  }

  public void setValidator(RangeValidator validator) {
    this.validator = validator;
  }

  public ClaimDetailCodesFacadeLocal getClaimDetailCodesFacade() {
    return claimDetailCodesFacade;
  }

  public void setClaimDetailCodesFacade(ClaimDetailCodesFacadeLocal claimDetailCodesFacade) {
    this.claimDetailCodesFacade = claimDetailCodesFacade;
  }

  public ServiceRatesFacadeLocal getServiceRatesFacade() {
    return serviceRatesFacade;
  }

  public void setServiceRatesFacade(ServiceRatesFacadeLocal serviceRatesFacade) {
    this.serviceRatesFacade = serviceRatesFacade;
  }

  public List<ClaimDetailCodes> getAllCodes() {
    return allCodes;
  }

  public void setAllCodes(List<ClaimDetailCodes> allCodes) {
    this.allCodes = allCodes;
  }

  public ClaimDetailCodes getClaimDetailCode() {
    return claimDetailCode;
  }

  public void setClaimDetailCode(ClaimDetailCodes claimDetailCode) {
    this.claimDetailCode = claimDetailCode;
  }

  public ServiceRates getServiceRate() {
    return serviceRate;
  }

  public void setServiceRate(ServiceRates serviceRate) {
    this.serviceRate = serviceRate;
  }

  public ClaimDetailCodeType getCodeType() {
    return codeType;
  }

  public void setCodeType(ClaimDetailCodeType codeType) {
    this.codeType = codeType;
  }

  public static long getSerialversionuid() {
    return serialVersionUID;
  }

  public static org.slf4j.Logger getLog() {
    return LOG;
  }

  public ClaimDetailCodePurpose getCodePurpose() {
    return codePurpose;
  }

  public void setCodePurpose(ClaimDetailCodePurpose codePurpose) {
    this.codePurpose = codePurpose;
  }

  public String getViewId() {
    return viewId;
  }

  public void setViewId(String viewId) {
    this.viewId = viewId;
  }
  //BCMOHAD-10489-29Mar22: Getters and setters for active codes checkbox.
  public boolean isActiveServiceCodes() {
    return activeServiceCodes;
  }

  public void setActiveServiceCodes(boolean activeServiceCodes) {
    this.activeServiceCodes = activeServiceCodes;
  }
  
  
}
