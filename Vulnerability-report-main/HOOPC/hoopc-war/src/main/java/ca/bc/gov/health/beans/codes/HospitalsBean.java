/*
 * To change this license header, choose License Headers in Project Properties. To change this
 * template file, choose Tools | Templates and open the template in the editor.
 */
package ca.bc.gov.health.beans.codes;

import ca.bc.gov.health.beans.BaseBean;
import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.database.ejb.HealthAuthoritiesFacadeLocal;
import ca.bc.gov.health.database.ejb.HealthAuthoritiesFacade;
import ca.bc.gov.health.database.ejb.HospitalPerDiemRatesFacadeLocal;
import ca.bc.gov.health.database.ejb.HospitalsFacade;
import ca.bc.gov.health.database.ejb.ProvincesTerritoriesFacadeLocal;
import ca.bc.gov.health.database.entity.HealthAuthorities;
import ca.bc.gov.health.database.entity.HospitalPerDiemRates;
import ca.bc.gov.health.database.entity.Hospitals;
import ca.bc.gov.health.database.entity.MainEntity;
import ca.bc.gov.health.database.entity.ProvincesTerritories;
import ca.bc.gov.health.exception.HoopcException;
import ca.bc.gov.health.service.HoopcAppService;
import ca.bc.gov.health.validation.ValidationError;
import ca.bc.gov.health.validation.codes.RangeValidator;
import jakarta.annotation.PostConstruct;
import jakarta.ejb.EJB;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import java.io.Serializable;
import java.time.LocalDate;
import java.util.Comparator;
import java.util.List;
import java.util.Map;
import java.util.ListIterator;
import org.apache.commons.lang3.Range;
import org.apache.commons.lang3.StringUtils;
import org.primefaces.PrimeFaces;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** The Class HospitalsBean. */
@Named("HospitalsBean")
@ViewScoped
public class HospitalsBean extends BaseBean implements Serializable {

  private static final long serialVersionUID = -1546841591705669938L;
  private static final Logger log = LoggerFactory.getLogger(HospitalsBean.class);

  @Inject private HoopcAppService appService;
  @Inject private transient RangeValidator validator;
  @EJB private HospitalsFacade hospitalFacade;
  @EJB private HealthAuthoritiesFacadeLocal healthAuthoritiesFacade;
  @EJB private ProvincesTerritoriesFacadeLocal provincesTerritoriesFacade;
  @EJB private HospitalPerDiemRatesFacadeLocal hospitalPerDiemRatesFacade;
  
  

  private Map<String, String> params;
  private List<Hospitals> hospitalsResults;
  private List<HealthAuthorities> healthAuthoritiesResults;
  private Hospitals hospitalCode = new Hospitals();
  private HospitalPerDiemRates perDiem = new HospitalPerDiemRates();
  private ProvincesTerritories province = new ProvincesTerritories();
  //BCMOHAD-10489-29Mar22: Capturing the checkbox value.
  private boolean activeHospitalRates;

  /** Inits the. */
  @PostConstruct
  public void init() {
    //BCMOHAD-10489-29Mar22: Marking the checkbox default value.
    this.activeHospitalRates = false;
    params = FacesContext.getCurrentInstance().getExternalContext().getRequestParameterMap();
    if (params.get("id") != null && StringUtils.isNumeric(params.get("id"))) {
      hospitalCode.setId(Long.valueOf(params.get("id")));
      loadHospital();
      if (hospitalCode != null) {
        province = hospitalCode.getPteId();
        loadHospitalList();
        PrimeFaces.current().executeScript("PF('editDialog').show()");
      } else {
        log.error(
            "Error in HospitalsBean.init : " + GlobalConstants.HOSPITAL_NOT_EXIST_MESSAGE_ERROR);
        addMessage(
            FacesMessage.SEVERITY_ERROR, GlobalConstants.HOSPITAL_NOT_EXIST_MESSAGE_ERROR, false);
      }
    }
  }

  /** Load hospital list. */
  public void loadHospitalList() {
    try {
        //BCMOHAM-21684 Populate Health Authority column if province is BC colin.anderson@cgi.com 2/6/25 
      if (province.getProvinceCode().equals("BC"))
      {
          //A bad way to initialize the hospitalResults ArrayList but it gets the job done with practically zero overhead
          //TODO: fix this with a one-liner
          
          hospitalsResults = hospitalFacade.findByProvince(province.getProvinceCode());
          Hospitals theFirst = hospitalsResults.get(0);
          hospitalsResults.clear();
          hospitalsResults.add(theFirst); //Add the first guy back as a placeholder to make damn sure the ArrayList is initialized.    
          healthAuthoritiesResults = healthAuthoritiesFacade.findAll(); //Fortunately, we can call all the Health Authorities with all of the hospitals attached, very convenient
          
          //Now we loop over each health authority and find the hospitals attached
          
          for (ListIterator<HealthAuthorities> outer = healthAuthoritiesResults.listIterator(); outer.hasNext(); ) {
              
          //Outer is used for the HealthAuthorities POJO, Inner is used for the specific Hospital POJO 
          
        HealthAuthorities theHealthAuthority = outer.next(); //cast the iteration object into something we can work with
        
        String theHealthAuthorityString = theHealthAuthority.getName(); //What is the Health Authority name? 
        
        List <Hospitals> theHospitals = theHealthAuthority.getHospitalsList(); //Fortunately there is a setter/getter for this 
        
        for (ListIterator<Hospitals> inner = theHospitals.listIterator(); inner.hasNext(); ) {
            Hospitals theHospital = inner.next();
            if(theHospital.getProvince().equals("BC")) //Array may be contaminated by previous postbacks, so get rid of anything that is not BC
            {
            theHospital.setDataExchangeId(theHealthAuthorityString); //Update the Health Authority name into an unused attribute in the Hospital object
            hospitalsResults.add(theHospital); //push to the Hospital Results
            }
        }
        
    }
          
//Remember when we added that one fake entry at position zero in hospitalsResults as a cheap way to initialize the array? Now we have to fix it.
          
    hospitalsResults.remove(0); //and thats it, 
    String foo="";  
   }
      else
      {    
          //search by any other province   
          hospitalsResults = hospitalFacade.findByProvince(province.getProvinceCode());
          
          for (ListIterator<Hospitals> inner = hospitalsResults.listIterator(); inner.hasNext(); ) {
            Hospitals theHospital = inner.next();
            theHospital.setDataExchangeId("N/A"); //Set it to N/A because B.C. Health Authorities do not map to other provinces.
        }
          
          
      
      String foo="";
      }
      
      
    } catch (HoopcException e) {
      log.error(formatMessage(e));
      addMessage(e, false);
    }
  }

  /** Load hospital. */
  public void loadHospital() {
    try {
      perDiem = new HospitalPerDiemRates();
      hospitalCode = hospitalFacade.find(hospitalCode.getId());
      if (hospitalCode != null && hospitalCode.getHaId() == null) {
        hospitalCode.setHaId(new HealthAuthorities());
      }
      if (hospitalCode != null && !hospitalCode.getHospitalPerDiemRatesList().isEmpty()) {
        hospitalCode
            .getHospitalPerDiemRatesList()
            .sort(
                Comparator.comparing(
                    HospitalPerDiemRates::getEffectiveDate,
                    Comparator.nullsLast(Comparator.reverseOrder())));
      }
    } catch (HoopcException e) {
      log.error(formatMessage(e));
      addMessage(e, false);
    }
  }

  /** Clear hospital. */
  public void clearHospital() {
    hospitalCode = new Hospitals();
    perDiem = new HospitalPerDiemRates();
  }

  /** Save hospital. */
  public void saveHospital() {
    if (perDiem.getEffectiveDate() != null) {
      perDiem.setHspId(hospitalCode);
      hospitalCode.getHospitalPerDiemRatesList().add(perDiem);
    }

    List<ValidationError> validationErrors = validator.validate(addRanges());
    if (validationErrors.size() > 0) {
      if (perDiem.getEffectiveDate() != null) {
        hospitalCode.getHospitalPerDiemRatesList().remove(perDiem);
      }
      addMessageValidationErrors(validationErrors, false);
      return;
    }

    try {
      addOrEditCode();
      appService.initHospitals();
      loadHospitalList();
      PrimeFaces.current().ajax().update("codeForm");
      PrimeFaces.current().ajax().update("listForm");
    } catch (HoopcException e) {
      log.error(formatMessage(e));
      addMessage(e, false);
    }
  }

  private void addOrEditCode() throws HoopcException {
    if (StringUtils.isEmpty(hospitalCode.getHaId().getHaNumber())) {
      hospitalCode.setHaId(null);
    } else {
      hospitalCode.setHaId(
          healthAuthoritiesFacade.findByNumber(hospitalCode.getHaId().getHaNumber()));
    }

    hospitalCode.setName(hospitalCode.getName().toUpperCase());
    if (hospitalCode.getId() == null) {
      if (!StringUtils.isEmpty(hospitalCode.getProvince())) {
        hospitalCode.setPteId(
            provincesTerritoriesFacade.findByProvinceCode(hospitalCode.getProvince()));
      }
      hospitalCode = hospitalFacade.create(hospitalCode);
      addMessage(FacesMessage.SEVERITY_INFO, GlobalConstants.HOSPITAL_CREATE_MESSAGE, false);
    } else {
      hospitalFacade.edit(hospitalCode);
      addMessage(FacesMessage.SEVERITY_INFO, GlobalConstants.HOSPITAL_EDIT_MESSAGE, false);
    }
  }

  // DO NOT DISPLAY ANY DELETE BUTTON IN THE HOSPITALS UI NEVER
  /** Removes the hospital. */
  // ONLY FOR SELENIUM TESTS
  public void removeHospital() {
    try {
      if (hospitalCode.getHaId() != null && hospitalCode.getHaId().getId() == null) {
        hospitalCode.setHaId(null);
      }
      hospitalFacade.remove(hospitalCode);
      appService.initHospitals();
      loadHospitalList();
      addMessage(FacesMessage.SEVERITY_INFO, GlobalConstants.HOSPITAL_DELETE_MESSAGE, false);
      PrimeFaces.current().ajax().update("codeForm");
      PrimeFaces.current().ajax().update("listForm");
    } catch (HoopcException e) {
      log.error(formatMessage(e));
      addMessage(e, false);
    }
  }

  private MainEntity addRanges() {
    if (hospitalCode.getHospitalPerDiemRatesList() != null) {
      hospitalCode.getRanges().clear();
      hospitalCode
          .getHospitalPerDiemRatesList()
          .forEach(
              item -> {
                if (item.getEndDate() == null) {
                  hospitalCode.getRanges().add(Range.is(item.getEffectiveDate()));
                } else {
                  hospitalCode
                      .getRanges()
                      .add(Range.between(item.getEffectiveDate(), item.getEndDate()));
                }
              });
      return hospitalCode;
    }
    return null;
  }
  /** BCMOHAD-10489-30Mar22: Retrieving the newly added columns with most recent values */
  /* 
   * @params endDate
   * @params activeServiceCodes
   * @returns styleclassname
   */
  public String mostRecentRatesNDates(List<HospitalPerDiemRates> perDiemRatesList, String fieldName)
  {
      perDiemRatesList.sort(
              Comparator.comparing(
                      HospitalPerDiemRates::getEffectiveDate,
                      Comparator.nullsLast(Comparator.reverseOrder())));
      
      if (perDiemRatesList.size() > 0) {
          if (fieldName.equals("CURRENT RATE")) {
              return perDiemRatesList.get(0).getPerDiemRate().toString();
          } else if (fieldName.equals("EFECTIVE DATE")) {
              return perDiemRatesList.get(0).getEffectiveDate().toString();
          }
          return (perDiemRatesList.get(0).getEndDate() != null ? perDiemRatesList.get(0).getEndDate().toString() : "");
      } 
          return "";
  }
  
  public boolean isHospitalRateExpired(String endDate) {
        LocalDate expiredDate = null;
        if (endDate.isBlank()) {
            return false;
        } else {
           expiredDate = LocalDate.parse(endDate);
           return expiredDate.isBefore(LocalDate.now());
        }
  }

    
  /** BCMOHAD-10489-29Mar22:hides the expired hospital rates which are not active from the code table */
  /* 
   * @params endDate
   * @params activeServiceCodes
   * @returns styleclassname
   */
  public String hideExpiredHospitalRate(boolean activeHospitalRates, String endDate)  {
    
      if (activeHospitalRates) {
          if (isHospitalRateExpired(endDate)) {
              return "ui-helper-hidden";
          } else {
              return "ui-datatable-row";
          }
      } else {
          if (isHospitalRateExpired(endDate)) {
              return "ui-datatable-row userColors";
          } else {
              return "ui-datatable-row";
          }
      }
    }

  public Map<String, String> getParams() {
    return params;
  }

  public void setParams(Map<String, String> params) {
    this.params = params;
  }

  public HoopcAppService getAppService() {
    return appService;
  }

  public void setAppService(HoopcAppService appService) {
    this.appService = appService;
  }

  public RangeValidator getValidator() {
    return validator;
  }

  public void setValidator(RangeValidator validator) {
    this.validator = validator;
  }

  public HospitalsFacade getHospitalFacade() {
    return hospitalFacade;
  }

  public void setHospitalFacade(HospitalsFacade hospitalFacade) {
    this.hospitalFacade = hospitalFacade;
  }

  public HealthAuthoritiesFacadeLocal getHealthAuthoritiesFacade() {
    return healthAuthoritiesFacade;
  }

  public void setHealthAuthoritiesFacade(HealthAuthoritiesFacadeLocal healthAuthoritiesFacade) {
    this.healthAuthoritiesFacade = healthAuthoritiesFacade;
  }

  public ProvincesTerritoriesFacadeLocal getProvincesTerritoriesFacade() {
    return provincesTerritoriesFacade;
  }

  public void setProvincesTerritoriesFacade(
      ProvincesTerritoriesFacadeLocal provincesTerritoriesFacade) {
    this.provincesTerritoriesFacade = provincesTerritoriesFacade;
  }

  public List<Hospitals> getHospitalsResults() {
    return hospitalsResults;
  }

  public void setHospitalsResults(List<Hospitals> hospitalsResults) {
    this.hospitalsResults = hospitalsResults;
  }

  public Hospitals getHospitalCode() {
    return hospitalCode;
  }

  public void setHospitalCode(Hospitals hospitalCode) {
    this.hospitalCode = hospitalCode;
  }

  public HospitalPerDiemRates getPerDiem() {
    return perDiem;
  }

  public void setPerDiem(HospitalPerDiemRates perDiem) {
    this.perDiem = perDiem;
  }

  public ProvincesTerritories getProvince() {
    return province;
  }

  public void setProvince(ProvincesTerritories province) {
    this.province = province;
  }
  //BCMOHAD-10489-29Mar22: Getters and setters for active hospitals checkbox.
  public boolean isActiveHospitalRates() {
    return activeHospitalRates;
  }

  public void setActiveHospitalRates(boolean activeHospitalRates) {
    this.activeHospitalRates = activeHospitalRates;
  }
  
  
}
