package ca.bc.gov.health.monthend;

import ca.bc.gov.health.constants.GlobalConstants;
import jakarta.annotation.PostConstruct;
import jakarta.faces.context.FacesContext;
import jakarta.faces.view.ViewScoped;
import jakarta.inject.Named;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.Serializable;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;

@Named("ReportResMonthEndBean")
@ViewScoped
public class ReportResMonthEndBean extends ReportMonthEndBaseBean implements Serializable {

  private static final long serialVersionUID = 2291236572538970324L;

  @PostConstruct
  public void init() {
    refreshMonthEndStatuses(GlobalConstants.RES_RESIDENCY_TYPE);
  }

  public StreamedContent generateBalanceReport() {
    byte[] file = meReportService.generateBalanceReport(super.selectedProvinces);
    InputStream is = new ByteArrayInputStream(file);
    return DefaultStreamedContent.builder().contentType("application/pdf").name("balance_report.pdf").stream(() -> is).build();
  }

  public void setApproval() {
    try {
      monthEndReports =
          meReportService.retrieveReports(
              super.selectedProvinces, GlobalConstants.RES_RESIDENCY_TYPE, "HOOPCR0004");
      if (monthEndReports != null) {
        changeMonthEndStatus("APPROVED", GlobalConstants.RES_RESIDENCY_TYPE);
      } else {
        FacesContext.getCurrentInstance().validationFailed();
        addErrorMessage(REPORT_NOT_FOUND);
      }
    } catch (Exception e) {
      FacesContext.getCurrentInstance().validationFailed();
      addErrorMessage(e.getMessage());
    }
  }

  public void distributeMonthendReports() {
    try {
      monthEndReports =
          meReportService.retrieveReports(
              super.selectedProvinces,
              GlobalConstants.RES_RESIDENCY_TYPE,
              "HOOPCR0002,HOOPCR0003A,HOOPCR0003D,HOOPCR0016,HOOPCR0017");
      if (monthEndReports != null) {
        changeMonthEndStatus("DISTPENDNG", GlobalConstants.RES_RESIDENCY_TYPE);
      } else {
        FacesContext.getCurrentInstance().validationFailed();
        addErrorMessage(REPORT_NOT_FOUND);
      }
    } catch (Exception e) {
      FacesContext.getCurrentInstance().validationFailed();
      addErrorMessage(e.getMessage());
    }
  }
}
