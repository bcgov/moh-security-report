/*
 * To change this license header, choose License Headers in Project Properties. To change this
 * template file, choose Tools | Templates and open the template in the editor.
 */
package ca.bc.gov.health.validators;

import ca.bc.gov.health.constants.GlobalConstants;
import ca.bc.gov.health.database.ejb.PeriodEndInvoicesFacadeLocal;
import ca.bc.gov.health.exception.HoopcException;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.RequestScoped;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.component.UIComponent;
import jakarta.faces.component.UISelectOne;
import jakarta.faces.context.FacesContext;
import jakarta.faces.validator.ValidatorException;
import jakarta.inject.Named;
import java.io.Serializable;
import java.util.HashMap;
import java.util.Map;

/** The Class InvoicesReceivedValidator. */
@Named("InvoicesReceivedValidator")
@RequestScoped
public class InvoicesReceivedValidator extends BaseValidator implements Serializable {

  @EJB private PeriodEndInvoicesFacadeLocal periodEndInvoicesFacade;
  private static final long serialVersionUID = -4139597165649875306L;

  /**
   * Validate duplicate.
   *
   * @param fc the fc
   * @param uic the uic
   * @param value the value
   * @throws ValidatorException the validator exception
   */
  public void validateDuplicate(FacesContext fc, UIComponent uic, Object value)
      throws ValidatorException {

    UISelectOne uiProvince =
        (UISelectOne)
            FacesContext.getCurrentInstance().getViewRoot().findComponent("listForm:province");

    Map<String, Object> criteria = new HashMap<>();
    criteria.put("provinceCode", uiProvince.getValue());
    criteria.put("invoiceNumber", value);

    try {
      if (!periodEndInvoicesFacade
          .findByNamedQuery("PeriodEndInvoices.findByNumberAndProvince", criteria)
          .isEmpty()) {
        throw new ValidatorException(
            new FacesMessage(
                FacesMessage.SEVERITY_ERROR, GlobalConstants.INVOICE_DUPLICATE_MESSAGE, ""));
      }
    } catch (HoopcException ex) {
      logError(ex, fc);
    }
  }
}
