package ca.bc.gov.health.helper;

import ca.bc.gov.health.database.entity.ClaimTypes;
import ca.bc.gov.health.database.entity.InvoiceDetails;
import ca.bc.gov.health.database.entity.PeriodEndInvoices;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class InvoiceHelperTest {

  private PeriodEndInvoices generateInvoice(
      Long id,
      BigDecimal inpatAmount,
      BigDecimal inpatReduction,
      BigDecimal outpatAmount,
      BigDecimal outpatReduction) {
    PeriodEndInvoices invoice = new PeriodEndInvoices();

    ClaimTypes ctsId1 = new ClaimTypes();
    ctsId1.setClaimType("INPATIENT");
    InvoiceDetails detail1 = new InvoiceDetails();
    detail1.setCtsId(ctsId1);
    detail1.setInvoiceQuantity(new BigInteger("1"));
    detail1.setInvoiceAmount(inpatAmount);
    detail1.setReductionAmount(inpatReduction);
    invoice.getInvoiceDetailsList().add(detail1);

    ClaimTypes ctsId2 = new ClaimTypes();
    ctsId2.setClaimType("OUTPATIENT");
    InvoiceDetails detail2 = new InvoiceDetails();
    detail2.setCtsId(ctsId2);
    detail2.setInvoiceQuantity(new BigInteger("1"));
    detail2.setInvoiceAmount(outpatAmount);
    detail2.setReductionAmount(outpatReduction);
    invoice.getInvoiceDetailsList().add(detail2);

    if (id != null) invoice.setId(Long.valueOf(id));
    return invoice;
  }

  @Test
  public void formulateInvoiceTypeTest() {
    PeriodEndInvoices invoice =
        generateInvoice(
            Long.valueOf(1),
            new BigDecimal("3"),
            new BigDecimal("1"),
            new BigDecimal("4"),
            new BigDecimal("1"));

    String result = InvoiceHelper.formulateInvoiceType(invoice.getInvoiceDetailsList());
    Assertions.assertEquals("INPATIENT/OUTPATIENT", result);
  }

  @Test
  public void calculateTotalAmountsTest() { // done
    PeriodEndInvoices invoice =
        generateInvoice(
            Long.valueOf(1),
            new BigDecimal("3"),
            new BigDecimal("1"),
            new BigDecimal("4"),
            new BigDecimal("1"));
    invoice.setInvoiceDetailsList(invoice.getInvoiceDetailsList());

    // Calculate totals
    Map<String, BigDecimal> result = InvoiceHelper.calculateTotalAmounts(invoice);
    Assertions.assertTrue(new BigDecimal("2").setScale(2).compareTo(result.get("inpatTotal")) == 0);
    Assertions.assertTrue(
        new BigDecimal("3").setScale(2).compareTo(result.get("outpatTotal")) == 0);
    Assertions.assertTrue(
        new BigDecimal("5").setScale(2).compareTo(result.get("invoiceTotal")) == 0);

    // Insure no error if no invoice detail
    invoice.setInvoiceDetailsList(null);
    result = InvoiceHelper.calculateTotalAmounts(invoice);
    Assertions.assertTrue(new BigDecimal("0").setScale(2).compareTo(result.get("inpatTotal")) == 0);
    Assertions.assertTrue(
        new BigDecimal("0").setScale(2).compareTo(result.get("outpatTotal")) == 0);
    Assertions.assertTrue(
        new BigDecimal("0").setScale(2).compareTo(result.get("invoiceTotal")) == 0);

    // Insure no error if no invoice
    invoice = null;
    result = InvoiceHelper.calculateTotalAmounts(invoice);
    Assertions.assertTrue(new BigDecimal("0").setScale(2).compareTo(result.get("inpatTotal")) == 0);
    Assertions.assertTrue(
        new BigDecimal("0").setScale(2).compareTo(result.get("outpatTotal")) == 0);
    Assertions.assertTrue(
        new BigDecimal("0").setScale(2).compareTo(result.get("invoiceTotal")) == 0);
  }

  @Test
  public void formatDateTest() {
    String result = InvoiceHelper.formatDate("MMMM dd, yyyy", LocalDate.of(2019, 01, 01));
    Assertions.assertEquals("January 01, 2019", result);
  }

  @Test
  public void calculateProvinceInvoiceTotalTest() { // done
    List<PeriodEndInvoices> invoiceList = new ArrayList<>();
    invoiceList.add(
        generateInvoice(
            Long.valueOf(1),
            new BigDecimal("3"),
            new BigDecimal("1"),
            new BigDecimal("4"),
            new BigDecimal("1")));
    invoiceList.add(
        generateInvoice(
            Long.valueOf(1),
            new BigDecimal("3"),
            new BigDecimal("1"),
            new BigDecimal("4"),
            new BigDecimal("1")));

    BigDecimal provinceTotal = InvoiceHelper.calculateProvinceInvoiceTotal(invoiceList);
    Assertions.assertTrue(new BigDecimal("10").setScale(2).compareTo(provinceTotal) == 0);
  }

  @Test
  public void isNegativeProvinceInvoiceTotal_WithoutErrorTest() {
    List<PeriodEndInvoices> invoiceList = null;
    PeriodEndInvoices invoice = null;
    Assertions.assertFalse(InvoiceHelper.isNegativeProvinceInvoiceTotal(invoiceList, invoice));
  }

  @Test
  public void isNegativeProvinceInvoiceTotal_SameIdTest() {
    List<PeriodEndInvoices> invoiceList = new ArrayList<>();
    invoiceList.add(
        generateInvoice(
            Long.valueOf(1),
            new BigDecimal("100"),
            new BigDecimal("200"),
            new BigDecimal("50"),
            new BigDecimal("100"))); // total: -150
    PeriodEndInvoices invoice =
        generateInvoice(
            Long.valueOf(1),
            new BigDecimal("100"),
            new BigDecimal("150"),
            new BigDecimal("50"),
            new BigDecimal("100")); // total: -100
    Assertions.assertFalse(InvoiceHelper.isNegativeProvinceInvoiceTotal(invoiceList, invoice));
  }

  @Test
  public void isNegativeProvinceInvoiceTotalTest() {
    List<PeriodEndInvoices> invoiceList = new ArrayList<>();
    invoiceList.add(
        generateInvoice(
            Long.valueOf(1),
            new BigDecimal("100"),
            new BigDecimal("200"),
            new BigDecimal("50"),
            new BigDecimal("100"))); // total: -150
    PeriodEndInvoices invoice =
        generateInvoice(
            null,
            new BigDecimal("100"),
            new BigDecimal("150"),
            new BigDecimal("50"),
            new BigDecimal("100")); // total: -100

    Assertions.assertTrue(InvoiceHelper.isNegativeProvinceInvoiceTotal(invoiceList, invoice));
  }

  @Test
  public void isNotNegativeProvinceInvoiceTotalTest() {
    List<PeriodEndInvoices> invoiceList = new ArrayList<>();
    invoiceList.add(
        generateInvoice(
            Long.valueOf(1),
            new BigDecimal("100"),
            new BigDecimal("200"),
            new BigDecimal("50"),
            new BigDecimal("100"))); // total: -150
    PeriodEndInvoices invoice =
        generateInvoice(
            null,
            new BigDecimal("200"),
            new BigDecimal("50"),
            new BigDecimal("100"),
            new BigDecimal("50")); // total: +200

    Assertions.assertFalse(InvoiceHelper.isNegativeProvinceInvoiceTotal(invoiceList, invoice));
  }

  @Test
  public void isTotalDifferentWithCalculatedTotalTest() {
    PeriodEndInvoices invoice =
        generateInvoice(
            Long.valueOf(1),
            new BigDecimal("250"),
            new BigDecimal("150"),
            new BigDecimal("100"),
            new BigDecimal("50"));
    BigDecimal invoiceTotal = new BigDecimal("200");
    Assertions.assertTrue(InvoiceHelper.isTotalDifferentWithCalculatedTotal(invoice, invoiceTotal));
  }

  @Test
  public void isTotalEqualsWithCalculatedTotalTest() {
    PeriodEndInvoices invoice =
        generateInvoice(
            Long.valueOf(1),
            new BigDecimal("250"),
            new BigDecimal("150"),
            new BigDecimal("100"),
            new BigDecimal("50"));
    BigDecimal invoiceTotal = new BigDecimal("150");
    Assertions.assertFalse(
        InvoiceHelper.isTotalDifferentWithCalculatedTotal(invoice, invoiceTotal));
  }
}
