/**
 * ****************************************************************************** Licensed Materials
 * - Property of IBM * Copyright IBM Canada Ltd 2005 All Rights Reserved * Created on Jan 10, 2005 *
 * ****************************************************************************** Please do not
 * makes any changes to this file without first * updating the revision history below, under
 * description * please include Harvest Change Request or PSO Tools CR that * caused the change. *
 * ****************************************************************************** Revision History:
 * * * Date Name Description * ---------- ----------------
 * ----------------------------------------------* 01-10-2005 David Bartlett Initial Specs
 * ******************************************************************************
 */
package moh.hpc.month.end;

import com.ibm.network.sftp.Sftp;
import jakarta.annotation.PostConstruct;
import jakarta.annotation.Resource;
import jakarta.ejb.Lock;
import jakarta.ejb.LockType;
import jakarta.ejb.ScheduleExpression;
import jakarta.ejb.Singleton;
import jakarta.ejb.Startup;
import jakarta.ejb.Timeout;
import jakarta.ejb.Timer;
import jakarta.ejb.TimerService;
import jakarta.faces.application.FacesMessage;
import jakarta.faces.context.FacesContext;
import jakarta.inject.Inject;
import jakarta.inject.Named;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.ServerSocket;
import java.util.Properties;
import moh.hpc.month.end.constants.PropertyFileKeys;
import moh.hpc.month.end.exceptions.ProcessException;
import moh.hpc.month.end.handlers.OpsHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Startup
@Singleton
@Named
@Lock(LockType.WRITE)
public class Runner {

  @Inject private OpsHandler ops;

  @PersistenceContext(unitName = "hoopc-monthend_pu")
  private EntityManager em;

  @Resource(name = "java:app/hpc/monthend_properties")
  private Properties applicationProperties;

  @Resource private TimerService timerService;

  private String runMonthEnd;
  private String monthEndPath;

  private static Logger logger = LoggerFactory.getLogger("Runner");
  private static ServerSocket lock = null;

  @PostConstruct
  public void init() {
    monthEndPath = (String) getApplicationProperties().get("monthEndPropsPath");
    runMonthEnd = (String) getApplicationProperties().get("runMonthEnd");

    // We only want the timer to be created on one instance to avoid filesystem conflicts
    if (runMonthEnd.equalsIgnoreCase("true")) {
      //Adding check to prevent multiple MonthEnd run schaduling.
      for (Timer t : timerService.getAllTimers())
        { t.cancel(); }
      
      timerService.createCalendarTimer(createTimer());
    } else {
      logger.info("Month end is not configured to run on this instance");
    }
  }

  private ScheduleExpression createTimer() {
    ScheduleExpression scheduleExpression = new ScheduleExpression();
    scheduleExpression.hour("23");
    return scheduleExpression;
  }

  /* This method runs based on the schedule set during the init method */
  @Timeout
  public void runIt() {
    main(new String[] {monthEndPath});
  }

  public void trySftp() {
    String hostname = "hnftp-dev.hlth.gov.bc.ca";
    String username = "hnfile";
    String privateKeyPath = "/Users/Firstname.Lastname/.ssh/id_ecdsa";
    String knownHostsFile = "/Users/Firstname.Lastname/.ssh/known_hosts";
    Sftp sftp = SFTPHelper.connectUsingKeys(hostname, username, privateKeyPath, knownHostsFile);
    String message = "Connection successful to the SFTP.";
    FacesMessage.Severity severity = FacesMessage.SEVERITY_INFO;
    try {
      if (sftp == null || !sftp.isConnected()) {
        severity = FacesMessage.SEVERITY_ERROR;
        message = "Could not connect to SFTP Server";
      }
    } catch (Exception ex) {
      severity = FacesMessage.SEVERITY_ERROR;
      message = "Error in trySftp method : " + ex.getMessage();
      logger.error("Error in trySftp method : " + ex.getMessage());
    } finally {
      FacesContext.getCurrentInstance().getExternalContext().getFlash().setKeepMessages(true);
      FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(severity, message, null));
      if (sftp != null && sftp.isConnected()) {
        sftp.disconnect();
      }
    }
  }

  public void main(String[] args) {

    if (args.length >= 1) {
      Properties prp = new Properties();
      try {
        InputStream inputStream;
        logger.info("Loading monthEnd.props from " + monthEndPath);
        try {
          // Loads file running from JUnit.
          inputStream = new java.io.FileInputStream(args[0]);
        } catch (FileNotFoundException fileNotFoundException) {
          // Loads file running inside Payara.
          inputStream = Runner.class.getResourceAsStream(args[0]);
          if (inputStream == null) {
            throw new FileNotFoundException("getResourceAsStream failed too");
          }
        }
        prp.load(inputStream);
        prp.setProperty(PropertyFileKeys.PRP_PROPS_FILENAME, args[0]);
        String strPort = prp.getProperty(PropertyFileKeys.PRP_LOCK_PORT);
        lock = createLock(strPort, null);

        if (lock != null) { // create logger and process
          createLogger(args[0]); // we know this file exists as we already opened it
          System.out.println("Month End Process started.....");
          logger.info(" ");
          logger.info("Month End Process started.....");
          logger.info("------------------------------");
          process(prp);
        } else {
          System.err.println("Unable to establish primary lock port.");
          System.err.println("Most likely this is caused by the Month End process already running");
          System.err.println("No log file has been created or modified");
        }
      } catch (IOException e) {
        e.printStackTrace();
      }
    } else {
      System.out.println("Usage: Runner properties.file");
    }
  }

  /**
   * Creates the lock port that prevents multiple versions of the application from running.
   *
   * @param lockPort Port number to be utilized
   * @param myLogger log file to send messages to
   */
  public static ServerSocket createLock(String lockPort, Logger myLogger) {
    try {
      // TODO DHSARPE: Remove this method and all calls to it.
      System.out.println(
          String.format(
              "Attempted to lock port '%s', but Month End is now a Java EE Scheduled Singleton and doesn't need to lock ports.",
              lockPort));
      return new ServerSocket();
    } catch (IOException ex) {
      throw new IllegalStateException(ex);
    }
  }

  /**
   * Starts up the month end.
   *
   * @param prp Properties file to send to the month end
   */
  private void process(Properties prp) {
    try {
      ops.setPrp(prp);
      ops.initialize();
      ops.execute();
    } catch (ProcessException e) {
      logger.error("Error creating Ops Handler...shutting down: ", e);
    }
  }

  private static void createLogger(String loggingProperties) {
    logger.debug(
        String.format("Logging properties are no longer read from '%s'.", loggingProperties));
  }

  /**
   * Note that the returned EntityManager is not thread-safe (nor is any EntityManager). It is safe
   * to use the returned EntityManager within the scope of Month End because Month End is run by a
   * write-locked container-managed singleton.
   *
   * @return the Month End EntityManager.
   */
  public EntityManager getEm() {
    return em;
  }

  public Properties getApplicationProperties() {
    return applicationProperties;
  }

  public void setApplicationProperties(Properties applicationProperties) {
    this.applicationProperties = applicationProperties;
  }
}
