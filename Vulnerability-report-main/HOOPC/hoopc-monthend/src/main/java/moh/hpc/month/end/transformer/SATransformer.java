package moh.hpc.month.end.transformer;

import ca.bc.gov.health.database.entity.SaSubmissionDetails;
import ca.bc.gov.health.database.entity.SaSubmissions;
import ca.bc.gov.health.exception.HoopcException;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import moh.hoopc.staging.SADetailRecord;
import moh.hoopc.staging.SAHeaderRecord;
import moh.hpc.month.end.constants.ApplicationConstants;
import moh.hpc.month.end.constants.batch.imprt.DtlCmn;
import moh.hpc.month.end.constants.batch.imprt.DtlInp;
import moh.hpc.month.end.constants.batch.imprt.DtlOutp;
import moh.hpc.month.end.constants.batch.imprt.Hdr;
import moh.hpc.month.end.exceptions.ProcessException;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SATransformer {

  private SATransformer() {
    // Utility class
  }

  private static Logger logger = LoggerFactory.getLogger(SATransformer.class);

  public static SaSubmissions transform(SAHeaderRecord headerRec) {
    SaSubmissions sa = new SaSubmissions();

    return sa;
  }

  public static SaSubmissionDetails transform(SADetailRecord detailRec) {
    SaSubmissionDetails saDetail = new SaSubmissionDetails();

    return saDetail;
  }

  public static SaSubmissions createHeaderRecord(
      String province, String inputLine, int curLine, String name) throws HoopcException {
    SaSubmissions record = new SaSubmissions();
    String hdrCode = ApplicationConstants.IMPORT_FILE_HDR_CODE;

    try {

      if ((inputLine.substring(Hdr.ColStrt_01, Hdr.ColEnd_01 + 1)).equalsIgnoreCase(hdrCode)) {

        record.setRecordType(
            convertToString(
                (inputLine.substring(Hdr.ColStrt_01, Hdr.ColEnd_01 + 1).trim().toUpperCase())));
        record.setTreatingProvince(
            convertToString(
                (inputLine.substring(Hdr.ColStrt_02, Hdr.ColEnd_02 + 1).trim().toUpperCase())));
        record.setReceivingProvince(
            convertToString((inputLine.substring(Hdr.ColStrt_03, Hdr.ColEnd_03 + 1).trim())));
        record.setBillingPeriod(
            convertToString((inputLine.substring(Hdr.ColStrt_04, Hdr.ColEnd_04 + 1).trim())));
        record.setTotalNumberDetails(
            convertToString((inputLine.substring(Hdr.ColStrt_05, Hdr.ColEnd_05 + 1).trim())));
        record.setOrigTotalNumberDetails(
            convertToString((inputLine.substring(Hdr.ColStrt_05, Hdr.ColEnd_05 + 1).trim())));
        record.setTotalAmount(
            convertToString(
                inputLine.substring(Hdr.ColStrt_06, Hdr.ColEnd_06 + 1).trim().toUpperCase()));
        record.setVersionIdentifier(
            convertToString((inputLine.substring(Hdr.ColStrt_07, Hdr.ColEnd_07 + 1).trim())));
        record.setDateSubmitted(
            convertToString(inputLine.substring(Hdr.ColStrt_08, Hdr.ColEnd_08 + 1).trim()));
        record.setFileName(name);

        record.setValidFlag("Y");
        record.setApproveFlag("N");
        record.setRejectFlag("N");
        record.setResetFlag("N");
      }

      logger.debug("Calling createHeaderRecord() ended.");

    } catch (Exception e) {
      logger.error("Problem occurred creating inpatient claim record." + e);
      throw new HoopcException(e);
    }
    logger.debug("Calling createSADetailRecord() ended.");
    return record;
  }

  /**
   * Given a input string, breaks it up into the components required for the staging area record
   *
   * @param inputLine Inpatient Detail Record
   * @return SARecord claim oject
   * @throws ProcessException
   */
  public static SaSubmissionDetails createSAInpatientRecord(
      String prov, String inputLine, int lineCnt, String fname, int subId)
      throws ProcessException, IOException {
    logger.debug("Calling createSADetailRecord() started.");
    String tmpDate = null;
    String year = null;
    String month = null;
    String day = null;
    SaSubmissionDetails record = new SaSubmissionDetails();
    try {

      record.setId(new BigDecimal(subId));

      // ************
      // * Record Type
      // ************
      record.setPatientBatch(
          convertToString(
              (inputLine.substring(DtlCmn.ColStrt_01, DtlCmn.ColEnd_01 + 1)).trim().toUpperCase()));

      // ************
      // * Batch Type
      // ************
      record.setRecordType(
          convertToString(
              (inputLine.substring(DtlCmn.ColStrt_02, DtlCmn.ColEnd_02 + 1)).trim().toUpperCase()));

      // ***********************
      // * Insurance Expiry Date
      // ***********************
      record.setCardExpiryDate(
          convertToString((inputLine.substring(DtlCmn.ColStrt_06, DtlCmn.ColEnd_06 + 1)).trim()));

      // ************
      // * Birth Date
      // ************
      record.setBirthDate(
          convertToString((inputLine.substring(DtlInp.ColStrt_14, DtlInp.ColEnd_14 + 1)).trim()));

      // ****************************
      // * High Cost Procedure Date 1
      // ****************************
      record.setHighCostProcedureDate1(
          convertToString((inputLine.substring(DtlInp.ColStrt_23, DtlInp.ColEnd_23 + 1)).trim()));

      // ****************************
      // * High Cost Procedure Date 2
      // ****************************
      record.setHighCostProcedureDate2(
          convertToString((inputLine.substring(DtlInp.ColStrt_25, DtlInp.ColEnd_25 + 1)).trim()));

      // ****************************
      // * High Cost Procedure Date 3
      // ****************************
      record.setHighCostProcedureDate3(
          convertToString((inputLine.substring(DtlInp.ColStrt_27, DtlInp.ColEnd_27 + 1)).trim()));

      // ****************
      // * Admission Date
      // ****************
      record.setAdmissionDate(
          convertToString((inputLine.substring(DtlInp.ColStrt_28, DtlInp.ColEnd_28 + 1)).trim()));

      // ****************
      // * Discharge Date
      // ****************
      record.setDischargeDate(
          convertToString((inputLine.substring(DtlInp.ColStrt_29, DtlInp.ColEnd_29 + 1)).trim()));

      record.setHospitalNumber(
          convertToString((inputLine.substring(DtlCmn.ColStrt_03, DtlCmn.ColEnd_03 + 1)).trim()));
      record.setHospitalName(
          convertToString((inputLine.substring(DtlCmn.ColStrt_04, DtlCmn.ColEnd_04 + 1)).trim()));
      record.setInsuranceCardNumber(
          convertToString((inputLine.substring(DtlCmn.ColStrt_05, DtlCmn.ColEnd_05 + 1)).trim()));
      record.setLastName(
          convertToString((inputLine.substring(DtlCmn.ColStrt_07, DtlCmn.ColEnd_07 + 1)).trim()));
      record.setFirstName(
          convertToString((inputLine.substring(DtlCmn.ColStrt_08, DtlCmn.ColEnd_08 + 1)).trim()));
      record.setAddress1(
          convertToString((inputLine.substring(DtlInp.ColStrt_09, DtlInp.ColEnd_09 + 1)).trim()));
      record.setAddress2(
          convertToString((inputLine.substring(DtlInp.ColStrt_10, DtlInp.ColEnd_10 + 1)).trim()));
      record.setCity(
          convertToString((inputLine.substring(DtlInp.ColStrt_11, DtlInp.ColEnd_11 + 1)).trim()));
      record.setProvince(
          convertToString(
              (inputLine.substring(DtlInp.ColStrt_12, DtlInp.ColEnd_12 + 1)).trim().toUpperCase()));
      record.setPostalCode(
          convertToString((inputLine.substring(DtlInp.ColStrt_13, DtlInp.ColEnd_13 + 1)).trim()));
      record.setSexCode(
          convertToString(
              (inputLine.substring(DtlInp.ColStrt_15, DtlInp.ColEnd_15 + 1)).trim().toUpperCase()));
      record.setDiagnosCode1(
          convertToString((inputLine.substring(DtlInp.ColStrt_16, DtlInp.ColEnd_16 + 1)).trim()));
      record.setDiagnosCode2(
          convertToString((inputLine.substring(DtlInp.ColStrt_17, DtlInp.ColEnd_17 + 1)).trim()));
      record.setDiagnosCode3(
          convertToString((inputLine.substring(DtlInp.ColStrt_18, DtlInp.ColEnd_18 + 1)).trim()));
      record.setProcedureCode1(
          convertToString((inputLine.substring(DtlInp.ColStrt_19, DtlInp.ColEnd_19 + 1)).trim()));
      record.setProcedureCode2(
          convertToString((inputLine.substring(DtlInp.ColStrt_20, DtlInp.ColEnd_20 + 1)).trim()));
      record.setProcedureCode3(
          convertToString((inputLine.substring(DtlInp.ColStrt_21, DtlInp.ColEnd_21 + 1)).trim()));
      record.setHighCostProcedureCode1(
          convertToString((inputLine.substring(DtlInp.ColStrt_22, DtlInp.ColEnd_22 + 1)).trim()));
      record.setHighCostProcedureCode2(
          convertToString((inputLine.substring(DtlInp.ColStrt_24, DtlInp.ColEnd_24 + 1)).trim()));
      record.setHighCostProcedureCode3(
          convertToString((inputLine.substring(DtlInp.ColStrt_26, DtlInp.ColEnd_26 + 1)).trim()));
      record.setTotalDaysStay(
          convertToString((inputLine.substring(DtlInp.ColStrt_30, DtlInp.ColEnd_30 + 1)).trim()));
      record.setPerDiemRate(
          convertToString((inputLine.substring(DtlInp.ColStrt_31, DtlInp.ColEnd_31 + 1)).trim()));
      record.setTotalAmountClaimed(
          convertToString((inputLine.substring(DtlInp.ColStrt_32, DtlInp.ColEnd_32 + 1)).trim()));
      record.setTotalAmountClaimed(
          convertToString((inputLine.substring(DtlInp.ColStrt_32, DtlInp.ColEnd_32 + 1)).trim()));
      record.setDeceasedFlag(
          convertToString((inputLine.substring(DtlInp.ColStrt_33, DtlInp.ColEnd_33 + 1)).trim()));
      record.setLongTermStayInd(
          convertToString((inputLine.substring(DtlInp.ColStrt_34, DtlInp.ColEnd_34 + 1)).trim()));
      record.setAccidentInd(
          convertToString((inputLine.substring(DtlInp.ColStrt_35, DtlInp.ColEnd_35 + 1)).trim()));
      record.setAccidentCode(
          convertToString((inputLine.substring(DtlInp.ColStrt_36, DtlInp.ColEnd_36 + 1)).trim()));
      record.setProvincialClaimId(
          convertToString((inputLine.substring(DtlInp.ColStrt_37, DtlInp.ColEnd_37 + 1)).trim()));
      record.setAdjFlag(
          convertToString(
              (inputLine.substring(DtlInp.ColStrt_38, DtlInp.ColEnd_38 + 1)).trim().toUpperCase()));
      // record.setAdjFlag
      // (convertToString((inputLine.substring(DtlInp.ColStrt_38,DtlInp.ColEnd_38+1)).trim()));

      // record.setServiceCode("");
      // record.setServiceDate("");

      // record.setUserId(ds.getBatchId());

      // ************************************************************
      // Hospital notes are at the end of the record and there is no
      // guarantee they will be padded out to the end of the line
      // ************************************************************
      try {
        String tmpStr = convertToString((inputLine.substring(DtlInp.ColStrt_39)).trim());
        if (tmpStr.length() > DtlInp.ColLength_39) {
          tmpStr = tmpStr.substring(0, DtlInp.ColLength_39);
        }

        record.setNotes(tmpStr);
      } catch (IndexOutOfBoundsException ioub1) {
        record.setNotes("");
      }

      // record.setUserId(ds.getBatchId());
      logger.debug("Calling createInpClaim() ended.");
    } catch (StringIndexOutOfBoundsException sioobe) {
      logger.error(
          "Record is too short. It must be in a fixed format and hence must be padded out.."
              + sioobe);
      throw new ProcessException(new Exception(sioobe));
    } catch (Exception e) {
      logger.error("Problem occurred creating inpatient claim record." + e);
      throw new ProcessException(new Exception(e));
    }
    logger.debug("Calling createSADetailRecord() ended.");
    return record;
  }

  // *===========================================================================*/
  // * Name : createOutClaim */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 08,2005 Initial Spec */
  // * Ron Merner July 5, 2005 Now uses ICD09 versions of attributes */
  // *===========================================================================*/
  /**
   * Given a input string, breaks it up into the components required for the outpatient claim
   *
   * @param inputLine Outpatient Detail Record
   * @return ROC claim oject
   * @throws ProcessException
   */
  public static SaSubmissionDetails createSAOutpatientRecord(
      String prov, String inputLine, int lineCnt, String fname, int subId)
      throws ProcessException, IOException {
    logger.debug("Calling createOutClaim() started.");
    String tmpDate = null;
    String year = null;
    String month = null;
    String day = null;
    SaSubmissionDetails record = new SaSubmissionDetails();
    try {
      // record = new SADetailRecord(claimDS);
      record.setId(new BigDecimal(subId));

      // ***********************
      // * Insurance Expiry Date
      // ***********************
      // tmpDate = (inputLine.substring(DtlCmn.ColStrt_06,DtlCmn.ColEnd_06+1)).trim();

      // if ((tmpDate.trim().length()!=0) && (tmpDate.trim().length()==8))
      record.setCardExpiryDate(
          convertToString(inputLine.substring(DtlCmn.ColStrt_06, DtlCmn.ColEnd_06 + 1)).trim());

      // else if ((tmpDate.trim().length()!=0) && (tmpDate.trim().length()==6))
      // {
      // record.setInsuranceCardExpiryDate(convertToDate(tmpDate,ApplicationConstants.INSURANCE_EXPIRY_DATE_FORMAT2,DtlCmn.ColName_06));}
      //
      // else if ((tmpDate.trim().length()==0))
      // { record.setInsuranceCardExpiryDate(convertToDate(tmpDate,null,DtlCmn.ColName_06));}

      // ************
      // * Birth Date
      // ************
      record.setBirthDate(
          convertToString(inputLine.substring(DtlOutp.ColStrt_10, DtlOutp.ColEnd_10 + 1)).trim());

      // **************
      // * Service Date
      // **************
      record.setServiceDate(
          convertToString(inputLine.substring(DtlOutp.ColStrt_19, DtlOutp.ColEnd_19 + 1)).trim());
      ;

      // ****************
      // * Billing Period
      // ****************
      // record.setsetBillingPeriod(convertToString(processMonth,ApplicationConstants.BILL_PERIOD_FORMAT,"Billing
      // Period"));

      // ************
      // * Record Type
      // ************
      record.setPatientBatch(
          convertToString(
              (inputLine.substring(DtlCmn.ColStrt_01, DtlCmn.ColEnd_01 + 1)).trim().toUpperCase()));

      // ************
      // * Batch Type
      // ************
      record.setRecordType(
          convertToString(
              (inputLine.substring(DtlCmn.ColStrt_02, DtlCmn.ColEnd_02 + 1)).trim().toUpperCase()));

      record.setHospitalNumber(
          convertToString((inputLine.substring(DtlCmn.ColStrt_03, DtlCmn.ColEnd_03 + 1)).trim()));
      record.setHospitalName(
          convertToString((inputLine.substring(DtlCmn.ColStrt_04, DtlCmn.ColEnd_04 + 1)).trim()));
      record.setInsuranceCardNumber(
          convertToString((inputLine.substring(DtlCmn.ColStrt_05, DtlCmn.ColEnd_05 + 1)).trim()));
      record.setLastName(
          convertToString((inputLine.substring(DtlCmn.ColStrt_07, DtlCmn.ColEnd_07 + 1)).trim()));
      record.setFirstName(
          convertToString((inputLine.substring(DtlCmn.ColStrt_08, DtlCmn.ColEnd_08 + 1)).trim()));
      record.setProvince(
          convertToString(
              (inputLine.substring(DtlOutp.ColStrt_09, DtlOutp.ColEnd_09 + 1))
                  .trim()
                  .toUpperCase()));
      record.setSexCode(
          convertToString(
              (inputLine.substring(DtlOutp.ColStrt_11, DtlOutp.ColEnd_11 + 1))
                  .trim()
                  .toUpperCase()));
      record.setDiagnosCode1(
          convertToString((inputLine.substring(DtlOutp.ColStrt_12, DtlOutp.ColEnd_12 + 1)).trim()));
      record.setServiceCode(
          convertToString((inputLine.substring(DtlOutp.ColStrt_15, DtlOutp.ColEnd_15 + 1)).trim()));
      record.setProcedureCode1(
          convertToString((inputLine.substring(DtlOutp.ColStrt_16, DtlOutp.ColEnd_16 + 1)).trim()));
      record.setProvincialClaimId(
          convertToString((inputLine.substring(DtlOutp.ColStrt_20, DtlOutp.ColEnd_20 + 1)).trim()));
      record.setTotalAmountClaimed(
          convertToString((inputLine.substring(DtlOutp.ColStrt_21, DtlOutp.ColEnd_21 + 1)).trim()));
      record.setAdjFlag(
          convertToString(
              (inputLine.substring(DtlOutp.ColStrt_22, DtlOutp.ColEnd_22 + 1))
                  .trim()
                  .toUpperCase()));
      // ************************************************************
      // Hospital notes are at the end of the record and there is no
      // guarantee they will be padded out to the end of the line
      // ************************************************************
      try {
        String tmpStr = convertToString((inputLine.substring(DtlOutp.ColStrt_23)).trim());
        if (tmpStr.length() > DtlOutp.ColLength_23) {
          tmpStr = tmpStr.substring(0, DtlOutp.ColLength_23);
        }

        record.setNotes(tmpStr);

      } catch (IndexOutOfBoundsException ioub1) {
        record.setNotes("");
      }

      record.setAddress1("");
      record.setAddress2("");
      record.setCity("");
      record.setPostalCode("");
      // claim.setDiagnosis2 ("");
      record.setDiagnosCode2(""); // ICD10 Diagnosis
      // record.setDiagnosCode1 ("");
      record.setDiagnosCode3("");
      // claim.setProcedure2 ("");
      record.setProcedureCode2(""); // ICD10 Procedure
      record.setProcedureCode3("");
      record.setHighCostProcedureCode1("");
      record.setHighCostProcedureCode2("");
      record.setHighCostProcedureCode3("");
      record.setTotalDaysStay("");
      record.setPerDiemRate("");
      record.setDeceasedFlag("");
      record.setLongTermStayInd("");
      record.setAccidentInd("");
      record.setAccidentCode("");
      // record.setChangesetChangeReason ("");

      // record.setImportFileName (convertToString(fname));
      // record.setImportRowNum (lineCnt);
      // record.setClaimSource (convertToString(DtlCmn.dataSource));
      // record.setTresetTreatingProvince (prov);
      // record.setUserId(ds.getBatchId());

    } catch (StringIndexOutOfBoundsException sioobe) {
      logger.error(
          "Record is too short. It must be in a fixed format and hence must be padded out.."
              + sioobe);
      throw new ProcessException(new Exception(sioobe));
    } catch (Exception e) {
      logger.error("Problem occurred creating outpatient claim record." + e);
      throw new ProcessException(new Exception(e));
    }
    logger.debug("Calling createOutClaim() ended.");
    return record;
  }

  // *===========================================================================*/
  // * Name : convertToDate */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 07,2005 Initial Spec */
  // *===========================================================================*/

  /**
   * Takes a date string in the YYYYMMDD format and changes it to a date
   *
   * @param dateStr Date value as a string type. If the string is empty a null is returned
   * @return java.util.Date Passed in string convereted to a date.
   * @throws ProcessException
   */
  private static LocalDate convertToDate(String dateStr, String dateFormat, String dateName)
      throws ProcessException {
    logger.debug("Calling convertToDate() started.");
    if (dateStr == null || dateStr.equals("")) {
      return null;
    }

    String year, month, day;

    if (dateFormat.equals(ApplicationConstants.DEFAULT_DATE_FORMAT1)) {
      if (dateStr.matches("^[0-9]{4}[-/]?[0-9]{2}[-/]?[0-9]{2}$")) {
        dateStr = dateStr.replaceAll("[-/]", "");
        year = dateStr.substring(0, 4);
        month = dateStr.substring(4, 6);
        day = dateStr.substring(6, 8);
      } else {
        throw new ProcessException(
            new Exception(("Invalid date \"" + dateStr + "\"" + "for field" + dateName)));
      }
    } else if (dateFormat.equals(ApplicationConstants.DEFAULT_DATE_FORMAT2)) {
      if (dateStr.matches("^[0-9]{4}[-/]?[0-9]{2}$")) {
        dateStr = dateStr.replaceAll("[-/]", "");
        year = dateStr.substring(0, 4);
        month = dateStr.substring(4, 6);
        day = "1";
      } else {
        throw new ProcessException(
            new Exception("Invalid date \"" + dateStr + "\"" + "for field" + dateName));
      }
    } else {
      throw new ProcessException(
          new Exception("Invalid date \"" + dateStr + "\"" + "for field" + dateName));
    }

    logger.debug("Calling convertToDate() ended.");
    return LocalDate.of(Integer.parseInt(year), Integer.parseInt(month), Integer.parseInt(day));
  }

  // *===========================================================================*/
  // * Name : convertToInteger */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 07,2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Takes a date string and changes it to an Integer object
   *
   * @param s Integer value as a string type. If the string is empty a null is returned
   * @return Integer Passed in string convereted to an Integer.
   */
  private static Integer convertToInteger(String s) {

    logger.debug("Calling convertToInteger() started.");

    if (s == null || s.equals("")) {
      return null;
    }

    logger.debug("Calling convertToInteger() ended.");

    return new Integer(s);
  }

  // *===========================================================================*/
  // * Name : convertToDouble */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 07,2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Takes a date string and changes it to a Double object
   *
   * @param s Double value as a string type. If the string is empty a null is returned
   * @return Double Passed in string convereted to a Double type.
   * @throws ProcessException
   */
  private static Double convertToDouble(String s) {

    logger.debug("Calling convertToDouble() started.");

    if (s == null || s.equals("")) {
      return null;
    }

    logger.debug("Calling convertToDouble() ended.");

    return new Double(s);
  }

  // *===========================================================================*/
  // * Name : convertToString */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 07,2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Ensures any null string is changed to ""
   *
   * @param s String value. If the string is null then "" is returend.
   * @return String Passed in string passed back unless is null in which case "" is passed back
   * @throws ProcessException
   */
  private static String convertToString(String s) {

    logger.debug("Calling convertToString() started.");

    if (s == null) {
      return "";
    }

    logger.debug("Calling convertToString() ended.");

    return s;
  }
}
