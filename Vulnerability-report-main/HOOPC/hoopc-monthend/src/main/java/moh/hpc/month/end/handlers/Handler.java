/**
 * ****************************************************************************** Licensed Materials
 * - Property of IBM * Copyright IBM Canada Ltd 2003, 2004 All Rights Reserved * Created on Oct 27,
 * 2004 * ****************************************************************************** Please do
 * not makes any changes to this file without first * updating the revision history below, under
 * description * please include Harvest Change Request or PSO Tools CR that * caused the change. *
 * ****************************************************************************** Revision History:
 * * * Date Name Reference Description * ---------- ---------------- ----------
 * --------------------------------- * MM-DD-YYYY ????????? ?????? ???????? *
 * ******************************************************************************
 */
package moh.hpc.month.end.handlers;

import java.sql.SQLException;
import java.util.Properties;
import moh.hpc.month.end.EmailHelper;
import moh.hpc.month.end.HandlerMonitor;
import moh.hpc.month.end.MThread;
import moh.hpc.month.end.constants.PropertyFileKeys;
import moh.hpc.month.end.exceptions.ProcessException;
import moh.hpc.month.end.services.MEDataService;
import moh.hpc.month.end.services.MEDataServiceBridge;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public abstract class Handler extends MThread {
  private static Logger logger = LoggerFactory.getLogger("Handler");
  protected static long SLEEP_DURATION;

  protected static String RES_HANDLER;
  protected static String NONRES_HANDLER;
  protected static String OPS_HANDLER;
  protected static String DESTINATION;
  protected static String EMAIL_NORMAL_SUBJECT;
  protected static String EMAIL_ERROR_SUBJECT;

  // DataService Objects
  private MEDataService meDataService;

  // EmailHelper object
  private EmailHelper emailHelper;

  private HandlerMonitor monitor;
  private Properties prp;

  /**
   * Constructor for Handler
   *
   * @throws ProcessException when setup value fails
   */
  public Handler() throws ProcessException {
    super();
  }

  public void destroy() {
    if (emailHelper != null) {
      emailHelper.destroy();
      emailHelper = null;
    }

    if (meDataService != null) {
      meDataService.destroy();
      meDataService = null;
    }
  }

  public void initialize() throws ProcessException {
    logger.debug("Handler intialize() starting.");
    try {
      OPS_HANDLER = prp.getProperty(PropertyFileKeys.PRP_OPS_HANDLER_NAME).trim();
      RES_HANDLER = prp.getProperty(PropertyFileKeys.PRP_RES_HANDLER_NAME).trim();
      NONRES_HANDLER = prp.getProperty(PropertyFileKeys.PRP_NONRES_HANDLER_NAME).trim();
    } catch (NullPointerException npe) {
      logger.error("Handler Names not setup property in property file " + npe);
      throw new ProcessException(npe);
    }
    // Setting email objects
    setupEmail();

    logger.debug("Handler intialize() ending.");
  }

  /**
   * Creates an EmailHelper object.
   *
   * <p>Creates an EmailHelper object.
   */
  private void setupEmail() throws ProcessException {
    logger.debug("Calling setupEmail() started.");

    try {
      EMAIL_NORMAL_SUBJECT = prp.getProperty(PropertyFileKeys.PRP_EMAIL_NORMAL_SUBJECT).trim();
      EMAIL_ERROR_SUBJECT = prp.getProperty(PropertyFileKeys.PRP_EMAIL_ERROR_SUBJECT).trim();
      DESTINATION = prp.getProperty(PropertyFileKeys.PRP_EMAIL_DESTINATION).trim();
      String host = prp.getProperty(PropertyFileKeys.PRP_EMAIL_HOST);
      String from = prp.getProperty(PropertyFileKeys.PRP_EMAIL_FROM);
      String debug = prp.getProperty(PropertyFileKeys.PRP_EMAIL_DEBUG);
      try {
        emailHelper = new EmailHelper(from, host, debug);
      } catch (Exception e) {
        logger.error("Unable to setup EmailHelper: " + e);
        throw new ProcessException(e);
      }
    } catch (NullPointerException npe) {
      logger.error("Email properties not setup property in property file " + npe);
      throw new ProcessException(npe);
    }

    logger.debug("Calling setupEmail() finished.");
  }

  /**
   * Creates a MEDataService object.
   *
   * <p>Creates a MEDataService object.
   */
  protected void createMEDataService() throws ProcessException {
    try {
      meDataService = new MEDataServiceBridge(prp);
    } catch (SQLException se) {
      logger.error("Unable to setup Oracle MEDataService.");
      throw new ProcessException(se);
    }
  }

  /**
   * Cancels Oracle transactions.
   *
   * <p>Cancels Oracle transactions by directly communicating with the Oracle Database. This method
   * will check if an active DataService object exists and if one does exists, will call the
   * DataService's cancel method().
   */
  public void cancelOracle() {
    logger.info("Calling cancelOracle() started.");
    if (meDataService != null) {
      meDataService.cancel();
    }

    logger.info("Calling cancelOracle() finished.");
  }

  /**
   * Returns Properties containing the properties file that is being used.
   *
   * <p>Returns Properties containing the properties file that is being used.
   *
   * @return Properties containing prp
   */
  public Properties getPrp() {
    return prp;
  }

  /**
   * Sets prp containing a Properties value for a properties file.
   *
   * <p>Sets prp containing a Properties value for a properties file. This value determines the
   * properties file that is being used.
   *
   * @param properties containing a Properties value for prp
   */
  public void setPrp(Properties properties) {
    prp = properties;
  }

  /**
   * Returns an EmailHelper object.
   *
   * <p>Returns an EmailHelper object used to send emails.
   *
   * @return EmailHelper containing emailHelper
   */
  public EmailHelper getEmailHelper() {
    return emailHelper;
  }

  /**
   * Sets an EmailHelper object.
   *
   * <p>Sets an EmailHelper object used to send emails.
   *
   * @param helper containing an EmailHelper object
   */
  public void setEmailHelper(EmailHelper helper) {
    emailHelper = helper;
  }

  /**
   * Returns MEDataService object.
   *
   * <p>Returns MEDataService object which contains access methods that communicate with Oracle
   * Stored Procedures on the Fair Pharmacare Database.
   *
   * @return MEDataService containing fpDataService
   */
  public MEDataService getMeDataService() {
    return meDataService;
  }

  /**
   * Sets MEDataService object.
   *
   * <p>Sets MEDataService object which contains access methods that communicate with Oracle Stored
   * Procedures on the Fair Pharmacare Database.
   *
   * @param service containing MEDataService
   */
  public void setMeDataService(MEDataService service) {
    meDataService = service;
  }

  /**
   * Short description of method - the first period signifies the end.
   *
   * <p>Long description - includes all text between the short description and the start of the
   * Javadoc tags. You can use <b>HTML</b> tags to spice it up.
   *
   * @return
   */
  public HandlerMonitor getMonitor() {
    return monitor;
  }

  /**
   * Short description of method - the first period signifies the end.
   *
   * <p>Long description - includes all text between the short description and the start of the
   * Javadoc tags. You can use <b>HTML</b> tags to spice it up.
   *
   * @param monitor
   */
  public void setMonitor(HandlerMonitor monitor) {
    this.monitor = monitor;
  }

  public abstract void execute();

  public abstract void run();
}
