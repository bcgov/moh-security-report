/**
 * ****************************************************************************** Licensed Materials
 * - Property of IBM * Copyright IBM Canada Ltd 2005 All Rights Reserved * Created on Feb 14, 2005 *
 * ****************************************************************************** Please do not
 * makes any changes to this file without first * updating the revision history below, under
 * description * please include Harvest Change Request or PSO Tools CR that * caused the change. *
 * ****************************************************************************** Revision History:
 * * * Date Name Description * ---------- ----------------
 * --------------------------------------------- * 02-14-2005 David Bartlett Initial Spec *
 * ******************************************************************************
 */
package moh.hpc.month.end.nonresident.tprovince.processors;

import jakarta.enterprise.context.Dependent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Hashtable;
import java.util.Properties;
import moh.hpc.month.end.constants.PropertyFileKeys;
import moh.hpc.month.end.exceptions.ProcessException;
import moh.hpc.month.end.nonresident.processors.*;
import moh.hpc.month.end.services.MEDataService;
import moh.hpc.month.end.support.HADetails;
import moh.hpc.month.end.support.ProvTransitionsStats;
import moh.hpc.month.end.support.Province;
import moh.hpc.month.end.support.Reports;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Dependent
public class MEReimburseRptPreProcessor extends MonthEndNonResProcessor {
  private Properties prp = null;
  private MEDataService ds = null;
  private Hashtable provStatList = null;

  private String startingStatus = null;
  private String nextStatus = null;
  private String successTrans = null;
  private String statusKey = null;
  private String reimburseRptStep = null;
  private String defaultStep = null;
  private static Logger logger = LoggerFactory.getLogger("MEReimburseRptPreProcessor");

  // *===========================================================================*/
  // * Name    : constructor                                                     */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   February 14 2005  Initial Spec                            */
  // *===========================================================================*/
  public MEReimburseRptPreProcessor() {
    super();
  }

  // *===========================================================================*/
  // * Name    : initialize                                                      */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   February 14 2005  Initial Spec                            */
  // *===========================================================================*/
  /**
   * Sets up class objects (properties, dataservice, province status list) and other variables to be
   * used in the process().
   *
   * @throws ProcessException
   */
  public void initialize() throws ProcessException {
    logger.debug("Calling initialize() started.");
    prp = getProperties();
    ds = getDataService();
    provStatList = getProvStatList();

    startingStatus = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_FINDONE);
    successTrans = prp.getProperty(PropertyFileKeys.PRP_PROV_TRANS_CAUSE_SUCCESS);
    reimburseRptStep = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_HARPT_STEP);
    defaultStep = prp.getProperty(PropertyFileKeys.PRP_NONRES_STEP_DEF);

    try {
      if ((startingStatus.trim().length() == 0)
          || (successTrans.trim().length() == 0)
          || (reimburseRptStep.trim().length() == 0)
          || (defaultStep.trim().length() == 0)) {
        logger.error(
            "Some properties for the HA Reimbursement rpt preprocessor are null when they cannot be");
        logger.error("HA Reimbursement Rpt Starting Status:    " + startingStatus);
        logger.error("Success Transition Code:                 " + successTrans);
        logger.error("HA Reimbursement Rpt Step Code:          " + reimburseRptStep);
        logger.error("Default Step Code:                       " + defaultStep);
        throw new ProcessException(new Exception("Config File Parameter error"));
      }
    } catch (NullPointerException npe) {
      logger.error("Missing properties in the config file " + npe);
      throw new ProcessException(npe);
    }

    try {
      statusKey = startingStatus.trim() + ":" + successTrans.trim();
      nextStatus = ((ProvTransitionsStats) (provStatList.get(statusKey))).getEndStatus();
    } catch (NullPointerException npe) {
      logger.error("Next status not found in transition statuas list using " + nextStatus);
      throw new ProcessException(npe);
    }

    logger.debug("Calling initialize() finished.");
  }

  // *===========================================================================*/
  // * Name    : process                                                         */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   February 14 2005  Initial Spec                            */
  // *===========================================================================*/
  /**
   * Calls the preProcess application for the HA Rimbursement Report. The preProcessor will be
   * called for each Health Authority associated with the passed in province. The preProcessor will
   * generate and store values in a temp table for each of the reports.
   *
   * @param curProv A treating province object for the current object being processed.
   * @param stepCode Code indicating whether or not this step of the month end should be executed It
   *     will usually be defaulted to 'ALL'
   * @throws SQLException, IOException, ProcessException
   */
  public void process(Province curProv, String stepCode)
      throws SQLException, IOException, ProcessException {
    logger.debug("Calling process() started.");
    logger.info("");
    logger.info(
        "Starting HA Reimbursement Rpt Preprocessor step for treating province/status: "
            + curProv.getProvince()
            + "/"
            + curProv.getCurStatus());
    logger.info("Processor Starting Status: " + startingStatus);
    logger.info("Processor Step Code:       " + stepCode);

    String sessionId = "ME: " + this.getClass().getName();
    curProv.setProvError(false);

    // ***********************************************
    // Ensure that the next and current status
    // fields are not null
    // ***********************************************
    if ((nextStatus == null)
        || (nextStatus.trim().length() == 0)
        || (curProv.getCurStatus() == null)
        || (curProv.getCurStatus().trim().length() == 0)) {
      logger.error(
          "One or more of the status fields are null for treating province: "
              + curProv.getProvince());
      logger.error("Current Status: " + curProv.getCurStatus());
      logger.error("Next Status:    " + nextStatus);
      throw new ProcessException(new Exception("Province is in error: " + curProv.getProvince()));
    }

    // *************************************************************
    // Only process the province if it is at the correct status,
    // there was no overriding step command and it is valid to run
    // the province at its current status at the current time
    // *************************************************************
    if ((curProv.getCurStatus().equals(startingStatus))
        && ((stepCode.equals(defaultStep)) || (stepCode.equals(reimburseRptStep)))) {
      if (!validateTime(curProv.getCurStatus(), statusKey, provStatList)) {
        logger.info(
            "The current treating province is not allowed to run at this time at its current status");
        logger.info("Province/Status: " + curProv.getProvince() + "/" + curProv.getCurStatus());
        curProv.setProvError(true);
      } else {
        logger.info(
            "Determining the HA Reimbursement Rpt Request Id's for treating province: "
                + curProv.getProvince());

        ds.lockProvince(
            curProv.getProvince(), curProv.getProvDetails().getResidencyType(), sessionId);
        int i = 0;
        if (curProv.getHAList().size() == 0) {
          logger.error(
              "There must be at least one Health Authority for treating province: "
                  + curProv.getProvince());
          curProv.setProvError(true);
        } else {
          while ((i < curProv.getHAList().size()) && (!curProv.getProvError())) {
            HADetails HADtls = new HADetails();
            HADtls = curProv.getHA(i);
            HADtls.setReimburseReport(null);
            Reports HAReport =
                ds.preProcessReimburseRpt(curProv.getProvince(), HADtls.getHANumber(), sessionId);

            // Check if a report request id was returned
            if ((HAReport == null) || (HAReport.getRptRequestId() == 0)) {
              logger.error(
                  "HA Reimbursement Rpt PreProcess did not return a report request id for ");
              logger.error("Province:          " + curProv.getProvince());
              logger.error("Health Authority:  " + HADtls.getHAName());
              HADtls.setReimburseReport(null);
              curProv.setHA(HADtls, i);
              curProv.setProvError(true);
            } else {
              logger.info("HA Reimbursement Rpt Request Id is:  " + HAReport.getRptRequestId());
              logger.info(
                  "For province/Health Authority:       "
                      + curProv.getProvince()
                      + "/"
                      + HADtls.getHAName());
              HADtls.setReimburseReport(HAReport);
              curProv.setHA(HADtls, i);
              curProv.setProvError(false);
            }
            HADtls = null;
            i += 1;
          }
        }
      }
    }
    logger.debug("Calling process() finished.");
  }
}
