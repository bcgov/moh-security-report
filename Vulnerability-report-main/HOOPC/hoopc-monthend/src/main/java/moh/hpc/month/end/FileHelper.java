// ***************************************************************/
// ** Licensed Materials - Property of IBM                       */
// ** Copyright IBM Canada Ltd 2004 All Rights Reserved        */
// ***************************************************************/
// ** Please do not makes any changes to this file without first */
// ** updating the revision history below, under description     */
// ** please include Harvest Change Request or PSO Tools CR that */
// ** caused the change.                                         */
// ***************************************************************/
// ** Revision History:                                          */
// ** Date        Author       Description                       */
// ***************************************************************/
// ** 01-15-2005  DC Bartlett  Initial Specs                     */
// ** 05-10-2005  DC Bartlett  Modified readline                 */
// ***************************************************************/
package moh.hpc.month.end;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FileHelper {
  // Objects
  private static Logger logger = LoggerFactory.getLogger("FileHelper");
  protected Properties prp = null;
  private BufferedReader brd = null;
  private PrintWriter pwt = null;

  // Date stuff
  private static final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss a");
  private static final SimpleDateFormat rptDateFormat = new SimpleDateFormat("yyyy-MMM-dd");
  private static final String EOLChars = "\r\n";
  private Date dateTime = new Date();
  private static final String EOL = System.getProperty("line.separator");

  // *===========================================================================*/
  // * Name    : FileHelper                                                      */
  // * Purpose : Default Constructor                                             */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ---------------   ----------------------------------------*/
  // *   DC Bartlett   January 15 2005      Initial Spec                         */
  // *===========================================================================*/
  public FileHelper() {
    super();
  }

  /** =========================================================================== */
  /** Name : createFile */
  /** Purpose : Creates the actual file based on the directory and name */
  /** of the file specified in the property file. */
  /** Descr : When creating the file it will check if a file with the same */
  /** name already exists and if so it will append a sequence number */
  /** to the new file. And if the new file exists it will increment */
  /** the sequence number of the filename and will continue to do so */
  /** until no existing file is found. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett January 15 2004 Initial Spec */
  /** =========================================================================== */
  public synchronized java.io.File createFile(String file, String dir, String extension)
      throws IOException {
    logger.debug("Calling createFile() started.");

    java.io.File parent = new java.io.File(dir);
    if (!parent.exists() || !parent.isDirectory()) {
      logger.error("Invalid directory specified");
      throw new IOException("Invalid directory specified");
    }
    java.util.Date d = new java.util.Date();
    long generation = 0;
    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyyMMdd");

    java.io.File f = null;
    String filename = file + sdf.format(d);
    String ext = extension == null ? "tmp" : extension;

    f = new java.io.File(parent, filename + "-" + generation + "." + ext);
    while (f.exists()) {
      generation++;
      f = new java.io.File(parent, filename + "-" + generation + "." + ext);
    }
    f.createNewFile();
    logger.debug(f.getAbsolutePath());

    logger.debug("Calling createFile() finished.");
    return f;
  }
  /** =========================================================================== */
  /** Name : createFile */
  /** Purpose : Creates the actual file based on the directory and name */
  /** of the file specified in the property file. */
  /** Descr : Just takes file and directory and creates file without adding */
  /** a data or an extension. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett March 10 2005 Initial Spec */
  /** =========================================================================== */
  public synchronized java.io.File createFile(String file, String dir) throws IOException {
    logger.debug("Calling createFile() started.");

    java.io.File parent = new java.io.File(dir);
    if (!parent.exists() || !parent.isDirectory()) {
      logger.error("Invalid directory specified");
      throw new IOException("Invalid directory specified");
    }
    java.io.File f = null;
    f = new java.io.File(parent, file);
    logger.debug(f.getAbsolutePath());
    logger.debug("Calling createFile() finished.");
    return f;
  }
  /** =========================================================================== */
  /** Name : updateFileName */
  /** Purpose : Adds a generation number to the end of a file name. */
  /** Descr : This method is used when one wishes to change the name of a file */
  /** slightly because another file is already using the current name */
  /** of the file being processed. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett March 14, 2005 Initial Spec */
  /** =========================================================================== */
  public synchronized java.io.File updateFileName(String file, String dir) throws IOException {
    logger.debug("Calling updateFileName() started.");

    java.io.File parent = new java.io.File(dir);
    if (!parent.exists() || !parent.isDirectory()) {
      logger.error("Invalid directory specified");
      throw new IOException("Invalid directory specified");
    }
    long generation = 0;

    java.io.File f = null;
    String filename = file;
    f = new java.io.File(parent, filename + "-" + generation);
    while (f.exists()) {
      generation++;
      f = new java.io.File(parent, filename + "-" + generation);
    }
    logger.debug(f.getAbsolutePath());
    logger.debug("Calling updateFileName() finished.");
    return f;
  }
  /** =========================================================================== */
  /** Name : createDir */
  /** Purpose : Creates a directory object based on the path name passed in. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett February 28 2005 Initial Spec */
  /** =========================================================================== */
  public synchronized java.io.File createDir(String dir) throws IOException {
    logger.debug("Calling createDir() started.");

    java.io.File parent = new java.io.File(dir);
    if (!parent.exists() || !parent.isDirectory()) {
      logger.error("Invalid directory specified");
      throw new IOException("Invalid directory specified");
    }
    logger.debug(parent.getAbsolutePath());

    logger.debug("Calling createDir() finished.");
    return parent;
  }
  // *===========================================================================*/
  // * Name    : writeFile                                                       */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   January 15, 2005  Initial Spec                            */
  // *===========================================================================*/
  /** writes out the file */
  public synchronized void writeFile(byte[] bytestream, String fileName) throws IOException {
    logger.debug("Calling writeFile() started.");
    BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(fileName));
    bos.write(bytestream);
    bos.flush();
    bos.close();
    bos = null;

    logger.debug("Calling writeFile() finished.");
  }
  /** =========================================================================== */
  /** Name : deleteFile */
  /** Purpose : Deletes a given file. Note that the full path name must be */
  /** specified. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett January 16 2005 Initial Spec */
  /** =========================================================================== */
  public synchronized void deleteFile(String fileSpec) throws IOException {
    logger.debug("Calling deleteFile() started.");

    java.io.File f = new java.io.File(fileSpec);
    if (!f.exists() || f.isDirectory()) {
      logger.error("Invalid file specification specified" + fileSpec);
      throw new IOException("Invalid file specification specified");
    }
    if (!f.delete()) {
      logger.error("Could not delete file specified: " + fileSpec);
      throw new IOException("Could not delete file specified");
    }
    logger.debug("Calling deleteFile() finished.");
    return;
  }
  /** =========================================================================== */
  /** Name : createReader */
  /** Purpose : Creates a buffered reader. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett March 01 2005 Initial Spec */
  /** =========================================================================== */
  public synchronized BufferedReader createReader(String filename) throws IOException {
    logger.debug("Calling createReader() started.");

    boolean retVal = false;
    try {
      brd = new BufferedReader(new FileReader(filename));
    } catch (IOException e) {
      logger.error("Could not create buffered reader for file: " + filename);
      throw new IOException("Could not create buffered reader for file: " + filename);
    }
    logger.debug("Calling createReader() ended.");
    return brd;
  }
  /** =========================================================================== */
  /** Name : createWriter */
  /** Purpose : Creates a buffered writer. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett March 02 2005 Initial Spec */
  /** =========================================================================== */
  public synchronized PrintWriter createWriter(String filename) throws IOException {
    logger.debug("Calling createWriter() started.");
    boolean retVal = false;
    try {
      pwt = new PrintWriter(new BufferedWriter(new FileWriter(filename)));
    } catch (IOException e) {
      logger.error("Could not create print writer for file: " + filename);
      throw new IOException("Could not create print writer for file: " + filename);
    }
    logger.debug("Calling createWriter() ended.");

    return pwt;
  }
  /** =========================================================================== */
  /** Name : readLine */
  /** Purpose : Reads a line for a given file. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett March 01 2005 Initial Spec */
  /** DC Bartlett May 10, 2005 Modified to skip blank lines. */
  /** =========================================================================== */
  public synchronized String readLine(BufferedReader bufRdr) {
    String retStr = null;
    try {
      retStr = bufRdr.readLine();
      while ((retStr != null) && (retStr.trim().length() == 0)) {
        retStr = bufRdr.readLine();
        if (retStr != null) retStr = retStr.replaceAll(EOLChars, "");
      }
    } catch (IOException e) {
    }
    return retStr;
  }
  /** =========================================================================== */
  /** Name : closeWriter */
  /** Purpose : Closes a given writer. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett March 02 2005 Initial Spec */
  /** =========================================================================== */
  public synchronized void closeWriter(PrintWriter prtWrt) {
    prtWrt.close();
    prtWrt = null;
  }
  /** =========================================================================== */
  /** Name : closeReader */
  /** Purpose : Closes a given reader. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett March 01 2005 Initial Spec */
  /** =========================================================================== */
  public synchronized void closeReader(BufferedReader bufRdr) throws IOException {
    try {
      bufRdr.close();
      bufRdr = null;
    } catch (IOException e) {
      throw new IOException("Could not close reader");
    }
  }
  /** =========================================================================== */
  /** Name : writeLine */
  /** Purpose : Write a line for a given file. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett March 02 2005 Initial Spec */
  /** =========================================================================== */
  public synchronized void writeLine(String outLine, PrintWriter prtWrt) {
    prtWrt.println(outLine);
  }
  // *===========================================================================*/
  // * Name: 	padStringLeading                                                  */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   November 25 2004  Initial Spec                            */
  // *===========================================================================*/
  /**
   * Purpose: <br>
   * Pads an incoming string with a leading passed in padding value to ensure String is of total
   * length passed in.
   *
   * @param inStr String to be padded
   * @param length Length string should be after padding
   * @param padValue Value to pat inStr with
   */
  public String padStringLeading(String inStr, int length, String padValue) {
    StringBuffer stb = new StringBuffer(length);
    if ((inStr != null) && (inStr.length() >= length)) stb.append(inStr.substring(0, length));
    else {
      int tmpLength = 0;
      if (inStr != null) {
        tmpLength = inStr.length();
      } else {
        inStr = "";
      }
      for (int i = 0; i < length - tmpLength; i++) stb.append(padValue);
      stb.append(inStr);
    }
    return stb.toString();
  }
  // *===========================================================================*/
  // * Name    : copyFile                                                        */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   March 09, 2005   Initial Spec                            */
  // *===========================================================================*/
  /**
   * Given a source and destination file this method copies the contents of the source file to the
   * destination file.
   *
   * @param src The file being copied
   * @param dst The file being copied to.
   * @throws IOException
   */
  public void copyFile(File src, File dst) throws IOException {
    logger.debug("Calling copyFile() started.");
    try {
      InputStream in = new FileInputStream(src);
      OutputStream out = new FileOutputStream(dst);

      // Transfer bytes from in to out
      byte[] buf = new byte[1024];
      int len;
      while ((len = in.read(buf)) > 0) {
        out.write(buf, 0, len);
      }
      in.close();
      out.close();
    } catch (IOException e) {
      logger.error("Could not copy file.");
      logger.error("From File: " + src.getAbsolutePath());
      logger.error("To File:   " + dst.getAbsolutePath());
      throw new IOException("File copy failed");
    }
    logger.debug("Calling copyFile() ended.");
  }
}
