/**
 * ****************************************************************************** Licensed Materials
 * - Property of IBM * ï¿½ Copyright IBM Canada Ltd 2005 All Rights Reserved * Created on Jan 11, 2005
 * * ****************************************************************************** Please do not
 * makes any changes to this file without first * updating the revision history below, under
 * description * please include Harvest Change Request or PSO Tools CR that * caused the change. *
 * ****************************************************************************** Revision History:
 * * * Date Name Description * ---------- ----------------
 * --------------------------------------------- * 01-11-2005 David Bartlett Initial Specs *
 * ******************************************************************************
 */
package moh.hpc.month.end.handlers;

import jakarta.enterprise.context.Dependent;
import jakarta.enterprise.inject.spi.CDI;
import java.io.IOException;
import java.net.ServerSocket;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.Properties;
import moh.hpc.month.end.EmailHelper;
import moh.hpc.month.end.HandlerMonitor;
import moh.hpc.month.end.ReportHelper;
import moh.hpc.month.end.Runner;
import moh.hpc.month.end.constants.ApplicationConstants;
import moh.hpc.month.end.constants.PropertyFileKeys;
import moh.hpc.month.end.exceptions.ProcessException;
import moh.hpc.month.end.nonresident.processors.MonthEndNonResProcessor;
import moh.hpc.month.end.services.MEDataService;
import moh.hpc.month.end.support.ProvTransitionsStats;
import moh.hpc.month.end.support.Province;
import moh.hpc.month.end.support.ProvinceDetails;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Dependent
public class NonResidentsHandler extends Handler {

  private MEDataService ds = null;
  private Properties prp = null;
  private ReportHelper rh = null;
  private HandlerMonitor hm = null;
  private EmailHelper eh = null;
  private Hashtable rcvProvProcessors = null;
  private Hashtable trtProvProcessors = null;
  private ArrayList rcvProvinceList = null;
  private ArrayList trtProvinceList = null;
  private Hashtable provTransStatList = null;
  // Month End Province Statuses
  private String trtProvMEStatus01 = null;
  private String trtProvMEStatus02 = null;
  private String trtProvMEStatus03 = null;
  private String trtProvMEStatus04 = null;
  private String trtProvMEStatus05 = null;
  private String trtProvMEStatus06 = null;
  private String trtProvMEStatus07 = null;
  private String trtProvMEStatus08 = null;
  private String trtProvMEStatus09 = null;
  private String trtProvMEStatus10 = null;
  private String trtProvMEStatus11 = null;
  private String trtProvMEStatus12 = null;
  private String trtProvMEStatus13 = null;
  private String trtProvMEStatusError = null;
  private String rcvProvMEStatus01 = null;
  private String rcvProvMEStatus02 = null;
  private String rcvProvMEStatus03 = null;
  private String rcvProvMEStatus04 = null;
  private String rcvProvMEStatus05 = null;
  private String rcvProvMEStatus06 = null;
  private String rcvProvMEStatus07 = null;
  private String rcvProvMEStatus08 = null;
  private String rcvProvMEStatus09 = null;
  private String rcvProvMEStatusError = null;
  // Month End Status Steps
  private String provinceStep01 = null;
  private String provinceStep02 = null;
  private String provinceStep03 = null;
  private String provinceStep04 = null;
  private String provinceStep05 = null;
  private String provinceStep06 = null;
  private String provinceStep07 = null;
  private String provinceStep08 = null;
  private String provinceStep09 = null;
  private String provinceStep10 = null;
  private String provinceStep11 = null;
  private String provinceStep12 = null;
  private String provinceStep13 = null;
  private String provinceStep14 = null;
  private String provinceStep15 = null;
  private String provinceStep16 = null;
  private String provinceStep17 = null;
  private String provinceStep18 = null;
  private String provinceStep19 = null;
  private String provinceStepDef = null;
  private String stepCode = null;
  // Month End Status Offsets
  private float inclStartTimeOff = 0;
  private float inclEndTimeOff = 0;
  private float exclStartTimeOff = 0;
  private float exclEndTimeOff = 0;
  // Lock Socket
  private ServerSocket lockSocket = null;
  private String processingMonth = null;
  private String trtProvCodes = null;
  private String residencyType = null;
  private static String runNonResidentME = null;
  // emailMessage is only set if an exception occurs, else left null
  private String emailMessage;
  private static Logger logger = LoggerFactory.getLogger("NonResidentsHandler");
  private Boolean emailOption;

  // *===========================================================================*/
  // * Name : constructor */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  public NonResidentsHandler() throws ProcessException {
    super();
  }

  // *===========================================================================*/
  // * Name : destroy */
  // * Purpose : Closes objects used by NonResidentsHandler as app. shuts down. */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  public void destroy() {
    if (rh != null) {
      rh = null;
    }
    if (rcvProvinceList != null) {
      rcvProvinceList = null;
    }

    if (trtProvinceList != null) {
      trtProvinceList = null;
    }

    if ((provTransStatList != null) && (provTransStatList.size() != 0)) {
      provTransStatList.clear();
      provTransStatList = null;
    }

    if (ds != null) {
      ds.destroy();
      ds = null;
    }

    if (rcvProvProcessors != null) {
      rcvProvProcessors.clear();
      rcvProvProcessors = null;
    }

    if (trtProvProcessors != null) {
      trtProvProcessors.clear();
      trtProvProcessors = null;
    }

    closeLockSocket();
    setDead(true);
  }

  // *===========================================================================*/
  // * Name : finalize */
  // * Purpose : Method that ensure the destroy method is executed when */
  // * application shuts down. */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  protected void finalize() throws Throwable {
    try {
      destroy();
    } finally {
      super.finalize();
    }
  }

  // *===========================================================================*/
  // * Name : initialize */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  /** Sets up class variables retrieved from the properties file to be used in the process(). */
  public void initialize() throws ProcessException {
    logger.debug("NonResidentsHandler initialize() starting");
    String sessionId = "ME: " + this.getClass().getName();
    super.initialize();
    // Setup EmailHelper object
    eh = getEmailHelper();

    // ********************
    // Set handler monitor
    // ********************
    hm = getMonitor();
    if (hm == null) {
      throw new ProcessException(new Exception("Handler Monitor object is null. Cannot proceed"));
    }

    // *******************************************
    // Set properties file and extract properties
    // *******************************************
    prp = getPrp();
    if (prp == null) {
      throw new ProcessException(new Exception("Property object is null. Cannot proceed"));
    }

    // ********************
    // Setting up lock socket
    // ********************
    try {
      logger.info("Acquiring MonthEndHandler Lock Socket");
      lockSocket =
          Runner.createLock(prp.getProperty(PropertyFileKeys.PRP_NONRES_HANDLER_LOCK_PORT), logger);
    } catch (Exception e) {
      throw new ProcessException(new Exception("Unable to acquire MonthEndHandler Lock Socket"));
    }
    if (lockSocket == null) {
      throw new ProcessException(new Exception("Unable to acquire MonthEndHandler Lock Socket"));
    }

    // ******************************************************
    // Extract required values from property file and check
    // the Non-Resident flag. If it is N then the Non-Resident
    // handler is not allowed to run and there is no
    // need to proceed further
    // ******************************************************
    extractProperties();
    logger.debug("NonResidentsHandler initialize() ending");
  }
  // *===========================================================================*/
  // * Name : closeLockSocket */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 10 2005 Initial Spec */
  // *===========================================================================*/

  /** Closes and releases lock port for Non-Resident MonthEndHandler. */
  private void closeLockSocket() {
    if (lockSocket != null) {
      try {
        logger.debug("Closing NonResidentHandler Lock Socket");
        lockSocket.close();
      } catch (IOException e) {
        logger.error("Unable to close NonResidentHandler Lock Socket", e);
      } finally {
        lockSocket = null;
      }
    }
  }
  // *===========================================================================*/
  // * Name : extractProperties */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 2005 Initial Spec */
  // *===========================================================================*/

  /** Extracts the required properties the Non-Resident handler needs from the property file */
  private void extractProperties() throws ProcessException {
    logger.debug("calling extractProperties started");

    // ***********************************
    // Retrieving required codes and flag
    // ***********************************
    stepCode = prp.getProperty(PropertyFileKeys.PRP_NONRES_STEP_CODE);
    provinceStep01 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_INIT_STEP);
    provinceStep02 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_CLMSTAT_STEP);
    provinceStep03 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_PAYRPT_STEP);
    provinceStep04 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_FINRPT_STEP);
    provinceStep05 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_HARPT_STEP);
    provinceStep06 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_INPREJRPT_STEP);
    provinceStep07 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_OUTREJRPT_STEP);
    provinceStep08 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_INPRPT_STEP);
    provinceStep09 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_OUTRPT_STEP);
    provinceStep10 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_SETRCVPROV_STEP);
    provinceStep11 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_FTP_STEP);
    provinceStep12 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_INIT_STEP);
    provinceStep13 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_IOFILE_STEP);
    provinceStep14 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_INVRPT_STEP);
    provinceStep15 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_INPRPT_STEP);
    provinceStep16 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_OUTRPT_STEP);
    provinceStep17 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_SUMRPT_STEP);
    provinceStep18 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_FTP_STEP);
    provinceStep19 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_ROLLOVER_STEP);
    provinceStepDef = prp.getProperty(PropertyFileKeys.PRP_NONRES_STEP_DEF);

    trtProvMEStatus01 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_INIT);
    trtProvMEStatus02 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_START);
    trtProvMEStatus03 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_CLMDONE);
    trtProvMEStatus04 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_PAYDONE);
    trtProvMEStatus05 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_FINDONE);
    trtProvMEStatus06 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_RMBRSDONE);
    trtProvMEStatus07 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_INPREJDONE);
    trtProvMEStatus08 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_OUTREJDONE);
    trtProvMEStatus09 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_INPDONE);
    trtProvMEStatus10 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_OUTDONE);
    trtProvMEStatus11 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_BATCHDONE);
    trtProvMEStatus12 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_FTPPEND);
    trtProvMEStatus13 = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_FTPDONE);
    trtProvMEStatusError = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_ERROR);

    rcvProvMEStatus01 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_STAT_INIT);
    rcvProvMEStatus02 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_STAT_START);
    rcvProvMEStatus03 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_STAT_FILEDONE);
    rcvProvMEStatus04 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_STAT_LETTERDONE);
    rcvProvMEStatus05 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_STAT_INPDONE);
    rcvProvMEStatus06 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_STAT_OUTDONE);
    rcvProvMEStatus07 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_STAT_BATCHDONE);
    rcvProvMEStatus08 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_STAT_FTPPEND);
    rcvProvMEStatus09 = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_STAT_FTPDONE);
    rcvProvMEStatusError = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_STATU_ERROR);

    runNonResidentME = prp.getProperty(PropertyFileKeys.PRP_NONRES_FLAG);
    trtProvCodes = prp.getProperty(PropertyFileKeys.PRP_DRIVING_PROV);
    residencyType = prp.getProperty(PropertyFileKeys.PRP_NONRES_RESIDENCY_TYPE);

    emailOption = Boolean.valueOf(prp.getProperty(PropertyFileKeys.PRP_EMAIL_NOTIFICATION));

    // ************************************
    // Validating required codes and flags
    // ************************************
    try {
      if ((stepCode.length() == 0)
          || (provinceStep01.length() == 0)
          || (provinceStep02.length() == 0)
          || (provinceStep03.length() == 0)
          || (provinceStep04.length() == 0)
          || (provinceStep05.length() == 0)
          || (provinceStep06.length() == 0)
          || (provinceStep07.length() == 0)
          || (provinceStep08.length() == 0)
          || (provinceStep09.length() == 0)
          || (provinceStep10.length() == 0)
          || (provinceStep11.length() == 0)
          || (provinceStep12.length() == 0)
          || (provinceStep13.length() == 0)
          || (provinceStep14.length() == 0)
          || (provinceStep15.length() == 0)
          || (provinceStep16.length() == 0)
          || (provinceStep17.length() == 0)
          || (provinceStep18.length() == 0)
          || (provinceStep19.length() == 0)
          || (provinceStepDef.length() == 0)
          || (runNonResidentME.length() == 0)
          || (trtProvCodes.length() == 0)
          || (residencyType.length() == 0)
          || (rcvProvMEStatus01.length() == 0)
          || (rcvProvMEStatus02.length() == 0)
          || (rcvProvMEStatus03.length() == 0)
          || (rcvProvMEStatus04.length() == 0)
          || (rcvProvMEStatus05.length() == 0)
          || (rcvProvMEStatus06.length() == 0)
          || (rcvProvMEStatus07.length() == 0)
          || (rcvProvMEStatus08.length() == 0)
          || (rcvProvMEStatus09.length() == 0)
          || (rcvProvMEStatusError.length() == 0)
          || (trtProvMEStatus01.length() == 0)
          || (trtProvMEStatus02.length() == 0)
          || (trtProvMEStatus03.length() == 0)
          || (trtProvMEStatus04.length() == 0)
          || (trtProvMEStatus05.length() == 0)
          || (trtProvMEStatus06.length() == 0)
          || (trtProvMEStatus07.length() == 0)
          || (trtProvMEStatus08.length() == 0)
          || (trtProvMEStatus09.length() == 0)
          || (trtProvMEStatus10.length() == 0)
          || (trtProvMEStatus11.length() == 0)
          || (trtProvMEStatus12.length() == 0)
          || (trtProvMEStatus13.length() == 0)
          || (trtProvMEStatusError.length() == 0)) {
        logger.error("Some properties for the Non-Resident handler are null when they cannot be");
        logger.error("Current Step Code:                    " + stepCode);
        logger.error("Step code 1:                          " + provinceStep01);
        logger.error("Step code 2:                          " + provinceStep02);
        logger.error("Step code 3:                          " + provinceStep03);
        logger.error("Step code 4:                          " + provinceStep04);
        logger.error("Step code 5:                          " + provinceStep05);
        logger.error("Step code 6:                          " + provinceStep06);
        logger.error("Step code 7:                          " + provinceStep07);
        logger.error("Step code 8:                          " + provinceStep08);
        logger.error("Step code 9:                          " + provinceStep09);
        logger.error("Step code 10:                         " + provinceStep10);
        logger.error("Step code 11:                         " + provinceStep11);
        logger.error("Step code 12:                         " + provinceStep12);
        logger.error("Step code 13:                         " + provinceStep13);
        logger.error("Step code 14:                         " + provinceStep14);
        logger.error("Step code 15:                         " + provinceStep15);
        logger.error("Step code 16:                         " + provinceStep16);
        logger.error("Step code 17:                         " + provinceStep17);
        logger.error("Step code 18:                         " + provinceStep18);
        logger.error("Step code 19:                         " + provinceStep19);
        logger.error("Step Default:                         " + provinceStepDef);
        logger.error("Receiving Province Status code 1:     " + rcvProvMEStatus01);
        logger.error("Receiving Province Status code 2:     " + rcvProvMEStatus02);
        logger.error("Receiving Province Status code 3:     " + rcvProvMEStatus03);
        logger.error("Receiving Province Status code 4:     " + rcvProvMEStatus04);
        logger.error("Receiving Province Status code 5:     " + rcvProvMEStatus05);
        logger.error("Receiving Province Status code 6:     " + rcvProvMEStatus06);
        logger.error("Receiving Province Status code 7:     " + rcvProvMEStatus07);
        logger.error("Receiving Province Status code 8:     " + rcvProvMEStatus08);
        logger.error("Receiving Province Status code 9:     " + rcvProvMEStatus09);
        logger.error("Receiving Province Status code Error: " + rcvProvMEStatusError);
        logger.error("Treating  Province Status code 1:     " + trtProvMEStatus01);
        logger.error("Treating  Province Status code 2:     " + trtProvMEStatus02);
        logger.error("Treating  Province Status code 3:     " + trtProvMEStatus03);
        logger.error("Treating  Province Status code 4:     " + trtProvMEStatus04);
        logger.error("Treating  Province Status code 5:     " + trtProvMEStatus05);
        logger.error("Treating  Province Status code 6:     " + trtProvMEStatus06);
        logger.error("Treating  Province Status code 7:     " + trtProvMEStatus07);
        logger.error("Treating  Province Status code 8:     " + trtProvMEStatus08);
        logger.error("Treating  Province Status code 9:     " + trtProvMEStatus09);
        logger.error("Treating  Province Status code 10:    " + trtProvMEStatus10);
        logger.error("Treating  Province Status code 11:    " + trtProvMEStatus11);
        logger.error("Treating  Province Status code 12:    " + trtProvMEStatus12);
        logger.error("Treating  Province Status code 13:    " + trtProvMEStatus13);
        logger.error("Treating Province Status code Error:  " + trtProvMEStatusError);
        logger.error("Run Non-Resident Month End Flag:      " + runNonResidentME);
        logger.error("Non-Resident Treating Province Code:  " + trtProvCodes);
        logger.error("Residency Type Code:                  " + residencyType);
        throw new ProcessException(new Exception("Config File Parameter error"));
      }
    } catch (NullPointerException npe) {
      logger.error("Missing properties in the config file" + npe);
      throw new ProcessException(npe);
    }

    // **************************
    // Retreive offsets
    // **************************
    String IStart = null;
    String IEnd = null;
    String EStart = null;
    String EEnd = null;
    try {
      IStart = prp.getProperty(PropertyFileKeys.PRP_NONRES_INCL_START_TIME_OFFSET);
      IEnd = prp.getProperty(PropertyFileKeys.PRP_NONRES_INCL_END_TIME_OFFSET);
      EStart = prp.getProperty(PropertyFileKeys.PRP_NONRES_EXCL_START_TIME_OFFSET);
      EEnd = prp.getProperty(PropertyFileKeys.PRP_NONRES_EXCL_END_TIME_OFFSET);
      inclStartTimeOff = Float.parseFloat(IStart);
      inclEndTimeOff = Float.parseFloat(IEnd);
      exclStartTimeOff = Float.parseFloat(EStart);
      exclEndTimeOff = Float.parseFloat(EEnd);
    } catch (NumberFormatException ne) {
      logger.error("Time offsets must be numeric");
      logger.error("Include Start Time Offset: " + IStart);
      logger.error("Include End Time Offset:   " + IEnd);
      logger.error("Exclude Start Time Offset: " + EStart);
      logger.error("Exclude End Time Offset:   " + EEnd);
      throw new ProcessException(new Exception("Numeric value error occurred " + ne));
    }

    logger.debug("calling extractProperties ended");
  }
  // *===========================================================================*/
  // * Name : setupDB */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 11 2005 Initial Spec */
  // *===========================================================================*/

  /**
   * Sets up the database connection, retrieves the current processing month and the transition
   * statuses for the provinces involved in the Non-Resident month end
   */
  public void setupDB() throws ProcessException {
    logger.debug("NonResidentsHandler setupDB() starting");
    String sessionId = "ME: " + this.getClass().getName();

    // ******************************************************
    // Set DataService object to communicate with Oracle
    // ******************************************************
    createMEDataService();
    ds = getMeDataService();
    if (ds == null) {
      throw new ProcessException(new Exception("Data Service object is null. Cannot proceed"));
    }

    // ****************************
    // Retrieving processing month
    // ****************************
    try {
      processingMonth = ds.getProcMonth(residencyType, sessionId);
    } catch (SQLException se) {
      logger.error("Unable to obtain current processing month");
      throw new ProcessException(se);
    }
    logger.info("Processing Month: " + processingMonth);
    loadProvinceStatuses();

    logger.debug("NonResidentsHandler setupDB() ending");
  }
  // *===========================================================================*/
  // * Name : loadProvinceStatuses */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 14 2005 Initial Spec */
  // *===========================================================================*/

  /**
   * Loads the non-resident statuses used by the provinces. This also includes the transition
   * statuses and time restrictions on each status (when the month end is allowed to run a province
   * at a particular status)
   *
   * @throws ProcessException
   */
  private void loadProvinceStatuses() throws ProcessException {
    logger.debug("Calling loadProvinceStatuses() started.");
    String sessionId = "ME: " + this.getClass().getName();

    logger.info("Retrieving Province Status Transitions");
    ArrayList tmpArray = new ArrayList();
    provTransStatList = new Hashtable();
    try {
      try {
        tmpArray = ds.getProvTransStats(residencyType, sessionId);
      } catch (SQLException se) {
        logger.error("Unable to obtain a list of the province statuses");
        throw new ProcessException(se);
      }
      if ((tmpArray == null) || (tmpArray.size() == 0)) {
        logger.error("Unable to obtain a list of the province statuses");
        throw new ProcessException(
            new Exception("Unable to obtain a list of the province statuses"));
      }

      logger.info("Converting time restrictions to minutes.");
      int i = 0;
      while (i < tmpArray.size()) {
        try {
          ProvTransitionsStats tmpPS = (ProvTransitionsStats) tmpArray.get(i);
          logger.debug("Include Start Time: " + tmpPS.getInclStartTime());
          logger.debug("Include End Time:   " + tmpPS.getInclEndTime());
          logger.debug("Exclude Start Time: " + tmpPS.getExclStartTime());
          logger.debug("Exclude End Time:   " + tmpPS.getExclEndTime());

          tmpPS.setInclStartTimeMins((tmpPS.getInclStartTime()) * 60);
          tmpPS.setInclEndTimeMins((tmpPS.getInclEndTime()) * 60);
          tmpPS.setExclStartTimeMins((tmpPS.getExclStartTime()) * 60);
          tmpPS.setExclEndTimeMins((tmpPS.getExclEndTime()) * 60);

          if ((inclStartTimeOff != 0) && (tmpPS.getInclStartTimeMins() != 0)) {
            tmpPS.setInclStartTimeMins((tmpPS.getInclStartTimeMins()) + inclStartTimeOff);
            tmpPS.setInclStartTime(tmpPS.getInclStartTimeMins() / 60);
          }

          if ((inclEndTimeOff != 0) && (tmpPS.getInclEndTimeMins() != 0)) {
            tmpPS.setInclEndTimeMins((tmpPS.getInclEndTimeMins()) + inclEndTimeOff);
            tmpPS.setInclEndTime(tmpPS.getInclEndTimeMins() / 60);
          }

          if ((exclStartTimeOff != 0) && (tmpPS.getExclStartTimeMins() != 0)) {
            tmpPS.setExclStartTimeMins((tmpPS.getExclStartTimeMins()) + exclStartTimeOff);
            tmpPS.setExclStartTime(tmpPS.getExclStartTimeMins() / 60);
          }

          if ((exclEndTimeOff != 0) && (tmpPS.getExclEndTimeMins() != 0)) {
            tmpPS.setExclEndTimeMins((tmpPS.getExclEndTimeMins()) + exclEndTimeOff);
            tmpPS.setExclEndTime(tmpPS.getExclEndTimeMins() / 60);
          }
          String key = tmpPS.getStartStatus().trim() + ":" + tmpPS.getTransCause().trim();
          provTransStatList.put(key, tmpPS);
          tmpPS = null;
          i += 1;
        } catch (NumberFormatException nfe) {
          logger.error(
              "Problem occurred formatting time restrictions. One or more values are not numeric");
          throw new ProcessException(new Exception("Numeric value error occurred" + nfe));
        }
      }

    } finally {
      tmpArray = null;
    }

    logger.debug("Calling loadProvinceStatuses() ended.");
  }
  // *===========================================================================*/
  // * Name : setupRH */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 11 2005 Initial Spec */
  // *===========================================================================*/

  /** Sets up the report helper */
  public void setupRH() throws ProcessException {
    logger.debug("NonResidentsHandler setupRH() starting");
    String sessionId = "ME: " + this.getClass().getName();

    rh = new ReportHelper();
    rh.setDataService(ds);
    rh.setProperties(prp);
    rh.initialize();

    logger.debug("NonResidentsHandler setupRH() ending");
  }

  // *===========================================================================*/
  // * Name : shutDown */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 10 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Calls HandlerMonitor objects shutdown(). This is called when the MonthEndHandler has failed and
   * the program needs to be shutdown. This action will cause the other handlers to shutdown if they
   * haven't already.
   */
  private void shutDown() {
    if (hm != null) {
      hm.shutdown();
    }
  }
  // *===========================================================================*/
  // * Name : setupRcvProvProcessors */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 11 2005 Initial Spec */
  // *===========================================================================*/

  /**
   * Sets up processors to be used on each non-resident receiving province. Processors will
   * determine what business requirements need to be implemented for that particular provnices
   * status code.
   *
   * @throws ProcessException
   */
  private void setupRcvProvProcessors() throws ProcessException {
    logger.debug("Calling setupRcvProvProcessors() started.");
    Enumeration enum1 = prp.keys();
    rcvProvProcessors = new Hashtable();
    String origKey = null;
    String key = null;
    String value = null;
    Class c = null;
    MonthEndNonResProcessor process = null;
    while (enum1.hasMoreElements()) {
      origKey = (String) enum1.nextElement();
      if (origKey.startsWith(PropertyFileKeys.PRP_ME_NONRES_RPROV_PROCESSOR)) {
        key = origKey.substring(PropertyFileKeys.PRP_ME_NONRES_RPROV_PROCESSOR_LENGTH);
        value = prp.getProperty(origKey);
        try {
          c = Class.forName(value);
          // process = (MonthEndNonResProcessor) c.newInstance();
          process = (MonthEndNonResProcessor) CDI.current().select(c).get();
          process.setProperties(prp);
          process.setDataService(ds);
          process.setProvStatList(provTransStatList);
          process.setReportHelper(rh);
          process.setProcessMonth(processingMonth);
          process.initialize();
          rcvProvProcessors.put(key, process);
        } catch (ProcessException ce) {
          logger.error("Unable to initialize receiving province processor: " + ce);
          throw ce;
        } catch (Exception e) {
          logger.error("Unable to get class reference for key " + origKey + e);
          throw new ProcessException(e);
        }
      }
    }
    logger.debug("Calling setupRcvProvProcessors() finished.");
  }
  // *===========================================================================*/
  // * Name : setupTrtProvProcessors */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 11 2005 Initial Spec */
  // *===========================================================================*/

  /**
   * Sets up processors to be used on each non-resident treating province. Processors will determine
   * what business requirements need to be implemented for that particular provnices status code.
   *
   * @throws ProcessException
   */
  private void setupTrtProvProcessors() throws ProcessException {
    logger.debug("Calling setupTrtProvProcessors() started.");
    Enumeration enum1 = prp.keys();
    trtProvProcessors = new Hashtable();
    String origKey = null;
    String key = null;
    String value = null;
    Class c = null;
    MonthEndNonResProcessor process = null;
    while (enum1.hasMoreElements()) {
      origKey = (String) enum1.nextElement();
      if (origKey.startsWith(PropertyFileKeys.PRP_ME_NONRES_TPROV_PROCESSOR)) {
        key = origKey.substring(PropertyFileKeys.PRP_ME_NONRES_TPROV_PROCESSOR_LENGTH);
        value = prp.getProperty(origKey);
        try {
          c = Class.forName(value);
          // process = (MonthEndNonResProcessor) c.newInstance();
          process = (MonthEndNonResProcessor) CDI.current().select(c).get();
          process.setProperties(prp);
          process.setDataService(ds);
          process.setProvStatList(provTransStatList);
          process.setReportHelper(rh);
          process.setProcessMonth(processingMonth);
          process.initialize();
          trtProvProcessors.put(key, process);
        } catch (ProcessException ce) {
          logger.error("Unable to initialize treating province processor: " + ce);
          throw ce;
        } catch (Exception e) {
          logger.error("Unable to get class reference for key " + origKey + e);
          throw new ProcessException(e);
        }
      }
    }
    logger.debug("Calling setupTrtProvProcessors() finished.");
  }
  // *===========================================================================*/
  // * Name : loadTrtProvinces */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 11 2005 Initial Spec */
  // *===========================================================================*/

  /**
   * Gets a list of the treating provinces (those administering the treatments to non-residents) and
   * their current statuses. The status of each province is checked against a list of month end
   * treating province statuses and those provinces that are not at one of the month end states are
   * removed from the list.
   */
  private void loadTrtProvinces() throws ProcessException {

    logger.debug("calling loadTrtProvinces started");
    String sessionId = "ME: " + this.getClass().getName();

    trtProvinceList = new ArrayList();
    try {
      trtProvinceList = ds.getProvinces(trtProvCodes, residencyType, sessionId);
    } catch (SQLException se) {
      logger.error("Problems occurred retrieving the list of Treating provinces");
      throw new ProcessException(se);
    }
    int i = 0;
    logger.info(
        "The following Treating provinces have been selected to be processed by the month end");
    while (i < trtProvinceList.size()) {
      Province tmpProv = (Province) trtProvinceList.get(i);

      // *******************************************************************
      // If province is a treating province and its status is set to an
      // appropriate month end status then save province and retrieves its
      // detail information, otherwise remove province from list
      // *******************************************************************

      if (((tmpProv.getCurStatus().equals(trtProvMEStatus01))
          || (tmpProv.getCurStatus().equals(trtProvMEStatus02))
          || (tmpProv.getCurStatus().equals(trtProvMEStatus03))
          || (tmpProv.getCurStatus().equals(trtProvMEStatus04))
          || (tmpProv.getCurStatus().equals(trtProvMEStatus05))
          || (tmpProv.getCurStatus().equals(trtProvMEStatus06))
          || (tmpProv.getCurStatus().equals(trtProvMEStatus07))
          || (tmpProv.getCurStatus().equals(trtProvMEStatus08))
          || (tmpProv.getCurStatus().equals(trtProvMEStatus09))
          || (tmpProv.getCurStatus().equals(trtProvMEStatus10))
          || (tmpProv.getCurStatus().equals(trtProvMEStatus11))
          || (tmpProv.getCurStatus().equals(trtProvMEStatus12))
          || (tmpProv.getCurStatus().equals(trtProvMEStatus13)))) {
        logger.info("Province: " + tmpProv.getProvince() + " at Status: " + tmpProv.getCurStatus());
        ProvinceDetails provDtls = null;
        ArrayList hospitalList = new ArrayList();
        ArrayList HAList = new ArrayList();

        try {
          provDtls = ds.getProvinceDetails(tmpProv.getProvince(), sessionId);
          hospitalList = ds.getHospitalDetails(tmpProv.getProvince(), sessionId);
          HAList = ds.getHADetails(tmpProv.getProvince(), sessionId);
          provDtls.setTProvinceFlag(true);
          provDtls.setRProvinceFlag(false);
          provDtls.setResidencyType(residencyType);
        } catch (SQLException se) {
          logger.error("Problems occurred retrieving details, hospitals of HA's of the province");
          throw new ProcessException(se);
        }
        if ((hospitalList.size() == 0) || (HAList.size() == 0)) {
          logger.error(
              hospitalList.size()
                  + " hospitals and "
                  + HAList.size()
                  + " Health Authorities found for province. ");
          logger.error("Neither can be zero. ");
          throw new ProcessException(new Exception("No Hospitals or Health Authorities found."));
        }

        tmpProv.setProvDetails(provDtls);
        tmpProv.setHospList(hospitalList);
        tmpProv.setHAList(HAList);
        trtProvinceList.set(i, tmpProv);
        provDtls = null;
        hospitalList = null;
        HAList = null;
        i += 1;
      } else {
        trtProvinceList.remove(i);
      }
      tmpProv = null;
    }
    if (trtProvinceList.size() == 0) {
      logger.error("No valid treating provinces were found");
    }
    logger.debug("calling loadTrtProvinces ended");
  }

  // *===========================================================================*/
  // * Name : loadRcvProvinces */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 11 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Gets a list of the receiving provinces (those provinces whose residents were treated in
   * B.C.(treating province) hospitals and hence will be receiving bills for those treaments) and
   * their current statuses. The status of each province is checked against a list of month end
   * receiving province statuses and those provinces that are not at one of the month end states are
   * removed from the list. As well
   */
  private void loadRcvProvinces() throws ProcessException {

    logger.debug("calling loadRcvProvinces started");
    String sessionId = "ME: " + this.getClass().getName();

    rcvProvinceList = new ArrayList();
    try {
      rcvProvinceList = ds.getProvinces(residencyType, sessionId);
    } catch (SQLException se) {
      logger.error("Problems occurred retrieving the list of Receiving provinces");
      throw new ProcessException(se);
    }
    int i = 0;
    logger.info(
        "The following Receiving provinces have been selected to be processed by the month end");
    while (i < rcvProvinceList.size()) {
      Province tmpProv = (Province) rcvProvinceList.get(i);

      // *******************************************************************
      // If province is a receiving province and its status is set to an
      // appropriate month end status then save province and retrieves its
      // detail information, otherwise remove province from list
      // *******************************************************************
      int idx1 = 0;
      int idx2 = trtProvCodes.length();
      int scanIdx = trtProvCodes.length();
      boolean validProvince = true;
      while ((idx2 > 0) && (validProvince)) {
        idx1 =
            trtProvCodes.lastIndexOf(",", scanIdx) != -1
                ? trtProvCodes.lastIndexOf(",", scanIdx) + 1
                : 0;
        if (trtProvCodes.substring(idx1, idx2).equalsIgnoreCase(tmpProv.getProvince())) {
          validProvince = false;
        } else {
          idx2 = idx1 - 1;
          scanIdx = idx1 - 2;
        }
      }

      if ((validProvince)
          && ((tmpProv.getCurStatus().equals(rcvProvMEStatus01))
              || (tmpProv.getCurStatus().equals(rcvProvMEStatus02))
              || (tmpProv.getCurStatus().equals(rcvProvMEStatus03))
              || (tmpProv.getCurStatus().equals(rcvProvMEStatus04))
              || (tmpProv.getCurStatus().equals(rcvProvMEStatus05))
              || (tmpProv.getCurStatus().equals(rcvProvMEStatus06))
              || (tmpProv.getCurStatus().equals(rcvProvMEStatus07))
              || (tmpProv.getCurStatus().equals(rcvProvMEStatus08))
              || (tmpProv.getCurStatus().equals(rcvProvMEStatus09)))) {
        logger.info("Province: " + tmpProv.getProvince() + " at Status: " + tmpProv.getCurStatus());
        ProvinceDetails provDtls = null;
        try {
          provDtls = ds.getProvinceDetails(tmpProv.getProvince(), sessionId);
          provDtls.setTProvinceFlag(false);
          provDtls.setRProvinceFlag(true);
          provDtls.setResidencyType(residencyType);
        } catch (SQLException se) {
          logger.error("Problems occurred retrieving details of the province");
          throw new ProcessException(se);
        }
        tmpProv.setProvDetails(provDtls);
        rcvProvinceList.set(i, tmpProv);
        provDtls = null;
        i += 1;
      } else {
        rcvProvinceList.remove(i);
      }
      tmpProv = null;
    }
    if (rcvProvinceList.size() == 0) {
      logger.error("No valid receiving provinces were found");
    }
    logger.debug("calling loadRcvProvinces ended");
  }

  // *===========================================================================*/
  // * Name : getProperties */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Returns Properties containing the properties file that is being used.
   *
   * @return Properties containing prp
   */
  public Properties getProperties() {
    return prp;
  }

  // *===========================================================================*/
  // * Name : setProperties */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Sets prp containing a Properties value for a properties file. This value determines the
   * properties file that is being used.
   *
   * @param properties containing a Properties value for prp
   */
  public void setProperties(Properties properties) {
    prp = properties;
  }

  // *===========================================================================*/
  // * Name : getDataService */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Returns MEDataService object which contains access methods that communicate with Oracle Stored
   * Procedures on the Fair Pharmacare Database.
   *
   * @return MEDataService containing fpDataService
   */
  public MEDataService getDataService() {
    return ds;
  }

  // *===========================================================================*/
  // * Name : setDataService */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Sets MEDataService object which contains access methods that communicate with Oracle Stored
   * Procedures on the Fair Pharmacare Database.
   *
   * @param service containing MEDataService
   */
  public void setDataService(MEDataService service) {
    ds = service;
  }

  // *===========================================================================*/
  // * Name : getMonitor */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Returns HandlerMonitor object which contains access methods used to indicate that status of the
   * application (whether a request has been made to stop it).
   *
   * @return HandlerMonitor
   */
  public HandlerMonitor getMonitor() {
    return hm;
  }
  // *===========================================================================*/
  // * Name : setMonitor */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/

  /**
   * Sets HanlderMonitor object which contains access methods used to indicate that status of the
   * application (whether a request has been made to stop it).
   *
   * @param monitor containing HanderMonitor
   */
  public void setMonitor(HandlerMonitor monitor) {
    this.hm = monitor;
  }
  // *===========================================================================*/
  // * Name : processTrtProvince */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 11 2005 Initial Spec */
  // *===========================================================================*/

  /** */
  private void processTrtProvince(Province curProv) {
    logger.debug("Calling processTrtProvince() started.");
    MonthEndNonResProcessor processor = null;
    MonthEndNonResProcessor.setMECompleteFlag(false);
    try {
      // *****************************************************************
      // Have to subtra
      // *****************************************************************
      logger.info("Processing Treating Province: " + curProv.getProvince());
      int steps = 0;
      while ((steps < (trtProvProcessors.size() - 1))
          && (!isStopRequested())
          && (!hm.isHandlerFailed())
          && (!curProv.getProvError())) {
        ds.createSavePoint(ApplicationConstants.SAVEPOINT);
        processor =
            (MonthEndNonResProcessor) trtProvProcessors.get(String.valueOf(String.valueOf(steps)));
        processor =
            processor != null
                ? processor
                : (MonthEndNonResProcessor)
                    trtProvProcessors.get(PropertyFileKeys.PRP_ME_NONRES_RPROV_PROCESSOR_DEF);
        if (processor != null) {
          try {
            processor.process(curProv, stepCode);
            ds.commit();
            if (MonthEndNonResProcessor.getMECompleteFlag()) {
              stop();
            }
          } catch (IOException ie) {
            emailMessage =
                "Problem processing Treating Province/Status: "
                    + curProv.getProvince()
                    + "/"
                    + curProv.getCurStatus()
                    + " "
                    + ie;
            logger.error("Problem processing Treating Province: " + curProv.getProvince(), ie);
            logger.error("Treating Province halted while at status: " + curProv.getCurStatus());
            logger.error("Application will be shutdown");
            ds.rollback(ApplicationConstants.SAVEPOINT);
            ds.commit();
            stop();
            shutDown();
          } catch (ProcessException ce) {
            emailMessage =
                "Problem processing Treating Province/Status: "
                    + curProv.getProvince()
                    + "/"
                    + curProv.getCurStatus()
                    + " "
                    + ce;
            logger.error("Problem processing Treating Province: " + curProv.getProvince(), ce);
            logger.error("Treating Province halted while at status: " + curProv.getCurStatus());
            logger.error("Application will be shutdown");
            ds.rollback(ApplicationConstants.SAVEPOINT);
            ds.commit();
            stop();
            shutDown();
          } catch (SQLException se) {
            if (se.getErrorCode() == ApplicationConstants.ERR_LOCK_SEQ) { // If the error code is a
              // custom error from
              // oracle then we will
              // ignore, otherwise
              // rethrow exception
              logger.error("Problem processing Treating Province: " + curProv.getProvince(), se);
              logger.error("Error indicates data for Treating Province was externally modified");
              logger.error("Treating Province skipped while at status: " + curProv.getCurStatus());
              ds.rollback(ApplicationConstants.SAVEPOINT);
              ds.commit();
            } else {
              emailMessage =
                  "Oracle problem occurred while processing Treating province "
                      + curProv.getProvince()
                      + " "
                      + se;
              logger.error(
                  "Oracle problem occurred while processing Treating province: "
                      + curProv.getProvince(),
                  se);
              logger.error("Shutting down NonResidentsHandler.");
              ds.rollback(ApplicationConstants.SAVEPOINT);
              ds.commit();
              stop();
              shutDown();
            }
          }
        } else {
          emailMessage =
              "Processor is null, default processor not set or defined incorrectly for province: "
                  + curProv.getProvince();
          logger.error("Processor is null, default processor not set or defined incorrectly!!!");
          logger.error(
              "Treating Province: " + curProv.getProvince() + " Status: " + curProv.getCurStatus());
          stop();
          shutDown();
        }
        steps += 1;
      }
    } catch (SQLException se) {
      if (emailMessage == null) {
        emailMessage = "Problem processing Treating Provinces from Oracle: " + se;
      }
      logger.error("Problem processing Treating Provinces from Oracle: ", se);
      logger.error("Shutting down NonResidentsHandler.");
      stop();
      shutDown();
    }
    logger.debug("Calling processTrtProvince() finished.");
  }

  // *===========================================================================*/
  // * Name : processRcvProvince */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 11 2005 Initial Spec */
  // *===========================================================================*/
  /** */
  private void processRcvProvince(Province curProv) {
    logger.debug("Calling processRcvProvince() started.");
    MonthEndNonResProcessor processor = null;
    MonthEndNonResProcessor.setMECompleteFlag(false);
    try {
      // *****************************************************************
      // Have to subtract 1 from the processors.size count to ensure the
      // default processoris not run
      // *****************************************************************
      logger.info("Processing Receiving Province: " + curProv.getProvince());
      int steps = 0;
      while ((steps < (rcvProvProcessors.size() - 1))
          && (!isStopRequested())
          && (!hm.isHandlerFailed())
          && (!curProv.getProvError())) {
        ds.createSavePoint(ApplicationConstants.SAVEPOINT);
        processor =
            (MonthEndNonResProcessor) rcvProvProcessors.get(String.valueOf(String.valueOf(steps)));
        processor =
            processor != null
                ? processor
                : (MonthEndNonResProcessor)
                    rcvProvProcessors.get(PropertyFileKeys.PRP_ME_NONRES_RPROV_PROCESSOR_DEF);
        if (processor != null) {
          try {
            processor.process(curProv, stepCode);
            ds.commit();
            if (MonthEndNonResProcessor.getMECompleteFlag()) {
              stop();
            }
          } catch (IOException ie) {
            emailMessage =
                "Problem processing Receiving Province/Status: "
                    + curProv.getProvince()
                    + "/"
                    + curProv.getCurStatus()
                    + " "
                    + ie;
            logger.error("Problem processing Receiving Province: " + curProv.getProvince(), ie);
            logger.error("Receiving Province halted while at status: " + curProv.getCurStatus());
            logger.error("Application will be shutdown");
            ds.rollback(ApplicationConstants.SAVEPOINT);
            ds.commit();
            stop();
            shutDown();
          } catch (ProcessException ce) {
            emailMessage =
                "Problem processing Receiving Province/Status: "
                    + curProv.getProvince()
                    + "/"
                    + curProv.getCurStatus()
                    + " "
                    + ce;
            logger.error("Problem processing Receiving Province: " + curProv.getProvince(), ce);
            logger.error("Receiving Province halted while at status: " + curProv.getCurStatus());
            logger.error("Application will be shutdown");
            ds.rollback(ApplicationConstants.SAVEPOINT);
            ds.commit();
            stop();
            shutDown();
          } catch (SQLException se) {
            if (se.getErrorCode() == ApplicationConstants.ERR_LOCK_SEQ) { // If the error code is a
              // custom error from
              // oracle then we will
              // ignore, otherwise
              // rethrow exception
              logger.error("Problem processing Receiving Province: " + curProv.getProvince(), se);
              logger.error("Error indicates data for Receiving Province was externally modified");
              logger.error("Receiving Province skipped while at status: " + curProv.getCurStatus());
              ds.rollback(ApplicationConstants.SAVEPOINT);
              ds.commit();
            } else {
              emailMessage =
                  "Oracle problem occurred while processing Treating province "
                      + curProv.getProvince()
                      + " "
                      + se;
              logger.error(
                  "Oracle problem occurred while processing Receiving province: "
                      + curProv.getProvince(),
                  se);
              logger.error("Shutting down NonResidentsHandler.");
              ds.rollback(ApplicationConstants.SAVEPOINT);
              ds.commit();
              stop();
              shutDown();
            }
          }
        } else {
          emailMessage =
              "Processor is null, default processor not set or defined incorrectly for province: "
                  + curProv.getProvince();
          logger.error("Processor is null, default processor not set or defined incorrectly!!!");
          logger.error(
              "Receiving Province: "
                  + curProv.getProvince()
                  + " Status: "
                  + curProv.getCurStatus());
          stop();
          shutDown();
        }
        steps += 1;
      }
    } catch (SQLException se) {
      if (emailMessage == null) {
        emailMessage = "Problem processing Treating Provinces from Oracle: " + " " + se;
      }
      logger.error("Problem processing Receiving Provinces from Oracle: ", se);
      logger.error("Shutting down NonResidentsHandler.");
      stop();
      shutDown();
    }
    logger.debug("Calling processRcvProvince() finished.");
  }

  // *===========================================================================*/
  // * Name : run */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 11 2005 Initial Spec */
  // *===========================================================================*/
  /** Non-Resident Handling for all provinces */
  public void process() throws ProcessException {
    logger.info("Calling process() started.");
    String sessionId = "ME: " + this.getClass().getName();

    long before = 0;
    long after = 0;
    long sleepBefore = 0;
    long sleepAfter = 0;

    try {
      setupDB();
      setupRH();
      setupTrtProvProcessors();
      loadTrtProvinces();
    } catch (ProcessException pe) {
      emailMessage = "Problem occurred setting up Treating Province processing. " + pe;
      logger.error("Problem occurred setting up Treating Province processing. " + pe);
      logger.error("Application will be shutdown");
      stop();
      shutDown();
    }
    // ***************************
    // Process Treating Provinces
    // ***************************
    int i = 0;
    while ((trtProvinceList != null) && (i < trtProvinceList.size()) && (!isStopRequested())) {
      before = System.currentTimeMillis();
      processTrtProvince((Province) trtProvinceList.get(i));
      after = System.currentTimeMillis();
      logger.info(
          "Total Time taken: "
              + ((after - before) / 1000F)
              + " seconds to process province "
              + ((Province) trtProvinceList.get(i)).getProvince());
      i += 1;
    }

    // ***************************
    // Process Receiving Provinces
    // ***************************
    if ((!isStopRequested())) {
      try {
        setupRcvProvProcessors();
        loadRcvProvinces();
      } catch (ProcessException pe) {
        emailMessage = "Problem occurred setting up Receiving Province processing. " + pe;
        logger.error("Problem occurred setting up Receiving Province processing. " + pe);
        logger.error("Application will be shutdown");
        stop();
        shutDown();
      }
      int j = 0;
      while ((rcvProvinceList != null) && (j < rcvProvinceList.size()) && (!isStopRequested())) {
        before = System.currentTimeMillis();
        processRcvProvince((Province) rcvProvinceList.get(j));
        after = System.currentTimeMillis();
        logger.info(
            "Total Time taken: "
                + ((after - before) / 1000F)
                + " seconds to process province "
                + ((Province) rcvProvinceList.get(j)).getProvince());
        j += 1;
      }
    }
    logger.info("Calling process() ended.");
  }

  // *===========================================================================*/
  // * Name : run */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 11 2005 Initial Spec */
  // *===========================================================================*/
  /** Non-Resident Handling for all provinces */
  public void run() {
    logger.info("Calling run() started.");
    String sessionId = "ME: " + this.getClass().getName();
    String msg = null;
    int processed = 0;
    int totalProcessed = 0;

    try {
      // **********************************************************
      // Initialize objects required and only continue if the non
      // resident run flag has been set.
      // **********************************************************
      initialize();
      logger.info("After Non-Resident Initialize");
      if (!(runNonResidentME.equals("Y"))) {
        hm.shutdown(NONRES_HANDLER);
        logger.info("Non-Resident flag is not set. Non-Resident Handler will not be run");
      } else {
        try { // **********************************************************
          // Put non-resident handler into a holding pattern until the
          // resident handler which is to run before it has finished
          // **********************************************************
          // [JHOOPC-552] The code is single-threaded now, so do not yield!
          // while (!(isPreviousHandlerFinished()) && (!(isStopRequested()))) {
          // Thread.yield();
          // }

          if ((!isStopRequested())) {
            process();
            if (!hm.isHandlerFailed()) {
              hm.shutdown(NONRES_HANDLER);
            }
          }

        } catch (Exception e) { // Catch all for inner loop
          if (emailMessage == null) {
            emailMessage = "Caught unexpected exception ...Shutting down " + e;
          }
          logger.error("Caught unexpected exception ...Shutting down ", e);
          stop();
          shutDown();
        }
      }
    } catch (ProcessException e) {
      if (emailMessage == null) {
        emailMessage = "Unable to initialize NonResidentsHandler ...Shutting down " + e;
      }
      logger.error("Unable to initialize NonResidentsHandler ...Shutting down ", e);
      stop();
      shutDown();
    } finally { // Summary of transactions
      /*
       * this try block is a workaround for sitiuations where the thread running an instance of this
       * class is interrupted before having the opportunity to call the destroy method. In such
       * cases, without the this nested try/finally block, the OpsHandler will always see this
       * thread has active even though it has completed its operation and is in a dead state
       */
      try {
        logger.info("NonResidentsHandler Finished");
        // if emailMessage is not null, it means an Exception has occurred. Send email.
        if (emailMessage != null && !emailMessage.equals("")) {
          if (eh != null) {
            try {
              if (emailOption) {
                eh.sendEmail(DESTINATION, EMAIL_ERROR_SUBJECT, emailMessage);
                logger.info("Email notification has been sent to: " + DESTINATION);
              }
            } catch (Exception ce) {
              logger.error("Unable to send email notification to " + DESTINATION + " : " + ce);
            }
          }
        }

      } catch (Exception ie) {
        logger.warn(ie.getMessage());
      } finally {
        logger.info("NonResidentsHandler Before Destroyed");
        emailMessage = "";
      }
      destroy();
    }

    logger.info("Calling NonResidentsHandler run() finished.");
    logger.info("******************************************");
    logger.info(" ");
  }

  public void execute() {
    logger.debug("Calling execute() called.");
    start();
    logger.debug("Calling execute() finished.");
  }
}
