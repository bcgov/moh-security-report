/**
 * ****************************************************************************** Licensed Materials
 * - Property of IBM * Copyright IBM Canada Ltd 2003, 2004 All Rights Reserved * Created on Oct 27,
 * 2004 * ****************************************************************************** Please do
 * not makes any changes to this file without first * updating the revision history below, under
 * description * please include Harvest Change Request or PSO Tools CR that * caused the change. *
 * ****************************************************************************** Revision History:
 * * * Date Name Reference Description * ---------- ---------------- ----------
 * --------------------------------- * MM-DD-YYYY ????????? ?????? ???????? *
 * ******************************************************************************
 */
package moh.hpc.month.end.test;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.GregorianCalendar;

public class Test {
  private static final String EOL = System.getProperty("line.separator");

  public static void main(String[] args) {
    // String s = "12345";
    // System.out.println(s.substring(0,3));

    // setCalendarDate();

    // booleanCheck("");

    // nullCheck();

    // trimTest();

    // dateFormatTest();

    // testing decimal points with float
    double x = 1.23456789;
    float y = 9.87654f;
    double z;
    float w;

    z = round(x, 2);
    System.out.println(z);
    z = round(x, 5);
    System.out.println(z);

    System.out.println();

    w = round(y, 3);
    System.out.println(w);
    w = round(y, 2);
    System.out.println(w);
    w = round(y, 0);
    System.out.println(w);

    StringBuffer buf = new StringBuffer(200);
    buf.append("France");
    buf.append(EOL);
    buf.append("=====");
    System.out.println(buf.toString());
  }

  /**
   * Round a float value to a specified number of decimal places.
   *
   * @param val the value to be rounded.
   * @param places the number of decimal places to round to.
   * @return val rounded to places decimal places.
   */
  public static float round(float val, int places) {
    return (float) round((double) val, places);
  }

  /**
   * Round a double value to a specified number of decimal places.
   *
   * @param val the value to be rounded.
   * @param places the number of decimal places to round to.
   * @return val rounded to places decimal places.
   */
  public static double round(double val, int places) {
    long factor = (long) Math.pow(10, places);

    // Shift the decimal the correct number of places
    // to the right.
    val = val * factor;

    // Round to the nearest integer.
    long tmp = Math.round(val);

    // Shift the decimal the correct number of places
    // back to the left.
    return (double) tmp / factor;
  }

  public static void dateFormatTest() {
    SimpleDateFormat dateFormat = new SimpleDateFormat("MMMM dd, yyyy");
    Date dateTime = new Date();
    String currentDt = dateFormat.format(dateTime);
    System.out.println("Formatted date: " + currentDt);
  }

  public static void trimTest() {
    String s = "$500.25";
    System.out.println(s);
    System.out.println(s.replace('$', ' '));

    String h = "$500.25";
    System.out.println(h);
    System.out.println(h.replace('$', ' ').trim());

    String k = "$50$0.25";
    System.out.println(k);
    System.out.println(k.replace('$', ' ').trim());
  }

  public static void threadTest() {
    long before = System.currentTimeMillis();
    System.out.println(before + "");

    try {
      Thread.sleep(10000);
    } catch (InterruptedException e) {
    }

    long after = System.currentTimeMillis();
    System.out.println(after + "");
  }

  public static void intCheck() {
    int i = 10000000;
    System.out.println(i + "");
  }

  public static void calendarDate() {
    GregorianCalendar calendar = new GregorianCalendar();
    java.util.Date dt = calendar.getTime();
    System.out.println(dt.toString());
  }

  public static void setCalendarDate() {
    GregorianCalendar calendar = new GregorianCalendar();
    calendar.set(2003, 10, 05);
    System.out.println(calendar.getTime().toString());

    long longDt = calendar.getTime().getTime();

    System.out.println(longDt + "");

    java.sql.Date sqlDt = new java.sql.Date(longDt);
    System.out.println(sqlDt.toString());
  }

  public static void booleanCheck(String b) {
    boolean debug;
    debug = Boolean.valueOf(b).booleanValue();

    System.out.println("Debug: " + debug);
  }

  public static void nullCheck() {
    String s = "";
    s = null;
    int size = s.length();
    System.out.println(s + "");
  }
}
