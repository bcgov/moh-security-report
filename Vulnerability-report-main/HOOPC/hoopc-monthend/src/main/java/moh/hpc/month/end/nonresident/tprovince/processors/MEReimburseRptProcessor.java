/**
 * ****************************************************************************** Licensed Materials
 * - Property of IBM * Copyright IBM Canada Ltd 2005 All Rights Reserved * Created on Feb 14, 2005 *
 * ****************************************************************************** Please do not
 * makes any changes to this file without first * updating the revision history below, under
 * description * please include Harvest Change Request or PSO Tools CR that * caused the change. *
 * ****************************************************************************** Revision History:
 * * * Date Name Description * ---------- ----------------
 * --------------------------------------------- * 02-14-2005 David Bartlett Initial Spec *
 * ******************************************************************************
 */
package moh.hpc.month.end.nonresident.tprovince.processors;

import ca.bc.gov.health.report.model.MEReimburseRptViewModel;
import ca.bc.gov.health.service.MonthEndReportService;
import jakarta.ejb.EJB;
import jakarta.enterprise.context.Dependent;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import moh.hpc.month.end.ReportHelper;
import moh.hpc.month.end.constants.PropertyFileKeys;
import moh.hpc.month.end.exceptions.ProcessException;
import moh.hpc.month.end.nonresident.processors.MonthEndNonResProcessor;
import moh.hpc.month.end.services.MEDataService;
import moh.hpc.month.end.support.HADetails;
import moh.hpc.month.end.support.ProvTransitionsStats;
import moh.hpc.month.end.support.Province;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Dependent
public class MEReimburseRptProcessor extends MonthEndNonResProcessor {
  @EJB private MonthEndReportService reportService;
  private Properties prp = null;
  private MEDataService ds = null;
  private Hashtable provStatList = null;
  private ReportHelper rh = null;

  private String startingStatus = null;
  private String nextStatus = null;
  private String successTrans = null;
  private String statusKey = null;
  private String reimburseRptStep = null;
  private String defaultStep = null;
  private String reportFormat = null;
  private static Logger logger = LoggerFactory.getLogger("MEReimburseRptProcessor");

  // *===========================================================================*/
  // * Name : constructor */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 14 2005 Initial Spec */
  // *===========================================================================*/
  public MEReimburseRptProcessor() {
    super();
  }

  // *===========================================================================*/
  // * Name : initialize */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 14 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Sets up class objects (properties, dataservice, province status list) and other variables to be
   * used in the process().
   *
   * @throws ProcessException
   */
  public void initialize() throws ProcessException {
    logger.debug("Calling initialize() started.");
    prp = getProperties();
    ds = getDataService();
    rh = getReportHelper();
    provStatList = getProvStatList();
    startingStatus = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_FINDONE);
    successTrans = prp.getProperty(PropertyFileKeys.PRP_PROV_TRANS_CAUSE_SUCCESS);
    reimburseRptStep = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_HARPT_STEP);
    defaultStep = prp.getProperty(PropertyFileKeys.PRP_NONRES_STEP_DEF);
    reportFormat = prp.getProperty(PropertyFileKeys.PRP_RPT_PDF_FORMAT);

    try {
      if ((startingStatus.trim().length() == 0)
          || (successTrans.trim().length() == 0)
          || (reimburseRptStep.trim().length() == 0)
          || (reportFormat.trim().length() == 0)
          || (defaultStep.trim().length() == 0)) {
        logger.error(
            "Some properties for the HA Reimbursement rpt processor are null when they cannot be");
        logger.error("HA Reimbursement Rpt Starting Status:   " + startingStatus);
        logger.error("Success Transition Code:                 " + successTrans);
        logger.error("HA Reimbursement Rpt Step Code:          " + reimburseRptStep);
        logger.error("Report Format:                           " + reportFormat);
        logger.error("Default Step Code:                       " + defaultStep);
        throw new ProcessException(new Exception("Config File Parameter error"));
      }
    } catch (NullPointerException npe) {
      logger.error("Missing properties in the config file " + npe);
      throw new ProcessException(npe);
    }
    try {
      statusKey = startingStatus.trim() + ":" + successTrans.trim();
      nextStatus = ((ProvTransitionsStats) (provStatList.get(statusKey))).getEndStatus();
    } catch (NullPointerException npe) {
      logger.error("Next status not found in transition statuas list using " + nextStatus);
      throw new ProcessException(npe);
    }

    logger.debug("Calling initialize() finished.");
  }

  // *===========================================================================*/
  // * Name : process */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 14 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Calls the oracle report server passing it a report request id. The returned result will be a
   * pdf file converted to a byte stream. This stream is then outputted to the database as a BLOB
   * data type.The report server will be called for each Health Authority associated with the passed
   * in province.
   *
   * @param curProv A treating province object for the current object being processed.
   * @param stepCode Code indicating whether or not this step of the month end should be executed It
   *     will usually be defaulted to 'ALL'
   * @throws SQLException, IOException, ProcessException
   */
  public void process(Province curProv, String stepCode)
      throws SQLException, IOException, ProcessException {
    logger.debug("Calling process() started.");
    logger.info("");
    logger.info(
        "Starting HA Reimbursement Rpt step for treating province/status: "
            + curProv.getProvince()
            + "/"
            + curProv.getCurStatus());
    logger.info("Processor Starting Status: " + startingStatus);
    logger.info("Processor Step Code:       " + stepCode);

    String sessionId = "ME: " + this.getClass().getName();
    curProv.setProvError(false);

    // ***********************************************
    // Ensure that the next, and current status
    // fields are not null
    // ***********************************************
    if ((nextStatus == null)
        || (nextStatus.trim().length() == 0)
        || (curProv.getCurStatus() == null)
        || (curProv.getCurStatus().trim().length() == 0)) {
      logger.error(
          "One or more of the status fields are null for treating province: "
              + curProv.getProvince());
      logger.error("Current Status: " + curProv.getCurStatus());
      logger.error("Next Status:    " + nextStatus);
      throw new ProcessException(new Exception("Province is in error: " + curProv.getProvince()));
    }

    // *************************************************************
    // Only process the province if it is at the correct status,
    // there was no overriding step command and it is valid to run
    // the province at its current status at the current time
    // *************************************************************
    if ((curProv.getCurStatus().equals(startingStatus))
        && ((stepCode.equals(defaultStep)) || (stepCode.equals(reimburseRptStep)))) {
      if (!validateTime(curProv.getCurStatus(), statusKey, provStatList)) {
        logger.info(
            "The current treating province is not allowed to run at this time at its current status");
        logger.info("Province/Status: " + curProv.getProvince() + "/" + curProv.getCurStatus());
        curProv.setProvError(true);
      } else {
        int i = 0;
        ds.lockProvince(
            curProv.getProvince(), curProv.getProvDetails().getResidencyType(), sessionId);
        if (curProv.getHAList().size() == 0) {
          logger.error(
              "There must be at least one Health Authority for treating province: "
                  + curProv.getProvince());
          curProv.setProvError(true);
        } else {
          while ((i < curProv.getHAList().size()) && (!curProv.getProvError())) {
            HADetails HADtls = new HADetails();
            HADtls = curProv.getHA(i);
            logger.info("Running the HA Reimbursement Rpt for - ");
            logger.info(
                "Province/Health Authority: " + curProv.getProvince() + "/" + HADtls.getHAName());

            byte[] ReportByte = null;

            List<MEReimburseRptViewModel> outDtlRpt =
                reportService.queryMEReimburseRptProcessor(
                    HADtls.getReimburseReport().getRptRequestId());
            ReportByte = createPdfReport(outDtlRpt);

            if (!(validateRptResults(ReportByte, curProv.getProvince()))) {
              curProv.setProvError(true);
            } else {
              logger.info(
                  "HA Reimbursement Rpt created for Request Id is: "
                      + HADtls.getReimburseReport().getRptRequestId());
              ByteArrayInputStream reimburseBAIS = new ByteArrayInputStream(ReportByte);
              ds.executeStoreReport(
                  HADtls.getReimburseReport().getRptRequestId(),
                  reportFormat.toUpperCase(),
                  sessionId,
                  reimburseBAIS);
            }
            i += 1;
          }
        }

        if (!curProv.getProvError()) {

          ds.advanceProvStat(
              curProv.getProvince(),
              curProv.getProvDetails().getResidencyType(),
              sessionId,
              curProv.getCurStatus(),
              successTrans);
          curProv.setCurStatus(nextStatus);
        }
      }
    }
    logger.debug("Calling process() finished.");
  }

  // *===========================================================================*/
  // * Name : validateRptResults */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 14 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Checks to ensure the result returned by the report server is a PDF file and that data was
   * actually found to report on.
   *
   * @param province The current province being processed
   * @param rptResults The report results returned by the report server
   */
  private boolean validateRptResults(byte[] rptResults, String province) {
    logger.debug("Calling validateRptResults() started.");

    String reportString = new String(rptResults);
    boolean validRpt = true;
    // ***************************************************************
    // we are expecting a PDF file if an html file has been received
    // it indicates something wrong happened
    // ***************************************************************
    int index = reportString.indexOf("<HTML>");
    if (index != -1) {
      validRpt = false;
      int index1 = reportString.indexOf("<PRE>");
      int index2 = reportString.indexOf("</PRE>");
      String errorMessage = "No Report Returned";
      if ((index1 != -1) && (index2 != -1)) {
        errorMessage = reportString.substring(index1 + 5, index2);
      }

      logger.error("HA Reimbursement Rpt Failed for the province: " + province);
      logger.error(errorMessage);
    } else {
      // ***************************************************************
      // we are expecting a PDF file if file is not html and not pdf then
      // something really wrong happened
      // ***************************************************************
      index = reportString.indexOf("%PDF");
      if (index == -1) {
        validRpt = false;
        logger.error(
            "HA Reimbursement Rpt did not return a PDF file for the province: " + province);
      } else {
        // ***************************************************************
        // we are expecting a PDF file with data, however a no data found
        // situation is not an error
        // ***************************************************************
        validRpt = true;
        index = reportString.indexOf("Report returns no data");
        if (index != -1) {
          logger.info("HA Reimbursement Rpt found no data for province: " + province);
        }
      }
    }
    logger.debug("Calling validateRptResults() finished.");
    return validRpt;
  }

  private byte[] createPdfReport(List<MEReimburseRptViewModel> queryList) {
    Map<String, Object> parameters = new HashMap<>();
    if (!queryList.isEmpty()) {
      parameters.put("HA_NAME", queryList.get(0).getHaName());
      parameters.put("PERIOD_DATE", queryList.get(0).getPeriodDate());
      parameters.put("NO_RECORD_FOUND", "");
    } else {
      parameters.put("NO_RECORD_FOUND", "No record found");
    }
    return ReportHelper.invokeJasper(queryList, parameters, "hoopcr0009");
  }
}
