/**
 * ****************************************************************************** Licensed Materials
 * - Property of IBM * Copyright IBM Canada Ltd 2005 All Rights Reserved * Created on Jan 12, 2005 *
 * ****************************************************************************** Please do not
 * makes any changes to this file without first * updating the revision history below, under
 * description * please include Harvest Change Request or PSO Tools CR that * caused the change. *
 * ****************************************************************************** Revision History:
 * * * Date Name Description * ---------- ----------------
 * --------------------------------------------- * 01-11-2005 David Bartlett ???????? *
 * ******************************************************************************
 */
package moh.hpc.month.end.resident.processors;

import jakarta.enterprise.context.Dependent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Hashtable;
import java.util.Properties;
import moh.hpc.month.end.constants.PropertyFileKeys;
import moh.hpc.month.end.exceptions.ProcessException;
import moh.hpc.month.end.services.MEDataService;
import moh.hpc.month.end.support.ProvTransitionsStats;
import moh.hpc.month.end.support.Province;
import moh.hpc.month.end.support.Reports;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Dependent
public class MEBalRptPreProcessor extends MonthEndResProcessor {
  private Properties prp = null;
  private MEDataService ds = null;
  private Hashtable provStatList = null;

  private String balanceFlag = null;
  private String startingStatus = null;
  private String nextStatus = null;
  private String errorStatus = null;
  private String successTrans = null;
  private String failureTrans = null;
  private String statusKey = null;
  private String errStatusKey = null;
  private String balanceRptStep = null;
  private String defaultStep = null;
  private static Logger logger = LoggerFactory.getLogger("MEBalRptPreProcessor");

  // *===========================================================================*/
  // * Name    : constructor                                                     */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   January 12 2005   Initial Spec                            */
  // *===========================================================================*/
  public MEBalRptPreProcessor() {
    super();
  }

  // *===========================================================================*/
  // * Name    : initialize                                                      */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   January 12 2005   Initial Spec                            */
  // *===========================================================================*/
  /**
   * Sets up class objects (properties, dataservice, province status list) and other variables to be
   * used in the process().
   *
   * @throws ProcessException
   */
  public void initialize() throws ProcessException {
    logger.debug("Calling initialize() started.");
    prp = getProperties();
    ds = getDataService();
    provStatList = getProvStatList();
    balanceFlag = prp.getProperty(PropertyFileKeys.PRP_BALANCE_FLAG);
    startingStatus = prp.getProperty(PropertyFileKeys.PRP_RES_PROV_STAT_INIT);
    successTrans = prp.getProperty(PropertyFileKeys.PRP_PROV_TRANS_CAUSE_SUCCESS);
    failureTrans = prp.getProperty(PropertyFileKeys.PRP_PROV_TRANS_CAUSE_FAILURE);

    balanceRptStep = prp.getProperty(PropertyFileKeys.PRP_RES_BALRPT_STEP);
    defaultStep = prp.getProperty(PropertyFileKeys.PRP_RES_STEP_DEF);

    try {
      if ((balanceFlag.trim().length() == 0)
          || (startingStatus.trim().length() == 0)
          || (successTrans.trim().length() == 0)
          || (failureTrans.trim().length() == 0)
          || (balanceRptStep.trim().length() == 0)
          || (defaultStep.trim().length() == 0)) {
        logger.error(
            "Some properties for the balance report preprocessor are null when they cannot be");
        logger.error("Balance Flag:                    " + balanceFlag);
        logger.error("Balance Report Starting Status:  " + startingStatus);
        logger.error("Success Transition Code:          " + successTrans);
        logger.error("Failure Transition Code:          " + failureTrans);
        logger.error("Balance Report Step Code:         " + balanceRptStep);
        logger.error("Default Step Code:                " + defaultStep);
        throw new ProcessException(new Exception("Config File Parameter error"));
      }
    } catch (NullPointerException npe) {
      logger.error("Missing properties in the config file " + npe);
      throw new ProcessException(npe);
    }

    try {
      statusKey = startingStatus.trim() + ":" + successTrans.trim();
      nextStatus = ((ProvTransitionsStats) (provStatList.get(statusKey))).getEndStatus();
      errStatusKey = nextStatus + ":" + failureTrans;
      errorStatus = ((ProvTransitionsStats) (provStatList.get(errStatusKey))).getEndStatus();
    } catch (NullPointerException npe) {
      logger.error("Next or error status not found in transition statuas list");
      logger.error("Next status key:  " + statusKey);
      logger.error("Error status key: " + errStatusKey);
      throw new ProcessException(npe);
    }

    logger.debug("Calling initialize() finished.");
  }

  // *===========================================================================*/
  // * Name    : process                                                         */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   January 12 2005   Initial Spec                            */
  // *===========================================================================*/
  /**
   * Calls the preProcess application for the Balanced Report. This will generate and store values
   * in a temp table for the Balanced Report and at the same time will determine whether or not the
   * claims/adjustments for a province balanced with the province's invoice.
   *
   * @param curProv A province object for the current object being processed.
   * @param stepCode Code indicating whether or not this step of the month end should be executed It
   *     will usually be defaulted to 'ALL'
   * @throws SQLException, IOException, ProcessException
   */
  public void process(Province curProv, String stepCode)
      throws SQLException, IOException, ProcessException {
    logger.debug("Calling process() started.");
    logger.info("");
    logger.info(
        "Starting Balance Report Preprocessor step for Province/Status: "
            + curProv.getProvince()
            + "/"
            + curProv.getCurStatus());
    logger.info("Processor Starting Status: " + startingStatus);
    logger.info("Processor Step Code:       " + stepCode);

    String sessionId = "ME: " + this.getClass().getName();
    curProv.setBalRpt(null);
    curProv.setProvError(false);

    // ***********************************************
    // Ensure that the next, current and error status
    // fields are not null
    // ***********************************************
    if ((nextStatus == null)
        || (nextStatus.trim().length() == 0)
        || (errorStatus == null)
        || (errorStatus.trim().length() == 0)
        || (curProv.getCurStatus() == null)
        || (curProv.getCurStatus().trim().length() == 0)) {
      logger.error(
          "One or more of the status fields are null for province: " + curProv.getProvince());
      logger.error("Current Status: " + curProv.getCurStatus());
      logger.error("Next Status:    " + nextStatus);
      logger.error("Error Status:   " + errorStatus);
      throw new ProcessException(new Exception("Province is in error: " + curProv.getProvince()));
    }
    // *************************************************************
    // Only process the province if it is at the correct status,
    // there was no overriding step command and it is valid to run
    // the province at its current status at the current time
    // Note that Balance Report PreProcessor will run if the province is
    // in either its current or next state. This it the only preProcessor
    // that does so and its due to the fact that its the starting point
    // of the month end. If the province is in its next state then
    // there is no need to advance the status.
    // *************************************************************
    if (((curProv.getCurStatus().equals(startingStatus))
            || curProv.getCurStatus().equals(nextStatus))
        && ((stepCode.equals(defaultStep)) || (stepCode.equals(balanceRptStep)))) {
      if (!validateTime(curProv.getCurStatus(), statusKey, provStatList)) {
        logger.info(
            "The current Province is not allowed to run at this time at its current status");
        logger.info("Province/Status: " + curProv.getProvince() + "/" + curProv.getCurStatus());
        curProv.setProvError(true);
      } else {
        logger.info(
            "Determining the Balance Report Request Id for province: " + curProv.getProvince());
        if (curProv.getCurStatus().equals(startingStatus)) {
          ds.advanceProvStat(
              curProv.getProvince(),
              curProv.getProvDetails().getResidencyType(),
              sessionId,
              curProv.getCurStatus(),
              successTrans);
        }

        curProv.setCurStatus(nextStatus);
        ds.lockProvince(
            curProv.getProvince(), curProv.getProvDetails().getResidencyType(), sessionId);

        Reports balReport = ds.preProcessBalanceRpt(curProv.getProvince(), balanceFlag, sessionId);

        // Check if a report request id was returned
        if ((balReport == null) || (balReport.getRptRequestId() == 0)) {
          logger.error(
              "Balance Report PreProcess did not return a report request id for the province: "
                  + curProv.getProvince());
          logger.error("Either the province does not balance or other problems occurred");
          ds.advanceProvStat(
              curProv.getProvince(),
              curProv.getProvDetails().getResidencyType(),
              sessionId,
              curProv.getCurStatus(),
              failureTrans);
          curProv.setCurStatus(errorStatus);
          curProv.setBalRpt(null);
          curProv.setProvError(true);
        } else {
          logger.info(
              "Province: "
                  + curProv.getProvince()
                  + " Balance Rpt Request Id is: "
                  + balReport.getRptRequestId());
          curProv.setBalRpt(balReport);
          curProv.setProvError(false);
        }
      }
    }
    logger.debug("Calling process() finished.");
  }
}
