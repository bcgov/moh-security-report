/**
 * ****************************************************************************** Licensed Materials
 * - Property of IBM * Copyright IBM Canada Ltd 2005 All Rights Reserved * Created on Feb 15, 2005 *
 * ****************************************************************************** Please do not
 * makes any changes to this file without first * updating the revision history below, under
 * description * please include Harvest Change Request or PSO Tools CR that * caused the change. *
 * ****************************************************************************** Revision History:
 * * * Date Name Description * ---------- ----------------
 * --------------------------------------------- * 02-15-2005 David Bartlett Initial Spec *
 * ******************************************************************************
 */
package moh.hpc.month.end.nonresident.processors;

import jakarta.enterprise.context.Dependent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Hashtable;
import java.util.Properties;
import moh.hpc.month.end.constants.PropertyFileKeys;
import moh.hpc.month.end.exceptions.ProcessException;
import moh.hpc.month.end.services.MEDataService;
import moh.hpc.month.end.support.HospitalDetails;
import moh.hpc.month.end.support.ProvTransitionsStats;
import moh.hpc.month.end.support.Province;
import moh.hpc.month.end.support.Reports;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Dependent
public class MEOutRejRptPreProcessor extends MonthEndNonResProcessor {
  private Properties prp = null;
  private MEDataService ds = null;
  private Hashtable provStatList = null;

  private String trtProvStartStat = null;
  // private String rcvProvStartStat        = null;
  private String startingStatus = null;
  private String trtProvNextStat = null;
  // private String rcvProvNextStat         = null;
  private String nextStatus = null;
  private String successTrans = null;

  private String trtStatusKey = null;
  // private String rcvStatusKey            = null;
  private String statusKey = null;

  private String trtProvOutRejStep = null;
  // private String rcvProvOutDtlStep       = null;
  private String outpatientRejStep = null;
  private String defaultStep = null;

  private String trtPopulationType = null;
  // private String rcvPopulationType       = null;
  private String populationType = null;

  private static Logger logger = LoggerFactory.getLogger("MEOutRejRptPreProcessor");

  // *===========================================================================*/
  // * Name    : constructor                                                     */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   February 15 2005  Initial Spec                            */
  // *===========================================================================*/
  public MEOutRejRptPreProcessor() {
    super();
  }

  // *===========================================================================*/
  // * Name    : initialize                                                      */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   February 15 2005  Initial Spec                            */
  // *===========================================================================*/
  /**
   * Sets up class objects (properties, dataservice, province status list) and other variables to be
   * used in the process(). Note that this processor is used by the treating province to create
   * hospital level outpatient detail data for later report processing and by the receiving
   * provinces to create provincial level outpatient detail detail for later report processing.
   *
   * @throws ProcessException
   */
  public void initialize() throws ProcessException {
    logger.debug("Calling initialize() started.");
    prp = getProperties();
    ds = getDataService();
    provStatList = getProvStatList();

    // *****************************************************************************
    // Determine whether to use status and step codes based on whether the method
    // is processing hospital outpatient rejected reports for the treating province
    //
    // *****************************************************************************
    trtProvStartStat = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_INPREJDONE);
    trtProvOutRejStep = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_OUTREJRPT_STEP);
    trtPopulationType = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPT_DTL_HOSP);
    successTrans = prp.getProperty(PropertyFileKeys.PRP_PROV_TRANS_CAUSE_SUCCESS);
    defaultStep = prp.getProperty(PropertyFileKeys.PRP_NONRES_STEP_DEF);

    try {
      if ((trtProvStartStat.trim().length() == 0)
          || (successTrans.trim().length() == 0)
          || (trtProvOutRejStep.trim().length() == 0)
          || (trtPopulationType.trim().length() == 0)
          || (defaultStep.trim().length() == 0)) {
        logger.error(
            "Some properties for the Outpatient Rejected rpt preprocessor are null when they cannot be");
        logger.error(
            "Treating  Province Outpatient Rejected Rpt Starting Status:  " + trtProvStartStat);
        logger.error(
            "Treating  Province Outpatient Rejected Rpt Step Code:        " + trtProvOutRejStep);
        logger.error(
            "Treating  Province Population Type:                        " + trtPopulationType);

        logger.error("Success Transition Code:                                   " + successTrans);
        logger.error("Default Step Code:                       " + defaultStep);
        throw new ProcessException(new Exception("Config File Parameter error"));
      }
    } catch (NullPointerException npe) {
      logger.error("Missing properties in the config file " + npe);
      throw new ProcessException(npe);
    }

    try {
      trtStatusKey = trtProvStartStat.trim() + ":" + successTrans.trim();
      trtProvNextStat = ((ProvTransitionsStats) (provStatList.get(trtStatusKey))).getEndStatus();

    } catch (NullPointerException npe) {
      logger.error(
          "Treating or Receiving Province Next status not found in transition status list.");
      logger.error("Treating  Province Next Status: " + trtProvNextStat);

      throw new ProcessException(npe);
    }

    logger.debug("Calling initialize() finished.");
  }

  // *===========================================================================*/
  // * Name    : process                                                         */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   February 15 2005  Initial Spec                            */
  // *===========================================================================*/
  /**
   * Calls the preProcess application for the Outpatient Rejected Report. If the preProcessor is
   * called by a treating province then one report request will be generated for each hospital
   * accociated with the treating province. The preProcessor will generate and store values in a
   * temp table for each of the reports.
   *
   * @param curProv A treating/receiving province object for the current object being processed.
   * @param stepCode Code indicating whether or not this step of the month end should be executed It
   *     will usually be defaulted to 'ALL'
   * @throws SQLException, IOException, ProcessException
   */
  public void process(Province curProv, String stepCode)
      throws SQLException, IOException, ProcessException {
    logger.debug("Calling process() started.");
    String sessionId = "ME: " + this.getClass().getName();
    curProv.setProvError(false);

    // ***********************************************
    // Ensure province is flagged as either a treating
    // or receving province
    // ***********************************************
    if ((curProv.getProvDetails().getTProvinceFlag())
        && (!curProv.getProvDetails().getRProvinceFlag())) {
      startingStatus = trtProvStartStat;
      nextStatus = trtProvNextStat;
      statusKey = trtStatusKey;
      outpatientRejStep = trtProvOutRejStep;
      populationType = trtPopulationType;
      logger.info("Processor Starting Status: " + startingStatus);
      logger.info("Processor Step Code:       " + stepCode);

    } else {
      curProv.setProvError(true);
      logger.error("Province must be identified as treating. ");
      logger.error("Treating flag is: " + curProv.getProvDetails().getTProvinceFlag());
      throw new ProcessException(new Exception("Province is in error: " + curProv.getProvince()));
    }

    String provType = curProv.getProvDetails().getTProvinceFlag() ? "Treating" : "Receiving";
    logger.info("");
    logger.info(
        "Starting Outpatient Rejected Rpt Preprocessor step for "
            + provType
            + " province: "
            + curProv.getProvince());
    logger.info("Province Current Status is: " + curProv.getCurStatus());
    // ***********************************************
    // Ensure that the next and current status
    // fields are not null
    // ***********************************************
    if ((nextStatus == null)
        || (nextStatus.trim().length() == 0)
        || (curProv.getCurStatus() == null)
        || (curProv.getCurStatus().trim().length() == 0)) {
      logger.error(
          "One or more of the status fields are null for "
              + provType
              + " province: "
              + curProv.getProvince());
      logger.error("Current Status: " + curProv.getCurStatus());
      logger.error("Next Status:    " + nextStatus);
      throw new ProcessException(new Exception("Province is in error: " + curProv.getProvince()));
    }

    // *************************************************************
    // Only process the province if it is at the correct status,
    // there was no overriding step command and it is valid to run
    // the province at its current status at the current time
    // *************************************************************
    if ((curProv.getCurStatus().equals(startingStatus))
        && ((stepCode.equals(defaultStep)) || (stepCode.equals(outpatientRejStep)))) {
      if (!validateTime(curProv.getCurStatus(), statusKey, provStatList)) {
        logger.info(
            "The current "
                + provType
                + " province is not allowed to run at this time at its current status");
        logger.info("Province/Status: " + curProv.getProvince() + "/" + curProv.getCurStatus());
        curProv.setProvError(true);
      } else {
        logger.info(
            "Determining the Outpatient Rejected Rpt Request Id's for "
                + provType
                + " province: "
                + curProv.getProvince());
        if (curProv.getProvDetails().getTProvinceFlag()) {
          getHospitalLevelRptRequests(curProv);
        }
      }
    }
    logger.debug("Calling process() finished.");
  }
  // *===========================================================================*/
  // * Name    : getHospitalLevelRptRequests                                     */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   February 15 2005  Initial Spec                            */
  // *===========================================================================*/
  /**
   * Generates Outpatient Rejected claims data for each hospital of the passed in treating province
   * and stores the data in a temp table for later reporting processing.
   *
   * @param curProv A treating province object for the current object being processed.
   * @throws SQLException, IOException, ProcessException
   */
  private void getHospitalLevelRptRequests(Province curProv)
      throws SQLException, IOException, ProcessException {
    logger.debug("Calling getHospitalLevelRptRequests() started.");
    String sessionId = "ME: " + this.getClass().getName();

    ds.lockProvince(curProv.getProvince(), curProv.getProvDetails().getResidencyType(), sessionId);
    int i = 0;
    if (curProv.getHospList().size() == 0) {
      logger.error(
          "There must be at least one hospital for treating province: " + curProv.getProvince());
      curProv.setProvError(true);
    } else {
      while ((i < curProv.getHospList().size()) && (!curProv.getProvError())) {
        HospitalDetails HospDtls = new HospitalDetails();
        HospDtls = curProv.getHospital(i);
        HospDtls.setOutRejectedReport(null);
        Reports outRejReport =
            ds.preProcessOutpatientRejRpt(
                curProv.getProvDetails().getResidencyType(),
                populationType,
                HospDtls.getHospitalNumber(),
                sessionId);

        // Check if a report request id was returned
        if ((outRejReport == null) || (outRejReport.getRptRequestId() == 0)) {
          logger.error(
              "Outpatient Rejected Rpt PreProcess did not return a report request id for ");
          logger.error("Province: " + curProv.getProvince());
          logger.error("Hospital: " + HospDtls.getHospitalName());
          HospDtls.setOutRejectedReport(null);
          curProv.setHospital(HospDtls, i);
          curProv.setProvError(true);
        } else if ((outRejReport.getRptRequestId() == -1)) {
          logger.info("Outpatient Rejected Rpt Request Id is:  -1");
          logger.info(
              "For Province/Hospital:  "
                  + curProv.getProvince()
                  + "/"
                  + HospDtls.getHospitalName());
          HospDtls.setOutRejectedReport(null);
          curProv.setHospital(HospDtls, i);
          curProv.setProvError(false);
        } else {
          logger.info("Outpatient Rejected Rpt Request Id is:  " + outRejReport.getRptRequestId());
          logger.info(
              "For Province/Hospital:  "
                  + curProv.getProvince()
                  + "/"
                  + HospDtls.getHospitalName());
          HospDtls.setOutRejectedReport(outRejReport);
          curProv.setHospital(HospDtls, i);
          curProv.setProvError(false);
        }
        HospDtls = null;
        i += 1;
      }
    }
    logger.debug("Calling getHospitalLevelRptRequests() ended.");
  }
}
