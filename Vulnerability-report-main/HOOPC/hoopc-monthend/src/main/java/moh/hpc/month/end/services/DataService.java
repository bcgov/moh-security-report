/**
 * ****************************************************************************** Licensed Materials
 * - Property of IBM * Copyright IBM Canada Ltd 2005 All Rights Reserved * Created on Jan 11, 2054 *
 * ****************************************************************************** Please do not
 * makes any changes to this file without first * updating the revision history below, under
 * description * please include Harvest Change Request or PSO Tools CR that * caused the change. *
 * ****************************************************************************** Revision History:
 * * * Date Name Description * ---------- ----------------
 * --------------------------------------------- * 01-11-2005 David Bartlett Initial Spec *
 * ******************************************************************************
 */
package moh.hpc.month.end.services;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Base64;
import java.util.Properties;
import moh.broker.utils.PasswordUtility;
import moh.hpc.month.end.services.support.OracleParameters;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class DataService {
  // Values used by SimpleDecoder
  // private static final String CHARS =
  // "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890";
  // private static final String RANDS =
  // "lR5Nd0yXaM6iG2xI7KSWFoYbhTADE0qUk3vOsgJwjmfetLHur18ZVzcnCBP49pQ";

  // Oracle Connection Objects
  private static final String ORACLE_DRIVER = "oracle.jdbc.driver.OracleDriver";
  private static final String ORACLE_CLIENT = "jdbc:oracle:thin:@";
  // DBMS Stored Procedures
  private static final String CALLABLE_CREATESAVEPOINT = "{call DBMS_TRANSACTION.SAVEPOINT(?)}";
  private static final String CALLABLE_ROLLBACK = "{call DBMS_TRANSACTION.ROLLBACK_SAVEPOINT(?)}";
  private CallableStatement stopCstmt;
  protected Connection con; // Oracle Connection
  private int queryTimeOut;
  private static Logger logger = LoggerFactory.getLogger("DataService");

  // *===========================================================================*/
  // * Name : Constrructor */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  public DataService(Properties prp) throws SQLException {
    logger.debug("DataService Constructor is starting");
    if (prp == null) {
      logger.error("Properties is null");
      throw new NullPointerException("Properties is null");
    }
    logger.debug("DataService Constructor is ending");
  }

  // *===========================================================================*/
  // * Name : createDataSource */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  protected void createDataSource(OracleParameters oracleParms) throws SQLException {
    logger.debug("Calling initialized() started.");
    queryTimeOut = oracleParms.getQueryTimeout();
    // try {
    logger.debug("Creating Oracle connection");
    // con = getConnection(oracleParms.getUsername(), oracleParms.getPassword(),
    // oracleParms.getHostname(), oracleParms.getHostport(), oracleParms.getSid(),
    // oracleParms.getDbConnectTimeout());
    // } catch (SQLException e) {
    // destroy();
    // throw e;
    // }
    logger.debug("Calling initialized() started.");
  }

  // *===========================================================================*/
  // * Name : destroy */
  // * Purpose : Closes objects used by DataService as app. shuts down. */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  public void destroy() {
    logger.debug("Method: destroy started.");
    try {
      if (con != null) {
        con.close();
      }
    } catch (SQLException e) {
      logger.error("Error closing oracle connection", e);
    }
    logger.debug("Method: destroy finished.");
  }

  // *===========================================================================*/
  // * Name : decodeBase64 */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Base64 encodes the incoming byte stream
   *
   * @param inBytes a byte array contained the characters to be encoded
   * @return <code>java.lang.String</code>
   */
  private static String decodeBase64(String decodeStr) {
    logger.debug("Method: decodeBase64 started.");
    String retStr = null;
    retStr = new String(Base64.getDecoder().decode(decodeStr));
    logger.debug("Method: decodeBase64 finished.");
    return retStr;
  }

  // *===========================================================================*/
  // * Name : simpleDecoder */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  public static String simpleDecoder(String inStr) {
    logger.debug("Method: simpleDecoder started.");
    // String retStr = null;
    // if (inStr!=null)
    // {
    // inStr = decodeBase64(inStr);
    // StringBuffer stb = new StringBuffer(inStr.length());
    // int ind = 0;
    // for (int i = 0; i < inStr.length(); i++)
    // {
    // ind = RANDS.indexOf(inStr.charAt(i));
    // if (ind != -1)
    // {
    // stb.append(CHARS.charAt(ind));
    // }
    // else
    // {
    // throw new NullPointerException("Illegal character");
    // }
    // }
    // retStr = stb.toString();
    // }

    String retStr = PasswordUtility.decodeBase64(inStr);
    logger.debug("Method: simpleDecoder finished");
    return retStr;
  }
  // *===========================================================================*/
  // * Name : getConnection */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/

  public static Connection getConnection(
      String userName, String password, String hostname, String port, String sid, int timeout)
      throws SQLException {
    logger.debug("Method: getConnection started");
    Connection connection = null;
    try {
      Class.forName(ORACLE_DRIVER);
      DriverManager.setLoginTimeout(timeout);
      connection =
          DriverManager.getConnection(
              ORACLE_CLIENT + hostname + ":" + port + ":" + sid, userName, password);
      connection.setAutoCommit(false);
      logger.debug(connection.getMetaData().getDatabaseProductVersion());
    } catch (ClassNotFoundException e) {
      logger.error("Method: getConnection() - ClassNotFoundException", e);
    }
    logger.debug("Method: getConnection() finished");
    return connection;
  }

  // *===========================================================================*/
  // * Name : commit */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  public void commit() throws SQLException {
    con.commit();
    logger.debug("Commit successfull");
  }

  // *===========================================================================*/
  // * Name : createSavePoint */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  public void createSavePoint(String savePoint) throws SQLException {
    CallableStatement cstmt = null;
    try {
      cstmt = createCallableStatement(CALLABLE_CREATESAVEPOINT);
      cstmt.setString(1, savePoint);
      cstmt.execute();
      logger.debug("Create Savepoint successful");
    } finally {
      closeCallableStatement(cstmt, CALLABLE_CREATESAVEPOINT);
    }
  }

  // *===========================================================================*/
  // * Name : rollback */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  public void rollback() throws SQLException {
    con.rollback();
    logger.debug("Rollback successful");
  }

  // *===========================================================================*/
  // * Name : rollback */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  public void rollback(String savePoint) throws SQLException {
    CallableStatement cstmt = null;
    try {
      cstmt = createCallableStatement(CALLABLE_ROLLBACK);
      cstmt.setString(1, savePoint);
      cstmt.execute();
      logger.debug("Rollback to Savepoint successful");
    } finally {
      closeCallableStatement(cstmt, CALLABLE_ROLLBACK);
    }
  }

  // *===========================================================================*/
  // * Name : cancel */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  public void cancel() {
    logger.debug("Calling cancel() started.");

    // Check if stop CallableStatement exist
    if (stopCstmt != null) {
      try {
        logger.info("Cancelling CallableStatement: " + stopCstmt.toString());
        stopCstmt.cancel();
        logger.info("CallableStatement cancelled: " + stopCstmt.toString());
      } catch (SQLException se) {
        logger.error("Unable to cancel CallableStatement: ", se);
      }
    }

    logger.debug("Calling cancel() finished.");
  }

  // *===========================================================================*/
  // * Name : createCallableStatement */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  protected CallableStatement createCallableStatement(String storedProc) throws SQLException {
    logger.debug("Creating CallableStatement for: " + storedProc);
    CallableStatement cstmt = null;

    if (con != null && !con.isClosed()) {
      cstmt = con.prepareCall(storedProc);
      cstmt.setQueryTimeout(queryTimeOut);
      stopCstmt = cstmt;
    } else {
      throw new SQLException("Connection is null or not open");
    }
    return cstmt;
  }

  // *===========================================================================*/
  // * Name : closeCallableStatement */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  protected void closeCallableStatement(CallableStatement cstmt, String name) {
    if (cstmt != null) {
      logger.debug("Closing CallableStatement for " + name);
      try {
        cstmt.close();
      } catch (SQLException e) {
        logger.debug("Unable to close CallableStatement", e);
      }
      stopCstmt = null;
    } else {
      logger.debug("CallableStatement " + name + " is null, thus doesn't need closing");
    }
  }

  // *===========================================================================*/
  // * Name : closeResultSet */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 11 2005 Initial Spec */
  // *===========================================================================*/
  protected void closeResultSet(ResultSet rs) {
    if (rs != null) {
      logger.debug("Closing ResultSet");
      try {
        rs.close();
        rs = null;
      } catch (SQLException e) {
        logger.debug("Unable to close ResultSet", e);
      }
    } else {
      logger.debug("ResultSet is null, thus doesn't need closing");
    }
  }
  // *===========================================================================*/
  // * Name : getCon */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 04 2005 Initial Spec */
  // *===========================================================================*/

  public Connection getCon() {
    return con;
  }
}
