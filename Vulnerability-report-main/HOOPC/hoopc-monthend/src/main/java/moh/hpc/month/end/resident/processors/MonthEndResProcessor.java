/**
 * ****************************************************************************** Licensed Materials
 * - Property of IBM * Copyright IBM Canada Ltd 2005 All Rights Reserved * Created on Jan 12, 2005 *
 * ****************************************************************************** Please do not
 * makes any changes to this file without first * updating the revision history below, under
 * description * please include Harvest Change Request or PSO Tools CR that * caused the change. *
 * ****************************************************************************** Revision History:
 * * * Date Name Description * ---------- ----------------
 * --------------------------------------------- * 01-12-2005 David Bartlett Initial Spec *
 * 04-27-2005 David Bartlett Added HandlerMonitor and associated gets/sets *
 * ******************************************************************************
 */
package moh.hpc.month.end.resident.processors;

import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Hashtable;
import java.util.Properties;
import moh.hpc.month.end.EmailHelper;
import moh.hpc.month.end.HandlerMonitor;
import moh.hpc.month.end.ReportHelper;
import moh.hpc.month.end.exceptions.ProcessException;
import moh.hpc.month.end.services.MEDataService;
import moh.hpc.month.end.support.ProvTransitionsStats;
import moh.hpc.month.end.support.Province;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public abstract class MonthEndResProcessor {
  private HandlerMonitor monitor;
  private MEDataService dataService;
  private ReportHelper reportHelper;
  private EmailHelper emailHelper;
  private Properties properties;
  private Hashtable provinceTransStatusList;

  private String processingMonth;
  private static boolean MEComplete;
  private ArrayList rcvProvList = null;

  private static Logger logger = LoggerFactory.getLogger("MonthEndResProcessor");

  public MonthEndResProcessor() {
    super();
  }

  // *===========================================================================*/
  // * Name : getDataService */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 12 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Gets the ds
   *
   * @return Returns a moh.hpc.month.end.MEDataService
   */
  public MEDataService getDataService() {
    return dataService;
  }

  // *===========================================================================*/
  // * Name : setDataService */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 12 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Sets the ds
   *
   * @param ds The ds to set
   */
  public void setDataService(MEDataService ds) {
    this.dataService = ds;
  }

  // *===========================================================================*/
  // * Name : getProperties */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 12 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Gets the properties
   *
   * @return Returns a java.util.Properties
   */
  public Properties getProperties() {
    return properties;
  }

  // *===========================================================================*/
  // * Name : getProperty */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 12 2005 Initial Spec */
  // *===========================================================================*/
  protected String getProperty(String propertyName) {
    return properties.getProperty(propertyName);
  }

  // *===========================================================================*/
  // * Name : setProperties */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 12 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Sets the properties
   *
   * @param properties The properties to set
   */
  public void setProperties(Properties properties) {
    this.properties = properties;
  }

  // *===========================================================================*/
  // * Name : getReportHelper */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 12 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Returns reportHelper with ReportHelper object used to create the Provinces various reports.
   *
   * @return ReportHelper object
   */
  public ReportHelper getReportHelper() {
    return reportHelper;
  }

  // *===========================================================================*/
  // * Name : setReportHelper */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 12 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Sets reportHelper with ReportHelper object.
   *
   * <p>Sets reportHelper with ReportHelper object used to create the provinces various reports.
   *
   * @param helper containing ReportHelper object
   */
  public void setReportHelper(ReportHelper helper) {
    reportHelper = helper;
  }

  // *===========================================================================*/
  // * Name : getEmailHelper */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 25 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Returns emailHelper with EmailHelper object used to email error messages to ops team
   *
   * @return emailHelper object
   */
  public EmailHelper getEmailHelper() {
    return emailHelper;
  }

  // *===========================================================================*/
  // * Name : setEmailHelper */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 25 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Sets emailHelper with EmailHelper object.
   *
   * <p>Sets emailHelper with EmailHelper object used to email error messages to ops team
   *
   * @param emailHelper containing EmailHelper object
   */
  public void setEmailHelper(EmailHelper helper) {
    emailHelper = helper;
  }

  // *===========================================================================*/
  // * Name : getProvStatList */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 13 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Returns provStatList with Hashtable object
   *
   * @return provStatList object
   */
  public Hashtable getProvStatList() {
    return provinceTransStatusList;
  }

  // *===========================================================================*/
  // * Name : setProvStatList */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 13 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Sets the provStatLIst with a HashTable object
   *
   * @param provStatList containing Hashtable object
   */
  public void setProvStatList(Hashtable provinceTransStatusList) {
    this.provinceTransStatusList = provinceTransStatusList;
  }

  // *===========================================================================*/
  // * Name : getProcessMonth */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 14 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Returns Processing Month
   *
   * @return processingMonth String object
   */
  public String getProcessMonth() {
    return processingMonth;
  }

  // *===========================================================================*/
  // * Name : setProcessMonth */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 14 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Sets the Processing Month
   *
   * @param processingMonth String object
   */
  public void setProcessMonth(String pMonth) {
    this.processingMonth = pMonth;
  }

  // *===========================================================================*/
  // * Name : getMECompleteFlag */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 09 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Returns Month End complete flag
   *
   * @return MEComplete boolean object
   */
  public static boolean getMECompleteFlag() {
    return MEComplete;
  }

  // *===========================================================================*/
  // * Name : setMECompleteFlag */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett February 09 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Sets the Month End complete flag
   *
   * @param MEComplete boolean object
   */
  public static void setMECompleteFlag(boolean MEDone) {
    MEComplete = MEDone;
  }

  // *===========================================================================*/
  // * Name : getRcvProvList */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 09 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Gets the Array of Receiving Provinces.
   *
   * @return rcvProvList ArrayList object of receiving provinces
   */
  public ArrayList getRcvProvList() {
    return rcvProvList;
  }

  // *===========================================================================*/
  // * Name : setRcvProvList */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 09 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Sets the Array of Receiving Provinces.
   *
   * @param rcvProvList ArrayList object of receiving provinces
   */
  public void setRcvProvList(ArrayList list) {
    rcvProvList = list;
  }

  // *===========================================================================*/
  // * Name : getMonitor */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett April 27 2005 Added so can shut down the batch import */
  // * if required. */
  // *===========================================================================*/
  /**
   * Gets the Handler Monitor used to monitor the progress of a run and to signal action needs to be
   * taken if problems arise.
   *
   * @return monitor HandlerMonitor object
   */
  public HandlerMonitor getMonitor() {
    return monitor;
  }

  // *===========================================================================*/
  // * Name : setMonitor */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett April 27 2005 Added so can shut down the batch import */
  // * if required. */
  // *===========================================================================*/
  /**
   * Sets the Handler Monitor used to monitor the progress of a run and to signal action needs to be
   * taken if problems arise.
   *
   * @param monitor HandlerMonitor object
   */
  public void setMonitor(HandlerMonitor monitor) {
    this.monitor = monitor;
  }

  // *===========================================================================*/
  // * Name : validateTime */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett January 12 2005 Initial Spec */
  // *===========================================================================*/
  /** Checks if the province at its current status can be run at the current time */
  protected boolean validateTime(String curStatus, String statusKey, Hashtable provTransList) {
    logger.debug("Calling checkTime() started.");

    Calendar cal = new GregorianCalendar();
    int currentTime = (((cal.get(Calendar.HOUR_OF_DAY)) * 60) + cal.get(Calendar.MINUTE));
    ProvTransitionsStats ps = (ProvTransitionsStats) (provTransList.get(statusKey));
    logger.debug("Start Inclusive time(minutes): " + ps.getInclStartTimeMins());
    logger.debug("End   Inclusive time(minutes): " + ps.getInclEndTimeMins());
    logger.debug("Start Exclusive time(minutes): " + ps.getExclStartTimeMins());
    logger.debug("End   Exclusive time(minutes): " + ps.getExclEndTimeMins());
    logger.debug("Current time (minutes):        " + currentTime);

    boolean validRun = false;

    // Inclusive Date Checking
    // If Start and End Time are null then run can continue
    if ((ps.getInclStartTimeMins() == 0) && (ps.getInclEndTimeMins() == 0)) {
      validRun = true;
    }

    // Inclusive Date Checking
    // If End Time is null
    // If Start Time is not null and current time is >= Start Time then run valid otherwise not
    else if ((ps.getInclStartTimeMins() != 0) && (ps.getInclEndTimeMins() == 0)) {
      if (currentTime >= (ps.getInclStartTimeMins())) {
        validRun = true;
      } else {
        validRun = false;
      }
    }

    // Inclusive Date Checking
    // If Start Time is null
    // If End Time is not null and current time is < End Time then run valid otherwise not
    else if ((ps.getInclStartTimeMins() == 0) && (ps.getInclEndTimeMins() != 0)) {
      if (currentTime >= ps.getInclEndTimeMins()) {
        validRun = false;
      } else {
        validRun = true;
      }
    }
    // Inclusive Date Checking
    // If Start Time and End Time are not null
    // If current time >= Start Time and < End Time then run valid, otherwise not.
    // Takes into consideration time ranges that span midnight
    else if ((ps.getInclStartTimeMins() != 0) && (ps.getInclEndTimeMins() != 0)) {
      if (ps.getInclStartTimeMins() <= ps.getInclEndTimeMins()) {
        if (currentTime < ps.getInclStartTimeMins()) {
          validRun = false;
        } else {
          if (currentTime >= ps.getInclEndTimeMins()) {
            validRun = false;
          } else {
            validRun = true;
          }
        }
      } else {
        if (currentTime >= ps.getInclStartTimeMins()) {
          validRun = true;
        } else {
          if (currentTime < ps.getInclEndTimeMins()) {
            validRun = true;
          } else {
            validRun = false;
          }
        }
      }
    }

    // Only do Exclusive Date checking if process passed the Inclusive Date Check
    if (validRun) {
      // Exclusive Date Checking
      // If Start and End Time are null then run can continue
      if ((ps.getExclStartTimeMins() == 0) && (ps.getExclEndTimeMins() == 0)) {
        validRun = true;
      }

      // Exclusive Date Checking
      // If End Time is null
      // If Start Time is not null and current time is < Start Time then run valid otherwise not
      else if ((ps.getExclStartTimeMins() != 0) && (ps.getExclEndTimeMins() == 0)) {
        if (currentTime >= ps.getExclStartTimeMins()) {
          validRun = false;
        } else {
          validRun = true;
        }
      }

      // Exclusive Date Checking
      // If Start Time is null
      // If End Time is not null and current time is > End Time then run valid otherwise not
      else if ((ps.getExclStartTimeMins() == 0) && (ps.getExclEndTimeMins() != 0)) {
        if (currentTime >= ps.getExclEndTimeMins()) {
          validRun = true;
        } else {
          validRun = false;
        }
      }
      // Exclusive Date Checking
      // If Start Time and End Time are not null
      // If current time >= Start Time and < End Time then run valid, otherwise not.
      // Takes into consideration time ranges that span midnight
      else if ((ps.getExclStartTimeMins() != 0) && (ps.getExclEndTimeMins() != 0)) {
        if (ps.getExclStartTimeMins() <= ps.getExclEndTimeMins()) {
          if (currentTime < ps.getExclStartTimeMins()) {
            validRun = true;
          } else {
            if (currentTime >= ps.getExclEndTimeMins()) {
              validRun = true;
            } else {
              validRun = false;
            }
          }
        } else {
          if (currentTime >= ps.getExclStartTimeMins()) {
            validRun = false;
          } else {
            if (currentTime < ps.getExclEndTimeMins()) {
              validRun = false;
            } else {
              validRun = true;
            }
          }
        }
      }
    }
    return validRun;
  }

  public abstract void initialize() throws ProcessException;

  public abstract void process(Province curProv, String stepCode)
      throws ProcessException, IOException, SQLException;
}
