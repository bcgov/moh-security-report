/**
 * ****************************************************************************** Licensed Materials
 * - Property of IBM * Copyright IBM Canada Ltd 2005 All Rights Reserved * Created on Jan 12, 2005 *
 * ****************************************************************************** Please do not
 * makes any changes to this file without first * updating the revision history below, under
 * description * please include Harvest Change Request or PSO Tools CR that * caused the change. *
 * ****************************************************************************** Revision History:
 * * * Date Name Description * ---------- ----------------
 * --------------------------------------------- * 01-18-2005 David Bartlett Initial Spec *
 * ******************************************************************************
 */
package moh.hpc.month.end.resident.processors;

import jakarta.enterprise.context.Dependent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Hashtable;
import java.util.Properties;
import moh.hpc.month.end.constants.PropertyFileKeys;
import moh.hpc.month.end.exceptions.ProcessException;
import moh.hpc.month.end.services.MEDataService;
import moh.hpc.month.end.support.ProvTransitionsStats;
import moh.hpc.month.end.support.Province;
import moh.hpc.month.end.support.Reports;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Dependent
public class MEReqRptPreProcessor extends MonthEndResProcessor {
  private Properties prp = null;
  private MEDataService ds = null;
  private Hashtable provStatList = null;

  private String startingStatus = null;
  private String nextStatus = null;
  private String successTrans = null;
  private String statusKey = null;
  private String requestRptStep = null;
  private String defaultStep = null;

  private String adjReqRptType = null;
  private String declReqRptType = null;

  private String claimType1 = null;
  private String claimType2 = null;
  private static Logger logger = LoggerFactory.getLogger("MEReqRptPreProcessor");

  // *===========================================================================*/
  // * Name    : constructor                                                     */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   January 18 2005   Initial Spec                            */
  // *===========================================================================*/
  public MEReqRptPreProcessor() {
    super();
  }

  // *===========================================================================*/
  // * Name    : initialize                                                      */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   January 18 2005   Initial Spec                            */
  // *===========================================================================*/
  /**
   * Sets up class objects (properties, dataservice, province status list) and other variables to be
   * used in the process().
   *
   * @throws ProcessException
   */
  public void initialize() throws ProcessException {
    logger.debug("Calling initialize() started.");
    prp = getProperties();
    ds = getDataService();
    provStatList = getProvStatList();
    startingStatus = prp.getProperty(PropertyFileKeys.PRP_RES_PROV_STAT_CLMDONE);
    successTrans = prp.getProperty(PropertyFileKeys.PRP_PROV_TRANS_CAUSE_SUCCESS);

    requestRptStep = prp.getProperty(PropertyFileKeys.PRP_RES_REQRPT_STEP);
    defaultStep = prp.getProperty(PropertyFileKeys.PRP_RES_STEP_DEF);

    adjReqRptType = prp.getProperty(PropertyFileKeys.PRP_RES_RPT_ADJ_REQ_TYPE);
    declReqRptType = prp.getProperty(PropertyFileKeys.PRP_RES_RPT_DECL_REQ_TYPE);

    claimType1 = prp.getProperty(PropertyFileKeys.PRP_ME_CLAIM_TYPE1);
    claimType2 = prp.getProperty(PropertyFileKeys.PRP_ME_CLAIM_TYPE2);

    try {
      if ((startingStatus.trim().length() == 0)
          || (successTrans.trim().length() == 0)
          || (requestRptStep.trim().length() == 0)
          || (defaultStep.trim().length() == 0)
          || (claimType1.trim().length() == 0)
          || (claimType2.trim().length() == 0)
          || (adjReqRptType.trim().length() == 0)
          || (declReqRptType.trim().length() == 0)) {
        logger.error(
            "Some properties for the request(s) report preprocessor are null when they cannot be");
        logger.error("Request(s) Report Starting Status: " + startingStatus);
        logger.error("Success Transition Code:           " + successTrans);
        logger.error("Request(s) Report Step Code:       " + requestRptStep);
        logger.error("Default Step Code:                 " + defaultStep);
        logger.error("Inpatient Claim Type:              " + claimType1);
        logger.error("Outpatient Claim Type:             " + claimType2);
        logger.error("Adjustment Request Report Type:    " + adjReqRptType);
        logger.error("Declaration Request Report Type:   " + declReqRptType);
        throw new ProcessException(new Exception("Config File Parameter error"));
      }
    } catch (NullPointerException npe) {
      logger.error("Missing properties in the config file " + npe);
      throw new ProcessException(npe);
    }

    try {
      statusKey = startingStatus.trim() + ":" + successTrans.trim();
      nextStatus = ((ProvTransitionsStats) (provStatList.get(statusKey))).getEndStatus();
    } catch (NullPointerException npe) {
      logger.error("Next status not found in transition statuas list using " + nextStatus);
      throw new ProcessException(npe);
    }

    logger.debug("Calling initialize() finished.");
  }

  // *===========================================================================*/
  // * Name    : process                                                         */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   January 18 2005   Initial Spec                            */
  // *===========================================================================*/
  /**
   * Calls the preProcess application for the Request Reports. Note that there are three reports and
   * thus three preProcess applications (Inpatient Adjustment requests, Inpatient Declaration
   * request and Outpatient Adjustment Requests). The preProcessors will generate and store values
   * in a temp table for the three reports.
   *
   * @param curProv A province object for the current object being processed.
   * @param stepCode Code indicating whether or not this step of the month end should be executed It
   *     will usually be defaulted to 'ALL'
   * @throws SQLException, IOException, ProcessException
   */
  public void process(Province curProv, String stepCode)
      throws SQLException, IOException, ProcessException {
    logger.debug("Calling process() started.");
    logger.info("");
    logger.info(
        "Starting Request Report Preprocessor step for Province/Status: "
            + curProv.getProvince()
            + "/"
            + curProv.getCurStatus());
    logger.info("Processor Starting Status: " + startingStatus);
    logger.info("Processor Step Code:       " + stepCode);

    String sessionId = "ME: " + this.getClass().getName();
    curProv.setInpAdjReqRpt(null);
    curProv.setInpDeclReqRpt(null);
    curProv.setProvError(false);

    // ***********************************************
    // Ensure that the next and current status
    // fields are not null
    // ***********************************************
    if ((nextStatus == null)
        || (nextStatus.trim().length() == 0)
        || (curProv.getCurStatus() == null)
        || (curProv.getCurStatus().trim().length() == 0)) {
      logger.error(
          "One or more of the status fields are null for province: " + curProv.getProvince());
      logger.error("Current Status: " + curProv.getCurStatus());
      logger.error("Next Status:    " + nextStatus);
      throw new ProcessException(new Exception("Province is in error: " + curProv.getProvince()));
    }

    // *************************************************************
    // Only process the province if it is at the correct status,
    // there was no overriding step command and it is valid to run
    // the province at its current status at the current time
    // *************************************************************
    if ((curProv.getCurStatus().equals(startingStatus))
        && ((stepCode.equals(defaultStep)) || (stepCode.equals(requestRptStep)))) {
      if (!validateTime(curProv.getCurStatus(), statusKey, provStatList)) {
        logger.info(
            "The current Province is not allowed to run at this time at its current status");
        logger.info("Province/Status: " + curProv.getProvince() + "/" + curProv.getCurStatus());
        curProv.setProvError(true);
      } else {
        logger.info(
            "Determining the Request(s) Report Request Ids for province: " + curProv.getProvince());
        ds.lockProvince(
            curProv.getProvince(), curProv.getProvDetails().getResidencyType(), sessionId);
        Reports outpAdjReqReport =
            ds.preProcessRequestRpt(curProv.getProvince(), adjReqRptType, claimType2, sessionId);
        Reports inpAdjReqReport =
            ds.preProcessRequestRpt(curProv.getProvince(), adjReqRptType, claimType1, sessionId);
        Reports inpDeclReqReport =
            ds.preProcessRequestRpt(curProv.getProvince(), declReqRptType, claimType1, sessionId);

        // Check if a report request id was returned
        if ((inpAdjReqReport == null)
            || (inpAdjReqReport.getRptRequestId() == 0)
            || (inpDeclReqReport == null)
            || (inpDeclReqReport.getRptRequestId() == 0)
            || (outpAdjReqReport == null)
            || (outpAdjReqReport.getRptRequestId() == 0)) {
          if ((inpAdjReqReport == null) || (inpAdjReqReport.getRptRequestId() == 0)) {
            logger.error(
                "Inpatient Adjustment Request Report PreProcess did not return a report request id for the province: "
                    + curProv.getProvince());
          }

          if ((outpAdjReqReport == null) || (outpAdjReqReport.getRptRequestId() == 0)) {
            logger.error(
                "Outpatient Adjustment Request Report PreProcess did not return a report request id for the province: "
                    + curProv.getProvince());
          }

          if ((inpDeclReqReport == null) || (inpDeclReqReport.getRptRequestId() == 0)) {
            logger.error(
                "Inpatient Declaration Request Report PreProcess did not return a report request id for the province: "
                    + curProv.getProvince());
          }

          curProv.setOutpAdjReqRpt(null);
          curProv.setInpAdjReqRpt(null);
          curProv.setInpDeclReqRpt(null);
          curProv.setProvError(true);
        } else {
          logger.info(
              "Province: "
                  + curProv.getProvince()
                  + " Inpatient Adjustment Request Rpt Request Id is:  "
                  + inpAdjReqReport.getRptRequestId());
          logger.info(
              "Province: "
                  + curProv.getProvince()
                  + " Outpatient Adjustment Request Rpt Request Id is:  "
                  + outpAdjReqReport.getRptRequestId());
          logger.info(
              "Province: "
                  + curProv.getProvince()
                  + " Inpatient Declaration Request Rpt Request Id is: "
                  + inpDeclReqReport.getRptRequestId());
          curProv.setOutpAdjReqRpt(outpAdjReqReport);
          curProv.setInpAdjReqRpt(inpAdjReqReport);
          curProv.setInpDeclReqRpt(inpDeclReqReport);
          curProv.setProvError(false);
        }
      }
    }
    logger.debug("Calling process() finished.");
  }
}
