/**
 * ****************************************************************************** Licensed Materials
 * - Property of IBM * Copyright IBM Canada Ltd 2005 All Rights Reserved * Created on Jan 14, 2005 *
 * ****************************************************************************** Please do not
 * makes any changes to this file without first * updating the revision history below, under
 * description * please include Harvest Change Request or PSO Tools CR that * caused the change. *
 * ****************************************************************************** Revision History:
 * * * Date Name Description * ---------- ----------------
 * --------------------------------------------- * 02-16-2005 David Bartlett Initial Spec *
 * ******************************************************************************
 */
package moh.hpc.month.end.nonresident.processors;

import jakarta.enterprise.context.Dependent;
import java.sql.SQLException;
import java.util.Hashtable;
import java.util.Properties;
import moh.hpc.month.end.constants.ApplicationConstants;
import moh.hpc.month.end.constants.PropertyFileKeys;
import moh.hpc.month.end.exceptions.ProcessException;
import moh.hpc.month.end.services.MEDataService;
import moh.hpc.month.end.support.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Dependent
public class MERolloverProcessor extends MonthEndNonResProcessor {
  private Properties prp = null;
  private MEDataService ds = null;
  private Hashtable provStatList = null;

  private String trtProvStartStat = null;
  private String rcvProvStartStat = null;
  private String startingStatus = null;
  private String trtProvNextStat = null;
  private String rcvProvNextStat = null;
  private String nextStatus = null;
  private String advMonthTrans = null;

  private String trtStatusKey = null;
  private String rcvStatusKey = null;
  private String statusKey = null;

  private String rolloverStep = null;
  private String defaultStep = null;

  private static Logger logger = LoggerFactory.getLogger("MERolloverProcessor");

  public MERolloverProcessor() {
    super();
  }

  /**
   * Sets up class objects (properties, dataservice, province status list) and other variables to be
   * used in the process().
   *
   * @throws ProcessException
   */
  @Override
  public void initialize() throws ProcessException {
    logger.debug("Calling initialize() started.");
    prp = getProperties();
    ds = getDataService();
    provStatList = getProvStatList();

    trtProvStartStat = prp.getProperty(PropertyFileKeys.PRP_NONRES_TPROV_STAT_FTPDONE);
    rcvProvStartStat = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_STAT_FTPDONE);
    rolloverStep = prp.getProperty(PropertyFileKeys.PRP_NONRES_RPROV_ROLLOVER_STEP);
    advMonthTrans = prp.getProperty(PropertyFileKeys.PRP_PROV_TRANS_CAUSE_ADVMONTH);
    defaultStep = prp.getProperty(PropertyFileKeys.PRP_NONRES_STEP_DEF);

    try {
      if ((trtProvStartStat.trim().length() == 0)
          || (rcvProvStartStat.trim().length() == 0)
          || (advMonthTrans.trim().length() == 0)
          || (rolloverStep.trim().length() == 0)
          || (defaultStep.trim().length() == 0)) {
        logger.error("Some properties for the rollover processor are null when they cannot be");
        logger.error("Treating  Province Rollover Starting Status: " + trtProvStartStat);
        logger.error("Receiving Province Rollover Starting Status: " + rcvProvStartStat);
        logger.error("Success Transition Code:                     " + advMonthTrans);
        logger.error("Rollover Step Code:                          " + rolloverStep);
        logger.error("Default Step Code:                           " + defaultStep);
        throw new ProcessException(new Exception("Config File Parameter error"));
      }
    } catch (NullPointerException npe) {
      logger.error("Missing properties in the config file " + npe);
      throw new ProcessException(npe);
    }
    // *********************************************
    // Determine next status
    // *********************************************
    try {
      trtStatusKey = trtProvStartStat.trim() + ":" + advMonthTrans.trim();
      trtProvNextStat = ((ProvTransitionsStats) (provStatList.get(trtStatusKey))).getEndStatus();
      rcvStatusKey = rcvProvStartStat.trim() + ":" + advMonthTrans.trim();
      rcvProvNextStat = ((ProvTransitionsStats) (provStatList.get(rcvStatusKey))).getEndStatus();
    } catch (NullPointerException npe) {
      logger.error("Next status not found in transition status list using " + nextStatus);
      throw new ProcessException(npe);
    }
    logger.debug("Calling initialize() finished.");
  }

  /**
   * Once all provinces have been successfully processed for the resident month end, their statuses
   * need to be reset to their month end starting status and the processing month needs to be
   * advanced to the next month.
   *
   * @param curProv A province object for the current object being processed.
   * @param stepCode Code indicating whether or not this step of the month end should be executed It
   *     will usually be defaulted to 'ALL'
   * @throws SQLException
   * @throws ProcessException
   */
  @Override
  public void process(Province curProv, String stepCode) throws SQLException, ProcessException {
    logger.debug("Calling process() started.");
    logger.info("");
    logger.info(
        "Starting Rollover step for Province/Status: "
            + curProv.getProvince()
            + "/"
            + curProv.getCurStatus());

    String sessionId = "ME: " + this.getClass().getName() + logger.getName();
    curProv.setProvError(false);

    // ***********************************************
    // Ensure province is flagged as either a treating
    // or receving province
    // ***********************************************
    if ((curProv.getProvDetails().getTProvinceFlag())
        && (!curProv.getProvDetails().getRProvinceFlag())) {
      startingStatus = trtProvStartStat;
      statusKey = trtStatusKey;
      nextStatus = trtProvNextStat;
      logger.info("Processor Starting Status: " + startingStatus);
      logger.info("Processor Step Code:       " + stepCode);

    } else if ((curProv.getProvDetails().getRProvinceFlag())
        && (!curProv.getProvDetails().getTProvinceFlag())) {
      startingStatus = rcvProvStartStat;
      statusKey = rcvStatusKey;
      nextStatus = rcvProvNextStat;
      logger.info("Processor Starting Status: " + startingStatus);
      logger.info("Processor Step Code:       " + stepCode);
    } else {
      curProv.setProvError(true);
      logger.error(
          "Province must be identified as either treating OR receiving. It is neither or both. ");
      logger.error("Treating flag is: " + curProv.getProvDetails().getTProvinceFlag());
      logger.error("Receiving flag is: " + curProv.getProvDetails().getRProvinceFlag());
      throw new ProcessException(new Exception("Province is in error: " + curProv.getProvince()));
    }

    // ***********************************************
    // Ensure that the next and current status
    // fields are not null
    // ***********************************************
    if ((nextStatus == null)
        || (nextStatus.trim().length() == 0)
        || (curProv.getCurStatus() == null)
        || (curProv.getCurStatus().trim().length() == 0)) {
      logger.error(
          "One or more of the status fields are null for province: " + curProv.getProvince());
      logger.error("Current Status: " + curProv.getCurStatus());
      logger.error("Next Status:    " + nextStatus);
      throw new ProcessException(new Exception("Province is in error: " + curProv.getProvince()));
    }

    // *************************************************************
    // Only process the province if it is at the correct status,
    // there was no overriding step command and it is valid to run
    // the province at its current status at the current time
    // *************************************************************
    if ((curProv.getCurStatus().equals(startingStatus))
        && ((stepCode.equals(defaultStep)) || (stepCode.equals(rolloverStep)))
        && (!(getMECompleteFlag()))) {
      if (!validateTime(curProv.getCurStatus(), statusKey, provStatList)) {
        logger.info(
            "The current Province is not allowed to run at this time at its current status");
        logger.info("Province/Status: " + curProv.getProvince() + "/" + curProv.getCurStatus());
        curProv.setProvError(true);
      } else {
        logger.info("Checking if non-resident month end complete");
        ds.lockProvince(
            curProv.getProvince(), curProv.getProvDetails().getResidencyType(), sessionId);
        if (ds.advanceProcMonth(curProv.getProvDetails().getResidencyType(), sessionId)
            == ApplicationConstants.SUCCESS) {
          logger.info("Month End Complete. ");
          logger.info("   Provinces have been reset.");
          logger.info("   Processing month has been advanced.");
          setMECompleteFlag(true);
          curProv.setProvError(false);
          curProv.setCurStatus(nextStatus);
        }
      }
    }
    logger.debug("Calling process() finished.");
  }
}
