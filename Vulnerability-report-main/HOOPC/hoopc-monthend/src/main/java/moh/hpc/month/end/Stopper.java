package moh.hpc.month.end;

import java.io.File;
import java.util.Properties;
import moh.hpc.month.end.constants.*;
import org.apache.log4j.PropertyConfigurator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/* **************************************************************
 * Licensed Materials - Property of IBM                       *
 * Copyright IBM Canada Ltd 2004 All Rights Reserved        *
 **************************************************************
 * Please do not makes any changes to this file without first *
 * updating the revision history below, under description     *
 * please include Harvest Change Request or PSO Tools CR that *
 * caused the change.                                         *
 **************************************************************
 * Revision History:                                          *
 *    Date       Author                  Description          *
 **************************************************************
 * 06-21-2004    David C. Bartlett       Initial Creation     *
 *                                                            *
 ************************************************************** */
public class Stopper implements Runnable {
  private static Logger logger = LoggerFactory.getLogger("Stopper");
  private File stopFile = null;
  private ShutdownHook shutdown = null;
  private Thread myThread = null;
  private boolean stop = false;

  /** =========================================================================== */
  /** Name : Stopper */
  /** Purpose : Constructor. */
  /** Descr: When the stopper object is instantiated this process retrieves */
  /** the name of the shutdown file from the config file. Then the */
  /** stopper is set up as a thread to look for the existence of the */
  /** of the shutdown file while the reactivator is running. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett June 21 2004 Initial Spec */
  /** =========================================================================== */
  public Stopper(Properties prp, ShutdownHook hook) {
    String shutdownFile = prp.getProperty(PropertyFileKeys.PRP_SHUTDOWN_FILE);
    stopFile = new File(shutdownFile);
    shutdown = hook;
    myThread = new Thread(this, "Stopper Thread");
    myThread.setDaemon(true);
    myThread.start();
  }

  /** =========================================================================== */
  /** Name : Stopper */
  /** Purpose : Constructor. */
  /** Descr: When the stopper object is instantiated using using this */
  /** constructor it is only so the deleteStopFile can be called. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett August 06 2004 Initial Spec */
  /** =========================================================================== */
  public Stopper(Properties prp) {
    String shutdownFile = prp.getProperty(PropertyFileKeys.PRP_SHUTDOWN_FILE);
    stopFile = new File(shutdownFile);
  }

  /** =========================================================================== */
  /** Name : run */
  /** Purpose : Main processing for the Stopper thread. */
  /** Descr : Once the stopper has been setup as a thread and started this */
  /** will continue to execute until it finds the shutdown file or */
  /** the stopper has been terminated. */
  /** The shutdown file will only be created when the reactivator */
  /** needs to stopped immediately. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett June 21 2004 Initial Spec */
  /** =========================================================================== */
  public void run() {
    try {
      while (true) {
        if (stopFile.exists()) shutdown.shutdown();
        Thread.sleep(250);
      }
    } catch (InterruptedException e) {
      logger.debug("Interrupted while sleeping", e);
    }
  }

  /** =========================================================================== */
  /** Name : deleteStopFile */
  /** Purpose : Deletes the shutdown file. */
  /** Descr : Used to delete the shutdown file. If the shutdown file was */
  /** created to halt execution of the reactivator, the reactivator */
  /** cannot be restarted until the shutdown file is removed. This */
  /** process accomplishes that. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett June 21 2004 Initial Spec */
  /** =========================================================================== */
  public void deleteStopFile() {
    stopFile.delete();
    logger.info("Shutdown file removed");
  }

  /** =========================================================================== */
  /** Name : main */
  /** Purpose : Creates shutdown file. */
  /** Descr : When there is a need to shutdown the reactivator the mainline of */
  /** the stopper instance will be called to create the shutdown file. */
  /** Once the current stopper thread that is executing detects the */
  /** file that this method created the reactivator will be shutdown. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett June 22 2004 Initial Spec */
  /** =========================================================================== */
  public static void main(String[] args) {
    if (args.length >= 1) {
      java.util.Properties prp = new java.util.Properties();
      try {
        prp.load(new java.io.FileInputStream(args[0]));
        createLogger(args[0]); // we know this file exists as we already opened it

        String shutdownFile = prp.getProperty(PropertyFileKeys.PRP_SHUTDOWN_FILE);
        File f = new File(shutdownFile);
        if (f.createNewFile()) logger.info("Shutdown file created");
        else logger.info("Shutdown file already exists");
      } catch (java.io.IOException ie) {
        ie.printStackTrace();
      } catch (Exception e) {
        e.printStackTrace();
      }
    } else {
      logger.info("Usage: Stopper properties.file");
    }
  }

  /** @return */
  /** =========================================================================== */
  /** Name : isStopRequested */
  /** Purpose : Checks if a shutdown of the reactivator has been requested. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett June 22 2004 Initial Spec */
  /** =========================================================================== */
  public boolean isStopRequested() {
    return stop;
  }

  /** @param b */
  /** =========================================================================== */
  /** Name : stop */
  /** Purpose : Indicates a shutodwn has indeed been requested. */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett June 22 2004 Initial Spec */
  /** =========================================================================== */
  public void stop() {
    stop = true;
  }
  /** =========================================================================== */
  /** Name : createLogger */
  /** Purpose : Setup logger */
  /** Descr : Set up apache logger to write messages to a file at a level */
  /** determined in the property file (info, debug, fatal,etc) */
  /** History: */
  /** Developer Date Description */
  /** --------- ------------ ---------------------------------------- */
  /** DC Bartlett June 21 2004 Initial Spec */
  /** =========================================================================== */
  private static void createLogger(String loggingProperties) {
    if (loggingProperties == null) {
      PropertyConfigurator.configure(new java.util.Properties());
    } else {
      PropertyConfigurator.configureAndWatch(loggingProperties);
    }
  }
}
