/*
 * To change this template, choose Tools | Templates and open the template in the editor.
 */
package moh.hpc.month.end.resident.processors;

import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Hashtable;
import moh.hoopc.staging.SADetailRecord;
import moh.hoopc.staging.SAHeaderRecord;
import moh.hpc.month.end.FileHelper;
import moh.hpc.month.end.constants.ApplicationConstants;
import moh.hpc.month.end.constants.batch.imprt.DtlCmn;
import moh.hpc.month.end.constants.batch.imprt.DtlInp;
import moh.hpc.month.end.constants.batch.imprt.DtlOutp;
import moh.hpc.month.end.constants.batch.imprt.Hdr;
import moh.hpc.month.end.constants.batch.imprt.InputFileFormat;
import moh.hpc.month.end.exceptions.ProcessException;
import moh.hpc.month.end.support.ProvinceFilter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MEFilePreProcessor {

  private String inputPath = null;
  private String processDir = null;
  private String trashDir = null;
  private String province = null;
  private static Logger logger = LoggerFactory.getLogger("MEFilePreProcessor");
  Hashtable onAmountMapping = new Hashtable();

  /**
   * Process a povince file
   *
   * @param province Province code, like "ON"
   */
  public void processFiles(String province) {

    // ***********************
    this.province = province;
    FileHelper fh = new FileHelper();
    File inputFile;
    File inpDir;
    String fileName;
    initiateMapping();
    logger.debug("Start to preprocess provicne:" + province);
    try {
      inpDir = fh.createDir(inputPath);
      if (!(inpDir.exists())) {
        throw new ProcessException(new Exception("Directory does not exist: " + inpDir));
      }
      ProvinceFilter pf = new ProvinceFilter(province);
      File[] list = inpDir.listFiles(pf);
      logger.debug("Get all files, file count" + list.length);
      int i = 0;
      while (i < list.length) {
        fileName = ((File) list[i]).getName();
        logger.debug("Starting to process file:" + fileName);
        inputFile = new File(inpDir, fileName);
        if (!fileName.toUpperCase().startsWith(province.toUpperCase())) {
          continue;
        }

        if (processFile(inputFile) == ApplicationConstants.SUCCESS) {
          // Move the origrinal file to Trash folder
          File trashFile = new File(trashDir, ((File) list[i]).getName());
          if (trashFile.exists()) {
            trashFile.delete();
          }
          inputFile.renameTo(trashFile);
        }
        i++;
      }
      logger.debug("Preprocessing the " + province + " completed");
    } catch (Exception ex) {
      logger.error("Error at getting the files to process", ex);
    }
  }

  /**
   * Process a file
   *
   * @param provinceFile
   * @throws IOException
   */
  private int processFile(File provinceFile) throws IOException {
    FileHelper fh = new FileHelper();
    BufferedReader inFile = null;
    SAHeaderRecord headerRec = new SAHeaderRecord();
    logger.debug("Starting converting file:" + provinceFile.getName());
    try {
      inFile = fh.createReader(provinceFile.getPath());
      String inputLine = inFile.readLine();
      boolean isBillingPeriodSet = false;
      ArrayList tempResults = new ArrayList();

      // to prevent from processing same file twice
      if (provinceFile.getName().endsWith(".ON")
          && inputLine != null
          && inputLine.startsWith("H")) {
        return ApplicationConstants.FAILURE;
      }

      while (inputLine != null && !inputLine.trim().isEmpty()) {

        if (isTrailerRecord(inputLine)) {
          getHeaderRecord(inputLine, headerRec);
        } else {

          tempResults.add(getDetailRecord(inputLine));
          if (!isBillingPeriodSet) {
            headerRec.setBillingPeriod(
                getSubString(
                    inputLine,
                    InputFileFormat.I_09_BILL_PERIOD_START,
                    InputFileFormat.I_09_BILL_PERIOD_LENTH - 2));
            isBillingPeriodSet = true;
          }
        }
        inputLine = inFile.readLine();
      }

      ArrayList results = new ArrayList();
      results.add(formatTrailerToStandardFormat(headerRec));
      results.addAll(tempResults);
      createFile(results, provinceFile);
      logger.debug("converting file done:" + provinceFile.getName());
      return ApplicationConstants.SUCCESS;
    } catch (Exception ex) {
      System.out.print(ex);
      logger.error("Error in pcoverting a file: " + provinceFile.getName());
    } finally {
      if (inFile != null) {
        fh.closeReader(inFile);
      }
    }
    return ApplicationConstants.FAILURE;
  }

  private void createFile(ArrayList results, File provinceFile) {
    FileHelper fh = new FileHelper();
    PrintWriter pwt1 = null;
    String fileName = provinceFile.getName() + "." + province;
    logger.debug("PreProcess - creating file: " + inputPath + province);
    try {
      File newFile = fh.createFile(fileName, inputPath);
      pwt1 = fh.createWriter(newFile.getPath());
      for (int i = 0; i < results.size(); i++) {
        pwt1.println((String) results.get(i));
      }
    } catch (Exception e) {
      logger.error("Error in creating a file", e);
    } finally {
      fh.closeWriter(pwt1);
    }
  }

  private void getHeaderRecord(String line, SAHeaderRecord headerRec) {

    headerRec.setRecordType(ApplicationConstants.IMPORT_FILE_HDR_CODE);
    headerRec.setReceivingProvince(
        getSubString(line, InputFileFormat.T_03_BILL_TO_START, InputFileFormat.T_03_BILL_TO_LENTH));
    headerRec.setTreatingProvince(
        getSubString(
            line, InputFileFormat.T_04_BILL_FROM_START, InputFileFormat.T_04_BILL_FROM_LENTH));
    headerRec.setDateSubmitted(
        getSubString(
            line,
            InputFileFormat.T_05_DATE_SUBMITTED_START,
            InputFileFormat.T_05_DATE_SUBMITTED_LENTH));
    headerRec.setTotalNumberDetails(
        getSubString(
            line,
            InputFileFormat.T_07_TOTAL_RECORD_START,
            InputFileFormat.T_07_TOTAL_RECORD_LENTH));
    headerRec.setTotalAmount(
        getSubString(
            line,
            InputFileFormat.T_08_TOTAL_AMOUNT_START,
            InputFileFormat.T_08_TOTAL_AMOUNT_LENTH));
  }

  private String getDetailRecord(String line) {
    SADetailRecord detailRecord = new SADetailRecord();
    if (isInpatientRecord(line)) {
      detailRecord.setPatientBatch(
          getSubString(
              line,
              InputFileFormat.I_01_RECIPIENT_BATCH_START,
              InputFileFormat.I_01_RECIPIENT_BATCH_LENTH));

      String recordType =
          getSubString(
              line, InputFileFormat.I_02_RECORD_TYPE_START, InputFileFormat.I_02_RECORD_TYPE_LENTH);
      if ("ON".equalsIgnoreCase(province) && "D".equalsIgnoreCase(recordType)) {
        detailRecord.setRecordType2("E");
      } else if ("ON".equalsIgnoreCase(province) && "E".equalsIgnoreCase(recordType)) {
        detailRecord.setRecordType2("#");
      } else {
        detailRecord.setRecordType2(recordType);
      }

      detailRecord.setHospitalNumber(
          getSubString(
              line, InputFileFormat.I_05_HOSP_CODE_START, InputFileFormat.I_05_HOSP_CODE_LENTH));
      detailRecord.setInsuranceCardNumber(
          getSubString(line, InputFileFormat.I_10_PHN_START, InputFileFormat.I_10_PHN_LENTH));
      detailRecord.setInsuranceCardExpiryDate(
          getSubString(
              line,
              InputFileFormat.I_11_PHN_EXPIRE_DATE_START,
              InputFileFormat.I_11_PHN_EXPIRE_DATE_LENTH));
      detailRecord.setLastName(
          getSubString(
              line, InputFileFormat.I_12_SURNAME_START, InputFileFormat.I_12_SURNAME_LENTH));
      detailRecord.setFirstName(
          getSubString(
              line, InputFileFormat.I_13_FIRST_NAME_START, InputFileFormat.I_13_FIRST_NAME_LENTH));
      detailRecord.setAddress1(
          getSubString(
              line, InputFileFormat.I_15_ADDRESS_1_START, InputFileFormat.I_15_ADDRESS_1_LENTH));
      parseAddress(
          detailRecord,
          getSubString(
              line, InputFileFormat.I_16_ADDRESS_2_START, InputFileFormat.I_16_ADDRESS_2_LENTH));
      detailRecord.setBirthDate(
          getSubString(
              line, InputFileFormat.I_17_BIRTH_DAY_START, InputFileFormat.I_17_BIRTH_DAY_LENTH));
      detailRecord.setSexCode(
          getSubString(line, InputFileFormat.I_18_GENDER_START, InputFileFormat.I_18_GENDER_LENTH).toUpperCase());
      detailRecord.setDiagnosCode1(
          getSubString(
              line,
              InputFileFormat.I_19_DIAG_CODE_1_START,
              InputFileFormat.I_19_DIAG_CODE_1_LENTH));
      detailRecord.setDiagnosCode2(
          getSubString(
              line,
              InputFileFormat.I_20_DIAG_CODE_2_START,
              InputFileFormat.I_20_DIAG_CODE_2_LENTH));
      detailRecord.setDiagnosCode3(
          getSubString(
              line,
              InputFileFormat.I_21_DIAG_CODE_3_START,
              InputFileFormat.I_21_DIAG_CODE_3_LENTH));
      detailRecord.setProcedureCode1(
          getSubString(
              line,
              InputFileFormat.I_22_PROC_CODE_1_START,
              InputFileFormat.I_22_PROC_CODE_1_LENTH));
      detailRecord.setProcedureCode2(
          getSubString(
              line,
              InputFileFormat.I_23_PROC_CODE_2_START,
              InputFileFormat.I_23_PROC_CODE_2_LENTH));
      detailRecord.setProcedureCode3(
          getSubString(
              line,
              InputFileFormat.I_24_PROC_CODE_3_START,
              InputFileFormat.I_24_PROC_CODE_3_LENTH));
      detailRecord.setHighCostProcedureCode1(
          getSubString(
              line, InputFileFormat.I_25_HCP_CODE_START, InputFileFormat.I_25_HCP_CODE_LENTH));
      detailRecord.setHighCostProcedureDate1(
          getSubString(
              line, InputFileFormat.I_26_HCP_DATE_START, InputFileFormat.I_26_HCP_DATE_LENTH));
      detailRecord.setAdmissionDate(
          getSubString(
              line,
              InputFileFormat.I_27_ADMISSION_DATE_START,
              InputFileFormat.I_27_ADMISSION_DATE_LENTH));
      detailRecord.setDischargeDate(
          getSubString(
              line,
              InputFileFormat.I_28_DISCHARGE_DATE_START,
              InputFileFormat.I_28_DISCHARGE_DATE_LENTH));
      detailRecord.setTotalDaysStay(
          getSubString(
              line, InputFileFormat.I_29_TOTAL_DATS_START, InputFileFormat.I_29_TOTAL_DAYS_LENTH));
      detailRecord.setPerDiemRate(
          getSubString(
              line, InputFileFormat.I_30_WARD_RATE_START, InputFileFormat.I_30_WARD_RATE_LENTH));
      detailRecord.setTotalAmountClaimed(
          getSubString(
              line,
              InputFileFormat.I_32_TOTAL_AMOUNT_START,
              InputFileFormat.I_32_TOTAL_AMOUNT_LENTH));
      detailRecord.setDeceasedFlag(
          getSubString(
              line,
              InputFileFormat.I_33_DECEASED_INDICATOR_START,
              InputFileFormat.I_33_DECEASED_INDICATOR__LENTH));
      detailRecord.setLongTermStayInd(
          getSubString(
              line,
              InputFileFormat.I_34_LONG_STAY_INDICATOR_START,
              InputFileFormat.I_34_LONG_STAY_INDICATOR__LENTH));
      detailRecord.setAccidentInd(
          getSubString(
              line,
              InputFileFormat.I_35_ACCIDENT_INDICATOR_START,
              InputFileFormat.I_35_ACCIDENT_INDICATOR__LENTH));
      detailRecord.setAccidentCode(
          getSubString(
              line,
              InputFileFormat.I_36_ACCIDENT_CODE_START,
              InputFileFormat.I_36_ACCIDENT_CODE__LENTH));
      detailRecord.setAdjFlag(
          parseAdjustFlag(
              getSubString(
                  line,
                  InputFileFormat.I_37_ADJUST_CODE_START,
                  InputFileFormat.I_37_ADJUST_CODE_LENTH),
              detailRecord.getTotalAmountClaimed()));
      detailRecord.setNotes(
          getSubString(line, InputFileFormat.I_38_NOTE_START, InputFileFormat.I_38_NOTE_LENTH));
    } else {
      detailRecord.setPatientBatch(
          getSubString(
              line,
              InputFileFormat.O_01_RECIPIENT_BATCH_START,
              InputFileFormat.O_01_RECIPIENT_BATCH_LENTH));

      String recordType =
          getSubString(
              line, InputFileFormat.O_02_RECORD_TYPE_START, InputFileFormat.O_02_RECORD_TYPE_LENTH);
      if ("ON".equalsIgnoreCase(province) && "D".equalsIgnoreCase(recordType)) {
        detailRecord.setRecordType2("E");
      } else if ("ON".equalsIgnoreCase(province) && "E".equalsIgnoreCase(recordType)) {
        detailRecord.setRecordType2("#");
      } else {
        detailRecord.setRecordType2(recordType);
      }

      detailRecord.setHospitalNumber(
          getSubString(
              line, InputFileFormat.O_05_HOSP_CODE_START, InputFileFormat.O_05_HOSP_CODE_LENTH));
      detailRecord.setInsuranceCardNumber(
          getSubString(line, InputFileFormat.O_10_PHN_START, InputFileFormat.O_10_PHN_LENTH));
      detailRecord.setInsuranceCardExpiryDate(
          getSubString(
              line,
              InputFileFormat.O_11_PHN_EXPIRE_DATE_START,
              InputFileFormat.O_11_PHN_EXPIRE_DATE_LENTH));
      detailRecord.setLastName(
          getSubString(
              line, InputFileFormat.O_12_SURNAME_START, InputFileFormat.O_12_SURNAME_LENTH));
      detailRecord.setFirstName(
          getSubString(
              line, InputFileFormat.O_13_FIRST_NAME_START, InputFileFormat.O_13_FIRST_NAME_LENTH));
      detailRecord.setBirthDate(
          getSubString(
              line, InputFileFormat.O_17_BIRTH_DAY_START, InputFileFormat.O_17_BIRTH_DAY_LENTH));
      detailRecord.setSexCode(
          getSubString(line, InputFileFormat.O_18_GENDER_START, InputFileFormat.O_18_GENDER_LENTH).toUpperCase());
      detailRecord.setDiagnosCode1(
          getSubString(
              line,
              InputFileFormat.O_19_DIAG_CODE_1_START,
              InputFileFormat.O_19_DIAG_CODE_1_LENTH));
      detailRecord.setDiagnosCode2(
          getSubString(
              line,
              InputFileFormat.O_20_DIAG_CODE_2_START,
              InputFileFormat.O_20_DIAG_CODE_2_LENTH));
      detailRecord.setDiagnosCode3(
          getSubString(
              line,
              InputFileFormat.O_21_DIAG_CODE_3_START,
              InputFileFormat.O_21_DIAG_CODE_3_LENTH));
      detailRecord.setProcedureCode1(
          getSubString(
              line,
              InputFileFormat.O_22_PROC_CODE_1_START,
              InputFileFormat.O_22_PROC_CODE_1_LENTH));
      detailRecord.setProcedureCode2(
          getSubString(
              line,
              InputFileFormat.O_23_PROC_CODE_2_START,
              InputFileFormat.O_23_PROC_CODE_2_LENTH));
      detailRecord.setProcedureCode3(
          getSubString(
              line,
              InputFileFormat.O_24_PROC_CODE_3_START,
              InputFileFormat.O_24_PROC_CODE_3_LENTH));
      detailRecord.setServiceCode(
          getSubString(
              line,
              InputFileFormat.O_25_SERVICE_CODE_START,
              InputFileFormat.O_25_SERVICE_CODE_LENTH));
      detailRecord.setServiceDate(
          getSubString(
              line,
              InputFileFormat.O_26_SERVICE_DATE_START,
              InputFileFormat.O_26_SERVICE_DATE_LENTH));
      detailRecord.setTotalAmountClaimed(
          getSubString(
              line,
              InputFileFormat.O_28_TOTAL_AMOUNT_START,
              InputFileFormat.O_28_TOTAL_AMOUNT_LENTH));
      detailRecord.setAdjFlag(
          parseAdjustFlag(
              getSubString(
                  line,
                  InputFileFormat.O_30_ADJUST_CODE_START,
                  InputFileFormat.O_30_ADJUST_CODE_LENTH),
              detailRecord.getTotalAmountClaimed()));
      detailRecord.setNotes(
          getSubString(line, InputFileFormat.O_31_NOTE_START, InputFileFormat.O_31_NOTE_LENTH));
      detailRecord.setProvince("BC");
    }

    return formatDetailToStandardFormat(detailRecord);
  }

  private String formatTrailerToStandardFormat(SAHeaderRecord headerRec) {
    StringBuffer tempLine = new StringBuffer();
    tempLine.append(ApplicationConstants.IMPORT_FILE_HDR_CODE);
    tempLine.append(headerRec.getTreatingProvince());
    tempLine.append(headerRec.getReceivingProvince());
    // billing period For Ontario, billing period is on each detail record, we use the first one
    tempLine.append(headerRec.getBillingPeriod());
    tempLine.append(
        padRight(headerRec.getTotalNumberDetails(), Hdr.ColEnd_05 - Hdr.ColStrt_05 + 1));
    tempLine.append(
        parseTrailerTotalAmount(headerRec.getTotalAmount(), Hdr.ColEnd_06 - Hdr.ColStrt_06 + 1));
    tempLine.append(padRight(headerRec.getVersionIdentifier(), Hdr.ColEnd_07 - Hdr.ColStrt_07 + 1));
    tempLine.append(padRight(headerRec.getDateSubmitted(), Hdr.ColEnd_08 - Hdr.ColStrt_08 + 1));
    return tempLine.toString();
  }

  private String formatDetailToStandardFormat(SADetailRecord detailRecord) {

    StringBuffer tempLine = new StringBuffer();
    tempLine.append(detailRecord.getPatientBatch()); // record type
    tempLine.append(detailRecord.getRecordType2()); // record type
    tempLine.append(parseHospitalNumber(detailRecord.getHospitalNumber()));
    tempLine.append(padRight(" ", DtlCmn.ColLength_04)); // hospital name
    tempLine.append(padRight(detailRecord.getInsuranceCardNumber(), DtlCmn.ColLength_05)); // PHN
    tempLine.append(
        padRight(detailRecord.getInsuranceCardExpiryDate(), DtlCmn.ColLength_06)); // PHN
    // expire
    // date
    tempLine.append(padRight(detailRecord.getLastName(), DtlCmn.ColLength_07)); // last name
    tempLine.append(padRight(detailRecord.getFirstName(), DtlCmn.ColLength_08)); // first name
    if (ApplicationConstants.IMPORT_FILE_DTL_INPATIENT_CODE.equals(
        detailRecord.getPatientBatch())) {
      tempLine.append(padRight(detailRecord.getAddress1(), DtlInp.ColLength_09)); // address3
      tempLine.append(padRight(detailRecord.getAddress2(), DtlInp.ColLength_10)); // address2
      tempLine.append(padRight(detailRecord.getCity(), DtlInp.ColLength_11)); // city
      tempLine.append(padRight(detailRecord.getProvince(), DtlInp.ColLength_12)); // province
      tempLine.append(padRight(detailRecord.getPostalCode(), DtlInp.ColLength_13));
      tempLine.append(padRight(detailRecord.getBirthDate(), DtlInp.ColLength_14));
      tempLine.append(padRight(detailRecord.getSexCode(), DtlInp.ColLength_15));
      tempLine.append(padRight(detailRecord.getDiagnosCode1(), DtlInp.ColLength_16));
      tempLine.append(padRight(detailRecord.getDiagnosCode2(), DtlInp.ColLength_17));
      tempLine.append(padRight(detailRecord.getDiagnosCode3(), DtlInp.ColLength_18));
      tempLine.append(padRight(detailRecord.getProcedureCode1(), DtlInp.ColLength_19));
      tempLine.append(padRight(detailRecord.getProcedureCode2(), DtlInp.ColLength_20));
      tempLine.append(padRight(detailRecord.getProcedureCode3(), DtlInp.ColLength_21));
      tempLine.append(padRight(detailRecord.getHighCostProcedureCode1(), DtlInp.ColLength_22));
      tempLine.append(padRight(detailRecord.getHighCostProcedureDate1(), DtlInp.ColLength_23));
      tempLine.append(
          padRight(
              "",
              DtlInp.ColLength_24
                  + DtlInp.ColLength_25
                  + DtlInp.ColLength_26
                  + DtlInp.ColLength_27));
      tempLine.append(padRight(detailRecord.getAdmissionDate(), DtlInp.ColLength_28));
      tempLine.append(padRight(detailRecord.getDischargeDate(), DtlInp.ColLength_29));
      tempLine.append(padRight(detailRecord.getTotalDaysStay(), DtlInp.ColLength_30));
      tempLine.append(parsePerDiemRate(detailRecord.getPerDiemRate()));
      tempLine.append(
          parseTotalAmount(
              detailRecord.getTotalAmountClaimed(),
              DtlInp.ColLength_32,
              detailRecord.getAdjFlag()));
      tempLine.append(padRight(detailRecord.getDeceasedFlag(), DtlInp.ColLength_33));
      tempLine.append(padRight(detailRecord.getLongTermStayInd(), DtlInp.ColLength_34));
      tempLine.append(padRight(detailRecord.getAccidentInd(), DtlInp.ColLength_35));
      tempLine.append(padRight(detailRecord.getAccidentCode(), DtlInp.ColLength_36));
      tempLine.append(padRight(detailRecord.getProvincialClaimId(), DtlInp.ColLength_37));
      tempLine.append(padRight(detailRecord.getAdjFlag(), DtlInp.ColLength_38));
      tempLine.append(padRight(detailRecord.getNotes(), DtlInp.ColLength_39));
    } else { // outpatient

      tempLine.append(padRight(detailRecord.getProvince(), DtlOutp.ColLength_09)); // province
      tempLine.append(padRight(detailRecord.getBirthDate(), DtlOutp.ColLength_10));
      tempLine.append(padRight(detailRecord.getSexCode(), DtlOutp.ColLength_11));
      tempLine.append(padRight(detailRecord.getDiagnosCode1(), DtlOutp.ColLength_12));
      tempLine.append(padRight(detailRecord.getDiagnosCode2(), DtlOutp.ColLength_13));
      tempLine.append(padRight(detailRecord.getDiagnosCode3(), DtlOutp.ColLength_14));
      tempLine.append(padRight(detailRecord.getServiceCode(), DtlOutp.ColLength_15));
      tempLine.append(padRight(detailRecord.getProcedureCode1(), DtlOutp.ColLength_16));
      tempLine.append(padRight(detailRecord.getProcedureCode2(), DtlOutp.ColLength_17));
      tempLine.append(padRight(detailRecord.getProcedureCode3(), DtlInp.ColLength_18));
      tempLine.append(padRight(detailRecord.getServiceDate(), DtlOutp.ColLength_19));
      tempLine.append(padRight(detailRecord.getProvincialClaimId(), DtlOutp.ColLength_20));
      tempLine.append(
          parseTotalAmount(
              detailRecord.getTotalAmountClaimed(),
              DtlOutp.ColLength_21,
              detailRecord.getAdjFlag()));
      tempLine.append(padRight(detailRecord.getAdjFlag(), DtlOutp.ColLength_22));
      tempLine.append(padRight(detailRecord.getNotes(), DtlOutp.ColLength_23));
    }

    return tempLine.toString();
  }

  private void parseAddress(SADetailRecord detailRecord, String line) {
    String[] items = line.split(",");
    if (items.length > 0) {
      detailRecord.setCity(items[0]);
    }

    if (items.length > 1) {
      detailRecord.setProvince(items[1]);
    }

    if (items.length > 2) {
      detailRecord.setPostalCode(parsePostalCode(items[2]));
    }
  }

  /**
   * If Ontario value: = If P or p: assign Y, If <blank> : assign N, otherwise assign error value #N
   */
  private String parseAdjustFlag(String adjFlag, String totalAmount) {

    if ("P".equalsIgnoreCase(adjFlag) && isNegativeAmount(totalAmount)) {
      return "Y";
    } else if (" ".equals(adjFlag) && !isNegativeAmount(totalAmount)) {
      return "N";
    } else {
      return "#";
    }
  }

  /**
   * If first 3 characters are not ‘000’, overflow will occur so set error value (all ‘#s’) on HOOPC
   * input file
   *
   * @input hospital number
   */
  private String parseHospitalNumber(String input) {
    if (input == null || !input.startsWith("000")) {
      return padLeft("", DtlCmn.ColLength_03, "#");
    } else {
      return padRight(removeLeadingZero(input), DtlCmn.ColLength_03);
    }
  }

  /**
   * Different field lengths: 9(6)v99 for Ontario, vs 9(4).99 for HOOPC input. If Ontario value
   * >9999.99, overflow will occur so set error value (all ‘#s’) on HOOPC input file If first 3
   * characters are not ‘000’, overflow will occur so set error * value (all ‘#s’) on HOOPC input
   * file
   *
   * @input per diem rate
   */
  private String parsePerDiemRate(String input) {
    if (input == null || !input.startsWith("00")) {
      return padLeft("", DtlInp.ColLength_31, "#");
    } else {
      return padLeft(parseAmount(input, DtlInp.ColLength_31), DtlInp.ColLength_31, "0");
    }
  }

  /**
   * Dassign absolute value to drop sign from assigned value Different field format: s9(8)v99 for
   * Ontario, vs 9(7).99 for HOOPC input. If absolute value of Ontario field > 9999999.99, overflow
   * will occur so set error value (all ‘#s’) on HOOPC input file
   *
   * @input total amount
   */
  private String parseTotalAmount(String input, int length, String adjFlag) {

    String errorIndicator = padLeft("", length, "#");

    if (input == null || "#".equals(adjFlag)) {
      return errorIndicator;
    }

    String lastCh = input.substring(input.length() - 1);

    if (!input.startsWith("0") || onAmountMapping.get(lastCh) == null) {
      return errorIndicator;
    } else {
      return padLeft(parseSpecialAmount(input, length), length, "0");
    }
  }

  /**
   * DDifferent field format: s9(8)v99 for Ontario, vs 9(8).99 for HOOPC input. If Ontario field
   * value < 0, HOOPC does not handle negative amount, so set error value (all ‘#s’) on HOOPC input
   * file.
   *
   * @input total amount
   */
  private String parseTrailerTotalAmount(String input, int length) {

    String errorIndicator = padLeft("", length, "#");

    if (input == null || !input.startsWith("0")) {
      return errorIndicator;
    }

    String lastCh = input.substring(input.length() - 1);

    // if amount not these speical charachter or negative value, retrun error
    if (onAmountMapping.get(lastCh) == null || isNegativeAmount(input)) {
      return errorIndicator;
    } else {
      return padRight(parseSpecialAmount(input, length), length);
    }
  }

  private String parsePostalCode(String input) {
    if (input == null || input.length() < 6) {
      return input;
    }

    input.trim();

    input = input.substring(0, 3) + " " + input.substring(3, 6);
    return input;
  }

  private String parseAmount(String input, int maxLength) {
    if (input == null || input.length() < 2) {
      return input;
    }

    input = input.substring(0, input.length() - 2) + "." + input.substring(input.length() - 2);

    // Trim input length to max length
    if (input.length() > maxLength) {
      input = input.substring(input.length() - maxLength);
    }

    return input;
  }

  /**
   * Signed number (positive for claims, negative for adjustments). Sign is embedded in rightmost
   * (penny) digit as follows: For positive amounts: ‘{‘ represents value of 0; ‘A’ through ‘I’
   * represent values 1 through 9 respectively; For negative amounts: ‘}‘ represents value of 0; ‘J’
   * through ‘R’ represent values from 1 through 9 respectively.
   *
   * @input total amount
   */
  public String parseSpecialAmount(String input, int maxLength) {
    if (input == null || input.length() < 2) {
      return input;
    }

    String lastCh = input.substring(input.length() - 1);

    input =
        input.substring(0, input.length() - 2)
            + "."
            + input.substring(input.length() - 2, input.length() - 1)
            + (onAmountMapping.get(lastCh) == null ? lastCh : onAmountMapping.get(lastCh));

    // Trim input length to max length
    if (input.length() > maxLength) {
      input = input.substring(input.length() - maxLength);
    }

    return input;
  }

  private String removeLeadingZero(String input) {
    if (input == null) {
      input = "";
    } else {
      input = input.replaceFirst("^0*", "");
    }
    return input;
  }

  private String parseBillingPeriod(String input) {
    if ("P".equals(input)) {
      return "Y";
    } else {
      return "N";
    }
  }

  public String padRight(String s, int n) {
    return padRight(s, n, " ");
  }

  public String padRight(String s, int n, String r) {
    if (s == null) {
      s = "";
    }
    StringBuffer padded = new StringBuffer(s);
    while (padded.length() < n) {
      padded.append(r);
    }
    return padded.toString();
  }

  public String padLeft(String s, int n, String r) {
    if (s == null) {
      s = "";
    }
    StringBuffer padded = new StringBuffer(s);
    while (padded.length() < n) {
      padded.insert(0, r);
    }
    return padded.toString();
  }

  public String padLeft(String s, int n) {
    return padLeft(s, n, " ");
  }

  public boolean isTrailerRecord(String input) {
    return ApplicationConstants.IMPORT_FILE_TRL_CODE.equals(
        getSubString(
            input, InputFileFormat.T_02_RECORD_TYPE_START, InputFileFormat.T_02_RECORD_TYPE_LENTH));
  }

  public boolean isInpatientRecord(String input) {
    return ApplicationConstants.IMPORT_FILE_DTL_INPATIENT_CODE.equals(
        getSubString(
            input,
            InputFileFormat.T_01_RECIPIENT_BATCH_START,
            InputFileFormat.T_01_RECIPIENT_BATCH_LENTH));
  }

  public boolean isOutpatientRecord(String input) {
    return ApplicationConstants.IMPORT_FILE_DTL_OUTPATIENT_CODE.equals(
        getSubString(
            input,
            InputFileFormat.T_01_RECIPIENT_BATCH_START,
            InputFileFormat.T_01_RECIPIENT_BATCH_LENTH));
  }

  public boolean isNegativeAmount(String input) {

    if (input == null || input.length() < 2) {
      return false;
    }
    String lastCh = input.substring(input.length() - 1);
    // if amount not these speical charachter or negative value, retrun error
    if ("}JKLMNOPQR".contains(lastCh)) {
      return true;
    }
    return false;
  }

  public String getSubString(String input, int start, int length) {
    if (input == null || input.length() < start + length - 1) {
      return "";
    }
    return input.substring(start - 1, start + length - 1);
  }

  public void setInputPath(String inputfilepath) {
    this.inputPath = inputfilepath;
  }

  public void setProcessedPath(String processpath) {
    this.processDir = processpath;
  }

  public void setTrashPath(String trashpath) {
    this.trashDir = trashpath;
  }

  public void initiateMapping() {

    onAmountMapping.put("{", "0");
    onAmountMapping.put("A", "1");
    onAmountMapping.put("B", "2");
    onAmountMapping.put("C", "3");
    onAmountMapping.put("D", "4");
    onAmountMapping.put("E", "5");
    onAmountMapping.put("F", "6");
    onAmountMapping.put("G", "7");
    onAmountMapping.put("H", "8");
    onAmountMapping.put("I", "9");
    onAmountMapping.put("}", "0");
    onAmountMapping.put("J", "1");
    onAmountMapping.put("K", "2");
    onAmountMapping.put("L", "3");
    onAmountMapping.put("M", "4");
    onAmountMapping.put("N", "5");
    onAmountMapping.put("O", "6");
    onAmountMapping.put("P", "7");
    onAmountMapping.put("Q", "8");
    onAmountMapping.put("R", "9");
  }
}
