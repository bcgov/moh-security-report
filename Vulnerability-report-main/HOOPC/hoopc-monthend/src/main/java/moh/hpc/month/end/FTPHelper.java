/**
 * ************************************************************* Licensed Materials - Property of
 * IBM * Copyright IBM Canada Ltd 2003 All Rights Reserved * * Created on Dec 13, 2004 *
 * ************************************************************* Please do not makes any changes to
 * this file without first * updating the revision history below, under description * please include
 * Harvest Change Request or PSO Tools CR that * caused the change. *
 * ************************************************************* Revision History: * Date Author
 * Description * ************************************************************* MM-DD-YYYY Developer
 * Comment * *************************************************************
 */
package moh.hpc.month.end;

import com.ibm.network.ftp.FileInfo;
import com.ibm.network.ftp.protocol.FTPProtocol;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.util.Enumeration;
import java.util.Vector;
import moh.hpc.month.end.constants.ApplicationConstants;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Short description - the first period signifies the end.
 *
 * <p>Long description - includes all text between the short description and the start of the
 * Javadoc tags. You can use <b>HTML</b> tags for formatting.
 *
 * @author bjang
 * @since 2004
 */
public class FTPHelper {
  private static String transType = null;
  private static Logger logger = LoggerFactory.getLogger(FTPHelper.class.getName());

  /** No Args Constructor */
  public FTPHelper() {
    super();
  }

  // *===========================================================================*/
  // * Name    : FTPProtocol                                                     */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ---------------   ----------------------------------------*/
  // *   DC Bartlett   January 20 2005   Initial Spec                            */
  // *===========================================================================*/
  /**
   * Attempts to open a connection to a backend server using the supplied credentials. Defaults
   * transmission type to Binary
   *
   * @param hostname hostname of the backend FTP server
   * @param username Username to supply to the connection for credentials
   * @param password Password (cleartext) to supply to the connection for credentials
   * @return FTPProtocol the established FTP connection or NULL
   */
  public static FTPProtocol connectFTP(String hostname, String username, String password) {
    int response;
    FTPProtocol ftp = new FTPProtocol();
    response = ftp.connectLogin(hostname, username, password);
    transType = "BINARY";
    if (response == ApplicationConstants.FTP_CONNECTION_OK) {
      logger.debug(
          "Connected to ftp server: " + hostname + " with status code: " + ftp.getStatus());
      return ftp;
    } else {
      logger.error("Error connecting to FTP Server: " + ftp.getStatus());
      return null;
    }
  }

  // *===========================================================================*/
  // * Name    : setRemoteDir                                                    */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ---------------   ----------------------------------------*/
  // *   DC Bartlett   January 20 2005   Initial Spec                            */
  // *===========================================================================*/
  /**
   * Changes to specific (absolute or relative) directory on the remote server
   *
   * @param destDir File Directory to send files to.
   * @param FTPProtocol FTPProtocol object being used.
   * @return int Return value should be either SUCCESS (0) or FAILURE (-1)
   */
  public static int setRemoteDir(String destDir, FTPProtocol ftp) {
    int retVal = ApplicationConstants.FAILURE;
    int ftpResult = ApplicationConstants.FAILURE;

    ftpResult = ftp.changeDir(destDir, true);
    if (ftpResult == ApplicationConstants.FTP_CHANGE_DIR_OK) {
      retVal = ApplicationConstants.SUCCESS;
      logger.info("New Current Directory: " + ftp.getCurrentDir(true));
    } else {
      logger.error("Unable to change directories: " + ftp.getStatus());
    }
    return retVal;
  }

  // *===========================================================================*/
  // * Name    : getFTPFile                                                      */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ---------------   ----------------------------------------*/
  // *   DC Bartlett   January 20 2005   Initial Spec                            */
  // *===========================================================================*/
  /**
   * Starts the process of downloading a file from the backend FTP server and subsequent uploading
   * to the client, attempts to validate the file already existed by doing a dir listing and
   * searching it for the selected file.
   *
   * @param FTPProtocol FTPProtocol object being used.
   * @param filename File that is being retrieved from the FTP Server.
   * @param os OutputStream that the file contents are being sent to.
   * @param dir File Directory that is being retrieved from.
   * @return int Return value should be either SUCCESS (0) or FAILURE (-1)
   */
  public static int getFTPFile(FTPProtocol ftp, String filename, OutputStream os, String dir) {
    int retVal = ApplicationConstants.FAILURE;
    ftp.setType(transType);
    logger.info("Retrieving file: " + filename);
    FileInfo downloadfile = null;
    Vector v = getFTPList(ftp);
    if (v != null) {
      Enumeration e = v.elements();
      FileInfo file;
      while (e.hasMoreElements() && downloadfile == null) {
        file = (FileInfo) e.nextElement();
        if (file.getName().equals(filename)) {
          downloadfile = file;
        }
      }
      if (downloadfile != null) {
        ftp.setStreamedOutput(true);
        ftp.setOutStream(os);
        ftp.getFile(downloadfile.getName());
        retVal = ApplicationConstants.SUCCESS;
        logger.info("File downloaded: " + filename);
      } else {
        logger.error("Unable to find file: " + filename + " on server");
      }
    } else {
      logger.error("Unable to retrieve list of files on server: " + dir);
    }
    return retVal;
  }

  // *===========================================================================*/
  // * Name    : getFTPFiles                                                     */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ---------------   ----------------------------------------*/
  // *   DC Bartlett   February 28 2005  Initial Spec                            */
  // *===========================================================================*/
  /**
   * Starts the process of downloading files from the backend FTP server and subsequent uploading to
   * the client. Only retrieves those files that start with a specific prefix passed into the
   * process.
   *
   * @param FTPProtocol FTPProtocol object being used.
   * @param prefix What the name of all files to be retrieved must start with.
   * @param os OutputStream that the file contents are being sent to.
   * @param dir File Directory that is being retrieved from.
   * @return int Return value should be either SUCCESS (0) or FAILURE (-1)
   */
  public static int getFTPFiles(FTPProtocol ftp, String prefix, String dir) {
    int retVal = ApplicationConstants.FAILURE;
    BufferedOutputStream bos = null;
    try {
      ftp.setType(transType);
      logger.info("Retrieving files with prefix: " + prefix);
      FileInfo downloadfile = null;
      Vector v = getFTPList(ftp);
      if (v != null) {
        Enumeration e = v.elements();
        FileInfo file;
        while (e.hasMoreElements()) {
          file = (FileInfo) e.nextElement();
          if (file.getName().toUpperCase().startsWith(prefix.toUpperCase())) {
            try {
              downloadfile = file;
              bos =
                  new BufferedOutputStream(
                      new FileOutputStream(dir + "/" + downloadfile.getName()));
              ftp.setStreamedOutput(true);
              ftp.setOutStream(bos);
              ftp.getFile(downloadfile.getName());
              bos.flush();
              bos.close();
              retVal = ApplicationConstants.SUCCESS;
              logger.info("File downloaded: " + downloadfile.getName());
            } catch (FileNotFoundException fne) { // should never get here
              logger.error("Unable to find file: " + file.getName() + " : " + fne);
              retVal = ApplicationConstants.SUCCESS;
              ;
            } catch (IOException ie) { // should never get here
              logger.error("Problems occurred trying to ftp file " + file.getName() + " : " + ie);
              retVal = ApplicationConstants.SUCCESS;
              ;
            }
          }
        }
        if (downloadfile == null) {
          retVal = ApplicationConstants.SUCCESS;
          logger.info("Unable to find files with prefix: " + prefix + " on server");
        }
      } else {
        retVal = ApplicationConstants.SUCCESS;
        logger.info("Unable to find files on server: " + dir);
      }
    } finally {
      try {
        if (bos != null) {
          bos.close();
        }
      } catch (IOException ie) {
        logger.error("Could not close down buffered output stream used for Ftping files.");
      }
    }

    return retVal;
  }

  // *===========================================================================*/
  // * Name    : getFTPList                                                      */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ---------------   ----------------------------------------*/
  // *   DC Bartlett   January 20 2005   Initial Spec                            */
  // *===========================================================================*/
  /**
   * Fetches a directory listing and puts it into a vector which is then placed into the request
   * object.
   *
   * @param FTPProtocol FTPProtocol object being used.
   * @return Vector List of files or Null if no files found.
   */
  private static Vector getFTPList(FTPProtocol ftp) {
    Vector inFileList = ftp.getRemoteFileList();
    // The vector to return
    Vector filelist = new java.util.Vector();

    // This vector will contain all the good files
    Vector files = new Vector();
    com.ibm.network.ftp.FileInfo file = null;
    for (int i = 0; i < inFileList.size(); i++) {
      file = (FileInfo) inFileList.elementAt(i);
      if (file.isFile()) {
        files.add(file);
      }
    }
    return files.size() == 0 ? null : files;
  }

  // *===========================================================================*/
  // * Name    : setTransType                                                    */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ---------------   ----------------------------------------*/
  // *   DC Bartlett   January 20 2005   Initial Spec                            */
  // *===========================================================================*/
  /**
   * Sets the transmision type to be used when ftping a file. Must be either ASCII or BINARY.
   *
   * @param transType FTP Transmission type to be used.
   * @param FTPProtocol FTPProtocol object being used.
   * @return int Return value should be either SUCCESS (0) or FAILURE (-1)
   */
  public static void setTransType(String XType, FTPProtocol ftp) {
    transType = XType;
  }
  // *===========================================================================*/
  // * Name    : sendFTPFile                                                     */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ---------------   ----------------------------------------*/
  // *   DC Bartlett   January 20 2005   Initial Spec                            */
  // *===========================================================================*/
  /**
   * Sends a file to a backend server using FTP
   *
   * @param origDir File Directory to retrieve files from.
   * @param origFile File to retrieve.
   * @param destFile File to be named in destination directory
   * @param quote Special value set for Mainframe backe ends only
   * @param FTPProtocol FTPProtocol object being used.
   * @return int Return value should be either SUCCESS (0) or FAILURE (-1)
   */
  public static int sendFTPFile(
      String origDir, String origFile, String destFile, String quote, FTPProtocol ftp) {
    int retVal = ApplicationConstants.FAILURE;
    int ftpResult = ApplicationConstants.FAILURE;
    String filename = destFile;
    ftp.setType(transType);
    if (quote != null) {
      ftpResult = ftp.quote(quote);
    }
    BufferedInputStream bis = null;
    try {
      bis = new BufferedInputStream(new FileInputStream(origDir + "/" + origFile));
      ftp.setStreamedInput(true);
      ftp.setInpStream(bis);
      logger.info("Preparing to FTP file: " + filename);
      ftpResult = ftp.putFile(filename);
      if (ftpResult == ApplicationConstants.FTP_FILE_TRANSACTION_OK) {
        logger.info("FTP succeeded in sending file: " + filename);
        retVal = ApplicationConstants.SUCCESS;
      } else {
        logger.error("FTP un-successful in sending file: " + filename + " : " + ftp.getStatus());
      }
    } catch (FileNotFoundException e) { // should never get here
      logger.error("Unable to find file: " + filename + " : " + e);
    } finally {
      try {
        if (bis != null) {
          bis.close();
        }
      } catch (IOException ie) {
        logger.error(
            "Could not close down buffered input stream used for Ftping while processing file: "
                + origFile);
      }
    }
    return retVal;
  }
  // *===========================================================================*/
  // * Name    : deleteFTPFile                                                   */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ---------------   ----------------------------------------*/
  // *   DC Bartlett   March 14 2005     Initial Spec                            */
  // *===========================================================================*/
  /**
   * Deletes a given file from the ftp server
   *
   * @param FTPProtocol FTPProtocol object being used.
   * @param fileName Filename
   * @return int Return value should be either SUCCESS (0) or FAILURE (-1)
   */
  public static int deleteFTPFile(FTPProtocol ftp, String fileName) {
    int retVal = ApplicationConstants.FAILURE;
    int ftpResult = ApplicationConstants.FAILURE;
    logger.info("Deleting file: " + fileName);
    ftp.setType(transType);

    ftpResult = ftp.deleteFile(fileName, true);
    if (ftpResult == ApplicationConstants.FTP_DELETE_FILE_OK) {
      retVal = ApplicationConstants.SUCCESS;
    } else {
      if (ftpResult == ApplicationConstants.FTP_DELETE_FILE_NOT_EXIST) {
        retVal = ftpResult;
      } else {
        logger.error("Unable to delete file: " + fileName + " " + ftp.getStatus());
      }
    }
    return retVal;
  }
}
