/**
 * ****************************************************************************** Licensed Materials
 * - Property of IBM * Copyright IBM Canada Ltd 2005 All Rights Reserved * Created on Jan 14, 2005 *
 * ****************************************************************************** Please do not
 * makes any changes to this file without first * updating the revision history below, under
 * description * please include Harvest Change Request or PSO Tools CR that * caused the change. *
 * ****************************************************************************** Revision History:
 * * * Date Name Description * ---------- ----------------
 * --------------------------------------------- * 01-14-2005 David Bartlett Initial Spec *
 * ******************************************************************************
 */
package moh.hpc.month.end.resident.processors;

import jakarta.enterprise.context.Dependent;
import java.io.IOException;
import java.sql.SQLException;
import java.util.Hashtable;
import java.util.Properties;
import moh.hpc.month.end.constants.PropertyFileKeys;
import moh.hpc.month.end.exceptions.ProcessException;
import moh.hpc.month.end.services.MEDataService;
import moh.hpc.month.end.support.ProvTransitionsStats;
import moh.hpc.month.end.support.Province;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@Dependent
public class MEReqStatusProcessor extends MonthEndResProcessor {
  private Properties prp = null;
  private MEDataService ds = null;
  private Hashtable provStatList = null;
  private String processMonth = null;

  private String startingStatus = null;
  private String nextStatus = null;
  private String successTrans = null;
  private String statusKey = null;
  private String requestStatusStep = null;
  private String defaultStep = null;
  private static Logger logger = LoggerFactory.getLogger("MEReqStatusProcessor");

  // *===========================================================================*/
  // * Name    : constructor                                                     */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   January 18 2005   Initial Spec                            */
  // *===========================================================================*/
  public MEReqStatusProcessor() {
    super();
  }

  // *===========================================================================*/
  // * Name    : initialize                                                      */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   January 18 2005   Initial Spec                            */
  // *===========================================================================*/
  /**
   * Sets up class objects (properties, dataservice, province status list) and other variables to be
   * used in the process().
   *
   * @throws ProcessException
   */
  public void initialize() throws ProcessException {
    logger.debug("Calling initialize() started.");
    prp = getProperties();
    ds = getDataService();
    provStatList = getProvStatList();
    processMonth = this.getProcessMonth();
    startingStatus = prp.getProperty(PropertyFileKeys.PRP_RES_PROV_STAT_REQ1DONE);

    successTrans = prp.getProperty(PropertyFileKeys.PRP_PROV_TRANS_CAUSE_SUCCESS);
    requestStatusStep = prp.getProperty(PropertyFileKeys.PRP_RES_REQSTAT_STEP);
    defaultStep = prp.getProperty(PropertyFileKeys.PRP_RES_STEP_DEF);

    try {
      if ((startingStatus.trim().length() == 0)
          || (successTrans.trim().length() == 0)
          || (requestStatusStep.trim().length() == 0)
          || (processMonth == null)
          || (defaultStep.trim().length() == 0)) {
        logger.error(
            "Some properties for the request(s) update processor are null when they cannot be");
        logger.error("Request(s) Update Starting Status: " + startingStatus);
        logger.error("Success Transition Code:           " + successTrans);
        logger.error("Request Update Step Code:          " + requestStatusStep);
        logger.error("Default Step Code:                 " + defaultStep);
        logger.error("Process Month:                     " + processMonth);
        throw new ProcessException(new Exception("Config File Parameter error"));
      }
    } catch (NullPointerException npe) {
      logger.error("Missing properties in the config file" + npe);
      throw new ProcessException(npe);
    }
    try {
      statusKey = startingStatus.trim() + ":" + successTrans.trim();
      nextStatus = ((ProvTransitionsStats) (provStatList.get(statusKey))).getEndStatus();
    } catch (NullPointerException npe) {
      logger.error("Next status not found in transition statuas list using " + nextStatus);
      throw new ProcessException(npe);
    }

    logger.debug("Calling initialize() finished.");
  }

  // *===========================================================================*/
  // * Name    : process                                                         */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   January 18 2005   Initial Spec                            */
  // *===========================================================================*/
  /**
   * Calls the requests update process application. This indicates the request reports were created
   * successfully and all of the associated adjustment and declaration requests can be updated as
   * being processed.
   *
   * @param curProv A province object for the current object being processed.
   * @param stepCode Code indicating whether or not this step of the month end should be executed It
   *     will usually be defaulted to 'ALL'
   * @throws SQLException, IOException, ProcessException
   */
  public void process(Province curProv, String stepCode)
      throws SQLException, IOException, ProcessException {
    logger.debug("Calling process() started.");
    logger.info("");
    logger.info(
        "Starting Requests Update step for Province/Status: "
            + curProv.getProvince()
            + "/"
            + curProv.getCurStatus());
    logger.info("Processor Starting Status: " + startingStatus);
    logger.info("Processor Step Code:       " + stepCode);

    String sessionId = "ME: " + this.getClass().getName();
    curProv.setProvError(false);

    // ***********************************************
    // Ensure that the next and current status
    // fields are not null
    // ***********************************************
    if ((nextStatus == null)
        || (nextStatus.trim().length() == 0)
        || (curProv.getCurStatus() == null)
        || (curProv.getCurStatus().trim().length() == 0)) {
      logger.error(
          "One or more of the status fields are null for province: " + curProv.getProvince());
      logger.error("Current Status: " + curProv.getCurStatus());
      logger.error("Next Status:    " + nextStatus);
      throw new ProcessException(new Exception("Province is in error " + curProv.getProvince()));
    }

    // *************************************************************
    // Only process the province if it is at the correct status,
    // there was no overriding step command and it is valid to run
    // the province at its current status at the current time
    // *************************************************************
    if ((curProv.getCurStatus().equals(startingStatus))
        && ((stepCode.equals(defaultStep)) || (stepCode.equals(requestStatusStep)))) {
      if (!validateTime(curProv.getCurStatus(), statusKey, provStatList)) {
        logger.info(
            "The current Province is not allowed to run at this time at its current status");
        logger.info("Province/Status: " + curProv.getProvince() + "/" + curProv.getCurStatus());
        curProv.setProvError(true);
      } else {
        logger.info(
            "Updates the Adjustment/Declaration Requests for the province: "
                + curProv.getProvince());

        ds.lockProvince(
            curProv.getProvince(), curProv.getProvDetails().getResidencyType(), sessionId);
        ds.updateAdjustmentRequests(curProv.getProvince(), sessionId, processMonth);
        ds.updateDeclarationRequests(curProv.getProvince(), sessionId, processMonth);

        logger.info("Requests Updated for Province: " + curProv.getProvince());
        curProv.setProvError(false);
        ds.advanceProvStat(
            curProv.getProvince(),
            curProv.getProvDetails().getResidencyType(),
            sessionId,
            curProv.getCurStatus(),
            successTrans);
        curProv.setCurStatus(nextStatus);
      }
    }
    logger.debug("Calling process() finished.");
  }
}
