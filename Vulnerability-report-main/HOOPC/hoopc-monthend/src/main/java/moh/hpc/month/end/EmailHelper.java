/**
 * ****************************************************************************** Licensed Materials
 * - Property of IBM * Copyright IBM Canada Ltd 2003, 2004, 2005 All Rights Reserved * Modified on
 * Nov 25, 2004 * ******************************************************************************
 * Please do not makes any changes to this file without first * updating the revision history below,
 * under description * please include Harvest Change Request or PSO Tools CR that * caused the
 * change. * ****************************************************************************** Revision
 * History: * * Date Name Reference Description * ---------- ---------------- ----------
 * --------------------------------- * 11-25-2004 David C. Bartlett HN-205450 - QA - MPR Extract 1.0
 * * Cloned from MPM and modified to * use processException *
 * ******************************************************************************
 */
package moh.hpc.month.end;

import jakarta.activation.DataHandler;
import jakarta.activation.FileDataSource;
import jakarta.mail.Message;
import jakarta.mail.MessagingException;
import jakarta.mail.Multipart;
import jakarta.mail.Session;
import jakarta.mail.Transport;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeBodyPart;
import jakarta.mail.internet.MimeMessage;
import jakarta.mail.internet.MimeMultipart;
import java.util.ArrayList;
import java.util.Properties;
import moh.hpc.month.end.exceptions.ProcessException;
import org.jfree.util.Log;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class EmailHelper {
  // email host
  private static final String PRP_MAIL_HOST = "mail.smtp.host";

  // email validation values
  private static final int NOT_EXIST = -1;
  private static final String VALID_CHAR = ";";

  private String sender;
  private String host;
  private boolean debug;

  private Session session;
  private Properties props;
  private static Logger logger = LoggerFactory.getLogger("EmailHelper");

  public EmailHelper(String sender, String host, String debug) {
    super();
    // originating email address
    this.sender = sender;
    // hostname of the machine that has smtp server running
    this.host = host;
    // turns on or turns off debugging during sending.
    this.debug = Boolean.valueOf(debug).booleanValue();

    // create some properties and get the default Session
    props = new Properties();

    // Use provided host if one is available
    if (this.host != null && !this.host.isEmpty()) {
      props.put(PRP_MAIL_HOST, host);
    }

    session = Session.getDefaultInstance(props, null);
    session.setDebug(this.debug);
  }

  public void destroy() {
    props = null;
    session = null;
  }

  // Creates an InternetAddress Array based on addresses from a String list
  private InternetAddress[] createList(String list) {
    InternetAddress address = null;
    ArrayList parsedList = parseList(list);

    InternetAddress[] addresses = new InternetAddress[parsedList.size()];

    for (int i = 0; i < parsedList.size(); i++) {
      address = new InternetAddress();
      address.setAddress((String) parsedList.get(i));
      addresses[i] = address;
    }
    return addresses;
  }

  // Parses out addresses from a String list and put them into an ArrayList
  private ArrayList parseList(String list) {
    ArrayList parsedList = new ArrayList();
    String address = list;
    String parsed = null;
    boolean proceed = true;
    int index = 0;

    while (proceed) {
      index = address.indexOf(VALID_CHAR);

      if (index == NOT_EXIST) {
        parsedList.add(address);
        proceed = false;
      } else {
        parsed = address.substring(0, index);
        parsedList.add(parsed);
        address = address.substring(index + 1);
      }
    }
    return parsedList;
  }

  private void checkAddress(String sendee) throws ProcessException {
    int index = sendee.indexOf(VALID_CHAR);
    int lastIndex = sendee.lastIndexOf(VALID_CHAR);

    if (sendee.equals("")) {
      throw new ProcessException(new Exception("Email Addresses have not been entered."));
    }

    if (index == 0) {
      throw new ProcessException(
          new Exception("Email Addresses have been entered incorrectly: " + sendee));
    }

    if (sendee.substring(lastIndex + 1).equals("")) {
      throw new ProcessException(
          new Exception("Email Addresses have been entered incorrectly: " + sendee));
    }
  }

  /**
   * Creates a simple message in text/plain format and sends it. Destinating Email Adresse(s),
   * Message Body and Subject are passed in.
   */
  public void sendEmail(String to, String subject, String message) throws ProcessException {
    sendEmail(to, null, subject, message);
  }

  /**
   * Creates a simple message in text/plain format and sends it. Destinating Email Adresse(s) for
   * To, Destinating Email Adresse(s) for CC, Message Body and Subject are passed in.
   */
  public void sendEmail(String to, String cc, String subject, String message)
      throws ProcessException {
    // Destination email addresses
    InternetAddress[] address1 = null;
    InternetAddress[] address2 = null;
    checkAddress(to);
    address1 = createList(to);
    if (cc != null) {
      checkAddress(cc);
      address2 = createList(cc);
    }
    try {
      // create a message
      MimeMessage msg = new MimeMessage(session);
      msg.setFrom(new InternetAddress(sender));
      msg.setRecipients(Message.RecipientType.TO, address1);

      if (address2 != null) {
        msg.setRecipients(Message.RecipientType.CC, address2);
      }
      msg.setSubject(subject);
      msg.setSentDate(new java.util.Date());
      // create the message text
      msg.setContent(message, "text/plain");
      // send the message
      Transport.send(msg);
      Log.error("EMAIL: " + msg);

    } catch (MessagingException mex) {
      throw new ProcessException(mex);
    }
  }

  /**
   * Creates a simple multipart/mixed message and sends it. One part is text/plain and the other
   * part is an attachment file. Destinating Email Adresse(s), Message, Attachment(directory and
   * file) and Subject are passed in.
   */
  public void sendAttachment(String to, String subject, String message, String file)
      throws ProcessException {
    sendAttachment(to, null, subject, message, file);
  }

  /**
   * Creates a simple multipart/mixed message and sends it. One part is text/plain and the other
   * part is an attachment file. Destinating Email Adresse(s) for To, Destinating Email Adresse(s)
   * for CC,, Message, Attachment(directory and file) and Subject are passed in.
   */
  public void sendAttachment(String to, String cc, String subject, String message, String file)
      throws ProcessException {
    // Destination email addresses
    InternetAddress[] address1 = null;
    InternetAddress[] address2 = null;
    checkAddress(to);
    address1 = createList(to);

    if (cc != null) {
      checkAddress(cc);
      address2 = createList(cc);
    }
    try {
      // create a message
      MimeMessage msg = new MimeMessage(session);
      msg.setFrom(new InternetAddress(sender));
      msg.setRecipients(Message.RecipientType.TO, address1);
      if (address2 != null) {
        msg.setRecipients(Message.RecipientType.CC, address2);
      }
      msg.setSubject(subject);
      msg.setSentDate(new java.util.Date());
      // create the Multipart and its parts to it
      Multipart mp = new MimeMultipart();
      // create and fill the first message part
      MimeBodyPart mbp1 = new MimeBodyPart();
      mbp1.setText(message);
      // create and fill the second message part
      MimeBodyPart mbp2 = new MimeBodyPart();
      FileDataSource fds = new FileDataSource(file);
      mbp2.setDataHandler(new DataHandler(fds));
      mbp2.setFileName(fds.getName());
      mp.addBodyPart(mbp1); // mail body of the message
      mp.addBodyPart(mbp2); // Add your attachments here
      // add the Multipart to the message
      msg.setContent(mp);
      // send the message
      Transport.send(msg);
    } catch (MessagingException mex) {
      throw new ProcessException(mex);
    }
  }
}
