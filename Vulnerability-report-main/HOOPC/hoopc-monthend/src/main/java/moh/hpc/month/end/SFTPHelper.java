/*
 * To change this template, choose Tools | Templates and open the template in the editor.
 */
package moh.hpc.month.end;

import com.ibm.network.sftp.Sftp;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSchException;
import java.io.BufferedOutputStream;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Vector;
import moh.hpc.month.end.constants.ApplicationConstants;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/** @author grant.shan */
public class SFTPHelper {

  private static Logger logger = LoggerFactory.getLogger("SFTPHelper");

  /**
   * Get sftp
   *
   * @param hostname
   * @param username
   * @param password
   * @return
   */
  public static Sftp connectUsingPassword(
      String hostname, String username, String password, String knownHostsFile) {

    Sftp sftp = new Sftp();
    sftp.connectByPassword(hostname, username, password, knownHostsFile);

    return sftp;
  }

  /**
   * Get sftp
   *
   * @param hostname
   * @param username
   * @param privateKeyPath
   * @return
   */
  public static Sftp connectUsingKeys(
      String hostname, String username, String privateKeyPath, String knownHostsFile) {

    Sftp sftp = new Sftp();
    sftp.connectByKey(hostname, username, privateKeyPath, knownHostsFile);

    return sftp;
  }

  // *===========================================================================*/
  // * Name : setRemoteDir */
  // * History: */
  // * Developer Date Description */
  // * --------- --------------- ----------------------------------------*/
  // * DC Bartlett January 20 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Changes to specific (absolute or relative) directory on the remote server
   *
   * @param destDir File Directory to send files to.
   * @param FTPProtocol FTPProtocol object being used.
   * @return int Return value should be either SUCCESS (0) or FAILURE (-1)
   */
  public static int setRemoteDir(String destDir, Sftp sftp) {
    return sftp.cd(destDir);
  }

  public static int sendSFTPFile(String origDir, String origFile, String destFile, Sftp sftp) {
    int retVal = Sftp.FAILURE;
    int ftpResult = Sftp.FAILURE;
    sftp.lcd(origDir);
    ftpResult = sftp.putFile(origFile, destFile);

    if (ftpResult == Sftp.SUCCESS) {
      logger.info("FTP succeeded in sending file: " + destFile);
      retVal = Sftp.SUCCESS;
    } else {
      logger.error("FTP un-successful in sending file: " + destFile);
    }

    return retVal;
  }

  public static int getSFTPFiles(Sftp sftp, String prefix, String dir) {
    int retVal = Sftp.FAILURE;
    BufferedOutputStream bos = null;

    try {

      logger.info("Retrieving files with prefix: " + prefix);
      ChannelSftp.LsEntry downloadfile = null;
      sftp.lcd(dir);
      Vector v = sftp.getRemoteFiles();
      if (v != null) {
        Enumeration e = v.elements();
        ChannelSftp.LsEntry file;

        while (e.hasMoreElements()) {
          file = (ChannelSftp.LsEntry) e.nextElement();

          if (file.getFilename().toUpperCase().startsWith(prefix.toUpperCase())) {
            try {
              downloadfile = file;
              sftp.getFile(file.getFilename(), dir + "/" + file.getFilename());
              retVal = Sftp.SUCCESS;
              logger.info("File downloaded: " + file.getFilename());
            } catch (JSchException fne) { // should never get here
              logger.error("Unable to find file: " + file.getFilename() + " : " + fne);
              retVal = Sftp.SUCCESS;
              ;
            }
          }
        }
        if (downloadfile == null) {
          retVal = Sftp.SUCCESS;
          logger.info("Unable to find files with prefix: " + prefix + " on server");
        }
      } else {
        retVal = Sftp.SUCCESS;
        logger.info("Unable to find files on server: " + dir);
      }

    } catch (JSchException fne) { // should never get here
      logger.error("JSchException", fne);
      retVal = Sftp.SUCCESS;
      ;
    } finally {
      try {
        if (bos != null) {
          bos.close();
        }
      } catch (IOException ie) {
        logger.error("Could not close down buffered output stream used for Ftping files.");
      }
    }

    return retVal;
  }

  /*
   * Deletes a given file from the ftp server
   *
   * @param FTPProtocol FTPProtocol object being used.
   *
   * @param fileName Filename
   *
   * @return int Return value should be either SUCCESS (0) or FAILURE (-1)
   */
  public static int deleteSFTPFile(Sftp sftp, String fileName) {
    int retVal = ApplicationConstants.FAILURE;
    int ftpResult = ApplicationConstants.FAILURE;
    logger.info("Deleting file: " + fileName);

    ftpResult = sftp.deleteFile(fileName);
    if (ftpResult == Sftp.SUCCESS) {
      retVal = Sftp.SUCCESS;
    } else {

      logger.error("Unable to delete file: " + fileName);
    }
    return retVal;
  }
}
