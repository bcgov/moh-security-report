package moh.hoopc.batch;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HOOPCFileProcessor {
  // logger
  private static Logger logger = LoggerFactory.getLogger(HOOPCFileProcessor.class.getName());

  // Our properties file
  private java.util.Properties prp = null;

  // Oracle Parms
  private ca.ibm.victoria.oracle.OracleParameters oracleParameters = null;
  private String reportUID = null;

  // hni parms
  private com.orion.symphonia3.MessageFactory sending = null;
  private com.orion.symphonia3.MessageFactory receiving = null;

  // valid return codes
  private static final int SUCCESS = 0;
  private static final int ERROR = -1;

  // general variables
  private boolean stopped = false;
  private java.io.File stopFile = null;

  public HOOPCFileProcessor(java.util.Properties p) {
    this.prp = p;
  }

  public int process() {
    logger.info("HOOPC2 File Processor starting");
    int retValue = SUCCESS;
    try {
      setup();
      while (!isStopped()) {
        System.out.println("I am running");
        Thread.sleep(300);
        // scan directory for file to process
      }
    } catch (Exception e) {
      logger.error("An exception occurred", e);
      retValue = ERROR;
    } finally {

    }
    logger.info("HOOPC2 File Processor ending");
    return SUCCESS;
  }

  /**
   * Gets the properties
   *
   * @return Returns a Properties
   */
  public java.util.Properties getProperties() {
    return prp;
  }

  /**
   * Gets the oracleParameters
   *
   * @return Returns a ca.ibm.victoria.oracle.OracleParameters
   */
  public ca.ibm.victoria.oracle.OracleParameters getOracleParameters() {
    return oracleParameters;
  }

  private void setup() throws java.io.IOException, java.sql.SQLException {
    setupStopFile();
    setupOracle();
    setupHNI();
  }

  private void setupStopFile() throws java.io.IOException {
    java.util.Properties prp = getProperties();
    java.io.File stopFile = new java.io.File(prp.getProperty("stop.file"));
    if (stopFile.exists()) {
      throw new java.io.IOException(
          "Stop File: " + stopFile.getName() + " exists, program will not start");
    }
    setStopFile(stopFile);
  }

  private void setupHNI() throws java.io.IOException {
    java.util.Properties prp = getProperties();
    sending =
        moh.common.business.HL7Service.createMessageFactory(prp.getProperty("msgfactory.request"));
    receiving =
        moh.common.business.HL7Service.createMessageFactory(prp.getProperty("msgfactory.reply"));
  }

  private void setupOracle() throws java.sql.SQLException {
    java.util.Properties prp = getProperties();
    ca.ibm.victoria.oracle.OracleParameters op = new ca.ibm.victoria.oracle.OracleParameters();

    int queryTimeout = 80;
    try {
      queryTimeout = Integer.parseInt(prp.getProperty("oracle.timeout", "60"));
    } catch (NumberFormatException e) { // already set the queryTimeout
      logger.warn("Query timeout was invalid in configuration file");
    }
    op.setQueryTimeout(queryTimeout);
    op.setDbConnectTimeout(5);
    setOracleParameters(op);
    setReportUID(prp.getProperty("report.uid", "HOOPC2 Batch Import"));
    java.sql.Connection con = null;
    try {
      // Test to see if we can get a connection
      con =
          ca.ibm.victoria.oracle.OracleHelper.createConnection(
              prp.getProperty("hoopc2.datasource"));
    } finally { // Close the connection if we got it
      // ca.ibm.victoria.oracle.OracleHelper.closeConnection(con);
    }
  }

  /**
   * Sets the oracleParameters
   *
   * @param oracleParameters The oracleParameters to set
   */
  private void setOracleParameters(ca.ibm.victoria.oracle.OracleParameters oracleParameters) {
    this.oracleParameters = oracleParameters;
  }

  /**
   * Sets the reportUID
   *
   * @param reportUID The reportUID to set
   */
  private void setReportUID(String reportUID) {
    this.reportUID = reportUID;
  }
  /**
   * Gets the reportUID
   *
   * @return Returns a String
   */
  public String getReportUID() {
    return reportUID;
  }

  /**
   * Gets the sending
   *
   * @return Returns a com.orion.symphonia3.MessageFactory
   */
  public com.orion.symphonia3.MessageFactory getSendingMessageFactory() {
    return sending;
  }
  /**
   * Gets the receiving
   *
   * @return Returns a com.orion.symphonia3.MessageFactory
   */
  public com.orion.symphonia3.MessageFactory getReceivingMessageFactory() {
    return receiving;
  }
  /** @return */
  public java.io.File getStopFile() {
    return stopFile;
  }

  /** @param file */
  public void setStopFile(java.io.File file) {
    stopFile = file;
  }

  private boolean isStopped() {
    boolean retVal = false;
    java.io.File stopFile = getStopFile();
    if (stopFile.exists()) {
      logger.info("Stop File: " + stopFile.getName() + " has been detected, shutting down");
      retVal = true;
      stopFile.delete();
    }
    return retVal;
  }
}
