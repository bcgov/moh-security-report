/* **************************************************************
 * Licensed Materials - Property of IBM                       *
 * Copyright IBM Canada Ltd 2004 All Rights Reserved        *
 **************************************************************
 * Please do not makes any changes to this file without first *
 * updating the revision history below, under description     *
 * please include Harvest Change Request or PSO Tools CR that *
 * caused the change.                                         *
 **************************************************************
 * Revision History:                                          *
 *                                                            *
 * Date        Name              Description                  *
 * ----------  ----------------  ---------------------------- *
 * 04-21-2005  David Bartlett    Modified: Handle result sets *
 ************************************************************** */
package moh.hoopc.services;

import java.sql.*;
import java.util.Base64;
import moh.hoopc.services.util.*;
import org.apache.log4j.Logger;

public class DataService {
  private Logger logger = Logger.getLogger(DataService.class);
  String userId;
  String sessionId;

  Connection con;

  static final int ORACLE_OK = 0;
  private static final String CHARS =
      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567890";
  private static final String RANDS =
      "lR5Nd0yXaM6iG2xI7KSWFoYbhTADE0qUk3vOsgJwjmfetLHur18ZVzcnCBP49pQ";

  // Oracle Connection Objects
  private static final String ORACLE_DRIVER = "oracle.jdbc.driver.OracleDriver";
  private static final String ORACLE_CLIENT = "jdbc:oracle:thin:@";

  /*
   * initialize data service (includes initiatlization of HoopcStoredProcedure
   */
  protected DataService(Connection connection, String userId, String sessionId) {
    this.con = connection;
    this.userId = userId;
    this.sessionId = sessionId;
  }
  // *===========================================================================*/
  // * Name    : DataService                                                     */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   May 05, 2005      Added constructor for use by hospital   */
  // *                                   import load.                            */
  // *===========================================================================*/
  /**
   * Given the name of the dataSource attempts to make a connection to it
   *
   * @param hostname Server hosting the database
   * @param sid Server id
   * @param uid User ID
   * @param pwd encrypted password
   * @param dbConnectTimeout Max time to wait (in seconds) for a db connection.
   * @param dbQueryTimeOut Max time to wait (in seconds) for a query to run.
   * @param sessionId Id identifying the session that initiated the call
   */
  public DataService(
      String hostname,
      String port,
      String sid,
      String uid,
      String pwd,
      int dbConnectTimeOut,
      int dbQueryTimeOut,
      String userId,
      String sessionId)
      throws ServiceFailedException {

    this.sessionId = sessionId;
    this.userId = userId;
    try { // Decode password
      pwd = simpleDecoder(pwd);
    } catch (NullPointerException e) {
      logger.fatal("Unable to decode Oracle password");
      throw e;
    }

    Connection connection = null;
    try {
      Class.forName(ORACLE_DRIVER);
      DriverManager.setLoginTimeout(dbConnectTimeOut);
      connection =
          DriverManager.getConnection(ORACLE_CLIENT + hostname + ":" + port + ":" + sid, uid, pwd);
      connection.setAutoCommit(false);
      logger.debug(connection.getMetaData().getDatabaseProductVersion());
      this.con = connection;
    } catch (ClassNotFoundException e) {
      logger.fatal("Method: getConnection() - ClassNotFoundException", e);
      throw new ServiceFailedException("Method: getConnection() - ClassNotFoundException", e);
    } catch (SQLException ex) {
      logger.fatal("Sql Exception occurred making database connection. ", ex);
      throw new ServiceFailedException("Sql Exception occurred making database connection. " + ex);
    }
  }

  protected HoopcStoredProcedure getHoopcStoredProcedure(
      String sql,
      int userParameterIndex,
      int sessionParameterIndex,
      int resultParameterIndex,
      int messageParameterIndex)
      throws StoredProcedureException {
    HoopcStoredProcedure sp =
        new HoopcStoredProcedure(
            sql,
            userParameterIndex,
            sessionParameterIndex,
            resultParameterIndex,
            messageParameterIndex,
            userId,
            sessionId,
            con);
    return sp;
  }

  protected HoopcStoredProcedure getHoopcStoredProcedure(String sql) throws ServiceFailedException {
    HoopcStoredProcedure sp = new HoopcStoredProcedure(sql, userId, sessionId, con);
    return sp;
  }

  String qmarks(int n) {
    String s = "?";
    for (int i = 1; i < n; i++) s += ",?";
    return s;
  }

  // *===========================================================================*/
  // * Name    : close                                                           */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   April 21,2005     Modified: Handle closing result sets.   */
  // *===========================================================================*/
  void close(HoopcStoredProcedure sp, ResultSet rs) {

    if (rs != null) {
      try {
        sp.closeRS(rs);
        rs = null;
      } catch (StoredProcedureException e) {
        logger.error(e);
      }
    }
    if (sp == null) return;
    try {
      sp.close();
      sp = null;
    } catch (StoredProcedureException e) {
      logger.error(e);
    }
  }

  void close(CallableStatement sp) {
    if (sp == null) return;
    try {
      sp.close();
    } catch (SQLException e) {
      logger.error(e);
    }
  }
  // *===========================================================================*/
  // * Name    : commit                                                          */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   March 18 2005     Initial Spec                            */
  // *===========================================================================*/
  public void commit() throws ServiceFailedException {
    try {
      con.commit();
    } catch (SQLException e) {
      throw new ServiceFailedException(e);
    }

    logger.debug("Commit successfull");
  }

  // *===========================================================================*/
  // * Name    : createSavePoint                                                 */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   March 18 2005     Initial Spec                            */
  // *===========================================================================*/
  public void createSavePoint(String savePoint) throws ServiceFailedException {
    HoopcStoredProcedure cstmt = null;
    String CALLABLE_CREATESAVEPOINT = "{call DBMS_TRANSACTION.SAVEPOINT(?)}";

    cstmt = getHoopcStoredProcedure(CALLABLE_CREATESAVEPOINT);
    try {
      cstmt.setString(1, savePoint);
      cstmt.execute_dbms();
      logger.debug("Create Savepoint successful");
    } finally {
      close(cstmt, null);
    }
  }
  // *===========================================================================*/
  // * Name    : createSavePoint                                                 */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   May 05  2005     Initial Spec                            */
  // *===========================================================================*/
  public Savepoint createSavePointObj(String savepointString) throws ServiceFailedException {
    Savepoint savepointobj = null;
    try {

      savepointobj = con.setSavepoint();
      logger.debug("Create Savepoint successful");
    } catch (SQLException e) {
      throw new ServiceFailedException(e);
    }
    return savepointobj;
  }

  // *===========================================================================*/
  // * Name    : rollback                                                        */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   March 18 2005     Initial Spec                            */
  // *===========================================================================*/
  public void rollback() throws ServiceFailedException {
    try {
      con.rollback();
    } catch (SQLException e) {
      throw new ServiceFailedException(e);
    }
    logger.debug("Rollback successful");
  }

  // *===========================================================================*/
  // * Name    : rollback                                                        */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   March 18 2005     Initial Spec                            */
  // *===========================================================================*/
  public void rollback(String savePoint) throws ServiceFailedException {
    HoopcStoredProcedure cstmt = null;
    String CALLABLE_ROLLBACK = "{call DBMS_TRANSACTION.ROLLBACK_SAVEPOINT(?)}";
    cstmt = getHoopcStoredProcedure(CALLABLE_ROLLBACK);
    try {

      cstmt.setString(1, savePoint);
      cstmt.execute_dbms();
      logger.debug("Rollback to Savepoint successful");
    } finally {
      close(cstmt, null);
    }
  }
  // *===========================================================================*/
  // * Name    : rollback                                                        */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   March 18 2005     Initial Spec                            */
  // *===========================================================================*/
  public void rollback(Savepoint savepoint) throws ServiceFailedException {
    try {
      con.rollback(savepoint);
      logger.debug("Rollback to Savepoint successful");
    } catch (SQLException e) {
      throw new ServiceFailedException(e);
    }
  }
  // *===========================================================================*/
  // * Name    : decodeBase64                                                    */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   May 06 2005       Added to decode password passed in from */
  // *                                   the hospital import application.        */
  // *===========================================================================*/
  /**
   * Base64 encodes the incoming byte stream
   *
   * @param inBytes a byte array contained the characters to be encoded
   * @return <code>java.lang.String</code>
   */
  private String decodeBase64(String decodeStr) {
    logger.debug("Method: decodeBase64 started.");
    String retStr = null;
    retStr = new String(Base64.getDecoder().decode(decodeStr));
    logger.debug("Method: decodeBase64 finished.");
    return retStr;
  }

  // *===========================================================================*/
  // * Name    : simpleDecoder                                                   */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   May 06 2005       Added to decode password passed in from */
  // *                                   the hospital import application.        */
  // *===========================================================================*/
  public String simpleDecoder(String inStr) {
    logger.debug("Method: simpleDecoder started.");
    String retStr = null;
    if (inStr != null) {
      inStr = decodeBase64(inStr);
      StringBuffer stb = new StringBuffer(inStr.length());
      int ind = 0;
      for (int i = 0; i < inStr.length(); i++) {
        ind = RANDS.indexOf(inStr.charAt(i));
        if (ind != -1) {
          stb.append(CHARS.charAt(ind));
        } else {
          throw new NullPointerException("Illegal character");
        }
      }
      retStr = stb.toString();
    }
    logger.debug("Method: simpleDecoder finished");
    return retStr;
  }
}
