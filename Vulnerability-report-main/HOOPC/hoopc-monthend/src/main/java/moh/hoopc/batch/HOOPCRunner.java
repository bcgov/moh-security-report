package moh.hoopc.batch;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class HOOPCRunner {
  private static Logger logger = LoggerFactory.getLogger(HOOPCRunner.class.getName());
  private static java.net.ServerSocket lock = null;

  // error codes
  private static final int SETUP_ERROR = -1;

  private static void createLogger(String loggingProperties) {
    logger.debug(
        String.format("Logging properties are no longer read from '%s'.", loggingProperties));
  }

  public static java.net.ServerSocket createLock(String lockPort, Logger myLogger) {
    java.net.ServerSocket myLock = null;

    try {
      myLock = new java.net.ServerSocket(Integer.parseInt(lockPort));
    } catch (java.io.IOException e) {
      if (myLogger != null) {
        myLogger.error("Failed to acquire lock port");
      } else {
        System.err.println("Failed to acquire lock port");
      }

    } catch (NumberFormatException e) {
      if (myLogger != null) {
        myLogger.error("Configuration file port invalid");
      } else {
        System.err.println("Configuration file port invalid");
      }
    }
    return myLock;
  }

  public static void main(String[] args) {
    int exitCode = SETUP_ERROR;
    if (args.length >= 1) {
      java.util.Properties prp = new java.util.Properties();
      try {
        prp.load(new java.io.FileInputStream(args[0]));
        prp.setProperty("hoopc.props.filename", args[0]);
        String strPort = prp.getProperty("lock.port");
        lock = createLock(strPort, null);

        if (lock != null) { // create logger and process
          createLogger(args[0]); // we know this file exists as we already opened it
          HOOPCFileProcessor hoopc = new HOOPCFileProcessor(prp);
          exitCode = hoopc.process();
        } else {
          System.err.println("Unable to establish primary lock port.");
          System.err.println(
              "Most likely this is caused by another Delivery Agent running on the same port");
          System.err.println("No log file has been created or modified");
        }
      } catch (java.io.IOException e) {
        e.printStackTrace();
      }
    } else {
      System.out.println("Usage: HOOPCRunner properties.file");
    }
    System.exit(exitCode);
  }
}
