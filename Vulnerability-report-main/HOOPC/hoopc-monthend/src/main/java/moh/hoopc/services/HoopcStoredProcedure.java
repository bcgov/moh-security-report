/* *******************************************************************************
 * Licensed Materials - Property of IBM                                        *
 * Copyright IBM Canada Ltd 2004 All Rights Reserved                         *
 *******************************************************************************
 * Please do not makes any changes to this file without first                  *
 * updating the revision history below, under description                      *
 * please include Harvest Change Request or PSO Tools CR that                  *
 * caused the change.                                                          *
 * Revision History:                                                           *
 *                                                                             *
 * Date        Name              Description                                   *
 * ----------  ----------------  --------------------------------------------- *
 * 04-21-2005  David Bartlett    Modified: Handle closing result sets.         *
 * 06-27-2005  Ron Merner        Modified: execute() to handle Rules Engine    *
 *                               errors differently than PL/SQL exceptions.    *
 ******************************************************************************* */
package moh.hoopc.services;

import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import moh.hoopc.services.util.StoredProcedureException;
import org.apache.log4j.Logger;

/**
 * @author Tom Fishwick
 *     <p>wraps a CallableStatement object, represents a hoopc specific stored procedure. a hoopc SP
 *     has some common params like userId,sessionId,resultNum and resultMessage
 *     <p>this clas is package access because it should never be used outside of moh.hoopc.services
 */
class HoopcStoredProcedure {
  private Logger logger = Logger.getLogger(HoopcStoredProcedure.class);
  private CallableStatement cs;

  public Connection con;
  private String userId;
  private String sessionId;

  int resultParameterIndex;
  int messageParameterIndex;

  static final int ORACLE_OK = 0;

  String sql;

  HoopcStoredProcedure(
      String sql,
      int userParameterIndex,
      int sessionParameterIndex,
      int resultParameterIndex,
      int messageParameterIndex,
      String userId,
      String sessionId,
      Connection con)
      throws StoredProcedureException {
    this.userId = userId;
    this.sessionId = sessionId;
    this.con = con;

    logger.debug("new HoopcStoredProcedure(sql=" + sql + ") Connection=" + con);
    this.sql = sql;
    try {
      cs = con.prepareCall(sql);
    } catch (SQLException e) {
      e.printStackTrace();
      throw new StoredProcedureException("Connection.prepareCall(): " + e.getMessage(), e);
    }

    setString(userParameterIndex, userId);
    setString(sessionParameterIndex, sessionId);
    this.resultParameterIndex = resultParameterIndex;
    this.messageParameterIndex = messageParameterIndex;
    registerOutParameter(resultParameterIndex, Types.INTEGER);
    registerOutParameter(messageParameterIndex, Types.VARCHAR);
  }

  HoopcStoredProcedure(String sql, String userId, String sessionId, Connection con)
      throws StoredProcedureException {
    this.userId = userId;
    this.sessionId = sessionId;
    this.con = con;

    logger.debug("new HoopcStoredProcedure(sql=" + sql + ") Connection=" + con);
    this.sql = sql;
    try {
      cs = con.prepareCall(sql);
    } catch (SQLException e) {
      throw new StoredProcedureException("Connection.prepareCall(): " + e.getMessage(), e);
    }
  }

  void init(Connection connection, String userIdt, String sessionIdt) {
    con = connection;
    userId = userIdt;
    sessionId = sessionIdt;
  }

  /*
   * executes the SP and checks for the result.
   */
  void execute() throws StoredProcedureException {
    logger.debug("execute() starting");
    try {
      cs.execute();
    } catch (SQLException e) {
      e.printStackTrace();
      throw new StoredProcedureException(
          sql + ": during Statement.execute(): " + e.getMessage(), e);
    }

    int resultCode = getInt(resultParameterIndex);
    String message = getString(messageParameterIndex);

    if (resultCode != ORACLE_OK) {
      System.out.println("result code: " + resultCode);
      System.out.println("message: " + message);
    }
    // if (sql.indexOf("SearchClaimInfo") != -1) {
    //	resultCode = 1305;
    //	message = "message=test error";
    // }
    if (resultCode != ORACLE_OK) {
      if (resultCode == 990) { // [RRM]
        throw new StoredProcedureException(message);
      } else {
        throw new StoredProcedureException(
            "Oracle stored procedure exception during call to "
                + sql
                + ": resultCode="
                + resultCode
                + " message="
                + message);
      }
    }
    logger.debug("execute() finished");
  }

  /*
   * executes the SP and checks for the result.
   */
  void execute_dbms() throws StoredProcedureException {
    logger.debug("execute() starting");
    try {
      cs.execute();
    } catch (SQLException e) {
      throw new StoredProcedureException(
          sql + ": during Statement.execute(): " + e.getMessage(), e);
    }

    logger.debug("exeute() finished");
  }

  void close() throws StoredProcedureException {
    try {
      cs.close();
    } catch (SQLException e) {
      throw new StoredProcedureException("close() failed", e);
    }
  }

  // *===========================================================================*/
  // * Name    : closeRS                                                         */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   April 21,2005     Created to close a given result set.    */
  // *===========================================================================*/
  void closeRS(ResultSet rs) throws StoredProcedureException {
    try {
      rs.close();
    } catch (SQLException e) {
      throw new StoredProcedureException("Result set close() failed", e);
    }
  }

  void registerOutParameter(int parameterIndex, int type) throws StoredProcedureException {
    try {
      cs.registerOutParameter(parameterIndex, type);
    } catch (SQLException e) {
      throwGetParameterException("registerOutParameter(" + parameterIndex + ")", e);
    }
  }

  int getInt(int parameterIndex) throws StoredProcedureException {
    int i = 0;
    try {
      i = cs.getInt(parameterIndex);
    } catch (SQLException e) {
      throwGetParameterException("getInt(" + parameterIndex + ")", e);
    }
    return i;
  }

  int getLockId(int parameterIndex) throws StoredProcedureException {
    int lockId = getInt(parameterIndex);
    if (lockId < 1)
      throw new StoredProcedureException(
          "lock id's must be a positive integer (is: " + lockId + ")");
    return lockId;
  }

  Double getDouble(int parameterIndex) throws StoredProcedureException {
    BigDecimal b = null;
    try {
      b = cs.getBigDecimal(parameterIndex);
      if (b == null) return null;
    } catch (SQLException e) {
      throwGetParameterException("getDouble(" + parameterIndex + ")", e);
    }
    return new Double(b.doubleValue());
  }

  Object getObject(int parameterIndex) throws StoredProcedureException {
    Object o = null;
    try {
      o = cs.getObject(parameterIndex);
    } catch (SQLException e) {
      throwGetParameterException("getObject(" + parameterIndex + ")", e);
    }
    return o;
  }

  java.util.Date getDate(int parameterIndex) throws StoredProcedureException {
    java.util.Date date = null;
    try {
      date = cs.getDate(parameterIndex);
    } catch (SQLException e) {
      throwGetParameterException("getObject(" + parameterIndex + ")", e);
    }
    return date;
  }

  String getString(int parameterIndex) throws StoredProcedureException {
    String s = "";
    try {
      s = cs.getString(parameterIndex);
    } catch (SQLException e) {
      throwGetParameterException("getString(" + parameterIndex + ")", e);
    }
    return s;
  }

  /*
   * wrapper methods and helpers around a CallableStatement
   */

  void setNull(int parameterIndex) throws StoredProcedureException {
    try {
      cs.setInt(parameterIndex, Types.NULL);
    } catch (SQLException e) {
      throwSetParameterException("setNull(" + parameterIndex + ",Types.NULL)", e);
    }
  }

  void setNull(int parameterIndex, int type) throws StoredProcedureException {
    try {
      cs.setNull(parameterIndex, type);
    } catch (SQLException e) {
      throwSetParameterException("setNull(" + parameterIndex + "," + type + ")", e);
    }
  }

  void setInt(int parameterIndex, int i) throws StoredProcedureException {
    logger.debug("setInt(" + parameterIndex + "," + i + ")");
    try {
      cs.setInt(parameterIndex, i);
    } catch (SQLException e) {
      throwSetParameterException("setInt(" + parameterIndex + "," + i + ")", e);
    }
  }

  void setDate(int parameterIndex, java.sql.Date date) throws StoredProcedureException {
    try {
      cs.setDate(parameterIndex, date);
    } catch (SQLException e) {
      throwSetParameterException("setDate(" + parameterIndex + "," + date + ")", e);
    }
  }

  void setDate(int parameterIndex, java.util.Date date) throws StoredProcedureException {
    java.sql.Date val = null;
    if (date != null) val = new java.sql.Date(date.getTime());
    try {
      cs.setDate(parameterIndex, val);
    } catch (SQLException e) {
      throwSetParameterException("setDate(" + parameterIndex + "," + date + ")", e);
    }
  }

  void setDouble(int parameterIndex, double d) throws StoredProcedureException {
    try {
      cs.setDouble(parameterIndex, d);
    } catch (SQLException e) {
      throwSetParameterException("setDouble(" + parameterIndex + "," + d + ")", e);
    }
  }

  void setDouble(int parameterIndex, Double d) throws StoredProcedureException {
    try {
      if (d == null) cs.setBigDecimal(parameterIndex, null);
      else cs.setDouble(parameterIndex, d.doubleValue());
    } catch (SQLException e) {
      throwSetParameterException("setDouble(" + parameterIndex + "," + d + ")", e);
    }
  }

  void setInt(int parameterIndex, Integer i) throws StoredProcedureException {
    try {
      if (i == null) cs.setBigDecimal(parameterIndex, null);
      else cs.setInt(parameterIndex, i.intValue());
    } catch (SQLException e) {
      throwSetParameterException("setInt(" + parameterIndex + "," + i + ")", e);
    }
  }

  void setString(int parameterIndex, String s) throws StoredProcedureException {
    logger.debug("setString(" + parameterIndex + "," + (s == null ? "[null]" : s) + ")");
    try {
      cs.setString(parameterIndex, s);
    } catch (SQLException e) {
      throwSetParameterException("setString(" + parameterIndex + "," + s + ")", e);
    }
  }

  void throwSetParameterException(String setCall, SQLException e) throws StoredProcedureException {
    throw new StoredProcedureException(setCall + " call failed during " + sql, e);
  }

  void throwGetParameterException(String setCall, SQLException e) throws StoredProcedureException {
    throw new StoredProcedureException(setCall + " call failed during " + sql, e);
  }
}
