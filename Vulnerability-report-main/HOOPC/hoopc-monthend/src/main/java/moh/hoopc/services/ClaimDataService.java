/*
 *******************************************************************************
 * Licensed Materials - Property of IBM * Copyright IBM Canada Ltd 2004 All Rights Reserved *
 *******************************************************************************
 * Please do not makes any changes to this file without first * updating the revision history below,
 * under description * please include Harvest Change Request or PSO Tools CR that * caused the
 * change. * Revision History: * * Date Name Description * ---------- ----------------
 * --------------------------------------------- * 03-09-2005 David Bartlett Modified: Added code to
 * allow insertion of * adjustment decisions from an import file and * modified claim inserations to
 * accept two new * parms (import filename and import rownum) * 04-11-2005 David Bartlett Modified:
 * changed call to insert high cost * procedure codes (insertHighCostProcAndRate). * 04-12-2005
 * David Bartlett Modified: Made sure admission number handled. * 04-19-2005 David Bartlett
 * Modified: Added old end date to getServiceCode* ,getHospital,getHighCostProcCodeAndRates *
 * 04-20-2005 David Bartlett Modified: When inserting/updating adj requests* decisions, check claim
 * type to determine which* rule string to use. Also added methods for * deletion of adjustments and
 * requests. * 04-22-2005 David Bartlett Modified: Seq id of High Cost Procs 2 and 3 * decisions,
 * check claim type to determine which* rule string to use. Also added methods for * deletion of
 * adjustments and requests. * 04-27-2005 David Bartlett Modified: Adjusted coding scheme handling
 * when* retrieving diagnostic/procedure codes. * 05-09-2005 David Bartlett Modified: When
 * creating/saving claims do E45 * /R03 check before creating patient info. * 05-11-2005 David
 * Bartlett Modified: Fixed insertion of non-res claims * to pass receiving province instead of
 * treating* province * 05-17-2005 David Bartlett Modified: Stripped out all blanks in the * postal
 * code before comparing to R03. * 05-25-2005 Ron Merner Fixed processing of diagnosis codes as the
 * * coding scheme was not being passed around. * 06-06-2005 Ron Merner Added ability to delete
 * claims. * 06-29-2005 Ron Merner Modified updateProcedure, updateProcedureInfo,* and
 * insertProcedureInfo to take a coding * scheme. * 07-20-2005 Ron Merner Added
 * getAuthHospitalNumbers. * 07-25-2005 Ron Merner Added getLastPos. * 07-29-2005 Ron Merner Updated
 * updateProvinceData and getProvince to * handle supplier phone number. * 08-05-2005 Ron Merner
 * Added supplier number/title/office and all * invoice attributes to getProvince and to *
 * updateProvinceData. * Modified getSearchResultList to pick up the * new treating province code. *
 * 09-28-2005 Ron Merner Modified getClaimErrors() to remove duplicate * error messages. *
 * 11-29-2005 Ron Merner Modified searchClaimInfo() to populate and * pass the coding scheme so
 * searching works for * diagnoses and procedures. * 02-02-2006 Cathy HU Modified saveClaim(Ric
 * claim) and * saveClaim(Roc claim) for change flag if the * is imported * 21-02-2006 Christine
 * Root Added E45 Validation to validate PHN * eligibility, date of birth and name * 08-08-2006
 * Cathy Hu Modified insertBatchOutpatientAdjDecision(Roc)* to fix a bug for CR2006-325. *
 *******************************************************************************
 */
package moh.hoopc.services;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.List;
import moh.hoopc.app.AdjustmentDecision;
import moh.hoopc.app.AdjustmentRequest;
import moh.hoopc.app.Claim;
import moh.hoopc.app.Lov;
import moh.hoopc.app.Nric;
import moh.hoopc.app.Nroc;
import moh.hoopc.app.Patient;
import moh.hoopc.app.Ric;
import moh.hoopc.app.Roc;
import moh.hoopc.services.input.GetDiagnosticInfoIn;
import moh.hoopc.services.input.GetProcedureInfoIn;
import moh.hoopc.services.output.GetDiagnosticInfoCur;
import moh.hoopc.services.output.GetDiagnosticInfoOut;
import moh.hoopc.services.output.GetProcedureInfoCur;
import moh.hoopc.services.output.GetProcedureInfoOut;
import moh.hoopc.services.util.ServiceFailedException;
import moh.hoopc.staging.SADetailRecord;
import moh.hoopc.staging.SAHeaderRecord;
import moh.hoopc.staging.SARejectReport;
import oracle.jdbc.OracleTypes;
import org.apache.commons.lang3.NotImplementedException;
import org.apache.log4j.Logger;
import org.jfree.util.Log;

/*
 * @author Tom Fishwick
 */
public class ClaimDataService extends DataService {

  private Logger logger = Logger.getLogger(ClaimDataService.class);

  static final String C = "C";
  static final String U = "U";
  static final int E45_CON_ERR = 0;
  static final int R03_CON_ERR = 1;
  static final int E45_ERR = 2;
  static final int R03_ERR_1 = 3;
  static final int R03_ERR_2 = 4;
  static final int E45_ERR_2 = 5;
  static final int E45_ERR_3 = 6;
  static final int E45_ERR_4 = 7;
  static final int R03_ERR_3 = 8;
  static final int R03_ERR_4 = 9;

  // *===========================================================================*/
  // * Name : ClaimDataService */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett May 05, 2005 Added constructor for use by hospital */
  // * import load. */
  // *===========================================================================*/
  /**
   * Given the name of the dataSource attempts to make a connection to it
   *
   * @param hostname Server hosting the database
   * @param sid Server id
   * @param uid User ID
   * @param pwd encrypted password
   * @param dbConnectTimeout Max time to wait (in seconds) for a db connection.
   * @param dbQueryTimeOut Max time to wait (in seconds) for a query to run.
   * @param sessionId Id identifying the session that initiated the call
   */
  public ClaimDataService(
      String hostname,
      String port,
      String sid,
      String uid,
      String pwd,
      int dbConnectTimeOut,
      int dbQueryTimeOut,
      String userId,
      String sessionId)
      throws ServiceFailedException {
    super(hostname, port, sid, uid, pwd, dbConnectTimeOut, dbQueryTimeOut, userId, sessionId);
  }

  public ClaimDataService(Connection con, String userId, String sessionId) {
    super(con, userId, sessionId);
  }

  // public Ric getRic(int searchId, int recordNumber) throws ServiceFailedException {
  // Ric claim = new Ric(this);
  // claim.setSearchId(searchId);
  // claim.setRecordNumber(recordNumber);
  // getResidentClaimInfo(searchId, recordNumber, claim);
  // getPatientInfo(claim);
  // getCommonInpatientClaim(claim);
  // return claim;
  // }
  //
  // public Nric getNric(int searchId, int recordNumber)
  // throws ServiceFailedException {
  // Nric claim = new Nric(this);
  // claim.setSearchId(searchId);
  // claim.setRecordNumber(recordNumber);
  // getNonResidentClaimInfo(claim);
  // getPatientInfo(claim);
  // getCommonInpatientClaim(claim);
  // return claim;
  // }
  //
  // //*===========================================================================*/
  // //* Name : getCommonInpatientClaim */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ ----------------------------------------*/
  // //* DC Bartlett April 14,2005 Modified: Added Admission Number */
  // //* DC Bartlett April 22,2005 Modified: Sequence id of high cost proc3*/
  // //* was being assigned to high cost proc2. */
  // //* April 27, 2005 Modified: When retrieving diagnostic */
  // //* codes, use coding scheme in claim */
  // //* instead of a hard coded value. When */
  // //* retrieving procedure codes, use the */
  // //* coding scheme (originally it wasn't). */
  // //*===========================================================================*/
  // public void getCommonInpatientClaim(Claim claim)
  // throws ServiceFailedException {
  // int searchId = claim.getSearchId();
  // int recordNumber = claim.getRecordNumber();
  // getClaimCommon(claim);
  //
  // //claim.setCodingScheme("ICD09");
  // // Call GetAdmissionInfoIn StoredProcedure
  // GetAdmissionInfoIn getAdmissionInfoIn = new GetAdmissionInfoIn();
  // getAdmissionInfoIn.setConnection(con);
  // getAdmissionInfoIn.setUserID(userId);
  // getAdmissionInfoIn.setSessionID(sessionId);
  // getAdmissionInfoIn.setRecordNumber(recordNumber);
  // getAdmissionInfoIn.setSearchID(searchId);
  // GetAdmissionInfo getAdmissionInfo
  // = new GetAdmissionInfo(getAdmissionInfoIn);
  // getAdmissionInfo.process();
  // GetAdmissionInfoOut getAdmissionInfoOut
  // = (GetAdmissionInfoOut) getAdmissionInfo.getOutputBean();
  //
  // claim.setAdmissionDate(getAdmissionInfoOut.getAdmissionDate());
  // claim.setAdmissionNumber(getAdmissionInfoOut.getAdmissionNumber());
  // claim.setDischargeDate(getAdmissionInfoOut.getDischargeDate());
  // claim.setTotalDaysStay(getAdmissionInfoOut.getTotalDaysStay());
  // claim.setLongTermFlag(getAdmissionInfoOut.getLongTermStayInd());
  // claim.setPerDiemRate(getAdmissionInfoOut.getPerDiemRate());
  // claim.setLockIdAdmissionInfo(getAdmissionInfoOut.getLockSeqNum());
  //
  // // Call GetDiagnosticInfo StoredProcedure
  // GetDiagnosticInfoIn getDiagnosticInfoIn = new GetDiagnosticInfoIn();
  // getDiagnosticInfoIn.setConnection(con);
  // getDiagnosticInfoIn.setUserID(userId);
  // getDiagnosticInfoIn.setSessionID(sessionId);
  //
  // getDiagnosticInfoIn.setRecordNumber(recordNumber);
  // getDiagnosticInfoIn.setSearchID(searchId);
  // getDiagnosticInfoIn.setCodingScheme(claim.getCodingScheme());
  // GetDiagnosticInfo getDiagnosticInfo
  // = new GetDiagnosticInfo(getDiagnosticInfoIn);
  // getDiagnosticInfo.process();
  // GetDiagnosticInfoOut getDiagnosticInfoOut
  // = (GetDiagnosticInfoOut) getDiagnosticInfo.getOutputBean();
  //
  // List dcur = getDiagnosticInfoOut.getDiagnosticInfoList();
  // Iterator dcurI = dcur.iterator();
  // if (dcurI.hasNext()) {
  // GetDiagnosticInfoCur cur = (GetDiagnosticInfoCur) dcurI.next();
  // claim.setDiagnosis1(cur.getCode());
  // claim.setLockIdDiagnosis1(cur.getLockSeqNum());
  // claim.setSequenceIdDiagnosis1(cur.getSequenceNum());
  // }
  // if (dcurI.hasNext()) {
  // GetDiagnosticInfoCur cur = (GetDiagnosticInfoCur) dcurI.next();
  // claim.setDiagnosis2(cur.getCode());
  // claim.setLockIdDiagnosis2(cur.getLockSeqNum());
  // claim.setSequenceIdDiagnosis2(cur.getSequenceNum());
  // }
  // if (dcurI.hasNext()) {
  // GetDiagnosticInfoCur cur = (GetDiagnosticInfoCur) dcurI.next();
  // claim.setDiagnosis3(cur.getCode());
  // claim.setLockIdDiagnosis3(cur.getLockSeqNum());
  // claim.setSequenceIdDiagnosis3(cur.getSequenceNum());
  // }
  //
  // // Call GetProcedureInfo StoredProcedure
  // GetProcedureInfoIn getProcedureInfoIn = new GetProcedureInfoIn();
  // getProcedureInfoIn.setConnection(con);
  // getProcedureInfoIn.setUserId(userId);
  // getProcedureInfoIn.setSessionId(sessionId);
  // getProcedureInfoIn.setCodingScheme(claim.getCodingScheme());
  // getProcedureInfoIn.setRecordNumber(recordNumber);
  // getProcedureInfoIn.setSearchID(searchId);
  // GetProcedureInfo getProcedureInfo
  // = new GetProcedureInfo(getProcedureInfoIn);
  // getProcedureInfo.process();
  // GetProcedureInfoOut getProcedureInfoOut
  // = (GetProcedureInfoOut) getProcedureInfo.getOutputBean();
  // List pcur = getProcedureInfoOut.getProcedureInfoList();
  // Iterator pcurI = pcur.iterator();
  // if (pcurI.hasNext()) {
  // GetProcedureInfoCur cur = (GetProcedureInfoCur) pcurI.next();
  // claim.setProcedure1(cur.getCode());
  // claim.setLockIdProcedure1(cur.getLockSeqNum());
  // claim.setSequenceIdProcedure1(cur.getSequenceNum());
  // }
  // if (pcurI.hasNext()) {
  // GetProcedureInfoCur cur = (GetProcedureInfoCur) pcurI.next();
  // claim.setProcedure2(cur.getCode());
  // claim.setLockIdProcedure2(cur.getLockSeqNum());
  // claim.setSequenceIdProcedure2(cur.getSequenceNum());
  // }
  // if (pcurI.hasNext()) {
  // GetProcedureInfoCur cur = (GetProcedureInfoCur) pcurI.next();
  // claim.setProcedure3(cur.getCode());
  // claim.setLockIdProcedure3(cur.getLockSeqNum());
  // claim.setSequenceIdProcedure3(cur.getSequenceNum());
  // }
  //
  // // Call GetHighCostProcedureInfo StoredProcedure
  // GetHighCostProcedureInfoIn hcpiIn = new GetHighCostProcedureInfoIn();
  // hcpiIn.setConnection(con);
  // hcpiIn.setUserId(userId);
  // hcpiIn.setSessionId(sessionId);
  // hcpiIn.setRecordNumber(recordNumber);
  // hcpiIn.setSearchID(searchId);
  // GetHighCostProcedureInfo getHighCostProcedureInfo
  // = new GetHighCostProcedureInfo(hcpiIn);
  // getHighCostProcedureInfo.process();
  // GetHighCostProcedureInfoOut hcpiOut
  // = (GetHighCostProcedureInfoOut) getHighCostProcedureInfo.getOutputBean();
  // List highCostProcedures = hcpiOut.getHighCostProcedureInfoList();
  // Iterator i = highCostProcedures.iterator();
  // if (i.hasNext()) {
  // GetHighCostProcedureInfoCur cur = (GetHighCostProcedureInfoCur) i.next();
  // claim.setHighCost1Code(cur.getHighCostProcedureCode());
  // claim.setHighCost1Date(cur.getProcedureDate());
  // claim.setHighCost1Amount(cur.getProcedureCost());
  // claim.setLockIdHighCost1(cur.getLockSeqNum());
  // claim.setSequenceIdHighCost1(cur.getSequenceNum());
  // }
  // if (i.hasNext()) {
  // GetHighCostProcedureInfoCur cur = (GetHighCostProcedureInfoCur) i.next();
  // claim.setHighCost2Code(cur.getHighCostProcedureCode());
  // claim.setHighCost2Date(cur.getProcedureDate());
  // claim.setHighCost2Amount(cur.getProcedureCost());
  // claim.setLockIdHighCost2(cur.getLockSeqNum());
  // claim.setSequenceIdHighCost2(cur.getSequenceNum());
  // }
  // if (i.hasNext()) {
  // GetHighCostProcedureInfoCur cur = (GetHighCostProcedureInfoCur) i.next();
  // claim.setHighCost3Code(cur.getHighCostProcedureCode());
  // claim.setHighCost3Date(cur.getProcedureDate());
  // claim.setHighCost3Amount(cur.getProcedureCost());
  // claim.setLockIdHighCost3(cur.getLockSeqNum());
  // claim.setSequenceIdHighCost3(cur.getSequenceNum());
  // }
  // }
  //
  public Roc getRoc(int searchId, int recordNumber) throws ServiceFailedException {
    Roc claim = new Roc(this);
    claim.setSearchId(searchId);
    claim.setRecordNumber(recordNumber);
    getResidentClaimInfo(searchId, recordNumber, claim);
    getPatientInfo(claim);
    getCommonOutpatient(claim);
    return claim;
  }

  public Nroc getNroc(int searchId, int recordNumber) throws ServiceFailedException {
    Nroc claim = new Nroc(this);
    claim.setSearchId(searchId);
    claim.setRecordNumber(recordNumber);
    getNonResidentClaimInfo(claim);
    getPatientInfo(claim);
    getCommonOutpatient(claim);
    // claim.setCodingScheme("ICD10");
    return claim;
  }

  // *===========================================================================*/
  // * Name : getCommonOutpatient */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett April 27,2005 Modified: Added code to determine the */
  // * appropriate coding scheme to use when */
  // * retrieving diagnostic and procedure */
  // * codes based on form type. */
  // *===========================================================================*/
  private void getCommonOutpatient(Claim claim) throws ServiceFailedException {

    int searchId = claim.getSearchId();
    int recordNumber = claim.getRecordNumber();

    getClaimCommon(claim);

    String codeScheme1 = "";
    String codeScheme2 = "";

    if (claim.getClass().equals(Nroc.class)) {
      codeScheme1 = claim.getCodingScheme();
    }

    if (claim.getClass().equals(Roc.class)) {
      codeScheme1 = claim.getCodingScheme();
      codeScheme2 = claim.getCodingScheme();
    }

    // get diag data
    List diagcodes = getDiagnosticCodes(searchId, recordNumber, codeScheme1);
    if (diagcodes.size() > 0) {
      GetDiagnosticInfoCur cur = (GetDiagnosticInfoCur) diagcodes.get(0);
      logger.debug("set diag code " + codeScheme1 + " = " + cur.getCode());
      claim.setDiagnosis1(cur.getCode());
      claim.setLockIdDiagnosis1(cur.getLockSeqNum());
      claim.setSequenceIdDiagnosis1(cur.getSequenceNum());
    }

    /*
     * if (claim.getClass().equals(Roc.class)) { diagcodes = getDiagnosticCodes(searchId,
     * recordNumber, codeScheme2); if (diagcodes.size() > 0) { GetDiagnosticInfoCur cur =
     * (GetDiagnosticInfoCur) diagcodes.get(0); logger.debug("set diag code " +codeScheme2 +" = " +
     * cur.getCode()); claim.setDiagnosis2(cur.getCode());
     * claim.setLockIdDiagnosis2(cur.getLockSeqNum());
     * claim.setSequenceIdDiagnosis2(cur.getSequenceNum()); } }
     */
    // get procedure data
    List codes = getProcedureCodes(searchId, recordNumber, codeScheme1);
    if (codes.size() > 0) {
      GetProcedureInfoCur cur = (GetProcedureInfoCur) codes.get(0);
      logger.debug("set proc code " + codeScheme1 + " = " + cur.getCode());
      claim.setProcedure1(cur.getCode());
      claim.setLockIdProcedure1(cur.getLockSeqNum());
      claim.setSequenceIdProcedure1(cur.getSequenceNum());
    }

    /*
     * if (claim.getClass().equals(Roc.class)) { codes = getProcedureCodes(searchId, recordNumber,
     * codeScheme2); if (codes.size() > 0) { GetProcedureInfoCur cur = (GetProcedureInfoCur)
     * codes.get(0); logger.debug("set diag code " +codeScheme2 +" = " + cur.getCode());
     * claim.setProcedure2(cur.getCode()); claim.setLockIdProcedure2(cur.getLockSeqNum());
     * claim.setSequenceIdProcedure2(cur.getSequenceNum()); } }
     */
    claim.adjRequest = getAdjustmentRequest(searchId, recordNumber);
    claim.adjDecision = getAdjustmentDecision(searchId, recordNumber);
  }

  private void getClaimCommon(Claim claim) throws ServiceFailedException {
    int searchId = claim.getSearchId();
    int recordNumber = claim.getRecordNumber();

    claim.setErrors(getClaimErrors(searchId, recordNumber));
    claim.adjRequest = getAdjustmentRequest(searchId, recordNumber);
    claim.adjDecision = getAdjustmentDecision(searchId, recordNumber);
  }

  // *===========================================================================*/
  // * Name : createClaim */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett May 02,2005 Modified: Added check to turn off E45 */
  // * DC Bartlett May 09,2005 Modified: Made E34/R03 check before */
  // * creating patient info so city and postal*/
  // * code of R03 can be used if left blank */
  // * on screen. */
  // * DC Bartlett May 17,2005 Modified: Stripped out all blanks in the*/
  // * postal code before comparing to R03. */
  // *===========================================================================*/
  @Deprecated
  public Roc createClaim(Roc claim) throws ServiceFailedException {
    // if (claim.getChangeReason().length() > 0) {
    // claim.setChangeFlag("Y");
    // }
    //
    // ruseBegin("INSERTRESIDENTOUTPATIENTCLAIM");
    //
    // int searchId = insertResOutpatClaimInfo(claim);
    //
    // int recordNumber = 1;
    // claim.setSearchId(searchId);
    // claim.setRecordNumber(recordNumber);
    //
    // claim.setSearchId(searchId);
    // claim.setRecordNumber(recordNumber);
    //
    // String E45Flag = "Y";
    // try {
    // E45Flag = ((Properties) Init.getPrpUtil()).getProperty(HOOPC2Properties.PRP_RES_BI_E45_FLAG);
    // } catch (NullPointerException npe) {
    // E45Flag = "Y";
    // }
    //
    //
    // if ((E45Flag == null) || (E45Flag.equals("") || E45Flag.equals("Y"))) {
    //
    // E45Out e45Out = E45.getE45(claim);
    //
    // if (e45Out == null) {
    // this.logClaimError(C, E45_CON_ERR, 335, claim.getUserId(), searchId, 1, claim, null);
    // } else if (!e45Out.isValid()) {
    // this.logClaimError(C, E45_ERR, 335, claim.getUserId(), searchId, 1, claim, null);
    // } else if (e45Out.isValid()) {
    // // Validate that the PHN is covered under MSP
    // if (e45Out.getEligibility().equals("NO")) {
    // this.logClaimError(U, E45_ERR_2, 511, claim.getUserId(), searchId, 1, claim, null);
    // }
    //
    // // Validate date of birth
    // SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
    // java.util.Date valid_dob = null;
    // try {
    // valid_dob = format.parse(e45Out.getDateOfBirth());
    // } catch (ParseException e) {
    // }
    // if ((claim.getBirthDate() == null)) {
    // claim.setBirthDate(valid_dob);
    // } else if (valid_dob.compareTo(claim.getBirthDate()) != 0) {
    // this.logClaimError(U, E45_ERR_3, 518, claim.getUserId(), searchId, 1, claim,
    // format.format(valid_dob));
    // }
    //
    // R03Out r03Out = R03.getR03(claim);
    // if (r03Out == null) {
    // this.logClaimError(C, R03_CON_ERR, 342, claim.getUserId(), searchId, 1, claim, null);
    // } else {
    // // Validate first name
    // String valid_first_name = r03Out.getFirstGivenName();
    // if ((claim.getFirstName() == null) || (claim.getFirstName().trim().length() == 0)) {
    // claim.setFirstName(valid_first_name);
    // } else if (!valid_first_name.equalsIgnoreCase(claim.getFirstName())) {
    // this.logClaimError(U, R03_ERR_3, 518, claim.getUserId(), searchId, 1, claim,
    // valid_first_name);
    // }
    //
    // // Validate last name
    // String valid_family_name = r03Out.getFamilyName();
    // if ((claim.getLastName() == null) || (claim.getLastName().trim().length() == 0)) {
    // claim.setLastName(valid_family_name);
    // } else if (!valid_family_name.equalsIgnoreCase(claim.getLastName())) {
    // this.logClaimError(U, R03_ERR_4, 518, claim.getUserId(), searchId, 1, claim,
    // valid_family_name);
    // }
    //
    // String valid_city = r03Out.getAddressInfo().getCity();
    // String valid_postal = r03Out.getAddressInfo().getPostalCode();
    //
    // if ((claim.getCity() == null) || (claim.getCity().trim().length() == 0)) {
    // claim.setCity(valid_city);
    // } else if (!valid_city.equalsIgnoreCase(claim.getCity())) {
    // this.logClaimError(C, R03_ERR_1, 342, claim.getUserId(), searchId, 1, claim,
    // valid_city);
    // }
    //
    // if ((claim.getPostalCode() == null) || (claim.getPostalCode().trim().length() == 0)) {
    // claim.setPostalCode(valid_postal);
    // } else if (!valid_postal.replaceAll(" ", "")
    // .equalsIgnoreCase(claim.getPostalCode().replaceAll(" ", ""))) {
    // this.logClaimError(C, R03_ERR_2, 342, claim.getUserId(), searchId, 1, claim,
    // valid_postal);
    // }
    // }
    // }
    // }
    //
    // insertResOutpatPatientInfo(claim, searchId, 1);
    //
    // createCommonOutpatientInfo(claim);
    //
    // ruseEnd("INSERTRESIDENTOUTPATIENTCLAIM");
    //
    // if ((claim.getClaimSource() != null) && (claim.getClaimSource().equals("IMPORT"))) {
    // return claim;
    // } else {
    // return getRoc(claim.getSearchId(), claim.getRecordNumber());
    // }
    Log.info("+++++ Calling createClaim");
    throw new NotImplementedException("createClaim");
  }

  // *===========================================================================*/
  // * Name : createAdj */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 08,2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Created specifically for handling the insertion of resident adjustment decisions from a batch
   * import file.
   *
   * @throws ServiceFailedException
   */
  @Deprecated
  public Roc createAdj(Roc claim) throws ServiceFailedException {
//    if (claim.getChangeReason().length() > 0) {
//      claim.setChangeFlag("Y");
//    }
//    ruseBegin("EDITRESIDENTADJUSTMENTS");
//
//    insertBatchOutpatientAdjDecision(claim);
//    ruseEnd("EDITRESIDENTADJUSTMENTS");
    return claim;
  }

  @Deprecated
  public Nroc createClaim(Nroc claim) throws ServiceFailedException {
    // if (claim.getChangeReason().length() > 0) {
    // claim.setChangeFlag("Y");
    // }
    //
    // ruseBegin("INSERTNONRESIDENTOUTPATIENTCLAIM");
    // int searchId = insertNonResOutpatClaimInfo(claim);
    // claim.setSearchId(searchId);
    // claim.setRecordNumber(1);
    //
    // createCommonOutpatientInfo(claim);
    // insertNonResOutpatPatientInfo(claim, searchId, 1);
    //
    // ruseEnd("INSERTNONRESIDENTOUTPATIENTCLAIM");
    //
    // if (claim.getClaimSource().equalsIgnoreCase(Init.getHospImportProperties()
    // .getProperty(HospImpPropertyFileKeys.PRP_HOSP_IMPORT_DATA_SOURCE))) {
    // return claim;
    // } else {
    // return getNroc(claim.getSearchId(), claim.getRecordNumber());
    // }
    //
    Log.info("+++++ Calling createClaim");
    throw new NotImplementedException("createClaim");
  }

  // private void checkE45(Claim claim) {
  // /*
  // if(claim.getBirthDate() != null && claim.getServiceDate() != null) {
  // // e45 check
  // if(bad phn)
  // ask carol what SP to use to insert a claim error (LogClaimError)
  // logClaimError(claim.getSearchId(),claim.getRecordNumber(),"bad phn...");
  // }
  // */
  // }
  //
  // *===========================================================================*/
  // * Name : deleteClaim */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * Ron Merner June 06, 2005 Initial Spec */
  // *===========================================================================*/
  @Deprecated
  public Roc deleteClaim(Roc claim) throws ServiceFailedException {
    //
    // int searchId = claim.getSearchId();
    // int recordNumber = claim.getRecordNumber();
    //
    // // to delete... we need a couple vars
    // if (searchId == 0) {
    // throw new IllegalArgumentException("missing searchId value in claim");
    // }
    // if (recordNumber == 0) {
    // throw new IllegalArgumentException("missing recordNumber in claim object");
    // }
    // deleteClaim(searchId, recordNumber);
    // return claim;
    Log.info("+++++ Calling deleteClaim");
    throw new NotImplementedException("deleteClaim");
  }

  // *===========================================================================*/
  // * Name : saveClaim */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett May 09,2005 Modified: Made E34/R03 check before */
  // * creating patient info so city and postal*/
  // * code of R03 can be used if left blank */
  // * on screen. */
  // * DC Bartlett May 17,2005 Modified: Stripped out all blanks in the*/
  // * postal code before comparing to R03. */
  // *===========================================================================*/
  @Deprecated
  public Ric saveClaim(Ric claim) throws ServiceFailedException {
    // if ((claim.getChangeReason().length() > 0)
    // || (claim.getClaimSource().equalsIgnoreCase("IMPORT"))) {
    // claim.setChangeFlag("Y");
    // }
    //
    // // verify that the state of the claim object is ready to save
    // if (claim.getSearchId() == 0) {
    // throw new RuntimeException("missing searchId value in claim");
    // }
    // if (claim.getRecordNumber() == 0) {
    // throw new RuntimeException("missing recordNumber in claim object");
    // }
    // if (claim.getLockId() == 0) {
    // throw new RuntimeException("no lock Id");
    // }
    //
    // int searchId = claim.getSearchId();
    // int recordNumber = claim.getRecordNumber();
    //
    // ruseBegin("UPDATERESIDENTINPATIENTCLAIM");
    //
    // updateResInpatClaimInfo(claim);
    // saveCommonInpatientInfo(claim);
    // E45Out e45Out = E45.getE45(claim);
    //
    // if (e45Out == null) {
    // this.logClaimError(U, E45_CON_ERR, 433, claim.getUserId(), searchId, recordNumber, claim,
    // null);
    // } else if (!e45Out.isValid()) {
    // this.logClaimError(U, E45_ERR, 433, claim.getUserId(), searchId, recordNumber, claim, null);
    // } else if (e45Out.isValid()) {
    // // Validate that the PHN is covered under MSP
    // SimpleDateFormat format = new SimpleDateFormat("yyyyMMdd");
    //
    // // Validate the date range
    // java.util.Date serviceDate = claim.getServiceDate();
    // claim.setServiceDate(claim.getAdmissionDate());
    // e45Out = E45.getE45(claim);
    //
    // String admissionElibitiliy = e45Out.getEligibility();
    // claim.setServiceDate(claim.getDischargeDate());
    // e45Out = E45.getE45(claim);
    // String dischargeElibitiliy = e45Out.getEligibility();
    //
    // if (admissionElibitiliy.equals("NO") || dischargeElibitiliy.equals("NO")) {
    // this.logClaimError(U, E45_ERR_4, 518, claim.getUserId(), searchId, recordNumber, claim, "");
    // }
    // // set it back and get it again just in case
    // // I know this is a little messy way to do it, but in the future
    // // it may be better to find another way, but it works well for now
    // claim.setServiceDate(serviceDate);
    // e45Out = E45.getE45(claim);
    //
    // // Validate date of birth
    // java.util.Date valid_dob = null;
    // try {
    // valid_dob = format.parse(e45Out.getDateOfBirth());
    // } catch (ParseException e) {
    // }
    // if ((claim.getBirthDate() == null)) {
    // claim.setBirthDate(valid_dob);
    // } else if (valid_dob.compareTo(claim.getBirthDate()) != 0) {
    // this.logClaimError(U, E45_ERR_3, 518, claim.getUserId(), searchId, recordNumber, claim,
    // format.format(valid_dob));
    // }
    //
    // R03Out r03Out = R03.getR03(claim);
    // if (r03Out == null) {
    // this.logClaimError(U, R03_CON_ERR, 440, claim.getUserId(), searchId, recordNumber, claim,
    // null);
    // } else {
    // // Validate first name
    // String valid_first_name = r03Out.getFirstGivenName();
    // if ((claim.getFirstName() == null) || (claim.getFirstName().trim().length() == 0)) {
    // claim.setFirstName(valid_first_name);
    // } else if (!valid_first_name.equalsIgnoreCase(claim.getFirstName())) {
    // this.logClaimError(U, R03_ERR_3, 518, claim.getUserId(), searchId, recordNumber, claim,
    // valid_first_name);
    // }
    //
    // // Validate last name
    // String valid_family_name = r03Out.getFamilyName();
    // if ((claim.getLastName() == null) || (claim.getLastName().trim().length() == 0)) {
    // claim.setLastName(valid_family_name);
    // } else if (!valid_family_name.equalsIgnoreCase(claim.getLastName())) {
    // this.logClaimError(U, R03_ERR_4, 518, claim.getUserId(), searchId, recordNumber, claim,
    // valid_family_name);
    // }
    //
    // String valid_city = r03Out.getAddressInfo().getCity();
    // String valid_postal = r03Out.getAddressInfo().getPostalCode();
    //
    // if ((claim.getCity() == null) || (claim.getCity().trim().length() == 0)) {
    // claim.setCity(valid_city);
    // } else if (!valid_city.equalsIgnoreCase(claim.getCity())) {
    // this.logClaimError(U, R03_ERR_1, 440, claim.getUserId(), searchId, recordNumber, claim,
    // valid_city);
    // }
    //
    // if ((claim.getPostalCode() == null) || (claim.getPostalCode().trim().length() == 0)) {
    // claim.setPostalCode(valid_postal);
    // } else if (!valid_postal.replaceAll(" ", "")
    // .equalsIgnoreCase(claim.getPostalCode().replaceAll(" ", ""))) {
    // this.logClaimError(U, R03_ERR_2, 440, claim.getUserId(), searchId, recordNumber, claim,
    // valid_postal);
    // }
    // }
    // }
    // updateResInpatPatientInfo(claim, searchId, recordNumber);
    // updateAdmissionInfo(claim);
    //
    // ruseEnd("UPDATERESIDENTINPATIENTCLAIM");
    //
    // return getRic(searchId, recordNumber);
    Log.info("+++++ Calling saveClaim");
    throw new NotImplementedException("saveClaim");
  }

  // *===========================================================================*/
  // * Name : deleteClaim */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * Ron Merner June 06, 2005 Initial Spec */
  // *===========================================================================*/
  @Deprecated
  public Ric deleteClaim(Ric claim) throws ServiceFailedException {
    //
    // int searchId = claim.getSearchId();
    // int recordNumber = claim.getRecordNumber();
    //
    // // to delete... we need a couple vars
    // if (searchId == 0) {
    // throw new IllegalArgumentException("missing searchId value in claim");
    // }
    // if (recordNumber == 0) {
    // throw new IllegalArgumentException("missing recordNumber in claim object");
    // }
    // deleteClaim(searchId, recordNumber);
    // return claim;
    Log.info("+++++ Calling deleteClaim");
    throw new NotImplementedException("deleteClaim");
  }

  @Deprecated
  public Nric saveClaim(Nric claim) throws ServiceFailedException {
    // if (claim.getChangeReason().length() > 0) {
    // claim.setChangeFlag("Y");
    // }
    //
    // // verify that the state of the claim object is ready to save
    // if (claim.getSearchId() == 0) {
    // throw new RuntimeException("missing searchId value in claim");
    // }
    // if (claim.getRecordNumber() == 0) {
    // throw new RuntimeException("missing recordNumber in claim object");
    // }
    // if (claim.getLockId() == 0) {
    // throw new RuntimeException("claim.getLockId() returned 0");
    // }
    //
    // int searchId = claim.getSearchId();
    // int recordNumber = claim.getRecordNumber();
    //
    // ruseBegin("UPDATENONRESIDENTINPATIENTCLAIM");
    //
    // claim.setCodingScheme("ICD10");
    //
    // updateNonResInpatClaimInfo(claim);
    // saveCommonInpatientInfo(claim);
    // updateNonResInpatPatientInfo(claim, searchId, recordNumber);
    // updateAdmissionInfo(claim);
    //
    // ruseEnd("UPDATENONRESIDENTINPATIENTCLAIM");
    //
    // return getNric(searchId, recordNumber);
    Log.info("+++++ Calling saveClaim");
    throw new NotImplementedException("saveClaim");
  }

  // *===========================================================================*/
  // * Name : deleteClaim */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * Ron Merner June 06, 2005 Initial Spec */
  // *===========================================================================*/
  @Deprecated
  public Nric deleteClaim(Nric claim) throws ServiceFailedException {
    //
    // int searchId = claim.getSearchId();
    // int recordNumber = claim.getRecordNumber();
    //
    // // to delete... we need a couple vars
    // if (searchId == 0) {
    // throw new IllegalArgumentException("missing searchId value in claim");
    // }
    // if (recordNumber == 0) {
    // throw new IllegalArgumentException("missing recordNumber in claim object");
    // }
    // deleteClaim(searchId, recordNumber);
    // return claim;
    Log.info("+++++ Calling deleteClaim");
    throw new NotImplementedException("deleteClaim");
  }

  // *===========================================================================*/
  // * Name : saveClaim */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett May 09,2005 Modified: Made E34/R03 check before */
  // * creating patient info so city and postal*/
  // * code of R03 can be used if left blank */
  // * on screen. */
  // * DC Bartlett May 17,2005 Modified: Stripped out all blanks in the*/
  // * postal code before comparing to R03. */
  // *===========================================================================*/
  @Deprecated
  public Roc saveClaim(Roc claim) throws ServiceFailedException {

    // if ((claim.getChangeReason().length() > 0)
    // || (claim.getClaimSource().equalsIgnoreCase("IMPORT"))) {
    // claim.setChangeFlag("Y");
    // }
    //
    // // to delete... we need a couple vars
    // if (claim.getSearchId() == 0) {
    // throw new IllegalArgumentException("missing searchId value in claim");
    // }
    // if (claim.getRecordNumber() == 0) {
    // throw new IllegalArgumentException("missing recordNumber in claim object");
    // }
    // if (claim.getLockId() == 0) {
    // throw new IllegalArgumentException("ResOutpatientClaim.getLockId() returned 0");
    // }
    //
    // int searchId = claim.getSearchId();
    // int recordNumber = claim.getRecordNumber();
    //
    // ruseBegin("UPDATERESIDENTOUTPATIENTCLAIM");
    //
    // updateResOutpatClaimInfo(claim);
    // saveCommonOutpatientInfo(claim);
    // E45Out e45Out = E45.getE45(claim);
    //
    // if (e45Out == null) {
    // this.logClaimError(U, E45_CON_ERR, 511, claim.getUserId(), searchId, recordNumber, claim,
    // null);
    // } else if (!e45Out.isValid()) {
    // this.logClaimError(U, E45_ERR, 511, claim.getUserId(), searchId, recordNumber, claim, null);
    // } else if (e45Out.isValid()) {
    // // Validate that the PHN is covered under MSP
    // if (e45Out.getEligibility().equals("NO")) {
    // this.logClaimError(U, E45_ERR_2, 511, claim.getUserId(), searchId, recordNumber, claim,
    // null);
    // }
    //
    // // Validate date of birth
    // SimpleDateFormat format
    // = new SimpleDateFormat("yyyyMMdd");
    // java.util.Date valid_dob = null;
    // try {
    // valid_dob = format.parse(e45Out.getDateOfBirth());
    // } catch (ParseException e) {
    // }
    // if ((claim.getBirthDate() == null)) {
    // claim.setBirthDate(valid_dob);
    // } else if (valid_dob.compareTo(claim.getBirthDate()) != 0) {
    // this.logClaimError(U, E45_ERR_3, 518, claim.getUserId(), searchId, recordNumber, claim,
    // format.format(valid_dob));
    // }
    //
    // R03Out r03Out = R03.getR03(claim);
    // if (r03Out == null) {
    // this.logClaimError(U, R03_CON_ERR, 518, claim.getUserId(), searchId, recordNumber, claim,
    // null);
    // } else {
    //
    // // Validate first name
    // String valid_first_name = r03Out.getFirstGivenName();
    // if ((claim.getFirstName() == null) || (claim.getFirstName().trim().length() == 0)) {
    // claim.setFirstName(valid_first_name);
    // } else if (!valid_first_name.equalsIgnoreCase(claim.getFirstName())) {
    // this.logClaimError(U, R03_ERR_3, 518, claim.getUserId(), searchId, recordNumber, claim,
    // valid_first_name);
    // }
    //
    // // Validate last name
    // String valid_family_name = r03Out.getFamilyName();
    // if ((claim.getLastName() == null) || (claim.getLastName().trim().length() == 0)) {
    // claim.setLastName(valid_family_name);
    // } else if (!valid_family_name.equalsIgnoreCase(claim.getLastName())) {
    // this.logClaimError(U, R03_ERR_4, 518, claim.getUserId(), searchId, recordNumber, claim,
    // valid_family_name);
    // }
    //
    // String valid_city = r03Out.getAddressInfo().getCity();
    // String valid_postal = r03Out.getAddressInfo().getPostalCode();
    //
    // if ((claim.getCity() == null) || (claim.getCity().trim().length() == 0)) {
    // claim.setCity(valid_city);
    // } else if (!valid_city.equalsIgnoreCase(claim.getCity())) {
    // this.logClaimError(U, R03_ERR_1, 518, claim.getUserId(), searchId, recordNumber, claim,
    // valid_city);
    // }
    //
    // if ((claim.getPostalCode() == null) || (claim.getPostalCode().trim().length() == 0)) {
    // claim.setPostalCode(valid_postal);
    // } else if (!valid_postal.replaceAll(" ",
    // "").equalsIgnoreCase(claim.getPostalCode().replaceAll(" ", ""))) {
    // this.logClaimError(U, R03_ERR_2, 518, claim.getUserId(), searchId, recordNumber, claim,
    // valid_postal);
    // }
    // }
    // }
    // updateResOutpatPatientInfo(
    // claim,
    // claim.getSearchId(),
    // claim.getRecordNumber());
    //
    // ruseEnd("UPDATERESIDENTOUTPATIENTCLAIM");
    //
    // return getRoc(claim.getSearchId(), claim.getRecordNumber());
    Log.info("+++++ Calling updateClaim");
    throw new NotImplementedException("updateClaim");
  }

  //
  @Deprecated
  public Nroc saveClaim(Nroc claim) throws ServiceFailedException {
    // int searchId = claim.getSearchId();
    // int recordNumber = claim.getRecordNumber();
    //
    // if (claim.getChangeReason().length() > 0) {
    // claim.setChangeFlag("Y");
    // }
    //
    // // to save... we need a couple vars
    // if (claim.getSearchId() == 0) {
    // throw new IllegalArgumentException("missing searchId value in claim");
    // }
    // if (claim.getRecordNumber() == 0) {
    // throw new IllegalArgumentException("missing recordNumber in claim object");
    // }
    // if (claim.getLockId() == 0) {
    // throw new IllegalArgumentException("getLockId() returned 0");
    // }
    //
    // ruseBegin("UPDATENONRESIDENTOUTPATIENTCLAIM");
    //
    // claim.setCodingScheme("ICD10");
    //
    // updateNonResOutpatClaimInfo(claim);
    // updateNonResOutpatPatientInfo(
    // claim,
    // claim.getSearchId(),
    // claim.getRecordNumber());
    // saveCommonOutpatientInfo(claim);
    //
    // ruseEnd("UPDATENONRESIDENTOUTPATIENTCLAIM");
    //
    // return getNroc(claim.getSearchId(), claim.getRecordNumber());
    Log.info("+++++ Calling saveClaim");
    throw new NotImplementedException("saveClaim");
  }

  // *===========================================================================*/
  // * Name : deleteClaim */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * Ron Merner June 06, 2005 Initial Spec */
  // *===========================================================================*/
  @Deprecated
  public Nroc deleteClaim(Nroc claim) throws ServiceFailedException {
    //
    // int searchId = claim.getSearchId();
    // int recordNumber = claim.getRecordNumber();
    //
    // // to delete... we need a couple vars
    // if (searchId == 0) {
    // throw new IllegalArgumentException("missing searchId value in claim");
    // }
    // if (recordNumber == 0) {
    // throw new IllegalArgumentException("missing recordNumber in claim object");
    // }
    // deleteClaim(searchId, recordNumber);
    // return claim;
    Log.info("+++++ Calling deleteClaim");
    throw new NotImplementedException("deleteClaim");
  }

  /*
   * this is used during insert and updating, to save/update diagnosis codes
   */
  private void updateDiagnosis(
      Claim claim, int lockId, int sequenceNumber, String code, String codeScheme)
      throws ServiceFailedException {

    logger.debug("updateDiagnosis - " + code + " (" + codeScheme + ")");

    if (lockId == 0) {
      if (!code.equals("")) {
        insertDiagnosticInfo(claim.getSearchId(), claim.getRecordNumber(), codeScheme, code);
      }
    } else {
      updateDiagnosticInfo(
          claim.getSearchId(), claim.getRecordNumber(), sequenceNumber, codeScheme, code, lockId);
    }
  }

  // *===========================================================================*/
  // * Name : updateProcedure */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * Ron Merner Jun 29, 2005 Modified: Passed in coding scheme */
  // *===========================================================================*/
  private void updateProcedure(
      Claim claim, int lockId, int sequenceNumber, String code, String codingScheme)
      throws ServiceFailedException {

    if (lockId == 0) { // new row...
      if (!code.equals("")) { // ... and have a code
        insertProcedureInfo(claim.getSearchId(), claim.getRecordNumber(), code, codingScheme);
      }
    } else {
      updateProcedureInfo(
          claim.getSearchId(), claim.getRecordNumber(), sequenceNumber, code, codingScheme, lockId);
    }
  }

  // //*===========================================================================*/
  // //* Name : saveCommonOutpatientInfo */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ ----------------------------------------*/
  // //* Ron Merner May 25,2005 Modified: Pass coding scheme to the */
  // //* updateDiagnosis method. */
  // //*===========================================================================*/
  // private void saveCommonOutpatientInfo(Claim claim)
  // throws ServiceFailedException {
  //
  // updateDiagnosis(
  // claim,
  // claim.getLockIdDiagnosis1(),
  // claim.getSequenceIdDiagnosis1(),
  // claim.getDiagnosis1(),
  // claim.getCodingScheme());
  //
  // updateDiagnosis(
  // claim,
  // claim.getLockIdDiagnosis2(),
  // claim.getSequenceIdDiagnosis2(),
  // claim.getDiagnosis2(),
  // claim.getCodingScheme());
  //
  // updateProcedure(
  // claim,
  // claim.getLockIdProcedure1(),
  // claim.getSequenceIdProcedure1(),
  // claim.getProcedure1(),
  // claim.getCodingScheme());
  //
  // updateProcedure(
  // claim,
  // claim.getLockIdProcedure2(),
  // claim.getSequenceIdProcedure2(),
  // claim.getProcedure2(),
  // claim.getCodingScheme());
  // }
  //
  // // *===========================================================================*/
  // // * Name : createCommonOutpatientInfo */
  // // * History: */
  // // * Developer Date Description */
  // // * --------- ------------ ----------------------------------------*/
  // // * Ron Merner May 25,2005 Modified: Pass coding scheme to the */
  // // * updateDiagnosis method. */
  // // *===========================================================================*/
  // private void createCommonOutpatientInfo(Claim claim) throws ServiceFailedException {
  //
  // int searchId = claim.getSearchId();
  // int recordNumber = claim.getRecordNumber();
  //
  // updateDiagnosis(claim, claim.getLockIdDiagnosis1(), claim.getSequenceIdDiagnosis1(),
  // claim.getDiagnosis1(), claim.getCodingScheme());
  //
  // updateDiagnosis(claim, claim.getLockIdDiagnosis2(), claim.getSequenceIdDiagnosis2(),
  // claim.getDiagnosis2(), claim.getCodingScheme());
  //
  // updateProcedure(claim, claim.getLockIdProcedure1(), claim.getSequenceIdProcedure1(),
  // claim.getProcedure1(), claim.getCodingScheme());
  //
  // updateProcedure(claim, claim.getLockIdProcedure2(), claim.getSequenceIdProcedure2(),
  // claim.getProcedure2(), claim.getCodingScheme());
  // }
  //
  // private void saveCommonInpatientInfo(Claim claim) throws ServiceFailedException {
  //
  // int searchId = claim.getSearchId();
  // int recordNumber = claim.getRecordNumber();
  //
  // if (claim.getHighCost1Code().equals("")) {
  // claim.setHighCost1Code(null);
  // }
  // if (claim.getHighCost2Code().equals("")) {
  // claim.setHighCost2Code(null);
  // }
  // if (claim.getHighCost3Code().equals("")) {
  // claim.setHighCost3Code(null);
  // }
  //
  // // insert/update high cost info if necessary
  // if (claim.getLockIdHighCost1() == 0) {
  // if (claim.getHighCost1Code() != null || claim.getHighCost1Date() != null
  // || claim.getHighCost1Amount() != null) {
  // insertHighCostProcedureInfo(searchId, recordNumber, claim.getHighCost1Code(),
  // claim.getHighCost1Date(), claim.getHighCost1Amount());
  // }
  // } else {
  // updateHighCostProcedureInfo(searchId, recordNumber, claim.getSequenceIdHighCost1(),
  // claim.getHighCost1Code(), claim.getHighCost1Date(), claim.getHighCost1Amount(),
  // claim.getLockIdHighCost1());
  // }
  //
  // if (claim.getLockIdHighCost2() == 0) {
  // if (claim.getHighCost2Code() != null || claim.getHighCost2Date() != null
  // || claim.getHighCost2Amount() != null) {
  // insertHighCostProcedureInfo(searchId, recordNumber, claim.getHighCost2Code(),
  // claim.getHighCost2Date(), claim.getHighCost2Amount());
  // }
  // } else {
  // updateHighCostProcedureInfo(searchId, recordNumber, claim.getSequenceIdHighCost2(),
  // claim.getHighCost2Code(), claim.getHighCost2Date(), claim.getHighCost2Amount(),
  // claim.getLockIdHighCost2());
  // }
  //
  // if (claim.getLockIdHighCost3() == 0) {
  // if (claim.getHighCost3Code() != null || claim.getHighCost3Date() != null
  // || claim.getHighCost3Amount() != null) {
  // insertHighCostProcedureInfo(searchId, recordNumber, claim.getHighCost3Code(),
  // claim.getHighCost3Date(), claim.getHighCost3Amount());
  // }
  // } else {
  // updateHighCostProcedureInfo(searchId, recordNumber, claim.getSequenceIdHighCost3(),
  // claim.getHighCost3Code(), claim.getHighCost3Date(), claim.getHighCost3Amount(),
  // claim.getLockIdHighCost3());
  // }
  //
  // updateDiagnosis(claim, claim.getLockIdDiagnosis1(), claim.getSequenceIdDiagnosis1(),
  // claim.getDiagnosis1(), claim.getCodingScheme());
  //
  // updateDiagnosis(claim, claim.getLockIdDiagnosis2(), claim.getSequenceIdDiagnosis2(),
  // claim.getDiagnosis2(), claim.getCodingScheme());
  //
  // updateDiagnosis(claim, claim.getLockIdDiagnosis3(), claim.getSequenceIdDiagnosis3(),
  // claim.getDiagnosis3(), claim.getCodingScheme());
  //
  // updateProcedure(claim, claim.getLockIdProcedure1(), claim.getSequenceIdProcedure1(),
  // claim.getProcedure1(), claim.getCodingScheme());
  //
  // updateProcedure(claim, claim.getLockIdProcedure2(), claim.getSequenceIdProcedure2(),
  // claim.getProcedure2(), claim.getCodingScheme());
  //
  // updateProcedure(claim, claim.getLockIdProcedure3(), claim.getSequenceIdProcedure3(),
  // claim.getProcedure3(), claim.getCodingScheme());
  // }
  //
  private void getResidentClaimInfo(int searchId, int recordNumber, Claim claim)
      throws ServiceFailedException {
    String sql =
        "{call HOOPC2_CLAIMS.GetResidentClaimInfo(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";

    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 3, 4, 29, 30);
      sp.setInt(1, searchId);
      sp.setInt(2, recordNumber);
      sp.registerOutParameter(5, Types.VARCHAR);
      sp.registerOutParameter(6, Types.VARCHAR);
      sp.registerOutParameter(7, Types.VARCHAR);
      sp.registerOutParameter(8, Types.DECIMAL);
      sp.registerOutParameter(9, Types.VARCHAR);
      sp.registerOutParameter(10, Types.VARCHAR);
      sp.registerOutParameter(11, Types.VARCHAR);
      sp.registerOutParameter(12, Types.VARCHAR);
      sp.registerOutParameter(13, Types.DATE);
      sp.registerOutParameter(14, Types.DATE);
      sp.registerOutParameter(15, Types.VARCHAR);
      sp.registerOutParameter(16, Types.VARCHAR);
      sp.registerOutParameter(17, Types.DATE);
      sp.registerOutParameter(18, Types.VARCHAR);
      sp.registerOutParameter(19, Types.VARCHAR);
      sp.registerOutParameter(20, Types.VARCHAR);
      sp.registerOutParameter(21, Types.VARCHAR);
      sp.registerOutParameter(22, Types.VARCHAR);
      sp.registerOutParameter(23, Types.DATE);
      sp.registerOutParameter(24, Types.VARCHAR);
      sp.registerOutParameter(25, Types.VARCHAR);
      sp.registerOutParameter(26, Types.VARCHAR);
      sp.registerOutParameter(27, Types.VARCHAR);
      sp.registerOutParameter(28, Types.NUMERIC);
      sp.registerOutParameter(29, Types.NUMERIC);
      sp.registerOutParameter(30, Types.VARCHAR);

      sp.execute();

      claim.setTreatingProvince(sp.getString(5));
      claim.setHospitalName(sp.getString(6));
      claim.setHospitalNumber(sp.getString(7));
      claim.setTotalAmountClaimed(sp.getDouble(8));
      claim.setNotes(sp.getString(9));
      claim.setProvincialClaimNumber(sp.getString(10));
      claim.setAssociatedClaimNumber(sp.getString(11));
      claim.setClaimSource(sp.getString(12));
      claim.setSubmissionDate(sp.getDate(13));
      claim.setProcessedDate(sp.getDate(14));
      claim.setStatus(sp.getString(15));
      claim.setCodingScheme(sp.getString(16));
      claim.setBillingPeriod(sp.getDate(17));
      claim.setReviewClaim(sp.getString(18));
      claim.setChangeNotes(sp.getString(19));
      claim.setChangeFlag(sp.getString(20));
      claim.setChangeReason(sp.getString(21));
      claim.setServiceCode(sp.getString(22));
      claim.setServiceDate(sp.getDate(23));
      claim.setAccidentCode(sp.getString(24));
      claim.setAccidentIndicator(sp.getString(25));
      claim.setDeclarationRequest(sp.getString(26));
      claim.setDeclarationRequestReason(sp.getString(27));
      claim.setLockId(sp.getLockId(28));
    } finally {
      close(sp, null);
    }
  }

  private void getNonResidentClaimInfo(Claim claim) throws ServiceFailedException {
    String sql = "{call HOOPC2_CLAIMS.GetNonResidentClaimInfo(" + qmarks(29) + ")}";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 3, 4, 28, 29);
      sp.setInt(1, claim.getSearchId());
      sp.setInt(2, claim.getRecordNumber());
      sp.registerOutParameter(5, Types.VARCHAR);
      sp.registerOutParameter(6, Types.VARCHAR);
      sp.registerOutParameter(7, Types.VARCHAR);
      sp.registerOutParameter(8, Types.DOUBLE);
      sp.registerOutParameter(9, Types.VARCHAR);
      sp.registerOutParameter(10, Types.VARCHAR);
      sp.registerOutParameter(11, Types.VARCHAR);
      sp.registerOutParameter(12, Types.VARCHAR);
      sp.registerOutParameter(13, Types.DATE);
      sp.registerOutParameter(14, Types.DATE);
      sp.registerOutParameter(15, Types.VARCHAR);
      sp.registerOutParameter(16, Types.VARCHAR);
      sp.registerOutParameter(17, Types.VARCHAR);
      sp.registerOutParameter(18, Types.VARCHAR);
      sp.registerOutParameter(19, Types.VARCHAR);
      sp.registerOutParameter(20, Types.VARCHAR);
      sp.registerOutParameter(21, Types.VARCHAR);
      sp.registerOutParameter(22, Types.VARCHAR);
      sp.registerOutParameter(23, Types.VARCHAR);
      sp.registerOutParameter(24, Types.DATE);
      sp.registerOutParameter(25, Types.VARCHAR);
      sp.registerOutParameter(26, Types.VARCHAR);
      sp.registerOutParameter(27, Types.INTEGER);

      sp.execute();

      claim.setTreatingProvince(sp.getString(5));
      claim.setHospitalName(sp.getString(6));
      claim.setHospitalNumber(sp.getString(7));
      claim.setTotalAmountClaimed(sp.getDouble(8));
      claim.setNotes(sp.getString(9));
      claim.setProvincialClaimNumber(sp.getString(10));
      claim.setAssociatedClaimNumber(sp.getString(11));
      claim.setClaimSource(sp.getString(12));
      claim.setSubmissionDate(sp.getDate(13));
      claim.setProcessedDate(sp.getDate(14));
      claim.setStatus(sp.getString(15));
      claim.setCodingScheme(sp.getString(16));
      claim.setHospitalClaimNumber(sp.getString(17));
      claim.setOverrideRequest(sp.getString(18));
      claim.setOverrideRequestReason(sp.getString(19));
      claim.setOverrideStatus(sp.getString(20));
      claim.setOverrideStatusReason(sp.getString(21));
      claim.setReasonInBC(sp.getString(22));
      claim.setServiceCode(sp.getString(23));
      claim.setServiceDate(sp.getDate(24));
      claim.setAccidentCode(sp.getString(25));
      claim.setAccidentIndicator(sp.getString(26));
      claim.setLockId(sp.getLockId(27));
    } finally {
      close(sp, null);
    }
  }

  // *===========================================================================*/
  // * Name : createClaim */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett May 02,2005 Modified: Added check to turn off E45 */
  // * DC Bartlett May 09,2005 Modified: Made E34/R03 check before */
  // * creating patient info so city and postal*/
  // * code of R03 can be used if left blank */
  // * on screen. */
  // * DC Bartlett May 17,2005 Modified: Stripped out all blanks in the*/
  // * postal code before comparing to R03. */
  // *===========================================================================*/
  @Deprecated
  public Ric createClaim(Ric claim) throws ServiceFailedException {
    // if (claim.getChangeReason().length() > 0) {
    // claim.setChangeFlag("Y");
    // }
    //
    // ruseBegin("INSERTRESIDENTINPATIENTCLAIM");
    //
    // int searchId = insertResInpatClaimInfo(claim);
    //
    // int recordNumber = 1;
    // claim.setSearchId(searchId);
    // claim.setRecordNumber(recordNumber);
    //
    // claim.setSearchId(searchId);
    // claim.setRecordNumber(recordNumber);
    //
    // String E45Flag = "Y";
    // try {
    // E45Flag = ((Properties) Init.getPrpUtil()).getProperty(HOOPC2Properties.PRP_RES_BI_E45_FLAG);
    // } catch (NullPointerException npe) {
    // E45Flag = "Y";
    // }
    //
    // if ((E45Flag == null) || (E45Flag.equals("") || E45Flag.equals("Y"))) {
    // E45Out e45Out = E45.getE45(claim);
    //
    // if (e45Out == null) {
    // this.logClaimError(C, E45_CON_ERR, 904, claim.getUserId(), searchId, 1, claim, null);
    // } else if (!e45Out.isValid()) {
    // this.logClaimError(C, E45_ERR, 904, claim.getUserId(), searchId, 1, claim, null);
    // } else if (e45Out.getEligibility().equals("NO")) {
    // this.logClaimError(U, E45_ERR, 511, claim.getUserId(), searchId, 1, claim, null);
    // } else if (e45Out.isValid()) {
    // // Validate that the PHN is covered under MSP
    // SimpleDateFormat format
    // = new SimpleDateFormat("yyyyMMdd");
    //
    // // Validate the date range
    // java.util.Date serviceDate = claim.getServiceDate();
    // claim.setServiceDate(claim.getAdmissionDate());
    // e45Out = E45.getE45(claim);
    //
    // String admissionElibitiliy = e45Out.getEligibility();
    // claim.setServiceDate(claim.getDischargeDate());
    // e45Out = E45.getE45(claim);
    // String dischargeElibitiliy = e45Out.getEligibility();
    //
    // if (admissionElibitiliy.equals("NO") || dischargeElibitiliy.equals("NO")) {
    // this.logClaimError(U, E45_ERR_4, 518, claim.getUserId(), searchId, recordNumber, claim, "");
    // }
    // // set it back and get it again just in case
    // // I know this is a little messy way to do it, but in the future
    // // it may be better to find another way, but it works well for now
    // claim.setServiceDate(serviceDate);
    // e45Out = E45.getE45(claim);
    //
    // // Validate date of birth
    // java.util.Date valid_dob = null;
    // try {
    // valid_dob = format.parse(e45Out.getDateOfBirth());
    // } catch (ParseException e) {
    // }
    // if ((claim.getBirthDate() == null)) {
    // claim.setBirthDate(valid_dob);
    // } else if (valid_dob.compareTo(claim.getBirthDate()) != 0) {
    // this.logClaimError(U, E45_ERR_3, 518, claim.getUserId(), searchId, recordNumber, claim,
    // format.format(valid_dob));
    // }
    //
    // R03Out r03Out = R03.getR03(claim);
    // if (r03Out == null) {
    // this.logClaimError(C, R03_CON_ERR, 911, claim.getUserId(), searchId, 1, claim, null);
    // } else {
    // // Validate first name
    // String valid_first_name = r03Out.getFirstGivenName();
    // if ((claim.getFirstName() == null) || (claim.getFirstName().trim().length() == 0)) {
    // claim.setFirstName(valid_first_name);
    // } else if (!valid_first_name.equalsIgnoreCase(claim.getFirstName())) {
    // this.logClaimError(U, R03_ERR_3, 518, claim.getUserId(), searchId, recordNumber, claim,
    // valid_first_name);
    // }
    //
    // // Validate last name
    // String valid_family_name = r03Out.getFamilyName();
    // if ((claim.getLastName() == null) || (claim.getLastName().trim().length() == 0)) {
    // claim.setLastName(valid_family_name);
    // } else if (!valid_family_name.equalsIgnoreCase(claim.getLastName())) {
    // this.logClaimError(U, R03_ERR_4, 518, claim.getUserId(), searchId, recordNumber, claim,
    // valid_family_name);
    // }
    //
    // String valid_city = r03Out.getAddressInfo().getCity();
    // String valid_postal = r03Out.getAddressInfo().getPostalCode();
    //
    // if ((claim.getCity() == null) || (claim.getCity().trim().length() == 0)) {
    // claim.setCity(valid_city);
    // } else if (!valid_city.equalsIgnoreCase(claim.getCity())) {
    // this.logClaimError(C, R03_ERR_1, 911, claim.getUserId(), searchId, 1, claim, valid_city);
    // }
    //
    // if ((claim.getPostalCode() == null) || (claim.getPostalCode().trim().length() == 0)) {
    // claim.setPostalCode(valid_postal);
    // } else if (!valid_postal.replaceAll(" ",
    // "").equalsIgnoreCase(claim.getPostalCode().replaceAll(" ", ""))) {
    // this.logClaimError(C, R03_ERR_2, 911, claim.getUserId(), searchId, 1, claim, valid_postal);
    // }
    // }
    // }
    // }
    //
    // insertResInpatPatientInfo(claim, searchId, recordNumber);
    //
    // createInpatientCommon(claim, searchId, recordNumber);
    //
    // ruseEnd("INSERTRESIDENTINPATIENTCLAIM");
    //
    // if ((claim.getClaimSource() != null) && (claim.getClaimSource().equals("IMPORT"))) {
    // return claim;
    // } else {
    // return getRic(searchId, recordNumber);
    // }
    Log.info("+++++ Calling createClaim");
    throw new NotImplementedException("createClaim");
  }

  // *===========================================================================*/
  // * Name : createAdj */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 08,2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Created specifically for handling the insertion of resident adjustment decisions from a batch
   * import file.
   *
   * @throws ServiceFailedException
   */
  @Deprecated
  public Ric createAdj(Ric claim) throws ServiceFailedException {
//    if (claim.getChangeReason().length() > 0) {
//      claim.setChangeFlag("Y");
//    }
//    ruseBegin("EDITRESIDENTADJUSTMENTS");
//
//    insertBatchInpatientAdjDecision(claim);
//    ruseEnd("EDITRESIDENTADJUSTMENTS");
    return claim;
  }

  // *===========================================================================*/
  // * Name : createAdjRqst */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett April 12,2005 Initial Spec: Wrapper created to set up */
  // * the beginning and ending of rules */
  // * validation. If not present, process will*/
  // * generate UNDEFINED error messages. */
  // * DC Bartlett April 20, 2005 Modified: Check claim type to determine */
  // * which rules string to use. */
  // *===========================================================================*/
  /**
   * Created specifically for handling the insertion of adjustment requests from the web page
   *
   * @throws ServiceFailedException
   */
  public void createAdjRqst(Claim claim, AdjustmentRequest adjRqst) throws ServiceFailedException {
    if (claim.getClass().equals(Ric.class) || claim.getClass().equals(Roc.class)) {
      ruseBegin("EDITRESIDENTADJUSTMENTS");
    } else if (claim.getClass().equals(Nric.class) || claim.getClass().equals(Nroc.class)) {
      ruseBegin("EDITNONRESIDENTADJUSTMENTS");
    }

    insertAdjustmentRequest(claim, adjRqst);

    if (claim.getClass().equals(Ric.class) || claim.getClass().equals(Roc.class)) {
      ruseEnd("EDITRESIDENTADJUSTMENTS");
    } else if (claim.getClass().equals(Nric.class) || claim.getClass().equals(Nroc.class)) {
      ruseEnd("EDITNONRESIDENTADJUSTMENTS");
    }
  }

  // *===========================================================================*/
  // * Name : updateAdjRqst */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett April 12,2005 Initial Spec: Wrapper created to set up */
  // * the beginning and ending of rules */
  // * validation. If not present, process will*/
  // * generate UNDEFINED error messages. */
  // * DC Bartlett April 20, 2005 Modified: Check claim type to determine */
  // * which rules string to use. */
  // *===========================================================================*/
  /**
   * Created specifically for handling the updation of adjustment requests from the web page
   *
   * @throws ServiceFailedException
   */
  public void updateAdjRqst(Claim claim, AdjustmentRequest adjRqst) throws ServiceFailedException {

    if (claim.getClass().equals(Ric.class) || claim.getClass().equals(Roc.class)) {
      ruseBegin("EDITRESIDENTADJUSTMENTS");
    } else if (claim.getClass().equals(Nric.class) || claim.getClass().equals(Nroc.class)) {
      ruseBegin("EDITNONRESIDENTADJUSTMENTS");
    }

    updateAdjustmentRequest(claim, adjRqst);

    if (claim.getClass().equals(Ric.class) || claim.getClass().equals(Roc.class)) {
      ruseEnd("EDITRESIDENTADJUSTMENTS");
    } else if (claim.getClass().equals(Nric.class) || claim.getClass().equals(Nroc.class)) {
      ruseEnd("EDITNONRESIDENTADJUSTMENTS");
    }
  }

  // *===========================================================================*/
  // * Name : createAdjDec */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett April 12,2005 Initial Spec: Wrapper created to set up */
  // * the beginning and ending of rules */
  // * validation. If not present, process will*/
  // * generate UNDEFINED error messages. */
  // * DC Bartlett April 20, 2005 Modified: Check claim type to determine */
  // * which rules string to use. */
  // *===========================================================================*/
  /**
   * Created specifically for handling the insertion of adjustment decisions from the web page
   *
   * @throws ServiceFailedException
   */
  public void createAdjDec(
      Claim claim, int searchId, int recordNumber, AdjustmentDecision adjDecision)
      throws ServiceFailedException {

    if (claim.getClass().equals(Ric.class) || claim.getClass().equals(Roc.class)) {
      ruseBegin("EDITRESIDENTADJUSTMENTS");
    } else if (claim.getClass().equals(Nric.class) || claim.getClass().equals(Nroc.class)) {
      ruseBegin("EDITNONRESIDENTADJUSTMENTS");
    }

    insertAdjustmentDecision(searchId, recordNumber, adjDecision);

    if (claim.getClass().equals(Ric.class) || claim.getClass().equals(Roc.class)) {
      ruseEnd("EDITRESIDENTADJUSTMENTS");
    } else if (claim.getClass().equals(Nric.class) || claim.getClass().equals(Nroc.class)) {
      ruseEnd("EDITNONRESIDENTADJUSTMENTS");
    }
  }

  // *===========================================================================*/
  // * Name : updateAdjDec */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett April 12,2005 Initial Spec: Wrapper created to set up */
  // * the beginning and ending of rules */
  // * validation. If not present, process will*/
  // * generate UNDEFINED error messages. */
  // * DC Bartlett April 20, 2005 Modified: Check claim type to determine */
  // * which rules string to use. */
  // *===========================================================================*/
  /**
   * Created specifically for handling the insertion of adjustment decisions from the web page
   *
   * @throws ServiceFailedException
   */
  public void updateAdjDec(
      Claim claim, int searchId, int recordNumber, AdjustmentDecision adjDecision)
      throws ServiceFailedException {

    if (claim.getClass().equals(Ric.class) || claim.getClass().equals(Roc.class)) {
      ruseBegin("EDITRESIDENTADJUSTMENTS");
    } else if (claim.getClass().equals(Nric.class) || claim.getClass().equals(Nroc.class)) {
      ruseBegin("EDITNONRESIDENTADJUSTMENTS");
    }

    updateAdjustmentDecision(searchId, recordNumber, adjDecision);

    if (claim.getClass().equals(Ric.class) || claim.getClass().equals(Roc.class)) {
      ruseEnd("EDITRESIDENTADJUSTMENTS");
    } else if (claim.getClass().equals(Nric.class) || claim.getClass().equals(Nroc.class)) {
      ruseEnd("EDITNONRESIDENTADJUSTMENTS");
    }
  }

  // *===========================================================================*/
  // * Name : deleteAdjRqst */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett April 20,2005 Initial Spec: Wrapper created to set up */
  // * the beginning and ending of rules */
  // * validation. If not present, process will*/
  // * generate UNDEFINED error messages. Also */
  // * check claim type to determine which */
  // * rules string to use. */
  // *===========================================================================*/
  /**
   * Created specifically for handling the deletion of adjustment requests from the web page
   *
   * @throws ServiceFailedException
   */
  public void deleteAdjRqst(Claim claim, int searchId, int recordNumber, AdjustmentRequest adjRqst)
      throws ServiceFailedException {

    if (claim.getClass().equals(Ric.class) || claim.getClass().equals(Roc.class)) {
      ruseBegin("EDITRESIDENTADJUSTMENTS");
    } else if (claim.getClass().equals(Nric.class) || claim.getClass().equals(Nroc.class)) {
      ruseBegin("EDITNONRESIDENTADJUSTMENTS");
    }

    deleteAdjustmentRequest(searchId, recordNumber, adjRqst.getLockId());

    if (claim.getClass().equals(Ric.class) || claim.getClass().equals(Roc.class)) {
      ruseEnd("EDITRESIDENTADJUSTMENTS");
    } else if (claim.getClass().equals(Nric.class) || claim.getClass().equals(Nroc.class)) {
      ruseEnd("EDITNONRESIDENTADJUSTMENTS");
    }
  }

  // *===========================================================================*/
  // * Name : deleteAdjDec */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett April 20,2005 Initial Spec: Wrapper created to set up */
  // * the beginning and ending of rules */
  // * validation. If not present, process will*/
  // * generate UNDEFINED error messages. Also */
  // * check claim type to determine which */
  // * rules string to use. */
  // *===========================================================================*/
  /**
   * Created specifically for handling the delete of adjustment decisions from the web page
   *
   * @throws ServiceFailedException
   */
  public void deleteAdjDec(
      Claim claim, int searchId, int recordNumber, AdjustmentDecision adjDecision)
      throws ServiceFailedException {

    if (claim.getClass().equals(Ric.class) || claim.getClass().equals(Roc.class)) {
      ruseBegin("EDITRESIDENTADJUSTMENTS");
    } else if (claim.getClass().equals(Nric.class) || claim.getClass().equals(Nroc.class)) {
      ruseBegin("EDITNONRESIDENTADJUSTMENTS");
    }

    deleteAdjustmentDecision(searchId, recordNumber, adjDecision.getLockId());

    if (claim.getClass().equals(Ric.class) || claim.getClass().equals(Roc.class)) {
      ruseEnd("EDITRESIDENTADJUSTMENTS");
    } else if (claim.getClass().equals(Nric.class) || claim.getClass().equals(Nroc.class)) {
      ruseEnd("EDITNONRESIDENTADJUSTMENTS");
    }
  }

  @Deprecated
  public Nric createClaim(Nric claim) throws ServiceFailedException {
    // if (claim.getChangeReason().length() > 0) {
    // claim.setChangeFlag("Y");
    // }
    //
    // ruseBegin("INSERTNONRESIDENTINPATIENTCLAIM");
    //
    // int searchId = insertNonResInpatClaimInfo(claim);
    // int recordNumber = 1;
    // claim.setSearchId(searchId);
    // claim.setRecordNumber(recordNumber);
    //
    // insertNonResInpatPatientInfo(claim, searchId, recordNumber);
    // createInpatientCommon(claim, searchId, recordNumber);
    //
    // ruseEnd("INSERTNONRESIDENTINPATIENTCLAIM");
    //
    // claim.setSearchId(searchId);
    // claim.setRecordNumber(recordNumber);
    //
    // if (claim.getClaimSource().equalsIgnoreCase(Init.getHospImportProperties()
    // .getProperty(HospImpPropertyFileKeys.PRP_HOSP_IMPORT_DATA_SOURCE))) {
    // return claim;
    // } else {
    // return getNric(searchId, recordNumber);
    // }
    Log.info("+++++ Calling createClaim");
    throw new NotImplementedException("createClaim");
  }

  // //*===========================================================================*/
  // //* Name : createInpatientCommon */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ ----------------------------------------*/
  // //* DC Bartlett April 12,2005 Modified: Pass admission number to */
  // //* insertAdmissionInfo. */
  // //*===========================================================================*/
  // private void createInpatientCommon(
  // Claim claim,
  // int searchId,
  // int recordNumber)
  // throws ServiceFailedException {
  //
  // if (claim.getHighCost1Code().equals("")) {
  // claim.setHighCost1Code(null);
  // }
  // if (claim.getHighCost2Code().equals("")) {
  // claim.setHighCost2Code(null);
  // }
  // if (claim.getHighCost3Code().equals("")) {
  // claim.setHighCost3Code(null);
  // }
  //
  // if (claim.getHighCost1Code() != null || claim.getHighCost1Date() != null ||
  // claim.getHighCost1Amount() != null) {
  // insertHighCostProcedureInfo(
  // searchId,
  // recordNumber,
  // claim.getHighCost1Code(),
  // claim.getHighCost1Date(),
  // claim.getHighCost1Amount());
  // }
  //
  // if (claim.getHighCost2Code() != null || claim.getHighCost2Date() != null ||
  // claim.getHighCost2Amount() != null) {
  // insertHighCostProcedureInfo(
  // searchId,
  // recordNumber,
  // claim.getHighCost2Code(),
  // claim.getHighCost2Date(),
  // claim.getHighCost2Amount());
  // }
  //
  // if (claim.getHighCost3Code() != null || claim.getHighCost3Date() != null ||
  // claim.getHighCost3Amount() != null) {
  // insertHighCostProcedureInfo(
  // searchId,
  // recordNumber,
  // claim.getHighCost3Code(),
  // claim.getHighCost3Date(),
  // claim.getHighCost3Amount());
  // }
  //
  // insertAdmissionInfo(
  // searchId,
  // recordNumber,
  // claim.getAdmissionDate(),
  // claim.getDischargeDate(),
  // claim.getTotalDaysStay(),
  // claim.getLongTermFlag(),
  // claim.getPerDiemRate(),
  // claim.getAdmissionNumber());
  //
  // updateDiagnosis(
  // claim,
  // claim.getLockIdDiagnosis1(),
  // claim.getSequenceIdDiagnosis1(),
  // claim.getDiagnosis1(),
  // claim.getCodingScheme());
  //
  // updateDiagnosis(
  // claim,
  // claim.getLockIdDiagnosis2(),
  // claim.getSequenceIdDiagnosis2(),
  // claim.getDiagnosis2(),
  // claim.getCodingScheme());
  //
  // updateDiagnosis(
  // claim,
  // claim.getLockIdDiagnosis3(),
  // claim.getSequenceIdDiagnosis3(),
  // claim.getDiagnosis3(),
  // claim.getCodingScheme());
  //
  // updateProcedure(
  // claim,
  // claim.getLockIdProcedure1(),
  // claim.getSequenceIdProcedure1(),
  // claim.getProcedure1(),
  // claim.getCodingScheme());
  //
  // updateProcedure(
  // claim,
  // claim.getLockIdProcedure2(),
  // claim.getSequenceIdProcedure2(),
  // claim.getProcedure2(),
  // claim.getCodingScheme());
  //
  // updateProcedure(
  // claim,
  // claim.getLockIdProcedure3(),
  // claim.getSequenceIdProcedure3(),
  // claim.getProcedure3(),
  // claim.getCodingScheme());
  // }
  //
  private void getPatientInfo(Claim claim) throws ServiceFailedException {
    String sql =
        "{ call HOOPC2_CLAIMS.GetPatientInfo(?,?,?,?, ?, ?, ?, ?, ?, ?,?, ?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 3, 4, 18, 19);
      sp.setInt(1, claim.getSearchId());
      sp.setInt(2, claim.getRecordNumber());
      sp.registerOutParameter(5, Types.VARCHAR);
      sp.registerOutParameter(6, Types.DATE);
      sp.registerOutParameter(7, Types.VARCHAR);
      sp.registerOutParameter(8, Types.VARCHAR);
      sp.registerOutParameter(9, Types.VARCHAR);
      sp.registerOutParameter(10, Types.VARCHAR);
      sp.registerOutParameter(11, Types.VARCHAR);
      sp.registerOutParameter(12, Types.VARCHAR);
      sp.registerOutParameter(13, Types.VARCHAR);
      sp.registerOutParameter(14, Types.DATE);
      sp.registerOutParameter(15, Types.VARCHAR);
      sp.registerOutParameter(16, Types.VARCHAR);
      sp.registerOutParameter(17, Types.NUMERIC);
      sp.execute();
      claim.setInsuranceNumber(sp.getString(5));
      claim.setInsuranceCardExpiryDate(sp.getDate(6));
      claim.setLastName(sp.getString(7));
      claim.setFirstName(sp.getString(8));
      claim.setAddress1(sp.getString(9));
      claim.setAddress2(sp.getString(10));
      claim.setCity(sp.getString(11));
      claim.setProvince(sp.getString(12));
      claim.setPostalCode(sp.getString(13));
      claim.setBirthDate(sp.getDate(14));
      claim.setGender(sp.getString(15));
      claim.setDeceasedFlag(sp.getString(16));
      claim.setLockIdPatient(sp.getInt(17));
    } finally {
      close(sp, null);
    }
  }

  private void insertHighCostProcedureInfo(
      int claimSID, int claimSRN, String code, java.util.Date date, Double amount)
      throws ServiceFailedException {
    String sql = "{ call HOOPC2_DETAIL_CODES.InsertHighCostProcedureInfo(?,?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 6, 7, 8, 9);
      sp.setInt(1, claimSID);
      sp.setInt(2, claimSRN);
      sp.setString(3, code);
      sp.setDate(4, date);
      sp.setDouble(5, amount);
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  public Lov getDiagnosisCodes(String codeType, String pattern) throws ServiceFailedException {
    String sql = "{ ? = call HOOPC2_DETAIL_CODES.getDiagnosticCodeList(?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    ResultSet r = null;
    Lov lov = new Lov();

    try {
      sp = getHoopcStoredProcedure(sql, 4, 5, 6, 7);
      sp.registerOutParameter(1, OracleTypes.CURSOR);
      sp.setString(2, "%");
      sp.setString(3, codeType);
      sp.execute();
      r = (ResultSet) sp.getObject(1);
      while (r.next()) {
        lov.add(r.getString("code"), r.getString("description"));
      }
    } catch (SQLException e) {
      throw new ServiceFailedException(e);
    } finally {
      close(sp, r);
    }
    return lov;
  }

  public Lov getAccidentCodes(String scheme) throws ServiceFailedException {
    String sql = "{ ? = call HOOPC2_DETAIL_CODES.getAccidentCodeList(?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    ResultSet r = null;
    Lov lov = new Lov();
    try {
      sp = getHoopcStoredProcedure(sql, 4, 5, 6, 7);
      sp.registerOutParameter(1, OracleTypes.CURSOR);
      sp.setString(2, "%");
      sp.setString(3, scheme);
      sp.execute();
      r = (ResultSet) sp.getObject(1);
      while (r.next()) {
        lov.add(r.getString("code"), r.getString("description"));
      }
    } catch (SQLException e) {
      throw new ServiceFailedException(e);
    } finally {
      close(sp, r);
    }
    return lov;
  }

  public Lov getHospitals() throws ServiceFailedException {
    String sql = "{ ? = call HOOPC2_GENERAL.getHospitalList(?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    ResultSet r = null;

    Lov lov = new Lov();
    try {
      sp = getHoopcStoredProcedure(sql, 2, 3, 4, 5);
      sp.registerOutParameter(1, OracleTypes.CURSOR);
      sp.execute();
      r = (java.sql.ResultSet) sp.getObject(1);
      while (r.next()) {
        lov.add(r.getString("hospital_number"), r.getString("hospital_name"));
      }
    } catch (SQLException e) {
      throw new ServiceFailedException(e);
    } finally {
      close(sp, r);
    }
    return lov;
  }

  // //*===========================================================================*/
  // //* Name : getAuthHospitalNumbers */
  // //* Purpose : returns a list of BC hospitals the user is authorized to edit */
  // //* data for. */
  // //* Note: This is very similar to filterByProvinceCode() in */
  // //* ProvincialHospitalListDAO.java but I could not get that working */
  // //* in the import which has a ClaimDataService instantiated. */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ ----------------------------------------*/
  // //* Ron Merner July 20, 2005 Initial Spec. */
  // //*===========================================================================*/
  // public Collection getAuthHospitalNumbers() throws ServiceFailedException {
  // String sql = "{ ? = call HOOPC2_GENERAL.GetProvincialHospitalList(?,?,?,?,?) }";
  // HoopcStoredProcedure sp = null;
  // ResultSet r = null;
  //
  // ArrayList hosps = new ArrayList();
  // try {
  // sp = getHoopcStoredProcedure(sql, 3, 4, 5, 6);
  // sp.registerOutParameter(1, OracleTypes.CURSOR);
  // sp.setString(2, OracleConstants.PROV_BC);
  // sp.execute();
  // r = (java.sql.ResultSet) sp.getObject(1);
  // while (r.next()) {
  // hosps.add(r.getString("hospital_number"));
  // }
  // } catch (SQLException e) {
  // throw new ServiceFailedException(e);
  // } finally {
  // close(sp, r);
  // }
  // return hosps;
  // }
  //
  // public Lov getProvinces() throws ServiceFailedException {
  // String sql = "{ ? = call HOOPC2_GENERAL.getProvTerrList(?,?,?,?) }";
  // HoopcStoredProcedure sp = null;
  // ResultSet r = null;
  //
  // Lov lov = new Lov();
  // try {
  // sp = getHoopcStoredProcedure(sql, 2, 3, 4, 5);
  // sp.registerOutParameter(1, OracleTypes.CURSOR);
  // sp.execute();
  // r = (java.sql.ResultSet) sp.getObject(1);
  // while (r.next()) {
  // lov.add(r.getString("province_code"), r.getString("province_name"));
  // }
  // } catch (SQLException e) {
  // throw new ServiceFailedException(e);
  // } finally {
  // close(sp, r);
  // }
  // return lov;
  // }
  //
  // TODO - finish this
  public String getClaimScheme(Claim claim) throws ServiceFailedException {

    logger.debug("getClaimScheme - start");

    String codingScheme = "ICD10";

    logger.debug("getClaimScheme 1 - scheme: " + codingScheme);

    String sql = "{ ? = call HOOPC2_DETAIL_CODES.getClaimCodesCodingScheme(?,?,?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;

    logger.debug("getClaimScheme 2");

    ResultSet r = null;

    logger.debug("getClaimScheme 2 1");

    try {

      logger.debug("getClaimScheme 3 0");

      sp = getHoopcStoredProcedure(sql, 8, 9, 10, 11);

      logger.debug("getClaimScheme 3 1");
      sp.registerOutParameter(1, OracleTypes.VARCHAR);

      logger.debug("getClaimScheme 3 2");

      if (claim.getDiagnosis1() != null && claim.getDiagnosis1().length() > 0) {
        sp.setString(2, claim.getDiagnosis1());
      } else {
        sp.setString(2, " ");
      }

      logger.debug("getClaimScheme 3 3");

      if (claim.getDiagnosis2() != null && claim.getDiagnosis2().length() > 0) {
        sp.setString(3, claim.getDiagnosis2());
      } else {
        sp.setString(3, " ");
      }

      logger.debug("getClaimScheme 3 4");

      if (claim.getDiagnosis3() != null && claim.getDiagnosis3().length() > 0) {
        sp.setString(4, claim.getDiagnosis3());
      } else {
        sp.setString(4, " ");
      }

      logger.debug("getClaimScheme 3 5");

      if (claim.getProcedure1() != null && claim.getProcedure1().length() > 0) {
        sp.setString(5, claim.getProcedure1());
      } else {
        sp.setString(5, " ");
      }

      logger.debug("getClaimScheme 3 6");

      if (claim.getProcedure2() != null && claim.getProcedure2().length() > 0) {
        sp.setString(6, claim.getProcedure2());
      } else {
        sp.setString(6, " ");
      }

      logger.debug("getClaimScheme 3 7");

      if (claim.getProcedure3() != null && claim.getProcedure3().length() > 0) {
        sp.setString(7, claim.getProcedure3());
      } else {
        sp.setString(7, " ");
      }

      sp.execute();

      logger.debug("getClaimScheme 4");

      codingScheme = (String) sp.getObject(1);
      // r = (ResultSet) sp.getObject(1);

      logger.debug("getClaimScheme 4 - codingScheme: " + codingScheme);
    } // try
    /*
     * catch (SQLException e) { throw new ServiceFailedException(e); }//catch
     */ catch (Exception e) {
      logger.debug("getClaimScheme - Exception found: " + e);
    } // catch
    finally {
      close(sp, r);
    } // finally

    return codingScheme;
  } // getClaimScheme()----------------------------------------------------------

  public Lov getProcedureCodes(String scheme) throws ServiceFailedException {
    String sql = "{ ? = call HOOPC2_DETAIL_CODES.getMedProcedureCodeList(?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    ResultSet r = null;

    Lov lov = new Lov();
    try {
      sp = getHoopcStoredProcedure(sql, 4, 5, 6, 7);
      sp.registerOutParameter(1, OracleTypes.CURSOR);
      sp.setString(2, "%");
      sp.setString(3, scheme);
      sp.execute();
      r = (ResultSet) sp.getObject(1);
      while (r.next()) {
        lov.add(r.getString("code"), r.getString("description"));
      }
    } catch (SQLException e) {
      throw new ServiceFailedException(e);
    } finally {
      close(sp, r);
    }
    return lov;
  }

  public Lov getServiceCodes() throws ServiceFailedException {
    String sql = "{ ? = call HOOPC2_DETAIL_CODES.getServiceCodeList(?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    ResultSet r = null;

    Lov lov = new Lov();
    try {
      sp = getHoopcStoredProcedure(sql, 2, 3, 4, 5);
      sp.registerOutParameter(1, OracleTypes.CURSOR);
      sp.execute();
      r = (java.sql.ResultSet) sp.getObject(1);
      while (r.next()) {
        lov.add(r.getString("code"), r.getString("description"));
      }
    } catch (SQLException e) {
      throw new ServiceFailedException(e);
    } finally {
      close(sp, r);
    }
    return lov;
  }

  // /*
  // * @param residency is either 'n' or 'r' resident or non-resident
  // * @param claimType is either 'o' (outpatient) or 'i' (inpatient)
  // */
  // public SearchInfo searchClaimInfo(Claim claim)
  // throws StoredProcedureException {
  // String residency = null; // RES or NRES
  // String claimType = null; // INPATIENT or OUTPATIENT
  // String codingScheme = null; // ICD09 or ICD10
  // System.out.println("SearchClaimInfo");
  // logger.debug("claim type = " + claim.getType());
  // if (claim.getType() == Claim.Types.NonresInpatient) {
  // residency = "NRES";
  // claimType = "INPATIENT";
  // //codingScheme = OracleConstants.ICD10;
  // }
  // if (claim.getType() == Claim.Types.NonresOutpatient) {
  // residency = "NRES";
  // claimType = "OUTPATIENT";
  // //codingScheme = OracleConstants.ICD10;
  // }
  // if (claim.getType() == Claim.Types.ResInpatient) {
  // residency = "RES";
  // claimType = "INPATIENT";
  // //codingScheme = OracleConstants.ICD09;
  // }
  // if (claim.getType() == Claim.Types.ResOutpatient) {
  // residency = "RES";
  // claimType = "OUTPATIENT";
  // //codingScheme = OracleConstants.ICD09;
  // }
  //
  // if (claim.getCodingScheme() == null) {
  // codingScheme = OracleConstants.ICDBOTH;
  // } else if (claim.getCodingScheme().equalsIgnoreCase(OracleConstants.ICD10)) {
  // codingScheme = OracleConstants.ICD10;
  // }
  // if (claim.getCodingScheme().equalsIgnoreCase(OracleConstants.ICD09)) {
  // codingScheme = OracleConstants.ICD09;
  // } else {
  // codingScheme = OracleConstants.ICDBOTH;
  // }
  //
  // String sql
  // = "{call
  // HOOPC2_SEARCH.SearchClaimInfo(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,"
  // + "?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
  // SearchInfo searchInfo = null;
  // HoopcStoredProcedure sp = null;
  //
  // sp = getHoopcStoredProcedure(sql, 63, 64, 67, 68);
  //
  // //set the input params
  // sp.setString(1, residency);
  // sp.setString(2, claimType);
  // sp.setString(3, claim.getHospitalNumber());
  // sp.setString(4, claim.getHospitalName());
  // sp.setString(5, claim.getTreatingProvince());
  // sp.setString(6, claim.getInsuranceNumber());
  // sp.setDate(7, claim.getInsuranceCardExpiryDate());
  // sp.setString(8, claim.getLastName());
  // sp.setString(9, claim.getFirstName());
  // sp.setString(10, claim.getAddress1());
  // sp.setString(11, claim.getAddress2());
  // sp.setString(12, claim.getCity());
  // sp.setString(13, claim.getProvince());
  // sp.setString(14, claim.getPostalCode());
  // sp.setDate(15, claim.getBirthDate());
  // sp.setString(16, claim.getGender());
  // if (claimType.equals("INPATIENT")) {
  // sp.setString(17, claim.getDeceasedFlag());
  // sp.setString(18, claim.getLongTermFlag());
  // } else {
  // sp.setString(17, null);
  // sp.setString(18, null);
  // }
  // sp.setDate(19, claim.getAdmissionDate());
  // sp.setDate(20, claim.getDischargeDate());
  // sp.setInt(21, claim.getTotalDaysStay());
  // sp.setDouble(22, claim.getPerDiemRate());
  // sp.setDouble(23, claim.getTotalAmountClaimed());
  // //sp.setString(24, claim.getCodingScheme());
  // //sp.setString(24, null);
  // sp.setString(24, codingScheme);
  // sp.setString(25, claim.getAccidentCode());
  // sp.setString(26, claim.getAccidentIndicator());
  // sp.setString(27, claim.getDiagnosis1());
  // sp.setString(28, claim.getDiagnosis2());
  // sp.setString(29, claim.getDiagnosis3());
  // sp.setString(30, claim.getProcedure1());
  // sp.setString(31, claim.getProcedure2());
  // sp.setString(32, claim.getProcedure3());
  // sp.setString(33, claim.getHighCost1Code());
  // sp.setDate(34, claim.getHighCost1Date());
  // sp.setDouble(35, claim.getHighCost1Amount());
  // sp.setString(36, claim.getHighCost2Code());
  // sp.setDate(37, claim.getHighCost2Date());
  // sp.setDouble(38, claim.getHighCost2Amount());
  // sp.setString(39, claim.getHighCost3Code());
  // sp.setDate(40, claim.getHighCost3Date());
  // sp.setDouble(41, claim.getHighCost3Amount());
  // sp.setDate(42, claim.getServiceDate());
  // sp.setString(43, claim.getServiceCode());
  // sp.setString(44, claim.getHospitalClaimNumber());
  // sp.setString(45, claim.getAdmissionNumber());
  // sp.setString(46, claim.getReasonInBC());
  // sp.setString(47, claim.getNotes());
  // sp.setString(48, claim.getProvincialClaimNumber());
  // sp.setString(49, claim.getAssociatedClaimNumber());
  // sp.setDate(50, claim.getSubmissionDate());
  // sp.setDate(51, claim.getSubmissionDateTo());
  // sp.setDate(52, claim.getProcessedDate());
  // sp.setDate(53, claim.getProcessedDateTo());
  // sp.setString(54, claim.getOverrideRequest());
  // sp.setString(55, claim.getOverrideRequestReason());
  // sp.setString(56, claim.getOverrideStatus());
  // sp.setString(57, claim.getOverrideStatusReason());
  // sp.setString(58, claim.getDeclarationRequest());
  // sp.setString(59, claim.getDeclarationRequestReason());
  // sp.setString(60, claim.getStatus());
  // sp.setString(61, claim.getChangeFlag());
  // sp.setString(62, claim.getChangeReason());
  //
  // logger.debug(" 1 = [" + residency + "]");
  // logger.debug(" 2 = [" + claimType + "]");
  // logger.debug(" 3 = [" + claim.getHospitalNumber() + "]");
  // logger.debug(" 4 = [" + claim.getHospitalName() + "]");
  // logger.debug(" 5 = [" + claim.getTreatingProvince() + "]");
  // logger.debug(" 6 = [" + claim.getInsuranceNumber() + "]");
  // logger.debug(" 7 = [" + claim.getInsuranceCardExpiryDate() + "]");
  // logger.debug(" 8 = [" + claim.getLastName() + "]");
  // logger.debug(" 9 = [" + claim.getFirstName() + "]");
  // logger.debug("10 = [" + claim.getAddress1() + "]");
  // logger.debug("11 = [" + claim.getAddress2() + "]");
  // logger.debug("12 = [" + claim.getCity() + "]");
  // logger.debug("13 = [" + claim.getProvince() + "]");
  // logger.debug("14 = [" + claim.getPostalCode() + "]");
  // logger.debug("15 = [" + claim.getBirthDate() + "]");
  // logger.debug("16 = [" + claim.getGender() + "]");
  // if (claimType.equals("INPATIENT")) {
  // logger.debug("17 = [" + claim.getDeceasedFlag() + "]");
  // logger.debug("18 = [" + claim.getLongTermFlag() + "]");
  // } else {
  // logger.debug("17 = [null]");
  // logger.debug("18 = [null]");
  // }
  // logger.debug("19 = [" + claim.getAdmissionDate() + "]");
  // logger.debug("20 = [" + claim.getDischargeDate() + "]");
  // logger.debug("21 = [" + claim.getTotalDaysStay() + "]");
  // logger.debug("22 = [" + claim.getPerDiemRate() + "]");
  // logger.debug("23 = [" + claim.getTotalAmountClaimed() + "]");
  // //sp.setString(24, claim.getCodingScheme());
  // logger.debug("24 = [null]");
  // logger.debug("25 = [" + claim.getAccidentCode() + "]");
  // logger.debug("26 = [" + claim.getAccidentIndicator() + "]");
  // logger.debug("27 = [" + claim.getDiagnosis1() + "]");
  // logger.debug("28 = [" + claim.getDiagnosis2() + "]");
  // logger.debug("29 = [" + claim.getDiagnosis3() + "]");
  // logger.debug("30 = [" + claim.getProcedure1() + "]");
  // logger.debug("31 = [" + claim.getProcedure2() + "]");
  // logger.debug("32 = [" + claim.getProcedure3() + "]");
  // logger.debug("33 = [" + claim.getHighCost1Code() + "]");
  // logger.debug("34 = [" + claim.getHighCost1Date() + "]");
  // logger.debug("35 = [" + claim.getHighCost1Amount() + "]");
  // logger.debug("36 = [" + claim.getHighCost2Code() + "]");
  // logger.debug("37 = [" + claim.getHighCost2Date() + "]");
  // logger.debug("38 = [" + claim.getHighCost2Amount() + "]");
  // logger.debug("39 = [" + claim.getHighCost3Code() + "]");
  // logger.debug("40 = [" + claim.getHighCost3Date() + "]");
  // logger.debug("41 = [" + claim.getHighCost3Amount() + "]");
  // logger.debug("42 = [" + claim.getServiceDate() + "]");
  // logger.debug("43 = [" + claim.getServiceCode() + "]");
  // logger.debug("44 = [" + claim.getHospitalClaimNumber() + "]");
  // logger.debug("45 = [" + claim.getAdmissionNumber() + "]");
  // logger.debug("46 = [" + claim.getReasonInBC() + "]");
  // logger.debug("47 = [" + claim.getNotes() + "]");
  // logger.debug("48 = [" + claim.getProvincialClaimNumber() + "]");
  // logger.debug("49 = [" + claim.getAssociatedClaimNumber() + "]");
  // logger.debug("50 = [" + claim.getSubmissionDate() + "]");
  // logger.debug("51 = [" + claim.getSubmissionDateTo() + "]");
  // logger.debug("52 = [" + claim.getProcessedDate() + "]");
  // logger.debug("53 = [" + claim.getProcessedDateTo() + "]");
  // logger.debug("54 = [" + claim.getOverrideRequest() + "]");
  // logger.debug("55 = [" + claim.getOverrideRequestReason() + "]");
  // logger.debug("56 = [" + claim.getOverrideStatus() + "]");
  // logger.debug("57 = [" + claim.getOverrideStatusReason() + "]");
  // logger.debug("58 = [" + claim.getDeclarationRequest() + "]");
  // logger.debug("59 = [" + claim.getDeclarationRequestReason() + "]");
  // logger.debug("60 = [" + claim.getStatus() + "]");
  // logger.debug("61 = [" + claim.getChangeFlag() + "]");
  // logger.debug("62 = [" + claim.getChangeReason() + "]");
  //
  // System.out.println(claim.getChangeFlag() + " " + claim.getChangeReason());
  //
  // // register the output paramters
  // sp.registerOutParameter(65, Types.NUMERIC);
  // sp.registerOutParameter(66, Types.NUMERIC);
  //
  // //execute and retrieve the result set
  // sp.execute();
  //
  // int searchId = sp.getInt(65);
  // int numRows = sp.getInt(66);
  // searchInfo = new SearchInfo(searchId, numRows);
  //
  // close(sp, null);
  //
  // return searchInfo;
  // }
  //
  // //*===========================================================================*/
  // //* Name : getSearchResultList */
  // //* */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ ----------------------------------------*/
  // //* Ron Merner Aug 05, 2005 Now picks up the treating province. */
  // //*===========================================================================*/
  // public List getSearchResultList(int searchId, int pageNumber, int pageSize)
  // throws ServiceFailedException {
  // String sql = "{ call HOOPC2_SEARCH.GetResultList(?, ?, ?, ?, ?, ?, ?, ?) }";
  // HoopcStoredProcedure sp = null;
  // ResultSet rs = null;
  //
  // List claims = new ArrayList();
  // try {
  // sp = getHoopcStoredProcedure(sql, 4, 5, 7, 8);
  // sp.setInt(1, searchId);
  // sp.setInt(2, pageNumber);
  // sp.setInt(3, pageSize);
  // sp.registerOutParameter(6, OracleTypes.CURSOR);
  // sp.execute();
  // rs = (ResultSet) sp.getObject(6);
  // try {
  // while (rs.next()) {
  // Claim claim = new ClaimVO();
  // claim.setSearchId(searchId);
  // claim.setHospitalName(rs.getString(1));
  // claim.setProvince(rs.getString(2));
  // claim.setLastName(rs.getString(3));
  // claim.setAdmissionDate(rs.getDate(4));
  // claim.setStatus(rs.getString(5));
  // claim.setRecordNumber(rs.getInt(6));
  // claim.setTreatingProvince(rs.getString(7));
  // claims.add(claim);
  // }
  // } catch (SQLException e) {
  // throw new ServiceFailedException(e);
  // }
  // } finally {
  // close(sp, rs);
  // }
  // return claims;
  // }
  //
  // public void updateResOutpatClaimInfo(Roc claim)
  // throws ServiceFailedException {
  // String sql
  // = "{ call HOOPC2_CLAIMS.UpdateResOutpatClaimInfo(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
  // }";
  // HoopcStoredProcedure sp = null;
  //
  // try {
  // sp = getHoopcStoredProcedure(sql, 18, 19, 20, 21);
  // sp.setDouble(1, claim.getSearchId());
  // sp.setDouble(2, claim.getRecordNumber());
  // sp.setString(3, claim.getTreatingProvince());
  // sp.setString(4, claim.getHospitalName());
  // sp.setString(5, claim.getHospitalNumber());
  // sp.setDouble(6, claim.getTotalAmountClaimed());
  // sp.setString(7, claim.getNotes());
  // sp.setString(8, claim.getProvincialClaimNumber());
  // sp.setString(9, claim.getAssociatedClaimNumber());
  // sp.setDate(10, claim.getBillingPeriod());
  // sp.setString(11, claim.getReviewClaim()); // review claim
  // sp.setString(12, claim.getChangeNotes()); // change notes
  // sp.setString(13, claim.getChangeFlag()); // chage flag
  // sp.setString(14, claim.getChangeReason());
  // sp.setString(15, claim.getServiceCode());
  // sp.setDate(16, claim.getServiceDate());
  // sp.setInt(17, claim.getLockId());
  // sp.setString(22, claim.getCodingScheme());
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  // //*===========================================================================*/
  // //* Name : updateNonResOutpatClaimInfo */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ ----------------------------------------*/
  // //* DC Bartlett May 11, 2005 Modified: Pass receiving province */
  // //* instead of treating province. */
  // //*===========================================================================*/
  // public void updateNonResOutpatClaimInfo(Nroc claim)
  // throws ServiceFailedException {
  // String sql
  // = "{ call HOOPC2_CLAIMS.UpdateNonResOutpatClaimInfo(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
  // }";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 18, 19, 20, 21);
  // sp.setDouble(1, claim.getSearchId());
  // sp.setDouble(2, claim.getRecordNumber());
  // sp.setString(3, claim.getProvince());
  // sp.setString(4, claim.getHospitalName());
  // sp.setString(5, claim.getHospitalNumber());
  // sp.setDouble(6, claim.getTotalAmountClaimed());
  // sp.setString(7, claim.getNotes());
  // sp.setString(8, claim.getProvincialClaimNumber());
  // sp.setString(9, claim.getAssociatedClaimNumber());
  // sp.setString(10, claim.getHospitalClaimNumber());
  // sp.setString(11, claim.getOverrideRequest()); // change notes
  // sp.setString(12, claim.getOverrideRequestReason()); // chage flag
  // sp.setString(13, claim.getOverrideStatus());
  // sp.setString(14, claim.getOverrideStatusReason());
  // sp.setString(15, claim.getServiceCode());
  // sp.setDate(16, claim.getServiceDate());
  // sp.setInt(17, claim.getLockId());
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  // //*===========================================================================*/
  // //* Name : updateNonResInpatClaimInfo */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ ----------------------------------------*/
  // //* DC Bartlett May 11, 2005 Modified: Pass receiving province */
  // //* instead of treating province. */
  // //*===========================================================================*/
  // public void updateNonResInpatClaimInfo(Nric claim)
  // throws ServiceFailedException {
  // String sql
  // = "{call
  // HOOPC2_CLAIMS.UpdateNonResInpatClaimInfo(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 22, 23, 24, 25);
  // sp.setDouble(1, claim.getSearchId());
  // sp.setDouble(2, claim.getRecordNumber());
  // sp.setString(3, claim.getProvince());
  // sp.setString(4, claim.getHospitalName());
  // sp.setString(5, claim.getHospitalNumber());
  // sp.setDouble(6, claim.getTotalAmountClaimed());
  // sp.setString(7, claim.getNotes());
  // sp.setString(8, claim.getProvincialClaimNumber());
  // sp.setString(9, claim.getAssociatedClaimNumber());
  // sp.setString(10, claim.getHospitalClaimNumber());
  // sp.setString(11, claim.getOverrideRequest());
  // sp.setString(12, claim.getOverrideRequestReason());
  // sp.setString(13, claim.getOverrideStatus());
  // sp.setString(14, claim.getOverrideStatusReason());
  // sp.setString(15, claim.getReasonInBC());
  // sp.setString(16, claim.getAccidentCode());
  // sp.setString(17, claim.getAccidentIndicator());
  // sp.setString(18, claim.getDeclarationRequest());
  // sp.setString(19, claim.getDeclarationRequest());
  // sp.setInt(20, claim.getLockId());
  // sp.setDate(21, claim.getDischargeDate());
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  // public void updateResInpatClaimInfo(Ric claim)
  // throws ServiceFailedException {
  // String sql
  // = "{ call
  // HOOPC2_CLAIMS.UpdateResInpatClaimInfo(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 20, 21, 22, 23);
  // sp.setDouble(1, claim.getSearchId());
  // sp.setDouble(2, claim.getRecordNumber());
  // sp.setString(3, claim.getTreatingProvince());
  // sp.setString(4, claim.getHospitalName());
  // sp.setString(5, claim.getHospitalNumber());
  // sp.setDouble(6, claim.getTotalAmountClaimed());
  // sp.setString(7, claim.getNotes());
  // sp.setString(8, claim.getProvincialClaimNumber());
  // sp.setString(9, claim.getAssociatedClaimNumber());
  // sp.setDate(10, claim.getBillingPeriod());
  // sp.setString(11, claim.getReviewClaim());
  // sp.setString(12, claim.getChangeNotes());
  // sp.setString(13, claim.getChangeFlag());
  // sp.setString(14, claim.getChangeReason());
  // sp.setString(15, claim.getAccidentCode());
  // sp.setString(16, claim.getAccidentIndicator());
  // sp.setString(17, claim.getDeclarationRequest());
  // sp.setString(18, claim.getDeclarationRequestReason());
  // sp.setDouble(19, claim.getLockId());
  // sp.setString(24, claim.getCodingScheme());
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  public void updateHighCostProcedureInfo(
      int searchId,
      int recordNumber,
      int sequenceNumber,
      String code,
      java.util.Date date,
      Double amount,
      int lockId)
      throws ServiceFailedException {
    String sql = "{call HOOPC2_DETAIL_CODES.UpdateHighCostProcedureInfo(?,?,?,?,?,?,?,?,?,?,?)}";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 8, 9, 10, 11);
      sp.setDouble(1, searchId);
      sp.setDouble(2, recordNumber);
      sp.setInt(3, sequenceNumber);
      sp.setString(4, code);
      sp.setDate(5, date);
      sp.setDouble(6, amount);
      sp.setInt(7, lockId);
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  /*
   * attaches adjRequest to claim
   */
  public void insertAdjustmentRequest(Claim claim, AdjustmentRequest adjRequest)
      throws ServiceFailedException {
    logger.debug("entering insertAdjustmentRequest");
    if (claim.getSearchId() < 1) {
      throw new ServiceFailedException("claim.getSearchId() is missing");
    }
    if (claim.getRecordNumber() < 1) {
      throw new ServiceFailedException("claim.getRecordNumber() is missing");
    }

    String sql = "{ call HOOPC2_CLAIMS.InsertAdjustmentRequest(?,?,?,?,?,?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 10, 11, 12, 13);
      sp.setDouble(1, claim.getSearchId());
      sp.setDouble(2, claim.getRecordNumber());
      sp.setDate(3, adjRequest.getRequestedDate());
      sp.setDouble(4, adjRequest.getAmount());
      sp.setString(5, adjRequest.getSourceUpperCase());
      sp.setString(6, adjRequest.getReason1UpperCase());
      sp.setString(7, adjRequest.getReason2UpperCase());
      sp.setString(8, adjRequest.getReason3UpperCase());
      sp.setString(9, adjRequest.getReason4UpperCase());
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  public AdjustmentRequest getAdjustmentRequest(int claimSearchId, int claimRecordNumber)
      throws ServiceFailedException {
    String sql = "{ call HOOPC2_CLAIMS.GetAdjustmentRequestInfo(?,?,?,?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    ResultSet rs = null;

    AdjustmentRequest adjR = new AdjustmentRequest();
    try {
      sp = getHoopcStoredProcedure(sql, 3, 4, 10, 11);
      sp.setDouble(1, claimSearchId);
      sp.setDouble(2, claimRecordNumber);
      sp.registerOutParameter(5, Types.DATE);
      sp.registerOutParameter(6, Types.INTEGER);
      sp.registerOutParameter(7, Types.VARCHAR);
      sp.registerOutParameter(8, Types.INTEGER);
      sp.registerOutParameter(9, OracleTypes.CURSOR);
      sp.execute();

      adjR.setRequestedDate(sp.getDate(5));
      adjR.setAmount(sp.getDouble(6));
      adjR.setSource(sp.getString(7));
      adjR.setLockId(sp.getInt(8));

      rs = (ResultSet) sp.getObject(9);
      if (rs.next()) {
        adjR.setReason1(rs.getString(1));
      }
      if (rs.next()) {
        adjR.setReason2(rs.getString(1));
      }
      if (rs.next()) {
        adjR.setReason3(rs.getString(1));
      }
      if (rs.next()) {
        adjR.setReason4(rs.getString(1));
      }
      rs.close();
      rs = null;
      // if no lock id... ret null for no adj?
      if (adjR.getLockId() == 0) {
        logger.debug("adjR.getLockId() == 0 (adjustment not found?), returning null");
        return null;
      }
      return adjR;
    } catch (SQLException e) {
      throw new ServiceFailedException(e);
    } finally {
      close(sp, rs);
    }
  }

  public List getAdjustmentReasons(String adjType) throws ServiceFailedException {
    List reasons = new ArrayList();
    String sql = "{ ? = call HOOPC2_GENERAL.GetAdjustmentCodeList(?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    ResultSet r = null;

    try {
      sp = getHoopcStoredProcedure(sql, 3, 4, 5, 6);
      sp.registerOutParameter(1, OracleTypes.CURSOR);
      sp.setString(2, adjType);
      sp.execute();
      r = (java.sql.ResultSet) sp.getObject(1);
      while (r.next()) {
        reasons.add(r.getString(1));
      }
    } catch (SQLException e) {
      throw new ServiceFailedException("during (HOOPC2_GENERAL.GetAdjustmentCodeList())", e);
    } finally {
      close(sp, r);
    }
    return reasons;
  }

  // public List getOverrideDeclReasons(String reason_type)
  // throws ServiceFailedException {
  // List reasons = new ArrayList();
  // String sql = "{ ? = call HOOPC2_GENERAL.GetOverrideDeclReasonList(?,?,?,?,?) }";
  // HoopcStoredProcedure sp = null;
  // ResultSet r = null;
  //
  // try {
  // sp = getHoopcStoredProcedure(sql, 3, 4, 5, 6);
  // sp.registerOutParameter(1, OracleTypes.CURSOR);
  // sp.setString(2, reason_type);
  // sp.execute();
  // r = (java.sql.ResultSet) sp.getObject(1);
  // while (r.next()) {
  // reasons.add(r.getString(1));
  // }
  // } catch (SQLException e) {
  // throw new ServiceFailedException(
  // "during (HOOPC2_GENERAL.GetOverrideDeclReasonList())",
  // e);
  // } finally {
  // close(sp, r);
  // }
  // return reasons;
  // }
  //
  /*
   * attaches adjRequest to claim
   */
  public void updateAdjustmentRequest(Claim claim, AdjustmentRequest adjRequest)
      throws ServiceFailedException {
    logger.debug("entering insertAdjustmentRequest");
    if (claim.getSearchId() < 1) {
      throw new ServiceFailedException("claim.getSearchId() is missing");
    }
    if (claim.getRecordNumber() < 1) {
      throw new ServiceFailedException("claim.getRecordNumber() is missing");
    }
    if (adjRequest.getLockId() == 0) {
      throw new ServiceFailedException("adjRequest.getLockId() is 0 (no lock Id!)");
    }

    String sql = "{ call HOOPC2_CLAIMS.UpdateAdjustmentRequest(?,?,?,?,?,?,?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 11, 12, 13, 14);
      sp.setDouble(1, claim.getSearchId());
      sp.setDouble(2, claim.getRecordNumber());
      sp.setDate(3, adjRequest.getRequestedDate());
      logger.debug("setting amount = " + adjRequest.getAmount());
      sp.setDouble(4, adjRequest.getAmount());
      sp.setString(5, adjRequest.getSourceUpperCase());
      sp.setString(6, adjRequest.getReason1UpperCase());
      sp.setString(7, adjRequest.getReason2UpperCase());
      sp.setString(8, adjRequest.getReason3UpperCase());
      sp.setString(9, adjRequest.getReason4UpperCase());
      sp.setInt(10, adjRequest.getLockId());
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  // public void insertResInpatPatientInfo(
  // Patient claim,
  // int claimSearchId,
  // int claimSearchRowNum)
  // throws ServiceFailedException {
  // String sql
  // = "{ call HOOPC2_CLAIMS.InsertResInpatPatientInfo(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 15, 16, 17, 18);
  // sp.setDouble(1, claimSearchId);
  // sp.setDouble(2, claimSearchRowNum);
  // sp.setString(3, claim.getInsuranceNumber());
  // sp.setDate(4, claim.getInsuranceCardExpiryDate());
  // sp.setString(5, claim.getLastName());
  // sp.setString(6, claim.getFirstName());
  // sp.setString(7, claim.getAddress1());
  // sp.setString(8, claim.getAddress2());
  // sp.setString(9, claim.getCity());
  // sp.setString(10, claim.getProvince());
  // sp.setString(11, claim.getPostalCode());
  // sp.setDate(12, claim.getBirthDate());
  // sp.setString(13, claim.getGender());
  // sp.setString(14, claim.getDeceasedFlag());
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  // public void insertNonResInpatPatientInfo(
  // Patient claim,
  // int claimSearchId,
  // int claimSearchRowNum)
  // throws ServiceFailedException {
  // String sql
  // = "{ call HOOPC2_CLAIMS.InsertNonResInpatPatientInfo(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 15, 16, 17, 18);
  // sp.setDouble(1, claimSearchId);
  // sp.setDouble(2, claimSearchRowNum);
  // sp.setString(3, claim.getInsuranceNumber());
  // sp.setDate(4, claim.getInsuranceCardExpiryDate());
  // sp.setString(5, claim.getLastName());
  // sp.setString(6, claim.getFirstName());
  // sp.setString(7, claim.getAddress1());
  // sp.setString(8, claim.getAddress2());
  // sp.setString(9, claim.getCity());
  // sp.setString(10, claim.getProvince());
  // sp.setString(11, claim.getPostalCode());
  // sp.setDate(12, claim.getBirthDate());
  // sp.setString(13, claim.getGender());
  // sp.setString(14, claim.getDeceasedFlag());
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  // *===========================================================================*/
  // * Name : insertResOutpatClaimInfo */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett Match 09, 2005 Modified: Added filename and rownum cols*/
  // * Added getCodingScheme to the proc call */
  // *===========================================================================*/
  public int insertResOutpatClaimInfo(Roc claim) throws ServiceFailedException {
    String sql =
        "{ call HOOPC2_CLAIMS.InsertResOutpatClaimInfo(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";

    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 20, 21, 22, 23);
      sp.setNull(1, Types.BIT);
      sp.registerOutParameter(1, Types.INTEGER);
      sp.registerOutParameter(2, Types.NUMERIC);
      sp.setString(3, claim.getTreatingProvince());
      sp.setString(4, claim.getHospitalName());
      sp.setString(5, claim.getHospitalNumber());
      sp.setDouble(6, claim.getTotalAmountClaimed());
      sp.setString(7, claim.getNotes());
      sp.setString(8, claim.getProvincialClaimNumber());
      sp.setString(9, claim.getAssociatedClaimNumber()); // assos claim #

      if ((claim.getImportFileName() != null)
          && (claim.getImportFileName().trim().length() != 0)
          && (claim.getImportRowNum() != 0)) {
        sp.setString(10, claim.getClaimSource());
      } else {
        sp.setString(10, "MANUAL");
      }

      sp.setDate(11, claim.getBillingPeriod()); // billing period
      sp.setString(12, claim.getReviewClaim()); // review claim
      sp.setString(13, claim.getChangeNotes()); // change notes
      sp.setString(14, claim.getChangeFlag()); // chage flag
      sp.setString(15, claim.getChangeReason());
      sp.setString(16, claim.getServiceCode());
      sp.setDate(17, claim.getServiceDate());
      sp.setString(18, claim.getImportFileName());
      sp.setInt(19, claim.getImportRowNum());
      sp.setString(24, claim.getCodingScheme());
      sp.execute();

      int searchId = sp.getInt(1);
      int recordNumber = sp.getInt(2);

      if (recordNumber != 1) {
        throw new ServiceFailedException("recordNumber != 1");
      }
      return searchId;
    } finally {
      close(sp, null);
    }
  }
  // *===========================================================================*/
  // * Name : insertNonResOutpatClaimInfo */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 09, 2005 Modified: Added filename and rownum cols*/
  // * DC Bartlett May 11, 2005 Modified: Pass receiving province */
  // * instead of treating province. */
  // *===========================================================================*/

  public int insertNonResOutpatClaimInfo(Nroc claim) throws ServiceFailedException {
    String sql =
        "{call HOOPC2_CLAIMS.InsertNonResOutpatClaimInfo(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";

    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 20, 21, 22, 23);
      sp.setNull(1, Types.BIT);
      sp.registerOutParameter(1, Types.INTEGER);
      sp.registerOutParameter(2, Types.NUMERIC);
      sp.setString(3, claim.getProvince());
      sp.setString(4, claim.getHospitalName());
      sp.setString(5, claim.getHospitalNumber());
      sp.setDouble(6, claim.getTotalAmountClaimed());
      sp.setString(7, claim.getNotes());
      sp.setString(8, claim.getProvincialClaimNumber());
      sp.setString(9, claim.getAssociatedClaimNumber());

      if ((claim.getImportFileName() != null)
          && (claim.getImportFileName().trim().length() != 0)
          && (claim.getImportRowNum() != 0)) {
        sp.setString(10, claim.getClaimSource());
      } else {
        sp.setString(10, "MANUAL");
      }
      sp.setString(11, claim.getHospitalClaimNumber());
      sp.setString(12, claim.getOverrideRequest());
      sp.setString(13, claim.getOverrideRequestReason());
      sp.setString(14, claim.getOverrideStatus());
      sp.setString(15, claim.getOverrideStatusReason());
      sp.setString(16, claim.getServiceCode());
      sp.setDate(17, claim.getServiceDate());
      sp.setString(18, claim.getImportFileName());
      sp.setInt(19, claim.getImportRowNum());

      sp.execute();

      int searchId = sp.getInt(1);
      int recordNumber = sp.getInt(2);

      if (recordNumber != 1) {
        throw new ServiceFailedException("recordNumber != 1");
      }
      return searchId;
    } finally {
      close(sp, null);
    }
  }

  public void insertResOutpatPatientInfo(Patient claim, int claimSearchId, int claimSearchRowNum)
      throws ServiceFailedException {
    String sql =
        "{ call HOOPC2_CLAIMS.InsertResOutpatPatientInfo(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 15, 16, 17, 18);
      sp.setInt(1, claimSearchId);
      sp.setInt(2, claimSearchRowNum);
      sp.setString(3, claim.getInsuranceNumber());
      sp.setDate(4, claim.getInsuranceCardExpiryDate());
      sp.setString(5, claim.getLastName());
      sp.setString(6, claim.getFirstName());
      sp.setString(7, claim.getAddress1());
      sp.setString(8, claim.getAddress2());
      sp.setString(9, claim.getCity());
      sp.setString(10, claim.getProvince());
      sp.setString(11, claim.getPostalCode());
      sp.setDate(12, claim.getBirthDate());
      sp.setString(13, claim.getGender());
      sp.setString(14, claim.getDeceasedFlag());
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  public void insertNonResOutpatPatientInfo(Patient claim, int claimSearchId, int claimSearchRowNum)
      throws ServiceFailedException {
    String sql =
        "{ call HOOPC2_CLAIMS.InsertNonResOutpatPatientInfo(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 15, 16, 17, 18);
      sp.setInt(1, claimSearchId);
      sp.setInt(2, claimSearchRowNum);
      sp.setString(3, claim.getInsuranceNumber());
      sp.setDate(4, claim.getInsuranceCardExpiryDate());
      sp.setString(5, claim.getLastName());
      sp.setString(6, claim.getFirstName());
      sp.setString(7, claim.getAddress1());
      sp.setString(8, claim.getAddress2());
      sp.setString(9, claim.getCity());
      sp.setString(10, claim.getProvince());
      sp.setString(11, claim.getPostalCode());
      sp.setDate(12, claim.getBirthDate());
      sp.setString(13, claim.getGender());
      sp.setString(14, claim.getDeceasedFlag());
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  private void updateNonResInpatPatientInfo(Patient patient, int searchId, int recordNumber)
      throws ServiceFailedException {
    updatePatientInfo("updateNonResInpatPatientInfo", patient, searchId, recordNumber);
  }

  private void updateNonResOutpatPatientInfo(Patient patient, int searchId, int recordNumber)
      throws ServiceFailedException {
    updatePatientInfo("updateNonResOutpatPatientInfo", patient, searchId, recordNumber);
  }

  private void updateResOutpatPatientInfo(Patient patient, int searchId, int recordNumber)
      throws ServiceFailedException {
    updatePatientInfo("updateResOutpatPatientInfo", patient, searchId, recordNumber);
  }

  private void updateResInpatPatientInfo(Patient patient, int searchId, int recordNumber)
      throws ServiceFailedException {
    updatePatientInfo("updateResInpatPatientInfo", patient, searchId, recordNumber);
  }

  private void updatePatientInfo(String spname, Patient patient, int searchId, int recordNumber)
      throws ServiceFailedException {
    String sql = "{ call HOOPC2_CLAIMS." + spname + "(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 16, 17, 18, 19);
      sp.setInt(1, searchId);
      sp.setInt(2, recordNumber);
      sp.setString(3, patient.getInsuranceNumber());
      sp.setDate(4, patient.getInsuranceCardExpiryDate());
      sp.setString(5, patient.getLastName());
      sp.setString(6, patient.getFirstName());
      sp.setString(7, patient.getAddress1());
      sp.setString(8, patient.getAddress2());
      sp.setString(9, patient.getCity());
      sp.setString(10, patient.getProvince());
      sp.setString(11, patient.getPostalCode());
      sp.setDate(12, patient.getBirthDate());
      sp.setString(13, patient.getGender());
      sp.setString(14, patient.getDeceasedFlag());
      sp.setDouble(15, patient.getLockIdPatient());
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  // *===========================================================================*/
  // * Name : getClaimErrors */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * Ron Merner Sep 28, 2005 Added code to remove duplicate errors. */
  // *===========================================================================*/
  public List getClaimErrors(int searchId, int recordNumber) throws ServiceFailedException {
    String sql = "{ ? = call HOOPC2_CLAIMS.GetClaimErrors(?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    ResultSet rs = null;

    List errors;
    try {
      sp = getHoopcStoredProcedure(sql, 4, 5, 6, 7);
      sp.registerOutParameter(1, OracleTypes.CURSOR);
      sp.setInt(2, searchId);
      sp.setInt(3, recordNumber);
      sp.execute();
      rs = (java.sql.ResultSet) sp.getObject(1);
      errors = new ArrayList();
      List msgs = new ArrayList();
      // TODO: HACK ALERT to fix Defect #231
      // The Rules Engine has a bug when deleting the last diagnosis code:
      // it generates duplicate messages. This hack here is temporary to remove
      // those duplicates until such time as the Rules Engine can be fixed.
      while (rs.next()) {
        String msgText = rs.getString("error_text");
        if (!msgs.contains(msgText)) {
          errors.add(new Claim.Error(rs.getString("error_type"), msgText));
          msgs.add(msgText);
        }
      }
    } catch (SQLException e) {
      throw new ServiceFailedException("during HOOPC2_CLAIMS.GetClaimErrors()", e);
    } finally {
      close(sp, rs);
    }
    return errors;
  }

  public void ruseBegin(String masterFunction) throws ServiceFailedException {
    String sql = "{ call RuSEControl.BeginTransaction(?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 3, 4, 5, 6);
      sp.setString(1, "HOOPC2");
      sp.setString(2, masterFunction);
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  private void ruseEnd(String masterFunction) throws ServiceFailedException {
    String sql = "{ call RuSEControl.EndTransaction(?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 3, 4, 5, 6);
      sp.setString(1, "HOOPC2");
      sp.setString(2, masterFunction);
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  // *===========================================================================*/
  // * Name : insertResInpatClaimInfo */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett Match 09, 2005 Modified: Added filename and rownum cols*/
  // *===========================================================================*/
  private int insertResInpatClaimInfo(Ric claim) throws ServiceFailedException {
    String sql =
        "{call HOOPC2_CLAIMS.InsertResInpatClaimInfo(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";

    HoopcStoredProcedure sp = null;
    int searchId = 0;
    int recordNumber = 0;
    try {
      sp = getHoopcStoredProcedure(sql, 22, 23, 24, 25);
      sp.setNull(1, Types.BIT);
      sp.registerOutParameter(1, Types.NUMERIC);
      sp.registerOutParameter(2, Types.NUMERIC);
      sp.setString(3, claim.getTreatingProvince());
      sp.setString(4, claim.getHospitalName());
      sp.setString(5, claim.getHospitalNumber());
      sp.setDouble(6, claim.getTotalAmountClaimed());
      sp.setString(7, claim.getNotes());
      sp.setString(8, claim.getProvincialClaimNumber());
      sp.setString(9, claim.getAssociatedClaimNumber());

      if ((claim.getImportFileName() != null)
          && (claim.getImportFileName().trim().length() != 0)
          && (claim.getImportRowNum() != 0)) {
        sp.setString(10, claim.getClaimSource());
      } else {
        sp.setString(10, "MANUAL");
      }

      sp.setDate(11, claim.getBillingPeriod());
      sp.setString(12, claim.getReviewClaim());
      sp.setString(13, claim.getChangeNotes());
      sp.setString(14, claim.getChangeFlag());
      sp.setString(15, claim.getChangeReason());
      sp.setString(16, claim.getAccidentCode());
      sp.setString(17, claim.getAccidentIndicator());
      sp.setString(18, claim.getDeclarationRequest());
      sp.setString(19, claim.getDeclarationRequestReason());
      sp.setString(20, claim.getImportFileName());
      sp.setInt(21, claim.getImportRowNum());
      sp.setString(26, claim.getCodingScheme());
      sp.execute();

      // fetch the generated search id which acts as our claim id and insert patient
      searchId = sp.getInt(1);
      recordNumber = sp.getInt(2);
      if (searchId < 1) {
        throw new ServiceFailedException(sql + " returned searchId < 1");
      }
      if (recordNumber != 1) {
        throw new ServiceFailedException(
            sql + " returned recordNumber != 1 (is: " + recordNumber + ")");
      }
    } finally {
      close(sp, null);
    }
    return searchId;
  }

  // *===========================================================================*/
  // * Name : insertNonResInpatClaimInfo */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 09, 2005 Modified: Added filename and rownum cols*/
  // * DC Bartlett May 11, 2005 Modified: Pass receiving province */
  // * instead of treating province. */
  // *===========================================================================*/

  public int insertNonResInpatClaimInfo(Nric claim) throws ServiceFailedException {
    String sql = "{call HOOPC2_CLAIMS.InsertNonResInpatClaimInfo(" + qmarks(26) + ")}";

    HoopcStoredProcedure sp = null;
    int searchId = 0;
    int recordNumber = 0;
    try {
      sp = getHoopcStoredProcedure(sql, 23, 24, 25, 26);
      sp.setNull(1, Types.BIT);
      sp.registerOutParameter(1, Types.NUMERIC);
      sp.registerOutParameter(2, Types.NUMERIC);
      sp.setString(3, claim.getProvince());
      sp.setString(4, claim.getHospitalName());
      sp.setString(5, claim.getHospitalNumber());
      sp.setDouble(6, claim.getTotalAmountClaimed());
      sp.setString(7, claim.getNotes());
      sp.setString(8, claim.getProvincialClaimNumber());
      sp.setString(9, claim.getAssociatedClaimNumber());

      if ((claim.getImportFileName() != null)
          && (claim.getImportFileName().trim().length() != 0)
          && (claim.getImportRowNum() != 0)) {
        sp.setString(10, claim.getClaimSource());
      } else {
        sp.setString(10, "MANUAL");
      }
      sp.setString(11, claim.getHospitalClaimNumber());
      sp.setString(12, claim.getOverrideRequest());
      sp.setString(13, claim.getOverrideRequestReason());
      sp.setString(14, claim.getOverrideStatus());
      sp.setString(15, claim.getOverrideStatusReason());
      sp.setString(16, claim.getReasonInBC());
      sp.setString(17, claim.getAccidentCode());
      sp.setString(18, claim.getAccidentIndicator());
      sp.setString(19, claim.getDeclarationRequest());
      sp.setString(20, claim.getDeclarationRequestReason());
      sp.setString(21, claim.getImportFileName());
      sp.setInt(22, claim.getImportRowNum());
      sp.execute();

      // fetch the generated search id which acts as our claim id and insert patient
      searchId = sp.getInt(1);
      recordNumber = sp.getInt(2);
      if (searchId < 1) {
        throw new ServiceFailedException(sql + " returned searchId < 1");
      }
      if (recordNumber != 1) {
        throw new ServiceFailedException(
            sql + " returned recordNumber != 1 (is: " + recordNumber + ")");
      }
    } finally {
      close(sp, null);
    }
    return searchId;
  }

  // *===========================================================================*/
  // * Name : updateDiagnosticInfo */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * Ron Merner May 25, 2005 Modified: Passed in coding scheme */
  // *===========================================================================*/
  public void updateDiagnosticInfo(
      int searchId,
      int recordNumber,
      int seqNumber,
      String codeScheme,
      String diagnosisCode,
      int lockId)
      throws ServiceFailedException {
    String sql = "{ call HOOPC2_DETAIL_CODES.UpdateDiagnosticInfo(?,?,?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 7, 8, 9, 10);
      sp.setInt(1, searchId);
      sp.setInt(2, recordNumber);
      sp.setInt(3, seqNumber);
      sp.setString(4, diagnosisCode);
      sp.setString(5, codeScheme);
      sp.setInt(6, lockId);
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  // *===========================================================================*/
  // * Name : updateAdmissionInfo */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * Ron Merner May 25, 2005 Modified: Passed in admission number */
  // *===========================================================================*/
  public void updateAdmissionInfo(
      int searchId,
      int recordNumber,
      java.util.Date admissionDate,
      java.util.Date dischargeDate,
      Integer totalDaysStay,
      String longTermFlag,
      Double perDiemRate,
      String admissionNumber,
      int lockId)
      throws ServiceFailedException {
    String sql = "{ call HOOPC2_CLAIMS.UpdateAdmissionInfo(?,?,?,?,?,?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 10, 11, 12, 13);
      sp.setDouble(1, searchId);
      sp.setDouble(2, recordNumber);
      sp.setDate(3, admissionDate);
      sp.setDate(4, dischargeDate);
      sp.setInt(5, totalDaysStay);
      sp.setString(6, longTermFlag);
      sp.setDouble(7, perDiemRate);
      sp.setString(8, admissionNumber);
      sp.setInt(9, lockId);
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  // *===========================================================================*/
  // * Name : insertAdmissionInfo */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett April 14, 2005 Modified: Passed in admission number */
  // *===========================================================================*/

  public void insertAdmissionInfo(
      int searchId,
      int recordNumber,
      java.util.Date admissionDate,
      java.util.Date dischargeDate,
      Integer totalDaysStay,
      String longTermFlag,
      Double perDiemRate,
      String admissionNumber)
      throws ServiceFailedException {
    String sql = "{ call HOOPC2_CLAIMS.InsertAdmissionInfo(?,?,?,?,?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 9, 10, 11, 12);
      sp.setDouble(1, searchId);
      sp.setDouble(2, recordNumber);
      sp.setDate(3, admissionDate);
      sp.setDate(4, dischargeDate);
      sp.setInt(5, totalDaysStay);
      sp.setString(6, longTermFlag);
      sp.setDouble(7, perDiemRate);
      sp.setString(8, admissionNumber);
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  // *===========================================================================*/
  // * Name : insertDiagnosticInfo */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * Ron Merner May 25, 2005 Modified: Passed in coding scheme */
  // *===========================================================================*/
  public void insertDiagnosticInfo(
      int searchId, int recordNumber, String codeScheme, String diagnosticCode)
      throws ServiceFailedException {
    String sql = "{ call HOOPC2_DETAIL_CODES.InsertDiagnosticInfo(?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 5, 6, 7, 8);
      sp.setDouble(1, searchId);
      sp.setDouble(2, recordNumber);
      sp.setString(3, diagnosticCode);
      sp.setString(4, codeScheme);
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  // *===========================================================================*/
  // * Name : updateProcedureInfo */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * Ron Merner Jun 29, 2005 Modified: Passed in coding scheme */
  // *===========================================================================*/
  public void updateProcedureInfo(
      int searchId,
      int recordNumber,
      int seqNumber,
      String procedureCode,
      String codingScheme,
      int lockId)
      throws ServiceFailedException {
    String sql = "{ call HOOPC2_DETAIL_CODES.UpdateProcedureInfo(?,?,?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 7, 8, 9, 10);
      sp.setInt(1, searchId);
      sp.setInt(2, recordNumber);
      sp.setInt(3, seqNumber);
      sp.setString(4, procedureCode);
      sp.setString(5, codingScheme);
      sp.setInt(6, lockId);
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  // *===========================================================================*/
  // * Name : insertProcedureInfo */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * Ron Merner Jun 29, 2005 Modified: Passed in coding scheme */
  // *===========================================================================*/
  public void insertProcedureInfo(
      int searchId, int recordNumber, String procedureCode, String codingScheme)
      throws ServiceFailedException {
    String sql = "{ call HOOPC2_DETAIL_CODES.InsertProcedureInfo(?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 5, 6, 7, 8);
      sp.setDouble(1, searchId);
      sp.setDouble(2, recordNumber);
      sp.setString(3, procedureCode);
      sp.setString(4, codingScheme);
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  public void deleteAdjustmentDecision(int searchId, int recordNumber, int lockId)
      throws ServiceFailedException {
    String sql = "{call HOOPC2_CLAIMS.DeleteAdjustmentDecision(?,?,?,?,?,?,?)}";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 4, 5, 6, 7);
      sp.setInt(1, searchId);
      sp.setInt(2, recordNumber);
      sp.setInt(3, lockId);
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  public void deleteAdjustmentRequest(int searchId, int recordNumber, int lockId)
      throws ServiceFailedException {
    String sql = "{call HOOPC2_CLAIMS.DeleteAdjustmentRequest(?,?,?,?,?,?,?)}";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 4, 5, 6, 7);
      sp.setInt(1, searchId);
      sp.setInt(2, recordNumber);
      sp.setInt(3, lockId);
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  public void insertAdjustmentDecision(
      int searchId, int recordNumber, AdjustmentDecision adjDecision)
      throws ServiceFailedException {
    String sql = "{ call HOOPC2_CLAIMS.InsertAdjustmentDecision(?,?,?,?,?,?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 10, 11, 12, 13);
      sp.setInt(1, searchId);
      sp.setInt(2, recordNumber);
      sp.setDate(3, adjDecision.getProcessedDate());
      sp.setDouble(4, adjDecision.getAmount());
      sp.setString(5, adjDecision.getStatus());
      sp.setString(6, adjDecision.getReason1().toUpperCase());
      sp.setString(7, adjDecision.getReason2().toUpperCase());
      sp.setString(8, adjDecision.getReason3().toUpperCase());
      sp.setString(9, adjDecision.getReason4().toUpperCase());
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  // *===========================================================================*/
  // * Name : insertBatchInpatientAdjDecision */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 08,2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Created specifically for handling the insertion of resident adjustment decisions from a batch
   * import file.
   *
   * @throws ServiceFailedException
   */
  public void insertBatchInpatientAdjDecision(Ric claim) throws ServiceFailedException {
    int error = -1;
    String message = null;

    String sql =
        "{ call HOOPC2_CLAIMS.ImportResInpatAdjDecision(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";

    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 38, 39, 40, 41);
      sp.setString(1, claim.getProvincialClaimNumber());
      sp.setString(2, claim.getInsuranceNumber());
      sp.setDate(3, claim.getBirthDate());
      sp.setDate(4, claim.getAdmissionDate());
      sp.setString(5, claim.getHospitalName());
      sp.setString(6, claim.getHospitalNumber());
      sp.setDouble(7, claim.getTotalAmountClaimed());
      sp.setDate(8, claim.getInsuranceCardExpiryDate());
      sp.setString(9, claim.getLastName());
      sp.setString(10, claim.getFirstName());
      sp.setString(11, claim.getAddress1());
      sp.setString(12, claim.getAddress2());
      sp.setString(13, claim.getCity());
      sp.setString(14, claim.getProvince());
      sp.setString(15, claim.getPostalCode());
      sp.setString(16, claim.getGender());
      sp.setString(17, claim.getDiagnosis1());
      sp.setString(18, claim.getDiagnosis2());
      sp.setString(19, claim.getDiagnosis3());
      sp.setString(20, claim.getProcedure1());
      sp.setString(21, claim.getProcedure2());
      sp.setString(22, claim.getProcedure3());
      sp.setString(23, claim.getHighCost1Code());
      sp.setDate(24, claim.getHighCost1Date());
      sp.setString(25, claim.getHighCost2Code());
      sp.setDate(26, claim.getHighCost2Date());
      sp.setString(27, claim.getHighCost3Code());
      sp.setDate(28, claim.getHighCost3Date());
      sp.setDate(29, claim.getDischargeDate());
      sp.setInt(30, claim.getTotalDaysStay());
      sp.setDouble(31, claim.getPerDiemRate());
      sp.setString(32, claim.getDeceasedFlag());
      sp.setString(33, claim.getLongTermFlag());
      sp.setString(34, claim.getAccidentIndicator());
      sp.setString(35, claim.getAccidentCode());
      sp.setString(36, claim.getImportFileName());
      sp.setInt(37, claim.getImportRowNum());
      sp.execute();

      error = sp.getInt(40);
      message = sp.getString(41);
      logger.info("Error Number/Message: " + error + " / " + message);
      if (error != 0) {
        throw new ServiceFailedException(message);
      }

    } finally {
      close(sp, null);
    }
  }

  // *===========================================================================*/
  // * Name : insertBatchOutpatientAdjDecision */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 08,2005 Initial Spec
  // * Cathy Hu Aug 09, 2006 Fix bug, call HOOPC2_CLAIMS.ImportResOutpatAdjDecision */
  // *===========================================================================*/
  /**
   * Created specifically for handling the insertion of resident adjustment decisions from a batch
   * import file.
   *
   * @throws ServiceFailedException
   */
  public void insertBatchOutpatientAdjDecision(Roc claim) throws ServiceFailedException {
    int error = -1;
    String message = null;

    String sql =
        "{ call HOOPC2_CLAIMS.ImportResOutpatAdjDecision(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";

    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 18, 19, 20, 21);
      sp.setString(1, claim.getProvincialClaimNumber());
      sp.setString(2, claim.getInsuranceNumber());
      sp.setDate(3, claim.getBirthDate());
      sp.setDate(4, claim.getServiceDate());
      sp.setString(5, claim.getHospitalName());
      sp.setString(6, claim.getHospitalNumber());
      sp.setDouble(7, claim.getTotalAmountClaimed());
      sp.setDate(8, claim.getInsuranceCardExpiryDate());
      sp.setString(9, claim.getLastName());
      sp.setString(10, claim.getFirstName());
      sp.setString(11, claim.getProvince());
      sp.setString(12, claim.getGender());
      sp.setString(13, claim.getServiceCode());
      sp.setString(14, claim.getDiagnosis1());
      sp.setString(15, claim.getProcedure1());
      sp.setString(16, claim.getImportFileName());
      sp.setInt(17, claim.getImportRowNum());
      sp.execute();

      error = sp.getInt(20);
      message = sp.getString(21);
      logger.info("Error Number/Message: " + error + " / " + message);
      if (error != 0) {
        throw new ServiceFailedException(message);
      }

    } finally {
      close(sp, null);
    }
  }

  public void updateAdjustmentDecision(
      int searchId, int recordNumber, AdjustmentDecision adjDecision)
      throws ServiceFailedException {
    String sql = "{ call HOOPC2_CLAIMS.UpdateAdjustmentDecision(?,?,?,?,?,?,?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 11, 12, 13, 14);
      sp.setInt(1, searchId);
      sp.setInt(2, recordNumber);
      sp.setDate(3, adjDecision.getProcessedDate());
      sp.setDouble(4, adjDecision.getAmount());
      sp.setString(5, adjDecision.getStatus());
      sp.setString(6, adjDecision.getReason1UpperCase());
      sp.setString(7, adjDecision.getReason2UpperCase());
      sp.setString(8, adjDecision.getReason3UpperCase());
      sp.setString(9, adjDecision.getReason4UpperCase());
      sp.setInt(10, adjDecision.getLockId());
      sp.execute();
    } finally {
      close(sp, null);
    }
  }

  public AdjustmentDecision getAdjustmentDecision(int searchId, int recordNumber)
      throws ServiceFailedException {
    String sql = "{ call HOOPC2_CLAIMS.GetAdjustmentDecisionInfo(?,?,?,?,?,?,?,?,?,?,?) }";
    HoopcStoredProcedure sp = null;
    ResultSet rs = null;

    AdjustmentDecision adjD = new AdjustmentDecision();
    try {
      sp = getHoopcStoredProcedure(sql, 3, 4, 10, 11);

      sp.setDouble(1, searchId);
      sp.setDouble(2, recordNumber);
      sp.registerOutParameter(5, Types.DATE);
      sp.registerOutParameter(6, Types.INTEGER);
      sp.registerOutParameter(7, Types.VARCHAR);
      sp.registerOutParameter(8, Types.INTEGER);
      sp.registerOutParameter(9, OracleTypes.CURSOR);
      sp.execute();

      adjD.setProcessedDate(sp.getDate(5));
      adjD.setAmount(sp.getDouble(6));
      adjD.setStatus(sp.getString(7));
      adjD.setLockId(sp.getInt(8));
      rs = (ResultSet) sp.getObject(9);
      try {
        if (rs.next()) {
          adjD.setReason1(rs.getString(1));
        }
        if (rs.next()) {
          adjD.setReason2(rs.getString(1));
        }
        if (rs.next()) {
          adjD.setReason3(rs.getString(1));
        }
        if (rs.next()) {
          adjD.setReason4(rs.getString(1));
        }
      } catch (SQLException e) {
        throw new ServiceFailedException("caught sql exception during " + sql, e);
      }
    } finally {
      close(sp, rs);
    }

    if (adjD.getLockId() == 0) {
      logger.debug("adjR.getLockId() == 0 (adjustment not found?), returning null");
      return null;
    }
    logger.debug("status = " + adjD.getStatus());

    return adjD;
  }

  // //*===========================================================================*/
  // //* Name : updateAdmissionInfo */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ ----------------------------------------*/
  // //* Ron Merner May 25, 2005 Modified: now passes admission number */
  // //* to updateAdmissionInfo(). */
  // //*===========================================================================*/
  // private void updateAdmissionInfo(Claim claim) throws ServiceFailedException {
  // int lockId = claim.getLockIdAdmissionInfo();
  // if (lockId == 0) {
  // throw new ServiceFailedException("lockId is 0");
  // }
  // updateAdmissionInfo(
  // claim.getSearchId(),
  // claim.getRecordNumber(),
  // claim.getAdmissionDate(),
  // claim.getDischargeDate(),
  // claim.getTotalDaysStay(),
  // claim.getLongTermFlag(),
  // claim.getPerDiemRate(),
  // claim.getAdmissionNumber(),
  // claim.getLockIdAdmissionInfo());
  // }
  //
  private List getDiagnosticCodes(int searchId, int recordNumber, String codingScheme)
      throws ServiceFailedException {
    // Call GetDiagnosticInfo StoredProcedure
    GetDiagnosticInfoIn getDiagnosticInfoIn = new GetDiagnosticInfoIn();
    getDiagnosticInfoIn.setConnection(con);
    getDiagnosticInfoIn.setUserID(userId);
    getDiagnosticInfoIn.setSessionID(sessionId);
    getDiagnosticInfoIn.setRecordNumber(recordNumber);
    getDiagnosticInfoIn.setSearchID(searchId);
    getDiagnosticInfoIn.setCodingScheme(codingScheme);
    GetDiagnosticInfo getDiagnosticInfo = new GetDiagnosticInfo(getDiagnosticInfoIn);
    getDiagnosticInfo.process();
    GetDiagnosticInfoOut getDiagnosticInfoOut =
        (GetDiagnosticInfoOut) getDiagnosticInfo.getOutputBean();
    return getDiagnosticInfoOut.getDiagnosticInfoList();
  }

  // *===========================================================================*/
  // * Name : getProcedureCodes */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett April 27,2005 Modified: Modified to handle the new */
  // * parameter, coding scheme. */
  // *===========================================================================*/
  private List getProcedureCodes(int searchId, int recordNumber, String codeScheme)
      throws ServiceFailedException {
    GetProcedureInfoIn getProcedureInfoIn = new GetProcedureInfoIn();
    getProcedureInfoIn.setConnection(con);
    getProcedureInfoIn.setUserId(userId);
    getProcedureInfoIn.setSessionId(sessionId);
    getProcedureInfoIn.setRecordNumber(recordNumber);
    getProcedureInfoIn.setCodingScheme(codeScheme);
    getProcedureInfoIn.setSearchID(searchId);
    GetProcedureInfo getProcedureInfo = new GetProcedureInfo(getProcedureInfoIn);
    getProcedureInfo.process();
    GetProcedureInfoOut getProcedureInfoOut =
        (GetProcedureInfoOut) getProcedureInfo.getOutputBean();
    return getProcedureInfoOut.getProcedureInfoList();
  }

  // //*===========================================================================*/
  // //* Name : updateProvinceData */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ ----------------------------------------*/
  // //* Ron Merner Jul 29, 2005 Added supplier phone number. */
  // //* Ron Merner Aug 05, 2005 Added supplier number/title/office and */
  // //* all invoice parameters. */
  // //*===========================================================================*/
  // public void updateProvinceData(Province province) throws ServiceFailedException {
  // String sql
  // = "{call HOOPC2_Administration.UpdateProvinceData(" + qmarks(34) + ")}";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 31, 32, 33, 34);
  // sp.setString(1, province.getProvinceCode());
  // sp.setString(2, province.getProvinceName());
  // sp.setString(3, province.getPostalCodePrefix());
  // sp.setString(4, province.getInsuranceFormat());
  // sp.setString(5, province.getInsuranceExpiresInd());
  // sp.setDate(6, province.getInsuranceExpiryImpltnDate());
  // sp.setDate(7, province.getOutpatientIcd10EffDate());
  // sp.setString(8, province.getElectronicDataSubmitInd());
  // sp.setString(9, province.getSubmitIdentifier());
  // sp.setString(10, province.getResponsibility());
  // sp.setString(11, province.getSupplierName());
  // sp.setString(12, province.getSupplierAddress1());
  // sp.setString(13, province.getSupplierAddress2());
  // sp.setString(14, province.getSupplierCity());
  // sp.setString(15, province.getSupplierPostalCode());
  // sp.setString(16, province.getSupplierPhoneNumber());
  // sp.setString(17, province.getSupplierNumber());
  // sp.setString(18, province.getSupplierTitle1());
  // sp.setString(19, province.getSupplierTitle2());
  // sp.setString(20, province.getSupplierOffice1());
  // sp.setString(21, province.getSupplierOffice2());
  // sp.setString(22, province.getInvoiceContact());
  // sp.setString(23, province.getInvoiceTitle1());
  // sp.setString(24, province.getInvoiceTitle2());
  // sp.setString(25, province.getInvoiceOffice1());
  // sp.setString(26, province.getInvoiceOffice2());
  // sp.setString(27, province.getInvoiceAddress1());
  // sp.setString(28, province.getInvoiceAddress2());
  // sp.setString(29, province.getInvoiceCity());
  // sp.setString(30, province.getInvoicePostalCode());
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  // //*===========================================================================*/
  // //* Name : getProvince */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ ----------------------------------------*/
  // //* Ron Merner Jul 29, 2005 Added supplier phone number. */
  // //* Ron Merner Aug 05, 2005 Added supplier number/office/titles and */
  // //* all invoice parameters. */
  // //*===========================================================================*/
  // public Province getProvince(String provCode) throws ServiceFailedException {
  //
  // Province province = new Province();
  // String sql = "{call HOOPC2_GENERAL.GetProvDetails(?,?,?,?,?,?)}";
  // HoopcStoredProcedure sp = null;
  // ResultSet rs = null;
  //
  // try {
  // sp = getHoopcStoredProcedure(sql, 2, 3, 5, 6);
  // sp.setString(1, provCode);
  // sp.registerOutParameter(4, OracleTypes.CURSOR);
  // sp.execute();
  // rs = (ResultSet) sp.getObject(4);
  // if (!rs.next()) {
  // throw new ServiceFailedException("no province detail found for province " + provCode);
  // }
  //
  // province.setProvinceName(rs.getString(1));
  // province.setPostalCodePrefix(rs.getString(2));
  // province.setProvinceCode(rs.getString(3));
  // province.setInsuranceFormat(rs.getString(4));
  // province.setInsuranceExpiresInd(rs.getString(5));
  // province.setInsuranceExpiryImpltnDate(rs.getDate(6));
  // province.setOutpatientIcd10EffDate(rs.getDate(7));
  // province.setElectronicDataSubmitInd(rs.getString(8));
  // province.setSubmitIdentifier(rs.getString(9));
  // province.setResponsibility(rs.getString(10));
  // province.setSupplierName(rs.getString(11));
  // province.setSupplierAddress1(rs.getString(12));
  // province.setSupplierAddress2(rs.getString(13));
  // province.setSupplierCity(rs.getString(14));
  // province.setSupplierPostalCode(rs.getString(15));
  // province.setMonthEndStatusCode(rs.getString(16));
  // province.setSupplierPhoneNumber(rs.getString(18));
  // province.setLockSeqNum(rs.getInt(17));
  // province.setSupplierNumber(rs.getString(19));
  // province.setSupplierTitle1(rs.getString(20));
  // province.setSupplierTitle2(rs.getString(21));
  // province.setSupplierOffice1(rs.getString(22));
  // province.setSupplierOffice2(rs.getString(23));
  // province.setInvoiceContact(rs.getString(24));
  // province.setInvoiceTitle1(rs.getString(25));
  // province.setInvoiceTitle2(rs.getString(26));
  // province.setInvoiceOffice1(rs.getString(27));
  // province.setInvoiceOffice2(rs.getString(28));
  // province.setInvoiceAddress1(rs.getString(29));
  // province.setInvoiceAddress2(rs.getString(30));
  // province.setInvoiceCity(rs.getString(31));
  // province.setInvoicePostalCode(rs.getString(32));
  //
  // } catch (SQLException e) {
  // } finally {
  // close(sp, rs);
  // }
  //
  // return province;
  // }
  //
  // public void insertReasonInProv(String code, String desc)
  // throws ServiceFailedException {
  // String sql = "{call HOOPC2_ADMINISTRATION.InsertReasonInProv(?,?,?,?,?,?)}";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 3, 4, 5, 6);
  // sp.setString(1, code);
  // sp.setString(2, desc);
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  // public void updateReasonInProv(String code, String desc)
  // throws ServiceFailedException {
  // String sql = "{call HOOPC2_ADMINISTRATION.UpdateReasonInProv(?,?,?,?,?,?)}";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 3, 4, 5, 6);
  // sp.setString(1, code);
  // sp.setString(2, desc);
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  // public void insertHospitalAndRate(moh.hoopc.dto.Hospital hosp)
  // throws ServiceFailedException {
  // String sql
  // = "{call HOOPC2_ADMINISTRATION.InsertHospitalAndRate(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 13, 14, 15, 16);
  // sp.setString(1, hosp.getProvince());
  // sp.setString(2, hosp.getNumber());
  // sp.setString(3, hosp.getName());
  // sp.setString(4, hosp.getNotes());
  // sp.setString(5, hosp.getAddress1());
  // sp.setString(6, hosp.getAddress2());
  // sp.setString(7, hosp.getCity());
  // sp.setString(8, hosp.getPostalCode());
  // sp.setString(9, hosp.getHaNumber());
  // sp.setDouble(10, hosp.getPerDiemRate().getPerDiemRate());
  // sp.setDate(11, hosp.getPerDiemRate().getEffectiveDate());
  // sp.setDate(12, hosp.getPerDiemRate().getEndDate());
  //
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  // public void insertServiceCodeAndRate(ClaimDetailCode cdc)
  // throws ServiceFailedException {
  // String sql
  // = "{call HOOPC2_ADMINISTRATION.InsertServiceCodeAndRate(?,?,?,?,?,?,?,?,?,?,?)}";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 8, 9, 10, 11);
  // sp.setString(1, cdc.getCodeValue());
  // sp.setString(2, cdc.getShortDescription());
  // sp.setString(3, cdc.getLongDescription());
  // sp.setString(4, cdc.getDuplicateAllowed());
  // sp.setDouble(5, cdc.getNewServiceRate().getRateAmount());
  // sp.setDate(6, cdc.getNewServiceRate().getEffectiveDate());
  // sp.setDate(7, cdc.getNewServiceRate().getEndDate());
  //
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  // //*==================================================================================*/
  // //* Name : insertHighCostProcAndRate */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ -----------------------------------------------*/
  // //* DC Bartlett April 11 2005 Modified to call InsertHighCostProcCodeAndRate.*/
  // //* instead of InsertHighCostProcAndRate. */
  // //*==================================================================================*/
  // public void insertHighCostProcAndRate(HighCostProcedureCode code)
  // throws ServiceFailedException {
  // String sql
  // = "{call HOOPC2_ADMINISTRATION.InsertHighCostProcCodeAndRate(?,?,?,?,?,?,?,?,?)}";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 6, 7, 8, 9);
  // sp.setString(1, code.getHighCostProcedureCode());
  // sp.setString(2, code.getDescription());
  // sp.setDouble(3, code.getHighCostProcedureRate().getRateAmount());
  // sp.setDate(4, code.getHighCostProcedureRate().getEffectiveDate());
  // sp.setDate(5, code.getHighCostProcedureRate().getEndDate());
  //
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  // public void updateHospitalAndRate(
  // moh.hoopc.dto.Hospital hosp,
  // Date oldEndDate)
  // throws ServiceFailedException {
  // String sql
  // = "{call HOOPC2_ADMINISTRATION.UpdateHospitalAndRate(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 14, 15, 16, 17);
  // sp.setString(1, hosp.getProvince());
  // sp.setString(2, hosp.getNumber());
  // sp.setString(3, hosp.getName());
  // sp.setString(4, hosp.getNotes());
  // sp.setString(5, hosp.getAddress1());
  // sp.setString(6, hosp.getAddress2());
  // sp.setString(7, hosp.getCity());
  // sp.setString(8, hosp.getPostalCode());
  // sp.setString(9, hosp.getHaNumber());
  // sp.setDouble(10, hosp.getPerDiemRate().getPerDiemRate());
  // sp.setDate(11, hosp.getPerDiemRate().getEffectiveDate());
  // sp.setDate(12, hosp.getPerDiemRate().getEndDate());
  // sp.setDate(13, oldEndDate);
  //
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  // public void deleteReasonInProv(String code) throws ServiceFailedException {
  // String sql = "{call HOOPC2_ADMINISTRATION.DeleteReasonInProv(?,?,?,?,?)}";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 2, 3, 4, 5);
  // sp.setString(1, code);
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  // public String getReasonInProvDescription(String code)
  // throws ServiceFailedException {
  // String sql
  // = "{call HOOPC2_ADMINISTRATION.GetReasonInProvList(?,?,?,?,?,?)}";
  // HoopcStoredProcedure sp = null;
  // ResultSet rs = null;
  //
  // String desc = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 2, 3, 5, 6);
  // sp.setString(1, code);
  // sp.registerOutParameter(4, OracleTypes.CURSOR);
  // sp.execute();
  // rs = (ResultSet) sp.getObject(4);
  // while (rs.next()) {
  // String c = rs.getString(1);
  // String d = rs.getString(2);
  // System.out.println("code=" + c);
  // if (c.equals(code)) {
  // return d;
  // }
  // }
  // } catch (SQLException e) {
  // throw new ServiceFailedException(e);
  // } finally {
  // close(sp, rs);
  // }
  // return desc;
  // }
  //
  // //*===========================================================================*/
  // //* Name : getHighCostProcCodeAndRates */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ ----------------------------------------*/
  // //* DC Bartlett April 19,2005 Modified: Added setting of old end date */
  // //*===========================================================================*/
  // public HighCostProcedure.TO getHighCostProcCodeAndRates(String code)
  // throws ServiceFailedException {
  // /*
  // PROCEDURE GetHighCostProcCodeAndRates(
  // 1 pv_highCostProcCode IN VARCHAR2,
  // 2 pv_userID IN VARCHAR2,
  // 3 pv_sessionID IN VARCHAR2,
  // 4 pv_highCostProcDesc OUT VARCHAR2,
  // 5 pn_rateAmount1 OUT NUMBER,
  // 6 pd_effectiveDate1 OUT DATE,
  // 7 pd_endDate1 OUT DATE,
  // 8 pn_rateAmount2 OUT NUMBER,
  // 9 pd_effectiveDate2 OUT DATE,
  // 10 pd_endDate2 OUT DATE,
  // 11 pn_rateAmount3 OUT NUMBER,
  // 12 pd_effectiveDate3 OUT DATE,
  // 13 pd_endDate3 OUT DATE,
  // 14 pn_rateAmount4 OUT NUMBER,
  // 15 pd_effectiveDate4 OUT DATE,
  // 16 pd_endDate4 OUT DATE,
  // 17 pn_resultCode IN OUT INTEGER,
  // 18 pv_message IN OUT VARCHAR2
  // ) IS
  // */
  // String sql
  // = "{call Hoopc2_Administration.GetHighCostProcCodeAndRates("
  // + qmarks(18)
  // + ")}";
  // HoopcStoredProcedure sp = null;
  // HighCostProcedure.TO to = new HighCostProcedure.TO();
  // try {
  // sp = getHoopcStoredProcedure(sql, 2, 3, 17, 18);
  // sp.setString(1, code);
  // sp.registerOutParameter(4, Types.VARCHAR);
  // sp.registerOutParameter(5, Types.NUMERIC);
  // sp.registerOutParameter(6, Types.DATE);
  // sp.registerOutParameter(7, Types.DATE);
  // sp.registerOutParameter(8, Types.NUMERIC);
  // sp.registerOutParameter(9, Types.DATE);
  // sp.registerOutParameter(10, Types.DATE);
  // sp.registerOutParameter(11, Types.NUMERIC);
  // sp.registerOutParameter(12, Types.DATE);
  // sp.registerOutParameter(13, Types.DATE);
  // sp.registerOutParameter(14, Types.NUMERIC);
  // sp.registerOutParameter(15, Types.DATE);
  // sp.registerOutParameter(16, Types.DATE);
  // sp.execute();
  //
  // to.code = code;
  // to.desc = sp.getString(4);
  //
  // to.rateAmount1 = sp.getDouble(5);
  // to.effectiveDate1 = sp.getDate(6);
  // to.endDate1 = sp.getDate(7);
  // to.oldEndDate = sp.getDate(7);
  //
  // to.rateAmount2 = sp.getDouble(8);
  // to.effectiveDate2 = sp.getDate(9);
  // to.endDate2 = sp.getDate(10);
  //
  // to.rateAmount3 = sp.getDouble(11);
  // to.effectiveDate3 = sp.getDate(12);
  // to.endDate3 = sp.getDate(13);
  //
  // to.rateAmount4 = sp.getDouble(14);
  // to.effectiveDate4 = sp.getDate(15);
  // to.endDate4 = sp.getDate(16);
  // } finally {
  // close(sp, null);
  // }
  // return to;
  // }
  //
  // public void updateHighCostProcCodeAndRate(HighCostProcedure.TO to)
  // throws ServiceFailedException {
  // /*
  // PROCEDURE UpdateHighCostProcCodeAndRate(
  // 1 pv_highCostProcCode IN VARCHAR2,
  // 2 pv_highCostProcDesc IN VARCHAR2,
  // 3 pn_rateAmount IN NUMBER,
  // 4 pd_effectiveDate IN DATE,
  // 5 pd_endDate IN DATE,
  // 6 pd_oldEndDate IN DATE,
  // 6 pn_rateAmount1 OUT NUMBER,
  // 7 pd_effectiveDate1 OUT DATE,
  // 8 pd_endDate1 OUT DATE,
  // 9 pn_rateAmount2 OUT NUMBER,
  // 10 pd_effectiveDate2 OUT DATE,
  // 11 pd_endDate2 OUT DATE,
  // 12 pn_rateAmount3 OUT NUMBER,
  // 13 pd_effectiveDate3 OUT DATE,
  // 14 pd_endDate3 OUT DATE,
  // 15 pn_rateAmount4 OUT NUMBER,
  // 16 pd_effectiveDate4 OUT DATE,
  // 17 pd_endDate4 OUT DATE,
  // 18 pv_userID IN VARCHAR2,
  // 19 pv_sessionID IN VARCHAR2,
  // 20 pn_resultCode IN OUT INTEGER,
  // 21 pv_message IN OUT VARCHAR2
  // ) IS
  // */
  // String sql
  // = "{call
  // HOOPC2_Administration.UpdateHighCostProcCodeAndRate(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 19, 20, 21, 22);
  // sp.setString(1, to.code);
  // sp.setString(2, to.desc);
  // sp.setDouble(3, to.newRateAmount);
  // sp.setDate(4, to.newEffectiveDate);
  // sp.setDate(5, to.newEndDate);
  // sp.setDate(6, to.oldEndDate);
  //
  // sp.setDouble(7, to.rateAmount1);
  // sp.setDate(8, to.effectiveDate1);
  // sp.setDate(9, to.endDate1);
  // sp.setDouble(10, to.rateAmount2);
  // sp.setDate(11, to.effectiveDate2);
  // sp.setDate(12, to.endDate2);
  // sp.setDouble(13, to.rateAmount3);
  // sp.setDate(14, to.effectiveDate3);
  // sp.setDate(15, to.endDate3);
  // sp.setDouble(16, to.rateAmount4);
  // sp.setDate(17, to.effectiveDate4);
  // sp.setDate(18, to.endDate4);
  //
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  // //*===========================================================================*/
  // //* Name : getHospital */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ ----------------------------------------*/
  // //* DC Bartlett April 19,2005 Modified: Added setting of old end date */
  // //*===========================================================================*/
  // public Hospital.TO getHospital(String number, String province)
  // throws ServiceFailedException {
  // /*
  // PROCEDURE GetHospitalAndRates(
  // 1 pv_province IN VARCHAR2,
  // 2 pv_hospitalNumber IN VARCHAR2,
  // 3 pv_userID IN VARCHAR2,
  // 4 pv_sessionID IN VARCHAR2,
  // 5 pv_hospitalName OUT VARCHAR2,
  // 6 pv_notes OUT VARCHAR2,
  // 7 pv_address1 OUT VARCHAR2,
  // 8 pv_address2 OUT VARCHAR2,
  // 9 pv_city OUT VARCHAR2,
  // 10 pv_postalCode OUT VARCHAR2,
  // 11 pv_HANumber OUT VARCHAR2,
  // 12 pn_rateAmount1 OUT NUMBER,
  // 13 pd_effectiveDate1 OUT DATE,
  // 14 pd_endDate1 OUT DATE,
  // 15 pn_rateAmount2 OUT NUMBER,
  // 16 pd_effectiveDate2 OUT DATE,
  // 17 pd_endDate2 OUT DATE,
  // 18 pn_rateAmount3 OUT NUMBER,
  // 19 pd_effectiveDate3 OUT DATE,
  // 20 pd_endDate3 OUT DATE,
  // 21 pn_rateAmount4 OUT NUMBER,
  // 22 pd_effectiveDate4 OUT DATE,
  // 23 pd_endDate4 OUT DATE,
  // 24 pn_resultCode IN OUT INTEGER,
  // 25 pv_message IN OUT VARCHAR2
  // ) IS
  // */
  //
  // String sql
  // = "{call HOOPC2_ADMINISTRATION.GetHospitalAndRates(" + qmarks(25) + ")}";
  // HoopcStoredProcedure sp = null;
  // Hospital.TO to = new Hospital.TO();
  // try {
  // sp = getHoopcStoredProcedure(sql, 3, 4, 24, 25);
  // sp.setString(1, province);
  // sp.setString(2, number);
  //
  // sp.registerOutParameter(5, Types.VARCHAR);
  // sp.registerOutParameter(6, Types.VARCHAR);
  // sp.registerOutParameter(7, Types.VARCHAR);
  // sp.registerOutParameter(8, Types.VARCHAR);
  // sp.registerOutParameter(9, Types.VARCHAR);
  // sp.registerOutParameter(10, Types.VARCHAR);
  // sp.registerOutParameter(11, Types.VARCHAR);
  // sp.registerOutParameter(12, Types.NUMERIC);
  // sp.registerOutParameter(13, Types.DATE);
  // sp.registerOutParameter(14, Types.DATE);
  // sp.registerOutParameter(15, Types.NUMERIC);
  // sp.registerOutParameter(16, Types.DATE);
  // sp.registerOutParameter(17, Types.DATE);
  // sp.registerOutParameter(18, Types.NUMERIC);
  // sp.registerOutParameter(19, Types.DATE);
  // sp.registerOutParameter(20, Types.DATE);
  // sp.registerOutParameter(21, Types.NUMERIC);
  // sp.registerOutParameter(22, Types.DATE);
  // sp.registerOutParameter(23, Types.DATE);
  //
  // sp.execute();
  //
  // to.number = number;
  // to.province = province;
  // to.name = sp.getString(5);
  // to.notes = sp.getString(6);
  // to.address1 = sp.getString(7);
  // to.address2 = sp.getString(8);
  //
  // to.city = sp.getString(9);
  // to.postalCode = sp.getString(10);
  // to.HANumber = sp.getString(11);
  //
  // to.rateAmount1 = sp.getDouble(12);
  // to.effectiveDate1 = sp.getDate(13);
  // to.endDate1 = sp.getDate(14);
  // to.oldEndDate = sp.getDate(14);
  //
  // to.rateAmount2 = sp.getDouble(15);
  // to.effectiveDate2 = sp.getDate(16);
  // to.endDate2 = sp.getDate(17);
  //
  // to.rateAmount3 = sp.getDouble(18);
  // to.effectiveDate3 = sp.getDate(19);
  // to.endDate3 = sp.getDate(20);
  //
  // to.rateAmount4 = sp.getDouble(21);
  // to.effectiveDate4 = sp.getDate(22);
  // to.endDate4 = sp.getDate(23);
  //
  // } finally {
  // close(sp, null);
  // }
  // return to;
  // }
  //
  // public void updateHospital(Hospital.TO to) throws ServiceFailedException {
  // /*
  // PROCEDURE UpdateHospitalAndRate(
  // 1 pv_province IN VARCHAR2,
  // 2 pv_hospitalNumber IN VARCHAR2,
  // 3 pv_hospitalName IN VARCHAR2,
  // 4 pv_notes IN VARCHAR2,
  // 5 pv_address1 IN VARCHAR2,
  // 6 pv_address2 IN VARCHAR2,
  // 7 pv_city IN VARCHAR2,
  // 8 pv_postalCode IN VARCHAR2,
  // 9 pv_HANumber IN VARCHAR2,
  // 10 pn_rateAmount IN NUMBER,
  // 11 pd_effectiveDate IN DATE,
  // 12 pd_endDate IN DATE,
  // 13 pd_oldEndDate IN DATE,
  // 14 pn_rateAmount1 IN NUMBER,
  // 15 pd_effectiveDate1 IN DATE,
  // 16 pd_endDate1 IN DATE,
  // 17 pn_rateAmount2 IN NUMBER,
  // 18 pd_effectiveDate2 IN DATE,
  // 19 pd_endDate2 IN DATE,
  // 20 pn_rateAmount3 IN NUMBER,
  // 21 pd_effectiveDate3 IN DATE,
  // 22 pd_endDate3 IN DATE,
  // 23 pn_rateAmount4 IN NUMBER,
  // 24 pd_effectiveDate4 IN DATE,
  // 25 pd_endDate4 IN DATE,
  // 26 pv_userID IN VARCHAR2,
  // 27 pv_sessionID IN VARCHAR2,
  // 28 pn_resultCode IN OUT INTEGER,
  // 29 pv_message IN OUT VARCHAR2
  // ) IS
  // */
  // String sql
  // = "{call HOOPC2_Administration.UpdateHospitalAndRate(" + qmarks(29) + ")}";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 26, 27, 28, 29);
  // sp.setString(1, to.province);
  // sp.setString(2, to.number);
  // sp.setString(3, to.name);
  // sp.setString(4, to.notes);
  // sp.setString(5, to.address1);
  // sp.setString(6, to.address2);
  // sp.setString(7, to.city);
  // sp.setString(8, to.postalCode);
  // sp.setString(9, to.HANumber);
  // sp.setDouble(10, to.newRateAmount);
  // sp.setDate(11, to.newEffectiveDate);
  // sp.setDate(12, to.newEndDate);
  // sp.setDate(13, to.oldEndDate);
  // sp.setDouble(14, to.rateAmount1);
  // sp.setDate(15, to.effectiveDate1);
  // sp.setDate(16, to.endDate1);
  // sp.setDouble(17, to.rateAmount2);
  // sp.setDate(18, to.effectiveDate2);
  // sp.setDate(19, to.endDate2);
  // sp.setDouble(20, to.rateAmount3);
  // sp.setDate(21, to.effectiveDate3);
  // sp.setDate(22, to.endDate3);
  // sp.setDouble(23, to.rateAmount4);
  // sp.setDate(24, to.effectiveDate4);
  // sp.setDate(25, to.endDate4);
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  // public void updateServiceCodeAndRate(ServiceCode.TO to)
  // throws ServiceFailedException {
  // /* PROCEDURE updateServiceCodeAndRateNew(
  // 1 pv_serviceCode IN VARCHAR2,
  // 2 pv_shortDesc IN VARCHAR2,
  // 3 pv_longDesc IN VARCHAR2,
  // 4 pv_duplicateAllowed IN VARCHAR2,
  // 5 pn_rateAmount IN NUMBER,
  // 6 pd_effectiveDate IN DATE,
  // 7 pd_endDate IN DATE,
  // 8 pd_oldEndDate IN DATE,
  // 9 pn_rateAmount1 IN NUMBER,
  // 10 pd_effectiveDate1 IN DATE,
  // 11 pd_endDate1 IN DATE,
  // 12 pn_rateAmount2 IN NUMBER,
  // 13 pd_effectiveDate2 IN DATE,
  // 14 pd_endDate2 IN DATE,
  // 15 pn_rateAmount3 IN NUMBER,
  // 16 pd_effectiveDate3 IN DATE,
  // 17 pd_endDate3 IN DATE,
  // 18 pn_rateAmount4 IN NUMBER,
  // 19 pd_effectiveDate4 IN DATE,
  // 20 pd_endDate4 IN DATE,
  // 21 pv_userID IN VARCHAR2,
  // 22 pv_sessionID IN VARCHAR2,
  // 23 pn_resultCode IN OUT INTEGER,
  // 24 pv_message */
  // String sql
  // = "{call
  // HOOPC2_Administration.UpdateServiceCodeAndRate(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 21, 22, 23, 24);
  // sp.setString(1, to.code);
  // sp.setString(2, to.desc);
  // sp.setString(3, "");
  // sp.setString(4, to.duplicateAllowed);
  // sp.setDouble(5, to.rateAmount);
  // sp.setDate(6, to.effectiveDate);
  // sp.setDate(7, to.endDate);
  // sp.setDate(8, to.oldEndDate);
  // sp.setDouble(9, to.rateAmount1);
  // sp.setDate(10, to.effectiveDate1);
  // sp.setDate(11, to.endDate1);
  // sp.setDouble(12, to.rateAmount2);
  // sp.setDate(13, to.effectiveDate2);
  // sp.setDate(14, to.endDate2);
  // sp.setDouble(15, to.rateAmount3);
  // sp.setDate(16, to.effectiveDate3);
  // sp.setDate(17, to.endDate3);
  // sp.setDouble(18, to.rateAmount4);
  // sp.setDate(19, to.effectiveDate4);
  // sp.setDate(20, to.endDate4);
  // sp.execute();
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  // //*===========================================================================*/
  // //* Name : getServiceCode */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ ----------------------------------------*/
  // //* DC Bartlett April 19,2005 Modified: Added setting of old end date */
  // //*===========================================================================*/
  //
  // public ServiceCode.TO getServiceCode(String serviceCode)
  // throws ServiceFailedException {
  // /*
  // PROCEDURE GetServiceCodeAndRates(
  // 1 pv_serviceCode IN VARCHAR2,
  // 2 pv_userID IN VARCHAR2,
  // 3 pv_sessionID IN VARCHAR2,
  // 4 pv_shortDesc OUT VARCHAR2,
  // 5 pv_longDesc OUT VARCHAR2,
  // 6 pv_duplicateAllowed OUT VARCHAR2,
  // 7 pn_rateAmount1 OUT NUMBER,
  // 8 pd_effectiveDate1 OUT DATE,
  // 9 pd_endDate1 OUT DATE,
  // 10 pn_rateAmount2 OUT NUMBER,
  // 11 pd_effectiveDate2 OUT DATE,
  // 12 pd_endDate2 OUT DATE,
  // 13 pn_rateAmount3 OUT NUMBER,
  // 14 pd_effectiveDate3 OUT DATE,
  // 15 pd_endDate3 OUT DATE,
  // 16 pn_rateAmount4 OUT NUMBER,
  // 17 pd_effectiveDate4 OUT DATE,
  // 18 pd_endDate4 OUT DATE,
  // 19 pn_resultCode IN OUT INTEGER,
  // 20 pv_message IN OUT VARCHAR2
  // ) IS
  // */
  // String sql
  // = "{call HOOPC2_Administration.GetServiceCodeAndRates(" + qmarks(20) + ")}";
  // HoopcStoredProcedure sp = null;
  // ServiceCode.TO to = new ServiceCode.TO();
  // try {
  // sp = getHoopcStoredProcedure(sql, 2, 3, 19, 20);
  // sp.setString(1, serviceCode);
  // sp.registerOutParameter(4, Types.VARCHAR);
  // sp.registerOutParameter(5, Types.VARCHAR);
  // sp.registerOutParameter(6, Types.VARCHAR);
  //
  // sp.registerOutParameter(7, Types.DOUBLE);
  // sp.registerOutParameter(8, Types.DATE);
  // sp.registerOutParameter(9, Types.DATE);
  //
  // sp.registerOutParameter(10, Types.DOUBLE);
  // sp.registerOutParameter(11, Types.DATE);
  // sp.registerOutParameter(12, Types.DATE);
  //
  // sp.registerOutParameter(13, Types.DOUBLE);
  // sp.registerOutParameter(14, Types.DATE);
  // sp.registerOutParameter(15, Types.DATE);
  //
  // sp.registerOutParameter(16, Types.DOUBLE);
  // sp.registerOutParameter(17, Types.DATE);
  // sp.registerOutParameter(18, Types.DATE);
  //
  // sp.execute();
  //
  // to.code = serviceCode;
  // to.desc = sp.getString(4);
  // to.duplicateAllowed = sp.getString(6);
  //
  // to.rateAmount1 = sp.getDouble(7);
  // to.effectiveDate1 = sp.getDate(8);
  // to.endDate1 = sp.getDate(9);
  // to.oldEndDate = sp.getDate(9);
  //
  // to.rateAmount2 = sp.getDouble(10);
  // to.effectiveDate2 = sp.getDate(11);
  // to.endDate2 = sp.getDate(12);
  //
  // to.rateAmount3 = sp.getDouble(13);
  // to.effectiveDate3 = sp.getDate(14);
  // to.endDate3 = sp.getDate(15);
  //
  // to.rateAmount4 = sp.getDouble(16);
  // to.effectiveDate4 = sp.getDate(17);
  // to.endDate4 = sp.getDate(18);
  // } finally {
  // close(sp, null);
  // }
  // return to;
  // }
  //
  // *===========================================================================*/
  // * Name : insertClaimDataSubmissions */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 10 2005 Initial Spec */
  // *===========================================================================*/

  /**
   * Inserts entry into claim_data_submissions regarding the latest resident import file from a
   * receiving province.
   *
   * @param fn Name of the import file
   * @param status Indicates the status of the import load
   * @param dtlCnt Number of detail records in the file
   * @param dltAmt Sum of all detail claim amounts
   * @param province Treating Province whose claims statuses will be updated
   * @param processMonth The current billing period
   * @param sessionId Object that called this method
   * @throws SQLException
   */
  public void insertClaimDataSubmissions(
      String fn, String status, Integer dtlCnt, Double dtlAmt, String province, String processMonth)
      throws ServiceFailedException {

    logger.debug("Calling insertClaimDataSubmissions() started!");

    String sql = "{call HOOPC2_GENERAL.INSERTCLAIMDATASUBMISSION (?,?,?,?,?,?,?,?,?,?)}";
    long error = -1;
    String message = null;

    logger.debug("FileName: " + fn);
    logger.debug("Status: " + status);
    logger.debug("Number of Details: " + dtlCnt);
    logger.debug("Submission Amount: " + dtlAmt);
    logger.debug("Province: " + province);
    logger.debug("processMonth: " + processMonth);
    logger.debug("Session Id: " + sessionId);
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 7, 8, 9, 10);
      // Set In Parameters for call to Oracle Stored Procedure
      sp.setString(1, fn);
      sp.setString(2, status);
      sp.setInt(3, dtlCnt);
      sp.setDouble(4, dtlAmt);
      sp.setString(5, province);
      sp.setString(6, processMonth);
      sp.execute();
      error = sp.getInt(9);
      message = sp.getString(10);
      logger.info("Error Number/Message: " + error + " / " + message);
      if (error != 0) {
        throw new ServiceFailedException(message);
      }
    } finally {
      close(sp, null);
    }
    logger.debug("Calling insertClaimDataSubmissions() finished!");
  }

  // *===========================================================================*/
  // * Name : updateClaimDataSubmissions */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 10 2005 Initial Spec */
  // *===========================================================================*/

  /**
   * Inserts entry into claim_data_submissions regarding the latest resident import file from a
   * receiving province.
   *
   * @param fn Name of the import file
   * @param status Indicates the status of the import load
   * @param sessionId Object that called this method
   * @throws SQLException
   */
  public void updateClaimDataSubmissions(String fn, String status) throws ServiceFailedException {
    logger.debug("Calling updateClaimDataSubmissions() started!");
    long error = -1;
    String sql = "{call HOOPC2_GENERAL.UPDATECLAIMDATASUBMISSION(?,?,?,?,?,?)}";

    String message = null;

    logger.debug("FileName: " + fn);
    logger.debug("Status: " + status);
    logger.debug("Session Id: " + sessionId);
    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 3, 4, 5, 6);
      // Set In Parameters for call to Oracle Stored Procedure
      sp.setString(1, fn);
      sp.setString(2, status);
      sp.execute();
      error = sp.getInt(5);
      message = sp.getString(6);

      logger.info("Error Number/Message: " + error + " / " + message);
      if (error != 0) {
        throw new ServiceFailedException(message);
      }
    } finally {
      close(sp, null);
    }
    logger.debug("Calling updateClaimDataSubmissions() finished!");
  }

  // //*===========================================================================*/
  // //* Name : getLastPos */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ ----------------------------------------*/
  // //* Ron Merner Jul 25, 2005 Initial Spec */
  // //*===========================================================================*/
  // public int getLastPos(String fileName) throws ServiceFailedException {
  //
  // String sql = "{ ? = call HOOPC2_GENERAL.GetClaimDataSubmissionRowCount(?,?,?,?,?) }";
  //
  // HoopcStoredProcedure sp = null;
  // ResultSet r = null;
  // int lastPos = 0;
  // long error = -1;
  // String message = null;
  //
  // try {
  // sp = getHoopcStoredProcedure(sql, 3, 4, 5, 6);
  // sp.registerOutParameter(1, OracleTypes.INTEGER);
  // sp.setString(2, fileName);
  // sp.execute();
  // lastPos = sp.getInt(1);
  // error = sp.getInt(5);
  // message = sp.getString(6);
  //
  // logger.info("Error Number/Message: " + error + " / " + message);
  // if (error != 0) {
  // throw new ServiceFailedException(message);
  // }
  // } finally {
  // close(sp, r);
  // }
  // return lastPos;
  // }
  //
  // *===========================================================================*/
  // * Name : insertDataProcessingGroups */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 02 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Inserts entry into data_processing_groups regarding the latest block of claims loaded into
   * HOOPC2 from an import file.
   *
   * @param startRow Starting row in the import file of the block of records loaded
   * @param endRow Ending row in the import file of the block of records loaded
   * @param processMonth The current billing period
   * @param sessionId Object that called this method
   * @throws SQLException
   */
  public void insertDataProcessingGroups(String fn, Integer startRow, Integer endRow, String status)
      throws ServiceFailedException {
    logger.debug("Calling insertDataProcessingGroups() started!");
    String sql = "{call HOOPC2_GENERAL.INSERTDATAPROCESSINGGROUP(?,?,?,?,?,?,?,?)}";

    long error = -1;
    String message = null;

    logger.debug("FileName: " + fn);
    logger.debug("Status: " + status);
    logger.debug("Starting Row: " + startRow);
    logger.debug("Ending Row: " + endRow);
    logger.debug("Session Id: " + sessionId);

    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 5, 6, 7, 8);
      // Set In Parameters for call to Oracle Stored Procedure
      sp.setString(1, fn);
      sp.setInt(2, startRow);
      sp.setInt(3, endRow);
      sp.setString(4, status);
      sp.execute();
      error = sp.getInt(7);
      message = sp.getString(8);

      logger.info("Error Number/Message: " + error + " / " + message);
      if (error != 0) {
        throw new ServiceFailedException(message);
      }
    } finally {
      close(sp, null);
    }
    logger.debug("Calling insertDataProcessingGroups() finished!");
  }

  // *===========================================================================*/
  // * Name : updateDataProcessingGroups */
  // * History: */
  // * Developer Date Description */
  // * --------- ------------ ----------------------------------------*/
  // * DC Bartlett March 02 2005 Initial Spec */
  // *===========================================================================*/
  /**
   * Updates entry in data_processing_groups regarding the latest block of claims loaded into HOOPC2
   * from an import file.
   *
   * @param startRow Starting row in the import file of the block of records loaded
   * @param endRow Ending row in the import file of the block of records loaded
   * @param processMonth The current billing period
   * @param sessionId Object that called this method
   * @throws SQLException
   */
  public void updateDataProcessingGroups(String fn, Integer startRow, Integer endRow, String status)
      throws ServiceFailedException {
    logger.debug("Calling updateDataProcessingGroups() started!");
    String sql = "{call HOOPC2_GENERAL.UPDATEDATAPROCESSINGGROUP(?,?,?,?,?,?,?,?)}";
    long error = -1;
    String message = null;
    HoopcStoredProcedure cstmt = null;

    logger.debug("FileName: " + fn);
    logger.debug("Status: " + status);
    logger.debug("Starting Row: " + startRow);
    logger.debug("Ending Row: " + endRow);
    logger.debug("Session Id: " + sessionId);
    cstmt = getHoopcStoredProcedure(sql, 5, 6, 7, 8);
    try {
      // Set In Parameters for call to Oracle Stored Procedure
      cstmt.setString(1, fn);
      cstmt.setInt(2, startRow);
      cstmt.setInt(3, endRow);
      cstmt.setString(4, status);
      cstmt.execute();
      error = cstmt.getInt(7);
      message = cstmt.getString(8);

      logger.info("Error Number/Message: " + error + " / " + message);
      if (error != 0) {
        throw new ServiceFailedException(message);
      }
    } finally {
      close(cstmt, null);
    }
    logger.debug("Calling insertDataProcessingGroups() finished!");
  }

  // //*===========================================================================*/
  // //* Name : getProcMonth */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ ----------------------------------------*/
  // //* DC Bartlett March 17, 2005 Initial Spec */
  // //*===========================================================================*/
  //
  // /**
  // * <p>
  // * Gets the Current Processing Month for the given residency type
  // * </p>
  // *
  // * @throws SQLException
  // *
  // */
  // public String getProcMonth(String resType) throws ServiceFailedException {
  // logger.debug("Calling getProcMonth() started!");
  //
  // long error = -1;
  // String message = null;
  // String procMonth = null;
  // HoopcStoredProcedure cstmt = null;
  // String sql = "{call HOOPC2_MONTHEND.GETPROCESSINGMONTH(?,?,?,?,?,?)}";
  //
  // logger.debug("ResidencyType: " + resType);
  // logger.debug("Session Id: " + sessionId);
  //
  // cstmt = getHoopcStoredProcedure(sql, 2, 3, 5, 6);
  // try {
  // cstmt.setString(1, resType);
  // cstmt.registerOutParameter(4, Types.VARCHAR);
  // cstmt.execute();
  // error = cstmt.getInt(5);
  // message = cstmt.getString(6);
  // logger.info("Error Number/Message: " + error + " / " + message);
  // if (error != 0) {
  // throw new ServiceFailedException(message);
  // } else {
  // procMonth = cstmt.getString(4);
  // }
  // } finally {
  // close(cstmt, null);
  // }
  // logger.debug("Calling getProcMonth() finished!");
  //
  // return procMonth;
  // }
  //
  // private void logClaimError(
  // String activity_type,
  // int error_type,
  // int line_num,
  // String user_id,
  // int search_id,
  // int row_num,
  // Claim claim,
  // String valid_str)
  // throws ServiceFailedException {
  // try {
  // ClaimError error = new ClaimError();
  // error.setPackageName("moh.hoopc.services.ClaimDataService");
  // if (C.equals(activity_type)) {
  // error.setRoutineName("createClaim");
  // } else {
  // error.setRoutineName("saveClaim");
  // }
  // error.setMsgPoint(line_num);
  // error.setMsgLevel(1);
  // error.setActivityType(activity_type);
  // error.setUserId(user_id);
  // error.setErrorType("CLAIM");
  // error.setSearchId(search_id);
  // error.setSearchRowNum(row_num);
  // if (error_type == E45_CON_ERR) {
  // error.setP1(
  // "Unable to establish connection with Java Message Broker or connection times out. E45
  // validation process has failed.");
  // } else if (error_type == R03_CON_ERR) {
  // error.setP1(
  // "Unable to establish connection with Java Message Broker or connection times out. R03
  // validation process has failed.");
  // } else if (error_type == E45_ERR) {
  // SimpleDateFormat format
  // = new SimpleDateFormat("yyyyMMdd");
  // String reason = E45.getE45(claim).getMSAText();
  // if (reason != null && reason.equals("BIRTHDATES DO NOT MATCH")) {
  // error.setP1("The supplied birthdate '"
  // + format.format(claim.getBirthDate())
  // + "' does not match with ministry birthdate.");
  // } else {
  // error.setP1(
  // "Insurance Number '"
  // + claim.getInsuranceNumber()
  // + "' is not eligible for treatment.");
  // }
  // } else if (error_type == E45_ERR_2) {
  // error.setP1(
  // "Insurance Number '"
  // + claim.getInsuranceNumber()
  // + "' is not eligible for treatment.");
  // } else if (error_type == E45_ERR_3) {
  // SimpleDateFormat format
  // = new SimpleDateFormat("yyyyMMdd");
  // error.setP1(
  // "The supplied date of birth '"
  // + format.format(claim.getBirthDate())
  // + "' does not match with ministry date of birth '"
  // + valid_str
  // + "'");
  // } else if (error_type == E45_ERR_4) {
  // SimpleDateFormat format
  // = new SimpleDateFormat("yyyyMMdd");
  // error.setP1(
  // "Coverage for insurance number '"
  // + claim.getInsuranceNumber()
  // + "' is not valid between '"
  // + format.format(claim.getAdmissionDate()) + "' and '"
  // + format.format(claim.getDischargeDate())
  // + "'.");
  // } else if (error_type == R03_ERR_1) {
  // error.setP1(
  // "The supplied city '"
  // + claim.getCity()
  // + "' does not match with ministry city '"
  // + valid_str
  // + "'");
  // } else if (error_type == R03_ERR_2) {
  // error.setP1(
  // "The supplied postal code '"
  // + claim.getPostalCode()
  // + "' does not match with ministry postal code '"
  // + valid_str
  // + "'");
  // } else if (error_type == R03_ERR_3) {
  // error.setP1(
  // "The supplied first name '"
  // + claim.getFirstName()
  // + "' does not match with ministry first name '"
  // + valid_str
  // + "'");
  // } else if (error_type == R03_ERR_4) {
  // error.setP1(
  // "The supplied last name '"
  // + claim.getLastName()
  // + "' does not match with ministry last name '"
  // + valid_str
  // + "'");
  // }
  // new DAOFactory(this.con).getLogClaimErrorDAO().createError(error);
  // } catch (CreateException ex) {
  // throw new ServiceFailedException(ex.getMessage(), ex);
  // }
  // }
  //
  // //*===========================================================================*/
  // //* Name : deleteClaim */
  // //* History: */
  // //* Developer Date Description */
  // //* --------- ------------ ----------------------------------------*/
  // //* Ron Merner June 06, 2005 Initial Spec */
  // //*===========================================================================*/
  // public void deleteClaim(
  // int searchId,
  // int recordNumber)
  // throws ServiceFailedException {
  // long error = -1;
  // String message = null;
  // String sql = "{call HOOPC2_CLAIMS.DeleteClaim(?,?,?,?,?,?)}";
  // HoopcStoredProcedure sp = null;
  // try {
  // sp = getHoopcStoredProcedure(sql, 3, 4, 5, 6);
  // sp.setInt(1, searchId);
  // sp.setInt(2, recordNumber);
  // sp.execute();
  // error = sp.getInt(5);
  // message = sp.getString(6);
  //
  // logger.info("Error Number/Message: " + error + " / " + message);
  // if (error != 0) {
  // throw new ServiceFailedException(message);
  // }
  // } finally {
  // close(sp, null);
  // }
  // }
  //
  /**
   * @param detailRec
   * @return
   */
  public SADetailRecord createSADetRec(SADetailRecord detailRec)
      // TODO Auto-generated method stub
      throws ServiceFailedException {
    int error = -1;
    String message = null;
    int subId = 0;

    String sql =
        "{ call HOOPC2_Staging_Area.insert_submission_records(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";

    HoopcStoredProcedure sp = null;

    try {
      sp = getHoopcStoredProcedure(sql, 43, 44, 45, 46);

      sp.setInt(1, detailRec.getSubId());
      sp.setString(2, detailRec.getPatientBatch());
      sp.setString(3, detailRec.getRecordType2());
      sp.setString(4, detailRec.getHospitalNumber());
      sp.setString(5, detailRec.getHospitalName());
      sp.setString(6, detailRec.getInsuranceCardNumber());
      sp.setString(7, detailRec.getInsuranceCardExpiryDate());
      sp.setString(8, detailRec.getLastName());
      sp.setString(9, detailRec.getFirstName());
      sp.setString(10, detailRec.getAddress1());
      sp.setString(11, detailRec.getAddress2());
      sp.setString(12, detailRec.getCity());
      sp.setString(13, detailRec.getProvince());
      sp.setString(14, detailRec.getPostalCode());
      sp.setString(15, detailRec.getBirthDate());
      sp.setString(16, detailRec.getSexCode());
      sp.setString(17, detailRec.getDiagnosCode1());
      sp.setString(18, detailRec.getDiagnosCode2());
      sp.setString(19, detailRec.getDiagnosCode3());
      sp.setString(20, detailRec.getProcedureCode1());
      sp.setString(21, detailRec.getProcedureCode2());
      sp.setString(22, detailRec.getProcedureCode3());
      sp.setString(23, detailRec.getHighCostProcedureCode1());
      sp.setString(26, detailRec.getHighCostProcedureDate1());
      sp.setString(24, detailRec.getHighCostProcedureCode2());
      sp.setString(27, detailRec.getHighCostProcedureDate2());
      sp.setString(25, detailRec.getHighCostProcedureCode3());
      sp.setString(28, detailRec.getHighCostProcedureDate3());
      sp.setString(29, detailRec.getAdmissionDate());
      sp.setString(30, detailRec.getDischargeDate());
      sp.setString(31, detailRec.getTotalDaysStay());
      sp.setString(32, detailRec.getPerDiemRate());
      sp.setString(33, detailRec.getTotalAmountClaimed());
      sp.setString(34, detailRec.getDeceasedFlag());
      sp.setString(35, detailRec.getLongTermStayInd());
      sp.setString(36, detailRec.getAccidentInd());
      sp.setString(37, detailRec.getAccidentCode());
      sp.setString(38, detailRec.getProvincialClaimId());
      sp.setString(39, detailRec.getAdjFlag());
      sp.setString(40, detailRec.getNotes());
      sp.setString(41, detailRec.getServiceCode());
      sp.setString(42, detailRec.getServiceDate());

      sp.execute();

      error = sp.getInt(45);
      message = sp.getString(46);
      logger.info("Error Number/Message: " + error + " / " + message);
      if (error != 0) {
        throw new ServiceFailedException(message);
      }

    } finally {
      close(sp, null);
    }

    return null;
  }

  /**
   * @param headerRec
   * @return
   */
  public int createSAHeadRec(SAHeaderRecord headerRec)
      // TODO Auto-generated method stub
      throws ServiceFailedException {
    int error = -1;
    String message = null;
    int subId = 0;

    String sql = "{ call HOOPC2_Staging_Area.insert_header_record(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)}";

    HoopcStoredProcedure sp = null;
    try {
      sp = getHoopcStoredProcedure(sql, 12, 13, 14, 15);
      sp.registerOutParameter(1, Types.INTEGER);
      sp.setString(2, headerRec.getRecordType());
      sp.setString(3, headerRec.getTreatingProvince());
      sp.setString(4, headerRec.getReceivingProvince());
      sp.setString(5, headerRec.getBillingPeriod());
      sp.setString(6, headerRec.getTotalNumberDetails());
      sp.setString(7, headerRec.getTotalNumberDetails());
      sp.setString(8, headerRec.getTotalAmount());
      sp.setString(9, headerRec.getVersionIdentifier());
      sp.setString(10, headerRec.getDateSubmitted());
      sp.setString(11, headerRec.getImportFileName());

      sp.execute();

      subId = sp.getInt(1);
      error = sp.getInt(14);
      message = sp.getString(15);
      logger.info("Error Number/Message: " + error + " / " + message);
      if (error != 0) {
        throw new ServiceFailedException(message);
      }

    } finally {
      close(sp, null);
    }
    return subId;
  }

  /**
   * @param subId
   * @return error
   */
  public int runValidations(int subId, String fileName) throws ServiceFailedException {
    String sql = "{ call HOOPC2_Staging_Area.main_process_V1(?, ?, ?, ?, ?, ?) }";
    HoopcStoredProcedure sp = null;
    ResultSet rs = null;

    int error = -1;
    String message = null;

    try {
      sp = getHoopcStoredProcedure(sql, 3, 4, 5, 6);
      sp.setString(1, fileName);
      sp.setInt(2, subId);
      sp.execute();

      error = sp.getInt(5);
      message = sp.getString(6);
      logger.info("Error Number/Message: " + error + " / " + message);
      if (error != 0) {
        throw new ServiceFailedException(message);
      }

    } finally {
      close(sp, null);
    }
    return error;
  }

  /**
   * @param province
   * @return
   */
  public List getApprovedSubmissions(String province) throws ServiceFailedException {

    String sql = "{ call HOOPC2_Staging_Area.get_approved_submissions(?, ?, ?, ?, ?, ?) }";
    HoopcStoredProcedure sp = null;
    ResultSet rs = null;

    List approvedSub = new ArrayList();

    try {
      sp = getHoopcStoredProcedure(sql, 2, 3, 5, 6);
      sp.setString(1, province);

      sp.registerOutParameter(4, OracleTypes.CURSOR);
      sp.execute();

      rs = (ResultSet) sp.getObject(4);

      try {
        while (rs.next()) {
          int subId = rs.getInt(1);
          approvedSub.add(new Integer(subId));
        }
      } catch (SQLException e) {
        throw new ServiceFailedException(e);
      }
    } finally {
      close(sp, rs);
    }

    return approvedSub;
  }

  /**
   * @param subId
   * @return
   */
  public List getDetailsList(int subId) throws ServiceFailedException {
    String sql = "{ call HOOPC2_Staging_Area.get_approved_details(?, ?, ?, ?, ?, ?) }";
    HoopcStoredProcedure sp = null;
    ResultSet rs = null;

    List detailList = new ArrayList();

    try {
      sp = getHoopcStoredProcedure(sql, 2, 3, 5, 6);
      sp.setInt(1, subId);

      sp.registerOutParameter(4, OracleTypes.CURSOR);
      sp.execute();
      rs = (ResultSet) sp.getObject(4);
      try {
        while (rs.next()) {
          SADetailRecord detail = new SADetailRecord();

          detail.setSubId(rs.getInt(2));
          detail.setPatientBatch(rs.getString(3));
          detail.setRecordType2(rs.getString(4));
          detail.setHospitalNumber(rs.getString(5));
          detail.setHospitalName(rs.getString(6));
          detail.setTreatingProvince(rs.getString(7));
          detail.setInsuranceCardNumber(rs.getString(8));
          detail.setInsuranceCardExpiryDate(rs.getString(9));
          detail.setLastName(rs.getString(10));
          detail.setFirstName(rs.getString(11));
          detail.setAddress1(rs.getString(12));
          detail.setAddress2(rs.getString(13));
          detail.setCity(rs.getString(14));
          detail.setProvince(rs.getString(15));
          detail.setPostalCode(rs.getString(16));
          detail.setBirthDate(rs.getString(17));
          detail.setSexCode(rs.getString(18));
          detail.setDiagnosCode1(rs.getString(19));
          detail.setDiagnosCode2(rs.getString(20));
          detail.setDiagnosCode3(rs.getString(21));
          detail.setProcedureCode1(rs.getString(22));
          detail.setProcedureCode2(rs.getString(23));
          detail.setProcedureCode3(rs.getString(24));
          detail.setHighCostProcedureCode1(rs.getString(25));
          detail.setHighCostProcedureDate1(rs.getString(26));
          detail.setHighCostProcedureCode2(rs.getString(27));
          detail.setHighCostProcedureDate2(rs.getString(28));
          detail.setHighCostProcedureCode3(rs.getString(29));
          detail.setHighCostProcedureDate3(rs.getString(30));
          detail.setAdmissionDate(rs.getString(31));
          detail.setDischargeDate(rs.getString(32));
          detail.setTotalDaysStay(rs.getString(33));
          detail.setPerDiemRate(rs.getString(34));
          detail.setTotalAmountClaimed(rs.getString(35));
          detail.setDeceasedFlag(rs.getString(36));
          detail.setAccidentInd(rs.getString(37));
          detail.setAccidentCode(rs.getString(38));
          detail.setProvincialClaimId(rs.getString(39));
          detail.setAdjFlag(rs.getString(40));
          detail.setNotes(rs.getString(41));
          detail.setServiceCode(rs.getString(42));
          detail.setServiceDate(rs.getString(43));
          detail.setLongTermStayInd(rs.getString(44));
          detailList.add(detail);
        }
      } catch (SQLException e) {
        throw new ServiceFailedException(e);
      }
    } finally {
      close(sp, rs);
    }

    return detailList;
  }

  /**
   * @param i
   * @return
   */
  public SAHeaderRecord getApprovedHeader(int subId) throws ServiceFailedException {

    String sql = "{ call HOOPC2_Staging_Area.get_approved_header(?, ?, ?, ?, ?, ?) }";
    HoopcStoredProcedure sp = null;
    ResultSet rs = null;

    SAHeaderRecord header = new SAHeaderRecord();
    try {
      sp = getHoopcStoredProcedure(sql, 2, 3, 5, 6);
      sp.setInt(1, subId);

      sp.registerOutParameter(4, OracleTypes.CURSOR);
      sp.execute();
      rs = (ResultSet) sp.getObject(4);
      try {
        while (rs.next()) {
          header.setSubId(rs.getInt(1));
          header.setRecordType(rs.getString(2));
          header.setTreatingProvince(rs.getString(3));
          header.setReceivingProvince(rs.getString(4));
          header.setBillingPeriod(rs.getString(5));
          header.setTotalNumberDetails(rs.getString(6));
          header.setTotalAmount(rs.getString(8));
          header.setVersionIdentifier(rs.getString(10));
          header.setDateSubmitted(rs.getString(11));
          header.setImportFileName(rs.getString(16));
        }
      } catch (SQLException e) {
        throw new ServiceFailedException(e);
      }
    } finally {
      close(sp, rs);
    }

    return header;
  }

  /** @param subId */
  public void cleanupStagingArea(int subId, String cleanType) throws ServiceFailedException {
    String sql = "{ call HOOPC2_Staging_Area.cleanup_staging_area(?, ?, ?, ?, ?, ?) }";
    HoopcStoredProcedure sp = null;
    ResultSet rs = null;

    try {
      sp = getHoopcStoredProcedure(sql, 3, 4, 5, 6);
      sp.setInt(1, subId);
      sp.setString(2, cleanType);
      sp.execute();

    } finally {
      close(sp, rs);
    }
  }

  /**
   * @param province
   * @return
   */
  public List getRejectedSubmissions(String province) throws ServiceFailedException {

    String sql = "{ call HOOPC2_Staging_Area.get_rejected_submissions(?, ?, ?, ?, ?, ?) }";
    HoopcStoredProcedure sp = null;
    ResultSet rs = null;

    List rejectedSubs = new ArrayList();

    try {
      sp = getHoopcStoredProcedure(sql, 2, 3, 5, 6);
      sp.setString(1, province);

      sp.registerOutParameter(4, OracleTypes.CURSOR);
      sp.execute();

      rs = (ResultSet) sp.getObject(4);

      try {
        while (rs.next()) {
          SAHeaderRecord rejHeader = new SAHeaderRecord();
          rejHeader.setSubId(rs.getInt(1));
          rejHeader.setImportFileName(rs.getString(2));
          rejectedSubs.add(rejHeader);
        }
      } catch (SQLException e) {
        throw new ServiceFailedException(e);
      }
    } finally {
      close(sp, rs);
    }

    return rejectedSubs;
  }

  /**
   * @param subId
   * @return
   */
  public List getRejectReport(int subId) throws ServiceFailedException {
    String sql = "{ call HOOPC2_Staging_Area.get_rejected_report(?, ?, ?, ?, ?, ?) }";
    HoopcStoredProcedure sp = null;
    ResultSet rs = null;

    List rejReport = new ArrayList();

    try {
      sp = getHoopcStoredProcedure(sql, 2, 3, 5, 6);
      sp.setInt(1, subId);

      sp.registerOutParameter(4, OracleTypes.CURSOR);
      sp.execute();
      rs = (ResultSet) sp.getObject(4);
      try {
        while (rs.next()) {
          SARejectReport error = new SARejectReport();

          error.setPhn(rs.getString(1));
          error.setValidationCode(rs.getString(2));
          error.setValidationMess(rs.getString(3));
          error.setSubId(rs.getInt(4));

          rejReport.add(error);
        }
      } catch (SQLException e) {
        throw new ServiceFailedException(e);
      }
    } finally {
      close(sp, rs);
    }

    return rejReport;
  }
}
