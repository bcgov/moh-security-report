/**
 * ****************************************************************************** Licensed Materials
 * - Property of IBM * Copyright IBM Canada Ltd 2005 All Rights Reserved * Created on Feb 25, 2005 *
 * ****************************************************************************** Please do not
 * makes any changes to this file without first * updating the revision history below, under
 * description * please include Harvest Change Request or PSO Tools CR that * caused the change. *
 * ****************************************************************************** Revision History:
 * * * Date Name Description * ---------- ----------------
 * --------------------------------------------- * 03-09-2005 David Bartlett Modified: Added two new
 * fields: import * filename and import rownum) * 04-12-2005 David Bartlett Modified: Passed in a
 * decimal formatter to the* the perDiemRate and totalAmountClaimed getters* and modified calls to
 * insert/update adjustment* request/decisions to new claimDS methods that * sets things up for
 * rules validation. * 04-20-2005 David Bartlett Modified: Let oracle check status of claim * when
 * inserting an adjustment. Modifed gets * that return a string version of per diem rate * and total
 * amount claimed for the adjustment * pages to return null if they are null. * 06-07-2005 Ron
 * Merner Modified: Added isEditable() method. * 06-15-2005 Ron Merner Modified: Added PENDING to
 * isEditable(). * 10-03-2005 Ron Merner Modified: Modified saveAdjustmentRequest(). * 10-07-2005
 * C.Stepanov Modified: Modified saveAdjustmentRequest() * and saveAdjustmentDecision * 01-04-2006
 * Ron Merner Modified: Added VOID to Status and added the * isLocked() method. *
 * ******************************************************************************
 */
package moh.hoopc.app;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import moh.hoopc.services.ClaimDataService;
import moh.hoopc.services.util.ServiceFailedException;
import org.apache.log4j.Logger;

public abstract class Claim implements Patient {
  private Logger logger = Logger.getLogger(Claim.class);

  // misc fields common to all claims
  private int searchId,
      recordNumber,
      lockId,
      lockIdPatient,
      lockIdAdmissionInfo,
      lockIdHighCost1,
      lockIdHighCost2,
      lockIdHighCost3,
      sequenceIdHighCost1,
      sequenceIdHighCost2,
      sequenceIdHighCost3,
      lockIdDiagnosis1,
      lockIdDiagnosis2,
      lockIdDiagnosis3,
      sequenceIdDiagnosis1,
      sequenceIdDiagnosis2,
      sequenceIdDiagnosis3,
      lockIdProcedure1,
      lockIdProcedure2,
      lockIdProcedure3,
      sequenceIdProcedure1,
      sequenceIdProcedure2,
      sequenceIdProcedure3,
      importRowNum;

  private Date dischargeDate;
  private String provincialClaimNumber;
  private String hospitalName;
  private String hospitalNumber;
  private String treatingProvince;
  private String longTermFlag;
  private String associatedClaimNumber;
  private String claimSource;
  private Date submissionDate;
  private String notes;
  private Date processedDate;
  private Date billingPeriod;
  private String reviewClaim;
  private String changeNotes;
  private String changeFlag;
  private String changeReason;
  private String serviceCode;
  private Date serviceDate;
  private String accidentCode;
  private String accidentIndicator;
  private String declarationRequest;
  private String declarationRequestReason;
  private String overrideRequest;
  private String overrideRequestReason;
  private String overrideStatus;
  private String overrideStatusReason;
  private Date submissionDateTo;
  private Date processedDateTo;
  private String diagnosis1;
  private String diagnosis2;
  private String diagnosis3;
  private String procedure1;
  private String procedure2;
  private String procedure3;
  private String codingScheme;
  private Double perDiemRate;
  private String highCost1Code;
  private String highCost2Code;
  private String highCost3Code;
  private Date highCost1Date;
  private Date highCost2Date;
  private Date highCost3Date;
  private Double highCost1Amount;
  private Double highCost2Amount;
  private Double highCost3Amount;
  private String hospitalClaimNumber;
  private String admissionNumber;
  private String reasonInBC;
  private String importFileName;
  private String userId;
  private String businessOrganization;

  public AdjustmentRequest adjRequest;
  public AdjustmentDecision adjDecision;

  ClaimDataService claimDS;

  // patient fields common to all claims
  private String insuranceNumber;
  private Date insuranceCardExpiryDate;
  private String lastName;
  private String firstName;
  private String address1;
  private String address2;
  private String city;
  private String province;
  private String postalCode;
  private Date birthDate;
  private Date admissionDate;
  private String gender;
  private String deceasedFlag;
  private Double totalAmountClaimed;
  private String status;
  private Integer totalDaysStay;

  int type;

  public interface Types {
    int NonresInpatient = 1;
    int NonresOutpatient = 2;
    int ResInpatient = 3;
    int ResOutpatient = 4;
  }

  public interface Status {
    String LOADED = "LOADED";
    String PENDING = "PENDING";
    String VALID = "VALID";
    String INVALID = "INVALID";
    String PROCESSED = "PROCESSED";
    String ADJUST_REQ = "ADJUST_REQ";
    String ADJUST_APP = "ADJUST_APP";
    String VOID = "VOID";
  }

  public static class Error {
    String type;
    String text;

    public Error(String type, String text) {
      this.type = type;
      this.text = text;
    }

    public String getType() {
      return type;
    }

    public String getText() {
      return text;
    }
  }

  List errors = new ArrayList();

  public Claim(int type, ClaimDataService claimDS) {
    this.type = type;
    this.claimDS = claimDS;
  }

  public Claim() {}

  public abstract Claim create() throws ServiceFailedException;

  public abstract Claim save() throws ServiceFailedException;

  public abstract Claim delete() throws ServiceFailedException;

  public String toString() {
    return "Claim#" + searchId + "/" + recordNumber;
  }

  /*
   * saves/updates adjRequest to this claim, makes sure that adjRequest is suitable for saving/updating
   *
   * BDR-5.6.3.4.1
   */
  // *===========================================================================*/
  // * Name    : saveAdjustmentRequest                                            */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   April 12 2005     Modified to call new claimsDS methods   */
  // *                                   when inserting/updating requests that   */
  // *                                   will ensure the rules setup step is     */
  // *                                   performed (otherwise UNDEFINED error    */
  // *                                   messages are generated).                */
  // *   DC Bartlett   April 20 2005     Modified to not check the claim status. */
  // *                                   Let the Oracle back end do it instead.  */
  // *   Ron Merner    Oct 03, 2005      Added validation of date requested      */
  // *                                   against date of service.                */
  // *   C.Stepanov    Oct 07, 2005      Corrected the validation for the        */
  // *                                   adjustment requests reasons             */
  // *===========================================================================*/
  public void saveAdjustmentRequest(AdjustmentRequest adjR)
      throws ServiceFailedException, ClaimFormatException {

    if (adjR.getRequestedDate() == null || "".equals(adjR.getRequestedDate()))
      throw new ClaimFormatException("Date Requested is a required field");
    if (!(adjR.getRequestedDate().after(adjR.getServiceDate())))
      throw new ClaimFormatException("Date Requested is not after date of service");
    if (adjR.getAmount() == null || "".equals(adjR.getAmount()))
      throw new ClaimFormatException("Request Amount is a required field");
    if (totalAmountClaimed == null)
      throw new ClaimFormatException("Total Amount Claimed is a required field");
    if (adjR.getAmount().doubleValue() > totalAmountClaimed.doubleValue())
      throw new ClaimFormatException(
          "Request Amount must be equal to, or less than total claim amount.");
    if (adjR.getAmount().doubleValue() < 0)
      throw new ClaimFormatException("Request Amount must be a positive value.");
    if (adjR.getSource() == null || adjR.getSource().equals(""))
      throw new ClaimFormatException("Request Source is required");
    if ((adjR.getReason1() == null
            && adjR.getReason2() == null
            && adjR.getReason3() == null
            && adjR.getReason4() == null)
        || (adjR.getReason1().equals("")
            && adjR.getReason2().equals("")
            && adjR.getReason3().equals("")
            && adjR.getReason4().equals("")))
      throw new ClaimFormatException("At least one reason is required");

    if (this.adjRequest == null) {
      //			if(!status.equals(Status.PENDING) && !status.equals(Status.PROCESSED)) {
      //				String m = "Claim status must be PROCESSED or PENDING to add an adjustment request";
      //				throw new ClaimFormatException(m);
      //			}
      if (this.adjDecision != null)
        throw new ClaimFormatException(
            "Cannot add an adjustment request when an adjustment decision exists");
      logger.debug("creating new adjustment request for claim " + searchId + "/" + recordNumber);
      claimDS.createAdjRqst(this, adjR);

      // set adjustment status to ADJUST_REQUIRED !!!how?
    } else {
      claimDS.updateAdjRqst(this, adjR);
    }

    // update this claim objects adjRequest
    this.adjRequest = claimDS.getAdjustmentRequest(searchId, recordNumber);
  }

  // *===========================================================================*/
  // * Name    : saveAdjustmentDecision                                          */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   April 12 2005     Modified to call new claimsDS methods   */
  // *                                   when inserting/updating decisons that   */
  // *                                   will ensure the rules setup step is     */
  // *                                   performed (otherwise UNDEFINED error    */
  // *                                   messages are generated).                */
  // *===========================================================================*/
  public void saveAdjustmentDecision(AdjustmentDecision adjD)
      throws ClaimFormatException, ServiceFailedException {
    if (adjD.getReason1().equals("")
        && adjD.getReason2().equals("")
        && adjD.getReason3().equals("")
        && adjD.getReason4().equals(""))
      throw new ClaimFormatException("At least one reason is required");

    if (adjD.getProcessedDate() == null)
      throw new ClaimFormatException("Date Processed is a required field");

    if (adjD.getAmount() == null) throw new ClaimFormatException("Decision Amount is required");
    if (adjD.getAmount().doubleValue() > totalAmountClaimed.doubleValue())
      throw new ClaimFormatException(
          "Decision Amount must be equal to, or less than total claim amount.");
    if (adjD.getAmount().doubleValue() < 0)
      throw new ClaimFormatException("Decision Amount must be a positive value.");
    if (adjD.getStatus().equals("")) throw new ClaimFormatException("Decision Status is required");

    // If the claim is a non-resident claim, validate that a request exists
    if (getType() == 1 || getType() == 2) {
      if (adjRequest == null)
        throw new ClaimFormatException(
            "An adjustment decision requires an adjustment request for non-resident claims.");
    }

    if (this.adjDecision == null) {
      claimDS.createAdjDec(this, searchId, recordNumber, adjD);
    } else {
      claimDS.updateAdjDec(this, searchId, recordNumber, adjD);
    }

    //	update this claim objects adjRequest
    this.adjDecision = claimDS.getAdjustmentDecision(searchId, recordNumber);
  }

  // *===========================================================================*/
  // * Name    : deleteAdjustmentRequest                                          */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   April 20 2005     Modified to call new claimsDS methods   */
  // *                                   when deleteing requests that will ensure*/
  // *                                   the rules setup step is performed       */
  // *                                   (otherwise UNDEFINED error messages are */
  // *                                   generated).                             */
  // *===========================================================================*/
  public void deleteAdjustmentRequest() throws ServiceFailedException, ClaimFormatException {
    if (adjDecision != null)
      throw new ClaimFormatException(
          "Cannot delete an adjustment request if an adjustment decision exists.");
    if (this.adjRequest == null) throw new ClaimFormatException("No adjustment request to delete");
    claimDS.deleteAdjRqst(this, searchId, recordNumber, adjRequest);
    this.adjRequest = null;
  }

  // *===========================================================================*/
  // * Name    : deleteAdjustmentDecision                                        */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   April 20 2005     Modified to call new claimsDS methods   */
  // *                                   when deleteing decisions that will      */
  // *                                   ensure the rules setup step is performed */
  // *                                   (otherwise UNDEFINED error messages are */
  // *                                   generated).                             */
  // *===========================================================================*/
  public void deleteAdjustmentDecision() throws ServiceFailedException, ClaimFormatException {
    if (this.adjDecision == null)
      throw new ClaimFormatException("No adjustment decision to delete");
    claimDS.deleteAdjDec(this, searchId, recordNumber, adjDecision);
    this.adjDecision = null;
  }

  /*
   * save and possibly process adjustments. does all format checking
   */
  public void saveAdjustments(AdjustmentRequest adjR, AdjustmentDecision adjD)
      throws ServiceFailedException, ClaimFormatException {
    // if any adj request field is in there, try and save
    if (adjR.getRequestedDate() != null
        || !adjR.getSource().equals("")
        || adjR.getAmount() != null
        || !adjR.getReason1().equals("")
        || !adjR.getReason2().equals("")
        || !adjR.getReason3().equals("")
        || !adjR.getReason4().equals("")) {
      try {
        saveAdjustmentRequest(adjR);
      } catch (ClaimFormatException e) {
        throw new ClaimFormatException("Error while saving Adjustment Request: " + e.getMessage());
      }
    }

    // if any adj decision field is in there, try and save
    if (adjD.getProcessedDate() != null
        || adjD.getStatus() != null
        || adjD.getAmount() != null
        || !adjD.getReason1().equals("")
        || !adjD.getReason2().equals("")
        || !adjD.getReason3().equals("")
        || !adjD.getReason4().equals("")) {
      try {
        saveAdjustmentDecision(adjD);
      } catch (ClaimFormatException e) {
        throw new ClaimFormatException("Error while saving Adjustment Decision: " + e.getMessage());
      }
    }
  }

  public void saveAdjustmentsRequest(AdjustmentRequest adjR)
      throws ServiceFailedException, ClaimFormatException {
    // if any adj request field is in there, try and save
    if (adjR.getRequestedDate() != null
        || !adjR.getSource().equals("")
        || adjR.getAmount() != null
        || !adjR.getReason1().equals("")
        || !adjR.getReason2().equals("")
        || !adjR.getReason3().equals("")
        || !adjR.getReason4().equals("")) {
      try {
        saveAdjustmentRequest(adjR);
      } catch (ClaimFormatException e) {
        throw new ClaimFormatException("Error while saving Adjustment Request: " + e.getMessage());
      }
    }
  }

  public void saveAdjustmentsDecision(AdjustmentDecision adjD)
      throws ServiceFailedException, ClaimFormatException {
    // if any adj decision field is in there, try and save
    if (adjD.getProcessedDate() != null
        || adjD.getStatus() != null
        || adjD.getAmount() != null
        || !adjD.getReason1().equals("")
        || !adjD.getReason2().equals("")
        || !adjD.getReason3().equals("")
        || !adjD.getReason4().equals("")) {
      try {
        saveAdjustmentDecision(adjD);
      } catch (ClaimFormatException e) {
        throw new ClaimFormatException("Error while saving Adjustment Decision: " + e.getMessage());
      }
    }
  }

  public boolean hasErrors() {
    return errors.size() == 0 ? false : true;
  }

  public void setErrors(List errors) {
    this.errors = errors;
  }

  public List getErrors() {
    return errors;
  }

  public int getSearchId() {
    return searchId;
  }

  public int getRecordNumber() {
    return recordNumber;
  }

  public int getLockIdPatient() {
    return lockIdPatient;
  }

  public void setLockIdPatient(int i) {
    lockIdPatient = i;
  }

  public String getAddress1() {
    return address1;
  }

  public String getAddress2() {
    return address2;
  }

  public Date getBirthDate() {
    return birthDate;
  }

  public String getCity() {
    return city;
  }

  public String getFirstName() {
    return firstName;
  }

  public String getGender() {
    return gender;
  }

  public Date getInsuranceCardExpiryDate() {
    return insuranceCardExpiryDate;
  }

  public String getInsuranceNumber() {
    return insuranceNumber;
  }

  public String getLastName() {
    return lastName;
  }

  public String getPostalCode() {
    return postalCode;
  }

  public String getProvince() {
    return province;
  }

  public void setAddress1(String string) {
    address1 = string;
  }

  public void setAddress2(String string) {
    address2 = string;
  }

  public void setBirthDate(Date d) {
    birthDate = d;
  }

  public void setCity(String string) {
    city = string;
  }

  public void setFirstName(String string) {
    firstName = string;
  }

  public void setGender(String string) {
    gender = string;
  }

  public void setInsuranceCardExpiryDate(Date d) {
    insuranceCardExpiryDate = d;
  }

  public void setInsuranceNumber(String string) {
    insuranceNumber = string;
  }

  public void setLastName(String string) {
    lastName = string;
  }

  public void setPostalCode(String string) {
    postalCode = string;
  }

  public void setProvince(String string) {
    province = string;
  }

  public int getLockId() {
    return lockId;
  }

  public void setLockId(int i) {
    lockId = i;
  }

  public void setRecordNumber(int i) {
    recordNumber = i;
  }

  public void setSearchId(int i) {
    searchId = i;
  }

  public String getDeceasedFlag() {
    return deceasedFlag;
  }

  public void setDeceasedFlag(String string) {
    deceasedFlag = string;
  }

  public Double getTotalAmountClaimed() {
    return totalAmountClaimed;
  }
  // *===========================================================================*/
  // * Name    : getTotalAmountClaimed                                           */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   April 12 2005     Modified to apply a decimal pattern to  */
  // *                                   the double data type.                   */
  // *   DC Bartlett   April 20 2005     Modified to return a null if there is no*/
  // *                                   total amount claimed.                   */
  // *===========================================================================*/
  public String getTotalAmountClaimed(String decFormat) {

    if (totalAmountClaimed != null) {
      NumberFormat f = NumberFormat.getNumberInstance();
      if (f instanceof DecimalFormat) {
        ((DecimalFormat) f).applyPattern(decFormat);
      }
      return f.format(totalAmountClaimed);
    } else return (null);
  }

  public void setTotalAmountClaimed(Double d) {
    totalAmountClaimed = d;
  }

  public int getType() {
    return type;
  }

  public String getStatus() {
    return status;
  }

  public void setStatus(String string) {
    status = string;
  }

  public String getProvincialClaimNumber() {
    return provincialClaimNumber;
  }

  public void setProvincialClaimNumber(String string) {
    provincialClaimNumber = string;
  }

  public String getHospitalName() {
    return hospitalName;
  }

  public void setHospitalNameAndNumber(String hospital) {
    if (hospital == null || hospital.equals("")) return;
    if (!hospital.matches("^[0-9]+-.*"))
      throw new RuntimeException("hospital must be in the format: nnn-name (is: " + hospital + ")");
    int dash = hospital.indexOf('-');
    hospitalNumber = hospital.substring(0, dash);
    hospitalName = hospital.substring(dash + 1);
  }

  public String getHospital() {
    if (hospitalName == null || hospitalName.equals("")) {
      return hospitalNumber;
    } else {
      return hospitalNumber + "-" + hospitalName;
    }
  }

  public String getHospitalNumber() {
    return hospitalNumber;
  }

  public String getLongTermFlag() {
    return longTermFlag;
  }

  public String getTreatingProvince() {
    return treatingProvince;
  }

  public void setHospitalName(String string) {
    hospitalName = string;
  }

  public void setHospitalNumber(String string) {
    hospitalNumber = string;
  }

  public void setLongTermFlag(String string) {
    longTermFlag = string;
  }

  public void setTreatingProvince(String string) {
    treatingProvince = string;
  }

  public String getAssociatedClaimNumber() {
    return associatedClaimNumber;
  }

  public String getClaimSource() {
    return claimSource;
  }

  public Date getSubmissionDate() {
    return submissionDate;
  }

  public void setAssociatedClaimNumber(String string) {
    associatedClaimNumber = string;
  }

  public void setClaimSource(String string) {
    claimSource = string;
  }

  public void setSubmissionDate(Date date) {
    submissionDate = date;
  }

  public String getAccidentCode() {
    return accidentCode;
  }

  public String getAccidentIndicator() {
    return accidentIndicator;
  }

  public Date getBillingPeriod() {
    return billingPeriod;
  }

  public String getChangeFlag() {
    return changeFlag;
  }

  public String getChangeNotes() {
    return changeNotes;
  }

  public String getChangeReason() {
    return changeReason;
  }

  public String getDeclarationRequest() {
    return declarationRequest;
  }

  public String getDeclarationRequestReason() {
    return declarationRequestReason;
  }

  public String getNotes() {
    return notes;
  }

  public Date getProcessedDate() {
    return processedDate;
  }

  public String getReviewClaim() {
    return reviewClaim;
  }

  public String getServiceCode() {
    return serviceCode;
  }

  public Date getServiceDate() {
    return serviceDate;
  }

  public void setAccidentCode(String string) {
    accidentCode = string;
  }

  public void setAccidentIndicator(String string) {
    accidentIndicator = string;
  }

  public void setBillingPeriod(Date date) {
    billingPeriod = date;
  }

  public void setChangeFlag(String string) {
    changeFlag = string;
  }

  public void setChangeNotes(String string) {
    changeNotes = string;
  }

  public void setChangeReason(String string) {
    changeReason = string;
  }

  public void setDeclarationRequest(String string) {
    declarationRequest = string;
  }

  public void setDeclarationRequestReason(String string) {
    declarationRequestReason = string;
  }

  public void setNotes(String string) {
    notes = string;
  }

  public void setProcessedDate(Date date) {
    processedDate = date;
  }

  public void setReviewClaim(String string) {
    reviewClaim = string;
  }

  public void setServiceCode(String string) {
    serviceCode = string;
  }

  public void setServiceDate(Date date) {
    serviceDate = date;
  }

  public Date getAdmissionDate() {
    return admissionDate;
  }

  public void setAdmissionDate(Date date) {
    admissionDate = date;
  }

  public String getOverrideRequest() {
    return overrideRequest;
  }

  public String getOverrideRequestReason() {
    return overrideRequestReason;
  }

  public String getOverrideStatus() {
    return overrideStatus;
  }

  public String getOverrideStatusReason() {
    return overrideStatusReason;
  }

  public void setOverrideRequest(String string) {
    overrideRequest = string;
  }

  public void setOverrideRequestReason(String string) {
    overrideRequestReason = string;
  }

  public void setOverrideStatus(String string) {
    overrideStatus = string;
  }

  public void setOverrideStatusReason(String string) {
    overrideStatusReason = string;
  }

  public Date getProcessedDateTo() {
    return processedDateTo;
  }

  public Date getSubmissionDateTo() {
    return submissionDateTo;
  }

  public void setProcessedDateTo(Date date) {
    processedDateTo = date;
  }

  public void setSubmissionDateTo(Date date) {
    submissionDateTo = date;
  }

  public Date getDischargeDate() {
    return dischargeDate;
  }

  public void setDischargeDate(Date date) {
    dischargeDate = date;
  }

  public String getDiagnosis1() {
    return diagnosis1;
  }

  public String getDiagnosis2() {
    return diagnosis2;
  }

  public String getDiagnosis3() {
    return diagnosis3;
  }

  public Double getHighCost1Amount() {
    return highCost1Amount;
  }

  public String getHighCost1Code() {
    return highCost1Code;
  }

  public Date getHighCost1Date() {
    return highCost1Date;
  }

  public Double getHighCost2Amount() {
    return highCost2Amount;
  }

  public String getHighCost2Code() {
    return highCost2Code;
  }

  public Date getHighCost2Date() {
    return highCost2Date;
  }

  public Double getHighCost3Amount() {
    return highCost3Amount;
  }

  public String getHighCost3Code() {
    return highCost3Code;
  }

  public Date getHighCost3Date() {
    return highCost3Date;
  }

  public String getProcedure1() {
    return procedure1;
  }

  public String getProcedure2() {
    return procedure2;
  }

  public String getProcedure3() {
    return procedure3;
  }

  public void setDiagnosis1(String string) {
    diagnosis1 = string;
  }

  public void setDiagnosis2(String string) {
    diagnosis2 = string;
  }

  public void setDiagnosis3(String string) {
    diagnosis3 = string;
  }

  public void setHighCost1Amount(Double double1) {
    highCost1Amount = double1;
  }

  public void setHighCost1Code(String string) {
    highCost1Code = string;
  }

  public void setHighCost1Date(Date date) {
    highCost1Date = date;
  }

  public void setHighCost2Amount(Double double1) {
    highCost2Amount = double1;
  }

  public void setHighCost2Code(String string) {
    highCost2Code = string;
  }

  public void setHighCost2Date(Date date) {
    highCost2Date = date;
  }

  public void setHighCost3Amount(Double double1) {
    highCost3Amount = double1;
  }

  public void setHighCost3Code(String string) {
    highCost3Code = string;
  }

  public void setHighCost3Date(Date date) {
    highCost3Date = date;
  }

  public void setProcedure1(String string) {
    procedure1 = string;
  }

  public void setProcedure2(String string) {
    procedure2 = string;
  }

  public void setProcedure3(String string) {
    procedure3 = string;
  }

  public int getLockIdAdmissionInfo() {
    return lockIdAdmissionInfo;
  }

  public int getLockIdDiagnosis1() {
    return lockIdDiagnosis1;
  }

  public int getLockIdDiagnosis2() {
    return lockIdDiagnosis2;
  }

  public int getLockIdDiagnosis3() {
    return lockIdDiagnosis3;
  }

  public int getLockIdHighCost1() {
    return lockIdHighCost1;
  }

  public int getLockIdHighCost2() {
    return lockIdHighCost2;
  }

  public int getLockIdHighCost3() {
    return lockIdHighCost3;
  }

  public void setLockIdAdmissionInfo(int i) {
    lockIdAdmissionInfo = i;
  }

  public void setLockIdDiagnosis1(int i) {
    lockIdDiagnosis1 = i;
  }

  public void setLockIdDiagnosis2(int i) {
    lockIdDiagnosis2 = i;
  }

  public void setLockIdDiagnosis3(int i) {
    lockIdDiagnosis3 = i;
  }

  public void setLockIdHighCost1(int i) {
    lockIdHighCost1 = i;
  }

  public void setLockIdHighCost2(int i) {
    lockIdHighCost2 = i;
  }

  public void setLockIdHighCost3(int i) {
    lockIdHighCost3 = i;
  }

  public Integer getTotalDaysStay() {
    return totalDaysStay;
  }

  public void setTotalDaysStay(Integer i) {
    totalDaysStay = i;
  }

  public String getCodingScheme() {
    return codingScheme;
  }

  public Double getPerDiemRate() {
    return perDiemRate;
  }

  // *===========================================================================*/
  // * Name    : getPerDiemRate                                                  */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   April 12 2005     Modified to accept a decimal pattern to */
  // *                                   apply to the double double data type.   */
  // *   DC Bartlett   April 20 2005     Modified to return a null if there is no*/
  // *                                   perdiem amount.                         */
  // *===========================================================================*/
  public String getPerDiemRate(String decFormat) {

    if (perDiemRate != null) {
      NumberFormat f = NumberFormat.getNumberInstance();
      if (f instanceof DecimalFormat) {
        ((DecimalFormat) f).applyPattern(decFormat);
      }
      return f.format(perDiemRate);
    } else return (null);
  }

  public void setCodingScheme(String string) {
    codingScheme = string;
  }

  public void setPerDiemRate(Double double1) {
    perDiemRate = double1;
  }

  public String getAdmissionNumber() {
    return admissionNumber;
  }

  public String getHospitalClaimNumber() {
    return hospitalClaimNumber;
  }

  public String getReasonInBC() {
    return reasonInBC;
  }

  public void setAdmissionNumber(String string) {
    admissionNumber = string;
  }

  public void setHospitalClaimNumber(String string) {
    hospitalClaimNumber = string;
  }

  public void setReasonInBC(String string) {
    reasonInBC = string;
  }

  public int getLockIdProcedure1() {
    return lockIdProcedure1;
  }

  public int getLockIdProcedure2() {
    return lockIdProcedure2;
  }

  public int getLockIdProcedure3() {
    return lockIdProcedure3;
  }

  public void setLockIdProcedure1(int i) {
    lockIdProcedure1 = i;
  }

  public void setLockIdProcedure2(int i) {
    lockIdProcedure2 = i;
  }

  public void setLockIdProcedure3(int i) {
    lockIdProcedure3 = i;
  }

  public int getSequenceIdDiagnosis1() {
    return sequenceIdDiagnosis1;
  }

  public int getSequenceIdDiagnosis2() {
    return sequenceIdDiagnosis2;
  }

  public int getSequenceIdDiagnosis3() {
    return sequenceIdDiagnosis3;
  }

  public void setSequenceIdDiagnosis1(int i) {
    sequenceIdDiagnosis1 = i;
  }

  public void setSequenceIdDiagnosis2(int i) {
    sequenceIdDiagnosis2 = i;
  }

  public void setSequenceIdDiagnosis3(int i) {
    sequenceIdDiagnosis3 = i;
  }

  public int getSequenceIdHighCost1() {
    return sequenceIdHighCost1;
  }

  public int getSequenceIdHighCost2() {
    return sequenceIdHighCost2;
  }

  public int getSequenceIdHighCost3() {
    return sequenceIdHighCost3;
  }

  public int getSequenceIdProcedure1() {
    return sequenceIdProcedure1;
  }

  public int getSequenceIdProcedure2() {
    return sequenceIdProcedure2;
  }

  public int getSequenceIdProcedure3() {
    return sequenceIdProcedure3;
  }

  public void setSequenceIdHighCost1(int i) {
    sequenceIdHighCost1 = i;
  }

  public void setSequenceIdHighCost2(int i) {
    sequenceIdHighCost2 = i;
  }

  public void setSequenceIdHighCost3(int i) {
    sequenceIdHighCost3 = i;
  }

  public void setSequenceIdProcedure1(int i) {
    sequenceIdProcedure1 = i;
  }

  public void setSequenceIdProcedure2(int i) {
    sequenceIdProcedure2 = i;
  }

  public void setSequenceIdProcedure3(int i) {
    sequenceIdProcedure3 = i;
  }

  public int getImportRowNum() {
    return importRowNum;
  }

  public void setImportRowNum(int i) {
    importRowNum = i;
  }

  public String getImportFileName() {
    return importFileName;
  }

  public void setImportFileName(String string) {
    importFileName = string;
  }

  /** @return */
  public String getUserId() {
    return userId;
  }

  /** @param string */
  public void setUserId(String string) {
    userId = string;
  }

  /** @return */
  public String getBusinessOrganization() {
    return businessOrganization;
  }

  /** @param string */
  public void setBusinessOrganization(String string) {
    businessOrganization = string;
  }

  // *===========================================================================*/
  // * Name    : isEditable                                                      */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   Ron Merner    June 07, 2005     Initial Spec.                           */
  // *===========================================================================*/
  public boolean isEditable() {
    return (status.equals(Status.VALID)
        || status.equals(Status.INVALID)
        || status.equals(Status.PENDING));
  }

  // *===========================================================================*/
  // * Name    : isLocked                                                        */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   Ron Merner    Jan 04, 2006      Initial Spec.                           */
  // *===========================================================================*/
  public boolean isLocked() {
    return (status.equals(Status.VOID));
  }

  public AdjustmentRequest getAdjRequest() {
    return adjRequest;
  }

  public void setAdjRequest(AdjustmentRequest adjRequest) {
    this.adjRequest = adjRequest;
  }

  public AdjustmentDecision getAdjDecision() {
    return adjDecision;
  }

  public void setAdjDecision(AdjustmentDecision adjDecision) {
    this.adjDecision = adjDecision;
  }
}
