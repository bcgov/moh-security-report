package moh.hoopc.services;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.Properties;
import moh.hoopc.services.input.GetProcedureInfoIn;
import moh.hoopc.services.output.GetProcedureInfoCur;
import moh.hoopc.services.output.GetProcedureInfoOut;
import moh.hoopc.services.util.IErrorText;
import moh.hoopc.services.util.ServiceFailedException;
import moh.hoopc.services.util.ValidationException;
import oracle.jdbc.OracleTypes;

/**
 * @author Eric Bregeon
 * @version 1.0
 * @copyright Licensed Materials - Property of IBM - Copyright IBM Canada Ltd. 2003. All Rights
 *     Reserved
 * @security IBM Confidential
 * @date 06 December 2004
 * @revision Last Revision Name Comments
 * @revision ==========================================================================
 * @revision 06 December 2004 Eric Bregeon Created.
 * @revision 27 April 2005 David Bartlett Modifed: Added coding scheme input parm
 * @see
 */
public class GetProcedureInfo extends DBService implements IErrorText {

  private String HOOPC2_DETAIL_CODES_getProcedureInfo =
      "{ call HOOPC2_DETAIL_CODES.getProcedureInfo(?, ?, ?, ?, ?, ?, ?, ?) }";

  public GetProcedureInfo(GetProcedureInfoIn getProcedureInfoIn, Properties properties) {
    super(getProcedureInfoIn, new GetProcedureInfoOut(), properties);
  }

  public GetProcedureInfo(GetProcedureInfoIn getProcedureInfoIn) {
    super(getProcedureInfoIn, new GetProcedureInfoOut(), null);
  }
  /**
   * validateInput ensures the service has not been passed invalid input. In the case that invalid
   * input has been passed a ValidationException is thrown which is dealt with by the handler
   */
  protected void validateInput() throws ValidationException {
    super.validateInput();
  }

  // *===========================================================================*/
  // * Name    : setOutputBean                                                   */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   April 27, 2005    Modified: Had to adjust position of     */
  // *                                   input parms to accomodate for the new   */
  // *                                   coding scheme input parm.               */
  // *===========================================================================*/
  /**
   * Populates the output object with the returned search results
   *
   * @param cstmt CallableStatement used to run the SQL stored procedure created in
   *     createOracleStatement
   */
  protected void setOutputBean(CallableStatement cstmt)
      throws SQLException, ServiceFailedException {
    // retrieves the output object that is returned to the handler

    GetProcedureInfoOut output = (GetProcedureInfoOut) getOutputBean();

    int resultCode = cstmt.getInt(7);
    ResultSet rs = null;

    // if no oracle error was encoutered,
    if (resultCode == ORACLE_OK) {
      try {
        rs = (ResultSet) cstmt.getObject(6);
        GetProcedureInfoCur getProcedureInfoCur = null;
        while (rs.next()) {

          getProcedureInfoCur = new GetProcedureInfoCur();
          // Creating new output row with the result
          getProcedureInfoCur.setCode(rs.getString(1));
          getProcedureInfoCur.setCodeType(rs.getString(2));
          getProcedureInfoCur.setDescription(rs.getString(3));
          getProcedureInfoCur.setSequenceNum(rs.getInt(4));
          getProcedureInfoCur.setLockSeqNum(rs.getInt(5));

          // Add the new row to the results arraylist.
          output.addProcedureInfoCur(getProcedureInfoCur);
        }
        rs.close();
        rs = null;
      } finally {
        if (rs != null) {
          rs.close();
          rs = null;
        }
      }

    } else {
      throw new ServiceFailedException(Integer.toString(resultCode), cstmt.getString(8));
    }
  }

  // *===========================================================================*/
  // * Name    : createStatement                                                 */
  // * History:                                                                  */
  // *   Developer     Date              Description                             */
  // *   ---------     ------------      ----------------------------------------*/
  // *   DC Bartlett   April 27, 2005    Modified: Added coding scheme input parm*/
  // *===========================================================================*/
  /**
   * Creates and prepares the callable statement that will be executed by the OracleService object
   * that this class inherits from
   *
   * @param cstmt CallableStatement used to run the SQL stored procedure
   * @return cstmt CallableStatement is created here and returned
   */
  protected CallableStatement createStatement(CallableStatement cstmt) throws SQLException {
    GetProcedureInfoIn inputBean = (GetProcedureInfoIn) getInputBean();

    Connection con = inputBean.getConnection();

    cstmt = con.prepareCall(HOOPC2_DETAIL_CODES_getProcedureInfo);

    // set the input params
    cstmt.setInt(1, inputBean.getSearchID());
    cstmt.setInt(2, inputBean.getRecordNumber());
    cstmt.setString(3, inputBean.getCodingScheme());
    cstmt.setString(4, inputBean.getUserId());
    cstmt.setString(5, inputBean.getSessionId());

    // register the output paramters
    cstmt.registerOutParameter(6, OracleTypes.CURSOR);
    cstmt.registerOutParameter(7, Types.NUMERIC);
    cstmt.registerOutParameter(8, Types.VARCHAR);

    return cstmt;
  }
}
