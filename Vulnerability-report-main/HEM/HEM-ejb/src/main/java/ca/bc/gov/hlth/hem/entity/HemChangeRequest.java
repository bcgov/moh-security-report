package ca.bc.gov.hlth.hem.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.transaction.UserTransaction;

@Entity
@Table(name = "HEM_CHANGE_REQ", schema = "hem")
@Getter
@Converter(autoApply = true)
@Setter
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "HemChangeRequest.findAll",
            query = "SELECT h FROM HemChangeRequest h WHERE h.archived = :archived"),
    @NamedQuery(name = "HemChangeRequest.findByChangeReqId",
            query = "SELECT h FROM HemChangeRequest h WHERE h.changeReqId = :changeReqId"),
    @NamedQuery(name = "HemChangeRequest.findByRfcLink",
            query = "SELECT h FROM HemChangeRequest h WHERE h.rfcLink = :rfcLink"),
    @NamedQuery(name = "HemChangeRequest.findByOnDemand",
            query = "SELECT h FROM HemChangeRequest h WHERE h.onDemand = :onDemand"),
    @NamedQuery(name = "HemChangeRequest.findByStartDate",
            query = "SELECT h FROM HemChangeRequest h WHERE h.startDate = :startDate"),
    @NamedQuery(name = "HemChangeRequest.findByEndDate",
            query = "SELECT h FROM HemChangeRequest h WHERE h.endDate = :endDate"),
    @NamedQuery(name = "HemChangeRequest.findByOptComment",
            query = "SELECT h FROM HemChangeRequest h WHERE h.optComment = :optComment"),
    @NamedQuery(name = "HemChangeRequest.findByTimeRequired",
            query = "SELECT h FROM HemChangeRequest h WHERE h.timeRequired = :timeRequired"),
    @NamedQuery(name = "HemChangeRequest.findByServer",
            query = "SELECT h FROM HemChangeRequest h WHERE h.hemServer = :hemServer"),
    @NamedQuery(name = "HemChangeRequest.findByEnvironment",
            query = "SELECT h FROM HemChangeRequest h WHERE h.fkHemEnvironment = :fkHemEnvironment"),
    @NamedQuery(name = "HemChangeRequest.findByTimeInterval",
            query = "SELECT h FROM HemChangeRequest h WHERE h.startDate >= :startDate AND h.endDate <= :endDate"),
    @NamedQuery(name = "HemChangeRequest.findByChangeImplementer",
            query = "SELECT h FROM HemChangeRequest h WHERE h.changeImplementers = :changeImplementers")
})
public class HemChangeRequest extends HemTask implements Serializable {

    @Id
    @SequenceGenerator(name = "hem.\"HEM_CHANGE_REQ_change_req_id_seq\"",
            sequenceName = "hem.\"HEM_CHANGE_REQ_change_req_id_seq\"",
            allocationSize = 1)
    @GeneratedValue(generator = "hem.\"HEM_CHANGE_REQ_change_req_id_seq\"")
    @Basic(optional = false)
    @NotNull
    @Column(name = "change_req_id")
    private Integer changeReqId;

    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 2147483647)
    @Column(name = "rfc_link")
    private String rfcLink;

    @Basic(optional = false)
    @NotNull
    @Column(name = "on_demand")
    private boolean onDemand;

    // start_date is in the superclass HemTask
    // end_date is in the superclass HemTask
    // opt_comment is in the superclass HemTask
    @ManyToOne(optional = false)
    @JoinColumn(name = "requestor_id", referencedColumnName = "requestor_id")
    private HemRequestor hemRequestor;

    @ManyToMany
    @JoinTable(name = "hem_jnt_changereq_product", schema = "hem",
            joinColumns = @JoinColumn(name = "hem_changereq_id"),
            inverseJoinColumns = @JoinColumn(name = "hem_product_id"))
    private List<HemProduct> hemProduct;

    @Basic(optional = false)
    @NotNull
    @Column(name = "isincludingdistlist", columnDefinition = "boolean default true")
    private Boolean includingDistList;

    @ManyToOne(optional = false)
    @JoinColumn(name = "category_id", referencedColumnName = "category_id")
    private HemChangeCategory hemCategory;

    @Basic(optional = false)
    @NotNull
    @Column(name = "time_required")
    private BigDecimal timeRequired;

    @Column(name = "approval_flag")
    private Boolean approvalFlag;

    @Size(max = 2147483647)
    @Column(name = "approval_person")
    private String approvalPerson;

    @Column(name = "approval_when")
    @Temporal(TemporalType.TIMESTAMP)
    private Date approvalWhen;

    // environment_id is in the superclass HemTask
    // fk_email_id is in the superclass HemTask
    // TODO
    // fk_change_coordinator_id is missing
    @Column(name = "created_at", columnDefinition = "TIMESTAMP DEFAULT CURRENT_TIMESTAMP", updatable = false)
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdAt = new Date();

    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 2147483647)
    @Column(name = "user_name")
    private String userName;

    @Basic(optional = false)
    @NotNull
    @Column(name = "status")
    private Integer status = 0;

    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 2147483647)
    @Column(name = "rfc_name")
    private String rfcName;

    @Column(name = "created_by")
    private String createdBy;

    @Column(name = "created_date")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdDate;

    @Column(name = "last_modified_by")
    private String lastModifiedBy;

    @Column(name = "last_modified_date")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedDate;

    @NotNull
    @Column(name = "archived")
    private boolean archived = false;

    @Column(name = "archived_by")
    private String archivedBy;

    @Column(name = "archived_date")
    @Temporal(TemporalType.TIMESTAMP)
    private Date archivedDate;

    @ManyToMany
    @JoinTable(name = "hem_jnt_changereq_implementer", schema = "hem",
            joinColumns = @JoinColumn(name = "hem_changereq_id"),
            inverseJoinColumns = @JoinColumn(name = "hem_user_id"))
    private List<HemUser> changeImplementers;

    @ManyToMany
    @JoinTable(name = "hem_jnt_changereq_server", schema = "hem",
            joinColumns = @JoinColumn(name = "hem_changereq_id"),
            inverseJoinColumns = @JoinColumn(name = "hem_server_id"))
    private List<HemServer> hemServer;

    public HemChangeRequest() {
        this.includingDistList = true;
    }

    public HemChangeRequest(
            Integer changeReqId,
            boolean onDemand,
            List<HemUser> changeImplementers,
            String rfcName,
            String rfcLink,
            Integer status,
            BigDecimal timeRequired,
            HemChangeCategory hemCategory,
            List<HemProduct> hemProduct,
            HemRequestor hemRequestor,
            List<HemServer> hemServer,
            Date startDate,
            Date endDate,
            HemEnvironment hemEnvironment,
            Boolean includingDistList) {
        super(startDate, endDate, hemEnvironment);
        this.changeReqId = changeReqId;
        this.onDemand = onDemand;
        this.changeImplementers = changeImplementers;
        this.rfcName = rfcName;
        this.rfcLink = rfcLink;
        this.status = status;
        this.timeRequired = timeRequired;
        this.hemCategory = hemCategory;
        this.hemProduct = hemProduct;
        this.hemRequestor = hemRequestor;
        this.hemServer = hemServer;
        this.includingDistList = includingDistList;
    }

    public HemChangeRequest(
            Integer changeReqId,
            boolean onDemand,
            List<HemUser> changeImplementers,
            String rfcName,
            String rfcLink,
            Integer status,
            BigDecimal timeRequired,
            HemChangeCategory hemCategory,
            List<HemProduct> hemProduct,
            HemRequestor hemRequestor,
            List<HemServer> hemServer,
            Date startDate,
            Date endDate,
            String optComment,
            HemEmailNotification fkEmailId,
            HemEnvironment hemEnvironment,
            Boolean includingDistList) {
        super(startDate, endDate, optComment, fkEmailId, hemEnvironment);
        this.changeReqId = changeReqId;
        this.onDemand = onDemand;
        this.changeImplementers = changeImplementers;
        this.rfcName = rfcName;
        this.rfcLink = rfcLink;
        this.status = status;
        this.timeRequired = timeRequired;
        this.hemCategory = hemCategory;
        this.hemProduct = hemProduct;
        this.hemRequestor = hemRequestor;
        this.hemServer = hemServer;
        this.includingDistList = includingDistList;
    }

    // TODO Rename to isOnDemand
    public boolean getOnDemand() {
        return onDemand;
    }

    @Override
    public boolean equals(Object o) {
        if (o == null) {
            return false;
        }
        if (!(o instanceof HemChangeRequest)) {
            return false;
        }
        if (o == this) {
            return true;
        }
        return Objects.equals(this.changeReqId, ((HemChangeRequest) o).changeReqId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(changeReqId);
    }

    @Override
    public String toString() {
        return "ca.bc.gov.hlth.hem.entity.HemChangeRequest[ changeReqId=" + changeReqId + " ]";
    }

    public void persist(Object object) {
        /* Add this to the deployment descriptor of this module (e.g. web.xml, ejb-jar.xml):
         * <persistence-context-ref>
         * <persistence-context-ref-name>persistence/LogicalName</persistence-context-ref-name>
         * <persistence-unit-name>HEM-pu</persistence-unit-name>
         * </persistence-context-ref>
         * <resource-ref>
         * <res-ref-name>UserTransaction</res-ref-name>
         * <res-type>javax.transaction.UserTransaction</res-type>
         * <res-auth>Container</res-auth>
         * </resource-ref> */
        try {
            Context ctx = new InitialContext();
            UserTransaction utx = (UserTransaction) ctx.lookup("java:comp/env/UserTransaction");
            utx.begin();
            EntityManager em = (EntityManager) ctx.lookup("java:comp/env/persistence/LogicalName");
            em.persist(object);
            utx.commit();
        } catch (Exception e) {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, "exception caught", e);
            throw new RuntimeException(e);
        }
    }
}
