package ca.bc.gov.hlth.hem.entity;

import lombok.Getter;
import lombok.Setter;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.util.Date;
import java.util.Objects;

@Entity
@Table(name = "hem_email_notification", schema = "hem")
@Getter
@Setter
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "HemEmailNotification.findAll",
            query = "SELECT h FROM HemEmailNotification h WHERE h.archived = :archived"),
    @NamedQuery(name = "HemEmailNotification.findByEmailId",
            query = "SELECT h FROM HemEmailNotification h WHERE h.emailId = :emailId"),
    @NamedQuery(name = "HemEmailNotification.findByEmailSourceType",
            query = "SELECT h FROM HemEmailNotification h WHERE h.emailSourceType = :emailSourceType"),
    @NamedQuery(name = "HemEmailNotification.findByEmailReceivers",
            query = "SELECT h FROM HemEmailNotification h WHERE h.emailReceivers = :emailReceivers"),
    @NamedQuery(name = "HemEmailNotification.findByDescription",
            query = "SELECT h FROM HemEmailNotification h WHERE h.description = :description"),
    @NamedQuery(name = "HemEmailNotification.findByOutage",
            query = "SELECT h FROM HemEmailNotification h WHERE h.outage = :outage"),
    @NamedQuery(name = "HemEmailNotification.findByImpactedServices",
            query = "SELECT h FROM HemEmailNotification h WHERE h.impactedServices = :impactedServices"),
    @NamedQuery(name = "HemEmailNotification.findByNotImpactedServices",
            query = "SELECT h FROM HemEmailNotification h WHERE h.notImpactedServices = :notImpactedServices"),
    @NamedQuery(name = "HemEmailNotification.findByTestingVerificationSteps",
            query = "SELECT h FROM HemEmailNotification h WHERE h.testingVerificationSteps = :testingVerificationSteps"),
    @NamedQuery(name = "HemEmailNotification.findByNotificationLevel",
            query = "SELECT h FROM HemEmailNotification h WHERE h.notificationLevel = :notificationLevel"),
    @NamedQuery(name = "HemEmailNotification.findByFlagEmailAssigning",
            query = "SELECT h FROM HemEmailNotification h WHERE h.flagEmailAssigning = :flagEmailAssigning"),
    @NamedQuery(name = "HemEmailNotification.findByUserAssigning",
            query = "SELECT h FROM HemEmailNotification h WHERE h.userAssigning = :userAssigning"),
    @NamedQuery(name = "HemEmailNotification.findByDateAssigning",
            query = "SELECT h FROM HemEmailNotification h WHERE h.dateAssigning = :dateAssigning"),
    @NamedQuery(name = "HemEmailNotification.findByFlagEmailProcessing",
            query = "SELECT h FROM HemEmailNotification h WHERE h.flagEmailProcessing = :flagEmailProcessing"),
    @NamedQuery(name = "HemEmailNotification.findByUserProcessing",
            query = "SELECT h FROM HemEmailNotification h WHERE h.userProcessing = :userProcessing"),
    @NamedQuery(name = "HemEmailNotification.findByDateProcessing",
            query = "SELECT h FROM HemEmailNotification h WHERE h.dateProcessing = :dateProcessing"),
    @NamedQuery(name = "HemEmailNotification.findByFlagEmailClosing",
            query = "SELECT h FROM HemEmailNotification h WHERE h.flagEmailClosing = :flagEmailClosing"),
    @NamedQuery(name = "HemEmailNotification.findByUserClosing",
            query = "SELECT h FROM HemEmailNotification h WHERE h.userClosing = :userClosing"),
    @NamedQuery(name = "HemEmailNotification.findByDateClosing",
            query = "SELECT h FROM HemEmailNotification h WHERE h.dateClosing = :dateClosing")
})
public class HemEmailNotification implements Serializable {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Basic(optional = false)
    @Column(name = "email_id")
    private Integer emailId;

    /**
     * Entier qui représente le type d'objet associé. 0=Change Request, 1=Server
     * Patch, 2=Project
     */
    @Basic(optional = false)
    @NotNull
    @Column(name = "email_source_type")
    private int emailSourceType;

    @Size(max = 2147483647)
    @Column(name = "email_receivers")
    private String emailReceivers;

    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 2147483647)
    private String description;

    @Basic(optional = false)
    @NotNull
    private boolean outage;

    @Size(max = 2147483647)
    @Column(name = "impacted_services")
    private String impactedServices;

    @Size(max = 2147483647)
    @Column(name = "not_impacted_services")
    private String notImpactedServices;

    @Basic(optional = false)
    @NotNull
    @Size(min = 1, max = 2147483647)
    @Column(name = "testing_verification_steps")
    private String testingVerificationSteps;

    @NotNull
    @Size(min = 1)
    @Column(name = "testing_verification_steps_client")
    private String testingVerificationStepsClient = "No client testing required";

    /**
     * 0 = email created, but not sent as first step 1 = email sent as first
     * notification (processed) 2 = email sent as work in progress 3 = email
     * sent as work finished and email closed
     */
    @Basic(optional = false)
    @NotNull
    @Column(name = "notification_level")
    private int notificationLevel;

    @Column(name = "flag_email_assigning")
    private Boolean flagEmailAssigning;

    @Column(name = "user_assigning")
    private Integer userAssigning;

    @Column(name = "date_assigning")
    @Temporal(TemporalType.DATE)
    private Date dateAssigning;

    @Column(name = "flag_email_processing")
    private Boolean flagEmailProcessing;

    @Column(name = "user_processing")
    private Integer userProcessing;

    @Column(name = "date_processing")
    @Temporal(TemporalType.DATE)
    private Date dateProcessing;

    @Column(name = "flag_email_closing")
    private Boolean flagEmailClosing;
    @Column(name = "user_closing")
    private Integer userClosing;

    @Column(name = "date_closing")
    @Temporal(TemporalType.DATE)
    private Date dateClosing;

    @ManyToOne(optional = false)
    @JoinColumn(name = "fk_availability_impact_id", referencedColumnName = "availability_impact_id")
    private HemAvailabilityImpact fkAvailabilityImpactId = new HemAvailabilityImpact();

    @Basic(optional = false)
    @NotNull
    @Size(min = 0, max = 2147483647)
    @Column(name = "signature")
    private String signature;

    @OneToOne(mappedBy = "hemEmailNotification", cascade = CascadeType.ALL, fetch = FetchType.LAZY, optional = false)
    private HemChangeRequest hemChangeRequest;

    @ManyToOne(optional = false)
    @JoinColumn(name = "fk_sender_team", referencedColumnName = "team_id")
    private HemTeam senderTeam;

    @Column(name = "created_by")
    private String createdBy;

    @Column(name = "created_date", columnDefinition = "TIMESTAMP")
    @Temporal(TemporalType.TIMESTAMP)
    private Date createdDate;

    @Column(name = "last_modified_by")
    private String lastModifiedBy;

    @Column(name = "last_modified_date", columnDefinition = "TIMESTAMP")
    @Temporal(TemporalType.TIMESTAMP)
    private Date lastModifiedDate;

    @NotNull
    @Column(name = "archived")
    private boolean archived = false;

    @Column(name = "archived_by")
    private String archivedBy;

    @Column(name = "archived_date", columnDefinition = "TIMESTAMP")
    @Temporal(TemporalType.TIMESTAMP)
    private Date archivedDate;

    
    public enum EmailStatus {
        NOT_STARTED(0, "Not started/not sent"),
        STARTED(1, "First email sent"),
        WORK_IN_PROGRESS(2, "Work in progress"),
        CLOSED(3, "Closed"),
        CANCELLED(4,"Cancelled"),
        POSTPONED(5, "Postponed");

        int notificationLevel;
        String notificationStatus;

        EmailStatus(int notificationLevel, String notificationStatus) {
            this.notificationLevel = notificationLevel;
            this.notificationStatus = notificationStatus;
        }

        public int getNotificationLevel() {
            return notificationLevel;
        }

        public String getNotificationStatus() {
            return notificationStatus;
        }
    }

    public HemEmailNotification() {
        this.signature = "";
    }

    public boolean isOutage() {
        return outage;
    }

    public String getNotificationLevelStatus() {
        return EmailStatus.values()[notificationLevel].getNotificationStatus();
    }

    public Boolean isFlagEmailAssigning() {
        return flagEmailAssigning;
    }

    public HemAvailabilityImpact getHemAvailabilityImpact() {
        return fkAvailabilityImpactId;
    }

    public void setHemAvailabilityImpact(HemAvailabilityImpact hemAvailabilityImpact) {
        this.fkAvailabilityImpactId = hemAvailabilityImpact;
    }

    @Override
    public boolean equals(Object o) {
        if (o == null) {
            return false;
        }
        if (!(o instanceof HemEmailNotification)) {
            return false;
        }
        if (o == this) {
            return true;
        }
        return Objects.equals(this.emailId, ((HemEmailNotification) o).emailId);
    }

    @Override
    public int hashCode() {
        return Objects.hash(emailId);
    }

    @Override
    public String toString() {
        return "ca.bc.gov.hlth.hem.entity.HemEmailNotification[ emailId=" + emailId + " ]";
    }
}
