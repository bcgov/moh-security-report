package ca.bc.gov.hlth.hem.facade;

import ca.bc.gov.hlth.hem.entity.HemUser;
import java.sql.Timestamp;
import java.time.Instant;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import java.time.LocalDateTime;
import java.util.List;

@Stateless
public class HemUserFacade extends AbstractFacade<HemUser> implements HemUserFacadeLocal {

    @PersistenceContext(unitName = "HEM-pu")
    private EntityManager em;

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public HemUserFacade() {
        super(HemUser.class);
    }

    @Override
    public void create(HemUser h, String username) {
        h.setCreatedBy(username);
        h.setCreatedDate(Timestamp.from(Instant.now()));
 

        h.setLastModifiedBy(username);
        h.setLastModifiedDate(Timestamp.from(Instant.now()));
        h.setUserSignature("Please update user signature");

        em.persist(h);
    }

    @Override
    public void edit(HemUser h, String username) {
        h.setLastModifiedBy(username);
        h.setLastModifiedDate(Timestamp.from(Instant.now()));
        if(h.getUserSignature().isBlank()){
           h.setUserSignature("Please edit user signature"); 
        }
        em.merge(h);
    }

    @Override
    public void remove(HemUser h, String username) {
        h.setArchived(true);
        h.setArchivedBy(username);
        h.setArchivedDate(Timestamp.from(Instant.now()));

        edit(h);
    }

    @Override
    public List<HemUser> findAll() {
        Query query = em.createNamedQuery("HemUser.findAll");
        query.setParameter("archived", false);

        return query.getResultList();
    }

    /**
     * Find a list of change request by their rfc link
     *
     * @param param String rfc link
     * @return return a change request by his rfc link
     *
     */
    @Override
    public HemUser findByUserName(String param) {
        Query query = em.createNamedQuery("HemUser.findByUserName");
        query.setParameter("userName", param);
        return (HemUser) query.getSingleResult();
    }
    
        /**
     * Find an user by his id.
     *
     * @param userID Id of the user
     * @return return a user
     *
     */
    @Override
    public HemUser findByUserId(Integer userID) {
        Query query = em.createNamedQuery("HemUser.findByUserId");
        query.setParameter("userId", userID);
        return (HemUser) query.getSingleResult();
    }
    
}
