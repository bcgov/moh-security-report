package ca.bc.gov.hlth.hem.facade;

import ca.bc.gov.hlth.hem.entity.HemEmailNotification;
import java.sql.Timestamp;
import java.time.Instant;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;

@Stateless
public class HemEmailNotificationFacade extends AbstractFacade<HemEmailNotification> implements HemEmailNotificationFacadeLocal {

    private static final Logger LOGGER = Logger.getLogger(HemEmailNotificationFacade.class.getSimpleName());

    // HTML constants
    private final String span = "<span lang=EN-CA style='mso-bidi-font-size:10.0pt;mso-bidi-font-family:Arial;mso-ansi-language:EN-CA'>";
    private final String pContent = "<p class=MsoNormal>";
    private final String pTitle = "<p class=MsoTitle>";
    private final String openTitle = pTitle + span;
    private final String openContent = pContent + span;
    private final String closeSpan = "</span>";
    private final String closeSection = closeSpan + "</p>";
    private final String li = "<li class=MsoNormal>";
    private final String liClose = "</li>";
    private final String breakLine = "<p class=MsoNormal><span lang=EN-CA style='mso-bidi-font-size:10.0pt;mso-bidi-font-family:Arial;mso-ansi-language:EN-CA'>&nbsp;</span></p>";

    @PersistenceContext(unitName = "HEM-pu")
    private EntityManager em;

    public static class Values {

        public String environment;
        public String[] audience;
        public String dateRange;
        public String description;
        public String estimatedTime;
        public String rfcName;
        public String[] clientVerificationSteps;
        public String[] teamVerificationSteps;
        public String availabilityImpact;
        public String[] impactedApplications;
        public String[] notImpactedApplications;
        public String signature;
        public boolean outage;
        public String outageType;
    }

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public HemEmailNotificationFacade() {
        super(HemEmailNotification.class);
    }

    @Override
    public HemEmailNotification find(Object id) {
        return em.find(HemEmailNotification.class, id);
    }

    @Override
    public List<HemEmailNotification> findAll() {
        Query query = em.createNamedQuery("HemEmailNotification.findAll");
        query.setParameter("archived", false);

        return query.getResultList();
    }

    @Override
    public HemEmailNotification findByEmailId(Integer param) {
        Query query = em.createNamedQuery("HemEmailNotification.findByEmailId");
        query.setParameter("emailId", param);
        return (HemEmailNotification) query.getSingleResult();
    }


    @Override
    public void updateHemEmailNotification(HemEmailNotification hemEmailNotification, int userId) {

        switch (hemEmailNotification.getNotificationLevel()) {
            //Update the status for the first email (from level 0 to 1)
            case 0:
                hemEmailNotification.setDateAssigning(new Date());
                hemEmailNotification.setUserAssigning(userId);
                hemEmailNotification.setFlagEmailAssigning(true);
                hemEmailNotification.setNotificationLevel(1);
                break;
            // Update the status for the processing email (from level 1 to 2)
            case 1:
                hemEmailNotification.setDateProcessing(new Date());
                hemEmailNotification.setUserClosing(userId);
                hemEmailNotification.setFlagEmailProcessing(true);
                hemEmailNotification.setNotificationLevel(2);
                break;
            // Update the status for the closing email (from level 2 to 3)
            case 2:
                hemEmailNotification.setDateClosing(new Date());
                hemEmailNotification.setUserClosing(userId);
                hemEmailNotification.setFlagEmailClosing(true);
                hemEmailNotification.setNotificationLevel(3);
                break;
        }

        this.edit(hemEmailNotification);
    }

    @Override
    public StringBuilder buildEmailTemplate(Values values, boolean forWebDisplay) {
        StringBuilder sb = new StringBuilder();

        // Header
        sb.append(buildHeader(forWebDisplay));

        // Affected Environment
        sb.append(buildSection("Affected Environment:", values.environment));

        // Impacted Users
        sb.append(buildImpactedUsersSection("Impacted Users:", "All users of the %s application.", values.audience));

        // Date and Time
        sb.append(buildSection("Date and Time:", values.dateRange));

        // Description
        sb.append(buildSection("Description:", values.description));

        // Impacted Applications
        sb.append(buildApplicationsSection("Impacted Applications:", values.impactedApplications));

        // Impacted Applications
        sb.append(buildApplicationsSection("Not Impacted Applications:", values.notImpactedApplications));

        // Estimated change duration
        sb.append(buildSection("Estimated Change Duration:", values.estimatedTime));

        // Outage Type
        sb.append(buildSection("Outage Type:", values.outageType));

        // Team testing and Verification
        if (values.teamVerificationSteps == null || values.teamVerificationSteps.length == 0) {
            values.teamVerificationSteps = new String[]{"The team will test as per documented in the RFC document"};
        }
        sb.append(buildTeamTestingAndVerificationSection("Deployment Team's Verification Procedures:", values.teamVerificationSteps));

        // Client testing and Verification.
        if (values.clientVerificationSteps == null || values.clientVerificationSteps.length == 0) {
            values.clientVerificationSteps = new String[]{"Business Area's Testing Requirements"};
        }
        sb.append(buildClientTestingAndVerificationSection("Business Area's Testing and Verification:", values.clientVerificationSteps));

        // RFC Reference
        sb.append(buildSection("RFC Reference:", values.rfcName));

        // Contact
        if (values.outage) {
            sb.append(openTitle).append("Contact:").append(closeSection)
                    .append(openContent)
                    .append("If you have any questions about this outage, please contact your SBC (Senior Business Consultant).")
                    .append("<br />If you experience any issues with the listed applications after the outage, please contact the MOH Helpdesk ")
                    .append("(<a href=\"mailto:HLTH.Helpdesk@gov.bc.ca\">HLTH.Helpdesk@gov.bc.ca</a>)")
                    .append(closeSection);
        } else {
            sb.append(openTitle).append("Contact:").append(closeSection)
                    .append(openContent)
                    .append("If you have any questions about this change, please contact your SBC (Senior Business Consultant).")
                    .append("<br />If you experience any issues with the listed applications after the change, please contact the MOH Helpdesk ")
                    .append("(<a href=\"mailto:HLTH.Helpdesk@gov.bc.ca\">HLTH.Helpdesk@gov.bc.ca</a>)")
                    .append(closeSection);
        }

        // Acronym from audience (products)
        sb.append(buildAcronymSection(values.audience));

        // Signature
        String signature;
        if (Objects.isNull(values.signature) || values.signature.isBlank()) {
            signature = "Regards,";
        } else {
            signature = values.signature;
        }
        sb.append(breakLine).append(breakLine)
                .append(openContent)
                .append(signature)
                .append(closeSection);

        sb.append("</body></html>");

        return sb;
    }

    private StringBuilder buildSection(String title, String content) {
        StringBuilder sb = new StringBuilder();

        if (!Objects.isNull(content) && !content.isEmpty()) {
            sb.append(openTitle).append(title).append(closeSection);
            sb.append(openContent).append(content).append(closeSection);
        }

        return sb;
    }

    private StringBuilder buildTeamTestingAndVerificationSection(String title, String[] content) {
        StringBuilder sb = new StringBuilder();

        if (!Objects.isNull(content) && content.length > 0) {
            sb.append(openTitle).append(title).append(closeSection);

            StringBuilder testsList = new StringBuilder();
            for (String entry : content) {
                if (!entry.equals("")) {
                    if (testsList.length() > 0) {
                        testsList.append(", ");
                    }
                    testsList.append(entry);
                }
            }

            sb.append(openContent).append(testsList.toString()).append(closeSection);
        }

        return sb;
    }

    private StringBuilder buildClientTestingAndVerificationSection(String title, String[] content) {
        StringBuilder sb = new StringBuilder();

        if (!Objects.isNull(content) && content.length > 0) {
            sb.append(openTitle).append(title).append(closeSection);

            StringBuilder testsList = new StringBuilder();
            for (String entry : content) {
                if (!entry.equals("")) {
                    if (testsList.length() > 0) {
                        testsList.append(", ");
                    }
                    testsList.append(entry);
                }
            }

            sb.append(openContent).append(testsList.toString()).append(closeSection);
        }

        return sb;
    }

    private StringBuilder buildImpactedUsersSection(String title, String description, String[] content) {
        StringBuilder sb = new StringBuilder();

        // Title
        sb.append(openTitle).append(title).append(closeSection);

        // Description
        if (Objects.isNull(content) || content.length == 0) {
            content = new String[]{""};
        }
        StringBuilder applicationList = new StringBuilder();
        for (String entry : content) {
            if (!entry.isBlank()) {
                if (applicationList.length() > 0) {
                    applicationList.append(", ");
                }
                applicationList.append(entry);
            }
        }
        sb.append(openContent)
                .append(String.format(description, applicationList.toString()))
                .append(closeSection);

        return sb;
    }

    /**
     * Build the Impacted Application and Not Impacted Application sections.
     *
     * @param title
     * @param impactedApplications
     * @return
     */
    private StringBuilder buildApplicationsSection(String title, String[] listOfApplications) {
        StringBuilder sb = new StringBuilder();

        if (!Objects.isNull(listOfApplications) && listOfApplications.length > 0) {
            sb.append(openTitle).append(title).append(closeSection);

            sb.append(openContent).append("<ul>");
            for (String application : listOfApplications) {
                if (!application.isBlank()) {
                    sb.append(li).append(span).append(application).append(closeSpan).append(liClose);
                }
            }
            sb.append("</ul>").append(closeSection);
        }

        return sb;
    }
    
        private StringBuilder buildAcronymSection(String[] acronyms) {
        StringBuilder sb = new StringBuilder();
        sb.append("<table style=\"border-collapse: collapse; width: 100%;\" border=\"1\">")
        .append("<thead style=\"background-color: #34495e; color:white;\">\n")
        .append("<tr>\n")
        .append("<th colspan=\"2\">Legend</th>\n")
        .append("</tr>\n")
        .append("<tr>\n")
        .append("<th style=\"width: 48.1332%;\">Acronym</th>\n")
        .append("<th style=\"width: 48.1332%;\">Description</th>\n")
        .append("</tr>\n")
        .append("</thead>\n")
        .append("<tbody>\n");
        for (String application : acronyms) {
            String[] product = application.split(" - ");
            if (product.length > 0 && product.length < 2) {
                sb.append("<tr>\n")
                        .append("<td style=\"width: 48.1332%;\">").append(product[0]).append("</td>\n")
                       // .append("<td style=\"width: 48.1332%;\">").append(product[1]).append("</td>\n")
                        .append("</tr>\n");
            }

            if (product.length > 1) {
                sb.append("<tr>\n")
                        .append("<td style=\"width: 48.1332%;\">").append(product[0]).append("</td>\n")
                        .append("<td style=\"width: 48.1332%;\">").append(product[1]).append("</td>\n")
                        .append("</tr>\n");
            }

        }
        sb.append("</tbody>\n")
        .append("</table>\n");
        return sb;
    }

    private StringBuilder buildHeader(boolean forWebDisplay) {
        StringBuilder sB = new StringBuilder();
        sB.append("<html xmlns=\"http://www.w3.org/TR/REC-html40\">\n");
        sB.append("<head>\n");
        sB.append("<meta http-equiv=Content-Type content=\"text/html; charset=windows-1252\">\n");
        sB.append("<meta name=Generator content=\"HEM\">\n");
        sB.append("<meta name=Originator content=\"HEM\">\n");
        sB.append("<style>\n");
        sB.append("<!--\n");
        sB.append("/* Font Definitions */\n");
        sB.append("@font-face\n");
        sB.append("{font-family:Wingdings;\n");
        sB.append("panose-1:5 0 0 0 0 0 0 0 0 0;\n");
        sB.append("mso-font-charset:2;\n");
        sB.append("mso-generic-font-family:auto;\n");
        sB.append("mso-font-pitch:variable;\n");
        sB.append("mso-font-signature:0 268435456 0 0 -2147483648 0;}\n");
        sB.append("@font-face\n");
        sB.append("{font-family:\"Cambria Math\";\n");
        sB.append("panose-1:2 4 5 3 5 4 6 3 2 4;\n");
        sB.append("mso-font-charset:1;\n");
        sB.append("mso-generic-font-family:roman;\n");
        sB.append("mso-font-pitch:variable;\n");
        sB.append("mso-font-signature:-536869121 1107305727 33554432 0 415 0;}\n");
        sB.append("@font-face\n");
        sB.append("{font-family:Calibri;\n");
        sB.append("panose-1:2 15 5 2 2 2 4 3 2 4;\n");
        sB.append("mso-font-charset:0;\n");
        sB.append("mso-generic-font-family:swiss;\n");
        sB.append("mso-font-pitch:variable;\n");
        sB.append("mso-font-signature:-536858881 -1073732485 9 0 511 0;}\n");
        sB.append("@font-face\n");
        sB.append("{font-family:Tahoma;\n");
        sB.append("panose-1:2 11 6 4 3 5 4 4 2 4;\n");
        sB.append("mso-font-charset:0;\n");
        sB.append("mso-generic-font-family:swiss;\n");
        sB.append("mso-font-pitch:variable;\n");
        sB.append("mso-font-signature:-520081665 -1073717157 41 0 66047 0;}\n");
        sB.append("/* Style Definitions */\n");
        sB.append("p.MsoNormal, li.MsoNormal, div.MsoNormal\n");
        sB.append("{mso-style-unhide:no;\n");
        sB.append("mso-style-qformat:yes;\n");
        sB.append("mso-style-parent:\"\";\n");
        sB.append("margin:0cm;\n");
        sB.append("margin-bottom:.0001pt;\n");
        sB.append("mso-pagination:widow-orphan;\n");
        sB.append("font-size:10.0pt;\n");
        sB.append("mso-bidi-font-size:11.0pt;\n");
        sB.append("font-family:\"Arial\",sans-serif;\n");
        sB.append("mso-fareast-font-family:Calibri;\n");
        sB.append("mso-fareast-theme-font:minor-latin;\n");
        sB.append("mso-bidi-font-family:\"Times New Roman\";\n");
        sB.append("mso-bidi-theme-font:minor-bidi;}\n");
        sB.append("p.MsoTitle, li.MsoTitle, div.MsoTitle\n");
        sB.append("{mso-style-priority:10;\n");
        sB.append("mso-style-unhide:no;\n");
        sB.append("mso-style-qformat:yes;\n");
        sB.append("mso-style-link:\"Titre Car\";\n");
        sB.append("mso-style-next:Normal;\n");
        sB.append("margin-top:18.0pt;\n");
        sB.append("margin-right:0cm;\n");
        sB.append("margin-bottom:2.0pt;\n");
        sB.append("margin-left:0cm;\n");
        sB.append("mso-pagination:widow-orphan;\n");
        sB.append("font-size:10.0pt;\n");
        sB.append("mso-bidi-font-size:11.0pt;\n");
        sB.append("font-family:\"Arial\",sans-serif;\n");
        sB.append("mso-fareast-font-family:Calibri;\n");
        sB.append("mso-fareast-theme-font:minor-latin;\n");
        sB.append("mso-bidi-font-family:\"Times New Roman\";\n");
        sB.append("mso-bidi-theme-font:minor-bidi;\n");
        sB.append("font-weight:bold;\n");
        sB.append("mso-bidi-font-weight:normal;}\n");
        sB.append("a:link, span.MsoHyperlink\n");
        sB.append("{mso-style-noshow:yes;\n");
        sB.append("mso-style-priority:99;\n");
        sB.append("color:#0563C1;\n");
        sB.append("mso-themecolor:hyperlink;\n");
        sB.append("text-decoration:underline;\n");
        sB.append("text-underline:single;}\n");
        sB.append("a:visited, span.MsoHyperlinkFollowed\n");
        sB.append("{mso-style-noshow:yes;\n");
        sB.append("mso-style-priority:99;\n");
        sB.append("color:#954F72;\n");
        sB.append("mso-themecolor:followedhyperlink;\n");
        sB.append("text-decoration:underline;\n");
        sB.append("text-underline:single;}\n");
        sB.append("p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph\n");
        sB.append("{mso-style-priority:34;\n");
        sB.append("mso-style-unhide:no;\n");
        sB.append("mso-style-qformat:yes;\n");
        sB.append("margin-top:0cm;\n");
        sB.append("margin-right:0cm;\n");
        sB.append("margin-bottom:0cm;\n");
        sB.append("margin-left:36.0pt;\n");
        sB.append("margin-bottom:.0001pt;\n");
        sB.append("text-indent:-18.0pt;\n");
        sB.append("mso-pagination:widow-orphan;\n");
        sB.append("mso-list:l0 level1 lfo2;\n");
        sB.append("font-size:10.0pt;\n");
        sB.append("mso-bidi-font-size:11.0pt;\n");
        sB.append("font-family:\"Calibri\",sans-serif;\n");
        sB.append("mso-fareast-font-family:Calibri;\n");
        sB.append("mso-fareast-theme-font:minor-latin;}\n");
        sB.append("p.msonormal0, li.msonormal0, div.msonormal0\n");
        sB.append("{mso-style-name:msonormal;\n");
        sB.append("mso-style-unhide:no;\n");
        sB.append("mso-margin-top-alt:auto;\n");
        sB.append("margin-right:0cm;\n");
        sB.append("mso-margin-bottom-alt:auto;\n");
        sB.append("margin-left:0cm;\n");
        sB.append("mso-pagination:widow-orphan;\n");
        sB.append("font-size:12.0pt;\n");
        sB.append("font-family:\"Times New Roman\",serif;\n");
        sB.append("mso-fareast-font-family:Calibri;\n");
        sB.append("mso-fareast-theme-font:minor-latin;}\n");
        sB.append("span.TitreCar\n");
        sB.append("{mso-style-name:\"Titre Car\";\n");
        sB.append("mso-style-priority:10;\n");
        sB.append("mso-style-unhide:no;\n");
        sB.append("mso-style-locked:yes;\n");
        sB.append("mso-style-link:Titre;\n");
        sB.append("mso-ansi-font-size:28.0pt;\n");
        sB.append("mso-bidi-font-size:28.0pt;\n");
        sB.append("font-family:\"Calibri Light\",sans-serif;\n");
        sB.append("mso-ascii-font-family:\"Calibri Light\";\n");
        sB.append("mso-ascii-theme-font:major-latin;\n");
        sB.append("mso-fareast-font-family:\"Times New Roman\";\n");
        sB.append("mso-fareast-theme-font:major-fareast;\n");
        sB.append("mso-hansi-font-family:\"Calibri Light\";\n");
        sB.append("mso-hansi-theme-font:major-latin;\n");
        sB.append("mso-bidi-font-family:\"Times New Roman\";\n");
        sB.append("mso-bidi-theme-font:major-bidi;\n");
        sB.append("letter-spacing:-.5pt;\n");
        sB.append("mso-font-kerning:14.0pt;}\n");

        sB.append("p.Title, li.Title, div.Title\n");
        sB.append("{mso-style-name:Title;\n");
        sB.append("mso-style-unhide:no;\n");
        sB.append("mso-style-link:\"Title Char\";\n");
        sB.append("margin:0cm;\n");
        sB.append("margin-bottom:.0001pt;\n");
        sB.append("mso-pagination:widow-orphan;\n");
        sB.append("font-size:10.0pt;\n");
        sB.append("mso-bidi-font-size:11.0pt;\n");
        sB.append("font-family:\"Arial\",sans-serif;\n");
        sB.append("mso-fareast-font-family:Calibri;\n");
        sB.append("mso-fareast-theme-font:minor-latin;\n");
        sB.append("mso-bidi-font-family:\"Times New Roman\";\n");
        sB.append("mso-bidi-theme-font:minor-bidi;}\n");

        sB.append("span.TitleChar\n");
        sB.append("{mso-style-name:\"Title Char\";\n");
        sB.append("mso-style-priority:10;\n");
        sB.append("mso-style-unhide:no;\n");
        sB.append("mso-style-locked:yes;\n");
        sB.append("mso-style-link:Title;\n");
        sB.append("mso-ansi-font-size:10.0pt;\n");
        sB.append("font-family:\"Arial\",sans-serif;\n");
        sB.append("mso-ascii-font-family:Arial;\n");
        sB.append("mso-hansi-font-family:Arial;\n");
        sB.append("mso-bidi-font-family:Arial;\n");
        sB.append("font-weight:bold;\n");
        sB.append("mso-bidi-font-weight:normal;}\n");
        sB.append("span.EmailStyle24\n");
        sB.append("{mso-style-type:personal-compose;\n");
        sB.append("mso-style-noshow:yes;\n");
        sB.append("mso-style-unhide:no;\n");
        sB.append("mso-ansi-font-size:10.0pt;\n");
        sB.append("mso-bidi-font-size:10.0pt;\n");
        sB.append("font-family:\"Calibri\",sans-serif;\n");
        sB.append("mso-ascii-font-family:Calibri;\n");
        sB.append("mso-hansi-font-family:Calibri;\n");
        sB.append("mso-bidi-font-family:Arial;\n");
        sB.append("color:windowtext;\n");
        sB.append("mso-text-animation:none;\n");
        sB.append("font-weight:normal;\n");
        sB.append("font-style:normal;\n");
        sB.append("text-decoration:none;\n");
        sB.append("text-underline:none;\n");
        sB.append("text-decoration:none;\n");
        sB.append("text-line-through:none;}\n");
        sB.append(".MsoChpDefault\n");
        sB.append("{mso-style-type:export-only;\n");
        sB.append("mso-default-props:yes;\n");
        sB.append("font-size:10.0pt;\n");
        sB.append("mso-ansi-font-size:10.0pt;\n");
        sB.append("mso-bidi-font-size:10.0pt;\n");
        sB.append("font-family:\"Calibri\",sans-serif;\n");
        sB.append("mso-ascii-font-family:Calibri;\n");
        sB.append("mso-ascii-theme-font:minor-latin;\n");
        sB.append("mso-fareast-font-family:Calibri;\n");
        sB.append("mso-fareast-theme-font:minor-latin;\n");
        sB.append("mso-hansi-font-family:Calibri;\n");
        sB.append("mso-hansi-theme-font:minor-latin;\n");
        sB.append("mso-bidi-font-family:\"Times New Roman\";\n");
        sB.append("mso-bidi-theme-font:minor-bidi;}\n");
        sB.append("@page WordSection1\n");
        sB.append("{size:612.0pt 792.0pt;\n");
        sB.append("margin:72.0pt 72.0pt 72.0pt 72.0pt;\n");
        sB.append("mso-header-margin:36.0pt;\n");
        sB.append("mso-footer-margin:36.0pt;\n");
        sB.append("mso-paper-source:0;}\n");
        sB.append("div.WordSection1\n");
        sB.append("{page:WordSection1;}\n");
        sB.append("/* List Definitions */\n");
        sB.append("@list l0\n");
        sB.append("{mso-list-id:1839807853;\n");
        sB.append("mso-list-type:hybrid;\n");
        sB.append("mso-list-template-ids:1797182530 -1446357472 269025283 269025285 269025281 269025283 269025285 269025281 269025283 269025285;}\n");
        sB.append("@list l0:level1\n");
        sB.append("{mso-level-number-format:bullet;\n");
        sB.append("mso-level-text:\\F0B7;\n");
        sB.append("mso-level-tab-stop:none;\n");
        sB.append("mso-level-number-position:left;\n");
        sB.append("text-indent:-18.0pt;\n");
        sB.append("font-family:Symbol;}\n");
        sB.append("@list l0:level2\n");
        sB.append("{mso-level-number-format:bullet;\n");
        sB.append("mso-level-text:o;\n");
        sB.append("mso-level-tab-stop:none;\n");
        sB.append("mso-level-number-position:left;\n");
        sB.append("text-indent:-18.0pt;\n");
        sB.append("font-family:\"Courier New\";}\n");
        sB.append("@list l0:level3\n");
        sB.append("{mso-level-number-format:bullet;\n");
        sB.append("mso-level-text:\\F0A7;\n");
        sB.append("mso-level-tab-stop:none;\n");
        sB.append("mso-level-number-position:left;\n");
        sB.append("text-indent:-18.0pt;\n");
        sB.append("font-family:Wingdings;}\n");
        sB.append("@list l0:level4\n");
        sB.append("{mso-level-number-format:bullet;\n");
        sB.append("mso-level-text:\\F0B7;\n");
        sB.append("mso-level-tab-stop:none;\n");
        sB.append("mso-level-number-position:left;\n");
        sB.append("text-indent:-18.0pt;\n");
        sB.append("font-family:Symbol;}\n");
        sB.append("@list l0:level5\n");
        sB.append("{mso-level-number-format:bullet;\n");
        sB.append("mso-level-text:o;\n");
        sB.append("mso-level-tab-stop:none;\n");
        sB.append("mso-level-number-position:left;\n");
        sB.append("text-indent:-18.0pt;\n");
        sB.append("font-family:\"Courier New\";}\n");
        sB.append("@list l0:level6\n");
        sB.append("{mso-level-number-format:bullet;\n");
        sB.append("mso-level-text:\\F0A7;\n");
        sB.append("mso-level-tab-stop:none;\n");
        sB.append("mso-level-number-position:left;\n");
        sB.append("text-indent:-18.0pt;\n");
        sB.append("font-family:Wingdings;}\n");
        sB.append("@list l0:level7\n");
        sB.append("{mso-level-number-format:bullet;\n");
        sB.append("mso-level-text:\\F0B7;\n");
        sB.append("mso-level-tab-stop:none;\n");
        sB.append("mso-level-number-position:left;\n");
        sB.append("text-indent:-18.0pt;\n");
        sB.append("font-family:Symbol;}\n");
        sB.append("@list l0:level8\n");
        sB.append("{mso-level-number-format:bullet;\n");
        sB.append("mso-level-text:o;\n");
        sB.append("mso-level-tab-stop:none;\n");
        sB.append("mso-level-number-position:left;\n");
        sB.append("text-indent:-18.0pt;\n");
        sB.append("font-family:\"Courier New\";}\n");
        sB.append("@list l0:level9\n");
        sB.append("{mso-level-number-format:bullet;\n");
        sB.append("mso-level-text:\\F0A7;\n");
        sB.append("mso-level-tab-stop:none;\n");
        sB.append("mso-level-number-position:left;\n");
        sB.append("text-indent:-18.0pt;\n");
        sB.append("font-family:Wingdings;}\n");
        sB.append("ol\n");
        sB.append("{margin-bottom:0cm;}\n");
        sB.append("ul\n");
        sB.append("{margin-bottom:0cm;}\n");
        sB.append("-->\n");
        sB.append("</style>\n");
        sB.append("</head>\n");

        sB.append("<body lang=FR-CA link=\"#0563C1\" vlink=\"#954F72\" style='tab-interval:36.0pt'>\n");
        sB.append("<div class=WordSection1>\n");
        sB.append("<p class=MsoNormal>&nbsp;</p>\n");

        // Image section (parameter #0)
        sB.append("<p class=MsoNormal><span style='mso-bidi-font-size:10.0pt;mso-bidi-font-family:\n");
        if (forWebDisplay) {
            sB.append("Arial;mso-no-proof:yes'><img width=626 height=42 src=\"./resources/images/image002.png\"");
        } else {
            sB.append("Arial;mso-no-proof:yes'><img width=626 height=42 src=\"cid:MOHBANNERV1\"");
        }

        //sB.append("src=\"www.health.gov.bc.ca/images/it-services-banner.png\"");        
        sB.append("alt=\"Notification Banner\"></span><span ");
        sB.append("lang=EN-CA style='mso-bidi-font-size:10.0pt;mso-bidi-font-family:Arial;");
        sB.append("mso-ansi-language:EN-CA'></span></p>");

        // 2 verticals spaces
        sB.append(breakLine);
        sB.append(breakLine);

        return sB;
    }

    @Override
    public void create(HemEmailNotification h, String username) {
        h.setCreatedBy(username);
        h.setCreatedDate(Timestamp.from(Instant.now()));

        h.setLastModifiedBy(username);
        h.setLastModifiedDate(Timestamp.from(Instant.now()));

        try {
            em.persist(h);
        } catch (Exception e) {
            ConstraintViolationException ve = (ConstraintViolationException) e.getCause();
            Set<ConstraintViolation<?>> violations = ve.getConstraintViolations();
            LOGGER.log(Level.SEVERE, violations.toString());
        }
    }

    @Override
    public void edit(HemEmailNotification h, String username) {
        h.setLastModifiedBy(username);
       

        em.merge(h);
    }

    @Override
    public void remove(HemEmailNotification h, String username) {
        h.setArchived(true);
        h.setArchivedBy(username);
        h.setArchivedDate(Timestamp.from(Instant.now()));

        edit(h);
    }
}
