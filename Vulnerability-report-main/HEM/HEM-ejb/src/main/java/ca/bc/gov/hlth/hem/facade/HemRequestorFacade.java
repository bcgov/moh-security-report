package ca.bc.gov.hlth.hem.facade;

import ca.bc.gov.hlth.hem.entity.HemRequestor;
import java.sql.Timestamp;
import java.time.Instant;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import java.time.LocalDateTime;
import java.util.List;

@Stateless
public class HemRequestorFacade extends AbstractFacade<HemRequestor> implements HemRequestorFacadeLocal {

    @PersistenceContext(unitName = "HEM-pu")
    private EntityManager em;

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public HemRequestorFacade() {
        super(HemRequestor.class);
    }

    @Override
    public void create(HemRequestor hemRequestor, String username) {
        hemRequestor.setCreatedBy(username);
        hemRequestor.setCreatedDate(Timestamp.from(Instant.now()));

        hemRequestor.setLastModifiedBy(username);
        hemRequestor.setLastModifiedDate(Timestamp.from(Instant.now()));

        em.persist(hemRequestor);
    }

    @Override
    public void edit(HemRequestor hemRequestor, String username) {
        hemRequestor.setLastModifiedBy(username);
        hemRequestor.setLastModifiedDate(Timestamp.from(Instant.now()));

        em.merge(hemRequestor);
    }

    /**
     * The method remove archive the record instead of deleting it
     *
     * @param hemRequestor to archive
     */
    @Override
    public void remove(HemRequestor hemRequestor, String username) {
        hemRequestor.setArchived(true);
        hemRequestor.setArchivedBy(username);
        hemRequestor.setArchivedDate(Timestamp.from(Instant.now()));

        //em.merge(hemRequestor);
        edit(hemRequestor);
    }

    /**
     * Find a requestor by his object representation
     *
     * @param id Object requestor
     * @return return the requestor by his object representation
     */
    @Override
    public HemRequestor find(Object id) {
        return em.find(ca.bc.gov.hlth.hem.entity.HemRequestor.class, id);
    }

    @Override
    public List<HemRequestor> findAll() {
        Query query = em.createNamedQuery("HemRequestor.findAll");
        query.setParameter("archived", false);

        return query.getResultList();
    }

    /**
     * Get the requestor by his id.
     *
     * @param id Integer requestor id
     * @return return a requestor.
     */
    @Override
    public HemRequestor findByRequestorId(Integer id) {
        Query query = em.createNamedQuery("HemRequestor.findByRequestorId");
        query.setParameter("requestorId", id);

        return (HemRequestor)query.getSingleResult();
    }

    /**
     * Get a liust of requestors by their names
     *
     * @param param String requestor name
     * @return return a list of requestor by their names
     */
    @Override
    public List<HemRequestor> findByRequestorName(String param) {
        Query query = em.createNamedQuery("HemRequestor.findByRequestorName");
        query.setParameter("requestorName", param);

        return query.getResultList();
    }

    @Override
    public boolean isRequestorInUse(HemRequestor hemRequestor) {
        return !hemRequestor.getHemChangeRequestList().isEmpty();
    }
}
