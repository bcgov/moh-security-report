/*
 * *********************************************************************************************************************
 *  Copyright (c) 2017, Ministry of Health, BC.                                                 *
 *                                                                                                                     *
 *  All rights reserved.                                                                                               *
 *    This information contained herein may not be used in whole                                                       *
 *    or in part without the express written consent of the                                                            *
 *    Government of British Columbia, Canada.                                                                          *
 *                                                                                                                     *
 *  Revision Control Information                                                                                       *
 *  File:                $Id::                                                                                       $ *
 *  Date of Last Commit: $Date::                                                                                     $ *
 *  Revision Number:     $Rev::                                                                                      $ *
 *  Last Commit by:      $Author::                                                                                   $ *
 *                                                                                                                     *
 * *********************************************************************************************************************
 */
package ca.bc.gov.hlth.hem.facade;

import ca.bc.gov.hlth.hem.entity.HemEnvironment;
import ca.bc.gov.hlth.hem.entity.HemServer;
import java.sql.Timestamp;
import java.time.Instant;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import java.time.LocalDateTime;
import java.util.List;

/**
 *
 * @author CGI Information Management Consultants Inc.
 */
@Stateless
public class HemServerFacade extends AbstractFacade<HemServer> implements HemServerFacadeLocal {

    @PersistenceContext(unitName = "HEM-pu")
    private EntityManager em;

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public HemServerFacade() {
        super(HemServer.class);
    }

    @Override
    public void create(HemServer h, String username) {
        h.setCreatedBy(username);
        h.setCreatedDate(Timestamp.from(Instant.now()));

        h.setLastModifiedBy(username);
        h.setLastModifiedDate(Timestamp.from(Instant.now()));
        h.setServerType("Update type");
        h.setServerAddress("Update server address");
        h.setAuthenticationMethod("Update auth method");
        
        em.persist(h);
    }

    @Override
    public void edit(HemServer h, String username) {
        h.setLastModifiedBy(username);
        h.setLastModifiedDate(Timestamp.from(Instant.now()));
        if (h.getServerType().isBlank()){
            h.setServerType("Update type");
        }
        if (h.getServerAddress().isBlank()){
            h.setServerAddress("Update server address");
        }
        if (h.getAuthenticationMethod().isBlank()){
            h.setAuthenticationMethod("Update auth method");
        }
        
        em.merge(h);
    }

    @Override
    public void remove(HemServer h, String username) {
        h.setArchived(true);
        h.setArchivedBy(username);
        h.setArchivedDate(Timestamp.from(Instant.now()));

        edit(h);
    }

    /**
     * Get a server by his object representation
     *
     * @param id Object server
     * @return return a server by his object representation
     */
    @Override
    public HemServer find(Object id) {
        return em.find(ca.bc.gov.hlth.hem.entity.HemServer.class, id);
    }

    @Override
    public List<HemServer> findAll() {
        Query query = em.createNamedQuery("HemServer.findAll");
        query.setParameter("archived", false);

        return query.getResultList();
    }

    /**
     * Get a list of servers by their names
     *
     * @param param String server name
     * @return return a list of servers by their names
     */
    @Override
    public List<HemServer> findByServerName(String param) {
        Query query = em.createNamedQuery("HemServer.findByServerName");
        query.setParameter("serverName", param);
        return query.getResultList();
    }

    /**
     * Get a list of servers by their environment names
     *
     * @param param String environement
     * @return return a list of servers by their environement name
     */
    @Override
    public List<HemServer> findByEnvironment(HemEnvironment param) {
        Query query = em.createNamedQuery("HemServer.findByEnvironment");
        query.setParameter("hemEnvironment", param);
        return query.getResultList();
    }

    /**
     * Get the list of distinct environments of server
     *
     * @return return the list of distincts environments of server
     */
    @Override
    public List<String> findEnvironmentsAsString() {
        String querySQL = "SELECT he.environmentName FROM HemEnvironment he ORDER BY he.environmentName";
        Query query = em.createQuery(querySQL);
        return query.getResultList();
    }

    @Override
    public boolean isServerExists(String serverName, int serverId) {
        Query query = em.createNamedQuery("HemServer.findExistingServer");
        query.setParameter("serverName", serverName);
        query.setParameter("serverId", serverId);
        return (query.getResultList().size() > 0);
    }

    @Override
    public boolean isServerInUse(HemServer hemServer) {
        return !hemServer.getHemChangeRequestList().isEmpty();
    }
}
