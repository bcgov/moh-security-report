/**
 *
 * @author CGI Information Management Consultants Inc.
 */
package ca.bc.gov.hlth.hem.utils;

import java.io.IOException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.Properties;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

public class EmailHelper {

    private static final String MOHBANNER = "images/mohbanner.png";

    // SMTP basic configuration
    private static final String PRP_MAIL_HOST = "mail.smtp.host";
    private static final String PRP_MAIL_PORT = "mail.smtp.port";
    private static final String PRP_MAIL_AUTH = "mail.smtp.auth";

    // email validation values
    private static final String VALID_CHAR = ";";

    private String[] applications;
    private String environment;
    private Date date;
    private boolean outage;
    private boolean cancelled;
    private boolean postponed;

    private final String sender;
    private final String host;
    private final String port;
    private final boolean debug;

    private Session session;
    private Properties props;

    public EmailHelper(String sender, String host, String port, String debug) {
        super();
        // originating email address
        this.sender = sender;
        // hostname of the machine that has smtp server running
        this.host = host;
        // Mail server port
        this.port = port;
        // turns on/off debugging during sending.
        this.debug = Boolean.parseBoolean(debug);

        // create some properties and get the default Session
        props = new Properties();

        // Use provided host if one is available
        if (this.host != null && !this.host.isEmpty()) {
            props.put(PRP_MAIL_HOST, this.host);
        }

        // Use provided host if one is available
        if (this.port != null && !this.port.isEmpty()) {
            props.put(PRP_MAIL_PORT, this.port);
        }
        props.put(PRP_MAIL_AUTH, "false");

        session = Session.getInstance(props);
        session.setDebug(this.debug);
    }

    public void destroy() {
        props = null;
        session = null;
    }

    /**
     * Creates a simple message in text/plain format and sends it. Destination
     * Email Address(es) for To, Destination Email Address(es) for CC, Message
     * Body and Subject are passed in.
     *
     * @param to
     * @param message
     * @throws ca.bc.gov.hlth.hem.utils.ProcessException
     */
    public void sendEmail(String to, String message) throws ProcessException {
        // Destination email addresses
        checkAddress(to);
        try {
            // create a message
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(sender));
            msg.setRecipients(Message.RecipientType.TO, createList(to));

            msg.setSubject(buildSubject());
            msg.setSentDate(new java.util.Date());
            // create the message text
            MimeMultipart multipart = new MimeMultipart("related");

            // first part (the html)
            BodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart.setContent(message, "text/html");
            // add it
            multipart.addBodyPart(messageBodyPart);

            msg.setContent(multipart);

            // send the message
            Transport.send(msg);

        } catch (MessagingException mex) {
            throw new ProcessException(mex);
        }
    }

    /**
     * Creates a simple message in text/HTML format and sends it. Destination
     * Email Address(es) for To, Destination Email Address(es) for CC, Message
     * Body and Subject are passed in.
     *
     * @param to
     * @param message
     *
     * @throws ca.bc.gov.hlth.hem.utils.ProcessException
     */
    public void sendNotificationEmail(String to, String message) throws ProcessException {
        // Destination email addresses
        checkAddress(to);
        URL url = this.getClass().getResource(MOHBANNER);

        sendAttachment(to, buildSubject(), message, url.getFile());
    }

    /**
     * Creates a simple multipart/mixed message and sends it.One part is
     * text/plain and the other part is an attachment file.Destination Email
     * Address(es), Message, Attachment(directory and file) and Subject are
     * passed in.
     *
     * @param to
     * @param subject
     * @param message
     * @param file
     * @throws ca.bc.gov.hlth.hem.utils.ProcessException
     */
    public void sendAttachment(String to, String subject, String message, String file) throws ProcessException {
        sendAttachment(to, null, subject, message, file);
    }

    /**
     * Creates a simple multipart/mixed message and sends it.One part is
     * text/plain and the other part is an attachment file.Destination Email
     * Address(es) for To, Destination Email Address(es) for CC,, Message,
     * Attachment(directory and file) and Subject are passed in.
     *
     * @param to
     * @param cc
     * @param subject
     * @param file
     * @param message
     * @throws ca.bc.gov.hlth.hem.utils.ProcessException
     */
    public void sendAttachment(String to, String cc, String subject, String message, String file) throws ProcessException {
        checkAddress(to);
        // Destination email addresses
        InternetAddress[] address1 = createList(to);
        InternetAddress[] address2 = null;

        if (cc != null) {
            checkAddress(cc);
            address2 = createList(cc);
        }
        try {
            // create a message
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(sender));
            msg.setRecipients(Message.RecipientType.TO, address1);
            if (address2 != null) {
                msg.setRecipients(Message.RecipientType.CC, address2);
            }
            msg.setSubject(subject);
            msg.setSentDate(new java.util.Date());
            // create the Multipart and its parts to it
            Multipart mp = new MimeMultipart("related");
            // create and fill the first message part
            MimeBodyPart mbp1 = new MimeBodyPart();
            mbp1.setContent(message, "text/html");

            // Create and fill the second message part
            // (Image part of the notification).
            // SEE ca.bc.gov.hlth.hem.facade.HemEmailNotificationFacade.java for value of the CID (Content-ID)
            // when an email is sent to all recipients.
            MimeBodyPart mbp2 = new MimeBodyPart();
            mbp2.setHeader("Content-ID", "MOHBANNERV1");
            mbp2.setDisposition(MimeBodyPart.INLINE);
            mbp2.attachFile(file);

            mp.addBodyPart(mbp1); // mail body of the message
            mp.addBodyPart(mbp2); // Add your attachments here
            // add the Multipart to the message
            msg.setContent(mp);
            // send the message
            Transport.send(msg);
        } catch (IOException | MessagingException ex) {
            throw new ProcessException(ex);
        }
    }

    public void setApplications(String[] applications) {
        this.applications = applications;
    }

    public void setEnvironment(String environment) {
        this.environment = environment;
    }

    public void setDate(Date date) {
        this.date = date;
    }

    public void setOutage(boolean outage) {
        this.outage = outage;
    }

    public void setCancelled(boolean cancelled) {
        this.cancelled = cancelled;
    }

    public void setPostponed(boolean postponed) {
        this.postponed = postponed;
    }

    private String buildSubject() {
        StringBuilder sB = new StringBuilder();

        // Example
        // NOTIFICATION: EMPI/HCIM HI3 Integration (Non-Production) Environment â€“ Wednesday, September 18, 2019
        // OUTAGE Wednesday, April 3, 2019 : EMPI/HCIM HI3 Integration (Non-Production) Environment
        SimpleDateFormat formatter = new SimpleDateFormat("EEEE, MMMMM dd, yyyy");

        /*  if (outage) {
            sB.append("OUTAGE ");
            sB.append(formatter.format(date));
            sB.append(": ");
        } else {
            sB.append("NOTIFICATION: ");
        }*/
        if (outage) {
            sB.append("OUTAGE ");
            sB.append(formatter.format(date));
            sB.append(": ");
        }
        if (cancelled) {
            sB.append("CANCELLED: ");
        }
        if (postponed) {
            sB.append("POSTPONED: ");
        } else {
            sB.append("NOTIFICATION: ");
        }

        if (applications.length > 5) {
            sB.append("MULTIPLE APPLICATIONS");
        } else {
            sB.append(String.join(", ", applications));
        }
        sB.append(" - ");
        sB.append(environment);
        sB.append(" Environment");

        if (!outage) {
            sB.append(" - ");
            sB.append(formatter.format(date));
        }

        return sB.toString();
    }

    // Creates an InternetAddress Array based on addresses from a String list
    private InternetAddress[] createList(String list) {
        ArrayList parsedList = parseList(list);

        InternetAddress[] addresses = new InternetAddress[parsedList.size()];

        for (int i = 0; i < parsedList.size(); i++) {
            InternetAddress address = new InternetAddress();
            address.setAddress((String) parsedList.get(i));
            addresses[i] = address;
        }
        return addresses;
    }

    // Parses out addresses from a String list and put them into an ArrayList
    private ArrayList parseList(String list) {
        ArrayList parsedList = new ArrayList();
        parsedList.addAll(Arrays.asList(list.split(VALID_CHAR)));

        return parsedList;
    }

    private void checkAddress(String sendee) throws ProcessException {
        int index = sendee.indexOf(VALID_CHAR);
        int lastIndex = sendee.lastIndexOf(VALID_CHAR);

        if (sendee.equals("")) {
            throw new ProcessException(new Exception("Email Addresses have not been entered."));
        }

        if (index == 0) {
            throw new ProcessException(
                    new Exception("Email Addresses have been entered incorrectly: " + sendee));
        }

        if (sendee.substring(lastIndex + 1).equals("")) {
            throw new ProcessException(
                    new Exception("Email Addresses have been entered incorrectly: " + sendee));
        }
    }

}
