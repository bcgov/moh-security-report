package ca.bc.gov.hlth.hem.facade;

import ca.bc.gov.hlth.hem.entity.HemChangeCategory;
import java.sql.Timestamp;
import java.time.Instant;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import java.util.List;

@Stateless
public class HemChangeCategoryFacade extends AbstractFacade<HemChangeCategory> implements HemChangeCategoryFacadeLocal {

    @PersistenceContext(unitName = "HEM-pu")
    private EntityManager em;

    public HemChangeCategoryFacade() {
        super(HemChangeCategory.class);
    }

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    @Override
    public List<HemChangeCategory> findAll() {
        Query query = em.createNamedQuery("HemChangeCategory.findAll");
        query.setParameter("archived", false);

        return query.getResultList();
    }

    @Override
    public boolean isCategoryExists(String categoryName, int categoryId) {
        boolean result = false;
        Query query = em.createNamedQuery("HemChangeCategory.findExistingCategory");
        query.setParameter("categoryName", categoryName);
        query.setParameter("categoryId", categoryId);
        if (query.getResultList().size() > 0) {
            result = true;
        }
        return result;
    }

    @Override
    public boolean isCategoryInUse(HemChangeCategory hemChangeCategory) {
        return !hemChangeCategory.getHemChangeRequestList().isEmpty();
    }

    @Override
    public void create(HemChangeCategory h, String username) {
        h.setCreatedBy(username);
        h.setCreatedDate(Timestamp.from(Instant.now()));

        h.setLastModifiedBy(username);
        h.setLastModifiedDate(Timestamp.from(Instant.now()));
        h.setCategoryColor("000000");
        
        em.persist(h);
    }

    @Override
    public void edit(HemChangeCategory h, String username) {
        h.setLastModifiedBy(username);
        h.setLastModifiedDate(Timestamp.from(Instant.now()));
        if (h.getCategoryColor().isBlank()){
            h.setCategoryColor("000000");
        }
        em.merge(h);
    }

    @Override
    public void remove(HemChangeCategory h, String username) {
        h.setArchived(true);
        h.setArchivedBy(username);
        h.setArchivedDate(Timestamp.from(Instant.now()));

        edit(h);
    }
}
