package ca.bc.gov.hlth.hem.facade;

import ca.bc.gov.hlth.hem.entity.HemEnvironment;
import ca.bc.gov.hlth.hem.entity.HemServer;
import java.sql.Timestamp;
import java.time.Instant;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import java.util.List;
import java.util.logging.Logger;

@Stateless
public class HemEnvironmentFacade extends AbstractFacade<HemEnvironment> implements HemEnvironmentFacadeLocal {

    @PersistenceContext(unitName = "HEM-pu")
    private EntityManager em;

    private static final String CLASSNAME = AbstractFacade.class.getSimpleName();
    private static final Logger LOGGER = Logger.getLogger(CLASSNAME);

    @Override
    protected EntityManager getEntityManager() {
        return em;
    }

    public HemEnvironmentFacade() {
        super(HemEnvironment.class);
    }

    /**
     * Find a list of environment by their names
     *
     * @param param String environment name
     * @return return a list of environments by their name
     */
    @Override
    @SuppressWarnings("unchecked")
    public List<HemEnvironment> findByEnvironmentName(String param) {
        Query query = em.createNamedQuery("HemEnvironment.findByEnvironmentName");
        query.setParameter("environmentName", param);
        return query.getResultList();
    }

    /**
     *
     * @param hemEnvironment
     * @return
     */
    @Override
    @SuppressWarnings("unchecked")
    public List<HemServer> findServerByEnvironment(HemEnvironment hemEnvironment) {
        Query query = em.createNamedQuery("HemServer.findByEnvironment");
        query.setParameter("hemEnvironment", hemEnvironment);
        return query.getResultList();
    }

    /**
     *
     * @param environmentName
     * @return
     */
    @Override
    @SuppressWarnings("unchecked")
    public List<HemServer> findServerByEnvironmentName(String environmentName) {
        //TODO : Merge the 2 query into 1
        Query query = em.createNamedQuery("HemEnvironment.findByEnvironmentName");
        query.setParameter("environmentName", environmentName);
        HemEnvironment hemEnvironment = (HemEnvironment) query.getSingleResult();

        query = em.createNamedQuery("HemServer.findByEnvironment");
        query.setParameter("hemEnvironment", hemEnvironment);
        return query.getResultList();
    }

    @Override
    public HemEnvironment find(Object id) {
        return em.find(HemEnvironment.class, id);
    }

    @Override
    public List<HemEnvironment> findAll() {
        Query query = em.createNamedQuery("HemEnvironment.findAll");
        query.setParameter("archived", false);

        return query.getResultList();
    }

    @Override
    public final boolean isEnvironmentExists(final String environmentName, final int environmentId) {
        boolean result = false;
        Query query = em.createNamedQuery("HemEnvironment.findExistingEnvironment");
        query.setParameter("environmentName", environmentName.toUpperCase());
        query.setParameter("environmentId", environmentId);
        if (query.getResultList().size() > 0) {
            result = true;
        }
        return result;
    }

    @Override
    public boolean isEnvironmentInUse(HemEnvironment hemEnvironment) {
        return !(hemEnvironment.getHemChangeRequestList().isEmpty()
                && hemEnvironment.getHemServerList().isEmpty());
    }

    @Override
    public void create(HemEnvironment h, String username) {
        h.setCreatedBy(username);
        h.setCreatedDate(Timestamp.from(Instant.now()));

        h.setLastModifiedBy(username);
        h.setLastModifiedDate(Timestamp.from(Instant.now()));

        em.persist(h);
    }

    @Override
    public void edit(HemEnvironment h, String username) {
        h.setLastModifiedBy(username);
        h.setLastModifiedDate(Timestamp.from(Instant.now()));

        em.merge(h);
    }

    @Override
    public void remove(HemEnvironment h, String username) {
        h.setArchived(true);
        h.setArchivedBy(username);
        h.setArchivedDate(Timestamp.from(Instant.now()));

        edit(h);
    }
}
