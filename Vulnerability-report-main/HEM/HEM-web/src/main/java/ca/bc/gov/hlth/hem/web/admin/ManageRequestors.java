package ca.bc.gov.hlth.hem.web.admin;

import ca.bc.gov.hlth.hem.entity.HemRequestor;
import ca.bc.gov.hlth.hem.facade.HemRequestorFacadeLocal;
import ca.bc.gov.hlth.hem.security.Login;
import org.primefaces.PrimeFaces;
import org.primefaces.event.RowEditEvent;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.inject.Inject;
import javax.inject.Named;
import java.io.Serializable;
import java.util.List;

@Named
@SessionScoped
public class ManageRequestors extends BaseManager implements Serializable {

    @EJB
    private HemRequestorFacadeLocal hemRequestorFacade;

    @Inject
    private Login login;

    private HemRequestor selectedHemRequestor;
    private List<HemRequestor> hemRequestorList;

    ManageRequestors() {
        super(ManageRequestors.class.getSimpleName());
    }

    @PostConstruct
    public void init() {
        logAction("accessed", "admin ManageRequestors");
        hemRequestorList = hemRequestorFacade.findAll();
    }

    public void prepareNewEntity() {
        logAction("accessed", "requestor creation");
        selectedHemRequestor = new HemRequestor();
        PrimeFaces context = PrimeFaces.current();
        context.ajax().update("dialogForm:reqForm:reqPanel");
        context.executeScript("PF('newEntityDialog').show();");
        context.resetInputs("dialogForm:reqForm:reqPanel");
    }

    public void saveNewEntity() {
        hemRequestorFacade.create(selectedHemRequestor, login.getUserName());
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('newEntityDialog').hide();");
        addInfoMessage("Requestor added successfully");
        logAction("saved requestor", selectedHemRequestor.getRequestorName());
    }

    public void onRowEdit(RowEditEvent event) {
        selectedHemRequestor = (HemRequestor) event.getObject();
        logAction("updated requestor", selectedHemRequestor.getRequestorName());
        hemRequestorFacade.edit(selectedHemRequestor, login.getUserName());
        addInfoMessage("Requestor updated successful");

        // To check for any error, the frontend is updated from here
        // not in the xhtml, by using "update" property.
        // This let the web form stays in edit mode.
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('requestors').filter();");
        context.ajax().update("formRequestor:requestors,growl");
    }

    // Action to Delete
    public void callDeleteAction(HemRequestor selectedHemRequestor) {
        this.selectedHemRequestor = selectedHemRequestor;
        this.requestAction = ACTION_DELETE;
    }

    public void executeRequestedAction() {
        switch (requestAction) {
            case ACTION_DELETE:
                removeEntity();
                break;
        }
    }

    private void removeEntity() {
        hemRequestorFacade.remove(selectedHemRequestor, login.getUserName());
        hemRequestorList = hemRequestorFacade.findAll();
        addInfoMessage(String.format("%s deleted successfully", selectedHemRequestor.getRequestorName()));
        logAction("deleted requestor", selectedHemRequestor.getRequestorName());
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('requestors').filter();");
    }

    public void updateData() {
        hemRequestorList = hemRequestorFacade.findAll();
        PrimeFaces context = PrimeFaces.current();
        context.ajax().update("formRequestor:requestors");
    }

    public String getConfirmationMessage() {
        return (selectedHemRequestor == null) ? ""
                : getResourceStringByKey("EntityDeletionConfirmationMessage") + " " + requestAction + " " + selectedHemRequestor.getRequestorName() + "?";
    }

    public HemRequestor getSelectedHemRequestor() {
        return selectedHemRequestor;
    }

    public void setSelectedHemRequestor(HemRequestor selectedHemRequestor) {
        this.selectedHemRequestor = selectedHemRequestor;
    }

    public List<HemRequestor> getHemRequestorList() {
        return hemRequestorList;
    }

    public void setHemRequestorList(List<HemRequestor> hemRequestorList) {
        this.hemRequestorList = hemRequestorList;
    }
}
