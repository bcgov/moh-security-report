package ca.bc.gov.hlth.hem.web.admin;

import ca.bc.gov.hlth.hem.entity.HemEnvironment;
import ca.bc.gov.hlth.hem.facade.HemEnvironmentFacadeLocal;
import ca.bc.gov.hlth.hem.security.Login;
import ca.bc.gov.hlth.hem.web.info.ManageEnvironmentInfo;
import org.primefaces.PrimeFaces;
import org.primefaces.component.datatable.DataTable;
import org.primefaces.event.RowEditEvent;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.inject.Inject;
import javax.inject.Named;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

@Named
@SessionScoped
public class ManageEnvironments extends BaseManager implements Serializable {
    
    @EJB
    private HemEnvironmentFacadeLocal hemEnvironmentFacade;

    @Inject
    private Login login;

    Map<Integer,HemEnvironment> hemEnvironments;
    ManageEnvironmentInfo environmentBeingDeleted = null;
    Map<Integer,ManageEnvironmentInfo> environmentInfos;
    private HemEnvironment selectedHemEnvironment;
    
    ManageEnvironments(){
        super(ManageEnvironments.class.getSimpleName());
    }

    @PostConstruct
    public void init() {
        refreshMapFromEntity();  
        logAction("accessed", "admin ManageEnvironments");
    }

    public void prepareNewEntity() {
        logAction("accessed", "environment creation");
        selectedHemEnvironment = new HemEnvironment();
        init();
        PrimeFaces context = PrimeFaces.current();
        context.ajax().update("dialogForm:envForm:envPanel");
        context.executeScript("PF('newEntityDialog').show();");
        context.resetInputs("dialogForm:envForm:envPanel");
    }

    public void saveNewEntity() {
        hemEnvironmentFacade.create(selectedHemEnvironment, login.getUserName());
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('newEntityDialog').hide();");
        addInfoMessage("Environment added successful");
        logAction("created new environment", selectedHemEnvironment.getEnvironmentName());
    }
    
    // Action to Delete
    public void openDeleteEnvironmentPopup(ManageEnvironmentInfo info) {      
        environmentBeingDeleted = info;
        PrimeFaces context = PrimeFaces.current();
        context.ajax().update("ConfirmDialog");
        context.executeScript("PF('ConfirmDialog').show();");
    }
        
    public void closeDeleteEnvironmentPopup() {
        environmentBeingDeleted = null;
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('ConfirmDialog').hide();");
    }
    
    void refreshRowOfEvent(RowEditEvent event){
        DataTable table = (DataTable)event.getSource();
        int activeRow  = table.getRowIndex();
        refreshReleaseDaysByRow(activeRow);
    }
          
    public void onRowInit(RowEditEvent event){
        ManageEnvironmentInfo envInfo = environmentInfos.get(((ManageEnvironmentInfo) event.getObject()).getEnvironmentId());
        envInfo.setBeingEdited(true);
        refreshRowOfEvent(event);
    }
    
    public void onRowCancel(RowEditEvent event){
        ManageEnvironmentInfo envInfo = environmentInfos.get(((ManageEnvironmentInfo) event.getObject()).getEnvironmentId());
        envInfo.setBeingEdited(false);
        updateInfosFromEntity(envInfo);
        refreshRowOfEvent(event);
    }
        
    public void onRowEdit(RowEditEvent event) {
        
        ManageEnvironmentInfo envInfo = environmentInfos.get(((ManageEnvironmentInfo) event.getObject()).getEnvironmentId());
        logAction("editing environment", envInfo.getEnvironmentName());
        envInfo.setBeingEdited(false);
        updateEntityFromInfos(envInfo);
        refreshRowOfEvent(event);
    }

    public void updateData() { 
        //Refreshing entities
        refreshMapFromEntity();
        //Refreshing interface
        refreshEnvironmentsUI();
    }
    
    public String confirmationMessage() {
        return (environmentBeingDeleted == null) ? ""
                : getResourceStringByKey("EntityDeletionConfirmationMessage") + " " + requestAction + " " + environmentBeingDeleted.getEnvironmentName() + "?";
    }
    
    public void removeEntity() {
        HemEnvironment currentEnv = hemEnvironments.get(environmentBeingDeleted.getEnvironmentId());
        
        if (!hemEnvironmentFacade.isEnvironmentInUse(currentEnv)) {
            hemEnvironmentFacade.remove(currentEnv, login.getUserName());
            addInfoMessage(String.format("%s deleted successfully", environmentBeingDeleted.getEnvironmentName()));
            logAction("deleted environment", environmentBeingDeleted.getEnvironmentName());
            environmentInfos.remove(environmentBeingDeleted.getEnvironmentId());           
        } else {
            addErrorMessage("Environment bind to a task. Deletion not possible.");
        }
                
        refreshEnvironmentsUI();
        closeDeleteEnvironmentPopup();
    }
    
    public List<ManageEnvironmentInfo> getEnvironmentInfos() {
        return new ArrayList(environmentInfos.values());
    }
    
    void refreshEnvironmentsUI(){
        PrimeFaces.current().ajax().update("formEnvironment:environments");
    }
    
    void refreshReleaseDaysByRow(int rowNum){
        PrimeFaces context = PrimeFaces.current();
        context.ajax().update("formEnvironment:environments:"+rowNum+":sundayCheckbox");
        context.ajax().update("formEnvironment:environments:"+rowNum+":mondayCheckbox");
        context.ajax().update("formEnvironment:environments:"+rowNum+":tuesdayCheckbox");
        context.ajax().update("formEnvironment:environments:"+rowNum+":wednesdayCheckbox");
        context.ajax().update("formEnvironment:environments:"+rowNum+":thursdayCheckbox");
        context.ajax().update("formEnvironment:environments:"+rowNum+":fridayCheckbox");
        context.ajax().update("formEnvironment:environments:"+rowNum+":saturdayCheckbox");
        
        context.ajax().update("formEnvironment:environments:"+rowNum+":releaseWindowInput");
    }
   
    void updateEntityFromInfos(ManageEnvironmentInfo infos) {
        if( infos == null || !hemEnvironments.containsKey(infos.getEnvironmentId())){
            Logger.getLogger(className).log(Level.WARNING, "Provided EnvironmentInfo data is either null or inexistant in loaded HemEnvironments");
            return;
        }
        HemEnvironment env = hemEnvironments.get(infos.getEnvironmentId());
        infos.updateEnvironmentFromInfo(hemEnvironmentFacade, env, login);
    }    
    
    void updateInfosFromEntity(ManageEnvironmentInfo infos) {
        if( infos == null || !hemEnvironments.containsKey(infos.getEnvironmentId())){
            Logger.getLogger(className).log(Level.WARNING, "Provided EnvironmentInfo data is either null or inexistant in loaded HemEnvironments");
            return;
        }
        HemEnvironment env = hemEnvironments.get(infos.getEnvironmentId());
        infos.updateInfoFromEnvironment(hemEnvironmentFacade, env);
    }
    
    void refreshMapFromEntity() {
        hemEnvironments = new HashMap<>();
        environmentInfos = new HashMap<>();
        ManageEnvironmentInfo iterator;
        for(HemEnvironment env : hemEnvironmentFacade.findAll()) {
            iterator = new ManageEnvironmentInfo(hemEnvironmentFacade,env);
            environmentInfos.put(env.getEnvironmentId(), iterator);
            hemEnvironments.put(env.getEnvironmentId(), env);
        }
    }

    public HemEnvironment getSelectedHemEnvironment() {
        return selectedHemEnvironment;
    }

    public void setSelectedHemEnvironment(HemEnvironment selectedHemEnvironment) {
        this.selectedHemEnvironment = selectedHemEnvironment;
    }
}