/*
 * *********************************************************************************************************************
 *  Copyright (c) 2017, Ministry of Health, BC.                                                                        *
 *                                                                                                                     *
 *  All rights reserved.                                                                                               *
 *    This information contained herein may not be used in whole                                                       *
 *    or in part without the express written consent of the                                                            *
 *    Government of British Columbia, Canada.                                                                          *
 *                                                                                                                     *
 *  Revision Control Information                                                                                       *
 *  File:                $Id::                                                                                       $ *
 *  Date of Last Commit: $Date::                                                                                     $ *
 *  Revision Number:     $Rev::                                                                                      $ *
 *  Last Commit by:      $Author::                                                                                   $ *
 *                                                                                                                     *
 * *********************************************************************************************************************
 */
package ca.bc.gov.hlth.hem.web;

import ca.bc.gov.hlth.hem.entity.HemChangeCategory;
import ca.bc.gov.hlth.hem.entity.HemChangeRequest;
import ca.bc.gov.hlth.hem.entity.HemEmailNotification;
import ca.bc.gov.hlth.hem.entity.HemEnvironment;
import ca.bc.gov.hlth.hem.entity.HemTeam;
import ca.bc.gov.hlth.hem.entity.HemUser;
import ca.bc.gov.hlth.hem.jsf.BaseBean;
import ca.bc.gov.hlth.hem.security.Login;
import ca.bc.gov.hlth.hem.facade.HemChangeCategoryFacadeLocal;
import ca.bc.gov.hlth.hem.facade.HemChangeRequestFacadeLocal;
import ca.bc.gov.hlth.hem.facade.HemEnvironmentFacadeLocal;
import ca.bc.gov.hlth.hem.facade.HemTeamFacadeLocal;
import ca.bc.gov.hlth.hem.facade.HemUserFacadeLocal;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.time.LocalDateTime;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.faces.event.AjaxBehaviorEvent;
import javax.inject.Inject;
import org.primefaces.PrimeFaces;
import org.primefaces.event.SelectEvent;
import org.primefaces.model.DefaultScheduleEvent;
import org.primefaces.model.DefaultScheduleModel;
import org.primefaces.model.ScheduleEvent;
import org.primefaces.model.ScheduleModel;
import ca.bc.gov.hlth.hem.utils.DateRounding;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import javax.enterprise.context.SessionScoped;
import javax.faces.event.ActionEvent;
import javax.inject.Named;

/**
 * Main class for HEM
 *
 * @author CGI Information Management Consultants Inc.
 */
@Named("Scheduler")
@SessionScoped
public class Scheduler extends BaseBean implements Serializable {

    private static final String CLASSNAME = Scheduler.class.getSimpleName();
    private static final Logger LOGGER = Logger.getLogger(CLASSNAME);

    /* Facade for persistence */
    @EJB
    private HemChangeRequestFacadeLocal changeReqFacade;
    @EJB
    private HemEnvironmentFacadeLocal environmentFacade;
    @EJB
    private HemChangeCategoryFacadeLocal changeCatFacade;
    @EJB
    private HemUserFacadeLocal userFacade;
    @EJB
    private HemTeamFacadeLocal teamFacade;

    @Inject
    private ChangeRequest changeRequest;

    // Current
    @Inject
    private Login loginUser;
    private HemUser currentUser;
    private List<HemTeam> currentUserTeams;

    // Model for schedule and task.
    private DefaultScheduleModel viewTaskModel;
    private ScheduleEvent task = new DefaultScheduleEvent();

    // Date navigation for weekview and 3 months view.
    private Date threeMonthDate = new Date();
    private Date weekView = new Date();

    // Tab Index
    private Integer currentTabIndex = 0;
    private String view = "agendaWeek";

    // Filter variables
    private boolean approvalFilter = false;
    private boolean onDemandFilter = false;
    private boolean assignedToMe = false;
    private boolean assignedToMyTeams = false;

    // Droplist variables
    private List<HemEnvironment> environmentList;
    private List<HemEnvironment> scheduleSelectedEnvironmentFilter = new ArrayList<>();
    private List<HemChangeCategory> categoryList;
    private List<HemChangeCategory> scheduleSelectedCategoryFilter = new ArrayList<>();

    // Dialog variables
    private String dialogContent;
    private String headerDialog;

    // List of tasks
    private List<HemChangeRequest> hemChangeRequestList = new ArrayList<>();

    // Current objects
    private HemChangeRequest selectedHemChangeRequest;

    private Integer numFiltersApplied = 0;
    private String customCss = "";

    // 
    /**
     * Class constructor using annotation
     */
    @PostConstruct
    public void init() {
        environmentList = environmentFacade.findAll();
        categoryList = changeCatFacade.findAll();

        // Instantiate Schedule Controller and Lists
        viewTaskModel = new DefaultScheduleModel();

        // Limiting the number of events to not clogg the schedule.
        viewTaskModel.setEventLimit(true);

        currentUser = userFacade.findByUserName(loginUser.getLoginUserName());
        currentUserTeams = teamFacade.findByUser(currentUser);

        //Set the current day
        today();
        //Read the data
        readTaskData();
    }

    public Integer getCurrentTabIndex() {
        return currentTabIndex;
    }

    public void setCurrentTabIndex(Integer currentTabIndex) {
        this.currentTabIndex = currentTabIndex;
    }

    public void filter(AjaxBehaviorEvent event) {
        readTaskData();
        calculateAppliedFiltersNumber();
    }

    public String getEvents() {
        return Arrays.toString(viewTaskModel.getEvents().toArray());
    }

    public void close() {
        readTaskData();
        dialogContent = "";
        headerDialog = "";
    }

    // -----------------------
    //
    // Event handlers for task
    //
    // -----------------------
    public void onTaskSelect(SelectEvent selectEvent) {
        task = (ScheduleEvent) selectEvent.getObject();

        Calendar localCalendar = Calendar.getInstance();
        localCalendar.setTime(convertLocalDateTimeToDateUsingInstant(task.getStartDate()));
        localCalendar.add(Calendar.DAY_OF_WEEK, 1);
        weekView = localCalendar.getTime();

        selectedHemChangeRequest = (HemChangeRequest) task.getData();
        this.dialogContent = "ChangeRequest.xhtml";
        this.headerDialog = getResourceStringByKey("headerViewChangeRequest");
        changeRequest.setSelectedHemChangeRequest(selectedHemChangeRequest);
        LOGGER.log(Level.INFO, "{0} is displaying/editing the Change request #{1}.",
                new Object[]{
                    loginUser.getLoginUserName(),
                    selectedHemChangeRequest.getChangeReqId()
                }
        );
    }

    private Date convertLocalDateTimeToDateUsingInstant(LocalDateTime dateToConvert) {
        return java.util.Date
                .from(dateToConvert.atZone(ZoneId.systemDefault())
                        .toInstant());
    }
    
    public LocalDate convertToLocalDateViaInstant(Date dateToConvert) {
    return dateToConvert.toInstant()
      .atZone(ZoneId.systemDefault())
      .toLocalDate();
}
    
    public Date convertFromLocalDateToDateViaInstant(LocalDate dateToConvert) {
    return java.util.Date.from(dateToConvert.atStartOfDay()
      .atZone(ZoneId.systemDefault())
      .toInstant());
}

    public void onDateSelect(SelectEvent selectEvent) {
        Calendar selectedDate = Calendar.getInstance();
        selectedDate.setTime(convertLocalDateTimeToDateUsingInstant((LocalDateTime)selectEvent.getObject()));
        weekView = selectedDate.getTime();

        SimpleDateFormat formatter = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
        LOGGER.log(Level.INFO, "{0} selected date ({1}).",
                new Object[]{
                    loginUser.getLoginUserName(),
                    formatter.format(weekView)}
        );

        //Check if we have an object for this date
        int countObject = 0;
        List hemChangeRequestListTmp = changeReqFacade.filtersData(
                weekView,
                weekView,
                scheduleSelectedEnvironmentFilter,
                scheduleSelectedCategoryFilter,
                approvalFilter,
                onDemandFilter,
                (assignedToMe) ? currentUser : null,
                (assignedToMyTeams) ? currentUserTeams : null);

        if (hemChangeRequestList != null) {
            countObject = hemChangeRequestListTmp.size();
        }
        if (countObject == 0) {
            LOGGER.log(Level.INFO, "{0} is accessing the Change request form in creation mode.",
                    loginUser.getLoginUserName());
            this.dialogContent = "ChangeRequest.xhtml";
            this.headerDialog = getResourceStringByKey("headerNewChangeRequest");
            selectedHemChangeRequest = new HemChangeRequest();
            selectedHemChangeRequest.setStartDate(DateRounding.getNearestHourQuarter(weekView));
            selectedHemChangeRequest.setEndDate(DateRounding.getNearestHourQuarter(weekView));
            selectedHemChangeRequest.setTimeRequired(BigDecimal.ZERO);

            //Already prepare a new email notification for future process.
            HemEmailNotification selectedHemEmailNotification = new HemEmailNotification();
            selectedHemEmailNotification.setEmailSourceType(0);
            selectedHemEmailNotification.setNotificationLevel(0);
            selectedHemChangeRequest.setHemEmailNotification(selectedHemEmailNotification);

            changeRequest.setSelectedHemChangeRequest(selectedHemChangeRequest);

            PrimeFaces.current().ajax().update("schedulerDialog");
            PrimeFaces.current().executeScript("PF('schedulerDialog').show();");
        }
    }
    // Method to create new task

    public void callNewChangeRequest() {
        LOGGER.log(Level.INFO, "{0} is accessing the Change request form in creation mode.",
                loginUser.getLoginUserName());
        this.dialogContent = "ChangeRequest.xhtml";
        this.headerDialog = getResourceStringByKey("headerNewChangeRequest");
        selectedHemChangeRequest = new HemChangeRequest();
        selectedHemChangeRequest.setStartDate(DateRounding.getNearestHourQuarter(new Date()));
        selectedHemChangeRequest.setEndDate(DateRounding.getNearestHourQuarter(new Date()));
        selectedHemChangeRequest.setTimeRequired(BigDecimal.ZERO);

        //Already prepare a new email notification for future process.
        HemEmailNotification selectedHemEmailNotification = new HemEmailNotification();
        selectedHemEmailNotification.setEmailSourceType(0);
        selectedHemEmailNotification.setNotificationLevel(0);
        selectedHemChangeRequest.setHemEmailNotification(selectedHemEmailNotification);

        changeRequest.setSelectedHemChangeRequest(selectedHemChangeRequest);
    }

    // Get the previous month from the current date
    public LocalDate getFirstMonthView() {
        Calendar localCalendar = Calendar.getInstance();
        localCalendar.setTime(threeMonthDate);
        localCalendar.add(Calendar.MONTH, -1);
        return convertToLocalDateViaInstant(localCalendar.getTime());
    }

    // Get the current month
    public LocalDate getSecondMonthView() {
        return convertToLocalDateViaInstant(threeMonthDate);
        
    }

    // Get the next month from the current date
    public LocalDate getThirdMonthView() {
        Calendar localCalendar = Calendar.getInstance();
        localCalendar.setTime(threeMonthDate);
        localCalendar.add(Calendar.MONTH, 1);
        return convertToLocalDateViaInstant(localCalendar.getTime());
    }

    // Increment the current date to the next month for the 3 month view
    public void incrementThreeMonthView() {
        calculateScheduleDate(1);
    }

    // Decrement the current date to the next month for the 3 month view
    public void decrementThreeMonthView() {
        calculateScheduleDate(-1);
    }

    public LocalDate getWeekViewDate() {
        return convertToLocalDateViaInstant(weekView);
    }

    public String getView() {
        return view;
    }

    public void setView(String view) {
        this.view = view;
    }

    public void selectView(ActionEvent event) {
        String newView = (String) event.getComponent().getAttributes().get("view");
        this.setView(newView);
    }

    public void incrementSingleWeekViewScheduleDate() {
        calculateSingleWeekViewScheduleDate(1);
    }

    public void decrementSingleWeekViewScheduleDate() {
        calculateSingleWeekViewScheduleDate(-1);
    }

    public void today() {
        Calendar localCalendar = Calendar.getInstance();
        weekView = localCalendar.getTime();
        threeMonthDate = localCalendar.getTime();
    }

    // Task model applicable to all schedule object in scheduler.xhtml
    public ScheduleModel getTaskModel() {
        return viewTaskModel;
    }

    public void setTaskModel(ScheduleModel taskModel) {
        this.viewTaskModel = (DefaultScheduleModel) taskModel;
    }

    public Integer getNumFiltersApplied() {
        return numFiltersApplied;
    }

    public Integer setNumFiltersApplied(Integer numFiltersApplied) {
        return this.numFiltersApplied = numFiltersApplied;
    }

    // Filters
    public void resetFilters() {
        approvalFilter = false;
        onDemandFilter = false;
        assignedToMe = false;
        assignedToMyTeams = false;
        scheduleSelectedEnvironmentFilter = new ArrayList<>();
        scheduleSelectedCategoryFilter = new ArrayList<>();
        readTaskData();
        calculateAppliedFiltersNumber();
    }

    private void calculateAppliedFiltersNumber() {
        numFiltersApplied = 0;
        numFiltersApplied += (scheduleSelectedEnvironmentFilter != null && !scheduleSelectedEnvironmentFilter.isEmpty()) ? scheduleSelectedEnvironmentFilter.size() : 0;
        numFiltersApplied += (scheduleSelectedCategoryFilter != null && !scheduleSelectedCategoryFilter.isEmpty()) ? scheduleSelectedCategoryFilter.size() : 0;
        numFiltersApplied += approvalFilter ? 1 : 0;
        numFiltersApplied += assignedToMe ? 1 : 0;
        numFiltersApplied += assignedToMyTeams ? 1 : 0;
        numFiltersApplied += onDemandFilter ? 1 : 0;
    }

    public boolean isApprovalFilter() {
        return approvalFilter;
    }

    public void setApprovalFilter(boolean approvalFilter) {
        calculateAppliedFiltersNumber();
        this.approvalFilter = approvalFilter;
    }

    public boolean isOnDemand() {
        return onDemandFilter;
    }

    public void setOnDemand(boolean onDemand) {
        calculateAppliedFiltersNumber();
        this.onDemandFilter = onDemand;
    }

    public boolean isAssignedToMe() {
        return assignedToMe;
    }

    public void setAssignedToMe(boolean assignedToMe) {
        calculateAppliedFiltersNumber();
        this.assignedToMe = assignedToMe;
    }

    public boolean isAssignedToMyTeams() {
        return assignedToMyTeams;
    }

    public void setAssignedToMyTeams(boolean assignedToMyTeams) {
        calculateAppliedFiltersNumber();
        this.assignedToMyTeams = assignedToMyTeams;
    }

    // Data for filters
    public List<HemEnvironment> getScheduleSelectedEnvironmentFilter() {
        return scheduleSelectedEnvironmentFilter;
    }

    public void setScheduleSelectedEnvironmentFilter(List<HemEnvironment> scheduleSelectedEnvironmentFilter) {
        calculateAppliedFiltersNumber();
        this.scheduleSelectedEnvironmentFilter = scheduleSelectedEnvironmentFilter;
    }

    public List<HemChangeCategory> getScheduleSelectedCategoryFilter() {
        return scheduleSelectedCategoryFilter;
    }

    public void setScheduleSelectedCategoryFilter(List<HemChangeCategory> scheduleSelectedCategoryFilter) {
        calculateAppliedFiltersNumber();
        this.scheduleSelectedCategoryFilter = scheduleSelectedCategoryFilter;
    }

    // Getter/setter for current object
    public HemChangeRequest getSelectedHemChangeRequest() {
        return selectedHemChangeRequest;
    }

    public void setSelectedHemChangeRequest(HemChangeRequest selectedHemChangeRequest) {
        this.selectedHemChangeRequest = selectedHemChangeRequest;
    }

    // Data list for filter
    public List<HemEnvironment> getEnvironmentList() {
        return environmentList;
    }

    public void setEnvironmentList(List<HemEnvironment> environmentList) {
        this.environmentList = environmentList;
    }

    public List<HemChangeCategory> getCategoryList() {
        return categoryList;
    }

    public void setCategoryList(List<HemChangeCategory> categoryList) {
        this.categoryList = categoryList;
    }

    public ChangeRequest getChangeRequest() {
        return changeRequest;
    }

    public void setChangeRequest(ChangeRequest changeRequest) {
        this.changeRequest = changeRequest;
    }

    // Content & header for task forms
    public String getDialogContent() {
        return dialogContent;
    }

    public void setDialogContent(String dialogContent) {
        this.dialogContent = dialogContent;
    }

    public String getHeaderDialog() {
        return headerDialog;
    }

    public void setHeaderDialog(String headerDialog) {
        this.headerDialog = headerDialog;
    }

    // private method
    private void readTaskData() {
        hemChangeRequestList = null;
        viewTaskModel.clear();

        hemChangeRequestList = changeReqFacade.filtersData(
                convertFromLocalDateToDateViaInstant(getFirstMonthView()),
                convertFromLocalDateToDateViaInstant(getFirstMonthView()),
                scheduleSelectedEnvironmentFilter,
                scheduleSelectedCategoryFilter,
                approvalFilter,
                onDemandFilter,
                (assignedToMe) ? currentUser : null,
                (assignedToMyTeams) ? currentUserTeams : null
        );

        if (hemChangeRequestList != null) {
            addChangeRequestEvents(hemChangeRequestList);
        }

        generateCategoryCSS();
    }

    /**
     * Validate if both category name and color can be used to generate a
     * working CSS specification for said category
     *
     */
    private boolean isCategoryNameValidForCSS(String categoryName, String categoryColor) {
        return !(categoryName == null || categoryName.isEmpty() || categoryColor == null || categoryColor.isEmpty());
    }

    /**
     * Format HemCategoryName to be used for a CSS div.
     * <p>
     * EX : 'Out Of Order' -> 'category-outoforder'
     *
     */
    private String getFormattedCategoryName(String categoryName) {

        if (categoryName == null) {
            return null;
        }

        //We strip whitespaces and special caracters to avoid odd names and issues
        String formattedName = categoryName.replaceAll("[^A-Za-z0-9]", "");

        formattedName = "category-" + formattedName.toLowerCase();

        return formattedName;
    }

    /**
     * Dynamically generate a style sheet to allow user-defined color for
     * specified category of events on calendar.
     * <p>
     * The sheet is added via injected Javascript to the current page
     *
     */
    private void generateCategoryCSS() {
        StringBuilder cssContent = new StringBuilder();
        getCategoryList().forEach((category) -> {
            String categoryName = category.getCategoryName();
            String categoryColor = category.getCategoryColor();
            if (isCategoryNameValidForCSS(categoryName, categoryColor)) {
                categoryName = getFormattedCategoryName(categoryName);
                categoryColor = categoryColor.replaceAll("[^A-Za-z0-9]", "");
                String buildString = ".%1$s { background-color: #%2$s !important; border-color: #%2$s !important; }";
                cssContent.append(String.format(buildString, categoryName, categoryColor));
            }
        });
        customCss = cssContent.toString();
    }

    private void addChangeRequestEvents(List<HemChangeRequest> hemChangeReqList) {

        hemChangeReqList = changeReqFacade.findAll();

        for (HemChangeRequest hemChangeRequestTemporary : hemChangeReqList) {

            StringBuilder productNames = new StringBuilder();
            StringBuilder productNames2 = new StringBuilder();
            int numOfProducts = hemChangeRequestTemporary.getHemProduct().size();

            hemChangeRequestTemporary.getHemProduct().forEach(hP -> {
                productNames.append(hP.getProductName());
                if (numOfProducts > 1) {
                    productNames.append(",");
                }
                productNames2.append("<br />&nbsp;&nbsp;&nbsp;").append(hP.getProductName());
            });

            List<HemUser> changeImplementers = hemChangeRequestTemporary.getChangeImplementers();

            StringBuilder taskTitle = new StringBuilder()
                    .append(hemChangeRequestTemporary.getOnDemand() ? "" : "*")
                    .append(productNames)
                    .append("\r\n")
                    .append(hemChangeRequestTemporary.getHemEnvironment().getEnvironmentName())
                    .append("\r\n")
                    .append(hemChangeRequestTemporary.getHemCategory().getCategoryName())
                    .append(hemChangeRequestTemporary.getOnDemand() ? " (On Demand)" : " (Base Work)");

            DefaultScheduleEvent newTask = new DefaultScheduleEvent();
            newTask.setTitle(taskTitle.toString());
            newTask.setStartDate(convertToLocalDateTimeViaInstant(hemChangeRequestTemporary.getStartDate()));
            newTask.setEndDate(convertToLocalDateTimeViaInstant(hemChangeRequestTemporary.getEndDate()));
                    
 
            
            StringBuilder toolTipInfo = new StringBuilder()
                    .append("Product Name: ")
                    .append(productNames2)
                    .append("<br />Environment: ")
                    .append(hemChangeRequestTemporary.getHemEnvironment().getEnvironmentName())
                    .append("<br />Category: ")
                    .append(hemChangeRequestTemporary.getHemCategory().getCategoryName())
                    .append(hemChangeRequestTemporary.getOnDemand() ? " (On Demand)" : " (Base Work)")
                    .append("<br />Change Implementers: <br />&nbsp;&nbsp;&nbsp;")
                    .append(getUserNamesFromUserList(changeImplementers, "<br />&nbsp;&nbsp;&nbsp;"))
                    .append("<br />Email Status: ")
                    .append(hemChangeRequestTemporary.getHemEmailNotification().getNotificationLevelStatus());

            newTask.setDescription(toolTipInfo.toString());
            newTask.setData(hemChangeRequestTemporary);

            // Set the specific CSS class by category level.
            String categoryName = hemChangeRequestTemporary.getHemCategory().getCategoryName();
            categoryName = getFormattedCategoryName(categoryName);
            int status = hemChangeRequestTemporary.getHemEmailNotification().getNotificationLevel();
            String statusClass;
            switch (status) {
                case 0:
                    statusClass = "not_started";
                    break;
                case 1:
                    statusClass = "sent";
                    break;
                case 2:
                    statusClass = "in_progress";
                    break;
                case 3:
                    statusClass = "closed";
                    break;
                default:
                    statusClass = "";

            }
            newTask.setStyleClass(categoryName + " " + statusClass);

            viewTaskModel.addEvent(newTask);
        }
    }
    
    private LocalDateTime convertToLocalDateTimeViaInstant(Date dateToConvert) {
        return dateToConvert.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
    }

    private void calculateScheduleDate(int timeLapse) {
        Calendar localCalendar = Calendar.getInstance();
        localCalendar.setTime(threeMonthDate);
        localCalendar.add(Calendar.MONTH, timeLapse);
        threeMonthDate = localCalendar.getTime();
        localCalendar.setTime(weekView);
        localCalendar.add(Calendar.MONTH, timeLapse);
        weekView = localCalendar.getTime();
    }

    private void calculateSingleWeekViewScheduleDate(int timeLapse) {
        Calendar localCalendar = Calendar.getInstance();
        switch (view) {
            case "timeGridDay": //agendaDay
                localCalendar.setTime(weekView);
                localCalendar.add(Calendar.DAY_OF_YEAR, timeLapse);
                weekView = localCalendar.getTime();
                localCalendar.setTime(threeMonthDate);
                localCalendar.add(Calendar.DAY_OF_YEAR, timeLapse);
                threeMonthDate = localCalendar.getTime();
                break;
            case "timeGridWeek": //agendaWeek
                localCalendar.setTime(weekView);
                localCalendar.add(Calendar.WEEK_OF_YEAR, timeLapse);
                weekView = localCalendar.getTime();
                localCalendar.setTime(threeMonthDate);
                localCalendar.add(Calendar.WEEK_OF_YEAR, timeLapse);
                threeMonthDate = localCalendar.getTime();
                break;

            case "dayGridMonth": //just added this one 
                localCalendar.setTime(weekView);
                localCalendar.add(Calendar.MONTH, timeLapse);
                weekView = localCalendar.getTime();
                localCalendar.setTime(threeMonthDate);
                localCalendar.add(Calendar.MONTH, timeLapse);
                threeMonthDate = localCalendar.getTime();
                break;

            default:
                localCalendar.setTime(weekView);
                localCalendar.add(Calendar.WEEK_OF_YEAR, timeLapse);
                weekView = localCalendar.getTime();
                localCalendar.setTime(threeMonthDate);
                localCalendar.add(Calendar.WEEK_OF_YEAR, timeLapse);
                threeMonthDate = localCalendar.getTime();
                break;

        }
    }

    private StringBuilder getUserNamesFromUserList(List<HemUser> users, String separator) {
        StringBuilder sb = new StringBuilder();
        boolean first = true;
        for (HemUser user : users) {
            if (first) {
                first = false;
            } else {
                sb.append(separator);
            }
            sb.append(user.getUserName());
        }
        return sb;
    }

    public String getCustomCss() {
        return customCss;
    }
}
