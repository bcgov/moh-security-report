package ca.bc.gov.hlth.hem.web.admin;

import ca.bc.gov.hlth.hem.entity.HemChangeCategory;
import ca.bc.gov.hlth.hem.facade.HemChangeCategoryFacadeLocal;
import ca.bc.gov.hlth.hem.security.Login;
import org.primefaces.PrimeFaces;
import org.primefaces.event.RowEditEvent;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.inject.Inject;
import javax.inject.Named;
import java.io.Serializable;
import java.util.List;
//import java.util.Locale;
import org.primefaces.model.FilterMeta;

@Named()
@SessionScoped
public class ManageCategories extends BaseManager implements Serializable {

    @EJB
    private HemChangeCategoryFacadeLocal hemChangeCategoryFacade;

    @Inject
    private Login login;

    private HemChangeCategory selectedHemChangeCategory;
    private List<HemChangeCategory> hemChangeCategoryList;
    
    private List<HemChangeCategory> filteredChangeCategory;
    private List<FilterMeta> filterBy;
    
    ManageCategories(){
        super(ManageCategories.class.getSimpleName());
    }

    @PostConstruct
    public void init() {
        logAction("accessing", "admin ManageCategories");
        hemChangeCategoryList = hemChangeCategoryFacade.findAll();
    }

    public void prepareNewEntity() {
        logAction("accessing", "category creation");
        selectedHemChangeCategory = new HemChangeCategory();
        PrimeFaces context = PrimeFaces.current();
        context.ajax().update("dialogForm:catForm:catPanel");
        context.executeScript("PF('newEntityDialog').show();");
        context.resetInputs("dialogForm:catForm:catPanel");
    }
    
    public void saveNewEntity(){
        hemChangeCategoryFacade.create(selectedHemChangeCategory, login.getUserName());
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('newEntityDialog').hide();");
        addInfoMessage("Change category added successful");
        logAction("saving category", selectedHemChangeCategory.getCategoryName());
    }

    public void onRowEdit(RowEditEvent event) {
        selectedHemChangeCategory = (HemChangeCategory) event.getObject();
        logAction("editing category", selectedHemChangeCategory.getCategoryName());
        hemChangeCategoryFacade.edit(selectedHemChangeCategory, login.getUserName());
        addInfoMessage("Change category updated successfully");

        // To see any error message, the front-end is update here 
        // and not in the xhtml side by using «update» property.
        // This let the web form stay in edit mode.
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('categories').filter();");
        context.ajax().update("formCategory:categories,growl");
        selectedHemChangeCategory = null;
    }

    // Action to Delete
    public void callDeleteAction(HemChangeCategory selectedHemChangeCategory) {
        this.selectedHemChangeCategory = selectedHemChangeCategory;
        this.requestAction = ACTION_DELETE;
    }

    public void executeRequestedAction() {
        switch (requestAction) {
            case ACTION_DELETE:
                removeEntity();
                break;
        }
    }

    private void removeEntity() {
        if (!hemChangeCategoryFacade.isCategoryInUse(selectedHemChangeCategory)) {
            hemChangeCategoryFacade.remove(selectedHemChangeCategory, login.getUserName());
            hemChangeCategoryList = hemChangeCategoryFacade.findAll();
            addInfoMessage(String.format("%s deleted successfully", selectedHemChangeCategory.getCategoryName()));
            logAction("deleted change category", selectedHemChangeCategory.getCategoryName());
            PrimeFaces context = PrimeFaces.current();
            context.executeScript("PF('categories').filter();");
        } else {
            addErrorMessage("Category is currently bind to a task. Deletion is not possible.");
        }
    }

    public void updateData() {
        hemChangeCategoryList = hemChangeCategoryFacade.findAll();
        PrimeFaces context = PrimeFaces.current();
        context.ajax().update("formCategory:categories");
    }
    
//    public boolean globalFilterFunction(Object value, Object filter, Locale locale) {
//        String filterText = (filter == null) ? null : filter.toString().trim().toLowerCase();
//        if (LangUtils.isValueBlank(filterText)) {
//            return true;
//        }
//        int filterInt = getInteger(filterText);
//
//        HemChangeCategory hemChangeCategory = (HemChangeCategory) value;
//        return hemChangeCategory.getCategoryName().toLowerCase().contains(filterText)
//                || hemChangeCategory.getCategoryId() < filterInt;
//    }
//    
//    private int getInteger(String string) {
//        try {
//            return Integer.parseInt(string);
//        }
//        catch (NumberFormatException ex) {
//            return 0;
//        }
//    }

    public String getConfirmationMessage() {
        return (selectedHemChangeCategory == null) ? ""
                : getResourceStringByKey("EntityDeletionConfirmationMessage") + " " + requestAction + " " + selectedHemChangeCategory.getCategoryName() + "?";
    }

    public HemChangeCategory getSelectedHemChangeCategory() {
        return selectedHemChangeCategory;
    }

    public void setSelectedHemChangeCategory(HemChangeCategory selectedHemChangeCategory) {
        this.selectedHemChangeCategory = selectedHemChangeCategory;
    }

    public List<HemChangeCategory> getHemChangeCategoryList() {
        return hemChangeCategoryList;
    }

    public void setHemChangeCategoryList(List<HemChangeCategory> hemChangeCategoryList) {
        this.hemChangeCategoryList = hemChangeCategoryList;
    }
    
    public List<HemChangeCategory> getFilteredChangeCategory() {
        return filteredChangeCategory;
    }

    public void setFilteredChangeCategory(List<HemChangeCategory> filteredChangeCategory) {
        this.filteredChangeCategory = filteredChangeCategory;
    }
    
    public List<FilterMeta> getFilterBy() {
        return filterBy;
    }
}
