package ca.bc.gov.hlth.hem.web;

import ca.bc.gov.hlth.hem.entity.*;
import ca.bc.gov.hlth.hem.facade.*;
import ca.bc.gov.hlth.hem.jsf.BaseBean;
import ca.bc.gov.hlth.hem.security.Login;
import ca.bc.gov.hlth.hem.utils.EmailHelper;
import ca.bc.gov.hlth.hem.utils.ProcessException;
import ca.bc.gov.hlth.hem.utils.ReleaseWindowHelper;
import org.apache.commons.lang3.ArrayUtils;
import org.primefaces.PrimeFaces;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.inject.Inject;
import javax.inject.Named;
import javax.naming.NamingException;
import java.io.IOException;
import java.io.Serializable;
import java.math.BigDecimal;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.time.LocalDateTime;
import java.time.ZoneId;
import org.primefaces.model.DefaultScheduleEvent;
import org.primefaces.model.ScheduleEvent;
import java.time.LocalDate;

@Named("ChangeRequest")
@SessionScoped
public class ChangeRequest extends BaseBean implements Serializable {

    private static final String CLASSNAME = ChangeRequest.class.getSimpleName();
    private static final Logger LOGGER = Logger.getLogger(CLASSNAME);
    private static final int MINUTES = 60;
    private static final String SEPARATOR = "[\r?\n]";
    private static final String APPLICATIONCONTEXT = "java:app/hem/application_properties";

    EDITION_MODE currentEditionMode = EDITION_MODE.CREATE;

    @EJB
    private HemChangeRequestFacadeLocal changeRequestFacade;

    @EJB
    private HemEmailNotificationFacadeLocal emailFacade;

    @EJB
    private HemRequestorFacadeLocal requestorFacade;

    @EJB
    private HemProductFacadeLocal productFacade;

    @EJB
    private HemEnvironmentFacadeLocal environmentFacade;

    @EJB
    private HemServerFacadeLocal serverFacade;

    @EJB
    private HemChangeCategoryFacadeLocal changeFacade;

    @EJB
    private HemUserFacadeLocal userFacade;

    @EJB
    private HemTeamFacadeLocal teamFacade;

    @EJB
    private HemAvailabilityImpactFacadeLocal availabilityFacade;

    @Inject
    private Login loginUser;

    private HemChangeRequest selectedHemChangeRequest;
    private StringBuilder previewContent;
    private boolean userTeamMatchFlag;
    private List<HemRequestor> hemRequestorList;
    private List<HemProduct> hemProductList;
    private List<HemEnvironment> hemEnvironmentList;
    private List<HemServer> hemServerList;
    private List<HemChangeCategory> hemChangeCategoryList;
    private List<HemUser> hemChangeImplementerList;
    private List<HemTeam> hemTeamList;
    private List<HemAvailabilityImpact> hemAvailabilityImpactList;

    private LocalDate newTaskStartDate;
    private LocalDate newTaskEndDate;
    private ScheduleEvent task = new DefaultScheduleEvent();

    private Map<String, Integer> statusList = Map.of(
            "Draft", 0,
            "Approved", 1,
            "Rolled Back", 2,
            "Success", 3,
            "Cancelled", 4,
            "Postponed", 5);

    protected void logAction(String action, String what) {
        Logger.getLogger("ChangeRequest").log(Level.INFO, "{0} {1} {2}.",
                new Object[]{
                    loginUser.getLoginUserName(),
                    action,
                    what
                }
        );
    }

    @PostConstruct
    public void init() {
        logAction("accessed", "ChangeRequest form");
        hemRequestorList = requestorFacade.findAll();
        hemProductList = productFacade.findAll();
        hemEnvironmentList = environmentFacade.findAll();
        hemServerList = serverFacade.findAll();
        hemChangeCategoryList = changeFacade.findAll();
        hemChangeImplementerList = userFacade.findAll();
        hemTeamList = teamFacade.findAll();
        hemAvailabilityImpactList = availabilityFacade.findAllOrderByLevel();
        
        
        updateEditionMode();
    }
    public boolean isUserTeamMatch() {
         userTeamMatchFlag=false;
    if (isEditMode()&& selectedHemChangeRequest != null){
      var members=selectedHemChangeRequest.getHemEmailNotification().getSenderTeam().getTeamMembers();
      var user=userFacade.findByUserName(loginUser.getLoginUserName());
     userTeamMatchFlag= members.contains(user);
    }
    return userTeamMatchFlag;
    }
public boolean IsUserTeamMatch(){
    var flag=false;
    if (isEditMode()&& selectedHemChangeRequest != null){
      var members=selectedHemChangeRequest.getHemEmailNotification().getSenderTeam().getTeamMembers();
      var user=userFacade.findByUserName(loginUser.getLoginUserName());
     flag= members.contains(user);
    }
    return flag;
}
    // Simple check to validate wheter or not the item is being edited or created
    void updateEditionMode() {
        if (selectedHemChangeRequest == null || selectedHemChangeRequest.getChangeReqId() == null) {
            currentEditionMode = EDITION_MODE.CREATE;
        } else {
            currentEditionMode = EDITION_MODE.EDIT;
        }
    }

    public boolean isEditMode() {
        return currentEditionMode == EDITION_MODE.EDIT;
    }

    private boolean assertRequirements() {

        Date startDate = selectedHemChangeRequest.getStartDate();
        HemChangeCategory category = changeFacade.find(selectedHemChangeRequest.getHemCategory().getCategoryId());
        HemEnvironment env = environmentFacade.find(selectedHemChangeRequest.getHemEnvironment().getEnvironmentId());

        if (!ReleaseWindowHelper.IsReleaseDayValid(startDate, category, env)) {
            // We specify which environment and why it cannot be released
            addErrorMessage("Invalid release day selected for environment: [%1$s], available days for release: [%2$s]",
                    env.getEnvironmentName(),
                    ReleaseWindowHelper.getPrettyfiedReleaseableDays(env));
            return false;
        }

        Date currentTime = Calendar.getInstance().getTime();

        if (!ReleaseWindowHelper.IsReleaseWindowValid(currentTime, startDate, category, env)) {
            int dayWindows = env.getEnvironmentReleaseWindow();
            String deadline = env.getEnvironmentReleaseDeadline();

            addErrorMessage("Invalid release window for environment: [%1$s], expected window is [%2$s] day(s) before [%3$s]",
                    env.getEnvironmentName(), dayWindows, deadline);

            return false;
        }

        return true;
    }

    public LocalDateTime convertFromDatetToLocalDateTime(Date dateToConvert) {
        return dateToConvert.toInstant().atZone(ZoneId.systemDefault()).toLocalDateTime();
    }

    public void save() {

        if (!assertRequirements()) {
            return;
        }

        if (!isEditMode()) {
            selectedHemChangeRequest.setUserName(loginUser.getUserName());
        }

        if (selectedHemChangeRequest.getHemEmailNotification().getEmailReceivers()!=null &&
                selectedHemChangeRequest.getHemEmailNotification().getEmailReceivers().trim().endsWith(";")) {

            String extraEmailRecipients = selectedHemChangeRequest.getHemEmailNotification().getEmailReceivers();
            StringBuilder sb = new StringBuilder();
            sb.append(extraEmailRecipients);
            sb.deleteCharAt(sb.length() - 1);
            extraEmailRecipients = sb.toString();
            System.out.println("" + extraEmailRecipients);

        }

        // Saving data
        changeRequestFacade.edit(selectedHemChangeRequest, loginUser.getUserName());

        previewContent = null;
        // Message
        addInfoMessage("Change Request Saved.");

        //Briefly opening and then closing the dialog to update the schedule
        //PrimeFaces.current().executeScript("PF('mainFormScheduler').update();");
        // PrimeFaces.current().executeScript("PF('schedulerDialog').hide();");
        PrimeFaces.current().executeScript("PF('schedulerDialog').show();");
        PrimeFaces.current().executeScript("PF('schedulerDialog').hide();");
        //PrimeFaces.current().executeScript("PF('schedulerDialog').show();");

        // Log action
        LOGGER.log(Level.INFO, "{0} is saving the Change request #{1}.",
                new Object[]{
                    loginUser.getLoginUserName(),
                    selectedHemChangeRequest.getChangeReqId()
                }
        );
    }

    /**
     * Event handler for the form submission (deletion)
     */
    public void delete() {

        // removing data
        changeRequestFacade.remove(selectedHemChangeRequest, loginUser.getUserName());

        previewContent = null;

        // Message
        addInfoMessage("Change Request deleted");

        //Briefly opening and then closing the dialog to update the schedule
        PrimeFaces.current().executeScript("PF('schedulerDialog').show();");
        PrimeFaces.current().executeScript("PF('schedulerDialog').hide();");

        logAction("deleting the Change Request", selectedHemChangeRequest.getChangeReqId().toString());

    }

    /**
     * Event handler to preview the email based on Server patch detail.
     */
    public void preview() {

        // Update the signature with sender team's signature
        String signature = selectedHemChangeRequest.getHemEmailNotification().getSenderTeam().getTeamSignature();
        selectedHemChangeRequest.getHemEmailNotification().setSignature(signature);

        previewContent = compileDataForWebDisplay(true);
    }

    /**
     * Event handler to generate the template based on the change request.
     */
    public void send() {

        // Update the signature with sender team's signature
        String signature = selectedHemChangeRequest.getHemEmailNotification().getSenderTeam().getTeamSignature();
        selectedHemChangeRequest.getHemEmailNotification().setSignature(signature);

        // Saving data
        changeRequestFacade.edit(selectedHemChangeRequest, loginUser.getUserName());

        previewContent = compileDataForWebDisplay(false);
        Properties jndiEmailContext = null;
        try {
            jndiEmailContext = getDirContext(APPLICATIONCONTEXT);
        } catch (NamingException | IOException ex) {
            Logger.getLogger(ChangeRequest.class.getName()).log(Level.SEVERE, null, ex);
        }
        StringBuilder mailServer = null;
        StringBuilder mailPort = null;
        StringBuilder mailDebug = null;
        if (jndiEmailContext != null) {
            mailServer = new StringBuilder();
            mailServer.append((String) jndiEmailContext.get("mailServer"));

            mailPort = new StringBuilder();
            mailPort.append(((String) jndiEmailContext.get("mailPort")).length() > 0 ? (String) jndiEmailContext.get("mailPort") : "25");

            mailDebug = new StringBuilder();
            mailDebug.append(((String) jndiEmailContext.get("mailDebug")).length() > 0 ? (String) jndiEmailContext.get("mailDebug") : "false");
        }

        if (mailServer != null && mailPort != null && mailDebug != null) {

            String sender = selectedHemChangeRequest.getHemEmailNotification().getSenderTeam().getTeamEmail();

            // Send the email
            EmailHelper emailHelper = new EmailHelper(sender, mailServer.toString(), mailPort.toString(), mailDebug.toString());
            try {
                StringBuilder sB = new StringBuilder();
                selectedHemChangeRequest.getHemProduct().forEach((hP) -> {
                    sB.append(",").append(hP.getProductName());
                });
                sB.deleteCharAt(0);

                String[] applications = new String[selectedHemChangeRequest.getHemProduct().size()];
                for (int i = 0; i < selectedHemChangeRequest.getHemProduct().size(); i++) {
                    applications[i] = selectedHemChangeRequest.getHemProduct().get(i).getProductName();
                }
                emailHelper.setApplications(applications);
                emailHelper.setEnvironment(selectedHemChangeRequest.getHemEnvironment().getEnvironmentName());
                emailHelper.setDate(selectedHemChangeRequest.getStartDate());
                emailHelper.setOutage(selectedHemChangeRequest.getHemEmailNotification().isOutage());
                if (selectedHemChangeRequest.getStatus() == 4) {
                    emailHelper.setCancelled(isCancelled());
                }
                if (selectedHemChangeRequest.getStatus() == 5) {
                    emailHelper.setPostponed(isPostponed());
                }

                emailHelper.sendNotificationEmail(getAllEmailRecipients(), previewContent.toString());
                emailHelper.destroy();

                // Get the correct user id 
                Integer userId = userFacade.findByUserName(loginUser.getLoginUserName()).getUserId();

                //Save the action of the email.
                emailFacade.updateHemEmailNotification(selectedHemChangeRequest.getHemEmailNotification(), userId);

                // Log action
                LOGGER.log(Level.INFO,
                        "{0} is generating an email template for change request #{1} (notification id #{2}, notification level = #{3}.",
                        new Object[]{
                            loginUser.getLoginUserName(),
                            selectedHemChangeRequest.getChangeReqId().toString(),
                            selectedHemChangeRequest.getHemEmailNotification().getEmailId(),
                            selectedHemChangeRequest.getHemEmailNotification().getNotificationLevel()
                        }
                );

                // Closing web dialog 
                PrimeFaces.current().ajax().update("mainFormScheduler");
                PrimeFaces.current().executeScript("PF('schedulerDialog').hide();");

                // Message
                addInfoMessage("Email notification sent.");

            } catch (ProcessException ex) {
                addErrorMessage("Error from mail server: ".concat(ex.getMessage()));
                LOGGER.log(Level.SEVERE, null, ex);
            }
            // Update the notification email status.
            PrimeFaces.current().ajax().update("entityForm:entityParent:entityPanel:server", "entityForm:entityParent:entityPanel2:EmailStatus");
        } else {
            // Message
            addErrorMessage("Error in mail configuration for server.");
            LOGGER.log(Level.SEVERE, "Error in mail confirguration for server (mailServer:{0} mailPort:{1} mailDebug:{2})", new Object[]{mailServer.toString(), mailPort.toString(), mailDebug.toString()});
        }
    }

    /**
     * Flag that indicate if the selected environment is in Production
     *
     * @return Boolean
     */
    public boolean isEnvironmentProd() {
        if (selectedHemChangeRequest == null || selectedHemChangeRequest.getHemEnvironment() == null) {
            return false;
        }
        String envName = selectedHemChangeRequest.getHemEnvironment().getEnvironmentName().toLowerCase();
        return (envName.contains("prod") || envName.contains("staging"));
    }

    /**
     * Event handler when the environment change.
     */
    public void onEnvironmentChange() {
        hemServerList = serverFacade.findAll();
    }

    public void onTimeRequiredValueChange() {
        adjustEndingDate();
        PrimeFaces.current().ajax().update("endDate");
    }

    public void onStartDateChange() {
        adjustEndingDate();
    }

    /**
     * Event handler for end date change.<br>
     * Update the ending date value if set before the starting date
     *
     */
    public void onEndDateChange() {
        // Prepare the calendar for calculation.
        java.util.Calendar calendarCalculation = java.util.Calendar.getInstance();
        calendarCalculation.setTime(selectedHemChangeRequest.getStartDate());
        //If ending date is equal or past, adjust the ending date to one day more of starting date.
        if (selectedHemChangeRequest.getEndDate() != null) {
            if (selectedHemChangeRequest.getEndDate().before(selectedHemChangeRequest.getStartDate())) {
                //BigDecimal minutesToBigDecimal = BigDecimal.valueOf(MINUTES);
                calendarCalculation.add(java.util.Calendar.MINUTE, MINUTES);
                selectedHemChangeRequest.setEndDate(calendarCalculation.getTime());

                PrimeFaces.current().ajax().update("endDate");

            } else {

                long endDateToLong = selectedHemChangeRequest.getEndDate().toInstant().toEpochMilli();
                long startDateToLong = selectedHemChangeRequest.getStartDate().toInstant().toEpochMilli();
                long difference = ((endDateToLong - startDateToLong) / 1000 / 60);          // get the result from milli to minutes
                long differenceToHours = difference / 60;                                   // from minutes to hours 

                selectedHemChangeRequest.setTimeRequired(BigDecimal.valueOf(differenceToHours));
                PrimeFaces.current().ajax().update("timeRequired");

            }
        }
    }

    private void adjustEndingDate() {
        // Prepare the calendar for calculation.
        java.util.Calendar calendarCalculation = java.util.Calendar.getInstance();
        calendarCalculation.setTime(selectedHemChangeRequest.getStartDate());
        //If ending date is equal or past, adjust the ending date to starting date + duration (aka time required)
        if (selectedHemChangeRequest.getTimeRequired().compareTo(BigDecimal.ZERO) >= 0) {
            Date dateCalc = selectedHemChangeRequest.getStartDate();
            calendarCalculation.setTime(dateCalc);
            calendarCalculation.add(java.util.Calendar.MINUTE,
                    (selectedHemChangeRequest.getTimeRequired().
                            multiply(new BigDecimal(MINUTES))).intValue());
            dateCalc = calendarCalculation.getTime();
            selectedHemChangeRequest.setEndDate(dateCalc);
        }
    }

    /**
     * Compile data for previewing or sending the notification
     *
     * @param forWebDisplay
     * @return StringBuilder of the compiled data in HTML format.
     */
    private StringBuilder compileDataForWebDisplay(boolean forWebDisplay) {
        fillMissingValuesInTask();
        HemEmailNotificationFacade.Values values = new HemEmailNotificationFacade.Values();

        // Audience
        values.environment = selectedHemChangeRequest.getHemEnvironment().getEnvironmentName();
        values.audience = new String[selectedHemChangeRequest.getHemProduct().size()];
        for (int i = 0; i < selectedHemChangeRequest.getHemProduct().size(); i++) {
            String applicationAbbrAndDescription = selectedHemChangeRequest.getHemProduct().get(i).getProductName();
            if (selectedHemChangeRequest.getHemProduct().get(i).getDescription() != null) {
                applicationAbbrAndDescription += " - " + selectedHemChangeRequest.getHemProduct().get(i).getDescription();
            }
            values.audience[i] = applicationAbbrAndDescription;
        }

        // Date range
        SimpleDateFormat formatter = new SimpleDateFormat("EEEE, MMMMM dd, yyyy");
        String date = formatter.format(selectedHemChangeRequest.getStartDate());
        formatter = new SimpleDateFormat("h:mm aaa");
        String timeIni = formatter.format(selectedHemChangeRequest.getStartDate());
        String timeEnd = formatter.format(selectedHemChangeRequest.getEndDate());

        if (selectedHemChangeRequest.getHemEmailNotification().isOutage()) {
            values.dateRange = "The outage will occur on " + date + " from " + timeIni + " to " + timeEnd;
        } else {
            values.dateRange = "The change will occur on " + date + " from " + timeIni + " to " + timeEnd;
        }

        // Description
        values.description = selectedHemChangeRequest.getHemEmailNotification().getDescription();

        // Estimated time
        DecimalFormat decimalFormat = new DecimalFormat("#.##");
        String estimatedTime = decimalFormat.format(selectedHemChangeRequest.getTimeRequired().doubleValue()) + (selectedHemChangeRequest.getTimeRequired().doubleValue() > 1 ? " hours" : " hour");
        values.estimatedTime = String.format("The estimated duration to implement this change is %s.", estimatedTime);

        // Reference name
        values.rfcName = "The RFC for this work is " + selectedHemChangeRequest.getRfcName();

        // Client verification steps
        values.clientVerificationSteps = selectedHemChangeRequest.getHemEmailNotification().getTestingVerificationStepsClient().split(SEPARATOR);

        // Team verification steps
        values.teamVerificationSteps = selectedHemChangeRequest.getHemEmailNotification().getTestingVerificationSteps().split(SEPARATOR);

        // Signature
        String signature = selectedHemChangeRequest.getHemEmailNotification().getSenderTeam().getTeamSignature();
        selectedHemChangeRequest.getHemEmailNotification().setSignature(signature);
        values.signature = selectedHemChangeRequest.getHemEmailNotification().getSignature();

        if (selectedHemChangeRequest.getHemEmailNotification().isOutage()) {

            // Availability impact
            if (selectedHemChangeRequest.getHemEmailNotification().getHemAvailabilityImpact() != null) {
                values.availabilityImpact = selectedHemChangeRequest.getHemEmailNotification().getHemAvailabilityImpact().getAvailabilityImpactName();
            }

            // Impacted applications
            values.impactedApplications = new String[selectedHemChangeRequest.getHemProduct().size()];
            for (int i = 0; i < selectedHemChangeRequest.getHemProduct().size(); i++) {
                String applicationAbbrAndDescription = selectedHemChangeRequest.getHemProduct().get(i).getProductName();
                if (selectedHemChangeRequest.getHemProduct().get(i).getDescription() != null) {
                    applicationAbbrAndDescription += " - " + selectedHemChangeRequest.getHemProduct().get(i).getDescription();
                }
                values.impactedApplications[i] = applicationAbbrAndDescription;
            }

            // Impacted applications added by user
            if (selectedHemChangeRequest.getHemEmailNotification().getImpactedServices() != null) {
                values.impactedApplications = ArrayUtils.addAll(values.impactedApplications, selectedHemChangeRequest.getHemEmailNotification().getImpactedServices().split(SEPARATOR));
            }

            // Not impacted applications added by user
            if (selectedHemChangeRequest.getHemEmailNotification().getNotImpactedServices() != null) {
                values.notImpactedApplications = selectedHemChangeRequest.getHemEmailNotification().getNotImpactedServices().split(SEPARATOR);
            } else {
                values.notImpactedApplications = new String[]{"None"};
            }
        }

        // Outage
        values.outage = selectedHemChangeRequest.getHemEmailNotification().isOutage();

        // Outage Type
        values.outageType = selectedHemChangeRequest.getHemEmailNotification().getHemAvailabilityImpact().getAvailabilityImpactName();

        return emailFacade.buildEmailTemplate(values, forWebDisplay);
    }

    private void fillMissingValuesInTask() {
        if (selectedHemChangeRequest == null
                || selectedHemChangeRequest.getHemEnvironment() == null
                || selectedHemChangeRequest.getHemProduct() == null
                || selectedHemChangeRequest.getHemServer() == null) {
            return;
        }

        // Fill up env name
        String envName = selectedHemChangeRequest.getHemEnvironment().getEnvironmentName();
        if (envName == null || envName.isEmpty()) {
            Integer envID = selectedHemChangeRequest.getHemEnvironment().getEnvironmentId();
            envName = environmentFacade.find(envID).getEnvironmentName();
            selectedHemChangeRequest.getHemEnvironment().setEnvironmentName(envName);
        }

        // fill up server names
        selectedHemChangeRequest.getHemServer().iterator().forEachRemaining(s -> {
            if (s.getServerName() == null || s.getServerName().isEmpty()) {
                s.setServerName(serverFacade.find(s.getServerId()).getServerName());
            }
        });
    }

    public boolean allRequiredFieldsFilled() {
        return isRequestorFilled() && isProductFilled() && isServerFilled()&& isEnvironmentFilled() &&isCategoryFilled()&&   isRfcNameFilled()
               && isRfcLinkFilled() &&isChangeImplFilled() && isSenderTeamFilled()&& isDescriptionFilled()  && isTestingVerificationStepsFilled();
    }
    public boolean isTestingVerificationStepsFilled() {
        return selectedHemChangeRequest.getHemEmailNotification().getTestingVerificationSteps() != null;
    }
public boolean isDescriptionFilled() {
        return selectedHemChangeRequest.getHemEmailNotification().getDescription() != null;
    }
     public boolean isRfcNameFilled() {
        return selectedHemChangeRequest.getRfcName()!= null && !selectedHemChangeRequest.getRfcName().isEmpty();
    }
    public boolean isRfcLinkFilled() {
        return selectedHemChangeRequest.getRfcLink()!= null && !selectedHemChangeRequest.getRfcLink().isEmpty();
    }
  public boolean isRequestorFilled() {
        return selectedHemChangeRequest.getHemRequestor()!= null ;
    }
public boolean isCategoryFilled() {
        return selectedHemChangeRequest.getHemCategory()!= null;
    }
public boolean isEnvironmentFilled() {
        return selectedHemChangeRequest.getHemEnvironment()!= null ;
    }
    public boolean isProductFilled() {
        return selectedHemChangeRequest.getHemProduct() != null && !selectedHemChangeRequest.getHemProduct().isEmpty();

    }

    public boolean isServerFilled() {
        return selectedHemChangeRequest.getHemServer() != null && !selectedHemChangeRequest.getHemServer().isEmpty();
    }

    public boolean isChangeImplFilled() {
        return selectedHemChangeRequest.getChangeImplementers() != null && !selectedHemChangeRequest.getChangeImplementers().isEmpty();
    }

    public boolean isSenderTeamFilled() {
        return selectedHemChangeRequest.getHemEmailNotification().getSenderTeam().getTeamId() != null;
    }

    public String getAllEmailRecipients() {
        StringBuilder sbRecipients = new StringBuilder().append("");
        if (selectedHemChangeRequest != null) {
            if (selectedHemChangeRequest.getHemRequestor() != null) {

                if (selectedHemChangeRequest.getHemRequestor().getRequestorEmail() != null) {
                    sbRecipients.append(selectedHemChangeRequest.getHemRequestor().getRequestorEmail());

                } else if (selectedHemChangeRequest.getHemRequestor().getRequestorEmail() == null || selectedHemChangeRequest.getHemRequestor().getRequestorEmail().equals("")) {
                    // Read directly the data from the database.
                    HemRequestor hemRequestor = requestorFacade.findByRequestorId(selectedHemChangeRequest.getHemRequestor().getRequestorId());
                    sbRecipients.append(hemRequestor.getRequestorEmail());
                }
            }

            // Add the distribution list of the product if checked
            if (selectedHemChangeRequest.getIncludingDistList() != null && selectedHemChangeRequest.getIncludingDistList()) {
                if (selectedHemChangeRequest.getHemProduct() != null) {
                    selectedHemChangeRequest.getHemProduct().forEach(product -> {
                        if (product.getDistListEmail() != null) {
                            if (sbRecipients.length() > 0) {
                                sbRecipients.append("; ");
                            }
                            sbRecipients.append(product.getDistListEmail());
                        }
                    });
                }
            }
            //Implementers
            if (selectedHemChangeRequest.getChangeImplementers() != null) {
                selectedHemChangeRequest.getChangeImplementers().forEach(implementer -> {
                    if (implementer != null) {
                        if (implementer.getUserEmail() == null) {
                            implementer.setUserEmail(userFacade.findByUserId(implementer.getUserId()).getUserEmail());
                        }
                        if (sbRecipients.length() > 0) {
                            sbRecipients.append("; ");
                        }
                        sbRecipients.append(implementer.getUserEmail());
                    }
                });
            }
            if (selectedHemChangeRequest.getHemEmailNotification() != null) {
                // Add the sender team
                if (selectedHemChangeRequest.getHemEmailNotification().getSenderTeam() != null
                        && selectedHemChangeRequest.getHemEmailNotification().getSenderTeam().getTeamEmail() != null) {
                    if (sbRecipients.length() > 0) {
                        sbRecipients.append("; ");
                    }
                    sbRecipients.append(selectedHemChangeRequest.getHemEmailNotification().getSenderTeam().getTeamEmail());
                }
                // Add extra email recipients
                if (selectedHemChangeRequest.getHemEmailNotification().getEmailReceivers() != null) {
                    if (sbRecipients.length() > 0) {
                        sbRecipients.append("; ");
                    }
                    sbRecipients.append(selectedHemChangeRequest.getHemEmailNotification().getEmailReceivers());
                }
            }
        }
        return sbRecipients.toString();
    }
    // Getters and setters

    public List<HemRequestor> getHemRequestorList() {
        return hemRequestorList;
    }

    public List<HemProduct> getHemProductList() {
        return hemProductList;
    }

    public List<HemEnvironment> getHemEnvironmentList() {
        return hemEnvironmentList;
    }

    public List<HemServer> getHemServerList() {
        return hemServerList;
    }

    public List<HemChangeCategory> getHemChangeCategoryList() {
        return hemChangeCategoryList;
    }

    public List<HemUser> getHemChangeImplementerList() {
        return hemChangeImplementerList;
    }

    public List<HemTeam> getHemTeamList() {
        return hemTeamList;
    }

    public List<HemAvailabilityImpact> getHemAvailabilityImpactList() {
        return hemAvailabilityImpactList;
    }

    public Map<String, Integer> getStatusList() {
        return statusList;
    }

    public String getPreviewContent() {
        if (currentEditionMode != EDITION_MODE.CREATE) {
            previewContent = compileDataForWebDisplay(true);
            return previewContent.toString();
        } else {
            return "";
        }
    }

    public void setPreviewContent(String previewContent) {
        // formality : must exists for jsf not to break
    }

    public HemChangeRequest getSelectedHemChangeRequest() {
        return selectedHemChangeRequest;
    }

    public void setSelectedHemChangeRequest(HemChangeRequest selectedHemChangeRequest) {
        this.selectedHemChangeRequest = selectedHemChangeRequest;
        hemRequestorList = requestorFacade.findAll();
        hemProductList = productFacade.findAll();
        hemEnvironmentList = environmentFacade.findAll();
        hemServerList = serverFacade.findAll();
        hemChangeCategoryList = changeFacade.findAll();
        hemChangeImplementerList = userFacade.findAll();
        hemTeamList = teamFacade.findAll();
        hemAvailabilityImpactList = availabilityFacade.findAllOrderByLevel();
        updateEditionMode();
    }

    public LocalDate getNewTaskStartDate() {
        return newTaskStartDate;
    }

    public void setNewTaskStartDate(LocalDate newTaskStartDate) {
        this.newTaskStartDate = newTaskStartDate;
    }

    public LocalDate getNewTaskEndDate() {
        return newTaskEndDate;
    }

    public void setNewTaskEndDate(LocalDate newTaskEndDate) {
        this.newTaskEndDate = newTaskEndDate;
    }

    public boolean isCancelled() {
        return selectedHemChangeRequest.getStatus() == 4;
    }

    public boolean isPostponed() {
        return selectedHemChangeRequest.getStatus() == 5;
    }

}
