/*
 * *********************************************************************************************************************
 *  Copyright (c) 2017, Ministry of Health, BC.                                                 *
 *                                                                                                                     *
 *  All rights reserved.                                                                                               *
 *    This information contained herein may not be used in whole                                                       *
 *    or in part without the express written consent of the                                                            *
 *    Government of British Columbia, Canada.                                                                          *
 *                                                                                                                     *
 *  Revision Control Information                                                                                       *
 *  File:                $Id::                                                                                       $ *
 *  Date of Last Commit: $Date::                                                                                     $ *
 *  Revision Number:     $Rev::                                                                                      $ *
 *  Last Commit by:      $Author::                                                                                   $ *
 *                                                                                                                     *
 * *********************************************************************************************************************
 */
package ca.bc.gov.hlth.hem.jsf;

import java.io.IOException;
import java.text.MessageFormat;
import java.util.MissingResourceException;
import java.util.Properties;
import java.util.ResourceBundle;
import javax.faces.application.FacesMessage;
import javax.faces.application.FacesMessage.Severity;
import javax.faces.context.FacesContext;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import org.primefaces.PrimeFaces;

/**
 * Base class for JSF backing beans
 *
 * @author CGI Information Management Consultants Inc.
 */
public class BaseBean {

    public static final String ACTION_DELETE = "delete";
    public static final String ACTION_LOCK = "lock";
    public static final String ACTION_UNLOCK = "unlock";
    protected static final String ACTION_TOGGLE_ENABLED = "toggleEnable";

    public enum EDITION_MODE {
        CREATE,
        EDIT
    }

    /**
     * Flag that indicate if the selected environment is in Production or
     * Staging
     *
     * @ return boolean
     */
    /*
    public boolean isEnvironmentProdOrStaging() {
        boolean answer = false;
        if (this.selectedHemChangeRequest.getHemEnvironment().getEnvironmentName().toLowerCase().contains("prod")
                || this.selectedHemChangeRequest.getHemEnvironment().getEnvironmentName().toLowerCase().contains("staging")) {
            answer = true;
        }
        return answer;
    }*/
    public void enableServiceRequirements() {
        PrimeFaces.current().ajax().update("impactedServices", "notImpactedServices");
    }

    /**
     * Show a message at an error level
     *
     * @param msg
     */
    public void addErrorMessage(String msg) {
        addMessage(null, msg, FacesMessage.SEVERITY_ERROR);
    }

    /**
     * Show a message at an info level
     *
     * @param msg
     */
    public void addInfoMessage(String msg) {
        addMessage(null, msg, FacesMessage.SEVERITY_INFO);
    }

    /**
     * Show a message at an error level bind to a button
     *
     * @param msg
     * @param btn
     */
    public void addInfoMessage(String msg, String btn) {
        addMessage(btn, msg, FacesMessage.SEVERITY_INFO);
    }

    /**
     * Show a message at a warning level
     *
     * @param msg
     */
    public void addWarnMessage(String msg) {
        addMessage(null, msg, FacesMessage.SEVERITY_WARN);
    }

    /**
     * Show a message at a warning level bind to a button
     *
     * @param msg
     * @param btn
     */
    public void addWarnMessage(String msg, String btn) {
        addMessage(btn, msg, FacesMessage.SEVERITY_WARN);
    }

    /**
     * Show a message at an info level with multiples arguments
     *
     * @param msg
     * @param args
     */
    public void addInfoMessage(String msg, Object... args) {
        addMessage(null, String.format(msg, args), FacesMessage.SEVERITY_INFO);
    }

    /**
     * Show a message at an error level with multiples arguments
     *
     * @param msg
     * @param args
     */
    public void addErrorMessage(String msg, Object... args) {
        addMessage(null, String.format(msg, args), FacesMessage.SEVERITY_ERROR);
    }

    /**
     * Show a message to some level bind to a button and a severity
     *
     * @param btn
     * @param msg
     * @param severity
     */
    private void addMessage(String btn, String msg, Severity severity) {
        FacesContext.getCurrentInstance().addMessage(btn, new FacesMessage(severity, msg, msg));
    }

    /**
     * Returns a string for the given key
     *
     * @param key the key for the desired string
     * @return the string for the given key
     */
    public static String getResourceStringByKey(String key) {

        FacesContext context = FacesContext.getCurrentInstance();
        ResourceBundle bundle = context.getApplication().getResourceBundle(context, "bundle");

        if (key == null || key.isEmpty()) {
            return "";
        } else {
            try {
                return bundle.getString(key);
            } catch (NullPointerException | MissingResourceException e) {
                return "?? " + key + " ?? Key not found.";
            }
        }
    }

    /**
     * Formats a message for the given key and arguments
     *
     * @param key the key for the desired string
     * @param arg0 the first object to be formatted and substituted
     * @param arg1 the second object to be formatted and substituted
     * @return the formatted message for the given key and arguments
     */
    public String formatMessage(String key, String arg0, String arg1) {
        return formatMessage(key, new Object[]{arg0, arg1});
    }

    /**
     * Formats a message for the given key and arguments
     *
     * @param key the key for the desired string
     * @param arguments an array of objects to be formatted and substituted
     * @return the formatted message for the given key and arguments
     */
    private String formatMessage(String key, Object[] arguments) {
        return MessageFormat.format(key, arguments);
    }

    /**
     * Get application server context to obtain a JNDI resource.
     *
     * @param lookupName
     * @return
     * @throws IOException
     * @throws NamingException
     */
    public Properties getDirContext(String lookupName) throws IOException, NamingException {
        Context initialContext = new InitialContext();
        Properties appProperties = (Properties) initialContext.lookup(lookupName);
        return appProperties;
    }
}
