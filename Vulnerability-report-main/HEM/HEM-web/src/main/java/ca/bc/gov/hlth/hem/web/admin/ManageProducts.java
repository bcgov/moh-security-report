package ca.bc.gov.hlth.hem.web.admin;

import ca.bc.gov.hlth.hem.entity.HemProduct;
import ca.bc.gov.hlth.hem.facade.HemProductFacadeLocal;
import ca.bc.gov.hlth.hem.security.Login;
import org.primefaces.PrimeFaces;
import org.primefaces.event.RowEditEvent;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.inject.Inject;
import javax.inject.Named;
import java.io.Serializable;
import java.util.List;
import org.primefaces.model.FilterMeta;

@Named
@SessionScoped
public class ManageProducts extends BaseManager implements Serializable {

    @EJB
    private HemProductFacadeLocal hemProductFacade;

    @Inject
    private Login login;

    private HemProduct selectedHemProduct;
    private List<HemProduct> hemProductList;
    
    private List<HemProduct> filteredProduct;
    private List<FilterMeta> filterBy;
    
    ManageProducts(){
        super(ManageProducts.class.getSimpleName());
    }

    @PostConstruct
    public void init() {
        logAction("accessing", "admin ManageProducts");
        hemProductList = hemProductFacade.findAll();
    }

    public void prepareNewEntity() {
        logAction("accessing", "product creation");
        selectedHemProduct = new HemProduct();
        PrimeFaces context = PrimeFaces.current();
        context.ajax().update("dialogForm:prdForm:prdPanel");
        context.executeScript("PF('newEntityDialog').show();");
        context.resetInputs("dialogForm:prdForm:prdPanel");
    }
    
    public void saveNewEntity(){
        hemProductFacade.create(selectedHemProduct, login.getUserName());
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('newEntityDialog').hide();");
        addInfoMessage("Product added successful");
        logAction( "saving product", selectedHemProduct.getProductName());
    }

    public void onRowEdit(RowEditEvent event) {
        selectedHemProduct = (HemProduct) event.getObject();
        logAction("editing product", selectedHemProduct.getProductName());
        hemProductFacade.edit(selectedHemProduct, login.getUserName());
        addInfoMessage("Product updated successfully");
        
        // To check for any error, the frontend is updated from here
        // not in the xhtml, by using "update" property.
        // This let the web form stays in edit mode.
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('products').filter();");
        context.ajax().update("formProducts:products,growl");
    }

    // Action to Delete
    public void callDeleteAction(HemProduct selectedHemProduct) {
        this.selectedHemProduct = selectedHemProduct;
        this.requestAction = ACTION_DELETE;
    }

    public void executeRequestedAction() {
        switch (requestAction) {
            case ACTION_DELETE:
                removeEntity();
                break;
        }
    }

    private void removeEntity() {
        if (!hemProductFacade.isProductInUse(selectedHemProduct)) {
            hemProductFacade.remove(selectedHemProduct, login.getUserName());
            hemProductList = hemProductFacade.findAll();
            addInfoMessage(String.format("%s deleted successfully", selectedHemProduct.getProductName()));
            logAction("deleted product", selectedHemProduct.getProductName());
            PrimeFaces context = PrimeFaces.current();
            context.executeScript("PF('products').filter();");
        } else {
            addErrorMessage("Product bound to a task, deletion not possible.");
        }
    }

    public void updateData() {
        hemProductList = hemProductFacade.findAll();
        PrimeFaces context = PrimeFaces.current();
        context.ajax().update("formProduct:products");
    }

    public String getConfirmationMessage() {
        return (selectedHemProduct == null) ? ""
                : getResourceStringByKey("EntityDeletionConfirmationMessage") + " " + requestAction + " " + selectedHemProduct.getProductName() + "?";
    }

    public HemProduct getSelectedHemProduct() {
        return selectedHemProduct;
    }

    public void setSelectedHemProduct(HemProduct selectedHemProduct) {
        this.selectedHemProduct = selectedHemProduct;
    }

    public List<HemProduct> getHemProductList() {
        return hemProductList;
    }

    public void setHemProductList(List<HemProduct> hemProductList) {
        this.hemProductList = hemProductList;
    }
    public List<HemProduct> getFilteredProduct() {
        return filteredProduct;
    }

    public void setFilteredProduct(List<HemProduct> filteredProduct) {
        this.filteredProduct = filteredProduct;
    }
    
    public List<FilterMeta> getFilterBy() {
        return filterBy;
    }
}
