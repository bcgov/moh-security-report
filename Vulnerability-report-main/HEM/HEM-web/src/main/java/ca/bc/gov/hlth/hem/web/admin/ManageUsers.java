package ca.bc.gov.hlth.hem.web.admin;

import ca.bc.gov.hlth.hem.entity.HemUser;
import ca.bc.gov.hlth.hem.facade.HemUserFacadeLocal;
import ca.bc.gov.hlth.hem.security.Login;
import org.primefaces.PrimeFaces;
import org.primefaces.event.RowEditEvent;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.inject.Inject;
import javax.inject.Named;
import java.io.Serializable;
import java.util.List;
import java.util.Map;
import org.primefaces.model.FilterMeta;

@Named
@SessionScoped
public class ManageUsers extends BaseManager implements Serializable {

    @EJB
    private HemUserFacadeLocal hemUserFacade;

    @Inject
    private SignatureEditor signatureEditor;

    @Inject
    private Login login;

    private HemUser selectedHemUser;
    private List<HemUser> hemUserList;
    
    private List<HemUser> filteredUser;
    private List<FilterMeta> filterBy;
    
    private Map<String, String> userRolesList = Map.of(
                    "Admin", "admin", 
                    "Project Manager Admin", "pmAdmin", 
                    "Server Admin", "serverAdmin", 
                    "Viewer", "viewer");
    
    ManageUsers(){
        super(ManageUsers.class.getSimpleName());
    }

    @PostConstruct
    public void init() {
        logAction("accessing", "admin ManageUsers");
        hemUserList = hemUserFacade.findAll();
    }

    public void prepareNewEntity() {
        logAction("accessing", "user creation");
        selectedHemUser = new HemUser();
        signatureEditor.setSelectedHemUser(selectedHemUser);
        PrimeFaces context = PrimeFaces.current();
        context.ajax().update("dialogForm:usrForm:usrPanel");
        context.executeScript("PF('newEntityDialog').show();");
        context.resetInputs("dialogForm:usrForm:usrPanel");
    }
    
    public void saveNewEntity(){
        selectedHemUser.setUserSignature("");
        hemUserFacade.create(selectedHemUser, login.getUserName());
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('newEntityDialog').hide();");
        addInfoMessage("User added successful");
        logAction("saving user", selectedHemUser.getUserName());
    }

    public void onRowEdit(RowEditEvent event) {
        selectedHemUser = (HemUser) event.getObject();
        logAction("editing user", selectedHemUser.getUserName());
        hemUserFacade.edit(selectedHemUser, login.getUserName());
        addInfoMessage("User updated successful");
        
        // To check for any error, the frontend is updated from here
        // not in the xhtml, by using "update" property.
        // This let the web form stays in edit mode.
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('users').filter();");
        context.ajax().update("formUser:users,growl");
    }

    public void callToggleEnabledAction(HemUser selectedHemUser) {
        this.selectedHemUser = selectedHemUser;
        this.requestAction = ACTION_TOGGLE_ENABLED;
    }

    // Action to Delete
    public void callDeleteAction(HemUser selectedHemUser) {
        this.selectedHemUser = selectedHemUser;
        signatureEditor.setSelectedHemUser(selectedHemUser);
        this.requestAction = ACTION_DELETE;
    }

    public void executeRequestedAction() {
        switch (requestAction) {
            case ACTION_TOGGLE_ENABLED:
                toggleEnabled();
                break;
            case ACTION_DELETE:
                removeEntity();
                break;
        }
    }

    private void removeEntity() {
        hemUserFacade.remove(selectedHemUser, login.getUserName());
        hemUserList = hemUserFacade.findAll();
        addInfoMessage(String.format("%s deleted successfully", selectedHemUser.getUserName()));
        logAction("deleted user", selectedHemUser.getUserName());
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('users').filter();");
    }

    private void toggleEnabled() {
        selectedHemUser.setUserLock(!selectedHemUser.getUserLock());
        hemUserFacade.edit(selectedHemUser, login.getUserName());
        hemUserList = hemUserFacade.findAll();
        String enabledTxt = selectedHemUser.getUserLock() ? "enabled" : "disabled";
        String messageTxt = "User " + selectedHemUser.getUserName() + " " + enabledTxt + " successfully";
        addInfoMessage(messageTxt);
        logAction(enabledTxt + " user", selectedHemUser.getUserName());
    }

    public void updateData() {
        hemUserList = hemUserFacade.findAll();
        PrimeFaces context = PrimeFaces.current();
        context.ajax().update("formUser:users");
    }

    public Map<String, String> getUserRolesList() {
        return userRolesList;
    }

    public String getLockIcon(HemUser selectedHemUser) {
        return selectedHemUser.getUserLock() ? "ui-icon ui-icon-unlocked" : "ui-icon ui-icon-locked";
    }

    public String getConfirmationMessage() {
        return (selectedHemUser == null) ? ""
                : getResourceStringByKey("EntityDeletionConfirmationMessage") + " " + requestAction + " " + selectedHemUser.getUserName() + "?";
    }

    public void setLockAction(HemUser selectedHemUser) {
        this.selectedHemUser = selectedHemUser;
        signatureEditor.setSelectedHemUser(selectedHemUser);
        this.requestAction = selectedHemUser.getUserLock() ? ACTION_UNLOCK : ACTION_LOCK;
    }

    public HemUser getSelectedHemUser() {
        return selectedHemUser;
    }

    public void setSelectedHemUser(HemUser selectedHemUser) {
        this.selectedHemUser = selectedHemUser;
        signatureEditor.setSelectedHemUser(selectedHemUser);
    }

    public List<HemUser> getHemUserList() {
        return hemUserList;
    }

    public void setHemUserList(List<HemUser> hemUserList) {
        this.hemUserList = hemUserList;
    }

    public SignatureEditor getSignatureEditor() {
        return signatureEditor;
    }

    public void setSignatureEditor(SignatureEditor signatureEditor) {
        this.signatureEditor = signatureEditor;
    }
    
    public List<HemUser> getFilteredUser() {
        return filteredUser;
    }

    public void setFilteredUser(List<HemUser> filteredUser) {
        this.filteredUser = filteredUser;
    }
    
    public List<FilterMeta> getFilterBy() {
        return filterBy;
    }
}
