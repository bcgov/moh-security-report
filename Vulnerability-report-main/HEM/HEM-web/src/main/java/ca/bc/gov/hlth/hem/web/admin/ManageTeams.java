package ca.bc.gov.hlth.hem.web.admin;

import ca.bc.gov.hlth.hem.entity.HemTeam;
import ca.bc.gov.hlth.hem.entity.HemUser;
import ca.bc.gov.hlth.hem.facade.HemTeamFacadeLocal;
import ca.bc.gov.hlth.hem.facade.HemUserFacadeLocal;
import ca.bc.gov.hlth.hem.security.Login;
import org.primefaces.PrimeFaces;
import org.primefaces.event.RowEditEvent;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.inject.Inject;
import javax.inject.Named;
import java.io.Serializable;
import java.util.List;

@Named
@SessionScoped
public class ManageTeams extends BaseManager implements Serializable {

    @EJB
    private HemTeamFacadeLocal hemTeamFacade;

    @EJB
    private HemUserFacadeLocal userFacade;

    @Inject
    private SignatureEditor signatureEditor;

    @Inject
    private Login login;

    private HemTeam selectedHemTeam = new HemTeam();
    private List<HemTeam> hemTeamList;
    private List<HemUser> hemChangeImplementerList;
    
    ManageTeams(){
        super(ManageTeams.class.getSimpleName());
    }

    @PostConstruct
    public void init(){
        logAction("accessed", "admin ManageTeams");
        hemTeamList = hemTeamFacade.findAll();
        hemChangeImplementerList = userFacade.findAll();
    }

    public void prepareNewEntity(){
        logAction("accessed", "team creation");
        selectedHemTeam = new HemTeam();
        signatureEditor.setSelectedHemTeam(selectedHemTeam);
        PrimeFaces context = PrimeFaces.current();
        context.ajax().update("dialogForm:teamForm:teamPanel");
        context.executeScript("PF('newEntityDialog').show();");
        context.resetInputs("dialogForm:teamForm:teamPanel");
    }
    public boolean allRequiredFieldsFilled() {
        return isNameFilled() && isEmailFilled() ;
    }
    public boolean isNameFilled() {
        return selectedHemTeam.getTeamName() != null && !selectedHemTeam.getTeamName().isEmpty();
    }
    public boolean isEmailFilled() {
        return selectedHemTeam.getTeamName() != null && !selectedHemTeam.getTeamName().isEmpty();
    }
    public void saveNewEntity(){
        selectedHemTeam.setTeamSignature("");
        hemTeamFacade.create(selectedHemTeam, login.getUserName());
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('newEntityDialog').hide();");
        addInfoMessage("Team added successfully");
        logAction("saved team", selectedHemTeam.getTeamName());
    }

    public void onRowEdit(RowEditEvent event) {
        selectedHemTeam = (HemTeam) event.getObject();
        logAction("updated team", selectedHemTeam.getTeamName());
        hemTeamFacade.edit(selectedHemTeam, login.getUserName());
        addInfoMessage("Team updated successfully");
        
        // To check for any error, the frontend is updated from here
        // not in the xhtml, by using "update" property.
        // This let the web form stays in edit mode.
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('teams').filter();");
        context.ajax().update("formTeam:teams,growl");
    }

    public void callToggleEnabledAction(HemTeam selectedHemTeam) {
        this.selectedHemTeam = selectedHemTeam;
        this.requestAction = ACTION_TOGGLE_ENABLED;
    }

    // Action to Delete
    public void callDeleteAction(HemTeam selectedHemTeam) {
        this.selectedHemTeam = selectedHemTeam;
        this.requestAction = ACTION_DELETE;
    }

    public void executeRequestedAction(){
        switch (requestAction) {
            case ACTION_TOGGLE_ENABLED:
                toggleEnabled();
                break;
            case ACTION_DELETE:
                removeEntity();
                break;
        }
    }

    private void removeEntity() {
        hemTeamFacade.remove(selectedHemTeam, login.getUserName());
        hemTeamList = hemTeamFacade.findAll();
        addInfoMessage(String.format("%s deleted successfully", selectedHemTeam.getTeamName()));
        logAction("deleted team", selectedHemTeam.getTeamName());
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('teams').filter();");
    }

    private void toggleEnabled() {
        selectedHemTeam.setEnabled(!selectedHemTeam.isEnabled());
        hemTeamFacade.edit(selectedHemTeam, login.getUserName());
        hemTeamList = hemTeamFacade.findAll();
        String enabledTxt = selectedHemTeam.isEnabled()? "enabled" : "disabled";
        String messageTxt = "Team " + selectedHemTeam.getTeamName() + " " + enabledTxt + " successfully";
        addInfoMessage(messageTxt);
        logAction(enabledTxt + " team", selectedHemTeam.getTeamName());
    }
 
    public void Testme(){
        
    }
    public void updateData() {
        hemTeamList = hemTeamFacade.findAll();
        PrimeFaces context = PrimeFaces.current();
        context.ajax().update("formTeam:teams");
    }

    public String getEnableIcon(HemTeam selectedHemTeam) {
        return selectedHemTeam.isEnabled() ? "ui-icon ui-icon-closethick" : "ui-icon ui-icon-check";
    }

    public String getConfirmationMessage() {
        return (selectedHemTeam == null) ? ""
                : getResourceStringByKey("EntityDeletionConfirmationMessage") + " " + requestAction + " " + selectedHemTeam.getTeamName() + "?";
    }

    public HemTeam getSelectedHemTeam() {
        return selectedHemTeam;
    }

    public void setSelectedHemTeam(HemTeam selectedHemTeam) {
        if(selectedHemTeam != null){
            this.selectedHemTeam = selectedHemTeam;
            signatureEditor.setSelectedHemTeam(selectedHemTeam);
        }
    }

    public List<HemTeam> getHemTeamList() {
        return hemTeamList;
    }

    public void setHemTeamList(List<HemTeam> hemTeamList) {
        this.hemTeamList = hemTeamList;
    }

    public SignatureEditor getSignatureEditor() {
        return signatureEditor;
    }

    public void setSignatureEditor(SignatureEditor signatureEditor) {
        this.signatureEditor = signatureEditor;
    }

    public List<HemUser> getHemChangeImplementerList() {
        return hemChangeImplementerList;
    }
}
