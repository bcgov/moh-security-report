package ca.bc.gov.hlth.hem.web.admin;

import ca.bc.gov.hlth.hem.entity.HemEnvironment;
import ca.bc.gov.hlth.hem.entity.HemServer;
import ca.bc.gov.hlth.hem.facade.HemEnvironmentFacadeLocal;
import ca.bc.gov.hlth.hem.facade.HemServerFacadeLocal;
import ca.bc.gov.hlth.hem.security.Login;
import org.primefaces.PrimeFaces;
import org.primefaces.event.RowEditEvent;

import javax.annotation.PostConstruct;
import javax.ejb.EJB;
import javax.enterprise.context.SessionScoped;
import javax.inject.Inject;
import javax.inject.Named;
import java.io.Serializable;
import java.util.List;

@Named
@SessionScoped
public class ManageServers extends BaseManager implements Serializable {

    @EJB
    private HemServerFacadeLocal serverFacade;

    @EJB
    private HemEnvironmentFacadeLocal environmentFacade;

    @Inject
    private Login login;

    private HemServer selectedHemServer = new HemServer();
    private List<HemServer> hemServerList;
    private List<HemEnvironment> hemEnvironmentList;
    
    ManageServers(){
        super(ManageServers.class.getSimpleName());
    }

    @PostConstruct
    public void init() {
        logAction("accessing", "admin ManageServers");
        hemServerList = serverFacade.findAll();
        hemEnvironmentList = environmentFacade.findAll();
    }

    public void prepareNewEntity() {
        logAction("accessing", "server creation");
        selectedHemServer = new HemServer();
        PrimeFaces context = PrimeFaces.current();
        context.ajax().update("dialogForm:srvForm:srvPanel");
        context.executeScript("PF('newEntityDialog').show();");
        context.resetInputs("dialogForm:srvForm:srvPanel");
    }
    
    public void saveNewEntity(){
        serverFacade.create(selectedHemServer, login.getUserName());
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('newEntityDialog').hide();");
        addInfoMessage("Server added successfully");
        logAction("saving server", selectedHemServer.getServerName());
    }

    public void onRowEdit(RowEditEvent event) {
        selectedHemServer = (HemServer) event.getObject();
        logAction("updated server", selectedHemServer.getServerName());
        serverFacade.edit(selectedHemServer, login.getUserName());
        hemServerList = serverFacade.findAll();
        addInfoMessage("Server updated successfully");

        // To check for any error, the frontend is updated from here
        // not in the xhtml, by using "update" property.
        // This let the web form stays in edit mode.
        PrimeFaces context = PrimeFaces.current();
        context.executeScript("PF('servers').filter();");
        context.ajax().update("formServer:servers,growl");
    }

    public void callDeleteAction(HemServer selectedHemServer) {
        this.selectedHemServer = selectedHemServer;
        this.requestAction = ACTION_DELETE;
    }

    public void executeRequestedAction() {
        switch (requestAction) {
            case ACTION_DELETE:
                removeEntity();
                break;
        }
    }

    private void removeEntity() {
        if (!serverFacade.isServerInUse(selectedHemServer)) {
            serverFacade.remove(selectedHemServer, login.getUserName());
            hemServerList = serverFacade.findAll();
            addInfoMessage(String.format("%s deleted successfully", selectedHemServer.getServerName()));
            logAction("deleted server",selectedHemServer.getServerName());
        } else {
            addErrorMessage("Server bind to a task.  Deletion not possible.");
        }
    }

    public void updateData() {
        hemServerList = serverFacade.findAll();
        PrimeFaces context = PrimeFaces.current();
        context.ajax().update("formServer:servers");
    }

    public String getConfirmationMessage() {
        return (selectedHemServer == null) ? ""
                : getResourceStringByKey("EntityDeletionConfirmationMessage") + " " + requestAction + " " + selectedHemServer.getServerName() + "?";
    }

    public HemServer getSelectedHemServer() {
        return selectedHemServer;
    }

    public void setSelectedHemServer(HemServer selectedHemServer) {
        this.selectedHemServer = selectedHemServer;
    }

    public List<HemServer> getHemServerList() {
        return hemServerList;
    }

    public void setHemServerList(List<HemServer> hemServerList) {
        this.hemServerList = hemServerList;
    }

    public List<HemEnvironment> getHemEnvironmentList() {
        return hemEnvironmentList;
    }
}
